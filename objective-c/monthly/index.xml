<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:19:18Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zoontek/react-native-permissions</title>
    <updated>2023-10-01T02:19:18Z</updated>
    <id>tag:github.com,2023-10-01:/zoontek/react-native-permissions</id>
    <link href="https://github.com/zoontek/react-native-permissions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unified permissions API for React Native on iOS, Android and Windows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‚òùüèº react-native-permissions&lt;/h1&gt; &#xA;&lt;p&gt;An unified permissions API for React Native on iOS, Android and Windows.&lt;br&gt; (For Windows only builds 18362 and later are supported)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zoontek/react-native-permissions/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/dub/l/vibe-d.svg?style=for-the-badge&#34; alt=&#34;mit licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-native-permissions&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-permissions?style=for-the-badge&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-native-permissions&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/react-native-permissions.svg?label=downloads&amp;amp;style=for-the-badge&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.android.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Android-3ddc84.svg?logo=android&amp;amp;style=for-the-badge&#34; alt=&#34;platform - android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developer.apple.com/ios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-iOS-000.svg?logo=apple&amp;amp;style=for-the-badge&#34; alt=&#34;platform - ios&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/windows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Windows-0067b8.svg?logo=windows&amp;amp;style=for-the-badge&#34; alt=&#34;platform - windows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This library follows the React Native &lt;a href=&#34;https://github.com/reactwg/react-native-releases#releases-support-policy&#34;&gt;releases support policy&lt;/a&gt;.&lt;br&gt; It is supporting the &lt;strong&gt;latest version&lt;/strong&gt;, and the &lt;strong&gt;two previous minor series&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install --save react-native-permissions&#xA;# --- or ---&#xA;$ yarn add react-native-permissions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By default, no permissions are setuped. So first, require the &lt;code&gt;setup&lt;/code&gt; script in your &lt;code&gt;Podfile&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# with react-native &amp;gt;= 0.72&#xA;- # Resolve react_native_pods.rb with node to allow for hoisting&#xA;- require Pod::Executable.execute_command(&#39;node&#39;, [&#39;-p&#39;,&#xA;-   &#39;require.resolve(&#xA;-     &#34;react-native/scripts/react_native_pods.rb&#34;,&#xA;-     {paths: [process.argv[1]]},&#xA;-   )&#39;, __dir__]).strip&#xA;&#xA;+ def node_require(script)&#xA;+   # Resolve script with node to allow for hoisting&#xA;+   require Pod::Executable.execute_command(&#39;node&#39;, [&#39;-p&#39;,&#xA;+     &#34;require.resolve(&#xA;+       &#39;#{script}&#39;,&#xA;+       {paths: [process.argv[1]]},&#xA;+     )&#34;, __dir__]).strip&#xA;+ end&#xA;&#xA;+ node_require(&#39;react-native/scripts/react_native_pods.rb&#39;)&#xA;+ node_require(&#39;react-native-permissions/scripts/setup.rb&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# with react-native &amp;lt; 0.72&#xA;require_relative &#39;../node_modules/react-native/scripts/react_native_pods&#39;&#xA;require_relative &#39;../node_modules/@react-native-community/cli-platform-ios/native_modules&#39;&#xA;+ require_relative &#39;../node_modules/react-native-permissions/scripts/setup&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Then in the same file, add a &lt;code&gt;setup_permissions&lt;/code&gt; call with the wanted permissions:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# ‚Ä¶&#xA;&#xA;platform :ios, min_ios_version_supported&#xA;prepare_react_native_project!&#xA;&#xA;# ‚¨áÔ∏è uncomment wanted permissions (don&#39;t forget to remove the last comma)&#xA;setup_permissions([&#xA;  # &#39;AppTrackingTransparency&#39;,&#xA;  # &#39;BluetoothPeripheral&#39;,&#xA;  # &#39;Calendars&#39;,&#xA;  # &#39;Camera&#39;,&#xA;  # &#39;Contacts&#39;,&#xA;  # &#39;FaceID&#39;,&#xA;  # &#39;LocationAccuracy&#39;,&#xA;  # &#39;LocationAlways&#39;,&#xA;  # &#39;LocationWhenInUse&#39;,&#xA;  # &#39;MediaLibrary&#39;,&#xA;  # &#39;Microphone&#39;,&#xA;  # &#39;Motion&#39;,&#xA;  # &#39;Notifications&#39;,&#xA;  # &#39;PhotoLibrary&#39;,&#xA;  # &#39;PhotoLibraryAddOnly&#39;,&#xA;  # &#39;Reminders&#39;,&#xA;  # &#39;SpeechRecognition&#39;,&#xA;  # &#39;StoreKit&#39;&#xA;])&#xA;&#xA;# ‚Ä¶&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Then execute &lt;code&gt;pod install&lt;/code&gt; &lt;em&gt;(üìå&amp;nbsp;&amp;nbsp;Note that it must be re-executed each time you update this config)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Finally, update your &lt;code&gt;Info.plist&lt;/code&gt; with the wanted permissions usage descriptions:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&#xA;  &amp;lt;!-- üö® Keep only the permissions used in your app üö® --&amp;gt;&#xA;&#xA;  &amp;lt;key&amp;gt;NSAppleMusicUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSBluetoothAlwaysUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSBluetoothPeripheralUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSCalendarsUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSContactsUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSFaceIDUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationAlwaysAndWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationTemporaryUsageDescriptionDictionary&amp;lt;/key&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;YOUR-PURPOSE-KEY&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSMicrophoneUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSMotionUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSPhotoLibraryUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSPhotoLibraryAddUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSRemindersUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSSpeechRecognitionUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSSiriUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;  &amp;lt;key&amp;gt;NSUserTrackingUsageDescription&amp;lt;/key&amp;gt;&#xA;  &amp;lt;string&amp;gt;YOUR TEXT&amp;lt;/string&amp;gt;&#xA;&#xA;  &amp;lt;!-- ‚Ä¶ --&amp;gt;&#xA;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Add all wanted permissions to your app &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&amp;gt;&#xA;&#xA;  &amp;lt;!-- üö® Keep only the permissions used in your app üö® --&amp;gt;&#xA;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCEPT_HANDOVER&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_BACKGROUND_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_MEDIA_LOCATION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACTIVITY_RECOGNITION&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;com.android.voicemail.permission.ADD_VOICEMAIL&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ANSWER_PHONE_CALLS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADVERTISE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BODY_SENSORS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BODY_SENSORS_BACKGROUND&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.CALL_PHONE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.GET_ACCOUNTS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.NEARBY_WIFI_DEVICES&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.POST_NOTIFICATIONS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.PROCESS_OUTGOING_CALLS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_CALENDAR&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_CALL_LOG&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_CONTACTS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_MEDIA_AUDIO&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_MEDIA_IMAGES&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_MEDIA_VIDEO&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_PHONE_NUMBERS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_PHONE_STATE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_SMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECEIVE_MMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECEIVE_SMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECEIVE_WAP_PUSH&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECORD_AUDIO&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.SEND_SMS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.USE_SIP&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.UWB_RANGING&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_CALENDAR&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_CALL_LOG&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_CONTACTS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;&#xA;  &amp;lt;!-- ‚Ä¶ --&amp;gt;&#xA;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Open the project solution file from the &lt;code&gt;windows&lt;/code&gt; folder. In the app project open &lt;code&gt;Package.appxmanifest&lt;/code&gt; file. From there you can select which capabilites you want your app to support.&lt;/p&gt; &#xA;&lt;h2&gt;üÜò Manual linking&lt;/h2&gt; &#xA;&lt;p&gt;Because this package targets recent React Native versions, you probably don&#39;t need to link it manually. But if you have a special case, follow these additional instructions:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;üëÄ See manual linking instructions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;iOS&lt;/h3&gt; &#xA; &lt;p&gt;Add this line to your &lt;code&gt;ios/Podfile&lt;/code&gt; file, then run &lt;code&gt;pod install&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;target &#39;YourAwesomeProject&#39; do&#xA;  # ‚Ä¶&#xA;  pod &#39;RNPermissions&#39;, :path =&amp;gt; &#39;../node_modules/react-native-permissions&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Android&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add the following lines to &lt;code&gt;android/settings.gradle&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;include &#39;:react-native-permissions&#39;&#xA;project(&#39;:react-native-permissions&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-permissions/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Add the implementation line to the dependencies in &lt;code&gt;android/app/build.gradle&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {&#xA;  // ...&#xA;  implementation project(&#39;:react-native-permissions&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Add the import and link the package in &lt;code&gt;MainApplication.java&lt;/code&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.zoontek.rnpermissions.RNPermissionsPackage; // &amp;lt;- add the RNPermissionsPackage import&#xA;&#xA;public class MainApplication extends Application implements ReactApplication {&#xA;&#xA;  // ‚Ä¶&#xA;&#xA;  @Override&#xA;  protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;    @SuppressWarnings(&#34;UnnecessaryLocalVariable&#34;)&#xA;    List&amp;lt;ReactPackage&amp;gt; packages = new PackageList(this).getPackages();&#xA;    // ‚Ä¶&#xA;    packages.add(new RNPermissionsPackage());&#xA;    return packages;&#xA;  }&#xA;&#xA;  // ‚Ä¶&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Windows&lt;/h3&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;In &lt;code&gt;windows/myapp.sln&lt;/code&gt; add the &lt;code&gt;RNCConfig&lt;/code&gt; project to your solution:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open the solution in Visual Studio 2019&lt;/li&gt; &#xA;  &lt;li&gt;Right-click Solution icon in Solution Explorer &amp;gt; Add &amp;gt; Existing Project&lt;/li&gt; &#xA;  &lt;li&gt;Select &lt;code&gt;node_modules\react-native-permissions\windows\RNPermissions\RNPermissions.vcxproj&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;In &lt;code&gt;windows/myapp/myapp.vcxproj&lt;/code&gt; ad a reference to &lt;code&gt;RNPermissions&lt;/code&gt; to your main application project. From Visual Studio 2019:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Right-click main application project &amp;gt; Add &amp;gt; Reference...&lt;/li&gt; &#xA;  &lt;li&gt;Check &lt;code&gt;RNPermissions&lt;/code&gt; from Solution Projects.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;In &lt;code&gt;pch.h&lt;/code&gt; add &lt;code&gt;#include &#34;winrt/RNPermissions.h&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;In &lt;code&gt;app.cpp&lt;/code&gt; add &lt;code&gt;PackageProviders().Append(winrt::RNPermissions::ReactPackageProvider());&lt;/code&gt; before &lt;code&gt;InitializeComponent();&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Understanding permission flow&lt;/h2&gt; &#xA;&lt;p&gt;As permissions are not handled in the same way on iOS and Android, this library provides an abstraction over the two platforms&#39; behaviors. To understand it a little better, take a look to these two flowcharts:&lt;/p&gt; &#xA;&lt;h3&gt;iOS flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì&#xA;   ‚îÉ check(PERMISSIONS.IOS.CAMERA) ‚îÉ&#xA;   ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ&#xA;                   ‚îÇ&#xA;       Is the feature available&#xA;           on this device&amp;nbsp;?&#xA;                   ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                   ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                ‚ïë YES ‚ïë                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                 ‚îÇ RESULTS.UNAVAILABLE ‚îÇ&#xA;                   ‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;           Is the permission&#xA;             requestable&amp;nbsp;?&#xA;                   ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                   ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                ‚ïë YES ‚ïë                  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                  ‚îÇ RESULTS.BLOCKED / ‚îÇ&#xA;                   ‚îÇ                     ‚îÇ RESULTS.LIMITED / ‚îÇ&#xA;                   ‚îÇ                     ‚îÇ  RESULTS.GRANTED  ‚îÇ&#xA;                   ‚ñº                     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;          ‚îÇ RESULTS.DENIED ‚îÇ&#xA;          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;                   ‚îÇ&#xA;                   ‚ñº&#xA;  ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì&#xA;  ‚îÉ request(PERMISSIONS.IOS.CAMERA) ‚îÉ&#xA;  ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ&#xA;                   ‚îÇ&#xA;         Does the user accept&#xA;            the request&amp;nbsp;?&#xA;                   ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                   ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                ‚ïë YES ‚ïë                   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                   ‚îÇ RESULTS.BLOCKED ‚îÇ&#xA;                   ‚îÇ                      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;                   ‚ñº&#xA;          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;          ‚îÇ RESULTS.GRANTED ‚îÇ&#xA;          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt; ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì&#xA; ‚îÉ check(PERMISSIONS.ANDROID.CAMERA) ‚îÉ&#xA; ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ&#xA;                   ‚îÇ&#xA;       Is the feature available&#xA;           on this device&amp;nbsp;?&#xA;                   ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                   ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                ‚ïë YES ‚ïë                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                 ‚îÇ RESULTS.UNAVAILABLE ‚îÇ&#xA;                   ‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;           Is the permission&#xA;           already granted ?&#xA;                   ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë YES ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                   ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù             ‚îÇ&#xA;                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó                             ‚ñº&#xA;                ‚ïë NO ‚ïë                   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù                   ‚îÇ  RESULTS.GRANTED  ‚îÇ&#xA;                   ‚îÇ                     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;                   ‚ñº&#xA;          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;          ‚îÇ RESULTS.DENIED ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                       ‚îÇ&#xA;                   ‚îÇ                               ‚îÇ&#xA;                   ‚ñº                               ‚îÇ&#xA;‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì         ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;‚îÉ request(PERMISSIONS.ANDROID.CAMERA) ‚îÉ         ‚ïë YES ‚ïë&#xA;‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù&#xA;                   ‚îÇ                               ‚îÇ&#xA;         Does the user accept                      ‚îÇ&#xA;            the request&amp;nbsp;?                          ‚îÇ&#xA;                   ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó      Is the permission&#xA;                   ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ still requestable&amp;nbsp;?&#xA;                   ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                         ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                ‚ïë YES ‚ïë                         ‚ïë NO ‚ïë&#xA;                ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                         ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù&#xA;                   ‚îÇ                               ‚îÇ&#xA;                   ‚ñº                               ‚ñº&#xA;          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê             ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;          ‚îÇ RESULTS.GRANTED ‚îÇ             ‚îÇ RESULTS.BLOCKED ‚îÇ&#xA;          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò             ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì&#xA;   ‚îÉ check(PERMISSIONS.WINDOWS.WEBCAM) ‚îÉ&#xA;   ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ&#xA;                     ‚îÇ&#xA;         Is the feature available&#xA;              on this device&amp;nbsp;?&#xA;                     ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                     ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                  ‚ïë YES ‚ïë                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                 ‚îÇ RESULTS.UNAVAILABLE ‚îÇ&#xA;                     ‚îÇ                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;             Is the permission&#xA;               requestable&amp;nbsp;?&#xA;                     ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                     ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                  ‚ïë YES ‚ïë                  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                  ‚îÇ RESULTS.BLOCKED / ‚îÇ&#xA;                     ‚îÇ                     ‚îÇ  RESULTS.GRANTED  ‚îÇ&#xA;                     ‚ñº                     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;            ‚îÇ RESULTS.DENIED ‚îÇ&#xA;            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;                     ‚îÇ&#xA;                     ‚ñº&#xA;  ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì&#xA;  ‚îÉ request(PERMISSIONS.WINDOWS.WEBCAM) ‚îÉ&#xA;  ‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ&#xA;                     ‚îÇ&#xA;           Does the user accept&#xA;              the request&amp;nbsp;?&#xA;                     ‚îÇ           ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïó&#xA;                     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïë NO ‚ïë‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                     ‚îÇ           ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù              ‚îÇ&#xA;                  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó                            ‚ñº&#xA;                  ‚ïë YES ‚ïë                   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;                  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                   ‚îÇ RESULTS.BLOCKED ‚îÇ&#xA;                     ‚îÇ                      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;                     ‚ñº&#xA;            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê&#xA;            ‚îÇ RESULTS.GRANTED ‚îÇ&#xA;            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Supported permissions&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Android permissions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;PERMISSIONS.ANDROID.ACCEPT_HANDOVER;&#xA;PERMISSIONS.ANDROID.ACCESS_BACKGROUND_LOCATION;&#xA;PERMISSIONS.ANDROID.ACCESS_COARSE_LOCATION;&#xA;PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION;&#xA;PERMISSIONS.ANDROID.ACCESS_MEDIA_LOCATION;&#xA;PERMISSIONS.ANDROID.ACTIVITY_RECOGNITION;&#xA;PERMISSIONS.ANDROID.ADD_VOICEMAIL;&#xA;PERMISSIONS.ANDROID.ANSWER_PHONE_CALLS;&#xA;PERMISSIONS.ANDROID.BLUETOOTH_ADVERTISE;&#xA;PERMISSIONS.ANDROID.BLUETOOTH_CONNECT;&#xA;PERMISSIONS.ANDROID.BLUETOOTH_SCAN;&#xA;PERMISSIONS.ANDROID.BODY_SENSORS;&#xA;PERMISSIONS.ANDROID.BODY_SENSORS_BACKGROUND;&#xA;PERMISSIONS.ANDROID.CALL_PHONE;&#xA;PERMISSIONS.ANDROID.CAMERA;&#xA;PERMISSIONS.ANDROID.GET_ACCOUNTS;&#xA;PERMISSIONS.ANDROID.NEARBY_WIFI_DEVICES;&#xA;PERMISSIONS.ANDROID.POST_NOTIFICATIONS;&#xA;PERMISSIONS.ANDROID.PROCESS_OUTGOING_CALLS;&#xA;PERMISSIONS.ANDROID.READ_CALENDAR;&#xA;PERMISSIONS.ANDROID.READ_CALL_LOG;&#xA;PERMISSIONS.ANDROID.READ_CONTACTS;&#xA;PERMISSIONS.ANDROID.READ_EXTERNAL_STORAGE;&#xA;PERMISSIONS.ANDROID.READ_MEDIA_AUDIO;&#xA;PERMISSIONS.ANDROID.READ_MEDIA_IMAGES;&#xA;PERMISSIONS.ANDROID.READ_MEDIA_VIDEO;&#xA;PERMISSIONS.ANDROID.READ_PHONE_NUMBERS;&#xA;PERMISSIONS.ANDROID.READ_PHONE_STATE;&#xA;PERMISSIONS.ANDROID.READ_SMS;&#xA;PERMISSIONS.ANDROID.RECEIVE_MMS;&#xA;PERMISSIONS.ANDROID.RECEIVE_SMS;&#xA;PERMISSIONS.ANDROID.RECEIVE_WAP_PUSH;&#xA;PERMISSIONS.ANDROID.RECORD_AUDIO;&#xA;PERMISSIONS.ANDROID.SEND_SMS;&#xA;PERMISSIONS.ANDROID.USE_SIP;&#xA;PERMISSIONS.ANDROID.UWB_RANGING;&#xA;PERMISSIONS.ANDROID.WRITE_CALENDAR;&#xA;PERMISSIONS.ANDROID.WRITE_CALL_LOG;&#xA;PERMISSIONS.ANDROID.WRITE_CONTACTS;&#xA;PERMISSIONS.ANDROID.WRITE_EXTERNAL_STORAGE;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;iOS permissions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;PERMISSIONS.IOS.APP_TRACKING_TRANSPARENCY;&#xA;PERMISSIONS.IOS.BLUETOOTH_PERIPHERAL;&#xA;PERMISSIONS.IOS.CALENDARS;&#xA;PERMISSIONS.IOS.CAMERA;&#xA;PERMISSIONS.IOS.CONTACTS;&#xA;PERMISSIONS.IOS.FACE_ID;&#xA;PERMISSIONS.IOS.LOCATION_ALWAYS;&#xA;PERMISSIONS.IOS.LOCATION_WHEN_IN_USE;&#xA;PERMISSIONS.IOS.MEDIA_LIBRARY;&#xA;PERMISSIONS.IOS.MICROPHONE;&#xA;PERMISSIONS.IOS.MOTION;&#xA;PERMISSIONS.IOS.PHOTO_LIBRARY;&#xA;PERMISSIONS.IOS.PHOTO_LIBRARY_ADD_ONLY;&#xA;PERMISSIONS.IOS.REMINDERS;&#xA;PERMISSIONS.IOS.SIRI;&#xA;PERMISSIONS.IOS.SPEECH_RECOGNITION;&#xA;PERMISSIONS.IOS.STOREKIT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Windows permissions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;PERMISSIONS.WINDOWS.ACCESSORY_MANAGER;&#xA;PERMISSIONS.WINDOWS.ACTIVITY;&#xA;PERMISSIONS.WINDOWS.ALLOW_ELEVATION;&#xA;PERMISSIONS.WINDOWS.ALL_APP_MODS;&#xA;PERMISSIONS.WINDOWS.ALL_JOYN;&#xA;PERMISSIONS.WINDOWS.APPOINTMENTS;&#xA;PERMISSIONS.WINDOWS.APPOINTMENTS_SYSTEM;&#xA;PERMISSIONS.WINDOWS.APP_BROADCAST_SERVICES;&#xA;PERMISSIONS.WINDOWS.APP_CAPTURE_SERVICES;&#xA;PERMISSIONS.WINDOWS.APP_CAPTURE_SETTINGS;&#xA;PERMISSIONS.WINDOWS.APP_DIAGNOSTICS;&#xA;PERMISSIONS.WINDOWS.APP_LICENSING;&#xA;PERMISSIONS.WINDOWS.AUDIO_DEVICE_CONFIGURATION;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_MEDIA_PLAYBACK;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_MEDIA_RECORDING;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_SPATIAL_PERCEPTION;&#xA;PERMISSIONS.WINDOWS.BACKGROUND_VOIP;&#xA;PERMISSIONS.WINDOWS.BLOCKED_CHAT_MESSAGES;&#xA;PERMISSIONS.WINDOWS.BLUETOOTH;&#xA;PERMISSIONS.WINDOWS.BROAD_FILE_SYSTEM_ACCESS;&#xA;PERMISSIONS.WINDOWS.CAMERA_PROCESSING_EXTENSION;&#xA;PERMISSIONS.WINDOWS.CELLULAR_DEVICE_CONTROL;&#xA;PERMISSIONS.WINDOWS.CELLULAR_DEVICE_IDENTITY;&#xA;PERMISSIONS.WINDOWS.CELLULAR_MESSAGING;&#xA;PERMISSIONS.WINDOWS.CHAT_SYSTEM;&#xA;PERMISSIONS.WINDOWS.CODE_GENERATION;&#xA;PERMISSIONS.WINDOWS.CONFIRM_APP_CLOSE;&#xA;PERMISSIONS.WINDOWS.CONTACTS;&#xA;PERMISSIONS.WINDOWS.CONTACTS_SYSTEM;&#xA;PERMISSIONS.WINDOWS.CORTANA_PERMISSIONS;&#xA;PERMISSIONS.WINDOWS.CORTANA_SPEECH_ACCESSORY;&#xA;PERMISSIONS.WINDOWS.CUSTOM_INSTALL_ACTIONS;&#xA;PERMISSIONS.WINDOWS.DEVELOPMENT_MODE_NETWORK;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_DM_ACCOUNT;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_EMAIL_ACCOUNT;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_FOUNDATION;&#xA;PERMISSIONS.WINDOWS.DEVICE_MANAGEMENT_WAP_SECURITY_POLICIES;&#xA;PERMISSIONS.WINDOWS.DEVICE_PORTAL_PROVIDER;&#xA;PERMISSIONS.WINDOWS.DEVICE_UNLOCK;&#xA;PERMISSIONS.WINDOWS.DOCUMENTS_LIBRARY;&#xA;PERMISSIONS.WINDOWS.DUAL_SIM_TILES;&#xA;PERMISSIONS.WINDOWS.EMAIL;&#xA;PERMISSIONS.WINDOWS.EMAIL_SYSTEM;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_AUTHENTICATION;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_CLOUD_S_S_O;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_DATA_POLICY;&#xA;PERMISSIONS.WINDOWS.ENTERPRISE_DEVICE_LOCKDOWN;&#xA;PERMISSIONS.WINDOWS.EXPANDED_RESOURCES;&#xA;PERMISSIONS.WINDOWS.EXTENDED_BACKGROUND_TASK_TIME;&#xA;PERMISSIONS.WINDOWS.EXTENDED_EXECUTION_BACKGROUND_AUDIO;&#xA;PERMISSIONS.WINDOWS.EXTENDED_EXECUTION_CRITICAL;&#xA;PERMISSIONS.WINDOWS.EXTENDED_EXECUTION_UNCONSTRAINED;&#xA;PERMISSIONS.WINDOWS.FIRST_SIGN_IN_SETTINGS;&#xA;PERMISSIONS.WINDOWS.GAME_BAR_SERVICES;&#xA;PERMISSIONS.WINDOWS.GAME_LIST;&#xA;PERMISSIONS.WINDOWS.GAME_MONITOR;&#xA;PERMISSIONS.WINDOWS.GAZE_INPUT;&#xA;PERMISSIONS.WINDOWS.GLOBAL_MEDIA_CONTROL;&#xA;PERMISSIONS.WINDOWS.HUMANINTERFACEDEVICE;&#xA;PERMISSIONS.WINDOWS.INPUT_FOREGROUND_OBSERVATION;&#xA;PERMISSIONS.WINDOWS.INPUT_INJECTION_BROKERED;&#xA;PERMISSIONS.WINDOWS.INPUT_OBSERVATION;&#xA;PERMISSIONS.WINDOWS.INPUT_SUPPRESSION;&#xA;PERMISSIONS.WINDOWS.INTERNET_CLIENT;&#xA;PERMISSIONS.WINDOWS.INTERNET_CLIENT_SERVER;&#xA;PERMISSIONS.WINDOWS.INTEROP_SERVICES;&#xA;PERMISSIONS.WINDOWS.IOT;&#xA;PERMISSIONS.WINDOWS.LOCAL_SYSTEM_SERVICES;&#xA;PERMISSIONS.WINDOWS.LOCATION;&#xA;PERMISSIONS.WINDOWS.LOCATION_HISTORY;&#xA;PERMISSIONS.WINDOWS.LOCATION_SYSTEM;&#xA;PERMISSIONS.WINDOWS.LOW_LEVEL;&#xA;PERMISSIONS.WINDOWS.LOW_LEVEL_DEVICES;&#xA;PERMISSIONS.WINDOWS.MICROPHONE;&#xA;PERMISSIONS.WINDOWS.MOBILE;&#xA;PERMISSIONS.WINDOWS.MODIFIABLE_APP;&#xA;PERMISSIONS.WINDOWS.MUSIC_LIBRARY;&#xA;PERMISSIONS.WINDOWS.NETWORKING_VPN_PROVIDER;&#xA;PERMISSIONS.WINDOWS.NETWORK_CONNECTION_MANAGER_PROVISIONING;&#xA;PERMISSIONS.WINDOWS.NETWORK_DATA_PLAN_PROVISIONING;&#xA;PERMISSIONS.WINDOWS.NETWORK_DATA_USAGE_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.OEM_DEPLOYMENT;&#xA;PERMISSIONS.WINDOWS.OEM_PUBLIC_DIRECTORY;&#xA;PERMISSIONS.WINDOWS.ONE_PROCESS_VOIP;&#xA;PERMISSIONS.WINDOWS.OPTICAL;&#xA;PERMISSIONS.WINDOWS.PACKAGED_SERVICES;&#xA;PERMISSIONS.WINDOWS.PACKAGES_SERVICES;&#xA;PERMISSIONS.WINDOWS.PACKAGE_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.PACKAGE_POLICY_SYSTEM;&#xA;PERMISSIONS.WINDOWS.PACKAGE_QUERY;&#xA;PERMISSIONS.WINDOWS.PACKAGE_WRITE_REDIRECTION_COMPATIBILITY_SHIM;&#xA;PERMISSIONS.WINDOWS.PHONE_CALL;&#xA;PERMISSIONS.WINDOWS.PHONE_CALL_HISTORY;&#xA;PERMISSIONS.WINDOWS.PHONE_CALL_HISTORY_SYSTEM;&#xA;PERMISSIONS.WINDOWS.PHONE_LINE_TRANSPORT_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.PICTURES_LIBRARY;&#xA;PERMISSIONS.WINDOWS.POINT_OF_SERVICE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_INK_WORKSPACE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_PEN_WORKSPACE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_STORE;&#xA;PERMISSIONS.WINDOWS.PREVIEW_UI_COMPOSITION;&#xA;PERMISSIONS.WINDOWS.PRIVATE_NETWORK_CLIENT_SERVER;&#xA;PERMISSIONS.WINDOWS.PROTECTED_APP;&#xA;PERMISSIONS.WINDOWS.PROXIMITY;&#xA;PERMISSIONS.WINDOWS.RADIOS;&#xA;PERMISSIONS.WINDOWS.RECORDED_CALLS_FOLDER;&#xA;PERMISSIONS.WINDOWS.REMOTE_PASSPORT_AUTHENTICATION;&#xA;PERMISSIONS.WINDOWS.REMOTE_SYSTEM;&#xA;PERMISSIONS.WINDOWS.REMOVABLE_STORAGE;&#xA;PERMISSIONS.WINDOWS.RESCAP;&#xA;PERMISSIONS.WINDOWS.RUN_FULL_TRUST;&#xA;PERMISSIONS.WINDOWS.SCREEN_DUPLICATION;&#xA;PERMISSIONS.WINDOWS.SECONDARY_AUTHENTICATION_FACTOR;&#xA;PERMISSIONS.WINDOWS.SECURE_ASSESSMENT;&#xA;PERMISSIONS.WINDOWS.SERIALCOMMUNICATION;&#xA;PERMISSIONS.WINDOWS.SHARED_USER_CERTIFICATES;&#xA;PERMISSIONS.WINDOWS.SLAPI_QUERY_LICENSE_VALUE;&#xA;PERMISSIONS.WINDOWS.SMBIOS;&#xA;PERMISSIONS.WINDOWS.SMS_SEND;&#xA;PERMISSIONS.WINDOWS.SPATIAL_PERCEPTION;&#xA;PERMISSIONS.WINDOWS.START_SCREEN_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.STORE_LICENSE_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.SYSTEM_MANAGEMENT;&#xA;PERMISSIONS.WINDOWS.TARGETED_CONTENT;&#xA;PERMISSIONS.WINDOWS.TEAM_EDITION_DEVICE_CREDENTIAL;&#xA;PERMISSIONS.WINDOWS.TEAM_EDITION_EXPERIENCE;&#xA;PERMISSIONS.WINDOWS.TEAM_EDITION_VIEW;&#xA;PERMISSIONS.WINDOWS.UAP;&#xA;PERMISSIONS.WINDOWS.UI_AUTOMATION;&#xA;PERMISSIONS.WINDOWS.UNVIRTUALIZED_RESOURCES;&#xA;PERMISSIONS.WINDOWS.USB;&#xA;PERMISSIONS.WINDOWS.USER_ACCOUNT_INFORMATION;&#xA;PERMISSIONS.WINDOWS.USER_DATA_ACCOUNTS_PROVIDER;&#xA;PERMISSIONS.WINDOWS.USER_DATA_SYSTEM;&#xA;PERMISSIONS.WINDOWS.USER_PRINCIPAL_NAME;&#xA;PERMISSIONS.WINDOWS.USER_SYSTEM_ID;&#xA;PERMISSIONS.WINDOWS.VIDEOS_LIBRARY;&#xA;PERMISSIONS.WINDOWS.VOIP_CALL;&#xA;PERMISSIONS.WINDOWS.WALLET_SYSTEM;&#xA;PERMISSIONS.WINDOWS.WEBCAM;&#xA;PERMISSIONS.WINDOWS.WIFI_CONTROL;&#xA;PERMISSIONS.WINDOWS.XBOX_ACCESSORY_MANAGEMENT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Permissions statuses&lt;/h3&gt; &#xA;&lt;p&gt;Permission checks and requests resolve into one of these statuses:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Return value&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.UNAVAILABLE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This feature is not available (on this device / in this context)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.DENIED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission has not been requested / is denied but requestable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.GRANTED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission is granted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.LIMITED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission is granted but with limitations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESULTS.BLOCKED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The permission is denied and not requestable anymore&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// type used in usage examples&#xA;type PermissionStatus = &#39;unavailable&#39; | &#39;denied&#39; | &#39;limited&#39; | &#39;granted&#39; | &#39;blocked&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;check&lt;/h4&gt; &#xA;&lt;p&gt;Check one permission status.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;‚ö†Ô∏è&amp;nbsp;&amp;nbsp;Android will never return &lt;code&gt;blocked&lt;/code&gt; after a &lt;code&gt;check&lt;/code&gt;, you have to request the permission to get the info.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function check(permission: string): Promise&amp;lt;PermissionStatus&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {check, PERMISSIONS, RESULTS} from &#39;react-native-permissions&#39;;&#xA;&#xA;check(PERMISSIONS.IOS.LOCATION_ALWAYS)&#xA;  .then((result) =&amp;gt; {&#xA;    switch (result) {&#xA;      case RESULTS.UNAVAILABLE:&#xA;        console.log(&#39;This feature is not available (on this device / in this context)&#39;);&#xA;        break;&#xA;      case RESULTS.DENIED:&#xA;        console.log(&#39;The permission has not been requested / is denied but requestable&#39;);&#xA;        break;&#xA;      case RESULTS.LIMITED:&#xA;        console.log(&#39;The permission is limited: some actions are possible&#39;);&#xA;        break;&#xA;      case RESULTS.GRANTED:&#xA;        console.log(&#39;The permission is granted&#39;);&#xA;        break;&#xA;      case RESULTS.BLOCKED:&#xA;        console.log(&#39;The permission is denied and not requestable anymore&#39;);&#xA;        break;&#xA;    }&#xA;  })&#xA;  .catch((error) =&amp;gt; {&#xA;    // ‚Ä¶&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;request&lt;/h4&gt; &#xA;&lt;p&gt;Request one permission.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;rationale&lt;/code&gt; is only available and used on Android. It can be a native alert (a &lt;code&gt;Rationale&lt;/code&gt; object) or a custom implementation (that resolves with a &lt;code&gt;boolean&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Rationale = {&#xA;  title: string;&#xA;  message: string;&#xA;  buttonPositive?: string;&#xA;  buttonNegative?: string;&#xA;  buttonNeutral?: string;&#xA;};&#xA;&#xA;function request(&#xA;  permission: string,&#xA;  rationale?: Rationale | (() =&amp;gt; Promise&amp;lt;boolean&amp;gt;),&#xA;): Promise&amp;lt;PermissionStatus&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {request, PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;request(PERMISSIONS.IOS.LOCATION_ALWAYS).then((result) =&amp;gt; {&#xA;  // ‚Ä¶&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;checkNotifications&lt;/h4&gt; &#xA;&lt;p&gt;Check notifications permission status and get notifications settings values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type NotificationSettings = {&#xA;  // properties only available on iOS&#xA;  // unavailable settings will not be included in the response object&#xA;  alert?: boolean;&#xA;  badge?: boolean;&#xA;  sound?: boolean;&#xA;  carPlay?: boolean;&#xA;  criticalAlert?: boolean;&#xA;  provisional?: boolean;&#xA;  providesAppSettings?: boolean;&#xA;  lockScreen?: boolean;&#xA;  notificationCenter?: boolean;&#xA;};&#xA;&#xA;function checkNotifications(): Promise&amp;lt;{&#xA;  status: PermissionStatus;&#xA;  settings: NotificationSettings;&#xA;}&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {checkNotifications} from &#39;react-native-permissions&#39;;&#xA;&#xA;checkNotifications().then(({status, settings}) =&amp;gt; {&#xA;  // ‚Ä¶&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;requestNotifications&lt;/h4&gt; &#xA;&lt;p&gt;Request notifications permission status and get notifications settings values.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have to &lt;a href=&#34;https://github.com/zoontek/react-native-permissions/releases/tag/3.5.0&#34;&gt;target at least SDK 33&lt;/a&gt; to perform request on Android 13+. The permission is always granted for prior versions.&lt;/li&gt; &#xA; &lt;li&gt;You cannot request notifications permissions on Windows. Disabling / enabling them can only be done through the App Settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// only used on iOS&#xA;type NotificationOption =&#xA;  | &#39;alert&#39;&#xA;  | &#39;badge&#39;&#xA;  | &#39;sound&#39;&#xA;  | &#39;criticalAlert&#39;&#xA;  | &#39;carPlay&#39;&#xA;  | &#39;provisional&#39;&#xA;  | &#39;providesAppSettings&#39;;&#xA;&#xA;type NotificationSettings = {&#xA;  // properties only available on iOS&#xA;  // unavailable settings will not be included in the response object&#xA;  alert?: boolean;&#xA;  badge?: boolean;&#xA;  sound?: boolean;&#xA;  carPlay?: boolean;&#xA;  criticalAlert?: boolean;&#xA;  provisional?: boolean;&#xA;  providesAppSettings?: boolean;&#xA;  lockScreen?: boolean;&#xA;  notificationCenter?: boolean;&#xA;};&#xA;&#xA;function requestNotifications(options: NotificationOption[]): Promise&amp;lt;{&#xA;  status: PermissionStatus;&#xA;  settings: NotificationSettings;&#xA;}&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {requestNotifications} from &#39;react-native-permissions&#39;;&#xA;&#xA;requestNotifications([&#39;alert&#39;, &#39;sound&#39;]).then(({status, settings}) =&amp;gt; {&#xA;  // ‚Ä¶&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;checkMultiple&lt;/h4&gt; &#xA;&lt;p&gt;Check multiples permissions in parallel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;‚ö†Ô∏è&amp;nbsp;&amp;nbsp;Android will never return &lt;code&gt;blocked&lt;/code&gt; after a &lt;code&gt;check&lt;/code&gt;, you have to request the permission to get the info.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function checkMultiple&amp;lt;P extends Permission[]&amp;gt;(&#xA;  permissions: P,&#xA;): Promise&amp;lt;Record&amp;lt;P[number], PermissionStatus&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {checkMultiple, PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;checkMultiple([PERMISSIONS.IOS.CAMERA, PERMISSIONS.IOS.FACE_ID]).then((statuses) =&amp;gt; {&#xA;  console.log(&#39;Camera&#39;, statuses[PERMISSIONS.IOS.CAMERA]);&#xA;  console.log(&#39;FaceID&#39;, statuses[PERMISSIONS.IOS.FACE_ID]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;requestMultiple&lt;/h4&gt; &#xA;&lt;p&gt;Request multiple permissions in sequence.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function requestMultiple&amp;lt;P extends Permission[]&amp;gt;(&#xA;  permissions: P,&#xA;): Promise&amp;lt;Record&amp;lt;P[number], PermissionStatus&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {requestMultiple, PERMISSIONS} from &#39;react-native-permissions&#39;;&#xA;&#xA;requestMultiple([PERMISSIONS.IOS.CAMERA, PERMISSIONS.IOS.FACE_ID]).then((statuses) =&amp;gt; {&#xA;  console.log(&#39;Camera&#39;, statuses[PERMISSIONS.IOS.CAMERA]);&#xA;  console.log(&#39;FaceID&#39;, statuses[PERMISSIONS.IOS.FACE_ID]);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;openSettings&lt;/h4&gt; &#xA;&lt;p&gt;Open application settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function openSettings(): Promise&amp;lt;void&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {openSettings} from &#39;react-native-permissions&#39;;&#xA;&#xA;openSettings().catch(() =&amp;gt; console.warn(&#39;cannot open settings&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;openLimitedPhotoLibraryPicker (iOS 14+)&lt;/h4&gt; &#xA;&lt;p&gt;Open a picker to update the photo selection when &lt;code&gt;PhotoLibrary&lt;/code&gt; permission is &lt;code&gt;limited&lt;/code&gt;. This will reject if unsupported or if full permission is already &lt;code&gt;granted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;function openLimitedPhotoLibraryPicker(): Promise&amp;lt;void&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {openLimitedPhotoLibraryPicker} from &#39;react-native-permissions&#39;;&#xA;&#xA;openLimitedPhotoLibraryPicker().catch(() =&amp;gt; {&#xA;  console.warn(&#39;Cannot open photo library picker&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;checkLocationAccuracy (iOS 14+)&lt;/h4&gt; &#xA;&lt;p&gt;When &lt;code&gt;LocationAlways&lt;/code&gt; or &lt;code&gt;LocationWhenInUse&lt;/code&gt; is &lt;code&gt;granted&lt;/code&gt;, allow checking if the user share his precise location.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type LocationAccuracy = &#39;full&#39; | &#39;reduced&#39;;&#xA;&#xA;function checkLocationAccuracy(): Promise&amp;lt;LocationAccuracy&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {checkLocationAccuracy} from &#39;react-native-permissions&#39;;&#xA;&#xA;checkLocationAccuracy()&#xA;  .then((accuracy) =&amp;gt; console.log(`Location accuracy is: ${accuracy}`))&#xA;  .catch(() =&amp;gt; console.warn(&#39;Cannot check location accuracy&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;requestLocationAccuracy (iOS 14+)&lt;/h4&gt; &#xA;&lt;p&gt;When &lt;code&gt;LocationAlways&lt;/code&gt; or &lt;code&gt;LocationWhenInUse&lt;/code&gt; is &lt;code&gt;granted&lt;/code&gt;, allow requesting the user for his precise location. Will resolve immediately if &lt;code&gt;full&lt;/code&gt; accuracy is already authorized.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type LocationAccuracyOptions = {&#xA;  purposeKey: string;&#xA;};&#xA;&#xA;type LocationAccuracy = &#39;full&#39; | &#39;reduced&#39;;&#xA;&#xA;function requestLocationAccuracy(options: LocationAccuracyOptions): Promise&amp;lt;LocationAccuracy&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {requestLocationAccuracy} from &#39;react-native-permissions&#39;;&#xA;&#xA;requestLocationAccuracy({purposeKey: &#39;YOUR-PURPOSE-KEY&#39;})&#xA;  .then((accuracy) =&amp;gt; console.log(`Location accuracy is: ${accuracy}`))&#xA;  .catch(() =&amp;gt; console.warn(&#39;Cannot request location accuracy&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;About iOS &lt;code&gt;LOCATION_ALWAYS&lt;/code&gt; permission&lt;/h3&gt; &#xA;&lt;p&gt;If you are requesting &lt;code&gt;PERMISSIONS.IOS.LOCATION_ALWAYS&lt;/code&gt;, there won&#39;t be a &lt;code&gt;Always Allow&lt;/code&gt; button in the system dialog. Only &lt;code&gt;Allow Once&lt;/code&gt;, &lt;code&gt;Allow While Using App&lt;/code&gt; and &lt;code&gt;Don&#39;t Allow&lt;/code&gt;. This is expected behaviour, check the &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/cllocationmanager/1620551-requestalwaysauthorization#3578736&#34;&gt;Apple Developer Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When requesting &lt;code&gt;PERMISSIONS.IOS.LOCATION_ALWAYS&lt;/code&gt;, if the user choose &lt;code&gt;Allow While Using App&lt;/code&gt;, a provisional &#34;always&#34; status will be granted. The user will see &lt;code&gt;While Using&lt;/code&gt; in the settings and later will be informed that your app is using the location in background. That looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/e8357168f4c8e754adfd940fc065520de838a21a80001839d5e740c18893ec67/68747470733a2f2f636d732e717a2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031392f30392f696f732d31332d6c6f636174696f6e732d7465736c612d31393230783938322e6a70673f7175616c6974793d37352673747269703d616c6c26773d3132303026683d3930302663726f703d31&#34; alt=&#34;alt text&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subsequently, if you are requesting &lt;code&gt;LOCATION_ALWAYS&lt;/code&gt; permission, there is no need to request &lt;code&gt;LOCATION_WHEN_IN_USE&lt;/code&gt;. If the user accepts, &lt;code&gt;LOCATION_WHEN_IN_USE&lt;/code&gt; will be granted too. If the user denies, &lt;code&gt;LOCATION_WHEN_IN_USE&lt;/code&gt; will be denied too.&lt;/p&gt; &#xA;&lt;h3&gt;Testing with Jest&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t already have a Jest setup file configured, please add the following to your Jest configuration file and create the new &lt;code&gt;jest.setup.js&lt;/code&gt; file in project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setupFiles: [&#39;&amp;lt;rootDir&amp;gt;/jest.setup.js&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then add the following line to that setup file to mock the &lt;code&gt;NativeModule.RNPermissions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jest.mock(&#39;react-native-permissions&#39;, () =&amp;gt; require(&#39;react-native-permissions/mock&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;This module is provided &lt;strong&gt;as is&lt;/strong&gt;, I work on it in my free time.&lt;/p&gt; &#xA;&lt;p&gt;If you or your company uses it in a production app, consider sponsoring this project üí∞. You also can contact me for &lt;strong&gt;premium&lt;/strong&gt; enterprise support: help with issues, prioritize bugfixes, feature requests, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/zoontek&#34;&gt;&lt;img align=&#34;center&#34; alt=&#34;Sponsors list&#34; src=&#34;https://raw.githubusercontent.com/zoontek/sponsors/main/sponsorkit/sponsors.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookincubator/SocketRocket</title>
    <updated>2023-10-01T02:19:18Z</updated>
    <id>tag:github.com,2023-10-01:/facebookincubator/SocketRocket</id>
    <link href="https://github.com/facebookincubator/SocketRocket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A conforming Objective-C WebSocket client library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SocketRocket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://img.shields.io/cocoapods/p/SocketRocket.svg?style=flat&#34; alt=&#34;Platforms&#34;&gt; &lt;a href=&#34;https://github.com/facebook/SocketRocket/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-lightgrey.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cocoapods.org/pods/SocketRocket&#34;&gt;&lt;img src=&#34;https://img.shields.io/cocoapods/v/SocketRocket.svg?sanitize=true&#34; alt=&#34;Podspec&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/facebookincubator/SocketRocket/main/carthage-link&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage Compatible&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/facebook/SocketRocket/branches&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/facebook/SocketRocket/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A conforming WebSocket (&lt;a href=&#34;https://tools.ietf.org/html/rfc6455%3E&#34;&gt;RFC 6455&lt;/a&gt;) client library for iOS, macOS and tvOS.&lt;/p&gt; &#xA;&lt;p&gt;Test results for SocketRocket &lt;a href=&#34;http://facebook.github.io/SocketRocket/results/&#34;&gt;here&lt;/a&gt;. You can compare to what modern browsers look like &lt;a href=&#34;http://autobahn.ws/testsuite/reports/clients/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SocketRocket currently conforms to all core ~300 of &lt;a href=&#34;http://autobahn.ws/testsuite/%3E&#34;&gt;Autobahn&lt;/a&gt;&#39;s fuzzing tests (aside from two UTF-8 ones where it is merely &lt;em&gt;non-strict&lt;/em&gt; tests 6.4.2 and 6.4.4).&lt;/p&gt; &#xA;&lt;h2&gt;Features/Design&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TLS (wss) support, including self-signed certificates.&lt;/li&gt; &#xA; &lt;li&gt;Seems to perform quite well.&lt;/li&gt; &#xA; &lt;li&gt;Supports HTTP Proxies.&lt;/li&gt; &#xA; &lt;li&gt;Supports IPv4/IPv6.&lt;/li&gt; &#xA; &lt;li&gt;Supports SSL certificate pinning.&lt;/li&gt; &#xA; &lt;li&gt;Sends &lt;code&gt;ping&lt;/code&gt; and can process &lt;code&gt;pong&lt;/code&gt; events.&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous and non-blocking. Most of the work is done on a background thread.&lt;/li&gt; &#xA; &lt;li&gt;Supports iOS, macOS, tvOS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;There are a few options. Choose one, or just figure it out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following line to your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;SocketRocket&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt;, and you are all set.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/carthage/carthage&#34;&gt;Carthage&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following line to your Cartfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;facebook/SocketRocket&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;, and you should now have the latest version of &lt;code&gt;SocketRocket&lt;/code&gt; in your &lt;code&gt;Carthage&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using SocketRocket as a sub-project&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;You can also include &lt;code&gt;SocketRocket&lt;/code&gt; as a subproject inside of your application if you&#39;d prefer, although we do not recommend this, as it will increase your indexing time significantly. To do so, just drag and drop the &lt;code&gt;SocketRocket.xcodeproj&lt;/code&gt; file into your workspace.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;SRWebSocket&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The Web Socket.&lt;/p&gt; &#xA;&lt;h4&gt;Note:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;SRWebSocket&lt;/code&gt; will retain itself between &lt;code&gt;-(void)open&lt;/code&gt; and when it closes, errors, or fails. This is similar to how &lt;code&gt;NSURLConnection&lt;/code&gt; behaves (unlike &lt;code&gt;NSURLConnection&lt;/code&gt;, &lt;code&gt;SRWebSocket&lt;/code&gt; won&#39;t retain the delegate).&lt;/p&gt; &#xA;&lt;h4&gt;Interface&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@interface SRWebSocket : NSObject&#xA;&#xA;// Make it with this&#xA;- (instancetype)initWithURLRequest:(NSURLRequest *)request;&#xA;&#xA;// Set this before opening&#xA;@property (nonatomic, weak) id &amp;lt;SRWebSocketDelegate&amp;gt; delegate;&#xA;&#xA;// Open with this&#xA;- (void)open;&#xA;&#xA;// Close it with this&#xA;- (void)close;&#xA;&#xA;// Send a Data&#xA;- (void)sendData:(nullable NSData *)data error:(NSError **)error;&#xA;&#xA;// Send a UTF8 String&#xA;- (void)sendString:(NSString *)string error:(NSError **)error;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;SRWebSocketDelegate&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You implement this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;@protocol SRWebSocketDelegate &amp;lt;NSObject&amp;gt;&#xA;&#xA;@optional&#xA;&#xA;- (void)webSocketDidOpen:(SRWebSocket *)webSocket;&#xA;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithString:(NSString *)string;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didReceiveMessageWithData:(NSData *)data;&#xA;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didFailWithError:(NSError *)error;&#xA;- (void)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(NSInteger)code reason:(nullable NSString *)reason wasClean:(BOOL)wasClean;&#xA;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Included are setup scripts for the python testing environment. It comes packaged with vitualenv so all the dependencies are installed in userland.&lt;/p&gt; &#xA;&lt;p&gt;To run the short test from the command line, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run all the tests, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  make test_all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The short tests don&#39;t include the performance tests (the test harness is actually the bottleneck, not SocketRocket).&lt;/p&gt; &#xA;&lt;p&gt;The first time this is run, it may take a while to install the dependencies. It will be smooth sailing after that.&lt;/p&gt; &#xA;&lt;p&gt;You can also run tests inside Xcode, which runs the same thing, but makes it easier to debug.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Choose the &lt;code&gt;SocketRocketTests&lt;/code&gt; target&lt;/li&gt; &#xA; &lt;li&gt;Make sure your running destination is either your Mac or any Simulator&lt;/li&gt; &#xA; &lt;li&gt;Run the test action (&lt;code&gt;‚åò+U&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TestChat Demo Application&lt;/h3&gt; &#xA;&lt;p&gt;SocketRocket includes a demo app, TestChat. It will &#34;chat&#34; with a listening websocket on port 9900.&lt;/p&gt; &#xA;&lt;h4&gt;TestChat Server&lt;/h4&gt; &#xA;&lt;p&gt;The sever takes a message and broadcasts it to all other connected clients.&lt;/p&gt; &#xA;&lt;p&gt;It requires some dependencies though to run. We also want to reuse the virtualenv we made when we ran the tests. If you haven&#39;t run the tests yet, go into the SocketRocket root directory and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will set up your &lt;a href=&#34;https://pypi.python.org/pypi/virtualenv&#34;&gt;virtualenv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source .env/bin/activate&#xA;pip install git+https://github.com/tornadoweb/tornado.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the same terminal session, start the chatroom server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python TestChatServer/py/chatroom.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also a Go implementation (with the latest weekly) where you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd TestChatServer/go&#xA;go run chatroom.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Chatting&lt;/h4&gt; &#xA;&lt;p&gt;Now, start TestChat.app (just run the target in the Xcode project). If you had it started already you can hit the refresh button to reconnect. It should say &#34;Connected!&#34; on top.&lt;/p&gt; &#xA;&lt;p&gt;To talk with the app, open up your browser to &lt;a href=&#34;http://localhost:9000&#34;&gt;http://localhost:9000&lt;/a&gt; and start chatting.&lt;/p&gt; &#xA;&lt;h2&gt;WebSocket Server Implementation Recommendations&lt;/h2&gt; &#xA;&lt;p&gt;SocketRocket has been used with the following libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tornadoweb/tornado&#34;&gt;Tornado&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go&#39;s &lt;a href=&#34;https://godoc.org/golang.org/x/net/websocket&#34;&gt;WebSocket package&lt;/a&gt; or Gorilla&#39;s &lt;a href=&#34;http://www.gorillatoolkit.org/pkg/websocket&#34;&gt;version&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://autobahn.ws/testsuite/&#34;&gt;Autobahn&lt;/a&gt; (using its fuzzing client).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Tornado one is dirt simple and works like a charm. (&lt;a href=&#34;http://ipython.org/ipython-doc/dev/interactive/htmlnotebook.html&#34;&gt;IPython notebook&lt;/a&gt; uses it too). It&#39;s much easier to configure handlers and routes than in Autobahn/twisted.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We‚Äôre glad you‚Äôre interested in SocketRocket, and we‚Äôd love to see where you take it. Please read our &lt;a href=&#34;https://github.com/facebook/SocketRocket/raw/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; prior to submitting a Pull Request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AzureAD/microsoft-authentication-library-for-objc</title>
    <updated>2023-10-01T02:19:18Z</updated>
    <id>tag:github.com,2023-10-01:/AzureAD/microsoft-authentication-library-for-objc</id>
    <link href="https://github.com/AzureAD/microsoft-authentication-library-for-objc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Authentication Library (MSAL) for iOS and macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Authentication Library for iOS and macOS&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/develop/mobile-app-quickstart?pivots=devlang-ios&#34;&gt;Get Started&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-ios-swift-native-v2&#34;&gt;iOS Sample Code&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-macOS-swift-native-v2&#34;&gt;macOS Sample Code&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Azure-Samples/active-directory-b2c-ios-swift-native-msal&#34;&gt;&lt;u&gt;B2C Sample Code&lt;/u&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://azuread.github.io/microsoft-authentication-library-for-objc/&#34;&gt;Library reference&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/raw/dev/README.md#community-help-and-support&#34;&gt;Support&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://forms.office.com/r/xuBV0CzEih&#34;&gt;Feedback&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The MSAL library for iOS and macOS gives your app the ability to begin using the &lt;a href=&#34;https://aka.ms/aaddev&#34;&gt;Microsoft Identity platform&lt;/a&gt; by supporting &lt;a href=&#34;https://azure.microsoft.com/en-us/services/active-directory/&#34;&gt;Azure Active Directory&lt;/a&gt; and &lt;a href=&#34;https://account.microsoft.com&#34;&gt;Microsoft Accounts&lt;/a&gt; in a converged experience using industry standard OAuth2 and OpenID Connect. The library also supports &lt;a href=&#34;https://azure.microsoft.com/services/active-directory-b2c/&#34;&gt;Azure AD B2C&lt;/a&gt; for those using our hosted identity management service.&lt;/p&gt; &#xA;&lt;h2&gt;Quick sample&lt;/h2&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = MSALPublicClientApplicationConfig(clientId: &#34;&amp;lt;your-client-id-here&amp;gt;&#34;)&#xA;let scopes = [&#34;your-scope1-here&#34;, &#34;your-scope2-here&#34;]&#xA;        &#xA;if let application = try? MSALPublicClientApplication(configuration: config) {&#xA;            &#xA;&#x9;#if os(iOS)&#xA;&#x9;let viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively&#xA;&#x9;let webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)&#xA;&#x9;#else&#xA;&#x9;let webviewParameters = MSALWebviewParameters()&#xA;&#x9;#endif&#xA;&#x9;&#xA;&#x9;let interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)&#xA;&#x9;application.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in&#xA;                &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;&#x9;&#x9;print(error!.localizedDescription)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;                &#xA;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account for later acquireToken calls&#xA;&#x9;let accountIdentifier = authResult.account.identifier&#xA;&#x9;})&#xA;}&#xA;else {&#xA;&#x9;print(&#34;Unable to create application.&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSError *msalError = nil;&#xA;    &#xA;MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@&#34;&amp;lt;your-client-id-here&amp;gt;&#34;];&#xA;NSArray&amp;lt;NSString *&amp;gt; *scopes = @[@&#34;your-scope1-here&#34;, @&#34;your-scope2-here&#34;];&#xA;    &#xA;MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;msalError];&#xA;    &#xA;#if TARGET_OS_IPHONE&#xA;    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively&#xA;    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];&#xA;#else&#xA;    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];&#xA;#endif&#xA;    &#xA;MSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];&#xA;[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;    if (!error)&#xA;    {&#xA;        // You&#39;ll want to get the account identifier to retrieve and reuse the account&#xA;        // for later acquireToken calls&#xA;        NSString *accountIdentifier = result.account.identifier;&#xA;            &#xA;        NSString *accessToken = result.accessToken;&#xA;    }&#xA;    else&#xA;    {&#xA;        // Check the error&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Master branch deprercation&lt;/h2&gt; &#xA;&lt;p&gt;The master branch has been copied over to main branch. The master branch will contain updates only until version 1.2.14, for further releases please refer to &#39;main&#39; branch instead of &#39;master&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using CocoaPods&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;http://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to install &lt;code&gt;MSAL&lt;/code&gt; by adding it to your &lt;code&gt;Podfile&lt;/code&gt; under target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use_frameworks!&#xA; &#xA;target &#39;your-target-here&#39; do&#xA;&#x9;pod &#39;MSAL&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Carthage&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;Carthage&lt;/a&gt; to install &lt;code&gt;MSAL&lt;/code&gt; by adding it to your &lt;code&gt;Cartfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github &#34;AzureAD/microsoft-authentication-library-for-objc&#34; &#34;main&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Swift Packages&lt;/h3&gt; &#xA;&lt;p&gt;You can add &lt;code&gt;MSAL&lt;/code&gt; as a &lt;a href=&#34;https://developer.apple.com/documentation/swift_packages/distributing_binary_frameworks_as_swift_packages&#34;&gt;swift package dependency&lt;/a&gt;. For MSAL version 1.1.14 and above, distribution of MSAL binary framework as a Swift package is available.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For your project in Xcode, click File ‚Üí Swift Packages ‚Üí Add Package Dependency...&lt;/li&gt; &#xA; &lt;li&gt;Choose project to add dependency in&lt;/li&gt; &#xA; &lt;li&gt;Enter : &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc&#34;&gt;https://github.com/AzureAD/microsoft-authentication-library-for-objc&lt;/a&gt; as the package repository URL&lt;/li&gt; &#xA; &lt;li&gt;Choose package options with : &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Rules ‚Üí Branch : main (For latest MSAL release)&lt;/li&gt; &#xA;   &lt;li&gt;Rules ‚Üí Version ‚Üí Exact : [release version &amp;gt;= 1.1.14] (For a particular release version)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For any issues, please check if there is an outstanding SPM/Xcode bug. Workarounds for some bugs we encountered :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have a plugin in your project you might encounter &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767311138&#34;&gt;CFBundleIdentifier collision. Each bundle must have a unique bundle identifier&lt;/a&gt; error. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767990771&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;While archiving, error : ‚ÄúIPA processing failed‚Äù UserInfo={NSLocalizedDescription=IPA processing failed}. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-767990771&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For a macOS app, ‚ÄúCommand CodeSign failed with a nonzero exit code‚Äù error. &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/issues/737#issuecomment-770056675&#34;&gt;Workaround&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;You can also use Git Submodule or check out the latest release and use as framework in your application.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring MSAL&lt;/h2&gt; &#xA;&lt;h3&gt;Adding MSAL to your project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Register your app in the &lt;a href=&#34;https://aka.ms/MobileAppReg&#34;&gt;Azure portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you register a redirect URI for your application. It should be in the following format:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;msauth.$(PRODUCT_BUNDLE_IDENTIFIER)://auth&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add a new keychain group to your project Capabilities. Keychain group should be &lt;code&gt;com.microsoft.adalcache&lt;/code&gt; on iOS and &lt;code&gt;com.microsoft.identity.universalstorage&lt;/code&gt; on macOS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AzureAD/microsoft-authentication-library-for-objc/dev/Images/keychain_example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See more information about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-v2-keychain-objc&#34;&gt;keychain groups&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-macos-ios&#34;&gt;Silent SSO for MSAL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;iOS only steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add your application&#39;s redirect URI scheme to your &lt;code&gt;Info.plist&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;msauth.$(PRODUCT_BUNDLE_IDENTIFIER)&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;code&gt;LSApplicationQueriesSchemes&lt;/code&gt; to allow making call to Microsoft Authenticator if installed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that ‚Äúmsauthv3‚Äù scheme is needed when compiling your app with Xcode 11 and later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;msauthv2&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;msauthv3&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more info about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/reply-url&#34;&gt;configuring redirect uri for MSAL&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To handle a callback, add the following to &lt;code&gt;appDelegate&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -&amp;gt; Bool {&#xA;        &#xA;&#x9;return MSALPublicClientApplication.handleMSALResponse(url, sourceApplication: options[UIApplication.OpenURLOptionsKey.sourceApplication] as? String)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;- (BOOL)application:(UIApplication *)app&#xA;            openURL:(NSURL *)url&#xA;            options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey,id&amp;gt; *)options&#xA;{&#xA;    return [MSALPublicClientApplication handleMSALResponse:url &#xA;                                         sourceApplication:options[UIApplicationOpenURLOptionsSourceApplicationKey]];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note, that if you adopted UISceneDelegate on iOS 13+&lt;/strong&gt;, MSAL callback needs to be placed into the appropriate delegate method of UISceneDelegate instead of AppDelegate. MSAL &lt;code&gt;handleMSALResponse:sourceApplication:&lt;/code&gt; must be called only once for each URL. If you support both UISceneDelegate and UIApplicationDelegate for compatibility with older iOS, MSAL callback would need to be placed into both files.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func scene(_ scene: UIScene, openURLContexts URLContexts: Set&amp;lt;UIOpenURLContext&amp;gt;) {&#xA;        &#xA;        guard let urlContext = URLContexts.first else {&#xA;            return&#xA;        }&#xA;        &#xA;        let url = urlContext.url&#xA;        let sourceApp = urlContext.options.sourceApplication&#xA;        &#xA;        MSALPublicClientApplication.handleMSALResponse(url, sourceApplication: sourceApp)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)scene:(UIScene *)scene openURLContexts:(NSSet&amp;lt;UIOpenURLContext *&amp;gt; *)URLContexts&#xA;{&#xA;    UIOpenURLContext *context = URLContexts.anyObject;&#xA;    NSURL *url = context.URL;&#xA;    NSString *sourceApplication = context.options.sourceApplication;&#xA;    &#xA;    [MSALPublicClientApplication handleMSALResponse:url sourceApplication:sourceApplication];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS only steps:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your application is signed with a valid development certificate. While MSAL will still work in the unsigned mode, it will behave differently around cache persistence.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using MSAL&lt;/h2&gt; &#xA;&lt;h3&gt;Creating an Application Object&lt;/h3&gt; &#xA;&lt;p&gt;Use the client ID from your app listing when initializing your MSALPublicClientApplication object:&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let config = MSALPublicClientApplicationConfig(clientId: &#34;&amp;lt;your-client-id-here&amp;gt;&#34;)&#xA;let application = try? MSALPublicClientApplication(configuration: config) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;NSError *msalError = nil;&#xA;    &#xA;MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:@&#34;&amp;lt;your-client-id-here&amp;gt;&#34;];&#xA;MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;msalError];&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Acquiring Your First Token interactively&lt;/h3&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#if os(iOS)&#xA;&#x9;let viewController = ... // Pass a reference to the view controller that should be used when getting a token interactively&#xA;&#x9;let webviewParameters = MSALWebviewParameters(authPresentationViewController: viewController)&#xA;#else&#xA;&#x9;let webviewParameters = MSALWebviewParameters()&#xA;#endif&#xA;let interactiveParameters = MSALInteractiveTokenParameters(scopes: scopes, webviewParameters: webviewParameters)&#xA;application.acquireToken(with: interactiveParameters, completionBlock: { (result, error) in&#xA;                &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;&#x9;&#x9;print(error!.localizedDescription)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;                &#xA;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account for later acquireToken calls&#xA;&#x9;let accountIdentifier = authResult.account.identifier&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;#if TARGET_OS_IPHONE&#xA;    UIViewController *viewController = ...; // Pass a reference to the view controller that should be used when getting a token interactively&#xA;    MSALWebviewParameters *webParameters = [[MSALWebviewParameters alloc] initWithAuthPresentationViewController:viewController];&#xA;#else&#xA;    MSALWebviewParameters *webParameters = [MSALWebviewParameters new];&#xA;#endif &#xA;&#xA;MSALInteractiveTokenParameters *interactiveParams = [[MSALInteractiveTokenParameters alloc] initWithScopes:scopes webviewParameters:webParameters];&#xA;[application acquireTokenWithParameters:interactiveParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;&#x9;if (!error)&#x9;&#xA;&#x9;{&#xA;&#x9;&#x9;// You&#39;ll want to get the account identifier to retrieve and reuse the account&#xA;&#x9;&#x9;// for later acquireToken calls&#xA;&#x9;&#x9;NSString *accountIdentifier = result.account.identifier;&#xA;            &#xA;&#x9;&#x9;NSString *accessToken = result.accessToken;&#xA;&#x9;}&#xA;  &#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;// Check the error&#xA;&#x9;}&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Our library uses the ASWebAuthenticationSession for authentication on iOS 12 by default. See more information about &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/customize-webviews&#34;&gt;default values, and support for other iOS versions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Silently Acquiring an Updated Token&lt;/h3&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let account = try? application.account(forIdentifier: accountIdentifier) else { return }&#xA;let silentParameters = MSALSilentTokenParameters(scopes: scopes, account: account)&#xA;application.acquireTokenSilent(with: silentParameters) { (result, error) in&#xA;            &#xA;&#x9;guard let authResult = result, error == nil else {&#xA;                &#xA;&#x9;let nsError = error! as NSError&#xA;                &#xA;&#x9;&#x9;if (nsError.domain == MSALErrorDomain &amp;amp;&amp;amp;&#xA;&#x9;&#x9;&#x9;nsError.code == MSALError.interactionRequired.rawValue) {&#xA;                    &#xA;&#x9;&#x9;&#x9;// Interactive auth will be required&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;            &#xA;&#x9;// Get access token from result&#xA;&#x9;let accessToken = authResult.accessToken&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;NSError *error = nil;&#xA;MSALAccount *account = [application accountForIdentifier:accountIdentifier error:&amp;amp;error];&#xA;if (!account)&#xA;{&#xA;    // handle error&#xA;    return;&#xA;}&#xA;    &#xA;MSALSilentTokenParameters *silentParams = [[MSALSilentTokenParameters alloc] initWithScopes:scopes account:account];&#xA;[application acquireTokenSilentWithParameters:silentParams completionBlock:^(MSALResult *result, NSError *error) {&#xA;    if (!error)&#xA;    {&#xA;        NSString *accessToken = result.accessToken;&#xA;    }&#xA;    else&#xA;    {&#xA;        // Check the error&#xA;        if ([error.domain isEqual:MSALErrorDomain] &amp;amp;&amp;amp; error.code == MSALErrorInteractionRequired)&#xA;        {&#xA;            // Interactive auth will be required&#xA;        }&#xA;            &#xA;        // Other errors may require trying again later, or reporting authentication problems to the user&#xA;    }&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Responding to an Interaction Required Error&lt;/h3&gt; &#xA;&lt;p&gt;Occasionally user interaction will be required to get a new access token, when this occurs you will receive a &lt;code&gt;MSALErrorInteractionRequired&lt;/code&gt; error when trying to silently acquire a new token. In those cases call &lt;code&gt;acquireToken:&lt;/code&gt; with the same account and scopes as the failing &lt;code&gt;acquireTokenSilent:&lt;/code&gt; call. It is recommended to display a status message to the user in an unobtrusive way before invoking interactive &lt;code&gt;acquireToken:&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-handling-exceptions&#34;&gt;MSAL error handling guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Enterprise SSO plug-in for Apple devices&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft has recently released a new plug-in that uses the newly announced Apple feature called &lt;a href=&#34;https://developer.apple.com/documentation/authenticationservices&#34;&gt;Enterprise Single Sign-On&lt;/a&gt;. Microsoft Enterprise SSO plug-in for Apple devices offers the following benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comes delivered in Microsoft Authenticator app automatically and can be enabled by any MDM.&lt;/li&gt; &#xA; &lt;li&gt;Provides seamless SSO for Active Directory joined accounts across all applications that support Apple&#39;s Enterprise Single Sign-On feature.&lt;/li&gt; &#xA; &lt;li&gt;COMING SOON: Provides seamless SSO across Safari browsers and applications on the device.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MSAL 1.1.0 and above will use Microsoft Enterprise SSO plug-in automatically instead of the Microsoft Authenticator app when it is active on the device. To use Microsoft Enterprise SSO plug-in in your tenant, you need to enable it in your MDM profile.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/apple-sso-plugin&#34;&gt;more information&lt;/a&gt; about configuring Microsoft Enterprise SSO plug-in for your device &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/apple-sso-plugin&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Single Account Mode&lt;/h3&gt; &#xA;&lt;p&gt;If your app needs to support just one signed-in user at a time, MSAL provides a simple way to read the signed in account. This API must be also used when you are building an application to run on devices that are configured as shared devices - meaning that a single corporate device is shared between multiple employees. Employees can sign in to their devices and access customer information quickly. When they are finished with their shift or task, they will be able to sign-out of all apps on the shared device.&lt;/p&gt; &#xA;&lt;p&gt;Here is a code snippet that shows how you can retrieve current account. You must call API every time when your app comes to foreground or before performing a sensitive operation to detect any signed-in account changes.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let msalParameters = MSALParameters()&#xA;msalParameters.completionBlockQueue = DispatchQueue.main&#xA;                &#xA;application.getCurrentAccount(with: msalParameters, completionBlock: { (currentAccount, previousAccount, error) in&#xA;            &#xA;&#x9;// currentAccount is the currently signed in account&#xA;&#x9;// previousAccount is the previously signed in account if any&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MSALParameters *parameters = [MSALParameters new];&#xA;parameters.completionBlockQueue = dispatch_get_main_queue();&#xA;        &#xA;[application getCurrentAccountWithParameters:parameters&#xA;                             completionBlock:^(MSALAccount * _Nullable account, MSALAccount * _Nullable previousAccount, NSError * _Nullable error)&#xA;{&#xA;&#x9;// currentAccount is the currently signed in account&#xA;&#x9;// previousAccount is the previously signed in account if any&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Accounts Mode&lt;/h3&gt; &#xA;&lt;p&gt;MSAL also provides a public API to query multiple accounts, granted that they exist in the MSAL cache.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the umbrella header MSAL-umbrella.h is imported (just MSAL for Swift)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create config, then use it to initialize an application object&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also initialize MSALAccountEnumerationParameters object with the account identifier. Each MSALAccount object has a parameter called ‚Äúidentifier‚Äù, which represents the unique account identifier associated with the given MSALAccount object. We recommend using it as the primary search criterion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then invoke the API &#34;accountsFromDeviceForParameters&#34; from the application object using the enumeration parameter. If you have multiple accounts in MSAL cache, it will return an array containing MSALAccounts that have the account identifier you specified in the previous step.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the MSAL account is retrieved, invoke acquire token silent operation&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;#import MSAL //Make sure to import MSAL  &#xA;&#xA;let config = MSALPublicClientApplicationConfig(clientId:clientId&#xA;                                           &#x9;redirectUri:redirectUri&#xA;                                            &#x9;authority:authority)&#xA;guard let application = MSALPublicClientApplication(configuration: config) else { return }&#xA;&#xA;let accountIdentifier = &#34;9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca&#34;&#xA;let parameters = MSALAccountEnumerationParameters(identifier:accountIdentifier)&#xA;&#xA;var scopeArr = [&#34;https://graph.microsoft.com/.default&#34;]&#xA;&#xA;if #available(macOS 10.15, *)&#xA;{&#xA;&#x9; application.accountsFromDeviceForParameters(with: parameters, completionBlock:{(accounts, error) in&#xA;         if let error = error &#xA;         {&#xA;            //Handle error&#xA;         }&#xA;         &#xA;         guard let accountObjs = accounts else {return}&#xA;         &#xA;         let tokenParameters = MSALSilentTokenParameters(scopes:scopeArr, account: accountObjs[0]);&#xA;                                                                                                   &#xA;         application.acquireTokenSilentWithParameters(with: tokenParameters, completionBlock:{(result, error) in &#xA;                     if let error = error&#xA;                     {&#xA;                         //handle error&#xA;                     }&#xA;                                       &#xA;                     guard let resp = result else {return} //process result&#xA;                                                                                             &#xA;         })                                                               &#xA;                                                                                                                                                             &#xA;   })&#xA;  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;//import other key libraries  &#xA;#import &#34;MSAL-umbrella.h&#34; //Make sure to import umbrella file &#xA;&#xA;    MSALPublicClientApplicationConfig *config = [[MSALPublicClientApplicationConfig alloc] initWithClientId:clientId&#xA;     redirectUri:redirectUri&#xA;       authority:authority];&#xA;&#xA;    MSALPublicClientApplication *application = [[MSALPublicClientApplication alloc] initWithConfiguration:config error:&amp;amp;error];&#xA;    MSALAccountEnumerationParameters *parameters = [[MSALAccountEnumerationParameters alloc] initWithIdentifier:@&#34;9f4880d8-80ba-4c40-97bc-f7a23c703084.f645ad92-e38d-4d1a-b510-d1b09a74a8ca&#34;]; //init with account identifier&#xA;&#xA;    NSArray&amp;lt;NSString *&amp;gt; *scopeArr = [[NSArray alloc] initWithObjects: @&#34;https://graph.microsoft.com/.default&#34;,nil]; //define scope&#xA;&#xA;    if (@available(macOS 10.15, *)) //Currently, this public API requires macOs version 10.15 or greater.&#xA;    {&#xA;        [application accountsFromDeviceForParameters:parameters&#xA;                                     completionBlock:^(NSArray&amp;lt;MSALAccount *&amp;gt; * _Nullable accounts, __unused NSError * _Nullable error)&#xA;        {&#xA;            if (error)&#xA;            {&#xA;              //Log error &amp;amp; return &#xA;            }&#xA;          &#xA;            if (accounts)&#xA;            {&#xA;                NSLog(@&#34;hi there&#34;);&#xA;                MSALSilentTokenParameters *tokenParameters = [[MSALSilentTokenParameters alloc] initWithScopes:scopeArr account:accounts[0]];&#xA;&#xA;                [application acquireTokenSilentWithParameters:tokenParameters&#xA;                                completionBlock:^(MSALResult * _Nullable result, NSError * _Nullable error)&#xA;                 {&#xA;                    if (error)&#xA;                    {&#xA;                        //Log Error &amp;amp; return &#xA;                    }&#xA;                    if (result)&#xA;                    {&#xA;                        //process result&#xA;                    }&#xA;                }&#xA;                 ];&#xA;            }&#xA;     &#xA;        }];&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detect shared device mode&lt;/h3&gt; &#xA;&lt;p&gt;Use following code to read current device configuration, including whether device is configured as shared:&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;application.getDeviceInformation(with: nil, completionBlock: { (deviceInformation, error) in&#xA;                &#xA;&#x9;guard let deviceInfo = deviceInformation else {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;let isSharedDevice = deviceInfo.deviceMode == .shared&#xA;&#x9;// Change your app UX if needed&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[application getDeviceInformationWithParameters:nil&#xA;                                completionBlock:^(MSALDeviceInformation * _Nullable deviceInformation, NSError * _Nullable error)&#xA;{&#xA;&#x9;if (!deviceInformation)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;            &#xA;&#x9;BOOL isSharedDevice = deviceInformation.deviceMode == MSALDeviceModeShared;&#xA;&#x9;// Change your app UX if needed&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implement signout&lt;/h3&gt; &#xA;&lt;p&gt;To signout account from your app, call MSAL&#39;s signout API. You can also optionally sign out from the browser. When MSAL is running on a shared device, signout API will signout globally from all apps on user&#39;s device.&lt;/p&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let account = .... /* account retrieved above */&#xA;&#xA;let signoutParameters = MSALSignoutParameters(webviewParameters: self.webViewParameters!)&#xA;signoutParameters.signoutFromBrowser = false&#xA;            &#xA;application.signout(with: account, signoutParameters: signoutParameters, completionBlock: {(success, error) in&#xA;                &#xA;&#x9;if let error = error {&#xA;&#x9;&#x9;// Signout failed&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;                &#xA;&#x9;// Sign out completed successfully&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Objective-C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;MSALAccount *account = ... /* account retrieved above */;&#xA;        &#xA;MSALSignoutParameters *signoutParameters = [[MSALSignoutParameters alloc] initWithWebviewParameters:webViewParameters];&#xA;signoutParameters.signoutFromBrowser = NO;&#xA;        &#xA;[application signoutWithAccount:account signoutParameters:signoutParameters completionBlock:^(BOOL success, NSError * _Nullable error)&#xA;{&#xA;&#x9;if (!success)&#xA;&#x9;{&#xA;&#x9;&#x9;// Signout failed&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;            &#xA;&#x9;// Sign out completed successfully&#xA;}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Versions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS&lt;/strong&gt; - MSAL supports iOS 14 and above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt; - MSAL supports macOS (OSX) 10.13 and above.&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from ADAL Objective-C&lt;/h2&gt; &#xA;&lt;p&gt;MSAL Objective-C is designed to support smooth migration from ADAL Objective-C library. For detailed design and instructions, follow this &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/migrate-objc-adal-msal&#34;&gt;guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional guidance&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;wiki&lt;/a&gt; is intended to document common patterns, error handling and debugging, functionality (e.g. logging, telemetry), and active bugs. You can find it &lt;a href=&#34;https://github.com/AzureAD/microsoft-authentication-library-for-objc/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community Help and Support&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;http://stackoverflow.com/questions/tagged/msal&#34;&gt;Stack Overflow&lt;/a&gt; with the community to provide support. We highly recommend you ask your questions on Stack Overflow first and browse existing issues to see if someone has asked your question before.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, please raise the issue on &lt;a href=&#34;https://raw.githubusercontent.com/AzureAD/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To provide a recommendation, visit our &lt;a href=&#34;https://feedback.azure.com/forums/169401-azure-active-directory&#34;&gt;User Voice page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Submit Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d like your thoughts on this library. Please complete &lt;a href=&#34;https://forms.office.com/r/xuBV0CzEih&#34;&gt;this short survey.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We enthusiastically welcome contributions and feedback. You can clone the repo and start contributing now.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Security Library&lt;/h2&gt; &#xA;&lt;p&gt;This library controls how users sign-in and access services. We recommend you always take the latest version of our library in your app when possible. We use &lt;a href=&#34;http://semver.org&#34;&gt;semantic versioning&lt;/a&gt;, so you can control the risk associated with updating your app. As an example, always downloading the latest minor version number (e.g. x.&lt;em&gt;y&lt;/em&gt;.x) ensures you get the latest security and feature enhancements, but our API surface remains the same. You can always see the latest version and release notes under the Releases tab of GitHub.&lt;/p&gt; &#xA;&lt;h3&gt;Security Reporting&lt;/h3&gt; &#xA;&lt;p&gt;If you find a security issue with our libraries or services please report it to &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt; with as much detail as possible. Your submission may be eligible for a bounty through the &lt;a href=&#34;http://aka.ms/bugbounty&#34;&gt;Microsoft Bounty&lt;/a&gt; program. Please do not post security issues to GitHub Issues or any other public site. We will contact you shortly upon receiving the information. We encourage you to get notifications of when security incidents occur by visiting &lt;a href=&#34;https://technet.microsoft.com/en-us/security/dd252948&#34;&gt;this page&lt;/a&gt; and subscribing to Security Advisory Alerts.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright ¬© Microsoft Corporation. All rights reserved. Licensed under the MIT License (the ‚ÄúLicense‚Äù).&lt;/p&gt;</summary>
  </entry>
</feed>