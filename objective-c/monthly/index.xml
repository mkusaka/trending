<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:52:32Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TimOliver/TOCropViewController</title>
    <updated>2025-07-01T01:52:32Z</updated>
    <id>tag:github.com,2025-07-01:/TimOliver/TOCropViewController</id>
    <link href="https://github.com/TimOliver/TOCropViewController" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A view controller for iOS that allows users to crop portions of UIImage objects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TOCropViewController&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/raw/main/Images/screenshot.webp&#34; width=&#34;840&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TimOliver/TOCropViewController/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/v/TOCropViewController.svg?style=flat&#34; alt=&#34;Version&#34;&gt; &lt;a href=&#34;https://github.com/Carthage/Carthage&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat&#34; alt=&#34;Carthage compatible&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/cocoapods/p/TOCropViewController.svg?style=flat&#34; alt=&#34;Platform&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;TOCropViewController&lt;/code&gt; is an open-source &lt;code&gt;UIViewController&lt;/code&gt; subclass to crop out sections of &lt;code&gt;UIImage&lt;/code&gt; objects, as well as perform basic rotations. It is excellent for things like editing profile pictures, or sharing parts of a photo online. It has been designed with the iOS Photos app editor in mind, and as such, behaves in a way that should already feel familiar to users of iOS.&lt;/p&gt; &#xA;&lt;p&gt;For Swift developers, &lt;code&gt;CropViewController&lt;/code&gt; is a Swift wrapper that completely encapsulates &lt;code&gt;TOCropViewController&lt;/code&gt; and provides a much more native, Swiftier interface.&lt;/p&gt; &#xA;&lt;h4&gt;Proudly powering apps by&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/TimOliver/TOCropViewController/raw/main/Images/users.png&#34; width=&#34;840&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Looking for something more? If &lt;code&gt;TOCropViewController&lt;/code&gt; doesn&#39;t meet your exact requirements, please consider &lt;a href=&#34;https://img.ly/?via=tim&#34;&gt;IMG.LY&lt;/a&gt; with video editing and photo filter capabilities instead! (Disclaimer: Affiliate Link)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crop images by dragging the edges of a grid overlay.&lt;/li&gt; &#xA; &lt;li&gt;Optionally, crop circular copies of images.&lt;/li&gt; &#xA; &lt;li&gt;Rotate images in 90-degree segments.&lt;/li&gt; &#xA; &lt;li&gt;Clamp the crop box to a specific aspect ratio.&lt;/li&gt; &#xA; &lt;li&gt;A reset button to completely undo all changes.&lt;/li&gt; &#xA; &lt;li&gt;iOS 7/8 translucency to make it easier to view the cropped region.&lt;/li&gt; &#xA; &lt;li&gt;The choice of having the controller return the cropped image to a delegate, or immediately pass it to a &lt;code&gt;UIActivityViewController&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A custom animation and layout when the device is rotated to landscape mode.&lt;/li&gt; &#xA; &lt;li&gt;Custom &#39;opening&#39; and &#39;dismissal&#39; animations.&lt;/li&gt; &#xA; &lt;li&gt;Localized in 28 languages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;iOS 11.0 or above&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;CocoaPods&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;TOCropViewController&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;p&gt;Add the following to your Podfile:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;pod &#39;CropViewController&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Swift Package Manager&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Add the following to your &lt;code&gt;Package.swift&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;dependencies: [&#xA;  // ...&#xA;  .package(url: &#34;https://github.com/TimOliver/TOCropViewController.git&#34;),&#xA;],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Carthage&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Add the following to your Cartfile:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code&gt;github &#34;TimOliver/TOCropViewController&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run &lt;code&gt;carthage update&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;From the &lt;code&gt;Carthage/Build&lt;/code&gt; folder, import one of the two frameworks into your Xcode project. For Objective-C projects, import just &lt;code&gt;TOCropViewController.framework&lt;/code&gt; and for Swift, import &lt;code&gt;CropViewController.framework&lt;/code&gt; instead. Each framework is separate; you do not need to import both.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Follow the remaining steps on &lt;a href=&#34;https://github.com/Carthage/Carthage#getting-started&#34;&gt;Getting Started with Carthage&lt;/a&gt; to finish integrating the framework.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Manual Installation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;All of the necessary source and resource files for &lt;code&gt;TOCropViewController&lt;/code&gt; are in &lt;code&gt;Objective-C/TOCropViewController&lt;/code&gt;, and all of the necessary Swift files are in &lt;code&gt;Swift/CropViewController&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For Objective-C projects, copy just the &lt;code&gt;TOCropViewController&lt;/code&gt; directory to your Xcode project. For Swift projects, copy both &lt;code&gt;TOCropViewController&lt;/code&gt; and &lt;code&gt;CropViewController&lt;/code&gt; to your project.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;TOCropViewController&lt;/code&gt; is very straightforward. Simply create a new instance passing the &lt;code&gt;UIImage&lt;/code&gt; object you wish to crop, and then present it modally on the screen.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;code&gt;TOCropViewController&lt;/code&gt; prefers to be presented modally, it can also be pushed to a &lt;code&gt;UINavigationController&lt;/code&gt; stack.&lt;/p&gt; &#xA;&lt;p&gt;For a complete working example, check out the sample apps included in this repo.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Basic Implementation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;  let image: UIImage = ... //Load an image&#xA;  &#xA;  let cropViewController = CropViewController(image: image)&#xA;  cropViewController.delegate = self&#xA;  present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&#xA;func cropViewController(_ cropViewController: CropViewController, didCropToImage image: UIImage, withRect cropRect: CGRect, angle: Int) {&#xA;        // &#39;image&#39; is the newly cropped version of the original image&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...; // Load an image&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.delegate = self;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)cropViewController:(TOCropViewController *)cropViewController didCropToImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle&#xA;{&#xA;  // &#39;image&#39; is the newly cropped version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Similar to many &lt;code&gt;UIKit&lt;/code&gt; &lt;code&gt;UIViewController&lt;/code&gt; subclasses, like &lt;code&gt;MFMailComposeViewController&lt;/code&gt;, the class responsible for presenting view controller should also take care of dismissing it upon cancellation. To dismiss &lt;code&gt;TOCropViewController&lt;/code&gt;, implement the &lt;code&gt;cropViewController:didFinishCancelled:&lt;/code&gt; delegate method, and call &lt;code&gt;dismissViewController:animated:&lt;/code&gt; from there.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Making a Circular Cropped Image&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    let cropViewController = CropViewController(croppingStyle: .circular, image: image)&#xA;    cropViewController.delegate = self&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&#xA;func cropViewController(_ cropViewController: TOCropViewController?, didCropToCircularImage image: UIImage?, with cropRect: CGRect, angle: Int) {&#xA;    // &#39;image&#39; is the newly cropped, circular version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;UIImage *image = ...; // Load an image&#xA;&#xA;TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithCroppingStyle:TOCropViewCroppingStyleCircular image:image];&#xA;cropViewController.delegate = self;&#xA;[self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&#xA;- (void)cropViewController:(TOCropViewController *)cropViewController didCropToCircularImage:(UIImage *)image withRect:(CGRect)cropRect angle:(NSInteger)angle&#xA;{&#xA;// &#39;image&#39; is the newly cropped, circular version of the original image&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Sharing Cropped Images Via a Share Sheet&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    let cropViewController = CropViewController(image: image)&#xA;    cropViewController.showActivitySheetOnDone = true&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...; // Load an image&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.showActivitySheetOnDone = YES;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Presenting With a Custom Animation&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Optionally, &lt;code&gt;TOCropViewController&lt;/code&gt; also supports a custom presentation animation where an already-visible copy of the image will zoom in to fill the screen.&lt;/p&gt; &#xA; &lt;h4&gt;Swift&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func presentCropViewController() {&#xA;    var image: UIImage? // Load an image&#xA;    var imageView = UIImageView(image: image)&#xA;    var frame: CGRect = view.convert(imageView.frame, to: view)&#xA;    &#xA;    let cropViewController = CropViewController(image: image)&#xA;    cropViewController.delegate = self&#xA;    self.present(cropViewController, animated: true, completion: nil)&#xA;    cropViewController.presentAnimated(fromParentViewController: self, fromFrame: frame, completion: nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Objective-C&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)presentCropViewController&#xA;{&#xA;  UIImage *image = ...;&#xA;  UIImageView *imageView = [[UIImageView alloc] initWithImage:image];&#xA;  CGRect frame = [self.view convertRect:imageView.frame toView:self.view];&#xA;  &#xA;  TOCropViewController *cropViewController = [[TOCropViewController alloc] initWithImage:image];&#xA;  cropViewController.delegate = self;&#xA;  [self presentViewController:cropViewController animated:YES completion:nil];&#xA;  [cropViewController presentAnimatedFromParentViewController:self fromFrame:frame completion:nil];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Architecture of &lt;code&gt;TOCropViewController&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;While traditional cropping UI implementations will usually just have a dimming view with a square hole cut out of the middle, &lt;code&gt;TOCropViewController&lt;/code&gt; goes about its implementation a little differently.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/master/breakdown.jpg&#34; width=&#34;702&#34; style=&#34;margin:0 auto&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Since there are two views that are overlaid over the image (A dimming view and a translucency view), trying to cut a hole open in both of them would be rather complex. Instead, an image view is placed in a scroll view in the background, and a copy of the image view is placed on top, inside a container view that is clipped to the designated cropping size. The size and position of the foreground image is then made to match the background view, creating the illusion that there is a hole in the dimming views, and minimising the number of views onscreen.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;TOCropViewController&lt;/code&gt; was originally created by &lt;a href=&#34;http://twitter.com/TimOliverAU&#34;&gt;Tim Oliver&lt;/a&gt; as a component for &lt;a href=&#34;http://icomics.co&#34;&gt;iComics&lt;/a&gt;, a comic reader app for iOS.&lt;/p&gt; &#xA;&lt;p&gt;Thanks also goes to &lt;code&gt;TOCropViewController&lt;/code&gt;&#39;s growing list of &lt;a href=&#34;https://github.com/TimOliver/TOCropViewController/graphs/contributors&#34;&gt;contributors&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;iOS Device mockups used in the screenshot created by &lt;a href=&#34;http://www.pixeden.com&#34;&gt;Pixeden&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TOCropViewController is licensed under the MIT License, please see the &lt;a href=&#34;https://raw.githubusercontent.com/TimOliver/TOCropViewController/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alexzielenski/Mousecape</title>
    <updated>2025-07-01T01:52:32Z</updated>
    <id>tag:github.com,2025-07-01:/alexzielenski/Mousecape</id>
    <link href="https://github.com/alexzielenski/Mousecape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cursor Manager for OSX&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mousecape&lt;/h1&gt; &#xA;&lt;p&gt;A free cursor manager for Mac OS 10.8+ built using private, nonintrusive CoreGraphics APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alexzielenski/Mousecape/raw/master/screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Mousecape works by calling the API calls that Apple uses to initialize the system cursors in the system and it registers a daemon that will automatically apply the cursor on login and when cursors get unregistered.&lt;/p&gt; &#xA;&lt;p&gt;It is unintrusive and works in the background. You just need to open the app, click &lt;strong&gt;Mousecape --&amp;gt; Install Helper Tool&lt;/strong&gt;, apply your cursor and you&#39;re done!&lt;/p&gt; &#xA;&lt;h2&gt;Where do I get cursors?&lt;/h2&gt; &#xA;&lt;p&gt;A pack of cursors in Mousecape is called a cape, each cape contains a multiple scales of representations of many cursors. For example, the Arrow cursor can have 1x, 2x, 5x, and 10x representations while the Wait cursor can have 1x, and 2x.&lt;/p&gt; &#xA;&lt;p&gt;There is an example cape file included in this Git Repo located &lt;a href=&#34;https://github.com/alexzielenski/Mousecape/raw/master/Mousecape/com.maxrudberg.svanslosbluehazard.cape&#34;&gt;here for download&lt;/a&gt;. It is a remake of &lt;a href=&#34;http://maxrudberg.com/&#34;&gt;Max Rudberg&#39;s&lt;/a&gt; loved Svanslös cursors generously crafted by Max for us to use. Simply double click the cape file with Mousecape on your system and it will be imported into your library.&lt;/p&gt; &#xA;&lt;h2&gt;How can I create my own cape?&lt;/h2&gt; &#xA;&lt;p&gt;You can create a new cape document in the Mousecape app by hitting ⌘N (Command-N) and editing it with ⌘E. Click the &#34;+&#34; button to add cursors to customize and symply drag your images into the fields provided.&lt;/p&gt; &#xA;&lt;h2&gt;How do animated cursors work?&lt;/h2&gt; &#xA;&lt;p&gt;When you want to animate a cursor, change the value in the frames field in the edit window and make sure frame duration is how you want it. Next, create an image that has all of your cursor frames stacked on top of each other vertically. Mousecape will traverse down the image for each frame, using a box the same size as whatever you put in the size field.&lt;/p&gt; &#xA;&lt;h2&gt;How can I say thanks?&lt;/h2&gt; &#xA;&lt;p&gt;Tell your friends.&lt;/p&gt; &#xA;&lt;h2&gt;Where can I get a copy of this sweet tool?&lt;/h2&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/alexzielenski/Mousecape/releases&#34;&gt;releases section&lt;/a&gt; of this GitHub page. There are stable reases there. &lt;strong&gt;The current version is 1813&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;There&#39;s now the beginning of a wiki&lt;/h2&gt; &#xA;&lt;p&gt;Look for the wiki symbol in the toolbar here on this GitHub page or through here &lt;a href=&#34;https://github.com/alexzielenski/Mousecape/wiki&#34;&gt;wiki section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;I worked very hard researching the private methods used in Mousecape and creating this app. Please respect me and my work by not using any of the information provided here for commercial purposes.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2014, Alex Zielenski All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/li&gt; &#xA; &lt;li&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/li&gt; &#xA; &lt;li&gt;Any redistribution, use, or modification is done solely for personal benefit and not for any commercial purpose or for monetary gain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookarchive/Shimmer</title>
    <updated>2025-07-01T01:52:32Z</updated>
    <id>tag:github.com,2025-07-01:/facebookarchive/Shimmer</id>
    <link href="https://github.com/facebookarchive/Shimmer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy way to add a simple, shimmering effect to any view in an iOS app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shimmer&lt;/h1&gt; &#xA;&lt;p&gt;Shimmer is an easy way to add a shimmering effect to any view in your app. It&#39;s useful as an unobtrusive loading indicator.&lt;/p&gt; &#xA;&lt;p&gt;Shimmer was originally developed to show loading status in &lt;a href=&#34;http://facebook.com/paper&#34;&gt;Paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/facebook/Shimmer/raw/master/shimmer.gif?raw=true&#34; alt=&#34;Shimmer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use Shimmer, create a &lt;code&gt;FBShimmeringView&lt;/code&gt; or &lt;code&gt;FBShimmeringLayer&lt;/code&gt; and add your content. To start shimmering, set the &lt;code&gt;shimmering&lt;/code&gt; property to &lt;code&gt;YES&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example of making a label shimmer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;FBShimmeringView *shimmeringView = [[FBShimmeringView alloc] initWithFrame:self.view.bounds];&#xA;[self.view addSubview:shimmeringView];&#xA;&#xA;UILabel *loadingLabel = [[UILabel alloc] initWithFrame:shimmeringView.bounds];&#xA;loadingLabel.textAlignment = NSTextAlignmentCenter;&#xA;loadingLabel.text = NSLocalizedString(@&#34;Shimmer&#34;, nil);&#xA;shimmeringView.contentView = loadingLabel;&#xA;&#xA;// Start shimmering.&#xA;shimmeringView.shimmering = YES;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There&#39;s also an example project. In the example, you can swipe horizontally and vertically to try various shimmering parameters, or tap to start or stop shimmering. (To build the example locally, you&#39;ll need to open &lt;code&gt;FBShimmering.xcworkpace&lt;/code&gt; rather than the &lt;code&gt;.xcodeproj&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are two options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Shimmer is available as &lt;code&gt;Shimmer&lt;/code&gt; in &lt;a href=&#34;http://cocoapods.org&#34;&gt;Cocoapods&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Manually add the files into your Xcode project. Slightly simpler, but updates are also manual.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Shimmer requires iOS 6 or later.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Shimmer uses the &lt;code&gt;-[CALayer mask]&lt;/code&gt; property to enable shimmering, similar to what&#39;s described in John Harper&#39;s 2009 WWDC talk (unfortunately no longer online). Shimmer uses CoreAnimation&#39;s timing features to smoothly transition &#34;on-beat&#34; when starting and stopping the shimmer.&lt;/p&gt; &#xA;&lt;h2&gt;Other Platforms&lt;/h2&gt; &#xA;&lt;p&gt;We have a version of Shimmer for Android, too! It&#39;s &lt;a href=&#34;https://github.com/facebook/shimmer-android&#34;&gt;also available on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the CONTRIBUTING file for how to help out.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Shimmer is BSD-licensed.&lt;/p&gt;</summary>
  </entry>
</feed>