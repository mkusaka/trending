<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Objective-C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-01T02:01:06Z</updated>
  <subtitle>Monthly Trending of Objective-C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>react-native-maps/react-native-maps</title>
    <updated>2022-10-01T02:01:06Z</updated>
    <id>tag:github.com,2022-10-01:/react-native-maps/react-native-maps</id>
    <link href="https://github.com/react-native-maps/react-native-maps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Native Mapview component for iOS + Android&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-maps &lt;a href=&#34;https://www.npmjs.com/package/react-native-maps&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-maps.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;React Native Map components for iOS + Android&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is being maintained by a small group of people, and any help with issues and pull requests are always appreciated. If you are able and willing to contribute, please read the &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/CONTRIBUTING.md&#34;&gt;guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&#34;&gt;Installation Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/examples-setup.md&#34;&gt;Setup Instructions for the Included Example Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-native-maps&lt;/code&gt; requires &lt;code&gt;react-native &amp;gt;= 0.64.3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Component API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/mapview.md&#34;&gt;&lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/marker.md&#34;&gt;&lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/callout.md&#34;&gt;&lt;code&gt;&amp;lt;Callout /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polygon.md&#34;&gt;&lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/polyline.md&#34;&gt;&lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/circle.md&#34;&gt;&lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/overlay.md&#34;&gt;&lt;code&gt;&amp;lt;Overlay /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/heatmap.md&#34;&gt;&lt;code&gt;&amp;lt;Heatmap /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/geojson.md&#34;&gt;&lt;code&gt;&amp;lt;Geojson /&amp;gt;&lt;/code&gt; Component API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;General Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import MapView from &#39;react-native-maps&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var MapView = require(&#39;react-native-maps&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This MapView component is built so that features on the map (such as Markers, Polygons, etc.) are specified as children of the MapView itself. This provides an intuitive and react-like API for declaratively controlling features on the map.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a Map with an initial region&lt;/h3&gt; &#xA;&lt;h2&gt;MapView&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;MapView&#xA;    initialRegion={{&#xA;      latitude: 37.78825,&#xA;      longitude: -122.4324,&#xA;      latitudeDelta: 0.0922,&#xA;      longitudeDelta: 0.0421,&#xA;    }}&#xA;  /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a MapView while controlling the region as state&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;getInitialState() {&#xA;  return {&#xA;    region: {&#xA;      latitude: 37.78825,&#xA;      longitude: -122.4324,&#xA;      latitudeDelta: 0.0922,&#xA;      longitudeDelta: 0.0421,&#xA;    },&#xA;  };&#xA;}&#xA;&#xA;onRegionChange(region) {&#xA;  this.setState({ region });&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a list of markers on a map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Marker } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView&#xA;  region={this.state.region}&#xA;  onRegionChange={this.onRegionChange}&#xA;&amp;gt;&#xA;  {this.state.markers.map((marker, index) =&amp;gt; (&#xA;    &amp;lt;Marker&#xA;      key={index}&#xA;      coordinate={marker.latlng}&#xA;      title={marker.title}&#xA;      description={marker.description}&#xA;    /&amp;gt;&#xA;  ))}&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a Marker with a custom image&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need to generate an &lt;code&gt;png&lt;/code&gt; image with various resolution (lets call them &lt;code&gt;custom_pin&lt;/code&gt;) - for more information go to &lt;a href=&#34;https://developer.android.com/studio/write/resource-manager#import&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding-images-to-your-xcode-project&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;put all images in Android drawables and iOS assets dir&lt;/li&gt; &#xA; &lt;li&gt;Now you can use the following code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Marker&#xA;  coordinate={{ latitude : latitude , longitude : longitude }}&#xA;  image={{uri: &#39;custom_pin&#39;}}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: You can also pass the image binary data like &lt;code&gt;image={require(&#39;custom_pin.png&#39;)}&lt;/code&gt;, but this will not scale good with the different screen sizes.&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a Marker with a custom view&lt;/h3&gt; &#xA;&lt;p&gt;Note: This has performance implications, if you wish for a simpler solution go with a custom image (save your self the head ache)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Marker coordinate={{ latitude : latitude , longitude : longitude }}&amp;gt;&#xA;  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;&#xA;&amp;lt;/Marker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering a custom Marker with a custom Callout&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Callout } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;Marker coordinate={marker.latlng}&amp;gt;&#xA;  &amp;lt;MyCustomMarkerView {...marker} /&amp;gt;&#xA;  &amp;lt;Callout&amp;gt;&#xA;    &amp;lt;MyCustomCalloutView {...marker} /&amp;gt;&#xA;  &amp;lt;/Callout&amp;gt;&#xA;&amp;lt;/Marker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Draggable Markers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView initialRegion={...}&amp;gt;&#xA;  &amp;lt;Marker draggable&#xA;    coordinate={this.state.x}&#xA;    onDragEnd={(e) =&amp;gt; this.setState({ x: e.nativeEvent.coordinate })}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a custom Tile Overlay&lt;/h3&gt; &#xA;&lt;h4&gt;Tile Overlay using tile server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { UrlTile } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView&#xA;  region={this.state.region}&#xA;  onRegionChange={this.onRegionChange}&#xA;&amp;gt;&#xA;  &amp;lt;UrlTile&#xA;    /**&#xA;     * The url template of the tile server. The patterns {x} {y} {z} will be replaced at runtime&#xA;     * For example, http://c.tile.openstreetmap.org/{z}/{x}/{y}.png&#xA;     */&#xA;    urlTemplate={this.state.urlTemplate}&#xA;    /**&#xA;     * The maximum zoom level for this tile overlay. Corresponds to the maximumZ setting in&#xA;     * MKTileOverlay. iOS only.&#xA;     */&#xA;    maximumZ={19}&#xA;    /**&#xA;     * flipY allows tiles with inverted y coordinates (origin at bottom left of map)&#xA;     * to be used. Its default value is false.&#xA;     */&#xA;    flipY={false}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android: add the following line in your AndroidManifest.xml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For IOS: configure &lt;a href=&#34;https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&#34;&gt;App Transport Security&lt;/a&gt; in your app&lt;/p&gt; &#xA;&lt;h4&gt;Tile Overlay using local tiles&lt;/h4&gt; &#xA;&lt;p&gt;Tiles can be stored locally within device using xyz tiling scheme and displayed as tile overlay as well. This is usefull especially for offline map usage when tiles are available for selected map region within device storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { LocalTile } from &#39;react-native-maps&#39;;&#xA;&#xA;&amp;lt;MapView&#xA;  region={this.state.region}&#xA;  onRegionChange={this.onRegionChange}&#xA;&amp;gt;&#xA;  &amp;lt;LocalTile&#xA;   /**&#xA;    * The path template of the locally stored tiles. The patterns {x} {y} {z} will be replaced at runtime&#xA;    * For example, /storage/emulated/0/mytiles/{z}/{x}/{y}.png&#xA;    */&#xA;   pathTemplate={this.state.pathTemplate}&#xA;   /**&#xA;    * The size of provided local tiles (usually 256 or 512).&#xA;    */&#xA;   tileSize={256}&#xA;  /&amp;gt;&#xA;&amp;lt;/MapView&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Android: LocalTile is still just overlay over original map tiles. It means that if device is online, underlying tiles will be still downloaded. If original tiles download/display is not desirable set mapType to &#39;none&#39;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;MapView&#xA;  mapType={Platform.OS == &#34;android&#34; ? &#34;none&#34; : &#34;standard&#34;}&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Category:Tile_downloading&#34;&gt;OSM Wiki&lt;/a&gt; for how to download tiles for offline usage.&lt;/p&gt; &#xA;&lt;h3&gt;Overlaying other components on the map&lt;/h3&gt; &#xA;&lt;p&gt;Place components that you wish to overlay &lt;code&gt;MapView&lt;/code&gt; underneath the &lt;code&gt;MapView&lt;/code&gt; closing tag. Absolutely position these elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;    /&amp;gt;&#xA;    &amp;lt;OverlayComponent&#xA;      style={{position: &#34;absolute&#34;, bottom: 50}}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing the map style&lt;/h3&gt; &#xA;&lt;p&gt;Create the json object, or download a generated one from the &lt;a href=&#34;https://mapstyle.withgoogle.com/&#34;&gt;google style generator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// The generated json object&#xA;mapStyle = [ ... ]&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;      customMapStyle={mapStyle}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For iOS, in addition to providing the &lt;code&gt;mapStyle&lt;/code&gt; you will need to do the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { PROVIDER_GOOGLE } from &#39;react-native-maps&#39;&#xA;&#xA;// ...&#xA;&#xA;&amp;lt;MapView&#xA;  provider={PROVIDER_GOOGLE}&#xA;  customMapStyle={MapStyle}&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the AirGoogleMaps directory:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/raw/1e71a21f39e7b88554852951f773c731c94680c9/docs/installation.md#ios&#34;&gt;https://github.com/react-native-maps/react-native-maps/blob/1e71a21f39e7b88554852951f773c731c94680c9/docs/installation.md#ios&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An unofficial step-by-step guide is also available at &lt;a href=&#34;https://gist.github.com/heron2014/e60fa003e9b117ce80d56bb1d5bfe9e0&#34;&gt;https://gist.github.com/heron2014/e60fa003e9b117ce80d56bb1d5bfe9e0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MapView Events&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component and its child components have several events that you can subscribe to. This example displays some of them in a log as a demonstration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBpncYQASu2WTW8.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77YdviLqtjaecRYA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tracking Region / Location&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBoPSLlIKQ2dv7q.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XWjqECvdgjx9oA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Programmatically Changing Region&lt;/h3&gt; &#xA;&lt;p&gt;One can change the mapview&#39;s position using refs and component methods, or by passing in an updated &lt;code&gt;region&lt;/code&gt; prop. The component methods will allow one to animate to a given position like the native API could.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UB7poyB6YJ0KPWU.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77Yc4wK3pzZusEbm.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changing the style of the map&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/a9WqCL6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Arbitrary React Views as Markers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UBcsCLoLQtksJxe.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UB1qGEM9jYni3KM.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using the MapView with the Animated API&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component can be made to work with the Animated API, having the entire &lt;code&gt;region&lt;/code&gt; prop be declared as an animated value. This allows one to animate the zoom and position of the MapView along with other gestures, giving a nice feel.&lt;/p&gt; &#xA;&lt;p&gt;Further, Marker views can use the animated API to enhance the effect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XMw9IwS6QAv0nC.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UBdGQdM1GmVoIdq.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Issue: Since android needs to render its marker views as a bitmap, the animations APIs may not be compatible with the Marker views. Not sure if this can be worked around yet or not.&lt;/p&gt; &#xA;&lt;p&gt;Markers&#39; coordinates can also be animated, as shown in this example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xTcnTelp1OwGPu1Wh2.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xTcnT6WVpwlCiQnFW8.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Polygon Creator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o6UAZWqQBkOzs8HE4.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XVBRErNZl3zyWQ.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other Overlays&lt;/h3&gt; &#xA;&lt;p&gt;So far, &lt;code&gt;&amp;lt;Circle /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Polygon /&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Polyline /&amp;gt;&lt;/code&gt; are available to pass in as children to the &lt;code&gt;&amp;lt;MapView /&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XZCH8JpEhzVcNG.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77XZyA0aYeOX5jsA.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gradient Polylines (iOS MapKit only)&lt;/h3&gt; &#xA;&lt;p&gt;Gradient polylines can be created using the &lt;code&gt;strokeColors&lt;/code&gt; prop of the &lt;code&gt;&amp;lt;Polyline&amp;gt;&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/P7UeqAm.png?1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default Markers&lt;/h3&gt; &#xA;&lt;p&gt;Default markers will be rendered unless a custom marker is specified. One can optionally adjust the color of the default marker by using the &lt;code&gt;pinColor&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77Y0pWKmUUnguHK0.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/3o6UBfk3I58VIwZjVe.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Callouts&lt;/h3&gt; &#xA;&lt;p&gt;Callouts to markers can be completely arbitrary react views, similar to markers. As a result, they can be interacted with like any other view.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can fall back to the standard behavior of just having a title/description through the &lt;code&gt;&amp;lt;Marker /&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; props.&lt;/p&gt; &#xA;&lt;p&gt;Custom callout views can be the entire tooltip bubble, or just the content inside of the system default bubble.&lt;/p&gt; &#xA;&lt;p&gt;To handle press on specific subview of callout use &lt;code&gt;&amp;lt;CalloutSubview /&amp;gt;&lt;/code&gt; with &lt;code&gt;onPress&lt;/code&gt;. See &lt;code&gt;Callouts.js&lt;/code&gt; example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/xT77XNePGnMIIDpbnq.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/xT77YdU0HXryvoRqaQ.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Image-based Markers&lt;/h3&gt; &#xA;&lt;p&gt;Markers can be customized by just using images, and specified using the &lt;code&gt;image&lt;/code&gt; prop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/mzrOjTR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Draggable Markers&lt;/h3&gt; &#xA;&lt;p&gt;Markers are draggable, and emit continuous drag events to update other UI during drags.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/l2JImnZxdv1WbpQfC.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/l2JIhv4Jx6Ugx1EGI.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lite Mode ( Android )&lt;/h3&gt; &#xA;&lt;p&gt;Enable lite mode on Android with &lt;code&gt;liteMode&lt;/code&gt; prop. Ideal when having multiple maps in a View or ScrollView.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/qZ2lAf18s89na.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;On Poi Click (Google Maps Only)&lt;/h3&gt; &#xA;&lt;p&gt;Poi are clickable, you can catch the event to get its information (usually to get the full detail from Google Place using the placeId).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/3480VsCKnHr31uCLU3/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Animated Region&lt;/h3&gt; &#xA;&lt;p&gt;The MapView can accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as its &lt;code&gt;region&lt;/code&gt; prop. This allows you to utilize the Animated API to control the map&#39;s center and zoom.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { AnimatedRegion, Animated } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    region: new AnimatedRegion({&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;      latitudeDelta: LATITUDE_DELTA,&#xA;      longitudeDelta: LONGITUDE_DELTA,&#xA;    }),&#xA;  };&#xA;}&#xA;&#xA;onRegionChange(region) {&#xA;  this.state.region.setValue(region);&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;Animated&#xA;      region={this.state.region}&#xA;      onRegionChange={this.onRegionChange}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animated Marker Position&lt;/h3&gt; &#xA;&lt;p&gt;Markers can also accept an &lt;code&gt;AnimatedRegion&lt;/code&gt; value as a coordinate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import Mapview, { AnimatedRegion, MarkerAnimated } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    coordinate: new AnimatedRegion({&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;    }),&#xA;  };&#xA;}&#xA;&#xA;componentWillReceiveProps(nextProps) {&#xA;  const duration = 500&#xA;&#xA;  if (this.props.coordinate !== nextProps.coordinate) {&#xA;    if (Platform.OS === &#39;android&#39;) {&#xA;      if (this.marker) {&#xA;        this.marker.animateMarkerToCoordinate(&#xA;          nextProps.coordinate,&#xA;          duration&#xA;        );&#xA;      }&#xA;    } else {&#xA;      this.state.coordinate.timing({&#xA;        ...nextProps.coordinate,&#xA;        useNativeDriver: true, // defaults to false if not passed explicitly&#xA;        duration&#xA;      }).start();&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;MapView initialRegion={...}&amp;gt;&#xA;      &amp;lt;MarkerAnimated&#xA;        ref={marker =&amp;gt; { this.marker = marker }}&#xA;        coordinate={this.state.coordinate}&#xA;      /&amp;gt;&#xA;    &amp;lt;/MapView&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Take Snapshot of map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MapView, { Marker } from &#39;react-native-maps&#39;;&#xA;&#xA;getInitialState() {&#xA;  return {&#xA;    coordinate: {&#xA;      latitude: LATITUDE,&#xA;      longitude: LONGITUDE,&#xA;    },&#xA;  };&#xA;}&#xA;&#xA;takeSnapshot () {&#xA;  // &#39;takeSnapshot&#39; takes a config object with the&#xA;  // following options&#xA;  const snapshot = this.map.takeSnapshot({&#xA;    width: 300,      // optional, when omitted the view-width is used&#xA;    height: 300,     // optional, when omitted the view-height is used&#xA;    region: {..},    // iOS only, optional region to render&#xA;    format: &#39;png&#39;,   // image formats: &#39;png&#39;, &#39;jpg&#39; (default: &#39;png&#39;)&#xA;    quality: 0.8,    // image quality: 0..1 (only relevant for jpg, default: 1)&#xA;    result: &#39;file&#39;   // result types: &#39;file&#39;, &#39;base64&#39; (default: &#39;file&#39;)&#xA;  });&#xA;  snapshot.then((uri) =&amp;gt; {&#xA;    this.setState({ mapSnapshot: uri });&#xA;  });&#xA;}&#xA;&#xA;render() {&#xA;  return (&#xA;    &amp;lt;View&amp;gt;&#xA;      &amp;lt;MapView initialRegion={...} ref={map =&amp;gt; { this.map = map }}&amp;gt;&#xA;        &amp;lt;Marker coordinate={this.state.coordinate} /&amp;gt;&#xA;      &amp;lt;/MapView&amp;gt;&#xA;      &amp;lt;Image source={{ uri: this.state.mapSnapshot.uri }} /&amp;gt;&#xA;      &amp;lt;TouchableOpacity onPress={this.takeSnapshot}&amp;gt;&#xA;        Take Snapshot&#xA;      &amp;lt;/TouchableOpacity&amp;gt;&#xA;    &amp;lt;/View&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zoom to Specified Markers&lt;/h3&gt; &#xA;&lt;p&gt;Pass an array of marker identifiers to have the map re-focus.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.giphy.com/3o7qEbOQnO0yoXqKJ2.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://i.giphy.com/l41YdrQZ7m6Dz4h0c.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Zoom to Specified Coordinates&lt;/h3&gt; &#xA;&lt;p&gt;Pass an array of coordinates to focus a map region on said coordinates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1627824/18609960/da5d9e06-7cdc-11e6-811e-34e255093df9.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;My map is blank&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that you have &lt;a href=&#34;https://raw.githubusercontent.com/react-native-maps/react-native-maps/master/docs/installation.md&#34;&gt;properly installed&lt;/a&gt; react-native-maps.&lt;/li&gt; &#xA; &lt;li&gt;Check in the logs if there is more informations about the issue.&lt;/li&gt; &#xA; &lt;li&gt;Try setting the style of the MapView to an absolute position with top, left, right and bottom values set.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have enabled Google Maps API in &lt;a href=&#34;https://console.developers.google.com/apis/library&#34;&gt;Google developer console&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const styles = StyleSheet.create({&#xA;  map: {&#xA;    ...StyleSheet.absoluteFillObject,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;MapView&#xA;  style={styles.map}&#xA;  // other props&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Inputs don&#39;t focus&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When inputs don&#39;t focus or elements don&#39;t respond to tap, look at the order of the view hierarchy, sometimes the issue could be due to ordering of rendered components, prefer putting MapView as the first component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View&amp;gt;&#xA;  &amp;lt;TextInput/&amp;gt;&#xA;  &amp;lt;MapView/&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;View&amp;gt;&#xA;  &amp;lt;MapView/&amp;gt;&#xA;  &amp;lt;TextInput/&amp;gt;&#xA;&amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Children Components Not Re-Rendering&lt;/h4&gt; &#xA;&lt;p&gt;Components that aren&#39;t declared by this library (Ex: Markers, Polyline) must not be children of the MapView component due to MapView&#39;s unique rendering methodology. Have your custom components / views outside the MapView component and position absolute to ensure they only re-render as needed. Example: Bad:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;    &amp;lt;MapView style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;      &amp;lt;View style={{ position: &#39;absolute&#39;, top: 100, left: 50 }}/&amp;gt;&#xA;    &amp;lt;/MapView&amp;gt;&#xA;  &amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  &amp;lt;View style={StyleSheet.absoluteFillObject}&amp;gt;&#xA;    &amp;lt;MapView style={StyleSheet.absoluteFillObject} /&amp;gt;&#xA;    &amp;lt;View style={{ position: &#39;absolute&#39;, top: 100, left: 50 }}/&amp;gt;&#xA;  &amp;lt;/View&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/1901&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/1901&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Crashing with EXC_BAD_ACCESS on iOS when switching apps&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;MapView&amp;gt;&lt;/code&gt; using Apple Maps in &lt;code&gt;mapType: &#34;standard&#34;&lt;/code&gt; will sometimes crash when you background the app or switch into another app. This is only an issue in XCode using Metal API Validation, and won&#39;t happen in production. To eliminate this problem even while debugging in XCode, go to &lt;code&gt;Edit Scheme... -&amp;gt; Run (Debug) -&amp;gt; Diagnostics&lt;/code&gt; and uncheck &lt;code&gt;Metal -&amp;gt; API Validation&lt;/code&gt;. (h/t &lt;a href=&#34;https://github.com/Simon-TechForm&#34;&gt;@Simon-TechForm&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&#34;&gt;https://github.com/react-native-maps/react-native-maps/issues/3957#issuecomment-924161121&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; Copyright (c) 2017 Airbnb&#xA;&#xA; Licensed under the The MIT License (MIT) (the &#34;License&#34;);&#xA; you may not use this file except in compliance with the License.&#xA; You may obtain a copy of the License at&#xA;&#xA;    https://raw.githubusercontent.com/airbnb/react-native-maps/master/LICENSE&#xA;&#xA; Unless required by applicable law or agreed to in writing, software&#xA; distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA; See the License for the specific language governing permissions and&#xA; limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>git-up/GitUp</title>
    <updated>2022-10-01T02:01:06Z</updated>
    <id>tag:github.com,2022-10-01:/git-up/GitUp</id>
    <link href="https://github.com/git-up/GitUp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Git interface you&#39;ve been missing all your life has finally arrived.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/git-up/GitUp&#34;&gt;&lt;img src=&#34;https://travis-ci.org/git-up/GitUp.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;GitUp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Work quickly, safely, and without headaches. The Git interface you&#39;ve been missing all your life has finally arrived.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/JuQIxJu.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;img src=&#34;https://i.imgur.com/9rgXktz.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Git recently celebrated its 10 years anniversary, but most engineers are still confused by its intricacy (3 of the &lt;a href=&#34;http://stackoverflow.com/questions?sort=votes&#34;&gt;top 5 questions of all time&lt;/a&gt; on Stack Overflow are Git related). Since Git turns even simple actions into mystifying commands (“git add” to stage versus “git reset HEAD” to unstage anyone?), it’s no surprise users waste time, get frustrated, distract the rest of their team for help, or worse, screw up their repo!&lt;/p&gt; &#xA;&lt;p&gt;GitUp is a bet to invent a new Git interaction model that lets engineers of all levels work quickly, safely, and without headaches. It&#39;s unlike any other Git client out there from the way it’s built (it interacts directly with the Git database on disk), to the way it works (you manipulate the repository graph instead of manipulating commits).&lt;/p&gt; &#xA;&lt;p&gt;With GitUp, you get a truly efficient Git client for Mac:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;strong&gt;live and interactive repo graph&lt;/strong&gt; (edit, reorder, fixup, merge commits…),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unlimited undo / redo&lt;/strong&gt; of almost all operations (even rebases and merges),&lt;/li&gt; &#xA; &lt;li&gt;Time Machine like &lt;strong&gt;snapshots for 1-click rollbacks&lt;/strong&gt; to previous repo states,&lt;/li&gt; &#xA; &lt;li&gt;Features that don’t even exist natively in Git like a &lt;strong&gt;visual commit splitter&lt;/strong&gt; or a &lt;strong&gt;unified reflog browser&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instant search across the entire repo&lt;/strong&gt; including diff contents,&lt;/li&gt; &#xA; &lt;li&gt;A &lt;strong&gt;ridiculously fast UI&lt;/strong&gt;, often faster than the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;GitUp was created by &lt;a href=&#34;https://github.com/swisspol&#34;&gt;@swisspol&lt;/a&gt; in late 2014 as a bet to reinvent the way developers interact with Git. After several months of work, it was made available in pre-release early 2015 and reached the &lt;a href=&#34;https://news.ycombinator.com/item?id=9653978&#34;&gt;top of Hacker News&lt;/a&gt; along with being &lt;a href=&#34;http://www.producthunt.com/tech/gitup-1&#34;&gt;featured by Product Hunt&lt;/a&gt; and &lt;a href=&#34;http://daringfireball.net/linked/2015/06/04/gitup&#34;&gt;Daring Fireball&lt;/a&gt;. 30,000 lines of code later, GitUp reached 1.0 mid-August 2015 and was released open source as a gift to the developer community.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn all about GitUp and download the latest release from &lt;a href=&#34;http://gitup.co&#34;&gt;http://gitup.co&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://github.com/git-up/GitUp/wiki&#34;&gt;docs&lt;/a&gt; and use &lt;a href=&#34;https://github.com/git-up/GitUp/issues&#34;&gt;GitHub Issues&lt;/a&gt; for support &amp;amp; feedback.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Releases notes are available at &lt;a href=&#34;https://github.com/git-up/GitUp/releases&#34;&gt;https://github.com/git-up/GitUp/releases&lt;/a&gt;. Builds tagged with a &lt;code&gt;v&lt;/code&gt; (e.g. &lt;code&gt;v1.2.3&lt;/code&gt;) are released on the &#34;Stable&#34; channel, while builds tagged with a &lt;code&gt;b&lt;/code&gt; (e.g. &lt;code&gt;b1234&lt;/code&gt;) are only released on the &#34;Continuous&#34; channel. You can change the update channel used by GitUp in the app preferences.&lt;/p&gt; &#xA;&lt;p&gt;To build GitUp yourself, simply run the command &lt;code&gt;git clone --recursive https://github.com/git-up/GitUp.git&lt;/code&gt; in Terminal, then open the &lt;code&gt;GitUp/GitUp.xcodeproj&lt;/code&gt; Xcode project and hit Run.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If you do not have an Apple ID with a developer account for code signing Mac apps, the build will fail with a code signing error. Simply delete the &#34;Code Signing Identity&#34; build setting of the &#34;Application&#34; target to work around the issue:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/dWpJExk.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, if you do have a developer account, you can create the file &#34;Xcode-Configurations/DEVELOPMENT_TEAM.xcconfig&#34; with the following build setting as its content:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DEVELOPMENT_TEAM = [Your TeamID]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For a more detailed description of this, you can have a look at the comments at the end of the file &#34;Xcode-Configurations/Base.xcconfig&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;GitUpKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GitUp is built as a thin layer on top of a reusable generic Git toolkit called &#34;GitUpKit&#34;. This means that you can use that same GitUpKit framework to build your very own Git UI!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;GitUpKit has a very different goal than &lt;a href=&#34;https://github.com/libgit2/objective-git&#34;&gt;ObjectiveGit&lt;/a&gt;. Instead of offering extensive raw bindings to &lt;a href=&#34;https://github.com/libgit2/libgit2&#34;&gt;libgit2&lt;/a&gt;, GitUpKit only uses a minimal subset of libgit2 and reimplements everything else on top of it (it has its own &#34;rebase engine&#34; for instance). This allows it to expose a very tight and consistent API, that completely follows Obj-C conventions and hides away the libgit2 complexity and sometimes inconsistencies. GitUpKit adds on top of that a number of exclusive and powerful features, from undo/redo and Time Machine like snapshots, to entire drop-in UI components.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The GitUpKit source code is organized as 2 independent layers communicating only through the use of public APIs:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Base Layer (depends on Foundation only and is compatible with OS X and iOS)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Core/&lt;/code&gt;: wrapper around the required minimal functionality of &lt;a href=&#34;https://github.com/libgit2/libgit2&#34;&gt;libgit2&lt;/a&gt;, on top of which is then implemented all the Git functionality required by GitUp (note that GitUp uses a &lt;a href=&#34;https://github.com/git-up/libgit2/tree/gitup&#34;&gt;slightly customized fork&lt;/a&gt; of libgit2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Extensions/&lt;/code&gt;: categories on the &lt;code&gt;Core&lt;/code&gt; classes to add convenience features implemented only using the public APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;UI Layer (depends on AppKit and is compatible with OS X only)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Interface/&lt;/code&gt;: low-level view classes e.g. &lt;code&gt;GIGraphView&lt;/code&gt; to render the GitUp Map view&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Utilities/&lt;/code&gt;: interface utility classes e.g. the base view controller class &lt;code&gt;GIViewController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Components/&lt;/code&gt;: reusable single-view view controllers e.g. &lt;code&gt;GIDiffContentsViewController&lt;/code&gt; to render a diff&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Views/&lt;/code&gt;: high-level reusable multi-views view controllers e.g. &lt;code&gt;GIAdvancedCommitViewController&lt;/code&gt; to implement the entire GitUp Advanced Commit view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: If the preprocessor constant &lt;code&gt;DEBUG&lt;/code&gt; is defined to a non-zero value when building GitUpKit (this is the default when building in &#34;Debug&#34; configuration), a number of extra consistency checks are enabled at run time as well as extra logging. Be aware that this overhead can significantly affect performance.&lt;/p&gt; &#xA;&lt;h2&gt;GitUpKit API&lt;/h2&gt; &#xA;&lt;p&gt;Using the GitUpKit API should be pretty straightforward since it is organized by functionality (e.g. repository, branches, commits, interface components, etc...) and a best effort has been made to name functions clearly.&lt;/p&gt; &#xA;&lt;p&gt;Regarding the &#34;Core&#34; APIs, the best way to learn them is to peruse the associated unit tests - for instance see &lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/GitUpKit/Core/GCBranch-Tests.m&#34;&gt;the branch tests&lt;/a&gt; for the branch API.&lt;/p&gt; &#xA;&lt;p&gt;Here is some sample code to get you started (error handling is left as an exercise to the reader):&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Opening and browsing a repository:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Open repo&#xA;GCRepository* repo = [[GCRepository alloc] initWithExistingLocalRepository:&amp;lt;PATH&amp;gt; error:NULL];&#xA;&#xA;// Make sure repo is clean&#xA;assert([repo checkClean:kGCCleanCheckOption_IgnoreUntrackedFiles error:NULL]);&#xA;&#xA;// List all branches&#xA;NSArray* branches = [repo listAllBranches:NULL];&#xA;NSLog(@&#34;%@&#34;, branches);&#xA;&#xA;// Lookup HEAD&#xA;GCLocalBranch* headBranch;  // This would be nil if the HEAD is detached&#xA;GCCommit* headCommit;&#xA;[repo lookupHEADCurrentCommit:&amp;amp;headCommit branch:&amp;amp;headBranch error:NULL];&#xA;NSLog(@&#34;%@ = %@&#34;, headBranch, headCommit);&#xA;&#xA;// Load the *entire* repo history in memory for fast access, including all commits, branches and tags&#xA;GCHistory* history = [repo loadHistoryUsingSorting:kGCHistorySorting_ReverseChronological error:NULL];&#xA;assert(history);&#xA;NSLog(@&#34;%lu commits total&#34;, history.allCommits.count);&#xA;NSLog(@&#34;%@\n%@&#34;, history.rootCommits, history.leafCommits);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modifying a repository:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;// Take a snapshot of the repo&#xA;GCSnapshot* snapshot = [repo takeSnapshot:NULL];&#xA;&#xA;// Create a new branch and check it out&#xA;GCLocalBranch* newBranch = [repo createLocalBranchFromCommit:headCommit withName:@&#34;temp&#34; force:NO error:NULL];&#xA;NSLog(@&#34;%@&#34;, newBranch);&#xA;assert([repo checkoutLocalBranch:newBranch options:0 error:NULL]);&#xA;&#xA;// Add a file to the index&#xA;[[NSData data] writeToFile:[repo.workingDirectoryPath stringByAppendingPathComponent:@&#34;empty.data&#34;] atomically:YES];&#xA;assert([repo addFileToIndex:@&#34;empty.data&#34; error:NULL]);&#xA;&#xA;// Check index status&#xA;GCDiff* diff = [repo diffRepositoryIndexWithHEAD:nil options:0 maxInterHunkLines:0 maxContextLines:0 error:NULL];&#xA;assert(diff.deltas.count == 1);&#xA;NSLog(@&#34;%@&#34;, diff);&#xA;&#xA;// Create a commit&#xA;GCCommit* newCommit = [repo createCommitFromHEADWithMessage:@&#34;Added file&#34; error:NULL];&#xA;assert(newCommit);&#xA;NSLog(@&#34;%@&#34;, newCommit);&#xA;&#xA;// Restore repo to saved snapshot before topic branch and commit were created&#xA;BOOL success = [repo restoreSnapshot:snapshot withOptions:kGCSnapshotOption_IncludeAll reflogMessage:@&#34;Rolled back&#34; didUpdateReferences:NULL error:NULL];&#xA;assert(success);&#xA;  &#xA;// Make sure topic branch is gone&#xA;assert([repo findLocalBranchWithName:@&#34;temp&#34; error:NULL] == nil);&#xA;  &#xA;// Update workdir and index to match HEAD&#xA;assert([repo resetToHEAD:kGCResetMode_Hard error:NULL]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Complete Example #1: GitDown&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitDown&#34;&gt;GitDown&lt;/a&gt; is a very basic app that prompts the user for a repo and displays an interactive and live-updating list of its stashes (all with ~20 lines of code in &lt;code&gt;-[AppDelegate applicationDidFinishLaunching:]&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/ZfxM7su.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Through GitUpKit, this basic app also gets for free unlimited undo/redo, unified and side-by-side diffs, text selection and copy, keyboard shortcuts, etc...&lt;/p&gt; &#xA;&lt;p&gt;This source code also demonstrates how to use some other GitUpKit view controllers as well as building a customized one.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Example #2: GitDiff&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitDiff&#34;&gt;GitDiff&lt;/a&gt; demonstrates how to create a view controller that displays a live updating diff between &lt;code&gt;HEAD&lt;/code&gt; and the workdir à la &lt;code&gt;git diff HEAD&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/29hxDcJ.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Complete Example #3: GitY&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/GitY&#34;&gt;GitY&lt;/a&gt; is a &lt;a href=&#34;http://gitx.frim.nl/&#34;&gt;GitX&lt;/a&gt; clone built using GitUpKit and less than 200 lines of code:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://i.imgur.com/6cuPcT4.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Complete Example #4: iGit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/Examples/iGit&#34;&gt;iGit&lt;/a&gt; is a test iOS app that simply uses GitUpKit to clone a GitHub repo and perform a commit.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swisspol&#34;&gt;@swisspol&lt;/a&gt;: concept and code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wwayneee&#34;&gt;@wwayneee&lt;/a&gt;: UI design&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jayeb&#34;&gt;@jayeb&lt;/a&gt;: website&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Also a big thanks to the fine &lt;a href=&#34;https://libgit2.github.com/&#34;&gt;libgit2&lt;/a&gt; contributors without whom GitUp would have never existed!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;GitUp is copyright 2015-2018 Pierre-Olivier Latour and available under &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0.txt&#34;&gt;GPL v3 license&lt;/a&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/git-up/GitUp/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file in the project for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; GitUp includes some other open-source projects and such projects remain under their own license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ivpusic/react-native-image-crop-picker</title>
    <updated>2022-10-01T02:01:06Z</updated>
    <id>tag:github.com,2022-10-01:/ivpusic/react-native-image-crop-picker</id>
    <link href="https://github.com/ivpusic/react-native-image-crop-picker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS/Android image picker with support for camera, video, configurable compression, multiple images and cropping&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-native-image-crop-picker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/svg.svg?sanitize=true&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;iOS/Android image picker with support for camera, video, configurable compression, multiple images and cropping&lt;/p&gt; &#xA;&lt;h2&gt;Result&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Single Pick&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_single_pick_v2.png&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Multiple Pick&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_multiple_pick_v2.png&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Crop Normal&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_normal_crop.png&#34;&gt; &lt;img width=&#34;200&#34; title=&#34;iOS Crop Circular&#34; src=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/images/ios_circular_crop.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Important note&lt;/h2&gt; &#xA;&lt;p&gt;If you are using react-native &amp;gt;= 0.60 use react-native-image-crop-picker version &amp;gt;= 0.25.0. Otherwise use version &amp;lt; 0.25.0.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import ImagePicker from &#39;react-native-image-crop-picker&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select from gallery&lt;/h3&gt; &#xA;&lt;p&gt;Call single image picker with cropping&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openPicker({&#xA;  width: 300,&#xA;  height: 400,&#xA;  cropping: true&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call multiple image picker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openPicker({&#xA;  multiple: true&#xA;}).then(images =&amp;gt; {&#xA;  console.log(images);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Select video only from gallery&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openPicker({&#xA;  mediaType: &#34;video&#34;,&#xA;}).then((video) =&amp;gt; {&#xA;  console.log(video);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android: The prop &#39;cropping&#39; has been known to cause videos not to be displayed in the gallery on Android. Please do not set cropping to true when selecting videos.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Select from camera&lt;/h3&gt; &#xA;&lt;h4&gt;Image&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openCamera({&#xA;  width: 300,&#xA;  height: 400,&#xA;  cropping: true,&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openCamera({&#xA;  mediaType: &#39;video&#39;,&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Crop picture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.openCropper({&#xA;  path: &#39;my-file-path.jpg&#39;,&#xA;  width: 300,&#xA;  height: 400&#xA;}).then(image =&amp;gt; {&#xA;  console.log(image);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional cleanup&lt;/h3&gt; &#xA;&lt;p&gt;Module is creating tmp images which are going to be cleaned up automatically somewhere in the future. If you want to force cleanup, you can use &lt;code&gt;clean&lt;/code&gt; to clean all tmp files, or &lt;code&gt;cleanSingle(path)&lt;/code&gt; to clean single tmp file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ImagePicker.clean().then(() =&amp;gt; {&#xA;  console.log(&#39;removed all tmp images from tmp directory&#39;);&#xA;}).catch(e =&amp;gt; {&#xA;  alert(e);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request Object&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropping&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Width of result image when used with &lt;code&gt;cropping&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;height&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Height of result image when used with &lt;code&gt;cropping&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;multiple&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable multiple image selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;writeTempFile (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When set to false, does not write temporary files for the selected images. This is useful to improve performance when you are retrieving file contents with the &lt;code&gt;includeBase64&lt;/code&gt; option and don&#39;t need to read files from disk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;includeBase64&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When set to true, the image file content will be available as a base64-encoded string in the &lt;code&gt;data&lt;/code&gt; property. Hint: To use this string as an image source, use it like: &lt;code&gt;&amp;lt;Image source={{uri: `data:${image.mime};base64,${image.data}`}} /&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;includeExif&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Include image exif data in the response&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avoidEmptySpaceAroundImage (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When set to true, the image will always fill the mask space.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperActiveWidgetColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;&#34;#424242&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines ActiveWidget color.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperStatusBarColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;#424242&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the color of StatusBar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperToolbarColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;#424242&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the color of Toolbar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperToolbarWidgetColor (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;darker orange&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the color of Toolbar text and buttons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;freeStyleCropEnabled&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enables user to apply custom rectangle area for cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperToolbarTitle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &lt;code&gt;Edit Photo&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, determines the title of Toolbar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperCircleOverlay&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable circular cropping mask.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disableCropperColorSetters (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When cropping image, disables the color setters for cropping library.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minFiles (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default 1)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Min number of files to select when using &lt;code&gt;multiple&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxFiles (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default 5)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Max number of files to select when using &lt;code&gt;multiple&lt;/code&gt; option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;waitAnimationEnd (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Promise will resolve/reject once ViewController &lt;code&gt;completion&lt;/code&gt; block is called&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;smartAlbums (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;array (&lt;a href=&#34;https://github.com/ivpusic/react-native-image-crop-picker/raw/master/README.md#smart-album-types-ios&#34;&gt;supported values&lt;/a&gt;) (default [&#39;UserLibrary&#39;, &#39;PhotoStream&#39;, &#39;Panoramas&#39;, &#39;Videos&#39;, &#39;Bursts&#39;])&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of smart albums to choose from&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useFrontCamera&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to default to the front/&#39;selfie&#39; camera when opened. Please note that not all Android devices handle this parameter, see &lt;a href=&#34;https://github.com/ivpusic/react-native-image-crop-picker/issues/1058&#34;&gt;issue #1058&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressVideoPreset (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default MediumQuality)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Choose which preset will be used for video compression&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressImageMaxWidth&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default none)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compress image with maximum width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressImageMaxHeight&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default none)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compress image with maximum height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;compressImageQuality&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number (default 1 (Android)/0.8 (iOS))&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compress image with quality (from 0 to 1, where 1 is best quality). On iOS, values larger than 0.8 don&#39;t produce a noticeable quality increase in most images, while a value of 0.8 will reduce the file size by about half or less compared to a value of 1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;loadingLabelText (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &#34;Processing assets...&#34;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Text displayed while photo is loading in picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mediaType&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default any)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Accepted mediaType for image selection, can be one of: &#39;photo&#39;, &#39;video&#39;, or &#39;any&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showsSelectedCount (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to show the number of selected assets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sortOrder (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default &#39;none&#39;, supported values: &#39;asc&#39;, &#39;desc&#39;, &#39;none&#39;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Applies a sort order on the creation date on how media is displayed within the albums/detail photo views when opening the image picker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;forceJpg (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to convert photos to JPG. This will also convert any Live Photo into its JPG representation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showCropGuidelines (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to show the 3x3 grid on top of the image during cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showCropFrame (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default true)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to show crop frame during cropping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hideBottomControls (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to display bottom controls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableRotationGesture (android only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bool (default false)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Whether to enable rotating the image by hand gesture&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperChooseText (ios only)&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; string (default choose) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Choose button text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperCancelText (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string (default Cancel)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cancel button text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropperRotateButtonsHidden (ios only)&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bool (default false) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enable or disable cropper rotate buttons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Smart Album Types (ios)&lt;/h4&gt; &#xA;&lt;p&gt;NOTE: Some of these types may not be available on all iOS versions. Be sure to check this to avoid issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[&#39;PhotoStream&#39;, &#39;Generic&#39;, &#39;Panoramas&#39;, &#39;Videos&#39;, &#39;Favorites&#39;, &#39;Timelapses&#39;, &#39;AllHidden&#39;, &#39;RecentlyAdded&#39;, &#39;Bursts&#39;, &#39;SlomoVideos&#39;, &#39;UserLibrary&#39;, &#39;SelfPortraits&#39;, &#39;Screenshots&#39;, &#39;DepthEffect&#39;, &#39;LivePhotos&#39;, &#39;Animated&#39;, &#39;LongExposure&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Response Object&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image location. This is null when the &lt;code&gt;writeTempFile&lt;/code&gt; option is set to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;localIdentifier(ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected images&#39; localidentifier, used for PHAsset searching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sourceURL(ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected images&#39; source path, do not have write access&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filename(ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected images&#39; filename&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;width&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;height&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image height&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mime&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image MIME type (image/jpeg, image/png)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;size&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Selected image size in bytes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;duration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Video duration time in milliseconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;data&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;base64&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optional base64 selected file representation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exif&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;object&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Extracted exif data from image. Response format is platform specific&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropRect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;object&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cropped image rectangle (width, height, x, y)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;creationDate (ios only)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UNIX timestamp when image was created&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;modificationDate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UNIX timestamp when image was last modified&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Step 1&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i react-native-image-crop-picker --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Step 2&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ios&#xA;pod install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Step 3&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;p&gt;In Xcode open Info.plist and add string key &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; with value that describes why you need access to user photos. More info here &lt;a href=&#34;https://forums.developer.apple.com/thread/62229&#34;&gt;https://forums.developer.apple.com/thread/62229&lt;/a&gt;. Depending on what features you use, you also may need &lt;code&gt;NSCameraUsageDescription&lt;/code&gt; and &lt;code&gt;NSMicrophoneUsageDescription&lt;/code&gt; keys.&lt;/p&gt; &#xA;&lt;h4&gt;(Optional) Step 2 - To localizate the camera / gallery / cropper text buttons&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open your Xcode project&lt;/li&gt; &#xA; &lt;li&gt;Go to your project settings by opening the project name on the Navigation (left side)&lt;/li&gt; &#xA; &lt;li&gt;Select your project in the project list&lt;/li&gt; &#xA; &lt;li&gt;Should be into the Info tab and add in Localizations the language your app was missing throughout the +&lt;/li&gt; &#xA; &lt;li&gt;Rebuild and you should now have your app camera and gallery with the classic ios text in the language you added.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;VERY IMPORTANT&lt;/strong&gt; Add the following to your &lt;code&gt;build.gradle&lt;/code&gt;&#39;s repositories section. (android/build.gradle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;allprojects {&#xA;    repositories {&#xA;      mavenLocal()&#xA;      jcenter()&#xA;      maven { url &#34;$rootDir/../node_modules/react-native/android&#34; }&#xA;&#xA;      // ADD THIS&#xA;      maven { url &#39;https://maven.google.com&#39; }&#xA;&#xA;      // ADD THIS&#xA;      maven { url &#34;https://www.jitpack.io&#34; }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;useSupportLibrary&lt;/code&gt; (android/app/build.gradle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {&#xA;    ...&#xA;&#xA;    defaultConfig {&#xA;        ...&#xA;        vectorDrawables.useSupportLibrary = true&#xA;        ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use Android SDK &amp;gt;= 26 (android/app/build.gradle)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {&#xA;    compileSdkVersion 27&#xA;    buildToolsVersion &#34;27.0.3&#34;&#xA;    ...&#xA;    &#xA;    defaultConfig {&#xA;      ...&#xA;      targetSdkVersion 27&#xA;      ...&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimum Gradle version if you are using react-native-image-crop-picker &amp;gt;= 0.35.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;3.3.3&#xA;3.4.3&#xA;3.5.4&#xA;3.6.4&#xA;4.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reference for more details &lt;a href=&#34;https://github.com/ivpusic/react-native-image-crop-picker/issues/1406&#34;&gt;https://github.com/ivpusic/react-native-image-crop-picker/issues/1406&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] If you want to use camera picker in your project, add following to &lt;code&gt;app/src/main/AndroidManifest.xml&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34;/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] If you want to use front camera, also add following to &lt;code&gt;app/src/main/ AndroidManifest.xml&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;uses-feature android:name=&#34;android.hardware.camera&#34; android:required=&#34;false&#34; /&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;uses-feature android:name=&#34;android.hardware.camera.front&#34; android:required=&#34;false&#34; /&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TO DO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; [Android] Standardize multiple select&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; [Android] Video compression&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/CONTRIBUTING.md&#34;&gt;[Contribute]&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/ivpusic/react-native-image-crop-picker/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/react-native-image-crop-picker/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;MIT&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>