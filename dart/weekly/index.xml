<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:49:07Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RevenueCat/purchases-flutter</title>
    <updated>2023-11-19T01:49:07Z</updated>
    <id>tag:github.com,2023-11-19:/RevenueCat/purchases-flutter</id>
    <link href="https://github.com/RevenueCat/purchases-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter plugin for in-app purchases and subscriptions. Supports iOS, macOS and Android.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/5e2613cf294dc30503dcefb7/5e752025f8c3a31d56a51408_logo_red%20(1).svg?sanitize=true&#34; width=&#34;350&#34; alt=&#34;RevenueCat&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/purchases_flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/purchases_flutter.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;purchases_flutter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;purchases_flutter&lt;/em&gt; is a client for the &lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt; subscription and purchase tracking system. It is an open source framework that provides a wrapper around &lt;code&gt;StoreKit&lt;/code&gt;, &lt;code&gt;Google Play Billing&lt;/code&gt; and the RevenueCat backend to make implementing in-app subscriptions in &lt;code&gt;Flutter&lt;/code&gt; easy - receipt validation and status tracking included!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;RevenueCat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;Server-side receipt validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚û°Ô∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;Webhooks&lt;/a&gt; - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üéØ&lt;/td&gt; &#xA;   &lt;td&gt;Subscription status tracking - know whether a user is subscribed whether they&#39;re on iOS or Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìä&lt;/td&gt; &#xA;   &lt;td&gt;Analytics - automatic calculation of metrics like conversion, mrr, and churn&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìù&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/flutter&#34;&gt;Online documentation&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/documentation/purchases_flutter/latest/&#34;&gt;SDK Reference&lt;/a&gt; up to date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üîÄ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.revenuecat.com/integrations&#34;&gt;Integrations&lt;/a&gt; - over a dozen integrations to easily send purchase data where you need it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üíØ&lt;/td&gt; &#xA;   &lt;td&gt;Well maintained - &lt;a href=&#34;https://github.com/RevenueCat/purchases-flutter/releases&#34;&gt;frequent releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìÆ&lt;/td&gt; &#xA;   &lt;td&gt;Great support - &lt;a href=&#34;https://revenuecat.zendesk.com&#34;&gt;Help Center&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin, add &lt;code&gt;purchases_flutter&lt;/code&gt; as a &lt;a href=&#34;https://flutter.io/platform-plugins/&#34;&gt;dependency in your pubspec.yaml file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;purchases_flutter&lt;/em&gt; requires XCode 13.3.1+ and minimum targets iOS 11.0+.&lt;/p&gt; &#xA;&lt;h2&gt;SDK Reference&lt;/h2&gt; &#xA;&lt;p&gt;Our full SDK reference &lt;a href=&#34;https://pub.dev/documentation/purchases_flutter/latest/&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, you can view our complete documentation at &lt;a href=&#34;https://docs.revenuecat.com/docs/flutter&#34;&gt;docs.revenuecat.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>media-kit/media-kit</title>
    <updated>2023-11-19T01:49:07Z</updated>
    <id>tag:github.com,2023-11-19:/media-kit/media-kit</id>
    <link href="https://github.com/media-kit/media-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform video player &amp; audio player for Flutter &amp; Dart.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;A cross-platform video player &amp;amp; audio player for Flutter &amp;amp; Dart.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/h7qf2R9n57&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1079685977523617792?color=33cd57&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=discord&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/media-kit/media-kit/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/media-kit/media-kit/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sponsored with üíñ by&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://getstream.io/chat/sdk/flutter/?utm_source=alexmercerind_dart&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=alexmercerind_December2022_FlutterSDK_klmh22&#34; target=&#34;_blank&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/28951144/204903234-4a64b63c-2fc2-4eef-be44-d287d27021e5.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://user-images.githubusercontent.com/28951144/204903022-bbaa49ca-74c2-4a8f-a05d-af8314bfd2cc.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Stream Chat&#34; width=&#34;200&#34; height=&#34;auto&#34; src=&#34;https://user-images.githubusercontent.com/28951144/204903022-bbaa49ca-74c2-4a8f-a05d-af8314bfd2cc.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;strong&gt; &lt;a href=&#34;https://getstream.io/chat/sdk/flutter/?utm_source=alexmercerind_dart&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=alexmercerind_December2022_FlutterSDK_klmh22&#34; target=&#34;_blank&#34;&gt; Try the Flutter Chat tutorial &lt;/a&gt; &lt;/strong&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://ottomatic.io/&#34; target=&#34;_blank&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/28951144/228648854-e5d7c557-ee92-47b2-a037-17b447873e1c.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://user-images.githubusercontent.com/28951144/228648844-f2a59ab1-12cd-4fee-bc8d-b2d332033c45.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Stream Chat&#34; width=&#34;200&#34; height=&#34;auto&#34; src=&#34;https://user-images.githubusercontent.com/28951144/228648844-f2a59ab1-12cd-4fee-bc8d-b2d332033c45.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;strong&gt; &lt;a href=&#34;https://ottomatic.io/&#34; target=&#34;_blank&#34;&gt; Clever Apps for Film Professionals &lt;/a&gt; &lt;/strong&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt; is split into multiple packages to improve modularity &amp;amp; reduce bundle size.&lt;/p&gt; &#xA;&lt;h4&gt;For apps that need video playback:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  media_kit: ^1.1.10                             # Primary package.&#xA;  media_kit_video: ^1.2.4                        # For video rendering.&#xA;  media_kit_libs_video: ^1.0.4                   # Native video dependencies.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For apps that need audio playback:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  media_kit: ^1.1.10                             # Primary package.  &#xA;  media_kit_libs_audio: ^1.0.4                   # Native audio dependencies.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The video libraries should be selected if both video &amp;amp; audio support is needed.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;media_kit_libs_video&lt;/code&gt; &amp;amp; &lt;code&gt;media_kit_libs_audio&lt;/code&gt; packages should not be mixed.&lt;/li&gt; &#xA; &lt;li&gt;The performance in &lt;a href=&#34;https://docs.flutter.dev/testing/build-modes#release&#34;&gt;&#34;Release&#34; mode&lt;/a&gt; is substantially higher than in &lt;a href=&#34;https://docs.flutter.dev/testing/build-modes#debug&#34;&gt;&#34;Debug&#34; mode&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/deployment/android#what-is-a-fat-apk&#34;&gt;Enable --split-per-abi&lt;/a&gt; or &lt;a href=&#34;https://docs.flutter.dev/deployment/android#when-should-i-build-app-bundles-versus-apks&#34;&gt;use app bundle (instead of APK)&lt;/a&gt; on Android.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Video&lt;/th&gt; &#xA;   &lt;th&gt;Audio&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;   &lt;th&gt;Demo&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;Android 5.0 or above.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit/releases/download/media_kit-v1.1.10/media_kit_test_android-arm64-v8a.apk&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;iOS 9 or above.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit/releases/download/media_kit-v1.1.10/media_kit_test_ios_arm64.7z&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;macOS 10.9 or above.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit/releases/download/media_kit-v1.1.10/media_kit_test_macos_universal.7z&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;Windows 7 or above.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit/releases/download/media_kit-v1.1.10/media_kit_test_win32_x64.7z&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNU/Linux&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;Any modern GNU/Linux distribution.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit/releases/download/media_kit-v1.1.10/media_kit_test_linux_x64.7z&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;Any modern web browser.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://media-kit.github.io/media-kit/&#34;&gt;Visit&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; Android &lt;/td&gt; &#xA;   &lt;td&gt; iOS &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/cf93a1fd-e1d8-4d1c-8bd5-cc393cef1ce9&#34; height=&#34;400&#34; alt=&#34;Android&#34;&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/aea1f480-51e2-452a-b53c-c0e27f71f0d8&#34; height=&#34;400&#34; alt=&#34;Android&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/e8ce64cb-1ea9-4a3e-bc9c-db620abf88c9&#34; height=&#34;400&#34; alt=&#34;iOS&#34;&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/d7159df2-1df1-46d3-84f8-238e2a66bfbc&#34; height=&#34;400&#34; alt=&#34;iOS&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; macOS &lt;/td&gt; &#xA;   &lt;td&gt; Windows &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/fca8dbbf-4262-431f-a04a-f3aa6afb2911&#34; height=&#34;200&#34; alt=&#34;macOS&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/742b0016-da58-42de-9880-ecaa0604c2b2&#34; height=&#34;200&#34; alt=&#34;Windows&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; GNU/Linux &lt;/td&gt; &#xA;   &lt;td&gt; Web &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/8cd63750-6746-4c75-bc4e-cca5e4c61890&#34; height=&#34;200&#34; alt=&#34;GNU/Linux&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/media-kit/media-kit/assets/28951144/feb9fdf2-095f-43db-96af-f7782985238d&#34; height=&#34;200&#34; alt=&#34;Web&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ Video playback&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Audio playback&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Cross platform&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Wide format/codec support&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Hardware/GPU acceleration&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Playlist support with next/previous/jump/shuffle&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Volume/Rate/Pitch change&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Video/Audio/Subtitle track selection&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ External audio/subtitle track selection&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ HTTP headers&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Video controls&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Subtitle styling&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Screenshot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TL;DR&lt;/h2&gt; &#xA;&lt;p&gt;A quick usage example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;&#xA;// Make sure to add following packages to pubspec.yaml:&#xA;// * media_kit&#xA;// * media_kit_video&#xA;// * media_kit_libs_video&#xA;import &#39;package:media_kit/media_kit.dart&#39;;                      // Provides [Player], [Media], [Playlist] etc.&#xA;import &#39;package:media_kit_video/media_kit_video.dart&#39;;          // Provides [VideoController] &amp;amp; [Video] etc.        &#xA;&#xA;void main() {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;  // Necessary initialization for package:media_kit.&#xA;  MediaKit.ensureInitialized();&#xA;  runApp(&#xA;    const MaterialApp(&#xA;      home: MyScreen(),&#xA;    ),&#xA;  );&#xA;}&#xA;&#xA;class MyScreen extends StatefulWidget {&#xA;  const MyScreen({Key? key}) : super(key: key);&#xA;  @override&#xA;  State&amp;lt;MyScreen&amp;gt; createState() =&amp;gt; MyScreenState();&#xA;}&#xA;&#xA;class MyScreenState extends State&amp;lt;MyScreen&amp;gt; {&#xA;  // Create a [Player] to control playback.&#xA;  late final player = Player();&#xA;  // Create a [VideoController] to handle video output from [Player].&#xA;  late final controller = VideoController(player);&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    // Play a [Media] or [Playlist].&#xA;    player.open(Media(&#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;));&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    player.dispose();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Center(&#xA;      child: SizedBox(&#xA;        width: MediaQuery.of(context).size.width,&#xA;        height: MediaQuery.of(context).size.width * 9.0 / 16.0,&#xA;        // Use [Video] widget to display video output.&#xA;        child: Video(controller: controller),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may need to add required &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#permissions&#34;&gt;permissions&lt;/a&gt; to your project (only if required).&lt;/p&gt; &#xA;&lt;h2&gt;Guide&lt;/h2&gt; &#xA;&lt;p&gt;A usage guide for &lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Use &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;F&lt;/kbd&gt; to quickly search for things.&lt;/p&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#initialization&#34;&gt;Initialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#create-a-player&#34;&gt;Create a &lt;code&gt;Player&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#dispose-a-player&#34;&gt;Dispose a &lt;code&gt;Player&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#open-a-media-or-playlist&#34;&gt;Open a &lt;code&gt;Media&lt;/code&gt; or &lt;code&gt;Playlist&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#play-pause-or-playpause&#34;&gt;Play, pause or play/pause&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#stop&#34;&gt;Stop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#seek&#34;&gt;Seek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#loop-or-repeat&#34;&gt;Loop or repeat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#set-volume-rate-or-pitch&#34;&gt;Set volume, rate or pitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#handle-playback-events&#34;&gt;Handle playback events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#shuffle-the-queue&#34;&gt;Shuffle the queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#use-http-headers&#34;&gt;Use HTTP headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#use-extras-store-additional-data-with-media&#34;&gt;Use &lt;code&gt;extras&lt;/code&gt; to store additional data with &lt;code&gt;Media&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#go-to-next-previous-or-any-other-position-in-queue&#34;&gt;Go to next, previous or any other position in queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#modify-players-queue&#34;&gt;Modify &lt;code&gt;Player&lt;/code&gt;&#39;s queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#select-video-audio-or-subtitle-track&#34;&gt;Select video, audio or subtitle track&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#select-audio-device&#34;&gt;Select audio device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#display-the-video&#34;&gt;Display the video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#capture-screenshot&#34;&gt;Capture screenshot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#customize-subtitles&#34;&gt;Customize subtitles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#load-external-subtitle-track&#34;&gt;Load external subtitle track&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#load-external-audio-track&#34;&gt;Load external audio track&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#video-controls&#34;&gt;Video controls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#next-steps&#34;&gt;Next steps&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;MediaKit.ensureInitialized&lt;/code&gt; must be called before using the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;  // Make sure to add the required packages to pubspec.yaml:&#xA;  // * https://github.com/media-kit/media-kit#installation&#xA;  // * https://pub.dev/packages/media_kit#installation&#xA;  MediaKit.ensureInitialized();&#xA;  runApp(const MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The method also has some optional arguments to customize the global behavior. To handle any initialization errors, this may be surrounded by &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create a &lt;code&gt;Player&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;Player&lt;/code&gt; instance is used to start &amp;amp; control the playback of a media source e.g. URL or file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final Player player = Player();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional options may be provided using the &lt;code&gt;configuration&lt;/code&gt; argument in the constructor. In general situations, you will never require this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final Player player = Player(&#xA;  configuration: PlayerConfiguration(&#xA;    // Supply your options:&#xA;    title: &#39;My awesome package:media_kit application&#39;,&#xA;    ready: () {&#xA;      print(&#39;The initialization is complete.&#39;);&#xA;    },&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dispose a &lt;code&gt;Player&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It is extremely important to release the allocated resources back to the system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.dispose();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open a &lt;code&gt;Media&lt;/code&gt; or &lt;code&gt;Playlist&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;Playable&lt;/code&gt; can either be a &lt;code&gt;Media&lt;/code&gt; or a &lt;code&gt;Playlist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Media&lt;/code&gt;: Single playback source (file or URL).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Playlist&lt;/code&gt;: Queue of playback sources (file or URL).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Player.open&lt;/code&gt; method to load &amp;amp; start playback.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Media&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final playable = Media(&#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;);&#xA;await player.open(playable);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Playlist&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final playable = Playlist(&#xA;  [&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373709-603a7a89-2105-4e1b-a5a5-a6c3567c9a59.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373716-76da0a4e-225a-44e4-9ee7-3e9006dbc3e3.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373718-86ce5e1d-d195-45d5-baa6-ef94041d0b90.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373720-14d69157-1a56-4a78-a2f4-d7a134d7c3e9.mp4&#39;),&#xA;  ],&#xA;);&#xA;await player.open(playable);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By default, this will automatically start playing the playable. This may be disabled as follows:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.open(&#xA;  playable,&#xA;  play: false,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;By default, the playlist will start at the index &lt;code&gt;0&lt;/code&gt;. This may be changed as follows:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final playable = Playlist(&#xA;  [&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373709-603a7a89-2105-4e1b-a5a5-a6c3567c9a59.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373716-76da0a4e-225a-44e4-9ee7-3e9006dbc3e3.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373718-86ce5e1d-d195-45d5-baa6-ef94041d0b90.mp4&#39;),&#xA;    Media(&#39;https://user-images.githubusercontent.com/28951144/229373720-14d69157-1a56-4a78-a2f4-d7a134d7c3e9.mp4&#39;),&#xA;  ],&#xA;  // Declare the starting position.&#xA;  index: 0,&#xA;);&#xA;await player.open(playable);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Play, pause or play/pause&lt;/h3&gt; &#xA;&lt;p&gt;The 3 methods are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.play();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.pause();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.playOrPause();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stop&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;stop&lt;/code&gt; method may be used to stop the playback of currently opened &lt;code&gt;Media&lt;/code&gt; or &lt;code&gt;Playlist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.stop();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It does not release allocated resources back to the system (unlike &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#dispose-a-player&#34;&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/a&gt;) &amp;amp; &lt;code&gt;Player&lt;/code&gt; still stays usable.&lt;/p&gt; &#xA;&lt;h3&gt;Seek&lt;/h3&gt; &#xA;&lt;p&gt;Supply the final position to &lt;code&gt;Player.seek&lt;/code&gt; method as &lt;code&gt;Duration&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.seek(&#xA;  const Duration(&#xA;    minutes: 6,&#xA;    seconds: 9,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Loop or repeat&lt;/h3&gt; &#xA;&lt;p&gt;Three &lt;code&gt;PlaylistMode&lt;/code&gt;s are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PlaylistMode.none&lt;/code&gt;: End playback once end of the playlist is reached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlaylistMode.single&lt;/code&gt;: Indefinitely loop over the currently playing file in the playlist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PlaylistMode.loop&lt;/code&gt;: Loop over the playlist &amp;amp; restart it from beginning once end is reached.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setPlaylistMode(PlaylistMode.single);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set volume, rate or pitch&lt;/h3&gt; &#xA;&lt;h4&gt;Set the volume&lt;/h4&gt; &#xA;&lt;p&gt;This controls the loudness of audio output. The maximum volume is &lt;code&gt;100.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setVolume(50.0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set the rate&lt;/h4&gt; &#xA;&lt;p&gt;This controls the playback speed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setRate(1.5);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set the pitch&lt;/h4&gt; &#xA;&lt;p&gt;This controls the pitch of the audio output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setPitch(1.2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This requires &lt;code&gt;pitch&lt;/code&gt; argument to be &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;PlayerConfiguration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Handle playback events&lt;/h3&gt; &#xA;&lt;p&gt;You can access or subscribe to &lt;code&gt;Player&lt;/code&gt;&#39;s state changes.&lt;/p&gt; &#xA;&lt;p&gt;Event handling is an extremely important part of media playback. It is used to show changes in the UI, handle errors, detect the occurrence of play/pause, end-of-file, position updates etc.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Player.stream.*&lt;/code&gt;: Provides access to &lt;code&gt;Player&lt;/code&gt;&#39;s state as &lt;a href=&#34;https://dart.dev/tutorials/language/streams&#34;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;(s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Player.state.*&lt;/code&gt;: Provides access to &lt;code&gt;Player&lt;/code&gt;&#39;s state directly (for instantaneous access).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A typical example will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;player.stream.playing.listen(&#xA;  (bool playing) {&#xA;    if (playing) {&#xA;      // Playing.&#xA;    } else {&#xA;      // Paused.&#xA;    }&#xA;  },&#xA;);&#xA;player.stream.position.listen(&#xA;  (Duration position) {&#xA;    setState(() {&#xA;      // Update UI.&#xA;    });&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following state(s) are available as events:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;Playlist&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;playlist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently opened media sources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;playing&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether playing or not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;completed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether end of currently playing media source has been reached.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;Duration&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;position&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current playback position.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;Duration&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current playback duration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;double&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;volume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current volume.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;double&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current playback rate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;double&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pitch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current pitch.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffering&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether buffering or not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;Duration&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current buffer position. This indicates how much of the stream has been decoded &amp;amp; cached by the demuxer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;PlaylistMode&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;playlistMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Current playlist mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;AudioParams&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audioParams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Audio parameters of the currently playing media source e.g. sample rate, channels, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;VideoParams&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;videoParams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Video parameters of the currently playing media source e.g. width, height, rotation etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;double?&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audioBitrate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Audio bitrate of the currently playing media source.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;AudioDevice&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audioDevice&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently selected audio device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;List&amp;lt;AudioDevice&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audioDevices&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently available audio devices.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;Track&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;track&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently selected video, audio and subtitle track.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;Tracks&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tracks&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently available video, audio and subtitle tracks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently playing video&#39;s width.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently playing video&#39;s height.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;subtitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Currently displayed subtitle.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;PlayerLog&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;log&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Internal logs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stream&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;error&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Error messages. This may be used to handle &amp;amp; display errors to the user.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Shuffle the queue&lt;/h3&gt; &#xA;&lt;p&gt;You may find the requirement to shuffle the &lt;code&gt;Playlist&lt;/code&gt; you &lt;code&gt;open&lt;/code&gt;&#39;d in &lt;code&gt;Player&lt;/code&gt;, like some music players do.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setShuffle(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This option is reset upon the next &lt;code&gt;Player.open&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;h3&gt;Use HTTP headers&lt;/h3&gt; &#xA;&lt;p&gt;Declare the &lt;code&gt;httpHeaders&lt;/code&gt; argument in &lt;code&gt;Media&lt;/code&gt; constructor. It takes the HTTP headers as &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final playable = Media(&#xA;  &#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;,&#xA;  httpHeaders: {&#xA;    &#39;Foo&#39;: &#39;Bar&#39;,&#xA;    &#39;Accept&#39;: &#39;*/*&#39;,&#xA;    &#39;Range&#39;: &#39;bytes=0-&#39;,&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use &lt;code&gt;extras&lt;/code&gt; to store additional data with &lt;code&gt;Media&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;extras&lt;/code&gt; argument may be utilized to store additional data with a &lt;code&gt;Media&lt;/code&gt; in form of &lt;code&gt;Map&amp;lt;String, dynamic&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final playable = Media(&#xA;  &#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;,&#xA;  extras: {&#xA;    &#39;track&#39;: &#39;9&#39;,&#xA;    &#39;year&#39;: &#39;2012&#39;,&#xA;    &#39;title&#39;: &#39;Courtesy Call&#39;,&#xA;    &#39;artist&#39;: &#39;Thousand Foot Krutch&#39;,&#xA;    &#39;album&#39;: &#39;The End Is Where We Begin&#39;,&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modify &lt;code&gt;Player&lt;/code&gt;&#39;s queue&lt;/h3&gt; &#xA;&lt;p&gt;You can add or remove (etc.) a &lt;code&gt;Media&lt;/code&gt; in an already playing &lt;code&gt;Playlist&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Add&lt;/h4&gt; &#xA;&lt;p&gt;Add a new &lt;code&gt;Media&lt;/code&gt; to the back of the queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.add(Media(&#39;https://user-images.githubusercontent.com/28951144/229373695-22f88f13-d18f-4288-9bf1-c3e078d83722.mp4&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remove&lt;/h4&gt; &#xA;&lt;p&gt;Remove any item from the queue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.remove(0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Move&lt;/h4&gt; &#xA;&lt;p&gt;Move any item in the queue from one position to another:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.move(6, 9);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Go to next, previous or any other position in queue&lt;/h3&gt; &#xA;&lt;h4&gt;Skip to the next queue item&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.next();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Skip to the previous queue item&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.previous();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Skip to any other queue item&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.jump(5);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select video, audio or subtitle track&lt;/h3&gt; &#xA;&lt;p&gt;A media source may contain multiple video, audio or subtitle tracks e.g. for multiple languages. Available video, audio or subtitle tracks are notified through &lt;code&gt;Player&lt;/code&gt;&#39;s state. See &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#handle-playback-events&#34;&gt;&#34;Handle playback events&#34; section&lt;/a&gt; for related information.&lt;/p&gt; &#xA;&lt;p&gt;By default, video, audio &amp;amp; subtitle track is selected automatically &lt;em&gt;i.e.&lt;/em&gt; &lt;code&gt;VideoTrack.auto()&lt;/code&gt;, &lt;code&gt;AudioTrack.auto()&lt;/code&gt; &amp;amp; &lt;code&gt;SubtitleTrack.auto()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Automatic selection&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setVideoTrack(VideoTrack.auto());&#xA;&#xA;await player.setAudioTrack(AudioTrack.auto());&#xA;&#xA;await player.setSubtitleTrack(SubtitleTrack.auto());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable track&lt;/h4&gt; &#xA;&lt;p&gt;This may be used to essentially disable video output, disable audio output or stop rendering of subtitles etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setVideoTrack(VideoTrack.no());&#xA;&#xA;await player.setAudioTrack(AudioTrack.no());&#xA;&#xA;await player.setSubtitleTrack(SubtitleTrack.no());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Select custom track&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve currently available tracks:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;VideoTrack&amp;gt; videos = player.state.tracks.video;&#xA;List&amp;lt;AudioTrack&amp;gt; audios = player.state.tracks.audio;&#xA;List&amp;lt;SubtitleTrack&amp;gt; subtitles = player.state.tracks.subtitle;&#xA;&#xA;// Get notified as [Stream]:&#xA;player.stream.tracks.listen((event) {&#xA;  List&amp;lt;VideoTrack&amp;gt; videos = event.video;&#xA;  List&amp;lt;AudioTrack&amp;gt; audios = event.audio;&#xA;  List&amp;lt;SubtitleTrack&amp;gt; subtitles = event.subtitle;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the track:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setVideoTrack(videos[0]);&#xA;await player.setAudioTrack(audios[1]);&#xA;await player.setSubtitleTrack(subtitles[2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get notified about currently selected track:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;VideoTrack video = player.state.track.video;&#xA;AudioTrack audio = player.state.track.audio;&#xA;SubtitleTrack subtitle = player.state.track.subtitle;&#xA;&#xA;// Get notified as [Stream]:&#xA;player.stream.track.listen((event) {&#xA;  VideoTrack video = event.video;&#xA;  AudioTrack audio = event.audio;&#xA;  SubtitleTrack subtitle = event.subtitle;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Select audio device&lt;/h3&gt; &#xA;&lt;p&gt;Available audio devices are notified through &lt;code&gt;Player&lt;/code&gt;&#39;s state. See &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#handle-playback-events&#34;&gt;&#34;Handle playback events&#34; section&lt;/a&gt; for related information.&lt;/p&gt; &#xA;&lt;p&gt;By default, audio device is selected automatically &lt;em&gt;i.e.&lt;/em&gt; &lt;code&gt;AudioDevice.auto()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default selection&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setAudioDevice(AudioDevice.auto());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Disable audio output&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setAudioDevice(AudioDevice.no());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Select custom audio device&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve currently available audio devices:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;AudioDevice&amp;gt; devices = player.state.audioDevices;&#xA;&#xA;// Get notified as [Stream]:&#xA;player.stream.audioDevices.listen((event) {&#xA;  List&amp;lt;AudioDevice&amp;gt; devices = event;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select the audio device:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setAudioDevice(devices[1]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get notified about currently selected audio device:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AudioDevice device = player.state.audioDevice;&#xA;&#xA;// Get notified as [Stream]:&#xA;player.stream.audioDevice.listen((event) {&#xA;  AudioDevice device = event;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display the video&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;existing &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#tldr&#34;&gt;&#34;TL;DR example&#34;&lt;/a&gt; should provide you better idea&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For displaying the video inside Flutter UI, you must:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;VideoController&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pass the &lt;code&gt;Player&lt;/code&gt; you already have.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;Video&lt;/code&gt; widget &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pass the &lt;code&gt;VideoController&lt;/code&gt; you already have.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The code is easier to understand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class _MyScreenState extends State&amp;lt;MyScreen&amp;gt; {&#xA;  late final Player player = Player();&#xA;  late final VideoController controller = VideoController(player);&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    player.dispose();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      body: Video(&#xA;        controller: controller,&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The video playback uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Hardware_acceleration&#34;&gt;hardware acceleration&lt;/a&gt; &lt;em&gt;i.e.&lt;/em&gt; GPU by default.&lt;/p&gt; &#xA;&lt;p&gt;Additional options may be provided using the &lt;code&gt;configuration&lt;/code&gt; argument in the constructor. In general situations, you will never require this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final VideoController player = VideoController(&#xA;  player,&#xA;  configuration: const VideoControllerConfiguration(&#xA;    // Supply your options:&#xA;    enableHardwareAcceleration: true,      // default: true&#xA;    width: 640,                            // default: null&#xA;    height: 480,                           // default: null&#xA;    // The in-code comments is best place to know more about these options:&#xA;    // https://github.com/media-kit/media-kit/blob/main/media_kit_video/lib/src/video_controller/video_controller.dart&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capture screenshot&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;screenshot&lt;/code&gt; method takes the snapshot of the current video frame &amp;amp; returns encoded image bytes as &lt;code&gt;Uint8List&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final Uint8List? screenshot = await player.screenshot();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally &lt;code&gt;format&lt;/code&gt; argument may be specified to change the encoding format. Following formats are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;image/jpeg&lt;/code&gt;: Returns a JPEG encoded image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image/png&lt;/code&gt;: Returns a PNG encoded image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;null&lt;/code&gt;: Returns BGRA pixel buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Customize subtitles&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;SubtitleViewConfiguration&lt;/code&gt; can be passed to the &lt;code&gt;Video&lt;/code&gt; widget for customizing the subtitles. The code is easier to understand:&lt;/p&gt; &#xA;&lt;p&gt;Notably, &lt;code&gt;TextStyle&lt;/code&gt;, &lt;code&gt;TextAlign&lt;/code&gt; &amp;amp; &lt;code&gt;EdgeInsetsGeometry&lt;/code&gt; can be provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Video(&#xA;  controller: controller,&#xA;  subtitleViewConfiguration: const SubtitleViewConfiguration(&#xA;    style: TextStyle(&#xA;      height: 1.4,&#xA;      fontSize: 24.0,&#xA;      letterSpacing: 0.0,&#xA;      wordSpacing: 0.0,&#xA;      color: Color(0xffffffff),&#xA;      fontWeight: FontWeight.normal,&#xA;      backgroundColor: Color(0xaa000000),&#xA;    ),&#xA;    textAlign: TextAlign.center,&#xA;    padding: EdgeInsets.all(24.0),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28951144/253067794-73b5ca5d-e90d-4892-bc09-2a80f05c9f0b.mp4&#34;&gt;https://user-images.githubusercontent.com/28951144/253067794-73b5ca5d-e90d-4892-bc09-2a80f05c9f0b.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Load external subtitle track&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;SubtitleTrack.uri&lt;/code&gt; constructor can be used to load external subtitle track &lt;strong&gt;with URI&lt;/strong&gt; e.g. SRT, WebVTT etc. The code is easier to understand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setSubtitleTrack(&#xA;  SubtitleTrack.uri(&#xA;    &#39;https://www.iandevlin.com/html5test/webvtt/upc-video-subtitles-en.vtt&#39;,&#xA;    title: &#39;English&#39;,&#xA;    language: &#39;en&#39;,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;SubtitleTrack.data&lt;/code&gt; constructor can be used to load external subtitle track &lt;strong&gt;with data&lt;/strong&gt; e.g. SRT, WebVTT etc. The code is easier to understand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;player.setSubtitleTrack(&#xA;  SubtitleTrack.data(&#xA;    &#39;&#39;&#39;WEBVTT FILE&#xA;&#xA;1&#xA;00:00:03.500 --&amp;gt; 00:00:05.000 D:vertical A:start&#xA;Everyone wants the most from life&#xA;&#xA;2&#xA;00:00:06.000 --&amp;gt; 00:00:09.000 A:start&#xA;Like internet experiences that are rich &amp;lt;b&amp;gt;and&amp;lt;/b&amp;gt; entertaining&#xA;&#xA;3&#xA;00:00:11.000 --&amp;gt; 00:00:14.000 A:end&#xA;Phone conversations where people truly &amp;lt;c.highlight&amp;gt;connect&amp;lt;/c&amp;gt;&#xA;&#xA;4&#xA;00:00:14.500 --&amp;gt; 00:00:18.000&#xA;Your favourite TV programmes ready to watch at the touch of a button&#xA;&#xA;5&#xA;00:00:19.000 --&amp;gt; 00:00:24.000&#xA;Which is why we are bringing TV, internet and phone together in &amp;lt;c.highlight&amp;gt;one&amp;lt;/c&amp;gt; super package&#xA;&#xA;6&#xA;00:00:24.500 --&amp;gt; 00:00:26.000&#xA;&amp;lt;c.highlight&amp;gt;One&amp;lt;/c&amp;gt; simple way to get everything&#xA;&#xA;7&#xA;00:00:26.500 --&amp;gt; 00:00:27.500 L:12%&#xA;UPC&#xA;&#xA;8&#xA;00:00:28.000 --&amp;gt; 00:00:30.000 L:75%&#xA;Simply for &amp;lt;u&amp;gt;everyone&amp;lt;/u&amp;gt;&#xA;&#39;&#39;&#39;,&#xA;    title: &#39;English&#39;,&#xA;    language: &#39;en&#39;,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load external audio track&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;AudioTrack.uri&lt;/code&gt; constructor can be used to load external audio track &lt;strong&gt;with URI&lt;/strong&gt;. The code is easier to understand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await player.setAudioTrack(&#xA;  AudioTrack.uri(&#xA;    &#39;https://www.iandevlin.com/html5test/webvtt/v/upc-tobymanley.mp4&#39;,&#xA;    title: &#39;English&#39;,&#xA;    language: &#39;en&#39;,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video controls&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;&lt;code&gt;package:media_kit&lt;/code&gt;&lt;/a&gt; provides highly-customizable pre-built video controls for usage.&lt;/p&gt; &#xA;&lt;p&gt;Apart from theming, layout can be customized, position of buttons can be modified, custom buttons can be created etc. Necessary features like fullscreen, keyboard shortcuts &amp;amp; swipe-based controls are also supported by default.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#materialdesktopvideocontrols&#34;&gt;&lt;tt&gt;MaterialDesktopVideoControls&lt;/tt&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#materialvideocontrols&#34;&gt;&lt;tt&gt;MaterialVideoControls&lt;/tt&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img height=&#34;312&#34; src=&#34;https://user-images.githubusercontent.com/28951144/246606748-72557578-8be4-43c6-a3df-cb0aea99c879.jpg&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img height=&#34;312&#34; src=&#34;https://user-images.githubusercontent.com/28951144/246650427-a5bbabad-6f7b-4098-9325-ebe2a3068720.jpg&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Video&lt;/code&gt; widget provides &lt;code&gt;controls&lt;/code&gt; argument to display &amp;amp; customize video controls.&lt;/li&gt; &#xA; &lt;li&gt;By default, &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#adaptivevideocontrols&#34;&gt;&lt;code&gt;AdaptiveVideoControls&lt;/code&gt;&lt;/a&gt; are used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Types&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#adaptivevideocontrols&#34;&gt;&lt;code&gt;AdaptiveVideoControls&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Selects &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#materialvideocontrols&#34;&gt;&lt;code&gt;MaterialVideoControls&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#cupertinovideocontrols&#34;&gt;&lt;code&gt;CupertinoVideoControls&lt;/code&gt;&lt;/a&gt; etc. based on platform.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#materialvideocontrols&#34;&gt;&lt;code&gt;MaterialVideoControls&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://material.io/&#34;&gt;Material Design&lt;/a&gt; video controls.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#materialdesktopvideocontrols&#34;&gt;&lt;code&gt;MaterialDesktopVideoControls&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://material.io/&#34;&gt;Material Design&lt;/a&gt; video controls for desktop.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#cupertinovideocontrols&#34;&gt;&lt;code&gt;CupertinoVideoControls&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/designing-for-ios&#34;&gt;iOS-style&lt;/a&gt; video controls.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#novideocontrols&#34;&gt;&lt;code&gt;NoVideoControls&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable video controls &lt;em&gt;i.e.&lt;/em&gt; only render video output.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Custom&lt;/td&gt; &#xA;   &lt;td&gt;Provide custom &lt;code&gt;builder&lt;/code&gt; for video controls.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Select existing video controls&lt;/h4&gt; &#xA;&lt;p&gt;Modify the &lt;code&gt;controls&lt;/code&gt; argument. For advanced theming of existing video controls, see &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#theming-&amp;amp;-modifying-video-controls&#34;&gt;theming &amp;amp; modifying video controls&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Scaffold(&#xA;  body: Video(&#xA;    controller: controller,&#xA;    // Select [MaterialVideoControls].&#xA;    controls: MaterialVideoControls,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Scaffold(&#xA;  body: Video(&#xA;    controller: controller,&#xA;    // Select [CupertinoVideoControls].&#xA;    controls: CupertinoVideoControls,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build custom video controls&lt;/h4&gt; &#xA;&lt;p&gt;Pass custom builder &lt;code&gt;Widget Function(BuildContext, VideoController)&lt;/code&gt; as &lt;code&gt;controls&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Scaffold(&#xA;  body: Video(&#xA;    controller: controller,&#xA;    // Provide custom builder for controls.&#xA;    controls: (state) {&#xA;      return Center(&#xA;        child: IconButton(&#xA;          onPressed: () {&#xA;            state.widget.controller.player.playOrPause();&#xA;          },&#xA;          icon: StreamBuilder(&#xA;            stream: state.widget.controller.player.stream.playing,&#xA;            builder: (context, playing) =&amp;gt; Icon(&#xA;              playing.data == true ? Icons.pause : Icons.play_arrow,&#xA;            ),&#xA;          ),&#xA;          // It&#39;s not necessary to use [StreamBuilder] or to use [Player] &amp;amp; [VideoController] from [state].&#xA;          // [StreamSubscription]s can be made inside [initState] of this widget.&#xA;        ),&#xA;      );&#xA;    },&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use &amp;amp; modify video controls&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;code&gt;AdaptiveVideoControls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Selects &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#materialvideocontrols&#34;&gt;&lt;code&gt;MaterialVideoControls&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#cupertinovideocontrols&#34;&gt;&lt;code&gt;CupertinoVideoControls&lt;/code&gt;&lt;/a&gt; etc. based on platform.&lt;/li&gt; &#xA; &lt;li&gt;Theming: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Theme the specific controls according to sections below.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;MaterialVideoControls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io/&#34;&gt;Material Design&lt;/a&gt; video controls.&lt;/li&gt; &#xA; &lt;li&gt;Theming: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;MaterialVideoControlsTheme&lt;/code&gt; widget.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Video&lt;/code&gt; widget(s) in the &lt;code&gt;child&lt;/code&gt; tree will follow the specified theme:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Wrap [Video] widget with [MaterialVideoControlsTheme].&#xA;MaterialVideoControlsTheme(&#xA;  normal: MaterialVideoControlsThemeData(&#xA;    // Modify theme options:&#xA;    buttonBarButtonSize: 24.0,&#xA;    buttonBarButtonColor: Colors.white,&#xA;    // Modify top button bar:&#xA;    topButtonBar: [&#xA;      const Spacer(),&#xA;      MaterialDesktopCustomButton(&#xA;        onPressed: () {&#xA;          debugPrint(&#39;Custom &#34;Settings&#34; button pressed.&#39;);&#xA;        },&#xA;        icon: const Icon(Icons.settings),&#xA;      ),&#xA;    ],&#xA;  ),&#xA;  fullscreen: const MaterialVideoControlsThemeData(&#xA;    // Modify theme options:&#xA;    displaySeekBar: false,&#xA;    automaticallyImplySkipNextButton: false,&#xA;    automaticallyImplySkipPreviousButton: false,&#xA;  ),&#xA;  child: Scaffold(&#xA;    body: Video(&#xA;      controller: controller,&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related widgets (may be used in &lt;code&gt;primaryButtonBar&lt;/code&gt;, &lt;code&gt;topButtonBar&lt;/code&gt; &amp;amp; &lt;code&gt;bottomButtonBar&lt;/code&gt;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialPlayOrPauseButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialSkipNextButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialSkipPreviousButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialFullscreenButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialCustomButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialPositionIndicator&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;MaterialDesktopVideoControls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://material.io/&#34;&gt;Material Design&lt;/a&gt; video controls for desktop.&lt;/li&gt; &#xA; &lt;li&gt;Theming: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;MaterialDesktopVideoControlsTheme&lt;/code&gt; widget.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Video&lt;/code&gt; widget(s) in the &lt;code&gt;child&lt;/code&gt; tree will follow the specified theme:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Wrap [Video] widget with [MaterialDesktopVideoControlsTheme].&#xA;MaterialDesktopVideoControlsTheme(&#xA;  normal: MaterialDesktopVideoControlsThemeData(&#xA;    // Modify theme options:&#xA;    seekBarThumbColor: Colors.blue,&#xA;    seekBarPositionColor: Colors.blue,&#xA;    toggleFullscreenOnDoublePress: false,&#xA;    // Modify top button bar:&#xA;    topButtonBar: [&#xA;      const Spacer(),&#xA;      MaterialDesktopCustomButton(&#xA;        onPressed: () {&#xA;          debugPrint(&#39;Custom &#34;Settings&#34; button pressed.&#39;);&#xA;        },&#xA;        icon: const Icon(Icons.settings),&#xA;      ),&#xA;    ],&#xA;    // Modify bottom button bar:&#xA;    bottomButtonBar: const [&#xA;      Spacer(),&#xA;      MaterialDesktopPlayOrPauseButton(),&#xA;      Spacer(),&#xA;    ],&#xA;  ),&#xA;  fullscreen: const MaterialDesktopVideoControlsThemeData(),&#xA;  child: Scaffold(&#xA;    body: Video(&#xA;      controller: controller,&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Related widgets (may be used in &lt;code&gt;primaryButtonBar&lt;/code&gt;, &lt;code&gt;topButtonBar&lt;/code&gt; &amp;amp; &lt;code&gt;bottomButtonBar&lt;/code&gt;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopPlayOrPauseButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopSkipNextButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopSkipPreviousButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopFullscreenButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopCustomButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopVolumeButton&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MaterialDesktopPositionIndicator&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Keyboard shortcuts may be modified using &lt;code&gt;keyboardShortcuts&lt;/code&gt; argument. Default ones are listed below:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Shortcut&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Media Play Button&lt;/td&gt; &#xA;   &lt;td&gt;Play&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Media Pause Button&lt;/td&gt; &#xA;   &lt;td&gt;Pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Media Play/Pause Button&lt;/td&gt; &#xA;   &lt;td&gt;Play/Pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Media Next Track Button&lt;/td&gt; &#xA;   &lt;td&gt;Skip Next&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Media Previous Track Button&lt;/td&gt; &#xA;   &lt;td&gt;Skip Previous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Space&lt;/td&gt; &#xA;   &lt;td&gt;Play/Pause&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;J&lt;/td&gt; &#xA;   &lt;td&gt;Seek 10s Behind&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;I&lt;/td&gt; &#xA;   &lt;td&gt;Seek 10s Ahead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arrow Left&lt;/td&gt; &#xA;   &lt;td&gt;Seek 2s Behind&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arrow Right&lt;/td&gt; &#xA;   &lt;td&gt;Seek 2s Ahead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arrow Up&lt;/td&gt; &#xA;   &lt;td&gt;Increase Volume 5%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arrow Down&lt;/td&gt; &#xA;   &lt;td&gt;Decrease Volume 5%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F&lt;/td&gt; &#xA;   &lt;td&gt;Enter/Exit Fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Escape&lt;/td&gt; &#xA;   &lt;td&gt;Exit Fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;&lt;code&gt;CupertinoVideoControls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/designing-for-ios&#34;&gt;iOS-style&lt;/a&gt; video controls.&lt;/li&gt; &#xA; &lt;li&gt;Theming: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;CupertinoVideoControlsTheme&lt;/code&gt; widget.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Video&lt;/code&gt; widget(s) in the &lt;code&gt;child&lt;/code&gt; tree will follow the specified theme:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Wrap [Video] widget with [CupertinoVideoControlsTheme].&#xA;CupertinoVideoControlsTheme(&#xA;  normal: const CupertinoVideoControlsThemeData(&#xA;    // W.I.P.&#xA;  ),&#xA;  fullscreen: const CupertinoVideoControlsThemeData(&#xA;    // W.I.P.&#xA;  ),&#xA;  child: Scaffold(&#xA;    body: Video(&#xA;      controller: controller,&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;NoVideoControls&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable video controls &lt;em&gt;i.e.&lt;/em&gt; only render video output.&lt;/li&gt; &#xA; &lt;li&gt;Theming: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No theming applicable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Next steps&lt;/h3&gt; &#xA;&lt;p&gt;This guide follows a tutorial-like structure &amp;amp; covers nearly all features that &lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt; offers. However, it is &lt;em&gt;not complete&lt;/em&gt; by any means. You are free to improve this page &amp;amp; add more documentation, which newcomers may find helpful. The following places can help you learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/documentation/media_kit/latest/media_kit/media_kit-library.html&#34;&gt;API reference&lt;/a&gt; can be helpful for diving into deeper specifics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit/tree/main/media_kit_test/lib/tests&#34;&gt;source-code of the demo application&lt;/a&gt; offers some complete code samples.&lt;/li&gt; &#xA; &lt;li&gt;In-code comments &amp;amp; docstrings happen to be the most updated source of knowledge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt; is a library for Flutter &amp;amp; Dart which &lt;strong&gt;provides video &amp;amp; audio playback&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong:&lt;/strong&gt; Supports &lt;em&gt;most&lt;/em&gt; video &amp;amp; audio codecs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performant:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handles multiple FHD videos flawlessly.&lt;/li&gt; &#xA;   &lt;li&gt;Rendering is GPU-powered (hardware accelerated).&lt;/li&gt; &#xA;   &lt;li&gt;4K / 8K 60 FPS is supported.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable:&lt;/strong&gt; Implementation is well-tested &amp;amp; used across number of intensive media playback related apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature Proof:&lt;/strong&gt; A simple usage API while offering a large number of features to target multitude of apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modular:&lt;/strong&gt; Project is split into a number of packages for reducing bundle size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross Platform&lt;/strong&gt;: Implementation works on all platforms supported by Flutter &amp;amp; Dart: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android&lt;/li&gt; &#xA;   &lt;li&gt;iOS&lt;/li&gt; &#xA;   &lt;li&gt;macOS&lt;/li&gt; &#xA;   &lt;li&gt;Windows&lt;/li&gt; &#xA;   &lt;li&gt;GNU/Linux&lt;/li&gt; &#xA;   &lt;li&gt;Web&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Architecture:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Major part of implementation (80%+) is in 100% Dart (&lt;a href=&#34;https://dart.dev/guides/libraries/c-interop&#34;&gt;FFI&lt;/a&gt;) &amp;amp; shared across platforms. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Makes the behavior of library same &amp;amp; more predictable across platforms.&lt;/li&gt; &#xA;     &lt;li&gt;Makes development &amp;amp; implementation of new features easier &amp;amp; faster.&lt;/li&gt; &#xA;     &lt;li&gt;Avoids separate maintenance of native implementation for each platform.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Only video embedding code is platform-specific &amp;amp; part of separate package.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may see project&#39;s &lt;a href=&#34;https://github.com/media-kit/media-kit#architecture&#34;&gt;architecture&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/media-kit/media-kit#implementation&#34;&gt;implementation&lt;/a&gt; details for further information.&lt;/p&gt; &#xA;&lt;p&gt;The project aims to meet demands of the community, this includes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Holding accountability.&lt;/li&gt; &#xA; &lt;li&gt;Ensuring timely maintenance.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Supported Formats&lt;/h2&gt; &#xA;&lt;p&gt;A wide variety of formats &amp;amp; codecs are supported. Complete list may be found below:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code&gt;3dostr          3DO STR&#xA;4xm             4X Technologies&#xA;aa              Audible AA format files&#xA;aac             raw ADTS AAC (Advanced Audio Coding)&#xA;aax             CRI AAX&#xA;ac3             raw AC-3&#xA;ace             tri-Ace Audio Container&#xA;acm             Interplay ACM&#xA;act             ACT Voice file format&#xA;adf             Artworx Data Format&#xA;adp             ADP&#xA;ads             Sony PS2 ADS&#xA;adx             CRI ADX&#xA;aea             MD STUDIO audio&#xA;afc             AFC&#xA;aiff            Audio IFF&#xA;aix             CRI AIX&#xA;alaw            PCM A-law&#xA;alias_pix       Alias/Wavefront PIX image&#xA;alp             LEGO Racers ALP&#xA;amr             3GPP AMR&#xA;amrnb           raw AMR-NB&#xA;amrwb           raw AMR-WB&#xA;anm             Deluxe Paint Animation&#xA;apac            raw APAC&#xA;apc             CRYO APC&#xA;ape             Monkey&#39;s Audio&#xA;apm             Ubisoft Rayman 2 APM&#xA;apng            Animated Portable Network Graphics&#xA;aptx            raw aptX&#xA;aptx_hd         raw aptX HD&#xA;aqtitle         AQTitle subtitles&#xA;argo_asf        Argonaut Games ASF&#xA;argo_brp        Argonaut Games BRP&#xA;argo_cvg        Argonaut Games CVG&#xA;asf             ASF (Advanced / Active Streaming Format)&#xA;asf_o           ASF (Advanced / Active Streaming Format)&#xA;ass             SSA (SubStation Alpha) subtitle&#xA;ast             AST (Audio Stream)&#xA;au              Sun AU&#xA;av1             AV1 Annex B&#xA;avi             AVI (Audio Video Interleaved)&#xA;avr             AVR (Audio Visual Research)&#xA;avs             Argonaut Games Creature Shock&#xA;avs2            raw AVS2-P2/IEEE1857.4&#xA;avs3            raw AVS3-P2/IEEE1857.10&#xA;bethsoftvid     Bethesda Softworks VID&#xA;bfi             Brute Force &amp;amp; Ignorance&#xA;bfstm           BFSTM (Binary Cafe Stream)&#xA;bin             Binary text&#xA;bink            Bink&#xA;binka           Bink Audio&#xA;bit             G.729 BIT file format&#xA;bitpacked       Bitpacked&#xA;bmp_pipe        piped bmp sequence&#xA;bmv             Discworld II BMV&#xA;boa             Black Ops Audio&#xA;bonk            raw Bonk&#xA;brender_pix     BRender PIX image&#xA;brstm           BRSTM (Binary Revolution Stream)&#xA;c93             Interplay C93&#xA;caf             Apple CAF (Core Audio Format)&#xA;cavsvideo       raw Chinese AVS (Audio Video Standard)&#xA;cdg             CD Graphics&#xA;cdxl            Commodore CDXL video&#xA;cine            Phantom Cine&#xA;codec2          codec2 .c2 demuxer&#xA;codec2raw       raw codec2 demuxer&#xA;concat          Virtual concatenation script&#xA;cri_pipe        piped cri sequence&#xA;dash            Dynamic Adaptive Streaming over HTTP&#xA;data            raw data&#xA;daud            D-Cinema audio&#xA;dcstr           Sega DC STR&#xA;dds_pipe        piped dds sequence&#xA;derf            Xilam DERF&#xA;dfa             Chronomaster DFA&#xA;dfpwm           raw DFPWM1a&#xA;dhav            Video DAV&#xA;dirac           raw Dirac&#xA;dnxhd           raw DNxHD (SMPTE VC-3)&#xA;dpx_pipe        piped dpx sequence&#xA;dsf             DSD Stream File (DSF)&#xA;dshow           DirectShow capture&#xA;dsicin          Delphine Software International CIN&#xA;dss             Digital Speech Standard (DSS)&#xA;dts             raw DTS&#xA;dtshd           raw DTS-HD&#xA;dv              DV (Digital Video)&#xA;dvbsub          raw dvbsub&#xA;dvbtxt          dvbtxt&#xA;dxa             DXA&#xA;ea              Electronic Arts Multimedia&#xA;ea_cdata        Electronic Arts cdata&#xA;eac3            raw E-AC-3&#xA;epaf            Ensoniq Paris Audio File&#xA;exr_pipe        piped exr sequence&#xA;f32be           PCM 32-bit floating-point big-endian&#xA;f32le           PCM 32-bit floating-point little-endian&#xA;f64be           PCM 64-bit floating-point big-endian&#xA;f64le           PCM 64-bit floating-point little-endian&#xA;ffmetadata      FFmpeg metadata in text&#xA;film_cpk        Sega FILM / CPK&#xA;filmstrip       Adobe Filmstrip&#xA;fits            Flexible Image Transport System&#xA;flac            raw FLAC&#xA;flic            FLI/FLC/FLX animation&#xA;flv             FLV (Flash Video)&#xA;frm             Megalux Frame&#xA;fsb             FMOD Sample Bank&#xA;fwse            Capcom&#39;s MT Framework sound&#xA;g722            raw G.722&#xA;g723_1          G.723.1&#xA;g726            raw big-endian G.726 (&#34;left aligned&#34;)&#xA;g726le          raw little-endian G.726 (&#34;right aligned&#34;)&#xA;g729            G.729 raw format demuxer&#xA;gdigrab         GDI API Windows frame grabber&#xA;gdv             Gremlin Digital Video&#xA;gem_pipe        piped gem sequence&#xA;genh            GENeric Header&#xA;gif             CompuServe Graphics Interchange Format (GIF)&#xA;gif_pipe        piped gif sequence&#xA;gsm             raw GSM&#xA;gxf             GXF (General eXchange Format)&#xA;h261            raw H.261&#xA;h263            raw H.263&#xA;h264            raw H.264 video&#xA;hca             CRI HCA&#xA;hcom            Macintosh HCOM&#xA;hdr_pipe        piped hdr sequence&#xA;hevc            raw HEVC video&#xA;hls             Apple HTTP Live Streaming&#xA;hnm             Cryo HNM v4&#xA;ico             Microsoft Windows ICO&#xA;idcin           id Cinematic&#xA;idf             iCE Draw File&#xA;iff             IFF (Interchange File Format)&#xA;ifv             IFV CCTV DVR&#xA;ilbc            iLBC storage&#xA;image2          image2 sequence&#xA;image2pipe      piped image2 sequence&#xA;imf             IMF (Interoperable Master Format)&#xA;ingenient       raw Ingenient MJPEG&#xA;ipmovie         Interplay MVE&#xA;ipu             raw IPU Video&#xA;ircam           Berkeley/IRCAM/CARL Sound Format&#xA;iss             Funcom ISS&#xA;iv8             IndigoVision 8000 video&#xA;ivf             On2 IVF&#xA;ivr             IVR (Internet Video Recording)&#xA;j2k_pipe        piped j2k sequence&#xA;jacosub         JACOsub subtitle format&#xA;jpeg_pipe       piped jpeg sequence&#xA;jpegls_pipe     piped jpegls sequence&#xA;jpegxl_pipe     piped jpegxl sequence&#xA;jv              Bitmap Brothers JV&#xA;kux             KUX (YouKu)&#xA;kvag            Simon &amp;amp; Schuster Interactive VAG&#xA;laf             LAF (Limitless Audio Format)&#xA;lavfi           Libavfilter virtual input device&#xA;live_flv        live RTMP FLV (Flash Video)&#xA;lmlm4           raw lmlm4&#xA;loas            LOAS AudioSyncStream&#xA;lrc             LRC lyrics&#xA;luodat          Video CCTV DAT&#xA;lvf             LVF&#xA;lxf             VR native stream (LXF)&#xA;m4v             raw MPEG-4 video&#xA;matroska,webm   Matroska / WebM&#xA;mca             MCA Audio Format&#xA;mcc             MacCaption&#xA;mgsts           Metal Gear Solid: The Twin Snakes&#xA;microdvd        MicroDVD subtitle format&#xA;mjpeg           raw MJPEG video&#xA;mjpeg_2000      raw MJPEG 2000 video&#xA;mlp             raw MLP&#xA;mlv             Magic Lantern Video (MLV)&#xA;mm              American Laser Games MM&#xA;mmf             Yamaha SMAF&#xA;mods            MobiClip MODS&#xA;moflex          MobiClip MOFLEX&#xA;mov,mp4,m4a,3gp,3g2,mj2 QuickTime / MOV&#xA;mp3             MP2/3 (MPEG audio layer 2/3)&#xA;mpc             Musepack&#xA;mpc8            Musepack SV8&#xA;mpeg            MPEG-PS (MPEG-2 Program Stream)&#xA;mpegts          MPEG-TS (MPEG-2 Transport Stream)&#xA;mpegtsraw       raw MPEG-TS (MPEG-2 Transport Stream)&#xA;mpegvideo       raw MPEG video&#xA;mpjpeg          MIME multipart JPEG&#xA;mpl2            MPL2 subtitles&#xA;mpsub           MPlayer subtitles&#xA;msf             Sony PS3 MSF&#xA;msnwctcp        MSN TCP Webcam stream&#xA;msp             Microsoft Paint (MSP))&#xA;mtaf            Konami PS2 MTAF&#xA;mtv             MTV&#xA;mulaw           PCM mu-law&#xA;musx            Eurocom MUSX&#xA;mv              Silicon Graphics Movie&#xA;mvi             Motion Pixels MVI&#xA;mxf             MXF (Material eXchange Format)&#xA;mxg             MxPEG clip&#xA;nc              NC camera feed&#xA;nistsphere      NIST SPeech HEader REsources&#xA;nsp             Computerized Speech Lab NSP&#xA;nsv             Nullsoft Streaming Video&#xA;nut             NUT&#xA;nuv             NuppelVideo&#xA;obu             AV1 low overhead OBU&#xA;ogg             Ogg&#xA;oma             Sony OpenMG audio&#xA;paf             Amazing Studio Packed Animation File&#xA;pam_pipe        piped pam sequence&#xA;pbm_pipe        piped pbm sequence&#xA;pcx_pipe        piped pcx sequence&#xA;pfm_pipe        piped pfm sequence&#xA;pgm_pipe        piped pgm sequence&#xA;pgmyuv_pipe     piped pgmyuv sequence&#xA;pgx_pipe        piped pgx sequence&#xA;phm_pipe        piped phm sequence&#xA;photocd_pipe    piped photocd sequence&#xA;pictor_pipe     piped pictor sequence&#xA;pjs             PJS (Phoenix Japanimation Society) subtitles&#xA;pmp             Playstation Portable PMP&#xA;png_pipe        piped png sequence&#xA;pp_bnk          Pro Pinball Series Soundbank&#xA;ppm_pipe        piped ppm sequence&#xA;psd_pipe        piped psd sequence&#xA;psxstr          Sony Playstation STR&#xA;pva             TechnoTrend PVA&#xA;pvf             PVF (Portable Voice Format)&#xA;qcp             QCP&#xA;qdraw_pipe      piped qdraw sequence&#xA;qoi_pipe        piped qoi sequence&#xA;r3d             REDCODE R3D&#xA;rawvideo        raw video&#xA;realtext        RealText subtitle format&#xA;redspark        RedSpark&#xA;rka             RKA (RK Audio)&#xA;rl2             RL2&#xA;rm              RealMedia&#xA;roq             id RoQ&#xA;rpl             RPL / ARMovie&#xA;rsd             GameCube RSD&#xA;rso             Lego Mindstorms RSO&#xA;rtp             RTP input&#xA;rtsp            RTSP input&#xA;s16be           PCM signed 16-bit big-endian&#xA;s16le           PCM signed 16-bit little-endian&#xA;s24be           PCM signed 24-bit big-endian&#xA;s24le           PCM signed 24-bit little-endian&#xA;s32be           PCM signed 32-bit big-endian&#xA;s32le           PCM signed 32-bit little-endian&#xA;s337m           SMPTE 337M&#xA;s8              PCM signed 8-bit&#xA;sami            SAMI subtitle format&#xA;sap             SAP input&#xA;sbc             raw SBC (low-complexity subband codec)&#xA;sbg             SBaGen binaural beats script&#xA;scc             Scenarist Closed Captions&#xA;scd             Square Enix SCD&#xA;sdns            Xbox SDNS&#xA;sdp             SDP&#xA;sdr2            SDR2&#xA;sds             MIDI Sample Dump Standard&#xA;sdx             Sample Dump eXchange&#xA;ser             SER (Simple uncompressed video format for astronomical capturing)&#xA;sga             Digital Pictures SGA&#xA;sgi_pipe        piped sgi sequence&#xA;shn             raw Shorten&#xA;siff            Beam Software SIFF&#xA;simbiosis_imx   Simbiosis Interactive IMX&#xA;sln             Asterisk raw pcm&#xA;smjpeg          Loki SDL MJPEG&#xA;smk             Smacker&#xA;smush           LucasArts Smush&#xA;sol             Sierra SOL&#xA;sox             SoX native&#xA;spdif           IEC 61937 (compressed data in S/PDIF)&#xA;srt             SubRip subtitle&#xA;stl             Spruce subtitle format&#xA;subviewer       SubViewer subtitle format&#xA;subviewer1      SubViewer v1 subtitle format&#xA;sunrast_pipe    piped sunrast sequence&#xA;sup             raw HDMV Presentation Graphic Stream subtitles&#xA;svag            Konami PS2 SVAG&#xA;svg_pipe        piped svg sequence&#xA;svs             Square SVS&#xA;swf             SWF (ShockWave Flash)&#xA;tak             raw TAK&#xA;tedcaptions     TED Talks captions&#xA;thp             THP&#xA;tiertexseq      Tiertex Limited SEQ&#xA;tiff_pipe       piped tiff sequence&#xA;tmv             8088flex TMV&#xA;truehd          raw TrueHD&#xA;tta             TTA (True Audio)&#xA;tty             Tele-typewriter&#xA;txd             Renderware TeXture Dictionary&#xA;ty              TiVo TY Stream&#xA;u16be           PCM unsigned 16-bit big-endian&#xA;u16le           PCM unsigned 16-bit little-endian&#xA;u24be           PCM unsigned 24-bit big-endian&#xA;u24le           PCM unsigned 24-bit little-endian&#xA;u32be           PCM unsigned 32-bit big-endian&#xA;u32le           PCM unsigned 32-bit little-endian&#xA;u8              PCM unsigned 8-bit&#xA;v210            Uncompressed 4:2:2 10-bit&#xA;v210x           Uncompressed 4:2:2 10-bit&#xA;vag             Sony PS2 VAG&#xA;vbn_pipe        piped vbn sequence&#xA;vc1             raw VC-1&#xA;vc1test         VC-1 test bitstream&#xA;vfwcap          VfW video capture&#xA;vidc            PCM Archimedes VIDC&#xA;vividas         Vividas VIV&#xA;vivo            Vivo&#xA;vmd             Sierra VMD&#xA;vobsub          VobSub subtitle format&#xA;voc             Creative Voice&#xA;vpk             Sony PS2 VPK&#xA;vplayer         VPlayer subtitles&#xA;vqf             Nippon Telegraph and Telephone Corporation (NTT) TwinVQ&#xA;w64             Sony Wave64&#xA;wady            Marble WADY&#xA;wav             WAV / WAVE (Waveform Audio)&#xA;wavarc          Waveform Archiver&#xA;wc3movie        Wing Commander III movie&#xA;webm_dash_manifest WebM DASH Manifest&#xA;webp_pipe       piped webp sequence&#xA;webvtt          WebVTT subtitle&#xA;wsaud           Westwood Studios audio&#xA;wsd             Wideband Single-bit Data (WSD)&#xA;wsvqa           Westwood Studios VQA&#xA;wtv             Windows Television (WTV)&#xA;wv              WavPack&#xA;wve             Psion 3 audio&#xA;xa              Maxis XA&#xA;xbin            eXtended BINary text (XBIN)&#xA;xbm_pipe        piped xbm sequence&#xA;xmd             Konami XMD&#xA;xmv             Microsoft XMV&#xA;xpm_pipe        piped xpm sequence&#xA;xvag            Sony PS3 XVAG&#xA;xwd_pipe        piped xwd sequence&#xA;xwma            Microsoft xWMA&#xA;yop             Psygnosis YOP&#xA;yuv4mpegpipe    YUV4MPEG pipe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The list contains the supported formats (&amp;amp; not containers). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A video/audio format may be present in a number of containers.&lt;/li&gt; &#xA;   &lt;li&gt;e.g. an MP4 file generally contains H264 video stream.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;On the web, format support depends upon the web browser. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It happens to be extremely limited as compared to native platforms.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;You may need to declare &amp;amp; request internet access or file-system permissions depending upon platform.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; to add the following permissions inside &lt;code&gt;&amp;lt;manifest&amp;gt;&lt;/code&gt; tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; package=&#34;com.example.app&#34;&amp;gt;&#xA;    &amp;lt;application&#xA;      ...&#xA;      /&amp;gt;&#xA;    &amp;lt;/application&amp;gt;&#xA;    &amp;lt;!--&#xA;      Internet access permissions.&#xA;      --&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;    &amp;lt;!--&#xA;      Media access permissions.&#xA;      Android 13 or higher.&#xA;      https://developer.android.com/about/versions/13/behavior-changes-13#granular-media-permissions&#xA;      --&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.READ_MEDIA_AUDIO&#34; /&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.READ_MEDIA_VIDEO&#34; /&amp;gt;&#xA;    &amp;lt;!--&#xA;      Storage access permissions.&#xA;      Android 12 or lower.&#xA;      --&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.READ_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://pub.dev/packages/permission_handler&#34;&gt;&lt;code&gt;package:permission_handler&lt;/code&gt;&lt;/a&gt; to request access at runtime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;if (/* Android 13 or higher. */) {&#xA;  // Video permissions.&#xA;  if (await Permission.videos.isDenied || await Permission.videos.isPermanentlyDenied) {&#xA;    final state = await Permission.videos.request();&#xA;    if (!state.isGranted) {&#xA;      await SystemNavigator.pop();&#xA;    }&#xA;  }&#xA;  // Audio permissions.&#xA;  if (await Permission.audio.isDenied || await Permission.audio.isPermanentlyDenied) {&#xA;    final state = await Permission.audio.request();&#xA;    if (!state.isGranted) {&#xA;      await SystemNavigator.pop();&#xA;    }&#xA;  }&#xA;} else {&#xA;  if (await Permission.storage.isDenied || await Permission.storage.isPermanentlyDenied) {&#xA;    final state = await Permission.storage.request();&#xA;    if (!state.isGranted) {&#xA;      await SystemNavigator.pop();&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;ios/Runner/Info-Release.plist&lt;/code&gt;, &lt;code&gt;ios/Runner/Info-Profile.plist&lt;/code&gt;, &lt;code&gt;ios/Runner/Info-Debug.plist&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enable internet access&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;N/A&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;macos/Runner/Release.entitlements&lt;/code&gt; &amp;amp; &lt;code&gt;macos/Runner/DebugProfile.entitlements&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enable internet access&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.security.network.client&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disable sand-box to access files&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.security.app-sandbox&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU/Linux&lt;/h3&gt; &#xA;&lt;p&gt;N/A&lt;/p&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;p&gt;N/A&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;N/A&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;N/A&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;N/A&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;During the build phase, the following warnings are not critical and cannot be silenced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-log&#34;&gt;#import &#34;Headers/media_kit_video-Swift.h&#34;&#xA;        ^&#xA;/path/to/media_kit/media_kit_test/build/macos/Build/Products/Debug/media_kit_video/media_kit_video.framework/Headers/media_kit_video-Swift.h:270:31: warning: &#39;objc_ownership&#39; only applies to Objective-C object or block pointer types; type here is &#39;CVPixelBufferRef&#39; (aka &#39;struct __CVBuffer *&#39;)&#xA;- (CVPixelBufferRef _Nullable __unsafe_unretained)copyPixelBuffer SWIFT_WARN_UNUSED_RESULT;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-log&#34;&gt;# 1 &#34;&amp;lt;command line&amp;gt;&#34; 1&#xA; ^&#xA;&amp;lt;command line&amp;gt;:20:9: warning: &#39;POD_CONFIGURATION_DEBUG&#39; macro redefined&#xA;#define POD_CONFIGURATION_DEBUG 1 DEBUG=1 &#xA;        ^&#xA;#define POD_CONFIGURATION_DEBUG 1&#xA;        ^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GNU/Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Install libmpv&lt;/h4&gt; &#xA;&lt;p&gt;System shared libraries from distribution specific user-installed packages are used by-default. &lt;strong&gt;This is how GNU/Linux works.&lt;/strong&gt; You can install these as follows:&lt;/p&gt; &#xA;&lt;h5&gt;Ubuntu/Debian&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libmpv-dev mpv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Packaging&lt;/h5&gt; &#xA;&lt;p&gt;There are other ways to bundle these within your app package e.g. within Snap or Flatpak. Few examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/celluloid-player/celluloid/raw/master/flatpak/io.github.celluloid_player.Celluloid.json&#34;&gt;Celluloid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ozmartian/vidcutter/tree/master/_packaging&#34;&gt;VidCutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Utilize &lt;a href=&#34;https://github.com/microsoft/mimalloc&#34;&gt;mimalloc&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You should consider replacing the default memory allocator with &lt;a href=&#34;https://github.com/microsoft/mimalloc&#34;&gt;mimalloc&lt;/a&gt; for &lt;a href=&#34;https://github.com/media-kit/media-kit/issues/68&#34;&gt;avoiding memory leaks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is as simple as &lt;a href=&#34;https://github.com/media-kit/media-kit/raw/d02a97ce70b316207db024401fb99e3f4509a250/media_kit_test/linux/CMakeLists.txt#L92-L94&#34;&gt;adding one line to &lt;code&gt;linux/CMakeLists.txt&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;target_link_libraries(${BINARY_NAME} PRIVATE ${MIMALLOC_LIB})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;p&gt;On the web, &lt;strong&gt;libmpv is not used&lt;/strong&gt;. Video &amp;amp; audio playback is handled by embedding &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&#34;&gt;HTML &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element&lt;/a&gt;. The format support depends upon the web browser. It happens to be extremely limited as compared to native platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;package:media_kit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Click on the zoom button on top-right or pinch inside.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  Player *-- PlatformPlayer&#xA;  PlatformPlayer &amp;lt;|-- NativePlayer&#xA;  PlatformPlayer &amp;lt;|-- WebPlayer&#xA;  PlatformPlayer *-- PlayerState&#xA;  PlatformPlayer *-- PlayerStream&#xA;  PlatformPlayer o-- PlayerConfiguration&#xA;&#xA;  NativePlayer &amp;lt;.. NativeLibrary&#xA;  NativePlayer &amp;lt;.. Initializer&#xA;  Initializer o-- InitializerIsolate&#xA;  Initializer o-- InitializerNativeEventLoop&#xA;  &#xA;  Playable &amp;lt;.. Media&#xA;  Playable &amp;lt;.. Playlist&#xA;&#xA;  class Initializer {&#xA;    +create(path: String, callback: Function, options: Map&amp;lt;String, String&amp;gt;): Future&amp;lt;Pointer&amp;lt;mpv_handle&amp;gt;&amp;gt;&#xA;    +dispose(handle: Pointer&amp;lt;mpv_handle&amp;gt;)&#xA;  }&#xA;&#xA;  class InitializerIsolate {&#xA;    +create(path: String, callback: Function, options: Map&amp;lt;String, String&amp;gt;): Future&amp;lt;Pointer&amp;lt;mpv_handle&amp;gt;&amp;gt;&#xA;    +dispose(handle: Pointer&amp;lt;mpv_handle&amp;gt;)&#xA;  }&#xA;&#xA;  class InitializerNativeEventLoop {&#xA;    +ensureInitialized()&#xA;    +create(path: String, callback: Future&amp;lt;void&amp;gt; Function(Pointer&amp;lt;mpv_event&amp;gt; event), options: Map&amp;lt;String, String&amp;gt;): Future&amp;lt;Pointer&amp;lt;mpv_handle&amp;gt;&amp;gt;&#xA;    +dispose(handle: Pointer&amp;lt;mpv_handle&amp;gt;)&#xA;  }&#xA;&#xA;  class Playable {&#xA;  }&#xA;&#xA;  class AudioDevice {&#xA;  }&#xA;  &#xA;  class Media {&#xA;    +String uri&#xA;    +dynamic extras&#xA;  }&#xA;&#xA;  class Playlist {&#xA;    +List&amp;lt;Media&amp;gt; medias&#xA;    +index index&#xA;  }&#xA;&#xA;  class PlayerStream {&#xA;    +Stream&amp;lt;Playlist&amp;gt; playlist&#xA;    +Stream&amp;lt;bool&amp;gt; playing&#xA;    +Stream&amp;lt;bool&amp;gt; completed&#xA;    +Stream&amp;lt;Duration&amp;gt; position&#xA;    +Stream&amp;lt;Duration&amp;gt; duration&#xA;    +Stream&amp;lt;Duration&amp;gt; buffer&#xA;    +Stream&amp;lt;double&amp;gt; volume&#xA;    +Stream&amp;lt;double&amp;gt; rate&#xA;    +Stream&amp;lt;double&amp;gt; pitch&#xA;    +Stream&amp;lt;bool&amp;gt; buffering&#xA;    +Stream&amp;lt;Duration&amp;gt; buffer&#xA;    +Stream&amp;lt;AudioParams&amp;gt; audioParams&#xA;    +Stream&amp;lt;VideoParams&amp;gt; videoParams&#xA;    +Stream&amp;lt;double?&amp;gt; audioBitrate&#xA;    +Stream&amp;lt;AudioDevice&amp;gt; audioDevice&#xA;    +Stream&amp;lt;List&amp;lt;AudioDevice&amp;gt;&amp;gt; audioDevices&#xA;    +Stream&amp;lt;Track&amp;gt; track&#xA;    +Stream&amp;lt;Tracks&amp;gt; tracks&#xA;    +Stream&amp;lt;int&amp;gt; width&#xA;    +Stream&amp;lt;int&amp;gt; height&#xA;    +Stream&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; subtitle&#xA;    +Stream&amp;lt;PlayerLog&amp;gt; log&#xA;    +Stream&amp;lt;String&amp;gt; error&#xA;  }&#xA;&#xA;  class PlayerState {&#xA;    +Playlist playlist&#xA;    +bool playing&#xA;    +bool completed&#xA;    +Duration position&#xA;    +Duration duration&#xA;    +Duration buffer&#xA;    +double volume&#xA;    +double rate&#xA;    +double pitch&#xA;    +bool buffering&#xA;    +Duration buffer&#xA;    +AudioParams audioParams&#xA;    +VideoParams videoParams&#xA;    +double? audioBitrate&#xA;    +AudioDevice audioDevice&#xA;    +List&amp;lt;AudioDevice audioDevices&#xA;    +Track track&#xA;    +Tracks tracks&#xA;    +int width&#xA;    +int height&#xA;    +List&amp;lt;String&amp;gt; subtitle&#xA;  }&#xA;&#xA;  class Player {&#xA;    +PlatformPlayer? platform&#xA;&#xA;    +¬´get¬ª PlayerState state&#xA;    +¬´get¬ª PlayerStream stream&#xA;&#xA;    +dispose()&#xA;    +open(playable: Playable)&#xA;    +play()&#xA;    +stop()&#xA;    +pause()&#xA;    +playOrPause()&#xA;    +add(media: Media)&#xA;    +remove(index: int)&#xA;    +next()&#xA;    +previous()&#xA;    +jump(index: int)&#xA;    +move(from: int, to: int)&#xA;    +seek(duration: Duration)&#xA;    +setPlaylistMode(playlistMode: PlaylistMode)&#xA;    +setVolume(volume: double)&#xA;    +setRate(rate: double)&#xA;    +setPitch(pitch: double)&#xA;    +setShuffle(bool: double)&#xA;    +setAudioDevice(device: AudioDevice)&#xA;    +setVideoTrack(track: VideoTrack)&#xA;    +setAudioTrack(track: AudioTrack)&#xA;    +setSubtitleTrack(track: SubtitleTrack)&#xA;    +screenshot(): Uint8List&#xA;  }&#xA;&#xA;  class PlatformPlayer {&#xA;    +PlayerState state&#xA;    +PlayerStream stream&#xA;    +PlayerConfiguration configuration&#xA;    &#xA;    +dispose()*&#xA;    +open(playable: Playable)*&#xA;    +play()*&#xA;    +stop()*&#xA;    +pause()*&#xA;    +playOrPause()*&#xA;    +add(media: Media)*&#xA;    +remove(index: int)*&#xA;    +next()*&#xA;    +previous()*&#xA;    +jump(index: int)*&#xA;    +move(from: int, to: int)*&#xA;    +seek(duration: Duration)*&#xA;    +setPlaylistMode(playlistMode: PlaylistMode)*&#xA;    +setVolume(volume: double)*&#xA;    +setRate(rate: double)*&#xA;    +setPitch(pitch: double)*&#xA;    +setShuffle(bool: double)*&#xA;    +setAudioDevice(device: AudioDevice)*&#xA;    +setVideoTrack(track: VideoTrack)*&#xA;    +setAudioTrack(track: AudioTrack)*&#xA;    +setSubtitleTrack(track: SubtitleTrack)*&#xA;    +screenshot(): Uint8List*&#xA;&#xA;    +¬´get¬ª handle: Future&amp;lt;int&amp;gt;*&#xA;&#xA;    #StreamController&amp;lt;Playlist&amp;gt; playlistController&#xA;    #StreamController&amp;lt;bool&amp;gt; playingController&#xA;    #StreamController&amp;lt;bool&amp;gt; completedController&#xA;    #StreamController&amp;lt;Duration&amp;gt; positionController&#xA;    #StreamController&amp;lt;Duration&amp;gt; durationController&#xA;    #StreamController&amp;lt;Duration&amp;gt; bufferController&#xA;    #StreamController&amp;lt;double&amp;gt; volumeController&#xA;    #StreamController&amp;lt;double&amp;gt; rateController&#xA;    #StreamController&amp;lt;double&amp;gt; pitchController&#xA;    #StreamController&amp;lt;bool&amp;gt; bufferingController&#xA;    #StreamController&amp;lt;PlayerLog&amp;gt; logController&#xA;    #StreamController&amp;lt;PlayerError&amp;gt; errorController&#xA;    #StreamController&amp;lt;AudioParams&amp;gt; audioParamsController&#xA;    #StreamController&amp;lt;double?&amp;gt; audioBitrateController&#xA;    #StreamController&amp;lt;AudioDevice&amp;gt; audioDeviceController&#xA;    #StreamController&amp;lt;List&amp;lt;AudioDevice&amp;gt;&amp;gt; audioDevicesController&#xA;    #StreamController&amp;lt;Track&amp;gt; trackController&#xA;    #StreamController&amp;lt;Tracks&amp;gt; tracksController&#xA;    #StreamController&amp;lt;int&amp;gt; widthController&#xA;    #StreamController&amp;lt;int&amp;gt; heightController&#xA;  }&#xA;&#xA;  class NativePlayer {&#xA;    +dispose()&#xA;    +open(playable: Playable)&#xA;    +play()&#xA;    +stop()&#xA;    +pause()&#xA;    +playOrPause()&#xA;    +add(media: Media)&#xA;    +remove(index: int)&#xA;    +next()&#xA;    +previous()&#xA;    +jump(index: int)&#xA;    +move(from: int, to: int)&#xA;    +seek(duration: Duration)&#xA;    +setPlaylistMode(playlistMode: PlaylistMode)&#xA;    +setVolume(volume: double)&#xA;    +setRate(rate: double)&#xA;    +setPitch(pitch: double)&#xA;    +setShuffle(bool: double)&#xA;    +setAudioDevice(device: AudioDevice)&#xA;    +setVideoTrack(track: VideoTrack)&#xA;    +setAudioTrack(track: AudioTrack)&#xA;    +setSubtitleTrack(track: SubtitleTrack)&#xA;    +screenshot(): Uint8List&#xA;&#xA;    +¬´get¬ª handle: Future&amp;lt;int&amp;gt;&#xA;  }&#xA;  &#xA;  class WebPlayer {&#xA;    +dispose()&#xA;    +open(playable: Playable)&#xA;    +play()&#xA;    +stop()&#xA;    +pause()&#xA;    +playOrPause()&#xA;    +add(media: Media)&#xA;    +remove(index: int)&#xA;    +next()&#xA;    +previous()&#xA;    +jump(index: int)&#xA;    +move(from: int, to: int)&#xA;    +seek(duration: Duration)&#xA;    +setPlaylistMode(playlistMode: PlaylistMode)&#xA;    +setVolume(volume: double)&#xA;    +setRate(rate: double)&#xA;    +setPitch(pitch: double)&#xA;    +setShuffle(bool: double)&#xA;    +setAudioDevice(device: AudioDevice)&#xA;    +setVideoTrack(track: VideoTrack)&#xA;    +setAudioTrack(track: AudioTrack)&#xA;    +setSubtitleTrack(track: SubtitleTrack)&#xA;    +screenshot(): Uint8List&#xA;&#xA;    +¬´get¬ª handle: Future&amp;lt;int&amp;gt;&#xA;  }&#xA;&#xA;  class NativeLibrary {&#xA;    +find()$ String?&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;package:media_kit_video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Click on the zoom button on top-right or pinch inside.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  MediaKitVideoPlugin &#34;1&#34; *-- &#34;1&#34; VideoOutputManager: Create VideoOutput(s) with VideoOutputManager for handle passed through platform channel&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;*&#34; VideoOutput: Create VideoOutput(s) to send back id &amp;amp; wid for render. Dispose to release.&#xA;  VideoOutput &amp;lt;.. MediaKitAndroidHelper: Create &amp;amp; dispose JNI global object reference to android.view.Surface (for --wid)&#xA;  &#xA;  class MediaKitVideoPlugin {&#xA;    +Activity activity$&#xA;    -MethodChannel channel&#xA;    -TextureRegistry textureRegistry&#xA;    -VideoOutputManager videoOutputManager&#xA;  }&#xA;  &#xA;  class VideoOutputManager {&#xA;    -HashMap&amp;lt;Long, VideoOutput&amp;gt; videoOutputs&#xA;    -MethodChannel channelReference&#xA;    -TextureRegistry textureRegistryReference&#xA;    -Object lock&#xA;    &#xA;    +create(handle: long): VideoOutput&#xA;    +dispose(handle: long): void&#xA;    +createSurface(handle: long): long&#xA;    +setSurfaceTextureSize(handle: long, width: int, height: int): void&#xA;  }&#xA;  &#xA;  class VideoOutput {&#xA;    +long id&#xA;    +long wid&#xA;&#xA;    -Surface surface&#xA;    -TextureRegistry.SurfaceTextureEntry surfaceTextureEntry&#xA;    -Method newGlobalObjectRef&#xA;    -Method deleteGlobalObjectRef&#xA;&#xA;    -long handle&#xA;    -MethodChannel channelReference&#xA;    -TextureRegistry textureRegistryReference&#xA;    &#xA;    +dispose()&#xA;    +createSurface(): long&#xA;    +setSurfaceTextureSize(width: int, height: int)&#xA;  }&#xA;  &#xA;  class MediaKitAndroidHelper {&#xA;    +newGlobalObjectRef(obj: Object): long&#xA;    +deleteGlobalObjectRef(ref: long): void&#xA;    +setApplicationContext(context: Context): void&#xA;    +copyAssetToExternalFilesDir(assetName: String): String&#xA;  }&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO: documentation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO: documentation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  MediaKitVideoPlugin &#34;1&#34; *-- &#34;1&#34; VideoOutputManager: Create VideoOutput(s) with VideoOutputManager for handle passed through platform channel&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;*&#34; VideoOutput: Takes PluginRegistrarWindows as reference&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;1&#34; ThreadPool&#xA;  VideoOutput &#34;*&#34; o-- &#34;1&#34; ThreadPool: Post creation, resize &amp;amp; render etc. tasks involving EGL to ensure synchronous EGL/ANGLE usage across multiple VideoOutput(s)&#xA;  VideoOutput &#34;1&#34; *-- &#34;1&#34; ANGLESurfaceManager: Only for H/W accelerated rendering&#xA;&#xA;  class MediaKitVideoPlugin {&#xA;    -flutter::PluginRegistrarWindows registrar_&#xA;    -std::unique_ptr&amp;lt;MethodChannel&amp;gt; channel_&#xA;    -std::unique_ptr&amp;lt;VideoOutputManager&amp;gt; video_output_manager_&#xA;    -HandleMethodCall(method_call, result);&#xA;  }&#xA;&#xA;  class ThreadPool {&#xA;    +Post(function: std::function)&#xA;  }&#xA;&#xA;  class VideoOutputManager {&#xA;    +Create(handle: int, width: optional&amp;lt;int&amp;gt;, height: optional&amp;lt;int&amp;gt;, texture_update_callback: std::function)&#xA;    +Dispose(handle: int)&#xA;&#xA;    -std::mutex mutex_&#xA;    -std::unique_ptr&amp;lt;ThreadPool&amp;gt; thread_pool_&#xA;    -flutter::PluginRegistrarWindows registrar_&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;VideoOutput&amp;gt;&amp;gt; video_outputs_&#xA;  }&#xA;&#xA;  class VideoOutput {&#xA;    +¬´get¬ª texture_id: int64_t&#xA;    +¬´get¬ª width: int64_t&#xA;    +¬´get¬ª height: int64_t&#xA;    -mpv_handle* handle_&#xA;    -mpv_render_context* render_context_&#xA;    -std::optional&amp;lt;int64_t&amp;gt; width_&#xA;    -std::optional&amp;lt;int64_t&amp;gt; height_&#xA;    -bool enable_hardware_acceleration_&#xA;    -int64_t texture_id_&#xA;    -flutter::PluginRegistrarWindows registrar_&#xA;    -ThreadPool* thread_pool_ref_&#xA;    -bool destroyed_&#xA;    -std::mutex textures_mutex_&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;flutter::TextureVariant&amp;gt;&amp;gt; texture_variants_&#xA;    -std::unique_ptr&amp;lt;ANGLESurfaceManager&amp;gt; surface_manager_ HW&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;FlutterDesktopGpuSurfaceDescriptor&amp;gt;&amp;gt; textures_ HW&#xA;    -std::unique_ptr&amp;lt;uint8_t[]&amp;gt; pixel_buffer_ SW&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;FlutterDesktopPixelBuffer&amp;gt;&amp;gt; pixel_buffer_textures_ SW&#xA;    -std::function texture_update_callback_&#xA;&#xA;    +SetTextureUpdateCallback(callback: std::function&amp;lt;void(int64_t, int64_t, int64_t)&amp;gt;)&#xA;    +SetSize(width: std::optional&amp;lt;int64_t&amp;gt;, height: std::optional&amp;lt;int64_t&amp;gt;)&#xA;    -NotifyRender()&#xA;    -Render()&#xA;    -CheckAndResize()&#xA;    -Resize(required_width: int64_t, required_height: int64_t)&#xA;    -GetVideoWidth(): int64_t&#xA;    -GetVideoHeight(): int64_t&#xA;  }&#xA;&#xA;  class ANGLESurfaceManager {&#xA;    +¬´get¬ª width: int32_t&#xA;    +¬´get¬ª height: int32_t&#xA;    +¬´get¬ª handle: HANDLE&#xA;&#xA;    +HandleResize(width: int32_t, height: int32_t)&#xA;    +Draw(draw_callback: std::function&amp;lt;void()&amp;gt;)&#xA;    +Read()&#xA;    +MakeCurrent(value: bool)&#xA;    -CreateEGLDisplay()&#xA;    -SwapBuffers()&#xA;    -Create()&#xA;    -CleanUp(release_context: bool)&#xA;    -CreateD3DTexture()&#xA;    -CreateEGLDisplay()&#xA;    -CreateAndBindEGLSurface()&#xA;&#xA;    -IDXGIAdapter* adapter_&#xA;    -int32_t width_&#xA;    -int32_t height_&#xA;    -HANDLE internal_handle_&#xA;    -HANDLE handle_&#xA;    -HANDLE mutex_&#xA;    -ID3D11Device* d3d_11_device_&#xA;    -ID3D11DeviceContext* d3d_11_device_context_&#xA;    -Microsoft::WRL::ComPtr&amp;lt;ID3D11Texture2D&amp;gt; internal_d3d_11_texture_2D_&#xA;    -Microsoft::WRL::ComPtr&amp;lt;IDXGISwapChain&amp;gt; d3d_11_texture_2D_&#xA;    -EGLSurface surface_&#xA;    -EGLDisplay display_&#xA;    -EGLContext context_&#xA;    -EGLConfig config_&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GNU/Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  MediaKitVideoPlugin &#34;1&#34; *-- &#34;1&#34; VideoOutputManager: Create VideoOutput(s) with VideoOutputManager for handle passed through platform channel&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;*&#34; VideoOutput: Takes FlTextureRegistrar as reference&#xA;  VideoOutput &#34;1&#34; *-- &#34;1&#34; TextureGL: For H/W rendering.&#xA;  TextureGL &#34;1&#34; o-- &#34;1&#34; VideoOutput: Take VideoOutput as reference&#xA;  VideoOutput &#34;1&#34; *-- &#34;1&#34; TextureSW: For S/W rendering.&#xA;  TextureSW &#34;1&#34; o-- &#34;1&#34; VideoOutput: Take VideoOutput as reference&#xA;  TextureGL &#34;1&#34; &amp;lt;-- &#34;1&#34; FlTextureGL&#xA;  TextureSW &#34;1&#34; &amp;lt;-- &#34;1&#34; FlTexture&#xA;&#xA;  class MediaKitVideoPlugin {&#xA;    -FlMethodChannel* channel&#xA;    -VideoOutputManager* video_output_manager&#xA;  }&#xA;&#xA;  class VideoOutputManager {&#xA;    -GHashTable* video_outputs&#xA;    -FlTextureRegistrar* texture_registrar&#xA;    +video_output_manager_create(self: VideoOutputManager*, handle: gint64, width: gint64, height: gint64, texture_update_callback: TextureUpdateCallback, texture_update_callback_context: gpointer)&#xA;    +video_output_manager_dispose(self: VideoOutputManager*, handle: gint64)&#xA;  }&#xA;&#xA;  class VideoOutput {&#xA;    -TextureGL* texture_gl&#xA;    -GdkGLContext* context_gl&#xA;    -mpv_handle* handle&#xA;    -mpv_render_context* render_context&#xA;    -gint64 width&#xA;    -gint64 height&#xA;    -TextureUpdateCallback texture_update_callback&#xA;    -gpointer texture_update_callback_context&#xA;    -FlTextureRegistrar* texture_registrar&#xA;    +video_output_set_texture_update_callback(self: VideoOutput*, texture_update_callback: TextureUpdateCallback, texture_update_callback_context: gpointer)&#xA;    +video_output_get_render_context(self: VideoOutput*): mpv_render_context*&#xA;    +video_output_get_width(self: VideoOutput*): gint64&#xA;    +video_output_get_height(self: VideoOutput*): gint64&#xA;    +video_output_get_texture_id(self: VideoOutput*): gint64&#xA;    +video_output_notify_texture_update(self: VideoOutput*);&#xA;  }&#xA;&#xA;  class TextureGL {&#xA;    -guint32 name&#xA;    -guint32 fbo&#xA;    -guint32 current_width&#xA;    -guint32 current_height&#xA;    -VideoOutput* video_output&#xA;    texture_gl_populate_texture(texture: FlTextureGL*, target: guint32*, name: guint32*, width: guint32*, height: guint32*, error: GError**): gboolean&#xA;  }&#xA;&#xA;  class TextureSW {&#xA;    -guint32 current_width&#xA;    -guint32 current_height&#xA;    -VideoOutput* video_output&#xA;    texture_sw_copy_pixels(texture: FlPixelBufferTexture*, buffer: const uint8_t**, width: uint32_t*, height: uint32_t*, error: GError**): gboolean&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Web&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO: documentation.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; is used for leveraging audio &amp;amp; video playback. It &lt;em&gt;seems&lt;/em&gt; the best possible option since supports a wide variety of audio &amp;amp; video formats, provides hardware acceleration &amp;amp; bundle size is also minimal (select only required decoders etc. in FFmpeg/mpv).&lt;/p&gt; &#xA;&lt;p&gt;Another major advantage is that large part of implementation (80%+) is shared across platforms using FFI. This makes the behavior of package very-very similar on all supported platforms &amp;amp; makes maintenance easier (since there is less code &amp;amp; most of it within Dart).&lt;/p&gt; &#xA;&lt;p&gt;Alternative backends may be implemented in future to meet certain demands (&amp;amp; project architecture makes it possible).&lt;/p&gt; &#xA;&lt;h3&gt;package:media_kit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt; is entirely written in Dart. It uses dart:ffi to invoke native C API of libmpv through it&#39;s shared libraries. All the callback management, event-&lt;code&gt;Stream&lt;/code&gt;s, other methods to control playback of audio/video are implemented in Dart with the help of FFI. Event management i.e. &lt;code&gt;position&lt;/code&gt;, &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;bitrate&lt;/code&gt;, &lt;code&gt;audioParams&lt;/code&gt; &lt;code&gt;Stream&lt;/code&gt;s are important to render changes in the UI.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/37022&#34;&gt;big limitation with FFI in Dart SDK&lt;/a&gt; has been that it does not support async callbacks from another thread. Learn more about this at: &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/37022&#34;&gt;dart/sdk#37022&lt;/a&gt;. Following situation will explain better:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you pass a function pointer from Dart to C code, you can invoke it fine. But, as soon as you invoke it from some other thread on the native side, Dart VM will instantly crash. This feature is important because most events take place on a background thread.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;However, I could easily do this within Dart because &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; offers an &#34;event polling&#34;-like way to listen to events. I got awesome idea to spawn a background &lt;a href=&#34;https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html&#34;&gt;&lt;code&gt;Isolate&lt;/code&gt;&lt;/a&gt;, where I run the event-loop. I get the memory address of each event and forward it outside the &lt;a href=&#34;https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html&#34;&gt;&lt;code&gt;Isolate&lt;/code&gt;&lt;/a&gt; with the help of &lt;a href=&#34;https://api.dart.dev/stable/2.18.6/dart-isolate/ReceivePort-class.html&#34;&gt;&lt;code&gt;ReceivePort&lt;/code&gt;&lt;/a&gt;, where I finally interpret it using more FFI code. I have explained this in detail within &lt;a href=&#34;https://github.com/media-kit/media-kit/raw/master/media_kit/lib/src/libmpv/core/initializer.dart&#34;&gt;the in-code comments of initializer.dart, where I had to perform a lot more trickery to get this to work&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thus, invoking native methods &amp;amp; handling of events etc. could be done within 100% Dart using FFI.&lt;/strong&gt; This is enough for audio playback &amp;amp; supports both Flutter SDK &amp;amp; Dart VM. Although event handling works entirely within Dart. Later, it was discovered that going beyond certain number of simultaneous instances caused a deadlock (&lt;a href=&#34;https://github.com/dart-lang/sdk/issues/51254&#34;&gt;dart-lang/sdk#51254&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/51261&#34;&gt;dart-lang/sdk#51261&lt;/a&gt;), making UI entirely freezed along-side any other Dart code in execution. To deal with this, a new package &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#packagemedia_kit_native_event_loop&#34;&gt;package:media_kit_native_event_loop&lt;/a&gt; is created. Adding &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/#packagemedia_kit_native_event_loop&#34;&gt;package:media_kit_native_event_loop&lt;/a&gt; to &lt;code&gt;pubspec.yaml&lt;/code&gt; automatically resolves this issue without any chagnes to code!&lt;/p&gt; &#xA;&lt;p&gt;However, no such &#34;event-polling&#34; like API is possible for video rendering. So, I best idea seemed to create a new package &lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;&lt;code&gt;package:media_kit_video&lt;/code&gt;&lt;/a&gt; for specifically offering platform-specific video embedding implementation which internally handles Flutter&#39;s Texture Registry API &amp;amp; libmpv&#39;s OpenGL rendering API. This package only consumes the &lt;code&gt;mpv_handle*&lt;/code&gt; (which can be shared as primitive &lt;code&gt;int&lt;/code&gt; value easily) of the instance (created with &lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;package:media_kit&lt;/a&gt; through FFI) to setup a new viewport. Detailed implementation is discussed below.&lt;/p&gt; &#xA;&lt;h3&gt;package:media_kit_native_event_loop&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Platform specific threaded event handling for media_kit. Enables support for higher number of concurrent instances.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The package contains a minimal C++ implementation which spawns a detach-ed &lt;a href=&#34;https://en.cppreference.com/w/cpp/thread/thread&#34;&gt;&lt;code&gt;std::thread&lt;/code&gt;&lt;/a&gt;. This runs the &lt;code&gt;mpv_wait_event&lt;/code&gt; loop &amp;amp; forwads the events using &lt;a href=&#34;https://api.dart.dev/stable/2.19.6/dart-ffi/NativeApi/postCObject.html&#34;&gt;&lt;code&gt;postCObject&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://api.dart.dev/stable/2.19.6/dart-isolate/SendPort-class.html&#34;&gt;&lt;code&gt;SendPort&lt;/code&gt;&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://api.dart.dev/stable/2.19.6/dart-isolate/ReceivePort-class.html&#34;&gt;&lt;code&gt;ReceivePort&lt;/code&gt;&lt;/a&gt; to Dart VM. Necessary mutex synchronization also takes place.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html&#34;&gt;&lt;code&gt;Isolate&lt;/code&gt;&lt;/a&gt; based event loop is avoided once this package is added to the project.&lt;/p&gt; &#xA;&lt;h3&gt;package:media_kit_video&lt;/h3&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;On Android, &lt;a href=&#34;https://api.flutter.dev/javadoc/io/flutter/view/TextureRegistry.html&#34;&gt;texture registry API&lt;/a&gt; is based on &lt;a href=&#34;https://developer.android.com/reference/android/graphics/SurfaceTexture.html?is-external=true&#34;&gt;&lt;code&gt;android.graphics.SurfaceTexture&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; can render directly onto an &lt;a href=&#34;https://developer.android.com/reference/android/view/Surface&#34;&gt;&lt;code&gt;android.view.Surface&lt;/code&gt;&lt;/a&gt; after setting &lt;a href=&#34;https://mpv.io/manual/stable/#options-wid&#34;&gt;&lt;code&gt;--wid&lt;/code&gt;&lt;/a&gt;. Creation of a new &lt;a href=&#34;https://developer.android.com/reference/android/view/Surface&#34;&gt;&lt;code&gt;android.view.Surface&lt;/code&gt;&lt;/a&gt; requires reference to an existing &lt;a href=&#34;https://developer.android.com/reference/android/graphics/SurfaceTexture.html?is-external=true&#34;&gt;&lt;code&gt;android.graphics.SurfaceTexture&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://api.flutter.dev/javadoc/io/flutter/view/TextureRegistry.SurfaceTextureEntry.html#surfaceTexture()&#34;&gt;which can be consumed from the texture entry created by Flutter itself&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This requires &lt;code&gt;--hwdec=mediacodec&lt;/code&gt; for hardware decoding, along with &lt;code&gt;--vo=mediacodec_embed&lt;/code&gt; and &lt;code&gt;--wid=(intptr_t)(*android.view.Surface)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More details may be found at: &lt;a href=&#34;https://mpv.io/manual/stable/#video-output-drivers-mediacodec-embed&#34;&gt;https://mpv.io/manual/stable/#video-output-drivers-mediacodec-embed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Obtaining a global reference pointer to a Java object (&lt;a href=&#34;https://developer.android.com/reference/android/view/Surface&#34;&gt;&lt;code&gt;android.view.Surface&lt;/code&gt;&lt;/a&gt; in our case) requires JNI. For this, a custom shared library is used, you can find it&#39;s implementation at &lt;a href=&#34;https://github.com/media-kit/media-kit-android-helper&#34;&gt;media-kit/media-kit-android-helper&lt;/a&gt;. Since compilation of this would require NDK (&amp;amp; make process tedious), pre-built shared libraries is bundled for each architecture at the time of development/build.&lt;/p&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;package:media_kit&lt;/code&gt; is a Dart package (which works independent of Flutter), accessing assets was a challenging part. The mentioned shared libraries generated by &lt;a href=&#34;https://github.com/media-kit/media-kit-android-helper&#34;&gt;media-kit/media-kit-android-helper&lt;/a&gt; helps to &lt;a href=&#34;https://github.com/alexmercerind/MediaKitAndroidHelper/raw/220cf95958aceb7e3678ba524da812f212524537/app/src/main/cpp/native-lib.cpp#L26-L115&#34;&gt;access assets bundled inside Android APK from Dart&lt;/a&gt; (using FFI, without depending on Flutter).&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;iOS shares much of it&#39;s implementation with macOS. Only difference is that OpenGL ES is used instead of OpenGL.&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;p&gt;On macOS the current implementation is based on &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; and can be summarized as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;H/W video decoding: mpv option &lt;code&gt;hwdec&lt;/code&gt; is set to &lt;code&gt;auto&lt;/code&gt;, does not depend on a pixel buffer.&lt;/li&gt; &#xA; &lt;li&gt;OpenGL rendering to an OpenGL texture backed by a pixel buffer, which makes it interoperable with METAL (&lt;a href=&#34;https://developer.apple.com/documentation/corevideo/cvpixelbuffer-q2e&#34;&gt;CVPixelBuffer&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!--&#xA;&#xA;Possible improvements :&#xA;- Render directly to METAL texture:&#xA;  - Use ANGLE to not depend on the host OpenGL implementation, deprecated by Apple.&#xA;  - Use a future METAL API natively developed by mpv.&#xA;- Share the METAL texture between `media_kit_video` and Flutter, without using a pixel buffer.&#xA;&#xA;--&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; gives access to C API for rendering hardware-accelerated video output using OpenGL. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/libmpv/render.h&#34;&gt;render.h&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/libmpv/render_gl.h&#34;&gt;render_gl.h&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flutter recently added ability for Windows to &lt;a href=&#34;https://github.com/flutter/engine/pull/26840&#34;&gt;render Direct3D &lt;code&gt;ID3D11Texture2D&lt;/code&gt; textures&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The two APIs above are hardware accelerated i.e. GPU backed buffers are used. &lt;strong&gt;This is performant approach, easily capable for rendering 4K 60 FPS videos&lt;/strong&gt;, rest depends on the hardware. Since &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; API is OpenGL based &amp;amp; the Texture API in Flutter is Direct3D based, &lt;a href=&#34;https://github.com/google/angle&#34;&gt;ANGLE (Almost Native Graphics Layer Engine)&lt;/a&gt; is used for interop, which translates the OpenGL ES 2.0 calls into Direct3D.&lt;/p&gt; &#xA;&lt;p&gt;This hardware-accelerated video output requires DirectX 11 or higher. Most Windows systems with either integrated or discrete GPUs should support this already. On systems where Direct3D fails to load due to missing graphics drivers or unsupported feature-level or DirectX version etc. a fallback pixel-buffer based software renderer is used. This means that video is rendered by CPU &amp;amp; every frame is copied back to the RAM. This will cause some redundant load on the CPU, result in decreased battery life &amp;amp; may not play higher resolution videos properly. However, it works well.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Windows 7 &amp;amp; 8.x also work correctly. &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/28951144/212947036-4a2430d6-729e-47d7-a356-c8cc8534a1aa.jpg&#34; alt=&#34;0&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/28951144/212947046-cc8d441c-96f8-4437-9f59-b4613ca73f2a.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You may visit &lt;a href=&#34;https://github.com/alexmercerind/flutter-windows-OpenGLES&#34;&gt;experimentation repository&lt;/a&gt; to see a minimal example showing OpenGL ES usage in Flutter Windows.&lt;/p&gt; &#xA;&lt;h4&gt;GNU/Linux&lt;/h4&gt; &#xA;&lt;p&gt;On Flutter Linux, &lt;a href=&#34;https://github.com/flutter/engine/pull/24916&#34;&gt;both OpenGL (H/W) &amp;amp; pixel buffer (S/W) APIs&lt;/a&gt; are available for rendering on &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/Texture-class.html&#34;&gt;&lt;code&gt;Texture&lt;/code&gt; widget&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Web&lt;/h4&gt; &#xA;&lt;p&gt;Video &amp;amp; audio playback is handled by embedding &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&#34;&gt;HTML &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright ¬© 2021 &amp;amp; onwards, Hitesh Kumar Saini &amp;lt;&lt;a href=&#34;mailto:saini123hitesh@gmail.com&#34;&gt;saini123hitesh@gmail.com&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;This project &amp;amp; the work under this repository is governed by MIT license that can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/media-kit/media-kit/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dart-lang/pub-dev</title>
    <updated>2023-11-19T01:49:07Z</updated>
    <id>tag:github.com,2023-11-19:/dart-lang/pub-dev</id>
    <link href="https://github.com/dart-lang/pub-dev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pub.dev, the Dart package repository, written in Dart&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dart-lang/pub-dev/actions?query=workflow%3A%22Dart+CI%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/dart-lang/pub-dev/workflows/Dart%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code for the &#34;pub.dev&#34; website.&lt;/h1&gt; &#xA;&lt;p&gt;The server for hosting pub packages on &lt;a href=&#34;https://pub.dev&#34;&gt;pub.dev&lt;/a&gt; is implemented using AppEngine Custom Runtimes with Flexible environment (see &lt;a href=&#34;https://pub.dev/packages/appengine&#34;&gt;package:appengine&lt;/a&gt; for more information about Dart support for AppEngine).&lt;/p&gt; &#xA;&lt;p&gt;This code isn&#39;t designed with private hosting in mind. If you need a private hosted environment, you may find some of the suggestions in &lt;a href=&#34;https://dart.dev/tools/pub/custom-package-repositories&#34;&gt;this page&lt;/a&gt; to be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dart-lang/pub-dev/master/doc/development.md&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dart-lang/pub-dev/master/doc/versions.md&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dart-lang/pub-dev/master/doc/secrets.md&#34;&gt;Secrets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dart-lang/pub-dev/master/doc/search.md&#34;&gt;Search&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>