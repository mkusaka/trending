<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T02:06:42Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ryanheise/just_audio</title>
    <updated>2022-07-24T02:06:42Z</updated>
    <id>tag:github.com,2022-07-24:/ryanheise/just_audio</id>
    <link href="https://github.com/ryanheise/just_audio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio Player&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>singerdmx/flutter-quill</title>
    <updated>2022-07-24T02:06:42Z</updated>
    <id>tag:github.com,2022-07-24:/singerdmx/flutter-quill</id>
    <link href="https://github.com/singerdmx/flutter-quill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rich text editor for Flutter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10923085/119221946-2de89000-baf2-11eb-8285-68168a78c658.png&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;A rich text editor for Flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/singerdmx/flutter-quill.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=for-the-badge&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FlutterQuill is a rich text editor and a &lt;a href=&#34;https://quilljs.com/docs/formats&#34;&gt;Quill&lt;/a&gt; component for &lt;a href=&#34;https://github.com/flutter/flutter&#34;&gt;Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is a WYSIWYG editor built for the modern mobile platform, with web compatibility under development. Check out our &lt;a href=&#34;https://youtube.com/playlist?list=PLbhaS_83B97vONkOAWGJrSXWX58et9zZ2&#34;&gt;Youtube Playlist&lt;/a&gt; or &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/CodeIntroduction.md&#34;&gt;Code Introduction&lt;/a&gt; to take a detailed walkthrough of the code base. You can join our &lt;a href=&#34;https://join.slack.com/t/bulletjournal1024/shared_invite/zt-fys7t9hi-ITVU5PGDen1rNRyCjdcQ2g&#34;&gt;Slack Group&lt;/a&gt; for discussion.&lt;/p&gt; &#xA;&lt;p&gt;Demo App: &lt;a href=&#34;https://bulletjournal.us/home/index.html&#34;&gt;https://bulletjournal.us/home/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pub: &lt;a href=&#34;https://pub.dev/packages/flutter_quill&#34;&gt;https://pub.dev/packages/flutter_quill&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;example&lt;/code&gt; directory for a minimal example of how to use FlutterQuill. You typically just need to instantiate a controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;QuillController _controller = QuillController.basic();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then embed the toolbar and the editor, within your app. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Column(&#xA;  children: [&#xA;    QuillToolbar.basic(controller: _controller),&#xA;    Expanded(&#xA;      child: Container(&#xA;        child: QuillEditor.basic(&#xA;          controller: _controller,&#xA;          readOnly: false, // true for view only mode&#xA;        ),&#xA;      ),&#xA;    )&#xA;  ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart&#34;&gt;Sample Page&lt;/a&gt; for advanced usage.&lt;/p&gt; &#xA;&lt;h2&gt;Input / Output&lt;/h2&gt; &#xA;&lt;p&gt;This library uses &lt;a href=&#34;https://quilljs.com/docs/formats&#34;&gt;Quill&lt;/a&gt; as an internal data format.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;_controller.document.toDelta()&lt;/code&gt; to extract the deltas.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;_controller.document.toPlainText()&lt;/code&gt; to extract plain text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FlutterQuill provides some JSON serialisation support, so that you can save and open documents. To save a document as JSON, do something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var json = jsonEncode(_controller.document.toDelta().toJson());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then write this to storage.&lt;/p&gt; &#xA;&lt;p&gt;To open a FlutterQuill editor with an existing JSON representation that you&#39;ve previously stored, you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var myJSON = jsonDecode(incomingJSONText);&#xA;_controller = QuillController(&#xA;          document: Document.fromJson(myJSON),&#xA;          selection: TextSelection.collapsed(offset: 0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;For web development, use &lt;code&gt;flutter config --enable-web&lt;/code&gt; for flutter or use &lt;a href=&#34;https://github.com/zenoamaro/react-quill&#34;&gt;ReactQuill&lt;/a&gt; for React.&lt;/p&gt; &#xA;&lt;p&gt;It is required to provide &lt;code&gt;EmbedBuilder&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/universal_ui/universal_ui.dart#L28&#34;&gt;defaultEmbedBuilderWeb&lt;/a&gt;. Also it is required to provide &lt;code&gt;webImagePickImpl&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart#L225&#34;&gt;Sample Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Desktop&lt;/h2&gt; &#xA;&lt;p&gt;It is required to provide &lt;code&gt;filePickImpl&lt;/code&gt; for toolbar image button, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart#L205&#34;&gt;Sample Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;QuillToolbar&lt;/code&gt; class lets you customise which formatting options are available. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart&#34;&gt;Sample Page&lt;/a&gt; provides sample code for advanced usage and configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Font Size&lt;/h3&gt; &#xA;&lt;p&gt;Within the editor toolbar, a drop-down with font-sizing capabilities is available. This can be enabled or disabled with &lt;code&gt;showFontSize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, the default font-size values can be modified via &lt;em&gt;optional&lt;/em&gt; &lt;code&gt;fontSizeValues&lt;/code&gt;. &lt;code&gt;fontSizeValues&lt;/code&gt; accepts a &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; consisting of a &lt;code&gt;String&lt;/code&gt; title for the font size and a &lt;code&gt;String&lt;/code&gt; value for the font size. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fontSizeValues: const {&#39;Small&#39;: &#39;8&#39;, &#39;Medium&#39;: &#39;24.5&#39;, &#39;Large&#39;: &#39;46&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Font size can be cleared with a value of &lt;code&gt;0&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fontSizeValues: const {&#39;Small&#39;: &#39;8&#39;, &#39;Medium&#39;: &#39;24.5&#39;, &#39;Large&#39;: &#39;46&#39;, &#39;Clear&#39;: &#39;0&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Font Family&lt;/h3&gt; &#xA;&lt;p&gt;To use your own fonts, update your &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/tree/master/example/assets/fonts&#34;&gt;assets folder&lt;/a&gt; and pass in &lt;code&gt;fontFamilyValues&lt;/code&gt;. More details at &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/commit/71d06f6b7be1b7b6dba2ea48e09fed0d7ff8bbaa&#34;&gt;this change&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/55075834/fontfamily-property-not-working-properly-in-flutter&#34;&gt;this article&lt;/a&gt; and &lt;a href=&#34;https://www.flutterbeads.com/change-font-family-flutter/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Buttons&lt;/h3&gt; &#xA;&lt;p&gt;You may add custom buttons to the &lt;em&gt;end&lt;/em&gt; of the toolbar, via the &lt;code&gt;customButtons&lt;/code&gt; option, which is a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;QuillCustomButton&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add an Icon, we should use a new QuillCustomButton class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    QuillCustomButton(&#xA;        icon:Icons.ac_unit,&#xA;        onTap: () {&#xA;          debugPrint(&#39;snowflake&#39;);&#xA;        }&#xA;    ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &lt;code&gt;QuillCustomButton&lt;/code&gt; is used as part of the &lt;code&gt;customButtons&lt;/code&gt; option as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;QuillToolbar.basic(&#xA;   (...),&#xA;    customButtons: [&#xA;        QuillCustomButton(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake1&#39;);&#xA;            }&#xA;        ),&#xA;&#xA;        QuillCustomButton(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake2&#39;);&#xA;            }&#xA;        ),&#xA;&#xA;        QuillCustomButton(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake3&#39;);&#xA;            }&#xA;        ),&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Size Image for Mobile&lt;/h3&gt; &#xA;&lt;p&gt;Define &lt;code&gt;mobileWidth&lt;/code&gt;, &lt;code&gt;mobileHeight&lt;/code&gt;, &lt;code&gt;mobileMargin&lt;/code&gt;, &lt;code&gt;mobileAlignment&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;      &#34;insert&#34;: {&#xA;         &#34;image&#34;: &#34;https://user-images.githubusercontent.com/122956/72955931-ccc07900-3d52-11ea-89b1-d468a6e2aa2b.png&#34;&#xA;      },&#xA;      &#34;attributes&#34;:{&#xA;         &#34;style&#34;:&#34;mobileWidth: 50; mobileHeight: 50; mobileMargin: 10; mobileAlignment: topLeft&#34;&#xA;      }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Embed Blocks&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to add some custom content inside your text, custom widgets inside of them. An example is adding notes to the text, or anything custom that you want to add in your text editor.&lt;/p&gt; &#xA;&lt;p&gt;The only thing that you need is to add a &lt;code&gt;CustomBlockEmbed&lt;/code&gt; and map it into the &lt;code&gt;customElementsEmbedBuilder&lt;/code&gt;, to transform the data inside of the Custom Block into a widget!&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;p&gt;Starting with the &lt;code&gt;CustomBlockEmbed&lt;/code&gt;, here we extend it and add the methods that are useful for the &#39;Note&#39; widget, that will be the &lt;code&gt;Document&lt;/code&gt;, used by the &lt;code&gt;flutter_quill&lt;/code&gt; to render the rich text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class NotesBlockEmbed extends CustomBlockEmbed {&#xA;  const NotesBlockEmbed(String value) : super(noteType, value);&#xA;&#xA;  static const String noteType = &#39;notes&#39;;&#xA;&#xA;  static NotesBlockEmbed fromDocument(Document document) =&amp;gt;&#xA;      NotesBlockEmbed(jsonEncode(document.toDelta().toJson()));&#xA;&#xA;  Document get document =&amp;gt; Document.fromJson(jsonDecode(data));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, we need to map this &#34;notes&#34; type into a widget. In that case, I used a &lt;code&gt;ListTile&lt;/code&gt; with a text to show the plain text resume of the note, and the &lt;code&gt;onTap&lt;/code&gt; function to edit the note. Don&#39;t forget to add this method to the &lt;code&gt;QuillEditor&lt;/code&gt; after that!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget customElementsEmbedBuilder(&#xA;  BuildContext context,&#xA;  QuillController controller,&#xA;  CustomBlockEmbed block,&#xA;  bool readOnly,&#xA;  void Function(GlobalKey videoContainerKey)? onVideoInit,&#xA;) {&#xA;  switch (block.type) {&#xA;    case &#39;notes&#39;:&#xA;      final notes = NotesBlockEmbed(block.data).document;&#xA;&#xA;      return Material(&#xA;        color: Colors.transparent,&#xA;        child: ListTile(&#xA;          title: Text(&#xA;            notes.toPlainText().replaceAll(&#39;\n&#39;, &#39; &#39;),&#xA;            maxLines: 3,&#xA;            overflow: TextOverflow.ellipsis,&#xA;          ),&#xA;          leading: const Icon(Icons.notes),&#xA;          onTap: () =&amp;gt; _addEditNote(context, document: notes),&#xA;          shape: RoundedRectangleBorder(&#xA;            borderRadius: BorderRadius.circular(10),&#xA;            side: const BorderSide(color: Colors.grey),&#xA;          ),&#xA;        ),&#xA;      );&#xA;    default:&#xA;      return const SizedBox();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, we write the function to add/edit this note. The &lt;code&gt;showDialog&lt;/code&gt; function shows the QuillEditor to edit the note, after the user ends the edition, we check if the document has something, and if it has, we add or edit the &lt;code&gt;NotesBlockEmbed&lt;/code&gt; inside of a &lt;code&gt;BlockEmbed.custom&lt;/code&gt; (this is a little detail that will not work if you don&#39;t pass the &lt;code&gt;CustomBlockEmbed&lt;/code&gt; inside of a &lt;code&gt;BlockEmbed.custom&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; _addEditNote(BuildContext context, {Document? document}) async {&#xA;  final isEditing = document != null;&#xA;  final quillEditorController = QuillController(&#xA;    document: document ?? Document(),&#xA;    selection: const TextSelection.collapsed(offset: 0),&#xA;  );&#xA;&#xA;  await showDialog(&#xA;    context: context,&#xA;    builder: (context) =&amp;gt; AlertDialog(&#xA;      titlePadding: const EdgeInsets.only(left: 16, top: 8),&#xA;      title: Row(&#xA;        mainAxisAlignment: MainAxisAlignment.spaceBetween,&#xA;        children: [&#xA;          Text(&#39;${isEditing ? &#39;Edit&#39; : &#39;Add&#39;} note&#39;),&#xA;          IconButton(&#xA;            onPressed: () =&amp;gt; Navigator.of(context).pop(),&#xA;            icon: const Icon(Icons.close),&#xA;          )&#xA;        ],&#xA;      ),&#xA;      content: QuillEditor.basic(&#xA;        controller: quillEditorController,&#xA;        readOnly: false,&#xA;      ),&#xA;    ),&#xA;  );&#xA;&#xA;  if (quillEditorController.document.isEmpty()) return;&#xA;&#xA;  final block = BlockEmbed.custom(&#xA;    NotesBlockEmbed.fromDocument(quillEditorController.document),&#xA;  );&#xA;  final controller = _controller!;&#xA;  final index = controller.selection.baseOffset;&#xA;  final length = controller.selection.extentOffset - index;&#xA;&#xA;  if (isEditing) {&#xA;    final offset = getEmbedNode(controller, controller.selection.start).item1;&#xA;    controller.replaceText(&#xA;        offset, 1, block, TextSelection.collapsed(offset: offset));&#xA;  } else {&#xA;    controller.replaceText(index, length, block, null);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And voila, we have a custom widget inside of the rich text editor!&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://i.imgur.com/yBTPYeS.png&#34;&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more info and a video example, see the &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/pull/877&#34;&gt;PR of this feature&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more details, check out &lt;a href=&#34;https://youtu.be/pI5p5j7cfHc&#34;&gt;this YouTube video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Translation&lt;/h3&gt; &#xA;&lt;p&gt;The package offers translations for the quill toolbar and editor, it will follow the system locale unless you set your own locale with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;QuillToolbar(locale: Locale(&#39;fr&#39;), ...)&#xA;QuillEditor(locale: Locale(&#39;fr&#39;), ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, translations are available for these 22 locales:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;en&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ar&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;de&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;da&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;fr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;zh&#39;, &#39;CN&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;zh&#39;, &#39;HK&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ko&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ru&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;es&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;tr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;uk&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ur&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;pt&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;pl&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;vi&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;id&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;nl&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;no&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;fa&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;hi&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;sr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Contributing to translations&lt;/h4&gt; &#xA;&lt;p&gt;The translation file is located at &lt;a href=&#34;https://raw.githubusercontent.com/singerdmx/flutter-quill/master/lib/src/translations/toolbar.i18n.dart&#34;&gt;toolbar.i18n.dart&lt;/a&gt;. Feel free to contribute your own translations, just copy the English translations map and replace the values with your translations. Then open a pull request so everyone can benefit from your translations!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/103142422-9bb19c80-46b7-11eb-83e4-dd0538a9236e.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/103142455-0531ab00-46b8-11eb-89f8-26a77de9227f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/102963021-f28f5a00-449c-11eb-8f5f-6e9dd60844c4.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/102977404-c9c88e00-44b7-11eb-9423-b68f3b30b0e0.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://bulletjournal.us/home/index.html&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/122956/72955931-ccc07900-3d52-11ea-89b1-d468a6e2aa2b.png&#34; width=&#34;150px&#34; height=&#34;150px&#34;&gt;&lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>flutter-stripe/flutter_stripe</title>
    <updated>2022-07-24T02:06:42Z</updated>
    <id>tag:github.com,2022-07-24:/flutter-stripe/flutter_stripe</id>
    <link href="https://github.com/flutter-stripe/flutter_stripe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter SDK for Stripe.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/19904063/116995247-20519e80-acda-11eb-8e1b-7d0efbd193ad.png&#34; height=&#34;36&#34;&gt; &#xA;&lt;h1&gt;Flutter Stripe&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_stripe&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_stripe.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/flutter-stripe/flutter_stripe/all_plugins?logo=github&#34; alt=&#34;build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Stripe Flutter SDK allows you to build delightful payment experiences in your native Android and iOS apps using Flutter. We provide powerful and customizable UI screens and elements that can be used out-of-the-box to collect your users&#39; payment details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/19904063/121511757-48bf6d80-c9e9-11eb-9674-0fec35e26ef5.png&#34; alt=&#34;stripe-flutter_cover&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simplified Security&lt;/strong&gt;: We make it simple for you to collect sensitive data such as credit card numbers and remain &lt;a href=&#34;https://stripe.com/docs/security#pci-dss-guidelines&#34;&gt;PCI compliant&lt;/a&gt;. This means the sensitive data is sent directly to Stripe instead of passing through your server. For more information, see our &lt;a href=&#34;https://stripe.com/docs/security&#34;&gt;Integration Security Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Apple Pay&lt;/strong&gt;: We provide a &lt;a href=&#34;https://stripe.com/docs/apple-pay&#34;&gt;seamless integration with Apple Pay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Google Pay&lt;/strong&gt;: The plugin can easily act as payment provider for the &lt;a href=&#34;https://raw.githubusercontent.com/flutter-stripe/flutter_stripe/main/#Pay-Plugin-support&#34;&gt;Pay plugin&lt;/a&gt; that enables you to seamlessly integrate Google Pay or Apple Pay. All you need to do is add your stripe publishable key to the payment profile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Payment methods&lt;/strong&gt;: Accepting more &lt;a href=&#34;https://stripe.com/docs/payments/payment-methods/overview&#34;&gt;payment methods&lt;/a&gt; helps your business expand its global reach and improve checkout conversion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SCA-Ready&lt;/strong&gt;: The SDK automatically performs native &lt;a href=&#34;https://stripe.com/docs/payments/3d-secure&#34;&gt;3D Secure authentication&lt;/a&gt; if needed to comply with &lt;a href=&#34;https://stripe.com/docs/strong-customer-authentication&#34;&gt;Strong Customer Authentication&lt;/a&gt; regulation in Europe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Native UI&lt;/strong&gt;: We provide native screens and elements to securely collect payment details on Android and iOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pre-built payments UI&lt;/strong&gt;: Learn how to integrate Payment Sheet, the new pre-built payments UI for mobile apps. This pre-built UI lets you accept cards, Apple Pay, and Google Pay out of the box, and includes support for saving &amp;amp; reusing cards.&lt;/p&gt; &#xA;&lt;h4&gt;Recommended usage&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re selling digital products or services within your app, (e.g. subscriptions, in-game currencies, game levels, access to premium content, or unlocking a full version), you must use the app store&#39;s in-app purchase APIs. See &lt;a href=&#34;https://developer.apple.com/app-store/review/guidelines/#payments&#34;&gt;Apple&#39;s&lt;/a&gt; and &lt;a href=&#34;https://support.google.com/googleplay/android-developer/answer/9858738?hl=en&amp;amp;ref_topic=9857752&#34;&gt;Google&#39;s&lt;/a&gt; guidelines for more information. For all other scenarios you can use this SDK to process payments via Stripe.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dart pub add flutter_stripe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;This plugin requires several changes to be able to work on Android devices. Please make sure you follow all these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use Android 5.0 (API level 21) and above&lt;/li&gt; &#xA; &lt;li&gt;Use Kotlin version 1.5.0 and above: [example](&lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/raw/79b201a2e9b827196d6a97bb41e1d0e526632a5a/example/android/&#34;&gt;https://github.com/flutter-stripe/flutter_stripe/blob/79b201a2e9b827196d6a97bb41e1d0e526632a5a/example/android/&lt;/a&gt; .gradle#L2)&lt;/li&gt; &#xA; &lt;li&gt;Using a descendant of &lt;code&gt;Theme.AppCompat&lt;/code&gt; for your activity: &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/raw/main/example/android/app/src/main/res/values/styles.xml#L15&#34;&gt;example&lt;/a&gt;, &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/raw/main/example/android/app/src/main/res/values-night/styles.xml#L16&#34;&gt;example night theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using an up-to-date Android gradle build tools version: &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/raw/main/example/android/build.gradle#L9&#34;&gt;example&lt;/a&gt; and an up-to-date gradle version accordingly: &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/raw/main/example/android/gradle/wrapper/gradle-wrapper.properties#L6&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;FlutterFragmentActivity&lt;/code&gt; instead of &lt;code&gt;FlutterActivity&lt;/code&gt; in &lt;code&gt;MainActivity.kt&lt;/code&gt;: &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/raw/79b201a2e9b827196d6a97bb41e1d0e526632a5a/example/android/app/src/main/kotlin/com/flutter/stripe/example/MainActivity.kt#L6&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rebuild the app, as the above changes don&#39;t update with hot reload&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These changes are needed because the Android Stripe SDK requires the use of the AppCompat theme for their UI components and the Support Fragment Manager for the Payment Sheets&lt;/p&gt; &#xA;&lt;p&gt;If you are having troubles to make this package to work on Android, join &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/discussions/538&#34;&gt;this discussion&lt;/a&gt; to get some support&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Compatible with apps targeting iOS 12 or above.&lt;/p&gt; &#xA;&lt;p&gt;To upgrade your iOS deployment target to 12.0, you can either do so in Xcode under your Build Settings, or by modifying IPHONEOS_DEPLOYMENT_TARGET in your project.pbxproj directly.&lt;/p&gt; &#xA;&lt;p&gt;You will also need to update in your Podfile:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;platform :ios, &#39;12.0&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Web (Experimental)&lt;/h4&gt; &#xA;&lt;p&gt;Now you can use Stripe with Flutter web! Notice right now it is highly experimental and only a subset of features is implemented.&lt;/p&gt; &#xA;&lt;p&gt;Check the steps needed &lt;a href=&#34;https://github.com/flutter-stripe/flutter_stripe/tree/main/packages/stripe_web&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Card payments&lt;/h3&gt; &#xA;&lt;p&gt;There are 3 ways of handling card payments&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Ease of use&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;Implementation docs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Payment sheet&lt;/td&gt; &#xA;   &lt;td&gt;Easy&lt;/td&gt; &#xA;   &lt;td&gt;Our recommended way of handling payments. It offers localization, animations and error handling out of the box.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.page/flutter-stripe/flutter_stripe/sheet&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cardfield&lt;/td&gt; &#xA;   &lt;td&gt;Medium&lt;/td&gt; &#xA;   &lt;td&gt;Single line cardfield. Offers more flexibility but has less built-in functionality.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.page/flutter-stripe/flutter_stripe/card_field&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Card form&lt;/td&gt; &#xA;   &lt;td&gt;Medium&lt;/td&gt; &#xA;   &lt;td&gt;Simular as the cardfield but the entry fields are spread across multi lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.page/flutter-stripe/flutter_stripe/card_field&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Stripe initialization&lt;/h2&gt; &#xA;&lt;p&gt;To initialize Stripe in your Flutter app, use the &lt;code&gt;Stripe&lt;/code&gt; base class.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Stripe&lt;/code&gt; offers &lt;code&gt;publishableKey&lt;/code&gt;, &lt;code&gt;stripeAccountId&lt;/code&gt;, &lt;code&gt;threeDSecureParams&lt;/code&gt; and &lt;code&gt;merchantIdentifier&lt;/code&gt;. Only &lt;code&gt;publishableKey&lt;/code&gt; is required.&lt;/p&gt; &#xA;&lt;h2&gt;Dart API&lt;/h2&gt; &#xA;&lt;p&gt;The library offers several methods to handle stripe related actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;PaymentMethod&amp;gt; createPaymentMethod(...);&#xA;Future&amp;lt;PaymentIntent&amp;gt; handleNextAction(...);&#xA;Future&amp;lt;PaymentIntent&amp;gt; confirmPayment(...);&#xA;Future&amp;lt;void&amp;gt; configure3dSecure(...);&#xA;Future&amp;lt;bool&amp;gt; isApplePaySupported();&#xA;Future&amp;lt;void&amp;gt; presentApplePay(...);&#xA;Future&amp;lt;void&amp;gt; confirmApplePayPayment(...);&#xA;Future&amp;lt;SetupIntent&amp;gt; confirmSetupIntent(...);&#xA;Future&amp;lt;PaymentIntent&amp;gt; retrievePaymentIntent(...);&#xA;Future&amp;lt;String&amp;gt; createTokenForCVCUpdate(...);&#xA;&#xA;Future&amp;lt;void&amp;gt; initPaymentSheet(...);&#xA;Future&amp;lt;void&amp;gt; presentPaymentSheet(...);&#xA;Future&amp;lt;void&amp;gt; confirmPaymentSheetPayment()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example app offers examples on how to use these methods.&lt;/p&gt; &#xA;&lt;h2&gt;Pay Plugin support&lt;/h2&gt; &#xA;&lt;p&gt;flutter_stripe fully supports the &lt;a href=&#34;https://pub.dev/packages/pay&#34;&gt;Pay plugin&lt;/a&gt; from the Google Pay team. By including a few lines you can integrate Stripe as a payment processor for Google / Apple Pay:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; onGooglePayResult(paymentResult) async {&#xA;    final response = await fetchPaymentIntentClientSecret();&#xA;    final clientSecret = response[&#39;clientSecret&#39;];&#xA;    final token = paymentResult[&#39;paymentMethodData&#39;][&#39;tokenizationData&#39;][&#39;token&#39;];&#xA;    final tokenJson = Map.castFrom(json.decode(token));&#xA;&#xA;    final params = PaymentMethodParams.cardFromToken(&#xA;      token: tokenJson[&#39;id&#39;],&#xA;    );&#xA;    // Confirm Google pay payment method&#xA;    await Stripe.instance.confirmPayment(&#xA;      clientSecret,&#xA;      params,&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the example app&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to the example folder &lt;code&gt;cd example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;flutter pub get&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set up env vars for the flutter app and a local backend. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/keys&#34;&gt;Get your test Stripe API keys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cp lib/.env.example.dart lib/.env.dart&lt;/code&gt; and set your Stripe publishable key.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cp server/.env.example server/.env&lt;/code&gt; and set the variable values in your newly created &lt;code&gt;.env&lt;/code&gt; file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the server dependencies: &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn --cwd &#34;server&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start the example &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Terminal 1: &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;yarn --cwd &#34;server&#34; start&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Terminal 2: &lt;code&gt;flutter run&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Additional steps for webhook forwarding&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/stripe-cli&#34;&gt;Install the &lt;code&gt;stripe-cli&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stripe listen --forward-to localhost:4242/webhook&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can help us make this project better, feel free to open an new issue or a pull request.&lt;/p&gt; &#xA;&lt;h5&gt;Setup&lt;/h5&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/invertase/melos&#34;&gt;melos&lt;/a&gt; to manage all the packages inside this repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install melos: &lt;code&gt;dart pub global activate melos&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setup melos in your local folder: &lt;code&gt;melos bootstrap&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Useful commands&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format &lt;code&gt;melos run format&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analyze &lt;code&gt;melos run analyze&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test &lt;code&gt;melos run unittest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pub get &lt;code&gt;melos run get&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Publishing&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;melos version&lt;/code&gt; and &lt;code&gt;melos publish&lt;/code&gt; to keep all the repositories in sync&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>