<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:52:50Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AradhyaNepal/multiplayer_tictactoe</title>
    <updated>2023-08-27T01:52:50Z</updated>
    <id>tag:github.com,2023-08-27:/AradhyaNepal/multiplayer_tictactoe</id>
    <link href="https://github.com/AradhyaNepal/multiplayer_tictactoe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Credit:&lt;/h2&gt; &#xA;&lt;p&gt;First I want to thank &lt;a href=&#34;https://github.com/qubeena07/MyWidgets/raw/main/lib/screens/tic_tac_toe_screen.dart&#34;&gt;OriginalRepo&lt;/a&gt;, from which I got the TicTacToe game code. The original game was single-user TicTacToe, from which I was inspired to make multi-user TicTacToe. The above repo contains many other exciting codings, so make sure to watch the repo, follow &lt;a href=&#34;https://github.com/qubeena07/&#34;&gt;qubeena07&lt;/a&gt;, and give the repo a star.&lt;/p&gt; &#xA;&lt;h1&gt;Multiplayer TicTacToe&lt;/h1&gt; &#xA;&lt;p&gt;Flutter + Local Websocket + ‚ù§Ô∏è = Multiplayer TicTacToe Game for Android and Windows&lt;/p&gt; &#xA;&lt;p&gt;Unlike HTTP, Websocket allows developers to set up 2-way real-time data communication tunnel. Real-time means, whenever user 1 performs some action, user 2 gets notified, which is not possible in HTTP, except if you keep hitting the Get API every 1 second to refresh the latest data, which is very inefficient since it wastes lots of resources.&lt;/p&gt; &#xA;&lt;p&gt;In this application, the host device runs ServerSocket on its IP address and on a specific port, and shares that with a QR. The client device needs to be connected to the same internet and needs to scan the QR to connect to the provided Server. And then you can start playing the gameüòä.&lt;/p&gt; &#xA;&lt;p&gt;Not only that, while playing the game, to ensure that the data don&#39;t get lost in the middle, my application uses the Handshake mechanism (Handshake might not be its actual technical term), where one device sends the request to another and another device sends back a confirmation that it received the request.&lt;/p&gt; &#xA;&lt;p&gt;So make sure to run the APK and review the code, and give me some feedback üòä.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: Both devices must be connected to the same WIFI, else the client cannot connect to the server while scanning the QR.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;APK: &lt;a href=&#34;https://drive.google.com/drive/u/0/folders/1j2jfecUFIdPj8l5yBlbCEIjkxHZEPqk6&#34;&gt;Touch Me!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LinkedIn Demonstration: &lt;a href=&#34;https://www.linkedin.com/posts/aaradhya-nepal-95006b247_flutter-flutterdeveloper-fluttercommunity-activity-7097454259369123840-_vAt?utm_source=share&amp;amp;utm_medium=member_desktop&#34;&gt;Touch Me!&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SwaroopSambhayya/Food-UI-Transition</title>
    <updated>2023-08-27T01:52:50Z</updated>
    <id>tag:github.com,2023-08-27:/SwaroopSambhayya/Food-UI-Transition</id>
    <link href="https://github.com/SwaroopSambhayya/Food-UI-Transition" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A good demonstration of power of flutter animation with transition&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;food_ui_transition&lt;/h1&gt; &#xA;&lt;p&gt;A Cook qwest UI with very awesome animations and transitions buit in Flutter. &lt;img src=&#34;https://github.com/SwaroopSambhayya/Food-UI-Transition/assets/31922733/203f1684-d6bd-481a-b890-af16c5a5b5e1&#34; alt=&#34;Screenshot 2023-08-14 at 9 53 08 PM&#34;&gt; &lt;img src=&#34;https://github.com/SwaroopSambhayya/Food-UI-Transition/assets/31922733/6a25d3d1-e462-462f-957a-ab57e5f30959&#34; alt=&#34;Screenshot 2023-08-14 at 9 52 56 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SwaroopSambhayya/Food-UI-Transition/assets/31922733/72d0781d-3d21-4265-ae4f-cfa5783e915d&#34;&gt;https://github.com/SwaroopSambhayya/Food-UI-Transition/assets/31922733/72d0781d-3d21-4265-ae4f-cfa5783e915d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project is a starting point for a Flutter application.&lt;/p&gt; &#xA;&lt;p&gt;A few resources to get you started if this is your first Flutter project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/get-started/codelab&#34;&gt;Lab: Write your first Flutter app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/cookbook&#34;&gt;Cookbook: Useful Flutter samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For help getting started with Flutter development, view the &lt;a href=&#34;https://docs.flutter.dev/&#34;&gt;online documentation&lt;/a&gt;, which offers tutorials, samples, guidance on mobile development, and a full API reference.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leancodepl/patrol</title>
    <updated>2023-08-27T01:52:50Z</updated>
    <id>tag:github.com,2023-08-27:/leancodepl/patrol</id>
    <link href="https://github.com/leancodepl/patrol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter-first UI testing framework. Ready for action!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Patrol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/patrol&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/patrol?label=patrol&#34; alt=&#34;patrol on pub.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/patrol_finders&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/patrol_finders?label=patrol_finders&#34; alt=&#34;patrol_finders on pub.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/patrol_cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/patrol_cli?label=patrol_cli&#34; alt=&#34;patrol_cli on pub.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/leancode_lint&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-leancode__lint-black&#34; alt=&#34;code style&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.page&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-docs.page-34C4AC.svg?style&#34; alt=&#34;powered by&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leancodepl/patrol/master/docs/assets/promo.png&#34; alt=&#34;Patrol promotial graphics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple yet powerful Flutter-first UI testing framework overcoming limitations of &lt;code&gt;flutter_test&lt;/code&gt;, &lt;code&gt;integration_test&lt;/code&gt;, and &lt;code&gt;flutter_driver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about Patrol:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patrol.leancode.co&#34;&gt;Our extensive documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leancode.co/blog/patrol-2-0-improved-flutter-ui-testing&#34;&gt;The article about the test bundling feature in Patrol 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leancode.co/blog/patrol-1-0-powerful-flutter-ui-testing-framework&#34;&gt;The first stable 1.0 release article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leancode.co/blog/patrol-flutter-first-ui-testing-framework&#34;&gt;The article about the first public release&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Patrol custom finders&lt;/h2&gt; &#xA;&lt;p&gt;Flutter&#39;s finders are powerful, but not very intuitive to use.&lt;/p&gt; &#xA;&lt;p&gt;We took them and made something awesome.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Patrol&#39;s custom finders, you&#39;ll take your tests from this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;testWidgets(&#39;signs up&#39;, (WidgetTester tester) async {&#xA;  await tester.pumpWidget(AwesomeApp());&#xA;  await tester.pumpAndSettle();&#xA;&#xA;  await tester.enterText(&#xA;    find.byKey(Key(&#39;emailTextField&#39;)),&#xA;    &#39;charlie@root.me&#39;,&#xA;  );&#xA;  await tester.pumpAndSettle();&#xA;&#xA;  await tester.enterText(&#xA;    find.byKey(Key(&#39;nameTextField&#39;)),&#xA;    &#39;Charlie&#39;,&#xA;  );&#xA;  await tester.pumpAndSettle();&#xA;&#xA;  await tester.enterText(&#xA;    find.byKey(Key(&#39;passwordTextField&#39;)),&#xA;    &#39;ny4ncat&#39;,&#xA;  );&#xA;  await tester.pumpAndSettle();&#xA;&#xA;  await tester.tap(find.byKey(Key(&#39;termsCheckbox&#39;)));&#xA;  await tester.pumpAndSettle();&#xA;&#xA;  await tester.tap(find.byKey(Key(&#39;signUpButton&#39;)));&#xA;  await tester.pumpAndSettle();&#xA;&#xA;  expect(find.text(&#39;Welcome, Charlie!&#39;), findsOneWidget);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;patrolTest(&#39;signs up&#39;, (PatrolTester $) async {&#xA;  await $.pumpWidgetAndSettle(AwesomeApp());&#xA;&#xA;  await $(#emailTextField).enterText(&#39;charlie@root.me&#39;);&#xA;  await $(#nameTextField).enterText(&#39;Charlie&#39;);&#xA;  await $(#passwordTextField).enterText(&#39;ny4ncat&#39;);&#xA;  await $(#termsCheckbox).tap();&#xA;  await $(#signUpButton).tap();&#xA;&#xA;  await $(&#39;Welcome, Charlie!&#39;).waitUntilVisible();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://patrol.leancode.co/finders/overview&#34;&gt;Learn more about custom finders in the docs&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Patrol&#39;s custom finders are also available standalone in &lt;a href=&#34;https://pub.dev/packages/patrol_finders&#34;&gt;the patrol_finders package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Patrol native automation&lt;/h2&gt; &#xA;&lt;p&gt;Flutter&#39;s default &lt;a href=&#34;https://github.com/flutter/flutter/tree/master/packages/integration_test&#34;&gt;integration_test&lt;/a&gt; package can&#39;t interact with the OS your Flutter app is running on. This makes it impossible to test many critical business features, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;granting runtime permissions&lt;/li&gt; &#xA; &lt;li&gt;signing into the app which through WebView or Google Services&lt;/li&gt; &#xA; &lt;li&gt;tapping on notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patrol.leancode.co/native/feature-parity&#34;&gt;much more!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Patrol&#39;s native automation feature solves these problems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  patrolTest(&#39;showtime&#39;, nativeAutomation: true, (PatrolTester $) async {&#xA;    await $.pumpWidgetAndSettle(AwesomeApp());&#xA;    // prepare network conditions&#xA;    await $.native.enableCellular();&#xA;    await $.native.disableWifi();&#xA;&#xA;    // toggle system theme&#xA;    await $.native.enableDarkMode();&#xA;&#xA;    // handle native location permission request dialog&#xA;    await $.native.selectFineLocation();&#xA;    await $.native.grantPermissionWhenInUse();&#xA;&#xA;    // tap on the first notification&#xA;    await $.native.openNotifications();&#xA;    await $.native.tapOnNotificationByIndex(0);&#xA;  });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/leancodepl/patrol/tree/master/packages/patrol_cli&#34;&gt;packages/patrol_cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The CLI is needed to enable Patrol&#39;s native automation feature in integration tests. It also makes development of integration tests much faster thanks to &lt;a href=&#34;https://patrol.leancode.co/cli-commands/develop&#34;&gt;Hot Restart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run widget tests, you can continue to use &lt;code&gt;flutter test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Package&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/leancodepl/patrol/tree/master/packages/patrol&#34;&gt;packages/patrol&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>