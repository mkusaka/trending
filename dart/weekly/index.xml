<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:54:15Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>imaNNeo/fl_chart</title>
    <updated>2023-03-19T01:54:15Z</updated>
    <id>tag:github.com,2023-03-19:/imaNNeo/fl_chart</id>
    <link href="https://github.com/imaNNeo/fl_chart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FL Chart is a highly customizable Flutter chart library that supports Line Chart, Bar Chart, Pie Chart, Scatter Chart, and Radar Chart.&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;This is a temporary and a &lt;strong&gt;very important&lt;/strong&gt; message:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/tmp_iran_banner.png&#34; alt=&#34;Iran needs help&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;(&lt;a href=&#34;https://twitter.com/search?q=%23MahsaAmini&amp;amp;src=typeahead_click&#34;&gt;#MahsaAmini&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/search?q=%23IranRevoIution&amp;amp;src=typeahead_click&#34;&gt;IranRevoIution&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/search?q=%23%D9%85%D9%87%D8%B3%D8%A7_%D8%A7%D9%85%DB%8C%D9%86%DB%8C&amp;amp;src=typeahead_click&amp;amp;f=top&#34;&gt;مهسا_امینی&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;💥 FL Chart is a highly customizable Flutter chart library that supports Line Chart, Bar Chart, Pie Chart, Scatter Chart, and Radar Chart. 💥&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/fl_chart&#34;&gt;&lt;img src=&#34;https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&amp;amp;emoji=&amp;amp;slug=fl_chart&amp;amp;button_colour=5F7FFF&amp;amp;font_colour=ffffff&amp;amp;font_family=Cookie&amp;amp;outline_colour=000000&amp;amp;coffee_colour=FFDD00&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/fl_chart&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/fl_chart.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/imaNNeo/fl_chart&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/imaNNeo/fl_chart/branch/master/graph/badge.svg?token=XBhsIZBbZG&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter#charts&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/awesome-flutter-blue.svg?longCache=true&#34; alt=&#34;Awesome Flutter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/fl_chart&#34;&gt;&lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/imaNNeo/fl_chart&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/graphs/contributors&#34;&gt;&lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/imaNNeo/fl_chart&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed-raw/imaNNeo/fl_chart&#34; alt=&#34;GitHub closed issues&#34;&gt;&lt;/a&gt; &lt;span class=&#34;badge-buymeacoffee&#34;&gt; &lt;a href=&#34;https://www.buymeacoffee.com/fl_chart&#34; title=&#34;Donate to this project using Buy Me A Coffee&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg?sanitize=true&#34; alt=&#34;Buy Me A Coffee donate button&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/landing_logo.jpg&#34; alt=&#34;FL Chart Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chart Types&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;LineChart&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BarChart&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;PieChart&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/line_chart.md#sample-1-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/line_chart/line_chart_sample_1.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/line_chart.md#sample-2-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/line_chart/line_chart_sample_2.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/bar_chart.md#sample-1-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/bar_chart/bar_chart_sample_1.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/bar_chart.md#sample-2-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/bar_chart/bar_chart_sample_2.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/pie_chart.md#sample-1-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/pie_chart/pie_chart_sample_1.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/pie_chart.md#sample-2-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/pie_chart/pie_chart_sample_2.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/line_chart.md&#34;&gt;Read More&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/bar_chart.md&#34;&gt;Read More&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/pie_chart.md&#34;&gt;Read More&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ScatterChart&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;RadarChart&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coming Soon&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/scatter_chart.md#sample-1-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/scatter_chart/scatter_chart_sample_1.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/scatter_chart.md#sample-2-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/scatter_chart/scatter_chart_sample_2.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/radar_chart/radar_chart_sample_1.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/blank.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/blank.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/blank.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/scatter_chart.md&#34;&gt;Read More&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/radar_chart.md&#34;&gt;Read More&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Banner designed by &lt;a href=&#34;https://www.linkedin.com/in/soheilsaffar&#34;&gt;Soheil Saffar&lt;/a&gt;, and samples inspired from &lt;a href=&#34;https://dribbble.com/shots/5560237-Live-Graphs-XD&#34;&gt;David Kovalev&lt;/a&gt;, &lt;a href=&#34;https://dribbble.com/shots/1956890-Data-Stats&#34;&gt;Ricardo Salazar&lt;/a&gt;, &lt;a href=&#34;https://dribbble.com/shots/5425378-Mobile-Application-Dashboard-for-Stock-Platform&#34;&gt;Dmitro Petrenko&lt;/a&gt;, &lt;a href=&#34;https://dribbble.com/shots/6379476-Calories-Management-App&#34;&gt;Ghani Pradita&lt;/a&gt;, &lt;a href=&#34;https://www.uplabs.com/posts/chart-pie-chart-bar-chart&#34;&gt;MONUiXD&lt;/a&gt;. Thank you all!&lt;/p&gt; &#xA;&lt;h1&gt;Let&#39;s get started&lt;/h1&gt; &#xA;&lt;p&gt;First of all you need to add the &lt;code&gt;fl_chart&lt;/code&gt; in your project. In order to do that, follow &lt;a href=&#34;https://pub.dev/packages/fl_chart/install&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then you need to read the docs. Start from &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/index.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We suggest you to check samples source code.&lt;/p&gt; &#xA;&lt;h5&gt;- You can read about the animation handling &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/handle_animations.md&#34;&gt;here&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Sample1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Sample2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Sample3&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/line_chart.md#sample-1-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/line_chart/line_chart_sample_1_anim.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/line_chart.md#sample-2-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/line_chart/line_chart_sample_2_anim.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/documentations/bar_chart.md#sample-1-source-code&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/bar_chart/bar_chart_sample_1_anim.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Donation&lt;/h3&gt; &#xA;&lt;p&gt;Your donation &lt;strong&gt;motivates&lt;/strong&gt; me to work more on the &lt;strong&gt;fl_chart&lt;/strong&gt; and resolve more issues. You can &lt;a href=&#34;https://www.buymeacoffee.com/fl_chart&#34;&gt;buy me a coffee!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/fl_chart&#34;&gt;&lt;img src=&#34;https://github.com/imaNNeo/fl_chart/raw/master/repo_files/images/buy_me_a_coffee.jpeg&#34; width=&#34;360&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or if you are a fan of crypto, you can donate me Bitcoins here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;1L7ghKdcmgydmUJAnmYmMaiVjT1LoP4a45&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;h5&gt;&lt;span&gt;🍺&lt;/span&gt; Pull requests are welcome!&lt;/h5&gt; &#xA;&lt;p&gt;Don&#39;t forget that &lt;code&gt;open-source&lt;/code&gt; makes no sense without contributors. No matter how big your changes are, it helps us a lot even it is a line of change.&lt;/p&gt; &#xA;&lt;p&gt;There might be a lot of grammar issues in the docs. It&#39;s a big help to us to fix them if you are fluent in English.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/imaNNeo/fl_chart/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, which contains a guide for those who want to contribute to the FL Chart.&lt;/p&gt; &#xA;&lt;p&gt;Reporting bugs and issues are contribution too, yes it is.&lt;/p&gt; &#xA;&lt;h4&gt;Below are the people who has contributed to the FL Chart. We hope we have your picture here soon.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/imaNNeo/fl_chart/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/fl_chart/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>redevRx/Flutter-ChatGPT</title>
    <updated>2023-03-19T01:54:15Z</updated>
    <id>tag:github.com,2023-03-19:/redevRx/Flutter-ChatGPT</id>
    <link href="https://github.com/redevRx/Flutter-ChatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ChatGPT Application with flutter&lt;/h2&gt; &#xA;&lt;p&gt;ChatGPT is a chatbot launched by OpenAI in November 2022. It is built on top of OpenAI&#39;s GPT-3.5 family of large language models, and is fine-tuned with both supervised and reinforcement learning techniques.&lt;/p&gt; &#xA;&lt;h2&gt;Install Package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;chat_gpt: 2.0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Create ChatGPT Instance&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Token &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Your secret API keys are listed below. Please note that we do not display your secret API keys again after you generate them.&lt;/li&gt; &#xA;     &lt;li&gt;Do not share your API key with others, or expose it in the browser or other client-side code. In order to protect the security of your account, OpenAI may also automatically rotate any API key that we&#39;ve found has leaked publicly.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;https://beta.openai.com/account/api-keys&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OrgId &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Identifier for this organization sometimes used in API requests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/account/org-settings&#34;&gt;https://beta.openai.com/account/org-settings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final openAI = OpenAI.instance.build(token: token,baseOption: HttpSetup(receiveTimeout: const Duration(seconds: 5)),isLogger: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text Complete API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Translate Method &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;translateEngToThai&lt;/li&gt; &#xA;     &lt;li&gt;translateThaiToEng&lt;/li&gt; &#xA;     &lt;li&gt;translateToJapanese&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;kTranslateModelV3&lt;/li&gt; &#xA;     &lt;li&gt;kTranslateModelV2&lt;/li&gt; &#xA;     &lt;li&gt;kCodeTranslateModelV2 &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Translate natural language to SQL queries.&lt;/li&gt; &#xA;       &lt;li&gt;Create code to call the Stripe API using natural language.&lt;/li&gt; &#xA;       &lt;li&gt;Find the time complexity of a function.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;https://beta.openai.com/examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final request = CompleteText(prompt: translateEngToThai(word: &#39;&#39;),&#xA;                model: kTranslateModelV3, maxTokens: 200);&#xA;&#xA; openAI.onCompletionStream(request:request).listen((response) =&amp;gt; print(response))&#xA;        .onError((err) {&#xA;          print(&#34;$err&#34;);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete with StreamBuilder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final tController = StreamController&amp;lt;CTResponse?&amp;gt;.broadcast();&#xA;&#xA;openAI&#xA;        .onCompletionStream(request: request)&#xA;.asBroadcastStream()&#xA;        .listen((res) {&#xA;tController.sink.add(res);&#xA;});&#xA;&#xA;///ui code&#xA;StreamBuilder&amp;lt;CTResponse?&amp;gt;(&#xA; stream: tController.stream,&#xA; builder: (context, snapshot) {&#xA;   final data = snapshot.data;&#xA;   if(snapshot.connectionState == ConnectionState.done) return something &#xA;   if(snapshot.connectionState == ConnectionState.waiting) return something&#xA;   return something&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete with Feature&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void _translateEngToThai() async{&#xA;  final request = CompleteText(&#xA;          prompt: translateEngToThai(word: _txtWord.text.toString()),&#xA;          max_tokens: 200,&#xA;          model: kTranslateModelV3);&#xA;&#xA;  final response = await openAI.onCompletion(request: request);&#xA;  print(response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example Q&amp;amp;A &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Answer questions based on existing knowledge.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final request = CompleteText(prompt:&#39;What is human life expectancy in the United States?&#39;),&#xA;                model: kTranslateModelV3, maxTokens: 200);&#xA;&#xA; openAI.onCompletionStream(request:request).listen((response) =&amp;gt; print(response))&#xA;        .onError((err) {&#xA;           print(&#34;$err&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Q: What is human life expectancy in the United States?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;A: Human life expectancy in the United States is 78 years.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support ChatGPT 3.5 Turbo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void _chatGpt3Example() async {&#xA;  final request = ChatCompleteText(messages: [&#xA;    Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;  ], maxToken: 200, model: kChatGptTurbo0301Model);&#xA;&#xA;  final response = await openAI.onChatCompletion(request: request);&#xA;  for (var element in response!.choices) {&#xA;    print(&#34;data -&amp;gt; ${element.message.content}&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate Image &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;prompt &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;A text description of the desired image(s). The maximum length is 1000 characters.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;n &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The number of images to generate. Must be between 1 and 10.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;size &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;response_format &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The format in which the generated images are returned. Must be one of url or b64_json.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;user &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate with stream&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  openAI = OpenAI&#xA;        .instance&#xA;        .builder(toekn:&#34;token&#34;,&#xA;         baseOption: HttpSetup(receiveTimeout: const Duration(seconds: 5)),isLogger:true);&#xA;&#xA;const prompt = &#34;Snake Red&#34;;&#xA;&#xA;final request = GenerateImage(prompt,2);&#xA;&#xA;               openAI.generateImageStream(request)&#xA;              .asBroadcastStream()&#xA;              .listen((it) {&#xA;                print(it.data?.last?.url)&#xA;              });&#xA;&#xA;/// cancel stream controller&#xA;openAI.genImgClose();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate with feature&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void _generateImage() {&#xA;  const prompt = &#34;cat eating snake blue red.&#34;;&#xA;&#xA;  final request = GenerateImage(prompt, 1,size: ImageSize.size256,&#xA;          response_format: Format.url);;&#xA;  final response = openAI.generateImage(request);&#xA;  print(&#34;img url :${response.data?.last?.url}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Model List &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List and describe the various models available in the API. You can refer to the Models documentation to understand what models are available and the differences between them.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/api-reference/models&#34;&gt;https://beta.openai.com/docs/api-reference/models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final models = await openAI.listModel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Engine List &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/api-reference/engines&#34;&gt;https://beta.openai.com/docs/api-reference/engines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final engines = await openAI.listEngine();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flutter Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class TranslateScreen extends StatefulWidget {&#xA;  const TranslateScreen({Key? key}) : super(key: key);&#xA;  @override&#xA;  State&amp;lt;TranslateScreen&amp;gt; createState() =&amp;gt; _TranslateScreenState();&#xA;}&#xA;&#xA;class _TranslateScreenState extends State&amp;lt;TranslateScreen&amp;gt; {&#xA;  /// text controller&#xA;  final _txtWord = TextEditingController();&#xA;&#xA;  late OpenAI openAI;&#xA;&#xA;  ///t =&amp;gt; translate&#xA;  final tController = StreamController&amp;lt;CTResponse?&amp;gt;.broadcast();&#xA;&#xA;  void _translateEngToThai() async {&#xA;    final request = CompleteText(&#xA;            prompt: translateEngToThai(word: _txtWord.text.toString()),&#xA;            maxTokens: 200,&#xA;            model: kTextDavinci3);&#xA;&#xA;    openAI.onCompletionStream(request: request).asBroadcastStream().listen((res) {&#xA;      tController.sink.add(res);&#xA;    }).onError((err) {&#xA;      print(&#34;$err&#34;);&#xA;    });&#xA;  }&#xA;&#xA;  ///ID of the model to use. Currently, only and are supported&#xA;  ///[kChatGptTurboModel]&#xA;  ///[kChatGptTurbo0301Model]&#xA;  void _chatGpt3Example() async {&#xA;    final request = ChatCompleteText(messages: [&#xA;      Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;    ], maxToken: 200, model: kChatGptTurbo0301Model);&#xA;&#xA;    final response = await openAI.onChatCompletion(request: request);&#xA;    for (var element in response!.choices) {&#xA;      print(&#34;data -&amp;gt; ${element.message.content}&#34;);&#xA;    }&#xA;  }&#xA;&#xA;  void _chatGpt3ExampleStream() async {&#xA;    final request = ChatCompleteText(messages: [&#xA;      Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;    ], maxToken: 200, model: kChatGptTurbo0301Model);&#xA;&#xA;    openAI.onChatCompletionStream(request: request).listen((it) {&#xA;      debugPrint(&#34;${it?.choices.last.message}&#34;);&#xA;    }).onError((err) {&#xA;      print(err);&#xA;    });&#xA;  }&#xA;&#xA;  void modelDataList() async {&#xA;    final model = await OpenAI.instance.build(token: &#34;&#34;).listModel();&#xA;  }&#xA;&#xA;  void engineList() async {&#xA;    final engines = await OpenAI.instance.build(token: &#34;&#34;).listEngine();&#xA;  }&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    openAI = OpenAI.instance.build(&#xA;            token: token,&#xA;            baseOption: HttpSetup(&#xA;                    receiveTimeout: const Duration(seconds: 5),&#xA;                    connectTimeout: const Duration(seconds: 5)),&#xA;            isLogger: true);&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    ///close stream complete text&#xA;    openAI.close();&#xA;    tController.close();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    var size = MediaQuery.of(context).size;&#xA;    return Scaffold(&#xA;      backgroundColor: Colors.white,&#xA;      body: SingleChildScrollView(&#xA;        child: Center(&#xA;          child: Padding(&#xA;            padding: const EdgeInsets.symmetric(vertical: 16.0),&#xA;            child: Column(&#xA;              crossAxisAlignment: CrossAxisAlignment.center,&#xA;              children: [&#xA;                /**&#xA;                 * title translate&#xA;                 */&#xA;                _titleCard(size),&#xA;                /**&#xA;                 * input card&#xA;                 * insert your text for translate to th.com&#xA;                 */&#xA;                _inputCard(size),&#xA;&#xA;                /**&#xA;                 * card input translate&#xA;                 */&#xA;                _resultCard(size),&#xA;                /**&#xA;                 * button translate&#xA;                 */&#xA;                _btnTranslate()&#xA;              ],&#xA;            ),&#xA;          ),&#xA;        ),&#xA;      ),&#xA;      bottomNavigationBar: _navigation(size),&#xA;    );&#xA;  }&#xA;&#xA;  Widget _btnTranslate() {&#xA;    return Row(&#xA;      mainAxisAlignment: MainAxisAlignment.end,&#xA;      children: [&#xA;        Padding(&#xA;                padding: const EdgeInsets.only(right: 16.0),&#xA;                child: MaterialButtonX(&#xA;                        message: &#34;Translate&#34;,&#xA;                        height: 40.0,&#xA;                        width: 130.0,&#xA;                        color: Colors.blueAccent,&#xA;                        icon: Icons.translate,&#xA;                        iconSize: 18.0,&#xA;                        radius: 46.0,&#xA;                        onClick: () =&amp;gt;_translateEngToThai())),&#xA;      ],&#xA;    );&#xA;  }&#xA;&#xA;  Widget _resultCard(Size size) {&#xA;    return StreamBuilder&amp;lt;CTResponse?&amp;gt;(&#xA;      stream: tController.stream,&#xA;      builder: (context, snapshot) {&#xA;        final text = snapshot.data?.choices.last.text ?? &#34;Loading...&#34;;&#xA;        return Container(&#xA;          margin: const EdgeInsets.symmetric(vertical: 32.0),&#xA;          padding: const EdgeInsets.symmetric(horizontal: 16.0),&#xA;          alignment: Alignment.bottomCenter,&#xA;          width: size.width * .86,&#xA;          height: size.height * .3,&#xA;          decoration: heroCard,&#xA;          child: SingleChildScrollView(&#xA;            child: Column(&#xA;              children: [&#xA;                Text(&#xA;                  text,&#xA;                  style: const TextStyle(color: Colors.black, fontSize: 18.0),&#xA;                ),&#xA;                SizedBox(&#xA;                  width: size.width,&#xA;                  child: const Divider(&#xA;                    color: Colors.grey,&#xA;                    thickness: 1,&#xA;                  ),&#xA;                ),&#xA;                Padding(&#xA;                  padding: const EdgeInsets.all(12.0),&#xA;                  child: Row(&#xA;                    mainAxisAlignment: MainAxisAlignment.end,&#xA;                    children: const [&#xA;                      Icon(&#xA;                        Icons.copy_outlined,&#xA;                        color: Colors.grey,&#xA;                        size: 22.0,&#xA;                      ),&#xA;                      Padding(&#xA;                        padding: EdgeInsets.symmetric(horizontal: 8.0),&#xA;                        child: Icon(&#xA;                          Icons.delete_forever,&#xA;                          color: Colors.grey,&#xA;                          size: 22.0,&#xA;                        ),&#xA;                      )&#xA;                    ],&#xA;                  ),&#xA;                )&#xA;              ],&#xA;            ),&#xA;          ),&#xA;        );&#xA;      },&#xA;    );&#xA;  }&#xA;&#xA;  Padding _navigation(Size size) {&#xA;    return Padding(&#xA;      padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 18.0),&#xA;      child: Container(&#xA;        width: size.width * .8,&#xA;        height: size.height * .06,&#xA;        decoration: heroNav,&#xA;        child: Row(&#xA;          mainAxisAlignment: MainAxisAlignment.spaceAround,&#xA;          children: [&#xA;            Container(&#xA;              padding: const EdgeInsets.all(4.0),&#xA;              decoration: BoxDecoration(&#xA;                      color: Colors.indigoAccent,&#xA;                      borderRadius: BorderRadius.circular(50.0)),&#xA;              child: const Icon(&#xA;                Icons.translate,&#xA;                color: Colors.white,&#xA;                size: 22.0,&#xA;              ),&#xA;            ),&#xA;            const Icon(&#xA;              Icons.record_voice_over_outlined,&#xA;              color: Colors.indigoAccent,&#xA;              size: 22.0,&#xA;            ),&#xA;            const Icon(&#xA;              Icons.favorite,&#xA;              color: Colors.indigoAccent,&#xA;              size: 22.0,&#xA;            ),&#xA;            const Icon(&#xA;              Icons.person,&#xA;              color: Colors.indigoAccent,&#xA;              size: 22.0,&#xA;            )&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  Widget _titleCard(Size size) {&#xA;    return Container(&#xA;      margin: const EdgeInsets.symmetric(vertical: 32.0),&#xA;      width: size.width * .86,&#xA;      height: size.height * .08,&#xA;      decoration: heroCard,&#xA;      child: Row(&#xA;        mainAxisAlignment: MainAxisAlignment.spaceAround,&#xA;        children: [&#xA;          Row(&#xA;            children: [&#xA;              ClipRRect(&#xA;                borderRadius: BorderRadius.circular(30),&#xA;                child: Image.network(&#xA;                  &#34;https://www.clipartmax.com/png/middle/200-2009207_francais-english-italiano-english-flag-icon-flat.png&#34;,&#xA;                  fit: BoxFit.cover,&#xA;                  width: 30.0,&#xA;                  height: 30.0,&#xA;                ),&#xA;              ),&#xA;              const Padding(&#xA;                padding: EdgeInsets.symmetric(horizontal: 4.0),&#xA;                child: Text(&#xA;                  &#34;Eng&#34;,&#xA;                  style: TextStyle(color: Colors.grey, fontSize: 12.0),&#xA;                ),&#xA;              ),&#xA;              Transform.rotate(&#xA;                angle: -pi / 2,&#xA;                child: const Icon(&#xA;                  Icons.arrow_back_ios_new,&#xA;                  size: 16.0,&#xA;                  color: Colors.grey,&#xA;                ),&#xA;              )&#xA;            ],&#xA;          ),&#xA;          const Padding(&#xA;            padding: EdgeInsets.symmetric(horizontal: 12.0),&#xA;            child: Icon(&#xA;              Icons.swap_horiz_outlined,&#xA;              color: Colors.grey,&#xA;              size: 22.0,&#xA;            ),&#xA;          ),&#xA;          Row(&#xA;            children: [&#xA;              ClipRRect(&#xA;                borderRadius: BorderRadius.circular(30),&#xA;                child: Image.network(&#xA;                  &#34;https://cdn-icons-png.flaticon.com/512/197/197452.png&#34;,&#xA;                  fit: BoxFit.cover,&#xA;                  width: 30.0,&#xA;                  height: 30.0,&#xA;                ),&#xA;              ),&#xA;              const Padding(&#xA;                padding: EdgeInsets.symmetric(horizontal: 4.0),&#xA;                child: Text(&#xA;                  &#34;Thai&#34;,&#xA;                  style: TextStyle(color: Colors.grey, fontSize: 12.0),&#xA;                ),&#xA;              ),&#xA;              Transform.rotate(&#xA;                angle: -pi / 2,&#xA;                child: const Icon(&#xA;                  Icons.arrow_back_ios_new,&#xA;                  size: 16.0,&#xA;                  color: Colors.grey,&#xA;                ),&#xA;              )&#xA;            ],&#xA;          )&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  Widget _inputCard(Size size) {&#xA;    return Container(&#xA;      padding: const EdgeInsets.symmetric(horizontal: 16.0),&#xA;      alignment: Alignment.bottomCenter,&#xA;      width: size.width * .86,&#xA;      height: size.height * .25,&#xA;      decoration: heroCard,&#xA;      child: SingleChildScrollView(&#xA;        child: Column(&#xA;          children: [&#xA;            TextField(&#xA;              decoration: const InputDecoration(&#xA;                      border: InputBorder.none,&#xA;                      enabledBorder: InputBorder.none,&#xA;                      disabledBorder: InputBorder.none),&#xA;              controller: _txtWord,&#xA;              maxLines: 6,&#xA;              textInputAction: TextInputAction.newline,&#xA;              keyboardType: TextInputType.multiline,&#xA;            ),&#xA;            SizedBox(&#xA;              width: size.width,&#xA;              child: const Divider(&#xA;                color: Colors.grey,&#xA;                thickness: 1,&#xA;              ),&#xA;            ),&#xA;            Padding(&#xA;              padding: const EdgeInsets.all(12.0),&#xA;              child: Row(&#xA;                mainAxisAlignment: MainAxisAlignment.end,&#xA;                children: const [&#xA;                  Icon(&#xA;                    Icons.copy_outlined,&#xA;                    color: Colors.grey,&#xA;                    size: 22.0,&#xA;                  ),&#xA;                  Padding(&#xA;                    padding: EdgeInsets.symmetric(horizontal: 8.0),&#xA;                    child: Icon(&#xA;                      Icons.record_voice_over_outlined,&#xA;                      color: Colors.grey,&#xA;                      size: 22.0,&#xA;                    ),&#xA;                  )&#xA;                ],&#xA;              ),&#xA;            )&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://scontent.fkkc3-1.fna.fbcdn.net/v/t39.30808-6/321956306_528473869217638_4959635231571092650_n.jpg?_nc_cat=104&amp;amp;ccb=1-7&amp;amp;_nc_sid=730e14&amp;amp;_nc_ohc=YumrmcfO7jAAX9N9Ygd&amp;amp;tn=aWCijFs0IEeQXzfE&amp;amp;_nc_ht=scontent.fkkc3-1.fna&amp;amp;oh=00_AfCQk9ebz2qnPl2pshugchDnaEXMPe6rogXpdzc3UCfcmg&amp;amp;oe=63EF77E4&#34; width=&#34;350&#34; height=&#34;760&#34;&gt; &#xA;&lt;h3&gt;Video Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qUEUMxGW_0Q&amp;amp;ab_channel=idealBy&#34;&gt;Flutter Chat bot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=z25HfnEi2zQ&amp;amp;t=1s&amp;amp;ab_channel=idealBy&#34;&gt;Flutter Generate Image&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sass/dart-sass</title>
    <updated>2023-03-19T01:54:15Z</updated>
    <id>tag:github.com,2023-03-19:/sass/dart-sass</id>
    <link href="https://github.com/sass/dart-sass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The reference implementation of Sass, written in Dart.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;A &lt;a href=&#34;https://www.dartlang.org&#34;&gt;Dart&lt;/a&gt; implementation of &lt;a href=&#34;https://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;. &lt;strong&gt;Sass makes CSS fun again&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;118px&#34; alt=&#34;Sass logo&#34; src=&#34;https://rawgit.com/sass/sass-site/master/source/assets/img/logos/logo.svg?sanitize=true&#34;&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/sass&#34;&gt;&lt;img width=&#34;100%&#34; alt=&#34;npm statistics&#34; src=&#34;https://nodei.co/npm/sass.png?downloads=true&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/sass&#34;&gt;&lt;img alt=&#34;Pub version&#34; src=&#34;https://img.shields.io/pub/v/sass.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sass/dart-sass/actions&#34;&gt;&lt;img alt=&#34;GitHub actions build status&#34; src=&#34;https://github.com/sass/dart-sass/workflows/CI/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://twitter.com/SassCSS&#34;&gt;&lt;img alt=&#34;@SassCSS on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/SassCSS?label=%40SassCSS&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sass&#34;&gt;&lt;img alt=&#34;stackoverflow&#34; src=&#34;https://img.shields.io/stackexchange/stackoverflow/t/sass?label=Sass%20questions&amp;amp;logo=stackoverflow&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://gitter.im/sass/sass?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img alt=&#34;Gitter&#34; src=&#34;https://img.shields.io/gitter/room/sass/sass?label=chat&amp;amp;logo=gitter&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#using-dart-sass&#34;&gt;Using Dart Sass&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#from-chocolatey-or-scoop-windows&#34;&gt;From Chocolatey or Scoop (Windows)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#from-homebrew-macos&#34;&gt;From Homebrew (macOS)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#standalone&#34;&gt;Standalone&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#from-npm&#34;&gt;From npm&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#legacy-javascript-api&#34;&gt;Legacy JavaScript API&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#from-pub&#34;&gt;From Pub&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#sass_api-package&#34;&gt;&lt;code&gt;sass_api&lt;/code&gt; Package&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#from-source&#34;&gt;From Source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#in-docker&#34;&gt;In Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#why-dart&#34;&gt;Why Dart?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#compatibility-policy&#34;&gt;Compatibility Policy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#browser-compatibility&#34;&gt;Browser Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#nodejs-compatibility&#34;&gt;Node.js Compatibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sass/dart-sass/main/#behavioral-differences-from-ruby-sass&#34;&gt;Behavioral Differences from Ruby Sass&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using Dart Sass&lt;/h2&gt; &#xA;&lt;p&gt;There are a few different ways to install and run Dart Sass, depending on your environment and your needs.&lt;/p&gt; &#xA;&lt;h3&gt;From Chocolatey or Scoop (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://chocolatey.org/&#34;&gt;the Chocolatey package manager&lt;/a&gt; or &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;the Scoop package manager&lt;/a&gt; for Windows, you can install Dart Sass by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;choco install sass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;scoop install sass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll give you a &lt;code&gt;sass&lt;/code&gt; executable on your command line that will run Dart Sass. See &lt;a href=&#34;https://sass-lang.com/documentation/cli/dart-sass&#34;&gt;the CLI docs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;From Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://brew.sh/&#34;&gt;the Homebrew package manager&lt;/a&gt; for macOS, you can install Dart Sass by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install sass/sass/sass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;ll give you a &lt;code&gt;sass&lt;/code&gt; executable on your command line that will run Dart Sass.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone&lt;/h3&gt; &#xA;&lt;p&gt;You can download the standalone Dart Sass archive for your operating system—containing the Dart VM and the snapshot of the executable—from &lt;a href=&#34;https://github.com/sass/dart-sass/releases/&#34;&gt;the GitHub release page&lt;/a&gt;. Extract it, &lt;a href=&#34;https://katiek2.github.io/path-doc/&#34;&gt;add the directory to your path&lt;/a&gt;, restart your terminal, and the &lt;code&gt;sass&lt;/code&gt; executable is ready to run!&lt;/p&gt; &#xA;&lt;h3&gt;From npm&lt;/h3&gt; &#xA;&lt;p&gt;Dart Sass is available, compiled to JavaScript, &lt;a href=&#34;https://www.npmjs.com/package/sass&#34;&gt;as an npm package&lt;/a&gt;. You can install it globally using &lt;code&gt;npm install -g sass&lt;/code&gt; which will provide access to the &lt;code&gt;sass&lt;/code&gt; executable. You can also add it to your project using &lt;code&gt;npm install --save-dev sass&lt;/code&gt;. This provides the executable as well as a library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const sass = require(&#39;sass&#39;);&#xA;&#xA;const result = sass.compile(scssFilename);&#xA;&#xA;// OR&#xA;&#xA;// Note that `compileAsync()` is substantially slower than `compile()`.&#xA;const result = await sass.compileAsync(scssFilename);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://sass-lang.com/documentation/js-api&#34;&gt;the Sass website&lt;/a&gt; for full API documentation.&lt;/p&gt; &#xA;&lt;h4&gt;Legacy JavaScript API&lt;/h4&gt; &#xA;&lt;p&gt;Dart Sass also supports an older JavaScript API that&#39;s fully compatible with &lt;a href=&#34;https://github.com/sass/node-sass&#34;&gt;Node Sass&lt;/a&gt; (with a few exceptions listed below), with support for both the &lt;a href=&#34;https://sass-lang.com/documentation/js-api/modules#render&#34;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://sass-lang.com/documentation/js-api/modules#renderSync&#34;&gt;&lt;code&gt;renderSync()&lt;/code&gt;&lt;/a&gt; functions. This API is considered deprecated and will be removed in Dart Sass 2.0.0, so it should be avoided in new projects.&lt;/p&gt; &#xA;&lt;p&gt;Sass&#39;s support for the legacy JavaScript API has the following limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only the &lt;code&gt;&#34;expanded&#34;&lt;/code&gt; and &lt;code&gt;&#34;compressed&#34;&lt;/code&gt; values of &lt;a href=&#34;https://sass-lang.com/documentation/js-api/interfaces/LegacySharedOptions#outputStyle&#34;&gt;&lt;code&gt;outputStyle&lt;/code&gt;&lt;/a&gt; are supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dart Sass doesn&#39;t support the &lt;a href=&#34;https://github.com/sass/node-sass#precision&#34;&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/a&gt; option. Dart Sass defaults to a sufficiently high precision for all existing browsers, and making this customizable would make the code substantially less efficient.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dart Sass doesn&#39;t support the &lt;a href=&#34;https://github.com/sass/node-sass#sourcecomments&#34;&gt;&lt;code&gt;sourceComments&lt;/code&gt;&lt;/a&gt; option. Source maps are the recommended way of locating the origin of generated selectors.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using Sass with Jest&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://jestjs.io/&#34;&gt;Jest&lt;/a&gt; to run your tests, be aware that it has a &lt;a href=&#34;https://github.com/facebook/jest/issues/2549&#34;&gt;longstanding bug&lt;/a&gt; where its default test environment breaks JavaScript&#39;s built-in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof&#34;&gt;&lt;code&gt;instanceof&lt;/code&gt; operator&lt;/a&gt;. Dart Sass&#39;s JS package uses &lt;code&gt;instanceof&lt;/code&gt; fairly heavily, so in order to avoid breaking Sass you&#39;ll need to install &lt;a href=&#34;https://www.npmjs.com/package/jest-environment-node-single-context&#34;&gt;&lt;code&gt;jest-environment-node-single-context&lt;/code&gt;&lt;/a&gt; and add &lt;code&gt;testEnvironment: &#39;jest-environment-node-single-context&#39;&lt;/code&gt; to your Jest config.&lt;/p&gt; &#xA;&lt;h3&gt;From Pub&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re a Dart user, you can install Dart Sass globally using &lt;code&gt;pub global activate sass&lt;/code&gt;, which will provide a &lt;code&gt;sass&lt;/code&gt; executable. You can also add it to your pubspec and use it as a library. We strongly recommend importing it with the prefix &lt;code&gt;sass&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:sass/sass.dart&#39; as sass;&#xA;&#xA;void main(List&amp;lt;String&amp;gt; args) {&#xA;  print(sass.compile(args.first));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.dartdocs.org/documentation/sass/latest/sass/sass-library.html&#34;&gt;the Dart API docs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;sass_api&lt;/code&gt; Package&lt;/h4&gt; &#xA;&lt;p&gt;Dart users also have access to more in-depth APIs via the &lt;a href=&#34;https://pub.dev/packages/sass_api&#34;&gt;&lt;code&gt;sass_api&lt;/code&gt; package&lt;/a&gt;. This provides access to the Sass AST and APIs for resolving Sass loads without running a full compilation. It&#39;s separated out into its own package so that it can increase its version number independently of the main &lt;code&gt;sass&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you&#39;ve already checked out this repository:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.dartlang.org/install&#34;&gt;Install Dart&lt;/a&gt;. If you download an archive manually rather than using an installer, make sure the SDK&#39;s &lt;code&gt;bin&lt;/code&gt; directory is on your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In this repository, run &lt;code&gt;pub get&lt;/code&gt;. This will install Dart Sass&#39;s dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;dart bin/sass.dart path/to/file.scss&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;h3&gt;In Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can install and run Dart Sass within Docker using the following Dockerfile commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;# Dart stage&#xA;FROM dart:stable AS dart&#xA;&#xA;COPY --from=another_stage /app /app&#xA;&#xA;WORKDIR /dart-sass&#xA;RUN git clone https://github.com/sass/dart-sass.git . &amp;amp;&amp;amp; \&#xA;  dart pub get &amp;amp;&amp;amp; \&#xA;  dart ./bin/sass.dart /app/sass/example.scss /app/public/css/example.css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Dart?&lt;/h2&gt; &#xA;&lt;p&gt;Dart Sass has replaced Ruby Sass as the canonical implementation of the Sass language. We chose Dart because it presented a number of advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s fast. The Dart VM is highly optimized, and getting faster all the time (for the latest performance numbers, see &lt;a href=&#34;https://github.com/sass/dart-sass/raw/master/perf.md&#34;&gt;&lt;code&gt;perf.md&lt;/code&gt;&lt;/a&gt;). It&#39;s much faster than Ruby, and close to par with C++.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s portable. The Dart VM has no external dependencies and can compile applications into standalone snapshot files, so we can distribute Dart Sass as only three files (the VM, the snapshot, and a wrapper script). Dart can also be compiled to JavaScript, which makes it easy to distribute Sass through npm, which the majority of our users use already.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s easy to write. Dart is a higher-level language than C++, which means it doesn&#39;t require lots of hassle with memory management and build systems. It&#39;s also statically typed, which makes it easier to confidently make large refactors than with Ruby.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s friendlier to contributors. Dart is substantially easier to learn than Ruby, and many Sass users in Google in particular are already familiar with it. More contributors translates to faster, more consistent development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility Policy&lt;/h2&gt; &#xA;&lt;p&gt;For the most part, Dart Sass follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;. We consider all of the following to be part of the versioned API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Sass language semantics implemented by Dart Sass.&lt;/li&gt; &#xA; &lt;li&gt;The Dart API.&lt;/li&gt; &#xA; &lt;li&gt;The JavaScript API.&lt;/li&gt; &#xA; &lt;li&gt;The command-line interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Because Dart Sass has a single version that&#39;s shared across the Dart, JavaScript, and standalone distributions, this may mean that we increment the major version number when there are in fact no breaking changes for one or more distributions. However, we will attempt to limit the number of breaking changes we make and group them in as few releases as possible to minimize churn. We strongly encourage users to use &lt;a href=&#34;https://github.com/sass/dart-sass/raw/master/CHANGELOG.md&#34;&gt;the changelog&lt;/a&gt; for a full understanding of all the changes in each release.&lt;/p&gt; &#xA;&lt;p&gt;There is one exception where breaking changes may be made outside of a major version revision. It is occasionally the case that CSS adds a feature that&#39;s incompatible with existing Sass syntax in some way. Because Sass is committed to full CSS compatibility, we occasionally need to break compatibility with old Sass code in order to remain compatible with CSS.&lt;/p&gt; &#xA;&lt;p&gt;In these cases, we will first release a version of Sass that emits deprecation warnings for any stylesheets whose behavior will change. Then, at least three months after the release of a version with these deprecation warnings, we will release a minor version with the breaking change to the Sass language semantics.&lt;/p&gt; &#xA;&lt;h3&gt;Browser Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;In general, we consider any change to Dart Sass&#39;s CSS output that would cause that CSS to stop working in a real browser to be a breaking change. However, there are some cases where such a change would have substantial benefits and would only negatively affect a small minority of rarely-used browsers. We don&#39;t want to have to block such a change on a major version release.&lt;/p&gt; &#xA;&lt;p&gt;As such, if a change would break compatibility with less than 2% of the global market share of browser according to &lt;a href=&#34;https://gs.statcounter.com/&#34;&gt;StatCounter GlobalStats&lt;/a&gt;, we may release a minor version of Dart Sass with that change.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;We consider dropping support for a given version of Node.js to be a breaking change &lt;em&gt;as long as&lt;/em&gt; that version is still supported by Node.js. This means that releases listed as Current, Active LTS, or Maintenance LTS according to &lt;a href=&#34;https://nodejs.org/en/about/releases/&#34;&gt;the Node.js release page&lt;/a&gt;. Once a Node.js version is out of LTS, Dart Sass considers itself free to break support if necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Behavioral Differences from Ruby Sass&lt;/h2&gt; &#xA;&lt;p&gt;There are a few intentional behavioral differences between Dart Sass and Ruby Sass. These are generally places where Ruby Sass has an undesired behavior, and it&#39;s substantially easier to implement the correct behavior than it would be to implement compatible behavior. These should all have tracking bugs against Ruby Sass to update the reference behavior.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@extend&lt;/code&gt; only accepts simple selectors, as does the second argument of &lt;code&gt;selector-extend()&lt;/code&gt;. See &lt;a href=&#34;https://github.com/sass/sass/issues/1599&#34;&gt;issue 1599&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Subject selectors are not supported. See &lt;a href=&#34;https://github.com/sass/sass/issues/1126&#34;&gt;issue 1126&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pseudo selector arguments are parsed as &lt;code&gt;&amp;lt;declaration-value&amp;gt;&lt;/code&gt;s rather than having a more limited custom parsing. See &lt;a href=&#34;https://github.com/sass/sass/issues/2120&#34;&gt;issue 2120&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The numeric precision is set to 10. See &lt;a href=&#34;https://github.com/sass/sass/issues/1122&#34;&gt;issue 1122&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The indented syntax parser is more flexible: it doesn&#39;t require consistent indentation across the whole document. See &lt;a href=&#34;https://github.com/sass/sass/issues/2176&#34;&gt;issue 2176&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Colors do not support channel-by-channel arithmetic. See &lt;a href=&#34;https://github.com/sass/sass/issues/2144&#34;&gt;issue 2144&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unitless numbers aren&#39;t &lt;code&gt;==&lt;/code&gt; to unit numbers with the same value. In addition, map keys follow the same logic as &lt;code&gt;==&lt;/code&gt;-equality. See &lt;a href=&#34;https://github.com/sass/sass/issues/1496&#34;&gt;issue 1496&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rgba()&lt;/code&gt; and &lt;code&gt;hsla()&lt;/code&gt; alpha values with percentage units are interpreted as percentages. Other units are forbidden. See &lt;a href=&#34;https://github.com/sass/sass/issues/1525&#34;&gt;issue 1525&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Too many variable arguments passed to a function is an error. See &lt;a href=&#34;https://github.com/sass/sass/issues/1408&#34;&gt;issue 1408&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Allow &lt;code&gt;@extend&lt;/code&gt; to reach outside a media query if there&#39;s an identical &lt;code&gt;@extend&lt;/code&gt; defined outside that query. This isn&#39;t tracked explicitly, because it&#39;ll be irrelevant when &lt;a href=&#34;https://github.com/sass/sass/issues/1050&#34;&gt;issue 1050&lt;/a&gt; is fixed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some selector pseudos containing placeholder selectors will be compiled where they wouldn&#39;t be in Ruby Sass. This better matches the semantics of the selectors in question, and is more efficient. See &lt;a href=&#34;https://github.com/sass/sass/issues/2228&#34;&gt;issue 2228&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The old-style &lt;code&gt;:property value&lt;/code&gt; syntax is not supported in the indented syntax. See &lt;a href=&#34;https://github.com/sass/sass/issues/2245&#34;&gt;issue 2245&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The reference combinator is not supported. See &lt;a href=&#34;https://github.com/sass/sass/issues/303&#34;&gt;issue 303&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Universal selector unification is symmetrical. See &lt;a href=&#34;https://github.com/sass/sass/issues/2247&#34;&gt;issue 2247&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;@extend&lt;/code&gt; doesn&#39;t produce an error if it matches but fails to unify. See &lt;a href=&#34;https://github.com/sass/sass/issues/2250&#34;&gt;issue 2250&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dart Sass currently only supports UTF-8 documents. We&#39;d like to support more, but Dart currently doesn&#39;t support them. See &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/11744&#34;&gt;dart-lang/sdk#11744&lt;/a&gt;, for example.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Disclaimer: this is not an official Google product.&lt;/p&gt;</summary>
  </entry>
</feed>