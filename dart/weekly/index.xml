<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T02:06:12Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abuanwar072/Welcome-Login-Signup-Page-Flutter</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/abuanwar072/Welcome-Login-Signup-Page-Flutter</id>
    <link href="https://github.com/abuanwar072/Welcome-Login-Signup-Page-Flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mobile app onboarding, Login, Signup page with #flutter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome page, Login Page and Sign up page - Flutter UI&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtu.be/ExKYjqgswJg&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packages we are using:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flutter_svg: &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We design 3 screens first one is a welcome screen like then user open your app it shows then users have two options, if he has an account then press the login button and it just shifts him to the login screen or if he or she don&#39;t have an account then press signup button its transfers to the signup screen.&lt;/p&gt; &#xA;&lt;h3&gt;Auth UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Welcome-Login-Signup-Page-Flutter/master/UI.png&#34; alt=&#34;App UI&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/power_image</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/alibaba/power_image</id>
    <link href="https://github.com/alibaba/power_image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful plugin that fully uses the native image library&#39;s ability to display images on the flutter side.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerImage&lt;/h1&gt; &#xA;&lt;p&gt;A powerful plugin that fully uses the native image library&#39;s ability to display images on the flutter side.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/power_image/raw/main/README_CN.md&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports the ability to load ui.Image. In the solution based on external texture, the user could not get the real ui.Image to use, which made the image library powerless in this special usage scenario.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support image preloading capability. Just like flutter precacheImage. This is very useful in some scenarios that require high image display speed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Added texture cache to connect with flutter&#39;s imageCache! Unified image cache to avoid memory problems caused by mixing native images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emulators are supported. Before flutter-1.23.0-18.1.pre, the emulator could not display Texture Widget.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improve the custom image type channel. Solve the demand for business custom image acquisition.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perfect exception capture and collection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support animation. (PR from LiteTao)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;power_image：It is recommended to use the latest version, &lt;a href=&#34;https://pub.dev/packages/power_image/versions&#34;&gt;power_image pub versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;power_image_ext：You need to choose the version based on the flutter version you are using. Go to &lt;a href=&#34;https://github.com/alibaba/power_image_ext&#34;&gt;power_image_ext&lt;/a&gt; for details！&lt;a href=&#34;https://pub.dev/packages/power_image_ext/versions&#34;&gt;power_image_ext pub versions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  power_image: 0.1.0-pre.2&#xA;      &#xA;dependency_overrides:&#xA;  power_image_ext: 2.5.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use code in github directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  power_image:&#xA;    git:&#xA;      url: &#39;git@github.com:alibaba/power_image.git&#39;&#xA;      ref: &#39;0.1.0-pre.2&#39;&#xA;      &#xA;dependency_overrides:&#xA;  power_image_ext:&#xA;    git:&#xA;      url: &#39;git@github.com:alibaba/power_image_ext.git&#39;&#xA;      ref: &#39;2.5.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Flutter&lt;/h3&gt; &#xA;&lt;h4&gt;1. Replace &lt;code&gt;ImageCache&lt;/code&gt; with &lt;code&gt;ImageCacheExt&lt;/code&gt;.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// call before runApp()&#xA;PowerImageBinding();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// return ImageCacheExt in createImageCache(), &#xA;/// if you have extends with WidgetsFlutterBinding&#xA;class XXX extends WidgetsFlutterBinding {&#xA;  @override&#xA;  ImageCache createImageCache() {&#xA;    return ImageCacheExt();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Setup PowerImageLoader&lt;/h4&gt; &#xA;&lt;p&gt;Initialize and set the global default rendering mode, renderingTypeTexture is texture mode, renderingTypeExternal is ffi mode In addition, there are exception reports in PowerImageSetupOptions, and the sampling rate of exception reports can be set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    PowerImageLoader.instance.setup(PowerImageSetupOptions(renderingTypeTexture,&#xA;        errorCallbackSamplingRate: 1.0,&#xA;        errorCallback: (PowerImageLoadException exception) {&#xA;&#xA;    }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;PowerImage provides basic image types, including network, file, nativeAsset, and flutter assets. Users need to customize their corresponding loaders.&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageNetworkImageLoader new] forType:kPowerImageImageTypeNetwork];&#xA;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageAssetsImageLoader new] forType:kPowerImageImageTypeNativeAsset];&#xA;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageFlutterAssertImageLoader new] forType:kPowerImageImageTypeAsset];&#xA;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageFileImageLoader new] forType:kPowerImageImageTypeFile];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        PowerImageLoader.sharedInstance().register(PowerImageNetworkImageLoader.init(), forType: kPowerImageImageTypeNetwork)&#xA;        PowerImageLoader.sharedInstance().register(PowerImageAssetsImageLoader.init(), forType: kPowerImageImageTypeNativeAsset)&#xA;        PowerImageLoader.sharedInstance().register(PowerImageFlutterAssertImageLoader.init(), forType: kPowerImageImageTypeAsset)&#xA;        PowerImageLoader.sharedInstance().register(PowerImageFileImageLoader.init(), forType: kPowerImageImageTypeFile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The loader needs to follow the PowerImageLoaderProtocol protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;typedef void(^PowerImageLoaderCompletionBlock)(BOOL success, PowerImageResult *imageResult);&#xA;&#xA;@protocol PowerImageLoaderProtocol &amp;lt;NSObject&amp;gt;&#xA;@required&#xA;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Network image loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    &#xA;    /// CDN optimization, you need transfer reqSize to native image loader!&#xA;    /// CDN optimization, you need transfer reqSize to native image loader!&#xA;    /// like this: [[SDWebImageManager sharedManager] downloadImageWithURL:[NSURL URLWithString:requestConfig.srcString] viewSize:reqSize completed:&#xA;    CGSize reqSize = requestConfig.originSize;&#xA;    /// attention.&#xA;&#xA;    &#xA;    [[SDWebImageManager sharedManager] loadImageWithURL:[NSURL URLWithString:requestConfig.srcString] options:nil progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {&#xA;&#xA;        } completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {&#xA;            if (image != nil) {&#xA;                completedBlock([PowerImageResult successWithImage:image]);&#xA;            }else {&#xA;                completedBlock([PowerImageResult failWithMessage:error.localizedDescription]);&#xA;            }&#xA;    }];&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        let reqSize:CGSize = requestConfig.originSize&#xA;        let url = URL(string: requestConfig.srcString())&#xA;        SDWebImageManager.shared.loadImage(with: url, progress: nil) { image, data, error, cacheType, finished, url in&#xA;            &#xA;            if let image = image {&#xA;                if (image.sd_isAnimated) {&#xA;                    let frames:[SDImageFrame] = SDImageCoderHelper.frames(from: image)!&#xA;                    if frames.count &amp;gt; 0 {&#xA;                        var arr:[PowerImageFrame] = []&#xA;                        for index in 0..&amp;lt;frames.count {&#xA;                            let frame:SDImageFrame = frames[index]&#xA;                            arr.append(PowerImageFrame(image: frame.image, duration: frame.duration))&#xA;                        }&#xA;                        let flutterImage = PowerFlutterMultiFrameImage(image: image, frames: arr)&#xA;                        completedBlock(PowerImageResult.success(with: flutterImage))&#xA;                        return&#xA;                    }&#xA;                }&#xA;                &#xA;                completedBlock(PowerImageResult.success(with: image))&#xA;                &#xA;            }else{&#xA;                completedBlock(PowerImageResult.fail(withMessage: error?.localizedDescription ?? &#34;PowerImageNetworkLoaderError!&#34;))&#xA;            }   &#xA;       }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;native asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    UIImage *image = [UIImage imageNamed:requestConfig.srcString];&#xA;    if (image) {&#xA;        completedBlock([PowerImageResult successWithImage:image]);&#xA;    }else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;MyAssetsImageLoader UIImage imageNamed: nil&#34;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        &#xA;        let image = UIImage(named: requestConfig.srcString())&#xA;        &#xA;        if let image = image {&#xA;            completedBlock(PowerImageResult.success(with: image))&#xA;        }else{&#xA;            completedBlock(PowerImageResult.fail(withMessage: &#34;PowerImageAssetsImageLoaderError!&#34;))&#xA;        }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;flutter asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    UIImage *image = [self flutterImageWithName:requestConfig];&#xA;    if (image) {&#xA;        completedBlock([PowerImageResult successWithImage:image]);&#xA;    } else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;flutterImageWithName nil&#34;]);&#xA;    }&#xA;}&#xA;&#xA;- (UIImage*)flutterImageWithName:(PowerImageRequestConfig *)requestConfig {&#xA;    NSString *name = requestConfig.srcString;&#xA;    NSString *package = requestConfig.src[@&#34;package&#34;];&#xA;    NSString *filename = [name lastPathComponent];&#xA;    NSString *path = [name stringByDeletingLastPathComponent];&#xA;    for (int screenScale = [UIScreen mainScreen].scale; screenScale &amp;gt; 1; --screenScale) {&#xA;        NSString *key = [self lookupKeyForAsset:[NSString stringWithFormat:@&#34;%@/%d.0x/%@&#34;, path, screenScale, filename] fromPackage:package];&#xA;        UIImage *image = [UIImage imageNamed:key inBundle:[NSBundle mainBundle] compatibleWithTraitCollection:nil];&#xA;        if (image) {&#xA;            return image;&#xA;        }&#xA;    }&#xA;    NSString *key = [self lookupKeyForAsset:name fromPackage:package];&#xA;&#xA;    /// webp iOS &amp;lt; 14 not support &#xA;    if ([name hasSuffix:@&#34;.webp&#34;] &amp;amp;&amp;amp; !(@available(ios 14.0, *))) {&#xA;        NSString *mPath = [[NSBundle mainBundle] pathForResource:key ofType:nil];&#xA;        NSData *webpData = [NSData dataWithContentsOfFile:mPath];&#xA;        return [UIImage sd_imageWithWebPData:webpData];&#xA;    }&#xA;    return [UIImage imageNamed:key inBundle:[NSBundle mainBundle] compatibleWithTraitCollection:nil];&#xA;}&#xA;&#xA;- (NSString *)lookupKeyForAsset:(NSString *)asset fromPackage:(NSString *)package {&#xA;    if (package &amp;amp;&amp;amp; [package isKindOfClass:[NSString class]] &amp;amp;&amp;amp; ![package isEqualToString:@&#34;&#34;]) {&#xA;        return [FlutterDartProject lookupKeyForAsset:asset fromPackage:package];&#xA;    }else {&#xA;        return [FlutterDartProject lookupKeyForAsset:asset];&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        let image = self.flutterImage(requestConfig: requestConfig)&#xA;        if let image = image {&#xA;            completedBlock(PowerImageResult.success(with: image))&#xA;        }else {&#xA;            completedBlock(PowerImageResult.fail(withMessage: &#34;PowerImageFlutterAssertImageLoaderError&#34;))&#xA;        }&#xA;    }&#xA;    &#xA;    &#xA;    private func flutterImage(requestConfig:PowerImageRequestConfig) -&amp;gt; UIImage? {&#xA;        &#xA;        let name:String = requestConfig.srcString()!&#xA;        let package:String? = requestConfig.src[&#34;package&#34;] as? String&#xA;        let fileName:String = NSString(string: name).lastPathComponent&#xA;        let path:String = NSString(string: name).deletingLastPathComponent&#xA;        &#xA;        &#xA;        let scaleArr:[Int] = (2...Int(UIScreen.main.scale)).reversed()&#xA;        &#xA;        for scale in scaleArr {&#xA;            let key:String = self.lookupKeyForAsset(asset: String(format: &#34;%s/%d.0x/%s&#34;, path,scale,fileName), package: package)&#xA;            let image = UIImage(named: key,in: Bundle.main,compatibleWith: nil)&#xA;            if image != nil {&#xA;                return image!&#xA;            }&#xA;        }&#xA;        &#xA;        let key = self.lookupKeyForAsset(asset: name, package: package)&#xA;        return UIImage(named: key,in: Bundle.main,compatibleWith: nil)&#xA;    }&#xA;    &#xA;    private func lookupKeyForAsset(asset:String,package:String?) -&amp;gt; String {&#xA;        if let package = package, package != &#34;&#34; {&#xA;            return FlutterDartProject.lookupKey(forAsset: asset,fromPackage: package)&#xA;        }else{&#xA;            return FlutterDartProject.lookupKey(forAsset: asset)&#xA;        }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;file loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    &#xA;    UIImage *image = [[UIImage alloc] initWithContentsOfFile:requestConfig.srcString];&#xA;&#xA;    if (image) {&#xA;        completedBlock([PowerImageResult successWithImage:image]);&#xA;    } else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;UIImage initWithContentsOfFile nil&#34;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        &#xA;        let image = UIImage(contentsOfFile: requestConfig.srcString())&#xA;        &#xA;        if let image = image {&#xA;            completedBlock(PowerImageResult.success(with: image))&#xA;        }else{&#xA;            completedBlock(PowerImageResult.fail(withMessage: &#34;PowerImageFileImageLoaderError!&#34;))&#xA;        }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;PowerImage provides basic image types, including network, file, nativeAsset, and flutter assets. Users need to customize their corresponding loaders.&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageNetworkLoader(this.getApplicationContext()), &#34;network&#34;);&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageNativeAssetLoader(this.getApplicationContext()), &#34;nativeAsset&#34;);&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageFlutterAssetLoader(this.getApplicationContext()), &#34;asset&#34;);&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageFileLoader(this.getApplicationContext()), &#34;file&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageNetworkLoader(this.applicationContext), &#34;network&#34;&#xA;)&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageNativeAssetLoader(this.applicationContext), &#34;nativeAsset&#34;&#xA;)&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageFlutterAssetLoader(this.applicationContext), &#34;asset&#34;&#xA;)&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageFileLoader(this.applicationContext), &#34;file&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The loader needs to follow the PowerImageLoaderProtocol protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface PowerImageLoaderProtocol {&#xA;    void handleRequest(PowerImageRequestConfig request, PowerImageResult result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Network image loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageNetworkLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private Context context;&#xA;&#xA;    public PowerImageNetworkLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        Glide.with(context).asDrawable().load(request.srcString()).listener(new RequestListener&amp;lt;Drawable&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Drawable&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Drawable resource, Object model, Target&amp;lt;Drawable&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                if (resource instanceof GifDrawable) {&#xA;                    response.onResult(PowerImageResult.genSucRet(new GlideMultiFrameImage((GifDrawable) resource, false)));&#xA;                } else {&#xA;                    if (resource instanceof BitmapDrawable) {&#xA;                        response.onResult(PowerImageResult.genSucRet(new FlutterSingleFrameImage((BitmapDrawable) resource)));&#xA;                    } else {&#xA;                        response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败:  resource : &#34; + String.valueOf(resource)));&#xA;                    }&#xA;                }&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageNetworkLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        Glide.with(context).asDrawable().load(request.srcString())&#xA;            .listener(object : RequestListener&amp;lt;Drawable&amp;gt; {&#xA;                override fun onLoadFailed(&#xA;                    e: GlideException?,&#xA;                    model: Any,&#xA;                    target: Target&amp;lt;Drawable&amp;gt;,&#xA;                    isFirstResource: Boolean&#xA;                ): Boolean {&#xA;                    response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                    return true&#xA;                }&#xA;&#xA;                override fun onResourceReady(&#xA;                    resource: Drawable,&#xA;                    model: Any,&#xA;                    target: Target&amp;lt;Drawable&amp;gt;,&#xA;                    dataSource: DataSource,&#xA;                    isFirstResource: Boolean&#xA;                ): Boolean {&#xA;                    if (resource is GifDrawable) {&#xA;                        response.onResult(&#xA;                            PowerImageResult.genSucRet(&#xA;                                GlideMultiFrameImage(&#xA;                                    resource as GifDrawable,&#xA;                                    false&#xA;                                )&#xA;                            )&#xA;                        )&#xA;                    } else {&#xA;                        if (resource is BitmapDrawable) {&#xA;                            response.onResult(&#xA;                                PowerImageResult.genSucRet(&#xA;                                    FlutterSingleFrameImage(&#xA;                                        resource as BitmapDrawable&#xA;                                    )&#xA;                                )&#xA;                            )&#xA;                        } else {&#xA;                            response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败:  resource : $resource&#34;))&#xA;                        }&#xA;                    }&#xA;                    return true&#xA;                }&#xA;            }).submit(&#xA;                if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;                if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;            )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;native asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageNativeAssetLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private Context context;&#xA;&#xA;    public PowerImageNativeAssetLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        Resources resources = context.getResources();&#xA;        int resourceId = 0;&#xA;        try {&#xA;            resourceId = resources.getIdentifier(request.srcString(),&#xA;                    &#34;drawable&#34;, context.getPackageName());&#xA;        } catch (Resources.NotFoundException e) {&#xA;            // 资源未找到&#xA;            e.printStackTrace();&#xA;        }&#xA;        if (resourceId == 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;资源未找到&#34;));&#xA;            return;&#xA;        }&#xA;        Glide.with(context).asBitmap().load(resourceId).listener(new RequestListener&amp;lt;Bitmap&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Bitmap&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Bitmap resource, Object model, Target&amp;lt;Bitmap&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genSucRet(resource));&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageNativeAssetLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        val resources = context.resources&#xA;        var resourceId = 0&#xA;        try {&#xA;            resourceId = resources.getIdentifier(&#xA;                request.srcString(),&#xA;                &#34;drawable&#34;, context.packageName&#xA;            )&#xA;        } catch (e: Resources.NotFoundException) {&#xA;            // 资源未找到&#xA;            e.printStackTrace()&#xA;        }&#xA;        if (resourceId == 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;资源未找到&#34;))&#xA;            return&#xA;        }&#xA;        Glide.with(context).asBitmap().load(resourceId).listener(object : RequestListener&amp;lt;Bitmap?&amp;gt; {&#xA;            override fun onLoadFailed(&#xA;                e: GlideException?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                return true&#xA;            }&#xA;&#xA;            override fun onResourceReady(&#xA;                resource: Bitmap?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                dataSource: DataSource,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genSucRet(resource))&#xA;                return true&#xA;            }&#xA;        }).submit(&#xA;            if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;            if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;        )&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;flutter asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageFlutterAssetLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private Context context;&#xA;&#xA;    public PowerImageFlutterAssetLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        String name = request.srcString();&#xA;        if (name == null || name.length() &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src 为空&#34;));&#xA;            return;&#xA;        }&#xA;        String assetPackage = &#34;&#34;;&#xA;        if (request.src != null) {&#xA;            assetPackage = (String) request.src.get(&#34;package&#34;);&#xA;        }&#xA;        String path;&#xA;        if (assetPackage != null &amp;amp;&amp;amp; assetPackage.length() &amp;gt; 0) {&#xA;            path = FlutterMain.getLookupKeyForAsset(name, assetPackage);&#xA;        } else {&#xA;            path = FlutterMain.getLookupKeyForAsset(name);&#xA;        }&#xA;        if (path == null || path.length() &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;path 为空&#34;));&#xA;            return;&#xA;        }&#xA;        Uri asset = Uri.parse(&#34;file:///android_asset/&#34; + path);&#xA;        Glide.with(context).asBitmap().load(asset).listener(new RequestListener&amp;lt;Bitmap&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Bitmap&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Bitmap resource, Object model, Target&amp;lt;Bitmap&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genSucRet(resource));&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageFlutterAssetLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        val name = request.srcString()&#xA;        if (name == null || name.length &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src 为空&#34;))&#xA;            return&#xA;        }&#xA;        var assetPackage: String? = &#34;&#34;&#xA;        if (request.src != null) {&#xA;            assetPackage = request.src[&#34;package&#34;] as String?&#xA;        }&#xA;        val path: String = if (assetPackage != null &amp;amp;&amp;amp; assetPackage.length &amp;gt; 0) {&#xA;            FlutterMain.getLookupKeyForAsset(name, assetPackage)&#xA;        } else {&#xA;            FlutterMain.getLookupKeyForAsset(name)&#xA;        }&#xA;        if (path.isEmpty()) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;path 为空&#34;))&#xA;            return&#xA;        }&#xA;        val asset = Uri.parse(&#34;file:///android_asset/$path&#34;)&#xA;        Glide.with(context).asBitmap().load(asset).listener(object : RequestListener&amp;lt;Bitmap?&amp;gt; {&#xA;            override fun onLoadFailed(&#xA;                e: GlideException?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                return true&#xA;            }&#xA;&#xA;            override fun onResourceReady(&#xA;                resource: Bitmap?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                dataSource: DataSource,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genSucRet(resource))&#xA;                return true&#xA;            }&#xA;        }).submit(&#xA;            if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;            if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;file loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageFileLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private final Context context;&#xA;&#xA;    public PowerImageFileLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        String name = request.srcString();&#xA;        if (name == null || name.length() &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src 为空&#34;));&#xA;            return;&#xA;        }&#xA;        Uri asset = Uri.parse(&#34;file://&#34; + name);&#xA;        Glide.with(context).asBitmap().load(asset).listener(new RequestListener&amp;lt;Bitmap&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Bitmap&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Bitmap resource, Object model, Target&amp;lt;Bitmap&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genSucRet(resource));&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageFileLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        val name = request.srcString()&#xA;        if (name == null || name.length &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src 为空&#34;))&#xA;            return&#xA;        }&#xA;        val asset = Uri.parse(&#34;file://$name&#34;)&#xA;        Glide.with(context).asBitmap().load(asset).listener(object : RequestListener&amp;lt;Bitmap?&amp;gt; {&#xA;            override fun onLoadFailed(&#xA;                e: GlideException?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;Native加载失败: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                return true&#xA;            }&#xA;&#xA;            override fun onResourceReady(&#xA;                resource: Bitmap?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                dataSource: DataSource,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genSucRet(resource))&#xA;                return true&#xA;            }&#xA;        }).submit(&#xA;            if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;            if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;network image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PowerImage.network(&#xA;    String src, {&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nativeAsset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PowerImage.nativeAsset(&#xA;    String src, {&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flutter asset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PowerImage.asset(&#xA;    String src, {&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    String? package,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;File:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PowerImage.file(String src,&#xA;      {Key key,&#xA;      this.width,&#xA;      this.height,&#xA;      this.frameBuilder,&#xA;      this.errorBuilder,&#xA;      this.fit = BoxFit.cover,&#xA;      this.alignment = Alignment.center,&#xA;      String renderingType,&#xA;      double imageWidth,&#xA;      double imageHeight})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom Image Type:&lt;/p&gt; &#xA;&lt;p&gt;1.Define custom ImageType like &#34;album&#34;.&lt;/p&gt; &#xA;&lt;p&gt;2.Define custom PowerImageRequestOptionsSrc to pass argument to Native loader.&lt;/p&gt; &#xA;&lt;p&gt;3.Register custom loader in Android and iOS for &#34;album&#34; to receive argument and return Bitmap or UIImage.&lt;/p&gt; &#xA;&lt;p&gt;4.Flutter Side will display Image successfully.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  /// 自定义 imageType\src&#xA;  /// 效果：将src encode 后，完成地传递给 native 对应 imageType 注册的 loader&#xA;  /// 使用场景：&#xA;  /// 例如，自定义加载相册照片，通过自定义 imageType 为 &#34;album&#34;，&#xA;  /// native 侧注册 &#34;album&#34; 类型的 loader 自定义图片的加载。  &#xA;PowerImage.type(&#xA;    String imageType, {&#xA;    required PowerImageRequestOptionsSrc src,&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  /// 更加灵活的方式，通过自定义options来展示图片&#xA;  ///&#xA;  /// PowerImageRequestOptions({&#xA;  ///   @required this.src,   //资源&#xA;  ///   @required this.imageType, //资源类型，如网络图，本地图或者自定义等&#xA;  ///   this.renderingType, //渲染方式，默认全局&#xA;  ///   this.imageWidth,  //图片的渲染的宽度&#xA;  ///   this.imageHeight, //图片渲染的高度&#xA;  /// });&#xA;  ///&#xA;  /// PowerExternalImageProvider（FFI[bitmap]方案）&#xA;  /// PowerTextureImageProvider（texture方案）&#xA;  ///&#xA;  /// 使用场景：&#xA;  /// 例如，自定义加载相册照片，通过自定义 imageType 为 &#34;album&#34;，&#xA;  /// native 侧注册 &#34;album&#34; 类型的 loader 自定义图片的加载。&#xA;  ///&#xA;PowerImage.options(&#xA;    PowerImageRequestOptions options, {&#xA;    Key? key,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PowerImageLoader.getInstance().registerImageLoader(&#xA;  new PowerImageAlbumLoader(application.getApplicationContext()), &#34;album&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageAlbumLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private final Context context;&#xA;&#xA;    public PowerImageAlbumLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, final PowerImageResponse response) {&#xA;        Map&amp;lt;String, Object&amp;gt; src = request.src;&#xA;        if (src == null || src.get(Const.Argument.ASSET_ID) == null || src.get(Const.Argument.ASSET_TYPE) == null) {&#xA;            PowerImageResult result = PowerImageResult.genFailRet(&#34;asset id or assetType == null&#34;);&#xA;            response.onResult(result);&#xA;            return;&#xA;        }&#xA;        AssetQuality quality = AssetQuality.values()[(int) src.get(Const.Argument.QUALITY)];&#xA;        boolean highQuality = quality == AssetQuality.fullScreen;&#xA;        final LocalMedia media = new LocalMedia();&#xA;        media.fromMap(src);&#xA;        final ThumbnailLoader thumbnailLoader = new ThumbnailLoader(context);&#xA;        thumbnailLoader.load(media, highQuality, new ThumbnailLoader.ThumbnailLoadListener() {&#xA;            @Override&#xA;            public void onThumbnailLoaded(final Bitmap bitmap) {&#xA;                PowerImageResult result;&#xA;                if (bitmap == null) {&#xA;                    result = PowerImageResult.genFailRet(&#34;bitmap == null&#34;);&#xA;                } else {&#xA;                    result = PowerImageResult.genSucRet(bitmap);&#xA;                }&#xA;                response.onResult(result);&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[PowerImageLoader sharedInstance] registerImageLoader:[AlbumAssetsImageLoader new] forType:@&#34;album&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    NSString *assetId = requestConfig.src[@&#34;assetId&#34;];&#xA;    NSNumber *imageWidth = requestConfig.src[@&#34;imageWidth&#34;];&#xA;    NSNumber *imageHeight = requestConfig.src[@&#34;imageHeight&#34;];&#xA;    if (assetId) {&#xA;        if (imageWidth &amp;amp;&amp;amp; imageHeight) {&#xA;            [[MPAssetManager sharedInstance] getImageWithAssetId:assetId&#xA;                                                       imageSize:CGSizeMake(imageWidth.doubleValue, imageHeight.doubleValue)&#xA;                                                  successHandler:^(UIImage *image) {&#xA;                completedBlock([PowerImageResult successWithImage:image]);&#xA;            } failureHandler:^(NSError *error) {&#xA;                completedBlock([PowerImageResult failWithMessage:error.localizedDescription]);&#xA;            }];&#xA;        } else {&#xA;            [[MPAssetManager sharedInstance] getThumbnail:assetId&#xA;                                           successHandler:^(UIImage *image) {&#xA;                completedBlock([PowerImageResult successWithImage:image]);&#xA;            } failureHandler:^(NSError *error) {&#xA;                completedBlock([PowerImageResult failWithMessage:error.localizedDescription]);&#xA;            }];&#xA;        }&#xA;    } else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;assetId is nil&#34;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;Network&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;          return PowerImage.network(&#xA;            &#39;https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg&#39;,&#xA;            width: 100,&#xA;            height: 100,&#xA;          );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Best practice&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/power_image/main/BESTPRACTICE.md&#34;&gt;Best practice&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/TdTGK21S-Yd3aD-yZDoYyQ&#34;&gt;https://mp.weixin.qq.com/s/TdTGK21S-Yd3aD-yZDoYyQ&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutterchina/dio</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/flutterchina/dio</id>
    <link href="https://github.com/flutterchina/dio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful Http client for Dart, which supports Interceptors, FormData, Request Cancellation, File Downloading, Timeout etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Language: &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/README-ZH.md&#34;&gt;中文简体&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;dio&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutterchina/dio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-flutter%7Cflutter%20web%7Cdart%20vm-ff69b4.svg?style=flat-square&#34; alt=&#34;support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A powerful Http client for Dart, which supports Interceptors, Global configuration, FormData, Request Cancellation, File downloading, Timeout etc.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;h3&gt;Add dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  dio: ^4.0.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Already know Dio 3 and just want to learn about what&#39;s new in Dio 4? Check out the &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/migration_to_4.x.md&#34;&gt;Migration Guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Super simple to use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;void getHttp() async {&#xA;  try {&#xA;    var response = await Dio().get(&#39;http://www.google.com&#39;);&#xA;    print(response);&#xA;  } catch (e) {&#xA;    print(e);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;awesome-dio&lt;/h2&gt; &#xA;&lt;p&gt;🎉 A curated list of awesome things related to dio.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins (support 4.x)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugins&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager&#34;&gt;dio_cookie_manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio_cookie_manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_cookie_manager.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A cookie manager for Dio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter&#34;&gt;dio_http2_adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio_http2_adapter&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_http2_adapter.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Dio HttpClientAdapter which support Http/2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rodion-m/dio_smart_retry&#34;&gt;dio_smart_retry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_smart_retry&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_smart_retry.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flexible retry library for Dio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/diefferson/http_certificate_pinning&#34;&gt;http_certificate_pinning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/http_certificate_pinning&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/http_certificate_pinning.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Https Certificate pinning for Flutter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OwnWeb/curl_logger_dio_interceptor&#34;&gt;curl_logger_dio_interceptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/curl_logger_dio_interceptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/curl_logger_dio_interceptor.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Flutter curl-command generator for Dio.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/llfbandit/dio_cache_interceptor&#34;&gt;dio_cache_interceptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_cache_interceptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_cache_interceptor.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dio HTTP cache interceptor with multiple stores respecting HTTP directives (or not)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hurshi/dio-http-cache&#34;&gt;dio_http_cache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_http_cache&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_http_cache.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple cache library for Dio like Rxcache in Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Milad-Akarie/pretty_dio_logger&#34;&gt;pretty_dio_logger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/pretty_dio_logger&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/pretty_dio_logger.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Related Projects&lt;/h3&gt; &#xA;&lt;p&gt;Welcome to submit Dio&#39;s third-party plugins and related libraries &lt;a href=&#34;https://github.com/flutterchina/dio/issues/347&#34;&gt;here&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#dio-apis&#34;&gt;Dio APIs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#request-options&#34;&gt;Request Options&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#response-schema&#34;&gt;Response Schema&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#interceptors&#34;&gt;Interceptors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#cookie-manager&#34;&gt;Cookie Manager&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#using-applicationx-www-form-urlencoded-format&#34;&gt;Using application/x-www-form-urlencoded format&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#sending-formdata&#34;&gt;Sending FormData&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#transformer&#34;&gt;Transformer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#using-proxy&#34;&gt;Using proxy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#https-certificate-verification&#34;&gt;Https certificate verification&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#httpclientadapter&#34;&gt;HttpClientAdapter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#cancellation&#34;&gt;Cancellation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#extends-dio-class&#34;&gt;Extends Dio class&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#http2-support&#34;&gt;Http2 support&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#features-and-bugs&#34;&gt;Features and bugs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response response;&#xA;var dio = Dio();&#xA;response = await dio.get(&#39;/test?id=12&amp;amp;name=wendu&#39;);&#xA;print(response.data.toString());&#xA;// Optionally the request above could also be done as&#xA;response = await dio.get(&#39;/test&#39;, queryParameters: {&#39;id&#39;: 12, &#39;name&#39;: &#39;wendu&#39;});&#xA;print(response.data.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.post(&#39;/test&#39;, data: {&#39;id&#39;: 12, &#39;name&#39;: &#39;wendu&#39;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing multiple concurrent requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await Future.wait([dio.post(&#39;/info&#39;), dio.get(&#39;/token&#39;)]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Downloading a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.download(&#39;https://www.google.com/&#39;, &#39;./xx.html&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get response stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response&amp;lt;ResponseBody&amp;gt; rs;&#xA;rs = await Dio().get&amp;lt;ResponseBody&amp;gt;(url,&#xA;  options: Options(responseType: ResponseType.stream),  // set responseType to `stream`&#xA;);&#xA;print(rs.data.stream); //response stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get response with bytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; rs &#xA;rs = await Dio().get&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;(url,&#xA; options: Options(responseType: ResponseType.bytes), // set responseType to `bytes`&#xA;);&#xA;print(rs.data); // List&amp;lt;int&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending FormData:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;});&#xA;var response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uploading multiple files to server by FormData:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;  &#39;file&#39;: await MultipartFile.fromFile(&#39;./text.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;  &#39;files&#39;: [&#xA;    await MultipartFile.fromFile(&#39;./text1.txt&#39;, filename: &#39;text1.txt&#39;),&#xA;    await MultipartFile.fromFile(&#39;./text2.txt&#39;, filename: &#39;text2.txt&#39;),&#xA;  ]&#xA;});&#xA;var response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Listening the uploading progress:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.post(&#xA;  &#39;http://www.dtworkroom.com/doris/1/2.0.0/test&#39;,&#xA;  data: {&#39;aa&#39;: &#39;bb&#39; * 22},&#xA;  onSendProgress: (int sent, int total) {&#xA;    print(&#39;$sent $total&#39;);&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Post binary data by Stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Binary data&#xA;List&amp;lt;int&amp;gt; postData = &amp;lt;int&amp;gt;[...];&#xA;await dio.post(&#xA;  url,&#xA;  data: Stream.fromIterable(postData.map((e) =&amp;gt; [e])), //create a Stream&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;&#xA;  options: Options(&#xA;    headers: {&#xA;      Headers.contentLengthHeader: postData.length, // set content-length&#xA;    },&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…you can find all examples code &lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dio APIs&lt;/h2&gt; &#xA;&lt;h3&gt;Creating an instance and set default configs.&lt;/h3&gt; &#xA;&lt;p&gt;You can create instance of Dio with an optional &lt;code&gt;BaseOptions&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var dio = Dio(); // with default Options&#xA;&#xA;// Set default configs&#xA;dio.options.baseUrl = &#39;https://www.xx.com/api&#39;;&#xA;dio.options.connectTimeout = 5000; //5s&#xA;dio.options.receiveTimeout = 3000;&#xA;&#xA;// or new Dio with a BaseOptions instance.&#xA;var options = BaseOptions(&#xA;  baseUrl: &#39;https://www.xx.com/api&#39;,&#xA;  connectTimeout: 5000,&#xA;  receiveTimeout: 3000,&#xA;);&#xA;Dio dio = Dio(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core API in Dio instance is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Future&#xA;  &lt;response&gt;&#xA;    request(String path, {data,Map queryParameters, Options options,CancelToken cancelToken, ProgressCallback onSendProgress, ProgressCallback onReceiveProgress)&#xA;  &lt;/response&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.request(&#xA;  &#39;/test&#39;,&#xA;  data: {&#39;id&#39;:12,&#39;name&#39;:&#39;xx&#39;},&#xA;  options: Options(method:&#39;GET&#39;),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request method aliases&lt;/h3&gt; &#xA;&lt;p&gt;For convenience aliases have been provided for all supported request methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;Response&amp;gt; get(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; post(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; put(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; delete(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; head(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; put(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; path(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; download(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; fetch(RequestOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Request Options&lt;/h2&gt; &#xA;&lt;p&gt;The Options class describes the http request information and configuration. Each Dio instance has a base config for all requests maked by itself, and we can override the base config with [Options] when make a single request. The [BaseOptions] declaration as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;  /// Http method.&#xA;  String method;&#xA;&#xA;  /// Request base url, it can contain sub path, like: &#39;https://www.google.com/api/&#39;.&#xA;  String baseUrl;&#xA;&#xA;  /// Http request headers.&#xA;  Map&amp;lt;String, dynamic&amp;gt; headers;&#xA;&#xA;   /// Timeout in milliseconds for opening  url.&#xA;  int connectTimeout;&#xA;&#xA;   ///  Whenever more than [receiveTimeout] (in milliseconds) passes between two events from response stream,&#xA;  ///  [Dio] will throw the [DioError] with [DioErrorType.RECEIVE_TIMEOUT].&#xA;  ///  Note: This is not the receiving time limitation.&#xA;  int receiveTimeout;&#xA;&#xA;  /// Request data, can be any type.&#xA;  T data;&#xA;&#xA;  /// If the `path` starts with &#39;http(s)&#39;, the `baseURL` will be ignored, otherwise,&#xA;  /// it will be combined and then resolved with the baseUrl.&#xA;  String path=&#39;&#39;;&#xA;&#xA;  /// The request Content-Type. The default value is &#39;application/json; charset=utf-8&#39;.&#xA;  /// If you want to encode request body with &#39;application/x-www-form-urlencoded&#39;,&#xA;  /// you can set [Headers.formUrlEncodedContentType], and [Dio]&#xA;  /// will automatically encode the request body.&#xA;  String contentType;&#xA;&#xA;  /// [responseType] indicates the type of data that the server will respond with&#xA;  /// options which defined in [ResponseType] are `JSON`, `STREAM`, `PLAIN`.&#xA;  ///&#xA;  /// The default value is `JSON`, dio will parse response string to json object automatically&#xA;  /// when the content-type of response is &#39;application/json&#39;.&#xA;  ///&#xA;  /// If you want to receive response data with binary bytes, for example,&#xA;  /// downloading a image, use `STREAM`.&#xA;  ///&#xA;  /// If you want to receive the response data with String, use `PLAIN`.&#xA;  ResponseType responseType;&#xA;&#xA;  /// `validateStatus` defines whether the request is successful for a given&#xA;  /// HTTP response status code. If `validateStatus` returns `true` ,&#xA;  /// the request will be perceived as successful; otherwise, considered as failed.&#xA;  ValidateStatus validateStatus;&#xA;&#xA;  /// Custom field that you can retrieve it later in [Interceptor]、[Transformer] and the   [Response] object.&#xA;  Map&amp;lt;String, dynamic&amp;gt; extra;&#xA;  &#xA;  /// Common query parameters&#xA;  Map&amp;lt;String, dynamic /*String|Iterable&amp;lt;String&amp;gt;*/ &amp;gt; queryParameters;  &#xA;  &#xA;   /// [collectionFormat] indicates the format of collection data in request&#xA;  /// options which defined in [CollectionFormat] are `csv`, `ssv`, `tsv`, `pipes`, `multi`,`multiCompatible`.&#xA;  /// The default value is `multiCompatible`&#xA;  late CollectionFormat collectionFormat;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/options.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Response Schema&lt;/h2&gt; &#xA;&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;  /// Response body. may have been transformed, please refer to [ResponseType].&#xA;  T? data;&#xA;  /// Response headers.&#xA;  Headers headers;&#xA;  /// The corresponding request info.&#xA;  Options request;&#xA;  /// Http status code.&#xA;  int? statusCode;&#xA;  String? statusMessage;&#xA;  /// Whether redirect &#xA;  bool? isRedirect;  &#xA;  /// redirect info    &#xA;  List&amp;lt;RedirectInfo&amp;gt; redirects ;&#xA;  /// Returns the final real request uri (maybe redirect). &#xA;  Uri realUri;    &#xA;  /// Custom field that you can retrieve it later in `then`.&#xA;  Map&amp;lt;String, dynamic&amp;gt; extra;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When request is succeed, you will receive the response as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response response = await dio.get(&#39;https://www.google.com&#39;);&#xA;print(response.data);&#xA;print(response.headers);&#xA;print(response.requestOptions);&#xA;print(response.statusCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interceptors&lt;/h2&gt; &#xA;&lt;p&gt;For each dio instance, We can add one or more interceptors, by which we can intercept requests 、 responses and errors before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catchError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(InterceptorsWrapper(&#xA;    onRequest:(options, handler){&#xA;     // Do something before request is sent&#xA;     return handler.next(options); //continue&#xA;     // If you want to resolve the request with some custom data，&#xA;     // you can resolve a `Response` object eg: `handler.resolve(response)`.&#xA;     // If you want to reject the request with a error message,&#xA;     // you can reject a `DioError` object eg: `handler.reject(dioError)`&#xA;    },&#xA;    onResponse:(response,handler) {&#xA;     // Do something with response data&#xA;     return handler.next(response); // continue&#xA;     // If you want to reject the request with a error message,&#xA;     // you can reject a `DioError` object eg: `handler.reject(dioError)` &#xA;    },&#xA;    onError: (DioError e, handler) {&#xA;     // Do something with response error&#xA;     return  handler.next(e);//continue&#xA;     // If you want to resolve the request with some custom data，&#xA;     // you can resolve a `Response` object eg: `handler.resolve(response)`.  &#xA;    }&#xA;));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple interceptor example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;class CustomInterceptors extends Interceptor {&#xA;  @override&#xA;  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {&#xA;    print(&#39;REQUEST[${options.method}] =&amp;gt; PATH: ${options.path}&#39;);&#xA;    return super.onRequest(options, handler);&#xA;  }&#xA;  @override&#xA;  void onResponse(Response response, ResponseInterceptorHandler handler) {&#xA;    print(&#39;RESPONSE[${response.statusCode}] =&amp;gt; PATH: ${response.requestOptions.path}&#39;);&#xA;    super.onResponse(response, handler);&#xA;  }&#xA;  @override&#xA;  Future onError(DioError err, ErrorInterceptorHandler handler) {&#xA;    print(&#39;ERROR[${err.response?.statusCode}] =&amp;gt; PATH: ${err.requestOptions.path}&#39;);&#xA;    return super.onError(err, handler);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resolve and reject the request&lt;/h3&gt; &#xA;&lt;p&gt;In all interceptors, you can interfere with their execution flow. If you want to resolve the request/response with some custom data，you can call &lt;code&gt;handler.resolve(Response)&lt;/code&gt;. If you want to reject the request/response with a error message, you can call &lt;code&gt;handler.reject(dioError)&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(InterceptorsWrapper(&#xA;  onRequest:(options, handler) {&#xA;   return handler.resolve(Response(requestOptions:options,data:&#39;fake data&#39;));&#xA;  },&#xA;));&#xA;Response response = await dio.get(&#39;/test&#39;);&#xA;print(response.data);//&#39;fake data&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;QueuedInterceptor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Interceptor&lt;/code&gt; can be executed concurrently, that is, all of the requests enter the interceptor at once, rather than executing sequentially. However, in some cases we expect that requests enter the interceptor sequentially like #590 。 Therefore, we need to provide a mechanism for sequential access（one by one） to interceptors and &lt;code&gt;QueuedInterceptor&lt;/code&gt; can solve this problem.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Because of security reasons, we need all the requests to set up a csrfToken in the header, if csrfToken does not exist, we need to request a csrfToken first, and then perform the network request, because the request csrfToken progress is asynchronous, so we need to execute this async request in request interceptor. The code is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  var dio = Dio();&#xA;  //  dio instance to request token&#xA;  var tokenDio = Dio();&#xA;  String? csrfToken;&#xA;  dio.options.baseUrl = &#39;http://www.dtworkroom.com/doris/1/2.0.0/&#39;;&#xA;  tokenDio.options = dio.options;&#xA;  dio.interceptors.add(QueuedInterceptorsWrapper(&#xA;    onRequest: (options, handler) {&#xA;      print(&#39;send request：path:${options.path}，baseURL:${options.baseUrl}&#39;);&#xA;      if (csrfToken == null) {&#xA;        print(&#39;no token，request token firstly...&#39;);&#xA;        tokenDio.get(&#39;/token&#39;).then((d) {&#xA;          options.headers[&#39;csrfToken&#39;] = csrfToken = d.data[&#39;data&#39;][&#39;token&#39;];&#xA;          print(&#39;request token succeed, value: &#39; + d.data[&#39;data&#39;][&#39;token&#39;]);&#xA;          print(&#xA;              &#39;continue to perform request：path:${options.path}，baseURL:${options.path}&#39;);&#xA;          handler.next(options);&#xA;        }).catchError((error, stackTrace) {&#xA;          handler.reject(error, true);&#xA;        });&#xA;      } else {&#xA;        options.headers[&#39;csrfToken&#39;] = csrfToken;&#xA;        return handler.next(options);&#xA;      }&#xA;    },&#xA;   ); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can clean the waiting queue by calling &lt;code&gt;clear()&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;p&gt;For complete codes click &lt;a href=&#34;https://github.com/flutterchina/dio/raw/develop/example/queued_interceptor_crsftoken.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Log&lt;/h3&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;LogInterceptor&lt;/code&gt; to print request/response log automaticlly, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(LogInterceptor(responseBody: false)); //开启请求日志&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Interceptor&lt;/h3&gt; &#xA;&lt;p&gt;You can custom interceptor by extending the &lt;code&gt;Interceptor/QueuedInterceptor&lt;/code&gt; class. There is an example that implementing a simple cache policy: &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/custom_cache_interceptor.dart&#34;&gt;custom cache interceptor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cookie Manager&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager&#34;&gt;dio_cookie_manager&lt;/a&gt; package is a cookie manager for Dio.&lt;/p&gt; &#xA;&lt;h2&gt;Handling Errors&lt;/h2&gt; &#xA;&lt;p&gt;When a error occurs, Dio will wrap the &lt;code&gt;Error/Exception&lt;/code&gt; to a &lt;code&gt;DioError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;try {&#xA;  //404&#xA;  await dio.get(&#39;https://wendux.github.io/xsddddd&#39;);&#xA;} on DioError catch (e) {&#xA;  // The request was made and the server responded with a status code&#xA;  // that falls out of the range of 2xx and is also not 304.&#xA;  if (e.response != null) {&#xA;    print(e.response.data)&#xA;    print(e.response.headers)&#xA;    print(e.response.requestOptions)&#xA;  } else {&#xA;    // Something happened in setting up or sending the request that triggered an Error&#xA;    print(e.requestOptions)&#xA;    print(e.message)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DioError scheme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; {&#xA;  /// Response info, it may be `null` if the request can&#39;t reach to&#xA;  /// the http server, for example, occurring a dns error, network is not available.&#xA;  Response? response;&#xA;  /// Request info.&#xA;  RequestOptions? request;&#xA;  /// Error descriptions.&#xA;  String message;&#xA;&#xA;  DioErrorType type;&#xA;  /// The original error/exception object; It&#39;s usually not null when `type`&#xA;  /// is DioErrorType.DEFAULT&#xA;  dynamic? error;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DioErrorType&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;enum DioErrorType {&#xA;  /// It occurs when url is opened timeout.&#xA;  connectTimeout,&#xA;&#xA;  /// It occurs when url is sent timeout.&#xA;  sendTimeout,&#xA;&#xA;  ///It occurs when receiving timeout.&#xA;  receiveTimeout,&#xA;&#xA;  /// When the server response, but with a incorrect status, such as 404, 503...&#xA;  response,&#xA;&#xA;  /// When the request is cancelled, dio will throw a error with this type.&#xA;  cancel,&#xA;&#xA;  /// Default error type, Some other Error. In this case, you can&#xA;  /// use the DioError.error if it is not null.&#xA;  other,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using application/x-www-form-urlencoded format&lt;/h2&gt; &#xA;&lt;p&gt;By default, Dio serializes request data(except String type) to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format instead, you can :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//Instance level&#xA;dio.options.contentType= Headers.formUrlEncodedContentType;&#xA;//or works once&#xA;dio.post(&#xA;  &#39;/info&#39;,&#xA;  data: {&#39;id&#39;: 5},&#xA;  options: Options(contentType: Headers.formUrlEncodedContentType),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending FormData&lt;/h2&gt; &#xA;&lt;p&gt;You can also send FormData with Dio, which will send data in the &lt;code&gt;multipart/form-data&lt;/code&gt;, and it supports uploading files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;  &#39;file&#39;: await MultipartFile.fromFile(&#39;./text.txt&#39;,filename: &#39;upload.txt&#39;)&#xA;});&#xA;response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/formdata.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple files upload&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to add multiple files to &lt;code&gt; FormData&lt;/code&gt;， the only difference is that upload keys are different for array types。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormData.fromMap({&#xA;  &#39;files&#39;: [&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The upload key eventually becomes &#39;files[]&#39;，This is because many back-end services add a middle bracket to key when they get an array of files. &lt;strong&gt;If you don&#39;t want “[]”&lt;/strong&gt;，you should create FormData as follows（Don&#39;t use &lt;code&gt;FormData.fromMap&lt;/code&gt;）:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData();&#xA;formData.files.addAll([&#xA;  MapEntry(&#39;files&#39;,&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;,filename: &#39;upload.txt&#39;),&#xA;  ),&#xA;  MapEntry(&#39;files&#39;,&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;,filename: &#39;upload.txt&#39;),&#xA;  ),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transformer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Transformer&lt;/code&gt; allows changes to the request/response data before it is sent/received to/from the server. This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, and &#39;PATCH&#39;. Dio has already implemented a &lt;code&gt;DefaultTransformer&lt;/code&gt;, and as the default &lt;code&gt;Transformer&lt;/code&gt;. If you want to customize the transformation of request/response data, you can provide a &lt;code&gt;Transformer&lt;/code&gt; by your self, and replace the &lt;code&gt;DefaultTransformer&lt;/code&gt; by setting the &lt;code&gt;dio.transformer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;In flutter&lt;/h3&gt; &#xA;&lt;p&gt;If you use dio in flutter development, you&#39;d better to decode json in background with [compute] function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;// Must be top-level function&#xA;_parseAndDecode(String response) {&#xA;  return jsonDecode(response);&#xA;}&#xA;&#xA;parseJson(String text) {&#xA;  return compute(_parseAndDecode, text);&#xA;}&#xA;&#xA;void main() {&#xA;  ...&#xA;  //Custom jsonDecodeCallback&#xA;  (dio.transformer as DefaultTransformer).jsonDecodeCallback = parseJson;&#xA;  runApp(MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Example&lt;/h3&gt; &#xA;&lt;p&gt;There is an example for &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/transfomer.dart&#34;&gt;customizing Transformer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HttpClientAdapter&lt;/h2&gt; &#xA;&lt;p&gt;HttpClientAdapter is a bridge between Dio and HttpClient.&lt;/p&gt; &#xA;&lt;p&gt;Dio implements standard and friendly API for developer.&lt;/p&gt; &#xA;&lt;p&gt;HttpClient: It is the real object that makes Http requests.&lt;/p&gt; &#xA;&lt;p&gt;We can use any HttpClient not just &lt;code&gt;dart:io:HttpClient&lt;/code&gt; to make the Http request. And all we need is providing a &lt;code&gt;HttpClientAdapter&lt;/code&gt;. The default HttpClientAdapter for Dio is &lt;code&gt;DefaultHttpClientAdapter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.httpClientAdapter = new DefaultHttpClientAdapter();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/adapter.dart&#34;&gt;Here&lt;/a&gt; is a simple example to custom adapter.&lt;/p&gt; &#xA;&lt;h3&gt;Using proxy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultHttpClientAdapter&lt;/code&gt; provide a callback to set proxy to &lt;code&gt;dart:io:HttpClient&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:dio/adapter.dart&#39;;&#xA;...&#xA;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client) {&#xA;  // config the http client&#xA;  client.findProxy = (uri) {&#xA;    //proxy all request to localhost:8888&#xA;    return &#39;PROXY localhost:8888&#39;;&#xA;  };&#xA;  // you can also create a new HttpClient to dio&#xA;  // return HttpClient();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/proxy.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Https certificate verification&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to verify the https certificate. Suppose the certificate format is PEM, the code like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String PEM=&#39;XXXXX&#39;; // certificate content&#xA;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate  = (client) {&#xA;  client.badCertificateCallback=(X509Certificate cert, String host, int port){&#xA;    if(cert.pem==PEM){ // Verify the certificate&#xA;      return true;&#xA;    }&#xA;    return false;&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way is creating a &lt;code&gt;SecurityContext&lt;/code&gt; when create the &lt;code&gt;HttpClient&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate  = (client) {&#xA;  SecurityContext sc = SecurityContext();&#xA;  //file is the path of certificate&#xA;  sc.setTrustedCertificates(file);&#xA;  HttpClient httpClient = HttpClient(context: sc);&#xA;  return httpClient;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this way, the format of certificate must be PEM or PKCS12.&lt;/p&gt; &#xA;&lt;h2&gt;Http2 support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter&#34;&gt;dio_http2_adapter&lt;/a&gt; package is a Dio HttpClientAdapter which support Http/2.0 .&lt;/p&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;p&gt;You can cancel a request using a &lt;em&gt;cancel token&lt;/em&gt;. One token can be shared with multiple requests. When a token&#39;s &lt;code&gt;cancel&lt;/code&gt; method invoked, all requests with this token will be cancelled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CancelToken token = CancelToken();&#xA;dio.get(url, cancelToken: token)&#xA;   .catchError((DioError err){&#xA;    if (CancelToken.isCancel(err)) {&#xA;      print(&#39;Request canceled! &#39;+ err.message)&#xA;    }else{&#xA;      // handle error.&#xA;    }&#xA;   });&#xA;// cancel the requests with &#34;cancelled&#34; message.&#xA;token.cancel(&#39;cancelled&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/cancel_request.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extends Dio class&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Dio&lt;/code&gt; is a abstract class with factory constructor，so we don&#39;t extend &lt;code&gt;Dio&lt;/code&gt; class directy. For this purpose, we can extend &lt;code&gt;DioForNative&lt;/code&gt; or &lt;code&gt;DioForBrowser&lt;/code&gt; instead, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:dio/native_imp.dart&#39;; //If in browser, import &#39;package:dio/browser_imp.dart&#39;&#xA;&#xA;class Http extends DioForNative {&#xA;  Http([BaseOptions options]):super(options){&#xA;    // do something&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also implement our Dio client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyDio with DioMixin implements Dio{&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;This open source project authorized by &lt;a href=&#34;https://flutterchina.club&#34;&gt;https://flutterchina.club&lt;/a&gt; , and the license is MIT.&lt;/p&gt; &#xA;&lt;h2&gt;Features and bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file feature requests and bugs at the &lt;a href=&#34;https://github.com/flutterchina/dio/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Buy a cup of coffee for me (Scan by wechat)：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0.3/docs/imgs/pay.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>VeryGoodOpenSource/dart_frog</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/VeryGoodOpenSource/dart_frog</id>
    <link href="https://github.com/VeryGoodOpenSource/dart_frog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, minimalistic backend framework for Dart 🎯&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/verygoodopensource/dart_frog#gh-dark-mode-only&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/assets/dart_frog_logo_white.png#gh-dark-mode-only&#34; alt=&#34;Dart Frog Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/verygoodopensource/dart_frog#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/assets/dart_frog_logo_black.png#gh-light-mode-only&#34; alt=&#34;Dart Frog Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/dart_frog.yaml&#34;&gt;&lt;img src=&#34;https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/dart_frog.yaml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/dart_frog.yaml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/packages/dart_frog/coverage_badge.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/dart_frog&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dart_frog.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/very_good_analysis&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-very_good_analysis-B22C89.svg?sanitize=true&#34; alt=&#34;style: very good analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/felangel/mason&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Ftinyurl.com%2Fmason-badge&#34; alt=&#34;Powered by Mason&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast, minimalistic backend framework for Dart 🎯&lt;/p&gt; &#xA;&lt;p&gt;Developed with 💙 by &lt;a href=&#34;https://verygood.ventures&#34;&gt;Very Good Ventures&lt;/a&gt; 🦄&lt;/p&gt; &#xA;&lt;h2&gt;Experimental 🚧&lt;/h2&gt; &#xA;&lt;p&gt;Dart Frog is an experimental project under development and should not be used in production at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start 🚀&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites 📝&lt;/h3&gt; &#xA;&lt;p&gt;In order to use Dart Frog you must have the &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;Dart SDK&lt;/a&gt; installed on your machine.&lt;/p&gt; &#xA;&lt;h3&gt;Installing 🧑‍💻&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 📦 Install the dart_frog cli from pub.dev&#xA;dart pub global activate dart_frog_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Project ✨&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;dart_frog create&lt;/code&gt; command to create a new project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 🚀 Create a new project called &#34;my_project&#34;&#xA;dart_frog create my_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start the Dev Server 🏁&lt;/h3&gt; &#xA;&lt;p&gt;Next, open the newly created project and start the dev server via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 🏁 Start the dev server&#xA;dart_frog dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a Production Build 📦&lt;/h3&gt; &#xA;&lt;p&gt;Create a production build which includes a &lt;code&gt;DockerFile&lt;/code&gt; so that you can deploy anywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 📦 Create a production build&#xA;dart_frog build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Goals 🎯&lt;/h2&gt; &#xA;&lt;p&gt;Dart Frog is built on top of &lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/packages/mason&#34;&gt;mason&lt;/a&gt; and is inspired by many tools including &lt;a href=&#34;https://remix.run&#34;&gt;remix.run&lt;/a&gt;, &lt;a href=&#34;https://nextjs.org&#34;&gt;next.js&lt;/a&gt;, and &lt;a href=&#34;https://expressjs.com&#34;&gt;express.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of Dart Frog is to help developers effectively build backends in Dart. Currently, Dart Frog is focused on optimizing the process of building backends which aggregate, compose, and normalize data from multiple sources.&lt;/p&gt; &#xA;&lt;p&gt;Dart Frog provides a simple core with a small API surface area in order to reduce the learning curve and ramp-up time for developers. In addition, Dart Frog is intended to help Flutter/Dart developers maximize their productivity by having a unified tech stack that enables sharing tooling, models, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Feature Set ✨&lt;/h2&gt; &#xA;&lt;p&gt;✅ Hot Reload ⚡️&lt;/p&gt; &#xA;&lt;p&gt;✅ Dart Dev Tools ⚙️&lt;/p&gt; &#xA;&lt;p&gt;✅ File System Routing 🚏&lt;/p&gt; &#xA;&lt;p&gt;✅ Index Routes 🗂&lt;/p&gt; &#xA;&lt;p&gt;✅ Nested Routes 🪆&lt;/p&gt; &#xA;&lt;p&gt;✅ Dynamic Routes 🌓&lt;/p&gt; &#xA;&lt;p&gt;✅ Middleware 🍔&lt;/p&gt; &#xA;&lt;p&gt;✅ Dependency Injection 💉&lt;/p&gt; &#xA;&lt;p&gt;✅ Production Builds 👷‍♂️&lt;/p&gt; &#xA;&lt;p&gt;✅ Docker 🐳&lt;/p&gt; &#xA;&lt;p&gt;🚧 Generated Dart Client Package 📦&lt;/p&gt; &#xA;&lt;p&gt;🚧 Generated API Documentation 📔&lt;/p&gt; &#xA;&lt;h2&gt;Documentation 📝&lt;/h2&gt; &#xA;&lt;h3&gt;Routes 🚏&lt;/h3&gt; &#xA;&lt;p&gt;In Dart Frog, a route consists of an &lt;code&gt;onRequest&lt;/code&gt; function (called a route handler) exported from a &lt;code&gt;.dart&lt;/code&gt; file in the &lt;code&gt;routes&lt;/code&gt; directory. Each endpoint is associated with a routes file based on its file name. Files named, &lt;code&gt;index.dart&lt;/code&gt; will correspond to a &lt;code&gt;/&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you create &lt;code&gt;routes/hello.dart&lt;/code&gt; that exports an &lt;code&gt;onRequest&lt;/code&gt; method like below, it will be accessible at &lt;code&gt;/hello&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response(body: &#39;Hello World&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All route handlers have access to a &lt;code&gt;RequestContext&lt;/code&gt; which can be used to access the incoming request as well as dependencies provided to the request context (see middleware).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  // Access the incoming request.&#xA;  final request = context.request;&#xA;&#xA;  // Return a response.&#xA;  return Response(body: &#39;Hello World&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can customize the status code of the response via the &lt;code&gt;statusCode&lt;/code&gt; parameter on the &lt;code&gt;Response&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response(statusCode: 204);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, we can return JSON via the &lt;code&gt;Response.json&lt;/code&gt; constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response.json(&#xA;    body: &amp;lt;String, dynamic&amp;gt;{&#39;hello&#39;: &#39;world!&#39;},&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route handlers can be synchronous or asynchronous. To convert the above route handlers to async, we just need to update the return type from &lt;code&gt;Response&lt;/code&gt; to &lt;code&gt;Future&amp;lt;Response&amp;gt;&lt;/code&gt;. We can add the &lt;code&gt;async&lt;/code&gt; keyword in order to &lt;code&gt;await&lt;/code&gt; futures within our handler before returning a &lt;code&gt;Response&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Future&amp;lt;Response&amp;gt; onRequest(RequestContext context) async {&#xA;  final result = await _someFuture();&#xA;  return Response(body: &#39;Result is: $result!&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dynamic Routes 🌓&lt;/h4&gt; &#xA;&lt;p&gt;Dart Frog supports dynamic routes. For example, if you create a file called &lt;code&gt;routes/posts/[id].dart&lt;/code&gt;, then it will be accessible at &lt;code&gt;/posts/1&lt;/code&gt;, &lt;code&gt;/posts/2&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Routing parameters are forwarded to the &lt;code&gt;onRequest&lt;/code&gt; method as seen below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context, String id) {&#xA;  return Response(body: &#39;post id: $id&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware 🍔&lt;/h3&gt; &#xA;&lt;p&gt;Middleware in Dart Frog allows you to execute code before and after a request is processed. You can modify the inbound request and outbound responses, provide dependencies, and more!&lt;/p&gt; &#xA;&lt;p&gt;In Dart Frog, a piece of middleware consists of a &lt;code&gt;middleware&lt;/code&gt; function exported from a &lt;code&gt;_middleware.dart&lt;/code&gt; file within a subdirectory of the &lt;code&gt;routes&lt;/code&gt; folder. There can only ever be once piece of middleware per route directory with &lt;code&gt;routes/_middleware.dart&lt;/code&gt; being middleware that is executed for all inbound requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Handler middleware(Handler handler) {&#xA;  return (context) async {&#xA;    // Execute code before request is handled.&#xA;&#xA;    // Forward the request to the respective handler.&#xA;    final response = await handler(context);&#xA;&#xA;    // Execute code after request is handled.&#xA;&#xA;    // Return a response.&#xA;    return response;&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can chain built-in middleware, such as the &lt;code&gt;requestLogger&lt;/code&gt; middleware via the &lt;code&gt;use&lt;/code&gt; API. For example, if we create &lt;code&gt;routes/_middleware.dart&lt;/code&gt; with the following contents, we will automatically log all requests to our server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Handler middleware(Handler handler) {&#xA;  return handler.use(requestLogger());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dependency Injection 💉&lt;/h4&gt; &#xA;&lt;p&gt;Middleware can also be used to provide dependencies to a &lt;code&gt;RequestContext&lt;/code&gt; via a &lt;code&gt;provider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;provider&lt;/code&gt; is a type of middleware that can create and provide an instance of type &lt;code&gt;T&lt;/code&gt; to the request context. The &lt;code&gt;create&lt;/code&gt; callback is called lazily and the injected &lt;code&gt;RequestContext&lt;/code&gt; can be used to perform additional lookups to access values provided upstream.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we&#39;ll use a &lt;code&gt;provider&lt;/code&gt; to inject a &lt;code&gt;String&lt;/code&gt; into our request context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Handler middleware(Handler handler) {&#xA;  return handler&#xA;      .use(requestLogger())&#xA;      .use(provider&amp;lt;String&amp;gt;((context) =&amp;gt; &#39;Welcome to Dart Frog!&#39;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can later access the provided via from within a route handler using &lt;code&gt;context.read&amp;lt;T&amp;gt;()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  final greeting = context.read&amp;lt;String&amp;gt;();&#xA;  return Response(body: greeting);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing 🧪&lt;/h3&gt; &#xA;&lt;p&gt;In Dart Frog, we can unit test our route handlers and middleware effectively because they are plain functions.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can test our route handler above using &lt;code&gt;package:test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:io&#39;;&#xA;&#xA;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;import &#39;package:mocktail/mocktail.dart&#39;;&#xA;import &#39;package:test/test.dart&#39;;&#xA;&#xA;import &#39;../../routes/index.dart&#39; as route;&#xA;&#xA;class _MockRequestContext extends Mock implements RequestContext {}&#xA;&#xA;void main() {&#xA;  group(&#39;GET /&#39;, () {&#xA;    test(&#39;responds with a 200 and greeting.&#39;, () async {&#xA;      const greeting = &#39;Hello World!&#39;;&#xA;      final context = _MockRequestContext();&#xA;      when(() =&amp;gt; context.read&amp;lt;String&amp;gt;()).thenReturn(greeting);&#xA;      final response = route.onRequest(context);&#xA;      expect(response.statusCode, equals(HttpStatus.ok));&#xA;      expect(response.body(), completion(equals(greeting)));&#xA;    });&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above test, we&#39;re using &lt;code&gt;package:mocktail&lt;/code&gt; to create a mock &lt;code&gt;RequestContext&lt;/code&gt; and stub the return value when calling &lt;code&gt;context.read&amp;lt;String&amp;gt;()&lt;/code&gt;. Then, all we need to do is call &lt;code&gt;onRequest&lt;/code&gt; with the mocked context and we can assert that the response is what we expect. In this case, we&#39;re checking the statusCode and response body to ensure that the response is a 200 with the provided greeting.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Resources 📚&lt;/h3&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/tree/main/example&#34;&gt;example&lt;/a&gt; and our &lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/raw/main/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;💡 Fun Fact: the &lt;a href=&#34;https://dart.dev/tools/dart2js&#34;&gt;dart2js&lt;/a&gt; compiler &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/2194&#34;&gt;used to be called frog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rrousselGit/riverpod</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/rrousselGit/riverpod</id>
    <link href="https://github.com/rrousselGit/riverpod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple way to access state while robust and testable.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/rrousselGit/river_pod/actions&#34;&gt;&lt;img src=&#34;https://github.com/rrousselGit/river_pod/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/rrousselgit/river_pod&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rrousselgit/river_pod/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rrousselgit/river_pod&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/rrousselgit/river_pod.svg?style=flat&amp;amp;logo=github&amp;amp;colorB=deeppink&amp;amp;label=stars&#34; alt=&#34;Star on Github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-purple.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Bbumvej&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/765557403865186374.svg?logo=discord&amp;amp;color=blue&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.netlify.com&#34;&gt; &lt;img src=&#34;https://www.netlify.com/img/global/badges/netlify-color-accent.svg?sanitize=true&#34; alt=&#34;Deploys by Netlify&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/rrousselGit/river_pod/raw/master/resources/icon/Facebook%20Cover%20A.png?raw=true&#34; width=&#34;100%&#34; alt=&#34;Riverpod&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A state-management library that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;catches programming errors at compile time rather than at runtime&lt;/li&gt; &#xA; &lt;li&gt;removes nesting for listening/combining objects&lt;/li&gt; &#xA; &lt;li&gt;ensures that the code is testable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;riverpod&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/riverpod&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/riverpod.svg?label=riverpod&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;flutter_riverpod&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_riverpod&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/riverpod.svg?label=flutter_riverpod&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hooks_riverpod&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/hooks_riverpod&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/riverpod.svg?label=hooks_riverpod&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;This project can be considered as a rewrite of &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; to make improvements that would be otherwise impossible.&lt;/p&gt; &#xA;&lt;p&gt;For learning how to use &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt;, see its documentation: &lt;a href=&#34;https://riverpod.dev&#34;&gt;https://riverpod.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Long story short:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Declare your providers as global variables:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final counterProvider = StateNotifierProvider((ref) {&#xA;  return Counter();&#xA;});&#xA;&#xA;class Counter extends StateNotifier&amp;lt;int&amp;gt; {&#xA;  Counter(): super(0);&#xA;&#xA;  void increment() =&amp;gt; state++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use them inside your widgets in a compile time safe way. No runtime exceptions!&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example extends ConsumerWidget {&#xA;  @override&#xA;  Widget build(BuildContext context, WidgetRef ref) {&#xA;    final count = ref.watch(counterProvider);&#xA;    return Text(count.toString());&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#FAQ&#34;&gt;FAQ&lt;/a&gt; if you have questions about what this means for &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;With the release of version 1.0.0, the syntax for interacting with providers changed.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://riverpod.dev/docs/migration/0.14.0_to_1.0.0/&#34;&gt;the migration guide&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Index&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#migration&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#index&#34;&gt;Index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#why-another-project-when-provider-already-exists&#34;&gt;Why another project when provider already exists?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#is-it-safe-to-use-in-production&#34;&gt;Is it safe to use in production?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#will-this-get-merged-with-provider-at-some-point&#34;&gt;Will this get merged with provider at some point?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#will-provider-be-deprecatedstop-being-supported&#34;&gt;Will provider be deprecated/stop being supported?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/riverpod/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; is a simplification of &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt;s, then &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; is a reimplementation of &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt;s from scratch.&lt;/p&gt; &#xA;&lt;p&gt;It is very similar to &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; in principle, but also has major differences as an attempt to fix the common problems that &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; face.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; has multiple goals. First, it inherits the goals of &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Being able to safely create, observe and dispose states without having to worry about losing the state on widget rebuild.&lt;/li&gt; &#xA; &lt;li&gt;Making our objects visible in Flutter&#39;s devtool by default.&lt;/li&gt; &#xA; &lt;li&gt;Testable and composable&lt;/li&gt; &#xA; &lt;li&gt;Improve the readability of &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt;s when we have multiple of them (which would naturally lead to a deeply nested widget tree).&lt;/li&gt; &#xA; &lt;li&gt;Make apps more scalable with a unidirectional data flow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From there, &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; goes a few steps beyond:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reading objects is now &lt;strong&gt;compile-safe&lt;/strong&gt;. No more runtime exception.&lt;/li&gt; &#xA; &lt;li&gt;It makes the &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; pattern more flexible, which allows supporting commonly requested features like: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Being able to have multiple providers of the same type.&lt;/li&gt; &#xA;   &lt;li&gt;Disposing the state of a provider when it is no longer used.&lt;/li&gt; &#xA;   &lt;li&gt;Have computed states&lt;/li&gt; &#xA;   &lt;li&gt;Making a provider private.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Simplifies complex object graphs. It is easier to depend on asynchronous state.&lt;/li&gt; &#xA; &lt;li&gt;Makes the pattern independent from Flutter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are achieved by no longer using &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt;s. Instead, &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; implements its own mechanism that works in a similar fashion.&lt;/p&gt; &#xA;&lt;p&gt;For learning how to use &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt;, see its documentation: &lt;a href=&#34;https://riverpod.dev&#34;&gt;https://riverpod.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed!&lt;/p&gt; &#xA;&lt;p&gt;Here is a curated list of how you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs and scenarios that are difficult to implement&lt;/li&gt; &#xA; &lt;li&gt;Report parts of the documentation that are unclear&lt;/li&gt; &#xA; &lt;li&gt;Fix typos/grammar mistakes&lt;/li&gt; &#xA; &lt;li&gt;Update the documentation / add examples&lt;/li&gt; &#xA; &lt;li&gt;Implement new features by making a pull-request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why another project when provider already exists?&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; is largely used and well accepted by the community, it is not perfect either.&lt;/p&gt; &#xA;&lt;p&gt;People regularly file issues or ask questions about some problems they face, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Why do I have a &lt;code&gt;ProviderNotFoundException&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;How can I automatically dispose my state when not used anymore?&lt;/li&gt; &#xA; &lt;li&gt;How to make a provider that depends on other (potentially complex) providers?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are legitimate problems, and I believe that something can be improved to fix those.&lt;/p&gt; &#xA;&lt;p&gt;The issue is, these problems are deeply rooted in how &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; works, and fixing those problems is likely impossible without drastic changes to the mechanism of &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In a way, if &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; is a candle then &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; is a lightbulb. They have very similar usages, but we cannot create a lightbulb by improving our candle.&lt;/p&gt; &#xA;&lt;h3&gt;Is it safe to use in production?&lt;/h3&gt; &#xA;&lt;p&gt;Yes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; is stable and actively maintained.&lt;/p&gt; &#xA;&lt;h3&gt;Will this get merged with provider at some point?&lt;/h3&gt; &#xA;&lt;p&gt;No. At least not until it is proven that the community likes &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt; and that it doesn&#39;t cause more problems than it solves.&lt;/p&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; and this project have a lot in common, they do have some major differences. Differences big enough that it would be a large breaking change for users of &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt; to migrate &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Considering that, separating both projects initially sounds like a better compromise.&lt;/p&gt; &#xA;&lt;h3&gt;Will provider be deprecated/stop being supported?&lt;/h3&gt; &#xA;&lt;p&gt;Not in the short term, no.&lt;/p&gt; &#xA;&lt;p&gt;However, a migration tool is planned to help assist migration from provider to &lt;a href=&#34;https://github.com/rrousselGit/river_pod&#34;&gt;Riverpod&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>juicycleff/flutter-unity-view-widget</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/juicycleff/flutter-unity-view-widget</id>
    <link href="https://github.com/juicycleff/flutter-unity-view-widget" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embeddable unity game engine view for Flutter. Advance demo here https://github.com/juicycleff/flutter-unity-arkit-demo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_unity_widget&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_unity_widget/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_unity_widget.svg?style=flat-square&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/juicycleff/flutter-unity-view-widget.svg?style=flat-square&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/juicycleff/flutter-unity-view-widget.svg?style=social&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/juicycleff/flutter-unity-view-widget.svg?style=social&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/flutter-unity/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/flutter-unity/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter unity 3D widget for embedding unity in flutter. Now you can make awesome gamified features of your app in Unity and get it rendered in a Flutter app both in fullscreen and embeddable mode. Works great on &lt;code&gt;Android, iPad OS, iOS, Web, with Windows&lt;/code&gt; nearing completion. There are now two unity app examples in the unity folder, one with the default scene and another based on Unity AR foundation samples. &lt;br&gt; Note: Supports only Unity 2019.4.3 or later. UnityFramework does not support emulator. Note: Please use OpenGLES3 as Graphics API only for now (Android only). &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notice&lt;/h2&gt; &#xA;&lt;p&gt;Need me to respond, tag me &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/www.github.com/juicycleff&#34;&gt;Rex Isaac Raphael&lt;/a&gt;. Always use the matching FUW unitypackage for the unity version your are using.&lt;/p&gt; &#xA;&lt;p&gt;This plugin expects you to atleast know how to use Unity Engine. If you have issues with how unity widget is presented, you can please modify your unity project build settings as you seem fit.&lt;/p&gt; &#xA;&lt;p&gt;Moving forward, versioning of the package will change to match unity releases after proper test. Mind you this does not mean the package is not compatible with other versions, it just mean it&#39;s been tested to work with a unity version.&lt;/p&gt; &#xA;&lt;p&gt;Windows coming soon.&lt;/p&gt; &#xA;&lt;p&gt;^2022.1.0+5 supports Flutter 3.0.0 and can only work with &lt;code&gt;PlatformViewSurface&lt;/code&gt; for now. The implications of this is you have to pass &lt;code&gt;useAndroidViewSurface: true&lt;/code&gt; to UnityWidget. You can track this &lt;a href=&#34;https://github.com/flutter/flutter/issues/103630&#34;&gt;issue&lt;/a&gt;. Currently working on supporting AndroidView.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First depend on the library by adding this to your packages &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flutter 3.0.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  flutter_unity_widget: ^2022.1.1+3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pre Flutter 3.0.0 (This version will gradually be deprecated)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  flutter_unity_widget: ^2022.1.0+7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now inside your Dart code you can import it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_unity_widget/flutter_unity_widget.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;30 fps gifs, showcasing communication between Flutter and Unity:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/juicycleff/flutter-unity-view-widget/raw/master/files/preview_android.gif?raw=true&#34; alt=&#34;gif&#34;&gt; &lt;img src=&#34;https://github.com/juicycleff/flutter-unity-view-widget/raw/master/files/preview_ios.gif?raw=true&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;For this, there is also a video tutorial, which you can find a &lt;a href=&#34;https://www.youtube.com/watch?v=exNPmv_7--Q&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the tutorial below, there are steps specific to each platform, denoted by a &lt;span&gt;ℹ&lt;/span&gt; icon followed by the platform name (Android or iOS). You can click on its icon to expand it.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;An existing Flutter project (if there is none, you can &lt;a href=&#34;https://flutter.dev/docs/get-started/test-drive#create-app&#34;&gt;create a new one&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An existing Unity project (if there is none, you can &lt;a href=&#34;https://learn.unity.com/tutorial/create-your-first-unity-project&#34;&gt;create a new one&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/unitypackages/fuw-2022.1.1.unitypackage&#34;&gt;&lt;code&gt;FlutterUnityPackage.unitypackage&lt;/code&gt;&lt;/a&gt; file (you can access the Unity packages in the &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/tree/master/scripts&#34;&gt;&lt;em&gt;scripts&lt;/em&gt;&lt;/a&gt; folder too) Remeber to always check the match unitypackage for your project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;NDK&lt;/h4&gt; &#xA;&lt;p&gt;If your project requires Android NDK, you have to setup following:&lt;/p&gt; &#xA;&lt;p&gt;Your android project needs to know the path of the NDK Unity uses. You can find the path to the NDK under &lt;code&gt;Preferences -&amp;gt; External Tools&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/files/ndkPath.png&#34; alt=&#34;NDK Path&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copy the path by right click and paste the path here in your &lt;code&gt;android/local.properties&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;    ndk.dir=/Applications/Unity/Hub/Editor/2020.3.19f1/PlaybackEngines/AndroidPlayer/NDK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You don&#39;t need to tell your Android App in your &lt;code&gt;app/build.gradle&lt;/code&gt; the NDK version or other NDK settings. It&#39;s all connected to Unity now.&lt;/p&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a folder named &lt;em&gt;unity&lt;/em&gt; and move the Unity project into there.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The expected path is &lt;em&gt;unity/&lt;strong&gt;project-name&lt;/strong&gt;/...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Copy the &lt;em&gt;FlutterUnityPackage.unitypackage&lt;/em&gt; file into the Unity project folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The expected path is &lt;em&gt;unity/&lt;strong&gt;project-name&lt;/strong&gt;/FlutterUnityPackage.unitypackage&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Using Unity, open the Unity project, go to &lt;strong&gt;File &amp;gt; Build Settings &amp;gt; Player Settings&lt;/strong&gt; and change the following under the &lt;strong&gt;Configuration&lt;/strong&gt; section:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;strong&gt;Scripting Backend&lt;/strong&gt;, change to IL2CPP&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;strong&gt;Target Architectures&lt;/strong&gt;, select ARMv7 and ARM64&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;ℹ&lt;/span&gt; &lt;b&gt;iOS&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Select the appropriate SDK on &lt;strong&gt;Target SDK&lt;/strong&gt; depending on where you want to test or run your app (simulator or physical device).&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/files/Screenshot%202019-03-27%2007.31.55.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Be sure you have at least one scene added to your build.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;strong&gt;Assets &amp;gt; Import Package &amp;gt; Custom Package&lt;/strong&gt; and select the &lt;em&gt;FlutterUnityPackage.unitypackage&lt;/em&gt; file. Click on &lt;strong&gt;Import&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After importing, click on &lt;strong&gt;Flutter&lt;/strong&gt; and select the &lt;strong&gt;Export Android&lt;/strong&gt; option (will export to &lt;em&gt;android/unityLibrary&lt;/em&gt;) or the &lt;strong&gt;Export iOS&lt;/strong&gt; option (will export to &lt;em&gt;ios/UnityLibrary&lt;/em&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Do not use &lt;strong&gt;Flutter &amp;gt; Export &lt;em&gt;Platform&lt;/em&gt; plugin&lt;/strong&gt; as it was specially added to work with &lt;a href=&#34;https://github.com/juicycleff/flutter_unity_cli&#34;&gt;&lt;code&gt;flutter_unity_cli&lt;/code&gt;&lt;/a&gt; for larger projects.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/juicycleff/flutter-unity-view-widget/raw/master/files/Screenshot%202019-03-27%2008.13.08.png?raw=true&#34; width=&#34;400&#34;&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;ℹ&lt;/span&gt; &lt;b&gt;Android&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The export script automatically sets things up for you, so you don&#39;t have to do anything for Android. But if you want to manually set it up, continue.&lt;/p&gt; &#xA; &lt;p&gt;6.1. Open the &lt;em&gt;android/settings.gradle&lt;/em&gt; file and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    include &#34;:unityLibrary&#34;&#xA;+    project(&#34;:unityLibrary&#34;).projectDir = file(&#34;./unityLibrary&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;6.2. Open the &lt;em&gt;android/app/build.gradle&lt;/em&gt; file and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;     dependencies {&#xA;+        implementation project(&#39;:unityLibrary&#39;)&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;6.3. If you need to build a release package, open the &lt;em&gt;android/app/build.gradle&lt;/em&gt; file and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;     buildTypes {&#xA;         release {&#xA;             signingConfig signingConfigs.debug&#xA;         }&#xA;+        debug {&#xA;+            signingConfig signingConfigs.debug&#xA;+        }&#xA;+        profile {&#xA;+            signingConfig signingConfigs.debug&#xA;+        }&#xA;+        innerTest {&#xA;+            matchingFallbacks = [&#39;debug&#39;, &#39;release&#39;]&#xA;+        }&#xA;+   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;The code above use the &lt;code&gt;debug&lt;/code&gt; signConfig for all buildTypes, which can be changed as you well if you need specify signConfig.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;6.4. If you use &lt;code&gt;minifyEnabled true&lt;/code&gt; in your &lt;em&gt;android/app/build.gradle&lt;/em&gt; file, open the &lt;em&gt;android/unityLibrary/proguard-unity.txt&lt;/em&gt; and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    -keep class com.xraph.plugin.** {*;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;6.5. If you want Unity in it&#39;s own activity as an alternative, open the &lt;em&gt;android/app/src/main/AndroidManifest.xml&lt;/em&gt; and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    &amp;lt;activity&#xA;+        android:name=&#34;com.xraph.plugin.flutter_unity_widget.OverrideUnityActivity&#34;&#xA;+        android:theme=&#34;@style/UnityThemeSelector&#34;&#xA;+        android:screenOrientation=&#34;fullSensor&#34;&#xA;+        android:launchMode=&#34;singleTask&#34;&#xA;+        android:configChanges=&#34;mcc|mnc|locale|touchscreen|keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize|fontScale|layoutDirection|density&#34;&#xA;+        android:hardwareAccelerated=&#34;false&#34;&#xA;+        android:process=&#34;:Unity&#34;&amp;gt;&#xA;+    &amp;lt;meta-data android:name=&#34;com.xraph.plugin.flutter_unity_widget.OverrideUnityActivity&#34; android:value=&#34;true&#34; /&amp;gt;&#xA;+    &amp;lt;/activity&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;ℹ&lt;/span&gt; &lt;b&gt;iOS&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;6.1. Open the &lt;em&gt;ios/Runner.xcworkspace&lt;/em&gt; (workspace, not the project) file in Xcode, right-click on the Navigator (not on an item), go to &lt;strong&gt;Add Files to &#34;Runner&#34;&lt;/strong&gt; and add the &lt;em&gt;ios/UnityLibrary/Unity-Iphone.xcodeproj&lt;/em&gt; file.&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/files/workspace.png&#34; width=&#34;400&#34;&gt; &#xA; &lt;p&gt;6.2. (Optional) Select the &lt;em&gt;Unity-iPhone/Data&lt;/em&gt; folder and change the Target Membership for Data folder to UnityFramework.&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/files/change_target_membership_data_folder.png&#34; width=&#34;400&#34;&gt; &#xA; &lt;p&gt;6.3.1. If you&#39;re using Swift, open the &lt;em&gt;ios/Runner/AppDelegate.swift&lt;/em&gt; file and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;     import UIKit&#xA;     import Flutter&#xA;+    import flutter_unity_widget&#xA;&#xA;     @UIApplicationMain&#xA;     @objc class AppDelegate: FlutterAppDelegate {&#xA;         override func application(&#xA;             _ application: UIApplication,&#xA;             didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?&#xA;         ) -&amp;gt; Bool {&#xA;+            InitUnityIntegrationWithOptions(argc: CommandLine.argc, argv: CommandLine.unsafeArgv, launchOptions)&#xA;&#xA;             GeneratedPluginRegistrant.register(with: self)&#xA;             return super.application(application, didFinishLaunchingWithOptions: launchOptions)&#xA;         }&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;6.3.2. If you&#39;re using Objective-C, open the &lt;em&gt;ios/Runner/main.m&lt;/em&gt; file and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+    #import &#34;flutter_unity_widget.swift.h&#34;&#xA;&#xA;     int main(int argc, char * argv[]) {&#xA;          @autoreleasepool {&#xA;+             InitUnityIntegration(argc, argv);&#xA;              return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));&#xA;          }&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;6.4. Open the &lt;em&gt;ios/Runner/Info.plist&lt;/em&gt; and change the following:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;     &amp;lt;dict&amp;gt;&#xA;+        &amp;lt;key&amp;gt;io.flutter.embedded_views_preview&amp;lt;/key&amp;gt;&#xA;+        &amp;lt;string&amp;gt;YES&amp;lt;/string&amp;gt;&#xA;     &amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;6.5. Add the &lt;em&gt;UnityFramework.framework&lt;/em&gt; file as a library to the Runner project.&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/files/libraries.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Setup AR Foundation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/juicycleff/flutter-unity-view-widget/raw/master/files/ar-demo.gif?raw=true&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Check out the Unity AR Foundation samples in the &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-arkit-demo&#34;&gt;demo repository&lt;/a&gt;. This repository is not guaranteed to be up-to-date with the latest &lt;code&gt;flutter-unity-view-widget&lt;/code&gt; master. Make sure to follow the steps listed below for setting up AR Foundation on iOS and Android in your project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;ℹ&lt;/span&gt; &lt;b&gt;Android&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol start=&#34;7&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open the &lt;em&gt;lib/&lt;strong&gt;architecture&lt;/strong&gt;/&lt;/em&gt; folder and check if there are both &lt;em&gt;libUnityARCore.so&lt;/em&gt; and &lt;em&gt;libarpresto_api.so&lt;/em&gt; files. There seems to be a bug where a Unity export does not include all lib files. If they are missing, use Unity to build a standalone .apk of your AR project, unzip the resulting apk, and copy over the missing .lib files to the &lt;code&gt;unityLibrary&lt;/code&gt; module.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Repeat steps 6.1 and 6.2 for Android, replacing &lt;code&gt;unityLibrary&lt;/code&gt; with &lt;code&gt;arcore_client&lt;/code&gt;, &lt;code&gt;unityandroidpermissions&lt;/code&gt; and &lt;code&gt;UnityARCore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;When using &lt;code&gt;UnityWidget&lt;/code&gt; in Flutter, set &lt;code&gt;fullscreen: false&lt;/code&gt; to disable fullscreen.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;span&gt;ℹ&lt;/span&gt; &lt;b&gt;iOS&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol start=&#34;7&#34;&gt; &#xA;  &lt;li&gt;Open the &lt;em&gt;ios/Runner/Info.plist&lt;/em&gt; and change the following:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;     &amp;lt;dict&amp;gt;&#xA;+        &amp;lt;key&amp;gt;Privacy - Camera Usage Description&amp;lt;/key&amp;gt;&#xA;+        &amp;lt;string&amp;gt;$(PRODUCT_NAME) uses Cameras&amp;lt;/string&amp;gt;&#xA;     &amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Setup Vuforia&lt;/h4&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/PiotrxKolasinski&#34;&gt;@PiotrxKolasinski&lt;/a&gt; for writing down the exact steps:&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;android/unityLibrary/build.gradle&lt;/em&gt; file and change the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    implementation(name: &#39;VuforiaWrapper&#39;, ext: &#39;aar&#39;)&#xA;+    implementation project(&#39;:VuforiaWrapper&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Using Android Studio, go to &lt;strong&gt;File &amp;gt; Open&lt;/strong&gt; and select the &lt;em&gt;android/&lt;/em&gt; folder. A new project will open.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Don&#39;t worry if the error message &#34;Project with path &#39;:VuforiaWrapper&#39; could not be found in project &#39;:unityLibrary&#39;&#34; appears. The next step will fix it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;In this new project window, go to &lt;strong&gt;File &amp;gt; New &amp;gt; New Module &amp;gt; Import .JAR/.AAR package&lt;/strong&gt; and select the &lt;em&gt;android/unityLibrary/libs/VuforiaWrapper.aar&lt;/em&gt; file. A new folder named &lt;em&gt;VuforiaWrapper&lt;/em&gt; will be created inside &lt;em&gt;android/&lt;/em&gt;. You can now close this new project window.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Communicating&lt;/h2&gt; &#xA;&lt;h3&gt;Flutter-Unity&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;On a &lt;code&gt;UnityWidget&lt;/code&gt; widget, get the &lt;code&gt;UnityWidgetController&lt;/code&gt; received by the &lt;code&gt;onUnityCreated&lt;/code&gt; callback.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the method &lt;code&gt;postMessage&lt;/code&gt; to send a string, using the GameObject name and the name of a behaviour method that should be called.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Unity-Flutter&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the GameObject that should execute the communication and go to &lt;strong&gt;Inspector &amp;gt; Add Component &amp;gt; Unity Message Manager&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img src=&#34;https://i.stack.imgur.com/1gSOy.png&#34; width=&#34;400&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new &lt;code&gt;MonoBehaviour&lt;/code&gt; subclass and add to the same GameObject as a script.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On this new behaviour, call &lt;code&gt;GetComponent&amp;lt;UnityMessageManager&amp;gt;()&lt;/code&gt; to get a &lt;code&gt;UnityMessageManager&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the method &lt;code&gt;SendMessageToFlutter&lt;/code&gt; to send a string. Receive this message using the &lt;code&gt;onUnityMessage&lt;/code&gt; callback of a &lt;code&gt;UnityWidget&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; Unity&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;InvalidOperationException: The build target does not support build appending.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;unity/&lt;strong&gt;project-name&lt;/strong&gt;/Assets/FlutterUnityIntegration/Editor/Build.cs&lt;/em&gt; file.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;1.1. On line 48, change the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    var options = BuildOptions.AcceptExternalModificationsToPlayer;&#xA;+    var options = BuildOptions.AllowDebugging;&#xA;+    EditorUserBuildSettings.exportAsGoogleAndroidProject = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;1.2. On line 115, change the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    var options = BuildOptions.AcceptExternalModificationsToPlayer;&#xA;+    var options = BuildOptions.AllowDebugging;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; Android Studio&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;minSdkVersion XX cannot be smaller than version 19 declared in library &#xA;    \ [:flutter_unity_widget] .../AndroidManifest.xml as the library might be using &#xA;    \ APIs not available in XX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;android/app/build.gradle&lt;/em&gt; file and change the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    minSdkVersion XX&#xA;+    minSdkVersion 19&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;: Android Studio&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;e: .../FlutterUnityWidgetBuilder.kt: (15, 42): Expecting a parameter declaration&#xA;e: .../FlutterUnityWidgetBuilder.kt: (23, 25): Expecting an argument&#xA;e: .../FlutterUnityWidgetController.kt: (22, 44): Expecting a parameter declaration&#xA;e: .../FlutterUnityWidgetFactory.kt: (13, 58): Expecting a parameter declaration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;android/build.gradle&lt;/em&gt; file and change the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    ext.kotlin_version = &#39;1.3.50&#39;&#xA;+    ext.kotlin_version = &#39;1.4.31&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Location:&lt;/strong&gt; Android Studio&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Unable to find a matching variant of project :unityLibrary:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;em&gt;android/app/build.gradle&lt;/em&gt; file and change the following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;     lintOptions {&#xA;         disable &#39;InvalidPackage&#39;&#xA;+        checkReleaseBuilds false&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Simple Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter/services.dart&#39;;&#xA;import &#39;package:flutter_unity_widget/flutter_unity_widget.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MaterialApp(&#xA;    home: UnityDemoScreen()&#xA;  ));&#xA;}&#xA;&#xA;class UnityDemoScreen extends StatefulWidget {&#xA;&#xA;  UnityDemoScreen({Key key}) : super(key: key);&#xA;&#xA;  @override&#xA;  _UnityDemoScreenState createState() =&amp;gt; _UnityDemoScreenState();&#xA;}&#xA;&#xA;class _UnityDemoScreenState extends State&amp;lt;UnityDemoScreen&amp;gt;{&#xA;  static final GlobalKey&amp;lt;ScaffoldState&amp;gt; _scaffoldKey =&#xA;      GlobalKey&amp;lt;ScaffoldState&amp;gt;();&#xA;  UnityWidgetController _unityWidgetController;&#xA;&#xA;  Widget build(BuildContext context) {&#xA;&#xA;    return Scaffold(&#xA;      key: _scaffoldKey,&#xA;      body: SafeArea(&#xA;        bottom: false,&#xA;        child: WillPopScope(&#xA;          onWillPop: () {&#xA;            // Pop the category page if Android back button is pressed.&#xA;          },&#xA;          child: Container(&#xA;            color: colorYellow,&#xA;            child: UnityWidget(&#xA;              onUnityCreated: onUnityCreated,&#xA;            ),&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  // Callback that connects the created controller to the unity controller&#xA;  void onUnityCreated(controller) {&#xA;    this._unityWidgetController = controller;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Communicating with and from Unity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter_unity_widget/flutter_unity_widget.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatefulWidget {&#xA;  @override&#xA;  _MyAppState createState() =&amp;gt; _MyAppState();&#xA;}&#xA;&#xA;class _MyAppState extends State&amp;lt;MyApp&amp;gt; {&#xA;  static final GlobalKey&amp;lt;ScaffoldState&amp;gt; _scaffoldKey =&#xA;      GlobalKey&amp;lt;ScaffoldState&amp;gt;();&#xA;  UnityWidgetController _unityWidgetController;&#xA;  double _sliderValue = 0.0;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;        key: _scaffoldKey,&#xA;        appBar: AppBar(&#xA;          title: const Text(&#39;Unity Flutter Demo&#39;),&#xA;        ),&#xA;        body: Card(&#xA;          margin: const EdgeInsets.all(8),&#xA;          clipBehavior: Clip.antiAlias,&#xA;          shape: RoundedRectangleBorder(&#xA;            borderRadius: BorderRadius.circular(20.0),&#xA;          ),&#xA;          child: Stack(&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              UnityWidget(&#xA;                  onUnityCreated: onUnityCreated,&#xA;                  onUnityMessage: onUnityMessage,&#xA;                  onUnitySceneLoaded: onUnitySceneLoaded,&#xA;                  fullscreen: false,&#xA;              ),&#xA;              Positioned(&#xA;                bottom: 20,&#xA;                left: 20,&#xA;                right: 20,&#xA;                child: Card(&#xA;                  elevation: 10,&#xA;                  child: Column(&#xA;                    children: &amp;lt;Widget&amp;gt;[&#xA;                      Padding(&#xA;                        padding: const EdgeInsets.only(top: 20),&#xA;                        child: Text(&#34;Rotation speed:&#34;),&#xA;                      ),&#xA;                      Slider(&#xA;                        onChanged: (value) {&#xA;                          setState(() {&#xA;                            _sliderValue = value;&#xA;                          });&#xA;                          setRotationSpeed(value.toString());&#xA;                        },&#xA;                        value: _sliderValue,&#xA;                        min: 0,&#xA;                        max: 20,&#xA;                      ),&#xA;                    ],&#xA;                  ),&#xA;                ),&#xA;              ),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  // Communcation from Flutter to Unity&#xA;  void setRotationSpeed(String speed) {&#xA;    _unityWidgetController.postMessage(&#xA;      &#39;Cube&#39;,&#xA;      &#39;SetRotationSpeed&#39;,&#xA;      speed,&#xA;    );&#xA;  }&#xA;&#xA;  // Communication from Unity to Flutter&#xA;  void onUnityMessage(message) {&#xA;    print(&#39;Received message from unity: ${message.toString()}&#39;);&#xA;  }&#xA;&#xA;  // Callback that connects the created controller to the unity controller&#xA;  void onUnityCreated(controller) {&#xA;    this._unityWidgetController = controller;&#xA;  }&#xA;&#xA;  // Communication from Unity when new scene is loaded to Flutter&#xA;  void onUnitySceneLoaded(SceneLoaded sceneInfo) {&#xA;    print(&#39;Received scene loaded from unity: ${sceneInfo.name}&#39;);&#xA;    print(&#39;Received scene loaded from unity buildIndex: ${sceneInfo.buildIndex}&#39;);&#xA;  }&#xA;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Props&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fullscreen&lt;/code&gt; (Enable or disable fullscreen mode on Android)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pause()&lt;/code&gt; (Use this to pause unity player)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resume()&lt;/code&gt; (Use this to resume unity player)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unload()&lt;/code&gt; (Use this to unload unity player) *Requires Unity 2019.4.3 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quit()&lt;/code&gt; (Use this to quit unity player)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;postMessage(String gameObject, methodName, message)&lt;/code&gt; (Allows you invoke commands in Unity from flutter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onUnityMessage(data)&lt;/code&gt; (Unity to flutter binding and listener)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onUnityUnloaded()&lt;/code&gt; (Unity to flutter listener when unity is unloaded)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onUnitySceneLoaded(String name, int buildIndex, bool isLoaded, bool isValid,)&lt;/code&gt; (Unity to flutter binding and listener when new scene is loaded)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remember to disabled fullscreen in unity player settings to disable unity fullscreen.&lt;/li&gt; &#xA; &lt;li&gt;Unity freezes and crashes on Android, please use OpenGL3 as Graphics API.&lt;/li&gt; &#xA; &lt;li&gt;Project fails to build due to some native dependencies in your unity project, please integrate the native libraries for those dependencies on Android or iOS&lt;/li&gt; &#xA; &lt;li&gt;App crashes on screen exit and re-entry do this &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Build Setting - iOS - Other Settings - Configuration - Enable Custom Background Behaviors or iOS&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Android builds takes forever to complete Unity 2022.1.*, remove these lines from unityLibrary/build.gradle file &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;commandLineArgs.add(&#34;--enable-debugger&#34;) commandLineArgs.add(&#34;--profiler-report&#34;) commandLineArgs.add(&#34;--profiler-output-file=&#34; + workingDir + &#34;/build/il2cpp_&#34;+ abi + &#34;_&#34; + configuration + &#34;/il2cpp_conv.traceevents&#34;)&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your donations will be used to help children first and then those in need. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/ultimate-backend/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ultimate-backend/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/ultimate-backend/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.xraph.com&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/11243590?v=4&#34; width=&#34;100px;&#34; alt=&#34;Rex Raphael&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rex Raphael&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=juicycleff&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=juicycleff&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#question-juicycleff&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt; &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/issues?q=author%3Ajuicycleff&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#review-juicycleff&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#tutorial-juicycleff&#34; title=&#34;Tutorials&#34;&gt;✅&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://stockxit.com&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/1475368?v=4&#34; width=&#34;100px;&#34; alt=&#34;Thomas Stockx&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thomas Stockx&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=thomas-stockx&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=thomas-stockx&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#question-thomas-stockx&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#tutorial-thomas-stockx&#34; title=&#34;Tutorials&#34;&gt;✅&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://krispypen.github.io/&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/156955?v=4&#34; width=&#34;100px;&#34; alt=&#34;Kris Pypen&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kris Pypen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=krispypen&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=krispypen&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#question-krispypen&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#tutorial-krispypen&#34; title=&#34;Tutorials&#34;&gt;✅&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/lorant-csonka-planorama&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/48209860?v=4&#34; width=&#34;100px;&#34; alt=&#34;Lorant Csonka&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Lorant Csonka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/juicycleff/flutter-unity-view-widget/commits?author=lorant-csonka-planorama&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/juicycleff/flutter-unity-view-widget/master/#video-lorant-csonka-planorama&#34; title=&#34;Videos&#34;&gt;📹&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-enable --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syncfusion/flutter-examples</title>
    <updated>2022-06-03T02:06:12Z</updated>
    <id>tag:github.com,2022-06-03:/syncfusion/flutter-examples</id>
    <link href="https://github.com/syncfusion/flutter-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the Syncfusion Flutter UI widgets examples and the guide to use them.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Syncfusion Flutter examples&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains awesome demos of &lt;a href=&#34;https://www.syncfusion.com/flutter-widgets&#34;&gt;Syncfusion Flutter UI widgets&lt;/a&gt;. This is the best place to check our widgets to get more insight into the usage of APIs. You can also check our widgets by installing the complete Flutter sample browser from &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.syncfusion.flutter.examples&#34;&gt;Google Play Store&lt;/a&gt; or &lt;a href=&#34;https://apps.apple.com/us/app/syncfusion-flutter-ui-widgets/id1475231341&#34;&gt;App Store&lt;/a&gt;, in which you can browse the demo for all the widgets and view the source code of each sample within the app itself.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/images/flutter_examples.png&#34;&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#requirements-to-run-the-demo&#34;&gt;Requirements to run the demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#repository-structure&#34;&gt;Repository Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#widgets-catalog&#34;&gt;Widgets Catalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#using-the-examples&#34;&gt;Using the examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#support-and-feedback&#34;&gt;Support and Feedback&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;requirements-to-run-the-demo&#34;&gt;&lt;/a&gt;Requirements to run the demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IDE tools are &lt;a href=&#34;https://flutter.dev/docs/get-started/editor?tab=vscode&#34;&gt;Visual Studio code&lt;/a&gt; and &lt;a href=&#34;https://flutter.dev/docs/get-started/editor?tab=androidstudio&#34;&gt;Android studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Flutter SDK &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Channel&lt;/th&gt; &#xA;     &lt;th&gt;Version&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Stable&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;2.0.2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Beta&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;https://storage.googleapis.com/flutter_infra/releases/beta/windows/flutter_windows_2.0.2-beta.zip&#34;&gt;2.0.2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dart and Flutter add-ons for Visual Studio Code (available via the Visual studio code extension) in Android Studio it available in plugin preference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;repository-structure&#34;&gt;&lt;/a&gt; Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;b&gt;lib/samples&lt;/b&gt; directory contains the Flutter widget examples for each widget such as Charts, DataGrid, etc. All the examples can be deployed in Android, iOS, and web platforms.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;widgets-catalog&#34;&gt;&lt;/a&gt;Widgets Catalog&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Widgets&lt;/th&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Barcode Generator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/barcodes&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calendar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/calendar&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Charts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/chart&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataGrid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/datagrid&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Date Range Picker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/date_picker&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linear Gauge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/linear_gauge&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Maps&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/maps&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PDF&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/pdf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PDF Viewer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/pdf_viewer&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Progress Bar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/progress_bar&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Radial Gauge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/gauge&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Range Selector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sliders/range_selector&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Range Slider&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sliders/range_slider&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slider&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sliders/slider&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark Charts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sparkline&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Signature Pad&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/signature_pad&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Treemap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/treemap&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XlsIO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/xlsio&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Syncfusion has no liability for any damage or consequence that may arise by the use or viewing of the examples. The examples are for demonstrative purposes and if you choose to use or access the examples you agree to not hold Syncfusion liable, in any form, for any damage that is related to use, accessing or otherwise viewing the examples. By accessing, viewing, or otherwise seeing the examples you acknowledge and agree Syncfusion’s examples will not allow you to seek injunctive relief in any form for any claim related to the sample. If you do not agree to this, do not view, access, utilize or otherwise do anything with Syncfusion’s examples.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-the-examples&#34;&gt;&lt;/a&gt;Using the examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unzip the downloaded flutter example archive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you clone this repository ignore this step.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open the flutter example folder in an IDE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to get the required packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;$ flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run your application either using &lt;code&gt;F5&lt;/code&gt; or &lt;code&gt;Run &amp;gt; Start Debugging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get the demo application&lt;/h2&gt; &#xA;&lt;p&gt;Explore the full capabilities of our Flutter widgets on your device by installing our sample browser applications from the below app stores, and view samples code in GitHub.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.syncfusion.flutter.examples&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/google-play-store.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/us/app/syncfusion-flutter-ui-widgets/id1475231341&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/ios-store.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flutter.syncfusion.com&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/web-sample-browser.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/p/syncfusion-flutter-gallery/9nhnbwcsf85d?activetab=pivot:overviewtab&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/windows-store.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://install.appcenter.ms/orgs/syncfusion-demos/apps/syncfusion-flutter-gallery/distribution_groups/release&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/macos-app-center.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/syncfusion-flutter-gallery&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/snap-store.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/syncfusion/flutter-examples&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/github-samples.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the following to learn more about Syncfusion Flutter widgets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/flutter-widgets&#34;&gt;Syncfusion Flutter product page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.syncfusion.com/flutter/introduction/overview&#34;&gt;User guide documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.syncfusion.com/flutter/introduction/api-reference&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/kb/flutter&#34;&gt;Knowledge base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/tutorial-videos/flutter&#34;&gt;Video tutorials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support and feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For any other queries, reach our &lt;a href=&#34;https://www.syncfusion.com/support/directtrac/incidents/newincident&#34;&gt;Syncfusion support team&lt;/a&gt; or post the queries through the &lt;a href=&#34;https://www.syncfusion.com/forums&#34;&gt;Community forums&lt;/a&gt; and submit a feature request or a bug through our &lt;a href=&#34;https://www.syncfusion.com/feedback/flutter&#34;&gt;Feedback portal&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To renew the subscription, click &lt;a href=&#34;https://www.syncfusion.com/sales/products&#34;&gt;renew&lt;/a&gt; or contact our sales team at &lt;a href=&#34;mailto:salessupport@syncfusion.com&#34;&gt;salessupport@syncfusion.com&lt;/a&gt; | Toll Free: 1-888-9 DOTNET.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Syncfusion&lt;/h2&gt; &#xA;&lt;p&gt;Founded in 2001 and headquartered in Research Triangle Park, N.C., Syncfusion has more than 20,000 customers and more than 1 million users, including large financial institutions, Fortune 500 companies, and global IT consultancies.&lt;/p&gt; &#xA;&lt;p&gt;Today we provide 1,000+ controls and frameworks for web (&lt;a href=&#34;https://www.syncfusion.com/aspnet-core-ui-controls&#34;&gt;ASP.NET Core&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/aspnet-mvc-ui-controls&#34;&gt;ASP.NET MVC&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/jquery/aspnet-web-forms-ui-controls&#34;&gt;ASP.NET WebForms&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/javascript-ui-controls&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/angular-ui-components&#34;&gt;Angular&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/react-ui-components&#34;&gt;React&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/vue-ui-components&#34;&gt;Vue&lt;/a&gt;, and &lt;a href=&#34;https://www.syncfusion.com/blazor-components&#34;&gt;Blazor&lt;/a&gt;, mobile (&lt;a href=&#34;https://www.syncfusion.com/xamarin-ui-controls&#34;&gt;Xamarin&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/flutter-widgets&#34;&gt;Flutter&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/uwp-ui-controls&#34;&gt;UWP&lt;/a&gt;, and &lt;a href=&#34;https://www.syncfusion.com/javascript-ui-controls&#34;&gt;JavaScript&lt;/a&gt;), and desktop development (&lt;a href=&#34;https://www.syncfusion.com/winforms-ui-controls&#34;&gt;WinForms&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/wpf-ui-controls&#34;&gt;WPF&lt;/a&gt;, and &lt;a href=&#34;https://www.syncfusion.com/uwp-ui-controls&#34;&gt;UWP&lt;/a&gt; and &lt;a href=&#34;https://www.syncfusion.com/winui-controls&#34;&gt;WinUI&lt;/a&gt;). We provide ready-to deploy enterprise software for dashboards, reports, data integration, and big data processing. Many customers have saved millions in licensing fees by deploying our software.&lt;/p&gt;</summary>
  </entry>
</feed>