<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:52:51Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simonbengtsson/airdash</title>
    <updated>2023-01-08T01:52:51Z</updated>
    <id>tag:github.com,2023-01-08:/simonbengtsson/airdash</id>
    <link href="https://github.com/simonbengtsson/airdash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;File sharing flutter webrtc app enabling sending files to any device from anywhere&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AirDash File Sharing&lt;/h1&gt; &#xA;&lt;p&gt;Transfer photos and files to any device.&lt;/p&gt; &#xA;&lt;h3&gt;Get the app&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/se/app/airdash-file-sharing/id1596599922&#34;&gt;Apple App Store (iOS &amp;amp; macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=io.flown.airdash&#34;&gt;Google Play (Android)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.microsoft.com/store/detail/airdash/9NL9K7CSG30T&#34;&gt;Microsoft Store (Windows)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snapcraft.io/airdash&#34;&gt;Snap Store (Linux)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Analytics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mixpanel.com/p/XKeBKcwzQ5HjuUxuxHv934&#34;&gt;Analytics Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for all major platforms and app stores (iOS, macOS, Windows, Linux and Android)&lt;/li&gt; &#xA; &lt;li&gt;Free forever to send any number of files of any size&lt;/li&gt; &#xA; &lt;li&gt;Maximum privacy and security by fully encrypting files and transferring them directly between devices&lt;/li&gt; &#xA; &lt;li&gt;Quickly start transfers using native mobile share sheet and drag and drop on desktop&lt;/li&gt; &#xA; &lt;li&gt;Send files anywhere (no need to be on the same network)&lt;/li&gt; &#xA; &lt;li&gt;Automatically uses the best and fastest connection available (wifi, mobile internet, ethernet etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Key technologies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flutter 3.0 (iOS, macOS, Android, Linux and Windows apps)&lt;/li&gt; &#xA; &lt;li&gt;WebRTC (file and data transfers)&lt;/li&gt; &#xA; &lt;li&gt;Firebase Firestore (WebRTC signaling and config storage)&lt;/li&gt; &#xA; &lt;li&gt;Firebase Functions (device pairing and config automation)&lt;/li&gt; &#xA; &lt;li&gt;Firebase Hosting (website and static files hosting)&lt;/li&gt; &#xA; &lt;li&gt;App Store Connect API and Microsoft Store submission API (release automation)&lt;/li&gt; &#xA; &lt;li&gt;Mixpanel (web and app analytics)&lt;/li&gt; &#xA; &lt;li&gt;Sentry (app monitoring and error tracking)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a firebase project (&lt;a href=&#34;https://console.firebase.google.com&#34;&gt;https://console.firebase.google.com&lt;/a&gt;) and enable firestore and anonymous authentication&lt;/li&gt; &#xA; &lt;li&gt;Create a .env file by duplicating the .env.sample file&lt;/li&gt; &#xA; &lt;li&gt;Replace the firebase project id and web API key in the .env file with the ones for your project (firebase console -&amp;gt; project settings)&lt;/li&gt; &#xA; &lt;li&gt;Run dart tools/scripts.dart app_env to get a env.dart file&lt;/li&gt; &#xA; &lt;li&gt;Deploy pairing backend function by &lt;code&gt;cd functions &amp;amp;&amp;amp; npm i &amp;amp;&amp;amp; npx firebase deploy --only pairing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run app using editor or &lt;code&gt;flutter run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default a google stun server is used to connect peers. The simplest way to enable turn servers as well is to use &lt;a href=&#34;https://www.twilio.com/stun-turn&#34;&gt;https://www.twilio.com/stun-turn&lt;/a&gt;. Create functions/.env file similar to the functions/.env-sample file and deploy the updateTwilioToken backend function.&lt;/p&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;Contributions are very much welcome on everything from bug reports to feature development. If you want to change something major write an issue about it first to ensure it will be considered for merge.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mapbox/mapbox-maps-flutter</title>
    <updated>2023-01-08T01:52:51Z</updated>
    <id>tag:github.com,2023-01-08:/mapbox/mapbox-maps-flutter</id>
    <link href="https://github.com/mapbox/mapbox-maps-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mapbox Maps SDK Flutter Plugin&lt;/h1&gt; &#xA;&lt;p&gt;The Mapbox Maps SDK Flutter Plugin is an officially developed solution from Mapbox that enables use of our latest Maps SDK product (v10.9.0). It is currently in beta, but can be used in production. The plugin allows developers to embed highly customized maps using a Flutter widget on Android and iOS.&lt;/p&gt; &#xA;&lt;p&gt;Web and desktop are not supported.&lt;/p&gt; &#xA;&lt;p&gt;Contributions welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Supported API&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera position&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera animations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Events&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gestures&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User Location&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fill Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fill extrusion Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Line Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Raster Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Symbol Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hillshade Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heatmap Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sky Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GeoJson Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vector Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Raster Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rasterdem Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Point Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Line Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fill Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Viewport&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Style DSL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expression DSL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Maps Flutter Plugin is compatible with applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deployed on iOS 11 or higher&lt;/li&gt; &#xA; &lt;li&gt;Built using the Android SDK 21 or higher&lt;/li&gt; &#xA; &lt;li&gt;Built using the Dart SDK 2.17.1 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Configure credentials&lt;/h3&gt; &#xA;&lt;p&gt;To run the Maps Flutter Plugin you will need to configure the Mapbox Access Tokens. Read more about access tokens and public/secret scopes at the platform &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/install/#configure-credentials&#34;&gt;Android&lt;/a&gt; or &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/install/#configure-credentials&#34;&gt;iOS&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;h4&gt;Secret token&lt;/h4&gt; &#xA;&lt;p&gt;To access platform SDKs you will need to create a secret access token with the &lt;code&gt;Downloads:Read&lt;/code&gt; scope and then:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to download the Android SDK add the token configuration to &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  SDK_REGISTRY_TOKEN=YOUR_SECRET_MAPBOX_ACCESS_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to download the iOS SDK add the token configuration to &lt;code&gt;~/.netrc&lt;/code&gt; :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  machine api.mapbox.com&#xA;  login mapbox&#xA;  password YOUR_SECRET_MAPBOX_ACCESS_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Public token&lt;/h4&gt; &#xA;&lt;p&gt;To instantiate the &lt;code&gt;MapWidget&lt;/code&gt; widget pass the public access token with &lt;code&gt;ResourceOptions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  MapWidget(&#xA;    resourceOptions:&#xA;        ResourceOptions(accessToken: PUBLIC_ACCESS_TOKEN))));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s a good practice to retrieve access tokens from some external source.&lt;/p&gt; &#xA;&lt;p&gt;You can pass access token via the command line arguments when either building :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter build &amp;lt;platform&amp;gt; --dart-define PUBLIC_ACCESS_TOKEN=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or running the application :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter run --dart-define PUBLIC_ACCESS_TOKEN=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also persist token in launch.json :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;configurations&#34;: [&#xA;    {&#xA;        ...&#xA;        &#34;args&#34;: [&#xA;            &#34;--dart-define&#34;, &#34;PUBLIC_ACCESS_TOKEN=...&#34;&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to retrieve the token from the environment in the application :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;String ACCESS_TOKEN = String.fromEnvironment(&#34;PUBLIC_ACCESS_TOKEN&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add the dependency&lt;/h3&gt; &#xA;&lt;p&gt;To use the Maps Flutter Plugin add the git dependency to the pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  mapbox_maps_flutter: ^0.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure permissions&lt;/h3&gt; &#xA;&lt;p&gt;You will need to grant location permission in order to use the location component of the Maps Flutter Plugin.&lt;/p&gt; &#xA;&lt;p&gt;You can use an existing library to request location permission, e.g. with &lt;a href=&#34;https://pub.dev/packages/permission_handler&#34;&gt;permission_handler&lt;/a&gt; &lt;code&gt;await Permission.locationWhenInUse.request();&lt;/code&gt; will trigger permission request.&lt;/p&gt; &#xA;&lt;p&gt;You also need to declare the permission for both platforms :&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;Add the following permissions to the manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; /&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to the &lt;code&gt;Runner/Info.plist&lt;/code&gt; to explain why you need access to the location data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;[Your explanation here]&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a map&lt;/h3&gt; &#xA;&lt;p&gt;Import &lt;code&gt;mapbox_maps_flutter&lt;/code&gt; library and add a simple map:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:mapbox_maps_flutter/mapbox_maps_flutter.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MaterialApp(&#xA;      home: MapWidget(&#xA;          resourceOptions: ResourceOptions(accessToken: YOUR_ACCESS_TOKEN))));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MapWidget widget&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;MapWidget&lt;/code&gt; widget provides options to customize the map - you can set &lt;code&gt;ResourceOptions&lt;/code&gt;, &lt;code&gt;MapOptions&lt;/code&gt;, &lt;code&gt;CameraOptions&lt;/code&gt;, &lt;code&gt;styleURL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also allows or add listeners for various events - related to style loading, map rendering, map loading.&lt;/p&gt; &#xA;&lt;h4&gt;MapboxMap controller&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;MapboxMap&lt;/code&gt; controller instance is provided with &lt;code&gt;MapWidget.onMapCreated&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MapboxMap&lt;/code&gt; exposes an entry point to the most of the APIs Maps Flutter Plugin provides. It allows to control the map, camera, styles, observe map events, query rendered features, etc.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s organized similarly to the &lt;a href=&#34;https://docs.mapbox.com/android/maps/api/10.8.0/mapbox-maps-android/com.mapbox.maps/-mapbox-map/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://docs.mapbox.com/ios/maps/api/10.8.1/Classes/MapboxMap.html&#34;&gt;iOS&lt;/a&gt; counterparts.&lt;/p&gt; &#xA;&lt;p&gt;To interact with the map after it&#39;s created store the MapboxMap object somewhere :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class FullMap extends StatefulWidget {&#xA;  const FullMap();&#xA;&#xA;  @override&#xA;  State createState() =&amp;gt; FullMapState();&#xA;}&#xA;&#xA;class FullMapState extends State&amp;lt;FullMap&amp;gt; {&#xA;  MapboxMap? mapboxMap;&#xA;&#xA;  _onMapCreated(MapboxMap mapboxMap) {&#xA;    this.mapboxMap = mapboxMap;&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return new Scaffold(&#xA;        body: MapWidget(&#xA;      key: ValueKey(&#34;mapWidget&#34;),&#xA;      resourceOptions: ResourceOptions(accessToken: ACCESS_TOKEN),&#xA;      onMapCreated: _onMapCreated,&#xA;    ));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User location&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/user-location/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/user-location/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To observe the user&#39;s location and show the location indicator on the map use &lt;code&gt;LocationComponentSettingsInterface&lt;/code&gt; accessible via &lt;code&gt;MapboxMap.location&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You need to grant location permission prior to using location component (as explained &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/#configure-permissions&#34;&gt;before&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Location puck&lt;/h3&gt; &#xA;&lt;p&gt;To customize the appearance of the location puck call &lt;code&gt;MapboxMap.location.updateSettings&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;To use the 3D puck with model downloaded from Uri instead of the default 2D puck :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.location.updateSettings(LocationComponentSettings(&#xA;      locationPuck: LocationPuck(&#xA;          locationPuck3D: LocationPuck3D(&#xA;              modelUri:&#xA;                  &#34;https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Embedded/Duck.gltf&#34;,))));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of customization in the sample &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/location.dart&#34;&gt;app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Markers and annotations&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/annotations/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/annotations/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have several options to add annotations on the map.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the AnnotationManager APIs to create circle/point/polygon/polyline annotations.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To create 5 point annotations using custom icon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.annotations.createPointAnnotationManager().then((pointAnnotationManager) async {&#xA;    final ByteData bytes =&#xA;        await rootBundle.load(&#39;assets/symbols/custom-icon.png&#39;);&#xA;    final Uint8List list = bytes.buffer.asUint8List();&#xA;    var options = &amp;lt;PointAnnotationOptions&amp;gt;[];&#xA;    for (var i = 0; i &amp;lt; 5; i++) {&#xA;      options.add(PointAnnotationOptions(&#xA;          geometry: createRandomPoint().toJson(), image: list));&#xA;    }&#xA;    pointAnnotationManager?.createMulti(options);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of the AnnotationManagers usage in the sample app : &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/point_annotations.dart&#34;&gt;point annotations&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/circle_annotations.dart&#34;&gt;circle annotations&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/polygon_annotations.dart&#34;&gt;polygon annotations&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/polyline_annotations.dart&#34;&gt;polyline annotations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use style layers. This will require writing more code but is more flexible and provides better performance for the large amount of annotations (e.g. hundreds and thousands of them). More about adding style layers in the &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/#map-styles&#34;&gt;Map styles section&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Map styles&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/styles/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/styles/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Maps Flutter Plugin allows full customization of the look of the map used in your application.&lt;/p&gt; &#xA;&lt;h3&gt;Set a style&lt;/h3&gt; &#xA;&lt;p&gt;You can specify the initial style uri at &lt;code&gt;MapWidget.styleUri&lt;/code&gt;, or load it at runtime using &lt;code&gt;MapboxMap.loadStyleURI&lt;/code&gt; / &lt;code&gt;MapboxMap.loadStyleJson&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.loadStyleURI(Styles.LIGHT);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work with layers&lt;/h3&gt; &#xA;&lt;p&gt;You can familiarize with the concept of sources, layers and their supported types in the platform documentation.&lt;/p&gt; &#xA;&lt;p&gt;To add, remove or change a source or a layer use the &lt;code&gt;MapboxMap.style&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;To add a &lt;code&gt;GeoJsonSource&lt;/code&gt; and a &lt;code&gt;LineLayer&lt;/code&gt; using the source :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  var data = await rootBundle.loadString(&#39;assets/polyline.geojson&#39;);&#xA;  await mapboxMap.style.addSource(GeoJsonSource(id: &#34;line&#34;, data: data));&#xA;  await mapboxMap.style.addLayer(LineLayer(&#xA;      id: &#34;line_layer&#34;,&#xA;      sourceId: &#34;line&#34;,&#xA;      lineJoin: LineJoin.ROUND,&#xA;      lineCap: LineCap.ROUND,&#xA;      lineOpacity: 0.7,&#xA;      lineColor: Colors.red.value,&#xA;      lineWidth: 8.0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using expressions&lt;/h3&gt; &#xA;&lt;p&gt;You can change the appearance of a layer based on properties in the layer&#39;s data source or zoom level. Refer to the &lt;a href=&#34;https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/&#34;&gt;documentation&lt;/a&gt; for the description of supported expressions. To apply an expression to interpolate gradient color to a line layer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.style.setStyleLayerProperty(&#34;layer&#34;, &#34;line-gradient&#34;,&#xA;      &#39;[&#34;interpolate&#34;,[&#34;linear&#34;],[&#34;line-progress&#34;],0.0,[&#34;rgb&#34;,6,1,255],0.5,[&#34;rgb&#34;,0,255,42],0.7,[&#34;rgb&#34;,255,252,0],1.0,[&#34;rgb&#34;,255,30,0]]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Camera and animations&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/camera-and-animation/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/camera-and-animation/&#34;&gt;iOS&lt;/a&gt;. The camera is the user&#39;s viewpoint above the map. The Maps Flutter Plugin provides you with options to set and adjust the camera position, listen for camera changes, get the camera position, and restrict the camera position to set bounds.&lt;/p&gt; &#xA;&lt;h3&gt;Camera position&lt;/h3&gt; &#xA;&lt;p&gt;You can set the starting camera position using &lt;code&gt;MapWidget.cameraOptions&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MapWidget(&#xA;  key: ValueKey(&#34;mapWidget&#34;),&#xA;  resourceOptions: ResourceOptions(accessToken: ACCESS_TOKEN),&#xA;  cameraOptions: CameraOptions(&#xA;      center: Point(coordinates: Position(-80.1263, 25.7845)).toJson(),&#xA;      zoom: 12.0),&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or update it at runtime using &lt;code&gt;MapboxMap.setCamera&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MapboxMap.setCamera(CameraOptions(&#xA;  center: Point(coordinates: Position(-80.1263, 25.7845)).toJson(),&#xA;  zoom: 12.0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of interaction with the camera in the sample &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/camera.dart&#34;&gt;app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Camera animations&lt;/h3&gt; &#xA;&lt;p&gt;Camera animations are the means by which camera settings are changed from old values to new values over a period of time. You can animate the camera using &lt;code&gt;flyTo&lt;/code&gt; or &lt;code&gt;easeTo&lt;/code&gt; and move to a new center location, update the bearing, pitch, zoom, padding, and anchor.&lt;/p&gt; &#xA;&lt;p&gt;To start a &lt;code&gt;flyTo&lt;/code&gt; animation to the specific camera options :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap?.flyTo(&#xA;    CameraOptions(&#xA;        anchor: ScreenCoordinate(x: 0, y: 0),&#xA;        zoom: 17,&#xA;        bearing: 180,&#xA;        pitch: 30),&#xA;    MapAnimationOptions(duration: 2000, startDelay: 0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of animations in the sample &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/animation.dart&#34;&gt;app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;User interaction&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/user-interaction/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/user-interaction/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users interacting with the map in your application can explore the map by performing standard gestures.&lt;/p&gt; &#xA;&lt;p&gt;You can retrieve or update the &lt;code&gt;GestureSettings&lt;/code&gt; using &lt;code&gt;MapboxMap.gestures&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can observe gesture events using &lt;code&gt;MapWidget.onTapListener&lt;/code&gt;, &lt;code&gt;MapWidget.onLongTapListener&lt;/code&gt;, &lt;code&gt;MapWidget.onScrollListener&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheLastGimbus/GooglePhotosTakeoutHelper</title>
    <updated>2023-01-08T01:52:51Z</updated>
    <id>tag:github.com,2023-01-08:/TheLastGimbus/GooglePhotosTakeoutHelper</id>
    <link href="https://github.com/TheLastGimbus/GooglePhotosTakeoutHelper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Script that organizes the Google Takeout archive into one big chronological folder&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/gpth-bin&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/gpth-bin&#34; alt=&#34;AUR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/TheLastGimbus&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue.svg?logo=paypal&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google Photos Takeout Helper&lt;/h1&gt; &#xA;&lt;h2&gt;What is this for?&lt;/h2&gt; &#xA;&lt;p&gt;If you ever want to move from Google Photos to other platform/solution, your fastest choice to export all photos is &lt;a href=&#34;https://takeout.google.com/&#34;&gt;Google Takeout&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;But when you download it, you will find yourself with hundreds of little folders with few photos and weird &lt;code&gt;.json&lt;/code&gt; files inside. What if you want to just have one folder with all photos, in chronological order? Good luck copying all of that &lt;span&gt;😕&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;This script does just that - it organizes and cleans up your Takeout for you &lt;span&gt;👍&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will take all of your photos from those tiny folders, set their and &lt;code&gt;file last modified&lt;/code&gt; correctly, and put it in one big folder (or folders divided by a month)&lt;/p&gt; &#xA;&lt;h2&gt;How to use:&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Get all your photos in &lt;a href=&#34;https://takeout.google.com/&#34;&gt;Google Takeout&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#34;deselect all&#34; and then select only Google Photos&lt;/li&gt; &#xA;   &lt;li&gt;deselect all &#34;album folders&#34; - folders with name of some album, and select &lt;em&gt;only&lt;/em&gt; &#34;year folders&#34; - folders named like &#34;&lt;code&gt;Photos from 20..&lt;/code&gt;&#34; - don&#39;t worry, all of your photos are in &#34;year folders anyway&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the script from &lt;a href=&#34;https://github.com/TheLastGimbus/GooglePhotosTakeoutHelper/releases&#34;&gt;releases tab&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/gpth-bin&#34;&gt;also available on AUR &lt;span&gt;😏&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Merge all contents from all Google Takeout zips to &lt;em&gt;one folder&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;gpth -i &#34;your/input/folder&#34; -o &#34;your/output/folder&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want your photos to be divided by a year and month, run it with the &lt;code&gt;--divide-to-dates&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;How to use for dummies (non-programming people):&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/TheLastGimbus/GooglePhotosTakeoutHelper/releases&#34;&gt;releases-&amp;gt;latest release-&amp;gt;assets&lt;/a&gt; and download &lt;code&gt;gpth-vX.X.X-windoza.exe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prepare your Takeout: If your Takeout was divided into multiple &lt;code&gt;.zip&lt;/code&gt;s, you will need to extract them, and move their contents into &lt;strong&gt;one folder&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;cmd&lt;/code&gt;, and type: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd C:\Folder\Where\You\Downloaded\takeout-helper&#xA;gpth-vX.X.X-windoza.exe -i &#34;C:\INPUT\TAKEOUT\FOLDER&#34; -o &#34;C:\OUTPUT\FOLDER&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;// PS 2: YOU NEED TO WRAP YOUR PATHS IN - &lt;code&gt;&#34;&lt;/code&gt; - ESPECIALLY IF THEY HAVE SPACES&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contact/errors&lt;/h2&gt; &#xA;&lt;p&gt;If you have issues/questions, you can hit me up either by &lt;a href=&#34;https://www.reddit.com/user/TheLastGimbus/&#34;&gt;Reddit&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/TheLastGimbus&#34;&gt;Twitter&lt;/a&gt; Email: &lt;a href=&#34;mailto:google-photos-takeout-gh@niceyyyboyyy.anonaddy.com&#34;&gt;google-photos-takeout-gh@niceyyyboyyy.anonaddy.com&lt;/a&gt;, or if you think your issue is common: &lt;a href=&#34;https://github.com/TheLastGimbus/GooglePhotosTakeoutHelper/issues&#34;&gt;Issues&lt;/a&gt; tab&lt;/p&gt; &#xA;&lt;h2&gt;If I helped you, you can consider donating me: &lt;a href=&#34;https://www.paypal.me/TheLastGimbus&#34;&gt;https://www.paypal.me/TheLastGimbus&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I spent a lot of time fixing bugs and making this work stable &lt;span&gt;💖&lt;/span&gt; - would be super thankful for any donations&lt;/p&gt; &#xA;&lt;h2&gt;After exporting&lt;/h2&gt; &#xA;&lt;h3&gt;Be aware if you move your photos on your Android phone...&lt;/h3&gt; &#xA;&lt;p&gt;(99% of the times), if you move some files in Android, their creation and modification time is reset to current.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Simple Gallery&#34; app usually keeps original file creation time when moving and coping (but I don&#39;t guarantee it). It&#39;s also pretty cool - check it out: &lt;a href=&#34;https://github.com/SimpleMobileTools/Simple-Gallery&#34;&gt;https://github.com/SimpleMobileTools/Simple-Gallery&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What to do when you got rid of Google Photos? What are the alternatives?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;I really recommend you using &lt;a href=&#34;https://syncthing.net/&#34;&gt;Syncthing&lt;/a&gt; for syncing your photos and files across devices. It does so through your local Wi-Fi, so you&#39;re not dependent on any service or internet connection. It will also keep original file creation date and metadata, so it resolves Android issue that I mentioned before.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want something more centralized but also self-hosted, &lt;a href=&#34;https://nextcloud.com&#34;&gt;Nextcloud&lt;/a&gt; is a nice choice, but its approach to photos is still not perfect. (And you need to set up your own server)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Guys at &lt;a href=&#34;https://photoprism.org/&#34;&gt;Photoprism&lt;/a&gt; are working on full Google Photos alternative, with search and AI tagging etc, but it&#39;s stil work in progress&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Takeout projects&lt;/h3&gt; &#xA;&lt;p&gt;I used this tool to export my notes to markdown - you can then edit them with any markdown editor you like :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vHanda/google-keep-exporter&#34;&gt;https://github.com/vHanda/google-keep-exporter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Where is the Python script??&lt;/h3&gt; &#xA;&lt;p&gt;Yeah, the whole thing got re-written in Dart, and now it&#39;s way more stable and faster. If you still want Python for some reason, check out v2.x - in releases/tags&lt;/p&gt; &#xA;&lt;h3&gt;TODO (Pull Requests welcome):&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GPS data: from JSON to Exif - &lt;del&gt;Thank you @DalenW &lt;span&gt;💖&lt;/span&gt;&lt;/del&gt; still thank you, but it is now missing in the Dart version&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Writing data from &lt;code&gt;.json&lt;/code&gt;s back to &lt;code&gt;EXIF&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Some way to handle albums - THANK YOU @bitsondatadev &lt;span&gt;😘&lt;/span&gt; &lt;span&gt;🎉&lt;/span&gt; &lt;span&gt;💃&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>