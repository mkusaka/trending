<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-02T01:40:47Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RyanYuuki/AnymeX</title>
    <updated>2025-02-02T01:40:47Z</updated>
    <id>tag:github.com,2025-02-02:/RyanYuuki/AnymeX</id>
    <link href="https://github.com/RyanYuuki/AnymeX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Open Source app for Tracking Multi Service (AL, MAL, SIMKL)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RyanYuuki/AnymeX/main/assets/images/logo.png&#34; alt=&#34;AnymeX Icon&#34; style=&#34;border-radius: 50px; height: 150px; width: 150px;&#34;&gt; &#xA; &lt;h1 style=&#34;font-size: 2em; font-weight: bold;&#34;&gt;AnymeX&lt;/h1&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/RyanYuuki/AnymeX/total.svg?color=white&amp;amp;labelColor=black&amp;amp;style=for-the-badge&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/RyanYuuki/AnymeX?color=white&amp;amp;labelColor=black&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/RyanYuuki/AnymeX?color=white&amp;amp;labelColor=black&amp;amp;style=for-the-badge&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.codefactor.io/repository/github/RyanYuuki/AnymeX&#34;&gt; &lt;img src=&#34;https://img.shields.io/codefactor/grade/github/RyanYuuki/AnymeX?style=for-the-badge&amp;amp;label=Codefactor&amp;amp;labelColor=black&amp;amp;color=white&#34; alt=&#34;CodeFactor Grade&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;a href=&#34;https://discord.gg/azAMuBWd8C&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;color=white&amp;amp;labelColor=black&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &#xA;  &lt;a href=&#34;https://t.me/AnymeX_Discussion&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&amp;amp;logo=telegram&amp;amp;color=white&amp;amp;labelColor=black&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p style=&#34;text-align: center;&#34;&gt; Welcome to &lt;b&gt;AnymeX&lt;/b&gt;‚Äîa multi-service client built with Flutter and Dart! üåü It&#39;s designed to provide a seamless and user-friendly experience with a modern interface and excellent performance. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üöÄ Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Highlights&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Experience&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;üé® &lt;strong&gt;Personalized Themes&lt;/strong&gt;: Explore unique themes&lt;br&gt;‚ö° &lt;strong&gt;Blazing Fast Performance&lt;/strong&gt;: Lightweight and lightning-fast&lt;br&gt;‚ú® &lt;strong&gt;Elegant Material UI&lt;/strong&gt;: Modern and sleek&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Connectivity&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;üìå &lt;strong&gt;Multiple Integrations&lt;/strong&gt;: Easily connect with various services&lt;br&gt;üìä &lt;strong&gt;Sync Support&lt;/strong&gt;: Keep your data in sync effortlessly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;üì± Mobile&lt;/h3&gt; &#xA;&lt;div style=&#34;display: flex; flex-wrap: wrap; justify-content: space-between;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/RyanYuuki/AnymeX/raw/main/github_assets/android/preview1.jpg&#34; width=&#34;49%&#34; style=&#34;margin: 0;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/RyanYuuki/AnymeX/raw/main/github_assets/android/preview2.jpg&#34; width=&#34;49%&#34; style=&#34;margin: 0;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;üíª Desktop&lt;/h3&gt; &#xA;&lt;div style=&#34;display: flex; flex-wrap: wrap; justify-content: space-between;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/RyanYuuki/AnymeX/raw/main/github_assets/desktop/preview_1.png&#34; width=&#34;100%&#34; style=&#34;margin: 0;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/RyanYuuki/AnymeX/raw/main/github_assets/desktop/preview_2.png&#34; width=&#34;100%&#34; style=&#34;margin: 0;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Support Us&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚≠ê &lt;strong&gt;Star This Repository To Support The Developer And Encourage The Development Of The Application!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Star History&lt;/summary&gt; &#xA; &lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/stargazers&#34;&gt; &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://starchart.cc/RyanYuuki/AnymeX.svg?variant=adaptive&#34; width=&#34;370&#34; height=&#34;235&#34;&gt; &lt;/a&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions, from translations to new features. For inquiries, join our &lt;a href=&#34;https://discord.gg/azAMuBWd8C&#34;&gt;Discord server&lt;/a&gt; or &lt;a href=&#34;https://t.me/AnymeX_Discussion&#34;&gt;Telegram group&lt;/a&gt;. Pull requests are welcome; check the &lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/issues&#34;&gt;open issues&lt;/a&gt; for guidance on major changes.&lt;/p&gt; &#xA;&lt;h3&gt;üöÄ Getting Started with Development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1Ô∏è‚É£ Clone the repository&#xA;git clone https://github.com/RyanYuuki/AnymeX.git&#xA;&#xA;# 2Ô∏è‚É£ Navigate to the project directory&#xA;cd AnymeX&#xA;&#xA;# 3Ô∏è‚É£ Install dependencies&#xA;flutter pub get&#xA;&#xA;# 4Ô∏è‚É£ Run the app&#xA;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° &lt;strong&gt;Pro Tip&lt;/strong&gt;: Ensure you install Flutter and Dart SDK before starting!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;A heartfelt thank you to everyone who has contributed to the development of AnymeX. Your efforts are invaluable.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/graphs/contributors&#34;&gt; &lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/RyanYuuki/AnymeX?style=flat-square&amp;amp;label=Contributors%20%3A&amp;amp;labelColor=%230f1318&amp;amp;color=%230f1318&#34; align=&#34;left&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://github.com/RyanYuuki/AnymeX/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=RyanYuuki/AnymeX&#34; alt=&#34;Contributors&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AnymeX is licensed under the MIT License. More info can be found &lt;a href=&#34;https://raw.githubusercontent.com/RyanYuuki/AnymeX/main/LICENSE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MarcelGarus/marquee</title>
    <updated>2025-02-02T01:40:47Z</updated>
    <id>tag:github.com,2025-02-02:/MarcelGarus/marquee</id>
    <link href="https://github.com/MarcelGarus/marquee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter widget that scrolls text infinitely. Provides many customizations including custom scroll directions and velocities, pausing after every round and specifying custom durations and curves for accelerating and decelerating.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;‚è© A Flutter widget that scrolls text infinitely. Provides many customizations including custom scroll directions, durations, curves as well as pauses after every round.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Appreciate the widget? Show some ‚ù§Ô∏è and star the repo to support the project.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This is a minimalistic example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Marquee(&#xA;  text: &#39;There once was a boy who told this story about a boy: &#34;&#39;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here&#39;s a piece of code that makes full use of the marquee&#39;s customizability:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Marquee(&#xA;  text: &#39;Some sample text that takes some space.&#39;,&#xA;  style: TextStyle(fontWeight: FontWeight.bold),&#xA;  scrollAxis: Axis.horizontal,&#xA;  crossAxisAlignment: CrossAxisAlignment.start,&#xA;  blankSpace: 20.0,&#xA;  velocity: 100.0,&#xA;  pauseAfterRound: Duration(seconds: 1),&#xA;  startPadding: 10.0,&#xA;  accelerationDuration: Duration(seconds: 1),&#xA;  accelerationCurve: Curves.linear,&#xA;  decelerationDuration: Duration(milliseconds: 500),&#xA;  decelerationCurve: Curves.easeOut,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about the properties, have a look at the &lt;a href=&#34;https://pub.dartlang.org/documentation/marquee/&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>diegoveloper/flutter_keyboard_actions</title>
    <updated>2025-02-02T01:40:47Z</updated>
    <id>tag:github.com,2025-02-02:/diegoveloper/flutter_keyboard_actions</id>
    <link href="https://github.com/diegoveloper/flutter_keyboard_actions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Keyboard Actions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/keyboard_actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/keyboard_actions.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add features to the Android / iOS keyboard in a simple way.&lt;/p&gt; &#xA;&lt;p&gt;Because the keyboard that Android / iOS offers us specifically when we are in numeric mode, does not bring the button to hide the keyboard. This causes a lot of inconvenience for users, so this package allows adding functionality to the existing keyboard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; height=&#34;600&#34; src=&#34;https://media.giphy.com/media/fR4Hum4osoRJaLn25V/giphy.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Done button for the keyboard (You can customize the button).&lt;/li&gt; &#xA; &lt;li&gt;Move up/down between your Textfields (You can hide for set &lt;code&gt;nextFocus: false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Keyboard Bar customization.&lt;/li&gt; &#xA; &lt;li&gt;Custom footer widget below keyboard bar&lt;/li&gt; &#xA; &lt;li&gt;Create your own Keyboard in an easy way&lt;/li&gt; &#xA; &lt;li&gt;You can use it for Android, iOS or both platforms.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Dialog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of the custom footer:&lt;/p&gt; &#xA;&lt;img width=&#34;250&#34; alt=&#34;Screen Shot 2019-05-22 at 5 46 50 PM&#34; src=&#34;https://user-images.githubusercontent.com/3268245/58218221-0409f200-7cbb-11e9-91d8-592f2e99fa8a.png&#34;&gt; &#xA;&lt;p&gt;For more fun, use that widget as a custom keyboard with your custom input:&lt;/p&gt; &#xA;&lt;img width=&#34;250&#34; alt=&#34;Screen Shot 2019-05-22 at 5 46 54 PM&#34; src=&#34;https://user-images.githubusercontent.com/3268245/58218234-0ec48700-7cbb-11e9-81b6-e61658f4d200.png&#34;&gt; &#xA;&lt;p&gt;Even more fun:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thumbs.gfycat.com/NimbleGraveDarwinsfox-mobile.mp4&#34;&gt;Watch the video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You should ensure that you add the dependency in your flutter project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  keyboard_actions: &#34;^4.1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should then run &lt;code&gt;flutter packages upgrade&lt;/code&gt; or update your packages in IntelliJ.&lt;/p&gt; &#xA;&lt;h2&gt;Example Project&lt;/h2&gt; &#xA;&lt;p&gt;There is an example project in the &lt;code&gt;example&lt;/code&gt; folder where you can get more information. Check it out. Otherwise, keep reading to get up and running.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import  &#39;package:flutter/material.dart&#39;;&#xA;import  &#39;package:keyboard_actions/keyboard_actions.dart&#39;;&#xA;&#xA;&#xA;class Content extends StatefulWidget {&#xA;  const Content({&#xA;    Key key,&#xA;  }) : super(key: key);&#xA;&#xA;  @override&#xA;  _ContentState createState() =&amp;gt; _ContentState();&#xA;}&#xA;&#xA;class _ContentState extends State&amp;lt;Content&amp;gt; {&#xA;  final FocusNode _nodeText1 = FocusNode();&#xA;  final FocusNode _nodeText2 = FocusNode();&#xA;  final FocusNode _nodeText3 = FocusNode();&#xA;  final FocusNode _nodeText4 = FocusNode();&#xA;  final FocusNode _nodeText5 = FocusNode();&#xA;  final FocusNode _nodeText6 = FocusNode();&#xA;&#xA;  /// Creates the [KeyboardActionsConfig] to hook up the fields&#xA;  /// and their focus nodes to our [FormKeyboardActions].&#xA;  KeyboardActionsConfig _buildConfig(BuildContext context) {&#xA;    return KeyboardActionsConfig(&#xA;      keyboardActionsPlatform: KeyboardActionsPlatform.ALL,&#xA;      keyboardBarColor: Colors.grey[200],&#xA;      nextFocus: true,&#xA;      actions: [&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText1,&#xA;        ),&#xA;        KeyboardActionsItem(focusNode: _nodeText2, toolbarButtons: [&#xA;          (node) {&#xA;            return GestureDetector(&#xA;              onTap: () =&amp;gt; node.unfocus(),&#xA;              child: Padding(&#xA;                padding: EdgeInsets.all(8.0),&#xA;                child: Icon(Icons.close),&#xA;              ),&#xA;            );&#xA;          }&#xA;        ]),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText3,&#xA;          onTapAction: () {&#xA;            showDialog(&#xA;                context: context,&#xA;                builder: (context) {&#xA;                  return AlertDialog(&#xA;                    content: Text(&#34;Custom Action&#34;),&#xA;                    actions: &amp;lt;Widget&amp;gt;[&#xA;                      FlatButton(&#xA;                        child: Text(&#34;OK&#34;),&#xA;                        onPressed: () =&amp;gt; Navigator.of(context).pop(),&#xA;                      )&#xA;                    ],&#xA;                  );&#xA;                });&#xA;          },&#xA;        ),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText4,&#xA;          displayCloseWidget: false,&#xA;        ),&#xA;          KeyboardActionsItem(&#xA;          focusNode: _nodeText5,&#xA;          toolbarButtons: [&#xA;            //button 1&#xA;            (node) {&#xA;              return GestureDetector(&#xA;                onTap: () =&amp;gt; node.unfocus(),&#xA;                child: Container(&#xA;                  color: Colors.white,&#xA;                  padding: EdgeInsets.all(8.0),&#xA;                  child: Text(&#xA;                    &#34;CLOSE&#34;,&#xA;                    style: TextStyle(color: Colors.black),&#xA;                  ),&#xA;                ),&#xA;              );&#xA;            },&#xA;            //button 2&#xA;            (node) {&#xA;              return GestureDetector(&#xA;                onTap: () =&amp;gt; node.unfocus(),&#xA;                child: Container(&#xA;                  color: Colors.black,&#xA;                  padding: EdgeInsets.all(8.0),&#xA;                  child: Text(&#xA;                    &#34;DONE&#34;,&#xA;                    style: TextStyle(color: Colors.white),&#xA;                  ),&#xA;                ),&#xA;              );&#xA;            }&#xA;          ],&#xA;        ),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText6,&#xA;          footerBuilder: (_) =&amp;gt; PreferredSize(&#xA;              child: SizedBox(&#xA;                  height: 40,&#xA;                  child: Center(&#xA;                    child: Text(&#39;Custom Footer&#39;),&#xA;                  )),&#xA;              preferredSize: Size.fromHeight(40)),&#xA;        ),&#xA;      ],&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return KeyboardActions(&#xA;      config: _buildConfig(context),&#xA;      child: Center(&#xA;        child: Padding(&#xA;          padding: const EdgeInsets.all(15.0),&#xA;          child: Column(&#xA;            crossAxisAlignment: CrossAxisAlignment.stretch,&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText1,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.text,&#xA;                focusNode: _nodeText2,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Text with Custom Done Button&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText3,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number with Custom Action&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.text,&#xA;                focusNode: _nodeText4,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Text without Done button&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText5,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number with Toolbar Buttons&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText6,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number with Custom Footer&#34;,&#xA;                ),&#xA;              ),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Custom Keyboard&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import  &#39;package:flutter/material.dart&#39;;&#xA;import  &#39;package:keyboard_actions/keyboard_actions.dart&#39;;&#xA;&#xA;class Content extends StatelessWidget {&#xA;  final FocusNode _nodeText7 = FocusNode();&#xA;  final FocusNode _nodeText8 = FocusNode();&#xA;  //This is only for custom keyboards&#xA;  final custom1Notifier = ValueNotifier&amp;lt;String&amp;gt;(&#34;0&#34;);&#xA;  final custom2Notifier = ValueNotifier&amp;lt;Color&amp;gt;(Colors.blue);&#xA;&#xA;  /// Creates the [KeyboardActionsConfig] to hook up the fields&#xA;  /// and their focus nodes to our [FormKeyboardActions].&#xA;  KeyboardActionsConfig _buildConfig(BuildContext context) {&#xA;    return KeyboardActionsConfig(&#xA;      keyboardActionsPlatform: KeyboardActionsPlatform.ALL,&#xA;      keyboardBarColor: Colors.grey[200],&#xA;      nextFocus: true,&#xA;      actions: [&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText7,&#xA;          footerBuilder: (_) =&amp;gt; CounterKeyboard(&#xA;            notifier: custom1Notifier,&#xA;          ),&#xA;        ),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText8,&#xA;          footerBuilder: (_) =&amp;gt; ColorPickerKeyboard(&#xA;            notifier: custom2Notifier,&#xA;          ),&#xA;        ),&#xA;      ],&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return KeyboardActions(&#xA;      config: _buildConfig(context),&#xA;      child: Center(&#xA;        child: Container(&#xA;          padding: const EdgeInsets.all(15.0),&#xA;          child: Column(&#xA;            crossAxisAlignment: CrossAxisAlignment.stretch,&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              KeyboardCustomInput&amp;lt;String&amp;gt;(&#xA;                focusNode: _nodeText7,&#xA;                height: 65,&#xA;                notifier: custom1Notifier,&#xA;                builder: (context, val, hasFocus) {&#xA;                  return Container(&#xA;                    alignment: Alignment.center,&#xA;                    color: hasFocus ? Colors.grey[300] : Colors.white,&#xA;                    child: Text(&#xA;                      val,&#xA;                      style:&#xA;                          TextStyle(fontSize: 30, fontWeight: FontWeight.bold),&#xA;                    ),&#xA;                  );&#xA;                },&#xA;              ),&#xA;              KeyboardCustomInput&amp;lt;Color&amp;gt;(&#xA;                focusNode: _nodeText8,&#xA;                height: 65,&#xA;                notifier: custom2Notifier,&#xA;                builder: (context, val, hasFocus) {&#xA;                  return Container(&#xA;                    width: double.maxFinite,&#xA;                    color: val ?? Colors.transparent,&#xA;                  );&#xA;                },&#xA;              ),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&#xA;/// A quick example &#34;keyboard&#34; widget for picking a color.&#xA;class ColorPickerKeyboard extends StatelessWidget&#xA;    with KeyboardCustomPanelMixin&amp;lt;Color&amp;gt;&#xA;    implements PreferredSizeWidget {&#xA;  final ValueNotifier&amp;lt;Color&amp;gt; notifier;&#xA;  static const double _kKeyboardHeight = 200;&#xA;&#xA;  ColorPickerKeyboard({Key key, this.notifier}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    final double rows = 3;&#xA;    final double screenWidth = MediaQuery.of(context).size.width;&#xA;    final int colorsCount = Colors.primaries.length;&#xA;    final int colorsPerRow = (colorsCount / rows).ceil();&#xA;    final double itemWidth = screenWidth / colorsPerRow;&#xA;    final double itemHeight = _kKeyboardHeight / rows;&#xA;&#xA;    return Container(&#xA;      height: _kKeyboardHeight,&#xA;      child: Wrap(&#xA;        children: &amp;lt;Widget&amp;gt;[&#xA;          for (final color in Colors.primaries)&#xA;            GestureDetector(&#xA;              onTap: () {&#xA;                updateValue(color);&#xA;              },&#xA;              child: Container(&#xA;                color: color,&#xA;                width: itemWidth,&#xA;                height: itemHeight,&#xA;              ),&#xA;            )&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Size get preferredSize =&amp;gt; Size.fromHeight(_kKeyboardHeight);&#xA;}&#xA;&#xA;/// A quick example &#34;keyboard&#34; widget for counter value.&#xA;class CounterKeyboard extends StatelessWidget&#xA;    with KeyboardCustomPanelMixin&amp;lt;String&amp;gt;&#xA;    implements PreferredSizeWidget {&#xA;  final ValueNotifier&amp;lt;String&amp;gt; notifier;&#xA;&#xA;  CounterKeyboard({Key key, this.notifier}) : super(key: key);&#xA;&#xA;  @override&#xA;  Size get preferredSize =&amp;gt; Size.fromHeight(200);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Container(&#xA;      height: preferredSize.height,&#xA;      child: Row(&#xA;        children: [&#xA;          Expanded(&#xA;            child: InkWell(&#xA;              onTap: () {&#xA;                int value = int.tryParse(notifier.value) ?? 0;&#xA;                value--;&#xA;                updateValue(value.toString());&#xA;              },&#xA;              child: FittedBox(&#xA;                child: Text(&#xA;                  &#34;-&#34;,&#xA;                  style: TextStyle(&#xA;                    fontWeight: FontWeight.bold,&#xA;                  ),&#xA;                ),&#xA;              ),&#xA;            ),&#xA;          ),&#xA;          Expanded(&#xA;            child: InkWell(&#xA;              onTap: () {&#xA;                int value = int.tryParse(notifier.value) ?? 0;&#xA;                value++;&#xA;                updateValue(value.toString());&#xA;              },&#xA;              child: FittedBox(&#xA;                child: Text(&#xA;                  &#34;+&#34;,&#xA;                  style: TextStyle(&#xA;                    fontWeight: FontWeight.bold,&#xA;                  ),&#xA;                ),&#xA;              ),&#xA;            ),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can follow me on twitter &lt;a href=&#34;https://www.twitter.com/diegoveloper&#34;&gt;@diegoveloper&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>