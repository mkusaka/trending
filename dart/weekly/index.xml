<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-18T01:50:50Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Baseflow/flutter_cached_network_image</title>
    <updated>2023-06-18T01:50:50Z</updated>
    <id>tag:github.com,2023-06-18:/Baseflow/flutter_cached_network_image</id>
    <link href="https://github.com/Baseflow/flutter_cached_network_image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download, cache and show images in a flutter app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cached network image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/cached_network_image&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/cached_network_image.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Baseflow/flutter_cached_network_image&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Baseflow/flutter_cached_network_image/branch/master/graph/badge.svg?token=I5qW0RvoXN&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Baseflow/flutter_cached_network_image/actions/workflows/app_facing_package.yaml&#34;&gt;&lt;img src=&#34;https://github.com/Baseflow/flutter_cached_network_image/workflows/app_facing_package/badge.svg?branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A flutter library to show images from the internet and keep them in the cache directory.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getstream.io/chat/flutter/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_FlutterChat&amp;amp;utm_term=renefloor&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;250px&#34; src=&#34;https://stream-blog.s3.amazonaws.com/blog/wp-content/uploads/fc148f0fc75d02841d017bb36e14e388/Stream-logo-with-background-.png&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;span&gt;&lt;a href=&#34;https://getstream.io/chat/flutter/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_FlutterChat&amp;amp;utm_term=renefloor&#34; target=&#34;_blank&#34;&gt;Try the Flutter Chat Tutorial ðŸ’¬&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;The CachedNetworkImage can be used directly or through the ImageProvider. Both the CachedNetworkImage as CachedNetworkImageProvider have minimal support for web. It currently doesn&#39;t include caching.&lt;/p&gt; &#xA;&lt;p&gt;With a placeholder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CachedNetworkImage(&#xA;        imageUrl: &#34;http://via.placeholder.com/350x150&#34;,&#xA;        placeholder: (context, url) =&amp;gt; CircularProgressIndicator(),&#xA;        errorWidget: (context, url, error) =&amp;gt; Icon(Icons.error),&#xA;     ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with a progress indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CachedNetworkImage(&#xA;       imageUrl: &#34;http://via.placeholder.com/350x150&#34;,&#xA;       progressIndicatorBuilder: (context, url, downloadProgress) =&amp;gt; &#xA;               CircularProgressIndicator(value: downloadProgress.progress),&#xA;       errorWidget: (context, url, error) =&amp;gt; Icon(Icons.error),&#xA;    ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Image(image: CachedNetworkImageProvider(url))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to have both the placeholder functionality and want to get the imageprovider to use in another widget you can provide an imageBuilder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CachedNetworkImage(&#xA;  imageUrl: &#34;http://via.placeholder.com/200x150&#34;,&#xA;  imageBuilder: (context, imageProvider) =&amp;gt; Container(&#xA;    decoration: BoxDecoration(&#xA;      image: DecorationImage(&#xA;          image: imageProvider,&#xA;          fit: BoxFit.cover,&#xA;          colorFilter:&#xA;              ColorFilter.mode(Colors.red, BlendMode.colorBurn)),&#xA;    ),&#xA;  ),&#xA;  placeholder: (context, url) =&amp;gt; CircularProgressIndicator(),&#xA;  errorWidget: (context, url, error) =&amp;gt; Icon(Icons.error),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The cached network images stores and retrieves files using the &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_cache_manager&#34;&gt;flutter_cache_manager&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;My app crashes when the image loading failed. (I know, this is not really a question.)&lt;/h3&gt; &#xA;&lt;p&gt;Does it really crash though? The debugger might pause, as the Dart VM doesn&#39;t recognize it as a caught exception; the console might print errors; even your crash reporting tool might report it (I know, that really sucks). However, does it really crash? Probably everything is just running fine. If you really get an app crashes you are fine to report an issue, but do that with a small example so we can reproduce that crash.&lt;/p&gt; &#xA;&lt;p&gt;See for example &lt;a href=&#34;https://github.com/Baseflow/flutter_cached_network_image/issues/336#issuecomment-760769361&#34;&gt;this&lt;/a&gt; or &lt;a href=&#34;https://github.com/Baseflow/flutter_cached_network_image/issues/536#issuecomment-760857495&#34;&gt;this&lt;/a&gt; answer on previous posted issues.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutter-form-builder-ecosystem/flutter_form_builder</title>
    <updated>2023-06-18T01:50:50Z</updated>
    <id>tag:github.com,2023-06-18:/flutter-form-builder-ecosystem/flutter_form_builder</id>
    <link href="https://github.com/flutter-form-builder-ecosystem/flutter_form_builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple form maker for Flutter Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Form Builder&lt;/h1&gt; &#xA;&lt;p&gt;This package helps in creation of data collection forms in Flutter by removing the boilerplate needed to build a form, validate fields, react to changes and collect final user input.&lt;/p&gt; &#xA;&lt;p&gt;Also included are common ready-made form input fields for FormBuilder. This gives you a convenient way of adding common ready-made input fields instead of creating your own FormBuilderField from scratch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_form_builder?logo=flutter&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/flutter_form_builder/actions/workflows/base.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/flutter-form-builder-ecosystem/flutter_form_builder/base.yaml?branch=main&amp;amp;logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/flutter-form-builder-ecosystem/flutter_form_builder/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/flutter-form-builder-ecosystem/flutter_form_builder?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/flutter-form-builder-ecosystem/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/flutter-form-builder-ecosystem/flutter_form_builder?logo=codefactor&amp;amp;style=for-the-badge&#34; alt=&#34;CodeFactor Grade&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#inputs&#34;&gt;Inputs&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#parameters&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#use&#34;&gt;Use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#basic-use&#34;&gt;Basic use&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#specific-uses&#34;&gt;Specific uses&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#building-your-own-custom-field&#34;&gt;Building your own custom field&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#programmatically-changing-field-value&#34;&gt;Programmatically changing field value&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#programmatically-inducing-an-error&#34;&gt;Programmatically inducing an error&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#conditional-validation&#34;&gt;Conditional validation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#implement-reset-clear-or-other-button-into-field&#34;&gt;Implement reset, clear or other button into field&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#support&#34;&gt;Support&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#questions-and-answers&#34;&gt;Questions and answers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#ecosystem&#34;&gt;Ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#thanks-to&#34;&gt;Thanks to&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a form with several type of inputs&lt;/li&gt; &#xA; &lt;li&gt;Get values from form by easy way&lt;/li&gt; &#xA; &lt;li&gt;Apply validators to inputs fields&lt;/li&gt; &#xA; &lt;li&gt;React to form fields changes and validations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Complete Form&lt;/th&gt; &#xA;   &lt;th&gt;Sign Up&lt;/th&gt; &#xA;   &lt;th&gt;Dynamic Fields&lt;/th&gt; &#xA;   &lt;th&gt;Conditional Form&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/screenshots/complete_form.gif&#34; alt=&#34;Gif demostration with all fields&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/screenshots/signup.gif&#34; alt=&#34;Gif demostration sign up form&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/screenshots/dynamic_fields.gif&#34; alt=&#34;Gif demostration dynamic fields&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/screenshots/conditional_fields.gif&#34; alt=&#34;Gif demostration conditional fields&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Inputs&lt;/h2&gt; &#xA;&lt;p&gt;The currently supported fields include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderCheckbox&lt;/code&gt; - Single checkbox field&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderCheckboxGroup&lt;/code&gt; - List of checkboxes for multiple selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderChoiceChip&lt;/code&gt; - Creates a chip that acts like a radio button.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderDateRangePicker&lt;/code&gt; - For selection of a range of dates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderDateTimePicker&lt;/code&gt; - For &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;DateTime&lt;/code&gt; input&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderDropdown&lt;/code&gt; - Used to select one value from a list as a Dropdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderFilterChip&lt;/code&gt; - Creates a chip that acts like a checkbox&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderRadioGroup&lt;/code&gt; - Used to select one value from a list of Radio Widgets&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderRangeSlider&lt;/code&gt; - Used to select a range from a range of values&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderSlider&lt;/code&gt; - For selection of a numerical value on a slider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderSwitch&lt;/code&gt; - On/Off switch field&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FormBuilderTextField&lt;/code&gt; - A Material Design text field input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;p&gt;In order to create an input field in the form, along with the label, and any applicable validation, there are several attributes that are supported by all types of inputs namely:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Attribute&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Yes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This will form the key in the form value Map&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;initialValue&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The initial value of the input field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines whether the field widget will accept user input.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;decoration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;InputDecoration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;InputDecoration()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines the border, labels, icons, and styles used to decorate the field.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;validator&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FormFieldValidator&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A &lt;code&gt;FormFieldValidator&lt;/code&gt; that will check the validity of value in the &lt;code&gt;FormField&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onChanged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ValueChanged&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;This event function will fire immediately the the field value changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;valueTransformer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ValueTransformer&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function that transforms field value before saving to form value. e.g. transform TextField value for numeric field from &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;num&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;The rest of the attributes will be determined by the type of Widget being used.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;No specific setup required: only install the dependency and use :)&lt;/p&gt; &#xA;&lt;h3&gt;Basic use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final _formKey = GlobalKey&amp;lt;FormBuilderState&amp;gt;();&#xA;&#xA;FormBuilder(&#xA;    key: _formKey,&#xA;    child:  FormBuilderTextField(&#xA;        name: &#39;text&#39;,&#xA;        onChanged: (val) {&#xA;            print(val); // Print the text value write into TextField&#xA;        },&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pub.dev/packages/flutter_form_builder/example&#34;&gt;pub.dev example tab&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/example/lib/main.dart&#34;&gt;github code&lt;/a&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Specific uses&lt;/h3&gt; &#xA;&lt;h4&gt;Building your own custom field&lt;/h4&gt; &#xA;&lt;p&gt;To build your own field within a &lt;code&gt;FormBuilder&lt;/code&gt;, we use &lt;code&gt;FormBuilderField&lt;/code&gt; which will require that you define your own field. Read &lt;a href=&#34;https://medium.com/@danvickmiller/building-a-custom-flutter-form-builder-field-c67e2b2a27f4&#34;&gt;this article&lt;/a&gt; for step-by-step instructions on how to build your own custom field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var options = [&#34;Option 1&#34;, &#34;Option 2&#34;, &#34;Option 3&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormBuilderField(&#xA;  name: &#34;name&#34;,&#xA;  validator: FormBuilderValidators.compose([&#xA;    FormBuilderValidators.required(),&#xA;  ]),&#xA;  builder: (FormFieldState&amp;lt;dynamic&amp;gt; field) {&#xA;    return InputDecorator(&#xA;      decoration: InputDecoration(&#xA;        labelText: &#34;Select option&#34;,&#xA;        contentPadding:&#xA;            EdgeInsets.only(top: 10.0, bottom: 0.0),&#xA;        border: InputBorder.none,&#xA;        errorText: field.errorText,&#xA;      ),&#xA;      child: Container(&#xA;        height: 200,&#xA;        child: CupertinoPicker(&#xA;          itemExtent: 30,&#xA;          children: options.map((c) =&amp;gt; Text(c)).toList(),&#xA;          onSelectedItemChanged: (index) {&#xA;            field.didChange(options[index]);&#xA;          },&#xA;        ),&#xA;      ),&#xA;    );&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Programmatically changing field value&lt;/h4&gt; &#xA;&lt;p&gt;You can either change the value of one field at a time like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_formKey.currentState.fields[&#39;color_picker&#39;].didChange(Colors.black);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or multiple fields value like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_formKey.currentState.patchValue({&#xA;  &#39;age&#39;: &#39;50&#39;,&#xA;  &#39;slider&#39;: 6.7,&#xA;  &#39;filter_chip&#39;: [&#39;Test 1&#39;],&#xA;  &#39;choice_chip&#39;: &#39;Test 2&#39;,&#xA;  &#39;rate&#39;: 4,&#xA;  &#39;chips_test&#39;: [&#xA;    Contact(&#xA;        &#39;Andrew&#39;, &#xA;        &#39;stock@man.com&#39;, &#xA;        &#39;https://d2gg9evh47fn9z.cloudfront.net/800px_COLOURBOX4057996.jpg&#39;,&#xA;    ),&#xA;  ],&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Programmatically inducing an error&lt;/h4&gt; &#xA;&lt;h5&gt;Using form state key or field state key&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final _formKey = GlobalKey&amp;lt;FormBuilderState&amp;gt;();&#xA;final _emailFieldKey = GlobalKey&amp;lt;FormBuilderFieldState&amp;gt;();&#xA;...&#xA;FormBuilder(&#xA;  key: _formKey,&#xA;  child: Column(&#xA;    children: [&#xA;      FormBuilderTextField(&#xA;        key: _emailFieldKey,&#xA;        name: &#39;email&#39;,&#xA;        decoration: const InputDecoration(labelText: &#39;Email&#39;),&#xA;        validator: FormBuilderValidators.compose([&#xA;          FormBuilderValidators.required(),&#xA;          FormBuilderValidators.email(),&#xA;        ]),&#xA;      ),&#xA;      ElevatedButton(&#xA;        child: const Text(&#39;Submit&#39;),&#xA;        onPressed: () async {&#xA;          if(await checkIfEmailExists()){&#xA;            // Either invalidate using Form Key&#xA;            _formKey.currentState?.fields[&#39;email&#39;]?.invalidate(&#39;Email already taken&#39;);&#xA;            // OR invalidate using Field Key&#xA;            _emailFieldKey.currentState?.invalidate(&#39;Email already taken&#39;);&#xA;          }&#xA;        },&#xA;      ),&#xA;    ],&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When use &lt;code&gt;invalidate&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; methods, can use two optional parameters configure the behavior when invalidate field or form, like focus or auto scroll. Take a look on method documentation for more details&lt;/p&gt; &#xA;&lt;h5&gt;Using InputDecoration.errorText&lt;/h5&gt; &#xA;&lt;p&gt;Declare a variable to hold your error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String _emailError;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the variable as the &lt;code&gt;errorText&lt;/code&gt; within &lt;code&gt;InputDecoration&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormBuilderTextField(&#xA;  name: &#39;email&#39;,&#xA;  decoration: InputDecoration(&#xA;    labelText: &#39;Email&#39;,&#xA;    errorText: _emailError,&#xA;  ),&#xA;  validator: FormBuilderValidators.compose([&#xA;      FormBuilderValidators.required(),&#xA;      FormBuilderValidators.email(),&#xA;  ]),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the error text&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RaisedButton(&#xA;  child: Text(&#39;Submit&#39;),&#xA;  onPressed: () async {&#xA;    setState(() =&amp;gt; _emailError = null);&#xA;    if(await checkIfEmailExists()){&#xA;      setState(() =&amp;gt; _emailError = &#39;Email already taken.&#39;);&#xA;    }&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Conditional validation&lt;/h4&gt; &#xA;&lt;p&gt;You can also validate a field based on the value of another field&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormBuilderRadioGroup(&#xA;  decoration: InputDecoration(labelText: &#39;My best language&#39;),&#xA;  name: &#39;my_language&#39;,&#xA;  validator: FormBuilderValidators.required(),&#xA;  options: [&#xA;    &#39;Dart&#39;,&#xA;    &#39;Kotlin&#39;,&#xA;    &#39;Java&#39;,&#xA;    &#39;Swift&#39;,&#xA;    &#39;Objective-C&#39;,&#xA;    &#39;Other&#39;&#xA;  ]&#xA;    .map((lang) =&amp;gt; FormBuilderFieldOption(value: lang))&#xA;    .toList(growable: false),&#xA;  ),&#xA;  FormBuilderTextField(&#xA;    name: &#39;specify&#39;,&#xA;    decoration:&#xA;        InputDecoration(labelText: &#39;If Other, please specify&#39;),&#xA;    validator: (val) {&#xA;      if (_formKey.currentState.fields[&#39;my_language&#39;]?.value ==&#xA;              &#39;Other&#39; &amp;amp;&amp;amp;&#xA;          (val == null || val.isEmpty)) {&#xA;        return &#39;Kindly specify your language&#39;;&#xA;      }&#xA;      return null;&#xA;    },&#xA;  ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Implement reset, clear or other button into field&lt;/h4&gt; &#xA;&lt;p&gt;If you can add some button to reset specific field, can use the &lt;code&gt;decoration&lt;/code&gt; parameter like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;String&amp;gt; genderOptions = [&#39;Male&#39;, &#39;Female&#39;, &#39;Other&#39;];&#xA;&#xA;FormBuilderDropdown&amp;lt;String&amp;gt;(&#xA;  name: &#39;gender&#39;,&#xA;  decoration: InputDecoration(&#xA;    labelText: &#39;Gender&#39;,&#xA;    initialValue: &#39;Male&#39;,&#xA;    suffix: IconButton(&#xA;      icon: const Icon(Icons.close),&#xA;      onPressed: () {&#xA;        _formKey.currentState!.fields[&#39;gender&#39;]&#xA;            ?.reset();&#xA;      },&#xA;    ),&#xA;    hintText: &#39;Select Gender&#39;,&#xA;  ),&#xA;  items: genderOptions&#xA;      .map((gender) =&amp;gt; DropdownMenuItem(&#xA;            alignment: AlignmentDirectional.center,&#xA;            value: gender,&#xA;            child: Text(gender),&#xA;          ))&#xA;      .toList(),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or reset value like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class ClearFormBuilderTextField extends StatefulWidget {&#xA;  const ClearFormBuilderTextField({super.key});&#xA;&#xA;  @override&#xA;  State&amp;lt;ClearFormBuilderTextField&amp;gt; createState() =&amp;gt;&#xA;      _ClearFormBuilderTextFieldState();&#xA;}&#xA;&#xA;class _ClearFormBuilderTextFieldState&#xA;    extends State&amp;lt;ClearFormBuilderTextField&amp;gt; {&#xA;  final ValueNotifier&amp;lt;String?&amp;gt; text = ValueNotifier&amp;lt;String?&amp;gt;(null);&#xA;  final textFieldKey = GlobalKey&amp;lt;FormBuilderFieldState&amp;gt;();&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return FormBuilderTextField(&#xA;      autovalidateMode: AutovalidateMode.always,&#xA;      name: &#39;age&#39;,&#xA;      key: textFieldKey,&#xA;      onChanged: (value) {&#xA;        text.value = value;&#xA;      },&#xA;      decoration: InputDecoration(&#xA;        labelText: &#39;Age&#39;,&#xA;        suffixIcon: ValueListenableBuilder&amp;lt;String?&amp;gt;(&#xA;          valueListenable: text,&#xA;          child: IconButton(&#xA;            onPressed: () =&amp;gt; textFieldKey.currentState?.didChange(null),&#xA;            tooltip: &#39;Clear&#39;,&#xA;            icon: const Icon(Icons.clear),&#xA;          ),&#xA;          builder: (context, value, child) =&amp;gt;&#xA;              (value?.isEmpty ?? true) ? const SizedBox() : child!,&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;You have some ways to contribute to this packages&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beginner: Reporting bugs or request new features&lt;/li&gt; &#xA; &lt;li&gt;Intermediate: Implement new features (from issues or not) and created pull requests&lt;/li&gt; &#xA; &lt;li&gt;Advanced: Join to &lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/flutter_form_builder/main/#ecosystem&#34;&gt;organization&lt;/a&gt; like a member and help coding, manage issues, dicuss new features and other things&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/.github/raw/main/CONTRIBUTING.md&#34;&gt;contribution file&lt;/a&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Questions and answers&lt;/h3&gt; &#xA;&lt;p&gt;You can question or search answers on &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/flutter_form_builder/discussions&#34;&gt;Github discussion&lt;/a&gt; or on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flutter-form-builder&#34;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Donations&lt;/h3&gt; &#xA;&lt;p&gt;Donate or become a sponsor of Flutter Form Builder Ecosystem&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/flutter-form-builder-ecosystem&#34;&gt;&lt;img src=&#34;https://opencollective.com/flutter-form-builder-ecosystem/tiers/sponsor.svg?avatarHeight=56&#34; alt=&#34;Become a Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/flutter_form_builder/issues&#34;&gt;Solve open issues&lt;/a&gt;, &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/flutter_form_builder/labels/bug&#34;&gt;prioritizing bugs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Take a look to &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem&#34;&gt;our awesome ecosystem&lt;/a&gt; and all packages in there&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/flutter_form_builder/graphs/contributors&#34;&gt;All contributors&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xuelongqy/flutter_easy_refresh</title>
    <updated>2023-06-18T01:50:50Z</updated>
    <id>tag:github.com,2023-06-18:/xuelongqy/flutter_easy_refresh</id>
    <link href="https://github.com/xuelongqy/flutter_easy_refresh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flutter widget that provides pull-down refresh and pull-up load.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_easy_refresh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easy_refresh/v3/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flutter.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-Flutter-blue.svg?sanitize=true&#34; alt=&#34;Platform Flutter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/easy_refresh&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/easy_refresh&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;English | &lt;a href=&#34;https://github.com/xuelongqy/flutter_easy_refresh/raw/v3/README_CN.md&#34;&gt;ä¸­æ–‡&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Just like the name, EasyRefresh can easily implement pull-down refresh and pull-up load on Flutter applications. It supports almost all Flutter Scrollable widgets. Its function is very similar to Android&#39;s SmartRefreshLayout, and it also absorbs the advantages of many third-party libraries. EasyRefresh integrates various styles of Header and Footer, but it has no limitations, you can easily customize it. Using Flutter&#39;s powerful animations, even just a simple control can be done. The goal of EasyRefresh is to create a powerful, stable and mature pull-to-refresh framework for Flutter.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://xuelongqy.github.io/flutter_easy_refresh/&#34;&gt;Online demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easy_refresh/releases&#34;&gt;APK download&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://pub.dev/documentation/easy_refresh/latest/&#34;&gt;API reference&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports all scrollable widgets&lt;/li&gt; &#xA; &lt;li&gt;Scrolling physics scope, exactly matching scrollable widgets&lt;/li&gt; &#xA; &lt;li&gt;Integrate multiple cool Header and Footer&lt;/li&gt; &#xA; &lt;li&gt;Support custom styles to achieve various animation effects&lt;/li&gt; &#xA; &lt;li&gt;Support pull-down refresh, pull-up load (Can be triggered and finished with a controller)&lt;/li&gt; &#xA; &lt;li&gt;Support indicator position setting, combined with listeners can also be placed in any position&lt;/li&gt; &#xA; &lt;li&gt;Support refresh when the page starts, and customize the view&lt;/li&gt; &#xA; &lt;li&gt;Support safe area, no more occlusion&lt;/li&gt; &#xA; &lt;li&gt;Customize scroll parameters to allow lists to have different scrolling feedback and inertia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample&lt;/h2&gt; &#xA;&lt;h4&gt;1. Default constructor&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the child scope, all scrolling components will share one physics. If there is scroll nesting, use EasyRefresh.builder or set the scope with ScrollConfiguration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh(&#xA;    onRefresh: () async {&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;    child: ListView(),&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Builder constructor&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh.builder(&#xA;    onRefresh: () async {&#xA;      ....&#xA;      return IndicatorResult.success; &#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;    childBuilder: (context, physics) {&#xA;      return ListView(&#xA;        physics: physics,&#xA;      );&#xA;    },&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Indicator locate&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh(&#xA;    header: Header(&#xA;      position: IndicatorPosition.locator,&#xA;    ),&#xA;    footer: Footer(&#xA;      position: IndicatorPosition.locator,&#xA;    ),&#xA;    onRefresh: () async {&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;      return IndicatorResult.noMore;&#xA;    },&#xA;    child: CustomScrollView(&#xA;      slivers: [&#xA;        SliverAppBar(),&#xA;        const HeaderLocator.sliver(),&#xA;        ...&#xA;        const FooterLocator.sliver(),&#xA;      ],&#xA;    ),&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Use controller&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefreshController _controller = EasyRefreshController(&#xA;    controlFinishRefresh: true,&#xA;    controlFinishLoad: true,&#xA;  );&#xA;  ....&#xA;  EasyRefresh(&#xA;    controller: _controller,&#xA;    onRefresh: () async {&#xA;      ....&#xA;      _controller.finishRefresh();&#xA;      _controller.resetFooter();&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;      _controller.finishLoad(IndicatorResult.noMore);&#xA;    },&#xA;    ....&#xA;  );&#xA;  ....&#xA;  _controller.callRefresh();&#xA;  _controller.callLoad();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Specify Header and Footer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh(&#xA;    header: MaterialHeader(),&#xA;    footer: MaterialFooter(),&#xA;    child: ListView(),&#xA;    ....&#xA;  );&#xA;  // Global&#xA;  EasyRefresh.defaultHeaderBuilder = () =&amp;gt; ClassicHeader();&#xA;  EasyRefresh.defaultFooterBuilder = () =&amp;gt; ClassicFooter();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. NestedScrollView&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh.builder(&#xA;    header: MaterialHeader(&#xA;      clamping: true,&#xA;    ),&#xA;    onRefresh: () async {&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;    childBuilder: (context, physics) {&#xA;      return NestedScrollView(&#xA;        physics: physics,&#xA;        body: ListView(&#xA;          physics: physics,&#xA;        );&#xA;      );&#xA;    },&#xA;  );&#xA;  // or&#xA;  EasyRefresh.builder(&#xA;    header: MaterialHeader(&#xA;      clamping: true,&#xA;      position: IndicatorPosition.locator,&#xA;    ),&#xA;    onRefresh: () async {&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;    childBuilder: (context, physics) {&#xA;      return NestedScrollView(&#xA;        physics: physics,&#xA;        headerSliverBuilder: (context, innerBoxIsScrolled) {&#xA;          return [&#xA;            const HeaderLocator.sliver(clearExtent: false),&#xA;            ....&#xA;          ];&#xA;        },&#xA;        body: ListView(&#xA;          physics: physics,&#xA;        );&#xA;      );&#xA;    },&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feel free to contribute&lt;/h2&gt; &#xA;&lt;p&gt;One&#39;s maintenance is lonely. If you have good suggestions and changes, feel free to contribute your code. If you have really cool styles, It&#39;s even cooler to share with everyone.&lt;/p&gt; &#xA;&lt;h4&gt;Thanks to all the people who already contributed!&lt;/h4&gt; &#xA;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easy_refresh/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=xuelongqy/flutter_easy_refresh&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;QQ Group - 554981921&lt;/h2&gt; &#xA;&lt;h4&gt;Into the group of instructions&lt;/h4&gt; &#xA;&lt;p&gt;The group is not only solve the problem of EasyRefresh, any Flutter related issues can be discussed. Just as its name, craigslist, as long as there is time, group of Lord will help you solve problems together.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scwang90/SmartRefreshLayout&#34;&gt;SmartRefreshLayout&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/jogboms/flutter_spinkit&#34;&gt;flutter_spinkit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; &#xA;MIT License&#xA;&#xA;Copyright (c) 2018 xuelongqy&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>