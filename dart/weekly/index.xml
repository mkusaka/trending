<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:42:00Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PhilipsHue/flutter_reactive_ble</title>
    <updated>2022-09-11T01:42:00Z</updated>
    <id>tag:github.com,2022-09-11:/PhilipsHue/flutter_reactive_ble</id>
    <link href="https://github.com/PhilipsHue/flutter_reactive_ble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter library that handles BLE operations for multiple devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter reactive BLE library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_reactive_ble&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_reactive_ble?label=flutter_reactive_ble&#34; alt=&#34;flutter_reactive_ble version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter library that handles BLE operations for multiple devices.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an new issue or a pull request to make this project better&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;This project uses melos to manage all the packages inside this repo.&lt;/p&gt; &#xA;&lt;p&gt;Install melos: &lt;code&gt;dart pub global activate melos&lt;/code&gt; Setup melos to point to the dependencies in your local folder: &lt;code&gt;melos bootstrap&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Library requires kotlin version &lt;code&gt;1.5.31&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Update kotlin version&lt;/h3&gt; &#xA;&lt;p&gt;To update the kotlin version open Android studio and go to &lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin plugin updates&lt;/code&gt; and update &lt;code&gt;Update channel&lt;/code&gt; to &lt;code&gt;1.5.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The reactive BLE lib supports the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BLE device discovery&lt;/li&gt; &#xA; &lt;li&gt;Observe host device BLE status&lt;/li&gt; &#xA; &lt;li&gt;Establishing a BLE connection&lt;/li&gt; &#xA; &lt;li&gt;Maintaining connection status of multiple BLE devices&lt;/li&gt; &#xA; &lt;li&gt;Discover services(will be implicit)&lt;/li&gt; &#xA; &lt;li&gt;Read / write a characteristic&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to a characteristic&lt;/li&gt; &#xA; &lt;li&gt;Clear GATT cache&lt;/li&gt; &#xA; &lt;li&gt;Negotiate MTU size&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You need to add the following permissions to your AndroidManifest.xml file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34; android:usesPermissionFlags=&#34;neverForLocation&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;BLUETOOTH_SCAN&lt;/code&gt; to determine location, remove &lt;code&gt;android:usesPermissionFlags=&#34;neverForLocation&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use location services in your app, remove &lt;code&gt;android:maxSdkVersion=&#34;30&#34;&lt;/code&gt; from the location permission tags&lt;/p&gt; &#xA;&lt;h3&gt;Android ProGuard rules&lt;/h3&gt; &#xA;&lt;p&gt;In case you are using ProGuard add the following snippet to your &lt;code&gt;proguard-rules.pro&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.signify.hue.** { *; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will prevent issues like &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/issues/131&#34;&gt;#131&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;For iOS it is required you add the following entries to the &lt;code&gt;Info.plist&lt;/code&gt; file of your app. It is not allowed to access Core BLuetooth without this. See &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/raw/master/example/ios/Runner/Info.plist&#34;&gt;our example app&lt;/a&gt; on how to implement this. For more indepth details: &lt;a href=&#34;https://medium.com/flawless-app-stories/handling-ios-13-bluetooth-permissions-26c6a8cbb816&#34;&gt;Blog post on iOS bluetooth permissions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;iOS13 and higher&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSBluetoothAlwaysUsageDescription&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;iOS12 and lower&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSBluetoothPeripheralUsageDescription&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;Initializing the library should be done the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final flutterReactiveBle = FlutterReactiveBle();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Device discovery&lt;/h3&gt; &#xA;&lt;p&gt;Discovering BLE devices should be done like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutterReactiveBle.scanForDevices(withServices: [serviceId], scanMode: ScanMode.lowLatency).listen((device) {&#xA;      //code for handling results&#xA;    }, onError: () {&#xA;      //code for handling error&#xA;    });&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;withServices&lt;/code&gt; parameter specifies the advertised service IDs to look for. If an empty list is passed, all the advertising devices will be reported. The parameter &lt;code&gt;scanMode&lt;/code&gt; is only used on Android and follows the conventions described on &lt;a href=&#34;https://developer.android.com/reference/android/bluetooth/le/ScanSettings#SCAN_MODE_BALANCED&#34;&gt;ScanSettings&lt;/a&gt; Android reference page. If &lt;code&gt;scanMode&lt;/code&gt; is omitted the balanced scan mode will be used.&lt;/p&gt; &#xA;&lt;h3&gt;Observe host device BLE status&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;statusStream&lt;/code&gt; to retrieve updates about the BLE status of the host device (the device running the app) . This stream can be used in order to determine if the BLE is turned on, on the device or if the required permissions are granted. Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_ble.statusStream.listen((status) {&#xA;  //code for handling status update&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt; _ble.status&lt;/code&gt; to get the current status of the host device.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/raw/master/packages/reactive_ble_platform_interface/lib/src/model/ble_status.dart&#34;&gt;BleStatus&lt;/a&gt; for more info about the meaning of the different statuses.&lt;/p&gt; &#xA;&lt;h3&gt;Establishing connection&lt;/h3&gt; &#xA;&lt;p&gt;To interact with a device you first need to establish a connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutterReactiveBle.connectToDevice(&#xA;      id: foundDeviceId,&#xA;      servicesWithCharacteristicsToDiscover: {serviceId: [char1, char2]},&#xA;      connectionTimeout: const Duration(seconds: 2),&#xA;    ).listen((connectionState) {&#xA;      // Handle connection state updates&#xA;    }, onError: (Object error) {&#xA;      // Handle a possible error&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the required &lt;code&gt;id&lt;/code&gt; parameter use a device ID retrieved through device discovery. On iOS the device ID is a UUID and on Android it is a MAC address (which may also be randomized, depending on the Android version). Supplying a map with service and characteristic IDs you want to discover may speed up the connection on iOS (otherwise &lt;em&gt;all&lt;/em&gt; services and characteristics will be discovered). You can specify a &lt;code&gt;connectionTimeout&lt;/code&gt; when the client will provide an error in case the connection cannot be established within the specified time.&lt;/p&gt; &#xA;&lt;p&gt;There are numerous issues on the Android BLE stack that leave it hanging when you try to connect to a device that is not in range. To work around this issue use the method &lt;code&gt;connectToAdvertisingDevice&lt;/code&gt; to first scan for the device and only if it is found connect to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutterReactiveBle.connectToAdvertisingDevice(&#xA;    id: foundDeviceId,&#xA;    withServices: [serviceUuid],&#xA;    prescanDuration: const Duration(seconds: 5),&#xA;    servicesWithCharacteristicsToDiscover: {serviceId: [char1, char2]},&#xA;    connectionTimeout: const Duration(seconds:  2),&#xA;  ).listen((connectionState) {&#xA;    // Handle connection state updates&#xA;  }, onError: (dynamic error) {&#xA;    // Handle a possible error&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides the normal connection parameters that are described above this function also has 2 additional required parameters: &lt;code&gt;withServices&lt;/code&gt; and &lt;code&gt;prescanDuration&lt;/code&gt;. PreScanDuration is the amount of time the ble stack will scan for the device before it attempts to connect (if the device is found)&lt;/p&gt; &#xA;&lt;h3&gt;Read / write characteristics&lt;/h3&gt; &#xA;&lt;h4&gt;Read characteristic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId);&#xA;final response = await flutterReactiveBle.readCharacteristic(characteristic);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Write with response&lt;/h4&gt; &#xA;&lt;p&gt;Write a value to characteristic and await the response. The &#34;response&#34; in &#34;write characteristic with response&#34; means &#34;an acknowledgement of reception&#34;. The write can either be acknowledged (success) or failed (an exception is thrown), thus the return type is &lt;code&gt;void&lt;/code&gt; and there is nothing to print (though you can &lt;code&gt;print(&#34;Write successful&#34;)&lt;/code&gt; and in a catch-clause &lt;code&gt;print(&#34;Write failed: $e&#34;)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;BLE does not provide a request-response mechanism like you may know from HTTP out of the box. If you need to perform request-response calls, you will need to implement a custom mechanism on top of the basic BLE functionality. A typical approach is to implement a &#34;control point&#34;: a characteristic that is writable and delivers &lt;a href=&#34;https://duckduckgo.com/?q=BLE+%22indications%22+vs+%22notifications%22&#34;&gt;notifications or indications&lt;/a&gt;, so that a request is written to it and a response is delivered back as a notification or an indication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId); &#xA;await flutterReactiveBle.writeCharacteristicWithResponse(characteristic, value: [0x00]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Write without response&lt;/h4&gt; &#xA;&lt;p&gt;Use this operation if you want to execute multiple consecutive write operations in a small timeframe (e.g uploading firmware to device) or if the device does not provide a response. This is performance wise the fastest way of writing a value but there&#39;s a chance that the BLE device cannot handle that many consecutive writes in a row, so do a &lt;code&gt;writeWithResponse&lt;/code&gt; once in a while.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId);&#xA;flutterReactiveBle.writeCharacteristicWithoutResponse(characteristic, value: [0x00]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subscribe to characteristic&lt;/h3&gt; &#xA;&lt;p&gt;Instead of periodically reading the characteristic you can also listen to the notifications (in case the specific service supports it) in case the value changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId);&#xA;   flutterReactiveBle.subscribeToCharacteristic(characteristic).listen((data) {&#xA;      // code to handle incoming data&#xA;    }, onError: (dynamic error) {&#xA;      // code to handle errors&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Negotiate MTU size&lt;/h3&gt; &#xA;&lt;p&gt;You can increase or decrease the MTU size to reach a higher throughput. This operation will return the actual negotiated MTU size, but it is no guarantee that the requested size will be successfully negotiated. iOS has a default MTU size which cannot be negotiated, however you can still use this operation to get the current MTU.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final mtu = await flutterReactiveBle.requestMtu(deviceId: foundDeviceId, mtu: 250);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android specific operations&lt;/h3&gt; &#xA;&lt;p&gt;The following operations will only have effect for Android and are not supported by iOS. When using these operations on iOS the library will throw an UnSupportedOperationException.&lt;/p&gt; &#xA;&lt;h4&gt;Request connection priority&lt;/h4&gt; &#xA;&lt;p&gt;On Android you can send a connection priority update to the BLE device. The parameter &lt;code&gt;priority&lt;/code&gt; is an enum that uses the same spec as the &lt;a href=&#34;https://developer.android.com/reference/android/bluetooth/BluetoothGatt#requestConnectionPriority(int)&#34;&gt;BluetoothGatt Android spec&lt;/a&gt;. Using &lt;code&gt;highPerformance&lt;/code&gt; will increase battery usage but will speed up GATT operations. Be cautious when setting the priority when communicating with multiple devices because if you set highperformance for all devices the effect of increasing the priority will be lower.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await flutterReactiveBle.requestConnectionPriority(deviceId: foundDeviceId, priority:  ConnectionPriority.highPerformance);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clear GATT cache&lt;/h4&gt; &#xA;&lt;p&gt;The Android OS maintains a table per device of the discovered service in cache. Sometimes it happens that after a firmware update a new service is introduced but the cache is not updated. To invalidate the cache you can use the cleargattCache operation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a hidden BLE operation and should be used with extreme caution since this operation is on the &lt;a href=&#34;https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces&#34;&gt;greylist&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await flutterReactiveBle.clearGattCache(foundDeviceId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;How to handle the BLE undeliverable exception&lt;/h4&gt; &#xA;&lt;p&gt;On Android side we use the &lt;a href=&#34;https://github.com/Polidea/RxAndroidBle&#34;&gt;RxAndroidBle&lt;/a&gt; library of Polidea. After migration towards RxJava 2 some of the errors are not routed properly to their listeners and thus this will result in a BLE Undeliverable Exception. The root cause lies in the threading of the Android OS. As workaround RxJava has a hook where you can set the global errorhandler. For more info see &lt;a href=&#34;https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0#error-handling&#34;&gt;RxJava docs&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;A default workaround implementation in the Flutter app (needs to be in the Java / Kotlin part e.g. mainactivity) is shown below. For an example (in Java) see Polidea RxAndroidBle &lt;a href=&#34;https://github.com/Polidea/RxAndroidBle/tree/master/sample/src/main/java/com/polidea/rxandroidble2/sample&#34;&gt;sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;BleException is coming from Polidea RxAndroidBle, so make sure your application declares the following depedency: &lt;code&gt;implementation &#34;com.polidea.rxandroidble2:rxandroidble:1.11.1&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;RxJavaPlugins.setErrorHandler { throwable -&amp;gt;&#xA;  if (throwable is UndeliverableException &amp;amp;&amp;amp; throwable.cause is BleException) {&#xA;    return@setErrorHandler // ignore BleExceptions since we do not have subscriber&#xA;  }&#xA;  else {&#xA;    throw throwable&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Why doesn&#39;t the BLE stack directly connect to my peripheral&lt;/h4&gt; &#xA;&lt;p&gt;Before you are able to execute BLE operations the BLE-stack of the device makes sure everything is setup correctly and then reports ready for operation. For some devices this takes a bit longer than for others. When starting the app make sure that the BLE-stack is properly initialized before you execute BLE operations. The safest way to do this is by listening to the &lt;code&gt;statusStream&lt;/code&gt; and wait for &lt;code&gt;BleStatus.ready&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will prevent issues like &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/issues/147&#34;&gt;#147&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unofficial example apps&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example implementation UART over BLE:&lt;a href=&#34;https://github.com/wolfc01/flutter_reactive_ble_uart_example&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Example implementation subscription to characteristic using StreamProvider: &lt;a href=&#34;https://github.com/ubiqueIoT/flutter-reactive-ble-example&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gskinnerTeam/flutter-wonderous-app</title>
    <updated>2022-09-11T01:42:00Z</updated>
    <id>tag:github.com,2022-09-11:/gskinnerTeam/flutter-wonderous-app</id>
    <link href="https://github.com/gskinnerTeam/flutter-wonderous-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A showcase app for the Flutter SDK. Wonderous will educate and entertain as you uncover information about some of the most famous structures in the world.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wonderous&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;215&#34; src=&#34;https://user-images.githubusercontent.com/736973/187334196-b79e48b2-dbb8-4ea7-8aac-04dbc7e5159f.png#gh-dark-mode-only&#34;&gt; &lt;img width=&#34;215&#34; src=&#34;https://user-images.githubusercontent.com/736973/187334195-9821c031-a566-4f8e-b4e3-3158f733c6e5.png#gh-light-mode-only&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;800&#34; alt=&#34;wonderous-banner-800w&#34; src=&#34;https://user-images.githubusercontent.com/736973/187334170-d05271e9-d016-4498-8065-662c6f1124fa.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Navigate the intersection of history, art, and culture. Wonderous will educate and entertain as you uncover information about some of the most famous structures in the world.&lt;/p&gt; &#xA;&lt;p&gt;Built by &lt;a href=&#34;https://gskinner.com/&#34;&gt;gskinner&lt;/a&gt; in partnership with the Flutter team, Wonderous deliberately pushes visual fidelity, effects and transitions to showcase what Flutter is truly capable of on modern mobile hardware.&lt;/p&gt; &#xA;&lt;p&gt;In addition to forking and reviewing the &lt;a href=&#34;https://raw.githubusercontent.com/gskinnerTeam/flutter-wonderous-app/master/LICENSE&#34;&gt;MIT licensed&lt;/a&gt; code available here, you can check out more information on the &lt;a href=&#34;https://wonderous.app&#34;&gt;Wonderous Showcase Website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;App Downloads&lt;/h1&gt; &#xA;&lt;p&gt;To try the app you can download it from your favorite app store:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.gskinner.flutter.wonders&#34;&gt;Google Play&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/wonderous/id1612491897&#34;&gt;Apple App Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re new to Flutter the first thing you&#39;ll need is to follow the &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once Flutter is setup, you can use the latest &lt;code&gt;beta&lt;/code&gt; channel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter channel beta&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter upgrade&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once on &lt;code&gt;beta&lt;/code&gt; you&#39;re ready to run the app on your local device or simulator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d android&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Impeller Rendering Layer&lt;/h3&gt; &#xA;&lt;p&gt;Impeller is Flutter&#39;s next-generation rendering layer, that takes full advantage of modern hardware-accelerated graphics APIs. It is currently available as an &lt;strong&gt;early adopter preview&lt;/strong&gt;, but is not yet feature-complete or fully optimized.&lt;/p&gt; &#xA;&lt;p&gt;The version of Wonderous available in the iOS app store uses Impeller, but by default this code base does not. If you&#39;d like to enable Impeller for iOS, follow these steps:&lt;/p&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;Info.plist&lt;/code&gt; file and set &lt;code&gt;FLTEnableImpeller&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;FLTEnableImpeller&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, switch to the &lt;code&gt;master&lt;/code&gt; channel and build as normal:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter channel master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d ios&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, when Impeller is enabled testing in Simulator will not work, you will need to test on a physical device.&lt;/p&gt; &#xA;&lt;h1&gt;About gskinner&lt;/h1&gt; &#xA;&lt;p&gt;We build innovative digital experiences for smart clients, and we love how Flutter unleashes our creativity when building multi-platform apps. Don&#39;t hesitate to &lt;a href=&#34;https://gskinner.com/&#34;&gt;stop by our site&lt;/a&gt; to learn more about what we do, or check out other &lt;a href=&#34;https://flutter.gskinner.com&#34;&gt;innovative Flutter projects&lt;/a&gt; we&#39;ve built. We&#39;d love to hear from you!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This application is released under the &lt;a href=&#34;https://raw.githubusercontent.com/gskinnerTeam/flutter-wonderous-app/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;. You can use the code for any purpose, including commercial projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard</title>
    <updated>2022-09-11T01:42:00Z</updated>
    <id>tag:github.com,2022-09-11:/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard</id>
    <link href="https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Responsive Admin Panel or Dashboard using Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Responsive Admin Panel or Dashboard - Flutter UI&lt;/h1&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-3-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://abuanwar072.github.io/Flutter-Responsive-Admin-Panel-or-Dashboard/#/&#34;&gt;Live Preview&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packages we are using:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flutter_svg: &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;google_fonts: &lt;a href=&#34;https://pub.dev/packages/google_fonts&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;provider: &lt;a href=&#34;https://pub.dev/packages/provider&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fonts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Poppins &lt;a href=&#34;https://fonts.google.com/specimen/Poppins&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtu.be/_uOgXpEHNbc&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;On Flutter V2.* web officially supported on a stable branch. Today I share an Admin panel or you can call it dashboard UI build with flutter. Now you can build your app dashboard using flutter. This dashboard contains almost everything that you need like a chart, table, nice small card for showing info. It works perfectly on the Web, macOS app, Tablet also on both Android and iOS phones. It&#39;s time to code once run everywhere. Yeah, Flutter web is not SEO friendly but we don&#39;t need SEO for the admin panel.&lt;/p&gt; &#xA;&lt;h3&gt;Responsive Admin Panel or Dashboard Final UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/gif.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/ui.png&#34; alt=&#34;App UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/simon1tan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1250858?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Simon Tan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/issues?q=author%3Asimon1tan&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gillescoolen&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/31668393?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gilles&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/issues?q=author%3Agillescoolen&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/RounakTadvi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/38634459?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rounak Tadvi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/#maintenance-RounakTadvi&#34; title=&#34;Maintenance&#34;&gt;🚧&lt;/a&gt; &lt;a href=&#34;https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/commits?author=RounakTadvi&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
</feed>