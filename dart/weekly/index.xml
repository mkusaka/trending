<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:44:39Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bharat-biradar/Google-Ml-Kit-plugin</title>
    <updated>2022-11-13T01:44:39Z</updated>
    <id>tag:github.com,2022-11-13:/bharat-biradar/Google-Ml-Kit-plugin</id>
    <link href="https://github.com/bharat-biradar/Google-Ml-Kit-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flutter plugin that implements google&#39;s standalone ml kit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google&#39;s ML Kit for Flutter&lt;/h1&gt; &#xA;&lt;p&gt;Google&#39;s ML Kit for Flutter is a set of &lt;a href=&#34;https://flutter.io/platform-plugins/&#34;&gt;Flutter plugins&lt;/a&gt; that enable &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt; apps to use &lt;a href=&#34;https://developers.google.com/ml-kit&#34;&gt;Google&#39;s standalone ML Kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Vision APIs&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Plugin&lt;/th&gt; &#xA;   &lt;th&gt;Source Code&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/barcode-scanning&#34;&gt;Barcode Scanning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_barcode_scanning&#34;&gt;google_mlkit_barcode_scanning&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_barcode_scanning&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_barcode_scanning&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_barcode_scanning&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/face-detection&#34;&gt;Face Detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_face_detection&#34;&gt;google_mlkit_face_detection&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_face_detection&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_face_detection&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_face_detection&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/image-labeling&#34;&gt;Image Labeling&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_image_labeling&#34;&gt;google_mlkit_image_labeling&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_image_labeling&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_image_labeling&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_image_labeling&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/object-detection&#34;&gt;Object Detection and Tracking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_object_detection&#34;&gt;google_mlkit_object_detection&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_object_detection&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_object_detection&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_object_detection&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/text-recognition&#34;&gt;Text Recognition&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_text_recognition&#34;&gt;google_mlkit_text_recognition&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_text_recognition&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_text_recognition&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_text_recognition&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/text-recognition/v2&#34;&gt;Text Recognition V2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_text_recognition&#34;&gt;google_mlkit_text_recognition&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_text_recognition&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_text_recognition&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_text_recognition&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/digital-ink-recognition&#34;&gt;Digital Ink Recognition&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_digital_ink_recognition&#34;&gt;google_mlkit_digital_ink_recognition&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_digital_ink_recognition&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_digital_ink_recognition&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_digital_ink_recognition&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/pose-detection&#34;&gt;Pose Detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_pose_detection&#34;&gt;google_mlkit_pose_detection&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_pose_detection&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_pose_detection&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_pose_detection&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/selfie-segmentation&#34;&gt;Selfie Segmentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_selfie_segmentation&#34;&gt;google_mlkit_selfie_segmentation&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_selfie_segmentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_selfie_segmentation&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_selfie_segmentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Natural Language APIs&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Plugin&lt;/th&gt; &#xA;   &lt;th&gt;Source Code&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/language/identification&#34;&gt;Language Identification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_language_id&#34;&gt;google_mlkit_language_id&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_language_id&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_language_id&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_language_id&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/language/translation&#34;&gt;On-Device Translation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_translation&#34;&gt;google_mlkit_translation&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_translation&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_translation&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_translation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/language/smart-reply&#34;&gt;Smart Reply&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_smart_reply&#34;&gt;google_mlkit_smart_reply&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_smart_reply&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_smart_reply&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_smart_reply&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/language/entity-extraction&#34;&gt;Entity Extraction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/google_mlkit_entity_extraction&#34;&gt;google_mlkit_entity_extraction&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/google_mlkit_entity_extraction&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_mlkit_entity_extraction&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_entity_extraction&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-%23121011.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimum iOS Deployment Target: 10.0&lt;/li&gt; &#xA; &lt;li&gt;Xcode 13 or newer&lt;/li&gt; &#xA; &lt;li&gt;Swift 5&lt;/li&gt; &#xA; &lt;li&gt;ML Kit only supports 64-bit architectures (x86_64 and arm64). Check this &lt;a href=&#34;https://developer.apple.com/support/required-device-capabilities/&#34;&gt;list&lt;/a&gt; to see if your device has the required device capabilities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since ML Kit does not support 32-bit architectures (i386 and armv7), you need to exclude armv7 architectures in Xcode in order to run &lt;code&gt;flutter build ios&lt;/code&gt; or &lt;code&gt;flutter build ipa&lt;/code&gt;. More info &lt;a href=&#34;https://developers.google.com/ml-kit/migration/ios&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Go to Project &amp;gt; Runner &amp;gt; Building Settings &amp;gt; Excluded Architectures &amp;gt; Any SDK &amp;gt; armv7&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/raw/master/resources/build_settings_01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then your Podfile should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# add this line:&#xA;$iOSVersion = &#39;10.0&#39;&#xA;&#xA;post_install do |installer|&#xA;  # add these lines:&#xA;  installer.pods_project.build_configurations.each do |config|&#xA;    config.build_settings[&#34;EXCLUDED_ARCHS[sdk=*]&#34;] = &#34;armv7&#34;&#xA;    config.build_settings[&#39;IPHONEOS_DEPLOYMENT_TARGET&#39;] = $iOSVersion&#xA;  end&#xA;  &#xA;  installer.pods_project.targets.each do |target|&#xA;    flutter_additional_ios_build_settings(target)&#xA;    &#xA;    # add these lines:&#xA;    target.build_configurations.each do |config|&#xA;      if Gem::Version.new($iOSVersion) &amp;gt; Gem::Version.new(config.build_settings[&#39;IPHONEOS_DEPLOYMENT_TARGET&#39;])&#xA;        config.build_settings[&#39;IPHONEOS_DEPLOYMENT_TARGET&#39;] = $iOSVersion&#xA;      end&#xA;    end&#xA;    &#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the minimum &lt;code&gt;IPHONEOS_DEPLOYMENT_TARGET&lt;/code&gt; is 10.0, you can set it to something newer but not older.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;minSdkVersion: 21&lt;/li&gt; &#xA; &lt;li&gt;targetSdkVersion: 31&lt;/li&gt; &#xA; &lt;li&gt;compileSdkVersion: 31&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migrating from ML Kit for Firebase&lt;/h2&gt; &#xA;&lt;p&gt;When Migrating from ML Kit for Firebase read &lt;a href=&#34;https://developers.google.com/ml-kit/migration&#34;&gt;this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Android details read &lt;a href=&#34;https://developers.google.com/ml-kit/migration/android&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For iOS details read &lt;a href=&#34;https://developers.google.com/ml-kit/migration/ios&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Firebase dependency: Custom Models&lt;/h2&gt; &#xA;&lt;p&gt;Google&#39;s standalone ML Kit library does have any direct dependency with Firebase. As designed by Google, you do not need to include Firebase in your project in order to use ML Kit. However, some ML Kit APIs have the possibility to be used with &lt;a href=&#34;https://developers.google.com/ml-kit/custom-models&#34;&gt;Custom Models&lt;/a&gt;, that means that the default models can be replaced with custom TensorFlow Lite models.&lt;/p&gt; &#xA;&lt;p&gt;The plugins that allow Custom Models are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_image_labeling&#34;&gt;google_mlkit_image_labeling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_mlkit_object_detection&#34;&gt;google_mlkit_object_detection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iOS Additional Setup&lt;/h3&gt; &#xA;&lt;p&gt;To use custom models hosted in firebase in iOS, you have to update your app&#39;s Podfile.&lt;/p&gt; &#xA;&lt;p&gt;First, include &lt;code&gt;GoogleMLKit/LinkFirebase&lt;/code&gt; and &lt;code&gt;Firebase&lt;/code&gt; in your Podfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;platform :ios, &#39;10.0&#39;&#xA;&#xA;...&#xA;&#xA;# Enable firebase-hosted models #&#xA;pod &#39;GoogleMLKit/LinkFirebase&#39;&#xA;pod &#39;Firebase&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add the preprocessor flag to enable the firebase remote models at compile time. To do that, update your existing &lt;code&gt;build_configurations&lt;/code&gt; loop in the &lt;code&gt;post_install&lt;/code&gt; step with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;post_install do |installer|&#xA;  installer.pods_project.targets.each do |target|&#xA;    ... # Here are some configurations automatically generated by flutter&#xA;&#xA;    target.build_configurations.each do |config|&#xA;      # Enable firebase-hosted ML models&#xA;      config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||= [&#xA;        &#39;$(inherited)&#39;,&#xA;        &#39;MLKIT_FIREBASE_MODELS=1&#39;,&#xA;      ]&#xA;    end&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To setup Firebase for your project check this links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firebase.google.com/docs/android/setup&#34;&gt;Add Firebase to your Android project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firebase.google.com/docs/ios/setup&#34;&gt;Add Firebase to your iOS project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also please note that in latest &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/raw/master/packages/google_ml_kit/CHANGELOG.md&#34;&gt;versions&lt;/a&gt;, &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_ml_kit&#34;&gt;google_ml_kit&lt;/a&gt; has become an umbrella plugin including all the plugin listed in &lt;a href=&#34;https://raw.githubusercontent.com/bharat-biradar/Google-Ml-Kit-plugin/master/#features&#34;&gt;Features&lt;/a&gt;. For that reason you will need to configure Firebase in your project if using &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_ml_kit&#34;&gt;google_ml_kit&lt;/a&gt;. We recommend you start using the plugins listed in &lt;a href=&#34;https://raw.githubusercontent.com/bharat-biradar/Google-Ml-Kit-plugin/master/#features&#34;&gt;Features&lt;/a&gt; rather than using &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_ml_kit&#34;&gt;google_ml_kit&lt;/a&gt;, otherwise you will be including unnecessary dependencies in your project.&lt;/p&gt; &#xA;&lt;h2&gt;Example app&lt;/h2&gt; &#xA;&lt;p&gt;Find the example app &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/tree/master/packages/google_ml_kit/example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. In case of any problems look at &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/issues&#34;&gt;existing issues&lt;/a&gt;, if you cannot find anything related to your problem then open an issue. Create an issue before opening a &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/pulls&#34;&gt;pull request&lt;/a&gt; for non trivial fixes. In case of trivial fixes open a &lt;a href=&#34;https://github.com/bharat-biradar/Google-Ml-Kit-plugin/pulls&#34;&gt;pull request&lt;/a&gt; directly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flyerhq/flutter_chat_ui</title>
    <updated>2022-11-13T01:44:39Z</updated>
    <id>tag:github.com,2022-11-13:/flyerhq/flutter_chat_ui</id>
    <link href="https://github.com/flyerhq/flutter_chat_ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Actively maintained, community-driven chat UI implementation with an optional Firebase BaaS.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://flyer.chat&#34;&gt; &lt;img src=&#34;https://flyer.chat/assets/logo-dark.svg?sanitize=true&#34; width=&#34;288px&#34; alt=&#34;Flyer Chat Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Flutter Chat UI&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Actively maintained, community-driven chat UI implementation with an optional &lt;a href=&#34;https://pub.dev/packages/flutter_firebase_chat_core&#34;&gt;Firebase BaaS&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🇺🇦🇺🇦 We are Ukrainians. If you enjoy our work, please &lt;a href=&#34;https://u24.gov.ua&#34;&gt;consider donating&lt;/a&gt; to help save our country. 🇺🇦🇺🇦 &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_chat_ui&#34;&gt; &lt;img alt=&#34;Pub&#34; src=&#34;https://img.shields.io/pub/v/flutter_chat_ui&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/flyerhq/flutter_chat_ui/actions?query=workflow%3Abuild&#34;&gt; &lt;img alt=&#34;Build Status&#34; src=&#34;https://github.com/flyerhq/flutter_chat_ui/workflows/build/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/flyerhq/flutter_chat_ui&#34;&gt; &lt;img alt=&#34;CodeFactor&#34; src=&#34;https://www.codefactor.io/repository/github/flyerhq/flutter_chat_ui/badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://flyer.chat&#34;&gt; &lt;img alt=&#34;Chat Image&#34; src=&#34;https://user-images.githubusercontent.com/14123304/193468140-91942302-2332-4cb1-8504-61b8892d828b.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Flyer Chat is a platform for creating in-app chat experiences using Flutter or &lt;a href=&#34;https://github.com/flyerhq/react-native-chat-ui&#34;&gt;React Native&lt;/a&gt;. This repository contains chat UI implementation for Flutter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Free, open-source and community-driven&lt;/strong&gt;. We offer no paid plugins and strive to create an easy-to-use, almost drop-in chat experience for any application. Contributions are more than welcome! Please read our &lt;a href=&#34;https://raw.githubusercontent.com/flyerhq/flutter_chat_ui/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Backend agnostic&lt;/strong&gt;. You can choose the backend you prefer. But if you don&#39;t have one, we provide our own free and open-source &lt;a href=&#34;https://pub.dev/packages/flutter_firebase_chat_core&#34;&gt;Firebase implementation&lt;/a&gt;, which can be used to create a working chat in minutes. We are also working on our more advanced SaaS and self-hosted solutions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Customizable&lt;/strong&gt;. Supports custom themes, locales and more. Check our &lt;a href=&#34;https://docs.flyer.chat/flutter/chat-ui/&#34;&gt;documentation&lt;/a&gt; for the info. More options are on the way, let us know if something is missing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Minimum dependencies&lt;/strong&gt;. Our packages are lightweight. Use your favourite packages for selecting images, opening files etc. See the &lt;a href=&#34;https://github.com/flyerhq/flutter_chat_ui/raw/main/example/lib/main.dart&#34;&gt;example&lt;/a&gt; for possible implementation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Dart &amp;gt;=2.18.0&lt;/code&gt; and &lt;code&gt;Flutter &amp;gt;=2.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://docs.flyer.chat/flutter/chat-ui/&#34;&gt;documentation&lt;/a&gt; or see the &lt;a href=&#34;https://github.com/flyerhq/flutter_chat_ui/tree/main/example&#34;&gt;example&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/flyerhq/flutter_chat_ui/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before submitting a pull request to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Flyer Chat has adopted the &lt;a href=&#34;https://www.contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; as its Code of Conduct, and we expect project participants to adhere to it. Please read &lt;a href=&#34;https://raw.githubusercontent.com/flyerhq/flutter_chat_ui/main/CODE_OF_CONDUCT.md&#34;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/flyerhq/flutter_chat_ui/main/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutterchina/dio</title>
    <updated>2022-11-13T01:44:39Z</updated>
    <id>tag:github.com,2022-11-13:/flutterchina/dio</id>
    <link href="https://github.com/flutterchina/dio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful Http client for Dart, which supports Interceptors, FormData, Request Cancellation, File Downloading, Timeout etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Language: &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/README-ZH.md&#34;&gt;中文简体&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;dio&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutterchina/dio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-flutter%7Cflutter%20web%7Cdart%20vm-ff69b4.svg?style=flat-square&#34; alt=&#34;support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A powerful Http client for Dart, which supports Interceptors, Global configuration, FormData, Request Cancellation, File downloading, Timeout etc.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;h3&gt;Add dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  dio: ^4.0.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Already know Dio 3 and just want to learn about what&#39;s new in Dio 4? Check out the &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/migration_to_4.x.md&#34;&gt;Migration Guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Super simple to use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;void getHttp() async {&#xA;  try {&#xA;    var response = await Dio().get(&#39;http://www.google.com&#39;);&#xA;    print(response);&#xA;  } catch (e) {&#xA;    print(e);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;awesome-dio&lt;/h2&gt; &#xA;&lt;p&gt;🎉 A curated list of awesome things related to dio.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins (support 4.x)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugins&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager&#34;&gt;dio_cookie_manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio_cookie_manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_cookie_manager.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A cookie manager for Dio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter&#34;&gt;dio_http2_adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio_http2_adapter&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_http2_adapter.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Dio HttpClientAdapter which support Http/2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rodion-m/dio_smart_retry&#34;&gt;dio_smart_retry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_smart_retry&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_smart_retry.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flexible retry library for Dio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/diefferson/http_certificate_pinning&#34;&gt;http_certificate_pinning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/http_certificate_pinning&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/http_certificate_pinning.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Https Certificate pinning for Flutter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OwnWeb/curl_logger_dio_interceptor&#34;&gt;curl_logger_dio_interceptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/curl_logger_dio_interceptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/curl_logger_dio_interceptor.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Flutter curl-command generator for Dio.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/llfbandit/dio_cache_interceptor&#34;&gt;dio_cache_interceptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_cache_interceptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_cache_interceptor.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dio HTTP cache interceptor with multiple stores respecting HTTP directives (or not)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hurshi/dio-http-cache&#34;&gt;dio_http_cache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_http_cache&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_http_cache.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple cache library for Dio like Rxcache in Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Milad-Akarie/pretty_dio_logger&#34;&gt;pretty_dio_logger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/pretty_dio_logger&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/pretty_dio_logger.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Related Projects&lt;/h3&gt; &#xA;&lt;p&gt;Welcome to submit Dio&#39;s third-party plugins and related libraries &lt;a href=&#34;https://github.com/flutterchina/dio/issues/347&#34;&gt;here&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#dio-apis&#34;&gt;Dio APIs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#request-options&#34;&gt;Request Options&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#response-schema&#34;&gt;Response Schema&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#interceptors&#34;&gt;Interceptors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#cookie-manager&#34;&gt;Cookie Manager&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#using-applicationx-www-form-urlencoded-format&#34;&gt;Using application/x-www-form-urlencoded format&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#sending-formdata&#34;&gt;Sending FormData&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#transformer&#34;&gt;Transformer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#using-proxy&#34;&gt;Using proxy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#https-certificate-verification&#34;&gt;Https certificate verification&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#httpclientadapter&#34;&gt;HttpClientAdapter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#cancellation&#34;&gt;Cancellation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#extends-dio-class&#34;&gt;Extends Dio class&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#http2-support&#34;&gt;Http2 support&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#features-and-bugs&#34;&gt;Features and bugs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response response;&#xA;var dio = Dio();&#xA;response = await dio.get(&#39;/test?id=12&amp;amp;name=wendu&#39;);&#xA;print(response.data.toString());&#xA;// Optionally the request above could also be done as&#xA;response = await dio.get(&#39;/test&#39;, queryParameters: {&#39;id&#39;: 12, &#39;name&#39;: &#39;wendu&#39;});&#xA;print(response.data.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.post(&#39;/test&#39;, data: {&#39;id&#39;: 12, &#39;name&#39;: &#39;wendu&#39;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing multiple concurrent requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await Future.wait([dio.post(&#39;/info&#39;), dio.get(&#39;/token&#39;)]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Downloading a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.download(&#39;https://www.google.com/&#39;, &#39;./xx.html&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get response stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response&amp;lt;ResponseBody&amp;gt; rs;&#xA;rs = await Dio().get&amp;lt;ResponseBody&amp;gt;(url,&#xA;  options: Options(responseType: ResponseType.stream),  // set responseType to `stream`&#xA;);&#xA;print(rs.data.stream); //response stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get response with bytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; rs &#xA;rs = await Dio().get&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;(url,&#xA; options: Options(responseType: ResponseType.bytes), // set responseType to `bytes`&#xA;);&#xA;print(rs.data); // List&amp;lt;int&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending FormData:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;});&#xA;var response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uploading multiple files to server by FormData:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;  &#39;file&#39;: await MultipartFile.fromFile(&#39;./text.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;  &#39;files&#39;: [&#xA;    await MultipartFile.fromFile(&#39;./text1.txt&#39;, filename: &#39;text1.txt&#39;),&#xA;    await MultipartFile.fromFile(&#39;./text2.txt&#39;, filename: &#39;text2.txt&#39;),&#xA;  ]&#xA;});&#xA;var response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Listening the uploading progress:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.post(&#xA;  &#39;http://www.dtworkroom.com/doris/1/2.0.0/test&#39;,&#xA;  data: {&#39;aa&#39;: &#39;bb&#39; * 22},&#xA;  onSendProgress: (int sent, int total) {&#xA;    print(&#39;$sent $total&#39;);&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Post binary data by Stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Binary data&#xA;List&amp;lt;int&amp;gt; postData = &amp;lt;int&amp;gt;[...];&#xA;await dio.post(&#xA;  url,&#xA;  data: Stream.fromIterable(postData.map((e) =&amp;gt; [e])), //create a Stream&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;&#xA;  options: Options(&#xA;    headers: {&#xA;      Headers.contentLengthHeader: postData.length, // set content-length&#xA;    },&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…you can find all examples code &lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dio APIs&lt;/h2&gt; &#xA;&lt;h3&gt;Creating an instance and set default configs.&lt;/h3&gt; &#xA;&lt;p&gt;You can create instance of Dio with an optional &lt;code&gt;BaseOptions&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var dio = Dio(); // with default Options&#xA;&#xA;// Set default configs&#xA;dio.options.baseUrl = &#39;https://www.xx.com/api&#39;;&#xA;dio.options.connectTimeout = 5000; //5s&#xA;dio.options.receiveTimeout = 3000;&#xA;&#xA;// or new Dio with a BaseOptions instance.&#xA;var options = BaseOptions(&#xA;  baseUrl: &#39;https://www.xx.com/api&#39;,&#xA;  connectTimeout: 5000,&#xA;  receiveTimeout: 3000,&#xA;);&#xA;Dio dio = Dio(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core API in Dio instance is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Future&#xA;  &lt;response&gt;&#xA;    request(String path, {data,Map queryParameters, Options options,CancelToken cancelToken, ProgressCallback onSendProgress, ProgressCallback onReceiveProgress)&#xA;  &lt;/response&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.request(&#xA;  &#39;/test&#39;,&#xA;  data: {&#39;id&#39;:12,&#39;name&#39;:&#39;xx&#39;},&#xA;  options: Options(method:&#39;GET&#39;),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request method aliases&lt;/h3&gt; &#xA;&lt;p&gt;For convenience aliases have been provided for all supported request methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;Response&amp;gt; get(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; post(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; put(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; delete(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; head(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; put(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; path(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; download(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; fetch(RequestOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Request Options&lt;/h2&gt; &#xA;&lt;p&gt;The Options class describes the http request information and configuration. Each Dio instance has a base config for all requests maked by itself, and we can override the base config with [Options] when make a single request. The [BaseOptions] declaration as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;  /// Http method.&#xA;  String method;&#xA;&#xA;  /// Request base url, it can contain sub path, like: &#39;https://www.google.com/api/&#39;.&#xA;  String baseUrl;&#xA;&#xA;  /// Http request headers.&#xA;  Map&amp;lt;String, dynamic&amp;gt; headers;&#xA;&#xA;   /// Timeout in milliseconds for opening  url.&#xA;  int connectTimeout;&#xA;&#xA;   ///  Whenever more than [receiveTimeout] (in milliseconds) passes between two events from response stream,&#xA;  ///  [Dio] will throw the [DioError] with [DioErrorType.RECEIVE_TIMEOUT].&#xA;  ///  Note: This is not the receiving time limitation.&#xA;  int receiveTimeout;&#xA;&#xA;  /// Request data, can be any type.&#xA;  T data;&#xA;&#xA;  /// If the `path` starts with &#39;http(s)&#39;, the `baseURL` will be ignored, otherwise,&#xA;  /// it will be combined and then resolved with the baseUrl.&#xA;  String path=&#39;&#39;;&#xA;&#xA;  /// The request Content-Type. The default value is &#39;application/json; charset=utf-8&#39;.&#xA;  /// If you want to encode request body with &#39;application/x-www-form-urlencoded&#39;,&#xA;  /// you can set [Headers.formUrlEncodedContentType], and [Dio]&#xA;  /// will automatically encode the request body.&#xA;  String contentType;&#xA;&#xA;  /// [responseType] indicates the type of data that the server will respond with&#xA;  /// options which defined in [ResponseType] are `JSON`, `STREAM`, `PLAIN`.&#xA;  ///&#xA;  /// The default value is `JSON`, dio will parse response string to json object automatically&#xA;  /// when the content-type of response is &#39;application/json&#39;.&#xA;  ///&#xA;  /// If you want to receive response data with binary bytes, for example,&#xA;  /// downloading a image, use `STREAM`.&#xA;  ///&#xA;  /// If you want to receive the response data with String, use `PLAIN`.&#xA;  ResponseType responseType;&#xA;&#xA;  /// `validateStatus` defines whether the request is successful for a given&#xA;  /// HTTP response status code. If `validateStatus` returns `true` ,&#xA;  /// the request will be perceived as successful; otherwise, considered as failed.&#xA;  ValidateStatus validateStatus;&#xA;&#xA;  /// Custom field that you can retrieve it later in [Interceptor]、[Transformer] and the   [Response] object.&#xA;  Map&amp;lt;String, dynamic&amp;gt; extra;&#xA;  &#xA;  /// Common query parameters&#xA;  Map&amp;lt;String, dynamic /*String|Iterable&amp;lt;String&amp;gt;*/ &amp;gt; queryParameters;  &#xA;  &#xA;   /// [collectionFormat] indicates the format of collection data in request&#xA;  /// options which defined in [CollectionFormat] are `csv`, `ssv`, `tsv`, `pipes`, `multi`,`multiCompatible`.&#xA;  /// The default value is `multiCompatible`&#xA;  late CollectionFormat collectionFormat;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/options.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Response Schema&lt;/h2&gt; &#xA;&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;  /// Response body. may have been transformed, please refer to [ResponseType].&#xA;  T? data;&#xA;  /// Response headers.&#xA;  Headers headers;&#xA;  /// The corresponding request info.&#xA;  Options request;&#xA;  /// Http status code.&#xA;  int? statusCode;&#xA;  String? statusMessage;&#xA;  /// Whether redirect &#xA;  bool? isRedirect;  &#xA;  /// redirect info    &#xA;  List&amp;lt;RedirectInfo&amp;gt; redirects ;&#xA;  /// Returns the final real request uri (maybe redirect). &#xA;  Uri realUri;    &#xA;  /// Custom field that you can retrieve it later in `then`.&#xA;  Map&amp;lt;String, dynamic&amp;gt; extra;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When request is succeed, you will receive the response as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response response = await dio.get(&#39;https://www.google.com&#39;);&#xA;print(response.data);&#xA;print(response.headers);&#xA;print(response.requestOptions);&#xA;print(response.statusCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interceptors&lt;/h2&gt; &#xA;&lt;p&gt;For each dio instance, We can add one or more interceptors, by which we can intercept requests 、 responses and errors before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catchError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(InterceptorsWrapper(&#xA;    onRequest:(options, handler){&#xA;     // Do something before request is sent&#xA;     return handler.next(options); //continue&#xA;     // If you want to resolve the request with some custom data，&#xA;     // you can resolve a `Response` object eg: `handler.resolve(response)`.&#xA;     // If you want to reject the request with a error message,&#xA;     // you can reject a `DioError` object eg: `handler.reject(dioError)`&#xA;    },&#xA;    onResponse:(response,handler) {&#xA;     // Do something with response data&#xA;     return handler.next(response); // continue&#xA;     // If you want to reject the request with a error message,&#xA;     // you can reject a `DioError` object eg: `handler.reject(dioError)` &#xA;    },&#xA;    onError: (DioError e, handler) {&#xA;     // Do something with response error&#xA;     return  handler.next(e);//continue&#xA;     // If you want to resolve the request with some custom data，&#xA;     // you can resolve a `Response` object eg: `handler.resolve(response)`.  &#xA;    }&#xA;));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple interceptor example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;class CustomInterceptors extends Interceptor {&#xA;  @override&#xA;  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {&#xA;    print(&#39;REQUEST[${options.method}] =&amp;gt; PATH: ${options.path}&#39;);&#xA;    return super.onRequest(options, handler);&#xA;  }&#xA;  @override&#xA;  void onResponse(Response response, ResponseInterceptorHandler handler) {&#xA;    print(&#39;RESPONSE[${response.statusCode}] =&amp;gt; PATH: ${response.requestOptions.path}&#39;);&#xA;    super.onResponse(response, handler);&#xA;  }&#xA;  @override&#xA;  Future onError(DioError err, ErrorInterceptorHandler handler) {&#xA;    print(&#39;ERROR[${err.response?.statusCode}] =&amp;gt; PATH: ${err.requestOptions.path}&#39;);&#xA;    return super.onError(err, handler);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resolve and reject the request&lt;/h3&gt; &#xA;&lt;p&gt;In all interceptors, you can interfere with their execution flow. If you want to resolve the request/response with some custom data，you can call &lt;code&gt;handler.resolve(Response)&lt;/code&gt;. If you want to reject the request/response with a error message, you can call &lt;code&gt;handler.reject(dioError)&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(InterceptorsWrapper(&#xA;  onRequest:(options, handler) {&#xA;   return handler.resolve(Response(requestOptions:options,data:&#39;fake data&#39;));&#xA;  },&#xA;));&#xA;Response response = await dio.get(&#39;/test&#39;);&#xA;print(response.data);//&#39;fake data&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;QueuedInterceptor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Interceptor&lt;/code&gt; can be executed concurrently, that is, all of the requests enter the interceptor at once, rather than executing sequentially. However, in some cases we expect that requests enter the interceptor sequentially like #590 。 Therefore, we need to provide a mechanism for sequential access（one by one） to interceptors and &lt;code&gt;QueuedInterceptor&lt;/code&gt; can solve this problem.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Because of security reasons, we need all the requests to set up a csrfToken in the header, if csrfToken does not exist, we need to request a csrfToken first, and then perform the network request, because the request csrfToken progress is asynchronous, so we need to execute this async request in request interceptor. The code is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  var dio = Dio();&#xA;  //  dio instance to request token&#xA;  var tokenDio = Dio();&#xA;  String? csrfToken;&#xA;  dio.options.baseUrl = &#39;http://www.dtworkroom.com/doris/1/2.0.0/&#39;;&#xA;  tokenDio.options = dio.options;&#xA;  dio.interceptors.add(QueuedInterceptorsWrapper(&#xA;    onRequest: (options, handler) {&#xA;      print(&#39;send request：path:${options.path}，baseURL:${options.baseUrl}&#39;);&#xA;      if (csrfToken == null) {&#xA;        print(&#39;no token，request token firstly...&#39;);&#xA;        tokenDio.get(&#39;/token&#39;).then((d) {&#xA;          options.headers[&#39;csrfToken&#39;] = csrfToken = d.data[&#39;data&#39;][&#39;token&#39;];&#xA;          print(&#39;request token succeed, value: &#39; + d.data[&#39;data&#39;][&#39;token&#39;]);&#xA;          print(&#xA;              &#39;continue to perform request：path:${options.path}，baseURL:${options.path}&#39;);&#xA;          handler.next(options);&#xA;        }).catchError((error, stackTrace) {&#xA;          handler.reject(error, true);&#xA;        });&#xA;      } else {&#xA;        options.headers[&#39;csrfToken&#39;] = csrfToken;&#xA;        return handler.next(options);&#xA;      }&#xA;    },&#xA;   ); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can clean the waiting queue by calling &lt;code&gt;clear()&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;p&gt;For complete codes click &lt;a href=&#34;https://github.com/flutterchina/dio/raw/develop/example/queued_interceptor_crsftoken.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Log&lt;/h3&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;LogInterceptor&lt;/code&gt; to print request/response log automaticlly, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(LogInterceptor(responseBody: false)); //开启请求日志&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Interceptor&lt;/h3&gt; &#xA;&lt;p&gt;You can custom interceptor by extending the &lt;code&gt;Interceptor/QueuedInterceptor&lt;/code&gt; class. There is an example that implementing a simple cache policy: &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/custom_cache_interceptor.dart&#34;&gt;custom cache interceptor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cookie Manager&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager&#34;&gt;dio_cookie_manager&lt;/a&gt; package is a cookie manager for Dio.&lt;/p&gt; &#xA;&lt;h2&gt;Handling Errors&lt;/h2&gt; &#xA;&lt;p&gt;When a error occurs, Dio will wrap the &lt;code&gt;Error/Exception&lt;/code&gt; to a &lt;code&gt;DioError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;try {&#xA;  //404&#xA;  await dio.get(&#39;https://wendux.github.io/xsddddd&#39;);&#xA;} on DioError catch (e) {&#xA;  // The request was made and the server responded with a status code&#xA;  // that falls out of the range of 2xx and is also not 304.&#xA;  if (e.response != null) {&#xA;    print(e.response.data)&#xA;    print(e.response.headers)&#xA;    print(e.response.requestOptions)&#xA;  } else {&#xA;    // Something happened in setting up or sending the request that triggered an Error&#xA;    print(e.requestOptions)&#xA;    print(e.message)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DioError scheme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; {&#xA;  /// Response info, it may be `null` if the request can&#39;t reach to&#xA;  /// the http server, for example, occurring a dns error, network is not available.&#xA;  Response? response;&#xA;  /// Request info.&#xA;  RequestOptions? request;&#xA;  /// Error descriptions.&#xA;  String message;&#xA;&#xA;  DioErrorType type;&#xA;  /// The original error/exception object; It&#39;s usually not null when `type`&#xA;  /// is DioErrorType.DEFAULT&#xA;  dynamic? error;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DioErrorType&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;enum DioErrorType {&#xA;  /// It occurs when url is opened timeout.&#xA;  connectTimeout,&#xA;&#xA;  /// It occurs when url is sent timeout.&#xA;  sendTimeout,&#xA;&#xA;  ///It occurs when receiving timeout.&#xA;  receiveTimeout,&#xA;&#xA;  /// When the server response, but with a incorrect status, such as 404, 503...&#xA;  response,&#xA;&#xA;  /// When the request is cancelled, dio will throw a error with this type.&#xA;  cancel,&#xA;&#xA;  /// Default error type, Some other Error. In this case, you can&#xA;  /// use the DioError.error if it is not null.&#xA;  other,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using application/x-www-form-urlencoded format&lt;/h2&gt; &#xA;&lt;p&gt;By default, Dio serializes request data(except String type) to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format instead, you can :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//Instance level&#xA;dio.options.contentType= Headers.formUrlEncodedContentType;&#xA;//or works once&#xA;dio.post(&#xA;  &#39;/info&#39;,&#xA;  data: {&#39;id&#39;: 5},&#xA;  options: Options(contentType: Headers.formUrlEncodedContentType),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending FormData&lt;/h2&gt; &#xA;&lt;p&gt;You can also send FormData with Dio, which will send data in the &lt;code&gt;multipart/form-data&lt;/code&gt;, and it supports uploading files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;  &#39;file&#39;: await MultipartFile.fromFile(&#39;./text.txt&#39;,filename: &#39;upload.txt&#39;)&#xA;});&#xA;response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/formdata.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple files upload&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to add multiple files to &lt;code&gt; FormData&lt;/code&gt;， the only difference is that upload keys are different for array types。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormData.fromMap({&#xA;  &#39;files&#39;: [&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The upload key eventually becomes &#39;files[]&#39;，This is because many back-end services add a middle bracket to key when they get an array of files. &lt;strong&gt;If you don&#39;t want “[]”&lt;/strong&gt;，you should create FormData as follows（Don&#39;t use &lt;code&gt;FormData.fromMap&lt;/code&gt;）:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData();&#xA;formData.files.addAll([&#xA;  MapEntry(&#39;files&#39;,&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;,filename: &#39;upload.txt&#39;),&#xA;  ),&#xA;  MapEntry(&#39;files&#39;,&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;,filename: &#39;upload.txt&#39;),&#xA;  ),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transformer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Transformer&lt;/code&gt; allows changes to the request/response data before it is sent/received to/from the server. This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, and &#39;PATCH&#39;. Dio has already implemented a &lt;code&gt;DefaultTransformer&lt;/code&gt;, and as the default &lt;code&gt;Transformer&lt;/code&gt;. If you want to customize the transformation of request/response data, you can provide a &lt;code&gt;Transformer&lt;/code&gt; by your self, and replace the &lt;code&gt;DefaultTransformer&lt;/code&gt; by setting the &lt;code&gt;dio.transformer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;In flutter&lt;/h3&gt; &#xA;&lt;p&gt;If you use dio in flutter development, you&#39;d better to decode json in background with [compute] function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;// Must be top-level function&#xA;_parseAndDecode(String response) {&#xA;  return jsonDecode(response);&#xA;}&#xA;&#xA;parseJson(String text) {&#xA;  return compute(_parseAndDecode, text);&#xA;}&#xA;&#xA;void main() {&#xA;  ...&#xA;  //Custom jsonDecodeCallback&#xA;  (dio.transformer as DefaultTransformer).jsonDecodeCallback = parseJson;&#xA;  runApp(MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Example&lt;/h3&gt; &#xA;&lt;p&gt;There is an example for &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/transfomer.dart&#34;&gt;customizing Transformer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HttpClientAdapter&lt;/h2&gt; &#xA;&lt;p&gt;HttpClientAdapter is a bridge between Dio and HttpClient.&lt;/p&gt; &#xA;&lt;p&gt;Dio implements standard and friendly API for developer.&lt;/p&gt; &#xA;&lt;p&gt;HttpClient: It is the real object that makes Http requests.&lt;/p&gt; &#xA;&lt;p&gt;We can use any HttpClient not just &lt;code&gt;dart:io:HttpClient&lt;/code&gt; to make the Http request. And all we need is providing a &lt;code&gt;HttpClientAdapter&lt;/code&gt;. The default HttpClientAdapter for Dio is &lt;code&gt;DefaultHttpClientAdapter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.httpClientAdapter = new DefaultHttpClientAdapter();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/adapter.dart&#34;&gt;Here&lt;/a&gt; is a simple example to custom adapter.&lt;/p&gt; &#xA;&lt;h3&gt;Using proxy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultHttpClientAdapter&lt;/code&gt; provide a callback to set proxy to &lt;code&gt;dart:io:HttpClient&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:dio/adapter.dart&#39;;&#xA;...&#xA;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client) {&#xA;  // config the http client&#xA;  client.findProxy = (uri) {&#xA;    //proxy all request to localhost:8888&#xA;    return &#39;PROXY localhost:8888&#39;;&#xA;  };&#xA;  // you can also create a new HttpClient to dio&#xA;  // return HttpClient();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/proxy.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Https certificate verification&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to verify the https certificate. Suppose the certificate format is PEM, the code like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String PEM=&#39;XXXXX&#39;; // certificate content&#xA;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate  = (client) {&#xA;  client.badCertificateCallback=(X509Certificate cert, String host, int port){&#xA;    if(cert.pem==PEM){ // Verify the certificate&#xA;      return true;&#xA;    }&#xA;    return false;&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way is creating a &lt;code&gt;SecurityContext&lt;/code&gt; when create the &lt;code&gt;HttpClient&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate  = (client) {&#xA;  SecurityContext sc = SecurityContext();&#xA;  //file is the path of certificate&#xA;  sc.setTrustedCertificates(file);&#xA;  HttpClient httpClient = HttpClient(context: sc);&#xA;  return httpClient;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this way, the format of certificate must be PEM or PKCS12.&lt;/p&gt; &#xA;&lt;h2&gt;Http2 support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter&#34;&gt;dio_http2_adapter&lt;/a&gt; package is a Dio HttpClientAdapter which support Http/2.0 .&lt;/p&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;p&gt;You can cancel a request using a &lt;em&gt;cancel token&lt;/em&gt;. One token can be shared with multiple requests. When a token&#39;s &lt;code&gt;cancel&lt;/code&gt; method invoked, all requests with this token will be cancelled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CancelToken token = CancelToken();&#xA;dio.get(url, cancelToken: token)&#xA;   .catchError((DioError err){&#xA;    if (CancelToken.isCancel(err)) {&#xA;      print(&#39;Request canceled! &#39;+ err.message)&#xA;    }else{&#xA;      // handle error.&#xA;    }&#xA;   });&#xA;// cancel the requests with &#34;cancelled&#34; message.&#xA;token.cancel(&#39;cancelled&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/cancel_request.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extends Dio class&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Dio&lt;/code&gt; is a abstract class with factory constructor，so we don&#39;t extend &lt;code&gt;Dio&lt;/code&gt; class directy. For this purpose, we can extend &lt;code&gt;DioForNative&lt;/code&gt; or &lt;code&gt;DioForBrowser&lt;/code&gt; instead, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:dio/native_imp.dart&#39;; //If in browser, import &#39;package:dio/browser_imp.dart&#39;&#xA;&#xA;class Http extends DioForNative {&#xA;  Http([BaseOptions options]):super(options){&#xA;    // do something&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also implement our Dio client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyDio with DioMixin implements Dio{&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;This open source project authorized by &lt;a href=&#34;https://flutterchina.club&#34;&gt;https://flutterchina.club&lt;/a&gt; , and the license is MIT.&lt;/p&gt; &#xA;&lt;h2&gt;Features and bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file feature requests and bugs at the &lt;a href=&#34;https://github.com/flutterchina/dio/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Buy a cup of coffee for me (Scan by wechat)：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0.3/docs/imgs/pay.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>