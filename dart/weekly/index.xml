<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T01:56:47Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/flutter_boost</title>
    <updated>2023-05-28T01:56:47Z</updated>
    <id>tag:github.com,2023-05-28:/alibaba/flutter_boost</id>
    <link href="https://github.com/alibaba/flutter_boost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FlutterBoost is a Flutter plugin which enables hybrid integration of Flutter for your existing native apps with minimum efforts&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alibaba/flutter_boost/master/flutter_boost.png&#34;&gt; &lt;b&gt;&lt;/b&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/flutter_boost/master/README_CN.md&#34;&gt;中文文档&lt;/a&gt; &lt;a href=&#34;https://zhuanlan.zhihu.com/p/362662962&#34;&gt;中文介绍&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Release Note&lt;/h1&gt; &#xA;&lt;h2&gt;4.2.2&lt;/h2&gt; &#xA;&lt;p&gt;PS：Null-safety is already supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Flutter SDK upgrades do not require Boost upgrades&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;Simplify the architecture&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;Simplify the interface&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;Unified design of double-end interface&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;5&#34;&gt; &#xA;   &lt;li&gt;Solved the Top Issue&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;6&#34;&gt; &#xA;   &lt;li&gt;Android does not need to distinguish between AndroidX and Support&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FlutterBoost&lt;/h1&gt; &#xA;&lt;p&gt;A next-generation Flutter-Native hybrid solution. FlutterBoost is a Flutter plugin which enables hybrid integration of Flutter for your existing native apps with minimum efforts. The philosophy of FlutterBoost is to use Flutter as easy as using a WebView. Managing Native pages and Flutter pages at the same time is non-trivial in an existing App. FlutterBoost takes care of page resolution for you. The only thing you need to care about is the name of the page(usually could be an URL).&amp;nbsp; &lt;a name=&#34;bf647454&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Before proceeding, you need to integrate Flutter into your existing project.&lt;/li&gt; &#xA; &lt;li&gt;The Flutter SDK version supported by Boost 3.0 is &amp;gt;= 1.22&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Flutter SDK version support:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Flutter SDK 3.0 and above, use a version greater than &lt;code&gt;4.0.1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Flutter SDK 3.0 or below, use &lt;code&gt;v3.0-release.2&lt;/code&gt; or below&lt;/li&gt; &#xA;  &lt;li&gt;The null-safe version that supports Flutter SDK 2.5.x is &lt;code&gt;3.1.x&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Add a dependency in you Flutter project.&lt;/h2&gt; &#xA;&lt;p&gt;Open you pubspec.yaml and add the following line to&amp;nbsp;dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;flutter_boost:&#xA;    git:&#xA;        url: &#39;https://github.com/alibaba/flutter_boost.git&#39;&#xA;        ref: &#39;4.2.2&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Boost Integration&lt;/h1&gt; &#xA;&lt;h1&gt;使用文档&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/flutter_boost/raw/master/docs/install.md&#34;&gt;集成详细步骤&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/flutter_boost/raw/master/docs/routeAPI.md&#34;&gt;基本的路由API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/flutter_boost/raw/master/docs/lifecycle.md&#34;&gt;页面生命周期监测相关API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/flutter_boost/raw/master/docs/event.md&#34;&gt;自定义发送跨端事件API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;建设文档&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/flutter_boost/raw/master/docs/issue.md&#34;&gt;如何向我们提issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/flutter_boost/raw/master/docs/pr.md&#34;&gt;如何向我们提PR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;please read this document: &lt;a href=&#34;Frequently Asked Question.md&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/flutter_boost/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt; &#xA;&lt;h2&gt;关于我们&lt;/h2&gt; &#xA;&lt;p&gt;阿里巴巴-闲鱼技术是国内最早也是最大规模线上运行Flutter的团队。&lt;/p&gt; &#xA;&lt;p&gt;我们在公众号中为你精选了Flutter独家干货，全面而深入。&lt;/p&gt; &#xA;&lt;p&gt;内容包括：Flutter的接入、规模化应用、引擎探秘、工程体系、创新技术等教程和开源信息。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;架构／服务端／客户端／前端／算法／质量工程师 在公众号中投递简历，名额不限哦&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;欢迎来闲鱼做一个好奇、幸福、有影响力的程序员，简历投递：&lt;a href=&#34;mailto:tino.wjf@alibaba-inc.com&#34;&gt;tino.wjf@alibaba-inc.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;订阅地址&lt;/p&gt; &#xA;&lt;img src=&#34;https://img.alicdn.com/tfs/TB17Ki5XubviK0jSZFNXXaApXXa-656-656.png&#34; width=&#34;328px&#34; height=&#34;328px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/xianyutech&#34; title=&#34;For English&#34;&gt;For English&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>miguelpruivo/flutter_file_picker</title>
    <updated>2023-05-28T01:56:47Z</updated>
    <id>tag:github.com,2023-05-28:/miguelpruivo/flutter_file_picker</id>
    <link href="https://github.com/miguelpruivo/flutter_file_picker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;File picker plugin for Flutter, compatible with mobile (iOS &amp; Android), Web, Desktop (Mac, Linux, Windows) platforms with Flutter Go support.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/27860743/64064695-b88dab00-cbfc-11e9-814f-30921b66035f.png&#34; alt=&#34;fluter_file_picker&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/file_picker&#34;&gt; &lt;img alt=&#34;File Picker&#34; src=&#34;https://img.shields.io/pub/v/file_picker.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt; &lt;img alt=&#34;Awesome Flutter&#34; src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/gQyz2MR&#34;&gt; &lt;img alt=&#34;Buy me a coffee&#34; src=&#34;https://img.shields.io/badge/Donate-Buy%20Me%20A%20Coffee-yellow.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/miguelpruivo/flutter_file_picker&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/miguelpruivo/flutter_file_picker&#34;&gt; &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/actions/workflows/main.yml&#34;&gt; &lt;img alt=&#34;CI pipeline status&#34; src=&#34;https://github.com/miguelpruivo/flutter_file_picker/actions/workflows/main.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;File Picker&lt;/h1&gt; &#xA;&lt;p&gt;A package that allows you to use the native file explorer to pick single or multiple files, with extensions filtering support.&lt;/p&gt; &#xA;&lt;h2&gt;Currently supported features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses OS default native pickers&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple platforms (Mobile, Web, Desktop and Flutter GO)&lt;/li&gt; &#xA; &lt;li&gt;Pick files using &lt;strong&gt;custom format&lt;/strong&gt; filtering — you can provide a list of file extensions (pdf, svg, zip, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Pick files from &lt;strong&gt;cloud files&lt;/strong&gt; (GDrive, Dropbox, iCloud)&lt;/li&gt; &#xA; &lt;li&gt;Single or multiple file picks&lt;/li&gt; &#xA; &lt;li&gt;Different default type filtering (media, image, video, audio or any)&lt;/li&gt; &#xA; &lt;li&gt;Picking directories&lt;/li&gt; &#xA; &lt;li&gt;Load file data immediately into memory (&lt;code&gt;Uint8List&lt;/code&gt;) if needed;&lt;/li&gt; &#xA; &lt;li&gt;Open a save-file / save-as dialog (a dialog that lets the user specify the drive, directory, and name of a file to save)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have any feature that you want to see in this package, please feel free to issue a suggestion. 🎉&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility Chart&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clearTemporaryFiles()&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;getDirectoryPath()&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pickFiles()&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;saveFile()&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/api&#34;&gt;API section of the File Picker Wiki&lt;/a&gt; or the &lt;a href=&#34;https://pub.dev/documentation/file_picker/latest/file_picker/FilePicker-class.html&#34;&gt;official API reference on pub.dev&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;strong&gt;&lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki&#34;&gt;File Picker Wiki&lt;/a&gt;&lt;/strong&gt; for every detail on about how to install, setup and use it.&lt;/p&gt; &#xA;&lt;h3&gt;File Picker Wiki&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/Setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/Setup#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/Setup#ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/Setup#--web&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/Setup/_edit#desktop-go-flutter&#34;&gt;Desktop (go-flutter)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/API#filters&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/API#parameters&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/plugins_flutter_file_picker/wiki/API#methods&#34;&gt;Methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki/Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Quick simple usage example:&lt;/p&gt; &#xA;&lt;h4&gt;Single file&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FilePickerResult? result = await FilePicker.platform.pickFiles();&#xA;&#xA;if (result != null) {&#xA;  File file = File(result.files.single.path);&#xA;} else {&#xA;  // User canceled the picker&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FilePickerResult? result = await FilePicker.platform.pickFiles(allowMultiple: true);&#xA;&#xA;if (result != null) {&#xA;  List&amp;lt;File&amp;gt; files = result.paths.map((path) =&amp;gt; File(path)).toList();&#xA;} else {&#xA;  // User canceled the picker&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple files with extension filter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FilePickerResult? result = await FilePicker.platform.pickFiles(&#xA;  type: FileType.custom,&#xA;  allowedExtensions: [&#39;jpg&#39;, &#39;pdf&#39;, &#39;doc&#39;],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pick a directory&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String? selectedDirectory = await FilePicker.platform.getDirectoryPath();&#xA;&#xA;if (selectedDirectory == null) {&#xA;  // User canceled the picker&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Save-file / save-as dialog&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String? outputFile = await FilePicker.platform.saveFile(&#xA;  dialogTitle: &#39;Please select an output file:&#39;,&#xA;  fileName: &#39;output-file.pdf&#39;,&#xA;);&#xA;&#xA;if (outputFile == null) {&#xA;  // User canceled the picker&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load result and file details&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FilePickerResult? result = await FilePicker.platform.pickFiles();&#xA;&#xA;if (result != null) {&#xA;  PlatformFile file = result.files.first;&#xA;&#xA;  print(file.name);&#xA;  print(file.bytes);&#xA;  print(file.size);&#xA;  print(file.extension);&#xA;  print(file.path);&#xA;} else {&#xA;  // User canceled the picker&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pick and upload a file to Firebase Storage with Flutter Web&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FilePickerResult? result = await FilePicker.platform.pickFiles();&#xA;&#xA;if (result != null) {&#xA;  Uint8List fileBytes = result.files.first.bytes;&#xA;  String fileName = result.files.first.name;&#xA;  &#xA;  // Upload file&#xA;  await FirebaseStorage.instance.ref(&#39;uploads/$fileName&#39;).putData(fileBytes);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For full usage details refer to the &lt;strong&gt;&lt;a href=&#34;https://github.com/miguelpruivo/flutter_file_picker/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/strong&gt; above.&lt;/p&gt; &#xA;&lt;h2&gt;Example App&lt;/h2&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/miguelpruivo/flutter_file_picker/raw/master/example/screenshots/example_android.gif&#34; alt=&#34;DemoAndroid&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/miguelpruivo/flutter_file_picker/raw/master/example/screenshots/example_ios.gif&#34; alt=&#34;DemoMultiFilters&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/miguelpruivo/flutter_file_picker/raw/master/example/screenshots/example_macos.png&#34; alt=&#34;DemoMacOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/miguelpruivo/flutter_file_picker/raw/master/example/screenshots/example_linux.gif&#34; alt=&#34;DemoLinux&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/miguelpruivo/flutter_file_picker/raw/master/example/screenshots/example_windows.gif&#34; alt=&#34;DemoWindows&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For help getting started with Flutter, view our online &lt;a href=&#34;https://flutter.io/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For help on editing plugin code, view the &lt;a href=&#34;https://flutter.io/platform-plugins/#edit-code&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluttercommunity/chewie</title>
    <updated>2023-05-28T01:56:47Z</updated>
    <id>tag:github.com,2023-05-28:/fluttercommunity/chewie</id>
    <link href="https://github.com/fluttercommunity/chewie" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The video player for Flutter with a heart of gold&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chewie&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/chewie&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/chewie.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/brianegan/chewie/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/chewie&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-android%20%7C%20ios%20%7C%20web%20-blue.svg?sanitize=true&#34; alt=&#34;Generic badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The video player for Flutter with a heart of gold.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://pub.dartlang.org/packages/video_player&#34;&gt;&lt;code&gt;video_player&lt;/code&gt;&lt;/a&gt; plugin provides low-level access to video playback. Chewie uses the &lt;code&gt;video_player&lt;/code&gt; under the hood and wraps it in a friendly Material or Cupertino UI!&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MaterialControls&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MaterialDesktopControls&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/brianegan/chewie/raw/master/assets/MaterialControls.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/brianegan/chewie/raw/master/assets/MaterialDesktopControls.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;CupertinoControls&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/brianegan/chewie/raw/master/assets/CupertinoControls.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;In your &lt;code&gt;pubspec.yaml&lt;/code&gt; file within your Flutter Project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  chewie: &amp;lt;latest_version&amp;gt;&#xA;  video_player: &amp;lt;latest_version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use it&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:chewie/chewie.dart&#39;;&#xA;final videoPlayerController = VideoPlayerController.network(&#xA;    &#39;https://flutter.github.io/assets-for-api-docs/assets/videos/butterfly.mp4&#39;);&#xA;&#xA;await videoPlayerController.initialize();&#xA;&#xA;final chewieController = ChewieController(&#xA;  videoPlayerController: videoPlayerController,&#xA;  autoPlay: true,&#xA;  looping: true,&#xA;);&#xA;&#xA;final playerWidget = Chewie(&#xA;  controller: chewieController,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please make sure to dispose both controller widgets after use. For example by overriding the dispose method of the a &lt;code&gt;StatefulWidget&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@override&#xA;void dispose() {&#xA;  videoPlayerController.dispose();&#xA;  chewieController.dispose();&#xA;  super.dispose();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/brianegan/chewie/raw/master/assets/Options.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chewie got some options which controls the video you provide. These options appear on default on a &lt;code&gt;showModalBottomSheet&lt;/code&gt; (like you already know from YT maybe). Chewie is passing on default &lt;code&gt;Playback speed&lt;/code&gt; and &lt;code&gt;Subtitles&lt;/code&gt; options as an &lt;code&gt;OptionItem&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add additional options just add these lines to your &lt;code&gt;ChewieController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;additionalOptions: (context) {&#xA;  return &amp;lt;OptionItem&amp;gt;[&#xA;    OptionItem(&#xA;      onTap: () =&amp;gt; debugPrint(&#39;My option works!&#39;),&#xA;      iconData: Icons.chat,&#xA;      title: &#39;My localized title&#39;,&#xA;    ),&#xA;    OptionItem(&#xA;      onTap: () =&amp;gt;&#xA;          debugPrint(&#39;Another option working!&#39;),&#xA;      iconData: Icons.chat,&#xA;      title: &#39;Another localized title&#39;,&#xA;    ),&#xA;  ];&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t like to show your options with the default &lt;code&gt;showModalBottomSheet&lt;/code&gt; just override the View with the &lt;code&gt;optionsBuilder&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;optionsBuilder: (context, defaultOptions) async {&#xA;  await showDialog&amp;lt;void&amp;gt;(&#xA;    context: context,&#xA;    builder: (ctx) {&#xA;      return AlertDialog(&#xA;        content: ListView.builder(&#xA;          itemCount: defaultOptions.length,&#xA;          itemBuilder: (_, i) =&amp;gt; ActionChip(&#xA;            label: Text(defaultOptions[i].title),&#xA;            onPressed: () =&amp;gt;&#xA;                defaultOptions[i].onTap!(),&#xA;          ),&#xA;        ),&#xA;      );&#xA;    },&#xA;  );&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;additionalOptions&lt;/code&gt; are already included here (if you provided &lt;code&gt;additionalOptions&lt;/code&gt;)!&lt;/p&gt; &#xA;&lt;p&gt;Last but not least: What is an option without proper translation. To add your strings to them just add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;optionsTranslation: OptionsTranslation(&#xA;  playbackSpeedButtonText: &#39;Wiedergabegeschwindigkeit&#39;,&#xA;  subtitlesButtonText: &#39;Untertitel&#39;,&#xA;  cancelButtonText: &#39;Abbrechen&#39;,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Subtitles&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Since version 1.1.0 chewie supports subtitles. Here you can see how to use them&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can provide an &lt;code&gt;List&amp;lt;Subtitle&amp;gt;&lt;/code&gt; and customize your subtitles with the &lt;code&gt;subtitleBuilder&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Just add subtitles as following code is showing into your &lt;code&gt;ChewieController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ChewieController(&#xA;  videoPlayerController: _videoPlayerController,&#xA;  autoPlay: true,&#xA;  looping: true,&#xA;  subtitle: Subtitles([&#xA;    Subtitle(&#xA;      index: 0,&#xA;      start: Duration.zero,&#xA;      end: const Duration(seconds: 10),&#xA;      text: &#39;Hello from subtitles&#39;,&#xA;    ),&#xA;    Subtitle(&#xA;      index: 1,&#xA;      start: const Duration(seconds: 10),&#xA;      end: const Duration(seconds: 20),&#xA;      text: &#39;Whats up? :)&#39;,&#xA;    ),&#xA;  ]),&#xA;  subtitleBuilder: (context, subtitle) =&amp;gt; Container(&#xA;    padding: const EdgeInsets.all(10.0),&#xA;    child: Text(&#xA;      subtitle,&#xA;      style: const TextStyle(color: Colors.white),&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;index&lt;/code&gt; attribute is just for purpases if you want to structure your subtitles in your database and provide your indexes here. &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; are here the key attributes.&lt;/p&gt; &#xA;&lt;p&gt;The Duration defines on which part of your video your subtitles should start and end. For example: Your video is 10 minutes long and you want to add a subtitle between: &lt;code&gt;00:00&lt;/code&gt; and &lt;code&gt;00:10&lt;/code&gt;&#39;th second you&#39;ve to provide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Subtitle(&#xA;  index: 0,&#xA;  start: Duration.zero,&#xA;  end: const Duration(seconds: 10),&#xA;  text: &#39;Hello from subtitles&#39;,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Please run the app in the &lt;a href=&#34;https://github.com/brianegan/chewie/tree/master/example&#34;&gt;&lt;code&gt;example/&lt;/code&gt;&lt;/a&gt; folder to start playing!&lt;/p&gt; &#xA;&lt;h2&gt;Migrating from Chewie &amp;lt; 0.9.0&lt;/h2&gt; &#xA;&lt;p&gt;Instead of passing the &lt;code&gt;VideoPlayerController&lt;/code&gt; and your options to the &lt;code&gt;Chewie&lt;/code&gt; widget you now pass them to the &lt;code&gt;ChewieController&lt;/code&gt; and pass that latter to the &lt;code&gt;Chewie&lt;/code&gt; widget.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final playerWidget = Chewie(&#xA;  videoPlayerController,&#xA;  autoPlay: true,&#xA;  looping: true,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final chewieController = ChewieController(&#xA;  videoPlayerController: videoPlayerController,&#xA;  autoPlay: true,&#xA;  looping: true,&#xA;);&#xA;&#xA;final playerWidget = Chewie(&#xA;  controller: chewieController,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MaterialUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MaterialDesktopUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CupertinoUI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Options with translations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Subtitles&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CustomControls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto-Rotate on FullScreen depending on Source Aspect-Ratio&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Live-Stream and UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AutoPlay&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Placeholder&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Looping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Start video at&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom Progress-Bar colors&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom Overlay&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow Sleep (Wakelock)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Playbackspeed Control&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom Route-Pagebuilder&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom Device-Orientation and SystemOverlay before and after fullscreen&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom ErrorBuilder&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support different resolutions of video&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Re-design State-Manager with Provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Screen-Mirroring / Casting (Google Chromecast)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;iOS warning&lt;/h2&gt; &#xA;&lt;p&gt;The video_player plugin used by chewie will only work in iOS simulators if you are on flutter 1.26.0 or above. You may need to switch to the beta channel &lt;code&gt;flutter channel beta&lt;/code&gt; Please refer to this &lt;a href=&#34;https://github.com/flutter/flutter/issues/14647&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;000000000000000KKKKKKKKKKKKXXXXXXXXXXXXXKKKKKKKKKKKKKKKKKKKKKKKKKKK00&#xA;000000000000000KKKKKKKKKKKKKXXXXXXXXXXKKKKKKKKKKKKKKKKKKKKKKKKKKKKK00&#xA;000000000000000KKKKKKKKKKKKKXXXXXXK0xdoddoclodxOKKKKKKKKKKKKKKKKKKK00&#xA;00000000000000KKKKKKKKKKKKKKKK0xoc:;;,;,,,,&#39;&#39;&#39;;cldxO0KKKKKKKKKKKKK000&#xA;00000000000000KKKKKKKKKKKKKKx:&#39;&#39;,,,&#39;.,&#39;...;,&#39;&#39;&#39;&#39;,;:clk0KKKKKKKKKKK000&#xA;00000000000000KKKKKKKKKKKKd;&#39;&#39;,,,;;;&#39;.,..,c;;,;;;;;:;;d0KKKKKKKKKK000&#xA;00000000000000KKKKKKKKKKx,&#39;,;:ccl;,c;&#39;;,,ol::coolc:;;,,x0KKKKKKKKK000&#xA;00000000000000KKKKKKKKOl;:;:clllll;;o;;;cooclddclllllc::kKKKKKKKKK000&#xA;00000000000000KKKKKK0o;:ccclccccooo:ooc:ddoddloddolc;;;:c0KKKKKKK0000&#xA;00000000000000KKKKKOccodolccclllooddddddxdxddxkkkkxxo;&#39;&#39;;d0KKKKKK0000&#xA;00000000000000KKKKkcoddolllllclloodxxxxdddxdddxxxddool:&#39;.;O0KKKKK0000&#xA;00000000000000000xloollcccc:cclclodkkxxxdddxxxkkxdlllolc,,x0KKKKK0000&#xA;0000000000000000xccllccccc:;,&#39;&#39;,;:dxkxxddddxkkkxdollcc:cc;d0KKKKKK000&#xA;000000000000000kcc:::cllol:&#39;......odxxdoccldxxxdollllc:;;:d0KKKKK0000&#xA;00000000000000klc;;;clcc::;&#39;...&#39;;;;:cll..&#39;,cdddolccccccc;:x0KKKKK0000&#xA;0000000000000kdl;:cclllclllc::;,;.&#39;.&#39;&#39;o;,,&#39;.;ccoooollllc:;x0KKKKK0000&#xA;000000000000kol;:;::coolcc:::,.....,..cd,....&#39;:lolclolllc;x0KKKK00000&#xA;00000000000Odl;:&#39;cllol;&#39;&#39;&#39;,;;;;::&#39;&#39;.&#39;,:doc;,&#39;,::looc:lcol:x0K00000000&#xA;0000000000Oxl:c,:lolc,..&#39;,:clllollodoc;cllolccloolllcclollO0K00000000&#xA;0000000000xllc,:lool:&#39;.,...o.;llxdo:loc;;ccodlolodldllolld00K0K000000&#xA;000000000Ooc::coooc,,.&#39;,;:lx,,...&#39;:;o;l;&#39;&lt;span&gt;⭕&lt;/span&gt;oolccocdoldloO0000KK00000&#xA;00000000kol:clllc;;,.;::;:clllllolxc;.:c&#39;:ocldlccl;clldox000000000000&#xA;000000Odll:cccc;:;,&#39;;cllooodoollcloll;c:.:d:ooo;cl;oloddkO00000000000&#xA;0000OOddOdll;c,;;,,;;:cldodddoxdoodlcc:.,ox&lt;span&gt;⭕&lt;/span&gt;lllocdlodx00O0000000000&#xA;000Oxdl:::ll,:,:;,&#39;;c,:oloddolkxddxolc.&#39;coccocolcccoooc;oxO00KOOOO000&#xA;dc;,&#39;...&#39;;c,,:c:::&#39;c:&#39;;cldoo;:odolxoc:.,o:oldlxol;lddl,.,lkO0KdlcckKO&#xA;&#39;.......,:&#39;&#39;&#39;;cll:cc,,;:l:c,,;:oc;cdc,.;::dldoxd:ldol;,&#39;..,:lo,,,,kOk&#xA;.......&#39;;&#39;.&#39;,:clcll,,;:l:;&#39;..&#39;&#39;c:,;cl&#39;.&#39;;dxoooxlddl;&#39;,&#39;&#39;..,,;&#39;...,ool&#xA;.......,,.&#39;&#39;;;:cld;.;,do:..;:,&#39;:c&#39;,:c&#39;&#39;&#39;;xxdldocol&#39;..&#39;;,.......&#39;,;;,;&#xA;.......&#39;..&#39;&#39;,,coxc&#39;&#39;;:do&#39;.clc:lco&#39;,o;&#39;,;cOxdol:cc:.....&#39;..oxd;&#39;,&#39;.&#39;..&#xA;&#39;.......&#39;&#39;..,:cxl;&#39;;;cx:&#39;&#39;cll:clc&#39;cl&#39;,:l:ko:c..;c:..&#39;;...,KNNl;:;ll:&#39;&#xA;.......&#39;&#39;...;,ooc,,,:od&#39;.&#39;:cccdd,,l&#39;&#39;cl:co;;,..;;&#39;..&#39;,&#39;..;d0O,;;:XXXK&#xA;............&#39;cll;&#39;,,lo&#39;.&#39;.::codl,c..:c;doc.,:.&#39;,....&#39;...&#39;......&#39;l0XKk&#xA;&#39;............c;;,&#39;:lc.&#39;&#39;,.;ccol;:,.:c.:o,;&#39;.;&#39;......,...&#39;,,.&#39;...&#39;.,;;&#xA;.............&#39;,;;,cc..;,&#39;&#39;;:lc&#39;:;..c&#39;.c:;.,......,&#39;..&#39;...&#39;&#39;,:,,;;,...&#xA;..............&#39;,,;:&#39;.&#39;;,&#39;,:c;.;;..&#39;;..,;,.........&#39;&#39;..&#39;...&#39;kko.,,....&#xA;...............;,:&#39;..;&#39;&#39;&#39;;:,..;&#39;&#39;.&#39;&#39;..&#39;&#39;............&#39;...&#39;.lK0c&#39;;;c;&#39;.&#xA;...............,,&#39;...,.&#39;,;&#39;&#39;...&#39;&#39;....,......&#39;............&#39;dOx&#39;,;:dd,&#39;&#xA;..............&#39;,.....&#39;.,;..&#39;..&#39;,..........&#39;..............&#39;;:;&#39;,,ldo.&#39;&#xA;.............&#39;&#39;&#39;.&#39;.....,&#39;..&#39;,&#39;,&#39;..&#39;...&#39;&#39;..&#39;............&#39;.......,dx&#39;.&#39;&#xA;.......................,...&#39;;,&#39;..&#39;.....,.&#39;.............&#39;&#39;.&#39;......&#39;..&#39;&#xA;...........&#39;......&#39;...&#39;,..&#39;&#39;;,&#39;..&#39;.....................&#39;,&#39;;,..&#39;....&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>