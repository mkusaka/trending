<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:48:15Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IshuPrabhakar/Heyy-chat-app</title>
    <updated>2023-12-24T01:48:15Z</updated>
    <id>tag:github.com,2023-12-24:/IshuPrabhakar/Heyy-chat-app</id>
    <link href="https://github.com/IshuPrabhakar/Heyy-chat-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Realtime Chat Application using flutter, Asp.Net Core Web Api, SignalR , WebRTC etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Heyy&lt;/h1&gt; &#xA;&lt;p&gt;Yet another chat application&lt;/p&gt; &#xA;&lt;h2&gt;Real-Time Chat Application&lt;/h2&gt; &#xA;&lt;p&gt;This Real Time Chat Application is built using the Flutter framework.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/development?gclsrc=ds&amp;amp;gclsrc=ds&#34;&gt;Flutter&lt;/a&gt; as fronted client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/aspnet/apis&#34;&gt;Asp.Net&lt;/a&gt; Core RESTful as backend server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/aspnet/signalr&#34;&gt;Signalr&lt;/a&gt; and &lt;a href=&#34;https://webrtc.org/&#34;&gt;WebRTC&lt;/a&gt; for Realtime communication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-in/sql-server/sql-server-downloads&#34;&gt;SQL Server&lt;/a&gt; as backend database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://objectbox.io/&#34;&gt;ObjectBox&lt;/a&gt; as client app database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern UI&lt;/li&gt; &#xA; &lt;li&gt;Sign in/ Sign up using email/phone with verification.&lt;/li&gt; &#xA; &lt;li&gt;One-to-one and One to many chat support.&lt;/li&gt; &#xA; &lt;li&gt;Story support.&lt;/li&gt; &#xA; &lt;li&gt;Realtime communication using SignalR and WebRTC.&lt;/li&gt; &#xA; &lt;li&gt;FCM for push notification.&lt;/li&gt; &#xA; &lt;li&gt;Support message reaction, reply, forward, delete etc.&lt;/li&gt; &#xA; &lt;li&gt;Local Storage for all kinds of data including messages, users, settings etc.&lt;/li&gt; &#xA; &lt;li&gt;Audio/Video call support.&lt;/li&gt; &#xA; &lt;li&gt;Light and Dark theme support.&lt;/li&gt; &#xA; &lt;li&gt;And much more like other chat Applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524878-7997372b-82d7-40fb-a95a-2578179941b7.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524899-14376172-23f3-4396-a19a-03cf4759bce3.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524908-fe3c09eb-3028-4308-8def-7855a7fdc494.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524911-af376014-cdb1-45d5-bf60-0488de486119.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524916-8ee58fce-880b-428c-861f-ce5ce4b28d62.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524920-a92e40c1-937d-49c4-90f4-dbb5a166f3ed.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524949-76fd39c0-eb7c-4e62-a9ca-0aee4db469ac.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524967-80ddeb94-8bed-48ec-a058-b396ae018f3b.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234524984-4b97431a-c747-4a4d-9829-f144c6e171b4.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525002-d5fa8b5e-6d5f-4b58-867d-815f95f669a0.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525039-daa0920d-8f71-48ec-a437-3bb8d763cd03.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525065-1fb5f646-fb49-4b9f-8619-2ec367876de7.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525095-c1740be4-3da4-470f-a2d2-17eece02efb7.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525146-d08ace65-8da4-4105-b387-c939f1f4c57c.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525167-19506759-3f84-4969-946a-2aa2c9b08e6d.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525187-98c1746b-c5c3-4b7e-a046-eb0a7046e800.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525216-8292120e-b895-4099-8656-0c39a35ca69d.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525243-39642978-aa9f-4e2e-9007-6d12ce70052b.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525264-4068f034-032a-40fd-9cd8-53daa6387ae2.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525293-f059b0e5-d0b3-4660-ba88-d0de3aaeb08d.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525315-389be9e2-7088-4732-8444-3c66bfafd2e7.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525327-ba423fcb-b06c-4f59-a619-122227540da9.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525368-69fc4499-017f-4503-a9cc-6ca6291826ad.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525393-420d2851-53d3-449c-bc05-6993d61bf4f9.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525414-dddc2949-a3c3-4475-a233-276479026688.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/72759521/234525419-69b3206b-6d7b-4927-8848-38f004921e07.jpg&#34; width=&#34;200&#34; height=&#34;422&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the actively maintained project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>supabase/supabase-flutter</title>
    <updated>2023-12-24T01:48:15Z</updated>
    <id>tag:github.com,2023-12-24:/supabase/supabase-flutter</id>
    <link href="https://github.com/supabase/supabase-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter integration for Supabase. This package makes it simple for developers to build secure and scalable products.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;Supabase Flutter&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Monorepo containing all &lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase&lt;/a&gt; libraries for Flutter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/postgrest&#34;&gt;postgrest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/gotrue&#34;&gt;gotrue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/realtime_client&#34;&gt;realtime_client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/storage_client&#34;&gt;storage_client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/functions_client&#34;&gt;functions_client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/supabase&#34;&gt;supabase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/supabase_flutter&#34;&gt;supabase_flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/yet_another_json_isolate&#34;&gt;yet_another_json_isolate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://supabase.com/docs/reference/dart/introduction&#34;&gt;https://supabase.com/docs/reference/dart/introduction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;Except Linux, all platforms are fully supported. Linux only doesn&#39;t support deeplinks, because of our dependency &lt;a href=&#34;https://pub.dev/packages/app_links&#34;&gt;app_links&lt;/a&gt;. All other features are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Import the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize &lt;code&gt;Supabase&lt;/code&gt; before using it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;void main() async {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;&#xA;  await Supabase.initialize(&#xA;    url: SUPABASE_URL,&#xA;    anonKey: SUPABASE_ANON_KEY,&#xA;  );&#xA;&#xA;  runApp(MyApp());&#xA;}&#xA;&#xA;// It&#39;s handy to then extract the Supabase client in a variable for later uses&#xA;final supabase = Supabase.instance.client;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;debug&lt;/code&gt; is optional. It&#39;s enabled by default if you&#39;re running the app in debug mode (&lt;code&gt;flutter run --debug&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/auth&#34;&gt;Authentication&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  late final StreamSubscription&amp;lt;AuthState&amp;gt; _authSubscription;&#xA;  User? _user;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    _authSubscription = supabase.auth.onAuthStateChange.listen((data) {&#xA;      final AuthChangeEvent event = data.event;&#xA;      final Session? session = data.session;&#xA;      setState(() {&#xA;        _user = session?.user;&#xA;      });&#xA;    });&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    _authSubscription.cancel();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return ElevatedButton(&#xA;      onPressed: () {&#xA;        supabase.auth.signInWithOtp(email: &#39;my_email@example.com&#39;);&#xA;      },&#xA;      child: const Text(&#39;Login&#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Native Sign in with Apple example&lt;/h4&gt; &#xA;&lt;p&gt;Before you run the code, you need to &lt;a href=&#34;https://developer.apple.com/help/account/manage-identifiers/register-an-app-id/&#34;&gt;register your app ID with Apple&lt;/a&gt; with the &lt;code&gt;Sign In with Apple&lt;/code&gt; capability selected, and add the bundle ID to your Supabase dashboard in &lt;code&gt;Authentication -&amp;gt; Providers -&amp;gt; Apple&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;return supabase.auth.signInWithApple();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;signInWithApple()&lt;/code&gt; is only supported on iOS and on macOS. Other platforms can use the &lt;code&gt;signInWithOAuth()&lt;/code&gt; method to perform Apple login.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;signInWithApple&lt;/code&gt; method is currently experimental and is subject to change. Follow &lt;a href=&#34;https://github.com/supabase/supabase-flutter/issues/399&#34;&gt;this issue&lt;/a&gt; for platform support progress.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/database&#34;&gt;Database&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  // Persisting the future as local variable to prevent refetching upon rebuilds.&#xA;  final Future&amp;lt;dynamic&amp;gt; _future = supabase&#xA;      .from(&#39;countries&#39;)&#xA;      .select()&#xA;      .order(&#39;name&#39;, ascending: true);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return FutureBuilder(&#xA;      future: _future,&#xA;      builder: (context, snapshot) {&#xA;        // return your widget with the data from snapshot&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime&#34;&gt;Realtime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Realtime data as &lt;code&gt;Stream&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To receive realtime updates, you have to first enable Realtime on from your Supabase console. You can read more &lt;a href=&#34;https://supabase.com/docs/guides/api#realtime-api&#34;&gt;here&lt;/a&gt; on how to enable it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; When using &lt;code&gt;stream()&lt;/code&gt; with a &lt;code&gt;StreamBuilder&lt;/code&gt;, make sure to persist the stream value as a variable in a &lt;code&gt;StatefulWidget&lt;/code&gt; instead of directly constructing the stream within your widget tree, which could cause rapid rebuilds that will lead to losing realtime connection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  // Persisting the future as local variable to prevent refetching upon rebuilds.&#xA;  final stream = supabase.from(&#39;countries&#39;).stream(primaryKey: [&#39;id&#39;]);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return StreamBuilder&amp;lt;List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt;&amp;gt;(&#xA;      stream: stream,&#xA;      builder: (context, snapshot) {&#xA;        // return your widget with the data from snapshot&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime#postgres-changes&#34;&gt;Postgres Changes&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can get notified whenever there is a change in your Supabase tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myChannel = supabase.channel(&#39;my_channel&#39;);&#xA;&#xA;myChannel.on(&#xA;    RealtimeListenTypes.postgresChanges,&#xA;    ChannelFilter(&#xA;      event: &#39;*&#39;,&#xA;      schema: &#39;public&#39;,&#xA;      table: &#39;countries&#39;,&#xA;    ), (payload, [ref]) {&#xA;  // Do something fun or interesting when there is an change on the database&#xA;}).subscribe();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime#broadcast&#34;&gt;Broadcast&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Broadcast lets you send and receive low latency messages between connected clients by bypassing the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myChannel = supabase.channel(&#39;my_channel&#39;);&#xA;&#xA;// Subscribe to `cursor-pos` broadcast event&#xA; myChannel.on(&#xA;  RealtimeListenTypes.broadcast,&#xA;  ChannelFilter(event: &#39;cursor-pos&#39;),&#xA;  (payload, [ref]) {&#xA;    // Do something fun or interesting when there is an change on the database&#xA;  },&#xA; ).subscribe();&#xA;// Send a broadcast message to other connected clients&#xA;await myChannel.send(&#xA;  type: RealtimeListenTypes.broadcast,&#xA;  event: &#39;cursor-pos&#39;,&#xA;  payload: {&#39;x&#39;: 30, &#39;y&#39;: 50},&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime#presence&#34;&gt;Presence&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Presence let&#39;s you easily create &#34;I&#39;m online&#34; feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myChannel = supabase.channel(&#39;my_channel&#39;);&#xA;&#xA;// Subscribe to presence events&#xA;myChannel.on(&#xA;    RealtimeListenTypes.presence, ChannelFilter(event: &#39;sync&#39;),&#xA;    (payload, [ref]) {&#xA;  final onlineUsers = myChannel.presenceState();&#xA;  // handle sync event&#xA;}).on(RealtimeListenTypes.presence, ChannelFilter(event: &#39;join&#39;),&#xA;    (payload, [ref]) {&#xA;  // New users have joined&#xA;}).on(RealtimeListenTypes.presence, ChannelFilter(event: &#39;leave&#39;),&#xA;    (payload, [ref]) {&#xA;  // Users have left&#xA;}).subscribe((status, error) async {&#xA;  if (status == RealtimeSubscribeStatus.subscribed) {&#xA;    // Send the current user&#39;s state upon subscribing&#xA;    final status = await myChannel&#xA;        .track({&#39;online_at&#39;: DateTime.now().toIso8601String()});&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/storage&#34;&gt;Storage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return ElevatedButton(&#xA;      onPressed: () {&#xA;        final file = File(&#39;example.txt&#39;);&#xA;        file.writeAsStringSync(&#39;File content&#39;);&#xA;        supabase.storage&#xA;            .from(&#39;my_bucket&#39;)&#xA;            .upload(&#39;my/path/to/files/example.txt&#39;, file);&#xA;      },&#xA;      child: const Text(&#39;Upload&#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/functions&#34;&gt;Edge Functions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  // Persisting the future as local variable to prevent refetching upon rebuilds.&#xA;  final future = supabase.functions.invoke(&#39;get_countries&#39;);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return FutureBuilder(&#xA;      future: future,&#xA;      builder: (context, snapshot) {&#xA;        // return your widget with the data from snapshot&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication Deep Dive&lt;/h2&gt; &#xA;&lt;p&gt;Using this package automatically persists the auth state on local storage. It also helps you handle authentication with deep link from 3rd party service like Google, Github, Twitter...&lt;/p&gt; &#xA;&lt;h3&gt;Email authentication&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;Future&amp;lt;void&amp;gt; signIn(String email, String password) async {&#xA;  final response = await Supabase.instance.client.auth.signInWithPassword(email: email, password: password);&#xA;  final Session? session = response.session;&#xA;  final User? user = response.user;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;signInWithProvider&lt;/h3&gt; &#xA;&lt;p&gt;This method will automatically launch the auth url and open a browser for user to sign in with 3rd party login.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;supabase.auth.signInWithOAuth(&#xA;  Provider.google,&#xA;  redirectTo: &#39;io.supabase.flutter://reset-callback/&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom LocalStorage&lt;/h3&gt; &#xA;&lt;p&gt;As default, &lt;code&gt;supabase_flutter&lt;/code&gt; uses &lt;a href=&#34;https://pub.dev/packages/shared_preferences&#34;&gt;&lt;code&gt;Shared preferences&lt;/code&gt;&lt;/a&gt; to persist the user session.&lt;/p&gt; &#xA;&lt;p&gt;However, you can use any other methods by creating a &lt;code&gt;LocalStorage&lt;/code&gt; implementation. For example, we can use &lt;a href=&#34;https://pub.dev/packages/flutter_secure_storage&#34;&gt;&lt;code&gt;flutter_secure_storage&lt;/code&gt;&lt;/a&gt; plugin to store the user session in a secure storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Define the custom LocalStorage implementation&#xA;class MockLocalStorage extends LocalStorage {&#xA;&#xA;  final storage = FlutterSecureStorage();&#xA;&#xA;  @override&#xA;  Future&amp;lt;void&amp;gt; initialize() async {}&#xA;&#xA;  @override&#xA;  Future&amp;lt;String?&amp;gt; accessToken() async {&#xA;    return storage.containsKey(key: supabasePersistSessionKey);&#xA;  }&#xA;&#xA;  @override&#xA;  Future&amp;lt;bool&amp;gt; hasAccessToken() async {&#xA;    return storage.read(key: supabasePersistSessionKey);&#xA;  }&#xA;&#xA;  @override&#xA;  Future&amp;lt;void&amp;gt; persistSession(String persistSessionString) async {&#xA;    return storage.write(key: supabasePersistSessionKey, value: persistSessionString);&#xA;  }&#xA;&#xA;  @override&#xA;  Future&amp;lt;void&amp;gt; removePersistedSession() async {&#xA;    return storage.delete(key: supabasePersistSessionKey);&#xA;  }&#xA;}&#xA;&#xA;// use it when initializing&#xA;Supabase.initialize(&#xA;  ...&#xA;  authOptions: FlutterAuthClientOptions(&#xA;    localStorage: const EmptyLocalStorage(),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;EmptyLocalStorage&lt;/code&gt; to disable session persistence:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Supabase.initialize(&#xA;  // ...&#xA;  authOptions: FlutterAuthClientOptions(&#xA;    localStorage: const EmptyLocalStorage(),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deep link config&lt;/h2&gt; &#xA;&lt;p&gt;*Currently supabase_flutter supports deep links on Android, iOS, Web, MacOS and Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Supabase redirect URLs config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to your Supabase project Authentication Settings page.&lt;/li&gt; &#xA; &lt;li&gt;You need to enter your app redirect callback on &lt;code&gt;Additional Redirect URLs&lt;/code&gt; field.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The redirect callback url should have this format &lt;code&gt;[YOUR_SCHEME]://[YOUR_AUTH_HOSTNAME]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supabase/supabase-flutter/main/.github/images/deeplink-config.png&#34; alt=&#34;authentication settings page&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supabase 3rd party logins config&lt;/h3&gt; &#xA;&lt;p&gt;Follow the guide &lt;a href=&#34;https://supabase.io/docs/guides/auth#third-party-logins&#34;&gt;https://supabase.io/docs/guides/auth#third-party-logins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;For Android&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Deep Links can have any custom scheme. The downside is that any app can claim a scheme, so make sure yours are as unique as possible, eg. &lt;code&gt;HST0000001://host.com&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest ...&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;  &amp;lt;application ...&amp;gt;&#xA;    &amp;lt;activity ...&amp;gt;&#xA;      &amp;lt;!-- ... other tags --&amp;gt;&#xA;&#xA;      &amp;lt;!-- Deep Links --&amp;gt;&#xA;      &amp;lt;intent-filter&amp;gt;&#xA;        &amp;lt;action android:name=&#34;android.intent.action.VIEW&#34; /&amp;gt;&#xA;        &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;        &amp;lt;category android:name=&#34;android.intent.category.BROWSABLE&#34; /&amp;gt;&#xA;        &amp;lt;!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST --&amp;gt;&#xA;        &amp;lt;data&#xA;          android:scheme=&#34;[YOUR_SCHEME]&#34;&#xA;          android:host=&#34;[YOUR_HOST]&#34; /&amp;gt;&#xA;      &amp;lt;/intent-filter&amp;gt;&#xA;    &amp;lt;/activity&amp;gt;&#xA;  &amp;lt;/application&amp;gt;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;android:host&lt;/code&gt; attribute is optional for Deep Links.&lt;/p&gt; &#xA; &lt;p&gt;For more info: &lt;a href=&#34;https://developer.android.com/training/app-links/deep-linking&#34;&gt;https://developer.android.com/training/app-links/deep-linking&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For iOS&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Custom URL schemes can have... any custom scheme and there is no host specificity, nor entitlements or a hosted file. The downside is that any app can claim any scheme, so make sure yours is as unique as possible, eg. &lt;code&gt;hst0000001&lt;/code&gt; or &lt;code&gt;myIncrediblyAwesomeScheme&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For &lt;strong&gt;Custom URL schemes&lt;/strong&gt; you need to declare the scheme in &lt;code&gt;ios/Runner/Info.plist&lt;/code&gt; (or through Xcode&#39;s Target Info editor, under URL Types):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;plist&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;  &amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;  &amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;      &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;      &amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;      &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;      &amp;lt;array&amp;gt;&#xA;        &amp;lt;string&amp;gt;[YOUR_SCHEME]&amp;lt;/string&amp;gt;&#xA;      &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/array&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This allows for your app to be started from &lt;code&gt;YOUR_SCHEME://ANYTHING&lt;/code&gt; links.&lt;/p&gt; &#xA; &lt;p&gt;For more info: &lt;a href=&#34;https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app&#34;&gt;https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For Windows&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Setting up deep links in Windows has few more steps than other platforms. &lt;a href=&#34;https://pub.dev/packages/app_links#windows&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Declare this method in &amp;lt;PROJECT_DIR&amp;gt;\windows\runner\win32_window.h&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  // Dispatches link if any.&#xA;  // This method enables our app to be with a single instance too.&#xA;  // This is optional but mandatory if you want to catch further links in same app.&#xA;  bool SendAppLinkToInstance(const std::wstring&amp;amp; title);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add this inclusion at the top of &amp;lt;PROJECT_DIR&amp;gt;\windows\runner\win32_window.cpp&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;app_links_windows/app_links_windows_plugin.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add this method in &amp;lt;PROJECT_DIR&amp;gt;\windows\runner\win32_window.cpp&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool Win32Window::SendAppLinkToInstance(const std::wstring&amp;amp; title) {&#xA;  // Find our exact window&#xA;  HWND hwnd = ::FindWindow(kWindowClassName, title.c_str());&#xA;&#xA;  if (hwnd) {&#xA;    // Dispatch new link to current window&#xA;    SendAppLink(hwnd);&#xA;&#xA;    // (Optional) Restore our window to front in same state&#xA;    WINDOWPLACEMENT place = { sizeof(WINDOWPLACEMENT) };&#xA;    GetWindowPlacement(hwnd, &amp;amp;place);&#xA;    switch(place.showCmd) {&#xA;      case SW_SHOWMAXIMIZED:&#xA;          ShowWindow(hwnd, SW_SHOWMAXIMIZED);&#xA;          break;&#xA;      case SW_SHOWMINIMIZED:&#xA;          ShowWindow(hwnd, SW_RESTORE);&#xA;          break;&#xA;      default:&#xA;          ShowWindow(hwnd, SW_NORMAL);&#xA;          break;&#xA;    }&#xA;    SetWindowPos(0, HWND_TOP, 0, 0, 0, 0, SWP_SHOWWINDOW | SWP_NOSIZE | SWP_NOMOVE);&#xA;    SetForegroundWindow(hwnd);&#xA;    // END Restore&#xA;&#xA;    // Window has been found, don&#39;t create another one.&#xA;    return true;&#xA;  }&#xA;&#xA;  return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add the call to the previous method in &lt;code&gt;CreateAndShow&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool Win32Window::CreateAndShow(const std::wstring&amp;amp; title,&#xA;                                const Point&amp;amp; origin,&#xA;                                const Size&amp;amp; size) {&#xA;if (SendAppLinkToInstance(title)) {&#xA;    return false;&#xA;}&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;At this point, you can register your own scheme.&lt;br&gt; On Windows, URL protocols are setup in the Windows registry.&lt;/p&gt; &#xA; &lt;p&gt;This package won&#39;t do it for you.&lt;/p&gt; &#xA; &lt;p&gt;You can achieve it with &lt;a href=&#34;https://pub.dev/packages/url_protocol&#34;&gt;url_protocol&lt;/a&gt; inside you app.&lt;/p&gt; &#xA; &lt;p&gt;The most relevant solution is to include those registry modifications into your installer to allow for deregistration.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For Mac OS&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Add this XML chapter in your macos/Runner/Info.plist inside &#xA;  &lt;plist version=&#34;1.0&#34;&gt;&#xA;   &lt;dict&gt;&#xA;     chapter:&#xA;   &lt;/dict&gt;&#xA;  &lt;/plist&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;  &amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;  &amp;lt;array&amp;gt;&#xA;      &amp;lt;dict&amp;gt;&#xA;          &amp;lt;key&amp;gt;CFBundleURLName&amp;lt;/key&amp;gt;&#xA;          &amp;lt;!-- abstract name for this URL type (you can leave it blank) --&amp;gt;&#xA;          &amp;lt;string&amp;gt;sample_name&amp;lt;/string&amp;gt;&#xA;          &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;          &amp;lt;array&amp;gt;&#xA;              &amp;lt;!-- your schemes --&amp;gt;&#xA;              &amp;lt;string&amp;gt;sample&amp;lt;/string&amp;gt;&#xA;          &amp;lt;/array&amp;gt;&#xA;      &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/array&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repo on &lt;a href=&#34;https://github.com/supabase/supabase-flutter&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the project to your own machine&lt;/li&gt; &#xA; &lt;li&gt;Commit changes to your own branch&lt;/li&gt; &#xA; &lt;li&gt;Push your work back up to your fork&lt;/li&gt; &#xA; &lt;li&gt;Submit a Pull request so that we can review your changes and merge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repo is licenced under MIT.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/docs/guides/with-flutter&#34;&gt;Quickstart: Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/blog/flutter-tutorial-building-a-chat-app&#34;&gt;Flutter Tutorial: building a Flutter chat app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/blog/flutter-authentication-and-authorization-with-rls&#34;&gt;Flutter Tutorial - Part 2: Authentication and Authorization with RLS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>foss42/apidash</title>
    <updated>2023-12-24T01:48:15Z</updated>
    <id>tag:github.com,2023-12-24:/foss42/apidash</id>
    <link href="https://github.com/foss42/apidash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API Dash is a beautiful open-source cross-platform API Client built using Flutter which can help you easily create &amp; customize your API requests, visually inspect responses and generate API integration code. A lightweight alternative to postman/insomnia.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;API Dash ⚡️&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bit.ly/heyfoss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/DISCORD-JOIN%20SERVER-5663F7?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord Server Invite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Please support this initiative by giving this project a Star ⭐️&lt;/h3&gt; &#xA;&lt;p&gt;API Dash is a beautiful open-source cross-platform API Client that can help you easily create &amp;amp; customize your API requests, visually inspect responses and generate Dart code on the go.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/foss42/apidash/assets/615622/984b3c95-a6a1-48a5-a6ba-5a1e95802b5d&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;API Dash can be downloaded from the links below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Installation Guide&lt;/th&gt; &#xA;   &lt;th&gt;CPU/Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Download Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.dmg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/raw/main/INSTALLATION.md#macos&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apple Silicon &amp;amp; Intel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/releases/latest/download/apidash-macos.dmg&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.exe&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/raw/main/INSTALLATION.md#windows&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64-bit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/releases/latest/download/apidash-windows-x86_64.exe&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;5&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&lt;code&gt;.deb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&lt;a href=&#34;https://github.com/foss42/apidash/raw/main/INSTALLATION.md#debian-based-linux-distributions-debian-ubuntu-linux-mint-etc&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/releases/latest/download/apidash-linux-amd64.deb&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;arm64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/releases/latest/download/apidash-linux-arm64.deb&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&lt;code&gt;.rpm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;&lt;a href=&#34;https://github.com/foss42/apidash/raw/main/INSTALLATION.md#red-hat-based-linux-distributions-fedora-rocky-almalinux-centos-rhel-etc&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/releases/latest/download/apidash-linux-x86_64.rpm&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;aarch64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/foss42/apidash/releases/latest/download/apidash-linux-aarch64.rpm&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PKGBUILD&lt;/code&gt; (Arch Linux)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/apidash-bin&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/apidash-bin&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;List of Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;↗️ Create &amp;amp; Customize API Requests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create different types of HTTP requests (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Easily manipulate and play around with request inputs like &lt;code&gt;headers&lt;/code&gt;, &lt;code&gt;query parameters&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Full support to send text content with 🥳 Unicode/Emoji and preview any API response containing Unicode/Emoji.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;💼 Organize Requests in Collections &amp;amp; Folders&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create collections and folders to organize your requests.&lt;/li&gt; &#xA; &lt;li&gt;Press and Drag to Re-arrange requests.&lt;/li&gt; &#xA; &lt;li&gt;Click and open popup menu to rename, duplicate and delete a request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔎 Visually Preview and Download Data &amp;amp; Multimedia API Responses&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inspect the API Response (HTTP status code, error message, headers, body, time taken).&lt;/li&gt; &#xA; &lt;li&gt;View formatted code previews for responses of various content types like &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;XML&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt;, &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;SQL&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;API Dash helps explore, test &amp;amp; preview Multimedia API responses which is &lt;strong&gt;not supported by any other API client&lt;/strong&gt;. You can directly test APIs that return images, PDF, audio &amp;amp; more. Check out the &lt;a href=&#34;https://github.com/foss42/apidash#mime-types-supported-by-api-dash-response-previewer&#34;&gt;full list of supported mimetypes/formats here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Save 💾 response body of any mimetype (&lt;code&gt;image&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, etc.) directly in the &lt;code&gt;Downloads&lt;/code&gt; folder of your system by clicking on the &lt;code&gt;Download&lt;/code&gt; button.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;👩🏻‍💻 Code Generation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We started out as the &lt;strong&gt;only&lt;/strong&gt; open source API client that supports advanced Dart code generation so that you can easily integrate APIs in your Dart/Flutter project or directly run it on DartPad. But, now API Dash supports generation of well-tested integration codes for &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Kotlin&lt;/strong&gt; &amp;amp; various other languages. You can check out the &lt;a href=&#34;https://github.com/foss42/apidash#code-generators&#34;&gt;full list of supported languages/libraries&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;🌙 Full Dark Mode Support&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily switch between light mode and dark mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;💾 Data&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data is persisted locally on the disk. To save the current snapshot, just press the &lt;strong&gt;Save&lt;/strong&gt; button in the collection pane.&lt;/li&gt; &#xA; &lt;li&gt;Click and open the collection/folder popup menu to export it as HAR. This can be version controlled &amp;amp; can be directly imported in other API Clients like Postman, Paw, etc.&lt;/li&gt; &#xA; &lt;li&gt;Export your entire data into a HAR (HTTP Archive) file. To access this option goto &lt;code&gt;Settings &amp;gt; Export Data&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚙️ Settings &amp;amp; Other Options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customize various options using a dedicated Settings screen.&lt;/li&gt; &#xA; &lt;li&gt;Window Configuration (Size &amp;amp; Position) is persisted and restored on app start. (Only macOS &amp;amp; Windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code Generators&lt;/h2&gt; &#xA;&lt;p&gt;API Dash currently supports API integration code generation for the following languages/libraries.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cURL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HAR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;axios&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript (&lt;code&gt;node.js&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;axios&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript (&lt;code&gt;node.js&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http.client&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;okhttp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We welcome contributions to support other programming languages/libraries/frameworks. Please check out more details &lt;a href=&#34;https://github.com/foss42/apidash/discussions/80&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;MIME Types supported by API Dash Response Previewer&lt;/h2&gt; &#xA;&lt;p&gt;API Dash is a next-gen API client that supports exploring, testing &amp;amp; previewing various data &amp;amp; multimedia API responses which is limited/not supported by other API clients. You can directly test APIs that return images, PDF, audio &amp;amp; more.&lt;/p&gt; &#xA;&lt;p&gt;Here is the complete list of mimetypes that can be directly previewed in API Dash:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File Type&lt;/th&gt; &#xA;   &lt;th&gt;Mimetype&lt;/th&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PDF&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;application/pdf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pdf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/apng&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.apng&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Animated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/avif&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.avif&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/bmp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.bmp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/gif&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.gif&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Animated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/jpeg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.jpeg&lt;/code&gt; or &lt;code&gt;.jpg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/jp2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.jp2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/jpx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.jpf&lt;/code&gt; or &lt;code&gt;.jpx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/pict&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/portable-anymap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pnm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/png&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.png&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/sgi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.sgi&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/svg+xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.svg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/tiff&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.tiff&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/targa&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.tga&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/vnd.wap.wbmp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.wbmp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/webp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.webp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/xwindowdump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.xwd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ico&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-portable-anymap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pnm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-portable-bitmap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pbm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-portable-graymap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.pgm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-portable-pixmap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.ppm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-tga&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.tga&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/x-xwindowdump&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.xwd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audio/flac&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.flac&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audio/mpeg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audio/mp4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.m4a&lt;/code&gt; or &lt;code&gt;.mp4a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audio/x-m4a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.m4a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audio/wav&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.wav&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;audio/wave&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.wav&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We welcome PRs to add support for previewing other multimedia mimetypes. Please go ahead and raise an issue so that we can discuss the approach. We are adding support for other mimetypes with each release. But, if you are looking for any particular mimetype support, please go ahead and open an issue. We will prioritize it&#39;s addition.&lt;/p&gt; &#xA;&lt;p&gt;Here is the complete list of mimetypes that are syntax highlighted in API Dash:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mimetype&lt;/th&gt; &#xA;   &lt;th&gt;Extension&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;application/json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Other mimetypes like &lt;code&gt;application/geo+json&lt;/code&gt;, &lt;code&gt;application/vcard+json&lt;/code&gt; that are based on &lt;code&gt;json&lt;/code&gt; are also supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;application/xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Other mimetypes like &lt;code&gt;application/xhtml+xml&lt;/code&gt;, &lt;code&gt;application/vcard+xml&lt;/code&gt; that are based on &lt;code&gt;xml&lt;/code&gt; are also supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text/xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.xml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;application/yaml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.yaml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Others - &lt;code&gt;application/x-yaml&lt;/code&gt; or &lt;code&gt;application/x-yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text/yaml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.yaml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Others - &lt;code&gt;text/yml&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;application/sql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.sql&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text/css&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.css&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text/html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Only syntax highlighting, no web preview.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text/javascript&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.js&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text/markdown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.md&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;What&#39;s new in v0.3.0?&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://raw.githubusercontent.com/foss42/apidash/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Provide Feedback, Report Bugs &amp;amp; Request New Features&lt;/h2&gt; &#xA;&lt;p&gt;Just click on the &lt;a href=&#34;https://github.com/foss42/apidash/issues&#34;&gt;Issue tab&lt;/a&gt; to raise a new issue in this repo.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute to API Dash&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to API Dash in any or all of the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foss42/apidash/discussions&#34;&gt;Ask a question&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foss42/apidash/issues/new/choose&#34;&gt;Submit a bug report&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foss42/apidash/issues/new/choose&#34;&gt;Request a new feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foss42/apidash/issues/new/choose&#34;&gt;Suggest ways to improve the developer experience of an existing feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add documentation&lt;/li&gt; &#xA; &lt;li&gt;To add a new feature, resolve an existing issue or add a new test to the project, check out our &lt;a href=&#34;https://raw.githubusercontent.com/foss42/apidash/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need Any Help?&lt;/h2&gt; &#xA;&lt;p&gt;In case you need any help with API Dash or are encountering any issue while running the tool, please feel free to drop by our &lt;a href=&#34;https://bit.ly/heyfoss&#34;&gt;Discord server&lt;/a&gt; and we can have a chat in the &lt;strong&gt;#foss&lt;/strong&gt; channel.&lt;/p&gt;</summary>
  </entry>
</feed>