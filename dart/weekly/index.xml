<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-15T01:42:36Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GoogleCloudPlatform/Open_Data_QnA</title>
    <updated>2024-09-15T01:42:36Z</updated>
    <id>tag:github.com,2024-09-15:/GoogleCloudPlatform/Open_Data_QnA</id>
    <link href="https://github.com/GoogleCloudPlatform/Open_Data_QnA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Open Data QnA python library enables you to chat with your databases by leveraging LLM Agents on Google Cloud. Open Data QnA enables a conversational approach to interacting with your data.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/utilities/imgs/aaie.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/utilities/imgs/aaie.png&#34; alt=&#34;aaie image&#34; width=&#34;auto&#34; height=&#34;150&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sites.google.com/corp/google.com/genai-solutions/home?authuser=0&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/utilities/imgs/opendataqna_logo.png&#34; alt=&#34;logo&#34; width=&#34;400&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Open Data QnA - Chat with your SQL Database&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34; &#34;&gt; &#xA; &lt;strong&gt;üö® Version 2.0.0 is now live! Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/changelog.md&#34;&gt;Release Notes&lt;/a&gt; for detailed information on updates and fixes. üö®&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ú® Overview&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Open Data QnA&lt;/strong&gt; python library enables you to chat with your databases by leveraging LLM Agents on Google Cloud.&lt;/p&gt; &#xA;&lt;p&gt;Open Data QnA enables a conversational approach to interacting with your data. Ask questions about your PostgreSQL or BigQuery databases in natural language and receive informative responses, without needing to write SQL. Open Data QnA leverages Large Language Models (LLMs) to bridge the gap between human language and database queries, streamlining data analysis and decision-making.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/utilities/imgs/Teaser.gif&#34; alt=&#34;Alt Text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conversational Querying with Multiturn Support:&lt;/strong&gt; Ask questions naturally, without requiring SQL knowledge and ask follow up questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Table Grouping:&lt;/strong&gt; Group tables under one usecase/user grouping name which can help filtering your large number tables for LLMs to understand about.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi Schema/Dataset Support:&lt;/strong&gt; You can group tables from different schemas/datasets for embedding and asking questions against.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt Customization and Additional Context:&lt;/strong&gt; The prompts that are being used are loaded from a yaml file and it also give you ability to add extra context as well&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL Generation:&lt;/strong&gt; Automatically generates SQL queries based on your questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Query Refinement:&lt;/strong&gt; Validates and debugs queries to ensure accuracy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Natural Language Responses:&lt;/strong&gt; DRun queries and present results in clear, easy-to-understand language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visualizations (Optional):&lt;/strong&gt; Explore data visually with generated charts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible:&lt;/strong&gt; Customize and integrate with your existing workflows(API, UI, Notebooks).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is built on a modular design and currently supports the following components:&lt;/p&gt; &#xA;&lt;h3&gt;Database Connectors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Google Cloud SQL for PostgreSQL&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Google BigQuery&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Google Firestore(for storing session logs)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Vector Stores&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PGVector on Google Cloud SQL for PostgreSQL&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BigQuery Vector Store&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Agents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;BuildSQLAgent:&lt;/strong&gt; An agent specialized in generating SQL queries for BigQuery or PostgreSQL databases. It analyzes user questions, available table schemas, and column descriptions to construct syntactically and semantically correct SQL queries, adapting its process based on the target database type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ValidateSQLAgent:&lt;/strong&gt; An agent that validates the syntax and semantic correctness of SQL queries. It uses a language model to analyze queries against a database schema and returns a JSON response indicating validity and potential errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DebugSQLAgent:&lt;/strong&gt; An agent designed to debug and refine SQL queries for BigQuery or PostgreSQL databases. It interacts with a chat-based language model to iteratively troubleshoot queries, using error messages to generate alternative, correct queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DescriptionAgent:&lt;/strong&gt; An agent specialized in generating descriptions for database tables and columns. It leverages a large language model to create concise and informative descriptions that aid in understanding data structures and facilitate SQL query generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EmbedderAgent:&lt;/strong&gt; An agent specialized in generating text embeddings using Large Language Models (LLMs). It supports direct interaction with Vertex AI&#39;s TextEmbeddingModel or uses LangChain&#39;s VertexAIEmbeddings for a simplified interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ResponseAgent:&lt;/strong&gt; An agent that generates natural language responses to user questions based on SQL query results. It acts as a data assistant, interpreting SQL results and transforming them into user-friendly answers using a language model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VisualizeAgent:&lt;/strong&gt; An agent that generates JavaScript code for Google Charts based on user questions and SQL results. It suggests suitable chart types and constructs the JavaScript code to create visualizations of the data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the library was formerly named Talk2Data. You may still find artifacts with the old naming in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;üìè Architecture&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/utilities/imgs/OpenDataQnA_architecture.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/utilities/imgs/OpenDataQnA_architecture.png&#34; alt=&#34;aaie image&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A detailed description of the Architecture can be found &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/architecture.md&#34;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt; in the docs.&lt;/p&gt; &#xA;&lt;h2&gt;üß¨ Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;Details on the Repository Structure can be found &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/repo_structure.md&#34;&gt;&lt;code&gt;here&lt;/code&gt;&lt;/a&gt; in the docs.&lt;/p&gt; &#xA;&lt;!-- üèÅ Getting Started: Quick Start   &#xA;-------------&#xA;**NOTE: THIS IS STILL v1 - UPDATING THE STANDALONE NOTEBOOK TO v2 IS WIP**&#xA;&#xA;**Quickstart with Open Data QnA: [Standalone BigQuery Notebook](/notebooks/(standalone)Run_OpenDataQnA.ipynb)**&#xA;&#xA;Copy both [Standalone BigQuery Notebook](/notebooks/(standalone)Run_OpenDataQnA.ipynb) and [pyproject.toml](/pyproject.toml)&#xA;&#xA;This notebook offers a streamlined way to experience the core functionality of Open Data QnA using BigQuery as both the data source and vector store. While it doesn&#39;t encompass the full flexibility of the repository setup, it&#39;s a perfect starting point to quickly test and explore the conversational querying capabilities of Open Data QnA with your own BigQuery datasets.  --&gt; &#xA;&lt;h2&gt;üèÅ Getting Started: Main Repository&lt;/h2&gt; &#xA;&lt;h3&gt;Clone the repository and switch to the correct directory&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:GoogleCloudPlatform/Open_Data_QnA.git&#xA;cd Open_Data_QnA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üöß &lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Make sure that Google Cloud CLI and Python are installed before moving ahead! You can refer to the link below for guidance&lt;/p&gt; &#xA;&lt;p&gt;Installation Guide: &lt;a href=&#34;https://cloud.google.com/sdk/docs/install&#34;&gt;https://cloud.google.com/sdk/docs/install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download Python: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;You can setup this solution with three approaches. Choose one based on your requirements:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A)&lt;/strong&gt; Using &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/#a-jupyter-notebook-based-approach&#34;&gt;Jupyter Notebooks&lt;/a&gt; (For better view at what is happening at each stage of the solution)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;B)&lt;/strong&gt; Using &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/#b-command-line-interface-cli-based-approach&#34;&gt;CLI&lt;/a&gt; (For ease of use and running with simple python commands, without the need to understand every step of the solution)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;C)&lt;/strong&gt; Using &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/#c-using-terraform-to-deploy-the-solution&#34;&gt;terraform deployment&lt;/a&gt; including your backend APIs with UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;A) Jupyter Notebook Based Approach&lt;/h3&gt; &#xA;&lt;h4&gt;üíª &lt;strong&gt;Install Code Dependencies (Create and setup venv)&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;strong&gt;All commands in this cell to be run on the terminal (typically Ctrl+Shift+`) where your notebooks are running&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Install the dependencies by running the poetry commands below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install poetry&#xA;pip uninstall poetry -y&#xA;pip install poetry --quiet&#xA;&#xA;#Run the poetry commands below to set up the environment&#xA;poetry lock #resolve dependecies (also auto create poetry venv if not exists)&#xA;poetry install --quiet #installs dependencies&#xA;poetry env info #Displays the evn just created and the path to it&#xA;&#xA;poetry shell #this command should activate your venv and you should see it enters into the venv&#xA;&#xA;##inside the activated venv shell []&#xA;&#xA;#If you are running on Worbench instance where the service account used has required permissions to run this solution you can skip the below gcloud auth commands and get to next kernel creation section&#xA;&#xA;gcloud auth login  # Use this or below command to authenticate&#xA;&#xA;gcloud auth application-default login&#xA;&#xA;gcloud services enable \&#xA;    serviceusage.googleapis.com \&#xA;    cloudresourcemanager.googleapis.com --project &amp;lt;&amp;lt;Enter Project Id&amp;gt;&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chose the relevant instructions based on where you are running the notebook&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For IDEs like Cloud Shell Editor, VS Code&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For IDEs adding Juypter Extensions will automatically give you option to change the kernel. If not, manually select the python interpreter in your IDE (The exact is shown in the above cell. Path would look like e.g. /home/admin_/opendata/.venv/bin/python or ~cache/user/opendataqna/.venv/bin/python)&lt;/p&gt; &#xA;&lt;p&gt;Proceed to the Step 1 below&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Jupyter Lab or Jupyter Environments on Workbench etc&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create Kernel for with the envrionment created&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install jupyter&#xA;&#xA;ipython kernel install --name &#34;openqna-venv&#34; --user &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restart your kernel or close the exsiting notebook and open again, you should now see the &#34;openqna-venv&#34; in the kernel drop down&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What did we do here?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created Application Default Credentials to use for the code&lt;/li&gt; &#xA; &lt;li&gt;Added venv to kernel to select for running the notebooks (For standalone Jupyter setups like Workbench etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1. Run the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/notebooks/1_Setup_OpenDataQnA.ipynb&#34;&gt;1_Setup_OpenDataQnA&lt;/a&gt; (Run Once for Initial Setup)&lt;/h4&gt; &#xA;&lt;p&gt;This notebook guides you through the setup and execution of the Open Data QnA application. It provides comprehensive instructions for setup the solution.&lt;/p&gt; &#xA;&lt;h4&gt;2. Run the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/notebooks/2_Run_OpenDataQnA.ipynb&#34;&gt;2_Run_OpenDataQnA&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This notebook guides you by reading the configuration you setup with &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/1_Setup_OpenDataQnA&#34;&gt;1_Setup_OpenDataQnA&lt;/a&gt; and running the pipeline to answer questions about your data.&lt;/p&gt; &#xA;&lt;h4&gt;3. &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/notebooks/3_LoadKnownGoodSQL.ipynb&#34;&gt;Loading Known Good SQL Examples&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In case you want to separately load Known Good SQLs please run this notebook once the config variables are setup in config.ini file. This can be run multiple times just to load the known good sql queries and create embeddings for it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;B) Command Line Interface (CLI) Based Approach&lt;/h3&gt; &#xA;&lt;h4&gt;1. Add Configuration values for the solution in &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/config.ini&#34;&gt;config.ini&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For setup we require details for vector store, source database etc. Edit the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/config.ini&#34;&gt;config.ini&lt;/a&gt; file and add values for the parameters based of below information.&lt;/p&gt; &#xA;&lt;p&gt;‚ÑπÔ∏è Follow the guidelines from the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/config_guide.md&#34;&gt;config guide document&lt;/a&gt; to populate your &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/config.ini&#34;&gt;config.ini&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sources to connect&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This solution lets you setup multiple data source at same time.&lt;/li&gt; &#xA; &lt;li&gt;You can group multiple tables from different datasets or schema into a grouping and provide the details&lt;/li&gt; &#xA; &lt;li&gt;If your dataset/schema has many tables and you want to run the solution against few you should specifically choose a group for that tables only&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Format for data_source_list.csv&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;source | user_grouping | schema | table&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;source&lt;/strong&gt; - Supported Data Sources. #Options: bigquery , cloudsql-pg&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;user_grouping&lt;/strong&gt; - Logical grouping or use case name for tables from same or different schema/dataset. When left black it default to the schema value in the next column&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;schema&lt;/strong&gt; - schema name for postgres or dataset name in bigquery&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;table&lt;/strong&gt; - name of the tables to run the solutions against. Leave this column blank after filling schema/dataset if you want to run solution for whole dataset/schema&lt;/p&gt; &#xA;&lt;p&gt;Update the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/scripts/data_source_list.csv&#34;&gt;data_source_list.csv&lt;/a&gt; according for your requirement.&lt;/p&gt; &#xA;&lt;p&gt;Note that the source details filled in the csv should have already be present. If not please use the Copy Notebooks if you want the demo source setup.&lt;/p&gt; &#xA;&lt;p&gt;Enabled Data Sources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PostgreSQL on Google Cloud SQL (Copy Sample Data: &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/0_CopyDataToCloudSqlPG.ipynb&#34;&gt;0_CopyDataToCloudSqlPG.ipynb&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;BigQuery (Copy Sample Data: &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/0_CopyDataToBigQuery.ipynb&#34;&gt;0_CopyDataToBigQuery.ipynb&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Creating Virtual Environment and Install Dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install poetry --quiet&#xA;poetry lock&#xA;poetry install --quiet&#xA;poetry env info&#xA;poetry shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Authenticate your credentials&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcloud auth login&#xA;&#xA;or &#xA;&#xA;gcloud auth application-default login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcloud services enable \&#xA;    serviceusage.googleapis.com \&#xA;    cloudresourcemanager.googleapis.com --project &amp;lt;&amp;lt;Enter Project Id&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcloud auth application-default set-quota-project &amp;lt;&amp;lt;Enter Project Id for using resources&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable APIs for the solution setup&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcloud services enable \&#xA;  cloudapis.googleapis.com \&#xA;  compute.googleapis.com \&#xA;  iam.googleapis.com \&#xA;  run.googleapis.com \&#xA;  sqladmin.googleapis.com \&#xA;  aiplatform.googleapis.com \&#xA;  bigquery.googleapis.com \&#xA;  firestore.googleapis.com --project &amp;lt;&amp;lt;Enter Project Id&amp;gt;&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Run &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/env_setup.py&#34;&gt;env_setup.py&lt;/a&gt; to create vector store based on the configuration you did in Step 1&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;python env_setup.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Run &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/opendataqna.py&#34;&gt;opendataqna.py&lt;/a&gt; to run the pipeline you just setup&lt;/h4&gt; &#xA;&lt;p&gt;The Open Data QnA SQL Generation tool can be conveniently used from your terminal or command prompt using a simple CLI interface. Here&#39;s how:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python opendataqna.py --session_id &#34;122133131f--ade-eweq&#34; --user_question &#34;What is most 5 common genres we have?&#34; --user_grouping &#34;MovieExplorer-bigquery&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;session_id&lt;/em&gt; : Keep this unique unique same for follow up questions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;user_question&lt;/em&gt; : Enter your question in string&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;user_grouping&lt;/em&gt; : Enter the BQ_DATASET_NAME for BigQuery sources or PG_SCHEMA for PostgreSQL sources (refer your &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/scripts/data_source_list.csv&#34;&gt;data_source_list.csv&lt;/a&gt; file)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional Parameters&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can customize the pipeline&#39;s behavior using optional parameters. Here are some common examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Enable the SQL debugger:&#xA;python opendataqna.py --session_id=&#34;...&#34; --user_question &#34;...&#34; --user_grouping &#34;...&#34; --run_debugger&#xA;&#xA;# Execute the final generated SQL:&#xA;python opendataqna.py --session_id=&#34;...&#34; --user_question &#34;...&#34; --user_grouping &#34;...&#34; --execute_final_sql&#xA;&#xA;# Change the number of debugging rounds:&#xA;python opendataqna.py --session_id=&#34;...&#34; --user_question &#34;...&#34; --user_grouping &#34;...&#34; --debugging_rounds 5&#xA;&#xA;# Adjust similarity thresholds:&#xA;python opendataqna.py --session_id=&#34;...&#34; --user_question &#34;...&#34; --user_grouping &#34;...&#34; --table_similarity_threshold 0.25 --column_similarity_threshold 0.4&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find a full list of available options and their descriptions by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python opendataqna.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C) Using Terraform to deploy the solution&lt;/h3&gt; &#xA;&lt;p&gt;The provided terraform streamlines the setup of this solution and serves as a blueprint for deployment. The script provides a one-click, one-time deployment option. However, it doesn&#39;t include CI/CD capabilities and is intended solely for initial setup.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Current version of the Terraform Google Cloud provider does not support deployment of a few resources, this solution uses null_resource to create those resources using Google Cloud SDK.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Prior to executing terraform, ensure that the below mentioned steps have been completed.&lt;/p&gt; &#xA;&lt;h4&gt;Data Sources Set Up&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Source data should already be available. If you do not have readily available source data, use the notebooks &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/notebooks/0_CopyDataToBigQuery.ipynb&#34;&gt;0_CopyDataToBigQuery.ipynb&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/notebooks/0_CopyDataToCloudSqlPG.ipynb&#34;&gt;0_CopyDataToCloudSqlPG.ipynb&lt;/a&gt; based on the preferred source to populate sample data.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/scripts/data_source_list.csv&#34;&gt;data_source_list.csv&lt;/a&gt; is populated with the list of datasources to be used in this solution. Terraform will take care of creating the embeddings in the destination. Use &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/scripts/data_source_list_sample.csv&#34;&gt;data_source_list_sample.csv&lt;/a&gt; to fill the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/scripts/data_source_list.csv&#34;&gt;data_source_list.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want to use known good sqls for few shot prompting, ensure that the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/scripts/known_good_sql.csv&#34;&gt;known_good_sql.csv&lt;/a&gt; is populated with the required data. Terraform will take care of creating the embeddings in the destination.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Enable Firebase&lt;/h4&gt; &#xA;&lt;p&gt;Firebase will be used to host the frontend of the application.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;https://console.firebase.google.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select add project and load your Google Cloud Platform project&lt;/li&gt; &#xA; &lt;li&gt;Add Firebase to one of your existing Google Cloud projects&lt;/li&gt; &#xA; &lt;li&gt;Confirm Firebase billing plan&lt;/li&gt; &#xA; &lt;li&gt;Continue and complete&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Terraform deployment&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; Terraform apply command for this application uses gcloud config to fetch &amp;amp; pass the set project id to the scripts. Please ensure that gcloud config has been set to your intended project id before proceeding.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; The Terraform scripts require specific IAM permissions to function correctly. The user needs either the broad &lt;code&gt;roles/resourcemanager.projectIamAdmin&lt;/code&gt; role or a custom role with tailored permissions to manage IAM policies and roles. Additionally, one script TEMPORARILY disables Domain Restricted Sharing Org Policies to enable the creation of a public endpoint. This requires the user to also have the &lt;code&gt;roles/orgpolicy.policyAdmin&lt;/code&gt; role.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://developer.hashicorp.com/terraform/install&#34;&gt;terraform 1.7 or higher&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[OPTIONAL] Update default values of variables in &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/terraform/variables.tf&#34;&gt;variables.tf&lt;/a&gt; according to your preferences. You can find the description for each variable inside the file. This file will be used by terraform to get information about the resources it needs to deploy. If you do not update these, terraform will use the already specified default values in the file.&lt;/li&gt; &#xA; &lt;li&gt;Move to the terraform directory in the terminal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Open_Data_QnA/terraform&#xA;&#xA;#If you are running this outside Cloud Shell you need to set up your Google Cloud SDK Credentials&#xA;&#xA;gcloud config set project &amp;lt;your_project_id&amp;gt;&#xA;gcloud auth application-default set-quota-project &amp;lt;your_project_id&amp;gt;&#xA;&#xA;gcloud services enable \&#xA;    serviceusage.googleapis.com \&#xA;    cloudresourcemanager.googleapis.com --project &amp;lt;&amp;lt;Enter Project Id&amp;gt;&amp;gt;&#xA;&#xA;sh ./scripts/deploy-all.sh&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will perform the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run terraform scripts&lt;/strong&gt; - These terraform scripts will generate all the GCP resources and configuration files required for the frontend &amp;amp; backend. It will also generate embeddings and store it in the destination vector db.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deploy cloud run backend service with latest backend code&lt;/strong&gt; - The terraform in the previous step uses a dummy container image to deploy the initial version of cloud run service. This is the step where the actual backend code gets deployed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deploy frontend app&lt;/strong&gt; - All the config files, web app etc required to create the frontend are deployed via terraform. However, the actual UI deployment takes place in this step.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;After deployment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Auth Provider&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You need to enable at least one authentication provider in Firebase, you can enable it using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://console.firebase.google.com/project/your_project_id/authentication/providers&#34;&gt;https://console.firebase.google.com/project/your_project_id/authentication/providers&lt;/a&gt; (change the &lt;code&gt;your_project_id&lt;/code&gt; value)&lt;/li&gt; &#xA; &lt;li&gt;Click on Get Started (if needed)&lt;/li&gt; &#xA; &lt;li&gt;Select Google and enable it&lt;/li&gt; &#xA; &lt;li&gt;Set the name for the project and support email for project&lt;/li&gt; &#xA; &lt;li&gt;Save&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This should deploy you end to end solution in the project with firebase web url&lt;/p&gt; &#xA;&lt;p&gt;For detailed steps and known issues refer to README.md under &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/terraform/&#34;&gt;&lt;code&gt;/terraform&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Build a angular based frontend for this solution&lt;/h2&gt; &#xA;&lt;p&gt;Deploy backend apis for the solution, refer to the README.md under &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/backend-apis/&#34;&gt;&lt;code&gt;/backend-apis&lt;/code&gt;&lt;/a&gt;. This APIs are designed with work with the frontend and provide access to run the solution.&lt;/p&gt; &#xA;&lt;p&gt;Once the backend APIs deployed successfully deploy the frontend for the solution, refer to the README.md under &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/frontend/&#34;&gt;&lt;code&gt;/frontend&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìó FAQs and Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;If you successfully set up the solution accelerator and want to start optimizing to your needs, you can follow the tips in the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/best_practices.md&#34;&gt;&lt;code&gt;Best Practice doc&lt;/code&gt;&lt;/a&gt;. Additionally, if you stumble across any problems, take a look into the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/faq.md&#34;&gt;&lt;code&gt;FAQ&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If neither of these resources helps, feel free to reach out to us directly by raising an Issue.&lt;/p&gt; &#xA;&lt;h2&gt;üßπ CleanUp Resources&lt;/h2&gt; &#xA;&lt;p&gt;To clean up the resources provisioned in this solution, use commands below to remove them using gcloud/bq:&lt;/p&gt; &#xA;&lt;p&gt;For cloudsql-pgvector as vector store : &lt;a href=&#34;https://cloud.google.com/sql/docs/mysql/delete-instance#delete-cloud-sql-instance&#34;&gt;Delete SQL Instance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcloud sql instances delete &amp;lt;CloudSQL Instance Name&amp;gt; -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delete BigQuery Dataset Created for Logs and Vector Store : &lt;a href=&#34;https://cloud.google.com/bigquery/docs/reference/bq-cli-reference#bq_rm&#34;&gt;Remove BQ Dataset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bq rm -r -f -d &amp;lt;BigQuery Dataset Name for OpenDataQnA&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(For Backend APIs)Remove the Cloud Run service : &lt;a href=&#34;https://cloud.google.com/run/docs/managing/services#delete&#34;&gt;Delete Service&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gcloud run services delete &amp;lt;Cloud Run Service Name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For frontend, based on firebase: &lt;a href=&#34;https://support.google.com/firebase/answer/7047853?sjid=6757651181596811904-AP#how-to-remove&#34;&gt;Remove the firebase app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/Open_Data_QnA&#34;&gt;Open Data QnA Source Code (GitHub)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/notebooks&#34;&gt;Open Data QnA usage notebooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/architecture.md&#34;&gt;&lt;code&gt;Architecture&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/faq.md&#34;&gt;&lt;code&gt;FAQ&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/docs/best_practices.md&#34;&gt;&lt;code&gt;Best Practice doc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöß Quotas and limits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/bigquery/quotas&#34;&gt;BigQuery quotas&lt;/a&gt; including hardware, software, and network components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/gemini/docs/quotas&#34;&gt;Gemini quotas&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ü™™ License&lt;/h2&gt; &#xA;&lt;p&gt;Open Data QnA is distributed with the &lt;a href=&#34;https://raw.githubusercontent.com/GoogleCloudPlatform/Open_Data_QnA/main/LICENSE&#34;&gt;Apache-2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also contains code derived from the following third-party packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üß™ Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This repository provides an open-source solution accelerator designed to streamline your development process. Please be aware that all resources associated with this accelerator will be deployed within your own Google Cloud Platform (GCP) instances.&lt;/p&gt; &#xA;&lt;p&gt;It is imperative that you thoroughly test all components and configurations in a non-production environment before integrating any part of this accelerator with your production data or systems.&lt;/p&gt; &#xA;&lt;p&gt;While we strive to provide a secure and reliable solution, we cannot be held responsible for any data loss, service disruptions, or other issues that may arise from the use of this accelerator.&lt;/p&gt; &#xA;&lt;p&gt;By utilizing this repository, you acknowledge that you are solely responsible for the deployment, management, and security of the resources deployed within your GCP environment.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter any issues or have concerns about potential risks, please refrain from using this accelerator in a production setting.&lt;/p&gt; &#xA;&lt;p&gt;We encourage responsible and informed use of this open-source solution.&lt;/p&gt; &#xA;&lt;h2&gt;üôã Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or if you found any problems with this repository, please report through GitHub issues.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chipweinberger/flutter_blue_plus</title>
    <updated>2024-09-15T01:42:36Z</updated>
    <id>tag:github.com,2024-09-15:/chipweinberger/flutter_blue_plus</id>
    <link href="https://github.com/chipweinberger/flutter_blue_plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter plugin for connecting and communicationg with Bluetooth Low Energy devices, on Android, iOS, macOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_blue_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_blue_plus.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/634853295160033301.svg?style=flat-square&amp;amp;colorB=758ED3&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;FlutterBlue&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/raw/master/site/flutterblueplus.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this plugin is continuous work from &lt;a href=&#34;https://github.com/pauldemarco/flutter_blue&#34;&gt;FlutterBlue&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Migrating from &lt;a href=&#34;https://github.com/pauldemarco/flutter_blue&#34;&gt;FlutterBlue&lt;/a&gt;? See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/MIGRATION.md&#34;&gt;Migration Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#using-ble-in-app-background&#34;&gt;Using Ble in App Background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#mocking&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#common-problems&#34;&gt;Common Problems&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus is a Bluetooth Low Energy plugin for &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It supports BLE Central Role only (most common).&lt;/p&gt; &#xA;&lt;p&gt;If you need BLE Peripheral Role, you should check out &lt;a href=&#34;https://pub.dev/packages/flutter_ble_peripheral&#34;&gt;FlutterBlePeripheral&lt;/a&gt;, or &lt;a href=&#34;https://pub.dev/packages/bluetooth_low_energy&#34;&gt;bluetooth_low_energy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to Bluetooth, you should start by reading BLE tutorials.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://novelbits.io/bluetooth-low-energy-ble-complete-guide/&#34;&gt;Novel Bits BLE Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.allaboutcircuits.com/technical-articles/exploring-the-basics-of-bluetooth-low-energy-a-beginners-guide-to-ble/&#34;&gt;All About Circuits BLE Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://embetronicx.com/tutorials/tech_devices/bluetooth-low-energy-ble-introduction-part-1/&#34;&gt;Embetronicx BLE Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ùó Bluetooth Classic is not supported ‚ùó&lt;/h2&gt; &#xA;&lt;p&gt;i.e. &lt;strong&gt;Arduino HC-05 &amp;amp; HC-06,&lt;/strong&gt; speakers, headphones, mice, keyboards, gamepads, and more are &lt;strong&gt;not&lt;/strong&gt; supported. These all use Bluetooth Classic.&lt;/p&gt; &#xA;&lt;p&gt;Also, iBeacons are &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; supported on iOS. Apple requires you to use CoreLocation.&lt;/p&gt; &#xA;&lt;h2&gt;Cross-Platform Bluetooth Low Energy&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus supports nearly every feature on all supported platforms: iOS, macOS, Android.&lt;/p&gt; &#xA;&lt;h2&gt;No Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus has zero dependencies besides Flutter, Android, iOS, and macOS themselves.&lt;/p&gt; &#xA;&lt;p&gt;This makes FlutterBluePlus very stable, and easy to maintain.&lt;/p&gt; &#xA;&lt;h2&gt;Windows Support&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://pub.dev/packages/flutter_blue_plus_windows&#34;&gt;flutter_blue_plus_windows&lt;/a&gt; if you need Windows support.&lt;/p&gt; &#xA;&lt;p&gt;It is maintained by @chan150.&lt;/p&gt; &#xA;&lt;h2&gt;Other BLE Libraries&lt;/h2&gt; &#xA;&lt;p&gt;These other libraries are worth considering. They support more platforms than FBP, but have fewer features and are less user-friendly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/bluetooth_low_energy&#34;&gt;bluetooth_low_energy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/universal_ble&#34;&gt;universal_ble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/quick_blue&#34;&gt;quick_blue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚≠ê Stars ‚≠ê&lt;/h2&gt; &#xA;&lt;p&gt;Please star this repo &amp;amp; on &lt;a href=&#34;https://pub.dev/packages/flutter_blue_plus&#34;&gt;pub.dev&lt;/a&gt;. We all benefit from having a larger community.&lt;/p&gt; &#xA;&lt;h2&gt;Discord üí¨&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/634853295160033301.svg?style=flat-square&amp;amp;colorB=758ED3&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; There is a community Discord server. (&lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;Link&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus has a beautiful example app, useful to debug issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ./example&#xA;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;FlutterBlue&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/raw/master/site/example.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;üî• Error Handling üî•&lt;/h3&gt; &#xA;&lt;p&gt;Flutter Blue Plus takes error handling seriously.&lt;/p&gt; &#xA;&lt;p&gt;Every error returned by the native platform is checked and thrown as an exception where appropriate. See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#reference&#34;&gt;Reference&lt;/a&gt; for a list of throwable functions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Streams:&lt;/strong&gt; Streams returned by FlutterBluePlus never emit any errors and never close. There&#39;s no need to handle &lt;code&gt;onError&lt;/code&gt; or &lt;code&gt;onDone&lt;/code&gt; for &lt;code&gt;stream.listen(...)&lt;/code&gt;. The one exception is &lt;code&gt;FlutterBluePlus.scanResults&lt;/code&gt;, which you should handle &lt;code&gt;onError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Set Log Level&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// if your terminal doesn&#39;t support color you&#39;ll see annoying logs like `\x1B[1;35m`&#xA;FlutterBluePlus.setLogLevel(LogLevel.verbose, color:false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;LogLevel.verbose&lt;/code&gt; shows &lt;em&gt;all&lt;/em&gt; data in and out.&lt;/p&gt; &#xA;&lt;p&gt;‚ö´ = function name&lt;/p&gt; &#xA;&lt;p&gt;üü£ = args to platform&lt;/p&gt; &#xA;&lt;p&gt;üü° = data from platform&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screenshot 2023-07-27 at 4 53 08 AM&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/assets/1863934/ee37d702-2752-4402-bf26-fc661728c1c3&#34;&gt; &#xA;&lt;h3&gt;Bluetooth On &amp;amp; Off&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On iOS, a &#34;&lt;em&gt;This app would like to use Bluetooth&lt;/em&gt;&#34; system dialogue appears on first call to any FlutterBluePlus method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// first, check if bluetooth is supported by your hardware&#xA;// Note: The platform is initialized on the first call to any FlutterBluePlus method.&#xA;if (await FlutterBluePlus.isSupported == false) {&#xA;    print(&#34;Bluetooth not supported by this device&#34;);&#xA;    return;&#xA;}&#xA;&#xA;// handle bluetooth on &amp;amp; off&#xA;// note: for iOS the initial state is typically BluetoothAdapterState.unknown&#xA;// note: if you have permissions issues you will get stuck at BluetoothAdapterState.unauthorized&#xA;var subscription = FlutterBluePlus.adapterState.listen((BluetoothAdapterState state) {&#xA;    print(state);&#xA;    if (state == BluetoothAdapterState.on) {&#xA;        // usually start scanning, connecting, etc&#xA;    } else {&#xA;        // show an error to the user, etc&#xA;    }&#xA;});&#xA;&#xA;// turn on bluetooth ourself if we can&#xA;// for iOS, the user controls bluetooth enable/disable&#xA;if (Platform.isAndroid) {&#xA;    await FlutterBluePlus.turnOn();&#xA;}&#xA;&#xA;// cancel to prevent duplicate listeners&#xA;subscription.cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan for devices&lt;/h3&gt; &#xA;&lt;p&gt;If your device is not found, see &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#common-problems&#34;&gt;Common Problems&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to set scan filters to reduce main thread &amp;amp; platform channel usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// listen to scan results&#xA;// Note: `onScanResults` only returns live scan results, i.e. during scanning. Use&#xA;//  `scanResults` if you want live scan results *or* the results from a previous scan.&#xA;var subscription = FlutterBluePlus.onScanResults.listen((results) {&#xA;        if (results.isNotEmpty) {&#xA;            ScanResult r = results.last; // the most recently found device&#xA;            print(&#39;${r.device.remoteId}: &#34;${r.advertisementData.advName}&#34; found!&#39;);&#xA;        }&#xA;    },&#xA;    onError: (e) =&amp;gt; print(e),&#xA;);&#xA;&#xA;// cleanup: cancel subscription when scanning stops&#xA;FlutterBluePlus.cancelWhenScanComplete(subscription);&#xA;&#xA;// Wait for Bluetooth enabled &amp;amp; permission granted&#xA;// In your real app you should use `FlutterBluePlus.adapterState.listen` to handle all states&#xA;await FlutterBluePlus.adapterState.where((val) =&amp;gt; val == BluetoothAdapterState.on).first;&#xA;&#xA;// Start scanning w/ timeout&#xA;// Optional: use `stopScan()` as an alternative to timeout&#xA;await FlutterBluePlus.startScan(&#xA;  withServices:[Guid(&#34;180D&#34;)], // match any of the specified services&#xA;  withNames:[&#34;Bluno&#34;], // *or* any of the specified names&#xA;  timeout: Duration(seconds:15));&#xA;&#xA;// wait for scanning to stop&#xA;await FlutterBluePlus.isScanning.where((val) =&amp;gt; val == false).first;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to a device&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// listen for disconnection&#xA;var subscription = device.connectionState.listen((BluetoothConnectionState state) async {&#xA;    if (state == BluetoothConnectionState.disconnected) {&#xA;        // 1. typically, start a periodic timer that tries to &#xA;        //    reconnect, or just call connect() again right now&#xA;        // 2. you must always re-discover services after disconnection!&#xA;        print(&#34;${device.disconnectReason?.code} ${device.disconnectReason?.description}&#34;);&#xA;    }&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;//   - [delayed] This option is only meant for `connectionState` subscriptions.  &#xA;//     When `true`, we cancel after a small delay. This ensures the `connectionState` &#xA;//     listener receives the `disconnected` event.&#xA;//   - [next] if true, the the stream will be canceled only on the *next* disconnection,&#xA;//     not the current disconnection. This is useful if you setup your subscriptions&#xA;//     before you connect.&#xA;device.cancelWhenDisconnected(subscription, delayed:true, next:true);&#xA;&#xA;// Connect to the device&#xA;await device.connect();&#xA;&#xA;// Disconnect from device&#xA;await device.disconnect();&#xA;&#xA;// cancel to prevent duplicate listeners&#xA;subscription.cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auto Connect&lt;/h3&gt; &#xA;&lt;p&gt;Connects whenever your device is found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// enable auto connect&#xA;//  - note: autoConnect is incompatible with mtu argument, so you must call requestMtu yourself&#xA;await device.connect(autoConnect:true, mtu:null)&#xA;&#xA;// wait until connection&#xA;//  - when using autoConnect, connect() always returns immediately, so we must&#xA;//    explicity listen to `device.connectionState` to know when connection occurs &#xA;await device.connectionState.where((val) =&amp;gt; val == BluetoothConnectionState.connected).first;&#xA;&#xA;// disable auto connect&#xA;await device.disconnect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Save Device&lt;/h3&gt; &#xA;&lt;p&gt;To save a device between app restarts, just write the &lt;code&gt;remoteId&lt;/code&gt; to a file.&lt;/p&gt; &#xA;&lt;p&gt;Now you can connect without needing to scan again, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final String remoteId = await File(&#39;/remoteId.txt&#39;).readAsString();&#xA;var device = BluetoothDevice.fromId(remoteId);&#xA;// AutoConnect is convenient because it does not &#34;time out&#34;&#xA;// even if the device is not available / turned off.&#xA;await device.connect(autoConnect: true);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MTU&lt;/h3&gt; &#xA;&lt;p&gt;On Android, we request an mtu of 512 by default during connection (see: &lt;code&gt;connect&lt;/code&gt; function arguments).&lt;/p&gt; &#xA;&lt;p&gt;On iOS &amp;amp; macOS, the mtu is negotiated automatically, typically 135 to 255.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = device.mtu.listen((int mtu) {&#xA;    // iOS: initial value is always 23, but iOS will quickly negotiate a higher value&#xA;    print(&#34;mtu $mtu&#34;);&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;// You can also manually change the mtu yourself.&#xA;if (Platform.isAndroid) {&#xA;    await device.requestMtu(512);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discover services&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Note: You must call discoverServices after every re-connection!&#xA;List&amp;lt;BluetoothService&amp;gt; services = await device.discoverServices();&#xA;services.forEach((service) {&#xA;    // do something with service&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Characteristics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Reads all characteristics&#xA;var characteristics = service.characteristics;&#xA;for(BluetoothCharacteristic c in characteristics) {&#xA;    if (c.properties.read) {&#xA;        List&amp;lt;int&amp;gt; value = await c.read();&#xA;        print(value);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Characteristic&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Writes to a characteristic&#xA;await c.write([0x12, 0x34]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;allowLongWrite&lt;/strong&gt;: To write large characteristics (up to 512 bytes) regardless of mtu, use &lt;code&gt;allowLongWrite&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// allowLongWrite should be used with caution. &#xA;///   1. it can only be used *with* response to avoid data loss&#xA;///   2. the peripheral device must support the &#39;long write&#39; ble protocol.&#xA;///   3. Interrupted transfers can leave the characteristic in a partially written state&#xA;///   4. If the mtu is small, it is very very slow.&#xA;await c.write(data, allowLongWrite:true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;splitWrite&lt;/strong&gt;: To write lots of data (unlimited), you can define the &lt;code&gt;splitWrite&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:math&#39;;&#xA;// split write should be used with caution.&#xA;//    1. due to splitting, `characteristic.read()` will return partial data.&#xA;//    2. it can only be used *with* response to avoid data loss&#xA;//    3. The characteristic must be designed to support split data&#xA;extension splitWrite on BluetoothCharacteristic {&#xA;  Future&amp;lt;void&amp;gt; splitWrite(List&amp;lt;int&amp;gt; value, {int timeout = 15}) async {&#xA;    int chunk = min(device.mtuNow - 3, 512); // 3 bytes BLE overhead, 512 bytes max&#xA;    for (int i = 0; i &amp;lt; value.length; i += chunk) {&#xA;      List&amp;lt;int&amp;gt; subvalue = value.sublist(i, min(i + chunk, value.length));&#xA;      await write(subvalue, withoutResponse:false, timeout: timeout);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subscribe to a characteristic&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;onValueReceived&lt;/code&gt; is never called, see &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#common-problems&#34;&gt;Common Problems&lt;/a&gt; in the README.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = characteristic.onValueReceived.listen((value) {&#xA;    // onValueReceived is updated:&#xA;    //   - anytime read() is called&#xA;    //   - anytime a notification arrives (if subscribed)&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;// subscribe&#xA;// Note: If a characteristic supports both **notifications** and **indications**,&#xA;// it will default to **notifications**. This matches how CoreBluetooth works on iOS.&#xA;await characteristic.setNotifyValue(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Last Value Stream&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;lastValueStream&lt;/code&gt; is an alternative to &lt;code&gt;onValueReceived&lt;/code&gt;. It emits a value any time the characteristic changes, &lt;strong&gt;including writes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is very convenient for simple characteristics that support both WRITE and READ (and/or NOTIFY). &lt;strong&gt;e.g.&lt;/strong&gt; a &#34;light switch toggle&#34; characteristic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = characteristic.lastValueStream.listen((value) {&#xA;    // lastValueStream` is updated:&#xA;    //   - anytime read() is called&#xA;    //   - anytime write() is called&#xA;    //   - anytime a notification arrives (if subscribed)&#xA;    //   - also when first listened to, it re-emits the last value for convenience.&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;// enable notifications&#xA;await characteristic.setNotifyValue(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read and write descriptors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Reads all descriptors&#xA;var descriptors = characteristic.descriptors;&#xA;for(BluetoothDescriptor d in descriptors) {&#xA;    List&amp;lt;int&amp;gt; value = await d.read();&#xA;    print(value);&#xA;}&#xA;&#xA;// Writes to a descriptor&#xA;await d.write([0x12, 0x34])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Services Changed Characteristic&lt;/h3&gt; &#xA;&lt;p&gt;FlutterBluePlus automatically listens to the Services Changed Characteristic (0x2A05)&lt;/p&gt; &#xA;&lt;p&gt;In FlutterBluePlus, we call it &lt;code&gt;onServicesReset&lt;/code&gt; because you must re-discover services.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// - uses the GAP Services Changed characteristic (0x2A05)&#xA;// - you must call discoverServices() again&#xA;device.onServicesReset.listen(() async {&#xA;    print(&#34;Services Reset&#34;);&#xA;    await device.discoverServices();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Connected Devices&lt;/h3&gt; &#xA;&lt;p&gt;Get devices currently connected to your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;BluetoothDevice&amp;gt; devs = FlutterBluePlus.connectedDevices;&#xA;for (var d in devs) {&#xA;    print(d);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get System Devices&lt;/h3&gt; &#xA;&lt;p&gt;Get devices connected to the system by &lt;em&gt;any&lt;/em&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you must connect &lt;em&gt;your app&lt;/em&gt; to them before you can communicate with them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;BluetoothDevice&amp;gt; devs = await FlutterBluePlus.systemDevices;&#xA;for (var d in devs) {&#xA;    await d.connect(); // Must connect *our* app to the device&#xA;    await d.discoverServices();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Bond (Android Only)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; calling this is usually not necessary!! The platform will do it automatically.&lt;/p&gt; &#xA;&lt;p&gt;However, you can force the popup to show sooner.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final bsSubscription = device.bondState.listen((value) {&#xA;    print(&#34;$value prev:{$device.prevBondState}&#34;);&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(bsSubscription);&#xA;&#xA;// Force the bonding popup to show now (Android Only) &#xA;await device.createBond();&#xA;&#xA;// remove bond&#xA;await device.removeBond();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Events API&lt;/h3&gt; &#xA;&lt;p&gt;Access streams from all devices simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;There are streams for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;events.onConnectionStateChanged&lt;/li&gt; &#xA; &lt;li&gt;events.onMtuChanged&lt;/li&gt; &#xA; &lt;li&gt;events.onReadRssi&lt;/li&gt; &#xA; &lt;li&gt;events.onServicesReset&lt;/li&gt; &#xA; &lt;li&gt;events.onDiscoveredServices&lt;/li&gt; &#xA; &lt;li&gt;events.onCharacteristicReceived&lt;/li&gt; &#xA; &lt;li&gt;events.onCharacteristicWritten&lt;/li&gt; &#xA; &lt;li&gt;events.onDescriptorRead&lt;/li&gt; &#xA; &lt;li&gt;events.onDescriptorWritten&lt;/li&gt; &#xA; &lt;li&gt;events.onNameChanged (iOS Only)&lt;/li&gt; &#xA; &lt;li&gt;events.onBondStateChanged (Android Only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// listen to *any device* connection state changes &#xA;FlutterBluePlus.events.onConnectionStateChanged.listen((event)) {&#xA;    print(&#39;${event.device} ${event.connectionState}&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mocking&lt;/h2&gt; &#xA;&lt;p&gt;To mock &lt;code&gt;FlutterBluePlus&lt;/code&gt; for development, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/MOCKING.md&#34;&gt;Mocking Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Change the minSdkVersion for Android&lt;/h3&gt; &#xA;&lt;p&gt;flutter_blue_plus is compatible only from version 21 of Android SDK so you should change this in &lt;strong&gt;android/app/build.gradle&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;android {&#xA;  defaultConfig {&#xA;     minSdkVersion: 21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for Android (No Location)&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;android/app/src/main/AndroidManifest.xml&lt;/strong&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Tell Google Play Store that your app uses Bluetooth LE&#xA;     Set android:required=&#34;true&#34; if bluetooth is necessary --&amp;gt;&#xA;&amp;lt;uses-feature android:name=&#34;android.hardware.bluetooth_le&#34; android:required=&#34;false&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- New Bluetooth permissions in Android 12&#xA;https://developer.android.com/about/versions/12/features/bluetooth-permissions --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34; android:usesPermissionFlags=&#34;neverForLocation&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 11 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADMIN&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; android:maxSdkVersion=&#34;30&#34;/&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 9 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; android:maxSdkVersion=&#34;28&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for Android (With Fine Location)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use Bluetooth to determine location, or support iBeacons.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;android/app/src/main/AndroidManifest.xml&lt;/strong&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Tell Google Play Store that your app uses Bluetooth LE&#xA;     Set android:required=&#34;true&#34; if bluetooth is necessary --&amp;gt;&#xA;&amp;lt;uses-feature android:name=&#34;android.hardware.bluetooth_le&#34; android:required=&#34;false&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- New Bluetooth permissions in Android 12&#xA;https://developer.android.com/about/versions/12/features/bluetooth-permissions --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34;/&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 11 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADMIN&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 9 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; android:maxSdkVersion=&#34;28&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And set &lt;strong&gt;androidUsesFineLocation&lt;/strong&gt; when scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Start scanning&#xA;flutterBlue.startScan(timeout: Duration(seconds: 4), androidUsesFineLocation: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android Proguard&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line in your &lt;code&gt;project/android/app/proguard-rules.pro&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.lib.flutter_blue_plus.* { *; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to avoid seeing the following kind errors in your &lt;code&gt;release&lt;/code&gt; builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PlatformException(startScan, Field androidScanMode_ for m0.e0 not found. Known fields are&#xA; [private int m0.e0.q, private b3.b0$i m0.e0.r, private boolean m0.e0.s, private static final m0.e0 m0.e0.t,&#xA; private static volatile b3.a1 m0.e0.u], java.lang.RuntimeException: Field androidScanMode_ for m0.e0 not found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for iOS&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;ios/Runner/Info.plist&lt;/strong&gt; let‚Äôs add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSBluetoothAlwaysUsageDescription&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;This app needs Bluetooth to function&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For location permissions on iOS see more at: &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services&#34;&gt;https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add permissions for macOS&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have granted access to the Bluetooth hardware:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Xcode -&amp;gt; Runners -&amp;gt; Targets -&amp;gt; Runner-&amp;gt; Signing &amp;amp; Capabilities -&amp;gt; App Sandbox -&amp;gt; Hardware -&amp;gt; Enable Bluetooth&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;528&#34; alt=&#34;Screenshot 2023-12-11 at 10 32 04 AM&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/assets/1863934/554079ef-4627-4dfc-97e3-1f07f84a0f3c&#34;&gt; &#xA;&lt;h2&gt;Using Ble in App Background&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is an advanced use case&lt;/strong&gt;. FlutterBluePlus does not support everything. You may have to fork it. PRs are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html&#34;&gt;https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Info.plist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;UIBackgroundModes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;string&amp;gt;bluetooth-central&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this key-value pair is included in the app‚Äôs Info.plist file, the system wakes up your app to process ble &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;subscription&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;p&gt;To wake up your app even after it is killed by the OS, set the &lt;code&gt;restoreState&lt;/code&gt; option to true &lt;strong&gt;before&lt;/strong&gt; starting any FBP work**:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FlutterBluePlus.setOptions(restoreState: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upon being woken up, an app has around 10 seconds to complete a task. Apps that spend too much time executing in the background can be throttled back by the system or killed.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You can try using &lt;a href=&#34;https://pub.dev/packages/flutter_foreground_task&#34;&gt;https://pub.dev/packages/flutter_foreground_task&lt;/a&gt; or possibly &lt;a href=&#34;https://pub.dev/packages/workmanager&#34;&gt;https://pub.dev/packages/workmanager&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;üåÄ = Stream ‚ö° = synchronous&lt;/p&gt; &#xA;&lt;h3&gt;FlutterBluePlus API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setLogLevel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configure plugin log level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setOptions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set configurable bluetooth options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isSupported&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks whether the device supports Bluetooth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;turnOn&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Turns on the bluetooth adapter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;adapterStateNow ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Current state of the bluetooth adapter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;adapterState üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of on &amp;amp; off states of the bluetooth adapter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;startScan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starts a scan for Ble devices&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;stopScan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stop an existing scan for Ble devices&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onScanResults üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of live scan results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scanResults üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of live scan results or previous results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastScanResults ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The most recent scan results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isScanning üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of current scanning state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isScanningNow ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Is a scan currently running?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connectedDevices ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of devices connected to &lt;em&gt;your app&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;systemDevices&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of devices connected to the system, even by other apps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;getPhySupport&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Get supported bluetooth phy codings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;FlutterBluePlus Events API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onConnectionStateChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of connection changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onMtuChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of mtu changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onReadRssi üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of rssi reads of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onServicesReset üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of services resets of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onDiscoveredServices üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of services discovered of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onCharacteristicReceived üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic value reads of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onCharacteristicWritten üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic value writes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onDescriptorRead üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of descriptor value reads of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onDescriptorWritten üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of descriptor value writes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onBondStateChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of android bond state changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onNameChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of iOS name changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothDevice API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platformName ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The platform preferred name of the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;advName ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The advertised name of the device found during scanning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Establishes a connection to the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;disconnect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cancels an active or pending connection to the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isConnected ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Is this device currently connected to &lt;em&gt;your app&lt;/em&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isDisonnected ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Is this device currently disconnected from &lt;em&gt;your app&lt;/em&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connectionState üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of connection changes for the Bluetooth Device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;discoverServices&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discover services&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;servicesList ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current list of available services&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onServicesReset üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The services changed &amp;amp; must be rediscovered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mtu üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of current mtu value + changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mtuNow ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current mtu value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;readRssi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Read RSSI from a connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requestMtu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request to change the MTU for the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requestConnectionPriority&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request to update a high priority, low latency connection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bondState üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of device bond state. Can be useful on Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;createBond&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Force a system pairing dialogue to show, if needed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;removeBond&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remove Bluetooth Bond of device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setPreferredPhy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set preferred RX and TX phy for connection and phy options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clearGattCache&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clear android cache of service discovery results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothCharacteristic API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;uuid ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The uuid of characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves the value of the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes the value of the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setNotifyValue&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets notifications or indications on the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isNotifying ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Are notifications or indications currently enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onValueReceived üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic value updates received from the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValue ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The most recent value of the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValueStream üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of onValueReceived + writes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothDescriptor API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;uuid ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The uuid of descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves the value of the descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes the value of the descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onValueReceived üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of descriptor value reads &amp;amp; writes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValue ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The most recent value of the descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValueStream üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of onValueReceived + writes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to debug issues in FlutterBluePlus is to make your own local copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /user/downloads&#xA;git clone https://github.com/boskokg/flutter_blue_plus.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then in &lt;code&gt;pubspec.yaml&lt;/code&gt; add the repo by path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  flutter_blue_plus:&#xA;    path: /user/downloads/flutter_blue_plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can edit the FlutterBluePlus code yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Common Problems&lt;/h2&gt; &#xA;&lt;p&gt;Many common problems are easily solved.&lt;/p&gt; &#xA;&lt;p&gt;Adapter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#bluetooth-must-be-turned-on&#34;&gt;bluetooth must be turned on&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#adapterstate-is-not-on-but-my-bluetooth-is-on&#34;&gt;adapterState is not &#39;on&#39; but my Bluetooth is on&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#adapterstate-is-called-multiple-times&#34;&gt;adapterState is called multiple times&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scanning:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#scanning-does-not-find-my-device&#34;&gt;Scanning does not find my device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#scanned-device-never-goes-away&#34;&gt;Scanned device never goes away&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#ibeacons-not-showing&#34;&gt;iBeacons not showing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Connecting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#connection-fails&#34;&gt;Connection fails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#connectionstate-is-called-multiple-times&#34;&gt;connectionState is called multiple times&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#the-remoteid-is-different-on-android-versus-ios--macos&#34;&gt;remoteId is different on Android vs iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#ios-error-the-connection-has-timed-out-unexpectedly&#34;&gt;iOS: &#34;[Error] The connection has timed out unexpectedly.&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reading &amp;amp; Writing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#list-of-bluetooth-gatt-errors&#34;&gt;List of Bluetooth GATT Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#characteristic-write-fails&#34;&gt;Characteristic write fails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#characteristic-read-fails&#34;&gt;Characteristic read fails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Subscriptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#onvaluereceived-is-never-called-or-lastvaluestream&#34;&gt;onValueReceived is never called (or lastValueStream)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#onvaluereceived-data-is-split-up-or-lastvaluestream&#34;&gt;onValueReceived data is split up (or lastValueStream)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#onvaluereceived-is-called-with-duplicate-data-or-lastvaluestream&#34;&gt;onValueReceived is called with duplicate data (or lastValueStream)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Android Errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#android_specific_error&#34;&gt;ANDROID_SPECIFIC_ERROR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#android-pairing-popup-appears-twice&#34;&gt;android pairing popup appears twice&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flutter Errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#missingpluginexceptionno-implementation-found-for-method-xxxx-&#34;&gt;MissingPluginException(No implementation found for method XXXX ...)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&#34;bluetooth must be turned on&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You need to wait for the bluetooth adapter to fully turn on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;await FlutterBluePlus.adapterState.where((state) =&amp;gt; state == BluetoothAdapterState.on).first;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;FlutterBluePlus.adapterState.listen(...)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#usage&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;adapterState is not &#39;on&#39; but my Bluetooth is on&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;For iOS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;adapterState&lt;/code&gt; always starts as &lt;code&gt;unknown&lt;/code&gt;. You need to wait longer for the service to initialize. Use this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// wait for actual adapter state, up to 3 seconds&#xA;Set&amp;lt;BluetoothAdapterState&amp;gt; inProgress = {BluetoothAdapterState.unknown, BluetoothAdapterState.turningOn};&#xA;var adapterState = FlutterBluePlus.adapterState.where((v) =&amp;gt; !inProgress.contains(v)).first;&#xA;await adapterState.timeout(const Duration(seconds: 3)).onError((error, stackTrace) {&#xA;   throw Exception(&#34;Could not determine Bluetooth state. ${FlutterBluePlus.adapterStateNow}&#34;);&#xA;});&#xA;&#xA;// check adapter state&#xA;if (FlutterBluePlus.adapterStateNow != BluetoothAdapterState.on) {&#xA;   throw Exception(&#34;Bluetooth Is Not On. ${FlutterBluePlus.adapterStateNow}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;adapterState&lt;/code&gt; is &lt;code&gt;unavailable&lt;/code&gt;, you must add access to Bluetooth Hardware in the app&#39;s Xcode settings. See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Android:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check that your device supports Bluetooth &amp;amp; has permissions.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;adapterState is called multiple times&lt;/h3&gt; &#xA;&lt;p&gt;You are forgetting to cancel the original &lt;code&gt;FlutterBluePlus.adapterState.listen&lt;/code&gt; resulting in multiple listeners.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// tip: using ??= makes it easy to only make new listener when currently null&#xA;final subscription ??= FlutterBluePlus.adapterState.listen((value) {&#xA;    // ...&#xA;});&#xA;&#xA;// also, make sure you cancel the subscription when done!&#xA;subscription.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Scanning does not find my device&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. you&#39;re using an emulator&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use a physical device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. try using another ble scanner app&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: &lt;a href=&#34;https://apps.apple.com/us/app/nrf-connect-for-mobile/id1054362403&#34;&gt;nRF Connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.macdom.ble.blescanner&#34;&gt;BLE Scanner&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install a BLE scanner app on your phone. Can it find your device?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. your device uses bluetooth classic, not BLE.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Headphones, speakers, keyboards, mice, gamepads, &amp;amp; printers all use Bluetooth Classic.&lt;/p&gt; &#xA;&lt;p&gt;These devices may be found in System Settings, but they cannot be connected to by FlutterBluePlus. FlutterBluePlus only supports Bluetooth Low Energy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. your device stopped advertising.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you might need to reboot your device&lt;/li&gt; &#xA; &lt;li&gt;you might need to put your device in &#34;discovery mode&#34;&lt;/li&gt; &#xA; &lt;li&gt;your phone may have already connected automatically&lt;/li&gt; &#xA; &lt;li&gt;another app may have already connected to your device&lt;/li&gt; &#xA; &lt;li&gt;another phone may have already connected to your device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try looking through system devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// search system devices. i.e. any device connected to by *any* app&#xA;List&amp;lt;BluetoothDevice&amp;gt; system = await FlutterBluePlus.systemDevices;&#xA;for (var d in system) {&#xA;    print(&#39;${r.device.platformName} already connected to! ${r.device.remoteId}&#39;);&#xA;    if (d.platformName == &#34;myBleDevice&#34;) {&#xA;         await r.connect(); // must connect our app&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. your scan filters are wrong.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;try removing all scan filters&lt;/li&gt; &#xA; &lt;li&gt;for &lt;code&gt;withServices&lt;/code&gt; to work, your device must actively advertise the serviceUUIDs it supports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Android: you&#39;re calling startScan too often&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Adroid you can only call &lt;code&gt;startScan&lt;/code&gt; 5 times per 30 second period. This is a platform restriction.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Scanned device never goes away&lt;/h3&gt; &#xA;&lt;p&gt;This is expected.&lt;/p&gt; &#xA;&lt;p&gt;You must set the &lt;code&gt;removeIfGone&lt;/code&gt; scan option if you want the device to go away when no longer available.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;iBeacons Not Showing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;iOS does not support iBeacons using CoreBluetooth. You must find a plugin meant for CoreLocation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;you need to enable location permissions, see &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;you must pass &lt;code&gt;androidUsesFineLocation:true&lt;/code&gt; to the &lt;code&gt;startScan&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Connection fails&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Your ble device may be low battery&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth can become erratic when your peripheral device is low on battery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Your ble device may have refused the connection or have a bug&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Connection is a two-way process. Your ble device may be misconfigured.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. You may be on the edge of the Bluetooth range.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The signal is too weak, or there are a lot of devices causing radio interference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Some phones have an issue connecting while scanning.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Huawei P8 Lite is one of the reported phones to have this issue. Try stopping your scanner before connecting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Try restarting your phone&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth is a complicated system service, and can enter a bad state.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;connectionState is called multiple times&lt;/h3&gt; &#xA;&lt;p&gt;You are forgetting to cancel the original &lt;code&gt;device.connectionState.listen&lt;/code&gt; resulting in multiple listeners.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// tip: using ??= makes it easy to only make new listener when currently null&#xA;final subscription ??= FlutterBluePlus.device.connectionState.listen((value) {&#xA;    // ...&#xA;});&#xA;&#xA;// also, make sure you cancel the subscription when done!&#xA;subscription.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;The remoteId is different on Android versus iOS &amp;amp; macOS&lt;/h3&gt; &#xA;&lt;p&gt;This is expected. There is no way to avoid it.&lt;/p&gt; &#xA;&lt;p&gt;For privacy, iOS &amp;amp; macOS use a randomly generated uuid. This uuid will periodically change.&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;6920a902-ba0e-4a13-a35f-6bc91161c517&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android uses the mac address of the bluetooth device. It never changes.&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;05:A4:22:31:F7:ED&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;iOS: &#34;[Error] The connection has timed out unexpectedly.&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You can google this error. It is a common iOS ble error code.&lt;/p&gt; &#xA;&lt;p&gt;It means your device stopped working. FlutterBluePlus cannot fix it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;List of Bluetooth GATT Errors&lt;/h3&gt; &#xA;&lt;p&gt;These GATT error codes are part of the BLE Specification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These are &lt;em&gt;responses&lt;/em&gt; from your ble device because you are sending an invalid request.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;FlutterBluePlus cannot fix these errors. You are doing something wrong &amp;amp; your device is responding with an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;GATT errors as they appear on iOS&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apple-code: 1  | The handle is invalid.&#xA;apple-code: 2  | Reading is not permitted.&#xA;apple-code: 3  | Writing is not permitted.&#xA;apple-code: 4  | The command is invalid.&#xA;apple-code: 6  | The request is not supported.&#xA;apple-code: 7  | The offset is invalid.&#xA;apple-code: 8  | Authorization is insufficient.&#xA;apple-code: 9  | The prepare queue is full.&#xA;apple-code: 10 | The attribute could not be found.&#xA;apple-code: 11 | The attribute is not long.&#xA;apple-code: 12 | The encryption key size is insufficient.&#xA;apple-code: 13 | The value&#39;s length is invalid.&#xA;apple-code: 14 | Unlikely error.&#xA;apple-code: 15 | Encryption is insufficient.&#xA;apple-code: 16 | The group type is unsupported.&#xA;apple-code: 17 | Resources are insufficient.&#xA;apple-code: 18 | Unknown ATT error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GATT errors as they appear on Android&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;android-code: 1  | GATT_INVALID_HANDLE&#xA;android-code: 2  | GATT_READ_NOT_PERMITTED&#xA;android-code: 3  | GATT_WRITE_NOT_PERMITTED&#xA;android-code: 4  | GATT_INVALID_PDU&#xA;android-code: 5  | GATT_INSUFFICIENT_AUTHENTICATION&#xA;android-code: 6  | GATT_REQUEST_NOT_SUPPORTED&#xA;android-code: 7  | GATT_INVALID_OFFSET&#xA;android-code: 8  | GATT_INSUFFICIENT_AUTHORIZATION&#xA;android-code: 9  | GATT_PREPARE_QUEUE_FULL&#xA;android-code: 10 | GATT_ATTR_NOT_FOUND&#xA;android-code: 11 | GATT_ATTR_NOT_LONG&#xA;android-code: 12 | GATT_INSUFFICIENT_KEY_SIZE&#xA;android-code: 13 | GATT_INVALID_ATTRIBUTE_LENGTH&#xA;android-code: 14 | GATT_UNLIKELY&#xA;android-code: 15 | GATT_INSUFFICIENT_ENCRYPTION&#xA;android-code: 16 | GATT_UNSUPPORTED_GROUP&#xA;android-code: 17 | GATT_INSUFFICIENT_RESOURCES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Descriptions&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1   | Invalid Handle                 | The attribute handle given was not valid on this server.&#xA;2   | Read Not Permitted             | The attribute cannot be read.&#xA;3   | Write Not Permitted            | The attribute cannot be written.&#xA;4   | Invalid PDU                    | The attribute PDU was invalid.&#xA;5   | Insufficient Authentication    | The attribute requires authentication before it can be read or written.&#xA;6   | Request Not Supported          | Attribute server does not support the request received from the client.&#xA;7   | Invalid Offset                 | Offset specified was past the end of the attribute.&#xA;8   | Insufficient Authorization     | The attribute requires an authorization before it can be read or written.&#xA;9   | Prepare Queue Full             | Too many prepare writes have been queued.&#xA;10  | Attribute Not Found            | No attribute found within the given attribute handle range.&#xA;11  | Attribute Not Long             | The attribute cannot be read or written using the Read Blob or Write Blob requests.&#xA;12  | Insufficient Key Size          | The Encryption Key Size used for encrypting this link is insufficient.&#xA;13  | Invalid Attribute Value Length | The attribute value length is invalid for the operation.&#xA;14  | Unlikely Error                 | The request has encountered an unlikely error and cannot be completed.&#xA;15  | Insufficient Encryption        | The attribute requires encryption before it can be read or written.&#xA;16  | Unsupported Group Type         | The attribute type is not a supported grouping as defined by a higher layer.&#xA;17  | Insufficient Resources         | Insufficient Resources to complete the request.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;characteristic write fails&lt;/h3&gt; &#xA;&lt;p&gt;First, check the &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#list-of-bluetooth-gatt-errors&#34;&gt;List of Bluetooth GATT Errors&lt;/a&gt; for your error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. your bluetooth device turned off, or is out of range&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your device turns off or crashes during a write, it will cause a failure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Your Bluetooth device has bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maybe your device crashed, or is not sending a response due to software bugs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. there is radio interference&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth is wireless and will not always work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Characteristic read fails&lt;/h3&gt; &#xA;&lt;p&gt;First, check the &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#list-of-bluetooth-gatt-errors&#34;&gt;List of Bluetooth GATT Errors&lt;/a&gt; for your error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. your bluetooth device turned off, or is out of range&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your device turns off or crashes during a read, it will cause a failure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Your Bluetooth device has bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maybe your device crashed, or is not sending a response due to software bugs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. there is radio interference&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth is wireless and will not always work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;onValueReceived is never called (or lastValueStream)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. you are not calling the right function&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lastValueStream&lt;/code&gt; is called for &lt;code&gt;await chr.read()&lt;/code&gt; &amp;amp; &lt;code&gt;await chr.write()&lt;/code&gt; &amp;amp; &lt;code&gt;await chr.setNotifyValue(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;onValueReceived&lt;/code&gt; is only called for &lt;code&gt;await chr.read()&lt;/code&gt; &amp;amp; &lt;code&gt;await chr.setNotifyValue(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. your device has nothing to send&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;await chr.setNotifyValue(true)&lt;/code&gt;, your &lt;em&gt;device&lt;/em&gt; chooses when to send data.&lt;/p&gt; &#xA;&lt;p&gt;Try interacting with your device to get it to send new data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. your device has bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try rebooting your ble device.&lt;/p&gt; &#xA;&lt;p&gt;Some ble devices have buggy software and stop sending data&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;onValueReceived data is split up (or lastValueStream)&lt;/h3&gt; &#xA;&lt;p&gt;Verify that the mtu is large enough to hold your message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;device.mtu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it still happens, it is a problem with your peripheral device.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;onValueReceived is called with duplicate data (or lastValueStream)&lt;/h3&gt; &#xA;&lt;p&gt;You are probably forgetting to cancel the original &lt;code&gt;chr.onValueReceived.listen&lt;/code&gt; resulting in multiple listens.&lt;/p&gt; &#xA;&lt;p&gt;The easiest solution is to use &lt;code&gt;device.cancelWhenDisconnected(subscription)&lt;/code&gt; to cancel device subscriptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = chr.onValueReceived.listen((value) {&#xA;    // ...&#xA;});&#xA;&#xA;// make sure you have this line!&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;await characteristic.setNotifyValue(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ANDROID_SPECIFIC_ERROR&lt;/h3&gt; &#xA;&lt;p&gt;There is no 100% solution.&lt;/p&gt; &#xA;&lt;p&gt;FBP already has mitigations for this error, but Android will still fail with this code randomly.&lt;/p&gt; &#xA;&lt;p&gt;The recommended solution is to &lt;code&gt;catch&lt;/code&gt; the error, and retry.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;android pairing popup appears twice&lt;/h3&gt; &#xA;&lt;p&gt;This is a bug in android itself.&lt;/p&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;createBond()&lt;/code&gt; yourself just after connecting and this will resolve the issue.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;MissingPluginException(No implementation found for method XXXX ...)&lt;/h3&gt; &#xA;&lt;p&gt;If you just added flutter_blue_plus to your pubspec.yaml, a hot reload / hot restart is not enough.&lt;/p&gt; &#xA;&lt;p&gt;You need to fully stop your app and run again so that the native plugins are loaded.&lt;/p&gt; &#xA;&lt;p&gt;Also try &lt;code&gt;flutter clean&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>