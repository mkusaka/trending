<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:49:53Z</updated>
  <subtitle>Weekly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexmercerind/media_kit</title>
    <updated>2023-03-05T01:49:53Z</updated>
    <id>tag:github.com,2023-03-05:/alexmercerind/media_kit</id>
    <link href="https://github.com/alexmercerind/media_kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[WIP] A complete 🎬 video &amp; 🎵 audio library for Flutter &amp; Dart.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A complete video &amp;amp; audio library for Flutter &amp;amp; Dart.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/h7qf2R9n57&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1079685977523617792?color=33cd57&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=discord&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alexmercerind/media_kit/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/alexmercerind/media_kit/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sponsored with 💖 by&lt;/strong&gt; &lt;br&gt; &lt;a href=&#34;https://getstream.io/chat/sdk/flutter/?utm_source=alexmercerind_dart&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=alexmercerind_December2022_FlutterSDK_klmh22&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://getstream.io/chat/sdk/flutter/?utm_source=alexmercerind_dart&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=alexmercerind_December2022_FlutterSDK_klmh22&#34; target=&#34;_blank&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/28951144/204903234-4a64b63c-2fc2-4eef-be44-d287d27021e5.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://user-images.githubusercontent.com/28951144/204903022-bbaa49ca-74c2-4a8f-a05d-af8314bfd2cc.svg&#34;&gt; &#xA;  &lt;img alt=&#34;Stream Chat&#34; width=&#34;350&#34; height=&#34;auto&#34; src=&#34;https://user-images.githubusercontent.com/28951144/204903022-bbaa49ca-74c2-4a8f-a05d-af8314bfd2cc.svg?sanitize=true&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;h6&gt; Rapidly ship in-app messaging with Stream&#39;s highly reliable chat infrastructure &amp;amp; feature-rich SDKs, including Flutter! &lt;/h6&gt; &#xA;&lt;strong&gt; &lt;a href=&#34;https://getstream.io/chat/sdk/flutter/?utm_source=alexmercerind_dart&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=alexmercerind_December2022_FlutterSDK_klmh22&#34; target=&#34;_blank&#34;&gt; Try the Flutter Chat tutorial &lt;/a&gt; &lt;/strong&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28951144/209100988-6f85f563-20e0-4e35-893a-ae099c7e03e4.mp4&#34;&gt;https://user-images.githubusercontent.com/28951144/209100988-6f85f563-20e0-4e35-893a-ae099c7e03e4.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add in your &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  media_kit: ^0.0.1&#xA;  # For video rendering.&#xA;  media_kit_video: ^0.0.1&#xA;  # For enabling support for more than 8 simultaneous players (only Flutter).&#xA;  media_kit_native_event_loop: ^1.0.0&#xA;  # Pick based on your requirements / platform:&#xA;  media_kit_libs_windows_video: ^1.0.0          # Windows package for video (&amp;amp; audio) native libraries.&#xA;  media_kit_libs_windows_audio: ^1.0.0          # Windows package for audio (only) native libraries.&#xA;  media_kit_libs_linux: ^1.0.0                  # Linux dependency package.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Audio&lt;/th&gt; &#xA;   &lt;th&gt;Video&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;Ready&lt;/td&gt; &#xA;   &lt;td&gt;Ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;Ready&lt;/td&gt; &#xA;   &lt;td&gt;Ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;   &lt;td&gt;WIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;Soon&lt;/td&gt; &#xA;   &lt;td&gt;Soon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;Soon&lt;/td&gt; &#xA;   &lt;td&gt;Soon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Guide&lt;/h2&gt; &#xA;&lt;h3&gt;Brief Start&lt;/h3&gt; &#xA;&lt;p&gt;Basic example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:media_kit/media_kit.dart&#39;;&#xA;&#xA;/// Create a new [Player] instance.&#xA;final player = Player();&#xA;&#xA;...&#xA;/// Open some [Media] for playback.&#xA;await player.open(&#xA;  Playlist(&#xA;    [&#xA;      Media(&#39;file:///C:/Users/Hitesh/Music/Sample.MP3&#39;),&#xA;      Media(&#39;file:///C:/Users/Hitesh/Video/Sample.MKV&#39;),&#xA;      Media(&#39;https://www.example.com/sample.mp4&#39;),&#xA;      Media(&#39;rtsp://www.example.com/live&#39;),&#xA;    ],&#xA;  ),&#xA;);&#xA;&#xA;...&#xA;/// Modify speed, pitch, volume or shuffle state.&#xA;player.rate = 1.0;&#xA;player.pitch = 1.2;&#xA;player.volume = 50.0;&#xA;player.shuffle = false;&#xA;&#xA;...&#xA;/// Play / Pause&#xA;player.play();&#xA;player.pause();&#xA;player.playOrPause();&#xA;&#xA;...&#xA;/// Release allocated resources back to the system.&#xA;player.dispose();&#xA;&#xA;...&#xA;/// Subscribe to events.&#xA;player.streams.playlist.listen((event) {&#xA;  /// Trigger UI updates etc.&#xA;  print(event);&#xA;});&#xA;player.streams.playlist.listen((event) {&#xA;  /// Trigger UI updates etc.&#xA;  print(event);&#xA;});&#xA;player.streams.position.listen((event) {&#xA;  /// Trigger UI updates etc.&#xA;  print(event);&#xA;});&#xA;player.streams.duration.listen((event) {&#xA;  /// Trigger UI updates etc.&#xA;  print(event);&#xA;});&#xA;player.streams.audioBitrate.listen((event) {&#xA;  /// Trigger UI updates etc.&#xA;  if (event != null) {&#xA;    print(&#39;${event ~/ 1000} KB/s&#39;);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rendering Video&lt;/h3&gt; &#xA;&lt;p&gt;Performant &amp;amp; H/W accelerated, automatically fallbacks to S/W rendering if system does not support it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:media_kit/media_kit.dart&#39;;&#xA;import &#39;package:media_kit_video/media_kit_video.dart&#39;;&#xA;&#xA;class MyScreen extends StatefulWidget {&#xA;  const MyScreen({Key? key}) : super(key: key);&#xA;  @override&#xA;  State&amp;lt;MyScreen&amp;gt; createState() =&amp;gt; _MyScreenState();&#xA;}&#xA;&#xA;class MyScreenState extends State&amp;lt;MyScreen&amp;gt; {&#xA;  // Create a [Player] instance from `package:media_kit`.&#xA;  final Player player = Player();&#xA;  // Reference to the [VideoController] instance from `package:media_kit_video`.&#xA;  VideoController? controller;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    Future.microtask(() async {&#xA;      // Create a [VideoController] instance from `package:media_kit_video`.&#xA;      // Pass the [handle] of the [Player] from `package:media_kit` to the [VideoController] constructor.&#xA;      controller = await VideoController.create(player.handle);&#xA;      // Must be created before opening any media. Otherwise, a separate window will be created.&#xA;      setState(() {});&#xA;    });&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    Future.microtask(() async {&#xA;      // Release allocated resources back to the system.&#xA;      await controller?.dispose();&#xA;      await player.dispose();&#xA;    });&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Video(&#xA;      /// Pass the [controller] to display the video output.&#xA;      controller: controller,&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;Although &lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt; is already fairly performant, you can further optimize things as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can limit size of the video output by specifying &lt;code&gt;width&lt;/code&gt; &amp;amp; &lt;code&gt;height&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, both &lt;code&gt;height&lt;/code&gt; &amp;amp; &lt;code&gt;width&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt; i.e. output is based on video&#39;s resolution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final controller = await VideoController.create(&#xA;  player.handle,&#xA;  width: 640,                                   // default: null&#xA;  height: 360,                                  // default: null&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can switch between GPU &amp;amp; CPU rendering by specifying &lt;code&gt;enableHardwareAcceleration&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;enableHardwareAcceleration&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; i.e. GPU (Direct3D/OpenGL/METAL) is utilized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final controller = await VideoController.create(&#xA;  player.handle,&#xA;  enableHardwareAcceleration: false,            // default: true&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can disable event callbacks for a &lt;code&gt;Player&lt;/code&gt; &amp;amp; save yourself few CPU cycles.&lt;/li&gt; &#xA; &lt;li&gt;By default, &lt;code&gt;events&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; i.e. event streams &amp;amp; states are updated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final player = Player(&#xA;  configuration: PlayerConfiguration(&#xA;    events: false,                              // default: true&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Detailed Guide&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO: documentation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try out &lt;a href=&#34;https://github.com/harmonoid/media_kit/raw/master/media_kit_test/lib/main.dart&#34;&gt;the test application&lt;/a&gt; for now.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Everything ready. Just add one of the following packages to your &lt;code&gt;pubspec.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  ...&#xA;  media_kit_libs_windows_video: ^1.0.0       # Windows package for video (&amp;amp; audio) native libraries.&#xA;  media_kit_libs_windows_audio: ^1.0.0       # Windows package for audio (only) native libraries.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;System shared libraries from distribution specific user-installed packages are used by-default. You can install these as follows.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu / Debian&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libmpv-dev mpv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Packaging&lt;/h4&gt; &#xA;&lt;p&gt;There are other ways to bundle these within your app package e.g. within Snap or Flatpak. Few examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/celluloid-player/celluloid/raw/master/flatpak/io.github.celluloid_player.Celluloid.json&#34;&gt;Celluloid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ozmartian/vidcutter/tree/master/_packaging&#34;&gt;VidCutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The primary goal of &lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt; is to become a &lt;strong&gt;strong, stable, feature-proof &amp;amp; modular&lt;/strong&gt; media playback library for Flutter. The idea is to support both &lt;strong&gt;audio &amp;amp; video playback&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt; makes rendering &lt;a href=&#34;https://github.com/alexmercerind/dart_vlc/issues/345&#34;&gt;&lt;strong&gt;hardware accelerated video playback&lt;/strong&gt;&lt;/a&gt; possible in Flutter.&lt;/p&gt; &#xA;&lt;p&gt;Since, targetting multiple features at once &amp;amp; bundling redundant native libraries can result in increased bundle size of the application, you can manually select the native libraries you want to bundle, depending upon your use-case. The code is architectured to support multiple platforms &amp;amp; features. Support for more platforms will be added in future.&lt;/p&gt; &#xA;&lt;h2&gt;Fund Development&lt;/h2&gt; &#xA;&lt;p&gt;If you find &lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt; package(s) useful, please consider sponsoring me.&lt;/p&gt; &#xA;&lt;p&gt;Since this is first of a kind project, it takes a lot of time to experiment &amp;amp; develop. It&#39;s a very tedious process to write code, document, maintain &amp;amp; provide support for free. Your support can ensure the quality of the package your project depends upon. I will feel rewarded for my hard-work &amp;amp; research.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sponsors/alexmercerind&#34;&gt;GitHub Sponsors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://paypal.me/alexmercerind&#34;&gt;PayPal&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/alexmercerind&#34;&gt;&lt;img src=&#34;https://github.githubassets.com/images/modules/site/sponsors/sponsors-mona.svg?sanitize=true&#34; width=&#34;240&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;package:media_kit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Click on the zoom button on top-right or pinch inside.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  Player *-- PlatformPlayer&#xA;  PlatformPlayer &amp;lt;|-- libmpv_Player&#xA;  PlatformPlayer &amp;lt;|-- xyz_Player&#xA;  PlatformPlayer *-- PlayerState&#xA;  PlatformPlayer *-- PlayerStreams&#xA;  PlatformPlayer o-- PlayerConfiguration&#xA;&#xA;  libmpv_Player &amp;lt;.. NativeLibrary&#xA;&#xA;  class Media {&#xA;    +String uri&#xA;    +dynamic extras&#xA;  }&#xA;&#xA;  class Playlist {&#xA;    +List&amp;lt;Media&amp;gt; medias&#xA;    +index index&#xA;  }&#xA;&#xA;  class PlayerConfiguration {&#xA;    + bool osc&#xA;    + String vo&#xA;    + String title&#xA;    ... other platform-specific configurable values&#xA;  }&#xA;&#xA;  class PlayerStreams {&#xA;    +Stream&amp;lt;Playlist&amp;gt; playlist&#xA;    +Stream&amp;lt;bool&amp;gt; isPlaying&#xA;    +Stream&amp;lt;bool&amp;gt; isCompleted&#xA;    +Stream&amp;lt;Duration&amp;gt; position&#xA;    +Stream&amp;lt;Duration&amp;gt; duration&#xA;    +Stream&amp;lt;double&amp;gt; volume&#xA;    +Stream&amp;lt;double&amp;gt; rate&#xA;    +Stream&amp;lt;double&amp;gt; pitch&#xA;    +Stream&amp;lt;bool&amp;gt; isBuffering&#xA;    +Stream&amp;lt;AudioParams&amp;gt; audioParams&#xA;    +Stream&amp;lt;double&amp;gt; audioBitrate&#xA;    +Stream&amp;lt;PlayerError&amp;gt; error&#xA;  }&#xA;&#xA;  class PlayerState {&#xA;    +Playlist playlist&#xA;    +bool isPlaying&#xA;    +bool isCompleted&#xA;    +Duration position&#xA;    +Duration duration&#xA;    +double volume&#xA;    +double rate&#xA;    +double pitch&#xA;    +bool isBuffering&#xA;    +AudioParams audioParams&#xA;    +double audioBitrate&#xA;    +PlayerError error&#xA;  }&#xA;&#xA;  class Player {&#xA;    +PlatformPlayer? platform&#xA;&#xA;    +«get» PlayerState state&#xA;    +«get» PlayerStreams streams&#xA;&#xA;    +«set» volume: double*&#xA;    +«set» rate: double*&#xA;    +«set» pitch: double*&#xA;    +«set» shuffle: bool*&#xA;    +«get» handle: Future&amp;lt;int&amp;gt;&#xA;&#xA;    +open(playlist)&#xA;    +play()&#xA;    +pause()&#xA;    +playOrPause()&#xA;    +add(media)&#xA;    +remove(index)&#xA;    +next()&#xA;    +previous()&#xA;    +jump(index)&#xA;    +move(from, to)&#xA;    +seek(duration)&#xA;    +setPlaylistMode(playlistMode)&#xA;    +dispose()&#xA;  }&#xA;&#xA;  class PlatformPlayer {&#xA;    +PlayerState state&#xA;    +PlayerStreams streams&#xA;    +PlayerConfiguration configuration&#xA;&#xA;    +open(playlist)*&#xA;    +play()*&#xA;    +pause()*&#xA;    +playOrPause()*&#xA;    +add(media)*&#xA;    +remove(index)*&#xA;    +next()*&#xA;    +previous()*&#xA;    +jump(index)*&#xA;    +move(from, to)*&#xA;    +seek(duration)*&#xA;    +setPlaylistMode(playlistMode)*&#xA;    +dispose()*&#xA;&#xA;    +«set» volume: double*&#xA;    +«set» rate: double*&#xA;    +«set» pitch: double*&#xA;    +«set» shuffle: bool*&#xA;    +«get» handle: Future&amp;lt;int&amp;gt;*&#xA;&#xA;    #StreamController&amp;lt;Playlist&amp;gt; playlistController&#xA;    #StreamController&amp;lt;bool&amp;gt; isPlayingController&#xA;    #StreamController&amp;lt;bool&amp;gt; isCompletedController&#xA;    #StreamController&amp;lt;Duration&amp;gt; positionController&#xA;    #StreamController&amp;lt;Duration&amp;gt; durationController&#xA;    #StreamController&amp;lt;double&amp;gt; volumeController&#xA;    #StreamController&amp;lt;double&amp;gt; rateController&#xA;    #StreamController&amp;lt;double&amp;gt; pitchController&#xA;    #StreamController&amp;lt;bool&amp;gt; isBufferingController&#xA;    #StreamController&amp;lt;PlayerError&amp;gt; errorController&#xA;    #StreamController&amp;lt;AudioParams&amp;gt; audioParamsController&#xA;    #StreamController&amp;lt;double?&amp;gt; audioBitrateController&#xA;  }&#xA;&#xA;  class libmpv_Player {&#xA;    +open(playlist)&#xA;    +play()&#xA;    +pause()&#xA;    +playOrPause()&#xA;    +add(media)&#xA;    +remove(index)&#xA;    +next()&#xA;    +previous()&#xA;    +jump(index)&#xA;    +move(from, to)&#xA;    +seek(duration)&#xA;    +setPlaylistMode(playlistMode)&#xA;    +«set» volume: double&#xA;    +«set» rate: double&#xA;    +«set» pitch: double&#xA;    +«set» shuffle: bool&#xA;    +«get» handle: Future&amp;lt;int&amp;gt;&#xA;    +dispose()&#xA;  }&#xA;&#xA;  class NativeLibrary {&#xA;    +find()$ String?&#xA;  }&#xA;&#xA;  class xyz_Player {&#xA;    +open(playlist)&#xA;    +play()&#xA;    +pause()&#xA;    +playOrPause()&#xA;    +add(media)&#xA;    +remove(index)&#xA;    +next()&#xA;    +previous()&#xA;    +jump(index)&#xA;    +move(from, to)&#xA;    +seek(duration)&#xA;    +setPlaylistMode(playlistMode)&#xA;    +«set» volume: double&#xA;    +«set» rate: double&#xA;    +«set» pitch: double&#xA;    +«set» shuffle: bool&#xA;    +«get» handle: Future&amp;lt;int&amp;gt;&#xA;    +dispose()&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;package:media_kit_video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Click on the zoom button on top-right or pinch inside.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  MediaKitVideoPlugin &#34;1&#34; *-- &#34;1&#34; VideoOutputManager: Create VideoOutput(s) with VideoOutputManager for handle passed through platform channel&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;*&#34; VideoOutput: Takes PluginRegistrarWindows as reference&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;1&#34; ThreadPool&#xA;  VideoOutput &#34;*&#34; o-- &#34;1&#34; ThreadPool: Post creation, resize &amp;amp; render etc. tasks involving EGL to ensure synchronous EGL/ANGLE usage across multiple VideoOutput(s)&#xA;  VideoOutput &#34;1&#34; *-- &#34;1&#34; ANGLESurfaceManager: Only for H/W accelerated rendering&#xA;&#xA;  class MediaKitVideoPlugin {&#xA;    -flutter::PluginRegistrarWindows registrar_&#xA;    -std::unique_ptr&amp;lt;MethodChannel&amp;gt; channel_&#xA;    -std::unique_ptr&amp;lt;VideoOutputManager&amp;gt; video_output_manager_&#xA;    -HandleMethodCall(method_call, result);&#xA;  }&#xA;&#xA;  class ThreadPool {&#xA;    +Post(function: std::function)&#xA;  }&#xA;&#xA;  class VideoOutputManager {&#xA;    +Create(handle: int, width: optional&amp;lt;int&amp;gt;, height: optional&amp;lt;int&amp;gt;, texture_update_callback: std::function)&#xA;    +Dispose(handle: int)&#xA;&#xA;    -std::mutex mutex_&#xA;    -std::unique_ptr&amp;lt;ThreadPool&amp;gt; thread_pool_&#xA;    -flutter::PluginRegistrarWindows registrar_&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;VideoOutput&amp;gt;&amp;gt; video_outputs_&#xA;  }&#xA;&#xA;  class VideoOutput {&#xA;    +«get» texture_id: int64_t&#xA;    -mpv_handle* handle&#xA;    -mpv_render_context* context&#xA;    -std::optional&amp;lt;int64_t&amp;gt; width&#xA;    -std::optional&amp;lt;int64_t&amp;gt; height&#xA;    -int64_t texture_id_&#xA;    -flutter::PluginRegistrarWindows registrar_&#xA;    -ThreadPool* thread_pool_ref_&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;flutter::TextureVariant&amp;gt;&amp;gt; texture_variants_&#xA;    -std::unique_ptr&amp;lt;ANGLESurfaceManager&amp;gt; surface_manager_ HW&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;FlutterDesktopGpuSurfaceDescriptor&amp;gt;&amp;gt; textures_ HW&#xA;    -std::unique_ptr&amp;lt;uint8_t[]&amp;gt; pixel_buffer_ SW&#xA;    -std::unordered_map&amp;lt;int64_t, std::unique_ptr&amp;lt;FlutterDesktopPixelBuffer&amp;gt;&amp;gt; pixel_buffer_textures_ SW&#xA;    -std::function texture_update_callback_&#xA;&#xA;    +SetTextureUpdateCallback(callback: std::function&amp;lt;void(int64_t, int64_t, int64_t)&amp;gt;)&#xA;    -Render()&#xA;    -CheckAndResize()&#xA;    -Resize(required_width: int64_t, required_height: int64_t)&#xA;    -GetVideoWidth(): int64_t&#xA;    -GetVideoHeight(): int64_t&#xA;  }&#xA;&#xA;  class ANGLESurfaceManager {&#xA;    +«get» width: int32_t&#xA;    +«get» height: int32_t&#xA;    +«get» handle: HANDLE&#xA;&#xA;    +HandleResize(width: int32_t, height: int32_t)&#xA;    +Draw(draw_callback: std::function&amp;lt;void()&amp;gt;)&#xA;    +Read()&#xA;    +SwapBuffers()&#xA;    +MakeCurrent(value: bool)&#xA;    -CreateEGLDisplay()&#xA;    -Initialize()&#xA;    -InitializeD3D11()&#xA;    -InitializeD3D9()&#xA;    -CleanUp(release_context: bool)&#xA;    -CreateEGLDisplay()&#xA;    -ShowFailureMessage(message: wchar_t[])&#xA;&#xA;    -IDXGIAdapter* adapter_&#xA;    -int32_t width_&#xA;    -int32_t height_&#xA;    -ID3D11Device* d3d_11_device_&#xA;    -ID3D11DeviceContext* d3d_11_device_context_&#xA;    -Microsoft::WRL::ComPtr&amp;lt;ID3D11Texture2D&amp;gt;&#xA;    -Microsoft::WRL::ComPtr&amp;lt;IDXGISwapChain&amp;gt;&#xA;    -IDirect3D9Ex* d3d_9_ex_&#xA;    -IDirect3DDevice9Ex* d3d_9_device_ex_&#xA;    -IDirect3DTexture9* d3d_9_texture_&#xA;    -HANDLE handle_&#xA;    -EGLSurface surface_&#xA;    -EGLDisplay display_&#xA;    -EGLContext context_&#xA;    -EGLConfig config_&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{&#xA;  init: {&#xA;    &#39;themeVariables&#39;: {&#xA;      &#39;fontFamily&#39;: &#39;BlinkMacSystemFont, Segoe UI, Noto Sans, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji&#39;&#xA;    }&#xA;  }&#xA;}%%&#xA;classDiagram&#xA;&#xA;  MediaKitVideoPlugin &#34;1&#34; *-- &#34;1&#34; VideoOutputManager: Create VideoOutput(s) with VideoOutputManager for handle passed through platform channel&#xA;  VideoOutputManager &#34;1&#34; *-- &#34;*&#34; VideoOutput: Takes FlTextureRegistrar as reference&#xA;  VideoOutput &#34;1&#34; *-- &#34;1&#34; TextureGL: For H/W rendering.&#xA;  TextureGL &#34;1&#34; o-- &#34;1&#34; VideoOutput: Take VideoOutput as reference&#xA;  VideoOutput &#34;1&#34; *-- &#34;1&#34; TextureSW: For S/W rendering.&#xA;  TextureSW &#34;1&#34; o-- &#34;1&#34; VideoOutput: Take VideoOutput as reference&#xA;&#xA;  class MediaKitVideoPlugin {&#xA;    -FlMethodChannel* channel&#xA;    -VideoOutputManager* video_output_manager&#xA;  }&#xA;&#xA;  class VideoOutputManager {&#xA;    -GHashTable* video_outputs&#xA;    -FlTextureRegistrar* texture_registrar&#xA;    +video_output_manager_create(self: VideoOutputManager*, handle: gint64, width: gint64, height: gint64, texture_update_callback: TextureUpdateCallback, texture_update_callback_context: gpointer)&#xA;    +video_output_manager_dispose(self: VideoOutputManager*, handle: gint64)&#xA;  }&#xA;&#xA;  class VideoOutput {&#xA;    -TextureGL* texture_gl&#xA;    -GdkGLContext* context_gl&#xA;    -mpv_handle* handle&#xA;    -mpv_render_context* render_context&#xA;    -gint64 width&#xA;    -gint64 height&#xA;    -TextureUpdateCallback texture_update_callback&#xA;    -gpointer texture_update_callback_context&#xA;    -FlTextureRegistrar* texture_registrar&#xA;    +video_output_set_texture_update_callback(self: VideoOutput*, texture_update_callback: TextureUpdateCallback, texture_update_callback_context: gpointer)&#xA;    +video_output_get_render_context(self: VideoOutput*): mpv_render_context*&#xA;    +video_output_get_width(self: VideoOutput*): gint64&#xA;    +video_output_get_height(self: VideoOutput*): gint64&#xA;    +video_output_get_texture_id(self: VideoOutput*): gint64&#xA;    +video_output_notify_texture_update(VideoOutput* self);&#xA;  }&#xA;&#xA;  class TextureGL {&#xA;    -guint32 name&#xA;    -guint32 fbo&#xA;    -guint32 current_width&#xA;    -guint32 current_height&#xA;    -VideoOutput* video_output&#xA;    texture_gl_populate_texture(texture: FlTextureGL*, target: guint32*, name: guint32*, width: guint32*, height: guint32*, error: GError**): gboolean&#xA;  }&#xA;&#xA;  class TextureSW {&#xA;    -guint32 current_width&#xA;    -guint32 current_height&#xA;    -VideoOutput* video_output&#xA;    texture_sw_copy_pixels(texture: FlPixelBufferTexture*, buffer: const uint8_t**, width: uint32_t*, height: uint32_t*, error: GError**): gboolean&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; is used for leveraging audio &amp;amp; video playback.&lt;/p&gt; &#xA;&lt;h3&gt;package:media_kit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt; is entirely written in Dart. It uses dart:ffi to invoke native C API of libmpv through it&#39;s shared libraries. All the callback management, event-&lt;code&gt;Stream&lt;/code&gt;s, other methods to control playback of audio/video are implemented in Dart with the help of FFI. Event management i.e. &lt;code&gt;position&lt;/code&gt;, &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;bitrate&lt;/code&gt;, &lt;code&gt;audioParams&lt;/code&gt; &lt;code&gt;Stream&lt;/code&gt;s are important to render changes in the UI.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/37022&#34;&gt;big limitation with FFI in Dart SDK&lt;/a&gt; has been that it does not support async callbacks from another thread. Learn more about this at: &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/37022&#34;&gt;dart/sdk#37022&lt;/a&gt;. Following situation will explain better:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you pass a function pointer from Dart to C code, you can invoke it fine. But, as soon as you invoke it from some other thread on the native side, Dart VM will instantly crash. This feature is important because most events take place on a background thread.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;However, I could easily do this within Dart because &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; offers an &#34;event polling&#34;-like way to listen to events. I got awesome idea to spawn a background &lt;a href=&#34;https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html&#34;&gt;&lt;code&gt;Isolate&lt;/code&gt;&lt;/a&gt;, where I run the event-loop. I get the memory address of each event and forward it outside the &lt;a href=&#34;https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html&#34;&gt;&lt;code&gt;Isolate&lt;/code&gt;&lt;/a&gt; with the help of &lt;a href=&#34;https://api.dart.dev/stable/2.18.6/dart-isolate/ReceivePort-class.html&#34;&gt;&lt;code&gt;ReceivePort&lt;/code&gt;&lt;/a&gt;, where I finally interpret it using more FFI code. I have explained this in detail within &lt;a href=&#34;https://github.com/alexmercerind/media_kit/raw/master/media_kit/lib/src/libmpv/core/initializer.dart&#34;&gt;the in-code comments of initializer.dart, where I had to perform a lot more trickery to get this to work&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This solved the issue of events &amp;amp; audio playback within 100% Dart using FFI.&lt;/p&gt; &#xA;&lt;p&gt;However, no such &#34;event-polling&#34; like API is possible for video rendering. It won&#39;t be performant to constantly do polling of video frames off a thread &amp;amp; forward frames back to primary thread for rendering. &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; does not have any such API anyway. So, I created new package &lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;&lt;code&gt;package:media_kit_video&lt;/code&gt;&lt;/a&gt; for specifically offering platform-specific video playback implementation which internally handles Flutter&#39;s Texture Registry API &amp;amp; libmpv&#39;s OpenGL rendering API. This package only consumes the &lt;code&gt;mpv_handle*&lt;/code&gt; (which can be shared as primitive &lt;code&gt;int&lt;/code&gt; value easily) of the instance (created with &lt;a href=&#34;https://github.com/alexmercerind/media_kit&#34;&gt;package:media_kit&lt;/a&gt; through FFI) to setup a new viewport. Detailed implementation is discussed below.&lt;/p&gt; &#xA;&lt;h3&gt;package:media_kit_video&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; gives access to C API for rendering hardware-accelerated video output using OpenGL. See: &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/libmpv/render.h&#34;&gt;render.h&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/mpv-player/mpv/raw/master/libmpv/render_gl.h&#34;&gt;render_gl.h&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Flutter recently added ability for Windows to &lt;a href=&#34;https://github.com/flutter/engine/pull/26840&#34;&gt;render Direct3D &lt;code&gt;ID3D11Texture2D&lt;/code&gt; textures&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The two APIs above are hardware accelerated i.e. GPU backed buffers are used. &lt;strong&gt;This is performant approach, easily capable for rendering 4K 60 FPS videos&lt;/strong&gt;, rest depends on the hardware. Since &lt;a href=&#34;https://github.com/mpv-player/mpv/tree/master/libmpv&#34;&gt;libmpv&lt;/a&gt; API is OpenGL based &amp;amp; the Texture API in Flutter is Direct3D based, &lt;a href=&#34;https://github.com/google/angle&#34;&gt;ANGLE (Almost Native Graphics Layer Engine)&lt;/a&gt; is used for interop, which translates the OpenGL ES 2.0 calls into Direct3D.&lt;/p&gt; &#xA;&lt;p&gt;This hardware accelerated video output requires DirectX 11 or higher. Most Windows systems with either integrated or discrete GPUs should support this already. On systems where Direct3D fails to load due to missing graphics drivers or unsupported feature-level or DirectX version etc. a fallback pixel-buffer based software renderer is used. This means that video is rendered by CPU &amp;amp; every frame is copied back to the RAM. This will cause some redundant load on the CPU, result in decreased battery life &amp;amp; may not play higher resolution videos properly. However, it works well.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Windows 7 &amp;amp; 8.x also seem to be working correctly. &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/28951144/212947036-4a2430d6-729e-47d7-a356-c8cc8534a1aa.jpg&#34; alt=&#34;0&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/28951144/212947046-cc8d441c-96f8-4437-9f59-b4613ca73f2a.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can visit my &lt;a href=&#34;https://github.com/alexmercerind/flutter-windows-ANGLE-OpenGL-Direct3D-Interop&#34;&gt;experimentation repository&lt;/a&gt; to see a minimal example showing OpenGL ES rendering inside Flutter Windows.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;On Flutter Linux, &lt;a href=&#34;https://github.com/flutter/engine/pull/24916&#34;&gt;both OpenGL (H/W) &amp;amp; pixel buffer (S/W) APIs&lt;/a&gt; are available for rendering on Texture widget.&lt;/p&gt; &#xA;&lt;h2&gt;Outcomes&lt;/h2&gt; &#xA;&lt;p&gt;4K video playback on entry-level AMD Ryzen 3 2200U processor with Radeon Vega 3 Mobile Graphics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTES:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See process specific CPU &amp;amp; GPU usage (media_kit_test.exe). Overall CPU usage is high due to screen recording.&lt;/li&gt; &#xA; &lt;li&gt;Memory usage is higher because of higher resolution 4K video. General usage will be lower.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/28951144/208765832-416313c9-97d4-44d0-a902-e577f3c4f3f6.mp4&#34;&gt;https://user-images.githubusercontent.com/28951144/208765832-416313c9-97d4-44d0-a902-e577f3c4f3f6.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright © 2021 &amp;amp; onwards, Hitesh Kumar Saini &amp;lt;&lt;a href=&#34;mailto:saini123hitesh@gmail.com&#34;&gt;saini123hitesh@gmail.com&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;This project &amp;amp; the work under this repository is governed by MIT license that can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/alexmercerind/media_kit/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AgoraIO-Extensions/Agora-Flutter-SDK</title>
    <updated>2023-03-05T01:49:53Z</updated>
    <id>tag:github.com,2023-03-05:/AgoraIO-Extensions/Agora-Flutter-SDK</id>
    <link href="https://github.com/AgoraIO-Extensions/Agora-Flutter-SDK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter wrapper around the Agora RTC SDKs for Android and iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;agora_rtc_engine&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/agora_rtc_engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/likes/agora_rtc_engine?logo=dart&#34; alt=&#34;Pub.dev likes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/agora_rtc_engine&#34; alt=&#34;Pub.dev popularity&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/popularity/agora_rtc_engine?logo=dart&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/agora_rtc_engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/points/agora_rtc_engine?logo=dart&#34; alt=&#34;Pub.dev points&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://pub.dev/packages/agora_rtc_engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/agora_rtc_engine.svg?include_prereleases&#34; alt=&#34;latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/agora_rtc_engine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Platform-Android%20%7C%20iOS%20%7C%20macOS%20%7C%20Web%20%7C%20Windows-blue?logo=flutter&#34; alt=&#34;Platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO-Extensions/Agora-Flutter-SDK/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/agoraio-community/flutter-uikit?color=lightgray&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.agora.io/en/join-slack/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/slack-@RTE%20Dev-blue.svg?logo=slack&#34; alt=&#34;RTE Dev Slack Link&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This Flutter plugin is a wrapper for &lt;a href=&#34;https://docs.agora.io/en/Interactive%20Broadcast/product_live?platform=All%20Platforms&#34;&gt;Agora Video SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Agora.io provides building blocks for you to add real-time voice and video communications through a simple and powerful SDK. You can integrate the Agora SDK to enable real-time communications in your own application quickly.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: The &lt;code&gt;main&lt;/code&gt; branch is major update base on the Agora Native SDK 4.x, which introduces some break changes. previous releases please see the following branches(the version &amp;lt; 6.0.0):&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/AgoraIO-Extensions/Agora-Flutter-SDK/tree/master&#34;&gt;5.x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin, please add &lt;code&gt;agora_rtc_engine&lt;/code&gt; as a dependency to your &lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/using-packages&#34;&gt;pubspec.yaml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get some basic and advanced examples from the &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO-Extensions/Agora-Flutter-SDK/main/example/lib/examples&#34;&gt;example&lt;/a&gt; folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Privacy Permission&lt;/h3&gt; &#xA;&lt;p&gt;Agora Video SDK requires &lt;code&gt;Camera&lt;/code&gt; and &lt;code&gt;Microphone&lt;/code&gt; permission to start a video call.&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;See the required device permissions from the &lt;a href=&#34;https://raw.githubusercontent.com/AgoraIO-Extensions/Agora-Flutter-SDK/main/android/src/main/AndroidManifest.xml&#34;&gt;AndroidManifest.xml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;manifest&amp;gt;&#xA;  ...&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_PHONE_STATE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.RECORD_AUDIO&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.CAMERA&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.MODIFY_AUDIO_SETTINGS&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_NETWORK_STATE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_WIFI_STATE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.WAKE_LOCK&#34; /&amp;gt;&#xA;  &amp;lt;uses-permission android:name=&#34;android.permission.READ_PRIVILEGED_PHONE_STATE&#34;&#xA;    tools:ignore=&#34;ProtectedPermissions&#34; /&amp;gt;&#xA;  ...&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS &amp;amp; macOS&lt;/h4&gt; &#xA;&lt;p&gt;Open the &lt;code&gt;Info.plist&lt;/code&gt; and add:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Privacy - Microphone Usage Description&lt;/code&gt;，and add some description into the &lt;code&gt;Value&lt;/code&gt; column.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Privacy - Camera Usage Description&lt;/code&gt;, and add some description into the &lt;code&gt;Value&lt;/code&gt; column.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multiple Platforms&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://pub.dev/packages/agora_rtc_engine&#34;&gt;agora_rtc_engine&lt;/a&gt; supports Android/iOS/macOS/Windows, but not support Web yet.&lt;/p&gt; &#xA;&lt;h2&gt;API Reference Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-ref.agora.io/en/voice-sdk/flutter/6.x/API/rtc_api_overview_ng.html&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-ref.agora.io/en/voice-sdk/android/4.x/API/rtc_api_overview_ng.html&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-ref.agora.io/en/voice-sdk/ios/4.x/API/rtc_api_overview_ng.html&#34;&gt;iOS/macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-ref.agora.io/en/video-sdk/cpp/4.x/API/rtc_api_overview_ng.html&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-ref.agora.io/en/video-sdk/web/4.x/index.html&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have any problems or suggestions regarding the sample projects, feel free to file an &lt;a href=&#34;https://github.com/AgoraIO-Community/agora_rtc_engine/issues&#34;&gt;issue&lt;/a&gt; OR pull request.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;To help work on this sdk, please refer to &lt;a href=&#34;https://github.com/AgoraIO/agora_rtc_engine/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check our &lt;a href=&#34;https://docs.agora.io/en/faq&#34;&gt;FAQ&lt;/a&gt; to see if your issue has been recorded.&lt;/li&gt; &#xA; &lt;li&gt;Dive into &lt;a href=&#34;https://github.com/AgoraIO&#34;&gt;Agora SDK Samples&lt;/a&gt; to see more tutorials.&lt;/li&gt; &#xA; &lt;li&gt;Take a look at &lt;a href=&#34;https://github.com/AgoraIO-usecase&#34;&gt;Agora Use Case&lt;/a&gt; for more complicated real use case.&lt;/li&gt; &#xA; &lt;li&gt;Repositories managed by developer communities can be found at &lt;a href=&#34;https://github.com/AgoraIO-Community&#34;&gt;Agora Community&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you encounter problems during integration, feel free to ask questions in &lt;a href=&#34;https://stackoverflow.com/questions/tagged/agora.io&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.agora.io/en/video-call-4.x-beta/release_flutter_ng?platform=Flutter&#34;&gt;Release notes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws-amplify/amplify-flutter</title>
    <updated>2023-03-05T01:49:53Z</updated>
    <id>tag:github.com,2023-03-05:/aws-amplify/amplify-flutter</id>
    <link href="https://github.com/aws-amplify/amplify-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative library with an easy-to-use interface for building Flutter applications on AWS.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/aws-mobile-hub-images/aws-amplify-logo.png&#34; alt=&#34;AWS Amplify&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/aws-amplify/amplify-flutter/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/aws-amplify/amplify-flutter/tree/main.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Amplify Flutter&lt;/h2&gt; &#xA;&lt;p&gt;AWS Amplify provides a declarative and easy-to-use interface across different categories of cloud operations. Our default implementation works with Amazon Web Services (AWS), but AWS Amplify is designed to be open and pluggable for any custom backend or service. See &lt;a href=&#34;https://docs.amplify.aws&#34;&gt;AWS Amplify&lt;/a&gt; for further details about the Amplify Framework.&lt;/p&gt; &#xA;&lt;p&gt;We are iterating and looking for feedback and collaboration, so please &lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/issues/5&#34;&gt;&lt;strong&gt;let us know your feedback&lt;/strong&gt;&lt;/a&gt; on our direction and roadmap.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/start/getting-started/setup/q/integration/flutter&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/tree/main/example&#34;&gt;Example Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/issues/5&#34;&gt;Roadmap/Provide Feedback&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;For breaking changes from the developer preview versions please refer to this &lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/issues/274&#34;&gt;issue&lt;/a&gt; for migration details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Amplify Categories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/auth/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt;: APIs and building blocks for developers who want to create user authentication experiences with Amazon Cognito.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_auth_cognito&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_auth_cognito.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/analytics/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;Analytics&lt;/strong&gt;&lt;/a&gt;: Easily collect analytics data for your app with Pinpoint. Analytics data includes user sessions and other custom events that you want to track in your app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_analytics_pinpoint&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_analytics_pinpoint.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/storage/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/a&gt;: Provides a simple mechanism for managing user content for your app in public, protected or private storage buckets with Amazon S3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_storage_s3&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_storage_s3.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/datastore/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;DataStore&lt;/strong&gt;&lt;/a&gt;: A programming model for leveraging shared and distributed data without writing additional code for offline and online scenarios, which makes working with distributed, cross-user data just as simple as working with local-only data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_datastore&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_datastore.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/restapi/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;API (Rest)&lt;/strong&gt;&lt;/a&gt;: Provides a simple solution when making HTTP requests. It provides an automatic, lightweight signing process which complies with AWS Signature Version 4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_api&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_api.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;API (GraphQL)&lt;/strong&gt;&lt;/a&gt;: Interact with your GraphQL server or AWS AppSync API with an easy-to-use &amp;amp; configured GraphQL client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_api&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_api.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Category / Platform Support&lt;/h2&gt; &#xA;&lt;h3&gt;Stable Release&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Analytics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;API (REST)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;API (GraphQL)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Authentication&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataStore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Storage&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Developer Preview Release&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Analytics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;API (REST)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;API (GraphQL)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Authentication&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataStore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔴&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Storage&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;To Be Implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Predictions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Storage Hub Events (Listening to the Amplify Storage events)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Amplify for Flutter currently supports &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;Android&lt;/strong&gt; platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/start/q/integration/flutter&#34;&gt;Getting Started with Amplify Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/&#34;&gt;Amplify Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/project-setup/prereq/q/platform/flutter#install-and-configure-the-amplify-cli&#34;&gt;Install the Amplify CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-flutter/main/CONTRIBUTING.md&#34;&gt;Contributing to Amplify Flutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flutter Development Guide&lt;/h2&gt; &#xA;&lt;p&gt;Amplify for Flutter is an open-source project and welcomes contributions from the Flutter community, see &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-flutter/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/project-setup/prereq/q/platform/flutter#option-1-watch-the-video-guide&#34;&gt;Amplify CLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting Started with Flutter app development and Amplify&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Install Amplify in a Flutter project&lt;/li&gt; &#xA; &lt;li&gt;Add basic Amplify functionality to your project using one of the supported categories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone git@github.com:aws-amplify/amplify-flutter.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your Flutter project. If you do not have an active Flutter project, you can create one after installing the &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;Flutter development tooling&lt;/a&gt; and running &lt;code&gt;flutter create &amp;lt;project-name&amp;gt;&lt;/code&gt; in your terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the Amplify CLI, run &lt;code&gt;amplify init&lt;/code&gt; from the root of your project:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.amplify.aws/lib/project-setup/prereq/q/platform/flutter#install-and-configure-the-amplify-cli&#34;&gt;Amplify CLI Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==&amp;gt; amplify init&#xA;Note: It is recommended to run this command from the root of your app directory&#xA;? Enter a name for the project helloAmplify&#xA;? Enter a name for the environment dev&#xA;? Choose your default editor: Visual Studio Code&#xA;? Choose the type of app that you\&#39;re building flutter&#xA;Please tell us about your project&#xA;Only the following resource types are supported:&#xA; * Auth&#xA; * Analytics&#xA; * Storage&#xA; * API&#xA;? Where do you want to store your configuration file? ./lib/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Amplify categories (choose defaults for this example):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ amplify add auth&#xA;$ amplify add analytics&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push changes to the cloud to provision the backend resources:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ amplify push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your pubspec.yaml file, add the following to &lt;code&gt;dependencies&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Do not include dependencies in your &lt;code&gt;pubspec&lt;/code&gt; file that you are not using in your app. This can cause a configuration error in the underlying SDK.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  flutter:&#xA;    sdk: flutter&#xA;  amplify_flutter:&#xA;    path: /{path to your local amplify-flutter}/amplify-flutter/packages/amplify_flutter&#xA;  amplify_analytics_pinpoint:&#xA;    path: /{path to your local amplify-flutter}/amplify-flutter/packages/amplify_analytics_pinpoint&#xA;  amplify_auth_cognito:&#xA;    path: /{path to your local amplify-flutter}/amplify-flutter/packages/amplify_auth_cognito&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;From the terminal run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;In your main.dart file, add:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:amplify_flutter/amplify_flutter.dart&#39;;&#xA;import &#39;package:amplify_analytics_pinpoint/amplify_analytics_pinpoint.dart&#39;;&#xA;import &#39;package:amplify_auth_cognito/amplify_auth_cognito.dart&#39;;&#xA;&#xA;import &#39;amplifyconfiguration.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MyApp());&#xA;}&#xA;&#xA;class MyApp extends StatefulWidget {&#xA;  @override&#xA;  _MyAppState createState() =&amp;gt; _MyAppState();&#xA;}&#xA;&#xA;class _MyAppState extends State&amp;lt;MyApp&amp;gt; {&#xA;  bool _amplifyConfigured = false;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;  }&#xA;&#xA;  void _configureAmplify() async {&#xA;    if (!mounted) return;&#xA;&#xA;    // Add Pinpoint and Cognito Plugins&#xA;    Amplify.addPlugin(AmplifyAuthCognito());&#xA;    Amplify.addPlugin(AmplifyAnalyticsPinpoint());&#xA;&#xA;    // Once Plugins are added, configure Amplify&#xA;    try {&#xA;      await Amplify.configure(amplifyconfig);&#xA;      setState(() {&#xA;        _amplifyConfigured = true;&#xA;      });&#xA;    } on AmplifyAlreadyConfiguredException {&#xA;      print(&#xA;          &#34;Amplify was already configured. Looks like app restarted on android.&#34;);&#xA;    }&#xA;&#xA;  }&#xA;&#xA;  // Send an event to Pinpoint&#xA;  void _recordEvent() async {&#xA;    AnalyticsEvent event = AnalyticsEvent(&#39;test&#39;);&#xA;    event.properties.addBoolProperty(&#39;boolKey&#39;, true);&#xA;    event.properties.addDoubleProperty(&#39;doubleKey&#39;, 10.0);&#xA;    event.properties.addIntProperty(&#39;intKey&#39;, 10);&#xA;    event.properties.addStringProperty(&#39;stringKey&#39;, &#39;stringValue&#39;);&#xA;    Amplify.Analytics.recordEvent(event: event);&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;          appBar: AppBar(&#xA;            title: const Text(&#39;Amplify example app&#39;),&#xA;          ),&#xA;          body: ListView(padding: EdgeInsets.all(10.0), children: &amp;lt;Widget&amp;gt;[&#xA;            Center(&#xA;              child: Column (&#xA;                children: [&#xA;                  const Padding(padding: EdgeInsets.all(5.0)),&#xA;                  ElevatedButton(&#xA;                    onPressed: _amplifyConfigured ? null : _configureAmplify,&#xA;                    child: const Text(&#39;configure Amplify&#39;)&#xA;                  ),&#xA;                  ElevatedButton(&#xA;                    onPressed: _amplifyConfigured ? _recordEvent : null,&#xA;                    child: const Text(&#39;record event&#39;)&#xA;                  )&#xA;                ]&#xA;              ),&#xA;            )&#xA;          ])&#xA;      )&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For iOS builds complete the following steps (from the root of your project):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rm ios/Podfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter build ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify the &lt;code&gt;ios/Podfile&lt;/code&gt; and replace the second line with: &lt;code&gt;platform :ios, &#39;11.0&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This ensures that your Flutter project is running the same ios version that the Amplify plugins are built on.&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;From the root of your project, execute &lt;code&gt;flutter run&lt;/code&gt; in the terminal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that an Android or iOS device is already running; this can be a virtual device started from Android Studio.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Click &lt;strong&gt;Configure Amplify&lt;/strong&gt;, then &lt;strong&gt;Record Event&lt;/strong&gt;. From the terminal (in the root of your project) run &lt;code&gt;amplify console analytics&lt;/code&gt;. This will open the Amazon Pinpoint console for your project in your default web browser. Within about a minute you should start seeing the events populating in the Events section of then Pinpoint console.&lt;/p&gt; &#xA;&lt;p&gt;For further documentation and Amplify Category API usage, see the &lt;a href=&#34;https://docs.amplify.aws/lib/q/platform/flutter&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Flutter and the related logo are trademarks of Google LLC. We are not endorsed by or affiliated with Google LLC.&lt;/p&gt;</summary>
  </entry>
</feed>