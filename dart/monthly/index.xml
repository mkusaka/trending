<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:49:46Z</updated>
  <subtitle>Monthly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>honjow/FEhViewer</title>
    <updated>2022-09-01T01:49:46Z</updated>
    <id>tag:github.com,2022-09-01:/honjow/FEhViewer</id>
    <link href="https://github.com/honjow/FEhViewer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An e-hentai/exhentai app make on flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FEhViewer&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/honjow/FEhViewer/raw/master/README_cn.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitHub.com/honjow/FEhViewer/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/honjow/FEhViewer/total.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/honjow/FEhViewer/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/honjow/FEhViewer/latest/total&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/honjow/FEhViewer/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/honjow/FEhViewer&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/honjow/FEhViewer&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/joinchat/AEj27KMQe0JiMmUx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Telegram-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=fr6P5pYFbbdzh9djpE0QEMcX0sJd9ISj&amp;amp;jump_from=webapi&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-QQ-blue.svg?sanitize=true&#34; alt=&#34;QQ&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;An Unofficial e-hentai app make on flutter&lt;/p&gt; &#xA;&lt;h2&gt;üîç Translations Wanted üîç&lt;/h2&gt; &#xA;&lt;p&gt;Please submit a pull request if you want to help with translation.&lt;/p&gt; &#xA;&lt;p&gt;App Strings: &lt;code&gt;lib/l10n/{lang}.arb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation for iOS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get the ipa file from &lt;a href=&#34;https://github.com/honjow/FEhViewer/releases/latest&#34;&gt;Releases&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use some software like &lt;a href=&#34;https://altstore.io&#34;&gt;AltStore&lt;/a&gt; to install the ipa file on your device. Or &lt;a href=&#34;https://config-feh.vercel.app/AltStore.json&#34;&gt;AltStore.json&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Descriptions&lt;/h2&gt; &#xA;&lt;p&gt;The main reference for UI is &lt;a href=&#34;https://github.com/kayanouriko/E-HentaiViewer&#34;&gt;E-HentaiViewer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Current Issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List sliding may have a small lag. Not as smooth as native apps&lt;/li&gt; &#xA; &lt;li&gt;Does miss some essential features (still under development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;The code and logic of the following projects are used and referenced for development&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kayanouriko/E-HentaiViewer&#34;&gt;E-HentaiViewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seven332/EhViewer&#34;&gt;EhViewer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;EhTagTranslation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EhTagTranslation/Database&#34;&gt;EhTagTranslation/Database&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KeepSOBP&#34;&gt;KeepSOBP&lt;/a&gt; Korean translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pursel&#34;&gt;pursel&lt;/a&gt;, &lt;a href=&#34;https://github.com/Gigas002&#34;&gt;Gigas002&lt;/a&gt; -- Russian translation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;h3&gt;Home Page List&lt;/h3&gt; &#xA;&lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/home1.jpg&#34;&gt; &#xA;&lt;h3&gt;Gallery&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/gallery1.jpg&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/gallery2.jpg&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/gallery3.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/search1.jpg&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/search2.jpg&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/search3.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/read1.jpg&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/honjow/FEhViewer/master/screenshot/read2.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Function&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Popula,Watch,Home,Favorites&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List View,Waterfall View Switch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Gallery information view&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Gallery Image view&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically turn pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; eh/ex switch&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tag search&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Login&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search term matching tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Advanced search&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Save and share images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cache optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Advanced settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; post comments, vote up Ôºåvote down&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; watched and user tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Download&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;h2&gt;Dependency projects/plugins (partial)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;network: &lt;a href=&#34;https://pub.dev/packages/dio&#34;&gt;dio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Status Management: &lt;a href=&#34;https://pub.dev/packages/get&#34;&gt;getx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;db: &lt;a href=&#34;https://pub.dev/packages/sqflite&#34;&gt;sqflite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data Persistence: &lt;a href=&#34;https://pub.dev/packages/shared_preferences&#34;&gt;shared_preferences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;intl: &lt;a href=&#34;https://pub.dev/packages/intl&#34;&gt;intl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Image: &lt;a href=&#34;https://pub.dev/packages/cached_network_image&#34;&gt;cached_network_image&lt;/a&gt;„ÄÅ&lt;a href=&#34;https://pub.dev/packages/extended_image&#34;&gt;extended_image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About compiling&lt;/h2&gt; &#xA;&lt;p&gt;flutter version is the latest release version &lt;br&gt; rename &lt;code&gt;/lib/config/config.dart.sample&lt;/code&gt; to &lt;code&gt;/lib/config/config.dart&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mitesh77/Best-Flutter-UI-Templates</title>
    <updated>2022-09-01T01:49:46Z</updated>
    <id>tag:github.com,2022-09-01:/mitesh77/Best-Flutter-UI-Templates</id>
    <link href="https://github.com/mitesh77/Best-Flutter-UI-Templates" rel="alternate"></link>
    <summary type="html">&lt;p&gt;completely free for everyone. Its build-in Flutter Dart.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Best-Flutter-UI-Templates&lt;/h1&gt; &#xA;&lt;p&gt;completely free for everyone. Its build-in Flutter Dart.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/mitesh&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; height=&#34;60&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/best_flutter_ui_templates/assets/introduction_animation/introduction_animation.png&#34; alt=&#34;Image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/best_flutter_ui_templates/assets/hotel/hotel_booking.png&#34; alt=&#34;Image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/best_flutter_ui_templates/assets/fitness_app/fitness_app.png&#34; alt=&#34;Image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/images/custom_drawer.png&#34; alt=&#34;Image&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/best_flutter_ui_templates/assets/design_course/design_course.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Some Screenshots&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/images/introduction_animation.gif&#34; height=&#34;300em&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/images/hotel_booking.gif&#34; height=&#34;300em&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/images/custom_drawer.gif&#34; height=&#34;300em&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/images/fitness_app.gif&#34; height=&#34;300em&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mitesh77/Best-Flutter-UI-Templates/master/images/design_course.gif&#34; height=&#34;300em&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>juliansteenbakker/mobile_scanner</title>
    <updated>2022-09-01T01:49:46Z</updated>
    <id>tag:github.com,2022-09-01:/juliansteenbakker/mobile_scanner</id>
    <link href="https://github.com/juliansteenbakker/mobile_scanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A universal scanner for Flutter based on MLKit. Uses CameraX on Android and AVFoundation on iOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mobile_scanner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/mobile_scanner&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/mobile_scanner.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/lint&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-lint-4BC0F5.svg?sanitize=true&#34; alt=&#34;style: lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/juliansteenbakker/mobile_scanner/actions/workflows/flutter.yml&#34;&gt;&lt;img src=&#34;https://github.com/juliansteenbakker/mobile_scanner/actions/workflows/flutter.yml/badge.svg?sanitize=true&#34; alt=&#34;mobile_scanner&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/juliansteenbakker&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/juliansteenbakker?label=sponsor%20me&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A universal barcode and QR code scanner for Flutter based on MLKit. Uses CameraX on Android, AVFoundation on iOS and Apple Vision &amp;amp; AVFoundation on macOS.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;SDK 21 and newer. Reason: CameraX requires at least SDK 21. Also, make sure you upgrade kotlin to the latest version in your project.&lt;/p&gt; &#xA;&lt;p&gt;This packages uses the &lt;strong&gt;bundled version&lt;/strong&gt; of MLKit Barcode-scanning for Android. This version is more accurate and immediately available to devices. However, this version will increas the size of the app with approximately 3 to 10 MB. The alternative for this is to use the &lt;strong&gt;unbundled version&lt;/strong&gt; of MLKit Barcode-scanning for Android. This version is older than the bundled version however this only increases the size by around 600KB.&lt;/p&gt; &#xA;&lt;p&gt;To use this version you must alter the mobile_scanner gradle file to replace &lt;code&gt;com.google.mlkit:barcode-scanning:17.0.2&lt;/code&gt; with &lt;code&gt;com.google.android.gms:play-services-mlkit-barcode-scanning:18.0.0&lt;/code&gt;. Keep in mind that if you alter the gradle files directly in your project it can be overriden when you update your pubspec.yaml. I am still searching for a way to properly replace the module in gradle but have yet to find one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/ml-kit/vision/barcode-scanning/android&#34;&gt;You can read more about the difference between the two versions here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS 11 and newer. Reason: MLKit for iOS requires at least iOS 10 and a &lt;a href=&#34;https://developers.google.com/ml-kit/migration/ios&#34;&gt;64bit device&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add the following keys to your Info.plist file, located in &#xA;  &lt;project root&gt;&#xA;   /ios/Runner/Info.plist:&#xA;  &lt;/project&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;NSCameraUsageDescription - describe why your app needs access to the camera. This is called Privacy - Camera Usage Description in the visual editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you want to use the local gallery feature from &lt;a href=&#34;https://pub.dev/packages/image_picker&#34;&gt;image_picker&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;NSPhotoLibraryUsageDescription - describe why your app needs permission for the photo library. This is called Privacy - Photo Library Usage Description in the visual editor.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;macOS 10.13 or newer. Reason: Apple Vision library.&lt;/p&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;code&gt;web/index.html&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Web only supports QR codes for now. Do you have experience with Flutter Web development? &lt;a href=&#34;https://github.com/juliansteenbakker/mobile_scanner/issues/54&#34;&gt;Help me with migrating from jsQR to qr-scanner for full barcode support!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features Supported&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;analyzeImage (Gallery)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úî&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚ùå&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚ùå&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import &lt;code&gt;package:mobile_scanner/mobile_scanner.dart&lt;/code&gt;, and use the widget with or without the controller.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t provide a controller, you can&#39;t control functions like the torch(flash) or switching camera.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t set allowDuplicates to false, you can get multiple scans in a very short time, causing things like pop() to fire lots of times.&lt;/p&gt; &#xA;&lt;p&gt;Example without controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobile_scanner/mobile_scanner.dart&#39;;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: const Text(&#39;Mobile Scanner&#39;)),&#xA;      body: MobileScanner(&#xA;          allowDuplicates: false,&#xA;          onDetect: (barcode, args) {&#xA;            if (barcode.rawValue == null) {&#xA;              debugPrint(&#39;Failed to scan Barcode&#39;);&#xA;            } else {&#xA;              final String code = barcode.rawValue!;&#xA;              debugPrint(&#39;Barcode found! $code&#39;);&#xA;            }&#xA;          }),&#xA;    );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example with controller and initial values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobile_scanner/mobile_scanner.dart&#39;;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: const Text(&#39;Mobile Scanner&#39;)),&#xA;      body: MobileScanner(&#xA;          allowDuplicates: false,&#xA;          controller: MobileScannerController(&#xA;            facing: CameraFacing.front, torchEnabled: true),&#xA;          onDetect: (barcode, args) {&#xA;            if (barcode.rawValue == null) {&#xA;              debugPrint(&#39;Failed to scan Barcode&#39;);&#xA;            } else {&#xA;              final String code = barcode.rawValue!;&#xA;              debugPrint(&#39;Barcode found! $code&#39;);&#xA;            }&#xA;          }),&#xA;    );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example with controller and torch &amp;amp; camera controls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobile_scanner/mobile_scanner.dart&#39;;&#xA;&#xA;  MobileScannerController cameraController = MobileScannerController();&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;        appBar: AppBar(&#xA;          title: const Text(&#39;Mobile Scanner&#39;),&#xA;          actions: [&#xA;            IconButton(&#xA;              color: Colors.white,&#xA;              icon: ValueListenableBuilder(&#xA;                valueListenable: cameraController.torchState,&#xA;                builder: (context, state, child) {&#xA;                  switch (state as TorchState) {&#xA;                    case TorchState.off:&#xA;                      return const Icon(Icons.flash_off, color: Colors.grey);&#xA;                    case TorchState.on:&#xA;                      return const Icon(Icons.flash_on, color: Colors.yellow);&#xA;                  }&#xA;                },&#xA;              ),&#xA;              iconSize: 32.0,&#xA;              onPressed: () =&amp;gt; cameraController.toggleTorch(),&#xA;            ),&#xA;            IconButton(&#xA;              color: Colors.white,&#xA;              icon: ValueListenableBuilder(&#xA;                valueListenable: cameraController.cameraFacingState,&#xA;                builder: (context, state, child) {&#xA;                  switch (state as CameraFacing) {&#xA;                    case CameraFacing.front:&#xA;                      return const Icon(Icons.camera_front);&#xA;                    case CameraFacing.back:&#xA;                      return const Icon(Icons.camera_rear);&#xA;                  }&#xA;                },&#xA;              ),&#xA;              iconSize: 32.0,&#xA;              onPressed: () =&amp;gt; cameraController.switchCamera(),&#xA;            ),&#xA;          ],&#xA;        ),&#xA;        body: MobileScanner(&#xA;            allowDuplicates: false,&#xA;            controller: cameraController,&#xA;            onDetect: (barcode, args) {&#xA;              if (barcode.rawValue == null) {&#xA;                debugPrint(&#39;Failed to scan Barcode&#39;);&#xA;              } else {&#xA;                final String code = barcode.rawValue!;&#xA;                debugPrint(&#39;Barcode found! $code&#39;);&#xA;              }&#xA;            }));&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example with controller and returning images&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobile_scanner/mobile_scanner.dart&#39;;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: const Text(&#39;Mobile Scanner&#39;)),&#xA;      body: MobileScanner(&#xA;        controller: MobileScannerController(&#xA;          facing: CameraFacing.front,&#xA;          torchEnabled: true,&#xA;          returnImage: true,&#xA;        ),&#xA;        onDetect: (barcode, args) {&#xA;          if (barcode.rawValue == null) {&#xA;            debugPrint(&#39;Failed to scan Barcode&#39;);&#xA;          } else {&#xA;            final String code = barcode.rawValue!;&#xA;            debugPrint(&#39;Barcode found! $code&#39;);&#xA;&#xA;            debugPrint(&#xA;                &#39;Image returned! length: ${barcode.image!.lengthInBytes}b&#39;);&#xA;            showDialog(&#xA;              context: context,&#xA;              builder: (context) =&amp;gt; Image(image: MemoryImage(barcode.image!)),&#xA;            );&#xA;            Future.delayed(const Duration(seconds: 2), () {&#xA;              Navigator.pop(context);&#xA;            });&#xA;          }&#xA;        },&#xA;      ),&#xA;    );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>