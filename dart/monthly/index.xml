<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:11:13Z</updated>
  <subtitle>Monthly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sub6Resources/flutter_html</title>
    <updated>2023-10-01T02:11:13Z</updated>
    <id>tag:github.com,2023-10-01:/Sub6Resources/flutter_html</id>
    <link href="https://github.com/Sub6Resources/flutter_html" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter widget for rendering static html as Flutter widgets (Will render over 80 different html tags!)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_html&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_html&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_html.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Sub6Resources/flutter_html&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Sub6Resources/flutter_html/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/Sub6Resources/flutter_html&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/Sub6Resources/flutter_html.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter widget for rendering HTML and CSS as Flutter widgets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(context) {&#xA;  return Html(&#xA;    data: &#34;&#34;&#34;&#xA;        &amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;p&amp;gt;&amp;lt;span style=&#34;font-style:italic;&#34;&amp;gt;flutter_html&amp;lt;/span&amp;gt; supports a variety of HTML and CSS tags and attributes.&amp;lt;/p&amp;gt;&#xA;        &amp;lt;p&amp;gt;Over a hundred static tags are supported out of the box.&amp;lt;/p&amp;gt;&#xA;        &amp;lt;p&amp;gt;Or you can even define your own using an &amp;lt;code&amp;gt;Extension&amp;lt;/code&amp;gt;: &amp;lt;flutter&amp;gt;&amp;lt;/flutter&amp;gt;&amp;lt;/p&amp;gt;&#xA;        &amp;lt;p&amp;gt;Its easy to add custom styles to your Html as well using the &amp;lt;code&amp;gt;Style&amp;lt;/code&amp;gt; class:&amp;lt;/p&amp;gt;&#xA;        &amp;lt;p class=&#34;fancy&#34;&amp;gt;Here&#39;s a fancy &amp;amp;lt;p&amp;amp;gt; element!&amp;lt;/p&amp;gt;&#xA;        &#34;&#34;&#34;,&#xA;    extensions: [&#xA;      TagExtension(&#xA;        tagsToExtend: {&#34;flutter&#34;},&#xA;        child: const FlutterLogo(),&#xA;      ),&#xA;    ],&#xA;    style: {&#xA;      &#34;p.fancy&#34;: Style(&#xA;        textAlign: TextAlign.center,&#xA;        padding: const EdgeInsets.all(16),&#xA;        backgroundColor: Colors.grey,&#xA;        margin: Margins(left: Margin(50, Unit.px), right: Margin.auto()),&#xA;        width: Width(300, Unit.px),&#xA;        fontWeight: FontWeight.bold,&#xA;      ),&#xA;    },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes...&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/example/screenshots/flutter_html_readme_screenshot.png&#34; alt=&#34;A screenshot showing the above code snippet rendered using flutter_html&#34;&gt; &#xA;&lt;h2&gt;Table of Contents:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/wiki/Supported-HTML-Elements&#34;&gt;Supported HTML Tags&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/wiki/Supported-CSS-Attributes&#34;&gt;Supported CSS Attributes&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#why-this-package&#34;&gt;Why flutter_html?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#migration-guides&#34;&gt;Migration Guide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#api-reference&#34;&gt;API Reference&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#constructors&#34;&gt;Constructors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#parameters&#34;&gt;Parameters Table&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#external-packages&#34;&gt;External Packages&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_all&#34;&gt;&lt;code&gt;flutter_html_all&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_audio&#34;&gt;&lt;code&gt;flutter_html_audio&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_iframe&#34;&gt;&lt;code&gt;flutter_html_iframe&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_math&#34;&gt;&lt;code&gt;flutter_html_math&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_svg&#34;&gt;&lt;code&gt;flutter_html_svg&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_table&#34;&gt;&lt;code&gt;flutter_html_table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#flutter_html_video&#34;&gt;&lt;code&gt;flutter_html_video&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#faq&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why this package?&lt;/h2&gt; &#xA;&lt;p&gt;This package is designed with simplicity in mind. Originally created to allow basic rendering of HTML content into the Flutter widget tree, this project has expanded to include support for basic styling as well!&lt;/p&gt; &#xA;&lt;p&gt;If you need something more robust and customizable, the package also provides a number of extension APIs for extremely granular control over widget rendering!&lt;/p&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/wiki/Migration-Guides#300&#34;&gt;3.0.0 Migration Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API Reference:&lt;/h2&gt; &#xA;&lt;p&gt;For the full API reference, see &lt;a href=&#34;https://pub.dev/documentation/flutter_html/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a full example, see &lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/tree/master/example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below, you will find brief descriptions of the parameters the&lt;code&gt;Html&lt;/code&gt; widget accepts and some code snippets to help you use this package.&lt;/p&gt; &#xA;&lt;h3&gt;Constructors:&lt;/h3&gt; &#xA;&lt;p&gt;The package currently has two different constructors - &lt;code&gt;Html()&lt;/code&gt; and &lt;code&gt;Html.fromDom()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Html()&lt;/code&gt; constructor is for those who would like to directly pass HTML from the source to the package to be rendered.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to modify or sanitize the HTML before rendering it, then &lt;code&gt;Html.fromDom()&lt;/code&gt; is for you - you can convert the HTML string to a &lt;code&gt;Document&lt;/code&gt; and use its methods to modify the HTML as you wish. Then, you can directly pass the modified &lt;code&gt;Document&lt;/code&gt; to the package. This eliminates the need to parse the modified &lt;code&gt;Document&lt;/code&gt; back to a string, pass to &lt;code&gt;Html()&lt;/code&gt;, and convert back to a &lt;code&gt;Document&lt;/code&gt;, thus cutting down on load times.&lt;/p&gt; &#xA;&lt;h3&gt;Parameters:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameters&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The HTML data passed to the &lt;code&gt;Html&lt;/code&gt; widget. This is required and cannot be null when using &lt;code&gt;Html()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;document&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The DOM document passed to the &lt;code&gt;Html&lt;/code&gt; widget. This is required and cannot be null when using &lt;code&gt;Html.fromDom()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onLinkTap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. A function that defines what the widget should do when a link is tapped. The function exposes the &lt;code&gt;src&lt;/code&gt; of the link as a &lt;code&gt;String&lt;/code&gt; to use in your implementation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;extensions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. A powerful API that allows you to customize everything when rendering a specific HTML tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;shrinkWrap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. A &lt;code&gt;bool&lt;/code&gt; used while rendering different widgets to specify whether they should be shrink-wrapped or not, like &lt;code&gt;ContainerSpan&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onlyRenderTheseTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. An exclusive set of elements the &lt;code&gt;Html&lt;/code&gt; widget should render. Note that your html will be wrapped in &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; if it isn&#39;t already, so you should include those in this list.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;doNotRenderTheseTags&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. A set of tags that should not be rendered by the &lt;code&gt;Html&lt;/code&gt; widget.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional. A powerful API that allows you to customize the style that should be used when rendering a specific HTMl tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;More examples and in-depth details are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/wiki/How-To-Use-Style&#34;&gt;Style&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/wiki/How-To-Use-Extensions&#34;&gt;HtmlExtension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External Packages&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_all&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package is simply a convenience package that exports all the other external packages below. You should use this if you plan to render all the tags that require external dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_audio&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package renders audio elements using the &lt;a href=&#34;https://pub.dev/packages/chewie_audio&#34;&gt;&lt;code&gt;chewie_audio&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://pub.dev/packages/video_player&#34;&gt;&lt;code&gt;video_player&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;The package considers the attributes &lt;code&gt;controls&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;autoplay&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;muted&lt;/code&gt; when rendering the audio widget.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the &lt;code&gt;AudioHtmlExtension&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;Add the dependency to your pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub add flutter_html_audio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_html_audio/flutter_html_audio&#39;;&#xA;&#xA;Widget html = Html(&#xA;  data: myHtml,&#xA;  extensions: [&#xA;    AudioHtmlExtension(),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_iframe&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package renders iframes using the &lt;a href=&#34;https://pub.dev/packages/webview_flutter&#34;&gt;&lt;code&gt;webview_flutter&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;When rendering iframes, the package considers the width, height, and sandbox attributes.&lt;/p&gt; &#xA;&lt;p&gt;Sandbox controls the JavaScript mode of the webview - a value of &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;allow-scripts&lt;/code&gt; will set &lt;code&gt;javascriptMode: JavascriptMode.unrestricted&lt;/code&gt;, otherwise it will set &lt;code&gt;javascriptMode: JavascriptMode.disabled&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the &lt;code&gt;IframeHtmlExtension&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;Add the dependency to your pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub add flutter_html_iframe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_html_iframe/flutter_html_iframe&#39;;&#xA;&#xA;Widget html = Html(&#xA;  data: myHtml,&#xA;  extensions: [&#xA;    IframeHtmlExtension(),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the &lt;code&gt;navigationDelegate&lt;/code&gt; of the webview with the &lt;code&gt;navigationDelegate&lt;/code&gt; property on &lt;code&gt;IframeHtmlExtension&lt;/code&gt;. This allows you to block or allow the loading of certain URLs.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_math&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package renders MathML elements using the &lt;a href=&#34;https://pub.dev/packages/flutter_math_fork&#34;&gt;&lt;code&gt;flutter_math_fork&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;When rendering MathML, the package takes the MathML data within the &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; tag and tries to parse it to Tex. Then, it will pass the parsed string to &lt;code&gt;flutter_math_fork&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because this package is parsing MathML to Tex, it may not support some functionalities. The current list of supported tags can be found &lt;a href=&#34;https://github.com/Sub6Resources/flutter_html/wiki/First-Party-Extensions#flutter_html_math&#34;&gt;on the Wiki&lt;/a&gt;, but some of these only have partial support at the moment.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the &lt;code&gt;MathHtmlExtension&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;Add the dependency to your pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub add flutter_html_math&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_html_math/flutter_html_math&#39;;&#xA;&#xA;Widget html = Html(&#xA;  data: myHtml,&#xA;  extensions: [&#xA;    MathHtmlExtension(),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the parsing errors, you can use the &lt;code&gt;onMathErrorBuilder&lt;/code&gt; property of &lt;code&gt;MathHtmlException&lt;/code&gt; to catch the error and potentially fix it on your end.&lt;/p&gt; &#xA;&lt;p&gt;The function exposes the parsed Tex &lt;code&gt;String&lt;/code&gt;, as well as the error and error with type from &lt;code&gt;flutter_math_fork&lt;/code&gt; as a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can analyze the error and the parsed string, and finally return a new instance of &lt;code&gt;Math.tex()&lt;/code&gt; with the corrected Tex string.&lt;/p&gt; &#xA;&lt;h4&gt;Tex&lt;/h4&gt; &#xA;&lt;p&gt;If you have a Tex string you&#39;d like to render inside your HTML you can do that using the same &lt;a href=&#34;https://pub.dev/packages/flutter_math_fork&#34;&gt;&lt;code&gt;flutter_math_fork&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;Use a custom tag inside your HTML (an example could be &lt;code&gt;&amp;lt;tex&amp;gt;&lt;/code&gt;), and place your &lt;strong&gt;raw&lt;/strong&gt; Tex string inside.&lt;/p&gt; &#xA;&lt;p&gt;Then, use the &lt;code&gt;extensions&lt;/code&gt; parameter to add the widget to render Tex. It could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget htmlWidget = Html(&#xA;  data: r&#34;&#34;&#34;&amp;lt;tex&amp;gt;i\hbar\frac{\partial}{\partial t}\Psi(\vec x,t) = -\frac{\hbar}{2m}\nabla^2\Psi(\vec x,t)+ V(\vec x)\Psi(\vec x,t)&amp;lt;/tex&amp;gt;&#34;&#34;&#34;,&#xA;  extensions: [&#xA;    TagExtension(&#xA;      tagsToExtend: {&#34;tex&#34;},&#xA;      builder: (extensionContext) {&#xA;        return Math.tex(&#xA;          extensionContext.innerHtml,&#xA;          mathStyle: MathStyle.display,&#xA;          textStyle: extensionContext.styledElement?.style.generateTextStyle(),&#xA;          onErrorFallback: (FlutterMathException e) {&#xA;            //optionally try and correct the Tex string here&#xA;            return Text(e.message);&#xA;          },&#xA;        );&#xA;      }&#xA;    ),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_svg&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package renders svg elements using the &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;&lt;code&gt;flutter_svg&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;When rendering SVGs, the package takes the SVG data within the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag and passes it to &lt;code&gt;flutter_svg&lt;/code&gt;. The &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes are considered while rendering, if given.&lt;/p&gt; &#xA;&lt;p&gt;The package also exposes a few ways to render SVGs within an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, specifically base64 SVGs, asset SVGs, and network SVGs.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the &lt;code&gt;SvgHtmlExtension&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;Add the dependency to your pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub add flutter_html_svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_html_svg/flutter_html_svg&#39;;&#xA;&#xA;Widget html = Html(&#xA;  data: myHtml,&#xA;  extensions: [&#xA;    SvgHtmlExtension(),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_table&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package renders table elements using the &lt;a href=&#34;https://pub.dev/packages/flutter_layout_grid&#34;&gt;&lt;code&gt;flutter_layout_grid&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;When rendering table elements, the package tries to calculate the best fit for each element and size its cell accordingly. &lt;code&gt;Rowspan&lt;/code&gt;s and &lt;code&gt;colspan&lt;/code&gt;s are considered in this process, so cells that span across multiple rows and columns are rendered as expected. Heights are determined intrinsically to maintain an optimal aspect ratio for the cell.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the &lt;code&gt;TableHtmlExtension&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;Add the dependency to your pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub add flutter_html_table&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_html_table/flutter_html_table&#39;;&#xA;&#xA;Widget html = Html(&#xA;  data: myHtml,&#xA;  extensions: [&#xA;    TableHtmlExtension(),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;flutter_html_video&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This package renders video elements using the &lt;a href=&#34;https://pub.dev/packages/chewie&#34;&gt;&lt;code&gt;chewie&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&#34;https://pub.dev/packages/video_player&#34;&gt;&lt;code&gt;video_player&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt; &#xA;&lt;p&gt;The package considers the attributes &lt;code&gt;controls&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;autoplay&lt;/code&gt;, &lt;code&gt;poster&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;muted&lt;/code&gt; when rendering the video widget.&lt;/p&gt; &#xA;&lt;h4&gt;Adding the &lt;code&gt;VideoHtmlExtension&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;Add the dependency to your pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub add flutter_html_video&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_html_video/flutter_html_video&#39;;&#xA;&#xA;Widget html = Html(&#xA;  data: myHtml,&#xA;  extensions: [&#xA;    VideoHtmlExtension(),&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why can&#39;t I get &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;/&#xA; &lt;video&gt;&#xA;  ` to show up?&#xA; &lt;/video&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Have you followed the instructions as described &lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#external-packages&#34;&gt;above&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;p&gt;If so, feel free to file an issue or start a discussion for some extra help.&lt;/p&gt; &#xA;&lt;h3&gt;How can I render &lt;code&gt;LaTex&lt;/code&gt; in my HTML?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/#tex&#34;&gt;above example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use this inside of a &lt;code&gt;Row()&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to use this widget inside of a &lt;code&gt;Row()&lt;/code&gt;, make sure to set &lt;code&gt;shrinkWrap: true&lt;/code&gt; and place your widget inside expanded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget row = Row(&#xA;   children: [&#xA;        Expanded(&#xA;            child: Html(&#xA;              shrinkWrap: true,&#xA;              //other params&#xA;            )&#xA;        ),&#xA;&#x9;    //whatever other widgets&#xA;   ]&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s what the example in example/lib/main.dart looks like after being run (in Chrome):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/example/screenshots/flutter_html_screenshot.png&#34; alt=&#34;A screenshot showing the result of running the example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/example/screenshots/flutter_html_screenshot1.png&#34; alt=&#34;A second screenshot showing the result of running the example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/example/screenshots/flutter_html_screenshot2.png&#34; alt=&#34;A third screenshot showing the result of running the example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Sub6Resources/flutter_html/master/example/screenshots/flutter_html_screenshot3.png&#34; alt=&#34;A fourth screenshot showing the result of running the example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>flame-engine/flame</title>
    <updated>2023-10-01T02:11:13Z</updated>
    <id>tag:github.com,2023-10-01:/flame-engine/flame</id>
    <link href="https://github.com/flame-engine/flame" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter based game engine.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;right&#34;&gt; &lt;a href=&#34;https://docs.flutter.dev/packages-and-plugins/favorites&#34;&gt; &lt;img alt=&#34;Flutter favorite&#34; width=&#34;100px&#34; src=&#34;https://github.com/flame-engine/flame/assets/744771/aa5d5acd-e82b-48bc-ad81-2ab146d72ecb&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- markdownlint-disable MD013 --&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://flame-engine.org&#34;&gt; &lt;img alt=&#34;flame&#34; width=&#34;200px&#34; src=&#34;https://user-images.githubusercontent.com/6718144/101553774-3bc7b000-39ad-11eb-8a6a-de2daa31bd64.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A Flutter-based game engine. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Pub&#34; href=&#34;https://pub.dev/packages/flame&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flame.svg?style=popout&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Test&#34; href=&#34;https://github.com/flame-engine/flame/actions?query=workflow%3Acicd+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/flame-engine/flame/workflows/cicd/badge.svg?branch=main&amp;amp;event=push&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Discord&#34; href=&#34;https://discord.gg/pxrBmy4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/509714518008528896.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Melos&#34; href=&#34;https://github.com/invertase/melos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained%20with-melos-f700ff.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- markdownlint-enable MD013 --&gt; &#xA;&lt;!-- markdownlint-disable-next-line MD002 --&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full documentation for Flame can be found on &lt;a href=&#34;https://docs.flame-engine.org/&#34;&gt;docs.flame-engine.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To change the version of the documentation, use the version selector noted with &lt;code&gt;version:&lt;/code&gt; in the top of the page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The documentation that resides in the main branch is newer than the released documentation on the docs website.&lt;/p&gt; &#xA;&lt;p&gt;Other useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flame-engine.org/&#34;&gt;The official Flame site&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://examples.flame-engine.org/&#34;&gt;Examples&lt;/a&gt; of most features which can be tried out from your browser. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To access the code for each example, press the &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; button in the top right corner.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flame-engine.org/main/tutorials/tutorials.html&#34;&gt;Tutorials&lt;/a&gt; - Some simple tutorials to get started.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/documentation/flame/latest/&#34;&gt;API Reference&lt;/a&gt; - The generated dartdoc API reference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/awesome-flame&#34;&gt;awesome-flame&lt;/a&gt; - A curated list of Tutorials, Games, Libraries and Articles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;There is a Flame community on &lt;a href=&#34;https://discord.gg/5unKpdQD78&#34;&gt;Blue Fire&#39;s Discord server&lt;/a&gt; where you can ask any of your Flame related questions.&lt;/p&gt; &#xA;&lt;p&gt;If you are more comfortable with StackOverflow, you can also create a question there. Add the &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flame&#34;&gt;Flame tag&lt;/a&gt;, to make sure that anyone following the tag can help out.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The goal of the Flame Engine is to provide a complete set of out-of-the-way solutions for common problems that games developed with Flutter might share.&lt;/p&gt; &#xA;&lt;p&gt;Some of the key features provided are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A game loop.&lt;/li&gt; &#xA; &lt;li&gt;A component/object system (FCS).&lt;/li&gt; &#xA; &lt;li&gt;Effects and particles.&lt;/li&gt; &#xA; &lt;li&gt;Collision detection.&lt;/li&gt; &#xA; &lt;li&gt;Gesture and input handling.&lt;/li&gt; &#xA; &lt;li&gt;Images, animations, sprites, and sprite sheets.&lt;/li&gt; &#xA; &lt;li&gt;General utilities to make development easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On top of those features, you can augment Flame with bridge packages. Through these libraries, you will be able to access bindings to other packages, including custom Flame components and helpers, in order to make integrations seamless.&lt;/p&gt; &#xA;&lt;p&gt;Flame officially provides bridge libraries to the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_audio&#34;&gt;flame_audio&lt;/a&gt; for &lt;a href=&#34;https://github.com/bluefireteam/audioplayers&#34;&gt;AudioPlayers&lt;/a&gt;: Play multiple audio files simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_bloc&#34;&gt;flame_bloc&lt;/a&gt; for &lt;a href=&#34;https://github.com/felangel/bloc&#34;&gt;Bloc&lt;/a&gt;: A predictable state management library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_fire_atlas&#34;&gt;flame_fire_atlas&lt;/a&gt; for &lt;a href=&#34;https://github.com/flame-engine/fire-atlas&#34;&gt;FireAtlas&lt;/a&gt;: Create texture atlases for games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_forge2d&#34;&gt;flame_forge2d&lt;/a&gt; for &lt;a href=&#34;https://github.com/flame-engine/forge2d&#34;&gt;Forge2D&lt;/a&gt;: A Box2D physics engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_isolate&#34;&gt;flame_isolate&lt;/a&gt; - Makes it easy to use &lt;a href=&#34;https://api.flutter.dev/flutter/dart-isolate/Isolate-class.html&#34;&gt;Flutter Isolates&lt;/a&gt; in a Flame game.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_lint&#34;&gt;flame_lint&lt;/a&gt; - Our set of linting (&lt;code&gt;analysis_options.yaml&lt;/code&gt;) rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_lottie&#34;&gt;flame_lottie&lt;/a&gt; - Support for &lt;a href=&#34;https://airbnb.design/lottie/&#34;&gt;Lottie&lt;/a&gt; animation in Flame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_network_assets&#34;&gt;flame_network_assets&lt;/a&gt; - Helpers to load game assets from network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_oxygen&#34;&gt;flame_oxygen&lt;/a&gt; for &lt;a href=&#34;https://github.com/flame-engine/oxygen&#34;&gt;Oxygen&lt;/a&gt;: A lightweight Entity Component System (ECS) framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_rive&#34;&gt;flame_rive&lt;/a&gt; for &lt;a href=&#34;https://rive.app/&#34;&gt;Rive&lt;/a&gt;: Create interactive animations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_svg&#34;&gt;flame_svg&lt;/a&gt; for &lt;a href=&#34;https://github.com/dnfield/flutter_svg&#34;&gt;flutter_svg&lt;/a&gt;: Draw SVG files in Flutter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flame-engine/flame/tree/main/packages/flame_tiled&#34;&gt;flame_tiled&lt;/a&gt; for &lt;a href=&#34;https://www.mapeditor.org/&#34;&gt;Tiled&lt;/a&gt;: 2D tile map level editor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The Flame Engine&#39;s top sponsors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://verygood.ventures/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flame-engine/flame/main/media/unicorn_two_toned.png&#34; alt=&#34;Very Good Ventures&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cypherstack.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flame-engine/flame/main/media/logo_cypherstack.png&#34; alt=&#34;Cypher Stack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you or your company want to sponsor Flame? Check out our &lt;a href=&#34;https://opencollective.com/blue-fire&#34;&gt;OpenCollective page&lt;/a&gt;, which is also mentioned in the section below, or contact us on &lt;a href=&#34;https://discord.gg/pxrBmy4&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to show us your support is by giving the project a star! &lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also support us monetarily by donating through OpenCollective:&lt;/p&gt; &#xA;&lt;a href=&#34;https://opencollective.com/blue-fire/donate&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/blue-fire/donate/button@2x.png?color=blue&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Through GitHub Sponsors:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/bluefireteam&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Github%20Sponsor-blue?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Or by becoming a patron on Patreon:&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.patreon.com/bluefireoss&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button.png&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You can also show on your repository that your game is made with Flame by using one of the following badges:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flame-engine.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-272727.svg?sanitize=true&#34; alt=&#34;Powered by Flame&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flame-engine.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-272727.svg?style=flat-square&#34; alt=&#34;Powered by Flame&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flame-engine.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-272727.svg?style=for-the-badge&#34; alt=&#34;Powered by Flame&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg)](https://flame-engine.org)&#xA;[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=flat-square)](https://flame-engine.org)&#xA;[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=for-the-badge)](https://flame-engine.org)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Have you found a bug or have a suggestion of how to enhance Flame? Open an issue and we will take a look at it as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;Do you want to contribute with a PR? PRs are always welcome, just make sure to create it from the correct branch (main) and follow the &lt;a href=&#34;https://raw.githubusercontent.com/flame-engine/flame/main/.github/pull_request_template.md&#34;&gt;checklist&lt;/a&gt; which will appear when you open the PR.&lt;/p&gt; &#xA;&lt;p&gt;For bigger changes, or if in doubt, make sure to talk about your contribution to the team. Either via an issue, GitHub discussion, or reach out to the team either using the &lt;a href=&#34;https://discord.gg/pxrBmy4&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/orgs/bluefireteam/people&#34;&gt;Blue Fire team&lt;/a&gt;, who are continuously working on maintaining and improving Flame and its ecosystem.&lt;/li&gt; &#xA; &lt;li&gt;All the friendly contributors and people who are helping out in the community.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>singerdmx/flutter-quill</title>
    <updated>2023-10-01T02:11:13Z</updated>
    <id>tag:github.com,2023-10-01:/singerdmx/flutter-quill</id>
    <link href="https://github.com/singerdmx/flutter-quill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rich text editor for Flutter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34; style=&#34;background-color:#282C34&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10923085/119221946-2de89000-baf2-11eb-8285-68168a78c658.png&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;A rich text editor for Flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/singerdmx/flutter-quill.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=for-the-badge&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;FlutterQuill is a rich text editor and a &lt;a href=&#34;https://quilljs.com/docs/formats&#34;&gt;Quill&lt;/a&gt; component for &lt;a href=&#34;https://github.com/flutter/flutter&#34;&gt;Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is a WYSIWYG editor built for the modern Android, iOS, web and desktop platforms. Check out our &lt;a href=&#34;https://youtube.com/playlist?list=PLbhaS_83B97vONkOAWGJrSXWX58et9zZ2&#34;&gt;Youtube Playlist&lt;/a&gt; or &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/CodeIntroduction.md&#34;&gt;Code Introduction&lt;/a&gt; to take a detailed walkthrough of the code base. You can join our &lt;a href=&#34;https://join.slack.com/t/bulletjournal1024/shared_invite/zt-fys7t9hi-ITVU5PGDen1rNRyCjdcQ2g&#34;&gt;Slack Group&lt;/a&gt; for discussion.&lt;/p&gt; &#xA;&lt;p&gt;Pub: &lt;a href=&#34;https://pub.dev/packages/flutter_quill&#34;&gt;FlutterQuill&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/103142422-9bb19c80-46b7-11eb-83e4-dd0538a9236e.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/103142455-0531ab00-46b8-11eb-89f8-26a77de9227f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/102963021-f28f5a00-449c-11eb-8f5f-6e9dd60844c4.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/102977404-c9c88e00-44b7-11eb-9423-b68f3b30b0e0.png&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;example&lt;/code&gt; directory for a minimal example of how to use FlutterQuill. You typically just need to instantiate a controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;QuillController _controller = QuillController.basic();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then embed the toolbar and the editor, within your app. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Column(&#xA;  children: [&#xA;    QuillToolbar.basic(controller: _controller),&#xA;    Expanded(&#xA;      child: Container(&#xA;        child: QuillEditor.basic(&#xA;          controller: _controller,&#xA;          readOnly: false, // true for view only mode&#xA;        ),&#xA;      ),&#xA;    )&#xA;  ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart&#34;&gt;Sample Page&lt;/a&gt; for advanced usage.&lt;/p&gt; &#xA;&lt;h2&gt;Input / Output&lt;/h2&gt; &#xA;&lt;p&gt;This library uses &lt;a href=&#34;https://quilljs.com/docs/formats&#34;&gt;Quill&lt;/a&gt; as an internal data format.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;_controller.document.toDelta()&lt;/code&gt; to extract the deltas.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;_controller.document.toPlainText()&lt;/code&gt; to extract plain text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FlutterQuill provides some JSON serialization support, so that you can save and open documents. To save a document as JSON, do something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var json = jsonEncode(_controller.document.toDelta().toJson());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then write this to storage.&lt;/p&gt; &#xA;&lt;p&gt;To open a FlutterQuill editor with an existing JSON representation that you&#39;ve previously stored, you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var myJSON = jsonDecode(r&#39;{&#34;insert&#34;:&#34;hello\n&#34;}&#39;);&#xA;_controller = QuillController(&#xA;          document: Document.fromJson(myJSON),&#xA;          selection: TextSelection.collapsed(offset: 0),&#xA;        );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;For web development, use &lt;code&gt;flutter config --enable-web&lt;/code&gt; for flutter or use &lt;a href=&#34;https://github.com/zenoamaro/react-quill&#34;&gt;ReactQuill&lt;/a&gt; for React.&lt;/p&gt; &#xA;&lt;p&gt;It is required to provide &lt;code&gt;EmbedBuilder&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/universal_ui/universal_ui.dart#L99&#34;&gt;defaultEmbedBuildersWeb&lt;/a&gt;. Also it is required to provide &lt;code&gt;webImagePickImpl&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart#L317&#34;&gt;Sample Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Desktop&lt;/h2&gt; &#xA;&lt;p&gt;It is required to provide &lt;code&gt;filePickImpl&lt;/code&gt; for toolbar image button, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart#L297&#34;&gt;Sample Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;QuillToolbar&lt;/code&gt; class lets you customize which formatting options are available. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart&#34;&gt;Sample Page&lt;/a&gt; provides sample code for advanced usage and configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Font Size&lt;/h3&gt; &#xA;&lt;p&gt;Within the editor toolbar, a drop-down with font-sizing capabilities is available. This can be enabled or disabled with &lt;code&gt;showFontSize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, the default font-size values can be modified via &lt;em&gt;optional&lt;/em&gt; &lt;code&gt;fontSizeValues&lt;/code&gt;. &lt;code&gt;fontSizeValues&lt;/code&gt; accepts a &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; consisting of a &lt;code&gt;String&lt;/code&gt; title for the font size and a &lt;code&gt;String&lt;/code&gt; value for the font size. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;fontSizeValues: const {&#39;Small&#39;: &#39;8&#39;, &#39;Medium&#39;: &#39;24.5&#39;, &#39;Large&#39;: &#39;46&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Font size can be cleared with a value of &lt;code&gt;0&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;fontSizeValues: const {&#39;Small&#39;: &#39;8&#39;, &#39;Medium&#39;: &#39;24.5&#39;, &#39;Large&#39;: &#39;46&#39;, &#39;Clear&#39;: &#39;0&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Font Family&lt;/h3&gt; &#xA;&lt;p&gt;To use your own fonts, update your &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/tree/master/example/assets/fonts&#34;&gt;assets folder&lt;/a&gt; and pass in &lt;code&gt;fontFamilyValues&lt;/code&gt;. More details at &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/commit/71d06f6b7be1b7b6dba2ea48e09fed0d7ff8bbaa&#34;&gt;this change&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/55075834/fontfamily-property-not-working-properly-in-flutter&#34;&gt;this article&lt;/a&gt; and &lt;a href=&#34;https://www.flutterbeads.com/change-font-family-flutter/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Buttons&lt;/h3&gt; &#xA;&lt;p&gt;You may add custom buttons to the &lt;em&gt;end&lt;/em&gt; of the toolbar, via the &lt;code&gt;customButtons&lt;/code&gt; option, which is a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;QuillCustomButton&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add an Icon, we should use a new QuillCustomButton class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    QuillCustomButton(&#xA;        icon:Icons.ac_unit,&#xA;        onTap: () {&#xA;          debugPrint(&#39;snowflake&#39;);&#xA;        }&#xA;    ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &lt;code&gt;QuillCustomButton&lt;/code&gt; is used as part of the &lt;code&gt;customButtons&lt;/code&gt; option as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;QuillToolbar.basic(&#xA;   (...),&#xA;    customButtons: [&#xA;        QuillCustomButton(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake1&#39;);&#xA;            }&#xA;        ),&#xA;&#xA;        QuillCustomButton(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake2&#39;);&#xA;            }&#xA;        ),&#xA;&#xA;        QuillCustomButton(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake3&#39;);&#xA;            }&#xA;        ),&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Embed Blocks&lt;/h2&gt; &#xA;&lt;p&gt;As of version 6.0, embed blocks are not provided by default as part of this package. Instead, this package provides an interface to all the user to provide there own implementations for embed blocks. Implementations for image, video and formula embed blocks is proved in a separate package &lt;a href=&#34;https://pub.dev/packages/flutter_quill_extensions&#34;&gt;&lt;code&gt;flutter_quill_extensions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Provide a list of embed&lt;/p&gt; &#xA;&lt;h3&gt;Using the embed blocks from &lt;code&gt;flutter_quill_extensions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_quill_extensions/flutter_quill_extensions.dart&#39;;&#xA;&#xA;QuillEditor.basic(&#xA;  controller: controller,&#xA;  embedBuilders: FlutterQuillEmbeds.builders(),&#xA;);&#xA;&#xA;QuillToolbar.basic(&#xA;  controller: controller,&#xA;  embedButtons: FlutterQuillEmbeds.buttons(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Size Image for Mobile&lt;/h3&gt; &#xA;&lt;p&gt;Define &lt;code&gt;mobileWidth&lt;/code&gt;, &lt;code&gt;mobileHeight&lt;/code&gt;, &lt;code&gt;mobileMargin&lt;/code&gt;, &lt;code&gt;mobileAlignment&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;      &#34;insert&#34;: {&#xA;         &#34;image&#34;: &#34;https://user-images.githubusercontent.com/122956/72955931-ccc07900-3d52-11ea-89b1-d468a6e2aa2b.png&#34;&#xA;      },&#xA;      &#34;attributes&#34;:{&#xA;         &#34;style&#34;:&#34;mobileWidth: 50; mobileHeight: 50; mobileMargin: 10; mobileAlignment: topLeft&#34;&#xA;      }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Embed Blocks&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you want to add some custom content inside your text, custom widgets inside of them. An example is adding notes to the text, or anything custom that you want to add in your text editor.&lt;/p&gt; &#xA;&lt;p&gt;The only thing that you need is to add a &lt;code&gt;CustomBlockEmbed&lt;/code&gt; and provider a builder for it to the &lt;code&gt;embedBuilders&lt;/code&gt; parameter, to transform the data inside of the Custom Block into a widget!&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;p&gt;Starting with the &lt;code&gt;CustomBlockEmbed&lt;/code&gt;, here we extend it and add the methods that are useful for the &#39;Note&#39; widget, that will be the &lt;code&gt;Document&lt;/code&gt;, used by the &lt;code&gt;flutter_quill&lt;/code&gt; to render the rich text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class NotesBlockEmbed extends CustomBlockEmbed {&#xA;  const NotesBlockEmbed(String value) : super(noteType, value);&#xA;&#xA;  static const String noteType = &#39;notes&#39;;&#xA;&#xA;  static NotesBlockEmbed fromDocument(Document document) =&amp;gt;&#xA;      NotesBlockEmbed(jsonEncode(document.toDelta().toJson()));&#xA;&#xA;  Document get document =&amp;gt; Document.fromJson(jsonDecode(data));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, we need to map this &#34;notes&#34; type into a widget. In that case, I used a &lt;code&gt;ListTile&lt;/code&gt; with a text to show the plain text resume of the note, and the &lt;code&gt;onTap&lt;/code&gt; function to edit the note. Don&#39;t forget to add this method to the &lt;code&gt;QuillEditor&lt;/code&gt; after that!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class NotesEmbedBuilder extends EmbedBuilder {&#xA;  NotesEmbedBuilder({required this.addEditNote});&#xA;&#xA;  Future&amp;lt;void&amp;gt; Function(BuildContext context, {Document? document}) addEditNote;&#xA;&#xA;  @override&#xA;  String get key =&amp;gt; &#39;notes&#39;;&#xA;&#xA;  @override&#xA;  Widget build(&#xA;    BuildContext context,&#xA;    QuillController controller,&#xA;    Embed node,&#xA;    bool readOnly,&#xA;    bool inline,&#xA;  ) {&#xA;    final notes = NotesBlockEmbed(node.value.data).document;&#xA;&#xA;    return Material(&#xA;      color: Colors.transparent,&#xA;      child: ListTile(&#xA;        title: Text(&#xA;          notes.toPlainText().replaceAll(&#39;\n&#39;, &#39; &#39;),&#xA;          maxLines: 3,&#xA;          overflow: TextOverflow.ellipsis,&#xA;        ),&#xA;        leading: const Icon(Icons.notes),&#xA;        onTap: () =&amp;gt; addEditNote(context, document: notes),&#xA;        shape: RoundedRectangleBorder(&#xA;          borderRadius: BorderRadius.circular(10),&#xA;          side: const BorderSide(color: Colors.grey),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, we write the function to add/edit this note. The &lt;code&gt;showDialog&lt;/code&gt; function shows the QuillEditor to edit the note, after the user ends the edition, we check if the document has something, and if it has, we add or edit the &lt;code&gt;NotesBlockEmbed&lt;/code&gt; inside of a &lt;code&gt;BlockEmbed.custom&lt;/code&gt; (this is a little detail that will not work if you don&#39;t pass the &lt;code&gt;CustomBlockEmbed&lt;/code&gt; inside of a &lt;code&gt;BlockEmbed.custom&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; _addEditNote(BuildContext context, {Document? document}) async {&#xA;  final isEditing = document != null;&#xA;  final quillEditorController = QuillController(&#xA;    document: document ?? Document(),&#xA;    selection: const TextSelection.collapsed(offset: 0),&#xA;  );&#xA;&#xA;  await showDialog(&#xA;    context: context,&#xA;    builder: (context) =&amp;gt; AlertDialog(&#xA;      titlePadding: const EdgeInsets.only(left: 16, top: 8),&#xA;      title: Row(&#xA;        mainAxisAlignment: MainAxisAlignment.spaceBetween,&#xA;        children: [&#xA;          Text(&#39;${isEditing ? &#39;Edit&#39; : &#39;Add&#39;} note&#39;),&#xA;          IconButton(&#xA;            onPressed: () =&amp;gt; Navigator.of(context).pop(),&#xA;            icon: const Icon(Icons.close),&#xA;          )&#xA;        ],&#xA;      ),&#xA;      content: QuillEditor.basic(&#xA;        controller: quillEditorController,&#xA;        readOnly: false,&#xA;      ),&#xA;    ),&#xA;  );&#xA;&#xA;  if (quillEditorController.document.isEmpty()) return;&#xA;&#xA;  final block = BlockEmbed.custom(&#xA;    NotesBlockEmbed.fromDocument(quillEditorController.document),&#xA;  );&#xA;  final controller = _controller!;&#xA;  final index = controller.selection.baseOffset;&#xA;  final length = controller.selection.extentOffset - index;&#xA;&#xA;  if (isEditing) {&#xA;    final offset = getEmbedNode(controller, controller.selection.start).offset;&#xA;    controller.replaceText(&#xA;        offset, 1, block, TextSelection.collapsed(offset: offset));&#xA;  } else {&#xA;    controller.replaceText(index, length, block, null);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And voila, we have a custom widget inside of the rich text editor!&lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://i.imgur.com/yBTPYeS.png&#34;&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;For more info and a video example, see the &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/pull/877&#34;&gt;PR of this feature&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;For more details, check out &lt;a href=&#34;https://youtu.be/pI5p5j7cfHc&#34;&gt;this YouTube video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Translation&lt;/h3&gt; &#xA;&lt;p&gt;The package offers translations for the quill toolbar and editor, it will follow the system locale unless you set your own locale with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;QuillToolbar(locale: Locale(&#39;fr&#39;), ...)&#xA;QuillEditor(locale: Locale(&#39;fr&#39;), ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, translations are available for these 30 locales:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;en&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ar&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;bn&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;bs&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;cs&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;de&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;da&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;fr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;he&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;zh&#39;, &#39;cn&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;zh&#39;, &#39;hk&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ko&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ru&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;es&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;tk&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;tr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;uk&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ur&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;pt&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;pl&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;vi&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;id&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;it&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ms&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;nl&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;no&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;fa&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;hi&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;sr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ja&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Contributing to translations&lt;/h4&gt; &#xA;&lt;p&gt;The translation file is located at &lt;a href=&#34;https://raw.githubusercontent.com/singerdmx/flutter-quill/master/lib/src/translations/toolbar.i18n.dart&#34;&gt;toolbar.i18n.dart&lt;/a&gt;. Feel free to contribute your own translations, just copy the English translations map and replace the values with your translations. Then open a pull request so everyone can benefit from your translations!&lt;/p&gt; &#xA;&lt;h2&gt;Conversion to HTML&lt;/h2&gt; &#xA;&lt;p&gt;Having your document stored in Quill Delta format is sometimes not enough. Often you&#39;ll need to convert it to other formats such as HTML in order to publish it, or send an email. One option is to use &lt;a href=&#34;https://pub.dev/packages/vsc_quill_delta_to_html&#34;&gt;vsc_quill_delta_to_html&lt;/a&gt; to convert your document to HTML. This package has full support for all Quill operations - including images, videos, formulas, tables, and mentions. Conversion can be performed in vanilla Dart (i.e., server-side or CLI) or in Flutter. It is a complete Dart part of the popular and mature &lt;a href=&#34;https://www.npmjs.com/package/quill-delta-to-html&#34;&gt;quill-delta-to-html&lt;/a&gt; Typescript/Javascript package.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To aid in testing applications using the editor an extension to the flutter &lt;code&gt;WidgetTester&lt;/code&gt; is provided which includes methods to simplify interacting with the editor in test cases.&lt;/p&gt; &#xA;&lt;p&gt;Import the test utilities in your test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_quill/flutter_quill_test.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then enter text using &lt;code&gt;quillEnterText&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await tester.quillEnterText(find.byType(QuillEditor), &#39;test\n&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://bulletjournal.us/home/index.html&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/122956/72955931-ccc07900-3d52-11ea-89b1-d468a6e2aa2b.png&#34; width=&#34;150px&#34; height=&#34;150px&#34;&gt;&lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/singerdmx/flutter-quill/master/doc_cn.md&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>