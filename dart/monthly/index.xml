<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-01T01:50:47Z</updated>
  <subtitle>Monthly Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flutter/flutter</title>
    <updated>2023-01-01T01:50:47Z</updated>
    <id>tag:github.com,2023-01-01:/flutter/flutter</id>
    <link href="https://github.com/flutter/flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter makes it easy and fast to build beautiful apps for mobile and beyond&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt; &lt;h1 align=&#34;center&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://storage.googleapis.com/cms-storage-bucket/6e19fee6b47b36ca613f.png&#34;&gt; &#xA;   &lt;img alt=&#34;Flutter&#34; src=&#34;https://storage.googleapis.com/cms-storage-bucket/c823e53b3a1a7b0d36a9.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/h1&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cirrus-ci.com/github/flutter/flutter/master&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/flutter/flutter.svg?sanitize=true&#34; alt=&#34;Build Status - Cirrus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutter/flutter/wiki/Chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/608014603317936148&#34; alt=&#34;Discord badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=flutterdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/flutterdev.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter handle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/flutter/flutter&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/flutter/flutter/branch/master/graph/badge.svg?token=11yDrJU2M2&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5631&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5631/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/flutter/flutter&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/flutter/flutter/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter is Google&#39;s SDK for crafting beautiful, fast user experiences for mobile, web, and desktop from a single codebase. Flutter works with existing code, is used by developers and organizations around the world, and is free and open source.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/get-started/&#34;&gt;Install Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/&#34;&gt;Flutter documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/wiki&#34;&gt;Development wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter/raw/master/CONTRIBUTING.md&#34;&gt;Contributing to Flutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For announcements about new releases, follow the &lt;a href=&#34;https://groups.google.com/forum/#!forum/flutter-announce&#34;&gt;flutter-announce@googlegroups.com&lt;/a&gt; mailing list. Our documentation also tracks &lt;a href=&#34;https://docs.flutter.dev/release/breaking-changes&#34;&gt;breaking changes&lt;/a&gt; across releases.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of service&lt;/h2&gt; &#xA;&lt;p&gt;The Flutter tool may occasionally download resources from Google servers. By downloading or using the Flutter SDK, you agree to the Google Terms of Service: &lt;a href=&#34;https://policies.google.com/terms&#34;&gt;https://policies.google.com/terms&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, when installed from GitHub (as opposed to from a prepackaged archive), the Flutter tool will download the Dart SDK from Google servers immediately when first run, as it is used to execute the &lt;code&gt;flutter&lt;/code&gt; tool itself. This will also occur when Flutter is upgraded (e.g. by running the &lt;code&gt;flutter upgrade&lt;/code&gt; command).&lt;/p&gt; &#xA;&lt;h2&gt;About Flutter&lt;/h2&gt; &#xA;&lt;p&gt;We think Flutter will help you create beautiful, fast apps, with a productive, extensible and open development model, whether you&#39;re targeting iOS or Android, web, Windows, macOS, Linux or embedding it as the UI toolkit for a platform of your choice.&lt;/p&gt; &#xA;&lt;h3&gt;Beautiful user experiences&lt;/h3&gt; &#xA;&lt;p&gt;We want to enable designers to deliver their full creative vision without being forced to water it down due to limitations of the underlying framework. Flutter&#39;s &lt;a href=&#34;https://docs.flutter.dev/resources/inside-flutter&#34;&gt;layered architecture&lt;/a&gt; gives you control over every pixel on the screen and its powerful compositing capabilities let you overlay and animate graphics, video, text, and controls without limitation. Flutter includes a full &lt;a href=&#34;https://flutter.dev/widgets/&#34;&gt;set of widgets&lt;/a&gt; that deliver pixel-perfect experiences whether you&#39;re building for iOS (&lt;a href=&#34;https://docs.flutter.dev/development/ui/widgets/cupertino&#34;&gt;Cupertino&lt;/a&gt;) or other platforms (&lt;a href=&#34;https://docs.flutter.dev/development/ui/widgets/material&#34;&gt;Material&lt;/a&gt;), along with support for customizing or creating entirely new visual components.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/raw/main/src/assets/images/docs/homepage/reflectly-hero-600px.png?raw=true&#34; alt=&#34;Reflectly hero image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fast results&lt;/h3&gt; &#xA;&lt;p&gt;Flutter is fast. It&#39;s powered by the same hardware-accelerated 2D graphics library that underpins Chrome and Android: &lt;a href=&#34;https://skia.org/&#34;&gt;Skia&lt;/a&gt;. We architected Flutter to support glitch-free, jank-free graphics at the native speed of your device. Flutter code is powered by the world-class &lt;a href=&#34;https://dart.dev/&#34;&gt;Dart platform&lt;/a&gt;, which enables compilation to 32-bit and 64-bit ARM machine code for iOS and Android, as well as JavaScript for the web and Intel x64 for desktop devices.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/raw/main/src/assets/images/docs/homepage/dart-diagram-small.png?raw=true&#34; alt=&#34;Dart diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Productive development&lt;/h3&gt; &#xA;&lt;p&gt;Flutter offers &lt;a href=&#34;https://docs.flutter.dev/development/tools/hot-reload&#34;&gt;stateful hot reload&lt;/a&gt;, allowing you to make changes to your code and see the results instantly without restarting your app or losing its state.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.flutter.dev/development/tools/hot-reload&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/raw/main/src/assets/images/docs/tools/android-studio/hot-reload.gif?raw=true&#34; alt=&#34;Hot reload animation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensible and open model&lt;/h3&gt; &#xA;&lt;p&gt;Flutter works with any development tool (or none at all), and also includes editor plug-ins for both &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter&#34;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&#34;https://plugins.jetbrains.com/plugin/9212-flutter&#34;&gt;IntelliJ / Android Studio&lt;/a&gt;. Flutter provides &lt;a href=&#34;https://pub.dev/flutter&#34;&gt;tens of thousands of packages&lt;/a&gt; to speed your development, regardless of your target platform. And accessing other native code is easy, with support for both FFI (&lt;a href=&#34;https://docs.flutter.dev/development/platform-integration/android/c-interop&#34;&gt;on Android&lt;/a&gt;, &lt;a href=&#34;https://docs.flutter.dev/development/platform-integration/ios/c-interop&#34;&gt;on iOS&lt;/a&gt;, &lt;a href=&#34;https://docs.flutter.dev/development/platform-integration/macos/c-interop&#34;&gt;on macOS&lt;/a&gt;, and &lt;a href=&#34;https://docs.flutter.dev/development/platform-integration/windows/building#integrating-with-windows&#34;&gt;on Windows&lt;/a&gt;) as well as &lt;a href=&#34;https://docs.flutter.dev/development/platform-integration/platform-channels&#34;&gt;platform-specific APIs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Flutter is a fully open-source project, and we welcome contributions. Information on how to get started can be found in our &lt;a href=&#34;https://raw.githubusercontent.com/flutter/flutter/master/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>niuhuan/jasmine</title>
    <updated>2023-01-01T01:50:47Z</updated>
    <id>tag:github.com,2023-01-01:/niuhuan/jasmine</id>
    <link href="https://github.com/niuhuan/jasmine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个美观易用的漫画客户端, 同时支持支持 Android / iOS / MacOS / Windows / Linux。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jasmine Comic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/niuhuan/jasmine/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/niuhuan/jasmine&#34; alt=&#34;releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;一个简单易用的漫画二次元客户端，同时支持支持 Android / iOS / MacOS / Windows.&lt;/p&gt; &#xA;&lt;p&gt;此APP内容存在限制级别内容(露骨/血腥/暴力)，建议在18岁以下的用户在监护人陪同下使用，并请您在遵守当地法律法规。&lt;/p&gt; &#xA;&lt;p&gt;如果您觉得此软件对您有帮助，可以star进行支持。同时欢迎您issue，一起让软件变得更好。&lt;/p&gt; &#xA;&lt;p&gt;仓库地址 &lt;a href=&#34;https://github.com/niuhuan/jasmine&#34;&gt;https://github.com/niuhuan/jasmine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;软件截图&lt;/h2&gt; &#xA;&lt;h4&gt;浏览器&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/niuhuan/jasmine/master/images/app_screen.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;阅读器&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/niuhuan/jasmine/master/images/reader_screen.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;实现功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 漫画 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 漫画分类检索&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 阅读漫画&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 搜索漫画&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 收藏漫画&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 浏览记录&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 下载漫画&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 游戏&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 社区 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 获取评论&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 发布评论&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 用户 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 登录/注册&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 设备优化 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 安卓的高刷新率屏幕的支持&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;技术架构&lt;/h2&gt; &#xA;&lt;p&gt;flutter + rust&lt;/p&gt; &#xA;&lt;p&gt;flutter实现了高性能的跨平台界面渲染，rust实现了安全以及高效的业务调度。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/niuhuan/jasmine/master/images/technologies.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;请您遵守使用规则&lt;/h2&gt; &#xA;&lt;p&gt;本文中提到的本软件拓展包括但是不限于以下内容&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用本软件进行继续开发形成的软件。&lt;/li&gt; &#xA; &lt;li&gt;引入本软件部分内容为依赖/使用本软件内代码的同时包含本软件内一致内容或功能。&lt;/li&gt; &#xA; &lt;li&gt;直接对本软件进行打包发布&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;软件副本分发以及代码使用规则规则&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本软件仅供学习交流使用, 本软件或本软件的拓展, 个人或企业不可用于商业用途, 不可上架任何商店。&lt;/li&gt; &#xA; &lt;li&gt;本软件的拓展在未经允许的情况下可以自用但不允许释放任何releases。&lt;/li&gt; &#xA; &lt;li&gt;不要在任何其他 &lt;strong&gt;二次元软件&lt;/strong&gt; 的 &lt;strong&gt;聊天社区&lt;/strong&gt; 或 &lt;strong&gt;开发社区&lt;/strong&gt; 内, 发布有关本软件的链接或信息, 对于观点不同产生的分歧作者不站队任何立场。&lt;/li&gt; &#xA; &lt;li&gt;不要发送本软件安装包到 &lt;strong&gt;任何社区内&lt;/strong&gt; , 不要将APK/IPA/ZIP/DMG发送包括任何聊天软件内的群聊功能。 分享本软件时, 在社区中使用Github中提供的Releases页面的链接, 或使用私聊窗口发送。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;源代码使用规则&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;对本仓库的fork需要保留本仓库的链接, 以引导用户在主要仓库进行讨论。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;责任声明&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作者仅分享编程技术, 不分发软件, 不对分发软件承担任何后果。 因传播载造成的法律问题或纠纷, 需行为人自行承担, 请您遵守当地法以及副本接受方(社区或人)所在地区的法律。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jonataslaw/getx</title>
    <updated>2023-01-01T01:50:47Z</updated>
    <id>tag:github.com,2023-01-01:/jonataslaw/getx</id>
    <link href="https://github.com/jonataslaw/getx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open screens/snackbars/dialogs/bottomSheets without context, manage states and inject dependencies easily with Get.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jonataslaw/getx-community/master/get.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/get&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/get.svg?label=get&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/get/score&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/popularity/get?logo=dart&#34; alt=&#34;popularity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/get/score&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/likes/get?logo=dart&#34; alt=&#34;likes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/get/score&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/points/sentry?logo=dart&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/jonataslaw/get/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;building&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/effective_dart&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-effective_dart-40c4ff.svg?sanitize=true&#34; alt=&#34;style: effective dart&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/9Hpt99N&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/722900883784073290.svg?logo=discord&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://communityinviter.com/apps/getxworkspace/getx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join-orange.svg?sanitize=true&#34; alt=&#34;Get on Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/joinchat/PhdbJRmsZNpAqSLJL6bH7g&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Telegram-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt; &lt;img alt=&#34;Awesome Flutter&#34; src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/jonataslaw&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://i.imgur.com/aV6DDA7.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important; box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jonataslaw/getx-community/master/getx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Languages:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-English-blueviolet?style=for-the-badge&#34; alt=&#34;English&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README-vi.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Vietnamese-blueviolet?style=for-the-badge&#34; alt=&#34;Vietnamese&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.id-ID.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Indonesian-blueviolet?style=for-the-badge&#34; alt=&#34;Indonesian&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.ur-PK.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Urdu-blueviolet?style=for-the-badge&#34; alt=&#34;Urdu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.zh-cn.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Chinese-blueviolet?style=for-the-badge&#34; alt=&#34;Chinese&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.pt-br.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Portuguese-blueviolet?style=for-the-badge&#34; alt=&#34;Portuguese&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README-es.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Spanish-blueviolet?style=for-the-badge&#34; alt=&#34;Spanish&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.ru.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Russian-blueviolet?style=for-the-badge&#34; alt=&#34;Russian&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.pl.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Polish-blueviolet?style=for-the-badge&#34; alt=&#34;Polish&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.ko-kr.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Korean-blueviolet?style=for-the-badge&#34; alt=&#34;Korean&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README-fr.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-French-blueviolet?style=for-the-badge&#34; alt=&#34;French&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README.ja-JP.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Japanese-blueviolet?style=for-the-badge&#34; alt=&#34;Japanese&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/README-hi.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-Hindi-blueviolet?style=for-the-badge&#34; alt=&#34;Hindi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#about-get&#34;&gt;About Get&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#counter-app-with-getx&#34;&gt;Counter App with GetX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#the-three-pillars&#34;&gt;The Three pillars&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#state-management&#34;&gt;State management&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#reactive-state-manager&#34;&gt;Reactive State Manager&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#more-details-about-state-management&#34;&gt;More details about state management&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#route-management&#34;&gt;Route management&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#more-details-about-route-management&#34;&gt;More details about route management&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#dependency-management&#34;&gt;Dependency management&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#more-details-about-dependency-management&#34;&gt;More details about dependency management&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#utils&#34;&gt;Utils&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#internationalization&#34;&gt;Internationalization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#translations&#34;&gt;Translations&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#using-translations&#34;&gt;Using translations&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#locales&#34;&gt;Locales&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#change-locale&#34;&gt;Change locale&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#system-locale&#34;&gt;System locale&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#change-theme&#34;&gt;Change Theme&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#getconnect&#34;&gt;GetConnect&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#custom-configuration&#34;&gt;Custom configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#getpage-middleware&#34;&gt;GetPage Middleware&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#priority&#34;&gt;Priority&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#redirect&#34;&gt;Redirect&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#onpagecalled&#34;&gt;onPageCalled&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#onbindingsstart&#34;&gt;OnBindingsStart&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#onpagebuildstart&#34;&gt;OnPageBuildStart&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#onpagebuilt&#34;&gt;OnPageBuilt&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#onpagedispose&#34;&gt;OnPageDispose&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#other-advanced-apis&#34;&gt;Other Advanced APIs&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#optional-global-settings-and-manual-configurations&#34;&gt;Optional Global Settings and Manual configurations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#local-state-widgets&#34;&gt;Local State Widgets&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#valuebuilder&#34;&gt;ValueBuilder&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#obxvalue&#34;&gt;ObxValue&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#useful-tips&#34;&gt;Useful tips&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#getview&#34;&gt;GetView&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#getresponsiveview&#34;&gt;GetResponsiveView&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#how-to-use-it&#34;&gt;How to use it&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#getwidget&#34;&gt;GetWidget&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#getxservice&#34;&gt;GetxService&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#breaking-changes-from-20&#34;&gt;Breaking changes from 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#why-getx&#34;&gt;Why Getx?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#community&#34;&gt;Community&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#community-channels&#34;&gt;Community channels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#articles-and-videos&#34;&gt;Articles and videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;About Get&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GetX is an extra-light and powerful solution for Flutter. It combines high-performance state management, intelligent dependency injection, and route management quickly and practically.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GetX has 3 basic principles. This means that these are the priority for all resources in the library: &lt;strong&gt;PRODUCTIVITY, PERFORMANCE AND ORGANIZATION.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;PERFORMANCE:&lt;/strong&gt; GetX is focused on performance and minimum consumption of resources. GetX does not use Streams or ChangeNotifier.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;PRODUCTIVITY:&lt;/strong&gt; GetX uses an easy and pleasant syntax. No matter what you want to do, there is always an easier way with GetX. It will save hours of development and will provide the maximum performance your application can deliver.&lt;/p&gt; &lt;p&gt;Generally, the developer should be concerned with removing controllers from memory. With GetX this is not necessary because resources are removed from memory when they are not used by default. If you want to keep it in memory, you must explicitly declare &#34;permanent: true&#34; in your dependency. That way, in addition to saving time, you are less at risk of having unnecessary dependencies on memory. Dependency loading is also lazy by default.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;ORGANIZATION:&lt;/strong&gt; GetX allows the total decoupling of the View, presentation logic, business logic, dependency injection, and navigation. You do not need context to navigate between routes, so you are not dependent on the widget tree (visualization) for this. You don&#39;t need context to access your controllers/blocs through an inheritedWidget, so you completely decouple your presentation logic and business logic from your visualization layer. You do not need to inject your Controllers/Models/Blocs classes into your widget tree through &lt;code&gt;MultiProvider&lt;/code&gt;s. For this, GetX uses its own dependency injection feature, decoupling the DI from its view completely.&lt;/p&gt; &lt;p&gt;With GetX you know where to find each feature of your application, having clean code by default. In addition to making maintenance easy, this makes the sharing of modules something that until then in Flutter was unthinkable, something totally possible. BLoC was a starting point for organizing code in Flutter, it separates business logic from visualization. GetX is a natural evolution of this, not only separating the business logic but the presentation logic. Bonus injection of dependencies and routes are also decoupled, and the data layer is out of it all. You know where everything is, and all of this in an easier way than building a hello world. GetX is the easiest, practical, and scalable way to build high-performance applications with the Flutter SDK. It has a large ecosystem around it that works perfectly together, it&#39;s easy for beginners, and it&#39;s accurate for experts. It is secure, stable, up-to-date, and offers a huge range of APIs built-in that are not present in the default Flutter SDK.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GetX is not bloated. It has a multitude of features that allow you to start programming without worrying about anything, but each of these features are in separate containers and are only started after use. If you only use State Management, only State Management will be compiled. If you only use routes, nothing from the state management will be compiled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GetX has a huge ecosystem, a large community, a large number of collaborators, and will be maintained as long as the Flutter exists. GetX too is capable of running with the same code on Android, iOS, Web, Mac, Linux, Windows, and on your server. &lt;strong&gt;It is possible to fully reuse your code made on the frontend on your backend with &lt;a href=&#34;https://github.com/jonataslaw/get_server&#34;&gt;Get Server&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;In addition, the entire development process can be completely automated, both on the server and on the front end with &lt;a href=&#34;https://github.com/jonataslaw/get_cli&#34;&gt;Get CLI&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In addition, to further increase your productivity, we have the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=get-snippets.get-snippets&#34;&gt;extension to VSCode&lt;/a&gt; and the &lt;a href=&#34;https://plugins.jetbrains.com/plugin/14975-getx-snippets&#34;&gt;extension to Android Studio/Intellij&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;Add Get to your pubspec.yaml file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  get:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import get in files that it will be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:get/get.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Counter App with GetX&lt;/h1&gt; &#xA;&lt;p&gt;The &#34;counter&#34; project created by default on new project on Flutter has over 100 lines (with comments). To show the power of Get, I will demonstrate how to make a &#34;counter&#34; changing the state with each click, switching between pages and sharing the state between screens, all in an organized way, separating the business logic from the view, in ONLY 26 LINES CODE INCLUDING COMMENTS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 1: Add &#34;Get&#34; before your MaterialApp, turning it into GetMaterialApp&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() =&amp;gt; runApp(GetMaterialApp(home: Home()));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Note: this does not modify the MaterialApp of the Flutter, GetMaterialApp is not a modified MaterialApp, it is just a pre-configured Widget, which has the default MaterialApp as a child. You can configure this manually, but it is definitely not necessary. GetMaterialApp will create routes, inject them, inject translations, inject everything you need for route navigation. If you use Get only for state management or dependency management, it is not necessary to use GetMaterialApp. GetMaterialApp is necessary for routes, snackbars, internationalization, bottomSheets, dialogs, and high-level apis related to routes and absence of context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note²: This step is only necessary if you gonna use route management (&lt;code&gt;Get.to()&lt;/code&gt;, &lt;code&gt;Get.back()&lt;/code&gt; and so on). If you not gonna use it then it is not necessary to do step 1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Step 2: Create your business logic class and place all variables, methods and controllers inside it. You can make any variable observable using a simple &#34;.obs&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Controller extends GetxController{&#xA;  var count = 0.obs;&#xA;  increment() =&amp;gt; count++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Step 3: Create your View, use StatelessWidget and save some RAM, with Get you may no longer need to use StatefulWidget.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Home extends StatelessWidget {&#xA;&#xA;  @override&#xA;  Widget build(context) {&#xA;&#xA;    // Instantiate your class using Get.put() to make it available for all &#34;child&#34; routes there.&#xA;    final Controller c = Get.put(Controller());&#xA;&#xA;    return Scaffold(&#xA;      // Use Obx(()=&amp;gt; to update Text() whenever count is changed.&#xA;      appBar: AppBar(title: Obx(() =&amp;gt; Text(&#34;Clicks: ${c.count}&#34;))),&#xA;&#xA;      // Replace the 8 lines Navigator.push by a simple Get.to(). You don&#39;t need context&#xA;      body: Center(child: ElevatedButton(&#xA;              child: Text(&#34;Go to Other&#34;), onPressed: () =&amp;gt; Get.to(Other()))),&#xA;      floatingActionButton:&#xA;          FloatingActionButton(child: Icon(Icons.add), onPressed: c.increment));&#xA;  }&#xA;}&#xA;&#xA;class Other extends StatelessWidget {&#xA;  // You can ask Get to find a Controller that is being used by another page and redirect you to it.&#xA;  final Controller c = Get.find();&#xA;&#xA;  @override&#xA;  Widget build(context){&#xA;     // Access the updated count variable&#xA;     return Scaffold(body: Center(child: Text(&#34;${c.count}&#34;)));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jonataslaw/getx-community/master/counter-app-gif.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a simple project but it already makes clear how powerful Get is. As your project grows, this difference will become more significant.&lt;/p&gt; &#xA;&lt;p&gt;Get was designed to work with teams, but it makes the job of an individual developer simple.&lt;/p&gt; &#xA;&lt;p&gt;Improve your deadlines, deliver everything on time without losing performance. Get is not for everyone, but if you identified with that phrase, Get is for you!&lt;/p&gt; &#xA;&lt;h1&gt;The Three pillars&lt;/h1&gt; &#xA;&lt;h2&gt;State management&lt;/h2&gt; &#xA;&lt;p&gt;Get has two different state managers: the simple state manager (we&#39;ll call it GetBuilder) and the reactive state manager (GetX/Obx)&lt;/p&gt; &#xA;&lt;h3&gt;Reactive State Manager&lt;/h3&gt; &#xA;&lt;p&gt;Reactive programming can alienate many people because it is said to be complicated. GetX turns reactive programming into something quite simple:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You won&#39;t need to create StreamControllers.&lt;/li&gt; &#xA; &lt;li&gt;You won&#39;t need to create a StreamBuilder for each variable&lt;/li&gt; &#xA; &lt;li&gt;You will not need to create a class for each state.&lt;/li&gt; &#xA; &lt;li&gt;You will not need to create a get for an initial value.&lt;/li&gt; &#xA; &lt;li&gt;You will not need to use code generators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reactive programming with Get is as easy as using setState.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s imagine that you have a name variable and want that every time you change it, all widgets that use it are automatically changed.&lt;/p&gt; &#xA;&lt;p&gt;This is your count variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var name = &#39;Jonatas Borges&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make it observable, you just need to add &#34;.obs&#34; to the end of it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var name = &#39;Jonatas Borges&#39;.obs;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in the UI, when you want to show that value and update the screen whenever the values changes, simply do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Obx(() =&amp;gt; Text(&#34;${controller.name}&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all. It&#39;s &lt;em&gt;that&lt;/em&gt; simple.&lt;/p&gt; &#xA;&lt;h3&gt;More details about state management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;See an more in-depth explanation of state management &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/documentation/en_US/state_management.md&#34;&gt;here&lt;/a&gt;. There you will see more examples and also the difference between the simple state manager and the reactive state manager&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will get a good idea of GetX power.&lt;/p&gt; &#xA;&lt;h2&gt;Route management&lt;/h2&gt; &#xA;&lt;p&gt;If you are going to use routes/snackbars/dialogs/bottomsheets without context, GetX is excellent for you too, just see it:&lt;/p&gt; &#xA;&lt;p&gt;Add &#34;Get&#34; before your MaterialApp, turning it into GetMaterialApp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetMaterialApp( // Before: MaterialApp(&#xA;  home: MyHome(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to a new screen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;Get.to(NextScreen());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to new screen with name. See more details on named routes &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/documentation/en_US/route_management.md#navigation-with-named-routes&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;Get.toNamed(&#39;/details&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To close snackbars, dialogs, bottomsheets, or anything you would normally close with Navigator.pop(context);&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Get.back();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To go to the next screen and no option to go back to the previous screen (for use in SplashScreens, login screens, etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Get.off(NextScreen());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To go to the next screen and cancel all previous routes (useful in shopping carts, polls, and tests)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Get.offAll(NextScreen());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Noticed that you didn&#39;t have to use context to do any of these things? That&#39;s one of the biggest advantages of using Get route management. With this, you can execute all these methods from within your controller class, without worries.&lt;/p&gt; &#xA;&lt;h3&gt;More details about route management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get works with named routes and also offers lower-level control over your routes! There is in-depth documentation &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/documentation/en_US/route_management.md&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependency management&lt;/h2&gt; &#xA;&lt;p&gt;Get has a simple and powerful dependency manager that allows you to retrieve the same class as your Bloc or Controller with just 1 lines of code, no Provider context, no inheritedWidget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Controller controller = Get.put(Controller()); // Rather Controller controller = Controller();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note: If you are using Get&#39;s State Manager, pay more attention to the bindings API, which will make it easier to connect your view to your controller.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instead of instantiating your class within the class you are using, you are instantiating it within the Get instance, which will make it available throughout your App. So you can use your controller (or class Bloc) normally&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Get dependency management is decoupled from other parts of the package, so if for example, your app is already using a state manager (any one, it doesn&#39;t matter), you don&#39;t need to rewrite it all, you can use this dependency injection with no problems at all&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;controller.fetchApi();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Imagine that you have navigated through numerous routes, and you need data that was left behind in your controller, you would need a state manager combined with the Provider or Get_it, correct? Not with Get. You just need to ask Get to &#34;find&#34; for your controller, you don&#39;t need any additional dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Controller controller = Get.find();&#xA;//Yes, it looks like Magic, Get will find your controller, and will deliver it to you. You can have 1 million controllers instantiated, Get will always give you the right controller.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you will be able to recover your controller data that was obtained back there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(controller.textFromApi);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More details about dependency management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;See a more in-depth explanation of dependency management &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/documentation/en_US/dependency_management.md&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Utils&lt;/h1&gt; &#xA;&lt;h2&gt;Internationalization&lt;/h2&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;Translations are kept as a simple key-value dictionary map. To add custom translations, create a class and extend &lt;code&gt;Translations&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:get/get.dart&#39;;&#xA;&#xA;class Messages extends Translations {&#xA;  @override&#xA;  Map&amp;lt;String, Map&amp;lt;String, String&amp;gt;&amp;gt; get keys =&amp;gt; {&#xA;        &#39;en_US&#39;: {&#xA;          &#39;hello&#39;: &#39;Hello World&#39;,&#xA;        },&#xA;        &#39;de_DE&#39;: {&#xA;          &#39;hello&#39;: &#39;Hallo Welt&#39;,&#xA;        }&#xA;      };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using translations&lt;/h4&gt; &#xA;&lt;p&gt;Just append &lt;code&gt;.tr&lt;/code&gt; to the specified key and it will be translated, using the current value of &lt;code&gt;Get.locale&lt;/code&gt; and &lt;code&gt;Get.fallbackLocale&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#39;title&#39;.tr);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using translation with singular and plural&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var products = [];&#xA;Text(&#39;singularKey&#39;.trPlural(&#39;pluralKey&#39;, products.length, Args));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using translation with parameters&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:get/get.dart&#39;;&#xA;&#xA;&#xA;Map&amp;lt;String, Map&amp;lt;String, String&amp;gt;&amp;gt; get keys =&amp;gt; {&#xA;    &#39;en_US&#39;: {&#xA;        &#39;logged_in&#39;: &#39;logged in as @name with email @email&#39;,&#xA;    },&#xA;    &#39;es_ES&#39;: {&#xA;       &#39;logged_in&#39;: &#39;iniciado sesión como @name con e-mail @email&#39;,&#xA;    }&#xA;};&#xA;&#xA;Text(&#39;logged_in&#39;.trParams({&#xA;  &#39;name&#39;: &#39;Jhon&#39;,&#xA;  &#39;email&#39;: &#39;jhon@example.com&#39;&#xA;  }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Locales&lt;/h3&gt; &#xA;&lt;p&gt;Pass parameters to &lt;code&gt;GetMaterialApp&lt;/code&gt; to define the locale and translations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return GetMaterialApp(&#xA;    translations: Messages(), // your translations&#xA;    locale: Locale(&#39;en&#39;, &#39;US&#39;), // translations will be displayed in that locale&#xA;    fallbackLocale: Locale(&#39;en&#39;, &#39;UK&#39;), // specify the fallback locale in case an invalid locale is selected.&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Change locale&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;Get.updateLocale(locale)&lt;/code&gt; to update the locale. Translations then automatically use the new locale.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var locale = Locale(&#39;en&#39;, &#39;US&#39;);&#xA;Get.updateLocale(locale);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;System locale&lt;/h4&gt; &#xA;&lt;p&gt;To read the system locale, you could use &lt;code&gt;Get.deviceLocale&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return GetMaterialApp(&#xA;    locale: Get.deviceLocale,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change Theme&lt;/h2&gt; &#xA;&lt;p&gt;Please do not use any higher level widget than &lt;code&gt;GetMaterialApp&lt;/code&gt; in order to update it. This can trigger duplicate keys. A lot of people are used to the prehistoric approach of creating a &#34;ThemeProvider&#34; widget just to change the theme of your app, and this is definitely NOT necessary with &lt;strong&gt;GetX™&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can create your custom theme and simply add it within &lt;code&gt;Get.changeTheme&lt;/code&gt; without any boilerplate for that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Get.changeTheme(ThemeData.light());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to create something like a button that changes the Theme in &lt;code&gt;onTap&lt;/code&gt;, you can combine two &lt;strong&gt;GetX™&lt;/strong&gt; APIs for that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The api that checks if the dark &lt;code&gt;Theme&lt;/code&gt; is being used.&lt;/li&gt; &#xA; &lt;li&gt;And the &lt;code&gt;Theme&lt;/code&gt; Change API, you can just put this within an &lt;code&gt;onPressed&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Get.changeTheme(Get.isDarkMode? ThemeData.light(): ThemeData.dark());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;.darkmode&lt;/code&gt; is activated, it will switch to the &lt;em&gt;light theme&lt;/em&gt;, and when the &lt;em&gt;light theme&lt;/em&gt; becomes active, it will change to &lt;em&gt;dark theme&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GetConnect&lt;/h2&gt; &#xA;&lt;p&gt;GetConnect is an easy way to communicate from your back to your front with http or websockets&lt;/p&gt; &#xA;&lt;h3&gt;Default configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can simply extend GetConnect and use the GET/POST/PUT/DELETE/SOCKET methods to communicate with your Rest API or websockets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class UserProvider extends GetConnect {&#xA;  // Get request&#xA;  Future&amp;lt;Response&amp;gt; getUser(int id) =&amp;gt; get(&#39;http://youapi/users/$id&#39;);&#xA;  // Post request&#xA;  Future&amp;lt;Response&amp;gt; postUser(Map data) =&amp;gt; post(&#39;http://youapi/users&#39;, body: data);&#xA;  // Post request with File&#xA;  Future&amp;lt;Response&amp;lt;CasesModel&amp;gt;&amp;gt; postCases(List&amp;lt;int&amp;gt; image) {&#xA;    final form = FormData({&#xA;      &#39;file&#39;: MultipartFile(image, filename: &#39;avatar.png&#39;),&#xA;      &#39;otherFile&#39;: MultipartFile(image, filename: &#39;cover.png&#39;),&#xA;    });&#xA;    return post(&#39;http://youapi/users/upload&#39;, form);&#xA;  }&#xA;&#xA;  GetSocket userMessages() {&#xA;    return socket(&#39;https://yourapi/users/socket&#39;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom configuration&lt;/h3&gt; &#xA;&lt;p&gt;GetConnect is highly customizable You can define base Url, as answer modifiers, as Requests modifiers, define an authenticator, and even the number of attempts in which it will try to authenticate itself, in addition to giving the possibility to define a standard decoder that will transform all your requests into your Models without any additional configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class HomeProvider extends GetConnect {&#xA;  @override&#xA;  void onInit() {&#xA;    // All request will pass to jsonEncode so CasesModel.fromJson()&#xA;    httpClient.defaultDecoder = CasesModel.fromJson;&#xA;    httpClient.baseUrl = &#39;https://api.covid19api.com&#39;;&#xA;    // baseUrl = &#39;https://api.covid19api.com&#39;; // It define baseUrl to&#xA;    // Http and websockets if used with no [httpClient] instance&#xA;&#xA;    // It&#39;s will attach &#39;apikey&#39; property on header from all requests&#xA;    httpClient.addRequestModifier((request) {&#xA;      request.headers[&#39;apikey&#39;] = &#39;12345678&#39;;&#xA;      return request;&#xA;    });&#xA;&#xA;    // Even if the server sends data from the country &#34;Brazil&#34;,&#xA;    // it will never be displayed to users, because you remove&#xA;    // that data from the response, even before the response is delivered&#xA;    httpClient.addResponseModifier&amp;lt;CasesModel&amp;gt;((request, response) {&#xA;      CasesModel model = response.body;&#xA;      if (model.countries.contains(&#39;Brazil&#39;)) {&#xA;        model.countries.remove(&#39;Brazilll&#39;);&#xA;      }&#xA;    });&#xA;&#xA;    httpClient.addAuthenticator((request) async {&#xA;      final response = await get(&#34;http://yourapi/token&#34;);&#xA;      final token = response.body[&#39;token&#39;];&#xA;      // Set the header&#xA;      request.headers[&#39;Authorization&#39;] = &#34;$token&#34;;&#xA;      return request;&#xA;    });&#xA;&#xA;    //Autenticator will be called 3 times if HttpStatus is&#xA;    //HttpStatus.unauthorized&#xA;    httpClient.maxAuthRetries = 3;&#xA;  }&#xA;&#xA;  @override&#xA;  Future&amp;lt;Response&amp;lt;CasesModel&amp;gt;&amp;gt; getCases(String path) =&amp;gt; get(path);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GetPage Middleware&lt;/h2&gt; &#xA;&lt;p&gt;The GetPage has now new property that takes a list of GetMiddleWare and run them in the specific order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When GetPage has a Middlewares, all the children of this page will have the same middlewares automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Priority&lt;/h3&gt; &#xA;&lt;p&gt;The Order of the Middlewares to run can be set by the priority in the GetMiddleware.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final middlewares = [&#xA;  GetMiddleware(priority: 2),&#xA;  GetMiddleware(priority: 5),&#xA;  GetMiddleware(priority: 4),&#xA;  GetMiddleware(priority: -8),&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;those middlewares will be run in this order &lt;strong&gt;-8 =&amp;gt; 2 =&amp;gt; 4 =&amp;gt; 5&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Redirect&lt;/h3&gt; &#xA;&lt;p&gt;This function will be called when the page of the called route is being searched for. It takes RouteSettings as a result to redirect to. Or give it null and there will be no redirecting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RouteSettings redirect(String route) {&#xA;  final authService = Get.find&amp;lt;AuthService&amp;gt;();&#xA;  return authService.authed.value ? null : RouteSettings(name: &#39;/login&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;onPageCalled&lt;/h3&gt; &#xA;&lt;p&gt;This function will be called when this Page is called before anything created you can use it to change something about the page or give it new page&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetPage onPageCalled(GetPage page) {&#xA;  final authService = Get.find&amp;lt;AuthService&amp;gt;();&#xA;  return page.copyWith(title: &#39;Welcome ${authService.UserName}&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OnBindingsStart&lt;/h3&gt; &#xA;&lt;p&gt;This function will be called right before the Bindings are initialize. Here you can change Bindings for this page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;Bindings&amp;gt; onBindingsStart(List&amp;lt;Bindings&amp;gt; bindings) {&#xA;  final authService = Get.find&amp;lt;AuthService&amp;gt;();&#xA;  if (authService.isAdmin) {&#xA;    bindings.add(AdminBinding());&#xA;  }&#xA;  return bindings;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OnPageBuildStart&lt;/h3&gt; &#xA;&lt;p&gt;This function will be called right after the Bindings are initialize. Here you can do something after that you created the bindings and before creating the page widget.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetPageBuilder onPageBuildStart(GetPageBuilder page) {&#xA;  print(&#39;bindings are ready&#39;);&#xA;  return page;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OnPageBuilt&lt;/h3&gt; &#xA;&lt;p&gt;This function will be called right after the GetPage.page function is called and will give you the result of the function. and take the widget that will be showed.&lt;/p&gt; &#xA;&lt;h3&gt;OnPageDispose&lt;/h3&gt; &#xA;&lt;p&gt;This function will be called right after disposing all the related objects (Controllers, views, ...) of the page.&lt;/p&gt; &#xA;&lt;h2&gt;Other Advanced APIs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// give the current args from currentScreen&#xA;Get.arguments&#xA;&#xA;// give name of previous route&#xA;Get.previousRoute&#xA;&#xA;// give the raw route to access for example, rawRoute.isFirst()&#xA;Get.rawRoute&#xA;&#xA;// give access to Routing API from GetObserver&#xA;Get.routing&#xA;&#xA;// check if snackbar is open&#xA;Get.isSnackbarOpen&#xA;&#xA;// check if dialog is open&#xA;Get.isDialogOpen&#xA;&#xA;// check if bottomsheet is open&#xA;Get.isBottomSheetOpen&#xA;&#xA;// remove one route.&#xA;Get.removeRoute()&#xA;&#xA;// back repeatedly until the predicate returns true.&#xA;Get.until()&#xA;&#xA;// go to next route and remove all the previous routes until the predicate returns true.&#xA;Get.offUntil()&#xA;&#xA;// go to next named route and remove all the previous routes until the predicate returns true.&#xA;Get.offNamedUntil()&#xA;&#xA;//Check in what platform the app is running&#xA;GetPlatform.isAndroid&#xA;GetPlatform.isIOS&#xA;GetPlatform.isMacOS&#xA;GetPlatform.isWindows&#xA;GetPlatform.isLinux&#xA;GetPlatform.isFuchsia&#xA;&#xA;//Check the device type&#xA;GetPlatform.isMobile&#xA;GetPlatform.isDesktop&#xA;//All platforms are supported independently in web!&#xA;//You can tell if you are running inside a browser&#xA;//on Windows, iOS, OSX, Android, etc.&#xA;GetPlatform.isWeb&#xA;&#xA;&#xA;// Equivalent to : MediaQuery.of(context).size.height,&#xA;// but immutable.&#xA;Get.height&#xA;Get.width&#xA;&#xA;// Gives the current context of the Navigator.&#xA;Get.context&#xA;&#xA;// Gives the context of the snackbar/dialog/bottomsheet in the foreground, anywhere in your code.&#xA;Get.contextOverlay&#xA;&#xA;// Note: the following methods are extensions on context. Since you&#xA;// have access to context in any place of your UI, you can use it anywhere in the UI code&#xA;&#xA;// If you need a changeable height/width (like Desktop or browser windows that can be scaled) you will need to use context.&#xA;context.width&#xA;context.height&#xA;&#xA;// Gives you the power to define half the screen, a third of it and so on.&#xA;// Useful for responsive applications.&#xA;// param dividedBy (double) optional - default: 1&#xA;// param reducedBy (double) optional - default: 0&#xA;context.heightTransformer()&#xA;context.widthTransformer()&#xA;&#xA;/// Similar to MediaQuery.of(context).size&#xA;context.mediaQuerySize()&#xA;&#xA;/// Similar to MediaQuery.of(context).padding&#xA;context.mediaQueryPadding()&#xA;&#xA;/// Similar to MediaQuery.of(context).viewPadding&#xA;context.mediaQueryViewPadding()&#xA;&#xA;/// Similar to MediaQuery.of(context).viewInsets;&#xA;context.mediaQueryViewInsets()&#xA;&#xA;/// Similar to MediaQuery.of(context).orientation;&#xA;context.orientation()&#xA;&#xA;/// Check if device is on landscape mode&#xA;context.isLandscape()&#xA;&#xA;/// Check if device is on portrait mode&#xA;context.isPortrait()&#xA;&#xA;/// Similar to MediaQuery.of(context).devicePixelRatio;&#xA;context.devicePixelRatio()&#xA;&#xA;/// Similar to MediaQuery.of(context).textScaleFactor;&#xA;context.textScaleFactor()&#xA;&#xA;/// Get the shortestSide from screen&#xA;context.mediaQueryShortestSide()&#xA;&#xA;/// True if width be larger than 800&#xA;context.showNavbar()&#xA;&#xA;/// True if the shortestSide is smaller than 600p&#xA;context.isPhone()&#xA;&#xA;/// True if the shortestSide is largest than 600p&#xA;context.isSmallTablet()&#xA;&#xA;/// True if the shortestSide is largest than 720p&#xA;context.isLargeTablet()&#xA;&#xA;/// True if the current device is Tablet&#xA;context.isTablet()&#xA;&#xA;/// Returns a value&amp;lt;T&amp;gt; according to the screen size&#xA;/// can give value for:&#xA;/// watch: if the shortestSide is smaller than 300&#xA;/// mobile: if the shortestSide is smaller than 600&#xA;/// tablet: if the shortestSide is smaller than 1200&#xA;/// desktop: if width is largest than 1200&#xA;context.responsiveValue&amp;lt;T&amp;gt;()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Global Settings and Manual configurations&lt;/h3&gt; &#xA;&lt;p&gt;GetMaterialApp configures everything for you, but if you want to configure Get manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MaterialApp(&#xA;  navigatorKey: Get.key,&#xA;  navigatorObservers: [GetObserver()],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also be able to use your own Middleware within &lt;code&gt;GetObserver&lt;/code&gt;, this will not influence anything.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MaterialApp(&#xA;  navigatorKey: Get.key,&#xA;  navigatorObservers: [&#xA;    GetObserver(MiddleWare.observer) // Here&#xA;  ],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create &lt;em&gt;Global Settings&lt;/em&gt; for &lt;code&gt;Get&lt;/code&gt;. Just add &lt;code&gt;Get.config&lt;/code&gt; to your code before pushing any route. Or do it directly in your &lt;code&gt;GetMaterialApp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetMaterialApp(&#xA;  enableLog: true,&#xA;  defaultTransition: Transition.fade,&#xA;  opaqueRoute: Get.isOpaqueRouteDefault,&#xA;  popGesture: Get.isPopGestureEnable,&#xA;  transitionDuration: Get.defaultDurationTransition,&#xA;  defaultGlobalState: Get.defaultGlobalState,&#xA;);&#xA;&#xA;Get.config(&#xA;  enableLog = true,&#xA;  defaultPopGesture = true,&#xA;  defaultTransition = Transitions.cupertino&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally redirect all the logging messages from &lt;code&gt;Get&lt;/code&gt;. If you want to use your own, favourite logging package, and want to capture the logs there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetMaterialApp(&#xA;  enableLog: true,&#xA;  logWriterCallback: localLogWriter,&#xA;);&#xA;&#xA;void localLogWriter(String text, {bool isError = false}) {&#xA;  // pass the message to your favourite logging package here&#xA;  // please note that even if enableLog: false log messages will be pushed in this callback&#xA;  // you get check the flag if you want through GetConfig.isLogEnable&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local State Widgets&lt;/h3&gt; &#xA;&lt;p&gt;These Widgets allows you to manage a single value, and keep the state ephemeral and locally. We have flavours for Reactive and Simple. For instance, you might use them to toggle obscureText in a &lt;code&gt;TextField&lt;/code&gt;, maybe create a custom Expandable Panel, or maybe modify the current index in &lt;code&gt;BottomNavigationBar&lt;/code&gt; while changing the content of the body in a &lt;code&gt;Scaffold&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;ValueBuilder&lt;/h4&gt; &#xA;&lt;p&gt;A simplification of &lt;code&gt;StatefulWidget&lt;/code&gt; that works with a &lt;code&gt;.setState&lt;/code&gt; callback that takes the updated value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ValueBuilder&amp;lt;bool&amp;gt;(&#xA;  initialValue: false,&#xA;  builder: (value, updateFn) =&amp;gt; Switch(&#xA;    value: value,&#xA;    onChanged: updateFn, // same signature! you could use ( newValue ) =&amp;gt; updateFn( newValue )&#xA;  ),&#xA;  // if you need to call something outside the builder method.&#xA;  onUpdate: (value) =&amp;gt; print(&#34;Value updated: $value&#34;),&#xA;  onDispose: () =&amp;gt; print(&#34;Widget unmounted&#34;),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ObxValue&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/jonataslaw/getx/master/#valuebuilder&#34;&gt;&lt;code&gt;ValueBuilder&lt;/code&gt;&lt;/a&gt;, but this is the Reactive version, you pass a Rx instance (remember the magical .obs?) and updates automatically... isn&#39;t it awesome?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ObxValue((data) =&amp;gt; Switch(&#xA;        value: data.value,&#xA;        onChanged: data, // Rx has a _callable_ function! You could use (flag) =&amp;gt; data.value = flag,&#xA;    ),&#xA;    false.obs,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful tips&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;.obs&lt;/code&gt;ervables (also known as &lt;em&gt;Rx&lt;/em&gt; Types) have a wide variety of internal methods and operators.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Is very common to &lt;em&gt;believe&lt;/em&gt; that a property with &lt;code&gt;.obs&lt;/code&gt; &lt;strong&gt;IS&lt;/strong&gt; the actual value... but make no mistake! We avoid the Type declaration of the variable, because Dart&#39;s compiler is smart enough, and the code looks cleaner, but:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var message = &#39;Hello world&#39;.obs;&#xA;print( &#39;Message &#34;$message&#34; has Type ${message.runtimeType}&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even if &lt;code&gt;message&lt;/code&gt; &lt;em&gt;prints&lt;/em&gt; the actual String value, the Type is &lt;strong&gt;RxString&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;So, you can&#39;t do &lt;code&gt;message.substring( 0, 4 )&lt;/code&gt;. You have to access the real &lt;code&gt;value&lt;/code&gt; inside the &lt;em&gt;observable&lt;/em&gt;: The most &#34;used way&#34; is &lt;code&gt;.value&lt;/code&gt;, but, did you know that you can also use...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final name = &#39;GetX&#39;.obs;&#xA;// only &#34;updates&#34; the stream, if the value is different from the current one.&#xA;name.value = &#39;Hey&#39;;&#xA;&#xA;// All Rx properties are &#34;callable&#34; and returns the new value.&#xA;// but this approach does not accepts `null`, the UI will not rebuild.&#xA;name(&#39;Hello&#39;);&#xA;&#xA;// is like a getter, prints &#39;Hello&#39;.&#xA;name() ;&#xA;&#xA;/// numbers:&#xA;&#xA;final count = 0.obs;&#xA;&#xA;// You can use all non mutable operations from num primitives!&#xA;count + 1;&#xA;&#xA;// Watch out! this is only valid if `count` is not final, but var&#xA;count += 1;&#xA;&#xA;// You can also compare against values:&#xA;count &amp;gt; 2;&#xA;&#xA;/// booleans:&#xA;&#xA;final flag = false.obs;&#xA;&#xA;// switches the value between true/false&#xA;flag.toggle();&#xA;&#xA;&#xA;/// all types:&#xA;&#xA;// Sets the `value` to null.&#xA;flag.nil();&#xA;&#xA;// All toString(), toJson() operations are passed down to the `value`&#xA;print( count ); // calls `toString()` inside  for RxInt&#xA;&#xA;final abc = [0,1,2].obs;&#xA;// Converts the value to a json Array, prints RxList&#xA;// Json is supported by all Rx types!&#xA;print(&#39;json: ${jsonEncode(abc)}, type: ${abc.runtimeType}&#39;);&#xA;&#xA;// RxMap, RxList and RxSet are special Rx types, that extends their native types.&#xA;// but you can work with a List as a regular list, although is reactive!&#xA;abc.add(12); // pushes 12 to the list, and UPDATES the stream.&#xA;abc[3]; // like Lists, reads the index 3.&#xA;&#xA;&#xA;// equality works with the Rx and the value, but hashCode is always taken from the value&#xA;final number = 12.obs;&#xA;print( number == 12 ); // prints &amp;gt; true&#xA;&#xA;/// Custom Rx Models:&#xA;&#xA;// toJson(), toString() are deferred to the child, so you can implement override on them, and print() the observable directly.&#xA;&#xA;class User {&#xA;    String name, last;&#xA;    int age;&#xA;    User({this.name, this.last, this.age});&#xA;&#xA;    @override&#xA;    String toString() =&amp;gt; &#39;$name $last, $age years old&#39;;&#xA;}&#xA;&#xA;final user = User(name: &#39;John&#39;, last: &#39;Doe&#39;, age: 33).obs;&#xA;&#xA;// `user` is &#34;reactive&#34;, but the properties inside ARE NOT!&#xA;// So, if we change some variable inside of it...&#xA;user.value.name = &#39;Roi&#39;;&#xA;// The widget will not rebuild!,&#xA;// `Rx` don&#39;t have any clue when you change something inside user.&#xA;// So, for custom classes, we need to manually &#34;notify&#34; the change.&#xA;user.refresh();&#xA;&#xA;// or we can use the `update()` method!&#xA;user.update((value){&#xA;  value.name=&#39;Roi&#39;;&#xA;});&#xA;&#xA;print( user );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;StateMixin&lt;/h2&gt; &#xA;&lt;p&gt;Another way to handle your &lt;code&gt;UI&lt;/code&gt; state is use the &lt;code&gt;StateMixin&amp;lt;T&amp;gt;&lt;/code&gt; . To implement it, use the &lt;code&gt;with&lt;/code&gt; to add the &lt;code&gt;StateMixin&amp;lt;T&amp;gt;&lt;/code&gt; to your controller which allows a T model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Controller extends GetController with StateMixin&amp;lt;User&amp;gt;{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;change()&lt;/code&gt; method change the State whenever we want. Just pass the data and the status in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;change(data, status: RxStatus.success());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RxStatus allow these status:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RxStatus.loading();&#xA;RxStatus.success();&#xA;RxStatus.empty();&#xA;RxStatus.error(&#39;message&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To represent it in the UI, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class OtherClass extends GetView&amp;lt;Controller&amp;gt; {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;&#xA;      body: controller.obx(&#xA;        (state)=&amp;gt;Text(state.name),&#xA;        &#xA;        // here you can put your custom loading indicator, but&#xA;        // by default would be Center(child:CircularProgressIndicator())&#xA;        onLoading: CustomLoadingIndicator(),&#xA;        onEmpty: Text(&#39;No data found&#39;),&#xA;&#xA;        // here also you can set your own error widget, but by&#xA;        // default will be an Center(child:Text(error))&#xA;        onError: (error)=&amp;gt;Text(error),&#xA;      ),&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GetView&lt;/h4&gt; &#xA;&lt;p&gt;I love this Widget, is so simple, yet, so useful!&lt;/p&gt; &#xA;&lt;p&gt;Is a &lt;code&gt;const Stateless&lt;/code&gt; Widget that has a getter &lt;code&gt;controller&lt;/code&gt; for a registered &lt;code&gt;Controller&lt;/code&gt;, that&#39;s all.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; class AwesomeController extends GetController {&#xA;   final String title = &#39;My Awesome View&#39;;&#xA; }&#xA;&#xA;  // ALWAYS remember to pass the `Type` you used to register your controller!&#xA; class AwesomeView extends GetView&amp;lt;AwesomeController&amp;gt; {&#xA;   @override&#xA;   Widget build(BuildContext context) {&#xA;     return Container(&#xA;       padding: EdgeInsets.all(20),&#xA;       child: Text(controller.title), // just call `controller.something`&#xA;     );&#xA;   }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GetResponsiveView&lt;/h4&gt; &#xA;&lt;p&gt;Extend this widget to build responsive view. this widget contains the &lt;code&gt;screen&lt;/code&gt; property that have all information about the screen size and type.&lt;/p&gt; &#xA;&lt;h5&gt;How to use it&lt;/h5&gt; &#xA;&lt;p&gt;You have two options to build it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with &lt;code&gt;builder&lt;/code&gt; method you return the widget to build.&lt;/li&gt; &#xA; &lt;li&gt;with methods &lt;code&gt;desktop&lt;/code&gt;, &lt;code&gt;tablet&lt;/code&gt;,&lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;. the specific method will be built when the screen type matches the method when the screen is [ScreenType.Tablet] the &lt;code&gt;tablet&lt;/code&gt; method will be exuded and so on. &lt;strong&gt;Note:&lt;/strong&gt; If you use this method please set the property &lt;code&gt;alwaysUseBuilder&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With &lt;code&gt;settings&lt;/code&gt; property you can set the width limit for the screen types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SchabanBo/get_page_example/raw/master/docs/Example.gif?raw=true&#34; alt=&#34;example&#34;&gt; Code to this screen &lt;a href=&#34;https://github.com/SchabanBo/get_page_example/raw/master/lib/pages/responsive_example/responsive_view.dart&#34;&gt;code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GetWidget&lt;/h4&gt; &#xA;&lt;p&gt;Most people have no idea about this Widget, or totally confuse the usage of it. The use case is very rare, but very specific: It &lt;code&gt;caches&lt;/code&gt; a Controller. Because of the &lt;em&gt;cache&lt;/em&gt;, can&#39;t be a &lt;code&gt;const Stateless&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;So, when do you need to &#34;cache&#34; a Controller?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you use, another &#34;not so common&#34; feature of &lt;strong&gt;GetX&lt;/strong&gt;: &lt;code&gt;Get.create()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Get.create(()=&amp;gt;Controller())&lt;/code&gt; will generate a new &lt;code&gt;Controller&lt;/code&gt; each time you call &lt;code&gt;Get.find&amp;lt;Controller&amp;gt;()&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s where &lt;code&gt;GetWidget&lt;/code&gt; shines... as you can use it, for example, to keep a list of Todo items. So, if the widget gets &#34;rebuilt&#34;, it will keep the same controller instance.&lt;/p&gt; &#xA;&lt;h4&gt;GetxService&lt;/h4&gt; &#xA;&lt;p&gt;This class is like a &lt;code&gt;GetxController&lt;/code&gt;, it shares the same lifecycle ( &lt;code&gt;onInit()&lt;/code&gt;, &lt;code&gt;onReady()&lt;/code&gt;, &lt;code&gt;onClose()&lt;/code&gt;). But has no &#34;logic&#34; inside of it. It just notifies &lt;strong&gt;GetX&lt;/strong&gt; Dependency Injection system, that this subclass &lt;strong&gt;can not&lt;/strong&gt; be removed from memory.&lt;/p&gt; &#xA;&lt;p&gt;So is super useful to keep your &#34;Services&#34; always reachable and active with &lt;code&gt;Get.find()&lt;/code&gt;. Like: &lt;code&gt;ApiService&lt;/code&gt;, &lt;code&gt;StorageService&lt;/code&gt;, &lt;code&gt;CacheService&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; main() async {&#xA;  await initServices(); /// AWAIT SERVICES INITIALIZATION.&#xA;  runApp(SomeApp());&#xA;}&#xA;&#xA;/// Is a smart move to make your Services intiialize before you run the Flutter app.&#xA;/// as you can control the execution flow (maybe you need to load some Theme configuration,&#xA;/// apiKey, language defined by the User... so load SettingService before running ApiService.&#xA;/// so GetMaterialApp() doesnt have to rebuild, and takes the values directly.&#xA;void initServices() async {&#xA;  print(&#39;starting services ...&#39;);&#xA;  /// Here is where you put get_storage, hive, shared_pref initialization.&#xA;  /// or moor connection, or whatever that&#39;s async.&#xA;  await Get.putAsync(() =&amp;gt; DbService().init());&#xA;  await Get.putAsync(SettingsService()).init();&#xA;  print(&#39;All services started...&#39;);&#xA;}&#xA;&#xA;class DbService extends GetxService {&#xA;  Future&amp;lt;DbService&amp;gt; init() async {&#xA;    print(&#39;$runtimeType delays 2 sec&#39;);&#xA;    await 2.delay();&#xA;    print(&#39;$runtimeType ready!&#39;);&#xA;    return this;&#xA;  }&#xA;}&#xA;&#xA;class SettingsService extends GetxService {&#xA;  void init() async {&#xA;    print(&#39;$runtimeType delays 1 sec&#39;);&#xA;    await 1.delay();&#xA;    print(&#39;$runtimeType ready!&#39;);&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only way to actually delete a &lt;code&gt;GetxService&lt;/code&gt;, is with &lt;code&gt;Get.reset()&lt;/code&gt; which is like a &#34;Hot Reboot&#34; of your app. So remember, if you need absolute persistence of a class instance during the lifetime of your app, use &lt;code&gt;GetxService&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;You can test your controllers like any other class, including their lifecycles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Controller extends GetxController {&#xA;  @override&#xA;  void onInit() {&#xA;    super.onInit();&#xA;    //Change value to name2&#xA;    name.value = &#39;name2&#39;;&#xA;  }&#xA;&#xA;  @override&#xA;  void onClose() {&#xA;    name.value = &#39;&#39;;&#xA;    super.onClose();&#xA;  }&#xA;&#xA;  final name = &#39;name1&#39;.obs;&#xA;&#xA;  void changeName() =&amp;gt; name.value = &#39;name3&#39;;&#xA;}&#xA;&#xA;void main() {&#xA;  test(&#39;&#39;&#39;&#xA;Test the state of the reactive variable &#34;name&#34; across all of its lifecycles&#39;&#39;&#39;,&#xA;      () {&#xA;    /// You can test the controller without the lifecycle,&#xA;    /// but it&#39;s not recommended unless you&#39;re not using&#xA;    ///  GetX dependency injection&#xA;    final controller = Controller();&#xA;    expect(controller.name.value, &#39;name1&#39;);&#xA;&#xA;    /// If you are using it, you can test everything,&#xA;    /// including the state of the application after each lifecycle.&#xA;    Get.put(controller); // onInit was called&#xA;    expect(controller.name.value, &#39;name2&#39;);&#xA;&#xA;    /// Test your functions&#xA;    controller.changeName();&#xA;    expect(controller.name.value, &#39;name3&#39;);&#xA;&#xA;    /// onClose was called&#xA;    Get.delete&amp;lt;Controller&amp;gt;();&#xA;&#xA;    expect(controller.name.value, &#39;&#39;);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;h5&gt;Mockito or mocktail&lt;/h5&gt; &#xA;&lt;p&gt;If you need to mock your GetxController/GetxService, you should extend GetxController, and mixin it with Mock, that way&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class NotificationServiceMock extends GetxService with Mock implements NotificationService {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Using Get.reset()&lt;/h5&gt; &#xA;&lt;p&gt;If you are testing widgets, or test groups, use Get.reset at the end of your test or in tearDown to reset all settings from your previous test.&lt;/p&gt; &#xA;&lt;h5&gt;Get.testMode&lt;/h5&gt; &#xA;&lt;p&gt;if you are using your navigation in your controllers, use &lt;code&gt;Get.testMode = true&lt;/code&gt; at the beginning of your main.&lt;/p&gt; &#xA;&lt;h1&gt;Breaking changes from 2.0&lt;/h1&gt; &#xA;&lt;p&gt;1- Rx types:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Before&lt;/th&gt; &#xA;   &lt;th&gt;After&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StringX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RxString&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IntX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RxInt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MapX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RxMap&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ListX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RxList&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NumX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RxNum&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DoubleX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RxDouble&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;RxController and GetBuilder now have merged, you no longer need to memorize which controller you want to use, just use GetxController, it will work for simple state management and for reactive as well.&lt;/p&gt; &#xA;&lt;p&gt;2- NamedRoutes Before:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetMaterialApp(&#xA;  namedRoutes: {&#xA;    &#39;/&#39;: GetRoute(page: Home()),&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetMaterialApp(&#xA;  getPages: [&#xA;    GetPage(name: &#39;/&#39;, page: () =&amp;gt; Home()),&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why this change? Often, it may be necessary to decide which page will be displayed from a parameter, or a login token, the previous approach was inflexible, as it did not allow this. Inserting the page into a function has significantly reduced the RAM consumption, since the routes will not be allocated in memory since the app was started, and it also allowed to do this type of approach:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;GetStorage box = GetStorage();&#xA;&#xA;GetMaterialApp(&#xA;  getPages: [&#xA;    GetPage(name: &#39;/&#39;, page:(){&#xA;      return box.hasData(&#39;token&#39;) ? Home() : Login();&#xA;    })&#xA;  ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Why Getx?&lt;/h1&gt; &#xA;&lt;p&gt;1- Many times after a Flutter update, many of your packages will break. Sometimes compilation errors happen, errors often appear that there are still no answers about, and the developer needs to know where the error came from, track the error, only then try to open an issue in the corresponding repository, and see its problem solved. Get centralizes the main resources for development (State, dependency and route management), allowing you to add a single package to your pubspec, and start working. After a Flutter update, the only thing you need to do is update the Get dependency, and get to work. Get also resolves compatibility issues. How many times a version of a package is not compatible with the version of another, because one uses a dependency in one version, and the other in another version? This is also not a concern using Get, as everything is in the same package and is fully compatible.&lt;/p&gt; &#xA;&lt;p&gt;2- Flutter is easy, Flutter is incredible, but Flutter still has some boilerplate that may be unwanted for most developers, such as &lt;code&gt;Navigator.of(context).push (context, builder [...]&lt;/code&gt;. Get simplifies development. Instead of writing 8 lines of code to just call a route, you can just do it: &lt;code&gt;Get.to(Home())&lt;/code&gt; and you&#39;re done, you&#39;ll go to the next page. Dynamic web urls are a really painful thing to do with Flutter currently, and that with GetX is stupidly simple. Managing states in Flutter, and managing dependencies is also something that generates a lot of discussion, as there are hundreds of patterns in the pub. But there is nothing as easy as adding a &#34;.obs&#34; at the end of your variable, and place your widget inside an Obx, and that&#39;s it, all updates to that variable will be automatically updated on the screen.&lt;/p&gt; &#xA;&lt;p&gt;3- Ease without worrying about performance. Flutter&#39;s performance is already amazing, but imagine that you use a state manager, and a locator to distribute your blocs/stores/controllers/ etc. classes. You will have to manually call the exclusion of that dependency when you don&#39;t need it. But have you ever thought of simply using your controller, and when it was no longer being used by anyone, it would simply be deleted from memory? That&#39;s what GetX does. With SmartManagement, everything that is not being used is deleted from memory, and you shouldn&#39;t have to worry about anything but programming. You will be assured that you are consuming the minimum necessary resources, without even having created a logic for this.&lt;/p&gt; &#xA;&lt;p&gt;4- Actual decoupling. You may have heard the concept &#34;separate the view from the business logic&#34;. This is not a peculiarity of BLoC, MVC, MVVM, and any other standard on the market has this concept. However, this concept can often be mitigated in Flutter due to the use of context. If you need context to find an InheritedWidget, you need it in the view, or pass the context by parameter. I particularly find this solution very ugly, and to work in teams we will always have a dependence on View&#39;s business logic. Getx is unorthodox with the standard approach, and while it does not completely ban the use of StatefulWidgets, InitState, etc., it always has a similar approach that can be cleaner. Controllers have life cycles, and when you need to make an APIREST request for example, you don&#39;t depend on anything in the view. You can use onInit to initiate the http call, and when the data arrives, the variables will be populated. As GetX is fully reactive (really, and works under streams), once the items are filled, all widgets that use that variable will be automatically updated in the view. This allows people with UI expertise to work only with widgets, and not have to send anything to business logic other than user events (like clicking a button), while people working with business logic will be free to create and test the business logic separately.&lt;/p&gt; &#xA;&lt;p&gt;This library will always be updated and implementing new features. Feel free to offer PRs and contribute to them.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;h2&gt;Community channels&lt;/h2&gt; &#xA;&lt;p&gt;GetX has a highly active and helpful community. If you have questions, or would like any assistance regarding the use of this framework, please join our community channels, your question will be answered more quickly, and it will be the most suitable place. This repository is exclusive for opening issues, and requesting resources, but feel free to be part of GetX Community.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Slack&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Telegram&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://communityinviter.com/apps/getxworkspace/getx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join-orange.svg?sanitize=true&#34; alt=&#34;Get on Slack&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://discord.com/invite/9Hpt99N&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/722900883784073290.svg?logo=discord&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://t.me/joinchat/PhdbJRmsZNpAqSLJL6bH7g&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20Telegram-blue.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Want to contribute to the project? We will be proud to highlight you as one of our collaborators. Here are some points where you can contribute and make Get (and Flutter) even better.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helping to translate the readme into other languages.&lt;/li&gt; &#xA; &lt;li&gt;Adding documentation to the readme (a lot of Get&#39;s functions haven&#39;t been documented yet).&lt;/li&gt; &#xA; &lt;li&gt;Write articles or make videos teaching how to use Get (they will be inserted in the Readme and in the future in our Wiki).&lt;/li&gt; &#xA; &lt;li&gt;Offering PRs for code/tests.&lt;/li&gt; &#xA; &lt;li&gt;Including new functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any contribution is welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Articles and videos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLV1fXIAyjeuZ6M8m56zajMUwu4uE3-SL0&#34;&gt;Flutter Getx EcoSystem package for arabic people&lt;/a&gt; - Tutorial by &lt;a href=&#34;https://github.com/UsamaElgendy&#34;&gt;Pesa Coder&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/flutter-dynamic-themes-in-3-lines-c3b375f292e3&#34;&gt;Dynamic Themes in 3 lines using GetX™&lt;/a&gt; - Tutorial by &lt;a href=&#34;https://github.com/RodBr&#34;&gt;Rod Brown&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RaqPIoJSTtI&#34;&gt;Complete GetX™ Navigation&lt;/a&gt; - Route management video by Amateur Coder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CNpXbeI_slw&#34;&gt;Complete GetX State Management&lt;/a&gt; - State management video by Amateur Coder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ttQtlX_Q0eU&#34;&gt;GetX™ Other Features&lt;/a&gt; - Utils, storage, bindings and other features video by Amateur Coder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BiV0DcXgk58&#34;&gt;Firestore User with GetX | Todo App&lt;/a&gt; - Video by Amateur Coder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-H-T_BSgfOE&#34;&gt;Firebase Auth with GetX | Todo App&lt;/a&gt; - Video by Amateur Coder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flutter-community/the-flutter-getx-ecosystem-state-management-881c7235511d&#34;&gt;The Flutter GetX™ Ecosystem ~ State Management&lt;/a&gt; - State management by &lt;a href=&#34;https://github.com/imaachman&#34;&gt;Aachman Garg&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flutter-community/the-flutter-getx-ecosystem-dependency-injection-8e763d0ec6b9&#34;&gt;The Flutter GetX™ Ecosystem ~ Dependency Injection&lt;/a&gt; - Dependency Injection by &lt;a href=&#34;https://github.com/imaachman&#34;&gt;Aachman Garg&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IYQgtu9TM74&#34;&gt;GetX, the all-in-one Flutter package&lt;/a&gt; - A brief tutorial covering State Management and Navigation by Thad Carnevalli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EcnqFasHf18&#34;&gt;Build a To-do List App from scratch using Flutter and GetX&lt;/a&gt; - UI + State Management + Storage video by Thad Carnevalli.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@jeffmcmorris/getx-flutter-firebase-auth-example-b383c1dd1de2&#34;&gt;GetX Flutter Firebase Auth Example&lt;/a&gt; - Article by Jeff McMorris.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.appwithflutter.com/flutter-state-management-with-getx/&#34;&gt;Flutter State Management with GetX – Complete App&lt;/a&gt; - by App With Flutter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.appwithflutter.com/flutter-routing-using-get-package/&#34;&gt;Flutter Routing with Animation using Get Package&lt;/a&gt; - by App With Flutter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dartpad.dev/2b3d0d6f9d4e312c5fdbefc414c1727e?&#34;&gt;A minimal example on dartpad&lt;/a&gt; - by &lt;a href=&#34;https://github.com/roipeker&#34;&gt;Roi Peker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>