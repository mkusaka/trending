<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-23T01:34:18Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>poljudy/weather_forecast_app</title>
    <updated>2023-06-23T01:34:18Z</updated>
    <id>tag:github.com,2023-06-23:/poljudy/weather_forecast_app</id>
    <link href="https://github.com/poljudy/weather_forecast_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is weather forecast app built with pure flutter. This can give you information about weather in all cities all over the world using openweathermap api.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;🌦 weather_pack&lt;/h2&gt; &#xA;&lt;p&gt;A quick way to get access to weather conditions.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why choose this library?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;basic:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🚲 Easy to use - you only need the APIKEY.&lt;/li&gt; &#xA; &lt;li&gt;🏝 Built-in geocoding - search for locations by assumed names or by coordinates.&lt;/li&gt; &#xA; &lt;li&gt;🩺 Various units of measurement - speed, temperature, pressure and cardinal points.&lt;/li&gt; &#xA; &lt;li&gt;🌤 There are original weather icons.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;&lt;i&gt;advanced:&lt;/i&gt;&lt;/b&gt; (Click to open)&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;🔮 At least one release application is already based on this package. Therefore, there is an additional guarantee of security and timely updates of this package.&lt;/li&gt; &#xA;  &lt;li&gt;🔓 There is a method for checking your api for correctness.&lt;/li&gt; &#xA;  &lt;li&gt;🧱 It is very easy to customize data models. Create your own data models and take only what you need from the built-in ones.&lt;/li&gt; &#xA;  &lt;li&gt;🧾 The code is well documented and each class is labeled and decoded. There are unit tests for the main functions of the package.&lt;/li&gt; &#xA;  &lt;li&gt;🦺 Safe unpacking of types. If the server stops outputting values - your weather model will have a null field and the application will not crash.&lt;/li&gt; &#xA;  &lt;li&gt;🔧 This package has no unnecessary dependencies and contains minimal code. Also, all platforms are supported.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;folder &lt;a href=&#34;https://github.com/PackRuble/weather_pack/tree/master/example&#34;&gt;&lt;code&gt;example&lt;/code&gt;&lt;/a&gt;. There is a simple example of how to use the basic functions of the package, as well as a console mini-application without using flutter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/example/weather_in_console/assets/result_in_console.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to suggest materials for inclusion in this list ^_~&lt;/p&gt; &#xA;&lt;h2&gt;Endpoints openweathermap.org&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s agree to designate &lt;em&gt;Openweathermap&lt;/em&gt; as &lt;em&gt;&lt;strong&gt;OWM&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library uses the following site endpoints &lt;a href=&#34;https://openweathermap.org/&#34;&gt;openweathermap.org&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Endpoint or Path&lt;/th&gt; &#xA;   &lt;th&gt;A class or method that uses this endpoint&lt;/th&gt; &#xA;   &lt;th&gt;See more&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;api.openweathermap.org/data/2.5/weather&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;WeatherService.currentWeatherByLocation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openweathermap.org/current&#34;&gt;current&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;api.openweathermap.org/data/2.5/onecall&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;WeatherService.oneCallWeatherByLocation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openweathermap.org/api/one-call-api&#34;&gt;one-call-api&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;api.openweathermap.org/geo/1.0/direct&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GeocodingService.getLocationByCityName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openweathermap.org/api/geocoding-api#direct&#34;&gt;geocoding-direct&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;api.openweathermap.org/geo/1.0/reverse&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GeocodingService.getLocationByCoordinates&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openweathermap.org/api/geocoding-api#reverse&#34;&gt;geocoding-reverse&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- Links --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#-weather_pack&#34;&gt;🌦 weather_pack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#endpoints-openweathermaporg&#34;&gt;Endpoints openweathermap.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#usage-weather-service&#34;&gt;Usage weather service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#usage-geocoding-service&#34;&gt;Usage geocoding service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#usage-units-measure&#34;&gt;Usage units measure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#usage-weather-icons&#34;&gt;Usage weather icons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#api-key-testing&#34;&gt;API key testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#features-in-development&#34;&gt;Features in development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/poljudy/weather_forecast_app/master/#additional-information&#34;&gt;Additional information&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add dependency to your &lt;code&gt;pubspec.yaml&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  weather_pack: &amp;lt;latest_version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the command: &lt;code&gt;flutter pub get&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use in your code: &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:weather_pack/weather_pack.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get the current weather:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; main() async {&#xA;  const api = &#39;YOUR_APIKEY&#39;; // TODO: change to your Openweathermap APIkey&#xA;  final wService = WeatherService(api);&#xA;&#xA;  // get the current weather in Amsterdam&#xA;  final WeatherCurrent currently = await wService.currentWeatherByLocation(&#xA;      latitude: 52.374, longitude: 4.88969);&#xA;  &#xA;  print(currently);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the request language:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final lang = WeatherLanguage.arabic;&#xA;&#xA;final wService = WeatherService(api, language: lang);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;&lt;i&gt;Supported languages:&lt;/i&gt;&lt;/b&gt; (Click to open)&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Afrikaans&lt;/li&gt; &#xA;  &lt;li&gt;Albanian&lt;/li&gt; &#xA;  &lt;li&gt;Arabic&lt;/li&gt; &#xA;  &lt;li&gt;Azerbaijani&lt;/li&gt; &#xA;  &lt;li&gt;Bulgarian&lt;/li&gt; &#xA;  &lt;li&gt;Catalan&lt;/li&gt; &#xA;  &lt;li&gt;Czech&lt;/li&gt; &#xA;  &lt;li&gt;Danish&lt;/li&gt; &#xA;  &lt;li&gt;German&lt;/li&gt; &#xA;  &lt;li&gt;Greek&lt;/li&gt; &#xA;  &lt;li&gt;English&lt;/li&gt; &#xA;  &lt;li&gt;Basque&lt;/li&gt; &#xA;  &lt;li&gt;Persian&lt;/li&gt; &#xA;  &lt;li&gt;Farsi&lt;/li&gt; &#xA;  &lt;li&gt;Finnish&lt;/li&gt; &#xA;  &lt;li&gt;French&lt;/li&gt; &#xA;  &lt;li&gt;Galician&lt;/li&gt; &#xA;  &lt;li&gt;Hebrew&lt;/li&gt; &#xA;  &lt;li&gt;Hindi&lt;/li&gt; &#xA;  &lt;li&gt;Croatian&lt;/li&gt; &#xA;  &lt;li&gt;Hungarian&lt;/li&gt; &#xA;  &lt;li&gt;Indonesian&lt;/li&gt; &#xA;  &lt;li&gt;Italian&lt;/li&gt; &#xA;  &lt;li&gt;Japanese&lt;/li&gt; &#xA;  &lt;li&gt;Korean&lt;/li&gt; &#xA;  &lt;li&gt;Latvian&lt;/li&gt; &#xA;  &lt;li&gt;Latvian&lt;/li&gt; &#xA;  &lt;li&gt;Macedonian&lt;/li&gt; &#xA;  &lt;li&gt;Norwegian&lt;/li&gt; &#xA;  &lt;li&gt;Dutch&lt;/li&gt; &#xA;  &lt;li&gt;Polish&lt;/li&gt; &#xA;  &lt;li&gt;Portuguese&lt;/li&gt; &#xA;  &lt;li&gt;Português Brasil&lt;/li&gt; &#xA;  &lt;li&gt;Romanian&lt;/li&gt; &#xA;  &lt;li&gt;Russian&lt;/li&gt; &#xA;  &lt;li&gt;Swedish&lt;/li&gt; &#xA;  &lt;li&gt;Slovak&lt;/li&gt; &#xA;  &lt;li&gt;Slovenian&lt;/li&gt; &#xA;  &lt;li&gt;Spanish&lt;/li&gt; &#xA;  &lt;li&gt;Serbian&lt;/li&gt; &#xA;  &lt;li&gt;Thai&lt;/li&gt; &#xA;  &lt;li&gt;Turkish&lt;/li&gt; &#xA;  &lt;li&gt;Ukrainian&lt;/li&gt; &#xA;  &lt;li&gt;Vietnamese&lt;/li&gt; &#xA;  &lt;li&gt;Chinese Simplified&lt;/li&gt; &#xA;  &lt;li&gt;Chinese Traditional&lt;/li&gt; &#xA;  &lt;li&gt;Zulu&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;According to OWM service (&lt;a href=&#34;https://openweathermap.org/current#multi&#34;&gt;See more&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can use the &lt;code&gt;lang&lt;/code&gt; parameter to get the output in your language.&lt;/p&gt; &#xA; &lt;p&gt;Translation is applied for the &lt;code&gt;city name&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; fields.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage weather service&lt;/h2&gt; &#xA;&lt;p&gt;Now there are two weather models - &lt;code&gt;WeatherCurrent&lt;/code&gt; and &lt;code&gt;WeatherOneCall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WeatherOneCall&lt;/code&gt; includes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;WeatherCurrent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;List&amp;lt;WeatherHourly&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;List&amp;lt;WeatherMinutely&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;List&amp;lt;WeatherDaily&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;List&amp;lt;WeatherAlert&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can get the weather in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final WeatherCurrent current = await wService&#xA;    .currentWeatherByLocation(latitude: 52.374, longitude: 4.88969);&#xA;&#xA;final WeatherOneCall onecall = await wService&#xA;    .oneCallWeatherByLocation(latitude: 52.374, longitude: 4.88969);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why do you only use the weather search by coordinates?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;According to the website OWM:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please use Geocoder API if you need automatic convert city names and zip-codes to geo coordinates and the other way around.&lt;/p&gt; &#xA; &lt;p&gt;Please note that built-in geocoder has been deprecated. Although it is still available for use, bug fixing and updates are no longer available for this functionality.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage geocoding service&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;GeocodingService&lt;/code&gt; is a service for easy location search when working with geographical names and coordinates. Supports both the direct and reverse methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Direct geocoding converts the specified name of a location or zip/post code into the exact geographical coordinates;&lt;/li&gt; &#xA; &lt;li&gt;Reverse geocoding converts the geographical coordinates into the names of the nearby locations;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find out more at this link: &lt;a href=&#34;https://openweathermap.org/api/geocoding-api&#34;&gt;Geocoding API OpenWeather&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create &lt;code&gt;GeocodingService&lt;/code&gt; in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final String cityName = &#39;suggested location name&#39;;&#xA;final String apiKey = &#39;your api key for OWM&#39;;&#xA;&#xA;final GeocodingService gService = GeocodingService(apiKey);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find using place names use direct geocoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final List&amp;lt;PlaceGeocode&amp;gt; places = await gService.getLocationByCityName(cityName);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use reverse geocoding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final List&amp;lt;PlaceGeocode&amp;gt; places = await gService.getLocationByCoordinates(latitude: 52.374, longitude: 4.88969);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage units measure&lt;/h2&gt; &#xA;&lt;p&gt;By default, all weather models, e.g. &lt;code&gt;WeatherCurrent&lt;/code&gt;, have measurable values of type &lt;code&gt;double&lt;/code&gt;. To display the data in a convenient format, it is necessary use the conversion method &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;valueToString&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void worksTempUnits({&#xA;  double temp = 270.78, // ex. received from [WeatherCurrent.temp]&#xA;  int precision = 3,&#xA;  Temp unitsMeasure = Temp.celsius,&#xA;}) {&#xA;  // The default temperature is measured in Kelvin of the `double` type.&#xA;  // We need the temperature to be displayed in Celsius to 3 decimal places&#xA;&#xA;  print(unitsMeasure.value(temp, precision)); // `-2.37` type `double`&#xA;  print(unitsMeasure.valueToString(temp, precision)); // `-2.370` type `String`&#xA;&#xA;  // if precision is 0:&#xA;  print(unitsMeasure.value(temp, 0)); // `-2.0` type `double`&#xA;  print(unitsMeasure.valueToString(temp, 0)); // `-2` type `String`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;By and large, the &lt;code&gt;valueToString()&lt;/code&gt; method is needed to display correctly in ui, and the &lt;code&gt;value()&lt;/code&gt; method is for accurate calculations.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are several units of measurement:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Units of measure&lt;/th&gt; &#xA;   &lt;th&gt;Class&lt;/th&gt; &#xA;   &lt;th&gt;Supported units&lt;/th&gt; &#xA;   &lt;th&gt;Conversion&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Temperature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Temp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;kelvin, celsius, fahrenheit&lt;/td&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Speed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Speed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ms, mph, kph&lt;/td&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pressure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Pressure&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;hectoPa, mbar, mmHg, kPa, atm, inHg&lt;/td&gt; &#xA;   &lt;td&gt;+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cardinal points&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SideOfTheWorld&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n, ne, e, se, s, sw, w, nw&lt;/td&gt; &#xA;   &lt;td&gt;+(another)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;💡 &lt;strong&gt;Tip&lt;/strong&gt;: The &lt;code&gt;SideOfTheWorld&lt;/code&gt; enum contains a static method &lt;code&gt;fromDegrees()&lt;/code&gt; for converting degrees to cardinal directions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage weather icons&lt;/h2&gt; &#xA;&lt;p&gt;You can use weather icons provided by the OWM service. See more about &lt;a href=&#34;https://openweathermap.org/weather-conditions&#34;&gt;weather conditions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Icons are stored locally in this package at the path &lt;code&gt;assets/weather_icons/&lt;/code&gt;. They are ordered according to &lt;a href=&#34;https://docs.flutter.dev/development/ui/assets-and-images#resolution-aware&#34;&gt;Declaring resolution-aware image assets&lt;/a&gt;. This reflects the following correspondences:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;100*100 - in default(implied resolution @1)&#xA;200x200 - @2&#xA;300x300 - @3&#xA;400x400 - @4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with the preservation of image quality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get the weather icon in a safe way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Image getWeatherIcon(String weatherIcon) {&#xA;  return Image.asset(&#xA;    ImagePathWeather.getPathWeatherIcon(weatherIcon),&#xA;    filterQuality: FilterQuality.high, // optional&#xA;    package: ImagePathWeather.packageName,&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to process it completely by hand:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget getWeatherIcon(WeatherCurrent weather) {&#xA;  return Image.asset(&#xA;    &#39;assets/weather_icons/${weather.weatherIcon}.png&#39;, // icon path&#xA;    package: &#39;weather_pack&#39;, // name package&#xA;    filterQuality: FilterQuality.high, // optional&#xA;    errorBuilder: (c, e, s) =&amp;gt; Text(e), // will return the widget in case of an error&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By and large, you can use the best quality regardless of platform resolution by specifying &lt;code&gt;@4&lt;/code&gt; to path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#39;assets/weather_icons/@4/$weatherIcon.png&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API key testing&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to test the API key. To do this, the &lt;code&gt;OWMApiTest&lt;/code&gt; class has a method &lt;code&gt;isCorrectApiKey()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void worksTestedAPIkey({&#xA;  String testedAPIkey = &#39;Your_key&#39;,&#xA;}) async {&#xA;&#xA;  // If the key is correct, it will return `true`&#xA;  final bool isCorrect = await OWMApiTest().isCorrectApiKey(testedAPIkey);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features in development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Getting weather by location name (built-in geocoding).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;p&gt;Made with ❤️. Enjoy it!&lt;/p&gt;</summary>
  </entry>
</feed>