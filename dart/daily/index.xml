<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-27T01:30:59Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AhmedLSayed9/deliverzler</title>
    <updated>2022-12-27T01:30:59Z</updated>
    <id>tag:github.com,2022-12-27:/AhmedLSayed9/deliverzler</id>
    <link href="https://github.com/AhmedLSayed9/deliverzler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delivery App for Restaurants built on Flutter using TDD Clean Architecture and Riverpod Framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deliverzler&lt;/h1&gt; &#xA;&lt;p&gt;An open-source Delivery App for Restaurants built on Flutter using TDD Clean Architecture and Riverpod Framework with Firebase as backend, Google Maps, Live Tracking, Local Notifications, FCM Notifications, Cloud Functions, Freezed, RxDart, FpDart and more!&lt;/p&gt; &#xA;&lt;h2&gt;ScreenShots&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209392383-2ba82704-4368-48e3-af73-aefb3e0bf5fb.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209392926-f8ef5534-ed0f-438a-9c83-dd7e3923f266.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209392966-fec6b3e6-0964-4a60-bfbf-b0ee412faf92.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209393241-f99054e3-5e0a-4404-b056-84d6bbcc939c.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209393249-8f0396b2-f781-4fb4-9848-f89bbcbef25f.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209393548-636850f6-c899-443e-8574-ca992e6a2672.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209393566-0f0d08b3-850d-40f3-b628-1dd862ac7871.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209393582-9ab7710d-c365-4ecd-a7e9-65d5b45a71fe.png&#34; alt=&#34;Image&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Instructions to run the project&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create Firebase project and add it to your Flutter app (Follow &lt;a href=&#34;https://firebase.google.com/docs/flutter/setup&#34;&gt;https://firebase.google.com/docs/flutter/setup&lt;/a&gt; instructions).&lt;/li&gt; &#xA; &lt;li&gt;Add user manually at Firebase Auth to login with (This for testing as registration should be done with another Admin app).&lt;/li&gt; &#xA; &lt;li&gt;Add user data and some orders to show at your Firebase Firestore similar to the following model architecture:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209394309-1620f4c1-be86-4bcf-952c-cc5a681e4584.png&#34; alt=&#34;Image&#34; width=&#34;450&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70890146/209394275-cfde0a43-87a0-4f7f-9e71-5043253f11ce.png&#34; alt=&#34;Image&#34; width=&#34;350&#34;&gt; &lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Configure an API project with the Google Maps Platform and enable Maps SDK for Android/iOS (FREE) to be able to open the map. Also, enable Directions/ Geolocation/Places APIs to enable other map features as search and live tracking (You have to create a billing account to use these APIs).&lt;/li&gt; &#xA; &lt;li&gt;Add your Google Map API Key to the project (search for &lt;code&gt;EnterYourAndroidGoogleMapApiKey&lt;/code&gt; and &lt;code&gt;EnterYourIOSGoogleMapApiKey&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;[Optional]: deploy functions within the project to Firebase Cloud Functions to receive FCM notifications when new order is ready to be delivered.&lt;/li&gt; &#xA; &lt;li&gt;Run the project!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using Riverpod Framework with code generation (Most recommended) integrated with Flutter Hooks &amp;amp; Freezed.&lt;/p&gt; &lt;p&gt;Note: For Riverpod without code generation, check branch &lt;code&gt;no_riverpod_code_gen&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enhanced clean architecture by relying on Riverpod to catch exceptions and auto convert it to AsyncError instead of the traditional Result/Either pattern, which reduce lots of boilerplate code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Functional Programming: FpDart(Option in particular) &amp;amp; RxDart.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Firebase Firestore as the backend with Firebase Storage, FCM and Cloud Functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Receive Local notification when arrive client&#39;s location and the ability to call him or confirm the order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Receive FCM notification in (Foreground/Background/Terminated) when new order is ready to be delivered.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Real-Time Changes from Firebase using Streams, Refreshing current stream capability.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimized live location tracking using RxDart and updating delivery data on changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search places and update its information on map using Google Map Autocomplete &amp;amp; Place Details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live tracking on map using Place Directions, Perform actions when arrive client&#39;s location.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Responsive UI, Platform-Aware Widgets, Multi-Themes, Internationalization &amp;amp; Localization (Using Flutter without external packages).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Well documented features and Unit Tests.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Business Logic&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The app can be used by multiple delivery drivers in the restaurant. Also, you can make it work for Multi-Vendor apps.&lt;/li&gt; &#xA; &lt;li&gt;Only login screen for employee. You should authorize them in the backend by an admin app.&lt;/li&gt; &#xA; &lt;li&gt;Home screen will show stream of delivery orders that are ready to be delivered &lt;code&gt;upcoming&lt;/code&gt; or is delivering &lt;code&gt;onTheWay&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Any employee can see order details and deliver &lt;code&gt;upcoming&lt;/code&gt; orders.&lt;/li&gt; &#xA; &lt;li&gt;Employee can deliver multiple orders.&lt;/li&gt; &#xA; &lt;li&gt;Only the employee that are delivering the order can confirm/cancel or show map of the order.&lt;/li&gt; &#xA; &lt;li&gt;If the client provided his location &#34;in the client app&#34; it&#39;ll be loaded to the map, otherwise employee can search for the location (new session token used for every search session to reduce Google Maps bill).&lt;/li&gt; &#xA; &lt;li&gt;When the order arrive to the destination by (200 meter) employee responsible for the order will get local notification and will be able to confirm and call the client on the map.&lt;/li&gt; &#xA; &lt;li&gt;If the delivery driver location changed with both (5seconds &amp;amp; 50meter change in distance), it&#39;ll update delivery geoPoint on the backend (for all his current deliverying orders, so the clients can listen to it) and will update map directions (for only the opened map, if any).&lt;/li&gt; &#xA; &lt;li&gt;When new order is added to the backend (delivery order). All employees will get notification from FCM (works with app in foreground, background or terminated).&lt;/li&gt; &#xA; &lt;li&gt;Employee can add/edit his info at the profile screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Give a ⭐️ if you like the project.. Thanks!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mapbox/mapbox-maps-flutter</title>
    <updated>2022-12-27T01:30:59Z</updated>
    <id>tag:github.com,2022-12-27:/mapbox/mapbox-maps-flutter</id>
    <link href="https://github.com/mapbox/mapbox-maps-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mapbox Maps SDK Flutter Plugin&lt;/h1&gt; &#xA;&lt;p&gt;The Mapbox Maps SDK Flutter Plugin is an officially developed solution from Mapbox that enables use of our latest Maps SDK product (v10.9.0). It is currently in beta, but can be used in production. The plugin allows developers to embed highly customized maps using a Flutter widget on Android and iOS.&lt;/p&gt; &#xA;&lt;p&gt;Web and desktop are not supported.&lt;/p&gt; &#xA;&lt;p&gt;Contributions welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Supported API&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera position&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camera animations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Events&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gestures&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;User Location&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fill Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fill extrusion Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Line Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Raster Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Symbol Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hillshade Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heatmap Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sky Layer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GeoJson Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vector Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Raster Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rasterdem Source&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Point Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Line Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fill Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Viewport&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Style DSL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expression DSL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;View Annotations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Maps Flutter Plugin is compatible with applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deployed on iOS 11 or higher&lt;/li&gt; &#xA; &lt;li&gt;Built using the Android SDK 21 or higher&lt;/li&gt; &#xA; &lt;li&gt;Built using the Dart SDK 2.17.1 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Configure credentials&lt;/h3&gt; &#xA;&lt;p&gt;To run the Maps Flutter Plugin you will need to configure the Mapbox Access Tokens. Read more about access tokens and public/secret scopes at the platform &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/install/#configure-credentials&#34;&gt;Android&lt;/a&gt; or &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/install/#configure-credentials&#34;&gt;iOS&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;h4&gt;Secret token&lt;/h4&gt; &#xA;&lt;p&gt;To access platform SDKs you will need to create a secret access token with the &lt;code&gt;Downloads:Read&lt;/code&gt; scope and then:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to download the Android SDK add the token configuration to &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  SDK_REGISTRY_TOKEN=YOUR_SECRET_MAPBOX_ACCESS_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to download the iOS SDK add the token configuration to &lt;code&gt;~/.netrc&lt;/code&gt; :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  machine api.mapbox.com&#xA;  login mapbox&#xA;  password YOUR_SECRET_MAPBOX_ACCESS_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Public token&lt;/h4&gt; &#xA;&lt;p&gt;To instantiate the &lt;code&gt;MapWidget&lt;/code&gt; widget pass the public access token with &lt;code&gt;ResourceOptions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  MapWidget(&#xA;    resourceOptions:&#xA;        ResourceOptions(accessToken: PUBLIC_ACCESS_TOKEN))));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s a good practice to retrieve access tokens from some external source.&lt;/p&gt; &#xA;&lt;p&gt;You can pass access token via the command line arguments when either building :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter build &amp;lt;platform&amp;gt; --dart-define PUBLIC_ACCESS_TOKEN=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or running the application :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter run --dart-define PUBLIC_ACCESS_TOKEN=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also persist token in launch.json :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;configurations&#34;: [&#xA;    {&#xA;        ...&#xA;        &#34;args&#34;: [&#xA;            &#34;--dart-define&#34;, &#34;PUBLIC_ACCESS_TOKEN=...&#34;&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to retrieve the token from the environment in the application :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;String ACCESS_TOKEN = String.fromEnvironment(&#34;PUBLIC_ACCESS_TOKEN&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add the dependency&lt;/h3&gt; &#xA;&lt;p&gt;To use the Maps Flutter Plugin add the git dependency to the pubspec.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  mapbox_maps_flutter: ^0.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure permissions&lt;/h3&gt; &#xA;&lt;p&gt;You will need to grant location permission in order to use the location component of the Maps Flutter Plugin.&lt;/p&gt; &#xA;&lt;p&gt;You can use an existing library to request location permission, e.g. with &lt;a href=&#34;https://pub.dev/packages/permission_handler&#34;&gt;permission_handler&lt;/a&gt; &lt;code&gt;await Permission.locationWhenInUse.request();&lt;/code&gt; will trigger permission request.&lt;/p&gt; &#xA;&lt;p&gt;You also need to declare the permission for both platforms :&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;Add the following permissions to the manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; /&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Add the following to the &lt;code&gt;Runner/Info.plist&lt;/code&gt; to explain why you need access to the location data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;[Your explanation here]&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a map&lt;/h3&gt; &#xA;&lt;p&gt;Import &lt;code&gt;mapbox_maps_flutter&lt;/code&gt; library and add a simple map:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:mapbox_maps_flutter/mapbox_maps_flutter.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MaterialApp(&#xA;      home: MapWidget(&#xA;          resourceOptions: ResourceOptions(accessToken: YOUR_ACCESS_TOKEN))));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MapWidget widget&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;MapWidget&lt;/code&gt; widget provides options to customize the map - you can set &lt;code&gt;ResourceOptions&lt;/code&gt;, &lt;code&gt;MapOptions&lt;/code&gt;, &lt;code&gt;CameraOptions&lt;/code&gt;, &lt;code&gt;styleURL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also allows or add listeners for various events - related to style loading, map rendering, map loading.&lt;/p&gt; &#xA;&lt;h4&gt;MapboxMap controller&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;MapboxMap&lt;/code&gt; controller instance is provided with &lt;code&gt;MapWidget.onMapCreated&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MapboxMap&lt;/code&gt; exposes an entry point to the most of the APIs Maps Flutter Plugin provides. It allows to control the map, camera, styles, observe map events, query rendered features, etc.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s organized similarly to the &lt;a href=&#34;https://docs.mapbox.com/android/maps/api/10.8.0/mapbox-maps-android/com.mapbox.maps/-mapbox-map/&#34;&gt;Android&lt;/a&gt; and &lt;a href=&#34;https://docs.mapbox.com/ios/maps/api/10.8.1/Classes/MapboxMap.html&#34;&gt;iOS&lt;/a&gt; counterparts.&lt;/p&gt; &#xA;&lt;p&gt;To interact with the map after it&#39;s created store the MapboxMap object somewhere :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class FullMap extends StatefulWidget {&#xA;  const FullMap();&#xA;&#xA;  @override&#xA;  State createState() =&amp;gt; FullMapState();&#xA;}&#xA;&#xA;class FullMapState extends State&amp;lt;FullMap&amp;gt; {&#xA;  MapboxMap? mapboxMap;&#xA;&#xA;  _onMapCreated(MapboxMap mapboxMap) {&#xA;    this.mapboxMap = mapboxMap;&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return new Scaffold(&#xA;        body: MapWidget(&#xA;      key: ValueKey(&#34;mapWidget&#34;),&#xA;      resourceOptions: ResourceOptions(accessToken: ACCESS_TOKEN),&#xA;      onMapCreated: _onMapCreated,&#xA;    ));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User location&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/user-location/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/user-location/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To observe the user&#39;s location and show the location indicator on the map use &lt;code&gt;LocationComponentSettingsInterface&lt;/code&gt; accessible via &lt;code&gt;MapboxMap.location&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You need to grant location permission prior to using location component (as explained &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/#configure-permissions&#34;&gt;before&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Location puck&lt;/h3&gt; &#xA;&lt;p&gt;To customize the appearance of the location puck call &lt;code&gt;MapboxMap.location.updateSettings&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;To use the 3D puck with model downloaded from Uri instead of the default 2D puck :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.location.updateSettings(LocationComponentSettings(&#xA;      locationPuck: LocationPuck(&#xA;          locationPuck3D: LocationPuck3D(&#xA;              modelUri:&#xA;                  &#34;https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/Duck/glTF-Embedded/Duck.gltf&#34;,))));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of customization in the sample &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/location.dart&#34;&gt;app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Markers and annotations&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/annotations/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/annotations/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You have several options to add annotations on the map.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the AnnotationManager APIs to create circle/point/polygon/polyline annotations.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To create 5 point annotations using custom icon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.annotations.createPointAnnotationManager().then((pointAnnotationManager) async {&#xA;    final ByteData bytes =&#xA;        await rootBundle.load(&#39;assets/symbols/custom-icon.png&#39;);&#xA;    final Uint8List list = bytes.buffer.asUint8List();&#xA;    var options = &amp;lt;PointAnnotationOptions&amp;gt;[];&#xA;    for (var i = 0; i &amp;lt; 5; i++) {&#xA;      options.add(PointAnnotationOptions(&#xA;          geometry: createRandomPoint().toJson(), image: list));&#xA;    }&#xA;    pointAnnotationManager?.createMulti(options);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of the AnnotationManagers usage in the sample app : &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/point_annotations.dart&#34;&gt;point annotations&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/circle_annotations.dart&#34;&gt;circle annotations&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/polygon_annotations.dart&#34;&gt;polygon annotations&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/polyline_annotations.dart&#34;&gt;polyline annotations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use style layers. This will require writing more code but is more flexible and provides better performance for the large amount of annotations (e.g. hundreds and thousands of them). More about adding style layers in the &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/#map-styles&#34;&gt;Map styles section&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Map styles&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/styles/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/styles/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Mapbox Maps Flutter Plugin allows full customization of the look of the map used in your application.&lt;/p&gt; &#xA;&lt;h3&gt;Set a style&lt;/h3&gt; &#xA;&lt;p&gt;You can specify the initial style uri at &lt;code&gt;MapWidget.styleUri&lt;/code&gt;, or load it at runtime using &lt;code&gt;MapboxMap.loadStyleURI&lt;/code&gt; / &lt;code&gt;MapboxMap.loadStyleJson&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.loadStyleURI(Styles.LIGHT);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Work with layers&lt;/h3&gt; &#xA;&lt;p&gt;You can familiarize with the concept of sources, layers and their supported types in the platform documentation.&lt;/p&gt; &#xA;&lt;p&gt;To add, remove or change a source or a layer use the &lt;code&gt;MapboxMap.style&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;To add a &lt;code&gt;GeoJsonSource&lt;/code&gt; and a &lt;code&gt;LineLayer&lt;/code&gt; using the source :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  var data = await rootBundle.loadString(&#39;assets/polyline.geojson&#39;);&#xA;  await mapboxMap.style.addSource(GeoJsonSource(id: &#34;line&#34;, data: data));&#xA;  await mapboxMap.style.addLayer(LineLayer(&#xA;      id: &#34;line_layer&#34;,&#xA;      sourceId: &#34;line&#34;,&#xA;      lineJoin: LineJoin.ROUND,&#xA;      lineCap: LineCap.ROUND,&#xA;      lineOpacity: 0.7,&#xA;      lineColor: Colors.red.value,&#xA;      lineWidth: 8.0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using expressions&lt;/h3&gt; &#xA;&lt;p&gt;You can change the appearance of a layer based on properties in the layer&#39;s data source or zoom level. Refer to the &lt;a href=&#34;https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/&#34;&gt;documentation&lt;/a&gt; for the description of supported expressions. To apply an expression to interpolate gradient color to a line layer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap.style.setStyleLayerProperty(&#34;layer&#34;, &#34;line-gradient&#34;,&#xA;      &#39;[&#34;interpolate&#34;,[&#34;linear&#34;],[&#34;line-progress&#34;],0.0,[&#34;rgb&#34;,6,1,255],0.5,[&#34;rgb&#34;,0,255,42],0.7,[&#34;rgb&#34;,255,252,0],1.0,[&#34;rgb&#34;,255,30,0]]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Camera and animations&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/camera-and-animation/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/camera-and-animation/&#34;&gt;iOS&lt;/a&gt;. The camera is the user&#39;s viewpoint above the map. The Maps Flutter Plugin provides you with options to set and adjust the camera position, listen for camera changes, get the camera position, and restrict the camera position to set bounds.&lt;/p&gt; &#xA;&lt;h3&gt;Camera position&lt;/h3&gt; &#xA;&lt;p&gt;You can set the starting camera position using &lt;code&gt;MapWidget.cameraOptions&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MapWidget(&#xA;  key: ValueKey(&#34;mapWidget&#34;),&#xA;  resourceOptions: ResourceOptions(accessToken: ACCESS_TOKEN),&#xA;  cameraOptions: CameraOptions(&#xA;      center: Point(coordinates: Position(-80.1263, 25.7845)).toJson(),&#xA;      zoom: 12.0),&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or update it at runtime using &lt;code&gt;MapboxMap.setCamera&lt;/code&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;MapboxMap.setCamera(CameraOptions(&#xA;  center: Point(coordinates: Position(-80.1263, 25.7845)).toJson(),&#xA;  zoom: 12.0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of interaction with the camera in the sample &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/camera.dart&#34;&gt;app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Camera animations&lt;/h3&gt; &#xA;&lt;p&gt;Camera animations are the means by which camera settings are changed from old values to new values over a period of time. You can animate the camera using &lt;code&gt;flyTo&lt;/code&gt; or &lt;code&gt;easeTo&lt;/code&gt; and move to a new center location, update the bearing, pitch, zoom, padding, and anchor.&lt;/p&gt; &#xA;&lt;p&gt;To start a &lt;code&gt;flyTo&lt;/code&gt; animation to the specific camera options :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  mapboxMap?.flyTo(&#xA;    CameraOptions(&#xA;        anchor: ScreenCoordinate(x: 0, y: 0),&#xA;        zoom: 17,&#xA;        bearing: 180,&#xA;        pitch: 30),&#xA;    MapAnimationOptions(duration: 2000, startDelay: 0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find more examples of animations in the sample &lt;a href=&#34;https://raw.githubusercontent.com/mapbox/mapbox-maps-flutter/main/example/lib/animation.dart&#34;&gt;app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;User interaction&lt;/h2&gt; &#xA;&lt;p&gt;Platform docs : &lt;a href=&#34;https://docs.mapbox.com/android/maps/guides/user-interaction/&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://docs.mapbox.com/ios/maps/guides/user-interaction/&#34;&gt;iOS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users interacting with the map in your application can explore the map by performing standard gestures.&lt;/p&gt; &#xA;&lt;p&gt;You can retrieve or update the &lt;code&gt;GestureSettings&lt;/code&gt; using &lt;code&gt;MapboxMap.gestures&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can observe gesture events using &lt;code&gt;MapWidget.onTapListener&lt;/code&gt;, &lt;code&gt;MapWidget.onLongTapListener&lt;/code&gt;, &lt;code&gt;MapWidget.onScrollListener&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>