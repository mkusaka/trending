<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-16T01:35:05Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pocketbase/dart-sdk</title>
    <updated>2022-09-16T01:35:05Z</updated>
    <id>tag:github.com,2022-09-16:/pocketbase/dart-sdk</id>
    <link href="https://github.com/pocketbase/dart-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PocketBase Dart SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PocketBase Dart SDK &lt;a href=&#34;https://pub.dev/packages/pocketbase&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/pocketbase.svg?sanitize=true&#34; alt=&#34;Pub Package&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Official Multi-platform Dart SDK for interacting with the &lt;a href=&#34;https://pocketbase.io/docs&#34;&gt;PocketBase Web API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/dart-sdk/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/dart-sdk/master/#caveats&#34;&gt;Caveats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/dart-sdk/master/#services&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/dart-sdk/master/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/dart-sdk/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the library to your &lt;code&gt;dependencies&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dart pub add pocketbase&#xA;&#xA;# or with Flutter:&#xA;flutter pub add pocketbase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import it in your Dart code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:pocketbase/pocketbase.dart&#39;;&#xA;&#xA;final client = PocketBase(&#39;http://127.0.0.1:8090&#39;);&#xA;&#xA;...&#xA;&#xA;// authenticate as regular user&#xA;final userData = await client.users.authViaEmail(&#34;test@example.com&#34;, &#34;123456&#34;);&#xA;&#xA;// list and filter &#34;example&#34; collection records&#xA;final result = await client.records.getList(&#xA;  &#34;example&#34;,&#xA;  page: 1,&#xA;  perPage: 20,&#xA;  filter: &#34;status = true &amp;amp;&amp;amp; created &amp;gt;= &#39;2022-08-01&#39;&#34;,&#xA;  sort: &#34;-created&#34;,&#xA;);&#xA;&#xA;// subscribe to realtime &#34;example&#34; collection changes&#xA;client.realtime.subscribe(&#34;example&#34;, (e) {&#xA;  print(e.action); // create, update, delete&#xA;  print(e.record); // the changed record&#xA;});&#xA;&#xA;// and much more...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More detailed API docs and copy-paste examples could be found in the &lt;a href=&#34;https://pocketbase.io/docs/api-authentication&#34;&gt;API documentation for each service&lt;/a&gt; or in the &lt;a href=&#34;https://raw.githubusercontent.com/pocketbase/dart-sdk/master/#services&#34;&gt;Services section&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h4&gt;File upload&lt;/h4&gt; &#xA;&lt;p&gt;PocketBase Dart SDK handles file upload seamlessly by using &lt;code&gt;http.MultipartFile&lt;/code&gt; list.&lt;/p&gt; &#xA;&lt;p&gt;Here is a simple example of uploading a single text file together with some other regular fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:http/http.dart&#39; as http;&#xA;import &#39;package:pocketbase/pocketbase.dart&#39;;&#xA;&#xA;final client = PocketBase(&#34;http://127.0.0.1:8090&#34;);&#xA;&#xA;client.records.create(&#xA;  &#39;example&#39;,&#xA;  body: {&#xA;    &#39;title&#39;: &#39;Hello world!&#39;,&#xA;    // ... any other regular field&#xA;  },&#xA;  files: [&#xA;    http.MultipartFile.fromString(&#xA;      &#39;document&#39;, // the name of the file field&#xA;      &#39;example content...&#39;,&#xA;      filename: &#39;example_document.txt&#39;,&#xA;    ),&#xA;  ],&#xA;).then((record) {&#xA;  print(record.id);&#xA;  print(record.getStringValue(&#39;title&#39;));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Accessing RecordModel dynamic fields&lt;/h4&gt; &#xA;&lt;p&gt;The SDK comes with several helpers to make it easier working with the &lt;code&gt;RecordService&lt;/code&gt; and &lt;code&gt;RecordModel&lt;/code&gt; DTO. You could find more detailed documentation in the &lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/RecordModel-class.html&#34;&gt;&lt;code&gt;RecordModel&lt;/code&gt; class reference&lt;/a&gt;, but here are some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final record = await client.records.getOne(&#34;example&#34;, &#34;RECORD_ID&#34;);&#xA;&#xA;...&#xA;&#xA;final title   = record.getStringValue(&#34;title&#34;);&#xA;final options = record.getListValue&amp;lt;String&amp;gt;(&#34;options&#34;);&#xA;final status  = record.getBoolValue(&#34;status&#34;);&#xA;final total   = record.getIntValue(&#34;total&#34;);&#xA;final price   = record.getDoubleValue(&#34;price&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Errors handling&lt;/h4&gt; &#xA;&lt;p&gt;All services return a standard Future-based response, so the error handling is straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;client.records.getList(&#34;example&#34;, page: 1, perPage: 50).then((result) {&#xA;  // success...&#xA;  print(&#34;Result: $result&#34;);&#xA;}).catchError((error) {&#xA;  // error...&#xA;  print(&#34;Error: $error&#34;);&#xA;});&#xA;&#xA;// OR if you are using the async/await syntax:&#xA;try {&#xA;  final result = await client.records.getList(&#34;example&#34;, page: 1, perPage: 50);&#xA;} catch (error) {&#xA;  print(&#34;Error: $error&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All response errors are normalized and wrapped as &lt;code&gt;ClientException&lt;/code&gt; with the following public members that you could use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ClientException {&#xA;    url            Uri     // The address of the failed request&#xA;    statusCode     int     // The status code of the failed request&#xA;    response       Map     // The JSON API error response&#xA;    isAbort        bool    // Indicates whether the request was aborted/cancelled&#xA;    originalError  dynamic // The original response error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;AuthStore&lt;/h4&gt; &#xA;&lt;p&gt;The SDK keeps track of the authenticated token and auth model for you via the &lt;code&gt;client.authStore&lt;/code&gt; service. The default &lt;code&gt;AuthStore&lt;/code&gt; class has the following public members that you could use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AuthStore {&#xA;    token:    String               // Getter for the stored auth token&#xA;    model:    UserModel|AdminModel // Getter for the stored auth User or Admin model&#xA;    isValid   bool                 // Getter to loosely check if the store has an existing and unexpired token&#xA;    onChange  Stream               // Stream that gets triggered on each auth store change&#xA;&#xA;    // methods&#xA;    save(token, model)             // update the store with the new auth data&#xA;    clear()                        // clears the current auth store state&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To &lt;em&gt;&#34;logout&#34;&lt;/em&gt; an authenticated user or admin, you can just call &lt;code&gt;client.authStore.clear()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To &lt;em&gt;&#34;listen&#34;&lt;/em&gt; for changes in the auth store, you can &lt;em&gt;listen&lt;/em&gt; to the &lt;code&gt;onChange&lt;/code&gt; broadcast stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;client.authStore.onChange.listen((e) {&#xA;  print(e.token);&#xA;  print(e.model);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to customize the default &lt;code&gt;AuthStore&lt;/code&gt;, you can extend it and pass a new custom instance as constructor argument to the client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class CustomAuthStore extends AuthStore {&#xA;  ...&#xA;}&#xA;&#xA;final client = PocketBase(&#34;http://127.0.0.1:8090&#34;, authStore: CustomAuthStore());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;h4&gt;AdminService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/AdminService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-admins&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Authenticates an admin account by its email and password.&#xA;üîì client.admins.authViaEmail(email, password, {query, body, headers});&#xA;&#xA;// Refreshes the current admin authenticated model and token.&#xA;üîê client.admins.refresh({query, body, headers});&#xA;&#xA;// Sends an admin password reset email.&#xA;üîì client.admins.requestPasswordReset(email, {query, body, headers});&#xA;&#xA;// Confirms an admin password reset request.&#xA;üîì client.admins.confirmPasswordReset(resetToken, newPassword, newPasswordConfirm, {query, body, headers});&#xA;&#xA;// Returns a list with all admins batch fetched at once.&#xA;üîê client.admins.getFullList({batch = 100, filter?, sort?, query, headers});&#xA;&#xA;// Returns a paginated admins list.&#xA;üîê client.admins.getList({page = 1, perPage = 30, filter?, sort?, query, headers});&#xA;&#xA;// Returns a single admin by their id.&#xA;üîê client.admins.getOne(id, {query, headers});&#xA;&#xA;// Creates a new admin.&#xA;üîê client.admins.create({body, files, query, headers});&#xA;&#xA;// Updates an existing admin by their id.&#xA;üîê client.admins.update(id, {body, files, query, headers});&#xA;&#xA;// Deletes a single admin by their id.&#xA;üîê client.admins.delete(id, {query, body, headers});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;UserService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/UserService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-users&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;üîì client.users.listAuthMethods({query, headers});&#xA;&#xA;// Authenticates a user by their email and password.&#xA;üîì client.users.authViaEmail(email, password, {query, body, headers});&#xA;&#xA;// Authenticates a user by OAuth2 client provider.&#xA;üîì client.users.authViaOAuth2(provider, code, codeVerifier, redirectUrl, {query, body, headers});&#xA;&#xA;// Refreshes the current user authenticated model and token.&#xA;üîê client.users.refresh({query, body, headers});&#xA;&#xA;// Sends a user password reset email.&#xA;üîì client.users.requestPasswordReset(email, {query, body, headers});&#xA;&#xA;// Confirms a user password reset request.&#xA;üîì client.users.confirmPasswordReset(resetToken, newPassword, newPasswordConfirm, {query, body, headers});&#xA;&#xA;// Sends a user verification email request.&#xA;üîì client.users.requestVerification(email, {query, body, headers});&#xA;&#xA;// Confirms a user email verification request.&#xA;üîì client.users.confirmVerification(verificationToken, {query, body, headers});&#xA;&#xA;// Sends a user email change request to the provider email.&#xA;üîê client.users.requestEmailChange(newEmail, {query, body, headers});&#xA;&#xA;// Confirms user new email address.&#xA;üîì client.users.confirmEmailChange(emailChangeToken, userPassword, {query, body, headers});&#xA;&#xA;// Returns a list with all users batch fetched at once.&#xA;üîê client.users.getFullList({batch = 100, filter?, sort?, query, headers});&#xA;&#xA;// Returns a paginated users list.&#xA;üîê client.users.getList({page = 1, perPage = 30, filter?, sort?, query, headers});&#xA;&#xA;// Returns a single user by their id.&#xA;üîê client.users.getOne(id, {query, headers});&#xA;&#xA;// Creates (aka. register) a new user.&#xA;üîì client.users.create({body, files, query, headers});&#xA;&#xA;// Updates an existing user by their id.&#xA;üîê client.users.update(id, {body, files, query, headers});&#xA;&#xA;// Deletes a single user by their id.&#xA;üîê client.users.delete(id, {query, body, headers});&#xA;&#xA;// Lists all linked external auth providers for the specified user.&#xA;üîê client.users.listExternalAuths(id, {query, headers});&#xA;&#xA;// Unlinks a single external auth provider relation from the specified user.&#xA;üîê client.users.unlinkExternalAuth(id, provider, {query, body headers});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;RealtimeService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/RealtimeService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-realtime&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Initialize the realtime connection (if not already) and register the subscription.&#xA;üîì client.realtime.subscribe(subscription, callback);&#xA;&#xA;// Unsubscribe from a subscription (if empty - unsubscibe from all registered subscriptions).&#xA;üîì client.realtime.unsubscribe([subscription = &#39;&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;CollectionService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/CollectionService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-collections&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Returns a list with all collections batch fetched at once.&#xA;üîê client.collections.getFullList({batch = 100, filter?, sort?, query, headers});&#xA;&#xA;// Returns a paginated collections list.&#xA;üîê client.collections.getList({page = 1, perPage = 30, filter?, sort?, query, headers});&#xA;&#xA;// Returns a single collection by its id.&#xA;üîê client.collections.getOne(id, {query, headers});&#xA;&#xA;// Creates (aka. register) a new collection.&#xA;üîê client.collections.create({body, files, query, headers});&#xA;&#xA;// Updates an existing collection by its id.&#xA;üîê client.collections.update(id, {body, files, query, headers});&#xA;&#xA;// Deletes a single collection by its id.&#xA;üîê client.collections.delete(id, {query, body, headers});&#xA;&#xA;// Imports the provided collections.&#xA;üîê client.collections.import(collections, {deleteMissing=false, query, body, headers});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;RecordService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/RecordService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-records&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Returns a list with all records batch fetched at once.&#xA;üîì client.records.getFullList(collectionIdOrName, {batch = 100, filter?, sort?, query, headers});&#xA;&#xA;// Returns a paginated records list.&#xA;üîì client.records.getList(collectionIdOrName, {page = 1, perPage = 30, filter?, sort?, query, headers});&#xA;&#xA;// Returns a single record by its id.&#xA;üîì client.records.getOne(collectionIdOrName, recordId, {query, headers});&#xA;&#xA;// Creates (aka. register) a new record.&#xA;üîì client.records.create(collectionIdOrName, {body, files, query, headers});&#xA;&#xA;// Updates an existing record by its id.&#xA;üîì client.records.update(collectionIdOrName, recordId, {body, files, query, headers});&#xA;&#xA;// Deletes a single record by its id.&#xA;üîì client.records.delete(collectionIdOrName, recordId, {query, body, headers});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;LogService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/LogService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-logs&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Returns a paginated log requests list.&#xA;üîê client.logs.getRequestsList({page = 1, perPage = 30, filter?, sort?, query, headers});&#xA;&#xA;// Returns a single log request by its id.&#xA;üîê client.logs.getRequest(id, {query, headers});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;SettingsService (&lt;a href=&#34;https://pub.dev/documentation/pocketbase/latest/pocketbase/SettingsService-class.html&#34;&gt;Detailed class reference&lt;/a&gt;, &lt;a href=&#34;https://pocketbase.io/docs/api-settings&#34;&gt;API docs&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Returns a map with all available app settings.&#xA;üîê client.settings.getAll({query, headers});&#xA;&#xA;// Bulk updates app settings.&#xA;üîê client.settings.update({body, query, headers});&#xA;&#xA;// Performs a S3 storage connection test.&#xA;üîê client.settings.testS3({body, query, headers});&#xA;&#xA;// Sends a test email (verification, password-reset, email-change).&#xA;üîê client.settings.testEmail(toEmail, template, {body, query, headers});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;PocketBase Dart SDK is built on top of the standard &lt;code&gt;dart-lang/http&lt;/code&gt; package and inherits some of its limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requests cancellation/abort is not supported yet - &lt;a href=&#34;https://github.com/dart-lang/http/issues/424&#34;&gt;dart-lang/http #424&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Streamed responses (used by the realtime service) are not supported on the web - &lt;a href=&#34;https://github.com/dart-lang/http/issues/595&#34;&gt;dart-lang/http #595&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on the users demand, we can implement workarounds for the above limitations, but it would be better to wait the upstream library to apply the necessary fixes.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run the unit tests&#xA;dart test&#xA;&#xA;# view dartdoc locally&#xA;dart doc&#xA;&#xA;# run the example&#xA;dart run example/example.dart&#xA;&#xA;# generate the DTOs json serializable artifacts&#xA;dart run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>