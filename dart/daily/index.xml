<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-22T01:32:52Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>supabase/supabase-flutter</title>
    <updated>2023-05-22T01:32:52Z</updated>
    <id>tag:github.com,2023-05-22:/supabase/supabase-flutter</id>
    <link href="https://github.com/supabase/supabase-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter integration for Supabase. This package makes it simple for developers to build secure and scalable products.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;Supabase Flutter&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Monorepo containing all &lt;a href=&#34;https://supabase.com/&#34;&gt;Supabase&lt;/a&gt; libraries for Flutter.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/postgrest&#34;&gt;postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/gotrue&#34;&gt;gotrue&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/realtime_client&#34;&gt;realtime_client&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/storage_client&#34;&gt;storage_client&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/functions_client&#34;&gt;functions_client&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/supabase&#34;&gt;supabase&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/supabase_flutter&#34;&gt;supabase_flutter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/supabase/supabase-flutter/tree/main/packages/yet_another_json_isolate&#34;&gt;yet_another_json_isolate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation: &lt;a href=&#34;https://supabase.com/docs/reference/dart/introduction&#34;&gt;https://supabase.com/docs/reference/dart/introduction&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Platform Support&lt;/h2&gt; &#xA;&lt;p&gt;Except Linux, all platforms are fully supported. Linux only doesn&#39;t support deeplinks, because of our dependency &lt;a href=&#34;https://pub.dev/packages/app_links&#34;&gt;app_links&lt;/a&gt;. All other features are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Import the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initialize &lt;code&gt;Supabase&lt;/code&gt; before using it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;void main() async {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;&#xA;  await Supabase.initialize(&#xA;    url: SUPABASE_URL,&#xA;    anonKey: SUPABASE_ANON_KEY,&#xA;  );&#xA;&#xA;  runApp(MyApp());&#xA;}&#xA;&#xA;// It&#39;s handy to then extract the Supabase client in a variable for later uses&#xA;final supabase = Supabase.instance.client;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;authCallbackUrlHostname&lt;/code&gt; is optional. It will be used to filter Supabase authentication redirect deeplink. You need to provide this param if you use deeplink for other features on the app.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;debug&lt;/code&gt; is optional. It&#39;s enabled by default if you&#39;re running the app in debug mode (&lt;code&gt;flutter run --debug&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/auth&#34;&gt;Authentication&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  late final StreamSubscription&amp;lt;AuthState&amp;gt; _authSubscription;&#xA;  User? _user;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    _authSubscription = supabase.auth.onAuthStateChange.listen((data) {&#xA;      final AuthChangeEvent event = data.event;&#xA;      final Session? session = data.session;&#xA;      setState(() {&#xA;        _user = session?.user;&#xA;      });&#xA;    });&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    _authSubscription.cancel();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return ElevatedButton(&#xA;      onPressed: () {&#xA;        supabase.auth.signInWithOtp(email: &#39;my_email@example.com&#39;);&#xA;      },&#xA;      child: const Text(&#39;Login&#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Native Sign in with Apple example&lt;/h4&gt; &#xA;&lt;p&gt;Before you run the code, you need to &lt;a href=&#34;https://developer.apple.com/help/account/manage-identifiers/register-an-app-id/&#34;&gt;register your app ID with Apple&lt;/a&gt; with the &lt;code&gt;Sign In with Apple&lt;/code&gt; capability selected, and add the bundle ID to your Supabase dashboard in &lt;code&gt;Authentication -&amp;gt; Providers -&amp;gt; Apple&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;return supabase.auth.signInWithApple();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;signInWithApple()&lt;/code&gt; is only supported on iOS and on macOS. Other platforms can use the &lt;code&gt;signInWithOAuth()&lt;/code&gt; method to perform Apple login.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;signInWithApple&lt;/code&gt; method is currently experimental and is subject to change. Follow &lt;a href=&#34;https://github.com/supabase/supabase-flutter/issues/399&#34;&gt;this issue&lt;/a&gt; for platform support progress.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/database&#34;&gt;Database&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  // Persisting the future as local variable to prevent refetching upon rebuilds.&#xA;  final Future&amp;lt;dynamic&amp;gt; _future = supabase&#xA;      .from(&#39;countries&#39;)&#xA;      .select()&#xA;      .order(&#39;name&#39;, ascending: true);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return FutureBuilder(&#xA;      future: _future,&#xA;      builder: (context, snapshot) {&#xA;        // return your widget with the data from snapshot&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime&#34;&gt;Realtime&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Realtime data as &lt;code&gt;Stream&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;To receive realtime updates, you have to first enable Realtime on from your Supabase console. You can read more &lt;a href=&#34;https://supabase.com/docs/guides/api#realtime-api&#34;&gt;here&lt;/a&gt; on how to enable it.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; When using &lt;code&gt;stream()&lt;/code&gt; with a &lt;code&gt;StreamBuilder&lt;/code&gt;, make sure to persist the stream value as a variable in a &lt;code&gt;StatefulWidget&lt;/code&gt; instead of directly constructing the stream within your widget tree, which could cause rapid rebuilds that will lead to losing realtime connection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  // Persisting the future as local variable to prevent refetching upon rebuilds.&#xA;  final List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt; _stream = supabase.from(&#39;countries&#39;).stream(primaryKey: [&#39;id&#39;]);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return StreamBuilder&amp;lt;List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt;&amp;gt;(&#xA;      stream: _stream,&#xA;      builder: (context, snapshot) {&#xA;        // return your widget with the data from snapshot&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime#postgres-changes&#34;&gt;Postgres Changes&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can get notified whenever there is a change in your Supabase tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myChannel = supabase.channel(&#39;my_channel&#39;);&#xA;&#xA;myChannel.on(&#xA;    RealtimeListenTypes.postgresChanges,&#xA;    ChannelFilter(&#xA;      event: &#39;*&#39;,&#xA;      schema: &#39;public&#39;,&#xA;      table: &#39;countries&#39;,&#xA;    ), (payload, [ref]) {&#xA;  // Do something fun or interesting when there is an change on the database&#xA;}).subscribe();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime#broadcast&#34;&gt;Broadcast&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Broadcast lets you send and receive low latency messages between connected clients without bypassing the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myChannel = supabase.channel(&#39;my_channel&#39;);&#xA;&#xA;// Subscribe to `cursor-pos` broadcast event&#xA;myChannel.on(RealtimeListenTypes.broadcast,&#xA;    ChannelFilter(event: &#39;cursor-pos&#39;), (payload, [ref]) {&#xA;  // Do something fun or interesting when there is an change on the database&#xA;}).subscribe();&#xA;&#xA;// Send a broadcast message to other connected clients&#xA;await myChannel.send(&#xA;  type: RealtimeListenTypes.broadcast,&#xA;  event: &#39;cursor-pos&#39;,&#xA;  payload: {&#39;x&#39;: 30, &#39;y&#39;: 50},&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/realtime#presence&#34;&gt;Presence&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Presence let&#39;s you easily create &#34;I&#39;m online&#34; feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myChannel = supabase.channel(&#39;my_channel&#39;);&#xA;&#xA;// Subscribe to presence events&#xA;myChannel.on(&#xA;    RealtimeListenTypes.presence, ChannelFilter(event: &#39;sync&#39;),&#xA;    (payload, [ref]) {&#xA;  final onlineUsers = myChannel.presenceState();&#xA;  // handle sync event&#xA;}).on(RealtimeListenTypes.presence, ChannelFilter(event: &#39;join&#39;),&#xA;    (payload, [ref]) {&#xA;  // New users have joined&#xA;}).on(RealtimeListenTypes.presence, ChannelFilter(event: &#39;leave&#39;),&#xA;    (payload, [ref]) {&#xA;  // Users have left&#xA;}).subscribe(((status, [_]) async {&#xA;  if (status == &#39;SUBSCRIBED&#39;) {&#xA;    // Send the current user&#39;s state upon subscribing&#xA;    final status = await myChannel&#xA;        .track({&#39;online_at&#39;: DateTime.now().toIso8601String()});&#xA;  }&#xA;}));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/storage&#34;&gt;Storage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final supabase = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return ElevatedButton(&#xA;      onPressed: () {&#xA;        final file = File(&#39;example.txt&#39;);&#xA;        file.writeAsStringSync(&#39;File content&#39;);&#xA;        supabase.storage&#xA;            .from(&#39;my_bucket&#39;)&#xA;            .upload(&#39;my/path/to/files/example.txt&#39;, file);&#xA;      },&#xA;      child: const Text(&#39;Upload&#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://supabase.com/docs/guides/functions&#34;&gt;Edge Functions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;final client = Supabase.instance.client;&#xA;&#xA;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  // Persisting the future as local variable to prevent refetching upon rebuilds.&#xA;  final _future = client.functions.invoke(&#39;get_countries&#39;);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return FutureBuilder(&#xA;      future: _future,&#xA;      builder: (context, snapshot) {&#xA;        // return your widget with the data from snapshot&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication Deep Dive&lt;/h2&gt; &#xA;&lt;p&gt;Using this package automatically persists the auth state on local storage. It also helps you handle authentication with deep link from 3rd party service like Google, Github, Twitter...&lt;/p&gt; &#xA;&lt;h3&gt;Email authentication&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:supabase_flutter/supabase_flutter.dart&#39;;&#xA;&#xA;Future&amp;lt;void&amp;gt; signIn(String email, String password) async {&#xA;  final response = await Supabase.instance.client.auth.signInWithPassword(email: email, password: password);&#xA;  final Session? session = response.session;&#xA;  final User? user = response.user;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;signInWithProvider&lt;/h3&gt; &#xA;&lt;p&gt;This method will automatically launch the auth url and open a browser for user to sign in with 3rd party login.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;supabase.auth.signInWithOAuth(&#xA;  Provider.google,&#xA;  redirectTo: &#39;io.supabase.flutter://reset-callback/&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom LocalStorage&lt;/h3&gt; &#xA;&lt;p&gt;As default, &lt;code&gt;supabase_flutter&lt;/code&gt; uses &lt;a href=&#34;https://pub.dev/packages/hive&#34;&gt;&lt;code&gt;hive&lt;/code&gt;&lt;/a&gt; to persist the user session. Encryption is disabled by default, since an unique encryption key is necessary, and we can not define it. To set an &lt;code&gt;encryptionKey&lt;/code&gt;, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; main() async {&#xA;  // set it before initializing&#xA;  HiveLocalStorage.encryptionKey = &#39;my_secure_key&#39;;&#xA;  await Supabase.initialize(...);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the key must be the same. There is no check if the encryption key is correct. If it isn&#39;t, there may be unexpected behavior. &lt;a href=&#34;https://docs.hivedb.dev/#/advanced/encrypted_box&#34;&gt;Learn more&lt;/a&gt; about encryption in hive.&lt;/p&gt; &#xA;&lt;p&gt;However you can use any other methods by creating a &lt;code&gt;LocalStorage&lt;/code&gt; implementation. For example, we can use &lt;a href=&#34;https://pub.dev/packages/flutter_secure_storage&#34;&gt;&lt;code&gt;flutter_secure_storage&lt;/code&gt;&lt;/a&gt; plugin to store the user session in a secure storage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Define the custom LocalStorage implementation&#xA;class SecureLocalStorage extends LocalStorage {&#xA;  SecureLocalStorage() : super(&#xA;    initialize: () async {},&#xA;    hasAccessToken: () {&#xA;      const storage = FlutterSecureStorage();&#xA;      return storage.containsKey(key: supabasePersistSessionKey);&#xA;    }, accessToken: () {&#xA;      const storage = FlutterSecureStorage();&#xA;      return storage.read(key: supabasePersistSessionKey);&#xA;    }, removePersistedSession: () {&#xA;      const storage = FlutterSecureStorage();&#xA;      return storage.delete(key: supabasePersistSessionKey);&#xA;    }, persistSession: (String value) {&#xA;      const storage = FlutterSecureStorage();&#xA;      return storage.write(key: supabasePersistSessionKey, value: value);&#xA;    },&#xA;  );&#xA;}&#xA;&#xA;// use it when initializing&#xA;Supabase.initialize(&#xA;  ...&#xA;  localStorage: SecureLocalStorage(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;EmptyLocalStorage&lt;/code&gt; to disable session persistence:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Supabase.initialize(&#xA;  // ...&#xA;  localStorage: const EmptyLocalStorage(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deep link config&lt;/h2&gt; &#xA;&lt;p&gt;*Currently supabase_flutter supports deep links on Android, iOS, Web, MacOS and Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Supabase redirect URLs config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to your Supabase project Authentication Settings page.&lt;/li&gt; &#xA; &lt;li&gt;You need to enter your app redirect callback on &lt;code&gt;Additional Redirect URLs&lt;/code&gt; field.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The redirect callback url should have this format &lt;code&gt;[YOUR_SCHEME]://[YOUR_AUTH_HOSTNAME]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/supabase/supabase-flutter/main/.github/images/deeplink-config.png&#34; alt=&#34;authentication settings page&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supabase 3rd party logins config&lt;/h3&gt; &#xA;&lt;p&gt;Follow the guide &lt;a href=&#34;https://supabase.io/docs/guides/auth#third-party-logins&#34;&gt;https://supabase.io/docs/guides/auth#third-party-logins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;For Android&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Deep Links can have any custom scheme. The downside is that any app can claim a scheme, so make sure yours are as unique as possible, eg. &lt;code&gt;HST0000001://host.com&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest ...&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;  &amp;lt;application ...&amp;gt;&#xA;    &amp;lt;activity ...&amp;gt;&#xA;      &amp;lt;!-- ... other tags --&amp;gt;&#xA;&#xA;      &amp;lt;!-- Deep Links --&amp;gt;&#xA;      &amp;lt;intent-filter&amp;gt;&#xA;        &amp;lt;action android:name=&#34;android.intent.action.VIEW&#34; /&amp;gt;&#xA;        &amp;lt;category android:name=&#34;android.intent.category.DEFAULT&#34; /&amp;gt;&#xA;        &amp;lt;category android:name=&#34;android.intent.category.BROWSABLE&#34; /&amp;gt;&#xA;        &amp;lt;!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST --&amp;gt;&#xA;        &amp;lt;data&#xA;          android:scheme=&#34;[YOUR_SCHEME]&#34;&#xA;          android:host=&#34;[YOUR_HOST]&#34; /&amp;gt;&#xA;      &amp;lt;/intent-filter&amp;gt;&#xA;    &amp;lt;/activity&amp;gt;&#xA;  &amp;lt;/application&amp;gt;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;android:host&lt;/code&gt; attribute is optional for Deep Links.&lt;/p&gt; &#xA; &lt;p&gt;For more info: &lt;a href=&#34;https://developer.android.com/training/app-links/deep-linking&#34;&gt;https://developer.android.com/training/app-links/deep-linking&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For iOS&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Custom URL schemes can have... any custom scheme and there is no host specificity, nor entitlements or a hosted file. The downside is that any app can claim any scheme, so make sure yours is as unique as possible, eg. &lt;code&gt;hst0000001&lt;/code&gt; or &lt;code&gt;myIncrediblyAwesomeScheme&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;For &lt;strong&gt;Custom URL schemes&lt;/strong&gt; you need to declare the scheme in &lt;code&gt;ios/Runner/Info.plist&lt;/code&gt; (or through Xcode&#39;s Target Info editor, under URL Types):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;plist&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;  &amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;  &amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;      &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;      &amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;      &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;      &amp;lt;array&amp;gt;&#xA;        &amp;lt;string&amp;gt;[YOUR_SCHEME]&amp;lt;/string&amp;gt;&#xA;      &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/array&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This allows for your app to be started from &lt;code&gt;YOUR_SCHEME://ANYTHING&lt;/code&gt; links.&lt;/p&gt; &#xA; &lt;p&gt;For more info: &lt;a href=&#34;https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app&#34;&gt;https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For Windows&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Setting up deep links in Windows has few more steps than other platforms. &lt;a href=&#34;https://pub.dev/packages/app_links#windows&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Declare this method in &amp;lt;PROJECT_DIR&amp;gt;\windows\runner\win32_window.h&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;  // Dispatches link if any.&#xA;  // This method enables our app to be with a single instance too.&#xA;  // This is optional but mandatory if you want to catch further links in same app.&#xA;  bool SendAppLinkToInstance(const std::wstring&amp;amp; title);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add this inclusion at the top of &amp;lt;PROJECT_DIR&amp;gt;\windows\runner\win32_window.cpp&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;app_links_windows/app_links_windows_plugin.h&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add this method in &amp;lt;PROJECT_DIR&amp;gt;\windows\runner\win32_window.cpp&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool Win32Window::SendAppLinkToInstance(const std::wstring&amp;amp; title) {&#xA;  // Find our exact window&#xA;  HWND hwnd = ::FindWindow(kWindowClassName, title.c_str());&#xA;&#xA;  if (hwnd) {&#xA;    // Dispatch new link to current window&#xA;    SendAppLink(hwnd);&#xA;&#xA;    // (Optional) Restore our window to front in same state&#xA;    WINDOWPLACEMENT place = { sizeof(WINDOWPLACEMENT) };&#xA;    GetWindowPlacement(hwnd, &amp;amp;place);&#xA;    switch(place.showCmd) {&#xA;      case SW_SHOWMAXIMIZED:&#xA;          ShowWindow(hwnd, SW_SHOWMAXIMIZED);&#xA;          break;&#xA;      case SW_SHOWMINIMIZED:&#xA;          ShowWindow(hwnd, SW_RESTORE);&#xA;          break;&#xA;      default:&#xA;          ShowWindow(hwnd, SW_NORMAL);&#xA;          break;&#xA;    }&#xA;    SetWindowPos(0, HWND_TOP, 0, 0, 0, 0, SWP_SHOWWINDOW | SWP_NOSIZE | SWP_NOMOVE);&#xA;    SetForegroundWindow(hwnd);&#xA;    // END Restore&#xA;&#xA;    // Window has been found, don&#39;t create another one.&#xA;    return true;&#xA;  }&#xA;&#xA;  return false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add the call to the previous method in &lt;code&gt;CreateAndShow&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;bool Win32Window::CreateAndShow(const std::wstring&amp;amp; title,&#xA;                                const Point&amp;amp; origin,&#xA;                                const Size&amp;amp; size) {&#xA;if (SendAppLinkToInstance(title)) {&#xA;    return false;&#xA;}&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;At this point, you can register your own scheme.&lt;br&gt; On Windows, URL protocols are setup in the Windows registry.&lt;/p&gt; &#xA; &lt;p&gt;This package won&#39;t do it for you.&lt;/p&gt; &#xA; &lt;p&gt;You can achieve it with &lt;a href=&#34;https://pub.dev/packages/url_protocol&#34;&gt;url_protocol&lt;/a&gt; inside you app.&lt;/p&gt; &#xA; &lt;p&gt;The most relevant solution is to include those registry modifications into your installer to allow for deregistration.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;For Mac OS&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to setup&lt;/summary&gt; &#xA; &lt;p&gt;Add this XML chapter in your macos/Runner/Info.plist inside &#xA;  &lt;plist version=&#34;1.0&#34;&gt;&#xA;   &lt;dict&gt;&#xA;     chapter:&#xA;   &lt;/dict&gt;&#xA;  &lt;/plist&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;  &amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;  &amp;lt;array&amp;gt;&#xA;      &amp;lt;dict&amp;gt;&#xA;          &amp;lt;key&amp;gt;CFBundleURLName&amp;lt;/key&amp;gt;&#xA;          &amp;lt;!-- abstract name for this URL type (you can leave it blank) --&amp;gt;&#xA;          &amp;lt;string&amp;gt;sample_name&amp;lt;/string&amp;gt;&#xA;          &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;          &amp;lt;array&amp;gt;&#xA;              &amp;lt;!-- your schemes --&amp;gt;&#xA;              &amp;lt;string&amp;gt;sample&amp;lt;/string&amp;gt;&#xA;          &amp;lt;/array&amp;gt;&#xA;      &amp;lt;/dict&amp;gt;&#xA;  &amp;lt;/array&amp;gt;&#xA;  &amp;lt;!-- ... other tags --&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repo on &lt;a href=&#34;https://github.com/supabase/supabase-flutter&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the project to your own machine&lt;/li&gt; &#xA; &lt;li&gt;Commit changes to your own branch&lt;/li&gt; &#xA; &lt;li&gt;Push your work back up to your fork&lt;/li&gt; &#xA; &lt;li&gt;Submit a Pull request so that we can review your changes and merge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repo is licenced under MIT.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/docs/guides/with-flutter&#34;&gt;Quickstart: Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/blog/flutter-tutorial-building-a-chat-app&#34;&gt;Flutter Tutorial: building a Flutter chat app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/blog/flutter-authentication-and-authorization-with-rls&#34;&gt;Flutter Tutorial - Part 2: Authentication and Authorization with RLS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>