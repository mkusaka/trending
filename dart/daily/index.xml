<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-11T01:44:25Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hungps/flutter_pokedex</title>
    <updated>2022-06-11T01:44:25Z</updated>
    <id>tag:github.com,2022-06-11:/hungps/flutter_pokedex</id>
    <link href="https://github.com/hungps/flutter_pokedex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pokedex app built with Flutter (with lots of animations) using Clean Architecture&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Pokedex&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?sanitize=true&#34; alt=&#34;Awesome Flutter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codemagic.io/apps/5d3727997dee22001bb7681c/5d3727997dee22001bb7681b/latest_build&#34;&gt;&lt;img src=&#34;https://api.codemagic.io/apps/5d3727997dee22001bb7681c/5d3727997dee22001bb7681b/status_badge.svg?sanitize=true&#34; alt=&#34;Codemagic build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-red.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-red.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pokedex app built with Flutter&lt;/p&gt; &#xA;&lt;h2&gt;App preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/home.png&#34; alt=&#34;Home&#34; title=&#34;Home&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/home-news.png&#34; alt=&#34;News&#34; title=&#34;News&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokedex.png&#34; alt=&#34;Pokedex&#34; title=&#34;Pokedex&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokedex-fab.png&#34; alt=&#34;Pokedex FAB&#34; title=&#34;Pokedex FAB&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokedex-fab-generation.png&#34; alt=&#34;Pokedex Generation&#34; title=&#34;Pokedex Generation&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokemon-info-about.png&#34; alt=&#34;Pokemon Info - About&#34; title=&#34;Pokemon Info - About&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokemon-info-base-stats.png&#34; alt=&#34;Pokemon Info - Base Stats&#34; title=&#34;Pokemon Info - Base Stats&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokemon-info-evolution.png&#34; alt=&#34;Pokemon Info - Evolution&#34; title=&#34;Pokemon Info - Evolution&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/pokemon-info-expanded.png&#34; alt=&#34;Pokemon Info - Base Stats (Expanded)&#34; title=&#34;Pokemon Info - Base Stats (Expanded)&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qKrFWerjoV8&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/screenshots/thumbnail.png&#34; alt=&#34;Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;Flutter&lt;/a&gt; to your machine&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open this project folder with Terminal/CMD and run &lt;code&gt;flutter packages get&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;flutter run&lt;/code&gt; to build and run the debug app on your emulator/phone&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Home&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Home - Apply Sliver effect in home screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokedex&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokedex - FAB&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokedex - Add FAB animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pokedex - Add grid loading animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokedex - Add more Pokemons by &lt;a href=&#34;https://github.com/balvinderz&#34;&gt;balvinderz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokedex - Add load more&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - About&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Base Stats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Evolution&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pokemon Info - Moves (no design)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Make tab area expandable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Add animations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Add more Pokemons by &lt;a href=&#34;https://github.com/balvinderz&#34;&gt;balvinderz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pokemon Info - Add missing data in About tab&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Add Base Stats data by &lt;a href=&#34;https://github.com/balvinderz&#34;&gt;balvinderz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pokemon Info - Add Evolution data by &lt;a href=&#34;https://github.com/balvinderz&#34;&gt;balvinderz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dribbble.com/saepulnahwan23&#34;&gt;Saepul Nahwan&lt;/a&gt; for his &lt;a href=&#34;https://dribbble.com/shots/6545819-Pokedex-App&#34;&gt;Pokedex App design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.deviantart.com/sabribey&#34;&gt;Sabri Bey&lt;/a&gt; for the Pikachu gif&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt; for the great cross platform framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All the code available under the MIT + Apache 2.0. licenses. See &lt;a href=&#34;https://raw.githubusercontent.com/hungps/flutter_pokedex/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aleksanderwozniak/table_calendar</title>
    <updated>2022-06-11T01:44:25Z</updated>
    <id>tag:github.com,2022-06-11:/aleksanderwozniak/table_calendar</id>
    <link href="https://github.com/aleksanderwozniak/table_calendar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highly customizable, feature-packed calendar widget for Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TableCalendar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/table_calendar&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/table_calendar.svg?style=flat-square&#34; alt=&#34;Pub Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Awesome-Flutter-52bdeb.svg?longCache=true&amp;amp;style=flat-square&#34; alt=&#34;Awesome Flutter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Highly customizable, feature-packed calendar widget for Flutter.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aleksanderwozniak/table_calendar/assets/table_calendar_styles.gif&#34; alt=&#34;Image&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aleksanderwozniak/table_calendar/assets/table_calendar_builders.gif&#34; alt=&#34;Image&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;TableCalendar&lt;/strong&gt; with custom styles&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;TableCalendar&lt;/strong&gt; with custom builders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extensive, yet easy to use API&lt;/li&gt; &#xA; &lt;li&gt;Preconfigured UI with customizable styling&lt;/li&gt; &#xA; &lt;li&gt;Custom selective builders for unlimited UI design&lt;/li&gt; &#xA; &lt;li&gt;Locale support&lt;/li&gt; &#xA; &lt;li&gt;Range selection support&lt;/li&gt; &#xA; &lt;li&gt;Multiple selection support&lt;/li&gt; &#xA; &lt;li&gt;Dynamic events and holidays&lt;/li&gt; &#xA; &lt;li&gt;Vertical autosizing - fit the content, or fill the viewport&lt;/li&gt; &#xA; &lt;li&gt;Multiple calendar formats (month, two weeks, week)&lt;/li&gt; &#xA; &lt;li&gt;Horizontal swipe boundaries (first day, last day)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Make sure to check out &lt;a href=&#34;https://github.com/aleksanderwozniak/table_calendar/tree/master/example/lib/pages&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/documentation/table_calendar/latest/&#34;&gt;API docs&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  table_calendar: ^3.0.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic setup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;The complete example is available &lt;a href=&#34;https://github.com/aleksanderwozniak/table_calendar/raw/master/example/lib/pages/basics_example.dart&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TableCalendar&lt;/strong&gt; requires you to provide &lt;code&gt;firstDay&lt;/code&gt;, &lt;code&gt;lastDay&lt;/code&gt; and &lt;code&gt;focusedDay&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;firstDay&lt;/code&gt; is the first available day for the calendar. Users will not be able to access days before it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lastDay&lt;/code&gt; is the last available day for the calendar. Users will not be able to access days after it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;focusedDay&lt;/code&gt; is the currently targeted day. Use this property to determine which month should be currently visible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;TableCalendar(&#xA;  firstDay: DateTime.utc(2010, 10, 16),&#xA;  lastDay: DateTime.utc(2030, 3, 14),&#xA;  focusedDay: DateTime.now(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Adding interactivity&lt;/h4&gt; &#xA;&lt;p&gt;You will surely notice that previously set up calendar widget isn&#39;t quite interactive - you can only swipe it horizontally, to change the currently visible month. While it may be sufficient in certain situations, you can easily bring it to life by specifying a couple of callbacks.&lt;/p&gt; &#xA;&lt;p&gt;Adding the following code to the calendar widget will allow it to respond to user&#39;s taps, marking the tapped day as selected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;selectedDayPredicate: (day) {&#xA;  return isSameDay(_selectedDay, day);&#xA;},&#xA;onDaySelected: (selectedDay, focusedDay) {&#xA;  setState(() {&#xA;    _selectedDay = selectedDay;&#xA;    _focusedDay = focusedDay; // update `_focusedDay` here as well&#xA;  });&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to dynamically update visible calendar format, add those lines to the widget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;calendarFormat: _calendarFormat,&#xA;onFormatChanged: (format) {&#xA;  setState(() {&#xA;    _calendarFormat = format;&#xA;  });&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those two changes will make the calendar interactive and responsive to user&#39;s input.&lt;/p&gt; &#xA;&lt;h4&gt;Updating focusedDay&lt;/h4&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;focusedDay&lt;/code&gt; to a static value means that whenever &lt;strong&gt;TableCalendar&lt;/strong&gt; widget rebuilds, it will use that specific &lt;code&gt;focusedDay&lt;/code&gt;. You can quickly test it by using hot reload: set &lt;code&gt;focusedDay&lt;/code&gt; to &lt;code&gt;DateTime.now()&lt;/code&gt;, swipe to next month and trigger a hot reload - the calendar will &#34;reset&#34; to its initial state. To prevent this from happening, you should store and update &lt;code&gt;focusedDay&lt;/code&gt; whenever any callback exposes it.&lt;/p&gt; &#xA;&lt;p&gt;Add this one callback to complete the basic setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;onPageChanged: (focusedDay) {&#xA;  _focusedDay = focusedDay;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth noting that you don&#39;t need to call &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;onPageChanged()&lt;/code&gt; callback. You should just update the stored value, so that if the widget gets rebuilt later on, it will use the proper &lt;code&gt;focusedDay&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The complete example is available &lt;a href=&#34;https://github.com/aleksanderwozniak/table_calendar/raw/master/example/lib/pages/basics_example.dart&#34;&gt;here&lt;/a&gt;. You can find other examples &lt;a href=&#34;https://github.com/aleksanderwozniak/table_calendar/tree/master/example/lib/pages&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;The complete example is available &lt;a href=&#34;https://github.com/aleksanderwozniak/table_calendar/raw/master/example/lib/pages/events_example.dart&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can supply custom events to &lt;strong&gt;TableCalendar&lt;/strong&gt; widget. To do so, use &lt;code&gt;eventLoader&lt;/code&gt; property - you will be given a &lt;code&gt;DateTime&lt;/code&gt; object, to which you need to assign a list of events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;eventLoader: (day) {&#xA;  return _getEventsForDay(day);&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;_getEventsForDay()&lt;/code&gt; can be of any implementation. For example, a &lt;code&gt;Map&amp;lt;DateTime, List&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;Event&amp;gt; _getEventsForDay(DateTime day) {&#xA;  return events[day] ?? [];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One thing worth remembering is that &lt;code&gt;DateTime&lt;/code&gt; objects consist of both date and time parts. In many cases this time part is redundant for calendar related aspects.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to use a &lt;code&gt;Map&lt;/code&gt;, I suggest making it a &lt;code&gt;LinkedHashMap&lt;/code&gt; - this will allow you to override equality comparison for two &lt;code&gt;DateTime&lt;/code&gt; objects, comparing them just by their date parts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final events = LinkedHashMap(&#xA;  equals: isSameDay,&#xA;  hashCode: getHashCode,&#xA;)..addAll(eventSource);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cyclic events&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;eventLoader&lt;/code&gt; allows you to easily add events that repeat in a pattern. For example, this will add an event to every Monday:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;eventLoader: (day) {&#xA;  if (day.weekday == DateTime.monday) {&#xA;    return [Event(&#39;Cyclic event&#39;)];&#xA;  }&#xA;&#xA;  return [];&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Events selected on tap&lt;/h4&gt; &#xA;&lt;p&gt;Often times having a sublist of events that are selected by tapping on a day is desired. You can achieve that by using the same method you provided to &lt;code&gt;eventLoader&lt;/code&gt; inside of &lt;code&gt;onDaySelected&lt;/code&gt; callback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void _onDaySelected(DateTime selectedDay, DateTime focusedDay) {&#xA;  if (!isSameDay(_selectedDay, selectedDay)) {&#xA;    setState(() {&#xA;      _focusedDay = focusedDay;&#xA;      _selectedDay = selectedDay;&#xA;      _selectedEvents = _getEventsForDay(selectedDay);&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The complete example is available &lt;a href=&#34;https://github.com/aleksanderwozniak/table_calendar/raw/master/example/lib/pages/events_example.dart&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom UI with CalendarBuilders&lt;/h3&gt; &#xA;&lt;p&gt;To customize the UI with your own widgets, use &lt;a href=&#34;https://pub.dev/documentation/table_calendar/latest/table_calendar/CalendarBuilders-class.html&#34;&gt;CalendarBuilders&lt;/a&gt;. Each builder can be used to selectively override the UI, allowing you to implement highly specific designs with minimal hassle.&lt;/p&gt; &#xA;&lt;p&gt;You can return &lt;code&gt;null&lt;/code&gt; from any builder to use the default style. For example, the following snippet will override only the Sunday&#39;s day of the week label (Sun), leaving other dow labels unchanged:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;calendarBuilders: CalendarBuilders(&#xA;  dowBuilder: (context, day) {&#xA;    if (day.weekday == DateTime.sunday) {&#xA;      final text = DateFormat.E().format(day);&#xA;&#xA;      return Center(&#xA;        child: Text(&#xA;          text,&#xA;          style: TextStyle(color: Colors.red),&#xA;        ),&#xA;      );&#xA;    }&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Locale&lt;/h3&gt; &#xA;&lt;p&gt;To display the calendar in desired language, use &lt;code&gt;locale&lt;/code&gt; property. If you don&#39;t specify it, a default locale will be used.&lt;/p&gt; &#xA;&lt;h4&gt;Initialization&lt;/h4&gt; &#xA;&lt;p&gt;Before you can use a locale, you might need to initialize date formatting.&lt;/p&gt; &#xA;&lt;p&gt;A simple way of doing it is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First of all, add &lt;a href=&#34;https://pub.dev/packages/intl&#34;&gt;intl&lt;/a&gt; package to your pubspec.yaml file&lt;/li&gt; &#xA; &lt;li&gt;Then make modifications to your &lt;code&gt;main()&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:intl/date_symbol_data_local.dart&#39;;&#xA;&#xA;void main() {&#xA;  initializeDateFormatting().then((_) =&amp;gt; runApp(MyApp()));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After those two steps your app should be ready to use &lt;strong&gt;TableCalendar&lt;/strong&gt; with different languages.&lt;/p&gt; &#xA;&lt;h4&gt;Specifying a language&lt;/h4&gt; &#xA;&lt;p&gt;To specify a language, simply pass it as a String code to &lt;code&gt;locale&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;For example, this will make &lt;strong&gt;TableCalendar&lt;/strong&gt; use Polish language:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;TableCalendar(&#xA;  locale: &#39;pl_PL&#39;,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aleksanderwozniak/table_calendar/assets/en_US.png&#34; alt=&#34;Image&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aleksanderwozniak/table_calendar/assets/pl_PL.png&#34; alt=&#34;Image&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aleksanderwozniak/table_calendar/assets/fr_FR.png&#34; alt=&#34;Image&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aleksanderwozniak/table_calendar/assets/zh_CN.png&#34; alt=&#34;Image&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;en_US&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;pl_PL&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;fr_FR&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;&#39;zh_CN&#39;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note, that if you want to change the language of &lt;code&gt;FormatButton&lt;/code&gt;&#39;s text, you have to do this yourself. Use &lt;code&gt;availableCalendarFormats&lt;/code&gt; property and pass the translated Strings there. Use i18n method of your choice.&lt;/p&gt; &#xA;&lt;p&gt;You can also hide the button altogether by setting &lt;code&gt;formatButtonVisible&lt;/code&gt; to false.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutter/pinball</title>
    <updated>2022-06-11T01:44:25Z</updated>
    <id>tag:github.com,2022-06-11:/flutter/pinball</id>
    <link href="https://github.com/flutter/pinball" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google I/O 2022 Pinball game built with Flutter and Firebase&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;I/O Pinball&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pinball.flutter.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flutter/pinball/main/art/readme_header.png&#34; alt=&#34;Pinball Header&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutter/pinball/actions/workflows/main.yaml&#34;&gt;&lt;img src=&#34;https://github.com/flutter/pinball/actions/workflows/main.yaml/badge.svg?sanitize=true&#34; alt=&#34;io_pinball&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/flutter/pinball/main/coverage_badge.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/very_good_analysis&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-very_good_analysis-B22C89.svg?sanitize=true&#34; alt=&#34;style: very good analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Pinball game built with &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt; and &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt; for &lt;a href=&#34;https://events.google.com/io/&#34;&gt;Google I/O 2022&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pinball.flutter.dev&#34;&gt;Try it now&lt;/a&gt; and &lt;a href=&#34;https://medium.com/flutter/i-o-pinball-powered-by-flutter-and-firebase-d22423f3f5d&#34;&gt;learn about how it&#39;s made&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Built by &lt;a href=&#34;https://verygood.ventures/&#34;&gt;Very Good Ventures&lt;/a&gt; in partnership with Google&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Created using &lt;a href=&#34;https://github.com/VeryGoodOpenSource/very_good_cli&#34;&gt;Very Good CLI&lt;/a&gt; 🤖&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started 🚀&lt;/h2&gt; &#xA;&lt;p&gt;To run the desired project either use the launch configuration in VSCode/Android Studio or use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ flutter run -d chrome&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;*I/O Pinball works on Web for desktop and mobile.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Running Tests 🧪&lt;/h2&gt; &#xA;&lt;p&gt;To run all unit and widget tests use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ flutter test --coverage --test-randomize-ordering-seed random&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the generated coverage report you can use &lt;a href=&#34;https://github.com/linux-test-project/lcov&#34;&gt;lcov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Generate Coverage Report&#xA;$ genhtml coverage/lcov.info -o coverage/&#xA;# Open Coverage Report&#xA;$ open coverage/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Working with Translations 🌐&lt;/h2&gt; &#xA;&lt;p&gt;This project relies on &lt;a href=&#34;https://api.flutter.dev/flutter/flutter_localizations/flutter_localizations-library.html&#34;&gt;flutter_localizations&lt;/a&gt; and follows the &lt;a href=&#34;https://flutter.dev/docs/development/accessibility-and-localization/internationalization&#34;&gt;official internationalization guide for Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding Strings&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To add a new localizable string, open the &lt;code&gt;app_en.arb&lt;/code&gt; file at &lt;code&gt;lib/l10n/arb/app_en.arb&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-arb&#34;&gt;{&#xA;    &#34;@@locale&#34;: &#34;en&#34;,&#xA;    &#34;counterAppBarTitle&#34;: &#34;Counter&#34;,&#xA;    &#34;@counterAppBarTitle&#34;: {&#xA;        &#34;description&#34;: &#34;Text shown in the AppBar of the Counter Page&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Then add a new key/value and description&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-arb&#34;&gt;{&#xA;    &#34;@@locale&#34;: &#34;en&#34;,&#xA;    &#34;counterAppBarTitle&#34;: &#34;Counter&#34;,&#xA;    &#34;@counterAppBarTitle&#34;: {&#xA;        &#34;description&#34;: &#34;Text shown in the AppBar of the Counter Page&#34;&#xA;    },&#xA;    &#34;helloWorld&#34;: &#34;Hello World&#34;,&#xA;    &#34;@helloWorld&#34;: {&#xA;        &#34;description&#34;: &#34;Hello World Text&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Use the new string&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:pinball/l10n/l10n.dart&#39;;&#xA;&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  final l10n = context.l10n;&#xA;  return Text(l10n.helloWorld);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Translations&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;For each supported locale, add a new ARB file in &lt;code&gt;lib/l10n/arb&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── l10n&#xA;│   ├── arb&#xA;│   │   ├── app_en.arb&#xA;│   │   └── app_es.arb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add the translated strings to each &lt;code&gt;.arb&lt;/code&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;app_en.arb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-arb&#34;&gt;{&#xA;    &#34;@@locale&#34;: &#34;en&#34;,&#xA;    &#34;counterAppBarTitle&#34;: &#34;Counter&#34;,&#xA;    &#34;@counterAppBarTitle&#34;: {&#xA;        &#34;description&#34;: &#34;Text shown in the AppBar of the Counter Page&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;app_es.arb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-arb&#34;&gt;{&#xA;    &#34;@@locale&#34;: &#34;es&#34;,&#xA;    &#34;counterAppBarTitle&#34;: &#34;Contador&#34;,&#xA;    &#34;@counterAppBarTitle&#34;: {&#xA;        &#34;description&#34;: &#34;Texto mostrado en la AppBar de la página del contador&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>