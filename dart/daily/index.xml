<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-18T01:30:56Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>albert-heijn-technology/apple_maps_flutter</title>
    <updated>2024-12-18T01:30:56Z</updated>
    <id>tag:github.com,2024-12-18:/albert-heijn-technology/apple_maps_flutter</id>
    <link href="https://github.com/albert-heijn-technology/apple_maps_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apple Maps Plugin for Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;apple_maps_flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/LuisThein/apple_maps_flutter&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/LuisThein/apple_maps_flutter/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter plugin that provides an Apple Maps widget.&lt;/p&gt; &#xA;&lt;p&gt;The plugin relies on Flutter&#39;s mechanism for embedding Android and iOS views. As that mechanism is currently in a developers preview, this plugin should also be considered a developers preview.&lt;/p&gt; &#xA;&lt;p&gt;This plugin was based on the &lt;code&gt;google_maps_flutter&lt;/code&gt; plugin. Instead of reinventing the wheel it also uses the Flutter implementation of the &lt;code&gt;google_maps_flutter&lt;/code&gt; plugin. This was also done to simplify the process of combining the &lt;code&gt;google_maps_flutter&lt;/code&gt; plugin with &lt;code&gt;apple_maps_flutter&lt;/code&gt; to create a cross platform implementation for Android/iOS called &lt;code&gt;flutter_platform_maps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Example 1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Example 2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://luisthein.de/apple-maps-plugin-images/example_img01-min.png&#34; alt=&#34;Example 1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://luisthein.de/apple-maps-plugin-images/example_img02-min.png&#34; alt=&#34;Example 2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;iOS&lt;/h1&gt; &#xA;&lt;p&gt;To use this plugin on iOS you need to opt-in for the embedded views preview by adding a boolean property to the app&#39;s Info.plist file, with the key &lt;code&gt;io.flutter.embedded_views_preview&lt;/code&gt; and the value &lt;code&gt;YES&lt;/code&gt;. You will also have to add the key &lt;code&gt;Privacy - Location When In Use Usage Description&lt;/code&gt; with the value of your usage description.&lt;/p&gt; &#xA;&lt;h1&gt;Android&lt;/h1&gt; &#xA;&lt;p&gt;There is no Android implementation, but there is a package combining apple_maps_flutter and the google_maps_flutter plugin to have the typical map implementations for Android/iOS called platform_maps_flutter.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class AppleMapsExample extends StatelessWidget {&#xA;  AppleMapController mapController;&#xA;&#xA;  void _onMapCreated(AppleMapController controller) {&#xA;    mapController = controller;&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Column(&#xA;      mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#xA;      crossAxisAlignment: CrossAxisAlignment.stretch,&#xA;      children: &amp;lt;Widget&amp;gt;[&#xA;        Expanded(&#xA;          child: Container(&#xA;            child: AppleMap(&#xA;              onMapCreated: _onMapCreated,&#xA;              initialCameraPosition: const CameraPosition(&#xA;                target: LatLng(0.0, 0.0),&#xA;              ),&#xA;            ),&#xA;          ),&#xA;        ),&#xA;        Row(&#xA;          mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#xA;          children: &amp;lt;Widget&amp;gt;[&#xA;            Column(&#xA;              children: &amp;lt;Widget&amp;gt;[&#xA;                FlatButton(&#xA;                  onPressed: () {&#xA;                    mapController.moveCamera(&#xA;                      CameraUpdate.newCameraPosition(&#xA;                        const CameraPosition(&#xA;                          heading: 270.0,&#xA;                          target: LatLng(51.5160895, -0.1294527),&#xA;                          pitch: 30.0,&#xA;                          zoom: 17,&#xA;                        ),&#xA;                      ),&#xA;                    );&#xA;                  },&#xA;                  child: const Text(&#39;newCameraPosition&#39;),&#xA;                ),&#xA;                FlatButton(&#xA;                  onPressed: () {&#xA;                    mapController.moveCamera(&#xA;                      CameraUpdate.newLatLngZoom(&#xA;                        const LatLng(37.4231613, -122.087159),&#xA;                        11.0,&#xA;                      ),&#xA;                    );&#xA;                  },&#xA;                  child: const Text(&#39;newLatLngZoom&#39;),&#xA;                ),&#xA;              ],&#xA;            ),&#xA;            Column(&#xA;              children: &amp;lt;Widget&amp;gt;[&#xA;                FlatButton(&#xA;                  onPressed: () {&#xA;                    mapController.moveCamera(&#xA;                      CameraUpdate.zoomIn(),&#xA;                    );&#xA;                  },&#xA;                  child: const Text(&#39;zoomIn&#39;),&#xA;                ),&#xA;                FlatButton(&#xA;                  onPressed: () {&#xA;                    mapController.moveCamera(&#xA;                      CameraUpdate.zoomOut(),&#xA;                    );&#xA;                  },&#xA;                  child: const Text(&#39;zoomOut&#39;),&#xA;                ),&#xA;                FlatButton(&#xA;                  onPressed: () {&#xA;                    mapController.moveCamera(&#xA;                      CameraUpdate.zoomTo(16.0),&#xA;                    );&#xA;                  },&#xA;                  child: const Text(&#39;zoomTo&#39;),&#xA;                ),&#xA;              ],&#xA;            ),&#xA;          ],&#xA;        )&#xA;      ],&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suggestions and PR&#39;s to make this plugin better are always welcome.&lt;/p&gt;</summary>
  </entry>
</feed>