<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-10T01:34:22Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CCExtractor/taskwarrior-flutter</title>
    <updated>2023-01-10T01:34:22Z</updated>
    <id>tag:github.com,2023-01-10:/CCExtractor/taskwarrior-flutter</id>
    <link href="https://github.com/CCExtractor/taskwarrior-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is the repo of mobile app of taskwarrior&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TaskWarrior&lt;/h1&gt; &#xA;&lt;p&gt;This project aims to build an app for Taskwarrior. It is your task management app across all platforms. It helps you manage your tasks and filter them as per your needs.&lt;/p&gt; &#xA;&lt;h1&gt;Timeline and Project Page&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://summerofcode.withgoogle.com/programs/2022/projects/8pYfxjXv&#34;&gt;GSoC page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository from GitHub:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/NishantSinghal19/taskwarrior-flutter.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Navigate to the project&#39;s root directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd taskwarrior-flutter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Check for Flutter setup and connected devices:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter doctor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run the app:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Help is always appreciated, whether it comes in the form of feature requests or suggestions, code improvements, refactoring, or performance enhancements. The more is done, the better it gets. If you find any bug(s), consider opening an &lt;a href=&#34;https://github.com/NishantSinghal19/taskwarrior-gsoc/issues/new&#34;&gt;issue&lt;/a&gt;. Please make sure you specify the commit type while opening pull requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;feat: The new feature you&#39;re proposing&#xA;&#xA;fix: A bug fix in the project&#xA;&#xA;test: Everything related to testing&#xA;&#xA;docs: Everything related to documentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can Check community guidlines at &lt;a href=&#34;https://github.com/CCExtractor/taskwarrior-flutter/wiki/Contribution-Guidelines-&amp;amp;-Development-Practices&#34;&gt;Contribution Guidelines &amp;amp; Development Practices&lt;/a&gt; page in Wiki section&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;We would love to hear from you! You may join the gsoc-taskwarrior channel of CCExtractor community through Slack:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ccextractor.org/public/general/support/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on_slack-purple.svg?style=for-the-badge&amp;amp;logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flutter&lt;/h2&gt; &#xA;&lt;p&gt;For help in getting started with Flutter, view &lt;a href=&#34;https://flutter.dev/docs&#34;&gt;online documentation&lt;/a&gt;, which offers tutorials, samples, guidance on mobile development, and a full API reference.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Flutterando/auto_injector</title>
    <updated>2023-01-10T01:34:22Z</updated>
    <id>tag:github.com,2023-01-10:/Flutterando/auto_injector</id>
    <link href="https://github.com/Flutterando/auto_injector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dependency injection system. But without build_runner :)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Auto Injector&lt;/h1&gt; &#xA;&lt;p&gt;Dependency injection system. But without build_runner :)&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT!&lt;/h2&gt; &#xA;&lt;p&gt;This package is still under development. Not recommended for use in production!&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;void main(){&#xA;&#xA;    final autoInjector = AutoInjector();&#xA;&#xA;    // factory&#xA;    autoInjector.add(Controller.new);&#xA;&#xA;    // lazySingleton&#xA;    autoInjector.addLazySingleton(Repository.new);&#xA;&#xA;    // Singleton&#xA;    autoInjector.addSingleton(Datasource.new);&#xA;&#xA;    // instance&#xA;    autoInjector.instance(&#39;Instance&#39;);&#xA;&#xA;    // Inform that you have finished adding instances&#xA;    autoInjector.commit();&#xA;&#xA;    // fetch&#xA;    final controller = autoInjector.get&amp;lt;Controller&amp;gt;();&#xA;    print(controller); // Instance of &#39;Controller&#39;.&#xA;&#xA;    // or use calleble function (withless .get())&#xA;    final datasource = autoInjector&amp;lt;Datasource&amp;gt;();&#xA;    print(datasource); // Instance of &#39;Datasource&#39;.&#xA;&#xA;}&#xA;&#xA;&#xA;class Controller {&#xA;    final Repository repository;&#xA;&#xA;    Controller(this.repository)&#xA;}&#xA;&#xA;class Repository {&#xA;    final Datasource datasource;&#xA;&#xA;    Repository({required this.datasource})&#xA;}&#xA;&#xA;class Datasource {}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dispose Singleton&lt;/h2&gt; &#xA;&lt;p&gt;Singletons can be terminated on request using the &lt;code&gt;disposeSingleton&lt;/code&gt; method returning the instance for executing the dispose routine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;final deadInstance = autoInjector.disposeSingleton&amp;lt;MyController&amp;gt;();&#xA;deadInstance.close();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modularization&lt;/h2&gt; &#xA;&lt;p&gt;For projects with multiple scopes, try uniting the instances by naming them Module or Container. With this, you can register specific instances for each module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;// app_module.dart&#xA;final appModule = AutoInjector(&#xA;  tag: &#39;AppModule&#39;,&#xA;  on: (i) {&#xA;    i.addInjector(productModule);&#xA;    i.addInjector(userModule);&#xA;    i.commit();&#xA;  },&#xA;);&#xA;&#xA;...&#xA;&#xA;// product_module.dart&#xA;final productModule = AutoInjector(&#xA;  tag: &#39;ProductModule&#39;,&#xA;  on: (i) {&#xA;    i.addInstance(1);&#xA;  },&#xA;);&#xA;&#xA;...&#xA;&#xA;// user_module.dart&#xA;final userModule = AutoInjector(&#xA;  tag: &#39;UserModule&#39;,&#xA;  on: (i) {&#xA;    i.addInstance(true);&#xA;  },&#xA;);&#xA;&#xA;...&#xA;&#xA;void main() {&#xA;  print(appModule.get&amp;lt;int&amp;gt;());&#xA;  print(appModule.get&amp;lt;bool&amp;gt;());&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Também é possível remover todos os singletons de uma tag específica usando o método &lt;code&gt;disposeSingletonsByTag&lt;/code&gt; que informa cada instância removida atraves de uma função anônima:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;autoInjector.disposeSingletonsByTag(&#39;ProductModule&#39;, (instance){&#xA;  // individual dispose routine&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Param Transform&lt;/h2&gt; &#xA;&lt;p&gt;Existe a possíbilidade de escutar e transformar todos os paramentros que estão sendo analisados quando há o pedido da instancia (&lt;code&gt;AutoInject.get()&lt;/code&gt;). Adicione transformadores na instância principal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final homeModule = AutoInjector(&#xA;  paramTransforms: [&#xA;    (param) {&#xA;    if(param is NamedParam){&#xA;        return param;&#xA;    } else if(param is PositionalParam) {&#xA;        return param;&#xA;    } else {&#xA;        return param;&#xA;    }&#xA;  ],&#xA;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>