<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-18T01:27:57Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Nutcake/ReCon</title>
    <updated>2023-10-18T01:27:57Z</updated>
    <id>tag:github.com,2023-10-18:/Nutcake/ReCon</id>
    <link href="https://github.com/Nutcake/ReCon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/Nutcake/ReCon/raw/main/assets/images/logo512.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;ReCon&lt;/h1&gt; &#xA;&lt;p&gt;A Resonite Contacts App for Android&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Nutcake/ReCon/releases/latest&#34;&gt;Get it here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;This is a standard Flutter application, refer to the &lt;a href=&#34;https://docs.flutter.dev/get-started/install&#34;&gt;Flutter docs&lt;/a&gt; on how to build it.&lt;/p&gt; &#xA;&lt;p&gt;Currently only Android is supported.&lt;/p&gt; &#xA;&lt;p&gt;In theory this app should also build fine for desktop, though not every feature will be functional. For example, voice-messages and notifications are currently not supported on desktop builds.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Nutcake/ReCon/assets/10452593/a46ccf8a-0a9f-4518-98e6-84fad2d7bf26&#34; width=&#34;198/&#34;&gt; &lt;img src=&#34;https://github.com/Nutcake/ReCon/assets/10452593/5d158f58-cd27-4a68-abf3-9068e92b6a82&#34; width=&#34;198/&#34;&gt; &lt;img src=&#34;https://github.com/Nutcake/ReCon/assets/10452593/f2ce95ef-e513-46cb-9654-31e74cdc7c09&#34; width=&#34;198/&#34;&gt; &lt;img src=&#34;https://github.com/Nutcake/ReCon/assets/10452593/58ef5e5e-1b53-4a47-92f8-bcbcba7a1e86&#34; width=&#34;198/&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>renancaraujo/glowup_vibes</title>
    <updated>2023-10-18T01:27:57Z</updated>
    <id>tag:github.com,2023-10-18:/renancaraujo/glowup_vibes</id>
    <link href="https://github.com/renancaraujo/glowup_vibes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;goated dart lang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üåü Glowup Vibes üåü&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a title=&#34;Pub&#34; href=&#34;https://pub.dev/packages/glowup_vibes&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/glowup_vibes.svg?style=popout&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Goated üêê Dart language.&lt;/p&gt; &#xA;&lt;p&gt;This package is highkey inspired by this &lt;a href=&#34;https://github.com/christina-de-martinez/babel-plugin-glowup-vibes&#34;&gt;Babel plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the OG yt short: &lt;a href=&#34;https://www.youtube.com/watch?v=vgcbwv_3WDU&#34;&gt;https://www.youtube.com/watch?v=vgcbwv_3WDU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation üíª&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ùóTo get your Glowup Vibes on, make sure you&#39;ve got the &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;Dart SDK&lt;/a&gt; installed on your machine.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install via &lt;code&gt;dart pub add&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dart pub add glowup_vibes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wat? ü§î&lt;/h2&gt; &#xA;&lt;p&gt;Glowup Vibes is a Dart package that spices up Dart&#39;s lingo with some &#34;internet slang&#34; flavor. üöÄüìöüí¨&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;&#39;cause.&lt;/p&gt; &#xA;&lt;h2&gt;API üìñ&lt;/h2&gt; &#xA;&lt;h3&gt;Top-level getters:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;With rizz&lt;/th&gt; &#xA;   &lt;th&gt;No Rizz (original)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onGod&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;noCap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yesnt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nice&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;69&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;outOfPocket&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;double.infinity&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;F&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a &lt;code&gt;Never&lt;/code&gt;. Throws a respectful error.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;imded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Calls &lt;a href=&#34;https://api.dart.dev/dart-io/exit.html&#34;&gt;exit&lt;/a&gt; with &lt;code&gt;code&lt;/code&gt; &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ragequit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Calls &lt;a href=&#34;https://api.dart.dev/dart-io/exit.html&#34;&gt;exit&lt;/a&gt; with &lt;code&gt;code&lt;/code&gt; &lt;code&gt;nice&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cya&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Calls &lt;a href=&#34;https://api.dart.dev/dart-io/exit.html&#34;&gt;exit&lt;/a&gt; with &lt;code&gt;code&lt;/code&gt; &lt;code&gt;0&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Log APIs:&lt;/h3&gt; &#xA;&lt;p&gt;Based &lt;a href=&#34;https://pub.dev/packages/mason_logger&#34;&gt;Mason Logger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;With rizz&lt;/th&gt; &#xA;   &lt;th&gt;No Rizz (original)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowkey.stan(message)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger.info(message)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowkey.sus(message)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger.warn(message)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowkey.cringe(message)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger.err(message)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowkey.drip(message)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger.detail(message)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowkey.tea(message)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger.success(message)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lowkey.flex(message)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;logger.success(message)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Future APIs:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;With rizz&lt;/th&gt; &#xA;   &lt;th&gt;No Rizz (original)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;future.letItCook((value) { ... }, ohnoes: () { ... })&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;future.then((value) { ... }, onError: () { ... })&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;future.busted((error) { ... })&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;future.catchError((error) { ... })&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;String APIs:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;With rizz&lt;/th&gt; &#xA;   &lt;th&gt;No Rizz (original)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;lets go FAM&#39;.lowkey&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lets go fam.toLowerCase()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;lets go FAM&#39;.highkey&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LETS GO FAM.toUpperCase()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;lets go FAM&#39;.mock&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lEts gO Fam&lt;/code&gt; (spOngE bOB case)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other APIs:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;With rizz&lt;/th&gt; &#xA;   &lt;th&gt;No Rizz (original)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fr(assertion)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;assert(assertion);&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cook(value)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Future.value(value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;derp(error)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Future.error(error)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;holdup([future1, future2])&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Future.wait([future1, future2])&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yeet(exception)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;throw exception&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;brb(Duration(seconds: 1))&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Future.delayed(Duration(seconds: 1))&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;typah(something)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Type typah&amp;lt;T&amp;gt;(T wat) =&amp;gt; T&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>