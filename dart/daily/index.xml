<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-16T01:37:26Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simolus3/drift</title>
    <updated>2022-06-16T01:37:26Z</updated>
    <id>tag:github.com,2022-06-16:/simolus3/drift</id>
    <link href="https://github.com/simolus3/drift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drift is an easy to use, reactive, typesafe persistence library for Dart &amp; Flutter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Drift&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Moor has been renamed to drift&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simolus3/drift/actions/workflows/main.yml/badge.svg&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/simolus3/moor.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/moor-dart/community&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/moor-dart/community&#34; alt=&#34;Chat on Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Proudly Sponsored by &lt;a href=&#34;https://getstream.io/chat/flutter/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_FlutterChat&amp;amp;utm_term=moor&#34;&gt;Stream üíô&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://getstream.io/chat/flutter/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_FlutterChat&amp;amp;utm_term=moor&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;250px&#34; src=&#34;https://stream-blog.s3.amazonaws.com/blog/wp-content/uploads/fc148f0fc75d02841d017bb36e14e388/Stream-logo-with-background-.png&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;span&gt;&lt;a href=&#34;https://getstream.io/chat/flutter/tutorial/?utm_source=Github&amp;amp;utm_medium=Github_Repo_Content_Ad&amp;amp;utm_content=Developer&amp;amp;utm_campaign=Github_Jan2022_FlutterChat&amp;amp;utm_term=moor&#34; target=&#34;_blank&#34;&gt;Try the Flutter Chat Tutorial &amp;nbsp;üí¨&lt;/a&gt;&lt;/span&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Core&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Generator&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/drift&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/drift.svg?sanitize=true&#34; alt=&#34;Main version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pub.dev/packages/drift_dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/drift_dev.svg?sanitize=true&#34; alt=&#34;Generator version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Drift is a reactive persistence library for Flutter and Dart, built on top of sqlite. Drift is&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: Drift let&#39;s you write queries in both SQL and Dart, providing fluent apis for both languages. You can filter and order results or use joins to run queries on multiple tables. You can even use complex sql features like &lt;code&gt;WITH&lt;/code&gt; and &lt;code&gt;WINDOW&lt;/code&gt; clauses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;üî• Feature rich&lt;/strong&gt;: Drift has builtin support for transactions, schema migrations, complex filters and expressions, batched updates and joins. We even have a builtin IDE for SQL!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;üì¶ Modular&lt;/strong&gt;: Thanks to builtin support for daos and &lt;code&gt;import&lt;/code&gt;s in sql files, drift helps you keep your database code simple.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;üõ°Ô∏è Safe&lt;/strong&gt;: Drift generates typesafe code based on your tables and queries. If you make a mistake in your queries, drift will find it at compile time and provide helpful and descriptive lints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚ö° Fast&lt;/strong&gt;: Even though drift lets you write powerful queries, it can keep up with the performance of key-value stores like shared preferences and Hive. Drift is the only major persistence library with builtin threading support, allowing you to run database code across isolates with zero additional effort.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reactive&lt;/strong&gt;: Turn any sql query into an auto-updating stream! This includes complex queries across many tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚öôÔ∏è Cross-Platform support&lt;/strong&gt;: Drift works on Android, iOS, macOS, Windows, Linux and the web. &lt;a href=&#34;https://github.com/simolus3/drift/tree/develop/examples/app&#34;&gt;This template&lt;/a&gt; is a Flutter todo app that works on all platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;üó°Ô∏è Battle tested and production ready&lt;/strong&gt;: Drift is stable and well tested with a wide range of unit and integration tests. It powers production Flutter apps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With drift, persistence on Flutter is fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To start using drift, read our detailed &lt;a href=&#34;https://drift.simonbinder.eu/docs/getting-started/&#34;&gt;docs&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, feedback or ideas, feel free to &lt;a href=&#34;https://github.com/simolus3/drift/issues/new&#34;&gt;create an issue&lt;/a&gt;. If you enjoy this project, I&#39;d appreciate your &lt;a href=&#34;https://github.com/simolus3/drift/&#34;&gt;üåü on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Important packages in this repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;drift&lt;/code&gt;: The main runtime for drift, which provides most apis&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drift_dev&lt;/code&gt;: The compiler for drift tables, databases and daos. It also contains a fully-featured sql ide for the Dart analyzer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlparser&lt;/code&gt;: A sql parser and static analyzer, written in pure Dart. This package can be used without drift to perform analysis on sql statements. It&#39;s on pub at &lt;a href=&#34;https://pub.dev/packages/sqlparser&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/sqlparser.svg?sanitize=true&#34; alt=&#34;sqlparser&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>flutter/samples</title>
    <updated>2022-06-16T01:37:26Z</updated>
    <id>tag:github.com,2022-06-16:/flutter/samples</id>
    <link href="https://github.com/flutter/samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of Flutter examples and demos&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter samples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutter/samples/actions?workflow=Main%20Branch%20CI&#34;&gt;&lt;img src=&#34;https://github.com/flutter/samples/workflows/Main%20Branch%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A collection of open source samples that illustrate best practices for &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Visual samples index&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to browse through the samples in this repo (as well as a few others!) is the &lt;a href=&#34;https://flutter.github.io/samples&#34;&gt;visual samples index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tip: minimize download size&lt;/h2&gt; &#xA;&lt;p&gt;As this repository is quite big, you can use svn to download a single example. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;svn co https://github.com/flutter/samples/trunk/provider_shopper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use a &lt;a href=&#34;https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/&#34;&gt;partial clone&lt;/a&gt; to skip blob objects that aren&#39;t currently checked out, while including the full commit history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --filter=blob:none https://github.com/flutter/samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interested in contributing?&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/flutter/samples/main/CONTRIBUTING.md&#34;&gt;contributor&#39;s guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Questions or issues?&lt;/h2&gt; &#xA;&lt;p&gt;If you have a general question about one of these samples or how to adapt its techniques for one of your own apps, try one of these resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/flutter-dev&#34;&gt;The FlutterDev Google Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitter.im/flutter/flutter&#34;&gt;The Flutter Gitter channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/flutter&#34;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into a bug in one of the samples, please file an issue in the &lt;a href=&#34;https://github.com/flutter/samples/issues&#34;&gt;&lt;code&gt;flutter/samples&lt;/code&gt; issue tracker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rive-app/rive-flutter</title>
    <updated>2022-06-16T01:37:26Z</updated>
    <id>tag:github.com,2022-06-16:/rive-app/rive-flutter</id>
    <link href="https://github.com/rive-app/rive-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/rive&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/rive&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/rive-app/rive-flutter/actions/workflows/tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/532365473602600965&#34; alt=&#34;Discord badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/rive_app.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter handle&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Rive&lt;/h1&gt; &#xA;&lt;p&gt;Runtime docs are available in &lt;a href=&#34;https://help.rive.app/runtimes/quick-start&#34;&gt;Rive&#39;s help center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rive.app/&#34;&gt;Rive&lt;/a&gt; is a real-time interactive design and animation tool. Use our collaborative editor to create motion graphics that respond to different states and user inputs. Then load your animations into apps, games, and websites with our lightweight open-source runtimes.&lt;/p&gt; &#xA;&lt;h2&gt;Add to pubspec.yaml&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  rive: ^0.9.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Play an animation from a Rive file over HTTP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:rive/rive.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MaterialApp(home: SimpleAnimation()));&#xA;}&#xA;&#xA;class SimpleAnimation extends StatelessWidget {&#xA;  const SimpleAnimation({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return const Scaffold(&#xA;      body: Center(&#xA;        child: RiveAnimation.network(&#xA;          &#39;https://cdn.rive.app/animations/vehicles.riv&#39;,&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To play an animation from an asset bundle, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RiveAnimation.asset(&#39;assets/truck.riv&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Control playing and pausing a looping animation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:rive/rive.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MaterialApp(home: PlayPauseAnimation()));&#xA;}&#xA;&#xA;class PlayPauseAnimation extends StatefulWidget {&#xA;  const PlayPauseAnimation({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  _PlayPauseAnimationState createState() =&amp;gt; _PlayPauseAnimationState();&#xA;}&#xA;&#xA;class _PlayPauseAnimationState extends State&amp;lt;PlayPauseAnimation&amp;gt; {&#xA;  // Controller for playback&#xA;  late RiveAnimationController _controller;&#xA;&#xA;  // Toggles between play and pause animation states&#xA;  void _togglePlay() =&amp;gt;&#xA;      setState(() =&amp;gt; _controller.isActive = !_controller.isActive);&#xA;&#xA;  /// Tracks if the animation is playing by whether controller is running&#xA;  bool get isPlaying =&amp;gt; _controller.isActive;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    _controller = SimpleAnimation(&#39;idle&#39;);&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      body: Center(&#xA;        child: RiveAnimation.network(&#xA;          &#39;https://cdn.rive.app/animations/vehicles.riv&#39;,&#xA;          controllers: [_controller],&#xA;          // Update the play state when the widget&#39;s initialized&#xA;          onInit: (_) =&amp;gt; setState(() {}),&#xA;        ),&#xA;      ),&#xA;      floatingActionButton: FloatingActionButton(&#xA;        onPressed: _togglePlay,&#xA;        tooltip: isPlaying ? &#39;Pause&#39; : &#39;Play&#39;,&#xA;        child: Icon(&#xA;          isPlaying ? Icons.pause : Icons.play_arrow,&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Play a one-shot animation repeatedly on demand&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// Demonstrates playing a one-shot animation on demand&#xA;&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:rive/rive.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MaterialApp(home: PlayOneShotAnimation()));&#xA;}&#xA;&#xA;class PlayOneShotAnimation extends StatefulWidget {&#xA;  const PlayOneShotAnimation({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  _PlayOneShotAnimationState createState() =&amp;gt; _PlayOneShotAnimationState();&#xA;}&#xA;&#xA;class _PlayOneShotAnimationState extends State&amp;lt;PlayOneShotAnimation&amp;gt; {&#xA;  /// Controller for playback&#xA;  late RiveAnimationController _controller;&#xA;&#xA;  /// Is the animation currently playing?&#xA;  bool _isPlaying = false;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    _controller = OneShotAnimation(&#xA;      &#39;bounce&#39;,&#xA;      autoplay: false,&#xA;      onStop: () =&amp;gt; setState(() =&amp;gt; _isPlaying = false),&#xA;      onStart: () =&amp;gt; setState(() =&amp;gt; _isPlaying = true),&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        title: const Text(&#39;One-Shot Example&#39;),&#xA;      ),&#xA;      body: Center(&#xA;        child: RiveAnimation.network(&#xA;          &#39;https://cdn.rive.app/animations/vehicles.riv&#39;,&#xA;          animations: const [&#39;idle&#39;, &#39;curves&#39;],&#xA;          controllers: [_controller],&#xA;        ),&#xA;      ),&#xA;      floatingActionButton: FloatingActionButton(&#xA;        // disable the button while playing the animation&#xA;        onPressed: () =&amp;gt; _isPlaying ? null : _controller.isActive = true,&#xA;        tooltip: &#39;Play&#39;,&#xA;        child: const Icon(Icons.arrow_upward),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Antialiasing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to disable antialiasing (usually for performance reasons), you can set &lt;code&gt;antialiasing&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; on the &lt;code&gt;Rive&lt;/code&gt; and &lt;code&gt;RiveAnimation&lt;/code&gt; widgets.&lt;/p&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out our more extensive API documentation on pub.dev: &lt;a href=&#34;https://pub.dev/documentation/rive/latest/&#34;&gt;https://pub.dev/documentation/rive/latest/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>