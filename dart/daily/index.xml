<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-14T01:30:03Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Betterment/alchemist</title>
    <updated>2024-11-14T01:30:03Z</updated>
    <id>tag:github.com,2024-11-14:/Betterment/alchemist</id>
    <link href="https://github.com/Betterment/alchemist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter tool that makes golden testing easy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧙🏼 Alchemist&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://verygood.ventures&#34;&gt;&lt;img alt=&#34;Very Good Ventures&#34; src=&#34;https://raw.githubusercontent.com/VGVentures/very_good_brand/main/logos/lockups/lockup.svg?sanitize=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://betterment.com/&#34;&gt;&lt;img alt=&#34;Betterment&#34; src=&#34;https://resources.betterment.com/hubfs/Graphics/shared-assets/betterment-wordmark-logo.svg?sanitize=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Developed with 💙 by &lt;a href=&#34;https://verygood.ventures&#34;&gt;Very Good Ventures&lt;/a&gt; 🦄 and &lt;a href=&#34;https://betterment.com/&#34;&gt;Betterment&lt;/a&gt; ☀️.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Betterment/alchemist/actions&#34;&gt;&lt;img src=&#34;https://github.com/Betterment/alchemist/workflows/alchemist/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Betterment/alchemist&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Betterment/alchemist/branch/main/graph/badge.svg?token=M04EG8H8V9&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/alchemist&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/alchemist.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;A Flutter tool that makes golden testing easy.&lt;/h3&gt; &#xA;&lt;p&gt;Alchemist is a Flutter package that provides functions, extensions and documentation to support golden tests.&lt;/p&gt; &#xA;&lt;p&gt;Heavily inspired by &lt;a href=&#34;https://pub.dev/packages/golden_toolkit&#34;&gt;Ebay Motor&#39;s &lt;code&gt;golden_toolkit&lt;/code&gt; package&lt;/a&gt;, Alchemist attempts to make writing and running golden tests in Flutter easier.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A short guide can be found in &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/example/example.md&#34;&gt;example.md&lt;/a&gt; file (or the &lt;a href=&#34;https://pub.dev/packages/alchemist/example&#34;&gt;example tab on pub.dev&lt;/a&gt;). A full example project is available in the &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/example/&#34;&gt;example&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Feature Overview&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🤖 &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#about-platform-tests-vs-ci-tests&#34;&gt;Separate local &amp;amp; CI tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📝 &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#writing-the-test&#34;&gt;Declarative &amp;amp; terse testing API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📐 &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#automaticcustom-image-sizing&#34;&gt;Automatic file sizing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#advanced-usage&#34;&gt;Advanced configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🌈 &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#about-alchemistconfig&#34;&gt;Easy theme customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔤 &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#custom-text-scale-factor&#34;&gt;Custom text scaling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🧪 100% test coverage&lt;/li&gt; &#xA; &lt;li&gt;📖 Extensive documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#feature-overview&#34;&gt;Feature Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#about-platform-tests-vs-ci-tests&#34;&gt;About platform tests vs. CI tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#basic-usage&#34;&gt;Basic usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#writing-the-test&#34;&gt;Writing the test&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#recommended-setup-guide&#34;&gt;Recommended Setup Guide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#test-groups&#34;&gt;Test groups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#test-scenarios&#34;&gt;Test scenarios&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#generating-the-golden-file&#34;&gt;Generating the golden file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#testing-and-comparing&#34;&gt;Testing and comparing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#advanced-usage&#34;&gt;Advanced usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#about-alchemistconfig&#34;&gt;About &lt;code&gt;AlchemistConfig&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#advanced-theming&#34;&gt;Advanced theming&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#using-a-custom-config&#34;&gt;Using a custom config&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#for-all-tests&#34;&gt;For all tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#for-single-tests-or-groups&#34;&gt;For single tests or groups&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#merging-and-copying-configs&#34;&gt;Merging and copying configs&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#simulating-gestures&#34;&gt;Simulating gestures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#automaticcustom-image-sizing&#34;&gt;Automatic/custom image sizing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#custom-pumping-behavior&#34;&gt;Custom pumping behavior&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#before-tests&#34;&gt;Before tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#pumping-widgets&#34;&gt;Pumping widgets&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#custom-text-scale-factor&#34;&gt;Custom text scale factor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;About platform tests vs. CI tests&lt;/h3&gt; &#xA;&lt;p&gt;Alchemist can perform two kinds of golden tests.&lt;/p&gt; &#xA;&lt;p&gt;One is &lt;strong&gt;platform tests&lt;/strong&gt;, which generate golden files with human readable text. These can be considered regular golden tests and are usually only run on a local machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/assets/readme/macos_list_tile_golden_file.png&#34; alt=&#34;Example platform golden test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The other is &lt;strong&gt;CI tests&lt;/strong&gt;, which look and function the same as platform tests, except that the text blocks are replaced with colored squares.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/assets/readme/ci_list_tile_golden_file.png&#34; alt=&#34;Example CI golden test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The reason for this distinction is that the output of platform tests is dependent on the platform the test is running on. In particular, individual platforms are known to render text differently than others. This causes readable golden files generated on macOS, for example, to be ever so slightly off from the golden files generated on other platforms, such as Windows or Linux, causing CI systems to fail the test. CI tests, on the other hand, were made to circumvent this, and will always have the same output regardless of the platform.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, CI tests are always run using the Ahem font family, which is a font that solely renders square characters. This is done to ensure that CI tests are platform agnostic -- their output is always consistent regardless of the host platform.&lt;/p&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;h4&gt;Writing the test&lt;/h4&gt; &#xA;&lt;p&gt;In your project&#39;s &lt;code&gt;test/&lt;/code&gt; directory, add a file for your widget&#39;s tests. Then, write and run golden tests by using the &lt;code&gt;goldenTest&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;We recommend putting all golden tests related to the same component into a test &lt;code&gt;group&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every &lt;code&gt;goldenTest&lt;/code&gt; commonly contains a group of scenarios related to each other (for example, all scenarios that test the same constructor or widget in a particular context).&lt;/p&gt; &#xA;&lt;p&gt;This example shows a basic golden test for &lt;code&gt;ListTile&lt;/code&gt;s that makes use of some of the more advanced features of the &lt;code&gt;goldenTest&lt;/code&gt; API to control the output of the test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:alchemist/alchemist.dart&#39;;&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter_test/flutter_test.dart&#39;;&#xA;&#xA;void main() {&#xA;  group(&#39;ListTile Golden Tests&#39;, () {&#xA;    goldenTest(&#xA;      &#39;renders correctly&#39;,&#xA;      fileName: &#39;list_tile&#39;,&#xA;      builder: () =&amp;gt; GoldenTestGroup(&#xA;        scenarioConstraints: const BoxConstraints(maxWidth: 600),&#xA;        children: [&#xA;          GoldenTestScenario(&#xA;            name: &#39;with title&#39;,&#xA;            child: ListTile(&#xA;              title: Text(&#39;ListTile.title&#39;),&#xA;            ),&#xA;          ),&#xA;          GoldenTestScenario(&#xA;            name: &#39;with title and subtitle&#39;,&#xA;            child: ListTile(&#xA;              title: Text(&#39;ListTile.title&#39;),&#xA;              subtitle: Text(&#39;ListTile.subtitle&#39;),&#xA;            ),&#xA;          ),&#xA;          GoldenTestScenario(&#xA;            name: &#39;with trailing icon&#39;,&#xA;            child: ListTile(&#xA;              title: Text(&#39;ListTile.title&#39;),&#xA;              trailing: Icon(Icons.chevron_right_rounded),&#xA;            ),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, simply run Flutter test and pass the &lt;code&gt;--update-goldens&lt;/code&gt; flag to generate the golden files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter test --update-goldens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Recommended Setup Guide&lt;/h4&gt; &#xA;&lt;p&gt;For a more detailed explanation on how Betterment uses Alchemist, read the included &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/RECOMMENDED_SETUP_GUIDE.md&#34;&gt;Recommended Setup Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Test groups&lt;/h4&gt; &#xA;&lt;p&gt;While the &lt;code&gt;goldenTest&lt;/code&gt; function can take in and performs tests on any arbitrary widget, it is most commonly given a &lt;code&gt;GoldenTestGroup&lt;/code&gt;. This is a widget used for organizing a set of widgets that groups multiple testing scenarios together and arranges them in a table format.&lt;/p&gt; &#xA;&lt;p&gt;Alongside the &lt;code&gt;children&lt;/code&gt; parameter, &lt;code&gt;GoldenTestGroup&lt;/code&gt; contains two additional properties that can be used to customize the resulting table view:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int? columns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The amount of columns in the grid. If left unset, this will be determined based on the amount of children.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ColumnWidthBuilder? columnWidthBuilder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A function that returns the width for each column. If left unset, the width of each column is determined by the width of the widest widget in that column.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Test scenarios&lt;/h4&gt; &#xA;&lt;p&gt;Golden test scenarios are typically encapsulated in a &lt;code&gt;GoldenTestScenario&lt;/code&gt; widget. This widget contains a &lt;code&gt;name&lt;/code&gt; property that is used to identify the scenario, along with the widget it should display. The regular constructor allows a &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;child&lt;/code&gt; to be passed in, but the &lt;code&gt;.builder&lt;/code&gt; and &lt;code&gt;.withTextScaleFactor&lt;/code&gt; constructors allow the use of a widget builder and text scale factor to be passed in respectively.&lt;/p&gt; &#xA;&lt;h4&gt;Generating the golden file&lt;/h4&gt; &#xA;&lt;p&gt;To run the test and generate the golden file, run &lt;code&gt;flutter test&lt;/code&gt; with the &lt;code&gt;--update-goldens&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Should always succeed&#xA;flutter test --update-goldens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After all golden tests have run, the generated golden files will be in the &lt;code&gt;goldens/ci/&lt;/code&gt; directory relative to the test file. Depending on the platform the test was run on (and the current &lt;a href=&#34;https://raw.githubusercontent.com/Betterment/alchemist/main/#configuring-tests&#34;&gt;&lt;code&gt;AlchemistConfig&lt;/code&gt;&lt;/a&gt;), platform goldens will be in the &lt;code&gt;goldens/&amp;lt;platform_name&amp;gt;&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lib/&#xA;test/&#xA;├─ goldens/&#xA;│  ├─ ci/&#xA;│  │  ├─ my_widget.png&#xA;│  ├─ macos/&#xA;│  │  ├─ my_widget.png&#xA;│  ├─ linux/&#xA;│  │  ├─ my_widget.png&#xA;│  ├─ windows/&#xA;│  │  ├─ my_widget.png&#xA;├─ my_widget_golden_test.dart&#xA;pubspec.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Testing and comparing&lt;/h4&gt; &#xA;&lt;p&gt;When you want to run golden tests regularly and compare them to the generated golden files (in a CI process for example), simply run &lt;code&gt;flutter test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, all golden tests will have a &lt;code&gt;&#34;golden&#34;&lt;/code&gt; tag, meaning you can select when to run golden tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Run all tests.&#xA;flutter test&#xA;&#xA;# Only run golden tests.&#xA;flutter test --tags golden&#xA;&#xA;# Run all tests except golden tests.&#xA;flutter test --exclude-tags golden&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced usage&lt;/h3&gt; &#xA;&lt;p&gt;Alchemist has several extensions and mechanics to accommodate for more advanced golden testing scenarios.&lt;/p&gt; &#xA;&lt;h4&gt;About &lt;code&gt;AlchemistConfig&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;All tests make use of the &lt;code&gt;AlchemistConfig&lt;/code&gt; class. This configuration object contains various settings that can be used to customize the behavior of the tests.&lt;/p&gt; &#xA;&lt;p&gt;A default &lt;code&gt;AlchemistConfig&lt;/code&gt; is provided for you, and contains the following settings:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool forceUpdateGoldenFiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If &lt;code&gt;true&lt;/code&gt;, the golden files will always be regenerated, regardless of the &lt;code&gt;--update-goldens&lt;/code&gt; flag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ThemeData? theme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The theme to use for all tests. If &lt;code&gt;null&lt;/code&gt;, the default &lt;code&gt;ThemeData.light()&lt;/code&gt; will be used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PlatformGoldensConfig platformGoldensConfig&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;const PlatformGoldensConfig()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The configuration to use when running readable golden tests on a non-CI host.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CiGoldensConfig ciGoldensConfig&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;const CiGoldensConfig()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The configuration to use when running obscured golden tests in a CI environment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Both the &lt;code&gt;PlatformGoldensConfig&lt;/code&gt; and &lt;code&gt;CiGoldensConfig&lt;/code&gt; classes contain a number of settings that can be used to customize the behavior of the tests. These are the settings both of these objects allow you to customize:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Indicates if this type of test should run. If set to &lt;code&gt;false&lt;/code&gt;, this type of test is never allowed to run. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool obscureText&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; for CI, &lt;code&gt;false&lt;/code&gt; for platform&lt;/td&gt; &#xA;   &lt;td&gt;Indicates if the text in the rendered widget should be obscured by colored rectangles. This is useful for circumventing issues with Flutter&#39;s font rendering between host platforms.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool renderShadows&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt; for CI, &lt;code&gt;true&lt;/code&gt; for platform&lt;/td&gt; &#xA;   &lt;td&gt;Indicates if shadows should actually be rendered, or if they should be replaced by opaque colors. This is useful because shadow rendering can be inconsistent between test runs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FilePathResolver filePathResolver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;_defaultFilePathResolver&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A function that resolves the path to the golden file, relative to the test that generates it. By default, CI golden test files are placed in &lt;code&gt;goldens/ci/&lt;/code&gt;, and readable golden test files are placed in &lt;code&gt;goldens/&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ThemeData? theme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The theme to use for this type of test. If &lt;code&gt;null&lt;/code&gt;, the enclosing &lt;code&gt;AlchemistConfig&lt;/code&gt;&#39;s &lt;code&gt;theme&lt;/code&gt; will be used, or &lt;code&gt;ThemeData.light()&lt;/code&gt; if that is also &lt;code&gt;null&lt;/code&gt;. &lt;em&gt;Note that CI tests are always run using the Ahem font family, which is a font that solely renders square characters. This is done to ensure that CI tests are always consistent across platforms.&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Alongside these arguments, the &lt;code&gt;PlatformGoldensConfig&lt;/code&gt; contains an additional setting:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Set&amp;lt;HostPlatform&amp;gt; platforms&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All platforms&lt;/td&gt; &#xA;   &lt;td&gt;The platforms that platform golden tests should run on. By default, this is set to all platforms, meaning that a golden file will be generated if the current platform matches any platforms in the provided set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Advanced theming&lt;/h5&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;theme&lt;/code&gt; property on the &lt;code&gt;AlchemistConfig&lt;/code&gt;, &lt;code&gt;CiGoldensConfig&lt;/code&gt; and &lt;code&gt;PlatformGoldensConfig&lt;/code&gt; classes, Alchemist also supports inherited theming. This means that any theme provided through a custom &lt;code&gt;pumpWidget&lt;/code&gt; callback given to &lt;code&gt;goldenTest&lt;/code&gt; will be used instead of the &lt;code&gt;theme&lt;/code&gt; property on the &lt;code&gt;AlchemistConfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The theme resolver works as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If a theme is given to the platform-specific test (using &lt;code&gt;CiGoldensConfig&lt;/code&gt; or &lt;code&gt;PlatformGoldensConfig&lt;/code&gt;), it is used.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if an inherited theme is provided by the &lt;code&gt;pumpWidget&lt;/code&gt; callback (for example, through a &lt;code&gt;MaterialApp&lt;/code&gt;), it is used.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if a theme is provided in the &lt;code&gt;AlchemistConfig&lt;/code&gt;, it is used.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, a default &lt;code&gt;ThemeData.fallback()&lt;/code&gt; is used.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Using a custom config&lt;/h4&gt; &#xA;&lt;p&gt;The current &lt;code&gt;AlchemistConfig&lt;/code&gt; can be retrieved at any time using &lt;code&gt;AlchemistConfig.current()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A custom can be set by using &lt;code&gt;AlchemistConfig.runWithConfig&lt;/code&gt;. Any code executed within this function will cause &lt;code&gt;AlchemistConfig.current()&lt;/code&gt; to return the provided config. This is achieved using Dart&#39;s zoning system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  print(AlchemistConfig.current().forceUpdateGoldenFiles);&#xA;  // &amp;gt; false&#xA;&#xA;  AlchemistConfig.runWithConfig(&#xA;    config: AlchemistConfig(&#xA;      forceUpdateGoldenFiles: true,&#xA;    ),&#xA;    run: () {&#xA;      print(AlchemistConfig.current().forceUpdateGoldenFiles);&#xA;      // &amp;gt; true&#xA;    },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;For all tests&lt;/h5&gt; &#xA;&lt;p&gt;A common way to use this mechanic to configure tests for all your tests in a particular package is by using a &lt;code&gt;flutter_test_config.dart&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;flutter_test_config.dart&lt;/code&gt; file in the root of your project&#39;s &lt;code&gt;test/&lt;/code&gt; directory. This file should have the following contents by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:async&#39;;&#xA;&#xA;Future&amp;lt;void&amp;gt; testExecutable(FutureOr&amp;lt;void&amp;gt; Function() testMain) async {&#xA;  await testMain();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This file is executed every time a test file is about to be run. To set a global config, simply wrap the &lt;code&gt;testMain&lt;/code&gt; function in a &lt;code&gt;AlchemistConfig.runWithConfig&lt;/code&gt; call, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:async&#39;;&#xA;&#xA;import &#39;package:alchemist/alchemist.dart&#39;;&#xA;&#xA;Future&amp;lt;void&amp;gt; testExecutable(FutureOr&amp;lt;void&amp;gt; Function() testMain) async {&#xA;  return AlchemistConfig.runWithConfig(&#xA;    config: AlchemistConfig(&#xA;      // Configure the config here.&#xA;    ),&#xA;    run: testMain,&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any test executed in the package will now use the provided config.&lt;/p&gt; &#xA;&lt;h5&gt;For single tests or groups&lt;/h5&gt; &#xA;&lt;p&gt;A config can also be set for a single test or test group, which will override the default for those tests. This can be achieved by wrapping that group or test in a &lt;code&gt;AlchemistConfig.runWithConfig&lt;/code&gt; call, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  group(&#39;with default config&#39;, () {&#xA;    test(&#39;test&#39;, () {&#xA;      expect(&#xA;        AlchemistConfig.current().forceUpdateGoldenFiles,&#xA;        isFalse,&#xA;      );&#xA;    });&#xA;  });&#xA;&#xA;  AlchemistConfig.runWithConfig(&#xA;    config: AlchemistConfig(&#xA;      forceUpdateGoldenFiles: true,&#xA;    ),&#xA;    run: () {&#xA;      group(&#39;with overridden config&#39;, () {&#xA;        test(&#39;test&#39;, () {&#xA;          expect(&#xA;            AlchemistConfig.current().forceUpdateGoldenFiles,&#xA;            isTrue,&#xA;          );&#xA;        });&#xA;      });&#xA;    },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Merging and copying configs&lt;/h5&gt; &#xA;&lt;p&gt;Additionally, settings for a given code block can be partially overridden by using &lt;code&gt;AlchemistConfig.copyWith&lt;/code&gt; or, more commonly, &lt;code&gt;AlchemistConfig.merge&lt;/code&gt;. The &lt;code&gt;copyWith&lt;/code&gt; method will create a copy of the config it is called on, and then override the settings passed in. The &lt;code&gt;merge&lt;/code&gt; is slightly more flexible, allowing a second &lt;code&gt;AlchemistConfig&lt;/code&gt; (or &lt;code&gt;null&lt;/code&gt;) to be passed in, after which a copy will be created of the instance, and all settings defined on the provided config will replace ones on the instance.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately, the replacement mechanic of &lt;code&gt;merge&lt;/code&gt; makes it possible to replace deep/nested values easily, like this:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Click to open &lt;code&gt;AlchemistConfig.merge&lt;/code&gt; example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  // The top level config is defined here.&#xA;  AlchemistConfig.runWithConfig(&#xA;    config: AlchemistConfig(&#xA;      forceUpdateGoldenFiles: true,&#xA;      platformGoldensConfig: PlatformGoldensConfig(&#xA;        renderShadows: false,&#xA;        fileNameResolver: (String name) =&amp;gt; &#39;top_level_config/goldens/$name.png&#39;,&#xA;      ),&#xA;    ),&#xA;    run: () {&#xA;      final currentConfig = AlchemistConfig.current();&#xA;&#xA;      print(currentConfig.forceUpdateGoldenFiles);&#xA;      // &amp;gt; true&#xA;      print(currentConfig.platformGoldensConfig.renderShadows);&#xA;      // &amp;gt; false&#xA;      print(currentConfig.platformGoldensConfig.fileNameResolver(&#39;my_widget&#39;));&#xA;      // &amp;gt; top_level_config/goldens/my_widget.png&#xA;&#xA;      AlchemistConfig.runWithConfig(&#xA;        // Here, the current config (defined above) is merged&#xA;        // with a new config, where only the defined options are&#xA;        // replaced, preserving the rest.&#xA;        config: AlchemistConfig.current().merge(&#xA;            AlchemistConfig(&#xA;              platformGoldensConfig: PlatformGoldensConfig(&#xA;                renderShadows: true,&#xA;              ),&#xA;            ),&#xA;          ),&#xA;        ),&#xA;        run: () {&#xA;          // AlchemistConfig.current() will now return the merged config.&#xA;          final currentConfig = AlchemistConfig.current();&#xA;&#xA;          print(currentConfig.forceUpdateGoldenFiles);&#xA;          // &amp;gt; true (preserved from the top level config)&#xA;          print(currentConfig.platformGoldensConfig.renderShadows);&#xA;          // &amp;gt; true (changed by the newly merged config)&#xA;          print(currentConfig.platformGoldensConfig.fileNameResolver(&#39;my_widget&#39;));&#xA;          // &amp;gt; top_level_config/goldens/my_widget.png (preserved from the top level config)&#xA;        },&#xA;      );&#xA;    },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Simulating gestures&lt;/h4&gt; &#xA;&lt;p&gt;Some golden tests may require some form of user input to be performed. For example, to make sure a button shows the right color when being pressed, a test may require a tap gesture to be performed while the golden test image is being generated.&lt;/p&gt; &#xA;&lt;p&gt;These kinds of gestures can be performed by providing the &lt;code&gt;goldenTest&lt;/code&gt; function with a &lt;code&gt;whilePerforming&lt;/code&gt; argument. This parameter takes a function that will be used to find the widget that should be pressed. There are some default interactions already provided, such as &lt;code&gt;press&lt;/code&gt; and &lt;code&gt;longPress&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  goldenTest(&#xA;    &#39;ElevatedButton renders tap indicator when pressed&#39;,&#xA;    fileName: &#39;elevated_button_pressed&#39;,&#xA;    whilePerforming: press(find.byType(ElevatedButton)),&#xA;    builder: () =&amp;gt; GoldenTestGroup(&#xA;      children: [&#xA;        GoldenTestScenario(&#xA;          name: &#39;pressed&#39;,&#xA;          child: ElevatedButton(&#xA;            onPressed: () {},&#xA;            child: Text(&#39;Pressed&#39;),&#xA;          ),&#xA;        ),&#xA;      ],&#xA;    ),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Automatic/custom image sizing&lt;/h4&gt; &#xA;&lt;p&gt;By default, Alchemist will automatically find the smallest possible size for the generated golden image and the widgets it contains, and will resize the image accordingly.&lt;/p&gt; &#xA;&lt;p&gt;The default size and this scaling behavior are configurable, and fully encapsulated in the &lt;code&gt;constraints&lt;/code&gt; argument to the &lt;code&gt;goldenTest&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;The constraints are set to &lt;code&gt;const BoxConstraints()&lt;/code&gt; by default, meaning no minimum or maximum size will be enforced.&lt;/p&gt; &#xA;&lt;p&gt;If a minimum width or height is set, the image will be resized to that size as long as it would not clip the widgets it contains. The same is true for a maximum width or height.&lt;/p&gt; &#xA;&lt;p&gt;If the passed in constraints are tight, meaning the minimum width and height are equal to the maximum width and height, no resizing will be performed and the image will be generated at the exact size specified.&lt;/p&gt; &#xA;&lt;h4&gt;Custom pumping behavior&lt;/h4&gt; &#xA;&lt;h5&gt;Before tests&lt;/h5&gt; &#xA;&lt;p&gt;Before running every golden test, the &lt;code&gt;goldenTest&lt;/code&gt; function will call its &lt;code&gt;pumpBeforeTest&lt;/code&gt; function. This function is used to prime the widget tree prior to generating the golden test image. By default, the tree is pumped and settled (using &lt;code&gt;tester.pumpAndSettle()&lt;/code&gt;), but in some scenarios, custom pumping behavior may be required.&lt;/p&gt; &#xA;&lt;p&gt;In these cases, a different &lt;code&gt;pumpBeforeTest&lt;/code&gt; function can be provided to the &lt;code&gt;goldenTest&lt;/code&gt; function. A set of predefined functions are included in this package, including &lt;code&gt;pumpOnce&lt;/code&gt;, &lt;code&gt;pumpNTimes(n)&lt;/code&gt;, and &lt;code&gt;onlyPumpAndSettle&lt;/code&gt;, but custom functions can be created as well.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there is a &lt;code&gt;precacheImages&lt;/code&gt; function, which can be passed to &lt;code&gt;pumpBeforeTest&lt;/code&gt; in order to preload all images in the tree, so that they will appear in the generated golden files.&lt;/p&gt; &#xA;&lt;h5&gt;Pumping widgets&lt;/h5&gt; &#xA;&lt;p&gt;If desired, a custom &lt;code&gt;pumpWidget&lt;/code&gt; function can be provided to any &lt;code&gt;goldenTest&lt;/code&gt; call. This will override the default behavior and allow the widget being tested to be wrapped in any number of widgets, and then pumped.&lt;/p&gt; &#xA;&lt;p&gt;By default, Alchemist will simply pump the widget being tested using &lt;code&gt;tester.pumpWidget&lt;/code&gt;. Note that the widget under test will always be wrapped in a set of bootstrapping widgets, regardless of the &lt;code&gt;pumpWidget&lt;/code&gt; callback provided.&lt;/p&gt; &#xA;&lt;h4&gt;Custom text scale factor&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;GoldenTestScenario.withTextScaleFactor&lt;/code&gt; constructor allows a custom text scale factor value to be provided for a single scenario. This can be used to test text rendering at different sizes.&lt;/p&gt; &#xA;&lt;p&gt;To set a default scale factor for all scenarios within a test, the &lt;code&gt;goldenTest&lt;/code&gt; function allows a default &lt;code&gt;textScaler&lt;/code&gt; to be provided, which defaults to &lt;code&gt;TextScaler.linear(1.0)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://github.com/Betterment/alchemist&#34;&gt;GitHub repository&lt;/a&gt; to view the source code.&lt;/li&gt; &#xA; &lt;li&gt;For bug reports and feature requests, visit the &lt;a href=&#34;https://github.com/Betterment/alchemist/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Feel free to submit a pull request! If you&#39;re a developer, you can fork the repository and &lt;a href=&#34;https://github.com/Betterment/alchemist/compare&#34;&gt;submit your pull request&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>