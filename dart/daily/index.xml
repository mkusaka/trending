<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-12T01:34:15Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fluttercandies/extended_image</title>
    <updated>2022-11-12T01:34:15Z</updated>
    <id>tag:github.com,2022-11-12:/fluttercandies/extended_image</id>
    <link href="https://github.com/fluttercandies/extended_image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful official extension library of image, which support placeholder(loading)/ failed state, cache network, zoom pan image, photo view, slide out page, editor(crop,rotate,flip), paint custom etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;extended_image&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/extended_image&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/extended_image.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fluttercandies/extended_image/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/fluttercandies/extended_image&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fluttercandies/extended_image/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/fluttercandies/extended_image&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/fluttercandies/extended_image&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fluttercandies/extended_image/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/fluttercandies/extended_image&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5bcc0gy&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://pub.idqqimg.com/wpa/images/group.png&#34; alt=&#34;flutter-candies&#34; title=&#34;flutter-candies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Language: English| &lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/README-ZH.md&#34;&gt;中文简体&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A powerful official extension library of images, which supports placeholder(loading)/ failed state, cache network, zoom pan image, photo view, slide-out page, editor (crop, rotate, flip), paint custom etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fluttercandies.github.io/extended_image/&#34;&gt;Web demo for ExtendedImage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#extended_image&#34;&gt;extended_image&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#import&#34;&gt;Import&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#cache-network&#34;&gt;Cache Network&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#simple-use&#34;&gt;Simple use&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#use-extendednetworkimageprovider&#34;&gt;Use ExtendedNetworkImageProvider&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#load-state&#34;&gt;Load State&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#demo-code&#34;&gt;demo code&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#zoom-pan&#34;&gt;Zoom Pan&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#double-tap-animation&#34;&gt;double tap animation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#editor&#34;&gt;Editor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#crop-aspect-ratio&#34;&gt;crop aspect ratio&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#crop-layer-painter&#34;&gt;crop layer painter&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#cropflipreset&#34;&gt;crop,flip,reset&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#crop-data&#34;&gt;crop data&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#dart-librarystable&#34;&gt;dart library(stable)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#native-libraryfaster&#34;&gt;native library(faster)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#photo-view&#34;&gt;Photo View&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#slide-out-page&#34;&gt;Slide Out Page&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#enable-slide-out-page&#34;&gt;enable slide out page&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#include-your-page-in-extendedimageslidepage&#34;&gt;include your page in ExtendedImageSlidePage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#make-sure-your-page-background-is-transparent&#34;&gt;make sure your page background is transparent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#push-with-transparent-page-route&#34;&gt;push with transparent page route&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#border-borderradius-shape&#34;&gt;Border BorderRadius Shape&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#clear-save&#34;&gt;Clear Save&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#clear&#34;&gt;clear&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#save-network&#34;&gt;save network&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#show-crop-image&#34;&gt;Show Crop Image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#paint&#34;&gt;Paint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#notch&#34;&gt;Notch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#memoryusage&#34;&gt;MemoryUsage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercandies/extended_image/master/#other-apis&#34;&gt;Other APIs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Import&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;null-safety&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  sdk: &#39;&amp;gt;=2.12.0 &amp;lt;3.0.0&#39;&#xA;  flutter: &#39;&amp;gt;=2.0&#39;&#xA;dependencies:&#xA;  extended_image: ^4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;non-null-safety&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.22.6 to 2.0, Flutter Api has breaking change，please use non-null-safety if you under 1.22.6.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;environment:&#xA;  sdk: &#39;&amp;gt;=2.6.0 &amp;lt;2.12.0&#39;&#xA;  flutter: &#39;&amp;gt;1.17.0 &amp;lt;=1.22.6&#39;&#xA;dependencies:&#xA;  extended_image: ^3.0.0-non-null-safety&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cache Network&lt;/h2&gt; &#xA;&lt;h3&gt;Simple use&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ExtendedImage.network&lt;/code&gt; as Image Widget&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ExtendedImage.network(&#xA;  url,&#xA;  width: ScreenUtil.instance.setWidth(400),&#xA;  height: ScreenUtil.instance.setWidth(400),&#xA;  fit: BoxFit.fill,&#xA;  cache: true,&#xA;  border: Border.all(color: Colors.red, width: 1.0),&#xA;  shape: boxShape,&#xA;  borderRadius: BorderRadius.all(Radius.circular(30.0)),&#xA;  //cancelToken: cancellationToken,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use ExtendedNetworkImageProvider&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercandies/extended_image_library/raw/master/lib/src/extended_network_image_provider.dart&#34;&gt;ExtendedNetworkImageProvider&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   ExtendedNetworkImageProvider(&#xA;      this.url, {&#xA;      this.scale = 1.0,&#xA;      this.headers,&#xA;      this.cache: false,&#xA;      this.retries = 3,&#xA;      this.timeLimit,&#xA;      this.timeRetry = const Duration(milliseconds: 100),&#xA;      CancellationToken cancelToken,&#xA;    })  : assert(url != null),&#xA;          assert(scale != null),&#xA;          cancelToken = cancelToken ?? CancellationToken();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;url&lt;/td&gt; &#xA;   &lt;td&gt;The URL from which the image will be fetched.&lt;/td&gt; &#xA;   &lt;td&gt;required&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scale&lt;/td&gt; &#xA;   &lt;td&gt;The scale to place in the [ImageInfo] object of the image.&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;headers&lt;/td&gt; &#xA;   &lt;td&gt;The HTTP headers that will be used with [HttpClient.get] to fetch image from network.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cache&lt;/td&gt; &#xA;   &lt;td&gt;whether cache image to local&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;retries&lt;/td&gt; &#xA;   &lt;td&gt;the time to retry to request&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timeLimit&lt;/td&gt; &#xA;   &lt;td&gt;time limit to request image&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timeRetry&lt;/td&gt; &#xA;   &lt;td&gt;the time duration to retry to request&lt;/td&gt; &#xA;   &lt;td&gt;milliseconds: 100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cancelToken&lt;/td&gt; &#xA;   &lt;td&gt;token to cancel network request&lt;/td&gt; &#xA;   &lt;td&gt;CancellationToken()&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;you can create new provider and extends it with ExtendedProvider, and override instantiateImageCodec method. so that you can handle image raw data here (compress image).&lt;/p&gt; &#xA;&lt;h2&gt;Load State&lt;/h2&gt; &#xA;&lt;p&gt;Extended Image provide 3 states(loading,completed,failed), you can define your state widget with loadStateChanged call back.&lt;/p&gt; &#xA;&lt;p&gt;loadStateChanged is not only for network, if your image need long time to load, you can set enableLoadState(default value is true for network and others are false) to true&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/fluttercandies/Flutter_Candies/raw/master/gif/extended_image/custom.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notice:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;if you don&#39;t want to override any state, please return null in this case&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you want to override size or sourceRect, you can override it with ExtendedRawImage at completed state&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;if you want to add something (like animation) at completed state, you can override it with ExtendedImageState.completedWidget&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ExtendedImageState.completedWidget is include gesture or editor, so that you would&#39;t miss them&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// custom load state widget if you want&#xA;    final LoadStateChanged loadStateChanged;&#xA;&#xA;enum LoadState {&#xA;  //loading&#xA;  loading,&#xA;  //completed&#xA;  completed,&#xA;  //failed&#xA;  failed&#xA;}&#xA;&#xA;  ///whether has loading or failed state&#xA;  ///default is false&#xA;  ///but network image is true&#xA;  ///better to set it&#39;s true when your image is big and take some time to ready&#xA;  final bool enableLoadState;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ExtendedImageState(LoadStateChanged call back)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter/method&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;extendedImageInfo&lt;/td&gt; &#xA;   &lt;td&gt;image info&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;extendedImageLoadState&lt;/td&gt; &#xA;   &lt;td&gt;LoadState(loading,completed,failed)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;returnLoadStateChangedWidget&lt;/td&gt; &#xA;   &lt;td&gt;if this is true, return widget which from LoadStateChanged function immediately(width/height/gesture/border/shape etc, will not effect on it)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imageProvider&lt;/td&gt; &#xA;   &lt;td&gt;ImageProvider&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;invertColors&lt;/td&gt; &#xA;   &lt;td&gt;invertColors&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imageStreamKey&lt;/td&gt; &#xA;   &lt;td&gt;key of image&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reLoadImage()&lt;/td&gt; &#xA;   &lt;td&gt;if image load failed,you can reload image by call it&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;completedWidget&lt;/td&gt; &#xA;   &lt;td&gt;return completed widget include gesture or editor&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;loadingProgress&lt;/td&gt; &#xA;   &lt;td&gt;return the loading progress for network image (ImageChunkEvent )&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class ExtendedImageState {&#xA;  void reLoadImage();&#xA;  ImageInfo get extendedImageInfo;&#xA;  LoadState get extendedImageLoadState;&#xA;&#xA;  ///return widget which from LoadStateChanged function immediately&#xA;  bool returnLoadStateChangedWidget;&#xA;&#xA;  ImageProvider get imageProvider;&#xA;&#xA;  bool get invertColors;&#xA;&#xA;  Object get imageStreamKey;&#xA;&#xA;  Widget get completedWidget;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;demo code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ExtendedImage.network(&#xA;  url,&#xA;  width: ScreenUtil.instance.setWidth(600),&#xA;  height: ScreenUtil.instance.setWidth(400),&#xA;  fit: BoxFit.fill,&#xA;  cache: true,&#xA;  loadStateChanged: (ExtendedImageState state) {&#xA;    switch (state.extendedImageLoadState) {&#xA;      case LoadState.loading:&#xA;        _controller.reset();&#xA;        return Image.asset(&#xA;          &#34;assets/loading.gif&#34;,&#xA;          fit: BoxFit.fill,&#xA;        );&#xA;        break;&#xA;&#xA;      ///if you don&#39;t want override completed widget&#xA;      ///please return null or state.completedWidget&#xA;      //return null;&#xA;      //return state.completedWidget;&#xA;      case LoadState.completed:&#xA;        _controller.forward();&#xA;        return FadeTransition(&#xA;          opacity: _controller,&#xA;          child: ExtendedRawImage(&#xA;            image: state.extendedImageInfo?.image,&#xA;            width: ScreenUtil.instance.setWidth(600),&#xA;            height: ScreenUtil.instance.setWidth(400),&#xA;          ),&#xA;        );&#xA;        break;&#xA;      case LoadState.failed:&#xA;        _controller.reset();&#xA;        return GestureDetector(&#xA;          child: Stack(&#xA;            fit: StackFit.expand,&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              Image.asset(&#xA;                &#34;assets/failed.jpg&#34;,&#xA;                fit: BoxFit.fill,&#xA;              ),&#xA;              Positioned(&#xA;                bottom: 0.0,&#xA;                left: 0.0,&#xA;                right: 0.0,&#xA;                child: Text(&#xA;                  &#34;load image failed, click to reload&#34;,&#xA;                  textAlign: TextAlign.center,&#xA;                ),&#xA;              )&#xA;            ],&#xA;          ),&#xA;          onTap: () {&#xA;            state.reLoadImage();&#xA;          },&#xA;        );&#xA;        break;&#xA;    }&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Zoom Pan&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/fluttercandies/Flutter_Candies/raw/master/gif/extended_image/zoom.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mode&lt;/td&gt; &#xA;   &lt;td&gt;image mode (none, gesture, editor)&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initGestureConfigHandler&lt;/td&gt; &#xA;   &lt;td&gt;init GestureConfig when image is ready，for example, base on image width/height&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onDoubleTap&lt;/td&gt; &#xA;   &lt;td&gt;call back of double tap under ExtendedImageMode.gesture&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;extendedImageGestureKey&lt;/td&gt; &#xA;   &lt;td&gt;you can handle zoom/pan by using this key manually&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;GestureConfig&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minScale&lt;/td&gt; &#xA;   &lt;td&gt;min scale&lt;/td&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;animationMinScale&lt;/td&gt; &#xA;   &lt;td&gt;the min scale for zooming then animation back to minScale when scale end&lt;/td&gt; &#xA;   &lt;td&gt;minScale _ 0.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxScale&lt;/td&gt; &#xA;   &lt;td&gt;max scale&lt;/td&gt; &#xA;   &lt;td&gt;5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;animationMaxScale&lt;/td&gt; &#xA;   &lt;td&gt;the max scale for zooming then animation back to maxScale when scale end&lt;/td&gt; &#xA;   &lt;td&gt;maxScale _ 1.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;speed&lt;/td&gt; &#xA;   &lt;td&gt;speed for zoom/pan&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inertialSpeed&lt;/td&gt; &#xA;   &lt;td&gt;inertial speed for zoom/pan&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cacheGesture&lt;/td&gt; &#xA;   &lt;td&gt;save Gesture state (for example in ExtendedImageGesturePageView, gesture state will not change when scroll back),&lt;strong&gt;remember clearGestureDetailsCache at right time&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inPageView&lt;/td&gt; &#xA;   &lt;td&gt;whether in ExtendedImageGesturePageView&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initialAlignment&lt;/td&gt; &#xA;   &lt;td&gt;init image rect with alignment when initialScale &amp;gt; 1.0&lt;/td&gt; &#xA;   &lt;td&gt;InitialAlignment.center&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hitTestBehavior&lt;/td&gt; &#xA;   &lt;td&gt;How to behave during hit tests&lt;/td&gt; &#xA;   &lt;td&gt;HitTestBehavior.deferToChild&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ExtendedImage.network(&#xA;  imageTestUrl,&#xA;  fit: BoxFit.contain,&#xA;  //enableLoadState: false,&#xA;  mode: ExtendedImageMode.gesture,&#xA;  initGestureConfigHandler: (state) {&#xA;    return GestureConfig(&#xA;        minScale: 0.9,&#xA;        animationMinScale: 0.7,&#xA;        maxScale: 3.0,&#xA;        animationMaxScale: 3.5,&#xA;        speed: 1.0,&#xA;        inertialSpeed: 100.0,&#xA;        initialScale: 1.0,&#xA;        inPageView: false,&#xA;        initialAlignment: InitialAlignment.center,&#xA;        );&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;double tap animation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;onDoubleTap: (ExtendedImageGestureState state) {&#xA;  ///you can use define pointerDownPosition as you can,&#xA;  ///default value is double tap pointer down postion.&#xA;  var pointerDownPosition = state.pointerDownPosition;&#xA;  double begin = state.gestureDetails.totalScale;&#xA;  double end;&#xA;&#xA;  //remove old&#xA;  _animation?.removeListener(animationListener);&#xA;&#xA;  //stop pre&#xA;  _animationController.stop();&#xA;&#xA;  //reset to use&#xA;  _animationController.reset();&#xA;&#xA;  if (begin == doubleTapScales[0]) {&#xA;    end = doubleTapScales[1];&#xA;  } else {&#xA;    end = doubleTapScales[0];&#xA;  }&#xA;&#xA;  animationListener = () {&#xA;    //print(_animation.value);&#xA;    state.handleDoubleTap(&#xA;        scale: _animation.value,&#xA;        doubleTapPosition: pointerDownPosition);&#xA;  };&#xA;  _animation = _animationController&#xA;      .drive(Tween&amp;lt;double&amp;gt;(begin: begin, end: end));&#xA;&#xA;  _animation.addListener(animationListener);&#xA;&#xA;  _animationController.forward();&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Editor&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/fluttercandies/Flutter_Candies/raw/master/gif/extended_image/editor.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    ExtendedImage.network(&#xA;      imageTestUrl,&#xA;      fit: BoxFit.contain,&#xA;      mode: ExtendedImageMode.editor,&#xA;      extendedImageEditorKey: editorKey,&#xA;      initEditorConfigHandler: (state) {&#xA;        return EditorConfig(&#xA;            maxScale: 8.0,&#xA;            cropRectPadding: EdgeInsets.all(20.0),&#xA;            hitTestSize: 20.0,&#xA;            cropAspectRatio: _aspectRatio.aspectRatio);&#xA;      },&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mode&lt;/td&gt; &#xA;   &lt;td&gt;image mode (none,gestrue,editor)&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initEditorConfigHandler&lt;/td&gt; &#xA;   &lt;td&gt;init EditorConfig when image is ready.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;extendedImageEditorKey&lt;/td&gt; &#xA;   &lt;td&gt;key of ExtendedImageEditorState to flip/rotate/get crop rect&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;EditorConfig&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maxScale&lt;/td&gt; &#xA;   &lt;td&gt;max scale of zoom&lt;/td&gt; &#xA;   &lt;td&gt;5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropRectPadding&lt;/td&gt; &#xA;   &lt;td&gt;the padding between crop rect and image layout rect.&lt;/td&gt; &#xA;   &lt;td&gt;EdgeInsets.all(20.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cornerSize&lt;/td&gt; &#xA;   &lt;td&gt;size of corner shape (DEPRECATED! Use cornerPainter)&lt;/td&gt; &#xA;   &lt;td&gt;Size(30.0, 5.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cornerColor&lt;/td&gt; &#xA;   &lt;td&gt;color of corner shape (DEPRECATED! Use cornerPainter)&lt;/td&gt; &#xA;   &lt;td&gt;primaryColor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lineColor&lt;/td&gt; &#xA;   &lt;td&gt;color of crop line&lt;/td&gt; &#xA;   &lt;td&gt;scaffoldBackgroundColor.withOpacity(0.7)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lineHeight&lt;/td&gt; &#xA;   &lt;td&gt;height of crop line&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;editorMaskColorHandler&lt;/td&gt; &#xA;   &lt;td&gt;call back of editor mask color base on pointerDown&lt;/td&gt; &#xA;   &lt;td&gt;scaffoldBackgroundColor.withOpacity(pointerDown ? 0.4 : 0.8)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hitTestSize&lt;/td&gt; &#xA;   &lt;td&gt;hit test region of corner and line&lt;/td&gt; &#xA;   &lt;td&gt;20.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;animationDuration&lt;/td&gt; &#xA;   &lt;td&gt;auto center animation duration&lt;/td&gt; &#xA;   &lt;td&gt;Duration(milliseconds: 200)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tickerDuration&lt;/td&gt; &#xA;   &lt;td&gt;duration to begin auto center animation after crop rect is changed&lt;/td&gt; &#xA;   &lt;td&gt;Duration(milliseconds: 400)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropAspectRatio&lt;/td&gt; &#xA;   &lt;td&gt;aspect ratio of crop rect&lt;/td&gt; &#xA;   &lt;td&gt;null(custom)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initialCropAspectRatio&lt;/td&gt; &#xA;   &lt;td&gt;initial aspect ratio of crop rect&lt;/td&gt; &#xA;   &lt;td&gt;null(custom: initial crop rect will fill the entire image)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initCropRectType&lt;/td&gt; &#xA;   &lt;td&gt;init crop rect base on initial image rect or image layout rect&lt;/td&gt; &#xA;   &lt;td&gt;imageRect&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cornerPainter&lt;/td&gt; &#xA;   &lt;td&gt;corner shape&lt;/td&gt; &#xA;   &lt;td&gt;ExtendedImageCropLayerPainterNinetyDegreesCorner()&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hitTestBehavior&lt;/td&gt; &#xA;   &lt;td&gt;How to behave during hit tests&lt;/td&gt; &#xA;   &lt;td&gt;HitTestBehavior.deferToChild&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;crop aspect ratio&lt;/h3&gt; &#xA;&lt;p&gt;it&#39;s a double value, so it&#39;s easy for you to define by yourself. following are official values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class CropAspectRatios {&#xA;  /// no aspect ratio for crop&#xA;  static const double custom = null;&#xA;&#xA;  /// the same as aspect ratio of image&#xA;  /// [cropAspectRatio] is not more than 0.0, it&#39;s original&#xA;  static const double original = 0.0;&#xA;&#xA;  /// ratio of width and height is 1 : 1&#xA;  static const double ratio1_1 = 1.0;&#xA;&#xA;  /// ratio of width and height is 3 : 4&#xA;  static const double ratio3_4 = 3.0 / 4.0;&#xA;&#xA;  /// ratio of width and height is 4 : 3&#xA;  static const double ratio4_3 = 4.0 / 3.0;&#xA;&#xA;  /// ratio of width and height is 9 : 16&#xA;  static const double ratio9_16 = 9.0 / 16.0;&#xA;&#xA;  /// ratio of width and height is 16 : 9&#xA;  static const double ratio16_9 = 16.0 / 9.0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;crop layer painter&lt;/h3&gt; &#xA;&lt;p&gt;you can define your crop layer by override [EditorConfig.editorCropLayerPainter].&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class EditorCropLayerPainter {&#xA;  const EditorCropLayerPainter();&#xA;  void paint(Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {&#xA;    paintMask(canvas, size, painter);&#xA;    paintLines(canvas, size, painter);&#xA;    paintCorners(canvas, size, painter);&#xA;  }&#xA;&#xA;  /// draw crop layer corners&#xA;  void paintCorners(&#xA;      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {&#xA;  }&#xA;&#xA;  /// draw crop layer lines&#xA;  void paintMask(&#xA;      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {&#xA;  }&#xA;  &#xA;&#xA;  /// draw crop layer lines&#xA;  void paintLines(&#xA;      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {&#xA;  } &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;crop,flip,reset&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;add key for ExtendedImageEditorState&lt;/p&gt; &lt;p&gt;&lt;code&gt;final GlobalKey&amp;lt;ExtendedImageEditorState&amp;gt; editorKey =GlobalKey&amp;lt;ExtendedImageEditorState&amp;gt;();&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rotate right&lt;/p&gt; &lt;p&gt;&lt;code&gt;editorKey.currentState.rotate(right: true);&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rotate left&lt;/p&gt; &lt;p&gt;&lt;code&gt;editorKey.currentState.rotate(right: false);&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;flip&lt;/p&gt; &lt;p&gt;&lt;code&gt;editorKey.currentState.flip();&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;reset&lt;/p&gt; &lt;p&gt;&lt;code&gt;editorKey.currentState.reset();&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;crop data&lt;/h3&gt; &#xA;&lt;h4&gt;dart library(stable)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add &lt;a href=&#34;https://github.com/brendan-duncan/image&#34;&gt;Image&lt;/a&gt; library into your pubspec.yaml, it&#39;s used to crop/rotate/flip image data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  image: any&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get crop rect and raw image data from ExtendedImageEditorState&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  ///crop rect base on raw image&#xA;  final Rect cropRect = state.getCropRect();&#xA;&#xA;  var data = state.rawImageData;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;convert raw image data to image library data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  /// it costs much time and blocks ui.&#xA;  //Image src = decodeImage(data);&#xA;&#xA;  /// it will not block ui with using isolate.&#xA;  //Image src = await compute(decodeImage, data);&#xA;  //Image src = await isolateDecodeImage(data);&#xA;  final lb = await loadBalancer;&#xA;  Image src = await lb.run&amp;lt;Image, List&amp;lt;int&amp;gt;&amp;gt;(decodeImage, data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;crop,flip,rotate data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  //clear orientation&#xA;  src = bakeOrientation(src);&#xA;&#xA;  if (editAction.needCrop)&#xA;    src = copyCrop(src, cropRect.left.toInt(), cropRect.top.toInt(),&#xA;        cropRect.width.toInt(), cropRect.height.toInt());&#xA;&#xA;  if (editAction.needFlip) {&#xA;    Flip mode;&#xA;    if (editAction.flipY &amp;amp;&amp;amp; editAction.flipX) {&#xA;      mode = Flip.both;&#xA;    } else if (editAction.flipY) {&#xA;      mode = Flip.horizontal;&#xA;    } else if (editAction.flipX) {&#xA;      mode = Flip.vertical;&#xA;    }&#xA;    src = flip(src, mode);&#xA;  }&#xA;&#xA;  if (editAction.hasRotateAngle) src = copyRotate(src, editAction.rotateAngle);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;convert to original image data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;output is raw image data, you can use it to save or any other thing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  /// you can encode your image&#xA;  ///&#xA;  /// it costs much time and blocks ui.&#xA;  //var fileData = encodeJpg(src);&#xA;&#xA;  /// it will not block ui with using isolate.&#xA;  //var fileData = await compute(encodeJpg, src);&#xA;  //var fileData = await isolateEncodeImage(src);&#xA;  var fileData = await lb.run&amp;lt;List&amp;lt;int&amp;gt;, Image&amp;gt;(encodeJpg, src);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;native library(faster)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add &lt;a href=&#34;https://github.com/fluttercandies/flutter_image_editor&#34;&gt;ImageEditor&lt;/a&gt; library into your pubspec.yaml, it&#39;s used to crop/rotate/flip image data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  image_editor: any&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get crop rect and raw image data from ExtendedImageEditorState&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  ///crop rect base on raw image&#xA;  final Rect cropRect = state.getCropRect();&#xA;&#xA;  var data = state.rawImageData;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;prepare crop option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  final rotateAngle = action.rotateAngle.toInt();&#xA;  final flipHorizontal = action.flipY;&#xA;  final flipVertical = action.flipX;&#xA;  final img = state.rawImageData;&#xA;&#xA;  ImageEditorOption option = ImageEditorOption();&#xA;&#xA;  if (action.needCrop) option.addOption(ClipOption.fromRect(rect));&#xA;&#xA;  if (action.needFlip)&#xA;    option.addOption(&#xA;        FlipOption(horizontal: flipHorizontal, vertical: flipVertical));&#xA;&#xA;  if (action.hasRotateAngle) option.addOption(RotateOption(rotateAngle));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;crop with editImage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;output is raw image data, you can use it to save or any other thing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  final result = await ImageEditor.editImage(&#xA;    image: img,&#xA;    imageEditorOption: option,&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/example/lib/common/utils/crop_editor_helper.dart&#34;&gt;more detail&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Photo View&lt;/h2&gt; &#xA;&lt;p&gt;ExtendedImageGesturePageView is the same as PageView and it&#39;s made for show zoom/pan image.&lt;/p&gt; &#xA;&lt;p&gt;if you have cache the gesture, remember call clearGestureDetailsCache() method at the right time.(for example,page view page is disposed)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/fluttercandies/Flutter_Candies/raw/master/gif/extended_image/photo_view.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ExtendedImageGesturePageView&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cacheGesture&lt;/td&gt; &#xA;   &lt;td&gt;whether should move page&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;GestureConfig&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cacheGesture&lt;/td&gt; &#xA;   &lt;td&gt;save Gesture state (for example in ExtendedImageGesturePageView, gesture state will not change when scroll back),remember clearGestureDetailsCache at right time&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inPageView&lt;/td&gt; &#xA;   &lt;td&gt;whether in ExtendedImageGesturePageView&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ExtendedImageGesturePageView.builder(&#xA;  itemBuilder: (BuildContext context, int index) {&#xA;    var item = widget.pics[index].picUrl;&#xA;    Widget image = ExtendedImage.network(&#xA;      item,&#xA;      fit: BoxFit.contain,&#xA;      mode: ExtendedImageMode.gesture,&#xA;      gestureConfig: GestureConfig(&#xA;        inPageView: true, initialScale: 1.0,&#xA;        //you can cache gesture state even though page view page change.&#xA;        //remember call clearGestureDetailsCache() method at the right time.(for example,this page dispose)&#xA;        cacheGesture: false&#xA;      ),&#xA;    );&#xA;    image = Container(&#xA;      child: image,&#xA;      padding: EdgeInsets.all(5.0),&#xA;    );&#xA;    if (index == currentIndex) {&#xA;      return Hero(&#xA;        tag: item + index.toString(),&#xA;        child: image,&#xA;      );&#xA;    } else {&#xA;      return image;&#xA;    }&#xA;  },&#xA;  itemCount: widget.pics.length,&#xA;  onPageChanged: (int index) {&#xA;    currentIndex = index;&#xA;    rebuild.add(index);&#xA;  },&#xA;  controller: PageController(&#xA;    initialPage: currentIndex,&#xA;  ),&#xA;  scrollDirection: Axis.horizontal,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Slide Out Page&lt;/h2&gt; &#xA;&lt;p&gt;Extended Image support to slide out page as WeChat.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/slide.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;enable slide out page&lt;/h3&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableSlideOutPage&lt;/td&gt; &#xA;   &lt;td&gt;whether enable slide out page&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;heroBuilderForSlidingPage&lt;/td&gt; &#xA;   &lt;td&gt;build Hero only for sliding page, the transform of sliding page must be working on Hero,so that Hero animation wouldn&#39;t be strange when pop page&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;include your page in ExtendedImageSlidePage&lt;/h3&gt; &#xA;&lt;p&gt;take care of onSlidingPage call back, you can update other widgets&#39; state as you want. but, do not setState directly here, image state will changed, you should only notify the widgets which are needed to change&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    return ExtendedImageSlidePage(&#xA;      child: result,&#xA;      slideAxis: SlideAxis.both,&#xA;      slideType: SlideType.onlyImage,&#xA;      onSlidingPage: (state) {&#xA;        ///you can change other widgets&#39; state on page as you want&#xA;        ///base on offset/isSliding etc&#xA;        //var offset= state.offset;&#xA;        var showSwiper = !state.isSliding;&#xA;        if (showSwiper != _showSwiper) {&#xA;          // do not setState directly here, the image state will change,&#xA;          // you should only notify the widgets which are needed to change&#xA;          // setState(() {&#xA;          // _showSwiper = showSwiper;&#xA;          // });&#xA;&#xA;          _showSwiper = showSwiper;&#xA;          rebuildSwiper.add(_showSwiper);&#xA;        }&#xA;      },&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ExtendedImageGesturePage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;child&lt;/td&gt; &#xA;   &lt;td&gt;The [child] contained by the ExtendedImageGesturePage.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slidePageBackgroundHandler&lt;/td&gt; &#xA;   &lt;td&gt;build background when slide page&lt;/td&gt; &#xA;   &lt;td&gt;defaultSlidePageBackgroundHandler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slideScaleHandler&lt;/td&gt; &#xA;   &lt;td&gt;customize scale of page when slide page&lt;/td&gt; &#xA;   &lt;td&gt;defaultSlideScaleHandler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slideEndHandler&lt;/td&gt; &#xA;   &lt;td&gt;call back of slide end,decide whether pop page&lt;/td&gt; &#xA;   &lt;td&gt;defaultSlideEndHandler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slideAxis&lt;/td&gt; &#xA;   &lt;td&gt;axis of slide(both,horizontal,vertical)&lt;/td&gt; &#xA;   &lt;td&gt;SlideAxis.both&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;resetPageDuration&lt;/td&gt; &#xA;   &lt;td&gt;reset page position when slide end(not pop page)&lt;/td&gt; &#xA;   &lt;td&gt;milliseconds: 500&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slideType&lt;/td&gt; &#xA;   &lt;td&gt;slide whole page or only image&lt;/td&gt; &#xA;   &lt;td&gt;SlideType.onlyImage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onSlidingPage&lt;/td&gt; &#xA;   &lt;td&gt;call back when it&#39;s sliding page, change other widgets state on page as you want&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slideOffsetHandler&lt;/td&gt; &#xA;   &lt;td&gt;customize offset when slide page&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Color defaultSlidePageBackgroundHandler(&#xA;    {Offset offset, Size pageSize, Color color, SlideAxis pageGestureAxis}) {&#xA;  double opacity = 0.0;&#xA;  if (pageGestureAxis == SlideAxis.both) {&#xA;    opacity = offset.distance /&#xA;        (Offset(pageSize.width, pageSize.height).distance / 2.0);&#xA;  } else if (pageGestureAxis == SlideAxis.horizontal) {&#xA;    opacity = offset.dx.abs() / (pageSize.width / 2.0);&#xA;  } else if (pageGestureAxis == SlideAxis.vertical) {&#xA;    opacity = offset.dy.abs() / (pageSize.height / 2.0);&#xA;  }&#xA;  return color.withOpacity(min(1.0, max(1.0 - opacity, 0.0)));&#xA;}&#xA;&#xA;bool defaultSlideEndHandler(&#xA;    {Offset offset, Size pageSize, SlideAxis pageGestureAxis}) {&#xA;  if (pageGestureAxis == SlideAxis.both) {&#xA;    return offset.distance &amp;gt;&#xA;        Offset(pageSize.width, pageSize.height).distance / 3.5;&#xA;  } else if (pageGestureAxis == SlideAxis.horizontal) {&#xA;    return offset.dx.abs() &amp;gt; pageSize.width / 3.5;&#xA;  } else if (pageGestureAxis == SlideAxis.vertical) {&#xA;    return offset.dy.abs() &amp;gt; pageSize.height / 3.5;&#xA;  }&#xA;  return true;&#xA;}&#xA;&#xA;double defaultSlideScaleHandler(&#xA;    {Offset offset, Size pageSize, SlideAxis pageGestureAxis}) {&#xA;  double scale = 0.0;&#xA;  if (pageGestureAxis == SlideAxis.both) {&#xA;    scale = offset.distance / Offset(pageSize.width, pageSize.height).distance;&#xA;  } else if (pageGestureAxis == SlideAxis.horizontal) {&#xA;    scale = offset.dx.abs() / (pageSize.width / 2.0);&#xA;  } else if (pageGestureAxis == SlideAxis.vertical) {&#xA;    scale = offset.dy.abs() / (pageSize.height / 2.0);&#xA;  }&#xA;  return max(1.0 - scale, 0.8);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;make sure your page background is transparent&lt;/h3&gt; &#xA;&lt;p&gt;if you use ExtendedImageSlidePage and slideType =SlideType.onlyImage, make sure your page background is transparent&lt;/p&gt; &#xA;&lt;h3&gt;push with transparent page route&lt;/h3&gt; &#xA;&lt;p&gt;you should push page with TransparentMaterialPageRoute/TransparentCupertinoPageRoute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  Navigator.push(&#xA;    context,&#xA;    Platform.isAndroid&#xA;        ? TransparentMaterialPageRoute(builder: (_) =&amp;gt; page)&#xA;        : TransparentCupertinoPageRoute(builder: (_) =&amp;gt; page),&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/example/lib/common/widget/crop_image.dart&#34;&gt;Slide Out Page Demo Code 1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/example/lib/common/widget/pic_swiper.dart&#34;&gt;Slide Out Page Demo Code 2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Border BorderRadius Shape&lt;/h2&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;border&lt;/td&gt; &#xA;   &lt;td&gt;BoxShape.circle and BoxShape.rectangle,If this is [BoxShape.circle] then [borderRadius] is ignored.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;borderRadius&lt;/td&gt; &#xA;   &lt;td&gt;If non-null, the corners of this box are rounded by this [BorderRadius].,Applies only to boxes with rectangular shapes; ignored if [shape] is not [BoxShape.rectangle].&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shape&lt;/td&gt; &#xA;   &lt;td&gt;BoxShape.circle and BoxShape.rectangle,If this is [BoxShape.circle] then [borderRadius] is ignored.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ExtendedImage.network(&#xA;  url,&#xA;  width: ScreenUtil.instance.setWidth(400),&#xA;  height: ScreenUtil.instance.setWidth(400),&#xA;  fit: BoxFit.fill,&#xA;  cache: true,&#xA;  border: Border.all(color: Colors.red, width: 1.0),&#xA;  shape: boxShape,&#xA;  borderRadius: BorderRadius.all(Radius.circular(30.0)),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/image.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Clear Save&lt;/h2&gt; &#xA;&lt;h3&gt;clear&lt;/h3&gt; &#xA;&lt;p&gt;to clear disk cached , call clearDiskCachedImages method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Clear the disk cache directory then return if it succeed.&#xA;///  &amp;lt;param name=&#34;duration&#34;&amp;gt;timespan to compute whether file has expired or not&amp;lt;/param&amp;gt;&#xA;Future&amp;lt;bool&amp;gt; clearDiskCachedImages({Duration duration})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to clear disk cached with specific url, call clearDiskCachedImage method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// clear the disk cache image then return if it succeed.&#xA;///  &amp;lt;param name=&#34;url&#34;&amp;gt;clear specific one&amp;lt;/param&amp;gt;&#xA;Future&amp;lt;bool&amp;gt; clearDiskCachedImage(String url) async {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;get the local cached image file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;File&amp;gt; getCachedImageFile(String url) async {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to clear memory cache , call clearMemoryImageCache method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;///clear all of image in memory&#xA; clearMemoryImageCache();&#xA;&#xA;/// get ImageCache&#xA; getMemoryImageCache() ;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;save network&lt;/h3&gt; &#xA;&lt;p&gt;call saveNetworkImageToPhoto and save image with &lt;a href=&#34;https://github.com/cnhefang/image_picker_saver&#34;&gt;image_picker_saver&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;///save network image to photo&#xA;Future&amp;lt;bool&amp;gt; saveNetworkImageToPhoto(String url, {bool useCache: true}) async {&#xA;  var data = await getNetworkImageData(url, useCache: useCache);&#xA;  var filePath = await ImagePickerSaver.saveFile(fileData: data);&#xA;  return filePath != null &amp;amp;&amp;amp; filePath != &#34;&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show Crop Image&lt;/h2&gt; &#xA;&lt;p&gt;get your raw image by [Load State](#Load State), and crop image by sourceRect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/lib/src/image/extended_raw_image.dart&#34;&gt;ExtendedRawImage&lt;/a&gt; sourceRect is which you want to show image rect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/crop.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ExtendedRawImage(&#xA;  image: image,&#xA;  width: num400,&#xA;  height: num300,&#xA;  fit: BoxFit.fill,&#xA;  sourceRect: Rect.fromLTWH(&#xA;      (image.width - width) / 2.0, 0.0, width, image.height.toDouble()),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Paint&lt;/h2&gt; &#xA;&lt;p&gt;provide BeforePaintImage and AfterPaintImage callback, you will have the chance to paint things you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/paint.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beforePaintImage&lt;/td&gt; &#xA;   &lt;td&gt;you can paint anything if you want before paint image.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;afterPaintImage&lt;/td&gt; &#xA;   &lt;td&gt;you can paint anything if you want after paint image.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  ExtendedImage.network(&#xA;    url,&#xA;    width: ScreenUtil.instance.setWidth(400),&#xA;    height: ScreenUtil.instance.setWidth(400),&#xA;    fit: BoxFit.fill,&#xA;    cache: true,&#xA;    beforePaintImage: (Canvas canvas, Rect rect, ui.Image image) {&#xA;      if (paintType == PaintType.ClipHeart) {&#xA;        if (!rect.isEmpty) {&#xA;          canvas.save();&#xA;          canvas.clipPath(clipheart(rect, canvas));&#xA;        }&#xA;      }&#xA;      return false;&#xA;    },&#xA;    afterPaintImage: (Canvas canvas, Rect rect, ui.Image image) {&#xA;      if (paintType == PaintType.ClipHeart) {&#xA;        if (!rect.isEmpty) canvas.restore();&#xA;      } else if (paintType == PaintType.PaintHeart) {&#xA;        canvas.drawPath(&#xA;            clipheart(rect, canvas),&#xA;            Paint()&#xA;              ..colorFilter =&#xA;                  ColorFilter.mode(Color(0x55ea5504), BlendMode.srcIn)&#xA;              ..isAntiAlias = false&#xA;              ..filterQuality = FilterQuality.low);&#xA;      }&#xA;    },&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/example/lib/pages/simple/paint_image_demo.dart&#34;&gt;paint image demo&lt;/a&gt; and &lt;a href=&#34;https://github.com/fluttercandies/extended_image/raw/master/example/lib/common/widget/push_to_refresh_header.dart&#34;&gt;push to refresh header which is used in crop image demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notch&lt;/h2&gt; &#xA;&lt;p&gt;By setting layoutInsets, you can ensure the image is positioned outside of obstructing elements such as the phone notch or home indicator if displayed in full screen. This will still allow the image margin to show underneath the notch if zoomed in.&lt;/p&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;layoutInsets&lt;/td&gt; &#xA;   &lt;td&gt;Amount to inset from the edge during image layout&lt;/td&gt; &#xA;   &lt;td&gt;EdgeInsets.zero&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  ExtendedImage.network(&#xA;    url,&#xA;    fit: BoxFit.contain,&#xA;    layoutInsets: MediaQuery.of(context).padding&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MemoryUsage&lt;/h2&gt; &#xA;&lt;p&gt;You can reduce memory usage with following settings now.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ExtendedResizeImage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[ExtendedResizeImage.compressionRatio]&lt;/td&gt; &#xA;   &lt;td&gt;The image&lt;code&gt;s size will resize to original * [compressionRatio].It&#39;s ExtendedResizeImage&lt;/code&gt;s first pick.The compressionRatio`s range is from 0.0 (exclusive), to 1.0 (exclusive).&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[ExtendedResizeImage.maxBytes]&lt;/td&gt; &#xA;   &lt;td&gt;[ExtendedResizeImage] will compress the image to a size that is smaller than [maxBytes]. The default size is 50KB. It&#39;s actual bytes of Image, not decode bytes&lt;/td&gt; &#xA;   &lt;td&gt;50 &amp;lt;&amp;lt; 10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[ExtendedResizeImage.width]/[ExtendedResizeImage.height]&lt;/td&gt; &#xA;   &lt;td&gt;The width/height the image should decode to and cache. It&#39;s same as [ResizeImage],&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    ExtendedImage.network(&#xA;      &#39;imageUrl&#39;,  &#xA;      compressionRatio: 0.1,&#xA;      maxBytes: null,&#xA;      cacheWidth: null,&#xA;      cacheHeight: null,  &#xA;    )&#xA;&#xA;    ExtendedImage(&#xA;      image: ExtendedResizeImage(&#xA;        ExtendedNetworkImageProvider(&#xA;          &#39;imageUrl&#39;,  &#xA;        ),&#xA;        compressionRatio: 0.1,&#xA;        maxBytes: null,&#xA;        width: null,&#xA;        height: null,&#xA;      ),&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clearMemoryCacheWhenDispose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clearMemoryCacheWhenDispose&lt;/td&gt; &#xA;   &lt;td&gt;It&#39;s not good enough after Flutter 2.0, it seems that we can&#39;t release memory usage if this image is not completed(&lt;a href=&#34;https://github.com/fluttercandies/extended_image/issues/317&#34;&gt;https://github.com/fluttercandies/extended_image/issues/317&lt;/a&gt;). It will release memory usage only for completed image now.&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   ExtendedImage.network(&#xA;     &#39;imageUrl&#39;,     &#xA;     clearMemoryCacheWhenDispose: true,&#xA;   )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;imageCacheName&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;imageCacheName&lt;/td&gt; &#xA;   &lt;td&gt;The name of [ImageCache], you can define custom [ImageCache] to store this image. In this way you can work with them without affecting other [ImageCache]&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   ExtendedImage.network(&#xA;     &#39;imageUrl&#39;,  &#xA;     imageCacheName: &#39;MemoryUsage&#39;,&#xA;   )&#xA;     &#xA;  /// clear when this page is disposed   &#xA;  @override&#xA;  void dispose() {&#xA;    // clear ImageCache which named &#39;MemoryUsage&#39;&#xA;    clearMemoryImageCache(imageCacheName);&#xA;    super.dispose();&#xA;  }   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other APIs&lt;/h2&gt; &#xA;&lt;p&gt;ExtendedImage&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameter&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableMemoryCache&lt;/td&gt; &#xA;   &lt;td&gt;whether cache in PaintingBinding.instance.imageCache)&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clearMemoryCacheIfFailed&lt;/td&gt; &#xA;   &lt;td&gt;when failed to load image, whether clear memory cache.if true, image will reload in next time.&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clearMemoryCacheWhenDispose&lt;/td&gt; &#xA;   &lt;td&gt;when image is removed from the tree permanently, whether clear memory cache.&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>