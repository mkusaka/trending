<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-27T01:25:30Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bugsnag/bugsnag-flutter-dart-io-http-client</title>
    <updated>2024-04-27T01:25:30Z</updated>
    <id>tag:github.com,2024-04-27:/bugsnag/bugsnag-flutter-dart-io-http-client</id>
    <link href="https://github.com/bugsnag/bugsnag-flutter-dart-io-http-client" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A wrapper for Dart&#39;s IO package for BugSnag SDKs.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.bugsnag.com/platforms/flutter&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://assets.smartbear.com/m/3dab7e6cf880aa2b/original/BugSnag-Repository-Header-Dark.svg&#34;&gt; &#xA;   &lt;img alt=&#34;SmartBear BugSnag logo&#34; src=&#34;https://assets.smartbear.com/m/3945e02cdc983893/original/BugSnag-Repository-Header-Light.svg?sanitize=true&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;BugSnag Flutter Dart:io Http Client Wrapper&lt;/h1&gt; &#xA;&lt;p&gt;A wrapper for &lt;a href=&#34;https://api.dart.dev/stable/3.3.1/dart-io/dart-io-library.html&#34;&gt;Dart:io HTTP&lt;/a&gt; that enables automated instrumentation via the BugSnag Performance SDK and Error Monitoring SDK. This package simplifies the process of tracking and monitoring HTTP requests in your Dart applications.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automated Request Instrumentation&lt;/strong&gt;: Automatically creates network spans for HTTP requests and sends them to the BugSnag Performance dashboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;BugsnagHttpClient&lt;/code&gt; wrapper in your Dart project, first add the dependency to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  bugsnag_flutter_dart_io_http_client: ^1.0.0 # Use the latest version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run pub get in your terminal to fetch the package.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a simple example of using BugSnagHttpClient:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;// Import the wrapper&#xA;import &#39;package:bugsnag_flutter_dart_io_http_client/bugsnag_flutter_dart_io_http_client.dart&#39; as dart_io;&#xA;&#xA;&#xA;// add Bugsnag Performance as a subscriber. This only needs to be done once in your apps lifecycle.&#xA;dart_io.addSubscriber(BugsnagPerformance.networkInstrumentation);&#xA;&#xA;&#xA;// Make a request &#xA;final client = dart_io.BugsnagHttpClient();&#xA;HttpClientRequest request = await client.getUrl(FixtureConfig.MAZE_HOST);&#xA;await request.close();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.bugsnag.com/performance/flutter/&#34;&gt;Read the integration guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bugsnag/bugsnag-flutter-dart-io-http-client/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue&#34;&gt;Search open and closed issues&lt;/a&gt; for similar problems&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bugsnag/bugsnag-flutter-dart-io-http-client/issues/new&#34;&gt;Report a bug or request a feature&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The BugSnag Flutter Performance SDK is free software released under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/bugsnag/bugsnag-flutter-dart-io-http-client/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bpillon/google_maps_cluster_manager</title>
    <updated>2024-04-27T01:25:30Z</updated>
    <id>tag:github.com,2024-04-27:/bpillon/google_maps_cluster_manager</id>
    <link href="https://github.com/bpillon/google_maps_cluster_manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Flutter clustering library for Google Maps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/google_maps_cluster_manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/google_maps_cluster_manager.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Flutter Cluster Manager for Google Maps&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bpillon/google_maps_cluster_manager/master/example/example.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter package to cluster items on a &lt;a href=&#34;https://pub.dev/packages/google_maps_flutter&#34;&gt;Google Maps&lt;/a&gt; widget based on Geohash. Highly inspired by &lt;a href=&#34;https://pub.dev/packages/clustering_google_maps&#34;&gt;clustering_google_maps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this package, add &lt;code&gt;google_maps_cluster_manager&lt;/code&gt; as a &lt;a href=&#34;https://flutter.io/platform-plugins/&#34;&gt;dependency in your pubspec.yaml file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Your map items has to use &lt;code&gt;ClusterItem&lt;/code&gt; as a mixin (or extends this class) and implements the &lt;code&gt;LatLng location&lt;/code&gt; getter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Place with ClusterItem {&#xA;  final String name;&#xA;  final LatLng latLng;&#xA;&#xA;  Place({required this.name, required this.latLng});&#xA;&#xA;  @override&#xA;  LatLng get location =&amp;gt; latLng;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start with Cluster Manager, you have to initialize a &lt;code&gt;ClusterManager&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ClusterManager&amp;lt;Place&amp;gt;(&#xA;    _items, // Your items to be clustered on the map (of Place type for this example)&#xA;    _updateMarkers, // Method to be called when markers are updated&#xA;    markerBuilder: _markerBuilder, // Optional : Method to implement if you want to customize markers&#xA;    levels: [1, 4.25, 6.75, 8.25, 11.5, 14.5, 16.0, 16.5, 20.0], // Optional : Configure this if you want to change zoom levels at which the clustering precision change&#xA;    extraPercent: 0.2, // Optional : This number represents the percentage (0.2 for 20%) of latitude and longitude (in each direction) to be considered on top of the visible map bounds to render clusters. This way, clusters don&#39;t &#34;pop out&#34; when you cross the map.&#xA;    stopClusteringZoom: 17.0 // Optional : The zoom level to stop clustering, so it&#39;s only rendering single item &#34;clusters&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When your &lt;code&gt;GoogleMapController&lt;/code&gt; is created, you have to set the &lt;code&gt;mapId&lt;/code&gt; with the &lt;code&gt;setMapId&lt;/code&gt; method :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_manager.setMapId(controller.mapId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are able to add an new item to the map by calling &lt;code&gt;addItem&lt;/code&gt; method on your &lt;code&gt;ClusterManager&lt;/code&gt; instance. You can also completely change the items on your maps by calling &lt;code&gt;setItems&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the icon of a cluster by using &lt;code&gt;Future&amp;lt;Marker&amp;gt; Function(Cluster&amp;lt;T extends ClusterItem&amp;gt;) markerBuilder&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;static Future&amp;lt;Marker&amp;gt; Function(Cluster) get markerBuilder =&amp;gt; (cluster) async {&#xA;  return Marker(&#xA;    markerId: MarkerId(cluster.getId()),&#xA;    position: cluster.location,&#xA;    onTap: () {&#xA;        print(cluster.items);&#xA;    },&#xA;    icon: await getClusterBitmap(cluster.isMultiple ? 125 : 75,&#xA;    text: cluster.isMultiple? cluster.count.toString() : null),&#xA;  );&#xA;};&#xA;&#xA;static Future&amp;lt;BitmapDescriptor&amp;gt; getClusterBitmap(int size, {String text?}) async {&#xA;  final PictureRecorder pictureRecorder = PictureRecorder();&#xA;  final Canvas canvas = Canvas(pictureRecorder);&#xA;  final Paint paint1 = Paint()..color = Colors.red;&#xA;&#xA;  canvas.drawCircle(Offset(size / 2, size / 2), size / 2.0, paint1);&#xA;&#xA;  if (text != null) {&#xA;    TextPainter painter = TextPainter(textDirection: TextDirection.ltr);&#xA;    painter.text = TextSpan(&#xA;    text: text,&#xA;    style: TextStyle(&#xA;        fontSize: size / 3,&#xA;        color: Colors.white,&#xA;        fontWeight: FontWeight.normal),&#xA;    );&#xA;    painter.layout();&#xA;    painter.paint(&#xA;      canvas,&#xA;      Offset(size / 2 - painter.width / 2, size / 2 - painter.height / 2),&#xA;    );&#xA;  }&#xA;&#xA;  final img = await pictureRecorder.endRecording().toImage(size, size);&#xA;  final data = await img.toByteData(format: ImageByteFormat.png);&#xA;&#xA;  return BitmapDescriptor.fromBytes(data.buffer.asUint8List());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every cluster (even one item clusters) is rendered by the library as a &lt;code&gt;Cluster&amp;lt;T extends ClusterItem&amp;gt;&lt;/code&gt; object. You can differentiate single item clusters from multiple ones by using the &lt;code&gt;isMultiple&lt;/code&gt; variable (or the &lt;code&gt;count&lt;/code&gt; variable). This way, you can create different markers icon depending on the type of cluster.&lt;/p&gt; &#xA;&lt;p&gt;You can create multiple managers for a single map, see the &lt;code&gt;multiple.dart&lt;/code&gt; example.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Basic Example&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;example&lt;/code&gt; directory for a complete sample app.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jankuss/genq</title>
    <updated>2024-04-27T01:25:30Z</updated>
    <id>tag:github.com,2024-04-27:/jankuss/genq</id>
    <link href="https://github.com/jankuss/genq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Instant Data Class Generation for Dart&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;genq: Instant Data Class Generation for Dart&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jankuss/genq/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/jankuss/genq/actions/workflows/go.yml/badge.svg?branch=main&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/genq&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/genq.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jankuss/genq/main/docs/logo.png&#34; alt=&#34;logo&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;With dart, creating data classes can be tedious. You have the choice between:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Writing them by hand, which is error-prone and time-consuming.&lt;/li&gt; &#xA; &lt;li&gt;Using code generation tools like &lt;code&gt;build_runner&lt;/code&gt; with &lt;code&gt;freezed&lt;/code&gt;, which become slow for large projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;genq cuts through the wait and generates data classes for your Dart projects in milliseconds, not minutes. ⚡️&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;strong&gt;freezed&lt;/strong&gt;, genq offers a familiar syntax for defining data classes, but with a focus on &lt;strong&gt;lightning-fast performance&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/jankuss/genq/main/docs/comparison.png&#34; alt=&#34;logo&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;The above image shows the difference in performance between &lt;code&gt;build_runner&lt;/code&gt; and &lt;code&gt;genq&lt;/code&gt; for generating 2500 data classes. See more details in the &lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#benchmarks&#34;&gt;benchmarks&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h1&gt;Index&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#index&#34;&gt;Index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#1-install&#34;&gt;1. Install&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#2-add-genq-to-your-project&#34;&gt;2. Add &lt;code&gt;genq&lt;/code&gt; to your project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#3-define-your-data-classes&#34;&gt;3. Define your data classes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#4-generate-the-code&#34;&gt;4. Generate the code&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#defining-data-classes&#34;&gt;Defining Data Classes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#json-serializationdeserialization&#34;&gt;JSON Serialization/Deserialization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#customize-json-serialization&#34;&gt;Customize JSON Serialization&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#custom-fromjson-and-tojson-functions&#34;&gt;Custom fromJson and toJson functions&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#unknowns-enum-values&#34;&gt;Unknowns enum values&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#enums&#34;&gt;Enums&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#how&#34;&gt;How?&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#notes-on-the-subset-parser&#34;&gt;Notes on the subset parser&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#when-should-i-use-genq-over-build_runner&#34;&gt;When should I use &lt;code&gt;genq&lt;/code&gt; over &lt;code&gt;build_runner&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#future-plans&#34;&gt;Future Plans&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;build_runner&lt;/code&gt; + &lt;code&gt;freezed&lt;/code&gt; 🐌&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;genq&lt;/code&gt; 🚀&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jankuss/genq/main/docs/freezed.png&#34; alt=&#34;build_runner&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jankuss/genq/main/docs/genq.png&#34; alt=&#34;genq&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In this benchmark (located in &lt;code&gt;./benchmarks&lt;/code&gt;), &lt;em&gt;count&lt;/em&gt; is the number of files in the benchmark, containing 250 annotated classes each. So for example, &lt;em&gt;count=1&lt;/em&gt; means 250 classes, &lt;em&gt;count=2&lt;/em&gt; means 500 classes, and so on. For count 10, &lt;code&gt;build_runner&lt;/code&gt; and &lt;code&gt;freezed&lt;/code&gt; took around 14.9 seconds, while &lt;code&gt;genq&lt;/code&gt; took 0.11 seconds. &lt;strong&gt;This is a &amp;gt;100x speedup!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Never trust a benchmark you didn&#39;t falsify yourself.&lt;/li&gt; &#xA; &lt;li&gt;genq is optimized to perform one task and one task only - data class generation, whereas build_runner is built to do a lot more. Take this into account when choosing between the two.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;1. Install&lt;/h3&gt; &#xA;&lt;p&gt;Install genq via brew using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install jankuss/genq/genq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download the latest release from the &lt;a href=&#34;https://github.com/jankuss/genq/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2. Add &lt;code&gt;genq&lt;/code&gt; to your project&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  # ... Other dependencies ...&#xA;  genq: ^0.3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Define your data classes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;;&#xA;&#xA;part &#39;user.genq.dart&#39;;&#xA;&#xA;@genq&#xA;class User with _$User {&#xA;  factory User({&#xA;    required String name,&#xA;    required int age,&#xA;  }) = _User;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about defining your data classes &lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#defining-data-classes&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;4. Generate the code&lt;/h3&gt; &#xA;&lt;p&gt;Run the genq command in your project directory, and you will have your desired data classes generated in no time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;genq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Defining Data Classes&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;To define a data class, you need to annotate the class with &lt;code&gt;@genq&lt;/code&gt; and provide a factory constructor with named parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;; // &amp;lt;- Import genq&#xA;&#xA;part &#39;user.genq.dart&#39;; // &amp;lt;- Add a part directive to the generated file&#xA;&#xA;@genq // &amp;lt;- Annotate the class with @genq&#xA;class User with _$User { // &amp;lt;- Add the mixin _$&amp;lt;ClassName&amp;gt;&#xA;  factory User({ // &amp;lt;- Define a factory constructor&#xA;    required String name, // &amp;lt;- Define fields as named parameters&#xA;    required int age,&#xA;  }) = _User; // &amp;lt;- Redirecting constructor, _&amp;lt;ClassName&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated class will have the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;copyWith&lt;/code&gt;: Create a copy of the data class with modified fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toString&lt;/code&gt;: Generate a human-readable string representation of the data class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;==&lt;/code&gt;: Compare two data classes for equality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;JSON Serialization/Deserialization&lt;/h2&gt; &#xA;&lt;p&gt;To generate JSON serialization/deserialization code, you need to use the &lt;code&gt;@Genq(json: true)&lt;/code&gt; annotation instead of &lt;code&gt;@genq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;;&#xA;&#xA;part &#39;user.genq.dart&#39;;&#xA;&#xA;@Genq(json: true)&#xA;class User with _$User {&#xA;  factory User({&#xA;    @JsonKey(name: &#39;full_name&#39;)&#xA;    required String name,&#xA;    required int age,&#xA;  }) = _User;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate two public functions, which you can use to serialize/deserialize the data class to/from JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;$UserFromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; /* ... */;&#xA;$UserToJson(User value) =&amp;gt; /* ... */;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize JSON Serialization&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the generated JSON serialization/deserialization code for fields using the &lt;code&gt;@JsonKey&lt;/code&gt; annotation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;;&#xA;&#xA;part &#39;user.genq.dart&#39;;&#xA;&#xA;@Genq(json: true)&#xA;class User with _$User {&#xA;  factory User({&#xA;    // Customizing the JSON key for the field &#39;name&#39;. When deserializing, the value of &#39;full_name&#39; will be assigned to the &#39;name&#39; field.&#xA;    @JsonKey(name: &#39;full_name&#39;)&#xA;    required String name,&#xA;    // Providing a default value for the field &#39;age&#39;. If the field is not present in the JSON, the default value will be used.&#xA;    @JsonKey(defaultValue: 99)&#xA;    required int age,&#xA;  }) = _User;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom fromJson and toJson functions&lt;/h4&gt; &#xA;&lt;p&gt;You can also provide custom &lt;code&gt;fromJson&lt;/code&gt; and &lt;code&gt;toJson&lt;/code&gt; functions for a field using the &lt;code&gt;fromJson&lt;/code&gt; and &lt;code&gt;toJson&lt;/code&gt; parameters of the &lt;code&gt;@JsonKey&lt;/code&gt; annotation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;;&#xA;&#xA;part &#39;user.genq.dart&#39;;&#xA;&#xA;class UserName {&#xA;  final String value;&#xA;&#xA;  UserName(this.value);&#xA;&#xA;  static UserName fromJson(String value) {&#xA;    return UserName(value);&#xA;  }&#xA;&#xA;  static String toJson(Custom value) {&#xA;    return value.value;&#xA;  }&#xA;}&#xA;&#xA;@Genq(json: true)&#xA;class User with _$User {&#xA;  factory User({&#xA;    @JsonKey(&#xA;      fromJson: UserName.fromJson,&#xA;      toJson: UserName.toJson,&#xA;    )&#xA;    required UserName name,&#xA;    required int age,&#xA;  }) = _User;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unknowns enum values&lt;/h4&gt; &#xA;&lt;p&gt;You can provide a value for unknown enum values using the &lt;code&gt;unknownEnumValue&lt;/code&gt; parameter of the &lt;code&gt;@JsonKey&lt;/code&gt; annotation. When deserializing and encountering an unknown value, the &lt;code&gt;unknownEnumValue&lt;/code&gt; will be used instead of throwing an exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;;&#xA;&#xA;part &#39;user.genq.dart&#39;;&#xA;&#xA;@GenqJsonEnum()&#xA;enum Role {&#xA;  admin,&#xA;  user,&#xA;  unknown,&#xA;}&#xA;&#xA;@Genq(json: true)&#xA;class User with _$User {&#xA;  factory User({&#xA;    @JsonKey(unknownEnumValue: Role.unknown)&#xA;    required Role role,&#xA;  }) = _User;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enums&lt;/h3&gt; &#xA;&lt;p&gt;Enums are also supported for JSON serialization/deserialization. They need to be annotated with &lt;code&gt;@GenqJsonEnum&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:genq/genq.dart&#39;;&#xA;&#xA;part &#39;user.genq.dart&#39;;&#xA;&#xA;@GenqJsonEnum()&#xA;enum Role {&#xA;  // You can annotate the enum values with @JsonValue to customize the JSON serialization/deserialization.&#xA;  // For example, the string &#39;ADMIN&#39; will get deserialized to the Role.admin value and vice versa.&#xA;  // If you don&#39;t provide a value for @JsonValue, the enum key is used.&#xA;  @JsonValue(&#39;ADMIN&#39;)&#xA;  admin,&#xA;  @JsonValue(&#39;USER&#39;)&#xA;  user,&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similary to the @Genq(json: true) annotation, this will generate two public functions, which you can use to serialize/deserialize the enum to/from JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;$RoleFromJson(Object json) =&amp;gt; /* ... */;&#xA;$RoleToJson(Role value) =&amp;gt; /* ... */;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;p&gt;The fundamental idea behind the JSON codegen for it to be fast and efficient is to &lt;strong&gt;publicly&lt;/strong&gt; expose the generated functions. Based on this, genq can assume for a type &lt;code&gt;T&lt;/code&gt; that the functions &lt;code&gt;$TFromJson&lt;/code&gt; and &lt;code&gt;$TToJson&lt;/code&gt; are available, thus avoiding unnecessary traversal of other files.&lt;/p&gt; &#xA;&lt;h2&gt;How?&lt;/h2&gt; &#xA;&lt;p&gt;genq uses its own subset parser of the dart language and generates code directly from the parsed AST. This allows genq to generate code much faster than &lt;code&gt;build_runner&lt;/code&gt;, which uses the &lt;code&gt;analyzer&lt;/code&gt; package. Code generation is also done in parallel for each file, which further speeds up the process.&lt;/p&gt; &#xA;&lt;h3&gt;Notes on the subset parser&lt;/h3&gt; &#xA;&lt;p&gt;The subset parser is written for the specific structures of data classes as defined &lt;a href=&#34;https://raw.githubusercontent.com/jankuss/genq/main/#defining-data-classes&#34;&gt;here&lt;/a&gt;. Thus, there may be parsing errors if the code does not follow the expected structure. While the parser is generally robust when encountering unparsable code, there may be cases where it fails to parse the code correctly. If you encounter such a case, please open an &lt;a href=&#34;https://github.com/jankuss/genq/issues/new&#34;&gt;issue&lt;/a&gt; with the code that caused the error.&lt;/p&gt; &#xA;&lt;h2&gt;When should I use &lt;code&gt;genq&lt;/code&gt; over &lt;code&gt;build_runner&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;One great thing: you don&#39;t have to choose! You can use both in your project. A good guidline would be: Use &lt;code&gt;genq&lt;/code&gt; for data class generation in your day-to-day development, and &lt;code&gt;build_runner&lt;/code&gt; for more complex code generation tasks.&lt;/p&gt; &#xA;&lt;p&gt;If your project is sufficiently small, you might not even need &lt;code&gt;genq&lt;/code&gt;. However, if you find yourself or your team spending a lot of time waiting for &lt;code&gt;build_runner&lt;/code&gt; to generate code, &lt;code&gt;genq&lt;/code&gt; might be a good alternative.&lt;/p&gt; &#xA;&lt;h2&gt;Future Plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Editor support (VSCode, IntelliJ)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extensibility&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>