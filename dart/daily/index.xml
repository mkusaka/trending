<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-13T01:36:37Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>susatthi/github-search</title>
    <updated>2023-06-13T01:36:37Z</updated>
    <id>tag:github.com,2023-06-13:/susatthi/github-search</id>
    <link href="https://github.com/susatthi/github-search" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub API を利用して GitHub のリポジトリを検索するアプリです。株式会社ゆめみのFlutterエンジニアコードチェックの要件を満たすよう実装しています。&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/susatthi/github-search/actions/workflows/flutter_ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/susatthi/github-search/actions/workflows/flutter_ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;Flutter CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/susatthi/github-search&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/susatthi/github-search/branch/develop/graph/badge.svg?token=C48OG86U8O&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-purple&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt; &lt;img width=&#34;100%&#34; src=&#34;https://user-images.githubusercontent.com/13707135/165474118-d7a43467-7e8e-4dc7-9aed-2e1dd1456ea6.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;GitHub Search&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;span&gt;⚠&lt;/span&gt; 制限事項&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;現在 Web 版がビルドできません。Isar 3.0.2 が Web をサポートしなくなったためです。詳細は &lt;a href=&#34;https://github.com/isar/isar/issues/686&#34;&gt;Issue&lt;/a&gt; をご参照ください。&lt;/li&gt; &#xA;  &lt;li&gt;現在テストが通りません。ディレクトリ構造を変更したことにテストが追従できていません。対応中です。&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.github.com/ja/rest&#34;&gt;GitHub API&lt;/a&gt; を利用して GitHub のリポジトリを検索するアプリです。&lt;a href=&#34;https://github.com/yumemi-inc/flutter-engineer-codecheck&#34;&gt;株式会社ゆめみのFlutterエンジニアコードチェック&lt;/a&gt;の要件を満たすよう実装しています。&lt;/p&gt; &#xA;&lt;p&gt;本アプリを通して自分なりの最適なアーキテクチャを確立し、リファレンスコードにすることを目的にしています。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;span&gt;⚠&lt;/span&gt; 注意&lt;/strong&gt;&lt;br&gt; このアプリは &lt;code&gt;GitHub API&lt;/code&gt; を利用するために GitHub の &lt;code&gt;アクセストークン&lt;/code&gt; をアプリの内部でハードコーディングして保持する構成になっています。このアプリを公開すると悪意のある者に &lt;code&gt;アクセストークン&lt;/code&gt; を抜き取られ悪用される恐れがありますのでお控え下さい。もちろん、手元でビルドして動かすことは問題ありません。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;一覧(Light)&lt;/th&gt; &#xA;   &lt;th&gt;一覧(Dark)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183786156-c6506906-9eb1-419f-8466-fdbe907934f7.png&#34; alt=&#34;index-light&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183786212-11334663-f095-4a22-a98a-13a4b5dde6c1.png&#34; alt=&#34;index-dark&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;デスクトップ&lt;/th&gt; &#xA;   &lt;th&gt;タブレット&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183787423-b404c9d3-e1e6-4c57-bd96-4e4c5c06703a.png&#34; alt=&#34;desktop&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183787582-86eabebc-7d99-4961-ad6c-70c75f299725.png&#34; alt=&#34;tablet&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;詳細&lt;/th&gt; &#xA;   &lt;th&gt;0件&lt;/th&gt; &#xA;   &lt;th&gt;エラー&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183786405-5f925803-83ad-4066-a01e-f903d2b45148.png&#34; alt=&#34;view&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183786643-bca0977e-f6e6-4a8c-a651-2a150163de07.png&#34; alt=&#34;empty&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/183786950-221a389c-8613-4b1d-8755-726f9b71654f.png&#34; alt=&#34;error&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/172117146-22d5f5b2-5e90-4d09-8060-8c1976b2b42a.gif&#34; alt=&#34;github_search_0_9_0_demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ビルド方法&lt;/h2&gt; &#xA;&lt;h4&gt;ソースコードを clone&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/susatthi/github-search.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GitHub の個人アクセストークンを取得&lt;/h4&gt; &#xA;&lt;p&gt;本アプリで使用する GitHub の&lt;a href=&#34;https://docs.github.com/ja/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;個人アクセストークン&lt;/a&gt;を取得して、カレントディレクトリで次のコマンドを実行してください。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 引数で与えられた環境変数を基にビルドに必要な `lib/util/env/env.dart` を作成してくれます。&#xA;# 作成された `lib/util/env/env.dart` を直接編集しても大丈夫です。&#xA;&#xA;bin/flutter_env -g [GitHub 個人アクセストークン] -s [検索文字列の初期値]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;パラメータ&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;説明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-g&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Must&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;値には &lt;a href=&#34;https://docs.github.com/ja/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;GitHub 個人アクセストークン&lt;/a&gt; を設定してください。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Optional&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;値には好きな文字列を設定してください。指定しない場合は空文字が設定されます。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ヘルプを表示します。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;ビルド&lt;/h4&gt; &#xA;&lt;p&gt;Configurations を選択してビルドしてください。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Configurations 名&lt;/th&gt; &#xA;   &lt;th&gt;説明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;アプリ向けデバッグビルド&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;app-release&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;アプリ向けリリースビルド&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;web-debug&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Web 向けデバッグビルド&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;web-release&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Web 向けリリースビルド&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;技術スタック&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;アプリの機能 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GitHub リポジトリの検索と詳細表示&lt;/li&gt; &#xA;   &lt;li&gt;検索結果の並び替えと &lt;a href=&#34;https://pub.dev/packages/hive&#34;&gt;hive&lt;/a&gt; を使ったデータの永続化&lt;/li&gt; &#xA;   &lt;li&gt;Sliver を使った無限スクロール対応&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://isar.dev/&#34;&gt;isar&lt;/a&gt; を使った検索履歴の保存とサジェスト&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/go_router&#34;&gt;go_router&lt;/a&gt; と &lt;a href=&#34;https://pub.dev/packages/go_router_builder&#34;&gt;go_router_builder&lt;/a&gt; を使ったルーティング&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/http&#34;&gt;http&lt;/a&gt; を使った REST API の実装&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/fast_i18n&#34;&gt;fast_i18n&lt;/a&gt; を使った多言語対応（日本語/英語）&lt;/li&gt; &#xA; &lt;li&gt;カスタムフォント対応&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/mocktail&#34;&gt;mocktail&lt;/a&gt; を使った Unit / Widget テスト&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_launcher_icons&#34;&gt;flutter_launcher_icons&lt;/a&gt; を使ったアプリアイコン&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_native_splash&#34;&gt;flutter_native_splash&lt;/a&gt; を使ったスプラッシュ画面&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/responsive_framework&#34;&gt;responsive_framework&lt;/a&gt; を使ったレスポンシブ対応&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.co.jp/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; によるCI(自動テストと自動ビルド)&lt;/li&gt; &#xA; &lt;li&gt;ダークモード対応&lt;/li&gt; &#xA; &lt;li&gt;サポートするプラットフォーム &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iOS / Android / Web / macOS / Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;今後対応予定&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration テスト&lt;/li&gt; &#xA; &lt;li&gt;Riverpod 2 対応&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;対応しないこと&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firebase 連携&lt;/li&gt; &#xA; &lt;li&gt;Flavor 対応（develop / staging / production などの環境分け）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;アーキテクチャ / パッケージ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_riverpod&#34;&gt;flutter_riverpod&lt;/a&gt; + &lt;a href=&#34;https://pub.dev/packages/go_router&#34;&gt;go_router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewithandrea.com/articles/flutter-app-architecture-riverpod-introduction/&#34;&gt;CODE WITH ANDREA&lt;/a&gt; と &lt;a href=&#34;https://little-hands.hatenablog.com/entry/2018/12/10/ddd-architecture&#34;&gt;DDD&lt;/a&gt; のアーキテクチャを参考にして、本アプリは下記の３層アーキテクチャで実装しています。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13707135/200081763-c2809366-046d-4a82-8367-9bee5a751b90.png&#34; alt=&#34;アーキテクチャ図&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presentation 層&lt;/h3&gt; &#xA;&lt;p&gt;ユーザーとの I/F を担う層。Application 層と Domain 層に依存する。Infrastructure 層に依存してはいけない。&lt;/p&gt; &#xA;&lt;h4&gt;Widget&lt;/h4&gt; &#xA;&lt;p&gt;ページや UI 部品の Widget クラス群。State を監視（ watch / listen ）して UI に表現する。ユーザーイベントを検知して Service のメソッドを呼び出す。キャッシュが効かなくなるので直接 Repository Interface を呼び出してはいけない。画面遷移の実装は Widget のイベントハンドラー内で行ってよい。&lt;/p&gt; &#xA;&lt;h4&gt;Application 層&lt;/h4&gt; &#xA;&lt;p&gt;アプリケーションのロジックや状態を定義する層。Domain 層に依存する。Presentation 層と Infrastructure 層に依存してはいけない。&lt;/p&gt; &#xA;&lt;h4&gt;State&lt;/h4&gt; &#xA;&lt;p&gt;アプリのあらゆる状態。Domain 層の Entity そのものでもよいし、複数の Repository をまたいだ Entity を統合するクラスでもよい。State は &lt;code&gt;StateProvider&lt;/code&gt; 等でラップされ Widget や他の State から参照される。&lt;/p&gt; &#xA;&lt;h4&gt;Service&lt;/h4&gt; &#xA;&lt;p&gt;ユーザーイベントを受け付けて、複数の Repository Interface を呼び出して Entity を受け取って State を更新するサービスクラス。Widget からのメソッド呼び出しや、依存する State の更新を契機に発火する。&lt;/p&gt; &#xA;&lt;h3&gt;Domain 層&lt;/h3&gt; &#xA;&lt;p&gt;ドメインロジックやドメインオブジェクト（エンティティ）を定義する層。どの層にも依存してはいけない。&lt;/p&gt; &#xA;&lt;h4&gt;Entity&lt;/h4&gt; &#xA;&lt;p&gt;Repository Interface で扱うドメインオブジェクト（データの構造体）。入力値のバリデーションは Entity のコンストラクタで実装する。Infrastructure 層が投げる例外はドメイン層で定義する。&lt;/p&gt; &#xA;&lt;h4&gt;Repository Interface&lt;/h4&gt; &#xA;&lt;p&gt;データの永続化や外部サービス連携を担う Repository のインターフェース。集約毎に定義する。&lt;/p&gt; &#xA;&lt;h3&gt;Infrastructure 層&lt;/h3&gt; &#xA;&lt;p&gt;データの永続化や外部サービス連携を担う層。Domain 層に依存する。Presentation 層と Application 層に依存してはいけない。&lt;/p&gt; &#xA;&lt;h4&gt;Repository Implements&lt;/h4&gt; &#xA;&lt;p&gt;Repository Interface の実装。Data Source を利用してデータの永続化を行う。&lt;/p&gt; &#xA;&lt;h4&gt;Data Source&lt;/h4&gt; &#xA;&lt;p&gt;様々なデータソース。Firebase だったり、API だったり、Hive だったり、SharedPreferences だったり、Isar だったりする。&lt;/p&gt; &#xA;&lt;h2&gt;フォルダ構成&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── application                              アプリケーション層&#xA;│&amp;nbsp;&amp;nbsp; └── &amp;lt;関心事&amp;gt;&#xA;│&amp;nbsp;&amp;nbsp;     ├── &amp;lt;state&amp;gt;                          状態クラス群&#xA;│&amp;nbsp;&amp;nbsp;     └── &amp;lt;関心事&amp;gt;_service.dart             サービスクラス&#xA;├── domain                                   ドメイン層&#xA;│&amp;nbsp;&amp;nbsp; ├── exceptions.dart                      例外クラス&#xA;│&amp;nbsp;&amp;nbsp; └── repository&#xA;│&amp;nbsp;&amp;nbsp;     └── &amp;lt;集約&amp;gt;&#xA;│&amp;nbsp;&amp;nbsp;      &amp;nbsp;&amp;nbsp; ├── &amp;lt;集約&amp;gt;_repository.dart        リポジトリのインターフェースクラス&#xA;│&amp;nbsp;&amp;nbsp;      &amp;nbsp;&amp;nbsp; └── entity                       集約単位のエンティティ&#xA;├── infrastructure                           インフラストラクチャ層&#xA;│&amp;nbsp;&amp;nbsp; └── &amp;lt;データソース&amp;gt;&#xA;│&amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp; └── &amp;lt;集約&amp;gt;&#xA;│&amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;     └── &amp;lt;集約&amp;gt;_repository.dart       リポジトリの実装&#xA;├── presentation&#xA;│&amp;nbsp;&amp;nbsp; ├── app.dart                             アプリケーション&#xA;│&amp;nbsp;&amp;nbsp; ├── router.dart                          ルーティング&#xA;│&amp;nbsp;&amp;nbsp; ├── theme.dart                           テーマ&#xA;│&amp;nbsp;&amp;nbsp; ├── component                            プレゼンテーション層で共通の Widget&#xA;│&amp;nbsp;&amp;nbsp; └── page&#xA;│&amp;nbsp;&amp;nbsp;     └── &amp;lt;関心事&amp;gt;&#xA;│&amp;nbsp;&amp;nbsp;         ├── component                    画面単位の Widget&#xA;│&amp;nbsp;&amp;nbsp;         └── &amp;lt;関心事&amp;gt;_&amp;lt;CURD&amp;gt;page.dart      画面Widget&#xA;└── util                                     どの層からもアクセス可能な便利クラス（ロガー、拡張メソッドなど）&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ファイル分割の方針&lt;/h3&gt; &#xA;&lt;p&gt;基本的に &lt;strong&gt;関心事&lt;/strong&gt; 毎にファイルを分割しています。例えば、Controller と State を別々のファイルに分けることはしません。ファイル名は &lt;strong&gt;関心事.dart&lt;/strong&gt; とします。ファイル名 = クラス名とはしません。&lt;/p&gt; &#xA;&lt;h2&gt;環境&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flutter&lt;/td&gt; &#xA;   &lt;td&gt;3.3.10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;2.18.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;コードの自動生成&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;util/localization/*.json&lt;/code&gt; ファイルを変更した場合や &lt;code&gt;freezed&lt;/code&gt; を使った &lt;code&gt;dart&lt;/code&gt; ファイルを変更した場合は次のコマンドを実行してください。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build-runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;単体テスト（UnitTest / WidgetTest）&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ローカルで単体テストを行うためには事前に次のライブラリをインストールしてください。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# lcov のインストール&#xA;brew install lcov&#xA;&#xA;# dart_dot_reporter のインストール&#xA;flutter pub global activate dart_dot_reporter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;次のコマンドで単体テスト（静的解析 =&amp;gt; テスト =&amp;gt; カバレッジの結果を表示 ）を実行します。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 言語設定が英語のテスト&#xA;make test-en&#xA;&#xA;# 言語設定が日本語のテスト&#xA;make test-ja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API ドキュメント&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://susatthi.github.io/github-search/&#34;&gt;API ドキュメント&lt;/a&gt; で公開しています。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;生成する場合は次のコマンドを実行してください。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make dartdoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.co.jp/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; を利用して CI を構築しています。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;プルリクエストが作成や更新された時、もしくは &lt;code&gt;main&lt;/code&gt; または &lt;code&gt;develop&lt;/code&gt; ブランチに &lt;code&gt;push&lt;/code&gt; されたときに CI が発火します。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;%%{init:{&#39;theme&#39;:&#39;base&#39;,&#39;themeVariables&#39;:{&#39;primaryColor&#39;:&#39;#f0f0f0&#39;,&#39;primaryTextColor&#39;:&#39;#2f2f2f&#39;, &#39;lineColor&#39;:&#39;#2f2f2f&#39;,&#39;textColor&#39;:&#39;#2f2f2f&#39;,&#39;fontSize&#39;:&#39;16px&#39;,&#39;nodeBorder&#39;:&#39;0px&#39;}}}%%&#xA;flowchart LR&#xA;    Start((開始)) --&amp;gt; AnalyzeUbuntu(Ubuntu静的解析)&#xA;    Start --&amp;gt; AnalyzeMacosEn(macOS英語静的解析)&#xA;    Start --&amp;gt; AnalyzeMacosJp(macOS日本語静的解析)&#xA;    Start --&amp;gt; AnalyzeWindows(Windows静的解析)&#xA;    Start --&amp;gt; BuildAndroid(Androidビルド)&#xA;    Start --&amp;gt; BuildiOS(iOSビルド)&#xA;    Start --&amp;gt; BuildWeb(Webビルド)&#xA;    Start --&amp;gt; BuildMacOS(macOSビルド)&#xA;    Start --&amp;gt; BuildWindows(Windowsビルド)&#xA;&#xA;    AnalyzeUbuntu ---&amp;gt; TestUbuntu(Ubuntu単体テスト)&#xA;    AnalyzeMacosEn ---&amp;gt; TestMacosEn(macOS英語単体テスト)&#xA;    AnalyzeMacosJp --&amp;gt; TestMacosJp(macOS日本語単体テスト)&#xA;    TestMacosJp --&amp;gt; UploadCoverageMacosJp(Codecovに結果を送信)&#xA;    AnalyzeWindows ---&amp;gt; TestWindows(Windows単体テスト)&#xA;    UploadCoverageMacosJp --&amp;gt; NotifySlack(Slackに結果を送信)&#xA;    TestUbuntu --&amp;gt; NotifySlack&#xA;    TestMacosEn --&amp;gt; NotifySlack&#xA;    TestWindows --&amp;gt; NotifySlack&#xA;    BuildAndroid ----&amp;gt; NotifySlack&#xA;    BuildiOS ----&amp;gt; NotifySlack&#xA;    BuildWeb ----&amp;gt; NotifySlack&#xA;    BuildMacOS ----&amp;gt; NotifySlack&#xA;    BuildWindows ----&amp;gt; NotifySlack&#xA;    NotifySlack --&amp;gt; End((終了))&#xA;&#xA;    classDef anchor fill:#4063DD, color:#ffffff;&#xA;    classDef testJob fill:#4063DD, color:#ffffff;&#xA;    classDef buildJob fill:#d32f2f, color:#ffffff;&#xA;    classDef reportJob fill:#437C40, color:#ffffff;&#xA;    %% class Start,End anchor;&#xA;    class AnalyzeUbuntu,TestUbuntu,UploadCoverageMacosJp,AnalyzeMacosEn,AnalyzeMacosJp,TestMacosEn,TestMacosJp,AnalyzeWindows,TestWindows testJob;&#xA;    class BuildAndroid,BuildiOS,BuildWeb,BuildMacOS,BuildWindows,CreateApiDoc,DeployGitHubPages buildJob;&#xA;    class NotifySlack reportJob;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ライセンス&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>