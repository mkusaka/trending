<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-21T01:29:12Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chipweinberger/flutter_blue_plus</title>
    <updated>2024-08-21T01:29:12Z</updated>
    <id>tag:github.com,2024-08-21:/chipweinberger/flutter_blue_plus</id>
    <link href="https://github.com/chipweinberger/flutter_blue_plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter plugin for connecting and communicationg with Bluetooth Low Energy devices, on Android and iOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_blue_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_blue_plus.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/634853295160033301.svg?style=flat-square&amp;amp;colorB=758ED3&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;FlutterBlue&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/raw/master/site/flutterblueplus.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this plugin is continuous work from &lt;a href=&#34;https://github.com/pauldemarco/flutter_blue&#34;&gt;FlutterBlue&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Migrating from &lt;a href=&#34;https://github.com/pauldemarco/flutter_blue&#34;&gt;FlutterBlue&lt;/a&gt;? See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/MIGRATION.md&#34;&gt;Migration Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#using-ble-in-app-background&#34;&gt;Using Ble in App Background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#mocking&#34;&gt;Mocking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#common-problems&#34;&gt;Common Problems&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus is a Bluetooth Low Energy plugin for &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It supports BLE Central Role only (most common).&lt;/p&gt; &#xA;&lt;p&gt;If you need BLE Peripheral Role, you should check out &lt;a href=&#34;https://pub.dev/packages/flutter_ble_peripheral&#34;&gt;FlutterBlePeripheral&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to Bluetooth, you should start by reading BLE tutorials.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://novelbits.io/bluetooth-low-energy-ble-complete-guide/&#34;&gt;Novel Bits BLE Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.allaboutcircuits.com/technical-articles/exploring-the-basics-of-bluetooth-low-energy-a-beginners-guide-to-ble/&#34;&gt;All About Circuits BLE Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://embetronicx.com/tutorials/tech_devices/bluetooth-low-energy-ble-introduction-part-1/&#34;&gt;Embetronicx BLE Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ùó Bluetooth Classic is not supported ‚ùó&lt;/h2&gt; &#xA;&lt;p&gt;i.e. &lt;strong&gt;Arduino HC-05 &amp;amp; HC-06,&lt;/strong&gt; speakers, headphones, mice, keyboards, gamepads, and more are &lt;strong&gt;not&lt;/strong&gt; supported. These all use Bluetooth Classic.&lt;/p&gt; &#xA;&lt;p&gt;Also, iBeacons are &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; supported on iOS. Apple requires you to use CoreLocation.&lt;/p&gt; &#xA;&lt;h2&gt;Cross-Platform Bluetooth Low Energy&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus supports nearly every feature on all supported platforms: iOS, macOS, Android.&lt;/p&gt; &#xA;&lt;p&gt;FlutterBluePlus was written to be simple, robust, and easy to understand.&lt;/p&gt; &#xA;&lt;h2&gt;No Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus has zero dependencies besides Flutter, Android, iOS, and macOS themselves.&lt;/p&gt; &#xA;&lt;p&gt;This makes FlutterBluePlus very stable, and easy to maintain.&lt;/p&gt; &#xA;&lt;h2&gt;Other BLE Libraries&lt;/h2&gt; &#xA;&lt;p&gt;These other libraries are worth considering. They support all platforms, but fewer features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/bluetooth_low_energy&#34;&gt;bluetooth_low_energy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/universal_ble&#34;&gt;universal_ble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/quick_blue&#34;&gt;quick_blue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚≠ê Stars ‚≠ê&lt;/h2&gt; &#xA;&lt;p&gt;Please star this repo &amp;amp; on &lt;a href=&#34;https://pub.dev/packages/flutter_blue_plus&#34;&gt;pub.dev&lt;/a&gt;. We all benefit from having a larger community.&lt;/p&gt; &#xA;&lt;h2&gt;Discord üí¨&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/634853295160033301.svg?style=flat-square&amp;amp;colorB=758ED3&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; There is a community Discord server. (&lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;Link&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBluePlus has a beautiful example app, useful to debug issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ./example&#xA;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;FlutterBlue&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/raw/master/site/example.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;üî• Error Handling üî•&lt;/h3&gt; &#xA;&lt;p&gt;Flutter Blue Plus takes error handling seriously.&lt;/p&gt; &#xA;&lt;p&gt;Every error returned by the native platform is checked and thrown as an exception where appropriate. See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#reference&#34;&gt;Reference&lt;/a&gt; for a list of throwable functions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Streams:&lt;/strong&gt; Streams returned by FlutterBluePlus never emit any errors and never close. There&#39;s no need to handle &lt;code&gt;onError&lt;/code&gt; or &lt;code&gt;onDone&lt;/code&gt; for &lt;code&gt;stream.listen(...)&lt;/code&gt;. The one exception is &lt;code&gt;FlutterBluePlus.scanResults&lt;/code&gt;, which you should handle &lt;code&gt;onError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Set Log Level&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// if your terminal doesn&#39;t support color you&#39;ll see annoying logs like `\x1B[1;35m`&#xA;FlutterBluePlus.setLogLevel(LogLevel.verbose, color:false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;LogLevel.verbose&lt;/code&gt; shows &lt;em&gt;all&lt;/em&gt; data in and out.&lt;/p&gt; &#xA;&lt;p&gt;‚ö´ = function name&lt;/p&gt; &#xA;&lt;p&gt;üü£ = args to platform&lt;/p&gt; &#xA;&lt;p&gt;üü° = data from platform&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screenshot 2023-07-27 at 4 53 08 AM&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/assets/1863934/ee37d702-2752-4402-bf26-fc661728c1c3&#34;&gt; &#xA;&lt;h3&gt;Bluetooth On &amp;amp; Off&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; On iOS, a &#34;&lt;em&gt;This app would like to use Bluetooth&lt;/em&gt;&#34; system dialogue appears on first call to any FlutterBluePlus method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// first, check if bluetooth is supported by your hardware&#xA;// Note: The platform is initialized on the first call to any FlutterBluePlus method.&#xA;if (await FlutterBluePlus.isSupported == false) {&#xA;    print(&#34;Bluetooth not supported by this device&#34;);&#xA;    return;&#xA;}&#xA;&#xA;// handle bluetooth on &amp;amp; off&#xA;// note: for iOS the initial state is typically BluetoothAdapterState.unknown&#xA;// note: if you have permissions issues you will get stuck at BluetoothAdapterState.unauthorized&#xA;var subscription = FlutterBluePlus.adapterState.listen((BluetoothAdapterState state) {&#xA;    print(state);&#xA;    if (state == BluetoothAdapterState.on) {&#xA;        // usually start scanning, connecting, etc&#xA;    } else {&#xA;        // show an error to the user, etc&#xA;    }&#xA;});&#xA;&#xA;// turn on bluetooth ourself if we can&#xA;// for iOS, the user controls bluetooth enable/disable&#xA;if (Platform.isAndroid) {&#xA;    await FlutterBluePlus.turnOn();&#xA;}&#xA;&#xA;// cancel to prevent duplicate listeners&#xA;subscription.cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan for devices&lt;/h3&gt; &#xA;&lt;p&gt;If your device is not found, see &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#common-problems&#34;&gt;Common Problems&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to set scan filters to reduce main thread &amp;amp; platform channel usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// listen to scan results&#xA;// Note: `onScanResults` only returns live scan results, i.e. during scanning. Use&#xA;//  `scanResults` if you want live scan results *or* the results from a previous scan.&#xA;var subscription = FlutterBluePlus.onScanResults.listen((results) {&#xA;        if (results.isNotEmpty) {&#xA;            ScanResult r = results.last; // the most recently found device&#xA;            print(&#39;${r.device.remoteId}: &#34;${r.advertisementData.advName}&#34; found!&#39;);&#xA;        }&#xA;    },&#xA;    onError: (e) =&amp;gt; print(e),&#xA;);&#xA;&#xA;// cleanup: cancel subscription when scanning stops&#xA;FlutterBluePlus.cancelWhenScanComplete(subscription);&#xA;&#xA;// Wait for Bluetooth enabled &amp;amp; permission granted&#xA;// In your real app you should use `FlutterBluePlus.adapterState.listen` to handle all states&#xA;await FlutterBluePlus.adapterState.where((val) =&amp;gt; val == BluetoothAdapterState.on).first;&#xA;&#xA;// Start scanning w/ timeout&#xA;// Optional: use `stopScan()` as an alternative to timeout&#xA;await FlutterBluePlus.startScan(&#xA;  withServices:[Guid(&#34;180D&#34;)], // match any of the specified services&#xA;  withNames:[&#34;Bluno&#34;], // *or* any of the specified names&#xA;  timeout: Duration(seconds:15));&#xA;&#xA;// wait for scanning to stop&#xA;await FlutterBluePlus.isScanning.where((val) =&amp;gt; val == false).first;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to a device&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// listen for disconnection&#xA;var subscription = device.connectionState.listen((BluetoothConnectionState state) async {&#xA;    if (state == BluetoothConnectionState.disconnected) {&#xA;        // 1. typically, start a periodic timer that tries to &#xA;        //    reconnect, or just call connect() again right now&#xA;        // 2. you must always re-discover services after disconnection!&#xA;        print(&#34;${device.disconnectReason?.code} ${device.disconnectReason?.description}&#34;);&#xA;    }&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;//   - [delayed] This option is only meant for `connectionState` subscriptions.  &#xA;//     When `true`, we cancel after a small delay. This ensures the `connectionState` &#xA;//     listener receives the `disconnected` event.&#xA;//   - [next] if true, the the stream will be canceled only on the *next* disconnection,&#xA;//     not the current disconnection. This is useful if you setup your subscriptions&#xA;//     before you connect.&#xA;device.cancelWhenDisconnected(subscription, delayed:true, next:true);&#xA;&#xA;// Connect to the device&#xA;await device.connect();&#xA;&#xA;// Disconnect from device&#xA;await device.disconnect();&#xA;&#xA;// cancel to prevent duplicate listeners&#xA;subscription.cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auto Connect&lt;/h3&gt; &#xA;&lt;p&gt;Connects whenever your device is found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// enable auto connect&#xA;//  - note: autoConnect is incompatible with mtu argument, so you must call requestMtu yourself&#xA;await device.connect(autoConnect:true, mtu:null)&#xA;&#xA;// wait until connection&#xA;//  - when using autoConnect, connect() always returns immediately, so we must&#xA;//    explicity listen to `device.connectionState` to know when connection occurs &#xA;await device.connectionState.where((val) =&amp;gt; val == BluetoothConnectionState.connected).first;&#xA;&#xA;// disable auto connect&#xA;await device.disconnect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Save Device&lt;/h3&gt; &#xA;&lt;p&gt;To save a device between app restarts, just write the &lt;code&gt;remoteId&lt;/code&gt; to a file.&lt;/p&gt; &#xA;&lt;p&gt;Now you can connect without needing to scan again, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final String remoteId = await File(&#39;/remoteId.txt&#39;).readAsString();&#xA;var device = BluetoothDevice.fromId(remoteId);&#xA;// AutoConnect is convenient because it does not &#34;time out&#34;&#xA;// even if the device is not available / turned off.&#xA;await device.connect(autoConnect: true);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MTU&lt;/h3&gt; &#xA;&lt;p&gt;On Android, we request an mtu of 512 by default during connection (see: &lt;code&gt;connect&lt;/code&gt; function arguments).&lt;/p&gt; &#xA;&lt;p&gt;On iOS &amp;amp; macOS, the mtu is negotiated automatically, typically 135 to 255.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = device.mtu.listen((int mtu) {&#xA;    // iOS: initial value is always 23, but iOS will quickly negotiate a higher value&#xA;    print(&#34;mtu $mtu&#34;);&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;// You can also manually change the mtu yourself.&#xA;if (Platform.isAndroid) {&#xA;    await device.requestMtu(512);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discover services&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Note: You must call discoverServices after every re-connection!&#xA;List&amp;lt;BluetoothService&amp;gt; services = await device.discoverServices();&#xA;services.forEach((service) {&#xA;    // do something with service&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Characteristics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Reads all characteristics&#xA;var characteristics = service.characteristics;&#xA;for(BluetoothCharacteristic c in characteristics) {&#xA;    if (c.properties.read) {&#xA;        List&amp;lt;int&amp;gt; value = await c.read();&#xA;        print(value);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write Characteristic&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Writes to a characteristic&#xA;await c.write([0x12, 0x34]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;allowLongWrite&lt;/strong&gt;: To write large characteristics (up to 512 bytes) regardless of mtu, use &lt;code&gt;allowLongWrite&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// allowLongWrite should be used with caution. &#xA;///   1. it can only be used *with* response to avoid data loss&#xA;///   2. the peripheral device must support the &#39;long write&#39; ble protocol.&#xA;///   3. Interrupted transfers can leave the characteristic in a partially written state&#xA;///   4. If the mtu is small, it is very very slow.&#xA;await c.write(data, allowLongWrite:true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;splitWrite&lt;/strong&gt;: To write lots of data (unlimited), you can define the &lt;code&gt;splitWrite&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:math&#39;;&#xA;// split write should be used with caution.&#xA;//    1. due to splitting, `characteristic.read()` will return partial data.&#xA;//    2. it can only be used *with* response to avoid data loss&#xA;//    3. The characteristic must be designed to support split data&#xA;extension splitWrite on BluetoothCharacteristic {&#xA;  Future&amp;lt;void&amp;gt; splitWrite(List&amp;lt;int&amp;gt; value, {int timeout = 15}) async {&#xA;    int chunk = device.mtuNow - 3; // 3 bytes ble overhead&#xA;    for (int i = 0; i &amp;lt; value.length; i += chunk) {&#xA;      List&amp;lt;int&amp;gt; subvalue = value.sublist(i, min(i + chunk, value.length));&#xA;      await write(subvalue, withoutResponse:false, timeout: timeout);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subscribe to a characteristic&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;onValueReceived&lt;/code&gt; is never called, see &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#common-problems&#34;&gt;Common Problems&lt;/a&gt; in the README.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = characteristic.onValueReceived.listen((value) {&#xA;    // onValueReceived is updated:&#xA;    //   - anytime read() is called&#xA;    //   - anytime a notification arrives (if subscribed)&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;// subscribe&#xA;// Note: If a characteristic supports both **notifications** and **indications**,&#xA;// it will default to **notifications**. This matches how CoreBluetooth works on iOS.&#xA;await characteristic.setNotifyValue(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Last Value Stream&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;lastValueStream&lt;/code&gt; is an alternative to &lt;code&gt;onValueReceived&lt;/code&gt;. It emits a value any time the characteristic changes, &lt;strong&gt;including writes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is very convenient for simple characteristics that support both WRITE and READ (and/or NOTIFY). &lt;strong&gt;e.g.&lt;/strong&gt; a &#34;light switch toggle&#34; characteristic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = characteristic.lastValueStream.listen((value) {&#xA;    // lastValueStream` is updated:&#xA;    //   - anytime read() is called&#xA;    //   - anytime write() is called&#xA;    //   - anytime a notification arrives (if subscribed)&#xA;    //   - also when first listened to, it re-emits the last value for convenience.&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;// enable notifications&#xA;await characteristic.setNotifyValue(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read and write descriptors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Reads all descriptors&#xA;var descriptors = characteristic.descriptors;&#xA;for(BluetoothDescriptor d in descriptors) {&#xA;    List&amp;lt;int&amp;gt; value = await d.read();&#xA;    print(value);&#xA;}&#xA;&#xA;// Writes to a descriptor&#xA;await d.write([0x12, 0x34])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Services Changed Characteristic&lt;/h3&gt; &#xA;&lt;p&gt;FlutterBluePlus automatically listens to the Services Changed Characteristic (0x2A05)&lt;/p&gt; &#xA;&lt;p&gt;In FlutterBluePlus, we call it &lt;code&gt;onServicesReset&lt;/code&gt; because you must re-discover services.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// - uses the GAP Services Changed characteristic (0x2A05)&#xA;// - you must call discoverServices() again&#xA;device.onServicesReset.listen(() async {&#xA;    print(&#34;Services Reset&#34;);&#xA;    await device.discoverServices();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Connected Devices&lt;/h3&gt; &#xA;&lt;p&gt;Get devices currently connected to your app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;BluetoothDevice&amp;gt; devs = FlutterBluePlus.connectedDevices;&#xA;for (var d in devs) {&#xA;    print(d);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get System Devices&lt;/h3&gt; &#xA;&lt;p&gt;Get devices connected to the system by &lt;em&gt;any&lt;/em&gt; app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you must connect &lt;em&gt;your app&lt;/em&gt; to them before you can communicate with them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;BluetoothDevice&amp;gt; devs = await FlutterBluePlus.systemDevices;&#xA;for (var d in devs) {&#xA;    await d.connect(); // Must connect *our* app to the device&#xA;    await d.discoverServices();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Bond (Android Only)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; calling this is usually not necessary!! The platform will do it automatically.&lt;/p&gt; &#xA;&lt;p&gt;However, you can force the popup to show sooner.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final bsSubscription = device.bondState.listen((value) {&#xA;    print(&#34;$value prev:{$device.prevBondState}&#34;);&#xA;});&#xA;&#xA;// cleanup: cancel subscription when disconnected&#xA;device.cancelWhenDisconnected(bsSubscription);&#xA;&#xA;// Force the bonding popup to show now (Android Only) &#xA;await device.createBond();&#xA;&#xA;// remove bond&#xA;await device.removeBond();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Events API&lt;/h3&gt; &#xA;&lt;p&gt;Access streams from all devices simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;There are streams for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;events.onConnectionStateChanged&lt;/li&gt; &#xA; &lt;li&gt;events.onMtuChanged&lt;/li&gt; &#xA; &lt;li&gt;events.onReadRssi&lt;/li&gt; &#xA; &lt;li&gt;events.onServicesReset&lt;/li&gt; &#xA; &lt;li&gt;events.onDiscoveredServices&lt;/li&gt; &#xA; &lt;li&gt;events.onCharacteristicReceived&lt;/li&gt; &#xA; &lt;li&gt;events.onCharacteristicWritten&lt;/li&gt; &#xA; &lt;li&gt;events.onDescriptorRead&lt;/li&gt; &#xA; &lt;li&gt;events.onDescriptorWritten&lt;/li&gt; &#xA; &lt;li&gt;events.onNameChanged (iOS Only)&lt;/li&gt; &#xA; &lt;li&gt;events.onBondStateChanged (Android Only)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// listen to *any device* connection state changes &#xA;FlutterBluePlus.events.onConnectionStateChanged.listen((event)) {&#xA;    print(&#39;${event.device} ${event.connectionState}&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mocking&lt;/h2&gt; &#xA;&lt;p&gt;To mock &lt;code&gt;FlutterBluePlus&lt;/code&gt; for development, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/MOCKING.md&#34;&gt;Mocking Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Change the minSdkVersion for Android&lt;/h3&gt; &#xA;&lt;p&gt;flutter_blue_plus is compatible only from version 21 of Android SDK so you should change this in &lt;strong&gt;android/app/build.gradle&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;android {&#xA;  defaultConfig {&#xA;     minSdkVersion: 21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for Android (No Location)&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;android/app/src/main/AndroidManifest.xml&lt;/strong&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Tell Google Play Store that your app uses Bluetooth LE&#xA;     Set android:required=&#34;true&#34; if bluetooth is necessary --&amp;gt;&#xA;&amp;lt;uses-feature android:name=&#34;android.hardware.bluetooth_le&#34; android:required=&#34;false&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- New Bluetooth permissions in Android 12&#xA;https://developer.android.com/about/versions/12/features/bluetooth-permissions --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34; android:usesPermissionFlags=&#34;neverForLocation&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 11 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADMIN&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; android:maxSdkVersion=&#34;30&#34;/&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 9 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; android:maxSdkVersion=&#34;28&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for Android (With Fine Location)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use Bluetooth to determine location, or support iBeacons.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;android/app/src/main/AndroidManifest.xml&lt;/strong&gt; add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!-- Tell Google Play Store that your app uses Bluetooth LE&#xA;     Set android:required=&#34;true&#34; if bluetooth is necessary --&amp;gt;&#xA;&amp;lt;uses-feature android:name=&#34;android.hardware.bluetooth_le&#34; android:required=&#34;false&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- New Bluetooth permissions in Android 12&#xA;https://developer.android.com/about/versions/12/features/bluetooth-permissions --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34;/&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 11 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADMIN&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&#xA;&amp;lt;!-- legacy for Android 9 or lower --&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; android:maxSdkVersion=&#34;28&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And set &lt;strong&gt;androidUsesFineLocation&lt;/strong&gt; when scanning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Start scanning&#xA;flutterBlue.startScan(timeout: Duration(seconds: 4), androidUsesFineLocation: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android Proguard&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line in your &lt;code&gt;project/android/app/proguard-rules.pro&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.lib.flutter_blue_plus.* { *; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to avoid seeing the following kind errors in your &lt;code&gt;release&lt;/code&gt; builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PlatformException(startScan, Field androidScanMode_ for m0.e0 not found. Known fields are&#xA; [private int m0.e0.q, private b3.b0$i m0.e0.r, private boolean m0.e0.s, private static final m0.e0 m0.e0.t,&#xA; private static volatile b3.a1 m0.e0.u], java.lang.RuntimeException: Field androidScanMode_ for m0.e0 not found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for iOS&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;ios/Runner/Info.plist&lt;/strong&gt; let‚Äôs add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSBluetoothAlwaysUsageDescription&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;This app needs Bluetooth to function&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For location permissions on iOS see more at: &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services&#34;&gt;https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add permissions for macOS&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have granted access to the Bluetooth hardware:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Xcode -&amp;gt; Runners -&amp;gt; Targets -&amp;gt; Runner-&amp;gt; Signing &amp;amp; Capabilities -&amp;gt; App Sandbox -&amp;gt; Hardware -&amp;gt; Enable Bluetooth&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;528&#34; alt=&#34;Screenshot 2023-12-11 at 10 32 04 AM&#34; src=&#34;https://github.com/boskokg/flutter_blue_plus/assets/1863934/554079ef-4627-4dfc-97e3-1f07f84a0f3c&#34;&gt; &#xA;&lt;h2&gt;Using Ble in App Background&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is an advanced use case&lt;/strong&gt;. FlutterBluePlus does not support everything. You may have to fork it. PRs are welcome.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html&#34;&gt;https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/CoreBluetoothBackgroundProcessingForIOSApps/PerformingTasksWhileYourAppIsInTheBackground.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;Info.plist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;UIBackgroundModes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;string&amp;gt;bluetooth-central&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When this key-value pair is included in the app‚Äôs Info.plist file, the system wakes up your app to process ble &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, and &lt;code&gt;subscription&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;p&gt;You may also have to use &lt;a href=&#34;https://pub.dev/packages/workmanager&#34;&gt;https://pub.dev/packages/workmanager&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Upon being woken up, an app has around 10 seconds to complete a task. Apps that spend too much time executing in the background can be throttled back by the system or killed.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You can try using &lt;a href=&#34;https://pub.dev/packages/flutter_foreground_task&#34;&gt;https://pub.dev/packages/flutter_foreground_task&lt;/a&gt; or possibly &lt;a href=&#34;https://pub.dev/packages/workmanager&#34;&gt;https://pub.dev/packages/workmanager&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;üåÄ = Stream ‚ö° = synchronous&lt;/p&gt; &#xA;&lt;h3&gt;FlutterBluePlus API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setLogLevel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Configure plugin log level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setOptions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set configurable bluetooth options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isSupported&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks whether the device supports Bluetooth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;turnOn&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Turns on the bluetooth adapter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;adapterStateNow ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Current state of the bluetooth adapter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;adapterState üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of on &amp;amp; off states of the bluetooth adapter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;startScan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starts a scan for Ble devices&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;stopScan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stop an existing scan for Ble devices&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onScanResults üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of live scan results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scanResults üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of live scan results or previous results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastScanResults ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The most recent scan results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isScanning üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of current scanning state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isScanningNow ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Is a scan currently running?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connectedDevices ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of devices connected to &lt;em&gt;your app&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;systemDevices&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;List of devices connected to the system, even by other apps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;getPhySupport&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Get supported bluetooth phy codings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;FlutterBluePlus Events API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onConnectionStateChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of connection changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onMtuChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of mtu changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onReadRssi üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of rssi reads of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onServicesReset üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of services resets of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onDiscoveredServices üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of services discovered of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onCharacteristicReceived üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic value reads of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onCharacteristicWritten üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic value writes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onDescriptorRead üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of descriptor value reads of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onDescriptorWritten üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of descriptor value writes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onBondStateChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of android bond state changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;events.onNameChanged üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of iOS name changes of &lt;em&gt;all devices&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothDevice API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platformName ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The platform preferred name of the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;advName ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The advertised name of the device found during scanning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Establishes a connection to the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;disconnect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cancels an active or pending connection to the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isConnected ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Is this device currently connected to &lt;em&gt;your app&lt;/em&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isDisonnected ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Is this device currently disconnected from &lt;em&gt;your app&lt;/em&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connectionState üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of connection changes for the Bluetooth Device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;discoverServices&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discover services&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;servicesList ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current list of available services&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onServicesReset üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The services changed &amp;amp; must be rediscovered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mtu üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of current mtu value + changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mtuNow ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current mtu value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;readRssi&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Read RSSI from a connected device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requestMtu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request to change the MTU for the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requestConnectionPriority&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request to update a high priority, low latency connection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bondState üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of device bond state. Can be useful on Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;createBond&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Force a system pairing dialogue to show, if needed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;removeBond&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remove Bluetooth Bond of device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setPreferredPhy&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set preferred RX and TX phy for connection and phy options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clearGattCache&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clear android cache of service discovery results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothCharacteristic API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;uuid ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The uuid of characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves the value of the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes the value of the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setNotifyValue&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets notifications or indications on the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isNotifying ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Are notifications or indications currently enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onValueReceived üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic value updates received from the device&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValue ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The most recent value of the characteristic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValueStream üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of onValueReceived + writes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothDescriptor API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Throws&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;uuid ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The uuid of descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves the value of the descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;üî•&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes the value of the descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;onValueReceived üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of descriptor value reads &amp;amp; writes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValue ‚ö°&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The most recent value of the descriptor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lastValueStream üåÄ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of onValueReceived + writes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to debug issues in FlutterBluePlus is to make your own local copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /user/downloads&#xA;git clone https://github.com/boskokg/flutter_blue_plus.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then in &lt;code&gt;pubspec.yaml&lt;/code&gt; add the repo by path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  flutter_blue_plus:&#xA;    path: /user/downloads/flutter_blue_plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can edit the FlutterBluePlus code yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Common Problems&lt;/h2&gt; &#xA;&lt;p&gt;Many common problems are easily solved.&lt;/p&gt; &#xA;&lt;p&gt;Adapter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#bluetooth-must-be-turned-on&#34;&gt;bluetooth must be turned on&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#adapterstate-is-not-on-but-my-bluetooth-is-on&#34;&gt;adapterState is not &#39;on&#39; but my Bluetooth is on&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#adapterstate-is-called-multiple-times&#34;&gt;adapterState is called multiple times&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scanning:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#scanning-does-not-find-my-device&#34;&gt;Scanning does not find my device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#scanned-device-never-goes-away&#34;&gt;Scanned device never goes away&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#ibeacons-not-showing&#34;&gt;iBeacons not showing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Connecting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#connection-fails&#34;&gt;Connection fails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#connectionstate-is-called-multiple-times&#34;&gt;connectionState is called multiple times&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#the-remoteid-is-different-on-android-versus-ios--macos&#34;&gt;remoteId is different on Android vs iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#ios-error-the-connection-has-timed-out-unexpectedly&#34;&gt;iOS: &#34;[Error] The connection has timed out unexpectedly.&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reading &amp;amp; Writing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#list-of-bluetooth-gatt-errors&#34;&gt;List of Bluetooth GATT Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#characteristic-write-fails&#34;&gt;Characteristic write fails&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#characteristic-read-fails&#34;&gt;Characteristic read fails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Subscriptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#onvaluereceived-is-never-called-or-lastvaluestream&#34;&gt;onValueReceived is never called (or lastValueStream)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#onvaluereceived-data-is-split-up-or-lastvaluestream&#34;&gt;onValueReceived data is split up (or lastValueStream)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#onvaluereceived-is-called-with-duplicate-data-or-lastvaluestream&#34;&gt;onValueReceived is called with duplicate data (or lastValueStream)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Android Errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#android_specific_error&#34;&gt;ANDROID_SPECIFIC_ERROR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#android-pairing-popup-appears-twice&#34;&gt;android pairing popup appears twice&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Flutter Errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#missingpluginexceptionno-implementation-found-for-method-xxxx-&#34;&gt;MissingPluginException(No implementation found for method XXXX ...)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&#34;bluetooth must be turned on&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You need to wait for the bluetooth adapter to fully turn on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;await FlutterBluePlus.adapterState.where((state) =&amp;gt; state == BluetoothAdapterState.on).first;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;FlutterBluePlus.adapterState.listen(...)&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#usage&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;adapterState is not &#39;on&#39; but my Bluetooth is on&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;For iOS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;adapterState&lt;/code&gt; always starts as &lt;code&gt;unknown&lt;/code&gt;. You need to wait longer for the service to initialize. Use this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// wait for actual adapter state, up to 3 seconds&#xA;Set&amp;lt;BluetoothAdapterState&amp;gt; inProgress = {BluetoothAdapterState.unknown, BluetoothAdapterState.turningOn};&#xA;var adapterState = FlutterBluePlus.adapterState.where((v) =&amp;gt; !inProgress.contains(v)).first;&#xA;await adapterState.timeout(const Duration(seconds: 3)).onError((error, stackTrace) {&#xA;   throw Exception(&#34;Could not determine Bluetooth state. ${FlutterBluePlus.adapterStateNow}&#34;);&#xA;});&#xA;&#xA;// check adapter state&#xA;if (FlutterBluePlus.adapterStateNow != BluetoothAdapterState.on) {&#xA;   throw Exception(&#34;Bluetooth Is Not On. ${FlutterBluePlus.adapterStateNow}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;adapterState&lt;/code&gt; is &lt;code&gt;unavailable&lt;/code&gt;, you must add access to Bluetooth Hardware in the app&#39;s Xcode settings. See &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Android:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check that your device supports Bluetooth &amp;amp; has permissions.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;adapterState is called multiple times&lt;/h3&gt; &#xA;&lt;p&gt;You are forgetting to cancel the original &lt;code&gt;FlutterBluePlus.adapterState.listen&lt;/code&gt; resulting in multiple listeners.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// tip: using ??= makes it easy to only make new listener when currently null&#xA;final subscription ??= FlutterBluePlus.adapterState.listen((value) {&#xA;    // ...&#xA;});&#xA;&#xA;// also, make sure you cancel the subscription when done!&#xA;subscription.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Scanning does not find my device&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. you&#39;re using an emulator&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use a physical device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. try using another ble scanner app&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: &lt;a href=&#34;https://apps.apple.com/us/app/nrf-connect-for-mobile/id1054362403&#34;&gt;nRF Connect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.macdom.ble.blescanner&#34;&gt;BLE Scanner&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install a BLE scanner app on your phone. Can it find your device?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. your device uses bluetooth classic, not BLE.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Headphones, speakers, keyboards, mice, gamepads, &amp;amp; printers all use Bluetooth Classic.&lt;/p&gt; &#xA;&lt;p&gt;These devices may be found in System Settings, but they cannot be connected to by FlutterBluePlus. FlutterBluePlus only supports Bluetooth Low Energy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. your device stopped advertising.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you might need to reboot your device&lt;/li&gt; &#xA; &lt;li&gt;you might need to put your device in &#34;discovery mode&#34;&lt;/li&gt; &#xA; &lt;li&gt;your phone may have already connected automatically&lt;/li&gt; &#xA; &lt;li&gt;another app may have already connected to your device&lt;/li&gt; &#xA; &lt;li&gt;another phone may have already connected to your device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try looking through system devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// search system devices. i.e. any device connected to by *any* app&#xA;List&amp;lt;BluetoothDevice&amp;gt; system = await FlutterBluePlus.systemDevices;&#xA;for (var d in system) {&#xA;    print(&#39;${r.device.platformName} already connected to! ${r.device.remoteId}&#39;);&#xA;    if (d.platformName == &#34;myBleDevice&#34;) {&#xA;         await r.connect(); // must connect our app&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. your scan filters are wrong.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;try removing all scan filters&lt;/li&gt; &#xA; &lt;li&gt;for &lt;code&gt;withServices&lt;/code&gt; to work, your device must actively advertise the serviceUUIDs it supports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Android: you&#39;re calling startScan too often&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Adroid you can only call &lt;code&gt;startScan&lt;/code&gt; 5 times per 30 second period. This is a platform restriction.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Scanned device never goes away&lt;/h3&gt; &#xA;&lt;p&gt;This is expected.&lt;/p&gt; &#xA;&lt;p&gt;You must set the &lt;code&gt;removeIfGone&lt;/code&gt; scan option if you want the device to go away when no longer available.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;iBeacons Not Showing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;iOS:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;iOS does not support iBeacons using CoreBluetooth. You must find a plugin meant for CoreLocation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Android:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;you need to enable location permissions, see &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;you must pass &lt;code&gt;androidUsesFineLocation:true&lt;/code&gt; to the &lt;code&gt;startScan&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Connection fails&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Your ble device may be low battery&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth can become erratic when your peripheral device is low on battery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Your ble device may have refused the connection or have a bug&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Connection is a two-way process. Your ble device may be misconfigured.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. You may be on the edge of the Bluetooth range.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The signal is too weak, or there are a lot of devices causing radio interference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Some phones have an issue connecting while scanning.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Huawei P8 Lite is one of the reported phones to have this issue. Try stopping your scanner before connecting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Try restarting your phone&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth is a complicated system service, and can enter a bad state.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;connectionState is called multiple times&lt;/h3&gt; &#xA;&lt;p&gt;You are forgetting to cancel the original &lt;code&gt;device.connectionState.listen&lt;/code&gt; resulting in multiple listeners.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// tip: using ??= makes it easy to only make new listener when currently null&#xA;final subscription ??= FlutterBluePlus.device.connectionState.listen((value) {&#xA;    // ...&#xA;});&#xA;&#xA;// also, make sure you cancel the subscription when done!&#xA;subscription.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;The remoteId is different on Android versus iOS &amp;amp; macOS&lt;/h3&gt; &#xA;&lt;p&gt;This is expected. There is no way to avoid it.&lt;/p&gt; &#xA;&lt;p&gt;For privacy, iOS &amp;amp; macOS use a randomly generated uuid. This uuid will periodically change.&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;6920a902-ba0e-4a13-a35f-6bc91161c517&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android uses the mac address of the bluetooth device. It never changes.&lt;/p&gt; &#xA;&lt;p&gt;e.g. &lt;code&gt;05:A4:22:31:F7:ED&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;iOS: &#34;[Error] The connection has timed out unexpectedly.&#34;&lt;/h3&gt; &#xA;&lt;p&gt;You can google this error. It is a common iOS ble error code.&lt;/p&gt; &#xA;&lt;p&gt;It means your device stopped working. FlutterBluePlus cannot fix it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;List of Bluetooth GATT Errors&lt;/h3&gt; &#xA;&lt;p&gt;These GATT error codes are part of the BLE Specification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;These are &lt;em&gt;responses&lt;/em&gt; from your ble device because you are sending an invalid request.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;FlutterBluePlus cannot fix these errors. You are doing something wrong &amp;amp; your device is responding with an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;GATT errors as they appear on iOS&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apple-code: 1  | The handle is invalid.&#xA;apple-code: 2  | Reading is not permitted.&#xA;apple-code: 3  | Writing is not permitted.&#xA;apple-code: 4  | The command is invalid.&#xA;apple-code: 6  | The request is not supported.&#xA;apple-code: 7  | The offset is invalid.&#xA;apple-code: 8  | Authorization is insufficient.&#xA;apple-code: 9  | The prepare queue is full.&#xA;apple-code: 10 | The attribute could not be found.&#xA;apple-code: 11 | The attribute is not long.&#xA;apple-code: 12 | The encryption key size is insufficient.&#xA;apple-code: 13 | The value&#39;s length is invalid.&#xA;apple-code: 14 | Unlikely error.&#xA;apple-code: 15 | Encryption is insufficient.&#xA;apple-code: 16 | The group type is unsupported.&#xA;apple-code: 17 | Resources are insufficient.&#xA;apple-code: 18 | Unknown ATT error.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GATT errors as they appear on Android&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;android-code: 1  | GATT_INVALID_HANDLE&#xA;android-code: 2  | GATT_READ_NOT_PERMITTED&#xA;android-code: 3  | GATT_WRITE_NOT_PERMITTED&#xA;android-code: 4  | GATT_INVALID_PDU&#xA;android-code: 5  | GATT_INSUFFICIENT_AUTHENTICATION&#xA;android-code: 6  | GATT_REQUEST_NOT_SUPPORTED&#xA;android-code: 7  | GATT_INVALID_OFFSET&#xA;android-code: 8  | GATT_INSUFFICIENT_AUTHORIZATION&#xA;android-code: 9  | GATT_PREPARE_QUEUE_FULL&#xA;android-code: 10 | GATT_ATTR_NOT_FOUND&#xA;android-code: 11 | GATT_ATTR_NOT_LONG&#xA;android-code: 12 | GATT_INSUFFICIENT_KEY_SIZE&#xA;android-code: 13 | GATT_INVALID_ATTRIBUTE_LENGTH&#xA;android-code: 14 | GATT_UNLIKELY&#xA;android-code: 15 | GATT_INSUFFICIENT_ENCRYPTION&#xA;android-code: 16 | GATT_UNSUPPORTED_GROUP&#xA;android-code: 17 | GATT_INSUFFICIENT_RESOURCES&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Descriptions&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1   | Invalid Handle                 | The attribute handle given was not valid on this server.&#xA;2   | Read Not Permitted             | The attribute cannot be read.&#xA;3   | Write Not Permitted            | The attribute cannot be written.&#xA;4   | Invalid PDU                    | The attribute PDU was invalid.&#xA;5   | Insufficient Authentication    | The attribute requires authentication before it can be read or written.&#xA;6   | Request Not Supported          | Attribute server does not support the request received from the client.&#xA;7   | Invalid Offset                 | Offset specified was past the end of the attribute.&#xA;8   | Insufficient Authorization     | The attribute requires an authorization before it can be read or written.&#xA;9   | Prepare Queue Full             | Too many prepare writes have been queued.&#xA;10  | Attribute Not Found            | No attribute found within the given attribute handle range.&#xA;11  | Attribute Not Long             | The attribute cannot be read or written using the Read Blob or Write Blob requests.&#xA;12  | Insufficient Key Size          | The Encryption Key Size used for encrypting this link is insufficient.&#xA;13  | Invalid Attribute Value Length | The attribute value length is invalid for the operation.&#xA;14  | Unlikely Error                 | The request has encountered an unlikely error and cannot be completed.&#xA;15  | Insufficient Encryption        | The attribute requires encryption before it can be read or written.&#xA;16  | Unsupported Group Type         | The attribute type is not a supported grouping as defined by a higher layer.&#xA;17  | Insufficient Resources         | Insufficient Resources to complete the request.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;characteristic write fails&lt;/h3&gt; &#xA;&lt;p&gt;First, check the &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#list-of-bluetooth-gatt-errors&#34;&gt;List of Bluetooth GATT Errors&lt;/a&gt; for your error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. your bluetooth device turned off, or is out of range&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your device turns off or crashes during a write, it will cause a failure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Your Bluetooth device has bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maybe your device crashed, or is not sending a response due to software bugs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. there is radio interference&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth is wireless and will not always work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Characteristic read fails&lt;/h3&gt; &#xA;&lt;p&gt;First, check the &lt;a href=&#34;https://raw.githubusercontent.com/chipweinberger/flutter_blue_plus/master/#list-of-bluetooth-gatt-errors&#34;&gt;List of Bluetooth GATT Errors&lt;/a&gt; for your error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. your bluetooth device turned off, or is out of range&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your device turns off or crashes during a read, it will cause a failure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Your Bluetooth device has bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maybe your device crashed, or is not sending a response due to software bugs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. there is radio interference&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bluetooth is wireless and will not always work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;onValueReceived is never called (or lastValueStream)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. you are not calling the right function&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lastValueStream&lt;/code&gt; is called for &lt;code&gt;await chr.read()&lt;/code&gt; &amp;amp; &lt;code&gt;await chr.write()&lt;/code&gt; &amp;amp; &lt;code&gt;await chr.setNotifyValue(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;onValueReceived&lt;/code&gt; is only called for &lt;code&gt;await chr.read()&lt;/code&gt; &amp;amp; &lt;code&gt;await chr.setNotifyValue(true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. your device has nothing to send&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;await chr.setNotifyValue(true)&lt;/code&gt;, your &lt;em&gt;device&lt;/em&gt; chooses when to send data.&lt;/p&gt; &#xA;&lt;p&gt;Try interacting with your device to get it to send new data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. your device has bugs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try rebooting your ble device.&lt;/p&gt; &#xA;&lt;p&gt;Some ble devices have buggy software and stop sending data&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;onValueReceived data is split up (or lastValueStream)&lt;/h3&gt; &#xA;&lt;p&gt;Verify that the mtu is large enough to hold your message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;device.mtu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it still happens, it is a problem with your peripheral device.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;onValueReceived is called with duplicate data (or lastValueStream)&lt;/h3&gt; &#xA;&lt;p&gt;You are probably forgetting to cancel the original &lt;code&gt;chr.onValueReceived.listen&lt;/code&gt; resulting in multiple listens.&lt;/p&gt; &#xA;&lt;p&gt;The easiest solution is to use &lt;code&gt;device.cancelWhenDisconnected(subscription)&lt;/code&gt; to cancel device subscriptions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final subscription = chr.onValueReceived.listen((value) {&#xA;    // ...&#xA;});&#xA;&#xA;// make sure you have this line!&#xA;device.cancelWhenDisconnected(subscription);&#xA;&#xA;await characteristic.setNotifyValue(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ANDROID_SPECIFIC_ERROR&lt;/h3&gt; &#xA;&lt;p&gt;There is no 100% solution.&lt;/p&gt; &#xA;&lt;p&gt;FBP already has mitigations for this error, but Android will still fail with this code randomly.&lt;/p&gt; &#xA;&lt;p&gt;The recommended solution is to &lt;code&gt;catch&lt;/code&gt; the error, and retry.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;android pairing popup appears twice&lt;/h3&gt; &#xA;&lt;p&gt;This is a bug in android itself.&lt;/p&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;createBond()&lt;/code&gt; yourself just after connecting and this will resolve the issue.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;MissingPluginException(No implementation found for method XXXX ...)&lt;/h3&gt; &#xA;&lt;p&gt;If you just added flutter_blue_plus to your pubspec.yaml, a hot reload / hot restart is not enough.&lt;/p&gt; &#xA;&lt;p&gt;You need to fully stop your app and run again so that the native plugins are loaded.&lt;/p&gt; &#xA;&lt;p&gt;Also try &lt;code&gt;flutter clean&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>