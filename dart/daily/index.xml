<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-30T01:33:14Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trevorwang/retrofit.dart</title>
    <updated>2023-06-30T01:33:14Z</updated>
    <id>tag:github.com,2023-06-30:/trevorwang/retrofit.dart</id>
    <link href="https://github.com/trevorwang/retrofit.dart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;retrofit.dart is an dio client generator using source_gen and inspired by Chopper and Retrofit.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Retrofit For Dart&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/retrofit&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/retrofit?label=retrofit&amp;amp;style=flat-square&#34; alt=&#34;retrofit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/retrofit_generator&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/retrofit_generator?label=retrofit_generator&amp;amp;style=flat-square&#34; alt=&#34;retrofit_generator&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pub/likes/retrofit&#34; alt=&#34;Pub Likes&#34;&gt; &lt;a href=&#34;https://github.com/trevorwang/retrofit.dart/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/trevorwang/retrofit.dart/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Testing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;retrofit.dart is a type conversion &lt;a href=&#34;https://github.com/flutterchina/dio/&#34;&gt;dio&lt;/a&gt; client generator using &lt;a href=&#34;https://github.com/dart-lang/source_gen&#34;&gt;source_gen&lt;/a&gt; and inspired by &lt;a href=&#34;https://github.com/lejard-h/chopper&#34;&gt;Chopper&lt;/a&gt; and &lt;a href=&#34;https://github.com/square/retrofit&#34;&gt;Retrofit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Generator&lt;/h3&gt; &#xA;&lt;p&gt;Add the generator to your dev dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  retrofit: &#39;&amp;gt;=4.0.0 &amp;lt;5.0.0&#39;&#xA;  logger: any  #for logging purpose&#xA;  json_annotation: ^4.8.1&#xA;&#xA;dev_dependencies:&#xA;  retrofit_generator: &#39;&amp;gt;=7.0.0 &amp;lt;8.0.0&#39;   // required dart &amp;gt;=2.19&#xA;  build_runner: &#39;&amp;gt;=2.3.0 &amp;lt;4.0.0&#39;&#xA;  json_serializable: ^6.6.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Define and Generate your API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:json_annotation/json_annotation.dart&#39;;&#xA;import &#39;package:retrofit/retrofit.dart&#39;;&#xA;&#xA;part &#39;example.g.dart&#39;;&#xA;&#xA;@RestApi(baseUrl: &#39;https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v1/&#39;)&#xA;abstract class RestClient {&#xA;  factory RestClient(Dio dio, {String baseUrl}) = _RestClient;&#xA;&#xA;  @GET(&#39;/tasks&#39;)&#xA;  Future&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt; getTasks();&#xA;}&#xA;&#xA;@JsonSerializable()&#xA;class Task {&#xA;  const Task({this.id, this.name, this.avatar, this.createdAt});&#xA;&#xA;  factory Task.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$TaskFromJson(json);&#xA;&#xA;  final String? id;&#xA;  final String? name;&#xA;  final String? avatar;&#xA;  final String? createdAt;&#xA;&#xA;  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$TaskToJson(this);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run the generator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# dart&#xA;dart pub run build_runner build&#xA;&#xA;# flutter&#x9;&#xA;flutter pub run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use it&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:logger/logger.dart&#39;;&#xA;import &#39;package:retrofit_example/example.dart&#39;;&#xA;&#xA;final logger = Logger();&#xA;&#xA;void main(List&amp;lt;String&amp;gt; args) {&#xA;  final dio = Dio(); // Provide a dio instance&#xA;  dio.options.headers[&#39;Demo-Header&#39;] = &#39;demo header&#39;; // config your dio headers globally&#xA;  final client = RestClient(dio);&#xA;&#xA;  client.getTasks().then((it) =&amp;gt; logger.i(it));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;h3&gt;Type Conversion&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Before you use the type conversion, please make sure that a &lt;code&gt; factory Task.fromJson(Map&amp;lt;String, dynamic&amp;gt; json)&lt;/code&gt; must be provided for each model class. &lt;code&gt;json_serializable&lt;/code&gt; is recommended to be used as the serialization tool.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@GET(&#39;/tasks&#39;)&#xA;Future&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt; getTasks();&#xA;&#xA;@JsonSerializable()&#xA;class Task {&#xA;  const Task({required this.name});&#xA;&#xA;  factory Task.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$TaskFromJson(json);&#xA;&#xA;  final String name;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Methods&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP methods in the below sample are supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  @GET(&#39;/tasks/{id}&#39;)&#xA;  Future&amp;lt;Task&amp;gt; getTask(@Path(&#39;id&#39;) String id);&#xA;  &#xA;  @GET(&#39;/demo&#39;)&#xA;  Future&amp;lt;String&amp;gt; queries(@Queries() Map&amp;lt;String, dynamic&amp;gt; queries);&#xA;  &#xA;  @GET(&#39;https://httpbin.org/get&#39;)&#xA;  Future&amp;lt;String&amp;gt; namedExample(&#xA;      @Query(&#39;apikey&#39;) String apiKey,&#xA;      @Query(&#39;scope&#39;) String scope,&#xA;      @Query(&#39;type&#39;) String type,&#xA;      @Query(&#39;from&#39;) int from);&#xA;  &#xA;  @PATCH(&#39;/tasks/{id}&#39;)&#xA;  Future&amp;lt;Task&amp;gt; updateTaskPart(&#xA;      @Path() String id, @Body() Map&amp;lt;String, dynamic&amp;gt; map);&#xA;  &#xA;  @PUT(&#39;/tasks/{id}&#39;)&#xA;  Future&amp;lt;Task&amp;gt; updateTask(@Path() String id, @Body() Task task);&#xA;  &#xA;  @DELETE(&#39;/tasks/{id}&#39;)&#xA;  Future&amp;lt;void&amp;gt; deleteTask(@Path() String id);&#xA;  &#xA;  @POST(&#39;/tasks&#39;)&#xA;  Future&amp;lt;Task&amp;gt; createTask(@Body() Task task);&#xA;  &#xA;  @POST(&#39;http://httpbin.org/post&#39;)&#xA;  Future&amp;lt;void&amp;gt; createNewTaskFromFile(@Part() File file);&#xA;  &#xA;  @POST(&#39;http://httpbin.org/post&#39;)&#xA;  @FormUrlEncoded()&#xA;  Future&amp;lt;String&amp;gt; postUrlEncodedFormData(@Field() String hello);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get original HTTP response&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  @GET(&#39;/tasks/{id}&#39;)&#xA;  Future&amp;lt;HttpResponse&amp;lt;Task&amp;gt;&amp;gt; getTask(@Path(&#39;id&#39;) String id);&#xA;&#xA;  @GET(&#39;/tasks&#39;)&#xA;  Future&amp;lt;HttpResponse&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt;&amp;gt; getTasks();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Header&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a HTTP header from the parameter of the method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  @GET(&#39;/tasks&#39;)&#xA;  Future&amp;lt;Task&amp;gt; getTasks(@Header(&#39;Content-Type&#39;) String contentType);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add static HTTP headers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  import &#39;package:dio/dio.dart&#39; hide Headers;&#xA;&#xA;  // ...&#xA;  &#xA;  @GET(&#39;/tasks&#39;)&#xA;  @Headers(&amp;lt;String, dynamic&amp;gt;{&#xA;    &#39;Content-Type&#39;: &#39;application/json&#39;,&#xA;    &#39;Custom-Header&#39;: &#39;Your header&#39;,&#xA;  })&#xA;  Future&amp;lt;Task&amp;gt; getTasks();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error Handling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;catchError(Object)&lt;/code&gt; should be used for capturing the exception and failed response. You can get the detailed response info from &lt;code&gt;DioError.response&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;client.getTask(&#39;2&#39;).then((it) {&#xA;  logger.i(it);&#xA;}).catchError((obj) {&#xA;  // non-200 error goes here.&#xA;  switch (obj.runtimeType) {&#xA;    case DioError:&#xA;      // Here&#39;s the sample to get the failed response error code and message&#xA;      final res = (obj as DioError).response;&#xA;      logger.e(&#39;Got error : ${res.statusCode} -&amp;gt; ${res.statusMessage}&#39;);&#xA;      break;&#xA;  default:&#xA;    break;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple endpoints support&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use multiple endpoints to your &lt;code&gt;RestClient&lt;/code&gt;, you should pass your base url when you initiate &lt;code&gt;RestClient&lt;/code&gt;. Any value defined in &lt;code&gt;RestApi&lt;/code&gt; will be ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@RestApi(baseUrl: &#39;this url will be ignored if baseUrl is passed&#39;)&#xA;abstract class RestClient {&#xA;  factory RestClient(Dio dio, {String baseUrl}) = _RestClient;&#xA;}&#xA;&#xA;final client = RestClient(dio, baseUrl: &#39;your base url&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the base url from &lt;code&gt;dio.option.baseUrl&lt;/code&gt;, which has lowest priority, please don&#39;t pass any parameter to &lt;code&gt;RestApi&lt;/code&gt; annotation and &lt;code&gt;RestClient&lt;/code&gt;&#39;s structure method.&lt;/p&gt; &#xA;&lt;h3&gt;Multithreading (Flutter only)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to parse models on a separate thread, you can take advantage of the &lt;code&gt;compute&lt;/code&gt; function, just like Dio does when converting String data responses into json objects.&lt;/p&gt; &#xA;&lt;p&gt;For each model that you use you will need to define 2 top-level functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FutureOr&amp;lt;Task&amp;gt; deserializeTask(Map&amp;lt;String, dynamic&amp;gt; json);&#xA;FutureOr&amp;lt;dynamic&amp;gt; serializeTask(Task object);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to handle lists of objects, either as return types or parameters, you should provide List counterparts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FutureOr&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt; deserializeTaskList(Map&amp;lt;String, dynamic&amp;gt; json);&#xA;FutureOr&amp;lt;dynamic&amp;gt; serializeTaskList(List&amp;lt;Task&amp;gt; objects);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, make sure you set your &lt;code&gt;@RestApi&lt;/code&gt; to use the &lt;code&gt;Parser.FlutterCompute&lt;/code&gt; parser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@RestApi(parser: Parser.FlutterCompute)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@RestApi(&#xA;  baseUrl: &#39;https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v1/&#39;,&#xA;  parser: Parser.FlutterCompute,&#xA;)&#xA;abstract class RestClient {&#xA;  factory RestClient(Dio dio, {String baseUrl}) = _RestClient;&#xA;&#xA;  @GET(&#39;/task&#39;)&#xA;  Future&amp;lt;Task&amp;gt; getTask();&#xA;&#xA;  @GET(&#39;/tasks&#39;)&#xA;  Future&amp;lt;List&amp;lt;Task&amp;gt;&amp;gt; getTasks();&#xA;&#xA;  @POST(&#39;/task&#39;)&#xA;  Future&amp;lt;void&amp;gt; updateTasks(Task task);&#xA;&#xA;  @POST(&#39;/tasks&#39;)&#xA;  Future&amp;lt;void&amp;gt; updateTasks(List&amp;lt;Task&amp;gt; tasks);&#xA;}&#xA;&#xA;Task deserializeTask(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; Task.fromJson(json);&#xA;&#xA;List&amp;lt;Task&amp;gt; deserializeTaskList(List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt; json) =&amp;gt;&#xA;    json.map((e) =&amp;gt; Task.fromJson(e)).toList();&#xA;&#xA;Map&amp;lt;String, dynamic&amp;gt; serializeTask(Task object) =&amp;gt; object.toJson();&#xA;&#xA;List&amp;lt;Map&amp;lt;String, dynamic&amp;gt;&amp;gt; serializeTaskList(List&amp;lt;Task&amp;gt; objects) =&amp;gt;&#xA;    objects.map((e) =&amp;gt; e.toJson()).toList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;N.B. Avoid using Map values, otherwise multiple background isolates will be spawned to perform the computation, which is extremely intensive for Dart.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class RestClient {&#xA;  factory RestClient(Dio dio, {String baseUrl}) = _RestClient;&#xA;&#xA;  // BAD&#xA;  @GET(&#39;/tasks&#39;)&#xA;  Future&amp;lt;Map&amp;lt;String, Task&amp;gt;&amp;gt; getTasks();&#xA;&#xA;  @POST(&#39;/tasks&#39;)&#xA;  Future&amp;lt;void&amp;gt; updateTasks(Map&amp;lt;String, Task&amp;gt; tasks);&#xA;&#xA;  // GOOD&#xA;  @GET(&#39;/tasks_names&#39;)&#xA;  Future&amp;lt;TaskNames&amp;gt; getTaskNames();&#xA;&#xA;  @POST(&#39;/tasks_names&#39;)&#xA;  Future&amp;lt;void&amp;gt; updateTasks(TaskNames tasks);&#xA;}&#xA;&#xA;TaskNames deserializeTaskNames(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;&#xA;    TaskNames.fromJson(json);&#xA;&#xA;@JsonSerializable&#xA;class TaskNames {&#xA;  const TaskNames({required this.taskNames});&#xA;&#xA;  final Map&amp;lt;String, Task&amp;gt; taskNames;&#xA;&#xA;  factory TaskNames.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;&#xA;      _$TaskNamesFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide generated files&lt;/h3&gt; &#xA;&lt;p&gt;For the project not to be confused with the files generated by the retrofit you can hide them.&lt;/p&gt; &#xA;&lt;h5&gt;Android studio&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;File -&amp;gt; Settings -&amp;gt; Editor -&amp;gt; File Types&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add &#34;ignore files and folders&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;*.g.dart&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt;. Thanks for providing the great IDE tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trevorwang/retrofit.dart/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/retrofitdart/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contributions of any kind welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Activities&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/76948dfe0698cce4724567ccbf38139823939350.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>