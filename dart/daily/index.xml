<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:32:57Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abhishh1/flutter_ui_utils</title>
    <updated>2022-11-01T01:32:57Z</updated>
    <id>tag:github.com,2022-11-01:/abhishh1/flutter_ui_utils</id>
    <link href="https://github.com/abhishh1/flutter_ui_utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>transistorsoft/flutter_background_fetch</title>
    <updated>2022-11-01T01:32:57Z</updated>
    <id>tag:github.com,2022-11-01:/transistorsoft/flutter_background_fetch</id>
    <link href="https://github.com/transistorsoft/flutter_background_fetch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Periodic callbacks in the background for both IOS and Android. Includes Android Headless mechanism&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter background_fetch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.transistorsoft.com&#34;&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/nm4s5ltlug63vv8/logo-150-print.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://www.transistorsoft.com&#34;&gt;&lt;strong&gt;Transistor Software&lt;/strong&gt;&lt;/a&gt;, creators of &lt;a href=&#34;https://www.transistorsoft.com/shop/products/flutter-background-geolocation&#34;&gt;&lt;strong&gt;Flutter Background Geolocation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Background Fetch is a &lt;em&gt;very&lt;/em&gt; simple plugin which will awaken an app in the background about &lt;strong&gt;every 15 minutes&lt;/strong&gt;, providing a short period of background running-time. This plugin will execute your provided &lt;code&gt;callbackFn&lt;/code&gt; whenever a background-fetch event occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üÜï&lt;/span&gt; Background Fetch now provides a &lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#executing-custom-tasks&#34;&gt;&lt;strong&gt;&lt;code&gt;scheduleTask&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; method for scheduling arbitrary &#34;one-shot&#34; or periodic tasks.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is &lt;strong&gt;no way&lt;/strong&gt; to increase the rate which a fetch-event occurs and this plugin sets the rate to the most frequent possible ‚Äî you will &lt;strong&gt;never&lt;/strong&gt; receive an event faster than &lt;strong&gt;15 minutes&lt;/strong&gt;. The operating-system will automatically throttle the rate the background-fetch events occur based upon usage patterns. Eg: if user hasn&#39;t turned on their phone for a long period of time, fetch events will occur less frequently.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#executing-custom-tasks&#34;&gt;&lt;strong&gt;&lt;code&gt;scheduleTask&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; seems only to fire when the device is plugged into power. &lt;strong&gt;&lt;code&gt;scheduleTask&lt;/code&gt; is designed for low-priority tasks and will never run as frequently as you desire&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The default &lt;code&gt;fetch&lt;/code&gt; task will run far more frequently.&lt;/li&gt; &#xA; &lt;li&gt;‚ö†Ô∏è When your app is &lt;strong&gt;terminated&lt;/strong&gt;, iOS &lt;em&gt;no longer fires events&lt;/em&gt; ‚Äî There is &lt;em&gt;no such thing&lt;/em&gt; as &lt;strong&gt;&lt;code&gt;stopOnTerminate: false&lt;/code&gt;&lt;/strong&gt; for iOS.&lt;/li&gt; &#xA; &lt;li&gt;iOS can task &lt;em&gt;days&lt;/em&gt; before Apple&#39;s machine-learning algorithm settles in and begins regularly firing events. Do not sit staring at your logs waiting for an event to fire. If your &lt;em&gt;simulated events&lt;/em&gt; work, that&#39;s all you need to know that everything is correctly configured.&lt;/li&gt; &#xA; &lt;li&gt;If the user doesn&#39;t open your &lt;em&gt;iOS&lt;/em&gt; app for long periods of time, &lt;em&gt;iOS&lt;/em&gt; will &lt;strong&gt;stop firing events&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Android plugin provides a &lt;a href=&#34;https://pub.dartlang.org/documentation/background_fetch/latest/background_fetch/BackgroundFetchConfig/enableHeadless.html&#34;&gt;Headless&lt;/a&gt; implementation allowing you to continue handling events even after app-termination.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h3&gt;üìö &lt;a href=&#34;https://pub.dartlang.org/documentation/background_fetch/latest/background_fetch/BackgroundFetch-class.html&#34;&gt;API Documentation&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#-installing-the-plugin&#34;&gt;Installing the Plugin&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#-setup-guides&#34;&gt;Setup Guides&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#-example&#34;&gt;Example&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#-debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/#-demo-application&#34;&gt;Demo Application&lt;/a&gt;&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî∑ Installing the plugin&lt;/h2&gt; &#xA;&lt;p&gt;üìÇ &lt;strong&gt;&lt;code&gt;pubspec.yaml&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  background_fetch: &#39;^1.0.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Or latest from Git:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  background_fetch:&#xA;    git:&#xA;      url: https://github.com/transistorsoft/flutter_background_fetch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî∑ Setup Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/transistorsoft/flutter_background_fetch/raw/master/help/INSTALL-IOS.md&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/transistorsoft/flutter_background_fetch/raw/master/help/INSTALL-ANDROID.md&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî∑ Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:async&#39;;&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter/services.dart&#39;;&#xA;&#xA;import &#39;package:background_fetch/background_fetch.dart&#39;;&#xA;&#xA;// [Android-only] This &#34;Headless Task&#34; is run when the Android app is terminated with `enableHeadless: true`&#xA;// Be sure to annotate your callback function to avoid issues in release mode on Flutter &amp;gt;= 3.3.0&#xA;@pragma(&#39;vm:entry-point&#39;)&#xA;void backgroundFetchHeadlessTask(HeadlessTask task) async {&#xA;  String taskId = task.taskId;&#xA;  bool isTimeout = task.timeout;&#xA;  if (isTimeout) {&#xA;    // This task has exceeded its allowed running-time.  &#xA;    // You must stop what you&#39;re doing and immediately .finish(taskId)&#xA;    print(&#34;[BackgroundFetch] Headless task timed-out: $taskId&#34;);&#xA;    BackgroundFetch.finish(taskId);&#xA;    return;&#xA;  }  &#xA;  print(&#39;[BackgroundFetch] Headless event received.&#39;);&#xA;  // Do your work here...&#xA;  BackgroundFetch.finish(taskId);&#xA;}&#xA;&#xA;void main() {&#xA;  // Enable integration testing with the Flutter Driver extension.&#xA;  // See https://flutter.io/testing/ for more info.&#xA;  runApp(new MyApp());&#xA;&#xA;  // Register to receive BackgroundFetch events after app is terminated.&#xA;  // Requires {stopOnTerminate: false, enableHeadless: true}&#xA;  BackgroundFetch.registerHeadlessTask(backgroundFetchHeadlessTask);&#xA;}&#xA;&#xA;class MyApp extends StatefulWidget {&#xA;  @override&#xA;  _MyAppState createState() =&amp;gt; new _MyAppState();&#xA;}&#xA;&#xA;class _MyAppState extends State&amp;lt;MyApp&amp;gt; {&#xA;  bool _enabled = true;&#xA;  int _status = 0;&#xA;  List&amp;lt;DateTime&amp;gt; _events = [];&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    initPlatformState();&#xA;  }&#xA;&#xA;  // Platform messages are asynchronous, so we initialize in an async method.&#xA;  Future&amp;lt;void&amp;gt; initPlatformState() async {&#xA;    // Configure BackgroundFetch.&#xA;    int status = await BackgroundFetch.configure(BackgroundFetchConfig(&#xA;        minimumFetchInterval: 15,&#xA;        stopOnTerminate: false,&#xA;        enableHeadless: true,&#xA;        requiresBatteryNotLow: false,&#xA;        requiresCharging: false,&#xA;        requiresStorageNotLow: false,&#xA;        requiresDeviceIdle: false,&#xA;        requiredNetworkType: NetworkType.NONE&#xA;    ), (String taskId) async {  // &amp;lt;-- Event handler&#xA;      // This is the fetch-event callback.&#xA;      print(&#34;[BackgroundFetch] Event received $taskId&#34;);&#xA;      setState(() {&#xA;        _events.insert(0, new DateTime.now());&#xA;      });&#xA;      // IMPORTANT:  You must signal completion of your task or the OS can punish your app&#xA;      // for taking too long in the background.&#xA;      BackgroundFetch.finish(taskId);&#xA;    }, (String taskId) async {  // &amp;lt;-- Task timeout handler.&#xA;      // This task has exceeded its allowed running-time.  You must stop what you&#39;re doing and immediately .finish(taskId)&#xA;      print(&#34;[BackgroundFetch] TASK TIMEOUT taskId: $taskId&#34;);&#xA;      BackgroundFetch.finish(taskId);&#xA;    });&#xA;    print(&#39;[BackgroundFetch] configure success: $status&#39;);&#xA;    setState(() {&#xA;      _status = status;&#xA;    });        &#xA;&#xA;    // If the widget was removed from the tree while the asynchronous platform&#xA;    // message was in flight, we want to discard the reply rather than calling&#xA;    // setState to update our non-existent appearance.&#xA;    if (!mounted) return;&#xA;  }&#xA;&#xA;  void _onClickEnable(enabled) {&#xA;    setState(() {&#xA;      _enabled = enabled;&#xA;    });&#xA;    if (enabled) {&#xA;      BackgroundFetch.start().then((int status) {&#xA;        print(&#39;[BackgroundFetch] start success: $status&#39;);&#xA;      }).catchError((e) {&#xA;        print(&#39;[BackgroundFetch] start FAILURE: $e&#39;);&#xA;      });&#xA;    } else {&#xA;      BackgroundFetch.stop().then((int status) {&#xA;        print(&#39;[BackgroundFetch] stop success: $status&#39;);&#xA;      });&#xA;    }&#xA;  }&#xA;&#xA;  void _onClickStatus() async {&#xA;    int status = await BackgroundFetch.status;&#xA;    print(&#39;[BackgroundFetch] status: $status&#39;);&#xA;    setState(() {&#xA;      _status = status;&#xA;    });&#xA;  }&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return new MaterialApp(&#xA;      home: new Scaffold(&#xA;        appBar: new AppBar(&#xA;          title: const Text(&#39;BackgroundFetch Example&#39;, style: TextStyle(color: Colors.black)),&#xA;          backgroundColor: Colors.amberAccent,&#xA;          brightness: Brightness.light,&#xA;          actions: &amp;lt;Widget&amp;gt;[&#xA;            Switch(value: _enabled, onChanged: _onClickEnable),&#xA;          ]&#xA;        ),&#xA;        body: Container(&#xA;          color: Colors.black,&#xA;          child: new ListView.builder(&#xA;              itemCount: _events.length,&#xA;              itemBuilder: (BuildContext context, int index) {&#xA;                DateTime timestamp = _events[index];&#xA;                return InputDecorator(&#xA;                    decoration: InputDecoration(&#xA;                        contentPadding: EdgeInsets.only(left: 10.0, top: 10.0, bottom: 0.0),&#xA;                        labelStyle: TextStyle(color: Colors.amberAccent, fontSize: 20.0),&#xA;                        labelText: &#34;[background fetch event]&#34;&#xA;                    ),&#xA;                    child: new Text(timestamp.toString(), style: TextStyle(color: Colors.white, fontSize: 16.0))&#xA;                );&#xA;              }&#xA;          ),&#xA;        ),&#xA;        bottomNavigationBar: BottomAppBar(&#xA;          child: Row(&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              RaisedButton(onPressed: _onClickStatus, child: Text(&#39;Status&#39;)),&#xA;              Container(child: Text(&#34;$_status&#34;), margin: EdgeInsets.only(left: 20.0))&#xA;            ]&#xA;          )&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing Custom Tasks&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the default background-fetch task defined by &lt;code&gt;BackgroundFetch.configure&lt;/code&gt;, you may also execute your own arbitrary &#34;oneshot&#34; or periodic tasks (iOS requires additional &lt;a href=&#34;https://raw.githubusercontent.com/transistorsoft/flutter_background_fetch/master/help/INSTALL-IOS.md&#34;&gt;Setup Instructions&lt;/a&gt;). However, all events will be fired into the Callback provided to &lt;strong&gt;&lt;code&gt;BackgroundFetch#configure&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;‚ö†Ô∏è iOS:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scheduleTask&lt;/code&gt; on &lt;em&gt;iOS&lt;/em&gt; seems only to run when the device is plugged into power.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scheduleTask&lt;/code&gt; on &lt;em&gt;iOS&lt;/em&gt; are designed for &lt;em&gt;low-priority&lt;/em&gt; tasks, such as purging cache files ‚Äî they tend to be &lt;strong&gt;unreliable for mission-critical tasks&lt;/strong&gt;. &lt;code&gt;scheduleTask&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; run as frequently as you want.&lt;/li&gt; &#xA; &lt;li&gt;The default &lt;code&gt;fetch&lt;/code&gt; event is much more reliable and fires far more often.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scheduleTask&lt;/code&gt; on &lt;em&gt;iOS&lt;/em&gt; stop when the &lt;em&gt;user&lt;/em&gt; terminates the app. There is no such thing as &lt;code&gt;stopOnTerminate: false&lt;/code&gt; for &lt;em&gt;iOS&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Step 1:  Configure BackgroundFetch as usual.&#xA;int status = await BackgroundFetch.configure(BackgroundFetchConfig(&#xA;  minimumFetchInterval: 15&#xA;), (String taskId) async {  // &amp;lt;-- Event callback.&#xA;  // This is the fetch-event callback.&#xA;  print(&#34;[BackgroundFetch] taskId: $taskId&#34;);&#xA;&#xA;  // Use a switch statement to route task-handling.&#xA;  switch (taskId) {&#xA;    case &#39;com.transistorsoft.customtask&#39;:&#xA;      print(&#34;Received custom task&#34;);&#xA;      break;&#xA;    default:&#xA;      print(&#34;Default fetch task&#34;);&#xA;  }&#xA;  // Finish, providing received taskId.&#xA;  BackgroundFetch.finish(taskId);&#xA;}, (String taskId) async {  // &amp;lt;-- Event timeout callback&#xA;  // This task has exceeded its allowed running-time.  You must stop what you&#39;re doing and immediately .finish(taskId)&#xA;  print(&#34;[BackgroundFetch] TIMEOUT taskId: $taskId&#34;);&#xA;  BackgroundFetch.finish(taskId);&#xA;});&#xA;&#xA;// Step 2:  Schedule a custom &#34;oneshot&#34; task &#34;com.transistorsoft.customtask&#34; to execute 5000ms from now.&#xA;BackgroundFetch.scheduleTask(TaskConfig(&#xA;  taskId: &#34;com.transistorsoft.customtask&#34;,&#xA;  delay: 5000  // &amp;lt;-- milliseconds&#xA;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî∑ Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;span&gt;üÜï&lt;/span&gt; Simulating events for &lt;code&gt;BGTaskScheduler&lt;/code&gt; API for iOS 13+&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ö†Ô∏è At the time of writing, the new task simulator does not yet work in Simulator; Only real devices.&lt;/li&gt; &#xA; &lt;li&gt;After running your app in XCode, Click the &lt;code&gt;[||]&lt;/code&gt; button to initiate a &lt;em&gt;Breakpoint&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In the console &lt;code&gt;(lldb)&lt;/code&gt;, paste the following command (&lt;strong&gt;Note:&lt;/strong&gt; use cursor up/down keys to cycle through previously run commands):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;e -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateLaunchForTaskWithIdentifier:@&#34;com.transistorsoft.fetch&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;[ &amp;gt; ]&lt;/code&gt; button to continue. The task will execute and the Callback function provided to &lt;strong&gt;&lt;code&gt;BackgroundFetch.configure&lt;/code&gt;&lt;/strong&gt; will receive the event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/zr7w3g8ivf71u32/ios-simulate-bgtask-pause.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/87c9uctr1ka3s1e/ios-simulate-bgtask-paste.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/s/bsv0avap5c2h7ed/ios-simulate-bgtask-play.png?dl=1&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Simulating task-timeout events&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only the new &lt;code&gt;BGTaskScheduler&lt;/code&gt; api supports &lt;em&gt;simulated&lt;/em&gt; task-timeout events. To simulate a task-timeout, your &lt;code&gt;fetchCallback&lt;/code&gt; must not call &lt;code&gt;BackgroundFetch.finish(taskId)&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;BackgroundFetch.configure(BackgroundFetchConfig(&#xA;  minimumFetchInterval: 15&#xA;), (String taskId) async {  // &amp;lt;-- Event callback.&#xA;  // This is the fetch-event callback.&#xA;  print(&#34;[BackgroundFetch] taskId: $taskId&#34;); &#xA;  //BackgroundFetch.finish(taskId); // &amp;lt;-- Disable .finish(taskId) when simulating an iOS task timeout&#xA;}, (String taskId) async {  // &amp;lt;-- Event timeout callback&#xA;  // This task has exceeded its allowed running-time.  You must stop what you&#39;re doing and immediately .finish(taskId)&#xA;  print(&#34;[BackgroundFetch] TIMEOUT taskId: $taskId&#34;);&#xA;  BackgroundFetch.finish(taskId);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now simulate an iOS task timeout as follows, in the same manner as simulating an event above:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-obj-c&#34;&gt;e -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateExpirationForTaskWithIdentifier:@&#34;com.transistorsoft.fetch&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Old &lt;code&gt;BackgroundFetch&lt;/code&gt; API&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulate background fetch events in XCode using &lt;strong&gt;&lt;code&gt;Debug-&amp;gt;Simulate Background Fetch&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;iOS can take some hours or even days to start a consistently scheduling background-fetch events since iOS schedules fetch events based upon the user&#39;s patterns of activity. If &lt;em&gt;Simulate Background Fetch&lt;/em&gt; works, your can be &lt;strong&gt;sure&lt;/strong&gt; that everything is working fine. You just need to wait.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Observe plugin logs in &lt;code&gt;$ adb logcat&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ adb logcat *:S flutter:V, TSBackgroundFetch:V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.dropbox.com/s/fmrk5i06lojf9yh/android-adb-logcat-TSBackgroundFetch.png?dl=1&#34; alt=&#34;&#34;&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulate a background-fetch event on a device (insert &lt;em&gt;&amp;lt;your.application.id&amp;gt;&lt;/em&gt;) (only works for sdk &lt;code&gt;21+&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ adb shell cmd jobscheduler run -f &amp;lt;your.application.id&amp;gt; 999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For devices with sdk &lt;code&gt;&amp;lt;21&lt;/code&gt;, simulate a &#34;Headless&#34; event with (insert &lt;em&gt;&amp;lt;your.application.id&amp;gt;&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ adb shell am broadcast -a &amp;lt;your.application.id&amp;gt;.event.BACKGROUND_FETCH&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî∑ Demo Application&lt;/h2&gt; &#xA;&lt;p&gt;This repo contains an &lt;code&gt;/example&lt;/code&gt; folder. Clone this repo and open the &lt;code&gt;/example&lt;/code&gt; folder in Android Studio.&lt;/p&gt; &#xA;&lt;h2&gt;üî∑ Implementation&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Implements &lt;a href=&#34;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/Reference/Reference.html#//apple_ref/occ/intfm/UIApplicationDelegate/application:performFetchWithCompletionHandler:&#34;&gt;performFetchWithCompletionHandler&lt;/a&gt;, firing a custom event subscribed-to in cordova plugin.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android implements background fetch using two different mechanisms, depending on the Android SDK version. Where the SDK version is &lt;code&gt;&amp;gt;= LOLLIPOP&lt;/code&gt;, the new &lt;a href=&#34;https://developer.android.com/reference/android/app/job/JobScheduler.html&#34;&gt;&lt;code&gt;JobScheduler&lt;/code&gt;&lt;/a&gt; API is used. Otherwise, the old &lt;a href=&#34;https://developer.android.com/reference/android/app/AlarmManager.html&#34;&gt;&lt;code&gt;AlarmManager&lt;/code&gt;&lt;/a&gt; will be used.&lt;/p&gt; &#xA;&lt;p&gt;Unlike iOS, the Android implementation &lt;em&gt;can&lt;/em&gt; continue to operate after application terminate (&lt;code&gt;stopOnTerminate: false&lt;/code&gt;) or device reboot (&lt;code&gt;startOnBoot: true&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;üî∑ Licence&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2018 Chris Scott, Transistor Software &lt;a href=&#34;mailto:chris@transistorsoft.com&#34;&gt;chris@transistorsoft.com&lt;/a&gt; &lt;a href=&#34;https://www.transistorsoft.com&#34;&gt;https://www.transistorsoft.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kara-Zor-El/JellyBook</title>
    <updated>2022-11-01T01:32:57Z</updated>
    <id>tag:github.com,2022-11-01:/Kara-Zor-El/JellyBook</id>
    <link href="https://github.com/Kara-Zor-El/JellyBook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A nice way to read books and comics on Jellyfin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JellyBook&lt;/h1&gt; &#xA;&lt;p&gt;Hi, this is still in a very early, pre-alpha stage. I have been working hard to try to get the app out by this weekend in a working state but I unfortinately was unable to do so.&lt;/p&gt; &#xA;&lt;p&gt;I have decided to still release this early build in hope to recieve some attention and possible help.&lt;/p&gt; &#xA;&lt;h2&gt;Currenty supported formats:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.cbz&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.cbr&lt;/code&gt; files (initial support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Where do i begin, lol&lt;/li&gt; &#xA; &lt;li&gt;Add support for actual reading&lt;/li&gt; &#xA; &lt;li&gt;pdf, epub, etc... support&lt;/li&gt; &#xA; &lt;li&gt;Allow local caching of current files and still able to browse what books in collection when offline (proper offline support)&lt;/li&gt; &#xA; &lt;li&gt;Remember user support&lt;/li&gt; &#xA; &lt;li&gt;Multiple server support&lt;/li&gt; &#xA; &lt;li&gt;Settings page&lt;/li&gt; &#xA; &lt;li&gt;For the download completed screen I want to add a image or gif of a jellyfish reading a book (credit to thornbill on the Matrix server for that idea)&lt;/li&gt; &#xA; &lt;li&gt;I want to improve the UI on the main menu screne and have a progress bar on already read books&lt;/li&gt; &#xA; &lt;li&gt;Eat hot chip!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;code&gt;kmp3e#9430&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix: &lt;code&gt;@kmp3e:matrix.org&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Feel free to submit a issue on GitHub&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>