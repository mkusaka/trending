<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-23T01:37:18Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rrousselGit/freezed</title>
    <updated>2022-06-23T01:37:18Z</updated>
    <id>tag:github.com,2022-06-23:/rrousselGit/freezed</id>
    <link href="https://github.com/rrousselGit/freezed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code generation for immutable classes that has a simple syntax/API without compromising on the features.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/freezed/raw/master/packages/freezed/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/freezed/raw/master/resources/translations/ko_KR/README.md&#34;&gt;한국어&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/rrousselGit/freezed/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/freezed.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Bbumvej&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/765557403865186374.svg?logo=discord&amp;amp;color=blue&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/favorites&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/provider/master/resources/flutter_favorite.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt;, yet another code generator for data-classes/unions/pattern-matching/cloning.&lt;/p&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;Dart is awesome, but defining a &#34;model&#34; can be tedious. We may have to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;define a constructor + the properties&lt;/li&gt; &#xA; &lt;li&gt;override &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;operator ==&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;implement a &lt;code&gt;copyWith&lt;/code&gt; method to clone the object&lt;/li&gt; &#xA; &lt;li&gt;handling de/serialization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On top of that, Dart is also missing features such as union types and pattern-matching.&lt;/p&gt; &#xA;&lt;p&gt;Implementing all of this can take hundreds of lines, which are error-prone and the readability of your model significantly.&lt;/p&gt; &#xA;&lt;p&gt;Freezed tries to fix that by implementing most of this for you, allowing you to focus on the definition of your model.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Before&lt;/th&gt; &#xA;   &lt;th&gt;After&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/resources/before.png&#34; alt=&#34;before&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/resources/after.png&#34; alt=&#34;before&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Index&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#index&#34;&gt;Index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#disabling-invalid_annotation_target-warning-and-warning-in-generates-files&#34;&gt;Disabling invalid_annotation_target warning and warning in generates files.&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#run-the-generator&#34;&gt;Run the generator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#creating-a-model-using-freezed&#34;&gt;Creating a Model using Freezed&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#defining-a-mutable-class-instead-of-an-immutable-one&#34;&gt;Defining a mutable class instead of an immutable one&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#allowing-the-mutation-of-listsmapssets&#34;&gt;Allowing the mutation of Lists/Maps/Sets&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#how-copywith-works&#34;&gt;How copyWith works&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#going-further-deep-copy&#34;&gt;Going further: Deep copy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#adding-getters-and-methods-to-our-models&#34;&gt;Adding getters and methods to our models&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#asserts&#34;&gt;Asserts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#default-values&#34;&gt;Default values&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#decorators-and-comments&#34;&gt;Decorators and comments&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#union-types-and-sealed-classes&#34;&gt;Union types and Sealed classes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#shared-properties&#34;&gt;Shared properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#using-pattern-matching-to-read-non-shared-properties&#34;&gt;Using pattern matching to read non-shared properties&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;When&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#map&#34;&gt;Map&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#using-isas-to-read-the-content-of-a-freezed-class&#34;&gt;Using is/as to read the content of a Freezed class&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#mixins-and-interfaces-for-individual-classes-for-union-types&#34;&gt;Mixins and Interfaces for individual classes for union types&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#fromjsontojson&#34;&gt;FromJson/ToJson&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#fromjson---classes-with-multiple-constructors&#34;&gt;fromJSON - classes with multiple constructors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#configurations&#34;&gt;Configurations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#changing-the-behavior-for-a-specific-model&#34;&gt;Changing the behavior for a specific model&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#changing-the-behavior-for-the-entire-project&#34;&gt;Changing the behavior for the entire project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#utilities&#34;&gt;Utilities&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#freezed-extension-for-vscode&#34;&gt;Freezed extension for VSCode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#freezed-extension-for-intellijandroid-studio&#34;&gt;Freezed extension for IntelliJ/Android Studio&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;To use &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt;, you will need your typical &lt;a href=&#34;https://pub.dev/packages/build_runner&#34;&gt;build_runner&lt;/a&gt;/code-generator setup.&lt;br&gt; First, install &lt;a href=&#34;https://pub.dev/packages/build_runner&#34;&gt;build_runner&lt;/a&gt; and &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; by adding them to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;If you are using creating a Flutter project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ flutter pub add freezed_annotation&#xA;$ flutter pub add --dev build_runner&#xA;$ flutter pub add --dev freezed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using creating a Dart project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ dart pub add freezed_annotation&#xA;$ dart pub add --dev build_runner&#xA;$ dart pub add --dev freezed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs three packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/build_runner&#34;&gt;build_runner&lt;/a&gt;, the tool to run code-generators&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;freezed&lt;/a&gt;, the code generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/freezed_annotation&#34;&gt;freezed_annotation&lt;/a&gt;, a package containing annotations for &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;freezed&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Disabling invalid_annotation_target warning and warning in generates files.&lt;/h3&gt; &#xA;&lt;p&gt;If you plan on using &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; in combination with &lt;code&gt;json_serializable&lt;/code&gt;, recent versions of &lt;code&gt;json_serializable&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; may require you to disable the &lt;code&gt;invalid_annotation_target&lt;/code&gt; warning.&lt;/p&gt; &#xA;&lt;p&gt;To do that, you can add the following to an &lt;code&gt;analysis_options.yaml&lt;/code&gt; at the root of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;analyzer:&#xA;  errors:&#xA;    invalid_annotation_target: ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the generator&lt;/h2&gt; &#xA;&lt;p&gt;To run the code generator, execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dart run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Flutter projects, you can also run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that like most code-generators, &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will need you to both import the annotation (&lt;a href=&#34;https://pub.dartlang.org/packages/freezed_annotation&#34;&gt;freezed_annotation&lt;/a&gt;) and use the &lt;code&gt;part&lt;/code&gt; keyword on the top of your files.&lt;/p&gt; &#xA;&lt;p&gt;As such, a file that wants to use &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:freezed_annotation/freezed_annotation.dart&#39;;&#xA;&#xA;part &#39;my_file.freezed.dart&#39;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;CONSIDER&lt;/strong&gt; also importing &lt;code&gt;package:flutter/foundation.dart&lt;/code&gt;.&lt;br&gt; The reason being, importing &lt;code&gt;foundation.dart&lt;/code&gt; also imports classes to make an object nicely readable in Flutter&#39;s devtool.&lt;br&gt; If you import &lt;code&gt;foundation.dart&lt;/code&gt;, &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will automatically do it for you.&lt;/p&gt; &#xA;&lt;h2&gt;Creating a Model using Freezed&lt;/h2&gt; &#xA;&lt;p&gt;An example is better than a long abstract explanation, so here&#39;s a typical Freezed class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// This file is &#34;main.dart&#34;&#xA;import &#39;package:freezed_annotation/freezed_annotation.dart&#39;;&#xA;import &#39;package:flutter/foundation.dart&#39;;&#xA;&#xA;// required: associates our `main.dart` with the code generated by Freezed&#xA;part &#39;main.freezed.dart&#39;;&#xA;// optional: Since our Person class is serializable, we must add this line.&#xA;// But if Person was not serializable, we could skip it.&#xA;part &#39;main.g.dart&#39;;&#xA;&#xA;@freezed&#xA;class Person with _$Person {&#xA;  const factory Person({&#xA;    required String firstName,&#xA;    required String lastName,&#xA;    required int age,&#xA;  }) = _Person;&#xA;&#xA;  factory Person.fromJson(Map&amp;lt;String, Object?&amp;gt; json)&#xA;      =&amp;gt; _$PersonFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following snippet defines a model named &lt;code&gt;Person&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Person&lt;/code&gt; has 3 properties: &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Because we are using &lt;code&gt;@freezed&lt;/code&gt;, all of this class&#39;s properties are immutable.&lt;/li&gt; &#xA; &lt;li&gt;Since we defined a &lt;code&gt;fromJson&lt;/code&gt;, this class is de/serializable. Freezed will add a &lt;code&gt;toJson&lt;/code&gt; method for us.&lt;/li&gt; &#xA; &lt;li&gt;Freezed will also automatically generate: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a &lt;code&gt;copyWith&lt;/code&gt; method, for cloning the object with different properties&lt;/li&gt; &#xA;   &lt;li&gt;a &lt;code&gt;toString&lt;/code&gt; override listing all the properties of the object&lt;/li&gt; &#xA;   &lt;li&gt;an &lt;code&gt;operator ==&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; override (since &lt;code&gt;Person&lt;/code&gt; is immutable)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;From this example, we can notice a few things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is necessary to annotate our model with &lt;code&gt;@freezed&lt;/code&gt; (or &lt;code&gt;@Freezed&lt;/code&gt;/&lt;code&gt;@unfreezed&lt;/code&gt;, more about that later).&lt;br&gt; This annotation is what tells Freezed to generate code for that class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We must also apply a mixin with the name of our class, prefixed by &lt;code&gt;_$&lt;/code&gt;. This mixin is what defines the various properties/methods of our object.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When defining a constructor in a Freezed class, we should use the &lt;code&gt;factory&lt;/code&gt; keyword as showcased (&lt;code&gt;const&lt;/code&gt; is optional).&lt;br&gt; The parameters of this constructor will be the list of all properties that this class contains.&lt;br&gt; Parameters &lt;strong&gt;don&#39;t&lt;/strong&gt; have to be named and required. Feel free to use positional optional parameters if you want!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Defining a mutable class instead of an immutable one&lt;/h3&gt; &#xA;&lt;p&gt;So far, we&#39;ve seen how to define a model where all of its properties are &lt;code&gt;final&lt;/code&gt;; but you may want to define mutable properties in your model.&lt;/p&gt; &#xA;&lt;p&gt;Freezed supports this, by replacing the &lt;code&gt;@freezed&lt;/code&gt; annotation with &lt;code&gt;@unfreezed&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@unfreezed&#xA;class Person with _$Person {&#xA;  factory Person({&#xA;    required String firstName,&#xA;    required String lastName,&#xA;    required final int age,&#xA;  }) = _Person;&#xA;&#xA;  factory Person.fromJson(Map&amp;lt;String, Object?&amp;gt; json)&#xA;      =&amp;gt; _$PersonFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This defines a model mostly identical to our previous snippets, but with the following differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; are now mutable. As such, we can write:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  var person = Person(firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, age: 42);&#xA;&#xA;  person.firstName = &#39;Mona&#39;;&#xA;  person.lastName = &#39;Lisa&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;age&lt;/code&gt; is still immutable, because we explicitly marked the property as &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Person&lt;/code&gt; no-longer has a custom ==/hashCode implementation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  var john = Person(firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, age: 42);&#xA;  var john2 = Person(firstName: &#39;John&#39;, lastName: &#39;Smith&#39;, age: 42);&#xA;&#xA;  print(john == john2); // false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Of course, since our &lt;code&gt;Person&lt;/code&gt; class is mutable, it is no-longer possible to instantiate it using &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Allowing the mutation of Lists/Maps/Sets&lt;/h3&gt; &#xA;&lt;p&gt;By default when using &lt;code&gt;@freezed&lt;/code&gt; (but not &lt;code&gt;@unfreezed&lt;/code&gt;), properties of type &lt;code&gt;List&lt;/code&gt;/&lt;code&gt;Map&lt;/code&gt;/&lt;code&gt;Set&lt;/code&gt; are transformed to be immutable.&lt;/p&gt; &#xA;&lt;p&gt;This means that writing the following will cause a runtime exception:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Example with _$Example {&#xA;  factory Example(List&amp;lt;int&amp;gt; list) = _Example;&#xA;}&#xA;&#xA;void main() {&#xA;  var example = Example([]);&#xA;  example.list.add(42); // throws because we are mutating a collection&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That behavior can be disabled by writing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@Freezed(makeCollectionsUnmodifiable: false)&#xA;class Example with _$Example {&#xA;  factory Example(List&amp;lt;int&amp;gt; list) = _Example;&#xA;}&#xA;&#xA;void main() {&#xA;  var example = Example([]);&#xA;  example.list.add(42); // OK&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How copyWith works&lt;/h3&gt; &#xA;&lt;p&gt;As explained before, when defining a model using Freezed, then the code-generator will automatically generate a &lt;code&gt;copyWith&lt;/code&gt; method for us.&lt;br&gt; This method is used to clone an object with different values.&lt;/p&gt; &#xA;&lt;p&gt;For example if we define:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  factory Person(String name, int? age) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we could write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  var person = Person(&#39;Remi&#39;, 24);&#xA;&#xA;  // `age` not passed, its value is preserved&#xA;  print(person.copyWith(name: &#39;Dash&#39;)); // Person(name: Dash, age: 24)&#xA;  // `age` is set to `null`&#xA;  print(person.copyWith(age: null)); // Person(name: Remi, age: null)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice Freezed supports &lt;code&gt;person.copyWith(age: null)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Going further: Deep copy&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;code&gt;copyWith&lt;/code&gt; is very powerful in itself, it starts to get inconvenient on more complex objects.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Company with _$Company {&#xA;  factory Company({String? name, required Director director}) = _Company;&#xA;}&#xA;&#xA;@freezed&#xA;class Director with _$Director {&#xA;  factory Director({String? name, Assistant? assistant}) = _Director;&#xA;}&#xA;&#xA;@freezed&#xA;class Assistant with _$Assistant {&#xA;  factory Assistant({String? name, int? age}) = _Assistant;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, from a reference on &lt;code&gt;Company&lt;/code&gt;, we may want to perform changes on &lt;code&gt;Assistant&lt;/code&gt;.&lt;br&gt; For example, to change the &lt;code&gt;name&lt;/code&gt; of an assistant, using &lt;code&gt;copyWith&lt;/code&gt; we would have to write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Company company;&#xA;&#xA;Company newCompany = company.copyWith(&#xA;  director: company.director.copyWith(&#xA;    assistant: company.director.assistant.copyWith(&#xA;      name: &#39;John Smith&#39;,&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;em&gt;works&lt;/em&gt;, but is relatively verbose with a lot of duplicates.&lt;br&gt; This is where we could use &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt;&#39;s &#34;deep copy&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If a Freezed model contains properties that are also Freezed models, then the code-generator will offer an alternate syntax to the previous example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Company company;&#xA;&#xA;Company newCompany = company.copyWith.director.assistant(name: &#39;John Smith&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This snippet will achieve strictly the same result as the previous snippet (creating a new company with an updated assistant name), but no longer has duplicates.&lt;/p&gt; &#xA;&lt;p&gt;Going deeper in this syntax, if instead, we wanted to change the director&#39;s name then we could write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Company company;&#xA;Company newCompany = company.copyWith.director(name: &#39;John Doe&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overall, based on the definitions of &lt;code&gt;Company&lt;/code&gt;/&lt;code&gt;Director&lt;/code&gt;/&lt;code&gt;Assistant&lt;/code&gt; mentioned above, all the following &#34;copy&#34; syntaxes will work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Company company;&#xA;&#xA;company = company.copyWith(name: &#39;Google&#39;, director: Director(...));&#xA;company = company.copyWith.director(name: &#39;Larry&#39;, assistant: Assistant(...));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Null consideration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some objects may also be &lt;code&gt;null&lt;/code&gt;. For example, using our &lt;code&gt;Company&lt;/code&gt; class, then &lt;code&gt;Director&lt;/code&gt;&#39;s &lt;code&gt;assistant&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As such, writing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Company company = Company(name: &#39;Google&#39;, director: Director(assistant: null));&#xA;Company newCompany = company.copyWith.director.assistant(name: &#39;John&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;doesn&#39;t make sense.&lt;br&gt; We can&#39;t change the assistant&#39;s name if there is no assistant to begin with.&lt;/p&gt; &#xA;&lt;p&gt;In that situation, &lt;code&gt;company.copyWith.director.assistant&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;, causing our code to fail to compile.&lt;/p&gt; &#xA;&lt;p&gt;To fix it, we can use the &lt;code&gt;?.call&lt;/code&gt; operator and write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Company? newCompany = company.copyWith.director.assistant?.call(name: &#39;John&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding getters and methods to our models&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, you may want to manually define methods/properties in our classes.&lt;br&gt; But you will quickly notice that if you try to do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  const factory Person(String name, {int? age}) = _Person;&#xA;&#xA;  void method() {&#xA;    print(&#39;hello world&#39;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then it won&#39;t work.&lt;/p&gt; &#xA;&lt;p&gt;For that to work, we need an extra step: We need to define a private empty constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  // Added constructor. Must not have any parameter&#xA;  const Person._();&#xA;&#xA;  const factory Person(String name, {int? age}) = _Person;&#xA;&#xA;  void method() {&#xA;    print(&#39;hello world&#39;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asserts&lt;/h3&gt; &#xA;&lt;p&gt;Dart does not allow adding &lt;code&gt;assert(...)&lt;/code&gt; statements to a &lt;code&gt;factory&lt;/code&gt; constructor.&lt;br&gt; As such, to add asserts to your Freezed classes, you will need the &lt;code&gt;@Assert&lt;/code&gt; decorator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Person with _$Person {&#xA;  @Assert(&#39;name.isNotEmpty&#39;, &#39;name cannot be empty&#39;)&#xA;  @Assert(&#39;age &amp;gt;= 0&#39;)&#xA;  factory Person({&#xA;    String? name,&#xA;    int? age,&#xA;  }) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default values&lt;/h3&gt; &#xA;&lt;p&gt;Similarly to asserts, Dart does not allow &#34;redirecting factory constructors&#34; to specify default values.&lt;/p&gt; &#xA;&lt;p&gt;As such, if you want to specify default values for your properties, you will need the &lt;code&gt;@Default&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example with _$Example {&#xA;  const factory Example([@Default(42) int value]) = _Example;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;br&gt; If you are using serialization/deserialization, this will automatically add a &lt;code&gt;@JsonKey(defaultValue: &amp;lt;something&amp;gt;)&lt;/code&gt; for you.&lt;/p&gt; &#xA;&lt;h3&gt;Decorators and comments&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; supports property and class level decorators/documentation by decorating/documenting their respective parameter and constructor definition.&lt;/p&gt; &#xA;&lt;p&gt;Consider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  const factory Person({&#xA;    String? name,&#xA;    int? age,&#xA;    Gender? gender,&#xA;  }) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to document &lt;code&gt;name&lt;/code&gt;, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  const factory Person({&#xA;    /// The name of the user.&#xA;    ///&#xA;    /// Must not be null&#xA;    String? name,&#xA;    int? age,&#xA;    Gender? gender,&#xA;  }) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to mark the property &lt;code&gt;gender&lt;/code&gt; as &lt;code&gt;@deprecated&lt;/code&gt;, then you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  const factory Person({&#xA;    String? name,&#xA;    int? age,&#xA;    @deprecated Gender? gender,&#xA;  }) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will deprecate both:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The constructor &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Person(gender: Gender.something); // gender is deprecated&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;The generated class&#39;s constructor: &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_Person(gender: Gender.something); // gender is deprecated&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;the property: &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Person person;&#xA;print(person.gender); // gender is deprecated&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;copyWith&lt;/code&gt; parameter: &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Person person;&#xA;person.copyWith(gender: Gender.something); // gender is deprecated&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Similarly, if you want to decorate the generated class you can decorate the defining factory constructor.&lt;/p&gt; &#xA;&lt;p&gt;As such, to deprecate &lt;code&gt;_Person&lt;/code&gt;, you could do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Person with _$Person {&#xA;  @deprecated&#xA;  const factory Person({&#xA;    String? name,&#xA;    int? age,&#xA;    Gender? gender,&#xA;  }) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Union types and Sealed classes&lt;/h2&gt; &#xA;&lt;p&gt;Coming from other languages, you may be used with features like &#34;union types&#34;/&#34;sealed classes&#34;/pattern matching.&lt;br&gt; These are powerful tools in combination with a type system, but Dart currently does not support them.&lt;/p&gt; &#xA;&lt;p&gt;But fear not, &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; supports them, generating a few utilities to help you with those.&lt;/p&gt; &#xA;&lt;p&gt;Long story short, in any Freezed class, you can writing multiple constructors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Union with _$Union {&#xA;  const factory Union.data(int value) = Data;&#xA;  const factory Union.loading() = Loading;&#xA;  const factory Union.error([String? message]) = Error;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By doing this, our model now can be in different mutually exclusive states.&lt;/p&gt; &#xA;&lt;p&gt;In particular, this snippet defines a model &lt;code&gt;Union&lt;/code&gt;, and that model has 3 possible states:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;data&lt;/li&gt; &#xA; &lt;li&gt;loading&lt;/li&gt; &#xA; &lt;li&gt;error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note how we gave meaningful names to the right hand of the factory constructors we defined. They will come in handy later.&lt;/p&gt; &#xA;&lt;p&gt;One thing you may also notice is that with this example, then we can no-longer write code such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  Union union = Union.data(42);&#xA;&#xA;  print(union.value); // compilation error: property value does not exist&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s see why that is the case in the following section.&lt;/p&gt; &#xA;&lt;h3&gt;Shared properties&lt;/h3&gt; &#xA;&lt;p&gt;When defining multiple constructors, you will lose the ability to read properties that are not common to all constructors:&lt;/p&gt; &#xA;&lt;p&gt;For example, if you write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Example with _$Example {&#xA;  const factory Example.person(String name, int age) = Person;&#xA;  const factory Example.city(String name, int population) = City;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will be unable to read &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;population&lt;/code&gt; directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var example = Example.person(&#39;Remi&#39;, 24);&#xA;print(example.age); // does not compile!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the other hand, you &lt;strong&gt;can&lt;/strong&gt; read properties that are defined on all constructors.&lt;br&gt; For example, the &lt;code&gt;name&lt;/code&gt; variable is common to both &lt;code&gt;Example.person&lt;/code&gt; and &lt;code&gt;Example.city&lt;/code&gt; constructors.&lt;/p&gt; &#xA;&lt;p&gt;As such we can write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var example = Example.person(&#39;Remi&#39;, 24);&#xA;print(example.name); // Remi&#xA;example = Example.city(&#39;London&#39;, 8900000);&#xA;print(example.name); // London&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same logic can be applied to &lt;code&gt;copyWith&lt;/code&gt; too.&lt;br&gt; We can use &lt;code&gt;copyWith&lt;/code&gt; with properties defined on all constructors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var example = Example.person(&#39;Remi&#39;, 24);&#xA;print(example.copyWith(name: &#39;Dash&#39;)); // Example.person(name: Dash, age: 24)&#xA;&#xA;example = Example.city(&#39;London&#39;, 8900000);&#xA;print(example.copyWith(name: &#39;Paris&#39;)); // Example.city(name: Paris, population: 8900000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the other hand, properties that are unique to a specific constructor aren&#39;t available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var example = Example.person(&#39;Remi&#39;, 24);&#xA;&#xA;example.copyWith(age: 42); // compilation error, parameter `age` does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To solve this problem, we need check the state of our object using what we call &#34;pattern matching&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Using pattern matching to read non-shared properties&lt;/h3&gt; &#xA;&lt;p&gt;For this section, let&#39;s consider the following union:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Example with _$Example {&#xA;  const factory Example.person(String name, int age) = Person;&#xA;  const factory Example.city(String name, int population) = City;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s see how we can use pattern matching to read the content of an &lt;code&gt;Example&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;p&gt;For this, we have a few solutions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(preferred) Using the utilities (&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;when&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#mapMaybeMap&#34;&gt;map&lt;/a&gt;) generated by Freezed to inspect the content of our object&lt;/li&gt; &#xA; &lt;li&gt;(discouraged) Using &lt;code&gt;is&lt;/code&gt;/&lt;code&gt;as&lt;/code&gt; to cast an &lt;code&gt;Example&lt;/code&gt; variable into either a &lt;code&gt;Person&lt;/code&gt; or a &lt;code&gt;City&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;When&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;when&lt;/a&gt; method is the equivalent to pattern matching with destructing.&lt;br&gt; The prototype of the method depends on the constructors defined.&lt;/p&gt; &#xA;&lt;p&gt;For example, with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Union with _$Union {&#xA;  const factory Union(int value) = Data;&#xA;  const factory Union.loading() = Loading;&#xA;  const factory Union.error([String? message]) = ErrorDetails;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;when&lt;/a&gt; will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var union = Union(42);&#xA;&#xA;print(&#xA;  union.when(&#xA;    (int value) =&amp;gt; &#39;Data $value&#39;,&#xA;    loading: () =&amp;gt; &#39;loading&#39;,&#xA;    error: (String? message) =&amp;gt; &#39;Error: $message&#39;,&#xA;  ),&#xA;); // Data 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whereas if we defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Model with _$Model {&#xA;  factory Model.first(String a) = First;&#xA;  factory Model.second(int b, bool c) = Second;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;when&lt;/a&gt; will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var model = Model.first(&#39;42&#39;);&#xA;&#xA;print(&#xA;  model.when(&#xA;    first: (String a) =&amp;gt; &#39;first $a&#39;,&#xA;    second: (int b, bool c) =&amp;gt; &#39;second $b $c&#39;&#xA;  ),&#xA;); // first 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how each callback matches with a constructor&#39;s name and prototype.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;br&gt; All callbacks are required and must not be &lt;code&gt;null&lt;/code&gt;.&lt;br&gt; If that is not what you want, consider using &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#maybeWhen&#34;&gt;maybeWhen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Map&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#mapMaybeMap&#34;&gt;map&lt;/a&gt; methods are equivalent to &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;when&lt;/a&gt;, but &lt;strong&gt;without&lt;/strong&gt; destructuring.&lt;/p&gt; &#xA;&lt;p&gt;Consider this class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Model with _$Model {&#xA;  factory Model.first(String a) = First;&#xA;  factory Model.second(int b, bool c) = Second;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With such class, while &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#when&#34;&gt;when&lt;/a&gt; will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var model = Model.first(&#39;42&#39;);&#xA;&#xA;print(&#xA;  model.when(&#xA;    first: (String a) =&amp;gt; &#39;first $a&#39;,&#xA;    second: (int b, bool c) =&amp;gt; &#39;second $b $c&#39;&#xA;  ),&#xA;); // first 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#mapMaybeMap&#34;&gt;map&lt;/a&gt; will instead be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var model = Model.first(&#39;42&#39;);&#xA;&#xA;print(&#xA;  model.map(&#xA;    first: (First value) =&amp;gt; &#39;first ${value.a}&#39;,&#xA;    second: (Second value) =&amp;gt; &#39;second ${value.b} ${value.c}&#39;&#xA;  ),&#xA;); // first 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful if you want to do complex operations, like &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#copyWith&#34;&gt;copyWith&lt;/a&gt;/&lt;code&gt;toString&lt;/code&gt; for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var model = Model.second(42, false)&#xA;print(&#xA;  model.map(&#xA;    first: (value) =&amp;gt; value,&#xA;    second: (value) =&amp;gt; value.copyWith(c: true),&#xA;  )&#xA;); // Model.second(b: 42, c: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using is/as to read the content of a Freezed class&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, one (less desirable) solution is to use the &lt;code&gt;is&lt;/code&gt;/&lt;code&gt;as&lt;/code&gt; keywords.&lt;br&gt; More specifically, you can write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  Example value;&#xA;&#xA;  if (value is Person) {&#xA;    // By using `is`, this allows the compiler to know that &#34;value&#34; is a Person instance&#xA;    // and therefore allows us to read all of its properties.&#xA;    print(value.age);&#xA;    value = value.copyWith(age: 42);&#xA;  }&#xA;&#xA;  // Alternatively we can use `as` if we are certain of type of an object:&#xA;  Person person = value as Person;&#xA;  print(person.age);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt; Using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt;, while possible, is discouraged.&lt;/p&gt; &#xA;&lt;p&gt;The reasoning is that they are not &#34;exhaustive&#34;. See &lt;a href=&#34;https://www.fullstory.com/blog/discriminated-unions-and-exhaustiveness-checking-in-typescript/&#34;&gt;https://www.fullstory.com/blog/discriminated-unions-and-exhaustiveness-checking-in-typescript/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Mixins and Interfaces for individual classes for union types&lt;/h3&gt; &#xA;&lt;p&gt;When you have multiple types in the same class you might want to make one of those types to implement a interface or mixin a class. You can do that using the &lt;code&gt;@Implements&lt;/code&gt; decorator or &lt;code&gt;@With&lt;/code&gt; respectively. In this case &lt;code&gt;City&lt;/code&gt; is implementing with &lt;code&gt;GeographicArea&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class GeographicArea {&#xA;  int get population;&#xA;  String get name;&#xA;}&#xA;&#xA;@freezed&#xA;class Example with _$Example {&#xA;  const factory Example.person(String name, int age) = Person;&#xA;&#xA;  @Implements&amp;lt;GeographicArea&amp;gt;()&#xA;  const factory Example.city(String name, int population) = City;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you want to specify a generic mixin or interface you need to declare it as a string using the &lt;code&gt;With.fromString&lt;/code&gt; constructor, &lt;code&gt;Implements.fromString&lt;/code&gt; respectively. Similar &lt;code&gt;Street&lt;/code&gt; is mixing with &lt;code&gt;AdministrativeArea&amp;lt;House&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class GeographicArea {}&#xA;abstract class House {}&#xA;abstract class Shop {}&#xA;abstract class AdministrativeArea&amp;lt;T&amp;gt; {}&#xA;&#xA;@freezed&#xA;class Example with _$Example {&#xA;  const factory Example.person(String name, int age) = Person;&#xA;&#xA;  @With&amp;lt;AdministrativeArea&amp;lt;House&amp;gt;&amp;gt;()&#xA;  const factory Example.street(String name) = Street;&#xA;&#xA;  @With&amp;lt;House&amp;gt;()&#xA;  @Implements&amp;lt;Shop&amp;gt;()&#xA;  @Implements&amp;lt;GeographicArea&amp;gt;()&#xA;  const factory Example.city(String name, int population) = City;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You need to make sure that you comply with the interface requirements by implementing all the abstract members. If the interface has no members or just fields, you can fulfil the interface contract by adding them in the constructor of the union type. Keep in mind that if the interface defines a method or a getter, that you implement in the class, you need to use the &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#adding-getters-and-methods-to-our-models&#34;&gt;Adding getters and methods to our models&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt;: You cannot use &lt;code&gt;@With&lt;/code&gt;/&lt;code&gt;@Implements&lt;/code&gt; with freezed classes. Freezed classes can neither be extended nor implemented.&lt;/p&gt; &#xA;&lt;h2&gt;FromJson/ToJson&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will not generate your typical &lt;code&gt;fromJson&lt;/code&gt;/&lt;code&gt;toJson&lt;/code&gt; by itself, it knows what &lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt; is.&lt;/p&gt; &#xA;&lt;p&gt;Making a class compatible with &lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt; is very straightforward.&lt;/p&gt; &#xA;&lt;p&gt;Consider this snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:freezed_annotation/freezed_annotation.dart&#39;;&#xA;&#xA;part &#39;model.freezed.dart&#39;;&#xA;&#xA;@freezed&#xA;class Model with _$Model {&#xA;  factory Model.first(String a) = First;&#xA;  factory Model.second(int b, bool c) = Second;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The changes necessary to make it compatible with &lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt; consists of two lines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a new &lt;code&gt;part&lt;/code&gt;: &lt;code&gt;part &#39;model.g.dart&#39;;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;a new constructor on the targeted class: &lt;code&gt;factory Model.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$ModelFromJson(json);&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The end result is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:freezed_annotation/freezed_annotation.dart&#39;;&#xA;&#xA;part &#39;model.freezed.dart&#39;;&#xA;part &#39;model.g.dart&#39;;&#xA;&#xA;@freezed&#xA;class Model with _$Model {&#xA;  factory Model.first(String a) = First;&#xA;  factory Model.second(int b, bool c) = Second;&#xA;&#xA;  factory Model.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$ModelFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget to add &lt;code&gt;json_serializable&lt;/code&gt; to your &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dev_dependencies:&#xA;  json_serializable:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;br&gt; With these changes, &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will automatically ask &lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt; to generate all the necessary &lt;code&gt;fromJson&lt;/code&gt;/&lt;code&gt;toJson&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt; Freezed will only generate a fromJson if the factory is using &lt;code&gt;=&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;fromJSON - classes with multiple constructors&lt;/h3&gt; &#xA;&lt;p&gt;For classes with multiple constructors, &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will check the JSON response for a string element called &lt;code&gt;runtimeType&lt;/code&gt; and choose the constructor to use based on its value. For example, given the following constructors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class MyResponse with _$MyResponse {&#xA;  const factory MyResponse(String a) = MyResponseData;&#xA;  const factory MyResponse.special(String a, int b) = MyResponseSpecial;&#xA;  const factory MyResponse.error(String message) = MyResponseError;&#xA;&#xA;  factory MyResponse.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$MyResponseFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://pub.dartlang.org/packages/freezed&#34;&gt;Freezed&lt;/a&gt; will use each JSON object&#39;s &lt;code&gt;runtimeType&lt;/code&gt; to choose the constructor as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;runtimeType&#34;: &#34;default&#34;,&#xA;    &#34;a&#34;: &#34;This JSON object will use constructor MyResponse()&#34;&#xA;  },&#xA;  {&#xA;    &#34;runtimeType&#34;: &#34;special&#34;,&#xA;    &#34;a&#34;: &#34;This JSON object will use constructor MyResponse.special()&#34;,&#xA;    &#34;b&#34;: 42&#xA;  },&#xA;  {&#xA;    &#34;runtimeType&#34;: &#34;error&#34;,&#xA;    &#34;message&#34;: &#34;This JSON object will use constructor MyResponse.error()&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize key and value with something different using &lt;code&gt;@Freezed&lt;/code&gt; and &lt;code&gt;@FreezedUnionValue&lt;/code&gt; decorators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@Freezed(unionKey: &#39;type&#39;, unionValueCase: FreezedUnionCase.pascal)&#xA;class MyResponse with _$MyResponse {&#xA;  const factory MyResponse(String a) = MyResponseData;&#xA;&#xA;  @FreezedUnionValue(&#39;SpecialCase&#39;)&#xA;  const factory MyResponse.special(String a, int b) = MyResponseSpecial;&#xA;&#xA;  const factory MyResponse.error(String message) = MyResponseError;&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which would update the previous json to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;type&#34;: &#34;Default&#34;,&#xA;    &#34;a&#34;: &#34;This JSON object will use constructor MyResponse()&#34;&#xA;  },&#xA;  {&#xA;    &#34;type&#34;: &#34;SpecialCase&#34;,&#xA;    &#34;a&#34;: &#34;This JSON object will use constructor MyResponse.special()&#34;,&#xA;    &#34;b&#34;: 42&#xA;  },&#xA;  {&#xA;    &#34;type&#34;: &#34;Error&#34;,&#xA;    &#34;message&#34;: &#34;This JSON object will use constructor MyResponse.error()&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to customize key and value for all the classes, you can specify it inside your &lt;code&gt;build.yaml&lt;/code&gt; file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      freezed:&#xA;        options:&#xA;          union_key: type&#xA;          union_value_case: pascal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t control the JSON response, then you can implement a custom converter. Your custom converter will need to implement its own logic for determining which constructor to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyResponseConverter implements JsonConverter&amp;lt;MyResponse, Map&amp;lt;String, dynamic&amp;gt;&amp;gt; {&#xA;  const MyResponseConverter();&#xA;&#xA;  @override&#xA;  MyResponse fromJson(Map&amp;lt;String, dynamic&amp;gt; json) {&#xA;    // type data was already set (e.g. because we serialized it ourselves)&#xA;    if (json[&#39;runtimeType&#39;] != null) {&#xA;      return MyResponse.fromJson(json);&#xA;    }&#xA;    // you need to find some condition to know which type it is. e.g. check the presence of some field in the json&#xA;    if (isTypeData) {&#xA;      return MyResponseData.fromJson(json);&#xA;    } else if (isTypeSpecial) {&#xA;      return MyResponseSpecial.fromJson(json);&#xA;    } else if (isTypeError) {&#xA;      return MyResponseError.fromJson(json);&#xA;    } else {&#xA;      throw Exception(&#39;Could not determine the constructor for mapping from JSON&#39;);&#xA;    }&#xA; }&#xA;&#xA;  @override&#xA;  Map&amp;lt;String, dynamic&amp;gt; toJson(MyResponse data) =&amp;gt; data.toJson();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To then apply your custom converter pass the decorator to a constructor parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class MyModel with _$MyModel {&#xA;  const factory MyModel(@MyResponseConverter() MyResponse myResponse) = MyModelData;&#xA;&#xA;  factory MyModel.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$MyModelFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By doing this, json serializable will use &lt;code&gt;MyResponseConverter.fromJson()&lt;/code&gt; and &lt;code&gt;MyResponseConverter.toJson()&lt;/code&gt; to convert &lt;code&gt;MyResponse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a custom converter on a constructor parameter contained in a &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class MyModel with _$MyModel {&#xA;  const factory MyModel(@MyResponseConverter() List&amp;lt;MyResponse&amp;gt; myResponse) = MyModelData;&#xA;&#xA;  factory MyModel.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$MyModelFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt; In order to serialize nested lists of freezed objects, you are supposed to either specify a &lt;code&gt;@JsonSerializable(explicitToJson: true)&lt;/code&gt; or change &lt;code&gt;explicit_to_json&lt;/code&gt; inside your &lt;code&gt;build.yaml&lt;/code&gt; file (&lt;a href=&#34;https://github.com/google/json_serializable.dart/tree/master/json_serializable#build-configuration&#34;&gt;see the documentation&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What about &lt;code&gt;@JsonKey&lt;/code&gt; annotation?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;All decorators passed to a constructor parameter are &#34;copy-pasted&#34; to the generated property too.&lt;br&gt; As such, you can write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Example with _$Example {&#xA;  factory Example(@JsonKey(name: &#39;my_property&#39;) String myProperty) = _Example;&#xA;&#xA;  factory Example.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$ExampleFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;What about &lt;code&gt;@JsonSerializable&lt;/code&gt; annotation?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;@JsonSerializable&lt;/code&gt; annotation by placing it over constructor e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Example with _$Example {&#xA;  @JsonSerializable(explicitToJson: true)&#xA;  factory Example(@JsonKey(name: &#39;my_property&#39;) SomeOtherClass myProperty) = _Example;&#xA;&#xA;  factory Example.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$ExampleFromJson(json);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to define some custom json_serializable flags for all the classes (e.g. &lt;code&gt;explicit_to_json&lt;/code&gt; or &lt;code&gt;any_map&lt;/code&gt;) you can do it via &lt;code&gt;build.yaml&lt;/code&gt; file as described &lt;a href=&#34;https://pub.dev/packages/json_serializable#build-configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/#decorators&#34;&gt;decorators&lt;/a&gt; section&lt;/p&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Freezed offers various options to customize the generated code. For example, you may want to disable the generation of &lt;code&gt;when&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;To do so, there are two possibilities:&lt;/p&gt; &#xA;&lt;h3&gt;Changing the behavior for a specific model&lt;/h3&gt; &#xA;&lt;p&gt;If you want to customize the generated code for only one specific class, you can do so by using a different annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@Freezed()&#xA;class Person with _$Person {&#xA;  factory Person(String name, int age) = _Person;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By doing so, you can now pass various parameters to &lt;code&gt;@Freezed&lt;/code&gt; to change the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@Freezed(&#xA;  // Disable the generation of copyWith/==&#xA;  copyWith: false,&#xA;  equal: false,&#xA;)&#xA;class Person with _$Person {...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view all the possibilities, see the documentation of &lt;code&gt;@Freezed&lt;/code&gt;: &lt;a href=&#34;https://pub.dev/documentation/freezed_annotation/latest/freezed_annotation/Freezed-class.html&#34;&gt;https://pub.dev/documentation/freezed_annotation/latest/freezed_annotation/Freezed-class.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Changing the behavior for the entire project&lt;/h3&gt; &#xA;&lt;p&gt;Instead of applying your modification to a single class, you may want to apply it to all Freezed models at the same time.&lt;/p&gt; &#xA;&lt;p&gt;You can do so by customizing a file called &lt;code&gt;build.yaml&lt;/code&gt;&lt;br&gt; This file is an optional configuration file that should be placed next to your &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_project_folder/&#xA;  pubspec.yaml&#xA;  build.yaml&#xA;  lib/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There, you will be able to change the same options as the options found in &lt;code&gt;@Freezed&lt;/code&gt; (see above) by writing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      freezed:&#xA;        options:&#xA;          # Disable the generation of copyWith/== for the entire project&#xA;          copy_with: false&#xA;          equal: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Utilities&lt;/h1&gt; &#xA;&lt;h3&gt;Freezed extension for VSCode&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=blaxou.freezed&#34;&gt;Freezed&lt;/a&gt; extension might help you work faster with freezed. For example :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Ctrl+Shift+B&lt;/code&gt; (&lt;code&gt;Cmd+Shift+B&lt;/code&gt; on Mac) to quickly build using &lt;code&gt;build_runner&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Quickly generate a Freezed class by using &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; &amp;gt; &lt;code&gt;Generate Freezed class&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Freezed extension for IntelliJ/Android Studio&lt;/h3&gt; &#xA;&lt;p&gt;You can get Live Templates for boiler plate code &lt;a href=&#34;https://github.com/Tinhorn/freezed_intellij_live_templates&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;type &lt;strong&gt;freezedClass&lt;/strong&gt; and press &lt;kbd&gt;Tab&lt;/kbd&gt; to generate a freezed class &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@freezed&#xA;class Demo with _$Demo {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;type &lt;strong&gt;freezedFromJson&lt;/strong&gt; and press &lt;kbd&gt;Tab&lt;/kbd&gt; to generate the fromJson method for json_serializable &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;factory Demo.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$DemoFromJson(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>josiahsrc/dough</title>
    <updated>2022-06-23T01:37:18Z</updated>
    <id>tag:github.com,2022-06-23:/josiahsrc/dough</id>
    <link href="https://github.com/josiahsrc/dough" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This package provides some widgets you can use to create a smooshy UI.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/assets/images/dough-logo@repo.png&#34; alt=&#34;Flutter Dough&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dough Library&lt;/h1&gt; &#xA;&lt;p&gt;Squishy widgets for Flutter.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/packages/dough/README.md&#34;&gt;Dough&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few samples of the different widgets provided by this repo. You can find more information on how to use these widgets in the main &lt;a href=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/packages/dough/README.md&#34;&gt;Dough&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h3&gt;Pressable Dough&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/assets/gifs/pressable-dough.gif&#34; alt=&#34;PressableDough Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Draggable Dough&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/assets/gifs/draggable-dough.gif&#34; alt=&#34;DraggableDough Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Gyro Dough&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/assets/gifs/gyro-dough.gif&#34; alt=&#34;GyroDough Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom Dough&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josiahsrc/dough/master/assets/gifs/custom-dough.gif&#34; alt=&#34;CustomDough Demo&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mobxjs/mobx.dart</title>
    <updated>2022-06-23T01:37:18Z</updated>
    <id>tag:github.com,2022-06-23:/mobxjs/mobx.dart</id>
    <link href="https://github.com/mobxjs/mobx.dart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MobX for the Dart language. Hassle-free, reactive state-management for your Dart and Flutter apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Language: &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/translation/pt-BR/README.md&#34;&gt;Português&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/translation/zh-CN/README.md&#34;&gt;Chinese&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mobx.dart&lt;/h1&gt; &#xA;&lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/favorites&#34;&gt; &lt;img height=&#34;128&#34; src=&#34;https://github.com/mobxjs/mobx.dart/raw/master/docs/src/images/flutter-favorite.png&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/mobx&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/mobx.svg?label=mobx&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_mobx&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_mobx.svg?label=flutter_mobx&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/mobx_codegen&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/mobx_codegen.svg?label=mobx_codegen&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/actions&#34;&gt;&lt;img src=&#34;https://github.com/mobxjs/mobx.dart/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/actions&#34;&gt;&lt;img src=&#34;https://github.com/mobxjs/mobx.dart/workflows/Publish/badge.svg?sanitize=true&#34; alt=&#34;Publish&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mobxjs/mobx.dart&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/mobxjs/mobx.dart/master.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.netlify.com/sites/mobx/deploys&#34;&gt;&lt;img src=&#34;https://api.netlify.com/api/v1/badges/05330d31-0411-4aac-a278-76615bcaff9e/deploy-status&#34; alt=&#34;Netlify Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/dNHY52k&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat-on%20Discord-lightgrey?style=flat&amp;amp;logo=discord&#34; alt=&#34;Join the chat at https://discord.gg/dNHY52k&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mobxjs/mobx.dart/raw/master/docs/src/images/mobx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx&#34;&gt;MobX&lt;/a&gt; for the Dart language.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Supercharge the state-management in your Dart apps with Transparent Functional Reactive Programming (TFRP)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h2&gt;We are looking for maintainers. Reach out on Discord or GitHub Issues!&lt;/h2&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#observables&#34;&gt;Observables&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#observables&#34;&gt;@observable&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#readonly&#34;&gt;@readonly&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#computed-observables&#34;&gt;@computed&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#actions&#34;&gt;Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#reactions&#34;&gt;Reactions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;MobX is a state-management library that makes it simple to connect the reactive data of your application with the UI. This wiring is completely automatic and feels very natural. As the application-developer, you focus purely on what reactive-data needs to be consumed in the UI (and elsewhere) without worrying about keeping the two in sync.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not really magic but it does have some smarts around what is being consumed (&lt;strong&gt;observables&lt;/strong&gt;) and where (&lt;strong&gt;reactions&lt;/strong&gt;), and automatically tracks it for you. When the &lt;em&gt;observables&lt;/em&gt; change, all &lt;em&gt;reactions&lt;/em&gt; are re-run. What&#39;s interesting is that these reactions can be anything from a simple console log, a network call to re-rendering the UI.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;MobX has been a very effective library for the JavaScript apps and this port to the Dart language aims to bring the same levels of productivity.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;We are very thankful to our sponsors to make us part of their &lt;em&gt;Open Source Software (OSS)&lt;/em&gt; program. [&lt;a href=&#34;https://opencollective.com/mobx#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://publicis.sapient.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/docs/src/images/publicis-sapient-sponsor.png&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wunderdog.fi&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/docs/src/images/wunderdog-sponsor.png&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netlify.com&#34;&gt;&lt;img src=&#34;https://www.netlify.com/img/global/badges/netlify-color-bg.svg?sanitize=true&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Started&lt;/h3&gt; &#xA;&lt;p&gt;Follow along with the &lt;a href=&#34;https://mobx.netlify.com/getting-started&#34;&gt;Getting Started guide on the MobX.dart Website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Go deep&lt;/h3&gt; &#xA;&lt;p&gt;For a deeper coverage of MobX, do check out &lt;a href=&#34;https://www.packtpub.com/web-development/mobx-quick-start-guide&#34;&gt;MobX Quick Start Guide&lt;/a&gt;. Although the book uses the JavaScript version of MobX, the concepts are &lt;strong&gt;100% applicable&lt;/strong&gt; to Dart and Flutter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/web-development/mobx-quick-start-guide&#34;&gt;&lt;img src=&#34;https://github.com/mobxjs/mobx.dart/raw/master/docs/src/images/book.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mobxjs/mobx.dart/raw/master/docs/src/images/mobx-triad.png&#34; alt=&#34;MobX Triad&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;At the heart of MobX are three important concepts: &lt;strong&gt;Observables&lt;/strong&gt;, &lt;strong&gt;Actions&lt;/strong&gt; and &lt;strong&gt;Reactions&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Observables&lt;/h3&gt; &#xA;&lt;p&gt;Observables represent the reactive-state of your application. They can be simple scalars to complex object trees. By defining the state of the application as a tree of observables, you can expose a &lt;em&gt;reactive-state-tree&lt;/em&gt; that the UI (or other observers in the app) consume.&lt;/p&gt; &#xA;&lt;p&gt;A simple reactive-counter is represented by the following observable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;final counter = Observable(0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex observables, such as classes, can be created as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Counter {&#xA;  Counter() {&#xA;    increment = Action(_increment);&#xA;  }&#xA;&#xA;  final _value = Observable(0);&#xA;  int get value =&amp;gt; _value.value;&#xA;&#xA;  set value(int newValue) =&amp;gt; _value.value = newValue;&#xA;  Action increment;&#xA;&#xA;  void _increment() {&#xA;    _value.value++;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On first sight, this does look like some boilerplate code which can quickly go out of hand! This is why we added &lt;strong&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/tree/master/mobx_codegen&#34;&gt;mobx_codegen&lt;/a&gt;&lt;/strong&gt; to the mix that allows you to replace the above code with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;part &#39;counter.g.dart&#39;;&#xA;&#xA;class Counter = CounterBase with _$Counter;&#xA;&#xA;abstract class CounterBase with Store {&#xA;  @observable&#xA;  int value = 0;&#xA;&#xA;  @action&#xA;  void increment() {&#xA;    value++;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of annotations to mark the observable properties of the class. Yes, there is some header boilerplate here but its fixed for any class. As you build more complex classes this boilerplate will fade away and you will mostly focus on the code within the braces.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Annotations are available via the &lt;strong&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/tree/master/mobx_codegen&#34;&gt;mobx_codegen&lt;/a&gt;&lt;/strong&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Readonly&lt;/h3&gt; &#xA;&lt;p&gt;If you want to reduce your code you may want to swap &lt;code&gt;@observable&lt;/code&gt; for &lt;code&gt;@readonly&lt;/code&gt;. For every private variable it generates a public getter such that the client of your store can&#39;t change its value. Read more about it &lt;a href=&#34;https://mobx.netlify.app/api/observable#readonly&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Computed Observables&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What can be derived, should be derived. Automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The state of your application consists of &lt;em&gt;&lt;strong&gt;core-state&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;derived-state&lt;/strong&gt;&lt;/em&gt;. The &lt;em&gt;core-state&lt;/em&gt; is state inherent to the domain you are dealing with. For example, if you have a &lt;code&gt;Contact&lt;/code&gt; entity, the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; form the &lt;em&gt;core-state&lt;/em&gt; of &lt;code&gt;Contact&lt;/code&gt;. However, &lt;code&gt;fullName&lt;/code&gt; is &lt;em&gt;derived-state&lt;/em&gt;, obtained by combining &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Such &lt;em&gt;derived state&lt;/em&gt;, that depends on &lt;em&gt;core-state&lt;/em&gt; or &lt;em&gt;other derived-state&lt;/em&gt; is called a &lt;strong&gt;Computed Observable&lt;/strong&gt;. It is automatically kept in sync when its underlying observables change.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;State in MobX = Core-State + Derived-State&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;part &#39;contact.g.dart&#39;;&#xA;&#xA;class Contact = ContactBase with _$Contact;&#xA;&#xA;abstract class ContactBase with Store {&#xA;  @observable&#xA;  String firstName;&#xA;&#xA;  @observable&#xA;  String lastName;&#xA;&#xA;  @computed&#xA;  String get fullName =&amp;gt; &#39;$firstName, $lastName&#39;;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above &lt;strong&gt;&lt;code&gt;fullName&lt;/code&gt;&lt;/strong&gt; is automatically kept in sync if either &lt;code&gt;firstName&lt;/code&gt; and/or &lt;code&gt;lastName&lt;/code&gt; changes.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are how you mutate the observables. Rather than mutating them directly, actions add a semantic meaning to the mutations. For example, instead of just doing &lt;code&gt;value++&lt;/code&gt;, firing an &lt;code&gt;increment()&lt;/code&gt; action carries more meaning. Besides, actions also batch up all the notifications and ensure the changes are notified only after they complete. Thus the observers are notified only upon the atomic completion of the action.&lt;/p&gt; &#xA;&lt;p&gt;Note that actions can also be nested, in which case the notifications go out when the top-most action has completed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final counter = Observable(0);&#xA;&#xA;final increment = Action((){&#xA;  counter.value++;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When creating actions inside a class, you can take advantage of annotations!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;part &#39;counter.g.dart&#39;;&#xA;&#xA;class Counter = CounterBase with _$Counter;&#xA;&#xA;abstract class CounterBase with Store {&#xA;  @observable&#xA;  int value = 0;&#xA;&#xA;  @action&#xA;  void increment() {&#xA;    value++;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Asynchronous Actions&lt;/h4&gt; &#xA;&lt;p&gt;MobX.dart handles asynchronous actions automatically and does not require wrapping the code with &lt;a href=&#34;https://mobx.netlify.com/api/action#runinaction&#34;&gt;&lt;code&gt;runInAction&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@observable&#xA;String stuff = &#39;&#39;;&#xA;&#xA;@observable&#xA;loading = false;&#xA;&#xA;@action&#xA;Future&amp;lt;void&amp;gt; loadStuff() async {&#xA;  loading = true; //This notifies observers&#xA;  stuff = await fetchStuff();&#xA;  loading = false; //This also notifies observers&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reactions&lt;/h3&gt; &#xA;&lt;p&gt;Reactions complete the &lt;em&gt;MobX triad&lt;/em&gt; of &lt;strong&gt;observables&lt;/strong&gt;, &lt;strong&gt;actions&lt;/strong&gt; and &lt;strong&gt;reactions&lt;/strong&gt;. They are the observers of the reactive-system and get notified whenever an observable they track is changed. Reactions come in few flavors as listed below. All of them return a &lt;code&gt;ReactionDisposer&lt;/code&gt;, a function that can be called to dispose the reaction.&lt;/p&gt; &#xA;&lt;p&gt;One &lt;em&gt;striking feature&lt;/em&gt; of reactions is that they &lt;em&gt;automatically track&lt;/em&gt; all the observables without any explicit wiring. The act of &lt;em&gt;reading an observable&lt;/em&gt; within a reaction is enough to track it!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The code you write with MobX appears to be literally ceremony-free!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ReactionDisposer autorun(Function(Reaction) fn)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Runs the reaction immediately and also on any change in the observables used inside &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;final greeting = Observable(&#39;Hello World&#39;);&#xA;&#xA;final dispose = autorun((_){&#xA;  print(greeting.value);&#xA;});&#xA;&#xA;greeting.value = &#39;Hello MobX&#39;;&#xA;&#xA;// Done with the autorun()&#xA;dispose();&#xA;&#xA;&#xA;// Prints:&#xA;// Hello World&#xA;// Hello MobX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ReactionDisposer reaction&amp;lt;T&amp;gt;(T Function(Reaction) predicate, void Function(T) effect)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Monitors the observables used inside the &lt;code&gt;predicate()&lt;/code&gt; function and runs the &lt;code&gt;effect()&lt;/code&gt; when the predicate returns a different value. Only the observables inside &lt;code&gt;predicate()&lt;/code&gt; are tracked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;final greeting = Observable(&#39;Hello World&#39;);&#xA;&#xA;final dispose = reaction((_) =&amp;gt; greeting.value, (msg) =&amp;gt; print(msg));&#xA;&#xA;greeting.value = &#39;Hello MobX&#39;; // Cause a change&#xA;&#xA;// Done with the reaction()&#xA;dispose();&#xA;&#xA;&#xA;// Prints:&#xA;// Hello MobX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;ReactionDisposer when(bool Function(Reaction) predicate, void Function() effect)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Monitors the observables used inside &lt;code&gt;predicate()&lt;/code&gt; and runs the &lt;code&gt;effect()&lt;/code&gt; &lt;em&gt;when&lt;/em&gt; it returns &lt;code&gt;true&lt;/code&gt;. After the &lt;code&gt;effect()&lt;/code&gt; is run, &lt;code&gt;when&lt;/code&gt; automatically disposes itself. So you can think of &lt;em&gt;when&lt;/em&gt; as a &lt;em&gt;one-time&lt;/em&gt; &lt;code&gt;reaction&lt;/code&gt;. You can also dispose &lt;code&gt;when()&lt;/code&gt; pre-maturely.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;final greeting = Observable(&#39;Hello World&#39;);&#xA;&#xA;final dispose = when((_) =&amp;gt; greeting.value == &#39;Hello MobX&#39;, () =&amp;gt; print(&#39;Someone greeted MobX&#39;));&#xA;&#xA;greeting.value = &#39;Hello MobX&#39;; // Causes a change, runs effect and disposes&#xA;&#xA;&#xA;// Prints:&#xA;// Someone greeted MobX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Future&amp;lt;void&amp;gt; asyncWhen(bool Function(Reaction) predicate)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;when&lt;/code&gt; but returns a &lt;code&gt;Future&lt;/code&gt;, which is fulfilled when the &lt;code&gt;predicate()&lt;/code&gt; returns &lt;em&gt;true&lt;/em&gt;. This is a convenient way of waiting for the &lt;code&gt;predicate()&lt;/code&gt; to turn &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final completed = Observable(false);&#xA;&#xA;void waitForCompletion() async {&#xA;  await asyncWhen(() =&amp;gt; _completed.value == true);&#xA;&#xA;  print(&#39;Completed&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Observer&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;One of the most visual reactions in the app is the UI. The &lt;strong&gt;Observer&lt;/strong&gt; widget (which is part of the &lt;strong&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/tree/master/flutter_mobx&#34;&gt;&lt;code&gt;flutter_mobx&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; package), provides a granular observer of the observables used in its &lt;code&gt;builder&lt;/code&gt; function. Whenever these observables change, &lt;code&gt;Observer&lt;/code&gt; rebuilds and renders.&lt;/p&gt; &#xA;&lt;p&gt;Below is the &lt;em&gt;Counter&lt;/em&gt; example in its entirety.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter_mobx/flutter_mobx.dart&#39;;&#xA;import &#39;package:mobx/mobx.dart&#39;;&#xA;&#xA;part &#39;counter.g.dart&#39;;&#xA;&#xA;class Counter = CounterBase with _$Counter;&#xA;&#xA;abstract class CounterBase with Store {&#xA;  @observable&#xA;  int value = 0;&#xA;&#xA;  @action&#xA;  void increment() {&#xA;    value++;&#xA;  }&#xA;}&#xA;&#xA;class CounterExample extends StatefulWidget {&#xA;  const CounterExample({Key key}) : super(key: key);&#xA;&#xA;  @override&#xA;  _CounterExampleState createState() =&amp;gt; _CounterExampleState();&#xA;}&#xA;&#xA;class _CounterExampleState extends State&amp;lt;CounterExample&amp;gt; {&#xA;  final _counter = Counter();&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) =&amp;gt; Scaffold(&#xA;        appBar: AppBar(&#xA;          title: const Text(&#39;Counter&#39;),&#xA;        ),&#xA;        body: Center(&#xA;          child: Column(&#xA;            mainAxisAlignment: MainAxisAlignment.center,&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              const Text(&#xA;                &#39;You have pushed the button this many times:&#39;,&#xA;              ),&#xA;              Observer(&#xA;                  builder: (_) =&amp;gt; Text(&#xA;                        &#39;${_counter.value}&#39;,&#xA;                        style: const TextStyle(fontSize: 20),&#xA;                      )),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;        floatingActionButton: FloatingActionButton(&#xA;          onPressed: _counter.increment,&#xA;          tooltip: &#39;Increment&#39;,&#xA;          child: const Icon(Icons.add),&#xA;        ),&#xA;      );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have read up till here, then 🎉🎉🎉. There are couple of ways in which you can contribute to the growing community of &lt;code&gt;MobX.dart&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pick up any issue marked with &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;&#34;good first issue&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Propose any feature, enhancement&lt;/li&gt; &#xA; &lt;li&gt;Report a bug&lt;/li&gt; &#xA; &lt;li&gt;Fix a bug&lt;/li&gt; &#xA; &lt;li&gt;Participate in a discussion and help in decision making&lt;/li&gt; &#xA; &lt;li&gt;Write and improve some &lt;strong&gt;documentation&lt;/strong&gt;. Documentation is super critical and its importance cannot be overstated!&lt;/li&gt; &#xA; &lt;li&gt;Send in a Pull Request :-)&lt;/li&gt; &#xA; &lt;li&gt;Chime in and &lt;a href=&#34;https://discord.gg/dNHY52k&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat-on%20Discord-lightgrey?style=flat&amp;amp;logo=discord&#34; alt=&#34;Join the chat at https://discord.gg/dNHY52k&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-61-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pavanpodila&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/156846?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pavan Podila&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=pavanpodila&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=pavanpodila&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/pulls?q=is%3Apr+reviewed-by%3Apavanpodila&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/katis&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/877226?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;katis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=katis&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#ideas-katis&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/pulls?q=is%3Apr+reviewed-by%3Akatis&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=katis&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/shyndman&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/42326?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Scott Hyndman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=shyndman&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#ideas-shyndman&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/pulls?q=is%3Apr+reviewed-by%3Ashyndman&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=shyndman&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dexterx.dev&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/25263378?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Michael Bui&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=MaikuB&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=MaikuB&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/pulls?q=is%3Apr+reviewed-by%3AMaikuB&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#example-MaikuB&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rrousselGit&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/20165741?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Remi Rousselet&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=rrousselGit&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=rrousselGit&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/pulls?q=is%3Apr+reviewed-by%3ArrousselGit&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/adiakhaitan&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/20572621?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;adiaKhaitan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=adiakhaitan&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://flutterando.com.br&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/4047813?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jacob Moura&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=jacobaraujo7&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=jacobaraujo7&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#translation-jacobaraujo7&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.faladevs.com&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/30571368?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Daniel Albuquerque&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#translation-dmAlbuquerque&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/marcoms&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/4211302?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Marco Scannadinari&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=marcoms&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/lsaudon&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/25029876?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;lsaudon&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=lsaudon&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=lsaudon&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://efthymis.com&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/633903?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Efthymis Sarmpanis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=esarbanis&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://thewebstorebyg.wordpress.com/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/2689410?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Giri Jeedigunta&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=giri-jeedigunta&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#example-giri-jeedigunta&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/hramnathnayak&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/33794330?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Hebri Ramnath Nayak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=hramnathnayak&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtube.com/c/robertbrunhage&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/26344867?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Robert Brunhage&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=RobertBrunhage&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/bradyt&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/6107051?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Brady Trainor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=bradyt&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://kush3107.github.io/&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/11977323?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kushagra Saxena&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=kush3107&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#example-kush3107&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://patreon.com/pedromassango&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/33294549?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pedro Massango&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#translation-pedromassango&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/peteyycz&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/7130689?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Peter Czibik&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=peteyycz&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://luan.xyz&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/882703?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Luan Nico&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=luanpotter&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kobiburnley&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/7372363?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kobi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=kobiburnley&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/chimon2000&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/6907797?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ryan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=chimon2000&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.upwork.com/freelancers/~01192eefd8a1c267f7&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/231950?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ivan Terekhin&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=JEuler&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yoavrofe&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/367621?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Yoav Rofé&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=yoavrofe&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/matiwojt&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/20087150?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mateusz Wojtczak&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=wojtczakmat&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/t-artikov&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/1927992?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Timur Artikov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=t-artikov&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sohonisaurabh&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/20185422?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Saurabh Sohoni&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=sohonisaurabh&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/renanzdm&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/47435996?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;renanzdm&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=renanzdm&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://croogo.org&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/39490?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rachman Chavik&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=rchavik&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Vardiak&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/19309601?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nathan Cabasso&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/issues?q=author%3AVardiak&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=Vardiak&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/geisterfurz007&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/26303198?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;geisterfurz007&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=geisterfurz007&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#content-geisterfurz007&#34; title=&#34;Content&#34;&gt;🖋&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/hawkbee1&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/49282360?&amp;amp;v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Romuald Barbe&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=hawkbee1&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/alexander-mazuruk&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/18071010?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alexander Mazuruk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#example-k-paxian&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.albertobonacina.com&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/202140?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alberto Bonacina&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=polilluminato&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/phen0menon&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/15520523?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Roland Ibragimov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=phen0menon&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://gitconnected.com/bsdfzzzy&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/11622770?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;zyzhao&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=bsdfzzzy&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xinhaiwang&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/20069410?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Xinhai Wang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=xinhaiwang&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/hmayer00&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/821904?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Henry Mayer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=hmayer00&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=hmayer00&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/darkstarx&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/3534966?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergey&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=darkstarx&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=darkstarx&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/MisterJimson&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/7351329?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jason Rai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=MisterJimson&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://joshuadeguzman.net&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/20706361?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Joshua de Guzman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#example-joshuadeguzman&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/hertleinj&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/33684625?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jan Hertlein&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=hertleinj&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://avioli.github.io/blog/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/524259?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Evo Stamatov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=avioli&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/davi-eduardo-25797a102/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/14044895?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Davi Eduardo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=davieduardo94&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.inovatso.com.br&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/5619696?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Leonardo Custodio&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=leonardocustodio&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=leonardocustodio&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://aboutprince.in/&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/26018750?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Prince Srivastava&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mobxjs/mobx.dart/master/#example-pr-1&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=pr-1&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://muhajir.dev&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/12745166?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Muhammad Muhajir&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=muhajirdev&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/geweald&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/16155640?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;D&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=geweald&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/davidmartos96&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/22084723?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;David Martos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=davidmartos96&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/inimaga&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/24917864?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Issa Nimaga&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=inimaga&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Ascenio&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7662016?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ascênio&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=Ascenio&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=Ascenio&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://sonerik.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5076429?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alex Isaienko&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=s0nerik&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://moritzweber.xyz&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/17176771?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Moritz Weber&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=moritz-weber&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://profile.codersrank.io/user/sno2/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/43641633?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Carter Snook&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=sno2&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/brianrobles204&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/872114?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Brian Robles&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=brianrobles204&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=brianrobles204&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/harrypunk&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4889163?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;harrypunk&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=harrypunk&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://bandism.net/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/22633385?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ikko Ashimine&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=eltociear&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://amond.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1964421?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;amond&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=amondnet&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/fzyzcjy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5236035?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;fzyzcjy&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=fzyzcjy&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=fzyzcjy&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pixolity.se&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/759524?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vandad Nahavandipoor&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=vandadnp&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://molchanovsky.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/12999702?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sergey Molchanovsky&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=subzero911&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ko16a46&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/100613422?v=4?s=64&#34; width=&#34;64px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ko16a46&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart/commits?author=ko16a46&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
</feed>