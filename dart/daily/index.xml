<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-16T01:26:12Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Workiva/over_react</title>
    <updated>2024-02-16T01:26:12Z</updated>
    <id>tag:github.com,2024-02-16:/Workiva/over_react</id>
    <link href="https://github.com/Workiva/over_react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for building statically-typed React UI components using Dart.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OverReact&lt;/h1&gt; &#xA;&lt;p&gt;A library for building statically-typed React UI components using Dart.&lt;/p&gt; &#xA;&lt;p&gt;This library also exposes &lt;em&gt;OverReact Redux&lt;/em&gt;, which has &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/over_react_redux_documentation.md&#34;&gt;its own documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/over_react&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/over_react.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/documentation/over_react/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-over_react-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://workiva.github.io/over_react/analyzer_plugin/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-analyzer_plugin_(beta)-ff69b4.svg?sanitize=true&#34; alt=&#34;OverReact Analyzer Plugin (beta)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/over_react/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/over_react/Lobby.svg?sanitize=true&#34; alt=&#34;Join the gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Workiva/over_react/actions?query=workflow%3A%22Dart+CI%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/Workiva/over_react/workflows/Dart%20CI/badge.svg?branch=master&#34; alt=&#34;Dart CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#using-overreact&#34;&gt;Using OverReact&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#running-unit-tests-in-your-project&#34;&gt;Running tests in your project&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#overreact-component-unit-test-examples&#34;&gt;OverReact Component Unit Test Examples&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#anatomy-of-an-overreact-component&#34;&gt;Anatomy of an OverReact component&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uifactory&#34;&gt;UiFactory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops&#34;&gt;UiProps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uistate&#34;&gt;UiState&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uicomponent2&#34;&gt;UiComponent2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#fluent-style-component-consumption&#34;&gt;Fluent-style component consumption&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#dom-components-and-props&#34;&gt;DOM components and props&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#component-formatting&#34;&gt;Component Formatting&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#building-custom-components&#34;&gt;Building custom components&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#component-boilerplate-templates&#34;&gt;Component Boilerplates&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#component-best-practices&#34;&gt;Component Best Practices&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#__START_EMBEDDED_README__&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;h3&gt;UiComponent2 / Component Boilerplate Migration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;There have been a lot of fantastic &lt;a href=&#34;https://pub.dev/packages/over_react#-changelog-tab-&#34;&gt;improvements in this library recently&lt;/a&gt;&lt;/strong&gt;, all of which require some action on your part if you have existing components built prior to the &lt;code&gt;3.1.0&lt;/code&gt; release of OverReact. &lt;strong&gt;We&#39;ve done everything we can to make the migrations as painless as possible&lt;/strong&gt; - with the vast majority of changes being handled by some codemod scripts you can run in your libraries locally. As always, if you encounter issues while working through the migration, you can reach out to us in &lt;a href=&#34;https://gitter.im/over_react/Lobby&#34;&gt;our gitter chat&lt;/a&gt;, or &lt;a href=&#34;https://github.com/Workiva/over_react/issues/new&#34;&gt;open a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;First, you should upgrade your components to &lt;code&gt;UiComponent2&lt;/code&gt;&lt;/strong&gt;. Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/ui_component2_transition.md&#34;&gt;&lt;code&gt;UiComponent2&lt;/code&gt; Migration Guide&lt;/a&gt; to learn about the benefits of &lt;code&gt;UiComponent2&lt;/code&gt;, the codemod script you can run, and other updates you may need to make manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once you have migrated your components to &lt;code&gt;UiComponent2&lt;/code&gt;&lt;/strong&gt;, you&#39;re ready to start using the &#34;v3&#34; component boilerplate - which is a &lt;em&gt;massive&lt;/em&gt; quality of life improvement for component authors! Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/new_boilerplate_migration.md&#34;&gt;Component Boilerplate Migration Guide&lt;/a&gt; to learn about the benefits of the new boilerplate, the codemod script you can run, and other updates you may need to make manually.&lt;/p&gt; &#xA;&lt;h3&gt;More Migration Guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/built_redux_to_redux.md&#34;&gt;&lt;strong&gt;BuiltRedux to Redux&lt;/strong&gt;&lt;/a&gt;: A guide to transitioning to OverReact Redux from BuiltRedux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/flux_to_redux.md&#34;&gt;&lt;strong&gt;Flux to Redux&lt;/strong&gt;&lt;/a&gt;: A guide to how to transition from w_flux to OverReact Redux. This guide also introduces a new architecture, Influx, that can be used for incremental refactors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/dart2_migration.md&#34;&gt;&lt;strong&gt;Dart2 Migration&lt;/strong&gt;&lt;/a&gt;: Documentation on the Dart 2 builder updates and how to transition componentry to Dart 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Using OverReact&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Familiarize yourself with React JS&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Since OverReact is built atop React JS, we strongly encourage you to gain familiarity with it by reading some &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;React JS tutorials&lt;/a&gt; first.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Familiarize yourself with Dart Web applications&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;If you have never built a Web application in Dart, we strongly encourage you to gain familiarity with the core terminology, tools and boilerplate necessary to serve an application locally using Dart. &lt;a href=&#34;https://dart.dev/tutorials/web/get-started&#34;&gt;Dart has fantastic documentation and tutorials to get you started&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;over_react&lt;/code&gt; package as a dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  over_react: ^4.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/tools/analyzer_plugin/&#34;&gt;OverReact Analyzer Plugin (beta)&lt;/a&gt;&lt;/strong&gt;, which has many lints and assists to make authoring OverReact components easier!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the native JavaScript &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react_dom&lt;/code&gt; libraries in your app’s &lt;code&gt;index.html&lt;/code&gt; file, and add an HTML element with a unique identifier where you’ll mount your OverReact UI component(s).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;!-- ... --&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;div id=&#34;react_mount_point&#34;&amp;gt;&#xA;      // OverReact component render() output will show up here.&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;script src=&#34;packages/react/react.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;script src=&#34;packages/react/react_dom.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;    &amp;lt;!-- NOTE: &#34;index&#34; should correspond to the&#xA;         name of the `.dart` file that contains your `main()` entrypoint. --&amp;gt;&#xA;    &amp;lt;script type=&#34;application/javascript&#34; defer src=&#34;index.dart.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When serving your application in production, use &lt;code&gt;packages/react/react_with_react_dom_prod.js&lt;/code&gt; file instead of the un-minified &lt;code&gt;react.js&lt;/code&gt; / &lt;code&gt;react_dom.js&lt;/code&gt; files shown in the example above.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import the &lt;code&gt;over_react&lt;/code&gt; and &lt;code&gt;react_dom&lt;/code&gt; libraries into &lt;code&gt;index.dart&lt;/code&gt;. Then &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#building-custom-components&#34;&gt;build some components&lt;/a&gt; and mount / render a React tree within the HTML element you created in the previous step by calling &lt;code&gt;react_dom.render()&lt;/code&gt; within the &lt;code&gt;main()&lt;/code&gt; entrypoint of your Dart application.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Be sure to namespace the &lt;code&gt;react_dom.dart&lt;/code&gt; import as &lt;code&gt;react_dom&lt;/code&gt; to avoid collisions with &lt;code&gt;UiComponent.render&lt;/code&gt; when &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#building-custom-components&#34;&gt;creating custom components&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:html&#39;;&#xA;import &#39;package:over_react/react_dom.dart&#39; as react_dom;&#xA;import &#39;package:over_react/over_react.dart&#39;;&#xA;&#xA;// Example of where the `Foo` component might be exported from&#xA;import &#39;package:your_package_name/foo.dart&#39;;&#xA;&#xA;main() {&#xA;  // Mount / render your component/application.&#xA;  react_dom.render(&#xA;    Foo()(),&#xA;    querySelector(&#39;#react_mount_point&#39;),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;webdev serve&lt;/code&gt; in the root of your Dart project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re not using &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/new_boilerplate_migration.md&#34;&gt;the latest component boilerplate&lt;/a&gt;, you&#39;ll have to restart your analysis server in your IDE for the built types to resolve properly after the build completes. Unfortunately, this is a &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/34344&#34;&gt;known limitation in the analysis server at this time&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/new_boilerplate_migration.md&#34;&gt;&lt;strong&gt;Migrate your components to the latest component boilerplate to never worry about this again!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Running unit tests in your project&lt;/h3&gt; &#xA;&lt;p&gt;When running unit tests on code that uses the over_react &lt;a href=&#34;https://github.com/Workiva/over_react/raw/master/lib/src/builder/README.md&#34;&gt;builder&lt;/a&gt; &lt;em&gt;(or any code that imports &lt;code&gt;over_react&lt;/code&gt;)&lt;/em&gt;, &lt;strong&gt;you must run your tests using the &lt;code&gt;build_runner&lt;/code&gt; package&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Do &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; run tests via &lt;code&gt;pub run build_runner test&lt;/code&gt; in a package while another instance of &lt;code&gt;build_runner&lt;/code&gt; (e.g. &lt;code&gt;pub run build_runner serve&lt;/code&gt;) is running in that same package. &lt;a href=&#34;https://github.com/dart-lang/build/issues/352#issuecomment-461554316&#34;&gt;This workflow is unsupported by build_runner&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run tests using the &lt;code&gt;build_runner&lt;/code&gt; package, and specify the platform to be a browser platform. Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pub run build_runner test -- -p chrome test/your_test_file.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;OverReact Component Unit Test Examples&lt;/h4&gt; &#xA;&lt;p&gt;Below are links to a UI component from our example &lt;a href=&#34;https://github.com/Workiva/over_react/tree/master/app/over_react_redux/todo_client&#34;&gt;&#34;Todo App&#34;&lt;/a&gt;, and its analogous tests that we&#39;ve written for components we use in . We utilize the utilities found in our &lt;a href=&#34;https://github.com/Workiva/over_react_test&#34;&gt;&lt;code&gt;over_react_test&lt;/code&gt; library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;TodoListItem&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/app/over_react_redux/todo_client/lib/src/components/todo_list_item.dart&#34;&gt;Component Definition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/app/over_react_redux/todo_client/test/unit/browser/components/todo_list_item_test.dart&#34;&gt;Component Unit Tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/app/over_react_redux/todo_client/test/unit/browser/components/connected_todo_list_item_test.dart&#34;&gt;&#34;Connected&#34; OverReact Redux Unit Tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Anatomy of an OverReact component&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;If you are not familiar with React JS&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Since OverReact is built atop React JS, we strongly encourage you to gain familiarity with it by reading this &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;React JS tutorial&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;over_react&lt;/code&gt; library functions as an additional &#34;layer&#34; atop the &lt;a href=&#34;https://github.com/cleandart/react-dart&#34;&gt;Dart react package&lt;/a&gt; which handles the underlying JS interop that wraps around &lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React JS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library strives to maintain a 1:1 relationship with the React JS component class and API. To do that, an OverReact component is comprised of four core pieces that are each wired up via our &lt;a href=&#34;https://github.com/Workiva/over_react/raw/master/lib/src/builder/README.md&#34;&gt;builder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uifactory&#34;&gt;UiFactory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops&#34;&gt;UiProps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uistate&#34;&gt;UiState&lt;/a&gt; (optional)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uicomponent2&#34;&gt;UiComponent2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;UiFactory&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;UiFactory&lt;/code&gt; is a function&lt;/strong&gt; that returns a new instance of a &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uicomponent2&#34;&gt;&lt;code&gt;UiComponent2&lt;/code&gt;&lt;/a&gt;’s &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops&#34;&gt;&lt;code&gt;UiProps&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;UiFactory&amp;lt;FooProps&amp;gt; Foo = castUiFactory(_$Foo); // ignore: undefined_identifier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This factory is &lt;strong&gt;the entry-point&lt;/strong&gt; to consuming any OverReact component.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;UiProps&lt;/code&gt; instance it returns can be used &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops-as-a-builder&#34;&gt;as a component builder&lt;/a&gt;, or &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops-as-a-map&#34;&gt;as a typed view into an existing props map&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;castUiFactory&lt;/code&gt; is necessary to prevent implicit cast analysis warnings before code generation has been run.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;UiProps&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;UiProps&lt;/code&gt; is a &lt;code&gt;Map&lt;/code&gt; class&lt;/strong&gt; that adds statically-typed getters and setters for each React component prop. It can also be invoked as a function, serving &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops-as-a-builder&#34;&gt;as a builder&lt;/a&gt; for its analogous component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;mixin FooProps on UiProps {&#xA;  // ... the props for your component go here&#xA;  String bar;&#xA;  bool baz;&#xA;  List&amp;lt;int&amp;gt; bizzles;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&#34;https://github.com/Workiva/over_react/raw/master/lib/src/builder/README.md&#34;&gt;builder&lt;/a&gt; generates a class with getters and setters overriding the fields you declare in your mixin, but you don&#39;t need to worry about that generated class. To use props from another mixin, simply mix it in! See &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#with-other-mixins&#34;&gt;&lt;em&gt;&#34;With other mixins&#34;&lt;/em&gt;&lt;/a&gt; below for more information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;With other mixins&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;To compose props mixin classes&lt;/strong&gt;, create a class alias that uses &lt;code&gt;UiProps&lt;/code&gt; as the base and mix in multiple props mixins. The generated props implementation will then use it as the base class and implement the generated version of those props mixins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;UiFactory&amp;lt;FooProps&amp;gt; Foo = castUiFactory(_$Foo); // ignore: undefined_identifier&#xA;&#xA;mixin FooPropsMixin on UiProps {&#xA;  String bar;&#xA;  bool baz;&#xA;  List&amp;lt;int&amp;gt; bizzles;&#xA;}&#xA;&#xA;class FooProps = UiProps with FooPropsMixin, BarPropsMixin;&#xA;&#xA;class FooComponent extends UiComponent2&amp;lt;FooProps&amp;gt; {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Composition&lt;/h5&gt; &#xA;&lt;p&gt;The use-case for composing multiple props mixins into a single component props class is typically a component that renders another component, and therefore needs to expose the prop interface of that child component which will get forwarded via &lt;a href=&#34;https://pub.dev/documentation/over_react/3.1.0/over_react/UiComponent2/addUnconsumedProps.html&#34;&gt;&lt;code&gt;addUnconsumedProps&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/props_mixin_component_composition.md&#34;&gt;&lt;strong&gt;Check out an example of props mixin component composition here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;UiProps as a Map&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;UiFactory&amp;lt;FooProps&amp;gt; Foo = castUiFactory(_$Foo); // ignore: undefined_identifier&#xA;&#xA;mixin FooProps on UiProps {&#xA;  String color;&#xA;}&#xA;&#xA;class FooComponent extends UiComponent2&amp;lt;FooProps&amp;gt; {&#xA;  // ...&#xA;}&#xA;&#xA;void bar() {&#xA;  FooProps props = Foo();&#xA;&#xA;  props.color = &#39;#66cc00&#39;;&#xA;&#xA;  print(props.color); // #66cc00&#xA;  print(props);       // {FooProps.color: #66cc00}&#xA;}&#xA;&#xA;/// You can also use the factory to create a UiProps instance&#xA;/// backed by an existing Map.&#xA;void baz() {&#xA;  Map existingMap = {&#39;FooProps.color&#39;: &#39;#0094ff&#39;};&#xA;&#xA;  FooProps props = Foo(existingMap);&#xA;&#xA;  print(props.color); // #0094ff&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;UiProps as a builder&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;UiFactory&amp;lt;FooProps&amp;gt; Foo = castUiFactory(_$Foo); // ignore: undefined_identifier&#xA;&#xA;mixin FooProps on UiProps {&#xA;  String color;&#xA;}&#xA;&#xA;class FooComponent extends UiComponent2&amp;lt;FooProps&amp;gt; {&#xA;  ReactElement bar() {&#xA;    // Create a UiProps instance to serve as a builder&#xA;    FooProps builder = Foo();&#xA;&#xA;    // Set some prop values&#xA;    builder&#xA;      ..id = &#39;the_best_foo&#39;&#xA;      ..color = &#39;#ee2724&#39;;&#xA;&#xA;    // Invoke as a function with the desired children&#xA;    // to return a new instance of the component.&#xA;    return builder(&#39;child1&#39;, &#39;child2&#39;);&#xA;  }&#xA;&#xA;  /// Even better... do it inline! (a.k.a fluent)&#xA;  ReactElement baz() {&#xA;    return (Foo()&#xA;      ..id = &#39;the_best_foo&#39;&#xA;      ..color = &#39;red&#39;&#xA;    )(&#xA;      &#39;child1&#39;,&#xA;      &#39;child2&#39;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#fluent-style-component-consumption&#34;&gt;&lt;em&gt;fluent-style component consumption&lt;/em&gt;&lt;/a&gt; for more examples on builder usage.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;UiState&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;UiState&lt;/code&gt; is a &lt;code&gt;Map&lt;/code&gt; class&lt;/strong&gt; &lt;em&gt;(just like &lt;code&gt;UiProps&lt;/code&gt;)&lt;/em&gt; that adds statically-typed getters and setters for each React component state property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;mixin FooState on UiState {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;UiState&lt;/code&gt; is optional, and won’t be used for every component. Check out the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#stateful-component-boilerplate&#34;&gt;&lt;code&gt;UiStatefulComponent&lt;/code&gt; boilerplate&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;a href=&#34;https://github.com/Workiva/over_react/raw/master/lib/src/builder/README.md&#34;&gt;builder&lt;/a&gt; will make the concrete getters and setters available from the mixin fields you author in a generated class. To mix state classes together, the mixin class should be used rather than the generated props class. See &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#with-other-mixins&#34;&gt;&lt;em&gt;&#34;With other mixins&#34;&lt;/em&gt;&lt;/a&gt; above for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;UiComponent2&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For guidance on updating to &lt;code&gt;UiComponent2&lt;/code&gt; from &lt;code&gt;UiComponent&lt;/code&gt;, check out the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/doc/ui_component2_transition.md&#34;&gt;UiComponent2 Migration Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;UiComponent2&lt;/code&gt; is a subclass of &lt;a href=&#34;https://pub.dev/documentation/react/latest/react/Component2-class.html&#34;&gt;&lt;code&gt;react.Component2&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;, containing lifecycle methods and rendering logic for components.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class FooComponent extends UiComponent2&amp;lt;FooProps&amp;gt; {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This class provides statically-typed props via &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uiprops&#34;&gt;&lt;code&gt;UiProps&lt;/code&gt;&lt;/a&gt;, as well as utilities for prop forwarding and CSS class merging.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;UiStatefulComponent2&lt;/code&gt; flavor augments &lt;code&gt;UiComponent2&lt;/code&gt; behavior with statically-typed state via &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#uistate&#34;&gt;&lt;code&gt;UiState&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;Accessing and manipulating props / state within UiComponent2&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Within the &lt;code&gt;UiComponent2&lt;/code&gt; class, &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; are not just &lt;code&gt;Map&lt;/code&gt;s. They are instances of &lt;code&gt;UiProps&lt;/code&gt; and &lt;code&gt;UiState&lt;/code&gt;, &lt;strong&gt;which means you don’t need String keys to access them!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;newProps()&lt;/code&gt; and &lt;code&gt;newState()&lt;/code&gt; are also exposed to conveniently create empty instances of &lt;code&gt;UiProps&lt;/code&gt; and &lt;code&gt;UiState&lt;/code&gt; as needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typedPropsFactory()&lt;/code&gt; and &lt;code&gt;typedStateFactory()&lt;/code&gt; are also exposed to conveniently create typed &lt;code&gt;props&lt;/code&gt; / &lt;code&gt;state&lt;/code&gt; objects out of any provided backing map.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;UiFactory&amp;lt;FooProps&amp;gt; Foo = castUiFactory(_$Foo); // ignore: undefined_identifier&#xA;&#xA;mixin FooProps on UiProps {&#xA;  String color;&#xA;  Function() onDidActivate;&#xA;  Function() onDidDeactivate;&#xA;}&#xA;mixin FooState on UiState {&#xA;  bool isActive;&#xA;}&#xA;&#xA;class FooComponent extends UiStatefulComponent2&amp;lt;FooProps, FooState&amp;gt; {&#xA;  @override&#xA;  Map get defaultProps =&amp;gt; (newProps()&#xA;    ..color = &#39;#66cc00&#39;&#xA;  );&#xA;&#xA;  @override&#xA;  Map get initialState =&amp;gt; (newState()&#xA;    ..isActive = false&#xA;  );&#xA;&#xA;  @override&#xA;  void componentDidUpdate(Map prevProps, Map prevState, [dynamic snapshot]) {&#xA;    var tPrevState = typedStateFactory(prevState);&#xA;    var tPrevProps = typedPropsFactory(prevProps);&#xA;&#xA;    if (state.isActive &amp;amp;&amp;amp; !tPrevState.isActive) {&#xA;      props.onDidActivate?.call();&#xA;    } else if (!state.isActive &amp;amp;&amp;amp; tPrevState.isActive) {&#xA;      props.onDidDeactivate?.call();&#xA;    }&#xA;  }&#xA;&#xA;  @override&#xA;  dynamic render() {&#xA;    return (Dom.div()&#xA;      ..modifyProps(addUnconsumedDomProps)&#xA;      ..style = {&#xA;        ...newStyleFromProps(props),&#xA;        &#39;color&#39;: props.color,&#xA;        &#39;fontWeight&#39;: state.isActive ? &#39;bold&#39; : &#39;normal&#39;, &#xA;      }&#xA;    )(&#xA;      (Dom.button()..onClick = _handleButtonClick)(&#39;Toggle&#39;),&#xA;      props.children,&#xA;    );&#xA;  }&#xA;&#xA;  void _handleButtonClick(SyntheticMouseEvent event) {&#xA;    setState(newState()&#xA;      ..isActive = !state.isActive&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Fluent-style component consumption&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/tools/analyzer_plugin/&#34;&gt;OverReact analyzer plugin&lt;/a&gt;&lt;/strong&gt; has many lints and assists to make authoring OverReact components easier!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In OverReact, components are consumed by invoking a &lt;code&gt;UiFactory&lt;/code&gt; to return a new &lt;code&gt;UiProps&lt;/code&gt; builder, which is then modified and invoked to build a &lt;a href=&#34;https://pub.dev/documentation/react/latest/react_client.react_interop/ReactElement-class.html&#34;&gt;&lt;code&gt;ReactElement&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is done to make &#34;fluent-style&#34; component consumption possible, so that the OverReact consumer experience is very similar to the &lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React JS&lt;/a&gt; / &#34;vanilla&#34; &lt;a href=&#34;https://github.com/cleandart/react-dart&#34;&gt;react-dart&lt;/a&gt; experience.&lt;/p&gt; &#xA;&lt;p&gt;To demonstrate the similarities, the example below shows a render method for JS, JSX, react-dart, and over_react that will have the exact same HTML markup result.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React JS&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-es6&#34;&gt;render() {&#xA;  return React.createElement(&#39;div&#39;, {className: &#39;container&#39;},&#xA;    React.createElement(&#39;h1&#39;, null, &#39;Click the button!&#39;),&#xA;    React.createElement(&#39;button&#39;, {&#xA;      id: &#39;main_button&#39;,&#xA;      onClick: _handleClick&#xA;    }, &#39;Click me&#39;)&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;React JS&lt;/strong&gt; (JSX):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;div className=&#34;container&#34;&amp;gt;&#xA;    &amp;lt;h1&amp;gt;Click the button!&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;button&#xA;      id=&#34;main_button&#34;&#xA;      onClick={_handleClick}&#xA;    &amp;gt;Click me&amp;lt;/button&amp;gt;&#xA;  &amp;lt;/div&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vanilla react-dart&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;render() {&#xA;  return react.div({&#39;className&#39;: &#39;container&#39;},&#xA;    react.h1({}, &#39;Click the button!&#39;),&#xA;    react.button({&#xA;      &#39;id&#39;: &#39;main_button&#39;,&#xA;      &#39;onClick&#39;: _handleClick&#xA;    }, &#39;Click me&#39;)&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OverReact&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;render() {&#xA;  return (Dom.div()..className = &#39;container&#39;)(&#xA;    Dom.h1()(&#39;Click the button!&#39;),&#xA;    (Dom.button()&#xA;      ..id = &#39;main_button&#39;&#xA;      ..onClick = _handleClick&#xA;    )(&#39;Click me&#39;)&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let’s break down the OverReact fluent-style shown above&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;render() {&#xA;  // Create a builder for a &amp;lt;div&amp;gt;,&#xA;  // add a CSS class name by cascading a typed setter,&#xA;  // and invoke the builder with the HTML DOM &amp;lt;h1&amp;gt; and &amp;lt;button&amp;gt; children.&#xA;  return (Dom.div()..className = &#39;container&#39;)(&#xA;&#xA;    // Create a builder for an &amp;lt;h1&amp;gt; and invoke it with children.&#xA;    // No need for wrapping parentheses, since no props are added.&#xA;    Dom.h1()(&#39;Click the button!&#39;),&#xA;&#xA;    // Create a builder for a &amp;lt;button&amp;gt;,&#xA;    (Dom.button()&#xA;      // add a ubiquitous DOM prop exposed on all components,&#xA;      // which Dom.button() forwards to its rendered DOM,&#xA;      ..id = &#39;main_button&#39;&#xA;      // add another prop,&#xA;      ..onClick = _handleClick&#xA;    // and finally invoke the builder with children.&#xA;    )(&#39;Click me&#39;)&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;DOM components and props&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://github.com/cleandart/react-dart&#34;&gt;react-dart&lt;/a&gt; DOM components &lt;em&gt;(&lt;code&gt;react.div&lt;/code&gt;, &lt;code&gt;react.a&lt;/code&gt;, etc.)&lt;/em&gt; have a corresponding &lt;code&gt;Dom&lt;/code&gt; method &lt;em&gt;(&lt;code&gt;Dom.div()&lt;/code&gt;, &lt;code&gt;Dom.a()&lt;/code&gt;, etc.)&lt;/em&gt; in OverReact.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ReactElement renderLink() {&#xA;  return (Dom.a()&#xA;    ..id = &#39;home_link&#39;&#xA;    ..href = &#39;/home&#39;&#xA;  )(&#39;Home&#39;);&#xA;}&#xA;&#xA;ReactElement renderResizeHandle() {&#xA;  return (Dom.div()&#xA;    ..className = &#39;resize-handle&#39;&#xA;    ..onMouseDown = _startDrag&#xA;  )();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OverReact DOM components return a new &lt;code&gt;DomProps&lt;/code&gt; builder, which can be used to render them via our &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#fluent-style-component-consumption&#34;&gt;fluent interface&lt;/a&gt; as shown in the examples above. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;DomProps&lt;/code&gt; has statically-typed getters and setters for all HTML attribute props.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The &lt;code&gt;domProps()&lt;/code&gt; function is also available to create a new typed Map or a typed view into an existing Map. Useful for manipulating DOM props and adding DOM props to components that don’t forward them directly, or to access a DOM prop from a plain map in a lifecycle method as shown below.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@override&#xA;void componentDidUpdate(Map prevProps, Map prevState, [dynamic snapshot]) {&#xA;  // Say you want to compare the previous / current value of `DomProps.title` here...&#xA;  final titleChanged = domProps(prevProps).title != props.title;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Component Formatting&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;A note on dart_style:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Currently, &lt;a href=&#34;https://github.com/dart-lang/dart_style&#34;&gt;dart_style (dartfmt)&lt;/a&gt; decreases the readability of components built using &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#fluent-style-component-consumption&#34;&gt;OverReact&#39;s fluent-style&lt;/a&gt;. See &lt;a href=&#34;https://github.com/dart-lang/dart_style/issues/549&#34;&gt;https://github.com/dart-lang/dart_style/issues/549&lt;/a&gt; for more info.&lt;/p&gt; &#xA; &lt;p&gt;We&#39;re exploring some different ideas to improve automated formatting, but for the time being, we &lt;strong&gt;do not recommend&lt;/strong&gt; using dart_style with OverReact.&lt;/p&gt; &#xA; &lt;p&gt;However, if you do choose to use dart_style, you can greatly improve its output by using trailing commas in children argument lists:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dart_style formatting:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return (Button()&#xA;  ..id = &#39;flip&#39;&#xA;  ..skin =&#xA;      ButtonSkin.vanilla)((Dom.span()&#xA;  ..className = &#39;flip-container&#39;)((Dom.span()..className = &#39;flipper&#39;)(&#xA;    (Dom.span()&#xA;      ..className =&#xA;          &#39;front-side&#39;)((Icon()..glyph = IconGlyph.CHEVRON_DOUBLE_RIGHT)()),&#xA;    (Dom.span()&#xA;      ..className =&#xA;          &#39;back-side&#39;)((Icon()..glyph = IconGlyph.CHEVRON_DOUBLE_LEFT)()))));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;dart_style formatting, when trailing commas are used:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return (Button()&#xA;  ..id = &#39;flip&#39;&#xA;  ..skin = ButtonSkin.vanilla)(&#xA;  (Dom.span()..className = &#39;flip-container&#39;)(&#xA;    (Dom.span()..className = &#39;flipper&#39;)(&#xA;      (Dom.span()..className = &#39;front-side&#39;)(&#xA;        (Icon()..glyph = IconGlyph.CHEVRON_DOUBLE_RIGHT)(),&#xA;      ),&#xA;      (Dom.span()..className = &#39;back-side&#39;)(&#xA;        (Icon()..glyph = IconGlyph.CHEVRON_DOUBLE_LEFT)(),&#xA;      ),&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;To help ensure your OverReact code is readable and consistent, we&#39;ve arrived at the following formatting rules.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ALWAYS&lt;/strong&gt; place the closing builder parent on a new line.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(Button()&#xA;  ..skin = ButtonSkin.SUCCESS&#xA;  ..isDisabled = true&#xA;)(&#39;Submit&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(Button()&#xA;  ..skin = ButtonSkin.SUCCESS&#xA;  ..isDisabled = true)(&#39;Submit&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ALWAYS&lt;/strong&gt; pass component children on a new line with trailing commas and 2 space indentation.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dom.div()(&#xA;  Dom.span()(&#39;nested component&#39;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dom.div()(&#xA;  Dom.span()(&#39;nested component A&#39;),&#xA;  Dom.span()(&#39;nested component B&#39;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Children are not on a new line; in most cases,&#xA;// this makes it difficult to quickly determine nesting.&#xA;Dom.div()(Dom.span()(&#39;nested component&#39;), Dom.span()(&#39;nested component&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// With nested hierarchies, continuation indents can quickly result&#xA;// in a &#34;pyramid of Doom&#34;&#xA;Dom.div()(&#xA;    Dom.ul()(&#xA;        Dom.li()(&#xA;            Dom.a()(&#39;A link!&#39;)&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Omitting trailing commas makes it a pain to rearrange lines&#xA;Dom.div()(&#xA;  Dom.span()(&#39;nested component A&#39;),&#xA;  Dom.span()(&#39;nested component B&#39;)&#xA;)&#xA;Dom.div()(&#xA;  Dom.span()(&#39;nested component B&#39;) // ugh, need to add a comma here...&#xA;  Dom.span()(&#39;nested component A&#39;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AVOID&lt;/strong&gt; passing children within lists; lists should only be used when the number/order of the children are dynamic.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dom.div()(&#xA;  Dom.span()(&#39;nested component&#39;),&#xA;  Dom.span()(&#39;nested component&#39;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var children = [&#xA;  Dom.div()(&#39;List of Items:&#39;),&#xA;]..addAll(props.items.map(renderItem));&#xA;&#xA;return Dom.div()(children)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dom.div()([&#xA;  (Dom.span()..key = &#39;span1&#39;)(&#39;nested component&#39;),&#xA;  (Dom.span()..key = &#39;span2&#39;)(&#39;nested component&#39;),&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AVOID&lt;/strong&gt; specifying more than one cascading prop setter on the same line.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(Dom.div()&#xA;  ..id = &#39;my_div&#39;&#xA;  ..className = &#39;my-class&#39;&#xA;)()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(Dom.div()..id = &#39;my_div&#39;..className = &#39;my-class&#39;)()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building custom components&lt;/h2&gt; &#xA;&lt;p&gt;Now that we’ve gone over how to &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#using-overreact&#34;&gt;use the &lt;code&gt;over_react&lt;/code&gt; package in your project&lt;/a&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#anatomy-of-an-overreact-component&#34;&gt;anatomy of a component&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#dom-components-and-props&#34;&gt;DOM components&lt;/a&gt; that you get for free from OverReact, you&#39;re ready to start building your own custom React UI components.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start with one of the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#component-boilerplate-templates&#34;&gt;component boilerplate templates&lt;/a&gt; below (Or, use OverReact&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/snippets/README.md&#34;&gt;code snippets for WebStorm/IntelliJ and VsCode&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#component-boilerplate&#34;&gt;Component&lt;/a&gt; &lt;em&gt;(props only)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#stateful-component-boilerplate&#34;&gt;Stateful Component&lt;/a&gt; &lt;em&gt;(props + state)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Fill in your props and rendering/lifecycle logic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consume your component with the fluent interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/#using-overreact&#34;&gt;the app you’ve set up to consume &lt;code&gt;over_react&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ webdev serve&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;That’s it! Code will be automatically generated on the fly by the &lt;a href=&#34;https://github.com/Workiva/over_react/raw/master/lib/src/builder/README.md&#34;&gt;builder&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Check out some custom &lt;a href=&#34;https://workiva.github.io/over_react/demos&#34;&gt;component demos&lt;/a&gt; to get a feel for what’s possible!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Component Boilerplate Templates&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/over_react/master/snippets/README.md&#34;&gt;WebStorm/IntelliJ and VsCode Snippets&lt;/a&gt;&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Component Boilerplate&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:over_react/over_react.dart&#39;;&#xA;part &#39;foo_component.over_react.g.dart&#39;;&#xA;&#xA;UiFactory&amp;lt;FooProps&amp;gt; Foo = castUiFactory(_$Foo); // ignore: undefined_identifier&#xA;&#xA;mixin FooProps on UiProps {&#xA;  // Props go here, declared as fields:&#xA;  bool isDisabled;&#xA;  Iterable&amp;lt;String&amp;gt; items;&#xA;}&#xA;&#xA;class FooComponent extends UiComponent2&amp;lt;FooProps&amp;gt; {&#xA;  @override&#xA;  Map get defaultProps =&amp;gt; (newProps()&#xA;    // Cascade default props here&#xA;    ..isDisabled = false&#xA;    ..items = []&#xA;  );&#xA;&#xA;  @override&#xA;  dynamic render() {&#xA;    // Return the rendered component contents here.&#xA;    // The `props` variable is typed; no need for string keys!&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Stateful Component Boilerplate&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:over_react/over_react.dart&#39;;&#xA;part &#39;foo_component.over_react.g.dart&#39;;&#xA;&#xA;UiFactory&amp;lt;BarProps&amp;gt; Bar = castUiFactory(_$Bar); // ignore: undefined_identifier&#xA;&#xA;mixin BarProps on UiProps {&#xA;  // Props go here, declared as fields:&#xA;  bool isDisabled;&#xA;  Iterable&amp;lt;String&amp;gt; items;&#xA;}&#xA;&#xA;mixin BarState on UiState {&#xA;  // State goes here, declared as fields:&#xA;  bool isShown;&#xA;}&#xA;&#xA;class BarComponent extends UiStatefulComponent2&amp;lt;BarProps, BarState&amp;gt; {&#xA;  @override&#xA;  Map get defaultProps =&amp;gt; (newProps()&#xA;    // Cascade default props here&#xA;    ..isDisabled = false&#xA;    ..items = []&#xA;  );&#xA;&#xA;  @override&#xA;  Map get initialState =&amp;gt; (newState()&#xA;    // Cascade initial state here&#xA;    ..isShown = true&#xA;  );&#xA;&#xA;  @override&#xA;  dynamic render() {&#xA;    // Return the rendered component contents here.&#xA;    // The `props` variable is typed; no need for string keys!&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Function Component Boilerplate&lt;/h4&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:over_react/over_react.dart&#39;;&#xA;part &#39;foo_component.over_react.g.dart&#39;;&#xA;&#xA;UiFactory&amp;lt;FooProps&amp;gt; Foo = uiFunction(&#xA;  (props) {&#xA;    // Set default props using null-aware operators.&#xA;    final isDisabled = props.isDisabled ?? false;&#xA;    final items = props.items ?? [];&#xA;&#xA;    // Return the rendered component contents here.&#xA;    // The `props` variable is typed; no need for string keys!&#xA;    return Fragment()(&#xA;      Dom.div()(items),&#xA;      (Dom.button()..disabled = isDisabled)(&#39;Click me!&#39;),&#xA;    );&#xA;  },&#xA;  // The generated props config will match the factory name.&#xA;  _$FooConfig, // ignore: undefined_identifier&#xA;);&#xA;&#xA;mixin FooProps on UiProps {&#xA;  // Props go here, declared as fields:&#xA;  bool isDisabled;&#xA;  Iterable&amp;lt;String&amp;gt; items;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Component Best Practices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ALWAYS&lt;/strong&gt; write informative comments for your component factories. Include what the component relates to, relies on, or if it extends another component.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// Use the `DropdownButton` component to render a button&#xA;/// that controls the visibility of a child [DropdownMenu].&#xA;///&#xA;/// * Related to [Button].&#xA;/// * Extends [DropdownTrigger].&#xA;/// * Similar to [SplitButton].&#xA;///&#xA;/// See: &amp;lt;https://link-to-any-relevant-documentation&amp;gt;.&#xA;UiFactory&amp;lt;DropdownButtonProps&amp;gt; DropdownButton = castUiFactory(_$DropdownButton); // ignore: undefined_identifier&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// Component Factory for a dropdown button component.&#xA;UiFactory&amp;lt;DropdownButtonProps&amp;gt; DropdownButton = castUiFactory(_$DropdownButton); // ignore: undefined_identifier&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ALWAYS&lt;/strong&gt; set a default / initial value for boolean &lt;code&gt;props&lt;/code&gt; / &lt;code&gt;state&lt;/code&gt; fields, and document that value in a comment.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why?&lt;/em&gt; Without default prop values for bool fields, they could be &lt;code&gt;null&lt;/code&gt; - which is extremely confusing and can lead to a lot of unnecessary null-checking in your business logic.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;mixin DropdownButtonProps on UiProps {&#xA;  /// Whether the [DropdownButton] appears disabled.&#xA;  ///&#xA;  /// Default: `false`&#xA;  bool isDisabled;&#xA;&#xA;  /// Whether the [DropdownButton]&#39;s child [DropdownMenu] is open&#xA;  /// when the component is first mounted.&#xA;  ///&#xA;  /// Determines the initial value of [DropdownButtonState.isOpen].&#xA;  ///&#xA;  /// Default: `false`&#xA;  bool initiallyOpen;&#xA;}&#xA;&#xA;mixin DropdownButtonState on UiState {&#xA;  /// Whether the [DropdownButton]&#39;s child [DropdownMenu] is open.&#xA;  ///&#xA;  /// Initial: [DropdownButtonProps.initiallyOpen]&#xA;  bool isOpen;&#xA;}&#xA;&#xA;DropdownButtonComponent&#xA;    extends UiStatefulComponent2&amp;lt;DropdownButtonProps, DropdownButtonState&amp;gt; {&#xA;  @override&#xA;  Map get defaultProps =&amp;gt; (newProps()&#xA;    ..isDisabled = false&#xA;    ..initiallyOpen = false&#xA;  );&#xA;&#xA;  @override&#xA;  Map get initialState =&amp;gt; (newState()&#xA;    ..isOpen = props.initiallyOpen&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;mixin DropdownButtonProps on UiProps {&#xA;  bool isDisabled;&#xA;  bool initiallyOpen;&#xA;}&#xA;&#xA;mixin DropdownButtonState on UiState {&#xA;  bool isOpen;&#xA;}&#xA;&#xA;DropdownButtonComponent&#xA;    extends UiStatefulComponent2&amp;lt;DropdownButtonProps, DropdownButtonState&amp;gt; {&#xA;  // Confusing stuff is gonna happen in here with&#xA;  // bool props that could be null.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AVOID&lt;/strong&gt; adding &lt;code&gt;props&lt;/code&gt; or &lt;code&gt;state&lt;/code&gt; fields that don&#39;t have an informative comment.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Good:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;mixin DropdownButtonProps on UiProps {&#xA;  /// Whether the [DropdownButton] appears disabled.&#xA;  ///&#xA;  /// Default: `false`&#xA;  bool isDisabled;&#xA;&#xA;  /// Whether the [DropdownButton]&#39;s child [DropdownMenu] is open&#xA;  /// when the component is first mounted.&#xA;  ///&#xA;  /// Determines the initial value of [DropdownButtonState.isOpen].&#xA;  ///&#xA;  /// Default: `false`&#xA;  bool initiallyOpen;&#xA;}&#xA;&#xA;mixin DropdownButtonState on UiState {&#xA;  /// Whether the [DropdownButton]&#39;s child [DropdownMenu] is open.&#xA;  ///&#xA;  /// Initial: [DropdownButtonProps.initiallyOpen]&#xA;  bool isOpen;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Bad:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;mixin DropdownButtonProps on UiProps {&#xA;  bool isDisabled;&#xA;  bool initiallyOpen;&#xA;}&#xA;&#xA;mixin DropdownButtonState on UiState {&#xA;  bool isOpen;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;Ignore Ungenerated Warnings Project-Wide&lt;/h4&gt; &#xA;&lt;p&gt;To avoid having to add &lt;code&gt;// ignore: uri_has_not_been_generated&lt;/code&gt; to each component library on the part/import that references generated code, ignore this warning globally within analysis_options.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt; analyzer:&#xA;   errors:&#xA;     uri_has_not_been_generated: ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;include&lt;/code&gt; &lt;a href=&#34;https://github.com/Workiva/workiva_analysis_options&#34;&gt;workiva_analysis_options&lt;/a&gt; which ignores this warning by default.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Yes please! (&lt;a href=&#34;https://github.com/Workiva/over_react/raw/master/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;Please read our contributor guidelines first&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;over_react&lt;/code&gt; library adheres to &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any API changes that are not backwards compatible will &lt;strong&gt;bump the major version&lt;/strong&gt; &lt;em&gt;(and reset the minor / patch)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Any new functionality that is added in a backwards-compatible manner will &lt;strong&gt;bump the minor version&lt;/strong&gt; &lt;em&gt;(and reset the patch)&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Any backwards-compatible bug fixes that are added will &lt;strong&gt;bump the patch version&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>