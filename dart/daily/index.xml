<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-11T01:37:53Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Roaa94/movies_app</title>
    <updated>2022-08-11T01:37:53Z</updated>
    <id>tag:github.com,2022-08-11:/Roaa94/movies_app</id>
    <link href="https://github.com/Roaa94/movies_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Directory for movies and famous people&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Movies App&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hits.dwyl.com/roaa94/movies_app&#34;&gt;&lt;img src=&#34;https://hits.dwyl.com/roaa94/movies_app.svg?style=flat-square&amp;amp;show=unique&#34; alt=&#34;HitCount&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter app that uses the &#34;&lt;a href=&#34;https://www.themoviedb.org/&#34;&gt;The Movie DB&lt;/a&gt;&#34; api to fetch popular people and their info (their movies, images, ..etc). &lt;a href=&#34;https://developers.themoviedb.org/3/people/get-popular-people&#34;&gt;(API version 3 is used)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🎨 &lt;a href=&#34;https://dribbble.com/shots/7902411-Actors-Tracking-App/attachments/499926?mode=media&#34;&gt;Design inspiration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#running-the-app&#34;&gt;Running the App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#previews&#34;&gt;Previews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#app-architecture-and-folder-structure&#34;&gt;App Architecture &amp;amp; Folder Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#http-caching&#34;&gt;Http Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#infinite-scroll-functionality&#34;&gt;Infinite Scroll Functionality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#testing-with-riverpod&#34;&gt;Testing with Riverpod&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#1-dart-only-testing&#34;&gt;Dart-only testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#2-flutter-widget-tests&#34;&gt;Flutter Widget Tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the App&lt;/h2&gt; &#xA;&lt;p&gt;An api key from The Movie DB is required to run the app. Then you can run the app by adding the following run arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--dart-define=TMDB_API_KEY=&amp;lt;YOUR_API_KEY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Previews&lt;/h2&gt; &#xA;&lt;h3&gt;Inifnite Scrolling &amp;amp; Hero Transition&lt;/h3&gt; &#xA;&lt;p&gt;(Paginated list with Riverpod providers, &lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#infinite-scroll-functionality&#34;&gt;more information below&lt;/a&gt; 👇🏼)&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex&#34;&gt; &#xA; &lt;img style=&#34;display: inline-block&#34; src=&#34;https://user-images.githubusercontent.com/50345358/181906034-a33123c5-cddc-4d38-a8f2-e5c616cc5d48.gif&#34;&gt; &#xA; &lt;img style=&#34;display: inline-block&#34; src=&#34;https://user-images.githubusercontent.com/50345358/181905989-e2cb9205-7100-4212-bb4e-794900dcc68f.gif&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;App Architecture and Folder Structure&lt;/h2&gt; &#xA;&lt;p&gt;The code of the app implements clean architecture to separate the UI, domain and data layers with a feature-first approach for folder structure.&lt;/p&gt; &#xA;&lt;h4&gt;Folder Structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;lib&#xA;├── core&#xA;│   ├── configs&#xA;│   ├── exceptions&#xA;│   ├── models&#xA;│   ├── services&#xA;│   │   ├── http&#xA;│   │   └── storage&#xA;│   └── widgets&#xA;├── features&#xA;│   ├── media&#xA;│   │   ├── enums&#xA;│   │   ├── models&#xA;│   │   ├── providers&#xA;│   │   ├── repositories&#xA;│   │   └── views&#xA;│   │       ├── pages&#xA;│   │       └── widgets&#xA;│   ├── people&#xA;│   │   ├── enums&#xA;│   │   ├── models&#xA;│   │   ├── providers&#xA;│   │   ├── repositories&#xA;│   │   └── views&#xA;│   │       ├── pages&#xA;│   │       └── widgets&#xA;│   └── tmdb-configs&#xA;│       ├── enums&#xA;│       ├── models&#xA;│       ├── providers&#xA;│       └── repositories&#xA;├── main.dart&#xA;└── movies_app.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main.dart&lt;/code&gt; file has services initialization code and wraps the root &lt;code&gt;MoviesApp&lt;/code&gt; with a &lt;code&gt;ProviderScope&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;movies_app.dart&lt;/code&gt; has the root &lt;code&gt;MaterialApp&lt;/code&gt; and fetches the TMDB configs necessary to generate links for the images of the TMDB API endpoints inside the app&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;core&lt;/code&gt; folder contains code shared across features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;configs&lt;/code&gt; contain general styles (colors, themes &amp;amp; text styles)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;services&lt;/code&gt; abstract app-level services with their implementations &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;http&lt;/code&gt; service is implemented with &lt;a href=&#34;https://pub.dev/packages/dio&#34;&gt;&lt;code&gt;Dio&lt;/code&gt;&lt;/a&gt; and uses a &lt;code&gt;CacheInterceptor&lt;/code&gt; to achieve caching by using the &lt;code&gt;StorageService&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#http-caching&#34;&gt;more information about caching below&lt;/a&gt; 👇🏼)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;storage&lt;/code&gt; service is implemented with &lt;a href=&#34;https://pub.dev/packages/hive_flutter&#34;&gt;&lt;code&gt;Hive&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Service locator pattern and Riverpod are used to abstract services when used in other layers.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final storageServiceProvider = Provider&amp;lt;StorageService&amp;gt;(&#xA;  (_) =&amp;gt; HiveStorageService(),&#xA;);&#xA;&#xA;// Usage:&#xA;// ref.watch(storageServiceProvider)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;features&lt;/code&gt; folder: the repository pattern is used to decouple logic required to access data sources from the domain layer. For example, the &lt;code&gt;PeopleRepository&lt;/code&gt; abstracts and centralizes the various functionality required to access &lt;code&gt;People&lt;/code&gt; from the TMDB API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class PeopleRepository {&#xA;  String get path;&#xA;&#xA;  String get apiKey;&#xA;&#xA;  Future&amp;lt;Person&amp;gt; getPersonDetails(&#xA;    int personId, {&#xA;    bool forceRefresh = false,&#xA;    required TMDBImageConfigs imageConfigs,&#xA;  });&#xA;  &#xA;  //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The repository implementation with the &lt;code&gt;HttpService&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class HttpPeopleRepository implements PeopleRepository {&#xA;  final HttpService httpService;&#xA;&#xA;  HttpPeopleRepository(this.httpService);&#xA;&#xA;  @override&#xA;  String get path =&amp;gt; &#39;/person&#39;;&#xA;&#xA;  @override&#xA;  String get apiKey =&amp;gt; Configs.tmdbAPIKey;&#xA;&#xA;  @override&#xA;  Future&amp;lt;Person&amp;gt; getPersonDetails(&#xA;    int personId, {&#xA;    bool forceRefresh = false,&#xA;    required TMDBImageConfigs imageConfigs,&#xA;  }) async {&#xA;    final responseData = await httpService.get(&#xA;      &#39;$path/$personId&#39;,&#xA;      forceRefresh: forceRefresh,&#xA;      queryParameters: {&#xA;        &#39;api_key&#39;: apiKey,&#xA;      },&#xA;    );&#xA;&#xA;    return Person.fromJson(responseData).populateImages(imageConfigs);&#xA;  }&#xA;  &#xA;  //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Riverpod &lt;code&gt;Provider&lt;/code&gt; to access this implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final peopleRepositoryProvider = Provider&amp;lt;PeopleRepository&amp;gt;(&#xA;  (ref) {&#xA;    final httpService = ref.watch(httpServiceProvider);&#xA;&#xA;    return HttpPeopleRepository(httpService);&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally accessing the repository implementation from the UI layer using a Riverpod &lt;code&gt;FutureProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final personDetailsProvider = FutureProvider.family&amp;lt;Person, int&amp;gt;(&#xA;  (ref, personId) async {&#xA;    final peopleRepository = ref.watch(peopleRepositoryProvider);&#xA;    final tmdbConfigs = await ref.watch(tmdbConfigsProvider.future);&#xA;&#xA;    return await peopleRepository.getPersonDetails(&#xA;      personId,&#xA;      imageConfigs: tmdbConfigs.images,&#xA;    );&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how the abstract &lt;code&gt;HttpService&lt;/code&gt; is accessed from the repository implementation and then the abstract &lt;code&gt;PeopleRepository&lt;/code&gt; is accessed from the UI and how each of these layers acheive separation and scalability by providing the ability to switch implementation and make changes and/or test each layer seaparately. (&lt;a href=&#34;https://raw.githubusercontent.com/Roaa94/movies_app/main/#testing&#34;&gt;More about testing 👇🏼&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Http Caching&lt;/h2&gt; &#xA;&lt;p&gt;To achieve caching http requests and the ability to show content to the user even when an error or loss of connectivity happens, a &lt;a href=&#34;https://github.com/Roaa94/movies_app/raw/main/lib/core/services/http/dio-interceptors/cache_interceptor.dart&#34;&gt;&lt;code&gt;CacheInterceptor&lt;/code&gt;&lt;/a&gt; was created and added to &lt;code&gt;Dio&lt;/code&gt;&#39;s interceptor in the &lt;code&gt;DioHttpService&lt;/code&gt; class. A Dio &lt;code&gt;Interceptor&lt;/code&gt; has the following methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class CacheInterceptor implements Interceptor {&#xA;  final StorageService storageService;&#xA;&#xA;  CacheInterceptor(this.storageService);&#xA;  &#xA;  @override&#xA;  void onError(DioError err, ErrorInterceptorHandler handler) {&#xA;    // TODO: implement onError&#xA;  }&#xA;&#xA;  @override&#xA;  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {&#xA;    // TODO: implement onRequest&#xA;  }&#xA;&#xA;  @override&#xA;  void onResponse(Response response, ResponseInterceptorHandler handler) {&#xA;    // TODO: implement onResponse&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By depending on our &lt;code&gt;StorageService&lt;/code&gt; we were able to cache a reposnse when it doesn&#39;t exist in storage and when its &lt;code&gt;age&lt;/code&gt; duration has not passed, and return that cache in case of error in the &lt;code&gt;onError&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h2&gt;Infinite Scroll Functionality&lt;/h2&gt; &#xA;&lt;p&gt;Infinite scrolling was achieved by utilizing Riverpod&#39;s providers and the ListView&#39;s &lt;code&gt;itemBuilder&lt;/code&gt; param whithout needing the complication of listening to scrolling events. The itemBuilder runs on each item build when it comes into view, if the data of this item is available it displays it, if it&#39;s not, the next page is fetched. Here is the code with explanation in the comments:&lt;/p&gt; &#xA;&lt;h4&gt;The providers you need:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// The FutureProvider that does the fetching of the paginated list of people&#xA;final paginatedPopularPeopleProvider =&#xA;    FutureProvider.family&amp;lt;PaginatedResponse&amp;lt;Person&amp;gt;, int&amp;gt;(&#xA;  (ref, int pageIndex) async {&#xA;    final peopleRepository = ref.watch(peopleRepositoryProvider);&#xA;    // The API request:&#xA;    return await peopleRepository.getPopularPeople(page: pageIndex + 1);&#xA;  },&#xA;);&#xA;&#xA;/// The provider that has the value of the total count of the list items&#xA;///&#xA;/// The [PaginatedResponse] class contains information about the total number of&#xA;/// pages and the total results in all pages along with a list of the provided type&#xA;///&#xA;/// An example response from the API for any page looks like this:&#xA;/// {&#xA;///   &#34;page&#34;: 1,&#xA;///   &#34;results&#34;: [], // list of 20 items&#xA;///   &#34;total_pages&#34;: 500,&#xA;///   &#34;total_results&#34;: 10000 // Value taken by this provider&#xA;/// }&#xA;final popularPeopleCountProvider = Provider&amp;lt;AsyncValue&amp;lt;int&amp;gt;&amp;gt;((ref) {&#xA;  return ref.watch(paginatedPopularPeopleProvider(0)).whenData(&#xA;        (PaginatedResponse&amp;lt;Person&amp;gt; pageData) =&amp;gt; pageData.totalResults,&#xA;      );&#xA;});&#xA;&#xA;/// The provider that provides the Person data for each list item&#xA;///&#xA;/// Initially it throws an UnimplementedError because we won&#39;t use it before overriding it&#xA;final currentPopularPersonProvider = Provider&amp;lt;AsyncValue&amp;lt;Person&amp;gt;&amp;gt;((ref) {&#xA;  throw UnimplementedError();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using this in the widgets code&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;/// The provider that provides the Person data for each list item&#xA;///&#xA;/// Initially it throws an UnimplementedError because we won&#39;t use it before overriding it&#xA;final currentPopularPersonProvider = Provider&amp;lt;AsyncValue&amp;lt;Person&amp;gt;&amp;gt;((ref) {&#xA;  throw UnimplementedError();&#xA;});&#xA;&#xA;class PopularPeopleList extends ConsumerWidget {&#xA;  const PopularPeopleList({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context, WidgetRef ref) {&#xA;    final popularPeopleCount = ref.watch(popularPeopleCountProvider);&#xA;&#xA;    // The ListView&#39;s count is from the popularPeopleCountProvider which&#xA;    // by watching it here, causes the first fetch with a page index of 0&#xA;    return popularPeopleCount.when(&#xA;      loading: () =&amp;gt; const CircularProgressIndicator(),&#xA;      data: (int count) {&#xA;        return ListView.builder(&#xA;          itemCount: count,&#xA;          itemBuilder: (context, index) {&#xA;            // At this point the paginatedPopularPeopleProvider stores the values of the&#xA;            // list items of at least the first page&#xA;            //&#xA;            // (index ~/ 20): Performing a truncating division of the list item index by the number of&#xA;            // items per page gives us the value of the current page that we then access using the&#xA;            // family modifier of the paginatedPopularPeopleProvider provider&#xA;            // This way calling 21 ~/ 20 = 1 will fetch the second page,&#xA;            // and 41 ~/ 20 = 2 will fetch the 3rd page, and so on.&#xA;            final AsyncValue&amp;lt;Person&amp;gt; currentPopularPersonFromIndex = ref&#xA;                .watch(paginatedPopularPeopleProvider(index ~/ 20))&#xA;                .whenData((pageData) =&amp;gt; pageData.results[index % 20]);&#xA;&#xA;            return ProviderScope(&#xA;              overrides: [&#xA;                // Override the Unimplemented provider&#xA;                currentPopularPersonProvider&#xA;                    .overrideWithValue(currentPopularPersonFromIndex)&#xA;              ],&#xA;              child: const PopularPersonListItem(),&#xA;            );&#xA;          },&#xA;        );&#xA;      },&#xA;      // Handle error&#xA;      error: (_, __) =&amp;gt; const Icon(Icons.error),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class PopularPersonListItem extends ConsumerWidget {&#xA;  const PopularPersonListItem({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context, WidgetRef ref) {&#xA;    // Here we don&#39;t need to do anything but listen to the currentPopularPersonProvider&#39;s&#xA;    // AsyncValue that was overridden in the ListView&#39;s builder&#xA;    final AsyncValue&amp;lt;Person&amp;gt; personAsync =&#xA;        ref.watch(currentPopularPersonProvider);&#xA;&#xA;    return Container(&#xA;      child: personAsync.when(&#xA;        data: (Person person) =&amp;gt; Container(/* ... */), // List item content&#xA;        loading: () =&amp;gt; const CircularProgressIndicator(), // Handle loading&#xA;        error: (_, __) =&amp;gt; const Icon(Icons.error), // Handle Error&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; folder mirrors the &lt;code&gt;lib&lt;/code&gt; folder in addition to some test utilities. And more tests will be added.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/http_mock_adapter&#34;&gt;&lt;code&gt;http_mock_adapter&lt;/code&gt;&lt;/a&gt; is used to test the &lt;code&gt;DioHttpService&lt;/code&gt; and mock http requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/hive_test&#34;&gt;&lt;code&gt;hive_test&lt;/code&gt;&lt;/a&gt; is used to test the &lt;code&gt;HiveStorageService&lt;/code&gt; and mock storage methods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/mocktail&#34;&gt;&lt;code&gt;mocktail&lt;/code&gt;&lt;/a&gt; is used to mock dependecies.&lt;/p&gt; &#xA;&lt;h3&gt;Testing with Riverpod&lt;/h3&gt; &#xA;&lt;p&gt;Testing with Riverpod is hassle-free and simple. You can test your providers separately from Flutter, and you can test how they behave in your widgets with widget testing. You can find helpful information about this in the &lt;a href=&#34;https://riverpod.dev/docs/cookbooks/testing&#34;&gt;official docs&lt;/a&gt;. But let&#39;s see examples from this repo to have a look at both methods for different kinds of Riverpod providers.&lt;/p&gt; &#xA;&lt;h4&gt;1. Dart-only Testing&lt;/h4&gt; &#xA;&lt;p&gt;Simply we can read our providers with a &lt;code&gt;ProviderContainer&lt;/code&gt; and we should make sure to dispose it and not share it between tests. The &lt;code&gt;ProviderContainer&lt;/code&gt; takes an &lt;code&gt;overrides&lt;/code&gt; param which you can provide your mocks to.&lt;/p&gt; &#xA;&lt;h4&gt;1.1 Testing the simple &lt;code&gt;Provider&lt;/code&gt; provider:&lt;/h4&gt; &#xA;&lt;p&gt;This is the simplest provider and it&#39;s the easiest to test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final foo = Provider&amp;lt;String&amp;gt;((_) =&amp;gt; &#39;bar&#39;);&#xA;&#xA;void main() {&#xA;  test(&#39;foo is a bar&#39;, () {&#xA;    final providerContainer = ProviderContainer();&#xA;    addTearDown(providerContainer.dispose);&#xA;&#xA;    expect(providerContainer.read(foo), equals(&#39;bar&#39;));&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this app, I am making sure my abstract services and repository providers return the correct implementations by doing these simple tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// service provider&#xA;final storageServiceProvider = Provider&amp;lt;StorageService&amp;gt;((_) =&amp;gt; HiveStorageService());&#xA;&#xA;// test&#xA;void main() {&#xA;  test(&#39;serviceProvider returns HiveStorageService&#39;, () {&#xA;    final providerContainer = ProviderContainer();&#xA;    addTearDown(providerContainer.dispose);&#xA;&#xA;    expect(&#xA;      providerContainer.read(storageServiceProvider),&#xA;      isA&amp;lt;HiveStorageService&amp;gt;(),&#xA;    );&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;1.2 Testing the &lt;code&gt;FutureProvider&lt;/code&gt; provider:&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s take our &lt;code&gt;tmdbConfigsProvider&lt;/code&gt; as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final tmdbConfigsProvider = FutureProvider&amp;lt;TMDBConfigs&amp;gt;((ref) async {&#xA;  final tmdbConfigsRepository = ref.watch(tmdbConfigsRepositoryProvider);&#xA;&#xA;  return await tmdbConfigsRepository.get();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is how we can test it separately from Flutter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Mocks&#xA;class MockTMDBConfigsRepository extends Mock implements TMDBConfigsRepository {}&#xA;&#xA;class Listener&amp;lt;T&amp;gt; extends Mock {&#xA;  void call(T? previous, T value);&#xA;}&#xA;&#xA;// Test&#xA;void main() {&#xA;  final TMDBConfigsRepository mockTMDBConfigsRepository =&#xA;      MockTMDBConfigsRepository();&#xA;&#xA;  test(&#39;fetches TMDB configs&#39;, () async {&#xA;    when(() =&amp;gt; mockTMDBConfigsRepository.get(forceRefresh: false))&#xA;        .thenAnswer((_) async =&amp;gt; DummyConfigs.tmdbConfigs);&#xA;&#xA;    final tmdbConfigsListener = Listener&amp;lt;AsyncValue&amp;lt;TMDBConfigs&amp;gt;&amp;gt;();&#xA;&#xA;    final providerContainer = ProviderContainer(&#xA;      overrides: [&#xA;        // Replace the TMDB Configs repository with the Mock Repository&#xA;        tmdbConfigsRepositoryProvider&#xA;            .overrideWithValue(mockTMDBConfigsRepository),&#xA;      ],&#xA;    );&#xA;&#xA;    addTearDown(providerContainer.dispose);&#xA;&#xA;    providerContainer.listen&amp;lt;AsyncValue&amp;lt;TMDBConfigs&amp;gt;&amp;gt;(&#xA;      tmdbConfigsProvider,&#xA;      tmdbConfigsListener,&#xA;      fireImmediately: true,&#xA;    );&#xA;&#xA;    // Perform first reading, expects loading state&#xA;    final firstReading = providerContainer.read(tmdbConfigsProvider);&#xA;    expect(firstReading, const AsyncValue&amp;lt;TMDBConfigs&amp;gt;.loading());&#xA;&#xA;    // Listener was fired from `null` to loading AsyncValue&#xA;    verify(() =&amp;gt; tmdbConfigsListener(&#xA;          null,&#xA;          const AsyncValue&amp;lt;TMDBConfigs&amp;gt;.loading(),&#xA;        )).called(1);&#xA;&#xA;    // Perform second reading, by waiting for the request, expects fetched data&#xA;    final secondReading = await providerContainer.read(tmdbConfigsProvider.future);&#xA;    expect(secondReading, DummyConfigs.tmdbConfigs);&#xA;&#xA;    // Listener was fired from loading to fetched values&#xA;    verify(() =&amp;gt; tmdbConfigsListener(&#xA;      const AsyncValue&amp;lt;TMDBConfigs&amp;gt;.loading(),&#xA;      const AsyncValue&amp;lt;TMDBConfigs&amp;gt;.data(DummyConfigs.tmdbConfigs),&#xA;    )).called(1);&#xA;    &#xA;    // No further listener events fired&#xA;    verifyNoMoreInteractions(tmdbConfigsListener);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Flutter Widget Tests&lt;/h4&gt; &#xA;&lt;p&gt;We can simply wrap our pumped widget in our widget test with a &lt;code&gt;ProviderScope&lt;/code&gt; and provide it with the mocks using the &lt;code&gt;overrides&lt;/code&gt; param.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see how we can test the same &lt;code&gt;tmdbConfigsProvider&lt;/code&gt; to see how if it behaves as we want in our root &lt;code&gt;MoviesApp&lt;/code&gt; widget. Basically it should render the &lt;code&gt;AppLoader&lt;/code&gt; widget while loading, the &lt;code&gt;ErrorView&lt;/code&gt; widget in case of error, and finally the &lt;code&gt;PopularPeoplePage&lt;/code&gt; widget when the request completes successfully.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  final TMDBConfigsRepository mockTMDBConfigsRepository =&#xA;      MockTMDBConfigsRepository();&#xA;&#xA;  testWidgets(&#39;renders ErrorView for request error&#39;,&#xA;      (WidgetTester tester) async {&#xA;    when(() =&amp;gt; mockTMDBConfigsRepository.get(forceRefresh: false))&#xA;        .thenThrow(&#39;An Error Occurred!&#39;);&#xA;&#xA;    await tester.pumpWidget(&#xA;      ProviderScope(&#xA;        overrides: [&#xA;          // Replace the TMDB Configs repository with the Mock Repository&#xA;          tmdbConfigsRepositoryProvider&#xA;              .overrideWithValue(mockTMDBConfigsRepository),&#xA;        ],&#xA;        child: const MoviesApp(),&#xA;      ),&#xA;    );&#xA;&#xA;    // Initially loading&#xA;    expect(find.byType(AppLoader), findsOneWidget);&#xA;&#xA;    // Re-render to make sure fetching is finished&#xA;    await tester.pumpAndSettle();&#xA;&#xA;    // Shows error view&#xA;    expect(find.byType(ErrorView), findsOneWidget);&#xA;  });&#xA;&#xA;  testWidgets(&#xA;    &#39;renders PopularPeoplePage widget on request success&#39;,&#xA;    (WidgetTester tester) async {&#xA;      when(() =&amp;gt; mockTMDBConfigsRepository.get(forceRefresh: false))&#xA;          .thenAnswer((_) async =&amp;gt; DummyConfigs.tmdbConfigs);&#xA;&#xA;      await tester.pumpWidget(&#xA;        ProviderScope(&#xA;          overrides: [&#xA;            // Replace the TMDB Configs repository with the Mock Repository&#xA;            tmdbConfigsRepositoryProvider&#xA;                .overrideWithValue(mockTMDBConfigsRepository),&#xA;          ],&#xA;          child: const MoviesApp(),&#xA;        ),&#xA;      );&#xA;&#xA;      // Initially loading&#xA;      expect(find.byType(AppLoader), findsOneWidget);&#xA;&#xA;      // Re-render to make sure fetching is finished&#xA;      await tester.pumpAndSettle();&#xA;&#xA;      expect(find.byType(PopularPeoplePage), findsOneWidget);&#xA;    },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To explore the test coverage, run tests with --coverage argument&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter test --coverage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then generate coverage files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;genhtml coverage/lcov.info -o coverage/html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open the html files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;open coverage/html/index.html&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>RevenueCat/purchases-flutter</title>
    <updated>2022-08-11T01:37:53Z</updated>
    <id>tag:github.com,2022-08-11:/RevenueCat/purchases-flutter</id>
    <link href="https://github.com/RevenueCat/purchases-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter plugin for in-app purchases and subscriptions. Supports iOS, macOS and Android.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/5e2613cf294dc30503dcefb7/5e752025f8c3a31d56a51408_logo_red%20(1).svg?sanitize=true&#34; width=&#34;350&#34; alt=&#34;RevenueCat&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/purchases_flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/purchases_flutter.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;purchases_flutter&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;purchases_flutter&lt;/em&gt; is a client for the &lt;a href=&#34;https://www.revenuecat.com/&#34;&gt;RevenueCat&lt;/a&gt; subscription and purchase tracking system. It is an open source framework that provides a wrapper around &lt;code&gt;StoreKit&lt;/code&gt;, &lt;code&gt;Google Play Billing&lt;/code&gt; and the RevenueCat backend to make implementing in-app subscriptions in &lt;code&gt;Flutter&lt;/code&gt; easy - receipt validation and status tracking included!&lt;/p&gt; &#xA;&lt;h2&gt;Amazon Support&lt;/h2&gt; &#xA;&lt;p&gt;This version of the SDK doesn&#39;t have support for Amazon Store. If you would like to use our SDK with Amazon Store, use the version tagged &lt;a href=&#34;https://github.com/RevenueCat/purchases-flutter/releases/tag/amazon-latest&#34;&gt;amazon-latest&lt;/a&gt; and follow the docs at &lt;a href=&#34;https://docs.revenuecat.com/docs/flutter#amazon-appstore&#34;&gt;https://docs.revenuecat.com/docs/flutter#amazon-appstore&lt;/a&gt; to get set up.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;RevenueCat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;Server-side receipt validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;➡️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/webhooks&#34;&gt;Webhooks&lt;/a&gt; - enhanced server-to-server communication with events for purchases, renewals, cancellations, and more&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎯&lt;/td&gt; &#xA;   &lt;td&gt;Subscription status tracking - know whether a user is subscribed whether they&#39;re on iOS or Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📊&lt;/td&gt; &#xA;   &lt;td&gt;Analytics - automatic calculation of metrics like conversion, mrr, and churn&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📝&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.revenuecat.com/docs/flutter&#34;&gt;Online documentation&lt;/a&gt; up to date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔀&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.revenuecat.com/integrations&#34;&gt;Integrations&lt;/a&gt; - over a dozen integrations to easily send purchase data where you need it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💯&lt;/td&gt; &#xA;   &lt;td&gt;Well maintained - &lt;a href=&#34;https://github.com/RevenueCat/purchases-flutter/releases&#34;&gt;frequent releases&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📮&lt;/td&gt; &#xA;   &lt;td&gt;Great support - &lt;a href=&#34;https://revenuecat.zendesk.com&#34;&gt;Help Center&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin, add &lt;code&gt;purchases_flutter&lt;/code&gt; as a &lt;a href=&#34;https://flutter.io/platform-plugins/&#34;&gt;dependency in your pubspec.yaml file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;purchases_flutter&lt;/em&gt; requires XCode 13.3.1+ and minimum targets iOS 11.0+.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information, you can view our complete documentation at &lt;a href=&#34;https://docs.revenuecat.com/docs/flutter&#34;&gt;docs.revenuecat.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Flutterando/modular</title>
    <updated>2022-08-11T01:37:53Z</updated>
    <id>tag:github.com,2022-08-11:/Flutterando/modular</id>
    <link href="https://github.com/Flutterando/modular" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A smart project structure&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/Flutterando/modular&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Flutterando/modular/branch/master/graph/badge.svg?token=uO4x25wWuU&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Flutterando/modular/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;img src=&#34;https://img.shields.io/hexpm/l/modular&#34; alt=&#34;LICENSE&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/flutter_modular&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_modular.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/Flutterando/modular/stargazers/&#34;&gt;&lt;img src=&#34;https://badgen.net/github/stars/Flutterando/modular&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-46-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;h2&gt;Flutter Modular&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/flutter_modular.png&#34; alt=&#34;flutter_modular&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started with Modular&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/tree/master/flutter_modular&#34;&gt;flutter_modular Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/tree/master/flutter_modular_test&#34;&gt;flutter_modular_test Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/tree/master/modular_codegen&#34;&gt;modular_codegen Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features and bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please send feature requests and bugs at the &lt;a href=&#34;https://github.com/Flutterando/modular/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This README was created based on templates made available by Stagehand under a BSD-style &lt;a href=&#34;https://github.com/dart-lang/stagehand/raw/master/LICENSE&#34;&gt;license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Our thanks goes out to all these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://flutterando.com.br&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/4047813?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jacob Moura&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/#maintenance-jacobaraujo7&#34; title=&#34;Maintenance&#34;&gt;🚧&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=jacobaraujo7&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/pulls?q=is%3Apr+reviewed-by%3Ajacobaraujo7&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.flutterando.com.br/&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/4654514?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Vilson Blanco Dauinheimer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=bwolfs2&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=bwolfs2&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/pulls?q=is%3Apr+reviewed-by%3Abwolfs2&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://patreon.com/pedromassango&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/33294549?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pedro Massango&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=pedromassango&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=pedromassango&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/#ideas-pedromassango&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://kelvengalvao@gmail.com&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/32758755?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Kelven I. B. Galvão&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=irvine5k&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/#translation-irvine5k&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://flutterando.com.br&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/16373553?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;David Araujo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=davidsdearaujo&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://flutterando.com.br&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/41203980?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alvaro Vasconcelos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=AlvaroVasconcelos&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/andredealmei&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/33403972?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;André de Almeida&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=andredealmei&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=andredealmei&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://medium.com/@albertomonteiro&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/836496?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alberto Monteiro&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=AlbertoMonteiro&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=AlbertoMonteiro&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/GUIKAR741&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/18069622?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Guilherme Nepomuceno de Carvalho&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=GUIKAR741&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=GUIKAR741&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/lucioeduardo&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/14063319?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eduardo Lúcio&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=lucioeduardo&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=lucioeduardo&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Ascenio&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/7662016?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ascênio&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=Ascenio&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=Ascenio&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/wemersonrv&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/2028673?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Wemerson Couto Guimarães&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=wemersonrv&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/maguro&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/165060?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Alan D. Cabrera&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=maguro&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=maguro&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/jeanluucas/&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/6116799?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jean Lucas&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=jeaanlucas&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.polygonus.com&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/15182027?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Moacir Schmidt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=MoacirSchmidt&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/FelipeMarra&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/27727671?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Felipe Marra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=FelipeMarra&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/#translation-FelipeMarra&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://facebook.com/AdemKouki.Officiel&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/12462188?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adem Kouki&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=Ademking&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://gabul.dev&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/32063378?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gabriel Sávio - Flutterando&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=gabuldev&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://www.iatec.com&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/17324575?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tiagosito&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=tiagosito&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mateusfccp&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/4605213?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mateus Felipe C. C. Pinto&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutterando/modular/master/#translation-mateusfccp&#34; title=&#34;Translation&#34;&gt;🌍&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=mateusfccp&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pgrimaud&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/1866496?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pierre Grimaud&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=pgrimaud&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://toshiossada.com&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/2637049?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Toshi Ossada&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=toshiossada&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=toshiossada&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/allanlucio&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/7063932?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Allan L.&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=allanlucio&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=allanlucio&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=allanlucio&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://domkar.dev&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/7688351?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;David Domkář&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=DavidDomkar&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=DavidDomkar&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mex978&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/31356610?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Max Lima&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=Mex978&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rogsilva&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7675216?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rogério Silva&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=rogsilva&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pablo-threadable&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/32702468?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pablo Sanchez&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=pablo-threadable&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gibahjoe&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9147147?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;gibahjoe&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=gibahjoe&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=gibahjoe&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://cosmicshell.dev/#/home&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/15701673?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ghost&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=raphaelbarbosaqwerty&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gmcdowell&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10100952?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Greg McDowell&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=gmcdowell&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://isorensen.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3399976?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eduardo Sorensen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=isorensen&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=isorensen&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/saviogrossi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/695296?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Savio Grossi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=saviogrossi&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.thizer.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2068045?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Marco A. Braghim&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=marcobraghim&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/fogaiht&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/16519851?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Thiago Fernandes&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=fogaiht&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/gabriel-roveri-55933a182/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/42328188?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gabriel Roveri&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=GabrielCR99&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=GabrielCR99&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dadagov125&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/21357657?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Magomed Dadagov&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/Flutterando/modular/commits?author=dadagov125&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt;</summary>
  </entry>
</feed>