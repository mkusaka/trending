<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-09T01:37:55Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xuelongqy/flutter_easy_refresh</title>
    <updated>2022-07-09T01:37:55Z</updated>
    <id>tag:github.com,2022-07-09:/xuelongqy/flutter_easy_refresh</id>
    <link href="https://github.com/xuelongqy/flutter_easy_refresh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flutter widget that provides pull-down refresh and pull-up load.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_easy_refresh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easy_refresh/v3/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flutter?sort=votes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat-square&#34; alt=&#34;Awesome Flutter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/easy_refresh&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/easy_refresh&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easy_refresh/v3/README_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Just like the name, EasyRefresh can easily implement pull-down refresh and pull-up load on Flutter applications. It supports almost all Flutter Scrollable widgets. Its function is very similar to Android&#39;s SmartRefreshLayout, and it also absorbs the advantages of many third-party libraries. EasyRefresh integrates various styles of Header and Footer, but it has no limitations, you can easily customize it. Using Flutter&#39;s powerful animations, even just a simple control can be done. The goal of EasyRefresh is to create a powerful, stable and mature pull-to-refresh framework for Flutter.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://xuelongqy.github.io/flutter_easy_refresh/&#34;&gt;Online demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easy_refresh/releases&#34;&gt;APK download&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports all scrollable widgets&lt;/li&gt; &#xA; &lt;li&gt;Scrolling physics scope, exactly matching scrollable widgets&lt;/li&gt; &#xA; &lt;li&gt;Integrate multiple cool Header and Footer&lt;/li&gt; &#xA; &lt;li&gt;Support custom styles to achieve various animation effects&lt;/li&gt; &#xA; &lt;li&gt;Support pull-down refresh, pull-up load (Can be triggered and finished with a controller)&lt;/li&gt; &#xA; &lt;li&gt;Support indicator position setting, combined with listeners can also be placed in any position&lt;/li&gt; &#xA; &lt;li&gt;Support refresh when the page starts, and customize the view&lt;/li&gt; &#xA; &lt;li&gt;Support safe area, no more occlusion&lt;/li&gt; &#xA; &lt;li&gt;Customize scroll parameters to allow lists to have different scrolling feedback and inertia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sample&lt;/h2&gt; &#xA;&lt;h4&gt;1. Default constructor&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the child scope, all scrolling components will share one physics. If there is scroll nesting, use EasyRefresh.builder or set the scope with ScrollConfiguration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh(&#xA;    onRefresh: () async {&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;    child: ListView(),&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. builder constructor&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh.builder(&#xA;    onRefresh: () async {&#xA;      ....&#xA;      return IndicatorResult.success; &#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;    childBuilder: (context, physics) {&#xA;      return ListView(&#xA;        physics: physics,&#xA;      );&#xA;    },&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Indicator locate&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh.builder(&#xA;    header: Header(&#xA;      position: IndicatorPosition.locator,&#xA;    ),&#xA;    footer: Footer(&#xA;      position: IndicatorPosition.locator,&#xA;    ),&#xA;    onRefresh: () async {&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;      return IndicatorResult.noMore;&#xA;    },&#xA;    child: CustomScrollView(&#xA;      slivers: [&#xA;        SliverAppBar(),&#xA;        const HeaderLocator.sliver(),&#xA;        ...&#xA;        const FooterLocator.sliver(),&#xA;        ],&#xA;      ),&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Use controller&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefreshController _controller = EasyRefreshController(&#xA;    controlFinishRefresh: true,&#xA;    controlFinishLoad: true,&#xA;  );&#xA;  ....&#xA;  EasyRefresh(&#xA;    controller: _controller,&#xA;    onRefresh: () async {&#xA;      ....&#xA;      _controller.finishRefresh();&#xA;      _controller.resetFooter();&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;      _controller.finishLoad(IndicatorResult.noMore);&#xA;    },&#xA;    ....&#xA;  );&#xA;  ....&#xA;  _controller.callRefresh();&#xA;  _controller.callLoad();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Specify Header and Footer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefresh(&#xA;    header: MaterialHeader(),&#xA;    footer: MaterialFooter(),&#xA;    child: ListView(),&#xA;    ....&#xA;  )&#xA;  // Global&#xA;  EasyRefresh.defaultHeaderBuilder = () =&amp;gt; ClassicHeader();&#xA;  EasyRefresh.defaultFooterBuilder = () =&amp;gt; ClassicFooter();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributions welcome&lt;/h1&gt; &#xA;&lt;p&gt;One&#39;s maintenance is lonely. If you have good suggestions and changes, welcome to contribute your code. If you have really cool styles， It&#39;s even cooler to share with everyone.&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;If you like my project, please in the upper right corner of the project &#34;Star&#34;. Your support is my biggest encouragement! ^_^ You can also use cryptocurrencies, buy me a coffee.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Ethereum&lt;/summary&gt; &#xA; &lt;p&gt;Ethereum series, ETH, BNB, MATIC, USDT and other tokens&lt;/p&gt; &#xA; &lt;pre&gt;&#xA;0x949A007161651015b8A07D0255B75731d60be804&#xA;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/ethereum_qr.png?raw=true&#34; alt=&#34;Ethereum&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tron&lt;/summary&gt; &#xA; &lt;p&gt;Tron chain, TRX, USDT, USDC and other tokens&lt;/p&gt; &#xA; &lt;pre&gt;&#xA;TKqkkyrjeox37cVG8G2HfHZrNMET1YbEfw&#xA;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/tron_qr.png?raw=true&#34; alt=&#34;Tron&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Bitcoin&lt;/summary&gt; &#xA; &lt;pre&gt;&#xA;bc1qutj3gmn46vwmcsjnc5sjqax7kxx5xm6fvyg5vp&#xA;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/bitcoin_qr.png?raw=true&#34; alt=&#34;Bitcoin&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dogecoin&lt;/summary&gt; &#xA; &lt;pre&gt;&#xA;DLs1Btam1M13o9LxiErbe1UXy7iqfZyNRg&#xA;&lt;/pre&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/dogecoin_qr.png?raw=true&#34; alt=&#34;Dogecoin&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;QQ Group - 554981921&lt;/h3&gt; &#xA;&lt;h4&gt;Into the group of instructions&lt;/h4&gt; &#xA;&lt;p&gt;The group is not only solve the problem of EasyreFresh, any Flutter related issues can be discussed. Just as its name, craigslist, as long as there is time, group of Lord will help you solve problems together.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scwang90/SmartRefreshLayout&#34;&gt;SmartRefreshLayout&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/jogboms/flutter_spinkit&#34;&gt;flutter_spinkit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; &#xA;MIT License&#xA;&#xA;Copyright (c) 2018 xuelongqy&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>bluefireteam/photo_view</title>
    <updated>2022-07-09T01:37:55Z</updated>
    <id>tag:github.com,2022-07-09:/bluefireteam/photo_view</id>
    <link href="https://github.com/bluefireteam/photo_view" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📸 Easy to use yet very customizable zoomable image widget for Flutter, Photo View provides a gesture sensitive zoomable widget. Photo View is largely used to show interacive images and other stuff such as SVG.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Photo View&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bluefireteam/photo_view/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/bluefireteam/photo_view/Test/master?label=tests&#34; alt=&#34;Tests status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/photo_view&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/photo_view.svg?style=popout&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/pxrBmy4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/509714518008528896&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple zoomable image/content widget for Flutter.&lt;/p&gt; &#xA;&lt;p&gt;PhotoView enables images to become able to zoom and pan with user gestures such as pinch, rotate and drag.&lt;/p&gt; &#xA;&lt;p&gt;It also can show any widget instead of an image, such as Container, Text or a SVG.&lt;/p&gt; &#xA;&lt;p&gt;Even though being super simple to use, PhotoView is extremely customizable though its options and the controllers.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;photo_view&lt;/code&gt; as a dependency in your pubspec.yaml file (&lt;a href=&#34;https://flutter.io/using-packages/&#34;&gt;what?&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Import Photo View:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:photo_view/photo_view.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docs &amp;amp; API&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://pub.dartlang.org/documentation/photo_view/latest/photo_view/photo_view-library.html&#34;&gt;API Docs&lt;/a&gt; some detailed information about how to use PhotoView.&lt;/p&gt; &#xA;&lt;p&gt;If you want to see it in practice, check the &lt;a href=&#34;https://github.com/bluefireteam/photo_view/tree/master/example/lib&#34;&gt;example app&lt;/a&gt; that explores most of Photo View&#39;s use cases or download the latest version apk on the &lt;a href=&#34;https://github.com/bluefireteam/photo_view/releases&#34;&gt;releases page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;(Very) Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Given a &lt;code&gt;ImageProvider imageProvider&lt;/code&gt; (such as &lt;a href=&#34;https://docs.flutter.io/flutter/painting/AssetImage-class.html&#34;&gt;AssetImage&lt;/a&gt; or &lt;a href=&#34;https://docs.flutter.io/flutter/painting/NetworkImage-class.html&#34;&gt;NetworkImage&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@override&#xA;Widget build(BuildContext context) {&#xA;  return Container(&#xA;    child: PhotoView(&#xA;      imageProvider: AssetImage(&#34;assets/large-image.jpg&#34;),&#xA;    )&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56463745-45ec0380-63b0-11e9-8e56-0dba5deabb1a.gif&#34; alt=&#34;In action&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about the &lt;code&gt;PhotoView&lt;/code&gt; widget &lt;a href=&#34;https://pub.dartlang.org/documentation/photo_view/latest/photo_view/PhotoView-class.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;To show several images and let user change between them, use &lt;code&gt;PhotoViewGallery&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the gallery &lt;a href=&#34;https://pub.dartlang.org/documentation/photo_view/latest/photo_view_gallery/PhotoViewGallery-class.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:photo_view/photo_view.dart&#39;;&#xA;import &#39;package:photo_view/photo_view_gallery.dart&#39;;&#xA;// ...&#xA;&#xA;&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  return Container(&#xA;    child: PhotoViewGallery.builder(&#xA;      scrollPhysics: const BouncingScrollPhysics(),&#xA;      builder: (BuildContext context, int index) {&#xA;        return PhotoViewGalleryPageOptions(&#xA;          imageProvider: AssetImage(widget.galleryItems[index].image),&#xA;          initialScale: PhotoViewComputedScale.contained * 0.8,&#xA;          heroAttributes: PhotoViewHeroAttributes(tag: galleryItems[index].id),&#xA;        );&#xA;      },&#xA;      itemCount: galleryItems.length,&#xA;      loadingBuilder: (context, event) =&amp;gt; Center(&#xA;        child: Container(&#xA;          width: 20.0,&#xA;          height: 20.0,&#xA;          child: CircularProgressIndicator(&#xA;            value: event == null&#xA;                ? 0&#xA;                : event.cumulativeBytesLoaded / event.expectedTotalBytes,&#xA;          ),&#xA;        ),&#xA;      ),&#xA;      backgroundDecoration: widget.backgroundDecoration,&#xA;      pageController: widget.pageController,&#xA;      onPageChanged: onPageChanged,&#xA;    )&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gallery sample in the example app:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56463769-e93d1880-63b0-11e9-8586-55827c95b89c.gif&#34; alt=&#34;In action&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the code &lt;a href=&#34;https://github.com/bluefireteam/photo_view/raw/master/example/lib/screens/examples/gallery/gallery_example.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage with controllers&lt;/h2&gt; &#xA;&lt;p&gt;When you need to interact with PhotoView&#39;s internal state values, &lt;code&gt;PhotoViewController&lt;/code&gt; and &lt;code&gt;PhotoViewScaleStateController&lt;/code&gt; are the way to.&lt;/p&gt; &#xA;&lt;p&gt;Controllers, when specified to PhotoView widget, enables the author(you) to listen for state updates through a &lt;code&gt;Stream&lt;/code&gt; and change those values externally.&lt;/p&gt; &#xA;&lt;p&gt;Read more about controllers &lt;a href=&#34;https://pub.dartlang.org/documentation/photo_view/latest/photo_view/PhotoView-class.html#controllers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the example app, we can see what can be achieved with controllers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56464051-3328fd00-63b7-11e9-9c4d-73b04f72a81e.gif&#34; alt=&#34;In action&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More screenshots&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Custom background, &lt;br&gt;small image &lt;br&gt;and custom alignment&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Limited scale&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Hero animation&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56464128-ff4ed700-63b8-11e9-802e-a933b3e79ea3.gif&#34; alt=&#34;In action&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56464182-23f77e80-63ba-11e9-87a9-4838ef20af7e.gif&#34; alt=&#34;In action&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56464202-9700f500-63ba-11e9-9f47-14e8bf441958.gif&#34; alt=&#34;In action&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Part of the screen&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Custom child&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56464215-d92a3680-63ba-11e9-9c37-d4796e992123.gif&#34; alt=&#34;In action&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6718144/56464225-1b537800-63bb-11e9-9c5b-ea8632c99969.gif&#34; alt=&#34;In action&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Support us&lt;/h2&gt; &#xA;&lt;p&gt;You can support us by becoming a patron on Patreon, any support is much appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/fireslime&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button.png&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>