<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:34:59Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nubank/nuvigator</title>
    <updated>2022-08-21T01:34:59Z</updated>
    <id>tag:github.com,2022-08-21:/nubank/nuvigator</id>
    <link href="https://github.com/nubank/nuvigator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful routing abstraction over Flutter Navigator, with nested Navigator and Deeplinks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nuvigator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/nubank/nuvigator/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/nubank/nuvigator/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/nuvigator&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/nuvigator.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Routing and Navigation package.&lt;/p&gt; &#xA;&lt;p&gt;Não fala bem inglês? Leia o &lt;a href=&#34;https://raw.githubusercontent.com/nubank/nuvigator/master/README_PT.md&#34;&gt;README_PT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&lt;/h2&gt; &#xA;&lt;p&gt;Nuvigator provides a powerful routing abstraction over Flutter&#39;s own Navigators. Model complex navigation flows using a mostly declarative and concise approach, without needing to worry about several tricky behaviors that Nuvigator handles for you.&lt;/p&gt; &#xA;&lt;p&gt;Nuvigator can help you with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Large/Modular Apps: Where you need to have an unified API to able to register routes and design relationship between them&lt;/li&gt; &#xA; &lt;li&gt;Nested Navigation: When you want to have nested/children Navigator inside your app, creating the concept of self contained flows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handles Navigation thought Nuvigator ins your Widget Tree, not need to know where your route is declared&lt;/li&gt; &#xA;   &lt;li&gt;Handles pop behavior when a nested Navigator reaches it&#39;s end, is able to transparently forward pop results into underlying caller, provider helpers to deal with nested navigation&lt;/li&gt; &#xA;   &lt;li&gt;Handles Hero animation/transition between nested Navigators&lt;/li&gt; &#xA;   &lt;li&gt;Handles Android back button correctly on nested Navigators&lt;/li&gt; &#xA;   &lt;li&gt;Improve support for nested PageRoutes with NuvigatorPageRoute mixin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Using DeepLinks: You want to navigate inside your App using DeepLinks, with support for Path Parameters and Query Parameters&lt;/li&gt; &#xA; &lt;li&gt;A declarative, easy to use API to declare and compose Routes together&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nubank/nuvigator/master/doc/next.md&#34;&gt;&lt;strong&gt;API Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Focus on providing a more flexible, easier and dynamic API for declaring Navigation and Routing&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The simplest you can get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &#39;Nuvigator App&#39;,&#xA;      builder: Nuvigator.routes(&#xA;        initialRoute: &#39;home&#39;,&#xA;        routes: [&#xA;          NuRouteBuilder(path: &#39;home&#39;, builder: (_, __, ___) =&amp;gt; HomeScreen()),&#xA;          NuRouteBuilder(path: &#39;second&#39;, builder: (_, __, ___) =&amp;gt; SecondScreen()),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A more complete example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:nuvigator/next.dart&#39;; // import the next file instead of `nuvigator.dart`&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;&#xA;// Define a new NuRoute&#xA;class MyRoute extends NuRoute {&#xA;  @override&#xA;  String get path =&amp;gt; &#39;my-route&#39;;&#xA;&#xA;  @override&#xA;  ScreenType get screenType =&amp;gt; materialScreenType;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context, NuRouteSettings settings) {&#xA;    return MyScreen(&#xA;      onClick: () =&amp;gt; nuvigator.open(&#39;next-route&#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;// Define your NuRouter&#xA;class MyRouter extends NuRouter {&#xA;  @override&#xA;  String get initialRoute =&amp;gt; &#39;my-route&#39;;&#xA;&#xA;  @override&#xA;  List&amp;lt;NuRoute&amp;gt; get registerRoutes =&amp;gt; [&#xA;    MyRoute(),&#xA;  ];&#xA;}&#xA;&#xA;// Render&#xA;Widget build(BuildContext context) {&#xA;  return Nuvigator(&#xA;    router: MyRouter(),&#xA;  );&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nubank/nuvigator/master/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>