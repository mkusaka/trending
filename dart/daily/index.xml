<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-12T01:28:09Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ponnamkarthik/FlutterToast</title>
    <updated>2024-04-12T01:28:09Z</updated>
    <id>tag:github.com,2024-04-12:/ponnamkarthik/FlutterToast</id>
    <link href="https://github.com/ponnamkarthik/FlutterToast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toast Plugin for Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://pub.dev/packages/fluttertoast&#34;&gt;fluttertoast&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Toast Library for Flutter&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ponnamkarthik/FlutterToast/workflows/Build%20Checks/badge.svg?sanitize=true&#34; alt=&#34;Build Checks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now this toast library supports two kinds of toast messages one which requires &lt;code&gt;BuildContext&lt;/code&gt; other with No &lt;code&gt;BuildContext&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Toast with no context&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Supported Platforms&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Android&lt;/li&gt; &#xA;  &lt;li&gt;IOS&lt;/li&gt; &#xA;  &lt;li&gt;Web (Uses &lt;a href=&#34;https://github.com/apvarun/toastify-js&#34;&gt;Toastify-JS&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This one has limited features and no control over UI&lt;/p&gt; &#xA;&lt;h2&gt;Toast Which requires BuildContext&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Supported Platforms&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;ALL&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Full Control of the Toast&lt;/li&gt; &#xA; &lt;li&gt;Toasts will be queued&lt;/li&gt; &#xA; &lt;li&gt;Remove a toast&lt;/li&gt; &#xA; &lt;li&gt;Clear the queue&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# add this line to your dependencies&#xA;fluttertoast: ^8.2.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:fluttertoast/fluttertoast.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Toast with No Build Context (Android &amp;amp; iOS)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Fluttertoast.showToast(&#xA;        msg: &#34;This is Center Short Toast&#34;,&#xA;        toastLength: Toast.LENGTH_SHORT,&#xA;        gravity: ToastGravity.CENTER,&#xA;        timeInSecForIosWeb: 1,&#xA;        backgroundColor: Colors.red,&#xA;        textColor: Colors.white,&#xA;        fontSize: 16.0&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;property&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;msg&lt;/td&gt; &#xA;   &lt;td&gt;String (Not Null)(required)&lt;/td&gt; &#xA;   &lt;td&gt;required&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;toastLength&lt;/td&gt; &#xA;   &lt;td&gt;Toast.LENGTH_SHORT or Toast.LENGTH_LONG (optional)&lt;/td&gt; &#xA;   &lt;td&gt;Toast.LENGTH_SHORT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gravity&lt;/td&gt; &#xA;   &lt;td&gt;ToastGravity.TOP (or) ToastGravity.CENTER (or) ToastGravity.BOTTOM (Web Only supports top, bottom)&lt;/td&gt; &#xA;   &lt;td&gt;ToastGravity.BOTTOM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timeInSecForIosWeb&lt;/td&gt; &#xA;   &lt;td&gt;int (for ios &amp;amp; web)&lt;/td&gt; &#xA;   &lt;td&gt;1 (sec)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundColor&lt;/td&gt; &#xA;   &lt;td&gt;Colors.red&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;textcolor&lt;/td&gt; &#xA;   &lt;td&gt;Colors.white&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fontSize&lt;/td&gt; &#xA;   &lt;td&gt;16.0 (float)&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;webShowClose&lt;/td&gt; &#xA;   &lt;td&gt;false (bool)&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;webBgColor&lt;/td&gt; &#xA;   &lt;td&gt;String (hex Color)&lt;/td&gt; &#xA;   &lt;td&gt;linear-gradient(to right, #00b09b, #96c93d)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;webPosition&lt;/td&gt; &#xA;   &lt;td&gt;String (&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;To cancel all the toasts call&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Fluttertoast.cancel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note Android&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ponnamkarthik/FlutterToast/master/screenshot/toast_deprecated_setview.png&#34; height=&#34;200px&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Custom Toast will not work on android 11 and above, it will only use &lt;em&gt;msg&lt;/em&gt; and &lt;em&gt;toastLength&lt;/em&gt; remaining all properties are ignored&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Custom Toast For Android&lt;/h3&gt; &#xA;&lt;p&gt;Create a file named &lt;code&gt;toast_custom.xml&lt;/code&gt; in your project &lt;code&gt;app/res/layout&lt;/code&gt; folder and do custom styling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;FrameLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    xmlns:tools=&#34;http://schemas.android.com/tools&#34;&#xA;    android:layout_width=&#34;wrap_content&#34;&#xA;    android:layout_height=&#34;wrap_content&#34;&#xA;    android:layout_gravity=&#34;center_horizontal&#34;&#xA;    android:layout_marginStart=&#34;50dp&#34;&#xA;    android:background=&#34;@drawable/corner&#34;&#xA;    android:layout_marginEnd=&#34;50dp&#34;&amp;gt;&#xA;&#xA;    &amp;lt;TextView&#xA;        android:id=&#34;@+id/text&#34;&#xA;        android:layout_width=&#34;wrap_content&#34;&#xA;        android:layout_height=&#34;wrap_content&#34;&#xA;        android:background=&#34;#CC000000&#34;&#xA;        android:paddingStart=&#34;16dp&#34;&#xA;        android:paddingTop=&#34;10dp&#34;&#xA;        android:paddingEnd=&#34;16dp&#34;&#xA;        android:paddingBottom=&#34;10dp&#34;&#xA;        android:textStyle=&#34;bold&#34;&#xA;        android:textColor=&#34;#FFFFFF&#34;&#xA;        tools:text=&#34;Toast should be short.&#34; /&amp;gt;&#xA;&amp;lt;/FrameLayout&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Toast with BuildContext (All Platforms)&lt;/h2&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;MaterialApp&lt;/code&gt; with &lt;code&gt;builder&lt;/code&gt; like below for the use of Context globally check doc section Use NavigatorKey for Context(to access context globally)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MaterialApp(&#xA;    builder: FToastBuilder(),&#xA;    home: MyApp(),&#xA;    navigatorKey: navigatorKey,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FToast fToast;&#xA;&#xA;@override&#xA;void initState() {&#xA;    super.initState();&#xA;    fToast = FToast();&#xA;    // if you want to use context from globally instead of content we need to pass navigatorKey.currentContext!&#xA;    fToast.init(context);&#xA;}&#xA;&#xA;_showToast() {&#xA;    Widget toast = Container(&#xA;        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 12.0),&#xA;        decoration: BoxDecoration(&#xA;        borderRadius: BorderRadius.circular(25.0),&#xA;        color: Colors.greenAccent,&#xA;        ),&#xA;        child: Row(&#xA;        mainAxisSize: MainAxisSize.min,&#xA;        children: [&#xA;            Icon(Icons.check),&#xA;            SizedBox(&#xA;            width: 12.0,&#xA;            ),&#xA;            Text(&#34;This is a Custom Toast&#34;),&#xA;        ],&#xA;        ),&#xA;    );&#xA;&#xA;&#xA;    fToast.showToast(&#xA;        child: toast,&#xA;        gravity: ToastGravity.BOTTOM,&#xA;        toastDuration: Duration(seconds: 2),&#xA;    );&#xA;    &#xA;    // Custom Toast Position&#xA;    fToast.showToast(&#xA;        child: toast,&#xA;        toastDuration: Duration(seconds: 2),&#xA;        positionedToastBuilder: (context, child) {&#xA;          return Positioned(&#xA;            child: child,&#xA;            top: 16.0,&#xA;            left: 16.0,&#xA;          );&#xA;        });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now Call &lt;code&gt;_showToast()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more details check &lt;code&gt;example&lt;/code&gt; project&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;property&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;child&lt;/td&gt; &#xA;   &lt;td&gt;Widget (Not Null)(required)&lt;/td&gt; &#xA;   &lt;td&gt;required&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;toastDuration&lt;/td&gt; &#xA;   &lt;td&gt;Duration (optional)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gravity&lt;/td&gt; &#xA;   &lt;td&gt;ToastGravity.*&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Use NavigatorKey for Context(to access context globally)&lt;/h3&gt; &#xA;&lt;p&gt;To use NavigatorKey for Context first define the &lt;code&gt;GlobalKey&amp;lt;NavigatorState&amp;gt;&lt;/code&gt; at top level in your &lt;code&gt;main.dart&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GlobalKey&amp;lt;NavigatorState&amp;gt; navigatorKey = GlobalKey&amp;lt;NavigatorState&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the time of initializing the &lt;code&gt;FToast&lt;/code&gt; we need to use context from globally defined &lt;code&gt;GlobalKey&amp;lt;NavigatorState&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FToast fToast = FToast();&#xA;fToast.init(yourNavKey.currentContext!);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To cancel all the toasts call&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// To remove present shwoing toast&#xA;fToast.removeCustomToast()&#xA;&#xA;// To clear the queue&#xA;fToast.removeQueuedCustomToasts();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preview Images (No BuildContext)&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ponnamkarthik/FlutterToast/master/screenshot/1.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ponnamkarthik/FlutterToast/master/screenshot/2.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ponnamkarthik/FlutterToast/master/screenshot/3.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ponnamkarthik/FlutterToast/master/screenshot/4.png&#34; width=&#34;320px&#34;&gt; &#xA;&lt;h2&gt;Preview Images (BuildContext)&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ponnamkarthik/FlutterToast/master/screenshot/11.jpg&#34; width=&#34;320px&#34;&gt; &#xA;&lt;h2&gt;If you need any features suggest&lt;/h2&gt; &#xA;&lt;p&gt;...&lt;/p&gt; &#xA;&lt;h2&gt;Buy Me a Coffee&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/karthikponnam&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>