<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-21T01:28:41Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>babakcode/flutter_gemini</title>
    <updated>2023-12-21T01:28:41Z</updated>
    <id>tag:github.com,2023-12-21:/babakcode/flutter_gemini</id>
    <link href="https://github.com/babakcode/flutter_gemini" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter Google Gemini SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Gemini&lt;/h1&gt; &#xA;&lt;p&gt;Google Gemini is a set of cutting-edge large language models (LLMs) designed to be the driving force behind Google&#39;s future AI initiatives.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/babakcode/flutter_gemini/assets/31356659/104a436c-cc1e-4523-aeeb-edfb50f87346&#34; alt=&#34;gemini_github_cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package provides a powerful bridge between your Flutter application and Google&#39;s revolutionary Gemini AI. It empowers you to seamlessly integrate Gemini&#39;s capabilities into your app, unlocking possibilities for building innovative, intelligent, and engaging experiences that redefine user interaction.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up your API key &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#getting-started&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Initialize gemini &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#initialize-gemini&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Content-based APIs &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#content-based-apis&#34;&gt;scroll&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text-only input &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#text-only-input&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Text-and-image input &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#text-and-image-input&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Multi-turn conversations (chat) &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#multi-turn-conversations-chat&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Count tokens &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#count-tokens&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Model info &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#model-info&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;List models &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#list-models&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Unimplemented methods &lt;a href=&#34;https://raw.githubusercontent.com/babakcode/flutter_gemini/master/#unimplemented-methods&#34;&gt;scroll&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To use the Gemini API, you&#39;ll need an API key. If you don&#39;t already have one, create a key in Google AI Studio. &lt;a href=&#34;https://ai.google.dev/&#34;&gt;Get an API key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;online demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://babakcode.github.io/flutter_gemini&#34;&gt;https://babakcode.github.io/flutter_gemini&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Initialize Gemini&lt;/h2&gt; &#xA;&lt;p&gt;For initialization, you must call the init constructor for Flutter Gemini in the main function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;&#xA;  /// Add this line&#xA;  Gemini.init(apiKey: &#39;--- Your Gemini Api Key ---&#39;);&#xA;&#xA;  runApp(const MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can create an instance&lt;/p&gt; &#xA;&lt;h2&gt;Content-based APIs&lt;/h2&gt; &#xA;&lt;h3&gt;Text-only input&lt;/h3&gt; &#xA;&lt;p&gt;This feature lets you perform natural language processing (NLP) tasks such as text completion and summarization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final gemini = Gemini.instance;&#xA;&#xA;gemini.text(&#34;Write a story about a magic backpack.&#34;)&#xA;  .then((value) =&amp;gt; print( value?.output )) /// or value?.content?.parts?.last.text&#xA;  .catchError((e) =&amp;gt; print(e));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:828/format:webp/1*41dnttHItU2v4hobJ_DGSA.gif&#34; alt=&#34;Flutter gemini Text only example gif&#34; title=&#34;Flutter_Gemini example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text-and-image input&lt;/h3&gt; &#xA;&lt;p&gt;If the input contains both text and image, You can send a text prompt with an image to the gemini-pro-vision model to perform a vision-related task. For example, captioning an image or identifying what&#39;s in an image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  final gemini = Gemini.instance;&#xA;&#xA;  final file = File(&#39;assets/img.png&#39;);&#xA;  gemini.textAndImage(&#xA;        text: &#34;What is this picture?&#34;, /// text&#xA;        image: file.readAsBytesSync(), /// image&#xA;      )&#xA;      .then((value) =&amp;gt; log(value?.content?.parts?.last.text ?? &#39;&#39;))&#xA;      .catchError((e) =&amp;gt; log(&#39;textAndImageInput&#39;, error: e));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:828/format:webp/1*3JEeJaBRSpif6hOl2pt3RA.gif&#34; alt=&#34;Flutter gemini Text and Image example gif&#34; title=&#34;Flutter_Gemini example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Multi-turn conversations (chat)&lt;/h3&gt; &#xA;&lt;p&gt;Using Gemini, you can build freeform conversations across multiple turns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  final gemini = Gemini.instance;&#xA;&#xA;  gemini.chat([&#xA;    Content(parts: [&#xA;      Parts(text: &#39;Write the first line of a story about a magic backpack.&#39;)],&#xA;        role: &#39;user&#39;),&#xA;    Content(parts: [ &#xA;      Parts(text: &#39;In the bustling city of Meadow brook, lived a young girl named Sophie. She was a bright and curious soul with an imaginative mind.&#39;)],&#xA;        role: &#39;model&#39;),&#xA;    Content(parts: [ &#xA;      Parts(text: &#39;Can you set it in a quiet village in 1600s France?&#39;)], &#xA;        role: &#39;user&#39;),&#xA;    ])&#xA;        .then((value) =&amp;gt; log(value?.output ?? &#39;without output&#39;))&#xA;        .catchError((e) =&amp;gt; log(&#39;chat&#39;, error: e));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:828/format:webp/1*MoVz4Z5KpxVUocEHLmzDew.gif&#34; alt=&#34;Flutter gemini Text and Image example gif&#34; title=&#34;Flutter_Gemini example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Count tokens&lt;/h3&gt; &#xA;&lt;p&gt;When using long prompts, it might be useful to count tokens before sending any content to the model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final gemini = Gemini.instance;&#xA;&#xA;gemini.countTokens(&#34;Write a story about a magic backpack.&#34;)&#xA;    .then((value) =&amp;gt; print(value)) /// output like: `6` or `null`&#xA;    .catchError((e) =&amp;gt; log(&#39;countTokens&#39;, error: e));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model info&lt;/h3&gt; &#xA;&lt;p&gt;If you &lt;code&gt;GET&lt;/code&gt; a model&#39;s URL, the API uses the &lt;code&gt;get&lt;/code&gt; method to return information about that model such as version, display name, input token limit, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final gemini = Gemini.instance;&#xA;&#xA;gemini.info(model: &#39;gemini-pro&#39;)&#xA;    .then((info) =&amp;gt; print(info))&#xA;    .catchError((e) =&amp;gt; log(&#39;info&#39;, error: e));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List models&lt;/h3&gt; &#xA;&lt;p&gt;If you &lt;code&gt;GET&lt;/code&gt; the &lt;code&gt;models&lt;/code&gt; directory, it uses the &lt;code&gt;list&lt;/code&gt; method to list all of the models available through the API, including both the Gemini and PaLM family models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final gemini = Gemini.instance;&#xA;&#xA;gemini.listModels()&#xA;    .then((models) =&amp;gt; print(models)) /// list&#xA;    .catchError((e) =&amp;gt; log(&#39;listModels&#39;, error: e));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unimplemented Methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;embedContents&lt;/code&gt;, &lt;code&gt;batchEmbedContents&lt;/code&gt;, &lt;code&gt;streamGenerateContent&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// In newer version will be added&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>