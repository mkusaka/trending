<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:38:11Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ryanheise/just_audio</title>
    <updated>2022-07-16T01:38:11Z</updated>
    <id>tag:github.com,2022-07-16:/ryanheise/just_audio</id>
    <link href="https://github.com/ryanheise/just_audio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio Player&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mogol/flutter_secure_storage</title>
    <updated>2022-07-16T01:38:11Z</updated>
    <id>tag:github.com,2022-07-16:/mogol/flutter_secure_storage</id>
    <link href="https://github.com/mogol/flutter_secure_storage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter plugin to store data in secure storage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_secure_storage&lt;/h1&gt; &#xA;&lt;h3&gt;Important notice for Android and v5.0.0&lt;/h3&gt; &#xA;&lt;p&gt;When upgrading from 4.2.1 to 5.0.0 you can migrate to EncryptedSharedPreferences by setting the encryptedSharedPreference parameter to true as explained below. This will automatically migrate all preferences. This however can&#39;t be undone. If you try to disable encryptedSharedPreference after this, you won&#39;t be able to read the values. You can only read those with encryptedSharedPreference enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Important notice for Web&lt;/h3&gt; &#xA;&lt;p&gt;flutter_secure_storage only works on HTTPS or localhost environments. &lt;a href=&#34;https://github.com/mogol/flutter_secure_storage/issues/320#issuecomment-976308930&#34;&gt;Please see this issue for more information.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter plugin to store data in secure storage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/01introduction/introduction.html#//apple_ref/doc/uid/TP30000897-CH203-TP1&#34;&gt;Keychain&lt;/a&gt; is used for iOS&lt;/li&gt; &#xA; &lt;li&gt;AES encryption is used for Android. AES secret key is encrypted with RSA and RSA key is stored in &lt;a href=&#34;https://developer.android.com/training/articles/keystore.html&#34;&gt;KeyStore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With v5.0.0 we can use &lt;a href=&#34;https://developer.android.com/topic/security/data&#34;&gt;EncryptedSharedPreferences&lt;/a&gt; on Android by enabling it in the Android Options like so:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  AndroidOptions _getAndroidOptions() =&amp;gt; const AndroidOptions(&#xA;        encryptedSharedPreferences: true,&#xA;      );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information see the example app.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.gnome.org/Projects/Libsecret&#34;&gt;&lt;code&gt;libsecret&lt;/code&gt;&lt;/a&gt; is used for Linux.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; KeyStore was introduced in Android 4.3 (API level 18). The plugin wouldn&#39;t work for earlier versions.&lt;/p&gt; &#xA;&lt;h2&gt;Platform Implementation&lt;/h2&gt; &#xA;&lt;p&gt;Please note that this table represents the functions implemented in this repository and it is possible that changes haven&#39;t yet been released on pub.dev&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;read&lt;/th&gt; &#xA;   &lt;th&gt;write&lt;/th&gt; &#xA;   &lt;th&gt;delete&lt;/th&gt; &#xA;   &lt;th&gt;containsKey&lt;/th&gt; &#xA;   &lt;th&gt;readAll&lt;/th&gt; &#xA;   &lt;th&gt;deleteAll&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If not present already, please call WidgetsFlutterBinding.ensureInitialized() in your main before you do anything with the MethodChannel. &lt;a href=&#34;https://github.com/mogol/flutter_secure_storage/issues/336&#34;&gt;Please see this issue for more info.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_secure_storage/flutter_secure_storage.dart&#39;;&#xA;&#xA;// Create storage&#xA;final storage = new FlutterSecureStorage();&#xA;&#xA;// Read value&#xA;String value = await storage.read(key: key);&#xA;&#xA;// Read all values&#xA;Map&amp;lt;String, String&amp;gt; allValues = await storage.readAll();&#xA;&#xA;// Delete value&#xA;await storage.delete(key: key);&#xA;&#xA;// Delete all&#xA;await storage.deleteAll();&#xA;&#xA;// Write value&#xA;await storage.write(key: key, value: value);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows us to be able to fetch secure values while the app is backgrounded, by specifying first_unlock or first_unlock_this_device. The default if not specified is unlocked. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final options = IOSOptions(accessibility: IOSAccessibility.first_unlock);&#xA;await storage.write(key: key, value: value, iOptions: options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Android version&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;[project]/android/app/build.gradle&lt;/code&gt; set &lt;code&gt;minSdkVersion&lt;/code&gt; to &amp;gt;= 18.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;android {&#xA;    ...&#xA;&#xA;    defaultConfig {&#xA;        ...&#xA;        minSdkVersion 18&#xA;        ...&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; By default Android backups data on Google Drive. It can cause exception java.security.InvalidKeyException:Failed to unwrap key. You need to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/data/autobackup#EnablingAutoBackup&#34;&gt;disable autobackup&lt;/a&gt;, &lt;a href=&#34;https://github.com/mogol/flutter_secure_storage/issues/13#issuecomment-421083742&#34;&gt;details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.android.com/guide/topics/data/autobackup#IncludingFiles&#34;&gt;exclude sharedprefs&lt;/a&gt; &lt;code&gt;FlutterSecureStorage&lt;/code&gt; used by the plugin, &lt;a href=&#34;https://github.com/mogol/flutter_secure_storage/issues/43#issuecomment-471642126&#34;&gt;details&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configure Web Version&lt;/h3&gt; &#xA;&lt;p&gt;Flutter Secure Storage uses an experimental implementation using WebCrypto. Use at your own risk at this time. Feedback welcome to improve it. The intent is that the browser is creating the private key, and as a result, the encrypted strings in local_storage are not portable to other browsers or other machines and will only work on the same domain.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is VERY important that you have HTTP Strict Forward Secrecy enabled and the proper headers applied to your responses or you could be subject to a javascript hijack.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netsparker.com/blog/web-security/http-security-headers/&#34;&gt;https://www.netsparker.com/blog/web-security/http-security-headers/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configure Linux Version&lt;/h3&gt; &#xA;&lt;p&gt;You need &lt;code&gt;libsecret-1-dev&lt;/code&gt; and &lt;code&gt;libjsoncpp-dev&lt;/code&gt; on your machine to build the project, and &lt;code&gt;libsecret-1-0&lt;/code&gt; and &lt;code&gt;libjsoncpp1&lt;/code&gt; to run the application (add it as a dependency after packaging your app). If you using snapcraft to build the project use the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;parts:&#xA;  uet-lms:&#xA;    source: .&#xA;    plugin: flutter&#xA;    flutter-target: lib/main.dart&#xA;    build-packages:&#xA;      - libsecret-1-dev&#xA;      - libjsoncpp-dev&#xA;    stage-packages:&#xA;      - libsecret-1-dev&#xA;      - libjsoncpp-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure MacOS Version&lt;/h3&gt; &#xA;&lt;p&gt;You also need to add Keychain Sharing as capability to your macOS runner. To achieve this, please add the following in &lt;em&gt;both&lt;/em&gt; your &lt;code&gt;macos/Runner/DebugProfile.entitlements&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;macos/Runner/Release.entitlements&lt;/code&gt; (you need to change both files).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;keychain-access-groups&amp;lt;/key&amp;gt;&#xA;&amp;lt;array/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integration Tests&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command from &lt;code&gt;example&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter drive --target=test_driver/app.dart&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>