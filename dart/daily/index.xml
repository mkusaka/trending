<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T01:38:36Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ScerIO/packages.flutter</title>
    <updated>2022-12-01T01:38:36Z</updated>
    <id>tag:github.com,2022-12-01:/ScerIO/packages.flutter</id>
    <link href="https://github.com/ScerIO/packages.flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üë®‚Äçüíª Plugins and packages for Flutter framework&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ScerIO/packages.flutter/main/.github/MEDIA/logo.png&#34; alt=&#34;Flutter plugins&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cirrus-ci.com/github/scerio/packages.flutter/main&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/ScerIO/packages.flutter.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Available packages and plugins&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Source code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/auto_animated&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/auto_animated.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scerio/packages.flutter/tree/main/packages/auto_animated&#34;&gt;&lt;code&gt;packages/auto_animated&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_color&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_color.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scerio/packages.flutter/tree/main/packages/flutter_color&#34;&gt;&lt;code&gt;packages/flutter_color&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/pdfx&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/pdfx.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scerio/packages.flutter/tree/main/packages/pdfx&#34;&gt;&lt;code&gt;packages/pdfx&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/epub_view&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/epub_view.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scerio/packages.flutter/tree/main/packages/epub_view&#34;&gt;&lt;code&gt;packages/epub_view&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/explorer&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/explorer.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/scerio/packages.flutter/tree/main/packages/explorer&#34;&gt;&lt;code&gt;packages/explorer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Outdated / Transferred / Renamed packages and plugins&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Source code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/native_pdf_renderer&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/native_pdf_renderer.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ScerIO/packages.flutter/tree/f39ebb28281e1c9560757a49d20d18a013529f00/packages/native_pdf_renderer&#34;&gt;&lt;code&gt;packages/native_pdf_renderer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/native_pdf_view&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/native_pdf_view.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ScerIO/packages.flutter/tree/f39ebb28281e1c9560757a49d20d18a013529f00/packages/native_pdf_view&#34;&gt;&lt;code&gt;packages/native_pdf_view&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>bizz84/dart-course-materials</title>
    <updated>2022-12-01T01:38:36Z</updated>
    <id>tag:github.com,2022-12-01:/bizz84/dart-course-materials</id>
    <link href="https://github.com/bizz84/dart-course-materials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code, Exercises &amp; Syllabus for my Complete Dart Course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dart Course | Code With Andrea&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains all the exercises and solutions from my &lt;a href=&#34;https://nnbd.me/dart&#34;&gt;Dart Course&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bizz84/dart-course-materials/master/course-contents.png&#34; alt=&#34;Course Contents&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Course Syllabus&lt;/h1&gt; &#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Making the most of this course&lt;/li&gt; &#xA; &lt;li&gt;Introduction to Dart&lt;/li&gt; &#xA; &lt;li&gt;Introduction to Dartpad&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;2. Dart Basics&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;main&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;Hello world&lt;/li&gt; &#xA; &lt;li&gt;Variable declaration and initialization&lt;/li&gt; &#xA; &lt;li&gt;Basic types&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: printing variables&lt;/li&gt; &#xA; &lt;li&gt;String Concatenation &amp;amp; Interpolation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: String interpolation&lt;/li&gt; &#xA; &lt;li&gt;String Escaping&lt;/li&gt; &#xA; &lt;li&gt;Multi-line strings&lt;/li&gt; &#xA; &lt;li&gt;Basic String operations: uppercase and lowercase&lt;/li&gt; &#xA; &lt;li&gt;Initialization vs Assignment&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Lowercase and uppercase strings&lt;/li&gt; &#xA; &lt;li&gt;Finding and replacing strings&lt;/li&gt; &#xA; &lt;li&gt;Conversions between types&lt;/li&gt; &#xA; &lt;li&gt;Arithmetic operators&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: temperature conversion&lt;/li&gt; &#xA; &lt;li&gt;Increment &amp;amp; decrement operators&lt;/li&gt; &#xA; &lt;li&gt;Logical &amp;amp; Relational operators&lt;/li&gt; &#xA; &lt;li&gt;Ternary conditional operator&lt;/li&gt; &#xA; &lt;li&gt;Hex format, bitwise &amp;amp; shifting operators&lt;/li&gt; &#xA; &lt;li&gt;Comments&lt;/li&gt; &#xA; &lt;li&gt;Expressions &amp;amp; statements&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3. Dart type system&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Static vs Dynamic Languages&lt;/li&gt; &#xA; &lt;li&gt;Type inference with &lt;code&gt;var&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;final&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;const&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;dynamic&lt;/code&gt; keyword&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;4. Control flow&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;If/else statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: if/else statements&lt;/li&gt; &#xA; &lt;li&gt;while loops&lt;/li&gt; &#xA; &lt;li&gt;for loops&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: fizz buzz&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;switch statements&lt;/li&gt; &#xA; &lt;li&gt;enumerations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: simple calculator&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;5. Project: Building a command line app&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section intro&lt;/li&gt; &#xA; &lt;li&gt;Installing the Dart SDK&lt;/li&gt; &#xA; &lt;li&gt;Installing and configuring VS Code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project Brief&lt;/strong&gt;: Rock, Paper &amp;amp; Scissors&lt;/li&gt; &#xA; &lt;li&gt;Creating a command line app&lt;/li&gt; &#xA; &lt;li&gt;Pseudocode for the game logic&lt;/li&gt; &#xA; &lt;li&gt;Getting use input with stdin from dart:io&lt;/li&gt; &#xA; &lt;li&gt;Implementing the game loop&lt;/li&gt; &#xA; &lt;li&gt;Implementing the game logic&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;6. Collections&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Sum of the items in a list&lt;/li&gt; &#xA; &lt;li&gt;List methods&lt;/li&gt; &#xA; &lt;li&gt;Type annotations with lists&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;final&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; with lists&lt;/li&gt; &#xA; &lt;li&gt;Sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Sets&lt;/li&gt; &#xA; &lt;li&gt;Maps&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;as&lt;/code&gt; operator&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;null&lt;/code&gt; value&lt;/li&gt; &#xA; &lt;li&gt;Iterating on maps&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Pizza Ordering&lt;/li&gt; &#xA; &lt;li&gt;Nested Collections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Restaurant ratings&lt;/li&gt; &#xA; &lt;li&gt;Collection-if&lt;/li&gt; &#xA; &lt;li&gt;Collection-for&lt;/li&gt; &#xA; &lt;li&gt;Spreads&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Shopping List&lt;/li&gt; &#xA; &lt;li&gt;Copying collections&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;7. Project: Data Processing in Dart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Parsing command line arguments&lt;/li&gt; &#xA; &lt;li&gt;Reading files line by line&lt;/li&gt; &#xA; &lt;li&gt;Pseudocode for the processing logic&lt;/li&gt; &#xA; &lt;li&gt;Implementing the processing logic&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;8. Dart Null Safety&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Introduction to Null Safety&lt;/li&gt; &#xA; &lt;li&gt;Nullable and non-nullable variables&lt;/li&gt; &#xA; &lt;li&gt;Flow Analysis: Promotion and Definite Assignment&lt;/li&gt; &#xA; &lt;li&gt;The assertion operator&lt;/li&gt; &#xA; &lt;li&gt;The if-null operator&lt;/li&gt; &#xA; &lt;li&gt;Null Safety with type inference&lt;/li&gt; &#xA; &lt;li&gt;Null Safety with collections&lt;/li&gt; &#xA; &lt;li&gt;The conditional access operator &amp;amp; the billion dollar mistake&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;9. Functions: Basics&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Intro to functions&lt;/li&gt; &#xA; &lt;li&gt;Function arguments&lt;/li&gt; &#xA; &lt;li&gt;Return values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Sum of a list of numbers&lt;/li&gt; &#xA; &lt;li&gt;Named and positional arguments&lt;/li&gt; &#xA; &lt;li&gt;Required and default values&lt;/li&gt; &#xA; &lt;li&gt;Default positional arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Pizza ordering with functions&lt;/li&gt; &#xA; &lt;li&gt;Fat arrow notation&lt;/li&gt; &#xA; &lt;li&gt;The global and local scope&lt;/li&gt; &#xA; &lt;li&gt;Inner Functions&lt;/li&gt; &#xA; &lt;li&gt;Global mutable state and functions with side effects&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;10. Functions: Advanced&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Anonymous functions&lt;/li&gt; &#xA; &lt;li&gt;Functions as first class objects&lt;/li&gt; &#xA; &lt;li&gt;Function types&lt;/li&gt; &#xA; &lt;li&gt;Closures&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;forEach&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;map&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Iterable&lt;/code&gt; and &lt;code&gt;toList()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code reuse with anonymous functions and generics&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;where&lt;/code&gt; and &lt;code&gt;firstWhere&lt;/code&gt; methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Implement the &lt;code&gt;where&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Implement the &lt;code&gt;firstWhere&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;reduce&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;Combining functional operators&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;11. Classes: Basics&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Introduction to classes&lt;/li&gt; &#xA; &lt;li&gt;Instance methods&lt;/li&gt; &#xA; &lt;li&gt;Class constructors and the &lt;code&gt;this&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;Initializer lists and the shorthand syntax&lt;/li&gt; &#xA; &lt;li&gt;Classes with immutable members&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Creating a &lt;code&gt;Person&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;Type safety with classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;const&lt;/code&gt; constructors&lt;/li&gt; &#xA; &lt;li&gt;Named constructors&lt;/li&gt; &#xA; &lt;li&gt;Named constructors: temperature example&lt;/li&gt; &#xA; &lt;li&gt;Getters and setters&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Restaurant ratings with classes&lt;/li&gt; &#xA; &lt;li&gt;Static methods and variables&lt;/li&gt; &#xA; &lt;li&gt;Private variables and methods&lt;/li&gt; &#xA; &lt;li&gt;Wrap up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;12. Classes: Advanced&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;VS Code Dart Setup with Null Safety&lt;/li&gt; &#xA; &lt;li&gt;Introduction to inheritance / subclassing&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;super&lt;/code&gt; constructor&lt;/li&gt; &#xA; &lt;li&gt;Overriding methods&lt;/li&gt; &#xA; &lt;li&gt;Abstract classes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Area and Perimeter&lt;/li&gt; &#xA; &lt;li&gt;Interfaces and the difference between &lt;code&gt;implements&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The base &lt;code&gt;Object&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;toString()&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;The equality operator and the &lt;code&gt;covariant&lt;/code&gt; keyword&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Implement the + and * operators&lt;/li&gt; &#xA; &lt;li&gt;Overriding &lt;code&gt;hashCode&lt;/code&gt; and the Equatable package&lt;/li&gt; &#xA; &lt;li&gt;Using classes with generics&lt;/li&gt; &#xA; &lt;li&gt;Composition vs inheritance: Flutter widget hierarchy example&lt;/li&gt; &#xA; &lt;li&gt;Factory constructors and reading JSON data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: JSON Serialization&lt;/li&gt; &#xA; &lt;li&gt;Copying objects with &lt;code&gt;copyWith&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The cascade operator&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;13. Project: Simple eCommerce&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simple eCommerce store: Overview&lt;/li&gt; &#xA; &lt;li&gt;Creating the Product, Item, Cart classes&lt;/li&gt; &#xA; &lt;li&gt;Adding the interactive prompt&lt;/li&gt; &#xA; &lt;li&gt;Adding items to the cart&lt;/li&gt; &#xA; &lt;li&gt;Checkout functionality&lt;/li&gt; &#xA; &lt;li&gt;Project structure and wrap-up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;14. Mixins &amp;amp; Extensions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Creating and using mixins&lt;/li&gt; &#xA; &lt;li&gt;Mixins: Drawbacks&lt;/li&gt; &#xA; &lt;li&gt;Extensions&lt;/li&gt; &#xA; &lt;li&gt;Extensions with generic type constraints&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Range extension&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;15. Error Handling &amp;amp; Exceptions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Errors vs Exceptions&lt;/li&gt; &#xA; &lt;li&gt;Assertions&lt;/li&gt; &#xA; &lt;li&gt;Exceptions: &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;rethrow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Email validation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;16. Async Programming&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Futures, &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;catchError&lt;/code&gt;, &lt;code&gt;whenComplete&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Future.value&lt;/code&gt; and &lt;code&gt;Future.error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Countdown with Futures&lt;/li&gt; &#xA; &lt;li&gt;Streams&lt;/li&gt; &#xA; &lt;li&gt;Stream generators: &lt;code&gt;async*&lt;/code&gt; and &lt;code&gt;yield&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Fizz-buzz with streams&lt;/li&gt; &#xA; &lt;li&gt;Stream constructors&lt;/li&gt; &#xA; &lt;li&gt;Stream methods&lt;/li&gt; &#xA; &lt;li&gt;Single / multiple subscription streams&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;17. Weather App&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Weather App Overview&lt;/li&gt; &#xA; &lt;li&gt;REST API Basics&lt;/li&gt; &#xA; &lt;li&gt;Creating the command-line app&lt;/li&gt; &#xA; &lt;li&gt;Creating a Weather API Client with the Dart http package&lt;/li&gt; &#xA; &lt;li&gt;Reading the response status code and data&lt;/li&gt; &#xA; &lt;li&gt;Completing the Weather API client&lt;/li&gt; &#xA; &lt;li&gt;Parsing JSON Data&lt;/li&gt; &#xA; &lt;li&gt;Error Handling and Wrap up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;18. Conclusion &amp;amp; Next Steps&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;BONUS Content: Free Dart eBook &amp;amp; Next Steps&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bizz84/dart-course-materials/master/LICENSE&#34;&gt;LICENSE: MIT&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
</feed>