<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-08T01:39:47Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alibaba/flutter-go</title>
    <updated>2022-06-08T01:39:47Z</updated>
    <id>tag:github.com,2022-06-08:/alibaba/flutter-go</id>
    <link href="https://github.com/alibaba/flutter-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;flutter 开发者帮助 APP，包含 flutter 常用 140+ 组件的demo 演示与中文文档&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FlutterGo&lt;/h1&gt; &#xA;&lt;p&gt;感谢大家一直以来对 FlutterGo 的支持与反馈。&lt;/p&gt; &#xA;&lt;p&gt;但是 &lt;strong&gt;由于团队内部组织调整变更&lt;/strong&gt;，很遗憾的宣布 FlutterGo 目前&lt;strong&gt;暂停维护&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;但是后期我们会再升级迭代 FlutterGo 新版本，也同时希望更多Flutter爱好者参与加入。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;简历投递 邮箱：&lt;a href=&#34;mailto:yifeng.yl@alibaba-inc.com&#34;&gt;yifeng.yl@alibaba-inc.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;钉钉扫码直接连接:&lt;/li&gt; &#xA; &lt;li&gt; &lt;img src=&#34;https://gw.alicdn.com/tfs/TB1VXgXYFT7gK0jSZFpXXaTkpXa-716-914.png&#34; width=&#34;278&#34; height=&#34;357&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>schultek/jaspr</title>
    <updated>2022-06-08T01:39:47Z</updated>
    <id>tag:github.com,2022-06-08:/schultek/jaspr</id>
    <link href="https://github.com/schultek/jaspr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experimental web framework for Dart. Supports SPAs and SSR.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/schultek/jaspr/main/assets/jaspr_banner.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;jaspr&lt;/h1&gt; &#xA;&lt;p&gt;Experimental web framework for Dart. Supports SPAs and SSR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Familiar component model similar to Flutter widgets&lt;/li&gt; &#xA; &lt;li&gt;Easy Server Side Rendering&lt;/li&gt; &#xA; &lt;li&gt;Automatic hydration of component data on the client&lt;/li&gt; &#xA; &lt;li&gt;Fast incremental DOM updates&lt;/li&gt; &#xA; &lt;li&gt;Well tested (~70% test coverage)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;m looking for contributors. Don&#39;t hesitate to contact me if you want to help in any way.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schultek/jaspr/wiki&#34;&gt;Wiki &amp;amp; Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jasprpad.schultek.de&#34;&gt;Demo &amp;amp; Playground&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13920539/170837732-9e09d5f3-e79e-4ddd-b118-72e49456a7cd.png&#34; alt=&#34;JasprPad Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Jaspr was made with the premise to make a web-framework that looks and feels just like Flutter, but renders normal html/css like Vue or React. It is targeted mainly at Flutter developers that want to build websites but don&#39;t want to use Flutter Web (for various reasons). Since it uses Dart, it is also strong in terms of type-safety and null-safety compared to JS.&lt;/p&gt; &#xA;&lt;h3&gt;Differences to Flutter and Design Principles&lt;/h3&gt; &#xA;&lt;p&gt;As you might know Flutter renders Widgets by manually painting pixels to a canvas. However rendering web-pages with HTML &amp;amp; CSS works fundamentally different to Flutters painting approach. Also Flutter has a vast variety of widgets with different purposes and styling, whereas in html you can uniquely style each html element however you like.&lt;/p&gt; &#xA;&lt;p&gt;Instead of trying to mirror every little thing from Flutter, &lt;code&gt;jaspr&lt;/code&gt; tries to give a general Fluttery feeling by matching features where it makes sense without compromising on the unique properties of the web platform. Rather it embraces these differences to give the best of both worlds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/schultek/jaspr/wiki#-jaspr-vs-flutter-web&#34;&gt;More&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Directories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;/experiments&lt;/strong&gt;: Experimental apps or features, that are not part of the core framework (yet?). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/minimal_app&lt;/strong&gt;: A minimal example with a single entry point for both client and server.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/preload_images&lt;/strong&gt;: A component that automatically preloads images for a next route.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/riverpod&lt;/strong&gt;: Riverpod example for jaspr.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/scoped_styles&lt;/strong&gt;: A component that introduces scoped styles.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/server_handling&lt;/strong&gt;: An app that uses custom middleware on the server to host an api.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;/packages&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/schultek/jaspr/tree/main/packages/jaspr&#34;&gt;&lt;strong&gt;/jaspr&lt;/strong&gt;&lt;/a&gt;: The main framework package.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/jaspr_builder&lt;/strong&gt;: Polyfill builder for integrating js libraries with jaspr.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/jaspr_pad&lt;/strong&gt;: DartPad inspired online playground for jaspr apps.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/jaspr_riverpod&lt;/strong&gt;: Riverpod implementation for jaspr.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/jaspr_router&lt;/strong&gt;: A router implementation for jaspr.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;/jaspr_test&lt;/strong&gt;: A testing package for jaspr.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Implement core framework&lt;/li&gt; &#xA; &lt;li&gt;✅ Write test package and framework tests&lt;/li&gt; &#xA; &lt;li&gt;✅ Add riverpod integration package&lt;/li&gt; &#xA; &lt;li&gt;✅ Add jasprpad as online playground with samples&lt;/li&gt; &#xA; &lt;li&gt;✅ Add tutorial to jasprpad&lt;/li&gt; &#xA; &lt;li&gt;✅ Add wiki and documentation&lt;/li&gt; &#xA; &lt;li&gt;🚧 Bump test coverage over 80%&lt;/li&gt; &#xA; &lt;li&gt;🔜 Add benchmarks&lt;/li&gt; &#xA; &lt;li&gt;🔜 Improve router package&lt;/li&gt; &#xA; &lt;li&gt;🔜 Add ssg support&lt;/li&gt; &#xA; &lt;li&gt;🔜 Add css preprocessing and scoped styles&lt;/li&gt; &#xA; &lt;li&gt;🔜 Improve tutorial on jasprpad&lt;/li&gt; &#xA; &lt;li&gt;🔜 Improve wiki and add website&lt;/li&gt; &#xA; &lt;li&gt;🔜 Extend framework with missing concepts (Animations, ...)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>brianegan/flutter_architecture_samples</title>
    <updated>2022-06-08T01:39:47Z</updated>
    <id>tag:github.com,2022-06-08:/brianegan/flutter_architecture_samples</id>
    <link href="https://github.com/brianegan/flutter_architecture_samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TodoMVC for Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_architecture_samples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/brianegan/flutter_architecture_samples&#34;&gt;&lt;img src=&#34;https://travis-ci.org/brianegan/flutter_architecture_samples.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/brianegan/flutter_architecture_samples&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/brianegan/flutter_architecture_samples.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/brianegan/flutter_architecture_samples&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/brianegan/flutter_architecture_samples/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/assets/todo-list.png&#34; alt=&#34;List of Todos Screen&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://todomvc.com&#34;&gt;TodoMVC&lt;/a&gt; for Flutter!&lt;/p&gt; &#xA;&lt;p&gt;Flutter provides a lot of flexibility in deciding how to organize and architect your apps. While this freedom is very valuable, it can also lead to apps with large classes, inconsistent naming schemes, as well as mismatching or missing architectures. These types of issues can make testing, maintaining and extending your apps difficult.&lt;/p&gt; &#xA;&lt;p&gt;The Flutter Architecture Samples project demonstrates strategies to help solve or avoid these common problems. This project implements the same app using different architectural concepts and tools.&lt;/p&gt; &#xA;&lt;p&gt;You can use the samples in this project as a learning reference, or as a starting point for creating your own apps. The focus of this project is on demonstrating how to structure your code, design your architecture, and the eventual impact of adopting these patterns on testing and maintaining your app. You can use the techniques demonstrated here in many different ways to build apps. Your own particular priorities will impact how you implement the concepts in these projects, so you should not consider these samples to be canonical examples. To ensure the focus is kept on the aims described above, the app uses a simple UI.&lt;/p&gt; &#xA;&lt;h3&gt;Current Samples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/vanilla&#34;&gt;Vanilla Lifting State Up Example&lt;/a&gt; (&lt;a href=&#34;https://fas_vanilla.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the tools Flutter provides out of the box to manage app state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/inherited_widget&#34;&gt;InheritedWidget Example&lt;/a&gt; (&lt;a href=&#34;https://fas_inherited_widget.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses an InheritedWidget to pass app state down the widget hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/change_notifier_provider&#34;&gt;Change Notifier + Provider Example&lt;/a&gt; (&lt;a href=&#34;https://fas_change_notifier_provider.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt; class from Flutter with &lt;a href=&#34;https://pub.dev/packages/provider&#34;&gt;provider&lt;/a&gt; package now recommended by the Flutter team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/bloc_flutter&#34;&gt;BLoC Example&lt;/a&gt; (&lt;a href=&#34;https://fas_bloc_flutter.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - An implementation of the BLoC pattern, which uses Sinks for Inputs and Streams for Outputs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/bloc_library&#34;&gt;Bloc Library Example&lt;/a&gt; (&lt;a href=&#34;https://fas_bloc_library.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/bloc&#34;&gt;bloc&lt;/a&gt; and &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_bloc&#34;&gt;flutter_bloc&lt;/a&gt; libraries to manage app state and update Widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/mobx&#34;&gt;MobX Example&lt;/a&gt; (&lt;a href=&#34;https://fas_mobx.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the &lt;a href=&#34;https://pub.dev/packages/mobx&#34;&gt;MobX&lt;/a&gt; library to manage app state and update widgets using &lt;code&gt;Observables&lt;/code&gt;, &lt;code&gt;Actions&lt;/code&gt; and &lt;code&gt;Reactions&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/redux&#34;&gt;Redux Example&lt;/a&gt; (&lt;a href=&#34;https://fas_redux.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/redux&#34;&gt;Redux&lt;/a&gt; library to manage app state and update Widgets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/simple_bloc_flutter&#34;&gt;&#34;Simple&#34; BLoC Example&lt;/a&gt; (&lt;a href=&#34;https://fas_simple_bloc.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Similar to the BLoC pattern, but uses Functions for Inputs and Streams for Outputs. Results in far less code compared to standard BLoC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/mvi_flutter&#34;&gt;MVI Example&lt;/a&gt; (&lt;a href=&#34;https://fas_mvi.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the concepts from Cycle.JS and applies them to Flutter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/states_rebuilder&#34;&gt;states_rebuilder Example&lt;/a&gt; (&lt;a href=&#34;https://fas_states_rebuilder.codemagic.app&#34;&gt;Web Demo&lt;/a&gt;) - Uses the &lt;a href=&#34;https://pub.dev/packages/states_rebuilder&#34;&gt;states_rebuilder&lt;/a&gt; library to manage app state and update Widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/built_redux&#34;&gt;built_redux Example&lt;/a&gt; - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/built_redux&#34;&gt;built_redux&lt;/a&gt; library to enforce immutability and manage app state&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/scoped_model&#34;&gt;scoped_model Example&lt;/a&gt; - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/scoped_model&#34;&gt;scoped_model&lt;/a&gt; library to hold app state and notify Widgets of Updates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/firestore_redux&#34;&gt;Firestore Redux Example&lt;/a&gt; - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/redux&#34;&gt;Redux&lt;/a&gt; library to manage app state and update Widgets and adds &lt;a href=&#34;https://firebase.google.com/docs/firestore/&#34;&gt;Cloud_Firestore&lt;/a&gt; as the Todos database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/mvu&#34;&gt;MVU Example&lt;/a&gt; - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/dartea&#34;&gt;dartea&lt;/a&gt; library to manage app state and update Widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/mvc&#34;&gt;MVC Example&lt;/a&gt; - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/mvc_pattern&#34;&gt;MVC&lt;/a&gt; library to implement the traditional MVC design pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/frideos_library&#34;&gt;Frideos Example&lt;/a&gt; - Uses the &lt;a href=&#34;https://pub.dartlang.org/packages/frideos&#34;&gt;Frideos&lt;/a&gt; library to manage app state and update widgets using streams.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supporting Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/integration_tests&#34;&gt;integration_tests&lt;/a&gt; - Demonstrates how to write selenium-style integration (aka end to end) tests using the Page Object Model. This test suite is run against all samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/todos_repository_core&#34;&gt;todos_repository_core&lt;/a&gt; - Defines the core abstract classes for loading and saving data so that storage can be implemented in various ways, such as file storage or firebase for mobile projects, or window.localStorage for web projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/todos_repository_local_storage&#34;&gt;todos_repository_local_storage&lt;/a&gt; - Implements the todos repository using the file system, window.localStorage, and SharedPreferences as the data source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/firebase_flutter_repository&#34;&gt;firebase_flutter_repository&lt;/a&gt; - Implements the todos repository using firestore as the data source.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/firebase_rtdb_flutter_repository&#34;&gt;firebase_rtdb_flutter_repository&lt;/a&gt; - Implements the todos repository using firebase real-time database as the data source.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the samples&lt;/h3&gt; &#xA;&lt;h4&gt;iOS / Android&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;sample_directory&amp;gt;&#xA;flutter run &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Web&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you&#39;re on Flutter version &#34;Flutter 1.12.13+hotfix.6 • channel beta&#34; or newer. Not all samples support web at this time, so please check the sample directory for a &lt;code&gt;lib/main_web.dart&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;sample_directory&amp;gt;&#xA;flutter run -d chrome -t lib/main_web.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Why a todo app?&lt;/h3&gt; &#xA;&lt;p&gt;The app in this project aims to be simple enough that you can understand it quickly, but complex enough to showcase difficult design decisions and testing scenarios. For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/app_spec.md&#34;&gt;app&#39;s specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Be excellent to each other&lt;/h3&gt; &#xA;&lt;p&gt;This Repo is meant as a discussion platform for various architectures. Let us debate these ideas vigorously, but let us be excellent to each other in the process!&lt;/p&gt; &#xA;&lt;p&gt;While healthy debate and contributions are very welcome, trolls are not. Read the &lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/code-of-conduct.md&#34;&gt;code of conduct&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to join in the discussion, file issues, and we&#39;d love to have more samples added! Please read the &lt;a href=&#34;https://raw.githubusercontent.com/brianegan/flutter_architecture_samples/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file for guidance :)&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;All code in this repo is MIT licensed.&lt;/p&gt; &#xA;&lt;h2&gt;Attribution&lt;/h2&gt; &#xA;&lt;p&gt;All of these ideas and even some of the language are directly influenced by two projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://todomvc.com&#34;&gt;TodoMVC&lt;/a&gt; - A Todo App implemented in various JS frameworks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlesamples/android-architecture&#34;&gt;Android Architecture Blueprints&lt;/a&gt; - A similar concept, but for Android! The UI and app spec was highly inspired by their example.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianegan&#34;&gt;Brian Egan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmcc007&#34;&gt;Maurice McCabe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidmarne&#34;&gt;David Marne&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/passsy&#34;&gt;Pascal Welsch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kinggolf&#34;&gt;Larry King&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/franklinharper&#34;&gt;Frank Harper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p69&#34;&gt;Pavel Shilyagov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leocavalcante&#34;&gt;Leo Cavalcante&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndriousSolutions&#34;&gt;Greg Perry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/felangel&#34;&gt;Felix Angelov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frideosapps&#34;&gt;Francesco Mineo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pavanpodila&#34;&gt;Pavan Podila&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kush3107&#34;&gt;Kushagra Saxena&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shakib609&#34;&gt;Shakib Hossain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GIfatahTH&#34;&gt;Mellati Fatah&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;d like to thank all of the folks who have helped write new samples, improve the current implementations, and added documentation! You&#39;re amazing! :)&lt;/p&gt;</summary>
  </entry>
</feed>