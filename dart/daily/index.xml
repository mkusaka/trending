<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-09T01:27:48Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Predidit/oneAnime</title>
    <updated>2024-04-09T01:27:48Z</updated>
    <id>tag:github.com,2024-04-09:/Predidit/oneAnime</id>
    <link href="https://github.com/Predidit/oneAnime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款简洁清爽无广告的看番软件。 一款带弹幕的 anime1 第三方客户端，界面符合 Material You 规范。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oneAnime&lt;/h1&gt; &#xA;&lt;p&gt;使用 flutter 开发的 Anime1 第三方客户端, 一款简洁清爽无广告的看番软件。界面符合 Material You 规范。除了番剧，还有弹幕 (～￣▽￣)～&lt;/p&gt; &#xA;&lt;h2&gt;支持平台&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android 10 and Above&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 1806 and Above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;功能 / 开发计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 番剧目录&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 番剧搜索&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 番剧时间表&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 番剧字幕&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 分集播放&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 视频播放器&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 硬件加速&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 在线更新&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 追番列表&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 番剧弹幕 &amp;lt;(￣︶￣)&amp;gt; 这个真的可以有&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 番剧下载&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 番剧更新提醒&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 还有更多 (/・ω・＼)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;p&gt;通过本页面 &lt;a href=&#34;https://github.com/Predidit/oneAnime/releases&#34;&gt;release&lt;/a&gt; 选项卡下载&lt;/p&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;h4&gt;Q: 番剧列表中的番剧为什么只有简介，没有精致的封面&lt;/h4&gt; &#xA;&lt;p&gt;A: 受限于 Anime1 网站本身的架构与设计，Anime1 不向用户提供精致的番剧封面。作为第三方客户端开发者，我们对此无能为力。&lt;/p&gt; &#xA;&lt;h4&gt;Q: 我在尝试自行编译该项目，编译的 windows 版本缺乏搜索优化功能。&lt;/h4&gt; &#xA;&lt;p&gt;A: 本项目编译需要良好的网络环境，如果您位于中国大陆，可能需要设置恰当的镜像地址。同时由于 flutter_open_chinese_conventer 库并不支持 windows 平台，我们另外编译了 opencc 项目的动态链接库以解决兼容问题。我们略微裁剪过的 opencc 实现开源在 &lt;a href=&#34;https://github.com/Predidit/open_chinese_convert_bridge&#34;&gt;这里&lt;/a&gt;， 将由此项目编译得到的 opencc.dll 放在本项目编译产物目录下即可修复搜索优化功能。&lt;/p&gt; &#xA;&lt;h4&gt;Q: 本项目使用 webview 技术吗，我不想要套壳浏览器。&lt;/h4&gt; &#xA;&lt;p&gt;A: APP正常运行状态下不会加载 webview， 我们也很讨厌套壳浏览器。&lt;/p&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;特别感谢 &lt;a href=&#34;https://github.com/HQAnime/AnimeOne&#34;&gt;AnimeOne&lt;/a&gt; 本项目使用了部分来自 AnimeOne 的代码以处理与 Anime1 的交互&lt;/p&gt; &#xA;&lt;p&gt;特别感谢 &lt;a href=&#34;https://www.dandanplay.com/&#34;&gt;DandanPlayer&lt;/a&gt; 本项目使用了 dandanplayer 开放API 以提供弹幕交互。&lt;/p&gt; &#xA;&lt;p&gt;特别感谢 &lt;a href=&#34;https://bangumi.tv/&#34;&gt;Bangumi&lt;/a&gt; 本项目使用了 Bangumi 开放API 以提供番剧元数据。&lt;/p&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/media-kit/media-kit&#34;&gt;media_kit&lt;/a&gt; 本项目跨平台媒体播放能力来自 media_kit&lt;/p&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/isar/hive&#34;&gt;hive&lt;/a&gt; 本项目持久化储存能力来自 hive&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zubairehman/flutter_boilerplate_project</title>
    <updated>2024-04-09T01:27:48Z</updated>
    <id>tag:github.com,2024-04-09:/zubairehman/flutter_boilerplate_project</id>
    <link href="https://github.com/zubairehman/flutter_boilerplate_project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A boilerplate project created in flutter using MobX and Provider.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This branch is still under development&lt;/h1&gt; &#xA;&lt;h1&gt;Boilerplate Project&lt;/h1&gt; &#xA;&lt;p&gt;A boilerplate project created in flutter using MobX and Provider. Boilerplate supports both web and mobile, clone the appropriate branches mentioned below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Mobile: &lt;a href=&#34;https://github.com/zubairehman/flutter-boilerplate-project/tree/master&#34;&gt;https://github.com/zubairehman/flutter-boilerplate-project/tree/master&lt;/a&gt; (stable channel)&lt;/li&gt; &#xA; &lt;li&gt;For Web: &lt;a href=&#34;https://github.com/zubairehman/flutter-boilerplate-project/tree/feature/web-support&#34;&gt;https://github.com/zubairehman/flutter-boilerplate-project/tree/feature/web-support&lt;/a&gt; (beta channel)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The Boilerplate contains the minimal implementation required to create a new library or project. The repository code is preloaded with some basic components like basic app architecture, app theme, constants and required dependencies to create a new project. By using boiler plate code as standard initializer, we can have same patterns in all the projects that will inherit it. This will also help in reducing setup &amp;amp; development time by allowing you to use same code pattern and avoid re-writing from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download or clone this repo by using the link below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/zubairehman/flutter-boilerplate-project.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to project root and execute the following command in console to get the required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub get &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project uses &lt;code&gt;inject&lt;/code&gt; library that works with code generation, execute the following command to generate files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter packages pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or watch command in order to keep the source code synced automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter packages pub run build_runner watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hide Generated Files&lt;/h2&gt; &#xA;&lt;p&gt;In-order to hide generated files, navigate to &lt;code&gt;Android Studio&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;File Types&lt;/code&gt; and paste the below lines under &lt;code&gt;ignore files and folders&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*.inject.summary;*.inject.dart;*.g.dart;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Visual Studio Code, navigate to &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; and search for &lt;code&gt;Files:Exclude&lt;/code&gt;. Add the following patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;**/*.inject.summary&#xA;**/*.inject.dart&#xA;**/*.g.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Boilerplate Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Splash&lt;/li&gt; &#xA; &lt;li&gt;Login&lt;/li&gt; &#xA; &lt;li&gt;Home&lt;/li&gt; &#xA; &lt;li&gt;Routing&lt;/li&gt; &#xA; &lt;li&gt;Theme&lt;/li&gt; &#xA; &lt;li&gt;Dio&lt;/li&gt; &#xA; &lt;li&gt;Database&lt;/li&gt; &#xA; &lt;li&gt;MobX (to connect the reactive data of your application with the UI)&lt;/li&gt; &#xA; &lt;li&gt;Provider (State Management)&lt;/li&gt; &#xA; &lt;li&gt;Encryption&lt;/li&gt; &#xA; &lt;li&gt;Validation&lt;/li&gt; &#xA; &lt;li&gt;Code Generation&lt;/li&gt; &#xA; &lt;li&gt;User Notifications&lt;/li&gt; &#xA; &lt;li&gt;Logging&lt;/li&gt; &#xA; &lt;li&gt;Dependency Injection&lt;/li&gt; &#xA; &lt;li&gt;Dark Theme Support (new)&lt;/li&gt; &#xA; &lt;li&gt;Multilingual Support (new)&lt;/li&gt; &#xA; &lt;li&gt;Provider example (new)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Up-Coming Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connectivity Support&lt;/li&gt; &#xA; &lt;li&gt;Background Fetch Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Libraries &amp;amp; Tools Used&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutterchina/dio&#34;&gt;Dio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tekartik/sembast.dart&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart&#34;&gt;MobX&lt;/a&gt; (to connect the reactive data of your application with the UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;Provider&lt;/a&gt; (State Management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xxtea/xxtea-dart&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-league/validators&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zubairehman/Flogs&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreHaueisen/flushbar&#34;&gt;Notifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/json_serializable&#34;&gt;Json Serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fluttercommunity/get_it&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Folder Structure&lt;/h3&gt; &#xA;&lt;p&gt;Here is the core folder structure which flutter provides.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter-app/&#xA;|- android&#xA;|- build&#xA;|- ios&#xA;|- lib&#xA;|- test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the folder structure we have been using in this project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lib/&#xA;|- constants/&#xA;|- data/&#xA;|- stores/&#xA;|- ui/&#xA;|- utils/&#xA;|- widgets/&#xA;|- main.dart&#xA;|- routes.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, lets dive into the lib folder which has the main code for the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1- constants - All the application level constants are defined in this directory with-in their respective files. This directory contains the constants for `theme`, `dimentions`, `api endpoints`, `preferences` and `strings`.&#xA;2- data - Contains the data layer of your project, includes directories for local, network and shared pref/cache.&#xA;3- stores - Contains store(s) for state-management of your application, to connect the reactive data of your application with the UI. &#xA;4- ui — Contains all the ui of your project, contains sub directory for each screen.&#xA;5- util — Contains the utilities/common functions of your application.&#xA;6- widgets — Contains the common widgets for your applications. For example, Button, TextField etc.&#xA;7- routes.dart — This file contains all the routes for your application.&#xA;8- main.dart - This is the starting point of the application. All the application level configurations are defined in this file i.e, theme, routes, title, orientation etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;This directory contains all the application level constants. A separate file is created for each type as shown in example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constants/&#xA;|- app_theme.dart&#xA;|- dimens.dart&#xA;|- endpoints.dart&#xA;|- preferences.dart&#xA;|- strings.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data&lt;/h3&gt; &#xA;&lt;p&gt;All the business logic of your application will go into this directory, it represents the data layer of your application. It is sub-divided into three directories &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;sharedperf&lt;/code&gt;, each containing the domain specific logic. Since each layer exists independently, that makes it easier to unit test. The communication between UI and data layer is handled by using central repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data/&#xA;|- local/&#xA;    |- constants/&#xA;    |- datasources/&#xA;    |- app_database.dart&#xA;   &#xA;|- network/&#xA;    |- constants/&#xA;    |- exceptions/&#xA;    |- rest_client.dart&#xA;    &#xA;|- sharedpref&#xA;    |- constants/&#xA;    |- shared_preference_helper.dart&#xA;    &#xA;|- repository.dart&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stores&lt;/h3&gt; &#xA;&lt;p&gt;The store is where all your application state lives in flutter. The Store is basically a widget that stands at the top of the widget tree and passes it&#39;s data down using special methods. In-case of multiple stores, a separate folder for each store is created as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stores/&#xA;|- login/&#xA;    |- login_store.dart&#xA;    |- form_validator.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI&lt;/h3&gt; &#xA;&lt;p&gt;This directory contains all the ui of your application. Each screen is located in a separate folder making it easy to combine group of files related to that particular screen. All the screen specific widgets will be placed in &lt;code&gt;widgets&lt;/code&gt; directory as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ui/&#xA;|- login&#xA;   |- login_screen.dart&#xA;   |- widgets&#xA;      |- login_form.dart&#xA;      |- login_button.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utils&lt;/h3&gt; &#xA;&lt;p&gt;Contains the common file(s) and utilities used in a project. The folder structure is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;utils/&#xA;|- encryption&#xA;   |- xxtea.dart&#xA;|- date&#xA;  |- date_time.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Widgets&lt;/h3&gt; &#xA;&lt;p&gt;Contains the common widgets that are shared across multiple screens. For example, Button, TextField etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;widgets/&#xA;|- app_icon_widget.dart&#xA;|- empty_app_bar.dart&#xA;|- progress_indicator.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;This file contains all the routes for your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;&#xA;import &#39;ui/post/post_list.dart&#39;;&#xA;import &#39;ui/login/login.dart&#39;;&#xA;import &#39;ui/splash/splash.dart&#39;;&#xA;&#xA;class Routes {&#xA;  Routes._();&#xA;&#xA;  //static variables&#xA;  static const String splash = &#39;/splash&#39;;&#xA;  static const String login = &#39;/login&#39;;&#xA;  static const String home = &#39;/post&#39;;&#xA;&#xA;  static final routes = &amp;lt;String, WidgetBuilder&amp;gt;{&#xA;    splash: (BuildContext context) =&amp;gt; SplashScreen(),&#xA;    login: (BuildContext context) =&amp;gt; LoginScreen(),&#xA;    home: (BuildContext context) =&amp;gt; HomeScreen(),&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Main&lt;/h3&gt; &#xA;&lt;p&gt;This is the starting point of the application. All the application level configurations are defined in this file i.e, theme, routes, title, orientation etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:boilerplate/routes.dart&#39;;&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter/services.dart&#39;;&#xA;&#xA;import &#39;constants/app_theme.dart&#39;;&#xA;import &#39;constants/strings.dart&#39;;&#xA;import &#39;ui/splash/splash.dart&#39;;&#xA;&#xA;void main() {&#xA;  SystemChrome.setPreferredOrientations([&#xA;    DeviceOrientation.portraitUp,&#xA;    DeviceOrientation.portraitDown,&#xA;    DeviceOrientation.landscapeRight,&#xA;    DeviceOrientation.landscapeLeft,&#xA;  ]).then((_) {&#xA;    runApp(MyApp());&#xA;  });&#xA;}&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  // This widget is the root of your application.&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      debugShowCheckedModeBanner: false,&#xA;      title: Strings.appName,&#xA;      theme: themeData,&#xA;      routes: Routes.routes,&#xA;      home: SplashScreen(),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Checkout &lt;a href=&#34;https://github.com/zubairehman/flutter-boilerplate-project/wiki&#34;&gt;wiki&lt;/a&gt; for more info&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;I will be happy to answer any questions that you may have on this approach, and if you want to lend a hand with the boilerplate then please feel free to submit an issue and/or pull request 🙂&lt;/p&gt; &#xA;&lt;p&gt;Again to note, this is example can appear as over-architectured for what it is - but it is an example only. If you liked my work, don’t forget to ⭐ star the repo to show your support.&lt;/p&gt;</summary>
  </entry>
</feed>