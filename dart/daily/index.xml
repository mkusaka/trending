<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-01T01:30:14Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dart-lang/dart_style</title>
    <updated>2025-03-01T01:30:14Z</updated>
    <id>tag:github.com,2025-03-01:/dart-lang/dart_style</id>
    <link href="https://github.com/dart-lang/dart_style" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opinionated formatter/linter for Dart code&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The dart_style package defines an opinionated automated formatter for Dart code. It replaces the whitespace in your program with what it deems to be the best formatting for it. It also makes minor changes around non-semantic punctuation like trailing commas and brackets in parameter lists.&lt;/p&gt; &#xA;&lt;p&gt;The resulting code should follow the &lt;a href=&#34;https://dart.dev/guides/language/effective-dart/style&#34;&gt;Dart style guide&lt;/a&gt; and look nice to most human readers, most of the time.&lt;/p&gt; &#xA;&lt;p&gt;The formatter handles indentation, inline whitespace, and (by far the most difficult) intelligent line wrapping. It has no problems with nested collections, function expressions, long argument lists, or otherwise tricky code.&lt;/p&gt; &#xA;&lt;p&gt;The formatter turns code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// BEFORE formatting&#xA;process = await Process.start(path.join(p.pubCacheBinPath,Platform.isWindows&#xA;?&#39;${command.first}.bat&#39;:command.first,),[...command.sublist(1),&#39;web:0&#39;,&#xA;// Allow for binding to a random available port.&#xA;],workingDirectory:workingDir,environment:{&#39;PUB_CACHE&#39;:p.pubCachePath,&#39;PATH&#39;:&#xA;path.dirname(Platform.resolvedExecutable)+(Platform.isWindows?&#39;;&#39;:&#39;:&#39;)+&#xA;Platform.environment[&#39;PATH&#39;]!,},);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// AFTER formatting&#xA;process = await Process.start(&#xA;  path.join(&#xA;    p.pubCacheBinPath,&#xA;    Platform.isWindows ? &#39;${command.first}.bat&#39; : command.first,&#xA;  ),&#xA;  [&#xA;    ...command.sublist(1), &#39;web:0&#39;,&#xA;    // Allow for binding to a random available port.&#xA;  ],&#xA;  workingDirectory: workingDir,&#xA;  environment: {&#xA;    &#39;PUB_CACHE&#39;: p.pubCachePath,&#xA;    &#39;PATH&#39;:&#xA;        path.dirname(Platform.resolvedExecutable) +&#xA;        (Platform.isWindows ? &#39;;&#39; : &#39;:&#39;) +&#xA;        Platform.environment[&#39;PATH&#39;]!,&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The formatter will never break your codeâ€”you can safely invoke it automatically from build and presubmit scripts.&lt;/p&gt; &#xA;&lt;h2&gt;Formatting files&lt;/h2&gt; &#xA;&lt;p&gt;The formatter is part of the unified &lt;a href=&#34;https://dart.dev/tools/dart-tool&#34;&gt;&lt;code&gt;dart&lt;/code&gt;&lt;/a&gt; developer tool included in the Dart SDK, so most users run it directly from there using &lt;code&gt;dart format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;IDEs and editors that support Dart usually provide easy ways to run the formatter. For example, in Visual Studio Code, formatting Dart code will use the dart_style formatter by default. Most users have it set to reformat every time they save a file.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a simple example of using the formatter on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dart format my_file.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command formats the &lt;code&gt;my_file.dart&lt;/code&gt; file and writes the result back to the same file.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;dart format&lt;/code&gt; command takes a list of paths, which can point to directories or files. If the path is a directory, it processes every &lt;code&gt;.dart&lt;/code&gt; file in that directory and all of its subdirectories.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;dart format&lt;/code&gt; formats each file and writes the result back to the same files. If you pass &lt;code&gt;--output show&lt;/code&gt;, it prints the formatted code to stdout and doesn&#39;t modify the files.&lt;/p&gt; &#xA;&lt;h2&gt;Validating formatting&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use the formatter in something like a &lt;a href=&#34;https://www.chromium.org/developers/how-tos/depottools/presubmit-scripts&#34;&gt;presubmit script&lt;/a&gt; or &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;commit hook&lt;/a&gt;, you can pass flags to omit writing formatting changes to disk and to update the exit code to indicate success/failure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dart format --output=none --set-exit-if-changed .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the formatter as a library&lt;/h2&gt; &#xA;&lt;p&gt;The `dart_style package exposes a simple &lt;a href=&#34;https://pub.dev/documentation/dart_style/latest/&#34;&gt;library API&lt;/a&gt; for formatting code. Basic usage looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_style/dart_style.dart&#39;;&#xA;&#xA;main() {&#xA;  final formatter = DartFormatter();&#xA;&#xA;  try {&#xA;    print(formatter.format(&#34;&#34;&#34;&#xA;    library an_entire_compilation_unit;&#xA;&#xA;    class SomeClass {}&#xA;    &#34;&#34;&#34;));&#xA;&#xA;    print(formatter.formatStatement(&#34;aSingle(statement);&#34;));&#xA;  } on FormatterException catch (ex) {&#xA;    print(ex);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Before sending an email, see if you are asking a &lt;a href=&#34;https://github.com/dart-lang/dart_style/wiki/FAQ&#34;&gt;frequently asked question&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before filing a bug, or if you want to understand how work on the formatter is managed, see how we &lt;a href=&#34;https://github.com/dart-lang/dart_style/wiki/Tracking-issues&#34;&gt;track issues&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>