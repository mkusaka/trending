<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:22:45Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>redevRx/chat_gpt_sdk</title>
    <updated>2023-04-12T02:22:45Z</updated>
    <id>tag:github.com,2023-04-12:/redevRx/chat_gpt_sdk</id>
    <link href="https://github.com/redevRx/chat_gpt_sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT Application with flutter&lt;/h1&gt; &#xA;&lt;p&gt;ChatGPT is a chat-bot launched by OpenAI in November 2022. It is built on top of OpenAI&#39;s GPT-3.5 family of large language models, and is fine-tuned with both supervised and reinforcement learning techniques.&lt;/p&gt; &#xA;&lt;h1&gt;OpenAI Powerful Library Support GPT-4&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub commit activity&#34; src=&#34;https://img.shields.io/github/commit-activity/m/redevRx/Flutter-ChatGPT&#34;&gt; &lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/redevRx/Flutter-ChatGPT&#34;&gt; &lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/redevRx/Flutter-ChatGPT?style=social&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/redevRx/Flutter-ChatGPT/dart.yml?label=tests&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/redevRx/Flutter-ChatGPT&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#install-package&#34;&gt;Install Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#create-openai-instance&#34;&gt;Create OpenAI Instance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#change-access-token&#34;&gt;Change Access Token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#complete-text&#34;&gt;Complete Text&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support Server Sent Event&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#chat-complete-gpt-35-turbo&#34;&gt;Chat Complete GPT-4&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support GPT3.5 and GPT-4&lt;/li&gt; &#xA;   &lt;li&gt;Support Server Sent Event&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#qa&#34;&gt;Example Q&amp;amp;A&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#generate-image-with-prompt&#34;&gt;Generate Image With Prompt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#edit&#34;&gt;Editing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#cancel-generate&#34;&gt;Cancel Generate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#file&#34;&gt;File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#audio&#34;&gt;Audio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#embedding&#34;&gt;Embedding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#fine-tune&#34;&gt;Fine-Tune&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support Server Sent Event&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#modelengine&#34;&gt;Moderations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#modelengine&#34;&gt;Model And Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#flutter-example&#34;&gt;Flutter Code Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/redevRx/chat_gpt_sdk/main/#video-tutorials&#34;&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install Package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;chat_gpt: 2.1.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create OpenAI Instance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Token &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Your secret API keys are listed below. Please note that we do not display your secret API keys again after you generate them.&lt;/li&gt; &#xA;     &lt;li&gt;Do not share your API key with others, or expose it in the browser or other client-side code. In order to protect the security of your account, OpenAI may also automatically rotate any API key that we&#39;ve found has leaked publicly.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;https://beta.openai.com/account/api-keys&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OrgId &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Identifier for this organization sometimes used in API requests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/account/org-settings&#34;&gt;https://beta.openai.com/account/org-settings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final openAI = OpenAI.instance.build(token: token,baseOption: HttpSetup(receiveTimeout: const Duration(seconds: 5)),isLogger: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change Access Token&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;openAI.setToken(&#39;new-token&#39;);&#xA;&#xA;///get toekn&#xA;openAI.token;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Complete Text&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Text Complete API&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Translate Method &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;translateEngToThai&lt;/li&gt; &#xA;     &lt;li&gt;translateThaiToEng&lt;/li&gt; &#xA;     &lt;li&gt;translateToJapanese&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;kTranslateModelV3&lt;/li&gt; &#xA;     &lt;li&gt;kTranslateModelV2&lt;/li&gt; &#xA;     &lt;li&gt;kCodeTranslateModelV2 &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Translate natural language to SQL queries.&lt;/li&gt; &#xA;       &lt;li&gt;Create code to call the Stripe API using natural language.&lt;/li&gt; &#xA;       &lt;li&gt;Find the time complexity of a function.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;https://beta.openai.com/examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Complete with Feature&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void _translateEngToThai() async{&#xA;  final request = CompleteText(&#xA;          prompt: translateEngToThai(word: _txtWord.text.toString()),&#xA;          max_tokens: 200,&#xA;          model: Model.textDavinci3);&#xA;&#xA;  final response = await openAI.onCompletion(request: request);&#xA;  &#xA;  ///cancel request&#xA;  openAI.cancelAIGenerate();&#xA;  print(response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete with FutureBuilder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;CTResponse?&amp;gt;? _translateFuture;&#xA;&#xA;_translateFuture = openAI.onCompletion(request: request);&#xA;&#xA;///ui code&#xA;FutureBuilder&amp;lt;CTResponse?&amp;gt;(&#xA; future: _translateFuture,&#xA; builder: (context, snapshot) {&#xA;   final data = snapshot.data;&#xA;   if(snapshot.connectionState == ConnectionState.done) return something &#xA;   if(snapshot.connectionState == ConnectionState.waiting) return something&#xA;   return something&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPT-3 with SSE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void completeWithSSE() {&#xA;  final request = CompleteText(&#xA;          prompt: &#34;Hello world&#34;, maxTokens: 200, model: Model.textDavinci3);&#xA;  openAI.onCompletionSSE(request: request).listen((it) {&#xA;    debugPrint(it.choices.last.text);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Chat Complete (GPT-4 and GPT-3.5)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPT-4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void chatComplete() async {&#xA;    final request = ChatCompleteText(messages: [&#xA;      Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;    ], maxToken: 200, model: ChatModel.gpt_4);&#xA;&#xA;    final response = await openAI.onChatCompletion(request: request);&#xA;    for (var element in response!.choices) {&#xA;      print(&#34;data -&amp;gt; ${element.message?.content}&#34;);&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPT-4 with SSE(Server Send Event)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void chatCompleteWithSSE() {&#xA;  final request = ChatCompleteText(messages: [&#xA;    Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;  ], maxToken: 200, model: ChatModel.gpt_4);&#xA;&#xA;  openAI.onChatCompletionSSE(request: request).listen((it) {&#xA;    debugPrint(it.choices.last.message?.content);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support SSE(Server Send Event) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;GPT-3.5 Turbo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void chatCompleteWithSSE() {&#xA;  final request = ChatCompleteText(messages: [&#xA;    Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;  ], maxToken: 200, model: ChatModel.chatGptTurbo);&#xA;&#xA;  openAI.onChatCompletionSSE(request: request).listen((it) {&#xA;    debugPrint(it.choices.last.message?.content);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat Complete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void chatComplete() async {&#xA;    final request = ChatCompleteText(messages: [&#xA;      Map.of({&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#39;Hello!&#39;})&#xA;    ], maxToken: 200, model: ChatModel.chatGptTurbo0301);&#xA;&#xA;    final response = await openAI.onChatCompletion(request: request);&#xA;    for (var element in response!.choices) {&#xA;      print(&#34;data -&amp;gt; ${element.message?.content}&#34;);&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example Q&amp;amp;A &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Answer questions based on existing knowledge.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final request = CompleteText(prompt:&#39;What is human life expectancy in the United States?&#39;),&#xA;                model: Model.textDavinci3, maxTokens: 200);&#xA;&#xA; final response = await openAI.onCompletion(request:request);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Q: What is human life expectancy in the United States?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;A: Human life expectancy in the United States is 78 years.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate Image With Prompt&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate Image&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;prompt &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;A text description of the desired image(s). The maximum length is 1000 characters.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;n &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The number of images to generate. Must be between 1 and 10.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;size &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;response_format &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;The format in which the generated images are returned. Must be one of url or b64_json.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;user &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate with feature&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void _generateImage() {&#xA;  const prompt = &#34;cat eating snake blue red.&#34;;&#xA;&#xA;  final request = GenerateImage(prompt, 1,size: ImageSize.size256,&#xA;          response_format: Format.url);;&#xA;  final response = openAI.generateImage(request);&#xA;  print(&#34;img url :${response.data?.last?.url}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Edit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit Prompt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void editPrompt() async {&#xA;    final response = await openAI.editor.prompt(EditRequest(&#xA;        model: EditModel.textEditModel,&#xA;        input: &#39;What day of the wek is it?&#39;,&#xA;        instruction: &#39;Fix the spelling mistakes&#39;));&#xA;&#xA;    print(response.choices.last.text);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit Image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void editImage() async {&#xA;  final response = await openAI.editor.editImage(EditImageRequest(&#xA;          image: EditFile(&#34;${image?.path}&#34;, &#39;${image?.name}&#39;),&#xA;          mask: EditFile(&#39;file path&#39;, &#39;file name&#39;),&#xA;          size: ImageSize.size1024,&#xA;          prompt: &#39;King Snake&#39;));&#xA;&#xA;  print(response.data?.last?.url);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Variations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void variation() async {&#xA;  final request =&#xA;  Variation(image: EditFile(&#39;${image?.path}&#39;, &#39;${image?.name}&#39;));&#xA;  final response = await openAI.editor.variation(request);&#xA;&#xA;  print(response.data?.last?.url);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cancel Generate&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop Generate Prompt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;openAI.cancelAIGenerate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop Edit &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;image&lt;/li&gt; &#xA;   &lt;li&gt;prompt&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;openAI.edit.cancelEdit();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop Embedding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;openAI.embed.cancelEmbedding();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop Audio &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;translate&lt;/li&gt; &#xA;   &lt;li&gt;transcript&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;openAI.audio.cancelAudio();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop File &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;upload file&lt;/li&gt; &#xA;   &lt;li&gt;get file&lt;/li&gt; &#xA;   &lt;li&gt;delete file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;openAI.file.cancelFile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;File&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void getFile() async {&#xA;  final response = await openAI.file.get();&#xA;  print(response.data);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upload File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void uploadFile() async {&#xA;  final request = UploadFile(file: EditFile(&#39;file-path&#39;, &#39;file-name&#39;),purpose: &#39;fine-tune&#39;);&#xA;  final response = await openAI.file.uploadFile(request);&#xA;  print(response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Delete File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void delete() async {&#xA;  final response = await openAI.file.delete(&#34;file-Id&#34;);&#xA;  print(response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void retrieve() async {&#xA;  final response = await openAI.file.retrieve(&#34;file-Id&#34;);&#xA;  print(response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve Content File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void retrieveContent() async {&#xA;  final response = await openAI.file.retrieveContent(&#34;file-Id&#34;);&#xA;  print(response);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Audio&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio Translate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void audioTranslate() async {&#xA;  final mAudio = File(&#39;mp3-path&#39;);&#xA;  final request =&#xA;  AudioRequest(file: EditFile(mAudio.path, &#39;name&#39;), prompt: &#39;...&#39;);&#xA;&#xA;  final response = await openAI.audio.translate(request);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio Transcribe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void audioTranscribe() async {&#xA;  final mAudio = File(&#39;mp3-path&#39;);&#xA;  final request =&#xA;  AudioRequest(file: EditFile(mAudio.path, &#39;name&#39;), prompt: &#39;...&#39;);&#xA;&#xA;  final response = await openAI.audio.transcribes(request);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Embedding&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Embedding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void embedding() async {&#xA;  final request = EmbedRequest(&#xA;          model: EmbedModel.embedTextModel,&#xA;          input: &#39;The food was delicious and the waiter&#39;);&#xA;&#xA;  final response = await openAI.embed.embedding(request);&#xA;&#xA;  print(response.data.last.embedding);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fine Tune&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create Fine Tune&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void createTineTune() async {&#xA;  final request = CreateFineTune(trainingFile: &#39;The ID of an uploaded file&#39;);&#xA;  final response = await openAI.fineTune.create(request);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fine Tune List&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void tineTuneList() async {&#xA;    final response = await openAI.fineTune.list();&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fine Tune List Stream (SSE)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void tineTuneListStream() {&#xA;    openAI.fineTune.listStream(&#39;fineTuneId&#39;).listen((it) {&#xA;      ///handled data&#xA;    });&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fine Tune Get by Id&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void tineTuneById() async {&#xA;    final response = await openAI.fineTune.retrieve(&#39;fineTuneId&#39;);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cancel Fine Tune&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void tineTuneCancel() async {&#xA;    final response = await openAI.fineTune.cancel(&#39;fineTuneId&#39;);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Delete Fine Tune&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; void deleteTineTune() async {&#xA;    final response = await openAI.fineTune.delete(&#39;model&#39;);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Moderations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create Moderation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void createModeration() async {&#xA;  final response = await openAI.moderation&#xA;          .create(input: &#39;input&#39;, model: ModerationModel.textLast);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model&amp;amp;Engine&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Model List &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List and describe the various models available in the API. You can refer to the Models documentation to understand what models are available and the differences between them.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/api-reference/models&#34;&gt;https://beta.openai.com/docs/api-reference/models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final models = await openAI.listModel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Engine List &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/api-reference/engines&#34;&gt;https://beta.openai.com/docs/api-reference/engines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final engines = await openAI.listEngine();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flutter Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class TranslateScreen extends StatefulWidget {&#xA;  const TranslateScreen({Key? key}) : super(key: key);&#xA;  @override&#xA;  State&amp;lt;TranslateScreen&amp;gt; createState() =&amp;gt; _TranslateScreenState();&#xA;}&#xA;&#xA;class _TranslateScreenState extends State&amp;lt;TranslateScreen&amp;gt; {&#xA;  /// text controller&#xA;  final _txtWord = TextEditingController();&#xA;&#xA;  late OpenAI openAI;&#xA;&#xA;  Future&amp;lt;CTResponse?&amp;gt;? _translateFuture;&#xA;  void _translateEngToThai() async {&#xA;    setState(() {&#xA;      final request = CompleteText(&#xA;              prompt: translateEngToThai(word: _txtWord.text.toString()),&#xA;              maxTokens: 200,&#xA;              model: Model.textDavinci3);&#xA;      _translateFuture = openAI.onCompletion(request: request);&#xA;    });&#xA;  }&#xA;  &#xA;  @override&#xA;  void initState() {&#xA;    openAI = OpenAI.instance.build(&#xA;            token: token,&#xA;            baseOption: HttpSetup(&#xA;                    receiveTimeout: const Duration(seconds: 20),&#xA;                    connectTimeout: const Duration(seconds: 20)),&#xA;            isLog: true);&#xA;    super.initState();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    var size = MediaQuery.of(context).size;&#xA;    return Scaffold(&#xA;      backgroundColor: Colors.white,&#xA;      body: SingleChildScrollView(&#xA;        child: Center(&#xA;          child: Padding(&#xA;            padding: const EdgeInsets.symmetric(vertical: 16.0),&#xA;            child: Column(&#xA;              crossAxisAlignment: CrossAxisAlignment.center,&#xA;              children: [&#xA;                /**&#xA;                 * title translate&#xA;                 */&#xA;                _titleCard(size),&#xA;                /**&#xA;                 * input card&#xA;                 * insert your text for translate to th.com&#xA;                 */&#xA;                _inputCard(size),&#xA;&#xA;                /**&#xA;                 * card input translate&#xA;                 */&#xA;                _resultCard(size),&#xA;                /**&#xA;                 * button translate&#xA;                 */&#xA;                _btnTranslate()&#xA;              ],&#xA;            ),&#xA;          ),&#xA;        ),&#xA;      ),&#xA;      bottomNavigationBar: _navigation(size),&#xA;    );&#xA;  }&#xA;&#xA;  Widget _btnTranslate() {&#xA;    return Row(&#xA;      mainAxisAlignment: MainAxisAlignment.end,&#xA;      children: [&#xA;        Padding(&#xA;                padding: const EdgeInsets.only(right: 16.0),&#xA;                child: MaterialButtonX(&#xA;                        message: &#34;Translate&#34;,&#xA;                        height: 40.0,&#xA;                        width: 130.0,&#xA;                        color: Colors.blueAccent,&#xA;                        icon: Icons.translate,&#xA;                        iconSize: 18.0,&#xA;                        radius: 46.0,&#xA;                        onClick: () =&amp;gt; _translateEngToThai())),&#xA;      ],&#xA;    );&#xA;  }&#xA;&#xA;  Widget _resultCard(Size size) {&#xA;    return FutureBuilder&amp;lt;CTResponse?&amp;gt;(&#xA;            future: _translateFuture,&#xA;            builder: (context, snapshot) {&#xA;              final text = snapshot.data?.choices.last.text;&#xA;              return Container(&#xA;                margin: const EdgeInsets.symmetric(vertical: 32.0),&#xA;                padding: const EdgeInsets.symmetric(horizontal: 16.0),&#xA;                alignment: Alignment.bottomCenter,&#xA;                width: size.width * .86,&#xA;                height: size.height * .3,&#xA;                decoration: heroCard,&#xA;                child: SingleChildScrollView(&#xA;                  child: Column(&#xA;                    children: [&#xA;                      Text(&#xA;                        text ?? &#39;Loading...&#39;,&#xA;                        style: const TextStyle(color: Colors.black, fontSize: 18.0),&#xA;                      ),&#xA;                      SizedBox(&#xA;                        width: size.width,&#xA;                        child: const Divider(&#xA;                          color: Colors.grey,&#xA;                          thickness: 1,&#xA;                        ),&#xA;                      ),&#xA;                      Padding(&#xA;                        padding: const EdgeInsets.all(12.0),&#xA;                        child: Row(&#xA;                          mainAxisAlignment: MainAxisAlignment.end,&#xA;                          children: const [&#xA;                            Icon(&#xA;                              Icons.copy_outlined,&#xA;                              color: Colors.grey,&#xA;                              size: 22.0,&#xA;                            ),&#xA;                            Padding(&#xA;                              padding: EdgeInsets.symmetric(horizontal: 8.0),&#xA;                              child: Icon(&#xA;                                Icons.delete_forever,&#xA;                                color: Colors.grey,&#xA;                                size: 22.0,&#xA;                              ),&#xA;                            )&#xA;                          ],&#xA;                        ),&#xA;                      )&#xA;                    ],&#xA;                  ),&#xA;                ),&#xA;              );&#xA;            });&#xA;  }&#xA;&#xA;  Padding _navigation(Size size) {&#xA;    return Padding(&#xA;      padding: const EdgeInsets.symmetric(vertical: 16.0, horizontal: 18.0),&#xA;      child: Container(&#xA;        width: size.width * .8,&#xA;        height: size.height * .06,&#xA;        decoration: heroNav,&#xA;        child: Row(&#xA;          mainAxisAlignment: MainAxisAlignment.spaceAround,&#xA;          children: [&#xA;            Container(&#xA;              padding: const EdgeInsets.all(4.0),&#xA;              decoration: BoxDecoration(&#xA;                      color: Colors.indigoAccent,&#xA;                      borderRadius: BorderRadius.circular(50.0)),&#xA;              child: const Icon(&#xA;                Icons.translate,&#xA;                color: Colors.white,&#xA;                size: 22.0,&#xA;              ),&#xA;            ),&#xA;            const Icon(&#xA;              Icons.record_voice_over_outlined,&#xA;              color: Colors.indigoAccent,&#xA;              size: 22.0,&#xA;            ),&#xA;            const Icon(&#xA;              Icons.favorite,&#xA;              color: Colors.indigoAccent,&#xA;              size: 22.0,&#xA;            ),&#xA;            const Icon(&#xA;              Icons.person,&#xA;              color: Colors.indigoAccent,&#xA;              size: 22.0,&#xA;            )&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  Widget _titleCard(Size size) {&#xA;    return Container(&#xA;      margin: const EdgeInsets.symmetric(vertical: 32.0),&#xA;      width: size.width * .86,&#xA;      height: size.height * .08,&#xA;      decoration: heroCard,&#xA;      child: Row(&#xA;        mainAxisAlignment: MainAxisAlignment.spaceAround,&#xA;        children: [&#xA;          Row(&#xA;            children: [&#xA;              ClipRRect(&#xA;                borderRadius: BorderRadius.circular(30),&#xA;                child: Image.network(&#xA;                  &#34;https://www.clipartmax.com/png/middle/200-2009207_francais-english-italiano-english-flag-icon-flat.png&#34;,&#xA;                  fit: BoxFit.cover,&#xA;                  width: 30.0,&#xA;                  height: 30.0,&#xA;                ),&#xA;              ),&#xA;              const Padding(&#xA;                padding: EdgeInsets.symmetric(horizontal: 4.0),&#xA;                child: Text(&#xA;                  &#34;Eng&#34;,&#xA;                  style: TextStyle(color: Colors.grey, fontSize: 12.0),&#xA;                ),&#xA;              ),&#xA;              Transform.rotate(&#xA;                angle: -pi / 2,&#xA;                child: const Icon(&#xA;                  Icons.arrow_back_ios_new,&#xA;                  size: 16.0,&#xA;                  color: Colors.grey,&#xA;                ),&#xA;              )&#xA;            ],&#xA;          ),&#xA;          const Padding(&#xA;            padding: EdgeInsets.symmetric(horizontal: 12.0),&#xA;            child: Icon(&#xA;              Icons.swap_horiz_outlined,&#xA;              color: Colors.grey,&#xA;              size: 22.0,&#xA;            ),&#xA;          ),&#xA;          Row(&#xA;            children: [&#xA;              ClipRRect(&#xA;                borderRadius: BorderRadius.circular(30),&#xA;                child: Image.network(&#xA;                  &#34;https://cdn-icons-png.flaticon.com/512/197/197452.png&#34;,&#xA;                  fit: BoxFit.cover,&#xA;                  width: 30.0,&#xA;                  height: 30.0,&#xA;                ),&#xA;              ),&#xA;              const Padding(&#xA;                padding: EdgeInsets.symmetric(horizontal: 4.0),&#xA;                child: Text(&#xA;                  &#34;Thai&#34;,&#xA;                  style: TextStyle(color: Colors.grey, fontSize: 12.0),&#xA;                ),&#xA;              ),&#xA;              Transform.rotate(&#xA;                angle: -pi / 2,&#xA;                child: const Icon(&#xA;                  Icons.arrow_back_ios_new,&#xA;                  size: 16.0,&#xA;                  color: Colors.grey,&#xA;                ),&#xA;              )&#xA;            ],&#xA;          )&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  Widget _inputCard(Size size) {&#xA;    return Container(&#xA;      padding: const EdgeInsets.symmetric(horizontal: 16.0),&#xA;      alignment: Alignment.bottomCenter,&#xA;      width: size.width * .86,&#xA;      height: size.height * .25,&#xA;      decoration: heroCard,&#xA;      child: SingleChildScrollView(&#xA;        child: Column(&#xA;          children: [&#xA;            TextField(&#xA;              decoration: const InputDecoration(&#xA;                      border: InputBorder.none,&#xA;                      enabledBorder: InputBorder.none,&#xA;                      disabledBorder: InputBorder.none),&#xA;              controller: _txtWord,&#xA;              maxLines: 6,&#xA;              textInputAction: TextInputAction.newline,&#xA;              keyboardType: TextInputType.multiline,&#xA;            ),&#xA;            SizedBox(&#xA;              width: size.width,&#xA;              child: const Divider(&#xA;                color: Colors.grey,&#xA;                thickness: 1,&#xA;              ),&#xA;            ),&#xA;            Padding(&#xA;              padding: const EdgeInsets.all(12.0),&#xA;              child: Row(&#xA;                mainAxisAlignment: MainAxisAlignment.end,&#xA;                children: const [&#xA;                  Icon(&#xA;                    Icons.copy_outlined,&#xA;                    color: Colors.grey,&#xA;                    size: 22.0,&#xA;                  ),&#xA;                  Padding(&#xA;                    padding: EdgeInsets.symmetric(horizontal: 8.0),&#xA;                    child: Icon(&#xA;                      Icons.record_voice_over_outlined,&#xA;                      color: Colors.grey,&#xA;                      size: 22.0,&#xA;                    ),&#xA;                  )&#xA;                ],&#xA;              ),&#xA;            )&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://scontent.fkkc3-1.fna.fbcdn.net/v/t39.30808-6/321956306_528473869217638_4959635231571092650_n.jpg?_nc_cat=104&amp;amp;ccb=1-7&amp;amp;_nc_sid=730e14&amp;amp;_nc_ohc=YumrmcfO7jAAX9N9Ygd&amp;amp;tn=aWCijFs0IEeQXzfE&amp;amp;_nc_ht=scontent.fkkc3-1.fna&amp;amp;oh=00_AfCQk9ebz2qnPl2pshugchDnaEXMPe6rogXpdzc3UCfcmg&amp;amp;oe=63EF77E4&#34; width=&#34;350&#34; height=&#34;760&#34;&gt; &#xA;&lt;h2&gt;Video Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qUEUMxGW_0Q&amp;amp;ab_channel=idealBy&#34;&gt;Flutter Chat bot&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=z25HfnEi2zQ&amp;amp;t=1s&amp;amp;ab_channel=idealBy&#34;&gt;Flutter Generate Image&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>