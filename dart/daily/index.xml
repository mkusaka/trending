<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-21T03:11:55Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gskinnerTeam/flutter_custom_carousel</title>
    <updated>2024-04-21T03:11:55Z</updated>
    <id>tag:github.com,2024-04-21:/gskinnerTeam/flutter_custom_carousel</id>
    <link href="https://github.com/gskinnerTeam/flutter_custom_carousel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter widget for creating fully custom, animated scrollable lists. It manages all of the tricky logic surrounding scroll interactions and physics, and leaves the visual presentation of items up to you.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Custom Carousel&lt;/h1&gt; &#xA;&lt;p&gt;A widget for creating fully custom, animated scrollable lists. It manages all of the tricky logic surrounding scroll interactions and physics, and leaves the visual presentation of items up to you.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/gskinnerTeam/flutter_custom_carousel/raw/assets/readme_example.gif?raw=true&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;p&gt;Includes an example app (shown above) with a variety of commented demos to learn from or customize.&lt;/p&gt; &#xA;&lt;h1&gt;Platforms / devices&lt;/h1&gt; &#xA;&lt;p&gt;Currently, this widget is designed for touch input. On desktop, scroll wheel input can fight with the settling scroll physics. Specifying different &lt;code&gt;physics&lt;/code&gt; can resolve this at the cost of settling (aka snapping).&lt;/p&gt; &#xA;&lt;p&gt;You can also enable scrolling via mouse dragging on desktop by setting a &lt;code&gt;scrollBehavior&lt;/code&gt;. Check &lt;code&gt;main.dart&lt;/code&gt; in the example to see it in use.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, the included examples target mobile handsets in portrait view to keep them concise. They include only basic responsiveness.&lt;/p&gt; &#xA;&lt;h1&gt;Basics&lt;/h1&gt; &#xA;&lt;p&gt;Simply pass in a list of children, and define an &lt;code&gt;effectsBuilder&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;effectsBuilder&lt;/code&gt; accepts a child and its current relative scroll position (see &lt;strong&gt;scrollRatio&lt;/strong&gt; below), and returns the child wrapped with widgets that apply the desired effects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// very basic example that scrolls children vertically from -250px to +250px&#xA;CustomCarousel(&#xA;    children: [card1, card2, etc],&#xA;    effectsBuilder: (index, scrollRatio, child) =&amp;gt;&#xA;       Transform.translate(&#xA;            offset: Offset(0, scrollRatio * 250) ,&#xA;            child: child&#xA;       ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can further refine visuals by specifying how many children to display before and after the selection, whether to loop the list, a default alignment, and how to depth sort children.&lt;/p&gt; &#xA;&lt;p&gt;Adjust interactions by changing the scroll direction, physics, &amp;amp; speed, enabling tap to select, or specifying handlers for when the selected item changes, or when it settles into position.&lt;/p&gt; &#xA;&lt;h2&gt;scrollRatio&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;scrollRatio&lt;/code&gt; value ranges from -1 to +1, where 0 is the settled position of the selected item.&lt;/p&gt; &#xA;&lt;p&gt;The following animation displays the &lt;code&gt;scrollRatio&lt;/code&gt; for each item as it scrolls. It also highlights the &#34;selected&#34; item (white background), and the &#34;settled&#34; item (thick outline).&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/gskinnerTeam/flutter_custom_carousel/raw/assets/readme_scrollratio.gif?raw=true&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;p&gt;Try watching a single item at a time to see how the ratio relates to selection, settling, and items entering / exiting the visible list. Note that the specific values are dependent on factors like &lt;code&gt;itemsBefore&lt;/code&gt; / &lt;code&gt;itemsAfter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ScrollControllers and ScrollPhysics&lt;/h2&gt; &#xA;&lt;p&gt;To facilitate item-oriented navigation and looping content CustomCarousel requires that you use &lt;code&gt;CustomCarouselScrollController&lt;/code&gt;. This controller also provides useful features such as &lt;code&gt;jumpToItem&lt;/code&gt;, &lt;code&gt;animateToItem&lt;/code&gt;, &lt;code&gt;nextItem&lt;/code&gt;, and &lt;code&gt;previousItem&lt;/code&gt;, as well as smart defaults for animation durations and curves.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, CustomCarousel defaults to &lt;code&gt;CustomCarouselScrollPhysics&lt;/code&gt;, which enables &#34;settling&#34; onto selected items (aka snapping). Adjust the behavior of the physics by setting the &lt;code&gt;sticky&lt;/code&gt; and &lt;code&gt;stiffness&lt;/code&gt; properties. You can use other scroll physics (such as &lt;code&gt;BouncingScrollPhysics&lt;/code&gt;) if you don&#39;t want this functionality.&lt;/p&gt; &#xA;&lt;h1&gt;Using with Flutter Animate&lt;/h1&gt; &#xA;&lt;p&gt;You can also use &lt;a href=&#34;https://pub.dev/packages/flutter_animate&#34;&gt;Flutter Animate&lt;/a&gt; to define the &lt;code&gt;effectsBuilder&lt;/code&gt;, leveraging it&#39;s broad collection of effects, such as fading, moving, blurs, shadows, shimmers, color effects, 2.5d flips, and more.&lt;/p&gt; &#xA;&lt;p&gt;For example, the simple vertical scroller from above would look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// very basic example that scrolls children vertically from -250px to +250px&#xA;CustomCarousel(&#xA;    children: [card1, card2, etc],&#xA;    effectsBuilder: CustomCarousel.effectsBuilderFromAnimate(&#xA;        effects: EffectList().moveY(begin: -250, end: 250),&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A number of the included examples demonstrate this approach in more depth. See the docs for &lt;code&gt;CustomCarousel.effectsBuilderFromAnimate()&lt;/code&gt; for more info.&lt;/p&gt; &#xA;&lt;h1&gt;API reference&lt;/h1&gt; &#xA;&lt;p&gt;For full documentation, see the &lt;a href=&#34;https://pub.dev/documentation/flutter_custom_carousel/latest/&#34;&gt;API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Grab it from &lt;a href=&#34;https://pub.dev/packages/flutter_custom_carousel/install&#34;&gt;pub.dev&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GeekyAnts/flick-video-player</title>
    <updated>2024-04-21T03:11:55Z</updated>
    <id>tag:github.com,2024-04-21:/GeekyAnts/flick-video-player</id>
    <link href="https://github.com/GeekyAnts/flick-video-player" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flick Video Player&lt;/h1&gt; &#xA;&lt;p&gt;Flick Video Player is a video player for flutter. The &lt;a href=&#34;https://pub.dev/packages/video_player&#34;&gt;video_player&lt;/a&gt; plugin gives low level access for the video playback. Flick Player wraps &lt;code&gt;video_player&lt;/code&gt; under the hood and provides base architecture for developers to create their own set of UI and functionalities.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Double tap to seek video.&lt;/li&gt; &#xA; &lt;li&gt;On video tap play/pause, mute/unmute, or perform any action on video.&lt;/li&gt; &#xA; &lt;li&gt;Auto hide controls.&lt;/li&gt; &#xA; &lt;li&gt;Custom animations.&lt;/li&gt; &#xA; &lt;li&gt;Custom controls for normal and fullscreen.&lt;/li&gt; &#xA; &lt;li&gt;Auto-play list of videos.&lt;/li&gt; &#xA; &lt;li&gt;Change playback speed.&lt;/li&gt; &#xA; &lt;li&gt;Keyboard shortcuts for web.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Demo Mobile&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/default_player.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/animation_player.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/feed_player.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Default player &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/default_player.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/default_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Animation player &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/animation_player.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/animation_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Feed player &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/feed_player.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/feed_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/custom_orientation.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/landscape_player.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/rohitprajapatii/assets/raw/main/short_video_player.gif&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Orientation player &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/custom_orientation.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/custom_orientation_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Landscape player &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/landscape_player.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/landscape_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Short Video player &lt;br&gt;&lt;a href=&#34;https://github.com/rohitprajapatii/assets/raw/main/short_video_player.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/short_video_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Demo Web&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/web_player.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Web player &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player-demo-videos/raw/master/demo/web_player.mp4?raw=true&#34;&gt;Video&lt;/a&gt; &lt;br&gt;&lt;a href=&#34;https://github.com/GeekyAnts/flick-video-player/tree/master/example/lib/web_video_player&#34;&gt;Code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Please run the app in the example/ folder to start playing!&lt;/p&gt; &#xA;&lt;p&gt;Refer to this &lt;a href=&#34;https://geekyants.com/blog/creating-a-customisable-video-player-in-flutter-283&#34;&gt;article&lt;/a&gt; to understand how things are working under the hood.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add the following dependencies in your pubspec.yaml file of your flutter project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    flick_video_player: &amp;lt;latest_version&amp;gt;&#xA;    video_player: &amp;lt;latest_version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to use&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;FlickManager&lt;/code&gt; and pass the manager to &lt;code&gt;FlickVideoPlayer&lt;/code&gt;, make sure to dispose &lt;code&gt;FlickManager&lt;/code&gt; after use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flick_video_player/flick_video_player.dart&#39;;&#xA;import &#39;package:video_player/video_player.dart&#39;;&#xA;&#xA;class SamplePlayer extends StatefulWidget {&#xA;  SamplePlayer({Key key}) : super(key: key);&#xA;&#xA;  @override&#xA;  _SamplePlayerState createState() =&amp;gt; _SamplePlayerState();&#xA;}&#xA;&#xA;class _SamplePlayerState extends State&amp;lt;SamplePlayer&amp;gt; {&#xA;  late FlickManager flickManager;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    flickManager = FlickManager(&#xA;      videoPlayerController:&#xA;          VideoPlayerController.networkUrl(Uri.parse(&#34;url&#34;),&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    flickManager.dispose();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Container(&#xA;      child: FlickVideoPlayer(&#xA;        flickManager: flickManager&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Public Classes Summary&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Class&lt;/th&gt; &#xA;   &lt;th&gt;Summary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickVideoPlayer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main entry point, takes a &lt;code&gt;FlickManager&lt;/code&gt; and a widget &lt;code&gt;flickVideoWithControls&lt;/code&gt; as one of the arguments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickManager&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Manages all the video related operations with the help of different managers. &lt;br&gt;&lt;code&gt;FlickVideoManager&lt;/code&gt; is responsible to maintain life-cycle of a video, change a video and listen to state changes on the video. &lt;br&gt;&lt;code&gt;FlickControlManager&lt;/code&gt; is responsible to perform action on the video such as play, mute, seek, toggle full-screen etc. &lt;br&gt;&lt;code&gt;FlickDisplayManager&lt;/code&gt; is responsible to show/hide controls when player state changes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickVideoWithControls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A helper widget to render &lt;code&gt;video_player&lt;/code&gt; using &lt;code&gt;FlickNativeVideoPlayer&lt;/code&gt; and Custom player controls. To create video player with custom controls you have to use this widget and pass this to &lt;code&gt;FlickVideoPlayer&lt;/code&gt; in the argument &lt;code&gt;flickVideoWithControls&lt;/code&gt;. &lt;code&gt;closedCaptionTextStyle&lt;/code&gt; argument added to style video subtitles.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickPlayToggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A UI helper widget to create play/pause/replay button for the video player. You can either pass your custom play, pause and replay widgets or change settings for the default icons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickSoundToggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A UI helper widget to create mute/unmute button for the video player. You can either pass your custom mute and unmute widgets or change settings for the default icons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickFullscreenToggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A UI helper widget to create fullscreen/fullscreen_exit button for the video player. You can either pass your custom fullscreen and fullscreen_exit widgets or change settings for the default icons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickVideoProgressBar&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A UI helper widget to create progress bar for your video player. It takes &lt;code&gt;FlickProgressBarSettings&lt;/code&gt; as one of the arguments so that user can create a custom progress bar. This is highly customizable, user can almost change all the properties of the progress bar like &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;handleRadius&lt;/code&gt;, provide custom &lt;code&gt;Color&lt;/code&gt; or custom &lt;code&gt;Paint&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickTotalDuration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A text UI helper widget to show total duration of the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickCurrentPosition&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A text UI helper widget to show current position of the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickLeftDuration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A text UI helper widget to show left duration of the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickSetPlayBack&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A text UI helper widget to change the playback speed of the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickVideoBuffer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A UI helper widget to show &lt;code&gt;CircularProgressIndicator&lt;/code&gt; or your custom widget when the video is buffering.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickAutoPlayCircularProgress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A UI helper widget to show circular progress bar with timer to switch to the next video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickSeekVideoAction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Action helper to seek video forward/backward by custom &lt;code&gt;Duration&lt;/code&gt; on double tap of screen. Takes &lt;code&gt;child&lt;/code&gt; as one of the arguments to nest other actions or widgets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickShowControlsAction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Action helper to toggle between show/hide of controls on tap of the screen. Takes &lt;code&gt;child&lt;/code&gt; as one of the arguments to nest other actions or widgets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickTogglePlayAction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An action helper to toggle between play/pause on tap of the screen. Takes &lt;code&gt;child&lt;/code&gt; as one of the arguments to nest other actions or widgets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickToggleSoundAction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An action helper to toggle between mute/unmute on tap of the screen. Takes &lt;code&gt;child&lt;/code&gt; as one of the arguments to nest other actions or widgets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FlickSubtitleToggle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An action helper to toggle between display subtitle/no-subtitle on tap of the screen. Takes &lt;code&gt;child&lt;/code&gt; as one of the arguments to nest other actions or widgets.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To play a list of videos you have to create your custom &lt;code&gt;DataManager&lt;/code&gt;, You can find some of the implementations in /example folder.&lt;/p&gt; &#xA;&lt;p&gt;UI Helper and Action helpers are widgets which interacts with &lt;code&gt;FlickDisplayManager&lt;/code&gt;, &lt;code&gt;FlickControlManager&lt;/code&gt; and &lt;code&gt;FlickVideoManager&lt;/code&gt; you can easily create your custom widgets/actions, &lt;a href=&#34;https://pub.dev/packages/provider&#34;&gt;Provider&lt;/a&gt; package is used for state management.&lt;/p&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;p&gt;Guideline for web: As we are using &lt;code&gt;video_player_web&lt;/code&gt; under-hood please follow &lt;a href=&#34;https://pub.dev/packages/video_player_web&#34;&gt;video_player_web&lt;/a&gt; doc before you start.&lt;/p&gt; &#xA;&lt;h4&gt;Default shortcuts&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;f&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle full-screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle mute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ArrowRight&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek forward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ArrowLeft&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek backward&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;(Space character)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle play&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ArrowUp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increase volume&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ArrowDown&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrease volume&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can pass &lt;code&gt;webKeyDownHandler&lt;/code&gt; argument to &lt;code&gt;FlickVideoPlayer&lt;/code&gt; and manage the keyboard shortcuts yourself.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; shortcut to exit from full-screen is in development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Origin of third party content&lt;/h3&gt; &#xA;&lt;p&gt;Videos&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;9th May &amp;amp; Fireworks - &lt;a href=&#34;https://mazwai.com/video/9th-May-&amp;amp;amp;-Fireworks/455089&#34;&gt;https://mazwai.com/video/9th-May-&amp;amp;amp;-Fireworks/455089&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Iceland | Land of Fire and Ice - &lt;a href=&#34;https://mazwai.com/video/iceland-%7C-land-of-fire-and-ice/455108&#34;&gt;https://mazwai.com/video/iceland-%7C-land-of-fire-and-ice/455108&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rio from Above - &lt;a href=&#34;https://mazwai.com/video/rio-from-above/455099&#34;&gt;https://mazwai.com/video/rio-from-above/455099&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Valley - &lt;a href=&#34;https://mazwai.com/video/the-valley/455101&#34;&gt;https://mazwai.com/video/the-valley/455101&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pictures&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Woman on rock - Photo by &lt;a href=&#34;https://www.pexels.com/@enginakyurt?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Engin Akyurt&lt;/a&gt; from &lt;a href=&#34;https://www.pexels.com/photo/woman-on-rock-formation-holding-a-flag-1493210/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Pexels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Person waiting - Photo by &lt;a href=&#34;https://www.pexels.com/@cardellimedia?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Leo Cardelli&lt;/a&gt; from &lt;a href=&#34;https://www.pexels.com/photo/photography-of-person-walking-on-road-1236701/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Pexels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scenic view of mountain - Photo by &lt;a href=&#34;https://www.pexels.com/@jrapprich?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Johannes Rapprich&lt;/a&gt; from &lt;a href=&#34;https://www.pexels.com/photo/scenic-view-of-mountain-during-daytime-1482927/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Pexels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Black and white silhouette - Photo by &lt;a href=&#34;https://www.pexels.com/@pedro?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Athenafrom&lt;/a&gt; &lt;a href=&#34;https://www.pexels.com/photo/black-and-white-silhouette-of-christ-the-redeemer-1804177/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels&#34;&gt;Pexels&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>