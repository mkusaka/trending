<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-21T01:33:44Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PalisadoesFoundation/talawa</title>
    <updated>2023-02-21T01:33:44Z</updated>
    <id>tag:github.com,2023-02-21:/PalisadoesFoundation/talawa</id>
    <link href="https://github.com/PalisadoesFoundation/talawa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community Organization Management Software. Click on the link below to see our documentation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Talawa&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/thepalisadoes-dyb6419/shared_invite/zt-1py4w5v1s-MgayaMqlfnvxWiHpWb2sFg&#34;&gt;ðŸ’¬ Join the community on Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PalisadoesFoundation/talawa/develop/assets/images/talawa-logo-lite-200x200.png&#34; alt=&#34;N|Solid&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.palisadoes.org/&#34;&gt;&lt;img src=&#34;https://travis-ci.org/PalisadoesFoundation/talawa.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/PalisadoesFoundation/talawa.svg?style=social&amp;amp;label=Star&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/PalisadoesFoundation/talawa.svg?style=social&amp;amp;label=Fork&amp;amp;maxAge=2592000&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/PalisadoesFoundation/talawa&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/PalisadoesFoundation/talawa/branch/develop/graph/badge.svg?token=3PJXIKRS1S&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Talawa is a modular open source project to manage group activities of both non-profit organizations and businesses.&lt;/p&gt; &#xA;&lt;p&gt;Core features include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Membership management&lt;/li&gt; &#xA; &lt;li&gt;Groups management&lt;/li&gt; &#xA; &lt;li&gt;Event registrations&lt;/li&gt; &#xA; &lt;li&gt;Recurring meetings&lt;/li&gt; &#xA; &lt;li&gt;Facilities registrations&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;talawa&lt;/code&gt; is based on the original &lt;code&gt;quito&lt;/code&gt; code created by the &lt;a href=&#34;http://www.palisadoes.org&#34;&gt;Palisadoes Foundation&lt;/a&gt; as part of its annual Calico Challenge program. Calico provides paid summer internships for Jamaican university students to work on selected open source projects. They are mentored by software professionals and receive stipends based on the completion of predefined milestones. Calico was started in 2015. Visit &lt;a href=&#34;http://www.palisadoes.org/&#34;&gt;The Palisadoes Foundation&#39;s website&lt;/a&gt; for more details on its origin and activities.&lt;/p&gt; &#xA;&lt;h1&gt;Talawa Components&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;talawa&lt;/code&gt; has these major software components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;talawa&lt;/strong&gt;: &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa&#34;&gt;A mobile application with social media features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;talawa-api&lt;/strong&gt;: &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa-api&#34;&gt;An API providing access to user data and features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;talawa-admin&lt;/strong&gt;: &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa-admin&#34;&gt;A web based administrative portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;talawa-docs&lt;/strong&gt;: &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa-docs&#34;&gt;The online documentation website&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Get familiar with &lt;code&gt;talawa&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read our &lt;a href=&#34;https://raw.githubusercontent.com/PalisadoesFoundation/talawa/develop/INSTALLATION.md&#34;&gt;Talawa Mobile App installation guide&lt;/a&gt; to get setup quickly.&lt;/li&gt; &#xA; &lt;li&gt;The complete talawa documentation set can be found &lt;a href=&#34;https://docs.talawa.io&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Want to contribute? Look at &lt;a href=&#34;https://raw.githubusercontent.com/PalisadoesFoundation/talawa/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to get started.&lt;/li&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://github.com/PalisadoesFoundation/talawa&#34;&gt;Talawa GitHub&lt;/a&gt; to see the code.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>WalletConnect/WalletConnectFlutterV2</title>
    <updated>2023-02-21T01:33:44Z</updated>
    <id>tag:github.com,2023-02-21:/WalletConnect/WalletConnectFlutterV2</id>
    <link href="https://github.com/WalletConnect/WalletConnectFlutterV2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WalletConnect v2 client made in Dart for Flutter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;WalletConnect Dart v2 library for Flutter, heavily inspired by the WalletConnect V2 Javascript Monorepo.&lt;/p&gt; &#xA;&lt;p&gt;Original work for this library is attributed to &lt;a href=&#34;https://eucalyptuslabs.com/&#34;&gt;Eucalyptus Labs&lt;/a&gt; and Sterling Long for &lt;a href=&#34;https://koalawallet.io/&#34;&gt;Koala Wallet&lt;/a&gt;, a wallet built for the Kadena blockchain.&lt;/p&gt; &#xA;&lt;h1&gt;To Use&lt;/h1&gt; &#xA;&lt;h2&gt;Pair, Approve, and Sign/Auth&lt;/h2&gt; &#xA;&lt;h3&gt;dApp Flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// To create both an Auth and Sign API, you can use the Web3App&#xA;// If you just need one of the other, replace Web3App with SignClient or AuthClient&#xA;// SignClient wcClient = await SignClient.createInstance(&#xA;// AuthClient wcClient = await AuthClient.createInstance(&#xA;Web3App wcClient = await Web3App.createInstance(&#xA;  core: Core(&#xA;    relayUrl: &#39;wss://relay.walletconnect.com&#39;, // The relay websocket URL&#xA;    projectId: &#39;123&#39;,&#xA;  ),&#xA;  metadata: PairingMetadata(&#xA;    name: &#39;dApp (Requester)&#39;,&#xA;    description: &#39;A dapp that can request that transactions be signed&#39;,&#xA;    url: &#39;https://walletconnect.com&#39;,&#xA;    icons: [&#39;https://avatars.githubusercontent.com/u/37784886&#39;],&#xA;  ),&#xA;);&#xA;&#xA;// For a dApp, you would connect with specific parameters, then display&#xA;// the returned URI.&#xA;ConnectResponse resp = await wcClient.connect(&#xA;  requiredNamespaces: {&#xA;    &#39;eip155&#39;: RequiredNamespace(&#xA;      chains: [&#39;eip155:1&#39;], // Ethereum chain&#xA;      methods: [&#39;eth_signTransaction&#39;], // Requestable Methods&#xA;    ),&#xA;    &#39;kadena&#39;: RequiredNamespace(&#xA;      chains: [&#39;kadena:mainnet01&#39;], // Kadena chain&#xA;      methods: [&#39;kadena_quicksign_v1&#39;], // Requestable Methods&#xA;    ),&#xA;  }&#xA;)&#xA;Uri? uri = resp.uri;&#xA;&#xA;// Once you&#39;ve display the URI, you can wait for the future, and hide the QR code once you&#39;ve received session data&#xA;final SessionData session = await resp.session.future;&#xA;&#xA;// Now that you have a session, you can request signatures&#xA;final dynamic signResponse = await wcClient.request(&#xA;  topic: session.topic,&#xA;  chainId: &#39;eip155:1&#39;,&#xA;  request: SessionRequestParams(&#xA;    method: &#39;eth_signTransaction&#39;,&#xA;    params: &#39;json serializable parameters&#39;,&#xA;  ),&#xA;);&#xA;// Unpack, or use the signResponse.&#xA;// Structure is dependant upon the JSON RPC call you made.&#xA;&#xA;&#xA;// You can also request authentication&#xA;final AuthRequestResponse authReq = await wcClient.requestAuth(&#xA;  params: AuthRequestParams(&#xA;    aud: &#39;http://localhost:3000/login&#39;,&#xA;    domain: &#39;localhost:3000&#39;,&#xA;    chainId: &#39;eip155:1&#39;,&#xA;    nonce: AuthUtils.generateNonce(),&#xA;    statement: &#39;Sign in with your wallet!&#39;,&#xA;  ),&#xA;  pairingTopic: resp.pairingTopic,&#xA;);&#xA;&#xA;// Await the auth response using the provided completer&#xA;final AuthResponse authResponse = await authResponse.completer.future;&#xA;if (authResponse.result != null) {&#xA;  // Having a result means you have the signature and it is verified.&#xA;}&#xA;else {&#xA;  // Otherwise, you might have gotten a WalletConnectError if there was un issue verifying the signature.&#xA;  final WalletConnectError? error = authResponse.error;&#xA;  // Of a JsonRpcError if something went wrong when signing with the wallet.&#xA;  final JsonRpcError? error = authResponse.jsonRpcError;&#xA;}&#xA;&#xA;&#xA;// You can also respond to events from the wallet, like session events&#xA;wcClient.onSessionEvent.subscribe((SessionEvent? session) {&#xA;  // Do something with the event&#xA;});&#xA;wcClient.registerEventHandler(&#xA;  namespace: &#39;kadena&#39;,&#xA;  method: &#39;kadena_transaction_updated&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wallet Flow&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Web3Wallet wcClient = await Web3Wallet.createInstance(&#xA;  core: Core(&#xA;    relayUrl: &#39;wss://relay.walletconnect.com&#39;, // The relay websocket URL&#xA;    projectId: &#39;123&#39;,&#xA;  ),&#xA;  metadata: PairingMetadata(&#xA;    name: &#39;Wallet (Responder)&#39;,&#xA;    description: &#39;A wallet that can be requested to sign transactions&#39;,&#xA;    url: &#39;https://walletconnect.com&#39;,&#xA;    icons: [&#39;https://avatars.githubusercontent.com/u/37784886&#39;],&#xA;  ),&#xA;);&#xA;&#xA;// For a wallet, setup the proposal handler that will display the proposal to the user after the URI has been scanned.&#xA;late int id;&#xA;wcClient.onSessionProposal.subscribe((SessionProposal? args) async {&#xA;  // Handle UI updates using the args.params&#xA;  // Keep track of the args.id for the approval response&#xA;  id = args!.id;&#xA;})&#xA;&#xA;// Also setup the methods and chains that your wallet supports&#xA;wcClient.onSessionRequest.subscribe((SessionRequestEvent? request) async {&#xA;  // You can respond to requests in this manner&#xA;  await clientB.respondSessionRequest(&#xA;    topic: request.topic,&#xA;    response: JsonRpcResponse&amp;lt;String&amp;gt;(&#xA;      id: request.id,&#xA;      result: &#39;Signed!&#39;,&#xA;    ),&#xA;  );&#xA;});&#xA;wcClient.registerRequestHandler(&#xA;  namespace: &#39;kadena&#39;,&#xA;  method: &#39;kadena_sign&#39;,&#xA;);&#xA;&#xA;// Setup the auth handling&#xA;clientB.onAuthRequest.subscribe((AuthRequest? args) async {&#xA;&#xA;  // This is where you would &#xA;  // 1. Store the information to be signed&#xA;  // 2. Display to the user that an auth request has been received&#xA;&#xA;  // You can create the message to be signed in this manner&#xA;  String message = clientB.formatAuthMessage(&#xA;    iss: TEST_ISSUER_EIP191,&#xA;    cacaoPayload: CacaoRequestPayload.fromPayloadParams(&#xA;      args!.payloadParams,&#xA;    ),&#xA;  );&#xA;});&#xA;&#xA;// Then, scan the QR code and parse the URI, and pair with the dApp&#xA;// On the first pairing, you will immediately receive onSessionProposal and onAuthRequest events.&#xA;Uri uri = Uri.parse(scannedUriString);&#xA;final PairingInfo pairing = await wcClient.pair(uri: uri);&#xA;&#xA;// Present the UI to the user, and allow them to reject or approve the proposal&#xA;final walletNamespaces = {&#xA;  &#39;eip155&#39;: Namespace(&#xA;    accounts: [&#39;eip155:1:abc&#39;],&#xA;    methods: [&#39;eth_signTransaction&#39;],&#xA;  ),&#xA;  &#39;kadena&#39;: Namespace(&#xA;    accounts: [&#39;kadena:mainnet01:abc&#39;],&#xA;    methods: [&#39;kadena_sign_v1&#39;, &#39;kadena_quicksign_v1&#39;],&#xA;    events: [&#39;kadena_transaction_updated&#39;],&#xA;  ),&#xA;}&#xA;await wcClient.approveSession(&#xA;  id: id,&#xA;  namespaces: walletNamespaces // This will have the accounts requested in params&#xA;);&#xA;// Or to reject...&#xA;// Error codes and reasons can be found here: https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes&#xA;await wcClient.rejectSession(&#xA;  id: id,&#xA;  reason: Errors.getSdkError(Errors.USER_REJECTED_SIGN),&#xA;);&#xA;&#xA;// For auth, you can do the same thing: Present the UI to them, and have them approve the signature.&#xA;// Then respond with that signature&#xA;String sig = &#39;your sig here&#39;;&#xA;await wcClient.respondAuthRequest(&#xA;  id: args.id,&#xA;  iss: &#39;did:pkh:eip155:1:0x06C6A22feB5f8CcEDA0db0D593e6F26A3611d5fa&#39;,&#xA;  signature: CacaoSignature(t: CacaoSignature.EIP191, s: sig),&#xA;);&#xA;// Or rejected&#xA;// Error codes and reasons can be found here: https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes&#xA;await wcClient.respondAuthRequest(&#xA;  id: args.id,&#xA;  error: Errors.getSdkError(Errors.USER_REJECTED_AUTH),&#xA;);&#xA;&#xA;// You can also emit events for the dApp&#xA;await wcClient.emitSessionEvent(&#xA;  topic: sessionTopic,&#xA;  chainId: &#39;eip155:1&#39;,&#xA;  event: SessionEventParams(&#xA;    name: &#39;chainChanged&#39;,&#xA;    data: &#39;a message!&#39;,&#xA;  ),&#xA;);&#xA;&#xA;// Finally, you can disconnect&#xA;await wcClient.disconnectSession(&#xA;  topic: pairing.topic,&#xA;  reason: Errors.getSdkError(Errors.USER_DISCONNECTED),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;To Build&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example project and dapp&lt;/li&gt; &#xA; &lt;li&gt;Reduce number of crypto libraries used for encryption, shared key, etc.&lt;/li&gt; &#xA; &lt;li&gt;Additional APIs defined by WalletConnect&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;To Test&lt;/h1&gt; &#xA;&lt;p&gt;Run tests using &lt;code&gt;flutter test&lt;/code&gt;. Expected flutter version is: &amp;gt;&lt;code&gt;3.3.10&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Commands Run in CI&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter analyze&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dart format --output=none --set-exit-if-changed .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Useful Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&lt;/code&gt; - Regenerates JSON Generators&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter doctor -v&lt;/code&gt; - get paths of everything installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter pub get&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter upgrade&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter clean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter pub cache clean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter pub deps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter pub run dependency_validator&lt;/code&gt; - show unused dependencies and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dart format lib/* -l 120&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter analyze&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>williambarreiro/clean-code-dart-en</title>
    <updated>2023-02-21T01:33:44Z</updated>
    <id>tag:github.com,2023-02-21:/williambarreiro/clean-code-dart-en</id>
    <link href="https://github.com/williambarreiro/clean-code-dart-en" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“– Clean Code concepts adapted for Dart&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Code in Dart&lt;/h1&gt; &#xA;&lt;p&gt;This repository is an adaptation of &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;ryanmcdermott/clean-code-javascript&lt;/a&gt; for Dart language.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#solid&#34;&gt;SOLID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.osnews.com/images/comics/wtfm.jpg&#34; alt=&#34;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for Dart. This is not a style guide. It&#39;s a guide to producing readable, reusable, and refactorable software in Dart.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the Dart code that you and your team produce.&lt;/p&gt; &#xA;&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final yyyymmdstr = DateFormat(&#39;yyyy/MM/dd&#39;).format(DateTime.now());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final currentDate = DateFormat(&#39;yyyy/MM/dd&#39;).format(DateTime.now());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;getUserInfo();&#xA;getClientData();&#xA;getCustomerRecord();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// What the heck is 32 for?&#xA;Future.delayed(Duration(minutes: 32), launch);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Declare them as const if the value is known at compile time;&#xA;// Declare as final if the variable is assigned just once;&#xA;// Use lowerCamelCase;&#xA;// setupTimeInMinutes is int, because the type is inferred.&#xA;const setupTimeInMinutes = 32;&#xA;&#xA;Future.delayed(Duration(minutes: setupTimeInMinutes), launch);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;const address = &amp;lt;String&amp;gt;[&#39;One Infinite Loop&#39;, &#39;Cupertino&#39;, &#39;95014&#39;];&#xA;saveCityZipCode(address[1], address[2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;const address = &amp;lt;String&amp;gt;[&#39;One Infinite Loop&#39;, &#39;Cupertino&#39;, &#39;95014&#39;];&#xA;final city = address[1];&#xA;final zipCode = address[2];&#xA;saveCityZipCode(city, zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;const locations = &amp;lt;String&amp;gt;[&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;locations.forEach((l) {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  // Wait, what is `l` for again?&#xA;  dispatch(l);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;const locations = &amp;lt;String&amp;gt;[&#39;Austin&#39;, &#39;New York&#39;, &#39;San Francisco&#39;];&#xA;locations.forEach((location) {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  dispatch(location);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final car = Car(&#xA;  carMake: &#39;Honda&#39;,&#xA;  carModel: &#39;Accord&#39;,&#xA;  carColor: &#39;Blue&#39;,&#xA;);&#xA;&#xA;void paintCar(Car car, String color) {&#xA;  car.carColor = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final car = Car(&#xA;  make: &#39;Honda&#39;,&#xA;  model: &#39;Accord&#39;,&#xA;  color: &#39;Blue&#39;,&#xA;);&#xA;&#xA;void paintCar(Car car, String color) {&#xA;  car.color = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;When possible, use default parameters instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;Default parameters are often cleaner than short circuiting, however they must be const, so you cannot use them on every case.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void createMicrobrewery({String? name}) {&#xA;  final breweryName = name ?? &#39;Hipster Brew Co.&#39;;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void createMicrobrewery({String breweryName = &#39;Hipster Brew Co.&#39;}) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;To make it obvious what properties the function expects, you can use named parameters. They have a few advantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/li&gt; &#xA; &lt;li&gt;Linters can warn you about unused properties, if they are &lt;code&gt;required&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Menu getMenu(String title, String body, String buttonText, bool cancellable) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Menu getMenu({&#xA;  required String title,&#xA;  required String body,&#xA;  required String buttonText,&#xA;  required bool cancellable,&#xA;}) {&#xA;  // ...&#xA;}&#xA;&#xA;final menu = getMenu(&#xA;  title: &#39;Foo&#39;,&#xA;  body: &#39;Bar&#39;,&#xA;  buttonText: &#39;Baz&#39;,&#xA;  cancellable: true,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should do one thing&lt;/h3&gt; &#xA;&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void emailClients(List&amp;lt;Client&amp;gt; clients) {&#xA;  for(final client in clients) {&#xA;    final clientRecord = database.lookup(client);&#xA;    if (clientRecord.isActive()) {&#xA;      email(client);&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void emailActiveClients(List&amp;lt;Client&amp;gt; clients) {&#xA;  clients&#xA;    .where(isActiveClient)&#xA;    .forEach(email);&#xA;}&#xA;&#xA;bool isActiveClient(Client client) {&#xA;  final clientRecord = database.lookup(client);&#xA;  return clientRecord.isActive();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void addToDate(DateTime date, int months) {&#xA;  // ...&#xA;}&#xA;&#xA;final currentDate = DateTime.now();&#xA;&#xA;// It&#39;s hard to tell from the function name what is added&#xA;addToDate(currentDate, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void addMonthsToDate(int months, DateTime date) {&#xA;  // ...&#xA;}&#xA;&#xA;final currentDate = DateTime.now();&#xA;addMonthsToDate(1, currentDate);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void parseBetterAlternative(String code) {&#xA;  const regexes = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  final statements = code.split(&#39; &#39;);&#xA;  final tokens = [];&#xA;  for (final regex in regexes) {&#xA;    for (final statement in statements) {&#xA;      tokens.add( /* ... */ );&#xA;    }&#xA;  }&#xA;&#xA;  final ast = &amp;lt;Node&amp;gt;[];&#xA;  for (final token in tokens) {&#xA;    ast.add( /* ... */ );&#xA;  }&#xA;&#xA;  for (final node in ast) {&#xA;    // parse...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;String&amp;gt; tokenize(String code) {&#xA;  const regexes = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  final statements = code.split(&#39; &#39;);&#xA;  final tokens = &amp;lt;String&amp;gt;[];&#xA;  for (final regex in regexes) {&#xA;    for (final statement in statements) {&#xA;      tokens.add( /* ... */ );&#xA;    }&#xA;  }&#xA;&#xA;  return tokens;&#xA;}&#xA;&#xA;List&amp;lt;Node&amp;gt; lexer(List&amp;lt;String&amp;gt; tokens) {&#xA;  final ast = &amp;lt;Node&amp;gt;[];&#xA;  for (final token in tokens) {&#xA;    ast.add( /* ... */ );&#xA;  }&#xA;  &#xA;  return ast;&#xA;}&#xA;&#xA;void parseBetterAlternative(String code) {&#xA;  final tokens = tokenize(code);&#xA;  final ast = lexer(tokens);&#xA;  for (final node in ast) {&#xA;    // parse...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove duplicate code&lt;/h3&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget buildDeveloperCard(Developer developer) {&#xA;  return CustomCard(&#xA;    expectedSalary: developer.calculateExpectedSalary(),&#xA;    experience: developer.getExperience(),&#xA;    projectsLink: developer.getGithubLink(),&#xA;  );&#xA;}&#xA;&#xA;Widget buildManagerCard(Manager manager) {&#xA;  return CustomCard(&#xA;    expectedSalary: manager.calculateExpectedSalary(),&#xA;    experience: manager.getExperience(),&#xA;    projectsLink: manager.getMBAProjects(),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget buildEmployeeCard(Employee employee) {&#xA;  String projectsLink;&#xA;&#xA;  if (employee is Manager) {&#xA;    projectsLink = manager.getMBAProjects();&#xA;  } else if (employee is Developer) {&#xA;    projectsLink = developer.getGithubLink();&#xA;  }&#xA;&#xA;  return CustomCard(&#xA;    expectedSalary: employee.calculateExpectedSalary(),&#xA;    experience: employee.getExperience(),&#xA;    projectsLink: projectsLink,&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void createFile(String name, bool temp) {&#xA;  if (temp) {&#xA;    File(&#39;./temp/${name}&#39;).create();&#xA;  } else {&#xA;    File(name).create();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void createFile(String name) {&#xA;  File(name).create();&#xA;}&#xA;&#xA;void createTempFile(String name) {&#xA;  File(&#39;./temp/${name}&#39;).create();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;dynamic name = &#39;Ryan McDermott&#39;;&#xA;&#xA;void splitIntoFirstAndLastName() {&#xA;  name = name.split(&#39; &#39;);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;print(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;String&amp;gt; splitIntoFirstAndLastName(name) {&#xA;  return name.split(&#39; &#39;);&#xA;}&#xA;&#xA;final name = &#39;Ryan McDermott&#39;;&#xA;final newName = splitIntoFirstAndLastName(name);&#xA;&#xA;print(name); // &#39;Ryan McDermott&#39;;&#xA;print(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;In Dart, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A Dart function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; &#xA;&lt;p&gt;The user clicks the &#34;Purchase&#34; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &#34;Add to Cart&#34; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; &#xA;&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; &#xA;&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&#34;https://facebook.github.io/immutable-js/&#34;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void addItemToCart(List&amp;lt;int&amp;gt; cart, int item) {&#xA;  cart.add(item);&#xA;} &#xA;&#xA;final cart = &amp;lt;int&amp;gt;[1, 2];&#xA;addItemToCart(cart, 3);&#xA;&#xA;print(cart); // [1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;int&amp;gt; addItemToCart(List&amp;lt;int&amp;gt; cart, int item) {&#xA;  return [...cart, item];&#xA;}&#xA;&#xA;final cart = &amp;lt;int&amp;gt;[1, 2];&#xA;final newCart = addItemToCart(cart, 3);&#xA;&#xA;print(cart); // [1, 2]&#xA;print(newCart); // [1, 2, 3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; &#xA;&lt;p&gt;Dart isn&#39;t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final programmerOutput = &amp;lt;Programmer&amp;gt;[&#xA;  Programmer(name: &#39;Uncle Bobby&#39;, linesOfCode: 500),&#xA;  Programmer(name: &#39;Suzie Q&#39;, linesOfCode: 1500),&#xA;  Programmer(name: &#39;Jimmy Gosling&#39;, linesOfCode: 150),&#xA;  Programmer(name: &#39;Gracie Hopper&#39;, linesOfCode: 1000),&#xA;];&#xA;&#xA;var totalOutput = 0;&#xA;&#xA;for (var i = 0; i &amp;lt; programmerOutput.length; i++) {&#xA;  totalOutput += programmerOutput[i].linesOfCode;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final programmerOutput = &amp;lt;Programmer&amp;gt;[&#xA;  Programmer(name: &#39;Uncle Bobby&#39;, linesOfCode: 500),&#xA;  Programmer(name: &#39;Suzie Q&#39;, linesOfCode: 1500),&#xA;  Programmer(name: &#39;Jimmy Gosling&#39;, linesOfCode: 150),&#xA;  Programmer(name: &#39;Gracie Hopper&#39;, linesOfCode: 1000),&#xA;];&#xA;&#xA;final totalOutput = programmerOutput.fold&amp;lt;int&amp;gt;(&#xA;    0, (previousValue, programmer) =&amp;gt; previousValue + programmer.linesOfCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;if (programmer.language == &#39;dart&#39; &amp;amp;&amp;amp; programmer.projectsList.isNotEmpty) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool isValidDartProgrammer(Programmer programmer) {&#xA;  return programmer.language == &#39;dart&#39; &amp;amp;&amp;amp; programmer.projectsList.isNotEmpty;&#xA;}&#xA;&#xA;if (isValidDartProgrammer(programmer)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool isFileNotValid(File file) {&#xA;  // ...&#xA;}&#xA;&#xA;if (!isFileNotValid(file)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool isFileValid(File file) {&#xA;  // ...&#xA;}&#xA;&#xA;if (isFileValid(file)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Airplane {&#xA;  // ...&#xA;  double getCruisingAltitude() {&#xA;    switch (type) {&#xA;      case &#39;777&#39;:&#xA;        return getMaxAltitude() - getPassengerCount();&#xA;      case &#39;Air Force One&#39;:&#xA;        return getMaxAltitude();&#xA;      case &#39;Cessna&#39;:&#xA;        return getMaxAltitude() - getFuelExpenditure();&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Airplane {&#xA;  // ...&#xA;}&#xA;&#xA;class Boeing777 extends Airplane {&#xA;  // ...&#xA;  double getCruisingAltitude() {&#xA;    return getMaxAltitude() - getPassengerCount();&#xA;  }&#xA;}&#xA;&#xA;class AirForceOne extends Airplane {&#xA;  // ...&#xA;  double getCruisingAltitude() {&#xA;    return getMaxAltitude();&#xA;  }&#xA;}&#xA;&#xA;class Cessna extends Airplane {&#xA;  // ...&#xA;  double getCruisingAltitude() {&#xA;    return getMaxAltitude() - getFuelExpenditure();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; oldRequest(url) {&#xA;  // ...&#xA;}&#xA;&#xA;Future&amp;lt;void&amp;gt; newRequest(url) {&#xA;  // ...&#xA;}&#xA;&#xA;await newRequest();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; newRequest(url) {&#xA;  // ...&#xA;}&#xA;&#xA;await newRequest();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use getters and setters only when necessary&lt;/h3&gt; &#xA;&lt;p&gt;Unlike other languages, in Dart it is recommended to use getters and setters only when there is some logic before using the attribute. If you just want to get or edit the attribute, don&#39;t use them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BankAccount {&#xA;  // &#34;_&#34; configure as private&#xA;  int _balance;&#xA;&#xA;  int get balance =&amp;gt; _balance;&#xA;&#xA;  set balance(int amount) =&amp;gt; _balance = amount;&#xA;&#xA;  BankAccount({&#xA;    int balance = 0,&#xA;  }) : _balance = balance;&#xA;}&#xA;&#xA;final account = BankAccount();&#xA;account.balance = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BankAccount {&#xA;  int balance;&#xA;  // ...&#xA;&#xA;  BankAccount({&#xA;    this.balance = 0,&#xA;    // ...&#xA;  });&#xA;}&#xA;&#xA;final account = BankAccount();&#xA;account.balance = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use private methods and attributes when necessary&lt;/h3&gt; &#xA;&lt;p&gt;If a method or attribute has to be accessed only within the class, it must be private.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Employee {&#xA;  String name;&#xA;&#xA;  Employee({required this.name});&#xA;}&#xA;&#xA;final employee = Employee(name: &#39;John Doe&#39;);&#xA;print(employee.name); // John Doe&#xA;employee.name = &#39;Uncle Bob&#39;;&#xA;print(employee.name); // Uncle Bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Employee {&#xA;  String _name;&#xA;&#xA;  Employee({required String name}) : _name = name;&#xA;}&#xA;&#xA;final employee = Employee(name: &#39;John Doe&#39;);&#xA;print(employee.name); // Can&#39;t access outside the class.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use method chaining (cascade notation)&lt;/h3&gt; &#xA;&lt;p&gt;It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Car {&#xA;  String make;&#xA;  String model;&#xA;  String color;&#xA;&#xA;  Car({&#xA;    required this.make,&#xA;    required this.model,&#xA;    required this.color,&#xA;  });&#xA;&#xA;  save() =&amp;gt; print(&#39;$make, $model, $color&#39;);&#xA;}&#xA;&#xA;final car = Car(make: &#39;Ford&#39;, model: &#39;F-150&#39;, color: &#39;red&#39;);&#xA;car.color = &#39;pink&#39;;&#xA;car.save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Car {&#xA;  String make;&#xA;  String model;&#xA;  String color;&#xA;&#xA;  Car({&#xA;    required this.make,&#xA;    required this.model,&#xA;    required this.color,&#xA;  });&#xA;&#xA;  save() =&amp;gt; print(&#39;$make, $model, $color&#39;);&#xA;}&#xA;&#xA;final car = Car(make: &#39;Ford&#39;, model: &#39;F-150&#39;, color: &#39;red&#39;)&#xA;  ..color = &#39;pink&#39;&#xA;  ..save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Employee {&#xA;  String name;&#xA;  String email;&#xA;&#xA;  Employee({&#xA;    required this.name,&#xA;    required this.email,&#xA;  });&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data. EmployeeTaxData is not a type of Employee&#xA;class EmployeeTaxData extends Employee {&#xA;  String ssn;&#xA;  double salary;&#xA;&#xA;  EmployeeTaxData({&#xA;    required this.ssn,&#xA;    required this.salary,&#xA;    required super.name,&#xA;    required super.email,&#xA;  });&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class EmployeeTaxData {&#xA;  String ssn;&#xA;  double salary;&#xA;&#xA;  EmployeeTaxData({&#xA;    required this.ssn,&#xA;    required this.salary,&#xA;  });&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class Employee {&#xA;  String name;&#xA;  String email;&#xA;  EmployeeTaxData? taxData;&#xA;&#xA;  Employee({&#xA;    required this.name,&#xA;    required this.email,&#xA;  });&#xA;&#xA;  void setTaxData(String ssn, double salary) {&#xA;    taxData = EmployeeTaxData(ssn: ssn, salary: salary);&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class UserSettings {&#xA;  String user;&#xA;  &#xA;  UserSettings({&#xA;    required this.user,&#xA;  });&#xA;&#xA;  void changeSettings(Settings settings) {&#xA;    if (verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  bool verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class UserAuth {&#xA;  String user;&#xA;&#xA;  UserAuth({&#xA;    required this.user,&#xA;  });&#xA;&#xA;  bool verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class UserSettings {&#xA;  String user;&#xA;  UserAuth auth;&#xA;&#xA;  UserSettings({&#xA;    required this.user,&#xA;  }) : auth = UserAuth(user: user);&#xA;&#xA;  void changeSettings(Settings settings) {&#xA;    if (auth.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;double getArea(Shape shape) {&#xA;  if (shape is Circle) {&#xA;    return getCircleArea(shape);&#xA;  } else if (shape is Square) {&#xA;    return getSquareArea(shape);&#xA;  }&#xA;}&#xA;&#xA;double getCircleArea(Shape shape) {&#xA;  // ...&#xA;}&#xA;&#xA;double getSquareArea(Shape shape) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class Shape {&#xA;  double getArea();&#xA;}&#xA;&#xA;class Circle extends Shape {&#xA;  @override&#xA;  double getArea() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class Square extends Shape {&#xA;  @override&#xA;  double getArea() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// ...&#xA;final area = shape.getArea();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Rectangle {&#xA;  double width;&#xA;  double height;&#xA;&#xA;  Rectangle({&#xA;    this.width = 0,&#xA;    this.height = 0,&#xA;  });&#xA;&#xA;  // setWidth e setHeight used just for example&#xA;  void setWidth(double value) =&amp;gt; width = value;&#xA;&#xA;  void setHeight(double value) =&amp;gt; height = value;&#xA;&#xA;  double getArea() {&#xA;    return width * height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Rectangle {&#xA;  Square({&#xA;    super.width = 0,&#xA;    super.height = 0,&#xA;  });&#xA;&#xA;  @override&#xA;  void setWidth(double value) {&#xA;    width = value;&#xA;    height = value;&#xA;  }&#xA;&#xA;  @override&#xA;  void setHeight(double value) {&#xA;    width = value;&#xA;    height = value;&#xA;  }&#xA;}&#xA;&#xA;final rectangles = [Rectangle(), Rectangle(), Square()];&#xA;&#xA;for (final rectangle in rectangles) {&#xA;  rectangle.setWidth(4);&#xA;  rectangle.setHeight(5);&#xA;&#xA;  final area = rectangle.getArea();&#xA;  print(area); // BAD: Returns 25 for Square. Should be 20.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class Shape {&#xA;  double getArea();&#xA;}&#xA;&#xA;class Rectangle extends Shape {&#xA;  double width;&#xA;  double height;&#xA;&#xA;  Rectangle({&#xA;    required this.width,&#xA;    required this.height,&#xA;  });&#xA;&#xA;  @override&#xA;  double getArea() {&#xA;    return width * height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Shape {&#xA;  double length;&#xA;&#xA;  Square({&#xA;    required this.length,&#xA;  });&#xA;&#xA;  @override&#xA;  double getArea() {&#xA;    return length * length;&#xA;  }&#xA;}&#xA;&#xA;final rectangles = [&#xA;  Rectangle(width: 4, height: 5),&#xA;  Rectangle(width: 4, height: 5),&#xA;  Square(length: 4),&#xA;];&#xA;&#xA;for (final rectangle in rectangles) {&#xA;  final area = rectangle.getArea();&#xA;  print(area); // Show the correct values: 20, 20, 16.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use&#34;. You should always create more specific interfaces instead of creating just a generic interface. In other words, if your class, that implements an interface, uses the famous &lt;code&gt;throw UnimplementedError()&lt;/code&gt;, it is probably not respecting the principle.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class Book {&#xA;  int getNumberOfPages();&#xA;  void download();&#xA;}&#xA;&#xA;class EBook implements Book {&#xA;  @override&#xA;  int getNumberOfPages() {&#xA;    // ...&#xA;  }&#xA;&#xA;  @override&#xA;  String download() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class PhysicalBook implements Book {&#xA;  @override&#xA;  int getNumberOfPages() {&#xA;    // ...&#xA;  }&#xA;&#xA;  @override&#xA;  void download() {&#xA;    throw UnimplementedError(); // Physical book doesn&#39;t download.&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class Book {&#xA;  int getNumberOfPages();&#xA;}&#xA;&#xA;abstract class DownloadableBook {&#xA;  void download();&#xA;}&#xA;&#xA;class EBook implements Book, DownloadableBook {&#xA;  @override&#xA;  int getNumberOfPages() {&#xA;    // ...&#xA;  }&#xA;&#xA;  @override&#xA;  void download() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class PhysicalBook implements Book {&#xA;  @override&#xA;  int getNumberOfPages() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You&#39;ve probably seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class InventoryRequester {&#xA;  void requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryTracker {&#xA;  final requester = InventoryRequester(); // InventoryTracker depends on low-level module.&#xA;  List&amp;lt;String&amp;gt; items;&#xA;&#xA;  InventoryTracker({&#xA;    required this.items,&#xA;  });&#xA;&#xA;  void requestItems() {&#xA;    for (var item in items) {&#xA;      requester.requestItem(item);&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;final inventoryTracker = InventoryTracker(items: [&#39;apples&#39;, &#39;bananas&#39;]);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class InventoryTracker {&#xA;  List&amp;lt;String&amp;gt; items;&#xA;  InventoryRequester requester;&#xA;&#xA;  InventoryTracker({&#xA;    required this.items,&#xA;    required this.requester,&#xA;  });&#xA;&#xA;  void requestItems() {&#xA;    for (var item in items) {&#xA;      requester.requestItem(item);&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;abstract class InventoryRequester {&#xA;  void requestItem(item);&#xA;}&#xA;&#xA;class InventoryRequesterV1 implements InventoryRequester {&#xA;  @override&#xA;  void requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV2 implements InventoryRequester {&#xA;  @override&#xA;  void requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// By constructing our dependencies externally and injecting them, we can easily&#xA;// substitute our request module for a fancy new one.&#xA;final inventoryTracker = InventoryTracker(&#xA;  items: [&#39;apples&#39;, &#39;bananas&#39;],&#xA;  requester: InventoryRequesterV2(),&#xA;);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind.&lt;/p&gt; &#xA;&lt;p&gt;Always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; &#xA;&lt;h3&gt;Single concept per test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:test/test.dart&#39;;&#xA;&#xA;test(&#39;String&#39;, () {&#xA;  var string = &#39;foo,bar,baz&#39;;&#xA;  expect(string.split(&#39;,&#39;), equals([&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]));&#xA;&#xA;  string = &#39;  foo &#39;;&#xA;  expect(string.trim(), equals(&#39;foo&#39;));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:test/test.dart&#39;;&#xA;&#xA;group(&#39;String&#39;, () {&#xA;  test(&#39;.split() splits the string on the delimiter&#39;, () {&#xA;    const string = &#39;foo,bar,baz&#39;;&#xA;    expect(string.split(&#39;,&#39;), equals([&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]));&#xA;  });&#xA;&#xA;  test(&#39;.trim() removes surrounding whitespace&#39;, () {&#xA;    const string = &#39;  foo &#39;;&#xA;    expect(string.trim(), equals(&#39;foo&#39;));&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use async/await instead of then&lt;/h3&gt; &#xA;&lt;p&gt;Using async/await makes your code simpler and easier to understand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final albumTitle = await client&#xA;    .get(Uri.parse(&#39;https://jsonplaceholder.typicode.com/albums/1&#39;))&#xA;    .then((response) {&#xA;  // ...&#xA;  return title;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;String&amp;gt; getAlbumTitle() async {&#xA;  final response = await client&#xA;      .get(Uri.parse(&#39;https://jsonplaceholder.typicode.com/albums/1&#39;));&#xA;&#xA;  // ...&#xA;&#xA;  return title;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process, and notifying you in the console with a stack trace.&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; &#xA;&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;log&lt;/code&gt;) isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  print(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} on Exception catch (e, s) {&#xA; &amp;nbsp;// Option 1:&#xA;  log(&#39;Error description...&#39;, error: e, stackTrace: s);&#xA; &amp;nbsp;// Option 2:&#xA;  notifyUserOfError(e, s);&#xA; &amp;nbsp;// Option 3:&#xA;  reportErrorToService(e, s);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t ignore Future errors&lt;/h3&gt; &#xA;&lt;p&gt;Using await within try/catch is way better than future/then. But, if you want to use future/then, remember to handle the errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;functionThatMightThrow().then((value) {&#xA;  // ...&#xA;}).onError((e, s) {&#xA;  print(e);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;functionThatMightThrow().then((value) {&#xA;  // ...&#xA;}).onError((e, s) {&#xA;  // Option 1:&#xA;  log(&#39;Error description...&#39;, error: e, stackTrace: s);&#xA; &amp;nbsp;// Option 2:&#xA;  notifyUserOfError(e, s);&#xA; &amp;nbsp;// Option 3:&#xA;  reportErrorToService(e, s);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. I recommend you to read &lt;a href=&#34;https://dart.dev/guides/language/effective-dart/style&#34;&gt;Effective Dart&lt;/a&gt;, there are several rules to be followed, but nothing is mandatory.&lt;/p&gt; &#xA;&lt;h3&gt;Use the correct capitalization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;&#xA;const Bands = [&#39;AC/DC&#39;, &#39;Led Zeppelin&#39;, &#39;The Beatles&#39;];&#xA;&#xA;void restore_database() {}&#xA;&#xA;class animal {}&#xA;&#xA;typedef predicate&amp;lt;T&amp;gt; = bool Function(T value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// lowerCamelCase for constant names&#xA;const daysInWeek = 7;&#xA;const bands = [&#39;AC/DC&#39;, &#39;Led Zeppelin&#39;, &#39;The Beatles&#39;];&#xA;&#xA;// lowerCamelCase for functions&#xA;void restoreDatabase() {}&#xA;&#xA;// UpperCamelCase for classes, enum types, typedefs, and type parameters&#xA;class Animal {}&#xA;typedef Predicate&amp;lt;T&amp;gt; = bool Function(T value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; &#xA;&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Smartphone {&#xA;  // ...&#xA;&#xA;  String getOS() {&#xA;    // ...&#xA;  }&#xA;&#xA;  void showPlatform() {&#xA;    final os = getOS();&#xA;    final chipset = getChipset();&#xA;    // ...&#xA;  }&#xA;&#xA;  String getResolution() {&#xA;    // ...&#xA;  }&#xA;&#xA;  void showSpecifications() {&#xA;    showPlatform();&#xA;    showDisplay();&#xA;  }&#xA;&#xA;  String getChipset() {&#xA;    // ...&#xA;  }&#xA;&#xA;  void showDisplay() {&#xA;    final resolution = getResolution();&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Smartphone {&#xA;  // ...&#xA;&#xA;  void showSpecifications() {&#xA;    showPlatform();&#xA;    showDisplay();&#xA;  }&#xA;&#xA;  void showPlatform() {&#xA;    final os = getOS();&#xA;    final chipset = getChipset();&#xA;    // ...&#xA;  }&#xA;&#xA;  String getOS() {&#xA;    // ...&#xA;  }&#xA;&#xA;  String getChipset() {&#xA;    // ...&#xA;  }&#xA;&#xA;  void showDisplay() {&#xA;    final resolution = getResolution();&#xA;    // ...&#xA;  }&#xA;&#xA;  String getResolution() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; &#xA;&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;String&amp;gt; getCitiesNames(List&amp;lt;String&amp;gt; cities) {&#xA;  // Cities names list&#xA;  final citiesNames = &amp;lt;String&amp;gt;[];&#xA;&#xA;  // Loop through every city&#xA;  for (final city in cities) {&#xA;    // Gets only the string before the comma&#xA;    final filteredCityName = city.split(&#39;,&#39;)[0];&#xA;&#xA;    // Add the filtered city name&#xA;    citiesNames.add(filteredCityName);&#xA;  }&#xA;&#xA;  // Returns the cities names list&#xA;  return citiesNames;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;String&amp;gt; getCitiesNames(List&amp;lt;String&amp;gt; cities) {&#xA;  final citiesNames = &amp;lt;String&amp;gt;[];&#xA;&#xA;  for (final city in cities) {&#xA;    // Gets only the string before the comma&#xA;    final filteredCityName = city.split(&#39;,&#39;)[0];&#xA;&#xA;    citiesNames.add(filteredCityName);&#xA;  }&#xA;&#xA;  return citiesNames;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; &#xA;&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;doStuff();&#xA;// doOtherStuff();&#xA;// doSomeMoreStuff();&#xA;// doSoMuchStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;doStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; &#xA;&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/**&#xA; * 2016-12-20: Removidas monads, nÃ£o entendia elas (RM)&#xA; * 2016-10-01: Melhoria utilizando monads especiais (JP)&#xA; * 2016-02-03: Removido checagem de tipos (LI)&#xA; * 2015-03-14: Adicionada checagem de tipos (JR)&#xA; */&#xA;int combine(int a, int b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;int combine(int a, int b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid positional markers&lt;/h3&gt; &#xA;&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;////////////////////////////////////////////////////////////////////////////////&#xA;// Programmer Instantiation&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;final programmer = Programmer(&#xA;  name: &#39;Jack&#39;,&#xA;  linesOfCode: 500,&#xA;);&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;// startProject implementation&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;void startProject() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final programmer = Programmer(&#xA;  name: &#39;Jack&#39;,&#xA;  linesOfCode: 500,&#xA;);&#xA;&#xA;void startProject() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&#34; alt=&#34;br&#34;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/williambarreiro/clean-code-dart&#34;&gt;williambarreiro/clean-code-dart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williambarreiro/clean-code-dart-en/main/#table-of-contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>