<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T01:56:11Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fzyzcjy/flutter_convenient_test</title>
    <updated>2022-07-28T01:56:11Z</updated>
    <id>tag:github.com,2022-07-28:/fzyzcjy/flutter_convenient_test</id>
    <link href="https://github.com/fzyzcjy/flutter_convenient_test" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Write and debug tests easily, with full action history, time travel, screenshots, rapid re-execution, video records, interactivity, isolation and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/fzyzcjy/flutter_convenient_test&#34;&gt;flutter_convenient_test&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/convenient_test&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/convenient_test.svg?sanitize=true&#34; alt=&#34;Flutter Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fzyzcjy/flutter_convenient_test/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fzyzcjy/flutter_convenient_test/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fzyzcjy/flutter_convenient_test/actions/workflows/post_release.yaml&#34;&gt;&lt;img src=&#34;https://github.com/fzyzcjy/flutter_convenient_test/actions/workflows/post_release.yaml/badge.svg?sanitize=true&#34; alt=&#34;Post-release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codacy.com/gh/fzyzcjy/flutter_convenient_test?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=fzyzcjy/flutter_convenient_test&amp;amp;utm_campaign=Badge_Grade_Settings&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/45204254806b4790a2d6403b81156e42&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Write and debug tests easily, with full action history, time travel, screenshots, rapid re-execution, video records, retryability, interactivity, isolation and more.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸš€ Advantages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full action history&lt;/strong&gt;: Gain insight on what has happened to the tests - View all actions/assertions taken in the tests, with friendly descriptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time travel, with screenshots&lt;/strong&gt;: What did the UI look like when that button was tapped 50 steps ago? Now you know everything.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rapid re-execution&lt;/strong&gt;: Edit code, save, run - done within seconds, not minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Videos recorded&lt;/strong&gt;: Watch what has happened, in full detail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Retryability&lt;/strong&gt;: No manual &lt;code&gt;pump&lt;/code&gt;, wait or retry anymore. Just write down what you want, and the framework will retry and wait.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Being interactive&lt;/strong&gt;: Play with the app interactively, again within seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Isolated&lt;/strong&gt;: One test will no longer destroy environment of other tests - run each with full isolation (optional feature).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;integration_test&lt;/code&gt; still there&lt;/strong&gt;: Freely use everything from &lt;code&gt;integration_test&lt;/code&gt;, &lt;code&gt;mockito&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flaky test awareness&lt;/strong&gt;: No false alarms, while no blindly ignoring.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Suitable for CI&lt;/strong&gt;: Run headlessly, with logs to be visualized when needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;: Visually see target regions, run single test/group within seconds, raw logs...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ“· Quick demo&lt;/h2&gt; &#xA;&lt;!--README_VIDEO_REPLACEMENT_PLACEHOLDER_ONE--&gt; &#xA;&lt;!--README_VIDEO_REPLACEMENT_PLACEHOLDER_TWO--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5236035/167066810-d0aa36ba-0113-4140-92f9-cec0a9e77ed1.mov&#34;&gt;https://user-images.githubusercontent.com/5236035/167066810-d0aa36ba-0113-4140-92f9-cec0a9e77ed1.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stability&lt;/h2&gt; &#xA;&lt;p&gt;It has been used extensively in my own 200kloc Flutter app in production environment.&lt;/p&gt; &#xA;&lt;p&gt;P.S. Surely, this package - especially the doc - is not yet perfect. If having problems, just &lt;a href=&#34;https://github.com/fzyzcjy/flutter_convenient_test/issues&#34;&gt;create an issue&lt;/a&gt; and I usually reply quite quickly.&lt;/p&gt; &#xA;&lt;h2&gt;ðŸ“š Features&lt;/h2&gt; &#xA;&lt;h3&gt;Full action history&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See actions/taps/assertions taken in the tests, with friendly descriptions (in the left panel)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fzyzcjy/flutter_convenient_test/master/doc/gif/a_action_history.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Time travel with screenshots&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tap an action to see its screenshots&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fzyzcjy/flutter_convenient_test/master/doc/gif/b_time_travel_screenshot.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;P.S. Use mouse wheels and dragging to zoom and pan the screenshots.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Rapid re-execution&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Edit code, save, run - within seconds&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fzyzcjy/flutter_convenient_test/master/doc/gif/c_rapid_execute.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Videos recorded&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Watch what has happened in full detail (in right panel)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fzyzcjy/flutter_convenient_test/master/doc/gif/d_video_record.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;P.S. Highlighted action is in sync with the playing video. Tap action to seek video.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Being interactive&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Temporarily play with the app, interactively. (Flutter originally cannot interact with app in test mode)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fzyzcjy/flutter_convenient_test/master/doc/gif/e_interactive.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Retryability&lt;/h3&gt; &#xA;&lt;p&gt;No manual &lt;code&gt;pump&lt;/code&gt;, wait or retry anymore. Just write down what you want, and the framework will retry and wait.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await t.get(find.byTooltip(&#39;Fetch Data From Backend&#39;)).tap();&#xA;// OK even if &#34;fetch data&#34; needs undeterministic time interval. Will automatically pump, wait and retry.&#xA;await t.get(find.text(&#39;New Data&#39;)).should(findsOneWidget);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More in quickstart and tutorials below.&lt;/p&gt; &#xA;&lt;h3&gt;Isolation mode&lt;/h3&gt; &#xA;&lt;p&gt;One test will no longer destroy environment of other tests - now you can run run each with full isolation.&lt;/p&gt; &#xA;&lt;p&gt;This is especially helpful in big projects (such as mine), when an end-to-end setup is not easy to tear down, and one failed test can cause all subsequent tests to have damaged execution environment and thus fail.&lt;/p&gt; &#xA;&lt;p&gt;Technical details: If this mode is enabled, a hot restart will be performed after each attempt of each test.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;integration_test&lt;/code&gt; is still there&lt;/h3&gt; &#xA;&lt;p&gt;You can still use everything from &lt;code&gt;integration_test&lt;/code&gt;, &lt;code&gt;mockito&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, etc. This package is not a reinvented wheel, and has exposed the underlying &lt;code&gt;integration_test&lt;/code&gt; to you.&lt;/p&gt; &#xA;&lt;p&gt;If you want to migrate to this package from raw &lt;code&gt;integration_test&lt;/code&gt;, have a look at Getting Started section below.&lt;/p&gt; &#xA;&lt;h3&gt;Flaky tests awareness&lt;/h3&gt; &#xA;&lt;p&gt;Flaky is flaky, and we are aware of it. It is neither failed nor success, so you will not be alarmed by false positives, and not completely ignore it.&lt;/p&gt; &#xA;&lt;!--[TODO screenshot: Several tests, one failed, one flaky, one success]--&gt; &#xA;&lt;h3&gt;Golden utility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customizable tolerations - allow a portion of pixels to mismatch golden image&lt;/li&gt; &#xA; &lt;li&gt;Golden overview page - List and check all golden differences within one page with pan and zoom&lt;/li&gt; &#xA; &lt;li&gt;When a golden assertion fails, its image details will be also shown in the manager panel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(To be documented more thoroughly later &lt;a href=&#34;https://raw.githubusercontent.com/fzyzcjy/flutter_convenient_test/master/#187&#34;&gt;https://github.com/fzyzcjy/flutter_convenient_test/issues/187&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!--[TODO screenshot]--&gt; &#xA;&lt;h3&gt;CI / headless mode&lt;/h3&gt; &#xA;&lt;p&gt;This tool can be run without GUI and only produce log data and exit code, making it suitable to be run in a CI. If you want to examine the details with GUI, just open the generated artifact in the GUI using &lt;code&gt;Load Report&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;h3&gt;Run single test/group&lt;/h3&gt; &#xA;&lt;p&gt;Tap &#34;Run&#34; icon button after each test or group to re-run &lt;em&gt;only&lt;/em&gt; that test/group, without running anything else. All within seconds - no need to recompile like what the original test package did.&lt;/p&gt; &#xA;&lt;h3&gt;Visually see target regions&lt;/h3&gt; &#xA;&lt;p&gt;Useful when replaying videos and screenshots&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Mark&lt;/code&gt;s have colored borders&lt;/li&gt; &#xA; &lt;li&gt;Gestures have visual feedbacks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raw logs&lt;/h3&gt; &#xA;&lt;p&gt;Tap &#34;Raw Logs&#34; in the right panel to see raw outputs of a test.&lt;/p&gt; &#xA;&lt;h3&gt;Header panel&lt;/h3&gt; &#xA;&lt;p&gt;Following is a brief description of the functionalities of each button in the header panel.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run All: Run all tests below&lt;/li&gt; &#xA; &lt;li&gt;Halt: Stop the currently running worker&lt;/li&gt; &#xA; &lt;li&gt;Interactive Mode: Enter &#34;interactive mode&#34; (described above)&lt;/li&gt; &#xA; &lt;li&gt;Reload Info: Reload test metadata such as the group names and test names&lt;/li&gt; &#xA; &lt;li&gt;Reconnect VM: Connect to the Dart VM of the worker app&lt;/li&gt; &#xA; &lt;li&gt;Load Report: Load and display a report generated when &lt;code&gt;SaveReport&lt;/code&gt; toggle is enabled or run within CI/headless mode&lt;/li&gt; &#xA; &lt;li&gt;Golden Diff Page: Enter the golden diff page (described above)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following are about the toggles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Isolation: Whether to enable &#34;isolation mode&#34; (described above)&lt;/li&gt; &#xA; &lt;li&gt;UpdateGoldens: Whether to update the golden files on the disk, similar to &lt;code&gt;--update-goldens&lt;/code&gt; flag in a traditional Flutter test&lt;/li&gt; &#xA; &lt;li&gt;Retry: When a test fails, whether to retry (and mark as flaky), or directly mark it failed&lt;/li&gt; &#xA; &lt;li&gt;SaveReport: Whether to save logs to a report file, such that it can be visualized later via &#34;Load Report&#34;&lt;/li&gt; &#xA; &lt;li&gt;Hover: When hovering the action log panel, whether highlight the hovered entry and immediately show related information&lt;/li&gt; &#xA; &lt;li&gt;AutoJump: Whether to jump to newly received action entries&lt;/li&gt; &#xA; &lt;li&gt;AutoExpand: Whether to expand and collapse automatically for the newly received test and action entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorial: Run examples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository and enter the &lt;code&gt;packages/convenient_test/example&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Run the example app (e.g. using iOS simulator) via &lt;code&gt;flutter run /path/to/flutter_convenient_test/packages/convenient_test/example/integration_test/main_test.dart --host-vmservice-port 9753 --disable-service-auth-codes --dart-define CONVENIENT_TEST_APP_CODE_DIR=/path/to/this/app&lt;/code&gt;. Can also be run via VSCode or Android Studio with similar commands.&lt;/li&gt; &#xA; &lt;li&gt;Run the GUI located in &lt;code&gt;packages/convenient_test_manager&lt;/code&gt;. (See details in section below)&lt;/li&gt; &#xA; &lt;li&gt;Enjoy the GUI!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In &lt;code&gt;pubspec.yaml&lt;/code&gt;, add &lt;code&gt;convenient_test: ^1.0.0&lt;/code&gt; to the &lt;code&gt;dependencies&lt;/code&gt; section, and &lt;code&gt;convenient_test_dev: ^1.0.0&lt;/code&gt; to the &lt;code&gt;dev_dependencies&lt;/code&gt; section. As normal, we need to &lt;code&gt;flutter pub get&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;integration_test/main_test.dart&lt;/code&gt; file in your app. Fill it like &lt;code&gt;void main() =&amp;gt; convenientTestMain(MyConvenientTestSlot(), () { ... the normal test code you write });&lt;/code&gt;. See &lt;a href=&#34;https://github.com/fzyzcjy/flutter_convenient_test/raw/master/packages/convenient_test/example/integration_test/main_test.dart&#34;&gt;the example package&lt;/a&gt; for demonstration.&lt;/li&gt; &#xA; &lt;li&gt;Run your app (e.g. using iOS simulator) via &lt;code&gt;flutter run /path/to/your/app/integration_test/main_test.dart --host-vmservice-port 9753 --disable-service-auth-codes --dart-define CONVENIENT_TEST_APP_CODE_DIR=/path/to/this/app&lt;/code&gt;. Can also be run via VSCode or Android Studio with similar commands.&lt;/li&gt; &#xA; &lt;li&gt;Run the GUI located in &lt;code&gt;packages/convenient_test_manager&lt;/code&gt;. (See details in section below)&lt;/li&gt; &#xA; &lt;li&gt;Enjoy the GUI!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Run the &lt;code&gt;manager&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Method 1: Download precompiled binary&lt;/h4&gt; &#xA;&lt;p&gt;There are precompiled binaries for each commit, at the &#34;artifacts&#34; section in &lt;a href=&#34;https://github.com/fzyzcjy/flutter_convenient_test/actions/workflows/ci.yaml&#34;&gt;the CI page&lt;/a&gt;. For example, download &lt;code&gt;manager_macos&lt;/code&gt; artifact, unzip it, and open it.&lt;/p&gt; &#xA;&lt;p&gt;Currently only MacOS has CI for this, and I am willing to accept a PR for Windows or Linux.&lt;/p&gt; &#xA;&lt;h4&gt;Method 2: &lt;code&gt;flutter run&lt;/code&gt; / &lt;code&gt;flutter profile&lt;/code&gt; / &lt;code&gt;flutter build&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;packages/convenient_test_manager&lt;/code&gt; is nothing but a &lt;em&gt;normal&lt;/em&gt; Flutter Windows/MacOS/Linux app, so run it following the Flutter official doc.&lt;/p&gt; &#xA;&lt;p&gt;Surely, it can also be run via &lt;code&gt;flutter profile&lt;/code&gt; mode to speed up. Or use &lt;code&gt;flutter build&lt;/code&gt; and the standard approaches to generate a release version binary and use it.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Thanks for testing frameworks in JavaScript, especially &lt;code&gt;Cypress&lt;/code&gt;, for giving inspirations!&lt;/p&gt;</summary>
  </entry>
</feed>