<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-06T01:26:23Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jhomlala/alice</title>
    <updated>2024-04-06T01:26:23Z</updated>
    <id>tag:github.com,2024-04-06:/jhomlala/alice</id>
    <link href="https://github.com/jhomlala/alice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP Inspector for Flutter. Allows checking HTTP connections with UI inspector.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/logo.png&#34; width=&#34;250px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Alice&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/alice&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/alice.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jhomlala/alice&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jhomlala/alice.svg?style=flat&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jhomlala/alice&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-flutter-blue.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alice is an HTTP Inspector tool for Flutter which helps debugging http requests. It catches and stores http requests and responses, which can be viewed via simple UI. It is inspired from &lt;a href=&#34;https://github.com/jgilfelt/chuck&#34;&gt;Chuck&lt;/a&gt; and &lt;a href=&#34;https://github.com/ChuckerTeam/chucker&#34;&gt;Chucker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/1.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/2.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/3.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/4.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/5.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/6.png&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/7.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/8.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/9.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/10.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/11.png&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/12.png&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Dart http client plugins:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dio&lt;/li&gt; &#xA; &lt;li&gt;HttpClient from dart:io package&lt;/li&gt; &#xA; &lt;li&gt;Http from http/http package&lt;/li&gt; &#xA; &lt;li&gt;Chopper&lt;/li&gt; &#xA; &lt;li&gt;Generic HTTP client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;br&gt; ✔️ Detailed logs for each HTTP calls (HTTP Request, HTTP Response)&lt;br&gt; ✔️ Inspector UI for viewing HTTP calls&lt;br&gt; ✔️ Save HTTP calls to file&lt;br&gt; ✔️ Statistics&lt;br&gt; ✔️ Notification on HTTP call&lt;br&gt; ✔️ Support for top used HTTP clients in Dart&lt;br&gt; ✔️ Error handling&lt;br&gt; ✔️ Shake to open inspector&lt;br&gt; ✔️ HTTP calls search ✔️ Flutter/Android logs&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add this to your &lt;strong&gt;pubspec.yaml&lt;/strong&gt; file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  alice: ^0.4.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ flutter packages get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Import it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:alice/alice.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Alice configuration&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create Alice instance:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add navigator key to your application:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MaterialApp( navigatorKey: alice.getNavigatorKey(), home: ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to add this navigator key in order to show inspector UI. You can use also your navigator key in Alice:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(showNotification: true, navigatorKey: yourNavigatorKeyHere);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to pass navigatorKey lazily, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;alice.setNavigatorKey(yourNavigatorKeyHere);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is minimal configuration required to run Alice. Can set optional settings in Alice constructor, which are presented below. If you don&#39;t want to change anything, you can move to Http clients configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Additional settings&lt;/h3&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;showNotification&lt;/code&gt; in Alice constructor to show notification. Clicking on this notification will open inspector.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(..., showNotification: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;showInspectorOnShake&lt;/code&gt; in Alice constructor to open inspector by shaking your device (default disabled):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(..., showInspectorOnShake: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pass another notification icon, you can use &lt;code&gt;notificationIcon&lt;/code&gt; parameter. Default value is @mipmap/ic_launcher.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(..., notificationIcon: &#34;myNotificationIconResourceName&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to limit max numbers of HTTP calls saved in memory, you may use &lt;code&gt;maxCallsCount&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(..., maxCallsCount: 1000));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change the Directionality of Alice, you can use the &lt;code&gt;directionality&lt;/code&gt; parameter. If the parameter is set to null, the Directionality of the app will be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(..., directionality: TextDirection.ltr);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to hide share button, you can use &lt;code&gt;showShareButton&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Alice alice = Alice(..., showShareButton: false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Client configuration&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Dio, you just need to add interceptor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dio dio = Dio();&#xA;dio.interceptors.add(alice.getDioInterceptor());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using HttpClient from dart:io package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;httpClient&#xA;&#x9;.getUrl(Uri.parse(&#34;https://jsonplaceholder.typicode.com/posts&#34;))&#xA;&#x9;.then((request) async {&#xA;&#x9;&#x9;alice.onHttpClientRequest(request);&#xA;&#x9;&#x9;var httpResponse = await request.close();&#xA;&#x9;&#x9;var responseBody = await httpResponse.transform(utf8.decoder).join();&#xA;&#x9;&#x9;alice.onHttpClientResponse(httpResponse, request, body: responseBody);&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using http from http/http package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;http.get(&#39;https://jsonplaceholder.typicode.com/posts&#39;).then((response) {&#xA;    alice.onHttpResponse(response);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using Chopper. you need to add interceptor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;chopper = ChopperClient(&#xA;    interceptors: [alice.getChopperInterceptor()],&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attention! Alice will add special &#34;alice_token&#34; header to the request in order to calculate correct id for the http call.&lt;/p&gt; &#xA;&lt;p&gt;If you have other HTTP client you can use generic http call interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AliceHttpCall aliceHttpCall = AliceHttpCall(id);&#xA;alice.addHttpCall(aliceHttpCall);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show inspector manually&lt;/h2&gt; &#xA;&lt;p&gt;You may need that if you won&#39;t use shake or notification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;alice.showInspector();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving calls&lt;/h2&gt; &#xA;&lt;p&gt;Alice supports saving logs to your mobile device storage. In order to make save feature works, you need to add in your Android application manifest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.WRITE_EXTERNAL_STORAGE&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flutter logs&lt;/h2&gt; &#xA;&lt;p&gt;If you want to log Flutter logs in Alice, you may use these methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;alice.addLog(log);&#xA;&#xA;alice.addLogs(logList);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inspector state&lt;/h2&gt; &#xA;&lt;p&gt;Check current inspector state (opened/closed) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;alice.isInspectorOpened();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;You can use extensions to shorten your http and http client code. This is optional, but may improve your codebase. Example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Import:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:alice/core/alice_http_client_extensions.dart&#39;;&#xA;import &#39;package:alice/core/alice_http_extensions.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Use extensions:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;http&#xA;    .post(&#39;https://jsonplaceholder.typicode.com/posts&#39;, body: body)&#xA;    .interceptWithAlice(alice, body: body);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;httpClient&#xA;    .postUrl(Uri.parse(&#34;https://jsonplaceholder.typicode.com/posts&#34;))&#xA;    .interceptWithAlice(alice, body: body, headers: Map());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;See complete example here: &lt;a href=&#34;https://github.com/jhomlala/alice/raw/master/example/lib/main.dart&#34;&gt;https://github.com/jhomlala/alice/blob/master/example/lib/main.dart&lt;/a&gt; To run project, you need to call this command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to run this command to build Chopper generated classes. You should run this command only once, you don&#39;t need to run this command each time before running project (unless you modify something in Chopper endpoints).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;250px&#34; src=&#34;https://raw.githubusercontent.com/jhomlala/alice/master/media/13.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Lenkaa3792/Dart-main-concepts</title>
    <updated>2024-04-06T01:26:23Z</updated>
    <id>tag:github.com,2024-04-06:/Lenkaa3792/Dart-main-concepts</id>
    <link href="https://github.com/Lenkaa3792/Dart-main-concepts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>incrediblezayed/file_saver</title>
    <updated>2024-04-06T01:26:23Z</updated>
    <id>tag:github.com,2024-04-06:/incrediblezayed/file_saver</id>
    <link href="https://github.com/incrediblezayed/file_saver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple flutter plugin for saving files in all platforms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FileSaver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/4yRFt68kty&#34;&gt;&lt;img src=&#34;https://www.hassanansari.dev/public/file_saver_discord.png&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Huge Shoutout to all the contributors and the people who are using this package, I&#39;m really grateful to all of you. Thank you for your support.&lt;/h2&gt; &#xA;&lt;p&gt;This plugin package primarily focuses on one task: saving files on Android, iOS, Web, Windows, MacOS, and Linux. It might not have a plethora of features, but it does this job well. This package depends on path_provider for Android and iOS and basic html anchor for Web. The main reason I built this plugin was to avoid using HTML just for downloading files. The plugin is pretty simple and saves the file in Downloads folder in Windows, MacOS, Linux and directly downloads the file in Web, in iOS, the file is Saved in Application Documents Directory, and in Android it is saved in the applications files directory Android/data/your.package.name/file/your_file.extension.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The plugin itself is pretty easy to use. Just call the method saveFile() with respective arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await FileSaver.instance.saveFile({&#xA;      required String name,&#xA;      Uint8List? bytes,&#xA;      File? file,&#xA;      String? filePath,&#xA;      LinkDetails? link,&#xA;      String ext = &#34;&#34;,&#xA;      MimeType mimeType = MimeType.other,&#xA;      String? customMimeType,&#xA;      Dio? dioClient,&#xA;      Uint8List Function(Uint8List)? transformDioResponse,&#xA;      });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saveFile() method has 8 Named arguments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;String name&lt;/em&gt; which takes the name of the file,&lt;br&gt; &lt;em&gt;Uint8List bytes&lt;/em&gt; which will be your actual encoded file,&lt;br&gt; Or&lt;br&gt; &lt;em&gt;File file&lt;/em&gt; which will be your file in the File object (from dart:io)&lt;br&gt; Or&lt;br&gt; &lt;em&gt;Stirng filePath&lt;/em&gt; which will be your file path&lt;br&gt; Or&lt;br&gt; &lt;em&gt;LinkDetails link&lt;/em&gt; which will provide the link, header, request methid and body to your file. LinkDetails can be used as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;LinkDetails(&#xA;      link: &#34;https://www.example.com/file.extentions&#34;,&#xA;      headers: {&#34;your-header-key&#34;: &#34;you-header-value&#34;},&#xA;      method: &#34;POST&#34;,&#xA;      body: body&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;br&gt; Out of these parameters, you will have to use atleast one&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;String ext&lt;/em&gt; this will be your file extension.&lt;br&gt; Another parameter is &lt;em&gt;MimeType type&lt;/em&gt; Specifically for Web, which will be your file type&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;String customMimeType&lt;/em&gt; this will be your custom mime type, if you want to use your own mime type, you can use this parameter&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Dio dioClient&lt;/em&gt; this will be your dio client, if you want to use dio for downloading the file, you can use this parameter&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Uint8List Function(Uint8List) transformDioResponse&lt;/em&gt; this will be your function to transform the response, if you want to transform the response as per your requirement, you can use this parameter&lt;/p&gt; &#xA;&lt;p&gt;MimeType is also included in my Package, I&#39;ve included types for &lt;strong&gt;Sheets, Presentation, Word, Plain Text, PDF, MP3, MP4 and many other common formats&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;or you can call saveAs() &lt;em&gt;only available for android and iOS &amp;amp; macOS at the moment&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await FileSaver.instance.saveAs({&#xA;      required String name,&#xA;      Uint8List? bytes,&#xA;      File? file,&#xA;      String? filePath,&#xA;      LinkDetails? link,&#xA;      required String ext,&#xA;      required MimeType mimeType,&#xA;      String? customMimeType,&#xA;      Dio? dioClient,&#xA;      Uint8List Function(Uint8List)? transformDioResponse,&#xA;      });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the parameters in this method is same as the saveFile() method.&lt;/p&gt; &#xA;&lt;h3&gt;Note: customMimeType can only be used when mimeType is set to MimeType.custom&lt;/h3&gt; &#xA;&lt;h3&gt;Storage Permissions &amp;amp; Network Permissions:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h5&gt;&lt;em&gt;These Settings are optional for iOS, as in iOS the file will be saved in application documents directory but will not be visible in Files application, to make your file visible in iOS Files application, make the changes mentioned below.&lt;/em&gt;&lt;/h5&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;iOS:&lt;/h4&gt; &#xA;&lt;p&gt;Go to your project folder, ios/Runner/info.plist and Add these keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;LSSupportsOpeningDocumentsInPlace&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&amp;lt;key&amp;gt;UIFileSharingEnabled&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/incrediblezayed/file_saver/main/images/ios.png&#34; alt=&#34;iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Or in XCode:&lt;/h4&gt; &#xA;&lt;p&gt;Open Your Project in XCode (Open XCode -&amp;gt; Open a project or file -&amp;gt; Your_Project_Folder/ios/Runner.xcworkspace) Open info.plist Add these rows:&lt;/p&gt; &#xA;&lt;p&gt;Application supports iTunes file sharing (Boolean -&amp;gt; Yes)&lt;/p&gt; &#xA;&lt;p&gt;Supports opening documents in place (Boolean -&amp;gt; Yes)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/incrediblezayed/file_saver/main/images/iOSXcode.png&#34; alt=&#34;iOS Xcode&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;macOS:&lt;/h4&gt; &#xA;&lt;p&gt;Go to your project folder, macOS/Runner/DebugProfile.entitlements&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For release you need to open &#39;YOUR_PROJECT_NAME&#39;Profile.entitlements&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;and add the following key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.security.files.downloads.read-write&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/incrediblezayed/file_saver/main/images/macos.png&#34; alt=&#34;MacOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Or in XCode:&lt;/h4&gt; &#xA;&lt;p&gt;Open Your Project in XCode (Open XCode -&amp;gt; Open a project or file -&amp;gt; Your_Project_Folder/macos/Runner.xcworkspace) Open your entitlement file (DebugProfile.entitlements &amp;amp; &#39;YOUR_PROJECT_NAME&#39;Profile.entitlements)&lt;/p&gt; &#xA;&lt;p&gt;Add these rows: &lt;img src=&#34;https://raw.githubusercontent.com/incrediblezayed/file_saver/main/images/macOSXcode.png&#34; alt=&#34;MacOS Xcode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;and if you get Client Socket Exception while saving files in MacOS from link, you have to add this key in the DebugProfile.entitlements and Release.entitlements of your macOS application and set the value to true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.security.network.client&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;You can find these files in the project_folder/macos/Runner/ directory.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;And You&#39;re done&lt;/h4&gt; &#xA;&lt;h2&gt;Thank You For Reading this far :)&lt;/h2&gt;</summary>
  </entry>
</feed>