<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-11T02:28:00Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Workiva/w_flux</title>
    <updated>2023-11-11T02:28:00Z</updated>
    <id>tag:github.com,2023-11-11:/Workiva/w_flux</id>
    <link href="https://github.com/Workiva/w_flux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Dart app architecture library with uni-directional data flow inspired by RefluxJS and Facebook&#39;s Flux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;w_flux&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/w_flux&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/w_flux.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Workiva/w_flux&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Workiva/w_flux.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://codecov.io/github/Workiva/w_flux?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/Workiva/w_flux/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.dartdocs.org/documentation/w_flux/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-w_flux-blue.svg?sanitize=true&#34; alt=&#34;documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A Dart app architecture library with uni-directional data flow inspired by &lt;a href=&#34;https://github.com/reflux/refluxjs&#34;&gt;RefluxJS&lt;/a&gt; and Facebook&#39;s &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#whats-included&#34;&gt;&lt;strong&gt;What&#39;s Included&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#action&#34;&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#store&#34;&gt;&lt;strong&gt;Store&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#fluxcomponent&#34;&gt;&lt;strong&gt;FluxComponent&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#over_react-fluxuicomponent&#34;&gt;&lt;strong&gt;&lt;code&gt;over_react&lt;/code&gt; FluxUiComponent&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#external-consumption&#34;&gt;&lt;strong&gt;External Consumption&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/#development&#34;&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Workiva/w_flux/images/images/flux_diagram.png&#34; alt=&#34;flux-diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;w_flux&lt;/code&gt; implements a uni-directional data flow pattern comprised of &lt;code&gt;Actions&lt;/code&gt;, &lt;code&gt;Stores&lt;/code&gt;, and &lt;code&gt;FluxComponents&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Actions&lt;/code&gt; initiate mutation of app data that resides in &lt;code&gt;Stores&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Data mutations within &lt;code&gt;Stores&lt;/code&gt; trigger re-rendering of app view (defined in &lt;code&gt;FluxComponents&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FluxComponents&lt;/code&gt; dispatch &lt;code&gt;Actions&lt;/code&gt; in response to user interaction.&lt;/li&gt; &#xA; &lt;li&gt;and the cycle continues...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What&#39;s Included&lt;/h2&gt; &#xA;&lt;h3&gt;Action&lt;/h3&gt; &#xA;&lt;p&gt;An &lt;code&gt;Action&lt;/code&gt; is a command that can be dispatched (with an optional data payload) and listened to.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;w_flux&lt;/code&gt;, &lt;code&gt;Actions&lt;/code&gt; are the sole driver of application state change. &lt;code&gt;FluxComponents&lt;/code&gt; dispatch &lt;code&gt;Actions&lt;/code&gt; in response to user interaction with the rendered view. &lt;code&gt;Stores&lt;/code&gt; listen for these &lt;code&gt;Action&lt;/code&gt; dispatches and mutate their internal data in response, taking the &lt;code&gt;Action&lt;/code&gt; payload into account as appropriate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:w_flux/w_flux.dart&#39;;&#xA;&#xA;// define an action&#xA;final Action&amp;lt;String&amp;gt; displayString = new Action&amp;lt;String&amp;gt;();&#xA;&#xA;// dispatch the action with a payload&#xA;displayString(&#39;somePayload&#39;);&#xA;&#xA;// listen for action dispatches&#xA;displayString.listen(_displayAlert);&#xA;&#xA;_displayAlert(String payload) {&#xA;  print(payload);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;BONUS:&lt;/strong&gt; &lt;code&gt;Actions&lt;/code&gt; are await-able!&lt;/p&gt; &#xA;&lt;p&gt;They return a Future that completes after all registered &lt;code&gt;Action&lt;/code&gt; listeners complete. It&#39;s NOT generally recommended to use this feature within normal app code, but it is quite useful in unit test code.&lt;/p&gt; &#xA;&lt;h3&gt;Store&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;Store&lt;/code&gt; is a repository and manager of app state. The base &lt;code&gt;Store&lt;/code&gt; class provided by &lt;code&gt;w_flux&lt;/code&gt; should be extended to fit the needs of your app and its data. App state may be spread across many independent stores depending on the complexity of the app and your desired app architecture.&lt;/p&gt; &#xA;&lt;p&gt;By convention, a &lt;code&gt;Store&lt;/code&gt;&#39;s internal data cannot be mutated directly. Instead, &lt;code&gt;Store&lt;/code&gt; data is mutated internally in response to &lt;code&gt;Action&lt;/code&gt; dispatches. &lt;code&gt;Stores&lt;/code&gt; should otherwise be considered read-only, publicly exposing relevant data ONLY via getter methods. This limited data access ensures that the integrity of the uni-directional data flow is maintained.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Store&lt;/code&gt; can be listened to to receive external notification of its data mutations. Whenever the data within a &lt;code&gt;Store&lt;/code&gt; is mutated, the &lt;code&gt;trigger&lt;/code&gt; method is used to notify any registered listeners that updated data is available. In &lt;code&gt;w_flux&lt;/code&gt;, &lt;code&gt;FluxComponents&lt;/code&gt; listen to &lt;code&gt;Stores&lt;/code&gt;, typically triggering re-rendering of UI elements based on the updated &lt;code&gt;Store&lt;/code&gt; data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:w_flux/w_flux.dart&#39;;&#xA;&#xA;class RandomColorStore extends Store {&#xA;&#xA;  // Public data is only available via getter method&#xA;  String _backgroundColor = &#39;gray&#39;;&#xA;  String get backgroundColor =&amp;gt; _backgroundColor;&#xA;&#xA;  // Actions relevant to the store are passed in during instantiation&#xA;  RandomColorActions _actions;&#xA;&#xA;  RandomColorStore(RandomColorActions this._actions) {&#xA;    // listen for relevant action dispatches&#xA;    _actions.changeBackgroundColor.listen(_changeBackgroundColor);&#xA;  }&#xA;&#xA;  _changeBackgroundColor(_) {&#xA;    // action dispatches trigger internal data mutations&#xA;    _backgroundColor = &#39;#&#39; + (new Random().nextDouble() * 16777215).floor().toRadixString(16);&#xA;&#xA;    // trigger to notify external listeners that new data is available&#xA;    trigger();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;BONUS:&lt;/strong&gt; &lt;code&gt;Stores&lt;/code&gt; can be initialized with a stream transformer to modify the standard behavior of the &lt;code&gt;trigger&lt;/code&gt; stream. This can be useful for throttling UI rendering in response to high frequency &lt;code&gt;Store&lt;/code&gt; mutations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:rate_limit/rate_limit.dart&#39;;&#xA;import &#39;package:w_flux/w_flux.dart&#39;;&#xA;&#xA;class ThrottledStore extends Store {&#xA;  ...&#xA;&#xA;  ThrottledStore(this._actions) : super.withTransformer(new Throttler(const Duration(milliseconds: 30))) {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;BONUS:&lt;/strong&gt; &lt;code&gt;Stores&lt;/code&gt; provide an optional terse syntax for action -&amp;gt; data mutation -&amp;gt; trigger operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// verbose syntax&#xA;actions.incrementCounter.listen(_handleAction);&#xA;&#xA;_handleAction(payload) {&#xA;    // perform data mutation&#xA;    counter += payload;&#xA;    trigger();&#xA;  }&#xA;&#xA;// equivalent terse syntax&#xA;triggerOnAction(actions.incrementCounter, (payload) =&amp;gt; counter += payload);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FluxComponent&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FluxComponents&lt;/code&gt; define the (optional) user interface for a &lt;code&gt;w_flux&lt;/code&gt; unit and are responsible for rendering app view based on &#39;Store&#39; data as needed. &lt;code&gt;FluxComponents&lt;/code&gt; listen to &lt;code&gt;Stores&lt;/code&gt; and selectively re-render in response to their &lt;code&gt;trigger&lt;/code&gt; dispatches. &lt;code&gt;FluxComponents&lt;/code&gt; retrieve relevant app data from these &lt;code&gt;Stores&lt;/code&gt; via the exposed getter methods, and as such, are internally stateless.&lt;/p&gt; &#xA;&lt;p&gt;If user interaction with a &lt;code&gt;FluxComponent&lt;/code&gt; is intended to mutate app state, this is accomplished by dispatching an &lt;code&gt;Action&lt;/code&gt; (with optional data payload). &lt;code&gt;FluxComponents&lt;/code&gt; DO NOT mutate app state within &lt;code&gt;Stores&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FluxComponent&lt;/code&gt; is an extension of &lt;a href=&#34;https://github.com/cleandart/react-dart/raw/master/lib/react.dart#L10&#34;&gt;Component&lt;/a&gt; (as provided by &lt;a href=&#34;https://github.com/cleandart/react-dart&#34;&gt;react-dart&lt;/a&gt;) that reduces the amount of boilerplate needed to operate within the &lt;code&gt;w_flux&lt;/code&gt; architecture. The base &lt;code&gt;FluxComponent&lt;/code&gt; class provided by &lt;code&gt;w_flux&lt;/code&gt; should be extended to fit the needs of your app.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;FluxComponents&lt;/code&gt; provide standard getters for the &lt;code&gt;Actions&lt;/code&gt; and &lt;code&gt;Store&lt;/code&gt; that they are initialized with. They also automatically subscribe to the provided &lt;code&gt;Store&lt;/code&gt; and re-render in response to its &lt;code&gt;triggers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:react/react.dart&#39; as react;&#xA;import &#39;package:w_flux/w_flux.dart&#39;;&#xA;&#xA;var RandomColorComponent = react.registerComponent(() =&amp;gt; new _RandomColorComponent());&#xA;class _RandomColorComponent extends FluxComponent&amp;lt;RandomColorActions, RandomColorStore&amp;gt; {&#xA;  render() {&#xA;    return react.div({&#xA;      // accesses the backgroundColor via the store&#39;s public getter&#xA;      &#39;style&#39;: {&#39;padding&#39;: &#39;50px&#39;, &#39;backgroundColor&#39;: store.backgroundColor, &#39;color&#39;: &#39;white&#39;}&#xA;    }, [&#xA;      &#39;This module uses a flux pattern to change its background color.&#39;,&#xA;      react.button({&#xA;        &#39;style&#39;: {&#39;padding&#39;: &#39;10px&#39;, &#39;margin&#39;: &#39;10px&#39;},&#xA;        // triggers a change of background color by dispatching an action on button click&#xA;        &#39;onClick&#39;: actions.changeBackgroundColor&#xA;      }, &#39;Change Background Color&#39;)&#xA;    ]);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;BONUS:&lt;/strong&gt; Optional overrides are available for more granular control of &lt;code&gt;FluxComponent&lt;/code&gt; rendering.&lt;/p&gt; &#xA;&lt;p&gt;If the &lt;code&gt;FluxComponent&lt;/code&gt;&#39;s &lt;code&gt;Store&lt;/code&gt; is actually a complex object containing multiple &lt;code&gt;Stores&lt;/code&gt; (each &lt;code&gt;trigger&lt;/code&gt; independently), the component&#39;s &lt;code&gt;redrawOn&lt;/code&gt; list can be overridden to confine re-rendering to &lt;code&gt;trigger&lt;/code&gt; dispatches that originate from specific sub-stores.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;FluxComponent&lt;/code&gt;&#39;s &lt;code&gt;getStoreHandlers&lt;/code&gt; method can be used to register more fine grained &lt;code&gt;Store&lt;/code&gt; &lt;code&gt;trigger&lt;/code&gt; handling if necessary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:react/react.dart&#39; as react;&#xA;import &#39;package:w_flux/w_flux.dart&#39;;&#xA;&#xA;class ComplexStore {&#xA;  ThisStore thisOne = new ThisStore();&#xA;  ThatStore thatOne = new ThatStore();&#xA;  OtherStore otherOne = new OtherStore();&#xA;}&#xA;&#xA;var ComplexComponent = react.registerComponent(() =&amp;gt; new _ComplexComponent());&#xA;class _ComplexComponent extends FluxComponent&amp;lt;ComplexActions, ComplexStore&amp;gt; {&#xA;&#xA;  // re-render will automatically be initiated in response to triggers from these two stores&#xA;  // (e.g. no rendering will occur on store.otherOne triggers)&#xA;  redrawOn() =&amp;gt; [store.thisOne, store.thatOne];&#xA;&#xA;  // whenever store.otherOne triggers, the _handleOtherTrigger method will be executed&#xA;  // (no rendering is triggered)&#xA;  getStoreHandlers() =&amp;gt; {store.otherOne: _handleOtherTrigger};&#xA;&#xA;  _handleOtherTrigger(otherStore) {&#xA;    // decide whether to re-render based on some criteria&#xA;    if (otherStore.isReady) {&#xA;      // manually initiate re-render of this component&#xA;      redraw();&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;over_react&lt;/code&gt; FluxUiComponent&lt;/h3&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;https://github.com/Workiva/over_react&#34;&gt;&lt;code&gt;over_react&lt;/code&gt; package&lt;/a&gt; to build UI components, they offer a strongly-typed version of the &#34;flux component&#34; pattern shown above.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/workiva/over_react#flux-component-boilerplate&#34;&gt;https://github.com/workiva/over_react#flux-component-boilerplate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Simple examples of &lt;code&gt;w_flux&lt;/code&gt; usage can be found in the &lt;code&gt;example&lt;/code&gt; directory. The example &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/w_flux/master/example/README.md&#34;&gt;README&lt;/a&gt; includes instructions for building / running them.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;External Consumption&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;w_flux&lt;/code&gt; implements a uni-directional data flow within an isolated application or code module. If &lt;code&gt;w_flux&lt;/code&gt; is used as the internal architecture of a library, this internal data flow should be considered when defining the external API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;External API methods intended to mutate internal state should dispatch &lt;code&gt;Actions&lt;/code&gt;, just like any internal user interaction.&lt;/li&gt; &#xA; &lt;li&gt;External API methods intended to query internal state should leverage the existing read-only &lt;code&gt;Store&lt;/code&gt; getter methods.&lt;/li&gt; &#xA; &lt;li&gt;External API streams intended to notify the consumer about internal state changes should be dispatched from the internal &lt;code&gt;Stores&lt;/code&gt;, similar to their &lt;code&gt;triggers&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Factory constructors for useful &#39;root&#39; &lt;code&gt;FluxComponents&lt;/code&gt; can be exposed publicly for use in external react-dart based rendering hierarchies. These react components can be internally initialized with the &lt;code&gt;Actions&lt;/code&gt; and &lt;code&gt;Stores&lt;/code&gt; needed for normal operation without inadvertently exposing them externally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Workiva/w_module&#34;&gt;w_module&lt;/a&gt; is a Dart library that defines a standard code module API that can be used seamlessly with &lt;code&gt;w_flux&lt;/code&gt; internals to satisfy the above recommendations (complete with examples).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;This project leverages &lt;a href=&#34;https://github.com/Workiva/dart_dev&#34;&gt;the dart_dev package&lt;/a&gt; for most of its tooling needs, including static analysis, code formatting, running tests, collecting coverage, and serving examples. Check out the dart_dev readme for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kronos-et-al/MensaApp</title>
    <updated>2023-11-11T02:28:00Z</updated>
    <id>tag:github.com,2023-11-11:/kronos-et-al/MensaApp</id>
    <link href="https://github.com/kronos-et-al/MensaApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Application for communication and collective exchange of menu information in university catering facilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🥘 MensaApp&lt;/h1&gt; &#xA;&lt;!-- [![Build-Android](https://github.com/kronos-et-al/MensaApp/actions/workflows/main.yml/badge.svg)](https://github.com/kronos-et-al/MensaApp/actions/workflows/main.yml)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kronos-et-al/MensaApp/actions/workflows/rust.yml&#34;&gt;&lt;img src=&#34;https://github.com/kronos-et-al/MensaApp/actions/workflows/rust.yml/badge.svg?sanitize=true&#34; alt=&#34;Build-Rust&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kronos-et-al/MensaApp/pkgs/container/mensa-app&#34;&gt;&lt;img src=&#34;https://ghcr-badge.egpl.dev/kronos-et-al/mensa-app/size?color=%2344cc11&amp;amp;tag=latest&amp;amp;label=docker+image+size&amp;amp;trim=&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/kronos-et-al/MensaApp&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/kronos-et-al/MensaApp/branch/main/graph/badge.svg?token=2CZXSPAP48&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kronos-et-al/MensaApp/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kronos-et-al/MensaApp/releases&#34;&gt;&lt;img src=&#34;https://shields.io/github/v/release/kronos-et-al/MensaApp&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kronos-et-al/MensaApp/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/kronos-et-al/MensaApp&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=de.mensa_ka.app&amp;amp;pli=1&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; width=&#34;100em/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/us/app/mensa-ka/id6464076864&#34;&gt;&lt;img style=&#34;padding: 6px&#34; alt=&#34;Download on the App Store&#34; src=&#34;doc\img\Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg&#34; height=&#34;26em/&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Application for communication and collective exchange of menu information in university catering facilities.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal of this application is to provide easy access to the meal plans of the canteens of the &lt;a href=&#34;https://www.sw-ka.de/de/hochschulgastronomie/speiseplan&#34;&gt;Studierendenwerk Karlsruhe&lt;/a&gt; providing an Android and iOS app and a GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/doc/img/gallery_view.png&#34; alt=&#34;gallery view&#34; width=&#34;25%/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/doc/img/list_view.png&#34; alt=&#34;list view&#34; width=&#34;25%/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/doc/img/favorites.png&#34; alt=&#34;favorites&#34; width=&#34;25%/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/doc/img/detail_view.png&#34; alt=&#34;meal detail view&#34; width=&#34;25%/&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access meal plans for all canteens of the Studierendenwerk Karlsruhe in Karlsruhe and Pforzheim (Germany)&lt;/li&gt; &#xA; &lt;li&gt;View and add images to meal to better judge what you want to eat&lt;/li&gt; &#xA; &lt;li&gt;Rate meals to help others decide on their lunch&lt;/li&gt; &#xA; &lt;li&gt;View prices for students, employees, pupils and guests&lt;/li&gt; &#xA; &lt;li&gt;Filter meals by type (vegetarian, vegan, ...), price, allergens and more&lt;/li&gt; &#xA; &lt;li&gt;Choose your way of life: light or dark mode&lt;/li&gt; &#xA; &lt;li&gt;Mark meals as favorites to highlight them locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;This app is available on Google Play for Android and the App Store for iOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=de.mensa_ka.app&amp;amp;pli=1&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt;&lt;img alt=&#34;Get it on Google Play&#34; src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; height=&#34;80em/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/us/app/mensa-ka/id6464076864&#34;&gt;&lt;img style=&#34;padding: 13px&#34; alt=&#34;Download on the App Store&#34; src=&#34;doc\img\Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg&#34; height=&#34;53em/&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Integrate&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to integrate our api in your own application. You can access it at &lt;a href=&#34;https://api.mensa-ka.de&#34;&gt;&lt;code&gt;https://api.mensa-ka.de&lt;/code&gt;&lt;/a&gt;. For now, you can only use graphql queries (and no mutations) because they require authentication with an api key (see &lt;a href=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/doc/ApiAuth.md&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/doc/img/architecture.svg?sanitize=true&#34; alt=&#34;architecture&#34;&gt; This application consists of a &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt; app (see &lt;a href=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/app/README.md&#34;&gt;app&lt;/a&gt;) and a &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; server (see &lt;a href=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/backend/README.md&#34;&gt;backend&lt;/a&gt;). They communicate using a &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt; API and the backend stores its data in a &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; database. For more details on these parts, see their readmes in the sub-folders.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;We developed this project as part of the &#34;Praxis der Softwareentwicklung&#34; course, part of the &lt;a href=&#34;https://www.kit.edu/english&#34;&gt;KIT&lt;/a&gt; bachelor&#39;s degree program in computer science.&lt;/p&gt; &#xA;&lt;h2&gt;License &amp;amp; Legal&lt;/h2&gt; &#xA;&lt;p&gt;This application is available under the MIT license (see &lt;a href=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;). This excludes example data from the website of the Studierendenwerk Karlsruhe in &lt;code&gt;backend/src/layer/data/swka_parser/test_data&lt;/code&gt; for which all rights lie at the Studierendenwerk Karlsruhe and its partners.&lt;/p&gt; &#xA;&lt;p&gt;This project is neither affiliated with nor endorsed by the Studierendenwerk Karlsruhe.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kronos-et-al/MensaApp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>