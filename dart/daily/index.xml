<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-05T01:32:56Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>S-ecki/AdventOfCode-Starter-Dart</title>
    <updated>2022-12-05T01:32:56Z</updated>
    <id>tag:github.com,2022-12-05:/S-ecki/AdventOfCode-Starter-Dart</id>
    <link href="https://github.com/S-ecki/AdventOfCode-Starter-Dart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A starter project for Advent of Code in the language Dart, including automatic input download, parsing and boilerplate creation.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.kindpng.com/picc/m/176-1766554_dart-programming-language-logo-hd-png-download.png&#34; width=&#34;160&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;AdventOfCode-Starter-Darts&lt;/h1&gt; &#xA;&lt;p&gt;This is a Starter project for &lt;a href=&#34;https://adventofcode.com/2022&#34;&gt;AdventOfCode&lt;/a&gt;, written in &lt;code&gt;Dart&lt;/code&gt;. Feel free to use it for your own adventures with the christmas-themed puzzles!&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;The code is commented abundantly, but you can find an overview about the features here as well.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Please visit the &lt;a href=&#34;https://adventofcode.com/2022&#34;&gt;AdventOfCode&lt;/a&gt; site and log in. After that, get your cookie from the browser, and add it to the day_generator.dart file´s &lt;code&gt;session&lt;/code&gt; variable. This will allow the script to populate your input file.&lt;/p&gt; &#xA;&lt;h3&gt;Boilterplate Generation&lt;/h3&gt; &#xA;&lt;p&gt;In the root of your directory, run &lt;code&gt;dart run day_generator.dart &amp;lt;day&amp;gt;&lt;/code&gt; &lt;br&gt; This will create an input file and a solution file with all the needed boilerplate to have a quick start. It also adds the solution to the corresponding index file, so the solution get imported into &lt;code&gt;main&lt;/code&gt; automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Main&lt;/h3&gt; &#xA;&lt;p&gt;To add a new solution, all you have to do is add &lt;code&gt;DayXX()&lt;/code&gt; to the &lt;code&gt;day&lt;/code&gt; List. Running main automatically prints either all your solutions, or just the last one, depending on your settings.&lt;/p&gt; &#xA;&lt;p&gt;You can run the main file by running &lt;code&gt;dart run main.dart&lt;/code&gt; or &lt;code&gt;dart main.dart&lt;/code&gt; in the root of your directory. By default the main file will only show the last solution. If you want to see all of them, you can use the &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; flag. You can list all the command line arguments by using the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;Generic Day&lt;/h3&gt; &#xA;&lt;p&gt;The abstract class all individual days subclass from. When constructed with the correct &lt;code&gt;day&lt;/code&gt;, it automatically ready the corresponding input file and provides it with the &lt;code&gt;InputUtil&lt;/code&gt;. To access it, just call &lt;code&gt;input&lt;/code&gt; inside your class.&lt;/p&gt; &#xA;&lt;h3&gt;Input Util&lt;/h3&gt; &#xA;&lt;p&gt;Automatically reads the input files and provides different methods to parse it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.asString&lt;/code&gt; to get the whole input as a single String&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.getPerLine()&lt;/code&gt; splits on &lt;code&gt;\n&lt;/code&gt; characters, returning a List with single lines as elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.getPerWhitespace()&lt;/code&gt; splits on &lt;code&gt;\s&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt;, essentially returning a List with all the single characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.getBy(pattern)&lt;/code&gt; lets you define your own split logic. It essentially calls Dart´s native &lt;code&gt;.split(pattern)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parse Util&lt;/h3&gt; &#xA;&lt;p&gt;A place to store useful parsing operations, like creating a &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; from a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;. There will be a lot of opportunities during AoC for you to extend this.&lt;/p&gt; &#xA;&lt;h3&gt;Field Class&lt;/h3&gt; &#xA;&lt;p&gt;A helper class for 2D data, as often present in AoC. Any data can be respresented. For Integers specifically, there are convenience methods in &lt;code&gt;IntegerField&lt;/code&gt;. For all available methods, have a look at the abundantly-documented code.&lt;/p&gt; &#xA;&lt;h3&gt;Naming conventions&lt;/h3&gt; &#xA;&lt;p&gt;When using the Boilerplate generator, everything is done for you automatically. However, if you create a solution or input file by yourself: make sure it has a 2-digit number. Concretely, pad days 1-9 as &lt;code&gt;Day01.dart&lt;/code&gt; for solutions and &lt;code&gt;aoc01.txt&lt;/code&gt; for input.&lt;/p&gt; &#xA;&lt;h3&gt;Helper Packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tuple&lt;/strong&gt; enables operations on pairs/triplets etc of any type. Absolutely needed for most of the puzzles. &lt;strong&gt;Collection&lt;/strong&gt; provides many methods for ...collections... Most importantly, a &lt;code&gt;groupBy&lt;/code&gt; and a collection equality interface. &lt;strong&gt;Quiver&lt;/strong&gt; is an awesome toolbox of helper methods for Dart. We mostly use &lt;code&gt;/iterables&lt;/code&gt; (similar to Pythons &lt;code&gt;itertools&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributing is greatly appreciated, just fork this project and create a Pull Request, or open an Issue!&lt;/p&gt; &#xA;&lt;h1&gt;Happy Holidays!&lt;/h1&gt; &#xA;&lt;img src=&#34;https://blogs.sap.com/wp-content/uploads/2020/11/EkaoQQTXEAMA4BN.jpg&#34;&gt;</summary>
  </entry>
</feed>