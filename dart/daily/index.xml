<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-13T01:31:55Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KRTirtho/wives</title>
    <updated>2022-12-13T01:31:55Z</updated>
    <id>tag:github.com,2022-12-13:/KRTirtho/wives</id>
    <link href="https://github.com/KRTirtho/wives" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A beautiful, modern &amp; feature-rich Terminal Emulator&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300px&#34; src=&#34;https://raw.githubusercontent.com/KRTirtho/wives/main/assets/logo.svg?sanitize=true&#34; alt=&#34;Wives Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Wives - A Flutter based Terminal&lt;/h1&gt; &#xA;&lt;p&gt;Want a beautiful cross-platform terminal but don&#39;t want to sacrifice performance? Then Wives is the terminal you&#39;re looking for&lt;/p&gt; &#xA;&lt;h2&gt;Features Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beautiful UI, fast, fluent and smooth experience&lt;/li&gt; &#xA; &lt;li&gt;Efficient, small in size and low memory usage&lt;/li&gt; &#xA; &lt;li&gt;Cross platform (Linux, macOS, Windows)&lt;/li&gt; &#xA; &lt;li&gt;Infinite split terminals for each tab&lt;/li&gt; &#xA; &lt;li&gt;Modern Command Palette for quick access to commands/functionalities instead of grandpa&#39;s (traditional) title bar action menus&lt;/li&gt; &#xA; &lt;li&gt;Flexible and predictable keyboard shortcuts (similar to vscode)&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Editable Keyboard shortcuts&lt;/li&gt; &#xA;   &lt;li&gt;Huge collection of color schemes for both terminal and app UI&lt;/li&gt; &#xA;   &lt;li&gt;Categorized Dark and Light Themes&lt;/li&gt; &#xA;   &lt;li&gt;Built-in fonts so you don&#39;t have mess around and find out the best monospace/fixed-width font for your terminal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Switch to other shells on the fly&lt;/li&gt; &#xA; &lt;li&gt;Extensions support (WIP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KRTirtho/wives/main/assets/showcase/1.png&#34; alt=&#34;Screenshot One&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KRTirtho/wives/main/assets/showcase/2.png&#34; alt=&#34;Screenshot Two&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KRTirtho/wives/main/assets/showcase/3.png&#34; alt=&#34;Screenshot Three&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why this name?&lt;/h2&gt; &#xA;&lt;p&gt;At first I named it &#34;wives&#34; to troll &#34;toxic part&#34; of linux community and the troll was successful. Plus, there&#39;s no value in keep trolling those toxic worthless, pathetic, losers.&lt;/p&gt; &#xA;&lt;p&gt;But for real,&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;It&#39;s a tribute to all those passionate women/mom programmers who also work hard but most of the time neglected.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KRTirtho/wives/main/LICENSE&#34;&gt;GPL&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abuanwar072/Build-an-Animated-App-with-Rive-and-Flutter</title>
    <updated>2022-12-13T01:31:55Z</updated>
    <id>tag:github.com,2022-12-13:/abuanwar072/Build-an-Animated-App-with-Rive-and-Flutter</id>
    <link href="https://github.com/abuanwar072/Build-an-Animated-App-with-Rive-and-Flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Animated App with Rive and Flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fonts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Poppins &lt;a href=&#34;https://fonts.google.com/specimen/Poppins&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtu.be/Td3xEWwRAQA&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Hello, welcome to my new Flutter series focused entirely on animation. This is the app we are planning to build. As you can see a beautiful background animation using shapes and blur. As well as a cool button animation. Once we tap on the sign-in button a loading animation shows. If there is any error it shows an error animation. It will load and have a success animation with confetti if everything is okay. Also on the bottom navigation bar, we have animated icons that really make your app design stand out more.&lt;/p&gt; &#xA;&lt;p&gt;So, what is really surprising about this is that we&#39;re using animated assets, which means that these icon animations are not made in code. Instead, they&#39;re made in Rive which is a really cool animation tool that lets you create animated assets for your website, iOS, Android, and most importantly Flutter.&lt;/p&gt; &#xA;&lt;h3&gt;Animated App with Rive and Flutter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Build-an-Animated-App-with-Rive-and-Flutter/main/gif.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Build-an-Animated-App-with-Rive-and-Flutter/main/ui.png&#34; alt=&#34;App UI&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>altogic/altogic-flutter</title>
    <updated>2022-12-13T01:31:55Z</updated>
    <id>tag:github.com,2022-12-13:/altogic/altogic-flutter</id>
    <link href="https://github.com/altogic/altogic-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Altogic flutter library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Altogic Dart&lt;/h1&gt; &#xA;&lt;p&gt;Altogic Dart is a Dart client for the Altogic Client Library. It provides access to all the functionality of the Altogic Client Library.&lt;/p&gt; &#xA;&lt;p&gt;This package includes some Flutter dependencies in addition to the &lt;a href=&#34;https://pub.dev/packages/altogic_dart&#34;&gt;altogic_dart&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;This &lt;a href=&#34;https://pub.dev/packages/altogic_dart&#34;&gt;altogic client library guide&lt;/a&gt; will show you how to use the key modules of the client library to execute commands in your backend app. For more in-depth coverage, see the &lt;a href=&#34;https://pub.dev/documentation/altogic_dart/latest/&#34;&gt;Client API reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Flutter Guides / Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can see the authentication basics with &lt;a href=&#34;https://www.altogic.com/client/quick-start-authentication/with-flutter&#34;&gt;Quickstart Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can try all methods and see the code blocks in the &lt;a href=&#34;https://altogic-flutter-example.netlify.app&#34;&gt;Example/Test Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Also you can see the basics with the &lt;a href=&#34;https://github.com/altogic/altogic/tree/main/dart_examples/quickstart_todo&#34;&gt;Example TO-DO Application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Additional Functionalities&lt;/h1&gt; &#xA;&lt;h2&gt;Default Local Storage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AltogicClient&lt;/code&gt; needs a local storage implementation to hold sessions and user information. This package provides a default local storage implementation that uses the &lt;a href=&#34;https://pub.dev/packages/shared_preferences&#34;&gt;shared_preferences&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:altogic_dart_flutter/altogic_dart_flutter.dart&#39;;&#xA;&#xA;final altogic = createClient(&#xA;    &#39;your env url&#39;,&#xA;    &#39;your client key&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto Open Sign In With Provider URLs&lt;/h2&gt; &#xA;&lt;p&gt;AltogicClient can open sign-in with provider URLs automatically. You can use the &lt;code&gt;AuthManager.signInWithProvider&lt;/code&gt; method to open sign-in with provider URLs directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;altogic.auth.signInWithProvider(&#39;google&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handle Redirect URLs&lt;/h2&gt; &#xA;&lt;p&gt;In many authentication flows/operations, Altogic redirects your user to a specific URL.&lt;/p&gt; &#xA;&lt;p&gt;For example, oAuth2 flow after the user signed in with the provider sign-in page, Altogic redirects the user to the redirect URL you specified in the Altogic Designer &amp;gt; App Settings &amp;gt; Authentication.&lt;/p&gt; &#xA;&lt;p&gt;You can handle redirect URLs on websites by getting which path opens the site.&lt;/p&gt; &#xA;&lt;p&gt;You can use deep linking in mobile or desktop applications to open the application from a redirect URL.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://altogic.com/client/guides/authentication/handling-auth-deep-links&#34;&gt;Deep Linking Configuration&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h3&gt;AltogicState&lt;/h3&gt; &#xA;&lt;p&gt;If you use &#34;AltogicState&#34; at the root of the application, the &#34;AltogicState&#34; will be &#34;mounted&#34; throughout the application lifecycle. Thus, we can listen to the deep links when the application is resumed or launched with a deep link.&lt;/p&gt; &#xA;&lt;p&gt;When the application opens by a deep link, &lt;code&gt;AltogicState&lt;/code&gt; cannot synchronously inform you about the deep link. Instead, you can override methods to be called when a deep link opens the application.&lt;/p&gt; &#xA;&lt;p&gt;Available methods to override: &lt;code&gt;onEmailVerificationLink&lt;/code&gt;, &lt;code&gt;onMagicLink&lt;/code&gt;, &lt;code&gt;onOauthProviderLink&lt;/code&gt;, &lt;code&gt;onEmailChangeLink&lt;/code&gt;, &lt;code&gt;onPasswordResetLink&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AltogicState provides a getter named &lt;code&gt;navigatorObserver&lt;/code&gt; to observe navigation events. You can use &lt;code&gt;BuildContext&lt;/code&gt; as the parameter for deep linking methods. If you use navigatorObserver, e.g., &lt;code&gt;onMagicLink&lt;/code&gt; called with context; otherwise, &lt;code&gt;BuildContext&lt;/code&gt; will be null for these methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;class AltogicAuthExampleApp extends StatefulWidget {&#xA;  const AltogicAuthExampleApp({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  State&amp;lt;AltogicAuthExampleApp&amp;gt; createState() =&amp;gt; _AltogicAuthExampleAppState();&#xA;}&#xA;&#xA;class _AltogicAuthExampleAppState extends AltogicState&amp;lt;AltogicAuthExampleApp&amp;gt; {&#xA;  @override&#xA;  void onEmailVerificationLink(BuildContext? context, EmailVerificationRedirect redirect) {&#xA;    // Handle email verification link&#xA;  }&#xA;&#xA;  @override&#xA;  void onMagicLink(BuildContext? context, MagicLinkRedirect redirect) {&#xA;    // Handle magic link&#xA;  }&#xA;&#xA;  @override&#xA;  void onPasswordResetLink(BuildContext? context, PasswordResetRedirect redirect) {&#xA;    // Handle password reset link&#xA;  }&#xA;&#xA;  @override&#xA;  void onEmailChangeLink(BuildContext? context, ChangeEmailRedirect redirect) {&#xA;    // Handle email change link&#xA;  }&#xA;&#xA;  @override&#xA;  void onOauthProviderLink(BuildContext? context, OauthRedirect redirect) {&#xA;    // Handle oauth provider link&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      navigatorObservers: [navigatorObserver],&#xA;      // ...&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When Application Not Running&lt;/h3&gt; &#xA;&lt;p&gt;Generally, in the first run of the application, many developers show a splash screen. In this case, the application is launched with a deep link, &lt;code&gt;AuthState.onX&lt;/code&gt; methods are triggered, and maybe the user is navigated to another page from the triggered method. Also, the splash screen will try to navigate to another page. This case causes a conflict.&lt;/p&gt; &#xA;&lt;p&gt;To avoid this conflict, you can use &lt;code&gt;AltogicState.applicationInitialRedirect&lt;/code&gt; static getter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; init() async {&#xA;  // Check if the application was launched with a deep link&#xA;  var launchedRedirect = await AltogicState.applicationInitialRedirect;&#xA;  if (launchedRedirect != null) {&#xA;    return;&#xA;  }&#xA;  // navigate now&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can use the &lt;code&gt;AltogicState.applicationInitialRedirect&lt;/code&gt; getter instead of the &lt;code&gt;AltogicState.onX&lt;/code&gt; methods. But you have to listen to ApplicationLifecycle events manually to handle deep links.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Restore Auth Session&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;AltogicClient&lt;/code&gt; can restore the session from local storage. To do this, you can use the &lt;code&gt;AltogicClient.restoreAuthSession&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If the application is not running and launched with a deep link, the &lt;code&gt;restoreAuthSession&lt;/code&gt; method checks if the application launched with a deep-link. If the application opens with a deep-link, the &lt;code&gt;restoreAuthSession&lt;/code&gt; method will not restore the session from local storage. (Necessary to avoid conflicts)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await altogic.restoreAuthSession();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following resources to learn more and get help&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://www.altogic.com/docs/quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.altogic.com/docs&#34;&gt;Altogic Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💬 &lt;a href=&#34;https://discord.gg/ERK2ssumh8&#34;&gt;Discord community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📰 &lt;a href=&#34;https://community.altogic.com&#34;&gt;Discussion forums&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bugs Report&lt;/h2&gt; &#xA;&lt;p&gt;Think you’ve found a bug? Please, send us an email &lt;a href=&#34;mailto:support@altogic.com&#34;&gt;support@altogic.com&lt;/a&gt; or open issue on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/altogic/altogic-dart&#34;&gt;&lt;code&gt;altogic_dart&lt;/code&gt; package repository&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/altogic/altogic-flutter&#34;&gt;&lt;code&gt;altogic&lt;/code&gt; package repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support / Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For issues with, questions about, feedback for the client library, or want to see a new feature please, send us an email &lt;a href=&#34;mailto:support@altogic.com&#34;&gt;support@altogic.com&lt;/a&gt; or reach out to our &lt;a href=&#34;https://community.altogic.com&#34;&gt;community forums&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>