<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:32:26Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tensorflow/flutter-tflite</title>
    <updated>2023-04-30T01:32:26Z</updated>
    <id>tag:github.com,2023-04-30:/tensorflow/flutter-tflite</id>
    <link href="https://github.com/tensorflow/flutter-tflite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://github.com/am15h/tflite_flutter_plugin/raw/update_readme/docs/tflite_flutter_cover.png&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://flutter.dev&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-Flutter-02569B?logo=flutter&#34; alt=&#34;Platform&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/tflite_flutter&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/tflite_flutter.svg?sanitize=true&#34; alt=&#34;Pub Package&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pub.dev/documentation/tflite_flutter/latest/tflite_flutter/tflite_flutter-library.html&#34;&gt; &lt;img alt=&#34;Docs&#34; src=&#34;https://readthedocs.org/projects/hubdb/badge/?version=latest&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt;  &lt;/p&gt; &#xA;&lt;h2&gt;Announcement&lt;/h2&gt; &#xA;&lt;p&gt;Update: 26 April, 2023&lt;/p&gt; &#xA;&lt;p&gt;This repo is a TensorFlow managed fork of the &lt;a href=&#34;https://github.com/am15h/tflite_flutter_plugin&#34;&gt;tflite_flutter_plugin&lt;/a&gt; project by the amazing Amish Garg. The goal of this project is to support our Flutter community in creating machine-learning backed apps with the TensorFlow Lite framework.&lt;/p&gt; &#xA;&lt;p&gt;This project is currently a work-in-progress as we update it to create a working plugin that meets the latest and greatest Flutter and TensorFlow Lite standards. That said, &lt;em&gt;pull requests and contributions are more than welcome&lt;/em&gt; and will be reviewed by TensorFlow or Flutter team members. We thank you for your understanding as we make progress on this update.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to reach out to me with questions until then.&lt;/p&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:ptruiz@google.com&#34;&gt;ptruiz@google.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;TensorFlow Lite Flutter plugin provides a flexible and fast solution for accessing TensorFlow Lite interpreter and performing inference. The API is similar to the TFLite Java and Swift APIs. It directly binds to TFLite C API making it efficient (low-latency). Offers acceleration support using NNAPI, GPU delegates on Android, Metal and CoreML delegates on iOS, and XNNPack delegate on Desktop platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-platform Support for Android and iOS&lt;/li&gt; &#xA; &lt;li&gt;Flexibility to use any TFLite Model.&lt;/li&gt; &#xA; &lt;li&gt;Acceleration using multi-threading.&lt;/li&gt; &#xA; &lt;li&gt;Similar structure as TensorFlow Lite Java API.&lt;/li&gt; &#xA; &lt;li&gt;Inference speeds close to native Android Apps built using the Java API.&lt;/li&gt; &#xA; &lt;li&gt;Run inference in different isolates to prevent jank in UI thread.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;(Important) Initial setup : Add dynamic libraries to your app&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Copy the folders from &lt;a href=&#34;https://github.com/tensorflow/flutter-tflite/tree/main/releases/download/android&#34;&gt;https://github.com/tensorflow/flutter-tflite/tree/main/releases/download/android&lt;/a&gt; into your project&#39;s /android/app/src/main/jniLibs directory.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;TODO: Sample now works, info soon&lt;/p&gt; &#xA;&lt;h2&gt;TFLite Flutter Helper Library&lt;/h2&gt; &#xA;&lt;p&gt;The helper library has been deprecated. New development underway for a replacement at &lt;a href=&#34;https://github.com/google/flutter-mediapipe&#34;&gt;https://github.com/google/flutter-mediapipe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Import&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:tflite_flutter/tflite_flutter.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Creating the Interpreter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;From asset&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Place &lt;code&gt;your_model.tflite&lt;/code&gt; in &lt;code&gt;assets&lt;/code&gt; directory. Make sure to include assets in &lt;code&gt;pubspec.yaml&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final interpreter = await tfl.Interpreter.fromAsset(&#39;your_model.tflite&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Refer to the documentation for info on creating interpreter from buffer or file.&lt;/p&gt; &#xA;&lt;h3&gt;Performing inference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;For single input and output&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;void run(Object input, Object output)&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// For ex: if input tensor shape [1,5] and type is float32&#xA;var input = [[1.23, 6.54, 7.81, 3.21, 2.22]];&#xA;&#xA;// if output tensor shape [1,2] and type is float32&#xA;var output = List.filled(1*2, 0).reshape([1,2]);&#xA;&#xA;// inference&#xA;interpreter.run(input, output);&#xA;&#xA;// print the output&#xA;print(output);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;For multiple inputs and outputs&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;void runForMultipleInputs(List&amp;lt;Object&amp;gt; inputs, Map&amp;lt;int, Object&amp;gt; outputs)&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var input0 = [1.23];  &#xA;var input1 = [2.43];  &#xA;&#xA;// input: List&amp;lt;Object&amp;gt;&#xA;var inputs = [input0, input1, input0, input1];  &#xA;&#xA;var output0 = List&amp;lt;double&amp;gt;.filled(1, 0);  &#xA;var output1 = List&amp;lt;double&amp;gt;.filled(1, 0);&#xA;&#xA;// output: Map&amp;lt;int, Object&amp;gt;&#xA;var outputs = {0: output0, 1: output1};&#xA;&#xA;// inference  &#xA;interpreter.runForMultipleInputs(inputs, outputs);&#xA;&#xA;// print outputs&#xA;print(outputs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Closing the interpreter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;interpreter.close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer &lt;a href=&#34;https://github.com/tensorflow/flutter-tflite/raw/main/example/integration_test/tflite_flutter_test.dart&#34;&gt;Tests&lt;/a&gt; to see more example code for each method.&lt;/p&gt;</summary>
  </entry>
</feed>