<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-05T01:33:59Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>h65wang/flutter_interview_questions</title>
    <updated>2023-07-05T01:33:59Z</updated>
    <id>tag:github.com,2023-07-05:/h65wang/flutter_interview_questions</id>
    <link href="https://github.com/h65wang/flutter_interview_questions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Interview Questions&lt;/h1&gt; &#xA;&lt;p&gt;As Flutter is still considered a relatively new technology, it&#39;s not uncommon for job seeker to encounter some &#34;less professional&#34; interview questions when applying.&lt;/p&gt; &#xA;&lt;p&gt;So what you&#39;re seeing here, is an attempt to improve this situation.&lt;/p&gt; &#xA;&lt;p&gt;I typically do live broadcasts on various topics on Flutter, so in the upcoming days, I will discuss with my audience (which are some of the most experienced Flutter developers and community contributors), and write down some what we think are higher-quality Flutter interview questions, in the hope that this would be proven useful to Flutter learners to assess their knowledge.&lt;/p&gt; &#xA;&lt;p&gt;Initially, we will use Markdown documents to record the questions. The plan is to develop a question-and-answer platform using Flutter in the next a few days or weeks, which will make it easier for everyone to use, as well as contributing more questions and answers.&lt;/p&gt; &#xA;&lt;p&gt;These questions will be tagged based on their topics. As the question pool gradually becomes more comprehensive, we can come up with an algorithm for the question selection mechanism, so that it can pick questions from different tags. For example, it can pick two questions on animations, three on syntax, another two on layouts, and so on.&lt;/p&gt; &#xA;&lt;p&gt;This project will support multiple languages, but due to my limited abilities, I can only personally provide content in Chinese and English. For the rest, we may need to rely on community support or modern tools like GPT for translation.&lt;/p&gt; &#xA;&lt;h1&gt;Flutter面试题&lt;/h1&gt; &#xA;&lt;p&gt;由于Flutter还算是一个相对新的技术，相信大家在面试Flutter岗位时，经常会遇到一些不太专业的面试题。&lt;/p&gt; &#xA;&lt;p&gt;所以你现在看到的是一个试图改善这个窘境的新坑。&lt;/p&gt; &#xA;&lt;p&gt;我会在直播的时候和大家一起讨论一些我们认为比较高质量的Flutter面试题并记录下来，同时也方便大家学习知识以及查漏补缺。&lt;/p&gt; &#xA;&lt;p&gt;一开始我们会用md文档记录，过几天打算用Flutter做一个问答平台，方便大家出题和答题。&lt;/p&gt; &#xA;&lt;p&gt;这些问题会根据话题打上相应的标签，这样当题库逐渐丰富起来之后，出题机就可以从不同标签里抽选题目。例如2题动画，3题语法，2题布局，等等。&lt;/p&gt; &#xA;&lt;p&gt;该项目会支持多语言，但因本人能力有限，只能亲自提供中文和英文的题库，剩下的恐怕需要借助社区或GPT等现代工具完成翻译。&lt;/p&gt; &#xA;&lt;h1&gt;Questions (draft)&lt;/h1&gt; &#xA;&lt;p&gt;The following questions came from the first session of live broadcast earlier today.&lt;/p&gt; &#xA;&lt;p&gt;以下是首次直播时记录下来的问题草稿（都是关于动画的）。暂时还没有翻译。&lt;/p&gt; &#xA;&lt;h2&gt;Animation&lt;/h2&gt; &#xA;&lt;p&gt;If you need to declare an AnimationController, you are likely creating:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a stateless widget&lt;/li&gt; &#xA; &lt;li&gt;an implicit animation&lt;/li&gt; &#xA; &lt;li&gt;an explicit animation&lt;/li&gt; &#xA; &lt;li&gt;a AnimatedContainer widget&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 3&lt;/p&gt; &#xA;&lt;p&gt;Which of the following properties of an &lt;code&gt;AnimatedContainer&lt;/code&gt; will NOT get animated when its value is changed?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;child&lt;/li&gt; &#xA; &lt;li&gt;width&lt;/li&gt; &#xA; &lt;li&gt;color&lt;/li&gt; &#xA; &lt;li&gt;padding&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 1&lt;/p&gt; &#xA;&lt;p&gt;If you need to apply fading effect when switching texts on a screen, which of the following widget might be useful:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;AnimatedContainer&lt;/li&gt; &#xA; &lt;li&gt;AnimatedText&lt;/li&gt; &#xA; &lt;li&gt;AnimatedFade&lt;/li&gt; &#xA; &lt;li&gt;AnimatedSwitcher&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 4&lt;/p&gt; &#xA;&lt;p&gt;Which of the following is the default &lt;code&gt;curve&lt;/code&gt; for animation widgets:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Curves.easeOut&lt;/li&gt; &#xA; &lt;li&gt;Curves.linear&lt;/li&gt; &#xA; &lt;li&gt;Curves.easeInOut&lt;/li&gt; &#xA; &lt;li&gt;Curves.ease&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 2&lt;/p&gt; &#xA;&lt;p&gt;Which of the following is not a parameter of &lt;code&gt;TweenAnimationBuilder&lt;/code&gt; widget:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;animation&lt;/li&gt; &#xA; &lt;li&gt;duration&lt;/li&gt; &#xA; &lt;li&gt;builder&lt;/li&gt; &#xA; &lt;li&gt;child&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 1&lt;/p&gt; &#xA;&lt;p&gt;An &lt;code&gt;AnimationController&lt;/code&gt; can be used in a class with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;SingleTickerProviderStateMixin&lt;/li&gt; &#xA; &lt;li&gt;DynamicAnimationControllerMixin&lt;/li&gt; &#xA; &lt;li&gt;TickerAnimationControllerProvider&lt;/li&gt; &#xA; &lt;li&gt;GetTickerBlocStateMixin&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 1&lt;/p&gt; &#xA;&lt;p&gt;Which of the following best describes the purpose of a &lt;code&gt;Tween&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It defines the &lt;code&gt;duration&lt;/code&gt; of an animation.&lt;/li&gt; &#xA; &lt;li&gt;It determines the initial state of an animation.&lt;/li&gt; &#xA; &lt;li&gt;It controls animation values between &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It changes the &lt;code&gt;timing&lt;/code&gt; of an animation loop.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 3&lt;/p&gt; &#xA;&lt;p&gt;Which of the following describes a way to apply transitions to common elements across different screens?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Hero&lt;/code&gt; widgets and specify the same &lt;code&gt;tag&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Hero&lt;/code&gt; widgets and specify different values for &lt;code&gt;tag&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Navigator&lt;/code&gt; widgets and specify the same &lt;code&gt;key&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Navigator&lt;/code&gt; widgets and specify different values for &lt;code&gt;key&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;answer: 1&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kaiteki-Fedi/Kaiteki</title>
    <updated>2023-07-05T01:33:59Z</updated>
    <id>tag:github.com,2023-07-05:/Kaiteki-Fedi/Kaiteki</id>
    <link href="https://github.com/Kaiteki-Fedi/Kaiteki" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The comfy SNS client for everything, everywhere&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/assets/readme-banner.svg?sanitize=true&#34; alt=&#34;Kaiteki&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kaiteki-Fedi/Kaiteki/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/Kaiteki-Fedi/Kaiteki/ci.yml?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/kaiteki-fedi/kaiteki&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/kaiteki-fedi/kaiteki/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Kaiteki-Fedi/Kaiteki&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Kaiteki-Fedi/Kaiteki/branch/master/graph/badge.svg?token=AFWBGW0XE4&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/kaiteki/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/kaiteki/-/kaiteki/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://takoboto.jp/?w=1200120&#34;&gt;快適 (kaiteki)&lt;/a&gt; Fediverse client for microblogging instances, made with &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt; and &lt;a href=&#34;https://dart.dev/&#34;&gt;Dart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently, Kaiteki is still in a &lt;strong&gt;proof-of-concept/alpha stage&lt;/strong&gt;, with simple Mastodon/Pleroma and Misskey support, future backends could follow. See &lt;a href=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/#whats-working-whats-missing&#34;&gt;&#34;What&#39;s working, what&#39;s missing?&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/fastlane/metadata/android/en-US/images/sevenInchScreenshots/0.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/fastlane/metadata/android/en-US/images/sevenInchScreenshots/1.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/fastlane/metadata/android/en-US/images/sevenInchScreenshots/2.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Platforms &amp;amp; Releases&lt;/h2&gt; &#xA;&lt;p&gt;Kaiteki is available for Web, Windows, Linux and Android.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Bi-Weekly&lt;/th&gt; &#xA;   &lt;th&gt;Store&lt;/th&gt; &#xA;   &lt;th&gt;Nightly (dev)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://web.kaiteki.app/&#34;&gt;web.kaiteki.app&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td rowspan=&#34;5&#34;&gt;&lt;a href=&#34;https://nightly.link/Kaiteki-Fedi/Kaiteki/workflows/ci/master&#34;&gt;nightly.link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;td rowspan=&#34;3&#34;&gt;&lt;a href=&#34;https://github.com/Kaiteki-Fedi/Kaiteki/releases&#34;&gt;Releases page&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;(Microsoft Store soon™)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apt.izzysoft.de/fdroid/index/apk/moe.craftplacer.kaiteki&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/.github/IzzyOnDroid.png&#34; alt=&#34;Get it on IzzyOnDroid&#34; height=&#34;64&#34;&gt;&lt;/a&gt; (Google Play soon™)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Kaiteki-Fedi/Kaiteki/issues/177&#34;&gt;Issue #177&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Compiling Kaiteki&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Kaiteki-Fedi/Kaiteki/master/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>justkawal/excel</title>
    <updated>2023-07-05T01:33:59Z</updated>
    <id>tag:github.com,2023-07-05:/justkawal/excel</id>
    <link href="https://github.com/justkawal/excel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Excel Library for Flutter and Dart - https://pub.dev/packages/excel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Excel&lt;/h1&gt; &#xA;&lt;h1&gt;If you find this tool useful! Please drop a ⭐️.&lt;/h1&gt; &#xA;&lt;a href=&#34;https://flutter.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Platform-Flutter-yellow.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/justkawal/excel&#34;&gt; &lt;img src=&#34;https://github.com/justkawal/excel/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://pub.dartlang.org/packages/excel&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/excel.svg?sanitize=true&#34; alt=&#34;Pub Package&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-red.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/justkawal/excel/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/justkawal/excel&#34; alt=&#34;Issue&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/justkawal/excel/network&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/justkawal/excel&#34; alt=&#34;Forks&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/justkawal/excel/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/justkawal/excel&#34; alt=&#34;Stars&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.pub.dev/packages/excel&#34;&gt;Excel&lt;/a&gt; is a flutter and dart library for reading, creating and updating excel-sheets for XLSX files.&lt;/h3&gt; &#xA;&lt;h4&gt;This library is &lt;a href=&#34;https://github.com/justkawal/excel/raw/40b8b1ed8c3c213d8911784ddd40bf97841977a1/LICENSE#L1&#34;&gt;MIT&lt;/a&gt; licensed So, it&#39;s free to use anytime, anywhere without any consent, because we believe in Open Source work.&lt;/h4&gt; &#xA;&lt;h1&gt;Lets Get Started&lt;/h1&gt; &#xA;&lt;h3&gt;1. Depend on it&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your package&#39;s &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  excel: 2.0.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Install it&lt;/h3&gt; &#xA;&lt;p&gt;You can install packages from the command line:&lt;/p&gt; &#xA;&lt;p&gt;with &lt;code&gt;pub&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;$  dart pub add excel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with &lt;code&gt;Flutter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;$  flutter packages get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Import it&lt;/h3&gt; &#xA;&lt;p&gt;Now in your &lt;code&gt;Dart&lt;/code&gt; code, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    import &#39;package:excel/excel.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Breaking Changes for those moving from 1.0.8 and below ----&amp;gt; 1.0.9 and above versions&lt;/h3&gt; &#xA;&lt;p&gt;The necessary changes to be made to updateCell function in order to prevent the code from breaking.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;    excel.updateCell(&#39;SheetName&#39;, CellIndex.indexByString(&#39;A2&#39;), &#39;Here value&#39;, backgroundColorHex: &#39;#1AFF1A&#39;, horizontalAlign: HorizontalAlign.Right);&#xA;&#xA;    // Now in the above code wrap the optional arguments with CellStyle() and pass it to optional cellStyle parameter.&#xA;    // So the resulting code will look like&#xA;&#xA;    excel.updateCell(&#39;SheetName&#39;, CellIndex.indexByString(&#39;A2&#39;), &#39;Here value&#39;, cellStyle: CellStyle( backgroundColorHex: &#39;#1AFF1A&#39;, horizontalAlign: HorizontalAlign.Right ) );&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Imports&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    import &#39;dart:io&#39;;&#xA;    import &#39;package:path/path.dart&#39;;&#xA;    import &#39;package:excel/excel.dart&#39;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Password protected ? &lt;a href=&#34;https://github.com/justkawal/protect.git&#34;&gt;protect&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Protect helps you to apply and remove password protection on your excel file.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read XLSX File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    var file = &#39;Path_to_pre_existing_Excel_File/excel_file.xlsx&#39;;&#xA;    var bytes = File(file).readAsBytesSync();&#xA;    var excel = Excel.decodeBytes(bytes);&#xA;&#xA;    for (var table in excel.tables.keys) {&#xA;      print(table); //sheet Name&#xA;      print(excel.tables[table].maxCols);&#xA;      print(excel.tables[table].maxRows);&#xA;      for (var row in excel.tables[table].rows) {&#xA;        print(&#39;$row&#39;);&#xA;      }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Is your excel file password protected ?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Protect helps you to apply and remove password protection on your excel file.&lt;/code&gt; &lt;a href=&#34;https://github.com/justkawal/protect.git&#34;&gt;protect&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read XLSX in Flutter Web&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;FilePicker&lt;/code&gt; to pick files in Flutter Web. &lt;a href=&#34;https://pub.dev/packages/file_picker.git&#34;&gt;FilePicker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;  /// Use FilePicker to pick files in Flutter Web&#xA;&#xA;  FilePickerResult pickedFile = await FilePicker.platform.pickFiles(&#xA;    type: FileType.custom,&#xA;    allowedExtensions: [&#39;xlsx&#39;],&#xA;    allowMultiple: false,&#xA;  );&#xA;&#xA;  /// file might be picked&#xA;&#xA;  if (pickedFile != null) {&#xA;    var bytes = pickedFile.files.single.bytes;&#xA;    var excel = Excel.decodeBytes(bytes);&#xA;    for (var table in excel.tables.keys) {&#xA;      print(table); //sheet Name&#xA;      print(excel.tables[table].maxCols);&#xA;      print(excel.tables[table].maxRows);&#xA;      for (var row in excel.tables[table].rows) {&#xA;        print(&#39;$row&#39;);&#xA;      }&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read XLSX from Flutter&#39;s Asset Folder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    import &#39;package:flutter/services.dart&#39; show ByteData, rootBundle;&#xA;&#xA;    /* Your ......other important..... code here */&#xA;&#xA;    ByteData data = await rootBundle.load(&#39;assets/existing_excel_file.xlsx&#39;);&#xA;    var bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);&#xA;    var excel = Excel.decodeBytes(bytes);&#xA;&#xA;    for (var table in excel.tables.keys) {&#xA;      print(table); //sheet Name&#xA;      print(excel.tables[table].maxCols);&#xA;      print(excel.tables[table].maxRows);&#xA;      for (var row in excel.tables[table].rows) {&#xA;        print(&#39;$row&#39;);&#xA;      }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create New XLSX File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    var excel = Excel.createExcel(); // automatically creates 1 empty sheet: Sheet1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update Cell values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;     /*&#xA;      * sheetObject.updateCell(cell, value, { CellStyle (Optional)});&#xA;      * sheetObject created by calling - // Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;      * cell can be identified with Cell Address or by 2D array having row and column Index;&#xA;      * Cell Style options are optional&#xA;      */&#xA;&#xA;      Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;&#xA;      CellStyle cellStyle = CellStyle(backgroundColorHex: &#39;#1AFF1A&#39;, fontFamily : getFontFamily(FontFamily.Calibri));&#xA;&#xA;      cellStyle.underline = Underline.Single; // or Underline.Double&#xA;&#xA;&#xA;      var cell = sheetObject.cell(CellIndex.indexByString(&#39;A1&#39;));&#xA;      cell.value = 8; // dynamic values support provided;&#xA;      cell.cellStyle = cellStyle;&#xA;&#xA;      // printing cell-type&#xA;      print(&#39;CellType: &#39;+ cell.cellType.toString());&#xA;&#xA;      ///&#xA;      /// Inserting and removing column and rows&#xA;&#xA;      // insert column at index = 8&#xA;      sheetObject.insertColumn(8);&#xA;&#xA;      // remove column at index = 18&#xA;      sheetObject.removeColumn(18);&#xA;&#xA;      // insert row at index = 82&#xA;      sheetObject.insertRow(82);&#xA;&#xA;      // remove row at index = 80&#xA;      sheetObject.removeRow(80);&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cell-Style Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fontFamily&lt;/td&gt; &#xA;   &lt;td&gt;eg. getFontFamily(&lt;code&gt;FontFamily.Arial&lt;/code&gt;) or getFontFamily(&lt;code&gt;FontFamily.Comic_Sans_MS&lt;/code&gt;) &lt;code&gt;There is total 182 Font Families available for now&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fontSize&lt;/td&gt; &#xA;   &lt;td&gt;specify the font-size as integer eg. fontSize = 15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bold&lt;/td&gt; &#xA;   &lt;td&gt;makes text bold - when set to &lt;code&gt;true&lt;/code&gt;, by-default it is set to &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;italic&lt;/td&gt; &#xA;   &lt;td&gt;makes text italic - when set to &lt;code&gt;true&lt;/code&gt;, by-default it is set to &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;underline&lt;/td&gt; &#xA;   &lt;td&gt;Gives underline to text &lt;code&gt;enum Underline { None, Single, Double }&lt;/code&gt; eg. Underline.Single, by-default it is set to Underline.None&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fontColorHex&lt;/td&gt; &#xA;   &lt;td&gt;Font Color eg. &#39;#0000FF&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rotation (degree)&lt;/td&gt; &#xA;   &lt;td&gt;rotation of text eg. 50, rotation varies from &lt;code&gt;-90 to 90&lt;/code&gt;, with including &lt;code&gt;90&lt;/code&gt; and &lt;code&gt;-90&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;backgroundColorHex&lt;/td&gt; &#xA;   &lt;td&gt;Background color of cell eg. &#39;#faf487&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wrap&lt;/td&gt; &#xA;   &lt;td&gt;Text wrapping &lt;code&gt;enum TextWrapping { WrapText, Clip }&lt;/code&gt; eg. TextWrapping.Clip&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;verticalAlign&lt;/td&gt; &#xA;   &lt;td&gt;align text vertically &lt;code&gt;enum VerticalAlign { Top, Center, Bottom }&lt;/code&gt; eg. VerticalAlign.Top&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;horizontalAlign&lt;/td&gt; &#xA;   &lt;td&gt;align text horizontally &lt;code&gt;enum HorizontalAlign { Left, Center, Right }&lt;/code&gt; eg. HorizontalAlign.Right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;leftBorder&lt;/td&gt; &#xA;   &lt;td&gt;the left border of the cell (see below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rightBorder&lt;/td&gt; &#xA;   &lt;td&gt;the right border of the cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;topBorder&lt;/td&gt; &#xA;   &lt;td&gt;the top border of the cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bottomBorder&lt;/td&gt; &#xA;   &lt;td&gt;the bottom border of the cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;diagonalBorder&lt;/td&gt; &#xA;   &lt;td&gt;the diagonal &#34;border&#34; of the cell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;diagonalBorderUp&lt;/td&gt; &#xA;   &lt;td&gt;boolean value indicating if the diagonal &#34;border&#34; should be displayed on the up diagonal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;diagonalBorderDown&lt;/td&gt; &#xA;   &lt;td&gt;boolean value indicating if the diagonal &#34;border&#34; should be displayed on the down diagonal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Borders&lt;/h3&gt; &#xA;&lt;p&gt;Borders are defined for each side (left, right, top, and bottom) of the cell. Both diagonals (up and down) share the same settings. A boolean value &lt;code&gt;true&lt;/code&gt; must be set to either &lt;code&gt;diagonalBorderUp&lt;/code&gt; or &lt;code&gt;diagonalBorderDown&lt;/code&gt; (or both) to display the desired diagonal.&lt;/p&gt; &#xA;&lt;p&gt;Each border must be a &lt;code&gt;Border&lt;/code&gt; object. This object accepts two parameters : &lt;code&gt;borderStyle&lt;/code&gt; to select one of the different supported styles and &lt;code&gt;borderColorHex&lt;/code&gt; to change the border color.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;borderStyle&lt;/code&gt; must be a value from the enumeration&lt;code&gt;BorderStyle&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.None&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.DashDot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.DashDotDot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Dashed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Dotted&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Hair&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Medium&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.MediumDashDot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.MediumDashDotDot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.MediumDashed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.SlantDashDot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Thick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BorderStyle.Thin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;     /*&#xA;      * &#xA;      * Defines thin borders on the left and right of the cell, red thin border on the top&#xA;      * and blue medium border on the bottom.&#xA;      *&#xA;      */&#xA;&#xA;      CellStyle cellStyle = CellStyle(&#xA;        leftBorder: Border(borderStyle: BorderStyle.Thin),&#xA;        rightBorder: Border(borderStyle: BorderStyle.Thin),&#xA;        topBorder: Border(borderStyle: BorderStyle.Thin, borderColorHex: &#39;FFFF0000&#39;),&#xA;        bottomBorder: Border(borderStyle: BorderStyle.Medium, borderColorHex: &#39;FF0000FF&#39;),&#xA;      );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Make sheet RTL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;     /*&#xA;      * set rtl to true for making sheet to right-to-left&#xA;      * default value of rtl = false ( which means the fresh or default sheet is ltr )&#xA;      *&#xA;      */&#xA;&#xA;      var sheetObject = excel[&#39;SheetName&#39;];&#xA;      sheetObject.rtl = true;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy sheet contents to another sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;     /*&#xA;      * excel.copy(String &#39;existingSheetName&#39;, String &#39;anotherSheetName&#39;);&#xA;      * existingSheetName should exist in excel.tables.keys in order to successfully copy&#xA;      * if anotherSheetName does not exist then it will be automatically created.&#xA;      *&#xA;      */&#xA;&#xA;      excel.copy(&#39;existingSheetName&#39;, &#39;anotherSheetName&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rename sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;     /*&#xA;      * excel.rename(String &#39;existingSheetName&#39;, String &#39;newSheetName&#39;);&#xA;      * existingSheetName should exist in excel.tables.keys in order to successfully rename&#xA;      *&#xA;      */&#xA;&#xA;      excel.rename(&#39;existingSheetName&#39;, &#39;newSheetName&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;     /*&#xA;      * excel.delete(String &#39;existingSheetName&#39;);&#xA;      * (existingSheetName should exist in excel.tables.keys) and (excel.tables.keys.length &amp;gt;= 2), in order to successfully delete.&#xA;      *&#xA;      */&#xA;&#xA;      excel.delete(&#39;existingSheetName&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Link sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;     /*&#xA;      * excel.link(String &#39;sheetName&#39;, Sheet sheetObject);&#xA;      *&#xA;      * Any operations performed on (object of &#39;sheetName&#39;) or sheetObject then the operation is performed on both.&#xA;      * if &#39;sheetName&#39; does not exist then it will be automatically created and linked with the sheetObject&#39;s operation.&#xA;      *&#xA;      */&#xA;&#xA;      excel.link(&#39;sheetName&#39;, sheetObject);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Un-Link sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;     /*&#xA;      * excel.unLink(String &#39;sheetName&#39;);&#xA;      * In order to successfully unLink the &#39;sheetName&#39; then it must exist in excel.tables.keys&#xA;      *&#xA;      */&#xA;&#xA;      excel.unLink(&#39;sheetName&#39;);&#xA;&#xA;      // After calling the above function be sure to re-make a new reference of this.&#xA;&#xA;      Sheet unlinked_sheetObject = excel[&#39;sheetName&#39;];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Merge Cells&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    /*&#xA;     * sheetObject.merge(CellIndex starting_cell, CellIndex ending_cell, dynamic &#39;customValue&#39;);&#xA;     * sheetObject created by calling - // Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;     * starting_cell and ending_cell can be identified with Cell Address or by 2D array having row and column Index;&#xA;     * customValue is optional&#xA;     */&#xA;&#xA;      sheetObject.merge(CellIndex.indexByString(&#39;A1&#39;), CellIndex.indexByString(&#39;E4&#39;), customValue: &#39;Put this text after merge&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Merged Cells List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;      // Check which cells are merged&#xA;&#xA;      sheetObject.spannedItems.forEach((cells) {&#xA;        print(&#39;Merged:&#39; + cells.toString());&#xA;      });&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Un-Merge Cells&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    /*&#xA;     * sheetObject.unMerge(cell);&#xA;     * sheetObject created by calling - // Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;     * cell should be identified with string only with an example as &#39;A1:E4&#39;.&#xA;     * to check if &#39;A1:E4&#39; is un-merged or not&#xA;     * call the method excel.getMergedCells(sheet); and verify that it is not present in it.&#xA;     */&#xA;&#xA;      sheetObject.unMerge(&#39;A1:E4&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find and Replace&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    /*&#xA;     * int replacedCount = sheetObject.findAndReplace(source, target);&#xA;     * sheetObject created by calling - // Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;     * source is the string or ( User&#39;s Custom Pattern Matching RegExp )&#xA;     * target is the string which is put in cells in place of source&#xA;     *&#xA;     * it returns the number of replacements made&#xA;     */&#xA;&#xA;      int replacedCount = sheetObject.findAndReplace(&#39;Flutter&#39;, &#39;Google&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert Row Iterables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;     /*&#xA;      * sheetObject.insertRowIterables(list-iterables, rowIndex, iterable-options?);&#xA;      * sheetObject created by calling - // Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;      * list-iterables === list of iterables which has to be put in specific row&#xA;      * rowIndex === the row in which the iterables has to be put&#xA;      * Iterable options are optional&#xA;      */&#xA;&#xA;      /// It will put the list-iterables in the 8th index row&#xA;      List&amp;lt;String&amp;gt; dataList = [&#39;Google&#39;, &#39;loves&#39;, &#39;Flutter&#39;, &#39;and&#39;, &#39;Flutter&#39;, &#39;loves&#39;, &#39;Excel&#39;];&#xA;&#xA;      sheetObject.insertRowIterables(dataList, 8);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iterable Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;startingColumn&lt;/td&gt; &#xA;   &lt;td&gt;starting column index from which list-iterables should be started&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;overwriteMergedCells&lt;/td&gt; &#xA;   &lt;td&gt;overwriteMergedCells is by-defalut set to &lt;code&gt;true&lt;/code&gt;, when set to &lt;code&gt;false&lt;/code&gt; it will stop over-write and will write only in unique cells&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Append Row&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   /*&#xA;    * sheetObject.appendRow(list-iterables);&#xA;    * sheetObject created by calling - // Sheet sheetObject = excel[&#39;SheetName&#39;];&#xA;    * list-iterables === list of iterables&#xA;    */&#xA;&#xA;     sheetObject.appendRow([&#39;Flutter&#39;, &#39;till&#39;, &#39;Eternity&#39;]);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Default Opening Sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   /*&#xA;    * method which returns the name of the default sheet&#xA;    * excel.getDefaultSheet();&#xA;    */&#xA;&#xA;     var defaultSheet = excel.getDefaultSheet();&#xA;     print(&#39;Default Sheet:&#39; + defaultSheet.toString());&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set Default Opening Sheet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   /*&#xA;    * method which sets the name of the default sheet&#xA;    * returns bool if successful then true else false&#xA;    * excel.setDefaultSheet(sheet);&#xA;    * sheet = &#39;SheetName&#39;&#xA;    */&#xA;&#xA;     var isSet = excel.setDefaultSheet(sheet);&#xA;     if (isSet) {&#xA;       print(&#39;$sheet is set to default sheet.&#39;);&#xA;     } else {&#xA;       print(&#39;Unable to set $sheet to default sheet.&#39;);&#xA;     }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving&lt;/h2&gt; &#xA;&lt;h3&gt;On Flutter Web&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;     // when you are in flutter web then save() downloads the excel file.&#xA;&#xA;     // Call function save() to download the file&#xA;     var fileBytes = excel.save(fileName: &#39;My_Excel_File_Name.xlsx&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Android / iOS&lt;/h3&gt; &#xA;&lt;p&gt;For getting saving directory on Android or iOS, Use: &lt;a href=&#34;https://pub.dev/packages/path_provider&#34;&gt;path_provider&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    var fileBytes = excel.save();&#xA;    var directory = await getApplicationDocumentsDirectory();&#xA;&#xA;    File(join(&#39;$directory/output_file_name.xlsx&#39;))&#xA;      ..createSync(recursive: true)&#xA;      ..writeAsBytesSync(fileBytes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features coming in next version&lt;/h2&gt; &#xA;&lt;p&gt;On-going implementation for future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Formulas&lt;/li&gt; &#xA; &lt;li&gt;Conversion to PDF&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>