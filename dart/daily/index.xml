<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-04T01:32:37Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SalihCanBinboga/recipe_finder</title>
    <updated>2023-05-04T01:32:37Z</updated>
    <id>tag:github.com,2023-05-04:/SalihCanBinboga/recipe_finder</id>
    <link href="https://github.com/SalihCanBinboga/recipe_finder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recipe Finder is a mobile application that allows users to search for recipes based on keywords and view recipe details. The app also allows users to add recipes to their favorites and stores their search history.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Recipe Finder&lt;/h1&gt; &#xA;&lt;p&gt;Recipe Finder is a mobile application that allows users to search for recipes based on keywords and view recipe details. The app also allows users to add recipes to their favorites and stores their search history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SalihCanBinboga/recipe_finder/master/assets/readme/example_presentation.gif&#34; alt=&#34;RecipeFinderDemo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keywords&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DDD (Domain Driven Design)&lt;/li&gt; &#xA; &lt;li&gt;MVVM (Model-View-ViewModel architecture)&lt;/li&gt; &#xA; &lt;li&gt;DI (Dependency Injection) management&lt;/li&gt; &#xA; &lt;li&gt;Multi-Modularization: Development of application logic by dividing it into separate modules&lt;/li&gt; &#xA; &lt;li&gt;Local database management using SQFlite and Shared Preferences&lt;/li&gt; &#xA; &lt;li&gt;SOLID principles (as long as possible): Implementation of the Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion principles for improving code quality&lt;/li&gt; &#xA; &lt;li&gt;Flutter Navigation Management&lt;/li&gt; &#xA; &lt;li&gt;Base classes for managing state&lt;/li&gt; &#xA; &lt;li&gt;Unit tests (as long as possible): Implementation of unit tests for the business logic of the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;To-do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a &#34;Random Recipe&#34; feature for users to find a recipe randomly.&lt;/li&gt; &#xA; &lt;li&gt;Filter search results by dietary requirements.&lt;/li&gt; &#xA; &lt;li&gt;Add a recipe-sharing feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recipe search: Users can search for recipes using keywords.&lt;/li&gt; &#xA; &lt;li&gt;Recipe details: Users can view details for any recipe by clicking on it.&lt;/li&gt; &#xA; &lt;li&gt;Add to favorites: Users can add recipes they like to their favorites.&lt;/li&gt; &#xA; &lt;li&gt;Search history: Users can view their previous searches and perform them again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This project is designed using the MVVM (Model-View-ViewModel) architecture to separate data, business logic and user interface layers, making it more modular and maintainable.&lt;/li&gt; &#xA; &lt;li&gt;Domain-Driven Design (DDD) principles were applied to organize the business logic around business domains and clarify their relationships, making the application more scalable and maintainable.&lt;/li&gt; &#xA; &lt;li&gt;The application was developed using MVVM and DDD principles. MVVM helps maintain a balance between the functionality of the user interface layer and the independence of the data layer. DDD provides a framework for organizing the business logic, allowing for extensibility.&lt;/li&gt; &#xA; &lt;li&gt;The project is designed using the MVVM and DDD principles. MVVM separates the different layers of the application, making it easier to maintain, while DDD provides a structure for the business logic to be organized, making the application more scalable.&lt;/li&gt; &#xA; &lt;li&gt;MVVM and DDD principles were used to develop the application. MVVM provides a balance between the functionality of the user interface layer and the independence of the data layer, while DDD helps organize the business logic and allows for the application to be extended.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Used Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/dio&#34; title=&#34;dio&#34;&gt;dio&lt;/a&gt;: A powerful HTTP client for Dart, used for making HTTP requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/json_annotation&#34; title=&#34;json_annotation&#34;&gt;json_annotation&lt;/a&gt;: A package used for JSON serialization/deserialization in Dart.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/sqflite&#34; title=&#34;sqflite&#34;&gt;sqflite&lt;/a&gt;: A Flutter plugin for SQLite databases, used for local database storage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/shared_preferences&#34; title=&#34;shared_preferences&#34;&gt;shared_preferences&lt;/a&gt;: A Flutter plugin for storing key-value pairs on disk, used for local data storage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/provider&#34; title=&#34;provider&#34;&gt;provider&lt;/a&gt;: A Flutter package for state management, used for managing state with the Inherited Widget structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/gap&#34; title=&#34;gap&#34;&gt;gap&lt;/a&gt;: A package for adding padding and spacing between widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/cached_network_image&#34; title=&#34;cached_network_image&#34;&gt;cached_network_image&lt;/a&gt;: A package for caching images from the network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/get_it&#34; title=&#34;get_it&#34;&gt;get_it&lt;/a&gt;: A package used for dependency injection in Dart and Flutter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/injectable&#34; title=&#34;injectable&#34;&gt;injectable&lt;/a&gt;: A package for generating code for dependency injection in Dart and Flutter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To run the app, you can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter pub get&lt;/code&gt; to install dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter run&lt;/code&gt; to start the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: To run the application, you need to add the following parameters when running the &lt;code&gt;flutter run&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;--dart-define=&#34;app_id=your_app_id&#34; &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dart-define=&#34;app_key=your_app_key&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I used the following API for food recipes. &lt;a href=&#34;https://developer.edamam.com/edamam-docs-recipe-api&#34; title=&#34;Edamam Recipe API&#34;&gt;Edamam Recipe API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code Generation&lt;/h2&gt; &#xA;&lt;p&gt;This project uses code generation to reduce boilerplate code and improve development speed. The following tools are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/json_serializable&#34; title=&#34;json_serializable&#34;&gt;json_serializable&lt;/a&gt;: Used for JSON serialization/deserialization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/build_runner&#34; title=&#34;build_runner&#34;&gt;build_runner&lt;/a&gt;: Used for running code generation tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To generate the code, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate the necessary code for JSON serialization/deserialization. You should run this command every time you make changes to any files that use the @JsonSerializable annotation.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter any issues with code generation, try running the following command to clean up generated files before running build_runner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub run build_runner clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! If you find any bugs or want to suggest new features, feel free to open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://github.com/SalihCanBinboga/recipe_finder/raw/master/LICENSE&#34; title=&#34;LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>