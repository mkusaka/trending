<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-14T01:43:17Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>abuanwar072/E-commerce-App-UI-Flutter</title>
    <updated>2022-06-14T01:43:17Z</updated>
    <id>tag:github.com,2022-06-14:/abuanwar072/E-commerce-App-UI-Flutter</id>
    <link href="https://github.com/abuanwar072/E-commerce-App-UI-Flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nice and clean Online Shop app UI by using #Flutter.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/abuanwar072/E-commerce-App-UI-Flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod ready-to-code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;E-commerce App - Flutter UI&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtu.be/XBKzpTz65Io&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packages we are using:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flutter_svg: &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On our E-commerce app UI has two pages one for the product page which has a horizontal list of categories then a list of our products. Then on the details page, it shows the price and short description of the product with the Buy Now button. The best part of our E-commerce app is, each product has its own color which looks great.&lt;/p&gt; &#xA;&lt;h3&gt;E-commerce App Final UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-App-UI-Flutter/master/intro.gif&#34; alt=&#34;intro&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-App-UI-Flutter/master/ui.png&#34; alt=&#34;App UI&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abuanwar072/E-commerce-Complete-Flutter-UI</title>
    <updated>2022-06-14T01:43:17Z</updated>
    <id>tag:github.com,2022-06-14:/abuanwar072/E-commerce-Complete-Flutter-UI</id>
    <link href="https://github.com/abuanwar072/E-commerce-Complete-Flutter-UI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;E-Commerce Complate App - Flutter UI&lt;/h1&gt; &#xA;&lt;p&gt;In the first part of our complete e-commerce app, we show you how you can create a nice clean onboarding screen for your e-commerce app that can run both Andriod and iOS devices because it builds with flutter. Then on the second episode, we build a Sign in, Forgot Password screen with a custom error indicator. The third Episode contains Sign Up and OTP screen. The fourth episode is the most exciting episode because we build our home page on this episode than on the fifth episode we work on our product page, last not least on the 6th episode we build an order screen which has some cool stuff like swipe to remove. At the end 7th episode we build a profile screen.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtube.com/playlist?list=PLxUBb2A_UUy8OlaNZpS2mfL8xpHcnd_Af&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packages we are using:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flutter_svg: &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Video Preview of Final UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/intro.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screens it contains:&lt;/h2&gt; &#xA;&lt;p&gt;=&amp;gt; Onboarding&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Login&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Forgot Password&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Sign Up&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Complete Profile&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; OTP Verification&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Home Page&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Product Details&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Order&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Profile (added)&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; Bottom Navigation Bar (added)&lt;/p&gt; &#xA;&lt;p&gt;Now it contains all the screen, thanks for your love and support üôè&lt;/p&gt; &#xA;&lt;h2&gt;Photos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/1.png&#34; alt=&#34;Preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/2.png&#34; alt=&#34;Preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/3.png&#34; alt=&#34;Preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/4.png&#34; alt=&#34;Preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/5.png&#34; alt=&#34;Preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/6.png&#34; alt=&#34;Preview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/E-commerce-Complete-Flutter-UI/master/7.png&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EmadBeltaje/flutter_getx_template</title>
    <updated>2022-06-14T01:43:17Z</updated>
    <id>tag:github.com,2022-06-14:/EmadBeltaje/flutter_getx_template</id>
    <link href="https://github.com/EmadBeltaje/flutter_getx_template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create flutter project with all needed configuration in two minutes (theme, localization, connect to firebase, FCM, local notifications, safe API call, error handling, animation..etc)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter GetX Template&lt;/h1&gt; &#xA;&lt;p&gt;Flutter Getx template to make starting project fast and easy .&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;We all face the same problem when we want to start a new project we have to take care of some repeatable things such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Theme (light/dark) &amp;amp; store current theme in shared pref üåí&lt;/li&gt; &#xA; &lt;li&gt;Localization &amp;amp; store the current locale in shared pref üÖ∞Ô∏è&lt;/li&gt; &#xA; &lt;li&gt;Firebase Messaging üì®&lt;/li&gt; &#xA; &lt;li&gt;Notifications setup üîî&lt;/li&gt; &#xA; &lt;li&gt;Safe api requests &amp;amp; error handling üîè&lt;/li&gt; &#xA; &lt;li&gt;Changing between widgets during api call (loading,success,failed..etc) üò¥&lt;/li&gt; &#xA; &lt;li&gt;Snackbar,Toasts &amp;amp; in app notifications ü™ñ&lt;/li&gt; &#xA; &lt;li&gt;Making app more responsive and stop font scaling ‚öñÔ∏è This project will take care of all this repeatable things so you can start your project in few steps and you will have all the mentioned points set up and ready to use üòé&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;Project was created using &lt;a href=&#34;https://pub.dev/packages/get_cli&#34;&gt;get_cli&lt;/a&gt; which is a great tool helping you to (start project,create screens/controllers, handling DI)..etc and we will list other packages that helped to create this skeleton&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/get&#34;&gt;GetX&lt;/a&gt; for state management,navigation,managing dependencies..etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_screenutil&#34;&gt;flutter_screenutil&lt;/a&gt; to make app more responsive&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/hive&#34;&gt;hive&lt;/a&gt; as local database&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/get_storage&#34;&gt;get_storage&lt;/a&gt; as shared pref (its more easy and it read data sync)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/awesome_notifications&#34;&gt;awesome_notifications&lt;/a&gt; for local notification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Clone and start project&lt;/h2&gt; &#xA;&lt;p&gt;Before discovering folders lets first perform some actions to make the project ready to launch&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;first run this command it will generate hive type adapters (for our custom classes that we want to store locally)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;flutter packages pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;if you don&#39;t want to use hive comment this line in main.dart&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await MyHive.init(adapters: [UserModelAdapter()]);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To make your app responsive and look exactly as your (xd,figma..etc) design you need to set artbord size for flutter_ScreenUtil in main.dart&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ScreenUtilInit(&#xA;  designSize: const Size(375, 812), // change this to your xd artboard size&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FCM &amp;amp; Awesome Notifications are combined at the same class so when ever you connect your app to firebase your app will be ready to receive notifications you don&#39;t need to do anything except sending fcm notification to your api via implementing the method (sendFcmTokenToServer) which is inside FcmHelper class üòé&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;static _sendFcmTokenToServer(){&#xA;    var token = MySharedPref.getFcmToken();&#xA;    // TODO SEND FCM TOKEN TO SERVER&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change app package name&lt;/p&gt; &lt;pre&gt;&lt;code&gt;flutter pub run change_app_package_name:main com.new.package.name&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change app name&lt;/p&gt; &lt;pre&gt;&lt;code&gt;flutter pub run rename_app:main all=&#34;My App Name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change app launch icon (replace assets/images/app_icon.png with your app icon) then run this command&lt;/p&gt; &lt;pre&gt;&lt;code&gt;flutter pub run flutter_launcher_icons:main&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FCM: firebase has recently added (add flutter app) to your firebase which will make adding our flutter(android/ios) app to firebase take only 2 steps üî• but first you need to download &lt;a href=&#34;https://firebase.google.com/docs/cli?authuser=0&amp;amp;hl=en#install_the_firebase_cli&#34;&gt;Firebase CLI&lt;/a&gt; and in the terminal execute:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dart pub global activate flutterfire_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;then follow the firebase guid you will get command similar to this one&lt;/p&gt; &lt;pre&gt;&lt;code&gt;flutterfire configure --project=flutter-firebase-YOUR_PROJECT_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and that&#39;s it! your project is now connected to firebase and fcm is up and ready to get notifications&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Responsive app: to make your app responsive you need to get advantage of using flutter_ScreenUtil so instead of using normal double values for height,width,radius..etc you need to use it like this&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;200.w // adapted to screen width&#xA;100.h // /Adapted to screen height&#xA;25.sp // adapter font size&#xA;10.r // adapter radius&#xA;// Example&#xA;Container(&#xA;    height: 100.h,&#xA;    width: 200.w,&#xA;    child: Text(&#34;Hello&#34;,style: TextStyle(fontSize: 20.sp,))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Theme&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Change theme&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MyTheme.changeTheme();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Check current theme&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool isThemeLight = MyTheme.getThemeIsLight();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Localization&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Change app locale&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;LocalizationService.updateLanguage(&#39;en&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Get current locale&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;LocalizationService.getCurrentLocal();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use translation&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(Strings.hello.tr)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Safe api call&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;logic code (in controller)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    // api call status&#xA;  ApiCallStatus apiCallStatus = ApiCallStatus.holding;&#xA;&#xA;  // getting data from api simulating&#xA;  getData() async {&#xA;    // *) indicate loading state&#xA;    apiCallStatus = ApiCallStatus.loading;&#xA;    update();&#xA;    // *) perform api call&#xA;    await BaseClient.get(&#xA;      Constants.todosApiUrl, // url&#xA;      onSuccess: (response){ // api done successfully&#xA;        data = List.from(response.data);&#xA;        // -) indicate success state&#xA;        apiCallStatus = ApiCallStatus.success;&#xA;        update(); // update ui&#xA;      },&#xA;      // if you don&#39;t pass this method base client&#xA;      // will automatically handle error and show message&#xA;      onError: (error){&#xA;        // show error message to user&#xA;        BaseClient.handleApiError(error);&#xA;        // -) indicate error status&#xA;        apiCallStatus = ApiCallStatus.error;&#xA;        update(); // update ui&#xA;      }, // error while performing request&#xA;    );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;UI: MyWidgetsAnimator will animate between widgets depending on current api call status&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetBuilder&amp;lt;HomeController&amp;gt;(&#xA;builder: (controller){&#xA;  LocalizationService.updateLanguage(&#39;en&#39;);&#xA;  LocalizationService.getCurrentLocal();&#xA;  return MyWidgetsAnimator(&#xA;      apiCallStatus: controller.apiCallStatus,&#xA;      loadingWidget: () =&amp;gt; const Center(child: CircularProgressIndicator(),),&#xA;      errorWidget: ()=&amp;gt; const Center(child: Text(&#39;Something went wrong!&#39;),),&#xA;      successWidget: () =&amp;gt;&#xA;         ListView.separated(&#xA;          itemCount: controller.data!.length,&#xA;          separatorBuilder: (_,__) =&amp;gt; SizedBox(height: 10.h,),&#xA;          itemBuilder: (ctx,index) =&amp;gt; ListTile(&#xA;              title: Text(controller.data![index][&#39;userId&#39;].toString()),&#xA;              subtitle: Text(controller.data![index][&#39;title&#39;]),&#xA;            ),&#xA;        ),&#xA;&#xA;  );&#xA;},&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Snackbars (in app notify):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CustomSnackBar.showCustomSnackBar(title: &#39;Done successfully!&#39;, message: &#39;item added to wishlist&#39;);&#xA;CustomSnackBar.showCustomErrorSnackBar(title: &#39;Failed!&#39;, message: &#39;failed to load data&#39;);&#xA;CustomSnackBar.showCustomToast(message: &#39;added to card&#39;);&#xA;CustomSnackBar.showCustomErrorToast(message: &#39;added to card&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/EmadBeltaje/flutter_getx_template/master/preview_images/success_snackbar.jpg&#34; width=&#34;170px&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://raw.githubusercontent.com/EmadBeltaje/flutter_getx_template/master/preview_images/fail_snackbar.jpg&#34; width=&#34;170px&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://raw.githubusercontent.com/EmadBeltaje/flutter_getx_template/master/preview_images/success_toast.jpg&#34; width=&#34;170px&#34;&gt;&amp;nbsp;&amp;nbsp;&lt;img src=&#34;https://raw.githubusercontent.com/EmadBeltaje/flutter_getx_template/master/preview_images/fail_toast.jpg&#34; width=&#34;170px&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discovering Project&lt;/h2&gt; &#xA;&lt;p&gt;After setting up all the needed thing now lets talk about folder structure which is mainly based on Getx Pattern and there are some personal opinions, if you open your lib folder you will find those folders&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;‚îî‚îÄ‚îÄ lib&#xA;    ‚îú‚îÄ‚îÄ app&#xA;    ‚îÇ   ‚îú‚îÄ‚îÄ components&#xA;    ‚îÇ   ‚îú‚îÄ‚îÄ data&#xA;    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ local&#xA;    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ models&#xA;    ‚îÇ   ‚îú‚îÄ‚îÄ modules&#xA;    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ home&#xA;    ‚îÇ   ‚îú‚îÄ‚îÄ routes&#xA;    ‚îÇ   ‚îî‚îÄ‚îÄ services&#xA;    ‚îú‚îÄ‚îÄ config&#xA;    ‚îÇ   ‚îú‚îÄ‚îÄ theme&#xA;    ‚îÇ   ‚îî‚îÄ‚îÄ translation&#xA;    ‚îî‚îÄ‚îÄ utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;app: will contain all our core app logic &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;components: will contain all the shared UI widgets&lt;/li&gt; &#xA;   &lt;li&gt;data: will contain our models and local data sources (local db &amp;amp; shared pref)&lt;/li&gt; &#xA;   &lt;li&gt;modules: app screens&lt;/li&gt; &#xA;   &lt;li&gt;routes: generated by get_cli and it will contain our navigation routes&lt;/li&gt; &#xA;   &lt;li&gt;services: contain all logic for making safe &amp;amp; clean api calls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;config: will contain app config such as themes, localization services&lt;/li&gt; &#xA; &lt;li&gt;utils: for our helper classes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Theme: if you opened theme package you will see those files&lt;/p&gt; &lt;pre&gt;&lt;code&gt;‚îî‚îÄ‚îÄ theme&#xA;    ‚îú‚îÄ‚îÄ dark_theme_colors.dart&#xA;    ‚îú‚îÄ‚îÄ light_theme_colors.dart&#xA;    ‚îú‚îÄ‚îÄ my_fonts.dart&#xA;    ‚îú‚îÄ‚îÄ my_styles.dart&#xA;    ‚îî‚îÄ‚îÄ my_theme.dart&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;you only need to change app colors (light/dark_theme_colors) and if you want to change app fonts sizes and family just modify my_fonts.dart and that is it you don&#39;t need to worry about styles and theme you only need to edit my_syles.dart if you want to change some element theme data (padding,border..etc) and if you want to change theme just use this code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// change theme and save current theme state to shared pref&#xA;MyTheme.changeTheme();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and if you want to check if the theme is dark/light just use&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool themeIsLight = MyTheme.getThemeIsLight();&#xA;// OR&#xA;bool themeIsLight = MySharedPref.getThemeIsLight();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Localization/translation we will use getx localization system which in the normal case code would look something like this&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class LocalizationService extends Translations {&#xA;    @override&#xA;    Map&amp;lt;String, Map&amp;lt;String, String&amp;gt;&amp;gt; get keys =&amp;gt; {&#xA;        &#39;en_US&#39;: { &#39;hello&#39; : &#39;Hello&#39; },&#xA;        &#39;ar_AR&#39;: { &#39;hello&#39; : &#39;ŸÖÿ±ÿ≠ÿ®ÿßŸã&#39; },&#xA;    };&#xA;}&#xA;&#xA;Text(&#39;hello&#39;.tr); // translated text &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;but because we have so many words to translate we will separate keys file (strings_enum.dart) and languages map into different classes so code will become like this&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class LocalizationService extends Translations {&#xA;      @override&#xA;      Map&amp;lt;String, Map&amp;lt;String, String&amp;gt;&amp;gt; get keys =&amp;gt; {&#xA;          &#39;en_US&#39;: enUs,&#xA;          &#39;ar_AR&#39;: arAR,&#xA;      };&#xA;  }&#xA;// keys&#xA;class Strings {&#xA;    static const String hello = &#39;hello&#39;;&#xA;}&#xA;// english words&#xA;const Map&amp;lt;String, String&amp;gt; enUs = {&#xA;    Strings.hello : &#39;Hello&#39;,&#xA;}&#xA;// arabic translate&#xA;final Map&amp;lt;String, String&amp;gt; arAR = {&#xA;    Strings.hello : &#39;ŸÖÿ±ÿ≠ÿ®ÿß&#39;,&#xA;}&#xA;//result&#xA;Text(Strings.hello.tr)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and that explain why we have this file structure inside our translation package&lt;/p&gt; &lt;pre&gt;&lt;code&gt;   ‚îî‚îÄ‚îÄ translations&#xA;       ‚îú‚îÄ‚îÄ ar_Ar&#xA;       ‚îÇ   ‚îî‚îÄ‚îÄ ar_ar_translation.dart&#xA;       ‚îú‚îÄ‚îÄ en_US&#xA;       ‚îÇ   ‚îî‚îÄ‚îÄ en_us_translation.dart&#xA;       ‚îú‚îÄ‚îÄ localization_service.dart&#xA;       ‚îî‚îÄ‚îÄ strings_enum.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to change language you will use&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;LocalizationService.updateLanguage(&#39;en&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and to get the current locale/language you can use&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;LocalizationService.getCurrentLocal();&#xA;// OR&#xA;MySharedPref.getCurrentLocal();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Safe api call: under if you opened lib/app/services package you will find 3 files&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;api_call_status.dart: which contain all possible stages of our api call (loading,success,error..etc)&lt;/li&gt; &#xA;   &lt;li&gt;api_exception.dart: custom exception class to make error handling more informative&lt;/li&gt; &#xA;   &lt;li&gt;base_client.dart: contain our safe api call functions to perform api request the right way you would do this&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class HomeController extends GetxController {&#xA;  // hold data&#xA;  List&amp;lt;dynamic&amp;gt;? data;&#xA;  // api call status&#xA;  ApiCallStatus apiCallStatus = ApiCallStatus.holding;&#xA;&#xA;  // getting data from api simulating&#xA;  getData() async {&#xA;    // *) indicate loading state&#xA;    apiCallStatus = ApiCallStatus.loading;&#xA;    update();&#xA;    // *) perform api call&#xA;    await BaseClient.get(&#xA;      Constants.todosApiUrl, // url&#xA;      onSuccess: (response){ // api done successfully&#xA;        data = List.from(response.data);&#xA;        // -) indicate success state&#xA;        apiCallStatus = ApiCallStatus.success;&#xA;        update(); // update ui&#xA;      },&#xA;      // if you don&#39;t pass this method base client&#xA;      // will automatically handle error and show message&#xA;      onError: (error){&#xA;        // show error message to user&#xA;        BaseClient.handleApiError(error);&#xA;        // -) indicate error status&#xA;        apiCallStatus = ApiCallStatus.error;&#xA;        update(); // update ui&#xA;      }, // error while performing request&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  void onInit() {&#xA;    getData();&#xA;    super.onInit();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;base client will catch all the possible errors and if you didn&#39;t pass onError function it will automatically catch the error in UI side code will be&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GetBuilder&amp;lt;HomeController&amp;gt;(&#xA;        builder: (_){&#xA;          return MyWidgetsAnimator(&#xA;              apiCallStatus: controller.apiCallStatus,&#xA;              loadingWidget: () =&amp;gt; const Center(child: CircularProgressIndicator(),),&#xA;              errorWidget: ()=&amp;gt; const Center(child: Text(&#39;Something went wrong!&#39;),),&#xA;              successWidget: () =&amp;gt;&#xA;                 ListView.separated(&#xA;                  itemCount: controller.data!.length,&#xA;                  separatorBuilder: (_,__) =&amp;gt; SizedBox(height: 10.h,),&#xA;                  itemBuilder: (ctx,index) =&amp;gt; ListTile(&#xA;                      title: Text(controller.data![index][&#39;userId&#39;].toString()),&#xA;                      subtitle: Text(controller.data![index][&#39;title&#39;]),&#xA;                    ),&#xA;                ),&#xA;&#xA;          );&#xA;        },&#xA;      )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; MyWidgetsAnimator will take care of ui changing with animation you will pass the ApiCallStatus and success,failed,loading..etc widgets and it will take care of transition&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For support, email &lt;a href=&#34;mailto:emadbeltaje@gmail.com&#34;&gt;emadbeltaje@gmail.com&lt;/a&gt; or Facebook &lt;a href=&#34;https://www.facebook.com/EmadBeltaje/&#34;&gt;Emad Beltaje&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>