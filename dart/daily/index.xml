<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:33:17Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aissat/easy_localization</title>
    <updated>2023-05-17T01:33:17Z</updated>
    <id>tag:github.com,2023-05-17:/aissat/easy_localization</id>
    <link href="https://github.com/aissat/easy_localization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy and Fast internationalizing your Flutter Apps&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aissat/easy_localization/develop/logo/logo.svg?sanitize=true&#34; width=&#34;600&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Easy and Fast internationalization for your Flutter Apps &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/easy_localization&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/easy_localization?style=flat-square&amp;amp;logo=dart&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/easy_localization/score&#34;&gt;&lt;img src=&#34;https://badges.bar/easy_localization/likes&#34; alt=&#34;likes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/easy_localization/score&#34;&gt;&lt;img src=&#34;https://badges.bar/easy_localization/popularity&#34; alt=&#34;likes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/easy_localization/score&#34;&gt;&lt;img src=&#34;https://badges.bar/easy_localization/pub%20points&#34; alt=&#34;likes&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues/aissat/easy_localization?style=flat-square&#34; alt=&#34;Code Climate issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/aissat/easy_localization?style=flat-square&#34; alt=&#34;GitHub closed issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/aissat/easy_localization?style=flat-square&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/aissat/easy_localization?style=flat-square&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/aissat/easy_localization?style=flat-square&#34; alt=&#34;GitHub forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/aissat/easy_localization?style=flat-square&#34; alt=&#34;GitHub stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/coveralls/github/aissat/easy_localization/dev?style=flat-square&#34; alt=&#34;Coveralls github branch&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/aissat/easy_localization/Flutter%20Tester?longCache=true&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/codefactor/grade/github/aissat/easy_localization?style=flat-square&#34; alt=&#34;CodeFactor Grade&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/aissat/easy_localization?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt; &lt;img src=&#34;https://img.shields.io/opencollective/all/flutter_easy_localization?style=flat-square&#34; alt=&#34;Sponsors&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why easy_localization?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ Easy translations for many languages&lt;/li&gt; &#xA; &lt;li&gt;üîå Load translations as JSON, CSV, Yaml, Xml using &lt;a href=&#34;https://github.com/aissat/easy_localization_loader&#34;&gt;Easy Localization Loader&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíæ React and persist to locale changes&lt;/li&gt; &#xA; &lt;li&gt;‚ö° Supports plural, gender, nesting, RTL locales and more&lt;/li&gt; &#xA; &lt;li&gt;‚Ü©Ô∏è Fallback locale keys redirection&lt;/li&gt; &#xA; &lt;li&gt;‚ÅâÔ∏è Error widget for missing translations&lt;/li&gt; &#xA; &lt;li&gt;‚ù§Ô∏è Extension methods on &lt;code&gt;Text&lt;/code&gt; and &lt;code&gt;BuildContext&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª Code generation for localization files and keys.&lt;/li&gt; &#xA; &lt;li&gt;üõ°Ô∏è Null safety&lt;/li&gt; &#xA; &lt;li&gt;üñ®Ô∏è Customizable logger.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;üî© Installation&lt;/h3&gt; &#xA;&lt;p&gt;Add to your &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  easy_localization: &amp;lt;last_version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create folder and add translation files like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;assets&#xA;‚îî‚îÄ‚îÄ translations&#xA;    ‚îú‚îÄ‚îÄ {languageCode}.{ext}                  //only language code&#xA;    ‚îî‚îÄ‚îÄ {languageCode}-{countryCode}.{ext}    //or full locale code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;assets&#xA;‚îî‚îÄ‚îÄ translations&#xA;    ‚îú‚îÄ‚îÄ en.json&#xA;    ‚îî‚îÄ‚îÄ en-US.json &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Declare your assets localization directory in &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;flutter:&#xA;  assets:&#xA;    - assets/translations/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üîå Loading translations from other resources&lt;/h3&gt; &#xA;&lt;p&gt;You can use JSON,CSV,HTTP,XML,Yaml files, etc.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/aissat/easy_localization_loader&#34;&gt;Easy Localization Loader&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;‚ö†Ô∏è Note on &lt;strong&gt;iOS&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For translation to work on &lt;strong&gt;iOS&lt;/strong&gt; you need to add supported locales to &lt;code&gt;ios/Runner/Info.plist&lt;/code&gt; as described &lt;a href=&#34;https://flutter.dev/docs/development/accessibility-and-localization/internationalization#specifying-supportedlocales&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleLocalizations&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;en&amp;lt;/string&amp;gt;&#xA;&#x9;&amp;lt;string&amp;gt;nb&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‚öôÔ∏è Configuration app&lt;/h3&gt; &#xA;&lt;p&gt;Add EasyLocalization widget like in example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter_localizations/flutter_localizations.dart&#39;;&#xA;import &#39;package:easy_localization/easy_localization.dart&#39;;&#xA;&#xA;void main() async {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;  await EasyLocalization.ensureInitialized();&#xA;  &#xA;  runApp(&#xA;    EasyLocalization(&#xA;      supportedLocales: [Locale(&#39;en&#39;, &#39;US&#39;), Locale(&#39;de&#39;, &#39;DE&#39;)],&#xA;      path: &#39;assets/translations&#39;, // &amp;lt;-- change the path of the translation files &#xA;      fallbackLocale: Locale(&#39;en&#39;, &#39;US&#39;),&#xA;      child: MyApp()&#xA;    ),&#xA;  );&#xA;}&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      localizationsDelegates: context.localizationDelegates,&#xA;      supportedLocales: context.supportedLocales,&#xA;      locale: context.locale,&#xA;      home: MyHomePage()&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aissat/easy_localization/raw/master/example/lib/main.dart&#34;&gt;&lt;strong&gt;Full example&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üìú Easy localization widget properties&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Properties&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;key&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Widget key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;child&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Place for your main page widget.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;supportedLocales&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of supported locales.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to your folder with localization files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assetLoader&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RootBundleAssetLoader()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Class loader for localization files. You can use custom loaders from &lt;a href=&#34;https://github.com/aissat/easy_localization_loader&#34;&gt;Easy Localization Loader&lt;/a&gt; or create your own class.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fallbackLocale&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the locale when the locale is not in the list &lt;code&gt;supportedLocales&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;startLocale&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Overrides device locale.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;saveLocale&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save locale in device storage.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useFallbackTranslations&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If a localization key is not found in the locale file, try to use the fallbackLocale file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useOnlyLangCode&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Trigger for using only language code for reading localization files.&lt;br&gt;&lt;br&gt;Example:&lt;br&gt;&lt;code&gt;en.json //useOnlyLangCode: true&lt;/code&gt;&lt;br&gt;&lt;code&gt;en-US.json //useOnlyLangCode: false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;errorWidget&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FutureErrorWidget()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows a custom error widget when an error occurs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;üî• Initialize library&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;EasyLocalization.ensureInitialized()&lt;/code&gt; in your main before runApp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() async{&#xA;  // ...&#xA;  // Needs to be called so that we can await for EasyLocalization.ensureInitialized();&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;&#xA;  await EasyLocalization.ensureInitialized();&#xA;  // ...&#xA;  runApp(....)&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Change or get locale&lt;/h3&gt; &#xA;&lt;p&gt;Easy localization uses extension methods [BuildContext] for access to locale.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s the easiest way change locale or get parameters üòâ.&lt;/p&gt; &#xA;&lt;p&gt;‚ÑπÔ∏è No breaking changes, you can use old the static method &lt;code&gt;EasyLocalization.of(context)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;context.setLocale(Locale(&#39;en&#39;, &#39;US&#39;));&#xA;&#xA;print(context.locale.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Translate &lt;code&gt;tr()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Main function for translate your language keys&lt;/p&gt; &#xA;&lt;p&gt;You can use extension methods of [String] or [Text] widget, you can also use &lt;code&gt;tr()&lt;/code&gt; as a static function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#39;title&#39;).tr() //Text widget&#xA;&#xA;print(&#39;title&#39;.tr()); //String&#xA;&#xA;var title = tr(&#39;title&#39;) //Static function&#xA;&#xA;Text(context.tr(&#39;title&#39;)) //Extension on BuildContext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arguments:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;args&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of localized strings. Replaces &lt;code&gt;{}&lt;/code&gt; left to right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;namedArgs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Map of localized strings. Replaces the name keys &lt;code&gt;{key_name}&lt;/code&gt; according to its name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gender&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Gender switcher. Changes the localized string based on gender string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;msg&#34;:&#34;{} are written in the {} language&#34;,&#xA;   &#34;msg_named&#34;:&#34;Easy localization is written in the {lang} language&#34;,&#xA;   &#34;msg_mixed&#34;:&#34;{} are written in the {lang} language&#34;,&#xA;   &#34;gender&#34;:{&#xA;      &#34;male&#34;:&#34;Hi man ;) {}&#34;,&#xA;      &#34;female&#34;:&#34;Hello girl :) {}&#34;,&#xA;      &#34;other&#34;:&#34;Hello {}&#34;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// args&#xA;Text(&#39;msg&#39;).tr(args: [&#39;Easy localization&#39;, &#39;Dart&#39;]),&#xA;&#xA;// namedArgs&#xA;Text(&#39;msg_named&#39;).tr(namedArgs: {&#39;lang&#39;: &#39;Dart&#39;}),&#xA;&#xA;// args and namedArgs&#xA;Text(&#39;msg_mixed&#39;).tr(args: [&#39;Easy localization&#39;], namedArgs: {&#39;lang&#39;: &#39;Dart&#39;}),&#xA;&#xA;// gender&#xA;Text(&#39;gender&#39;).tr(gender: _gender ? &#34;female&#34; : &#34;male&#34;),&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Plurals &lt;code&gt;plural()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can translate with pluralization. To insert a number in the translated string, use &lt;code&gt;{}&lt;/code&gt;. Number formatting supported, for more information read &lt;a href=&#34;https://pub.dev/documentation/intl/latest/intl/NumberFormat-class.html&#34;&gt;NumberFormat&lt;/a&gt; class documentation.&lt;/p&gt; &#xA;&lt;p&gt;You can use extension methods of [String] or [Text] widget, you can also use &lt;code&gt;plural()&lt;/code&gt; as a static function.&lt;/p&gt; &#xA;&lt;h4&gt;Arguments:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;num&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number value for pluralization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;args&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of localized strings. Replaces &lt;code&gt;{}&lt;/code&gt; left to right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;namedArgs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Map of localized strings. Replaces the name keys &lt;code&gt;{key_name}&lt;/code&gt; according to its name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Name of number value. Replaces &lt;code&gt;{$name}&lt;/code&gt; to value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;format&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Formats a numeric value using a &lt;a href=&#34;https://pub.dev/documentation/intl/latest/intl/NumberFormat-class.html&#34;&gt;NumberFormat&lt;/a&gt; class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;day&#34;: {&#xA;    &#34;zero&#34;:&#34;{} –¥–Ω–µ–π&#34;,&#xA;    &#34;one&#34;: &#34;{} –¥–µ–Ω—å&#34;,&#xA;    &#34;two&#34;: &#34;{} –¥–Ω—è&#34;,&#xA;    &#34;few&#34;: &#34;{} –¥–Ω—è&#34;,&#xA;    &#34;many&#34;: &#34;{} –¥–Ω–µ–π&#34;,&#xA;    &#34;other&#34;: &#34;{} –¥–Ω–µ–π&#34;&#xA;  },&#xA;  &#34;money&#34;: {&#xA;    &#34;zero&#34;: &#34;You not have money&#34;,&#xA;    &#34;one&#34;: &#34;You have {} dollar&#34;,&#xA;    &#34;many&#34;: &#34;You have {} dollars&#34;,&#xA;    &#34;other&#34;: &#34;You have {} dollars&#34;&#xA;  },&#xA;  &#34;money_args&#34;: {&#xA;    &#34;zero&#34;: &#34;{} has no money&#34;,&#xA;    &#34;one&#34;: &#34;{} has {} dollar&#34;,&#xA;    &#34;many&#34;: &#34;{} has {} dollars&#34;,&#xA;    &#34;other&#34;: &#34;{} has {} dollars&#34;&#xA;  },&#xA;  &#34;money_named_args&#34;: {&#xA;    &#34;zero&#34;: &#34;{name} has no money&#34;,&#xA;    &#34;one&#34;: &#34;{name} has {money} dollar&#34;,&#xA;    &#34;many&#34;: &#34;{name} has {money} dollars&#34;,&#xA;    &#34;other&#34;: &#34;{name} has {money} dollars&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚ö†Ô∏è Key &#34;other&#34; required!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//Text widget with format&#xA;Text(&#39;money&#39;).plural(1000000, format: NumberFormat.compact(locale: context.locale.toString())) // output: You have 1M dollars&#xA;&#xA;//String&#xA;print(&#39;day&#39;.plural(21)); // output: 21 –¥–µ–Ω—å&#xA;&#xA;//Static function&#xA;var money = plural(&#39;money&#39;, 10.23) // output: You have 10.23 dollars&#xA;&#xA;//Text widget with plural BuildContext extension&#xA;Text(context.plural(&#39;money&#39;, 10.23))&#xA;&#xA;//Static function with arguments&#xA;var money = plural(&#39;money_args&#39;, 10.23, args: [&#39;John&#39;, &#39;10.23&#39;])  // output: John has 10.23 dollars&#xA;&#xA;//Static function with named arguments&#xA;var money = plural(&#39;money_named_args&#39;, 10.23, namedArgs: {&#39;name&#39;: &#39;Jane&#39;, &#39;money&#39;: &#39;10.23&#39;})  // output: Jane has 10.23 dollars&#xA;var money = plural(&#39;money_named_args&#39;, 10.23, namedArgs: {&#39;name&#39;: &#39;Jane&#39;}, name: &#39;money&#39;)  // output: Jane has 10.23 dollars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Linked translations:&lt;/h3&gt; &#xA;&lt;p&gt;If there&#39;s a translation key that will always have the same concrete text as another one you can just link to it. To link to another translation key, all you have to do is to prefix its contents with an &lt;code&gt;@:&lt;/code&gt; sign followed by the full name of the translation key including the namespace you want to link to.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  ...&#xA;  &#34;example&#34;: {&#xA;    &#34;hello&#34;: &#34;Hello&#34;,&#xA;    &#34;world&#34;: &#34;World!&#34;,&#xA;    &#34;helloWorld&#34;: &#34;@:example.hello @:example.world&#34;&#xA;  }&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;print(&#39;example.helloWorld&#39;.tr()); //Output: Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also do nested anonymous and named arguments inside the linked messages.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  ...&#xA;  &#34;date&#34;: &#34;{currentDate}.&#34;,&#xA;  &#34;dateLogging&#34;: &#34;INFO: the date today is @:date&#34;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;print(&#39;dateLogging&#39;.tr(namedArguments: {&#39;currentDate&#39;: DateTime.now().toIso8601String()})); //Output: INFO: the date today is 2020-11-27T16:40:42.657.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Formatting linked translations:&lt;/h4&gt; &#xA;&lt;p&gt;Formatting linked locale messages If the language distinguishes cases of character, you may need to control the case of the linked locale messages. Linked messages can be formatted with modifier &lt;code&gt;@.modifier:key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The below modifiers are available currently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;upper&lt;/code&gt;: Uppercase all characters in the linked message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lower&lt;/code&gt;: Lowercase all characters in the linked message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;capitalize&lt;/code&gt;: Capitalize the first character in the linked message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  ...&#xA;  &#34;example&#34;: {&#xA;    &#34;fullName&#34;: &#34;Full Name&#34;,&#xA;    &#34;emptyNameError&#34;: &#34;Please fill in your @.lower:example.fullName&#34;&#xA;  }&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;print(&#39;example.emptyNameError&#39;.tr()); //Output: Please fill in your full name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Reset locale &lt;code&gt;resetLocale()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Reset locale to device locale&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RaisedButton(&#xA;  onPressed: (){&#xA;    context.resetLocale();&#xA;  },&#xA;  child: Text(LocaleKeys.reset_locale).tr(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Get device locale &lt;code&gt;deviceLocale&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get device locale&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;print(${context.deviceLocale.toString()}) // OUTPUT: en_US&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Delete save locale &lt;code&gt;deleteSaveLocale()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Clears a saved locale from device storage&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RaisedButton(&#xA;  onPressed: (){&#xA;    context.deleteSaveLocale();&#xA;  },&#xA;  child: Text(LocaleKeys.reset_locale).tr(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üî• Get Easy localization widget properties&lt;/h3&gt; &#xA;&lt;p&gt;At any time, you can take the main &lt;a href=&#34;https://raw.githubusercontent.com/aissat/easy_localization/develop/#-easy-localization-widget-properties&#34;&gt;properties&lt;/a&gt; of the Easy localization widget using [BuildContext].&lt;/p&gt; &#xA;&lt;p&gt;Are supported: supportedLocales, fallbackLocale, localizationDelegates.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;print(context.supportedLocales); // output: [en_US, ar_DZ, de_DE, ru_RU]&#xA;&#xA;print(context.fallbackLocale); // output: en_US&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üíª Code generation&lt;/h2&gt; &#xA;&lt;p&gt;Code generation supports only json files, for more information run in terminal &lt;code&gt;flutter pub run easy_localization:generate -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command line arguments&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Arguments&lt;/th&gt; &#xA;   &lt;th&gt;Short&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--help&lt;/td&gt; &#xA;   &lt;td&gt;-h&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Help info&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--source-dir&lt;/td&gt; &#xA;   &lt;td&gt;-S&lt;/td&gt; &#xA;   &lt;td&gt;resources/langs&lt;/td&gt; &#xA;   &lt;td&gt;Folder containing localization files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--source-file&lt;/td&gt; &#xA;   &lt;td&gt;-s&lt;/td&gt; &#xA;   &lt;td&gt;First file&lt;/td&gt; &#xA;   &lt;td&gt;File to use for localization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--output-dir&lt;/td&gt; &#xA;   &lt;td&gt;-O&lt;/td&gt; &#xA;   &lt;td&gt;lib/generated&lt;/td&gt; &#xA;   &lt;td&gt;Output folder stores for the generated file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--output-file&lt;/td&gt; &#xA;   &lt;td&gt;-o&lt;/td&gt; &#xA;   &lt;td&gt;codegen_loader.g.dart&lt;/td&gt; &#xA;   &lt;td&gt;Output file name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--format&lt;/td&gt; &#xA;   &lt;td&gt;-f&lt;/td&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;Support json or keys formats&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--[no-]skip-unnecessary-keys&lt;/td&gt; &#xA;   &lt;td&gt;-u&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Ignores keys defining nested object except for pluarl(), gender() keywords.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üîå Localization asset loader class&lt;/h3&gt; &#xA;&lt;p&gt;Steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your terminal in the folder&#39;s path containing your project&lt;/li&gt; &#xA; &lt;li&gt;Run in terminal &lt;code&gt;flutter pub run easy_localization:generate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change asset loader and past import.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;generated/codegen_loader.g.dart&#39;;&#xA;...&#xA;void main(){&#xA;  runApp(EasyLocalization(&#xA;    child: MyApp(),&#xA;    supportedLocales: [Locale(&#39;en&#39;, &#39;US&#39;), Locale(&#39;ar&#39;, &#39;DZ&#39;)],&#xA;    path: &#39;resources/langs&#39;,&#xA;    assetLoader: CodegenLoader()&#xA;  ));&#xA;}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;All done!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;üîë Localization keys&lt;/h3&gt; &#xA;&lt;p&gt;If you have many localization keys and are confused, key generation will help you. The code editor will automatically prompt keys&lt;/p&gt; &#xA;&lt;p&gt;Steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your terminal in the folder&#39;s path containing your project&lt;/li&gt; &#xA; &lt;li&gt;Run in terminal &lt;code&gt;flutter pub run easy_localization:generate -f keys -o locale_keys.g.dart&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Past import.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;generated/locale_keys.g.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;All done!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;How to use generated keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;print(LocaleKeys.title.tr()); //String&#xA;//or&#xA;Text(LocaleKeys.title).tr(); //Widget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üñ®Ô∏è Logger&lt;/h2&gt; &#xA;&lt;p&gt;[Easy Localization] logger based on [Easy Logger]&lt;/p&gt; &#xA;&lt;p&gt;You can customize logger for you project&lt;/p&gt; &#xA;&lt;h3&gt;Show only lost keys message&lt;/h3&gt; &#xA;&lt;p&gt;Lost translations keys logged like warning messages. Change [Easy Logger] level for display only errors and warnings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;EasyLocalization.logger.enableLevels = [LevelMessages.error, LevelMessages.warning];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logger off&lt;/h3&gt; &#xA;&lt;p&gt;For disable logger, change Build Modes in [Easy Logger] to empty List;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;EasyLocalization.logger.enableBuildModes = [];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Catching logger messages&lt;/h3&gt; &#xA;&lt;p&gt;For catching logger messages you need override default printer function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;EasyLogPrinter customLogPrinter = (&#xA;  Object object, {&#xA;  String name,&#xA;  StackTrace stackTrace,&#xA;  LevelMessages level,&#xA;}) {&#xA;  ///Your function&#xA;  print(&#39;$name: ${object.toString()}&#39;);&#xA;};&#xA;&#xA;/// override printer to custom&#xA;EasyLocalization.logger.printer = customLogPrinter;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://github.com/aissat/easy_localization/raw/master/packages/easy_logger/README.md&#34;&gt;Easy Logger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ûï Extensions helpers&lt;/h2&gt; &#xA;&lt;h3&gt;String to locale&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#39;en_US&#39;.toLocale(); // Locale(&#39;en&#39;, &#39;US&#39;)&#xA;&#xA;//with custom separator&#xA;&#39;en|US&#39;.toLocale(separator: &#39;|&#39;) // Locale(&#39;en&#39;, &#39;US&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Locale to String with separator&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Locale(&#39;en&#39;, &#39;US&#39;).toStringWithSeparator(separator: &#39;|&#39;) // en|US&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/aissat/easy_localization&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Arabic RTL&lt;/th&gt; &#xA;   &lt;th&gt;English LTR&lt;/th&gt; &#xA;   &lt;th&gt;Error widget&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aissat/easy_localization/master/screenshots/Screenshot_ar.png&#34; alt=&#34;Arabic RTL&#34; title=&#34;Arabic RTL&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aissat/easy_localization/master/screenshots/Screenshot_en.png&#34; alt=&#34;English LTR&#34; title=&#34;English LTR&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aissat/easy_localization/master/screenshots/Screenshot_err.png&#34; alt=&#34;Error widget&#34; title=&#34;Error widget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;We need your support. Projects like this can not be successful without support from the community. If you find this project useful, and would like to support further development and ongoing maintenance, please consider donating.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opencollective.com/flutter_easy_localization/donate&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/flutter_easy_localization/donate/button@2x.png?color=blue&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;img src=&#34;https://opencollective.com/flutter_easy_localization/tiers/backer.svg?avatarHeight=48&#34;&gt; &#xA;&lt;h3&gt;Contributors thanks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contributors-img.firebaseapp.com/image?repo=aissat/easy_localization&#34; alt=&#34;contributors&#34;&gt; &lt;a href=&#34;https://github.com/aissat/easy_localization/graphs/contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>