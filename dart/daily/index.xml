<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-14T01:30:40Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xvrh/lottie-flutter</title>
    <updated>2023-12-14T01:30:40Z</updated>
    <id>tag:github.com,2023-12-14:/xvrh/lottie-flutter</id>
    <link href="https://github.com/xvrh/lottie-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Render After Effects animations natively on Flutter. This package is a pure Dart implementation of a Lottie player.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie for Flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xvrh/lottie-flutter&#34;&gt;&lt;img src=&#34;https://github.com/xvrh/lottie-flutter/workflows/Lottie%20Flutter/badge.svg?branch=master&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/lottie&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/lottie.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lottie is a mobile library for Android and iOS that parses &lt;a href=&#34;https://www.adobe.com/products/aftereffects.html&#34;&gt;Adobe After Effects&lt;/a&gt; animations exported as json with &lt;a href=&#34;https://github.com/airbnb/lottie-web&#34;&gt;Bodymovin&lt;/a&gt; and renders them natively on mobile!&lt;/p&gt; &#xA;&lt;p&gt;This repository is an unofficial conversion of the &lt;a href=&#34;https://github.com/airbnb/lottie-android&#34;&gt;Lottie-android&lt;/a&gt; library in pure Dart.&lt;/p&gt; &#xA;&lt;p&gt;It works on Android, iOS, macOS, linux, windows and web.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Simple animation&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to display a Lottie animation in the simplest way.&lt;br&gt; The &lt;code&gt;Lottie&lt;/code&gt; widget will load the json file and run the animation indefinitely.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:lottie/lottie.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(const MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  const MyApp({super.key});&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;        body: ListView(&#xA;          children: [&#xA;            // Load a Lottie file from your assets&#xA;            Lottie.asset(&#39;assets/LottieLogo1.json&#39;),&#xA;&#xA;            // Load a Lottie file from a remote url&#xA;            Lottie.network(&#xA;                &#39;https://raw.githubusercontent.com/xvrh/lottie-flutter/master/example/assets/Mobilo/A.json&#39;),&#xA;&#xA;            // Load an animation and its images from a zip file&#xA;            Lottie.asset(&#39;assets/lottiefiles/angel.zip&#39;),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify a custom &lt;code&gt;AnimationController&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to take full control over the animation by providing your own &lt;code&gt;AnimationController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a custom &lt;code&gt;AnimationController&lt;/code&gt; you have a rich API to play the animation in various ways: start and stop the animation when you want, play forward or backward, loop between specifics points...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:lottie/lottie.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(const MyApp());&#xA;&#xA;class MyApp extends StatefulWidget {&#xA;  const MyApp({super.key});&#xA;&#xA;  @override&#xA;  State&amp;lt;MyApp&amp;gt; createState() =&amp;gt; _MyAppState();&#xA;}&#xA;&#xA;class _MyAppState extends State&amp;lt;MyApp&amp;gt; with TickerProviderStateMixin {&#xA;  late final AnimationController _controller;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;&#xA;    _controller = AnimationController(vsync: this);&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    _controller.dispose();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;        body: ListView(&#xA;          children: [&#xA;            Lottie.asset(&#xA;              &#39;assets/LottieLogo1.json&#39;,&#xA;              controller: _controller,&#xA;              onLoaded: (composition) {&#xA;                // Configure the AnimationController with the duration of the&#xA;                // Lottie file and start the animation.&#xA;                _controller&#xA;                  ..duration = composition.duration&#xA;                  ..forward();&#xA;              },&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xvrh/lottie-flutter/raw/master/example/lib/examples/animation_full_control.dart&#34;&gt;See this file&lt;/a&gt; for a more comprehensive example.&lt;/p&gt; &#xA;&lt;h3&gt;Control the size of the Widget&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Lottie&lt;/code&gt; widget takes the same arguments and have the same behavior as the &lt;code&gt;Image&lt;/code&gt; widget in term of controlling its size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Lottie.asset(&#xA;  &#39;assets/LottieLogo1.json&#39;,&#xA;  width: 200,&#xA;  height: 200,&#xA;  fit: BoxFit.fill,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are optionals and fallback on the size imposed by the parent or on the intrinsic size of the lottie animation.&lt;/p&gt; &#xA;&lt;h3&gt;Custom loading&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Lottie&lt;/code&gt; widget has several convenient constructors (&lt;code&gt;Lottie.asset&lt;/code&gt;, &lt;code&gt;Lottie.network&lt;/code&gt;, &lt;code&gt;Lottie.memory&lt;/code&gt;) to load, parse and cache automatically the json file.&lt;/p&gt; &#xA;&lt;p&gt;Sometime you may prefer to have full control over the loading of the file. Use &lt;code&gt;AssetLottie&lt;/code&gt; (or &lt;code&gt;NetworkLottie&lt;/code&gt;, &lt;code&gt;MemoryLottie&lt;/code&gt;) to load a lottie composition from a json file.&lt;/p&gt; &#xA;&lt;p&gt;This example shows how to load and parse a Lottie composition from a json file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyWidget extends StatefulWidget {&#xA;  const MyWidget({super.key});&#xA;&#xA;  @override&#xA;  State&amp;lt;MyWidget&amp;gt; createState() =&amp;gt; _MyWidgetState();&#xA;}&#xA;&#xA;class _MyWidgetState extends State&amp;lt;MyWidget&amp;gt; {&#xA;  late final Future&amp;lt;LottieComposition&amp;gt; _composition;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;&#xA;    _composition = AssetLottie(&#39;assets/LottieLogo1.json&#39;).load();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return FutureBuilder&amp;lt;LottieComposition&amp;gt;(&#xA;      future: _composition,&#xA;      builder: (context, snapshot) {&#xA;        var composition = snapshot.data;&#xA;        if (composition != null) {&#xA;          return Lottie(composition: composition);&#xA;        } else {&#xA;          return const Center(child: CircularProgressIndicator());&#xA;        }&#xA;      },&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom drawing&lt;/h3&gt; &#xA;&lt;p&gt;This example goes low level and shows you how to draw a &lt;code&gt;LottieComposition&lt;/code&gt; on a custom Canvas at a specific frame in a specific position and size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class CustomDrawer extends StatelessWidget {&#xA;  final LottieComposition composition;&#xA;&#xA;  const CustomDrawer(this.composition, {super.key});&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return CustomPaint(&#xA;      painter: _Painter(composition),&#xA;      size: const Size(400, 400),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class _Painter extends CustomPainter {&#xA;  final LottieDrawable drawable;&#xA;&#xA;  _Painter(LottieComposition composition)&#xA;      : drawable = LottieDrawable(composition);&#xA;&#xA;  @override&#xA;  void paint(Canvas canvas, Size size) {&#xA;    var frameCount = 40;&#xA;    var columns = 10;&#xA;    for (var i = 0; i &amp;lt; frameCount; i++) {&#xA;      var destRect = Offset(i % columns * 50.0, i ~/ 10 * 80.0) &amp;amp; (size / 5);&#xA;      drawable&#xA;        ..setProgress(i / frameCount)&#xA;        ..draw(canvas, destRect);&#xA;    }&#xA;  }&#xA;&#xA;  @override&#xA;  bool shouldRepaint(CustomPainter oldDelegate) {&#xA;    return true;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modify properties at runtime&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to modify some properties of the animation at runtime. Here we change the text, the color, the opacity and the position of some layers. For each &lt;code&gt;ValueDelegate&lt;/code&gt; we can either provide a static &lt;code&gt;value&lt;/code&gt; or a &lt;code&gt;callback&lt;/code&gt; to compute a value for a each frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class _Animation extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Lottie.asset(&#xA;      &#39;assets/Tests/Shapes.json&#39;,&#xA;      delegates: LottieDelegates(&#xA;        text: (initialText) =&amp;gt; &#39;**$initialText**&#39;,&#xA;        values: [&#xA;          ValueDelegate.color(&#xA;            const [&#39;Shape Layer 1&#39;, &#39;Rectangle&#39;, &#39;Fill 1&#39;],&#xA;            value: Colors.red,&#xA;          ),&#xA;          ValueDelegate.opacity(&#xA;            const [&#39;Shape Layer 1&#39;, &#39;Rectangle&#39;],&#xA;            callback: (frameInfo) =&amp;gt; (frameInfo.overallProgress * 100).round(),&#xA;          ),&#xA;          ValueDelegate.position(&#xA;            const [&#39;Shape Layer 1&#39;, &#39;Rectangle&#39;, &#39;**&#39;],&#xA;            relative: const Offset(100, 200),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frame rate&lt;/h3&gt; &#xA;&lt;p&gt;By default, the animation is played at the frame rate exported by AfterEffect. This is the most power-friendly as generally the animation is exported at 10 or 30 FPS compared to the phone&#39;s 60 or 120 FPS. If the result is not good, you can change the frame rate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Lottie.asset(&#39;anim.json&#39;,&#xA;  // Use the device frame rate (up to 120FPS)&#xA;  frameRate: FrameRate.max,&#xA;  // Use the exported frame rate (default)&#xA;  frameRate: FrameRate.composition,&#xA;  // Specific frame rate&#xA;  frameRate: FrameRate(10),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telegram Stickers (.tgs) and DotLottie (.lottie)&lt;/h3&gt; &#xA;&lt;p&gt;TGS file can be loaded by providing a special decoder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  return ListView(&#xA;    children: [&#xA;      Lottie.network(&#xA;        &#39;https://telegram.org/file/464001484/1/bzi7gr7XRGU.10147/815df2ef527132dd23&#39;,&#xA;        decoder: LottieComposition.decodeGZip,&#xA;      ),&#xA;      Lottie.asset(&#xA;        &#39;assets/LightningBug_file.tgs&#39;,&#xA;        decoder: LottieComposition.decodeGZip,&#xA;      ),&#xA;    ],&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can select the correct .json file from a dotlottie (.lottie) archive by providing a custom decoder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example extends StatelessWidget {&#xA;  const Example({super.key});&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Lottie.asset(&#xA;      &#39;assets/cat.lottie&#39;,&#xA;      decoder: customDecoder,&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;Future&amp;lt;LottieComposition?&amp;gt; customDecoder(List&amp;lt;int&amp;gt; bytes) {&#xA;  return LottieComposition.decodeZip(bytes, filePicker: (files) {&#xA;    return files.firstWhereOrNull(&#xA;        (f) =&amp;gt; f.name.startsWith(&#39;animations/&#39;) &amp;amp;&amp;amp; f.name.endsWith(&#39;.json&#39;));&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance or excessive CPU/GPU usage&lt;/h2&gt; &#xA;&lt;p&gt;Version &lt;code&gt;v3.0&lt;/code&gt; introduced the &lt;code&gt;enableRenderCache&lt;/code&gt; parameter to help reduce an excessive energy consumption.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, the frames of the animation are rendered lazily in an offscreen cache. Subsequent runs of the animation are very cheap to render. It helps reduce the power usage of the application at the cost of an increased memory usage.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;This port supports the same &lt;a href=&#34;https://airbnb.io/lottie/#/supported-features&#34;&gt;feature set as Lottie Android&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Flutter Web&lt;/h2&gt; &#xA;&lt;p&gt;Run the app with &lt;code&gt;flutter run -d chrome --web-renderer canvaskit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See a preview here: &lt;a href=&#34;https://xvrh.github.io/lottie-flutter-web/&#34;&gt;https://xvrh.github.io/lottie-flutter-web/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;example&lt;/code&gt; folder for more code samples of the various possibilities.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gstory0404/fun_reader</title>
    <updated>2023-12-14T01:30:40Z</updated>
    <id>tag:github.com,2023-12-14:/gstory0404/fun_reader</id>
    <link href="https://github.com/gstory0404/fun_reader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;小说、漫画阅读器，支持android、ios、window、macos、linux多平台运行，支持自定义书源导入，支持多语言。&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://github.com/gstory0404/fun_reader/raw/master/assets/images/logo.png&#34; width=&#34;120&#34;&gt; &lt;br&gt; FunReader &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;开源小说、漫画阅读器，支持android、ios、window、macos、linux多平台运行，支持自定义书源，支持多语言。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目仅供学习交流，请勿用于其他用途！！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;主要功能&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;自定义书源导入&lt;/li&gt; &#xA; &lt;li&gt;小说搜索&lt;/li&gt; &#xA; &lt;li&gt;小说分类查看&lt;/li&gt; &#xA; &lt;li&gt;小说阅读&lt;/li&gt; &#xA; &lt;li&gt;漫画搜索&lt;/li&gt; &#xA; &lt;li&gt;漫画分类查看&lt;/li&gt; &#xA; &lt;li&gt;漫画阅读&lt;/li&gt; &#xA; &lt;li&gt;书架管理&lt;/li&gt; &#xA; &lt;li&gt;多语言支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;预览&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;macos&lt;/th&gt; &#xA;   &lt;th&gt;android&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/gstory0404/fun_reader/raw/master/file/macos.gif&#34; width=&#34;360px&#34; height=&#34;400px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/gstory0404/fun_reader/raw/master/file/phone.gif&#34; width=&#34;210px&#34; height=&#34;400px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;书源规则&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gstory0404/fun_reader/raw/master/rule.md&#34;&gt;书源规则&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;打包&lt;/h2&gt; &#xA;&lt;p&gt;打包前需要查看文档配置&lt;a href=&#34;https://docs.flutter.dev/deployment/android&#34;&gt;运行环境&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build ipa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 需要再window环境中编译&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build windows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS 需要再macOS环境中编译&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter build macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux 需要再linux环境中编译&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;snap install --classic flutter&#xA;snap install --classic code&#xA;code --install-extension dart-code.flutter&#xA;flutter build linux&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>