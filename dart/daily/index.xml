<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-10T01:32:16Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Tencent/tdesign-flutter</title>
    <updated>2023-12-10T01:32:16Z</updated>
    <id>tag:github.com,2023-12-10:/Tencent/tdesign-flutter</id>
    <link href="https://github.com/Tencent/tdesign-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter UI components lib for TDesign.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tdesign.tencent.com/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;TDesign Logo&#34; width=&#34;200&#34; src=&#34;https://tdesign.gtimg.com/site/TDesign.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;TDesign Flutter技术栈组件库，适合在移动端项目中使用。&lt;/p&gt; &#xA;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;Flutter组件库项目在tdesign-component文件夹下，相关使用详见&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/tdesign-flutter/main/tdesign-component/README_zh.md&#34;&gt;tdesign-component/README_zh.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;其他技术栈实现&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;桌面端 Vue 3 实现：&lt;a href=&#34;https://github.com/Tencent/tdesign-vue-next&#34;&gt;web-vue-next&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;桌面端 React 实现： &lt;a href=&#34;https://github.com/Tencent/tdesign-react&#34;&gt;web-react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;移动端小程序实现： &lt;a href=&#34;https://github.com/Tencent/tdesign-miniprogram&#34;&gt;小程序&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;开源协议&lt;/h1&gt; &#xA;&lt;p&gt;TDesign 遵循 &lt;a href=&#34;https://github.com/Tencent/tdesing-flutter/raw/main/tdesign-component/LICENSE&#34;&gt;MIT 协议&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simonpham/free_file</title>
    <updated>2023-12-10T01:32:16Z</updated>
    <id>tag:github.com,2023-12-10:/simonpham/free_file</id>
    <link href="https://github.com/simonpham/free_file" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🗃️ Free File is a free and open-source cross-platform file manager. It is built with Flutter and is available for Windows, macOS, Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Free File&lt;/h1&gt; &#xA;&lt;p&gt;Free File is a free and open-source cross-platform file manager. It is built with Flutter and is available for Windows, macOS, Linux (&lt;em&gt;currently only tested on macOS. Android/iOS support coming soon&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Light Mode&lt;/th&gt; &#xA;   &lt;th&gt;Dark Mode&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/simonpham/free_file/assets/8846657/7b85519a-7769-4161-842a-2a07ef503fec&#34; alt=&#34;Free File Screenshot&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/simonpham/free_file/assets/8846657/78aa896c-ef04-44b9-9c4b-4427d61491a2&#34; alt=&#34;Free File Screenshot&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feels like home&lt;/strong&gt; - Free File can replace your default file manager. It has all the features you need. (*)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cloud storage&lt;/strong&gt; - Free File supports iCloud Drive, Google Drive, Dropbox, OneDrive,... (*)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to navigate&lt;/strong&gt; - Free File has a &lt;strong&gt;tree view&lt;/strong&gt; and an &lt;strong&gt;address bar&lt;/strong&gt; that allows you to navigate through your files and folders easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy-multitasking&lt;/strong&gt; - Free File supports tabs and split view. (*)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt; - Free File allows you to customize the app to your liking. (*)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;(*) Some of these features are not available yet. &lt;a href=&#34;https://github.com/users/simonpham/projects/1&#34;&gt;See our roadmap&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest version at &lt;a href=&#34;https://github.com/simonpham/free_file/releases/latest&#34;&gt;https://github.com/simonpham/free_file/releases/latest&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract the downloaded ZIP file.&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop &lt;code&gt;Free File.app&lt;/code&gt; to your Applications folder.&lt;/li&gt; &#xA; &lt;li&gt;Enjoy!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Free File is still in early development. If you want to contribute, please read &lt;a href=&#34;https://github.com/simonpham/free_file/raw/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Free File is licensed under the &lt;a href=&#34;https://github.com/simonpham/free_file/raw/develop/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;https://github.com/simonpham&#34;&gt;Simon Pham 🦊&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Uuttssaavv/flutter-clean-architecture-riverpod</title>
    <updated>2023-12-10T01:32:16Z</updated>
    <id>tag:github.com,2023-12-10:/Uuttssaavv/flutter-clean-architecture-riverpod</id>
    <link href="https://github.com/Uuttssaavv/flutter-clean-architecture-riverpod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean architecture in Flutter using Riverpod.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Uuttssaavv/flutter-clean-architecture-riverpod/master/coverage_badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt; &lt;a href=&#34;http://hits.dwyl.com/Uuttssaavv/flutter-clean-architecture-riverpod&#34;&gt;&lt;img src=&#34;https://hits.dwyl.com/Uuttssaavv/flutter-clean-architecture-riverpod.svg?style=flat-square&#34; alt=&#34;HitCount&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Flutter Clean Architecture with Riverpod&lt;/h1&gt; &#xA;&lt;p&gt;A Flutter app that uses the &#34;Dummy Json&#34; api.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login&lt;/li&gt; &#xA; &lt;li&gt;Fetch products&lt;/li&gt; &#xA; &lt;li&gt;Search products&lt;/li&gt; &#xA; &lt;li&gt;Pagination&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What is used in this project?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Riverpod&lt;/strong&gt; Used for state management&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Freezed&lt;/strong&gt; Code generation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dartz&lt;/strong&gt; Functional Programming &lt;code&gt;Either&amp;lt;Left,Right&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Auto Route&lt;/strong&gt; Navigation package that uses code generation to simplify route setup&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dio&lt;/strong&gt; Http client for dart. Supports interceptors and global configurations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shared Preferences&lt;/strong&gt; Persistent storage for simple data&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flutter and Dart&lt;/strong&gt; And obviously flutter and dart 😅&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Project Description&lt;/h3&gt; &#xA;&lt;h4&gt;Data&lt;/h4&gt; &#xA;&lt;p&gt;The data layer is the outermost layer of the application and is responsible for communicating with the server-side or a local database and data management logic. It also contains repository implementations.&lt;/p&gt; &#xA;&lt;h5&gt;a. Data Source&lt;/h5&gt; &#xA;&lt;p&gt;Describes the process of acquiring and updating the data. Consist of remote and local Data Sources. Remote Data Source will perform HTTP requests on the API. At the same time, local Data sources will cache or persist data.&lt;/p&gt; &#xA;&lt;h5&gt;b. Repository&lt;/h5&gt; &#xA;&lt;p&gt;The bridge between the Data layer and the Domain layer. Actual implementations of the repositories in the Domain layer. Repositories are responsible for coordinating data from the different Data Sources.&lt;/p&gt; &#xA;&lt;h4&gt;Domain&lt;/h4&gt; &#xA;&lt;p&gt;The domain layer is responsible for all the business logic. It is written purely in Dart without flutter elements because the domain should only be concerned with the business logic of the application, not with the implementation details.&lt;/p&gt; &#xA;&lt;h5&gt;a. Providers&lt;/h5&gt; &#xA;&lt;p&gt;Describes the logic processing required for the application. Communicates directly with the repositories.&lt;/p&gt; &#xA;&lt;h5&gt;b. Repositories&lt;/h5&gt; &#xA;&lt;p&gt;Abstract classes that define the expected functionality of outer layers.&lt;/p&gt; &#xA;&lt;h4&gt;Presentation&lt;/h4&gt; &#xA;&lt;p&gt;The presentation layer is the most framework-dependent layer. It is responsible for all the UI and handling the events in the UI. It does not contain any business logic.&lt;/p&gt; &#xA;&lt;h5&gt;a. Widget (Screens/Views)&lt;/h5&gt; &#xA;&lt;p&gt;Widgets notify the events and listen to the states emitted from the &lt;code&gt;StateNotifierProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;b. Providers&lt;/h5&gt; &#xA;&lt;p&gt;Describes the logic processing required for the presentation. Communicates directly with the &lt;code&gt;Providers&lt;/code&gt; from the domain layer.&lt;/p&gt; &#xA;&lt;h3&gt;Project Description&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main.dart&lt;/code&gt; file has services initialization code and wraps the root &lt;code&gt;MyApp&lt;/code&gt; with a &lt;code&gt;ProviderScope&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;main/app.dart&lt;/code&gt; has the root &lt;code&gt;MaterialApp&lt;/code&gt; and initializes &lt;code&gt;AppRouter&lt;/code&gt; to handle the route throughout the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;services&lt;/code&gt; abstract app-level services with their implementations.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;shared&lt;/code&gt; folder contains code shared across features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;theme&lt;/code&gt; contains general styles (colors, themes &amp;amp; text styles)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt; contains all the Data models needed in the application.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;http&lt;/code&gt; is implemented with Dio.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;storage&lt;/code&gt; is implemented with SharedPreferences.&lt;/li&gt; &#xA;   &lt;li&gt;Service locator pattern and Riverpod are used to abstract services when used in other layers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final storageServiceProvider = Provider((ref) {&#xA;  return SharedPrefsService();&#xA;});&#xA;&#xA;// Usage:&#xA;// ref.watch(storageServiceProvider);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;features&lt;/code&gt; folder: the repository pattern is used to decouple logic required to access data sources from the domain layer. For example, the &lt;code&gt;DashboardRepository&lt;/code&gt; abstracts and centralizes the various functionality required to fetch the &lt;code&gt;Product&lt;/code&gt; from the remote.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class DashboardRepository {&#xA;  Future&amp;lt;Either&amp;lt;AppException, PaginatedResponse&amp;gt;&amp;gt; fetchProducts({required int skip});&#xA;&#xA;  Future&amp;lt;Either&amp;lt;AppException, PaginatedResponse&amp;gt;&amp;gt; searchProducts({required int skip, required String query});&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The repository implementation with the &lt;code&gt;DashboardDatasource&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class DashboardRepositoryImpl extends DashboardRepository {&#xA;  final DashboardDatasource dashboardDatasource;&#xA;  DashboardRepositoryImpl(this.dashboardDatasource);&#xA;&#xA;  @override&#xA;  Future&amp;lt;Either&amp;lt;AppException, PaginatedResponse&amp;gt;&amp;gt; fetchProducts(&#xA;      {required int skip}) {&#xA;    return dashboardDatasource.fetchPaginatedProducts(skip: skip);&#xA;  }&#xA;&#xA;  @override&#xA;  Future&amp;lt;Either&amp;lt;AppException, PaginatedResponse&amp;gt;&amp;gt; searchProducts(&#xA;      {required int skip, required String query}) {&#xA;    return dashboardDatasource.searchPaginatedProducts(&#xA;        skip: skip, query: query);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Riverpod &lt;code&gt;Provider&lt;/code&gt; to access this implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final dashboardRepositoryProvider = Provider&amp;lt;DashboardRepository&amp;gt;((ref) {&#xA;  final datasource = ref.watch(dashboardDatasourceProvider(networkService));&#xA;&#xA;  return DashboardRepositoryImpl(datasource);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally accessing the repository implementation from the Presentation layer using a Riverpod &lt;code&gt;StateNotifierProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final dashboardNotifierProvider =&#xA;    StateNotifierProvider&amp;lt;DashboardNotifier, DashboardState&amp;gt;((ref) {&#xA;  final repository = ref.watch(dashboardRepositoryProvider);&#xA;  return DashboardNotifier(repository)..fetchProducts();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how the abstract &lt;code&gt;NetworkService&lt;/code&gt; is accessed from the repository implementation and then the abstract &lt;code&gt;DashboardRepository&lt;/code&gt; is accessed from the &lt;code&gt;DashboardNotifier&lt;/code&gt; and how each of these layers acheive separation and scalability by providing the ability to switch implementation and make changes and/or test each layer seaparately.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; folder mirrors the &lt;code&gt;lib&lt;/code&gt; folder in addition to some test utilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/state_notifier_test&#34;&gt;&lt;code&gt;state_notifier_test&lt;/code&gt;&lt;/a&gt; is used to test the &lt;code&gt;StateNotifier&lt;/code&gt; and mock &lt;code&gt;Notifier&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/mocktail&#34;&gt;&lt;code&gt;mocktail&lt;/code&gt;&lt;/a&gt; is used to mock dependecies.&lt;/p&gt; &#xA;&lt;h4&gt;1. Testing the simple &lt;code&gt;Provider&lt;/code&gt; provider:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;test(&#39;dashboardDatasourceProvider is a DashboardDatasource&#39;, () {&#xA;    dashboardDataSource = providerContainer.read&#xA;    (dashboardDatasourceProvider(networkService));&#xA;&#xA;    expect(&#xA;      dashboardDataSource,&#xA;      isA&amp;lt;DashboardDatasource&amp;gt;(),&#xA;    );&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is how we can test it separately from Flutter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  late DashboardDatasource dashboardDatasource;&#xA;  late DashboardRepository dashboardRepository;&#xA;  setUpAll(() {&#xA;    dashboardDatasource = MockRemoteDatasource();&#xA;    dashboardRepository = DashboardRepositoryImpl(dashboardDatasource);&#xA;  });&#xA;  test(&#xA;    &#39;Should return AppException on failure&#39;,&#xA;    () async {&#xA;      // arrange&#xA;      when(() =&amp;gt; dashboardDatasource.searchPaginatedProducts(skip: any(named: &#39;skip&#39;), query: any(named: &#39;query&#39;)))&#xA;          .thenAnswer(&#xA;        (_) async =&amp;gt; Left(ktestAppException),&#xA;      );&#xA;&#xA;      // assert&#xA;      final response = await dashboardRepository.searchProducts(skip: 1, query: &#39;&#39;);&#xA;&#xA;      // act&#xA;      expect(response.isLeft(), true);&#xA;    },&#xA;  );&#xA;}&#xA;&#xA;class MockRemoteDatasource extends Mock implements DashboardRemoteDatasource {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To explore test coverage&lt;/h3&gt; &#xA;&lt;p&gt;run &lt;code&gt;bash gencov.sh&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Folder Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;lib&#xA;├── configs&#xA;│ └── app_configs.dart&#xA;│&#xA;├── main&#xA;│ ├── app.dart&#xA;│ ├── app_env.dart&#xA;│ ├── main_dev.dart&#xA;│ ├── main_staging.dart&#xA;│ └── observers.dart&#xA;│&#xA;├──  configs&#xA;│ └── app_configs.dart&#xA;├── routes&#xA;│ ├── app_route.dart&#xA;│ └── app_route.gr.dart&#xA;│&#xA;├── services&#xA;│ └── user_cache_service&#xA;│   ├── data&#xA;│   │ ├── datasource&#xA;│   │ │ └── user_local_datasource.dart&#xA;│   │ └── repositories&#xA;│   │  └── user_repository_impl.dart&#xA;│   ├── domain&#xA;│   │ ├── providers&#xA;│   │ │ └── user_cache_provider.dart&#xA;│   │ └── repositories&#xA;│   │   └── user_cache_repository.dart&#xA;│   └── presentation&#xA;│&#xA;├── shared&#xA;│ ├── data&#xA;│ │ ├── local&#xA;│ │ │ ├── shared_prefs_storage_service.dart&#xA;│ │ │ └── storage_service.dart&#xA;│ │ └── remote&#xA;│ │   ├── dio_network_service.dart&#xA;│ │   ├── network_service.dart&#xA;│ │   └── remote.dart&#xA;│ ├── domain&#xA;│ │ ├── models&#xA;│ │ │ ├── product&#xA;│ │ │ │ ├── product_model.dart&#xA;│ │ │ │ ├── product_model.freezed.dart&#xA;│ │ │ │ └── product_model.g.dart&#xA;│ │ │ ├── user&#xA;│ │ │ │ └── user_model.dart&#xA;│ │ │ ├── models.dart&#xA;│ │ │ ├── paginated_response.dart&#xA;│ │ │ ├── parse_response.dart&#xA;│ │ │ └── response.dart&#xA;│ │ └── providers&#xA;│ │   ├── dio_network_service_provider.dart&#xA;│ │   └── sharedpreferences_storage_service_provider.dart&#xA;│ ├── exceptions&#xA;│ │ └── http_exception.dart&#xA;│ ├── mixins&#xA;│ │ └── exception_handler_mixin.dart&#xA;│ ├── theme&#xA;│ │ ├── app_colors.dart&#xA;│ │ ├── app_theme.dart&#xA;│ │ ├── test_styles.dart&#xA;│ │ └── text_theme.dart&#xA;│ ├── widgets&#xA;│ │ ├── app_error.dart&#xA;│ │ └── app_loading.dart&#xA;│ └── globals.dart&#xA;│&#xA;├──  features&#xA;│ ├──  authentication&#xA;│ │ ├──  data&#xA;│ │ │ ├──  datasource&#xA;│ │ │ │ ├──  auth_local_data_source.dart&#xA;│ │ │ │ └── auth_remote_data_source.dart&#xA;│ │ │ └── repositories&#xA;│ │ │   └── atuhentication_repository_impl.dart&#xA;│ │ ├──  domain&#xA;│ │ │ ├──  providers&#xA;│ │ │ │ └── login_provider.dart&#xA;│ │ │ └── repositories&#xA;│ │ │   └── auth_repository.dart&#xA;│ │ └── presentation&#xA;│ │   ├──  providers&#xA;│ │   │ ├──  state&#xA;│ │   │ │ ├──  auth_notifier.dart&#xA;│ │   │ │ ├──  auth_state.dart&#xA;│ │   │ │ └──  auth_state.freezed.dart&#xA;│ │   │ └── auth_providers.dart&#xA;│ │   ├──  screens&#xA;│ │   │ └── login_screen.dart&#xA;│ │   └── widgets&#xA;│ │     ├──  auth_field.dart&#xA;│ │     └── button.dart&#xA;│ ├──  dashboard&#xA;....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run this project&lt;/h3&gt; &#xA;&lt;h5&gt;Clone this repository&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt; git clone https://github.com/Uuttssaavv/flutter-clean-architecture-riverpod&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Go to the project directory&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt; cd flutter-clean-architecture-riverpod&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Get all the packages&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;flutter pub get&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Run the build runner command&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;flutter pub run build_runner build &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Run the project&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;flutter run&lt;/code&gt; or simply press &lt;code&gt; F5 key&lt;/code&gt; if you are using VSCode&lt;/p&gt; &#xA;&lt;h3&gt;About Me&lt;/h3&gt; &#xA;&lt;p&gt;Do visit my &lt;a href=&#34;https://utsavghimire.com.np&#34;&gt;portfolio site&lt;/a&gt; or connect with me on &lt;a href=&#34;https://www.linkedin.com/in/utsav-ghimire-10352a18b/&#34;&gt;linkedin&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>