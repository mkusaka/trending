<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-06T01:29:24Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LeGoffMael/video_editor</title>
    <updated>2024-01-06T01:29:24Z</updated>
    <id>tag:github.com,2024-01-06:/LeGoffMael/video_editor</id>
    <link href="https://github.com/LeGoffMael/video_editor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flutter package for editing video written in pure Dart with fully customizable UI. Supports crop, trim, rotation and cover selection.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter video editor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/video_editor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/video_editor.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LeGoffMael/video_editor/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/LeGoffMael/video_editor?style=social&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A video editor that allows to edit (trim, crop, rotate and scale) and choose a cover with a very flexible UI design.&lt;/p&gt; &#xA;&lt;p&gt;The library provides some tools to execute the exportation but does not handle it.&lt;/p&gt; &#xA;&lt;p&gt;This library is written in Dart only but uses external packages such as &lt;a href=&#34;https://pub.dev/packages/video_thumbnail&#34;&gt;video_thumbnail&lt;/a&gt;, which makes it available only on iOS and Android plaforms for now (&lt;a href=&#34;https://github.com/LeGoffMael/video_editor/pull/147&#34;&gt;web support is currently in progress&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you use a version between (1.2.3 and 2.4.0) your project might be subject to a GPL license.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Support&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SDK 16+&lt;/td&gt; &#xA;   &lt;td&gt;11.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ðŸ“– Installation&lt;/h2&gt; &#xA;&lt;p&gt;Following steps will help you add this library as a dependency in your flutter project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter pub add video_editor&lt;/code&gt;, or add video_editor to &lt;code&gt;pubspec.yaml&lt;/code&gt; file manually.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  video_editor: ^2.4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import the package in your code:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:video_editor/video_editor.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ðŸ“¸ Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Example app running on an Iphone 11 pro&lt;/th&gt; &#xA;   &lt;th&gt;Customization example, light mode&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeGoffMael/video_editor/master/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LeGoffMael/video_editor/master/assets/light_editor.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ðŸ‘€ Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final VideoEditorController _controller = VideoEditorController.file(&#xA;  File(&#39;/path/to/video.mp4&#39;),&#xA;  minDuration: const Duration(seconds: 1),&#xA;  maxDuration: const Duration(seconds: 10),&#xA;);&#xA;&#xA;@override&#xA;void initState() {&#xA;  super.initState();&#xA;  _controller.initialize().then((_) =&amp;gt; setState(() {}));&#xA;}&#xA;&#xA;@override&#xA;void dispose() {&#xA;  _controller.dispose();&#xA;  super.dispose();&#xA;}&#xA;&#xA;/// Basic export video function&#xA;Future&amp;lt;void&amp;gt; exportVideo() async {&#xA;  final config = VideoFFmpegVideoEditorConfig(_controller);&#xA;  // Returns the generated command and the output path&#xA;  final FFmpegVideoEditorExecute execute = await config.getExecuteConfig();&#xA;&#xA;  // ... handle the video exportation yourself, using ffmpeg_kit_flutter, your own video server, ...&#xA;}&#xA;&#xA;/// Export the video as a GIF image&#xA;Future&amp;lt;void&amp;gt; exportGif() async {&#xA;  final gifConfig = VideoFFmpegVideoEditorConfig(&#xA;    _controller,&#xA;    format: VideoExportFormat.gif,&#xA;  );&#xA;  // Returns the generated command and the output path&#xA;  final FFmpegVideoEditorExecute gifExecute = await gifConfig.getExecuteConfig();&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;/// Export a video, with custom command (ultrafast preset + horizontal flip)&#xA;Future&amp;lt;void&amp;gt; exportMirroredVideo() async {&#xA;  final mirrorConfig = VideoFFmpegVideoEditorConfig(&#xA;      _controller,&#xA;      name: &#39;mirror-video&#39;&#xA;      commandBuilder: (VideoFFmpegVideoEditorConfig config, String videoPath, String outputPath) {&#xA;        final List&amp;lt;String&amp;gt; filters = config.getExportFilters();&#xA;        filters.add(&#39;hflip&#39;); // add horizontal flip&#xA;&#xA;        return &#39;-i $videoPath ${config.filtersCmd(filters)} -preset ultrafast $outputPath&#39;;&#xA;      },&#xA;    );&#xA;  // Returns the generated command and the output path&#xA;  final FFmpegVideoEditorExecute mirrorExecute = await mirrorConfig.getExecuteConfig();&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details check out the &lt;a href=&#34;https://github.com/LeGoffMael/video_editor/tree/master/example&#34;&gt;example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VideoEditorController&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initialize(double? aspectRatio)&lt;/td&gt; &#xA;   &lt;td&gt;Init the &lt;code&gt;controller&lt;/code&gt; parameters, the video, the trim and the cover, call &lt;code&gt;cropAspectRatio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rotate90Degrees(RotateDirection)&lt;/td&gt; &#xA;   &lt;td&gt;Rotate the video by 90 degrees in the direction provided&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setPreferredRatioFromCrop&lt;/td&gt; &#xA;   &lt;td&gt;Update the aspect ratio to the current crop area ratio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cropAspectRatio(double?)&lt;/td&gt; &#xA;   &lt;td&gt;Update the aspect ratio + update the crop area to the center of the video size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;updateCrop(Offset, Offset)&lt;/td&gt; &#xA;   &lt;td&gt;Update the controller crop min and max values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;applyCacheCrop&lt;/td&gt; &#xA;   &lt;td&gt;Update the controller crop min and max values with cache values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;updateTrim(double, double)&lt;/td&gt; &#xA;   &lt;td&gt;Update the controller trim min and max values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Getter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Duration startTrim&lt;/td&gt; &#xA;   &lt;td&gt;The start value of the trimmed area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Duration endTrim&lt;/td&gt; &#xA;   &lt;td&gt;The end value of the trimmed area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Duration trimmedDuration&lt;/td&gt; &#xA;   &lt;td&gt;The duration of the selected trimmed area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool isTrimmed&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; when the trimmed values are not the default video duration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool isTrimming&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; when startTrim or endTrim is changing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Duration maxDuration&lt;/td&gt; &#xA;   &lt;td&gt;The maxDuration possible for the trimmed area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Duration minDuration&lt;/td&gt; &#xA;   &lt;td&gt;The minDuration possible for the trimmed area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offset minCrop&lt;/td&gt; &#xA;   &lt;td&gt;The top left position of the crop area (between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Offset maxCrop&lt;/td&gt; &#xA;   &lt;td&gt;The bottom right position of the crop area (between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Size croppedArea&lt;/td&gt; &#xA;   &lt;td&gt;The actual Size of the crop area&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;double? preferredCropAspectRatio&lt;/td&gt; &#xA;   &lt;td&gt;The preferred crop aspect ratio selected&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool isRotated&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; when the rotation is different to &lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int rotation&lt;/td&gt; &#xA;   &lt;td&gt;The rotation angle set &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;90&lt;/code&gt;, &lt;code&gt;180&lt;/code&gt; and &lt;code&gt;270&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int cacheRotation&lt;/td&gt; &#xA;   &lt;td&gt;The sum of all the rotation applied in the editor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoverData? selectedCoverVal&lt;/td&gt; &#xA;   &lt;td&gt;The selected cover thumbnail that will be used to export the final cover&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int coverThumbnailsQuality = 10&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;coverThumbnailsQuality&lt;/code&gt; param specifies the quality of the generated cover thumbnails, from 0 to 100 (&lt;a href=&#34;https://pub.dev/packages/video_thumbnail&#34;&gt;more info&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int trimThumbnailsQuality = 10&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;trimThumbnailsQuality&lt;/code&gt; param specifies the quality of the generated trim slider thumbnails, from 0 to 100 (&lt;a href=&#34;https://pub.dev/packages/video_thumbnail&#34;&gt;more info&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Widgets&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand widgets documentation&lt;/summary&gt; &#xA; &lt;h4&gt;Crop&lt;/h4&gt; &#xA; &lt;h5&gt;1. CropGridViewer&lt;/h5&gt; &#xA; &lt;p&gt;This widget is used to enable the crop actions on top of the video (CropGridViewer.edit), or only to preview the cropped result (CropGridViewer.preview).&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;required VideoEditorController controller&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;controller&lt;/code&gt; param is mandatory so every change in the controller settings will propagate in the crop view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;EdgeInsets margin&lt;/td&gt; &#xA;    &lt;td&gt;The amount of space by which to inset the crop view, not used in preview mode&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;bool rotateCropArea&lt;/td&gt; &#xA;    &lt;td&gt;To preserve &lt;code&gt;preferredCropAspectRatio&lt;/code&gt; when crop view is rotated&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Trimmer&lt;/h4&gt; &#xA; &lt;h5&gt;1. TrimSlider&lt;/h5&gt; &#xA; &lt;p&gt;Display the trimmer containing video thumbnails with rotation and crop parameters.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;required VideoEditorController controller&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;controller&lt;/code&gt; param is mandatory so every change in the controller settings will propagate in the trim slider view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double height = 0.0&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;height&lt;/code&gt; param specifies the height of the generated thumbnails&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double horizontalMargin = 0.0&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;horizontalMargin&lt;/code&gt; param specifies the horizontal space to set around the slider. It is important when the trim can be dragged (&lt;code&gt;controller.maxDuration&lt;/code&gt; &amp;lt; &lt;code&gt;controller.videoDuration&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Widget? child&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;child&lt;/code&gt; param can be specify to display a widget below this one (e.g: TrimTimeline)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;bool hasHaptic = true&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;hasHaptic&lt;/code&gt; param specifies if haptic feed back can be triggered when the trim touch an edge (left or right)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double maxViewportRatioo = 2.5&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;maxViewportRatio&lt;/code&gt; param specifies the upper limit of the view ratio&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;ScrollController? scrollController&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;scrollController&lt;/code&gt; param specifies the scroll controller to use for the trim slider view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h5&gt;2. TrimTimeline&lt;/h5&gt; &#xA; &lt;p&gt;Display the video timeline.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;required VideoEditorController controller&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;controller&lt;/code&gt; param is mandatory so depending on the &lt;code&gt;controller.maxDuration&lt;/code&gt;, the generated timeline will be different&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double quantity = 8&lt;/td&gt; &#xA;    &lt;td&gt;Expected &lt;code&gt;quantity&lt;/code&gt; of elements shown in the timeline&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;EdgeInsets padding = EdgeInsets.zero&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;padding&lt;/code&gt; param specifies the space surrounding the timeline&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;String localSeconds = &#39;s&#39;&lt;/td&gt; &#xA;    &lt;td&gt;The String to represents the seconds to show next to each timeline element&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;TextStyle? textStyle&lt;/td&gt; &#xA;    &lt;td&gt;The TextStyle to use to style the timeline text&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Cover&lt;/h4&gt; &#xA; &lt;h5&gt;1. CoverSelection&lt;/h5&gt; &#xA; &lt;p&gt;Display a couple of generated covers with rotation and crop parameters to updated the selected cover.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;required VideoEditorController controller&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;controller&lt;/code&gt; param is mandatory so every change in the controller settings will propagate in the cover selection view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double size = 0.0&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;size&lt;/code&gt; param specifies the max size of the generated thumbnails&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double horizontalMargin = 0.0&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;horizontalMargin&lt;/code&gt; param need to be specify when there is a margin outside the crop view, so in case of a change the new layout can be computed properly.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;int quantity = 5&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;quantity&lt;/code&gt; param specifies the quantity of thumbnails to generate&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Wrap? wrap&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;wrap&lt;/code&gt; widget to use to customize the thumbnails wrapper&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Function? selectedCoverBuilder&lt;/td&gt; &#xA;    &lt;td&gt;To returns how the selected cover should be displayed&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h5&gt;2. CoverViewer&lt;/h5&gt; &#xA; &lt;p&gt;Display the selected cover with rotation and crop parameters.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;required VideoEditorController controller&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;controller&lt;/code&gt; param is mandatory so every change in the controller settings will propagate the crop parameters in the cover view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;String noCoverText = &#39;No selection&#39;&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;noCoverText&lt;/code&gt; param specifies the text to display when selectedCover is &lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand style documentation&lt;/summary&gt; &#xA; &lt;h4&gt;1. CropStyle&lt;/h4&gt; &#xA; &lt;p&gt;You can create your own CropStyle class to customize the CropGridViewer appareance.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color croppingBackground = Colors.black.withOpacity(0.48)&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;croppingBackground&lt;/code&gt; param specifies the color of the paint area outside the crop area when copping&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color background = Colors.black&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;background&lt;/code&gt; param specifies the color of the paint area outside the crop area when not copping&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double gridLineWidth = 1&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;gridLineWidth&lt;/code&gt; param specifies the width of the crop lines&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color gridLineColor = Colors.white&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;gridLineColor&lt;/code&gt; param specifies the color of the crop lines&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;int gridSize = 3&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;gridSize&lt;/code&gt; param specifies the quantity of columns and rows in the crop view&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color boundariesColor = Colors.white&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;boundariesColor&lt;/code&gt; param specifies the color of the crop area&#39;s corner&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color selectedBoundariesColor = kDefaultSelectedColor&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;selectedBoundariesColor&lt;/code&gt; param specifies the color of the selected crop area&#39;s corner&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double boundariesLength = 20&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;boundariesLength&lt;/code&gt; param specifies the length of the crop area&#39;s corner&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double boundariesWidth = 5&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;boundariesWidth&lt;/code&gt; param specifies the width of the crop area&#39;s corner&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;2. TrimStyle&lt;/h4&gt; &#xA; &lt;p&gt;You can create your own TrimStyle class to customize the TrimSlider appareance.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color background = Colors.black.withOpacity(0.6)&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;background&lt;/code&gt; param specifies the color of the paint area outside the trimmed area&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color positionLineColor = Colors.red&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;positionLineColor&lt;/code&gt; param specifies the color of the line showing the video position&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double positionLineWidth = 2&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;positionLineWidth&lt;/code&gt; param specifies the width of the line showing the video position&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color lineColor = Colors.white&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;lineColor&lt;/code&gt; param specifies the color of the borders around the trimmed area&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color onTrimmingColor = kDefaultSelectedColor&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;onTrimmingColor&lt;/code&gt; param specifies the color of the borders around the trimmed area while it is getting trimmed&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color onTrimmedColor = kDefaultSelectedColor&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;onTrimmedColor&lt;/code&gt; param specifies the color of the borders around the trimmed area when the trimmed parameters are not default values&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double lineWidth = 2&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;lineWidth&lt;/code&gt; param specifies the width of the borders around the trimmed area&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;TrimSliderEdgesType borderRadius = 5&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;borderRadius&lt;/code&gt; param specifies the border radius around the trimmer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double edgesType = TrimSliderEdgesType.bar&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;edgesType&lt;/code&gt; param specifies the style to apply to the edges (left &amp;amp; right) of the trimmer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double edgesSize&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;edgesSize&lt;/code&gt; param specifies the size of the edges behind the icons&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color iconColor = Colors.black&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;iconColor&lt;/code&gt; param specifies the color of the icons on the trimmed area&#39;s edges&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double iconSize = 25&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;iconSize&lt;/code&gt; param specifies the size of the icon on the trimmed area&#39;s edges&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;IconData? leftIcon = Icons.arrow_left&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;leftIcon&lt;/code&gt; param specifies the icon to show on the left edge of the trimmed area&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;IconData? rightIcon = Icons.arrow_right&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;rightIcon&lt;/code&gt; param specifies the icon to show on the right edge of the trimmed area&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;3. CoverStyle&lt;/h3&gt; &#xA; &lt;p&gt;You can create your own CoverStyle class to customize the CoverSelection appareance.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Param&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Color selectedBorderColor = Colors.white&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;selectedBorderColor&lt;/code&gt; param specifies the color of the border around the selected cover thumbnail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double borderWidth = 2&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;borderWidth&lt;/code&gt; param specifies the width of the border around each cover thumbnails&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;double borderRadius = 5.0&lt;/td&gt; &#xA;    &lt;td&gt;The &lt;code&gt;borderRadius&lt;/code&gt; param specifies the border radius of each cover thumbnail&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Export&lt;/h4&gt; &#xA;&lt;h4&gt;1. FFmpegVideoEditorConfig&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String? name&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;name&lt;/code&gt; param specifies the filename of the generated file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String? outputDirectory&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;outputDirectory&lt;/code&gt; param specifies where the file should be generated, default to temporary directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;double scale = 1&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;scale&lt;/code&gt; param is used to increase or decrease the generated file dimensions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool isFiltersEnabled = true&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;isFiltersEnabled&lt;/code&gt; param specifies if the editor parameters should be applied&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;2. VideoFFmpegVideoEditorConfig&lt;/h4&gt; &#xA;&lt;p&gt;Contains all FFmpegVideoEditorConfig parameters.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VideoExportFormat format = VideoExportFormat.mp4&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;format&lt;/code&gt; param specifies the extension of the generated video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String Function? commandBuilder&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;commandBuilder&lt;/code&gt; param can be used to generate a command with custom options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;3. CoverFFmpegVideoEditorConfig&lt;/h4&gt; &#xA;&lt;p&gt;Contains all FFmpegVideoEditorConfig parameters.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoverExportFormat format = CoverExportFormat.jpg&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;format&lt;/code&gt; param specifies the extension of the generated cover&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int quality = 100&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;quality&lt;/code&gt; param specifies the quality of the generated thumbnails, from 0 to 100 (&lt;a href=&#34;https://pub.dev/packages/video_thumbnail&#34;&gt;more info&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String Function? commandBuilder&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;commandBuilder&lt;/code&gt; param can be used to generate a command with custom options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ðŸ’­ FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;1. Why was FFmpeg removed from this package ?&lt;/h3&gt; &#xA;&lt;p&gt;Starting from version 3.0.0, the video_editor package no longer includes &lt;a href=&#34;https://pub.dev/packages/ffmpeg_kit_flutter&#34;&gt;ffmpeg_kit_flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The inclusion of ffmpeg_kit_flutter binary in this package caused numerous issues for users who intended to utilize a different instance of FFmpeg within the same project (#37, #129, #153).&lt;/li&gt; &#xA; &lt;li&gt;Additionally, it came to my attention that the video_editor package may have been mis-licensed and subject to the GPL v3.0 license since version 1.2.3, when it began utilizing the ffmpeg_kit_flutter_min_kit binary.&lt;/li&gt; &#xA; &lt;li&gt;Lastly, the FFmpeg package is quite large and significantly increases the app size, which is not ideal for developers seeking to handle exportation in a different way.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;âœ¨ Credit&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/seel-channel&#34;&gt;seel-channel&lt;/a&gt; who is the original creator of this library.&lt;/p&gt;</summary>
  </entry>
</feed>