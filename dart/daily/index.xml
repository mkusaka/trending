<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-04T01:28:04Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SankethBK/diaryvault</title>
    <updated>2023-10-04T01:28:04Z</updated>
    <id>tag:github.com,2023-10-04:/SankethBK/diaryvault</id>
    <link href="https://github.com/SankethBK/diaryvault" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A personal diary application written in Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Diary Vault&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A FOSS, offline first personal diary application written in Flutter&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://play.google.com/store/apps/details?id=me.sankethbk.dairyapp&#34;&gt; &lt;img alt=&#34;Android App on Google Play&#34; src=&#34;https://developer.android.com/images/brand/en_app_rgb_wo_45.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Rich text editor with support for images and videos&lt;/li&gt; &#xA; &lt;li&gt;Your data is securely preserved on your Google Drive / Dropbox account, ensuring complete ownership and privacy&lt;/li&gt; &#xA; &lt;li&gt;Sync data between multiple devices&lt;/li&gt; &#xA; &lt;li&gt;Fingerprint login on supported devices&lt;/li&gt; &#xA; &lt;li&gt;Multiple Themes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Libraries used&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bloclibrary.dev&#34;&gt;Flutter bloc&lt;/a&gt; for state management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_quill&#34;&gt;FlutterQuill&lt;/a&gt; for rich text editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_local_auth_invisible&#34;&gt;Flutter Local Auth Invisible&lt;/a&gt; for fingerprint login&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/dartz&#34;&gt;Dartz&lt;/a&gt; for functional programming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/sqflite&#34;&gt;SQFLite&lt;/a&gt; as local database&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Screenshots&lt;/h3&gt; &#xA;&lt;div style=&#34;display:flex; flex-wrap: wrap;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/9bfe5700-5cf7-4852-a158-f5b19278cc8d&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/5e034a32-3fb9-478b-a3be-61b270f975a9&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/f7aca438-a923-4977-8cf2-216561aebcc7&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/d5b5766a-547b-41e9-b834-9035fd805c9f&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/1ef02504-7b22-4a36-88cd-7381ccc6c847&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/5928736b-2a2c-44cc-ae6b-2fb311ec796e&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/b544c3b8-2b7b-4ff3-90c9-c474ed87e6e6&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/SankethBK/diaryvault/assets/51091231/89163acc-8905-408a-a652-d3c2d1f8eb06&#34; style=&#34;padding: 1rem; height: 300px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Motivation for building this app&lt;/h3&gt; &#xA;&lt;p&gt;As someone who enjoys writing in a diary, I&#39;ve tried out many diary apps on Google Play. Through my own experiences and by reading what others have shared in their reviews, I&#39;ve gained a better understanding of the issues that current diary apps face.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires premium subscription for seemingly simple features&lt;/li&gt; &#xA; &lt;li&gt;Lack of proper authentication: In some cases, users have to enter their password every time they log in, as there is no support for fingerprint authentication&lt;/li&gt; &#xA; &lt;li&gt;Ads are the last thing you want to encounter while writing; just picture yourself composing a thought-provoking entry, and an ad suddenly appears, disrupting your train of thought&lt;/li&gt; &#xA; &lt;li&gt;No support for images&lt;/li&gt; &#xA; &lt;li&gt;No automatic saving: People don&#39;t want to lose their lengthy notes just because they ran out of battery, received a phone call or clicked on a notification&lt;/li&gt; &#xA; &lt;li&gt;No font customization for overall app and individual note level&lt;/li&gt; &#xA; &lt;li&gt;No customizable sorting: Not everyone wants to sort by date&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üåü &lt;strong&gt;If you like what we&#39;re building, please consider starring our repository on GitHub to show your support. It means a lot to us!&lt;/strong&gt; ‚≠ê&lt;/p&gt; &#xA;&lt;h3&gt;Feature Roadmap Table&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Timeline&lt;/th&gt; &#xA;   &lt;th&gt;Issue&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1. Support for tags&lt;/td&gt; &#xA;   &lt;td&gt;Planned for October release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/19&#34;&gt;#19&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2. Support for customizable sort order&lt;/td&gt; &#xA;   &lt;td&gt;Planned for October release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/28&#34;&gt;#28&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3. Auto save for every &#34;x&#34; seconds&lt;/td&gt; &#xA;   &lt;td&gt;Planned for October release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/29&#34;&gt;#29&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4. Export data to text file&lt;/td&gt; &#xA;   &lt;td&gt;Planned for October release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/26&#34;&gt;#26&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5. Support for daily reminders&lt;/td&gt; &#xA;   &lt;td&gt;Planned for October release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/24&#34;&gt;#24&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6. Support for customizable fonts&lt;/td&gt; &#xA;   &lt;td&gt;Planned for November release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/31&#34;&gt;#31&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7. Support for folder organization&lt;/td&gt; &#xA;   &lt;td&gt;Planned for November release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/30&#34;&gt;#30&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8. Export data to PDF&lt;/td&gt; &#xA;   &lt;td&gt;Planned for November release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/25&#34;&gt;#25&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9. Introduce &#34;todos&#34; within rich text editor&lt;/td&gt; &#xA;   &lt;td&gt;Planned for December release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/20&#34;&gt;#20&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10. Add support for embedding audio files in rich text editor&lt;/td&gt; &#xA;   &lt;td&gt;Planned for December release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SankethBK/diaryvault/issues/21&#34;&gt;#21&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions or doubts, join our &lt;a href=&#34;https://discord.gg/S4QkJbV9Vw&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;For local setup and contribution guidelines, please visit &lt;a href=&#34;https://raw.githubusercontent.com/SankethBK/diaryvault/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The entire project is structured in &lt;a href=&#34;https://resocoder.com/2019/08/27/flutter-tdd-clean-architecture-course-1-explanation-project-structure/&#34;&gt;this way&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;img src=&#34;https://i0.wp.com/resocoder.com/wp-content/uploads/2019/08/Clean-Architecture-Flutter-Diagram.png?w=556&amp;amp;ssl=1&#34; height=&#34;500px&#34;&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/SankethBK/diaryvault/master/lib/features&#34;&gt;&lt;code&gt;features directory&lt;/code&gt;&lt;/a&gt; carries a folder for each of the major features.&lt;/p&gt; &#xA;&lt;p&gt;These are the major features as of now:&lt;/p&gt; &#xA;&lt;h4&gt;1. Auth&lt;/h4&gt; &#xA;&lt;p&gt;DiaryVault is designed to work fully offline (internet connection is required during signup).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Signup:&lt;/strong&gt; We only support username + password during signup. After a successful signup, the data is stored in firebase and then in local SQFlite table named &lt;em&gt;Users&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Login:&lt;/strong&gt; We support &lt;em&gt;username+password&lt;/em&gt; and &lt;em&gt;fingerprint&lt;/em&gt; login (if enabled).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When a &lt;em&gt;username+password&lt;/em&gt; login is attempted, it first gets validated with data stored in &lt;em&gt;Users&lt;/em&gt; table. On success, user is logged in.&lt;/li&gt; &#xA; &lt;li&gt;If there is password mismatch in local &lt;em&gt;Users&lt;/em&gt; table, firebase login would be attempted (because there is a possibility that password was changed from some other device and local data is stale). If firebase login is successful, data in local &lt;em&gt;Users&lt;/em&gt; table is updated and user would be logged in.&lt;/li&gt; &#xA; &lt;li&gt;Fingerprint login is disabled by default, it can be enabled in app settings. We store the id of last logged in user in &lt;em&gt;shared preferences&lt;/em&gt;. If fingerprint login is attempted and successful, user with &lt;em&gt;lastLoggedInUserId&lt;/em&gt; would be logged in.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Login as Guest:&lt;/strong&gt; Guest login will allow users to use the app without creating account. &lt;em&gt;lastLoggedInUserId&lt;/em&gt; will be hardcoded to &lt;em&gt;guest_user_id&lt;/em&gt; to distinguish guest user from an actual user. Set of functionality will be limited for guest user, as some features require user account to work.&lt;/p&gt; &#xA;&lt;p&gt;Other features like &lt;strong&gt;forgot password&lt;/strong&gt;, &lt;strong&gt;reset email&lt;/strong&gt; and &lt;strong&gt;reset password&lt;/strong&gt; are supported with the help of Firebase.&lt;/p&gt; &#xA;&lt;h4&gt;2. Notes&lt;/h4&gt; &#xA;&lt;p&gt;Notes folder has the logic for CRUD operations for notes. FlutterQuill is used as rich text editor.&lt;/p&gt; &#xA;&lt;p&gt;This is the schema of the notes entity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Notes {&#xA;  final String id;&#xA;  final DateTime createdAt;&#xA;  final String title;&#xA;  final String body;&#xA;  final String hash;&#xA;  final DateTime lastModified;&#xA;  final String plainText;&#xA;  final List&amp;lt;NoteAsset&amp;gt; assetDependencies;&#xA;  final bool deleted;&#xA;  final String? authorId;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt;: An UUID will be generated when a new note is created. It will be used as unique identifier for a note. After cloud-sync ID of a note will remain same across multiple devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;createdAt&lt;/strong&gt;: Indicates the timestamp at which note was created. Can be set by user during note-creation. Its shown in home page and read-only page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;title&lt;/strong&gt;: Title of note.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;body&lt;/strong&gt;: Output of FlutterQuill&#39;s controller stored in the form of JSON. Indicates the contents of rich-text editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hash&lt;/strong&gt;: The hash value is &lt;em&gt;&lt;strong&gt;SHA1&lt;/strong&gt;&lt;/em&gt; hash of note&#39;s title + note&#39;s body + note&#39;s created_at timestamp. This hash serves as a digital fingerprint, if either note&#39;s title, body or created_at changes, then note&#39;s SHA1 hash changes and it will be synced to cloud.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lastModified&lt;/strong&gt;: Will hold the last modified timestamp of a note. Is used during cloud-syncup to determine which copy of note is newest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plainText&lt;/strong&gt;: All contents of rich-text editor are also stored as plain text. Is used for search functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;assetDependencies&lt;/strong&gt;: Holds details of external assets associated with a note, like images and videos. We store the path names of each external assets in &lt;code&gt;Note_dependencies&lt;/code&gt; table, as we also need to sync external assets during cloud-syncup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;deleted&lt;/strong&gt;: Will indicate if a note is deleted. When user deletes a note, all external assets, title and body of a note are set to &lt;code&gt;null&lt;/code&gt; or empty text and deleted is set to &lt;code&gt;true&lt;/code&gt;. Because we also need to delete that note in cloud.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;authorId&lt;/strong&gt;: Stores the user ID generated by firebase. In case multiple accounts are registered on same device, it will be used to isolate the notes of one user from another.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3. Sync&lt;/h4&gt; &#xA;&lt;p&gt;The Sync feature plays a pivotal role in ensuring that your diary app seamlessly integrates with Google Drive / Dropbox, allowing users to effortlessly manage their notes across multiple devices. Underpinning this functionality is a streamlined synchronization algorithm, which is a minimal version of syncing algorithms used in distributed systems.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an in-depth explanation of how it works:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Hash-Based Note Comparison&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each note within the app is associated with a unique hash value. The hash value is &lt;em&gt;&lt;strong&gt;SHA1&lt;/strong&gt;&lt;/em&gt; hash of note&#39;s title + note&#39;s body + note&#39;s created_at timestamp. This hash serves as a digital fingerprint, allowing us to quickly determine whether a note has been altered.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Initial Cloud Upload and Index File Creation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;During the initial upload of data to the cloud, an index file is generated and stored in the cloud. This index file, in the form of a text file, contains vital information such as the note&#39;s ID, its hash value, creation timestamp, last modification timestamp, and a flag indicating whether the note has been deleted.&lt;/li&gt; &#xA; &lt;li&gt;The app then compares this cloud-based index file with the local Notes table. If any note IDs present in the cloud&#39;s index are missing locally, the app initiates a download operation to fetch these missing notes from the cloud.&lt;/li&gt; &#xA; &lt;li&gt;Conversely, if a note ID exists locally but not in the cloud, the app uploads it to the cloud.&lt;/li&gt; &#xA; &lt;li&gt;When a note ID is found in both the local and cloud indexes, and their respective hash values differ, the app uses the timestamps of the notes&#39; last modifications to determine the appropriate action. If the local version is more recent, it gets uploaded to the cloud; if the cloud version is newer, it gets downloaded to the local device.&lt;/li&gt; &#xA; &lt;li&gt;If a note ID exists both locally and in the cloud, and their hash values are identical, no further action is taken, as the notes are already synchronized.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Ensuring Atomic Operations&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;All synchronization operations are designed to be atomic. This means that even if a user encounters a sudden loss of internet connectivity during the sync process, it will not result in an unstable or inconsistent state in either the local or cloud storage.&lt;/p&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;All of the theme related info can be found in this folder &lt;em&gt;lib/app/themes&lt;/em&gt;. Currently we have three themes &lt;em&gt;Coral Bubbles (light theme)&lt;/em&gt;, &lt;em&gt;Lush Green (light theme)&lt;/em&gt; and &lt;em&gt;Cosmic (dark theme)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are heavily using &lt;a href=&#34;https://api.flutter.dev/flutter/material/ThemeExtension-class.html&#34;&gt;Flutter Theme Extensions&lt;/a&gt; as the color palette provided by standard ThemeData object is not sufficient.&lt;/p&gt; &#xA;&lt;p&gt;In order to add a new theme, first step is to chose whether it&#39;s a light theme or dark theme. Then create a file similar to &lt;a href=&#34;https://raw.githubusercontent.com/SankethBK/diaryvault/master/lib/app/themes/coral_bubble_theme.dart&#34;&gt;&lt;code&gt;lib/app/themes/coral_bubble_theme.dart&lt;/code&gt;&lt;/a&gt;. After that, generate a background image and pick a color palette in accordance to the background image. There are lot of properties used in ThemeData object, but most of them can be copy pasted either from &lt;code&gt;coral_bubbles.dart&lt;/code&gt; for light themes or &lt;code&gt;cosmic.dart&lt;/code&gt; for dark themes.&lt;/p&gt;</summary>
  </entry>
</feed>