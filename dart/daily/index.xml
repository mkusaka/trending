<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T01:37:52Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Roaa94/flutter_cool_card_swiper</title>
    <updated>2022-06-12T01:37:52Z</updated>
    <id>tag:github.com,2022-06-12:/Roaa94/flutter_cool_card_swiper</id>
    <link href="https://github.com/Roaa94/flutter_cool_card_swiper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cool Card Swiper Using Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Cool Card Swiper&lt;/h1&gt; &#xA;&lt;p&gt;Inspired by &lt;a href=&#34;https://twitter.com/philipcdavis/status/1534192823792128000&#34;&gt;the original Swift UI implementation&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/philipcdavis&#34;&gt;@philipcdavis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üõ† &lt;a href=&#34;https://dartpad.dev/5734add617929fd7448740d7ce16ae0c&#34;&gt;Live preview &amp;amp; tincker with the code in this DartPad&lt;/a&gt; üõ†&lt;/p&gt; &#xA;&lt;h3&gt;This is how it looks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/50345358/172962639-89ac3578-2344-4a15-8ed6-dfac772de8b7.mp4&#34;&gt;https://user-images.githubusercontent.com/50345358/172962639-89ac3578-2344-4a15-8ed6-dfac772de8b7.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Details&lt;/h1&gt; &#xA;&lt;p&gt;There are a few elements in this animation&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Cards stacked behind each other, the card‚Äôs scale &amp;amp; y position depend on their order (index) in the stack.&lt;/li&gt; &#xA; &lt;li&gt;When the user touches/clicks on the front card and holds, the card rotates a small angle, the center of that angle is relative to the pointer location (top-left/top-right/bottom-left/bottom-right), and the direction of the angle is based on the pointer location side (left =&amp;gt; angle is positive, right =&amp;gt; angle is negative)&lt;/li&gt; &#xA; &lt;li&gt;When the user starts dragging, the card moves with the poitner on the y-axis&lt;/li&gt; &#xA; &lt;li&gt;When the user releases, if the card travelled an &lt;code&gt;initAnimationOffset&lt;/code&gt; distance, the main animation is triggerred, which is: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Slide up a &lt;code&gt;throwSlideYDistance&lt;/code&gt; &amp;amp; start full rotation (the rotation direction also depends on the pointer location like the animation in step 2)&lt;/li&gt; &#xA;   &lt;li&gt;While rotating, slide down into the position of the furthest card in the stack&lt;/li&gt; &#xA;   &lt;li&gt;Throughout the animation, scale down to scale of the furthest card in the stack&lt;/li&gt; &#xA;   &lt;li&gt;The background cards scale up and slide down to replace the positioning of the animating card&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚ö†Ô∏è THE MAIN CATCH ‚ö†Ô∏è A short duration after the animation starts, a callback allows the parent stack to switch the location of the background cards (the cards that aren&#39;t animating) from being behind the animating card in the z-axis, to being in-front of it. This happens when the card is &#34;in the air&#34; so that when it lands back in the stack, it lands behind the other cards.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To achieve the above, the following widgets were used:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Main &lt;code&gt;Stack&lt;/code&gt; widget containing the cards&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GestureDetector&lt;/code&gt; widget that handles user drag input and starts animations accordingly with the methods: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;onVerticalDragStart&lt;/code&gt; (step 2 &amp;amp; 3 above)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onVerticalDragUpdate&lt;/code&gt; (step 3 above)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onVerticalDragEnd&lt;/code&gt; (step 4 &amp;amp; 5 above)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;A combination of animation widgets like &lt;code&gt;TweenAnimationBuilder&lt;/code&gt;, &lt;code&gt;AnimatedBuilder&lt;/code&gt;, &lt;code&gt;AnimatedRotation&lt;/code&gt;, &lt;code&gt;Transform.translate&lt;/code&gt;, &lt;code&gt;Transform.rotate&lt;/code&gt;, &lt;code&gt;Transform.scale&lt;/code&gt; to achieve the animations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IgnorePointer&lt;/code&gt; to allow touching/clicking on the forefront card only.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;ValueListenableBuilder&lt;/code&gt; &amp;amp; &lt;code&gt;ValueNotifier&lt;/code&gt; combination to rebuild only parts of the parent &lt;code&gt;Stack&lt;/code&gt; widget without causing a rebuild of the widget being animated and thus resetting that animation half-way and not allowing it to complete. You can see this in this code snippet (the build method of the main &lt;code&gt;CoolSwiper&lt;/code&gt; widget&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@override&#xA;Widget build(BuildContext context) {&#xA;  return Stack(&#xA;    children: [&#xA;      ValueListenableBuilder(&#xA;        valueListenable: _backgroundCardsAreInFrontNotifier,&#xA;        builder: (c, bool backgroundCardsAreInFront, _) =&amp;gt;&#xA;            backgroundCardsAreInFront&#xA;                ? Positioned(child: Container())&#xA;                : _buildBackgroundCardsStack(),&#xA;      ),&#xA;      // The goal is not to rebuild this widget when the widgets around it ar swapped&#xA;      _buildFrontCard(),&#xA;      ValueListenableBuilder(&#xA;        valueListenable: _backgroundCardsAreInFrontNotifier,&#xA;        builder: (c, bool backgroundCardsAreInFront, _) =&amp;gt;&#xA;            backgroundCardsAreInFront&#xA;                ? _buildBackgroundCardsStack()&#xA;                : Positioned(child: Container()),&#xA;      ),&#xA;    ],&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then these notifiers are updated in this function, which is called inside the &lt;code&gt;onVerticalDragEnd&lt;/code&gt; in the card widget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void _onAnimationTrigger() async {&#xA;  setState(() {&#xA;    fireBackgroundCardsAnimation = true;&#xA;  });&#xA;  backgroundCardsAnimationController.forward();&#xA;  Future.delayed(Constants.backgroundCardsAnimationDuration).then(&#xA;    (_) {&#xA;      _backgroundCardsAreInFrontNotifier.value = true;&#xA;    },&#xA;  );&#xA;  Future.delayed(Constants.swipeAnimationDuration).then(&#xA;    (_) {&#xA;      _backgroundCardsAreInFrontNotifier.value = false;&#xA;      backgroundCardsAnimationController.reset();&#xA;      _swapLast();&#xA;    },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>danvick/flutter_form_builder</title>
    <updated>2022-06-12T01:37:52Z</updated>
    <id>tag:github.com,2022-06-12:/danvick/flutter_form_builder</id>
    <link href="https://github.com/danvick/flutter_form_builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple form maker for Flutter Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Form Builder&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/danvick/flutter_form_builder/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/danvick/flutter_form_builder?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/danvick/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/danvick/flutter_form_builder?logo=codefactor&amp;amp;style=for-the-badge&#34; alt=&#34;CodeFactor Grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/danvick/flutter_form_builder?logo=open+source+initiative&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/danvick/flutter_form_builder/master/#support&#34;&gt;&lt;img src=&#34;https://img.shields.io/osslifecycle/danvick/flutter_form_builder?style=for-the-badge&#34; alt=&#34;OSS Lifecycle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Awesome Flutter](https://img.shields.io/badge/Awesome-Flutter-FC60A8?logo=awesome-lists&amp;style=for-the-badge)](https://github.com/Solido/awesome-flutter#widgets) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/danvick&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/guidelines/download-assets-sm-1.svg?sanitize=true&#34; alt=&#34;Buy me a coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Flutter Form Builder provides an easy way of working with forms in Flutter by removing the boilerplate needed to build a form, validate fields, react to changes, and collect final user input.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of contents:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danvick/flutter_form_builder/master/#flutter_form_builder&#34;&gt;FormBuilder Core (&lt;code&gt;flutter_form_builder&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danvick/flutter_form_builder/master/#form_builder_extra_fields&#34;&gt;FormBuilder Extra Fields (&lt;code&gt;form_builder_extra_fields&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danvick/flutter_form_builder/master/#form_builder_validators&#34;&gt;FormBuilder Validators (&lt;code&gt;form_builder_validators&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;flutter_form_builder&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_form_builder?logo=flutter&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/actions/workflows/form_builder_core.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/danvick/flutter_form_builder/Form%20Builder%20Core?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danvick/flutter_form_builder/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/danvick/flutter_form_builder?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/danvick/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/danvick/flutter_form_builder?logo=codefactor&amp;amp;style=for-the-badge&#34; alt=&#34;CodeFactor Grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/danvick/flutter_form_builder?logo=open+source+initiative&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;FormBuilder helps in creation of data collection forms in Flutter by removing the boilerplate needed to build a form, validate fields, react to changes, and collect final user input. It provides APIs to manage your Form and generating a FormBuilder compliant FormField. It is required by &lt;code&gt;form_builder_extra_fields&lt;/code&gt; packages. This package also contains common ready-made form input fields. The package gives you a convenient way of adding fields instead of creating your own FormBuilderField from scratch.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/packages/flutter_form_builder/README.md&#34;&gt;View Documentation&lt;/a&gt;] [&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/tree/master/packages/flutter_form_builder&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h3&gt;form_builder_extra_fields&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/form_builder_extra_fields&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/form_builder_extra_fields?logo=flutter&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/actions/workflows/form_builder_extra_fields.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/danvick/flutter_form_builder/Form%20Builder%20Extra%20Fields?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danvick/flutter_form_builder/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/danvick/flutter_form_builder?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/danvick/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/danvick/flutter_form_builder?logo=codefactor&amp;amp;style=for-the-badge&#34; alt=&#34;CodeFactor Grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/danvick/flutter_form_builder?logo=open+source+initiative&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Form Builder Fields provides ready-made form input fields. Just like the flutter_form_builder package, it gives you a convenient way of adding fields instead of creating your own FormBuilderField from scratch.&lt;/p&gt; &#xA;&lt;p&gt;Unlike flutter_form_builder package which depends purely on Flutter provided input fields, flutter_extra_fields depends on external libraries to provide input widgets and extends them to be FormBuilderFields.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/packages/form_builder_extra_fields/README.md&#34;&gt;View Documentation&lt;/a&gt;] [&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/tree/master/packages/form_builder_extra_fields&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h3&gt;form_builder_validators&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/form_builder_validators&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/form_builder_validators?logo=flutter&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/actions/workflows/form_builder_validators.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/danvick/flutter_form_builder/Form%20Builder%20Validators?logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/danvick/flutter_form_builder/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/danvick/flutter_form_builder?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/danvick/flutter_form_builder&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/danvick/flutter_form_builder?logo=codefactor&amp;amp;style=for-the-badge&#34; alt=&#34;CodeFactor Grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/danvick/flutter_form_builder?logo=open+source+initiative&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Form Builder Validators provide a convenient way of validating data entered into any Flutter FormField. It provides common validation rules out of box (such as required, email, number, min, max, minLength, maxLength, date validations) as well as a way to compose multiple validation rules into one FormFieldValidator.&lt;/p&gt; &#xA;&lt;p&gt;Also included is the &lt;code&gt;l10n&lt;/code&gt; / &lt;code&gt;i18n&lt;/code&gt; of error text messages into multiple languages&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/raw/master/packages/form_builder_validators/README.md&#34;&gt;View Documentation&lt;/a&gt;] [&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/tree/master/packages/form_builder_validators&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If this set of packages was helpful to you in delivering your on project or you just wanna to support this repo, a cup of coffee would go a long way ;-)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/danvick&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/guidelines/download-assets-sm-1.svg?sanitize=true&#34; alt=&#34;Buy me a coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/danvick/flutter_form_builder/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.firebaseapp.com/image?repo=danvick/flutter_form_builder&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contributors-img.firebaseapp.com&#34;&gt;contributors-img&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MaikuB/flutter_local_notifications</title>
    <updated>2022-06-12T01:37:52Z</updated>
    <id>tag:github.com,2022-06-12:/MaikuB/flutter_local_notifications</id>
    <link href="https://github.com/MaikuB/flutter_local_notifications" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter plugin for displaying local notifications on Android, iOS, macOS and Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Local Notifications plugin&lt;/h1&gt; &#xA;&lt;p&gt;This repository consists hosts the following packages&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MaikuB/flutter_local_notifications/tree/master/flutter_local_notifications&#34;&gt;&lt;code&gt;flutter_local_notifications&lt;/code&gt;&lt;/a&gt;: code for the cross-platform facing plugin used to display local notifications within Flutter applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MaikuB/flutter_local_notifications/tree/master/flutter_local_notifications_platform_interface&#34;&gt;&lt;code&gt;flutter_local_notifications_platform_interface&lt;/code&gt;&lt;/a&gt;: the code for the common platform interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MaikuB/flutter_local_notifications/tree/master/flutter_local_notifications_linux&#34;&gt;&lt;code&gt;flutter_local_notifications_linux&lt;/code&gt;&lt;/a&gt;: the Linux implementation of &lt;a href=&#34;https://pub.dev/packages/flutter_local_notifications&#34;&gt;&lt;code&gt;flutter_local_notifications&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be found in the corresponding directories within the same name. Most developers are likely here as they are looking to use the &lt;code&gt;flutter_local_notifications&lt;/code&gt; plugin. There is a readme file within each directory with more information.&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you run into bugs, please raise them on the GitHub repository. Please do not email them to me as GitHub is the appropriate place for them and allows for members of the community to answer questions, particularly if I miss the email. It would also be much appreciated if they could be limited to actual bugs or feature requests. If you&#39;re looking at how you could use the plugin to do a particular kind of notification, check the example app provides detailed code samples for each supported feature. Also try to check the README first in case you have missed something e.g. platform-specific setup.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;The guidelines around submitting pull requests can be found &lt;a href=&#34;https://github.com/MaikuB/flutter_local_notifications/raw/master/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>