<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:34:36Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xsahil03x/multi_trigger_autocomplete</title>
    <updated>2022-08-28T01:34:36Z</updated>
    <id>tag:github.com,2022-08-28:/xsahil03x/multi_trigger_autocomplete</id>
    <link href="https://github.com/xsahil03x/multi_trigger_autocomplete" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flutter widget to add trigger based autocomplete functionality to your app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multi Trigger Autocomplete&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/v1/open-source.svg?v=102&#34; alt=&#34;Open Source Love&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/actions&#34;&gt;&lt;img src=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/workflows/multi_trigger_autocomplete/badge.svg?sanitize=true&#34; alt=&#34;Dart CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/xsahil03x/multi_trigger_autocomplete&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/xsahil03x/multi_trigger_autocomplete/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;CodeCov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/multi_trigger_autocomplete&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/multi_trigger_autocomplete.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A flutter widget to add trigger based autocomplete functionality to your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Show some ❤️ and star the repo to support the project&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/raw/master/asset/package_demo.gif?raw=true&#34; alt=&#34;An animated image of the MultiTriggerAutocomplete&#34; height=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;pubspec.yaml&lt;/code&gt; and replace &lt;code&gt;[version]&lt;/code&gt; with the latest version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  multi_trigger_autocomplete: ^[version]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this package you must first wrap your top most widget with &lt;a href=&#34;https://pub.dev/documentation/flutter_portal/latest/flutter_portal/Portal-class.html&#34;&gt;Portal&lt;/a&gt; as this package uses &lt;a href=&#34;https://pub.dev/packages/flutter_portal&#34;&gt;flutter_portal&lt;/a&gt; to show the options view.&lt;/p&gt; &#xA;&lt;p&gt;(Credits to: &lt;a href=&#34;https://github.com/rrousselGit&#34;&gt;Remi Rousselet&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Portal&lt;/code&gt;, is the equivalent of [Overlay].&lt;/p&gt; &#xA; &lt;p&gt;This widget will need to be inserted above the widget that needs to render &lt;em&gt;under&lt;/em&gt; your overlays.&lt;/p&gt; &#xA; &lt;p&gt;If you want to display your overlays on the top of &lt;em&gt;everything&lt;/em&gt;, a good place to insert that &lt;code&gt;Portal&lt;/code&gt; is above &lt;code&gt;MaterialApp&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Portal(&#xA;  child: MaterialApp(&#xA;    ...&#xA;  )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(works for &lt;code&gt;CupertinoApp&lt;/code&gt; too)&lt;/p&gt; &#xA; &lt;p&gt;This way &lt;code&gt;Portal&lt;/code&gt; will render above everything. But you could place it somewhere else to change the clip behavior.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Import the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:multi_trigger_autocomplete/multi_trigger_autocomplete.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the widget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MultiTriggerAutocomplete(&#xA;  optionsAlignment: OptionsAlignment.topStart,&#xA;  autocompleteTriggers: [&#xA;    // Add the triggers you want to use for autocomplete&#xA;    AutocompleteTrigger(&#xA;      trigger: &#39;@&#39;,&#xA;      optionsViewBuilder: (context, autocompleteQuery, controller) {&#xA;        return MentionAutocompleteOptions(&#xA;          query: autocompleteQuery.query,&#xA;          onMentionUserTap: (user) {&#xA;            final autocomplete = MultiTriggerAutocomplete.of(context);&#xA;            return autocomplete.acceptAutocompleteOption(user.id);&#xA;          },&#xA;        );&#xA;      },&#xA;    ),&#xA;    AutocompleteTrigger(&#xA;      trigger: &#39;#&#39;,&#xA;      optionsViewBuilder: (context, autocompleteQuery, controller) {&#xA;        return HashtagAutocompleteOptions(&#xA;          query: autocompleteQuery.query,&#xA;          onHashtagTap: (hashtag) {&#xA;            final autocomplete = MultiTriggerAutocomplete.of(context);&#xA;            return autocomplete&#xA;                .acceptAutocompleteOption(hashtag.name);&#xA;          },&#xA;        );&#xA;      },&#xA;    ),&#xA;    AutocompleteTrigger(&#xA;      trigger: &#39;:&#39;,&#xA;      optionsViewBuilder: (context, autocompleteQuery, controller) {&#xA;        return EmojiAutocompleteOptions(&#xA;          query: autocompleteQuery.query,&#xA;          onEmojiTap: (emoji) {&#xA;            final autocomplete = MultiTriggerAutocomplete.of(context);&#xA;            return autocomplete.acceptAutocompleteOption(&#xA;              emoji.char,&#xA;              // Passing false as we don&#39;t want the trigger [:] to&#xA;              // get prefixed to the option in case of emoji.&#xA;              keepTrigger: false,&#xA;            );&#xA;          },&#xA;        );&#xA;      },&#xA;    ),&#xA;  ],&#xA;  // Add the text field widget you want to use for autocomplete&#xA;  fieldViewBuilder: (context, controller, focusNode) {&#xA;    return Padding(&#xA;      padding: const EdgeInsets.all(8.0),&#xA;      child: ChatMessageTextField(&#xA;        focusNode: focusNode,&#xA;        controller: controller,&#xA;      ),&#xA;    );&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mention Autocomplete&lt;/th&gt; &#xA;   &lt;th&gt;Hashtag Autocomplete&lt;/th&gt; &#xA;   &lt;th&gt;Emoji Autocomplete&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/raw/master/asset/mention_demo.gif?raw=true&#34; height=&#34;400&#34; alt=&#34;Mention Autocomplete&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/raw/master/asset/hashtag_demo.gif?raw=true&#34; height=&#34;400&#34; alt=&#34;Hashtag Autocomplete&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/xsahil03x/multi_trigger_autocomplete/raw/master/asset/emoji_demo.gif?raw=true&#34; height=&#34;400&#34; alt=&#34;Emoji Autocomplete&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;MultiTriggerAutocomplete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MultiTriggerAutocomplete(&#xA;  // Defines the autocomplete trigger that will be used to match the&#xA;  // text.&#xA;  autocompleteTriggers: autocompleteTriggers,&#xA;  &#xA;  // Defines the alignment of the options view relative to the&#xA;  // fieldView.&#xA;  //&#xA;  // By default, the options view is aligned to the bottom of the&#xA;  // fieldView.&#xA;  optionsAlignment: OptionsAlignment.topStart,&#xA;  &#xA;  // Defines the width to make the options as a multiple of the width&#xA;  // of the fieldView.&#xA;  //&#xA;  // Setting this to 1 makes the options view width matches the width&#xA;  // of the fieldView.&#xA;  //&#xA;  // Use null to remove this constraint.&#xA;  optionsWidthFactor: 1.0,&#xA;  &#xA;  // Defines the duration of the debounce period for the&#xA;  // [TextEditingController].&#xA;  //&#xA;  // This is the time between the last character typed and the matching&#xA;  // is performed.&#xA;  debounceDuration: const Duration(milliseconds: 350),&#xA;  &#xA;  // Defines the initial value to set in the internal&#xA;  // [TextEditingController].&#xA;  //&#xA;  // This value will be ignored if [TextEditingController] is provided.&#xA;  initialValue: const TextEditingValue(text: &#39;Hello&#39;),&#xA;  &#xA;  // Defines the [TextEditingController] that will be used for the&#xA;  // fieldView.&#xA;  //&#xA;  // If this parameter is provided, then [focusNode] must also be&#xA;  // provided.&#xA;  textEditingController: TextEditingController(text: &#39;Hello&#39;),&#xA;  &#xA;  // Defines the [FocusNode] that will be used for the fieldView.&#xA;  //&#xA;  // If this parameter is provided, then [textEditingController] must&#xA;  // also be provided.&#xA;  focusNode: FocusNode(),&#xA;  &#xA;  // Defines the fieldView that will be used to input the text.&#xA;  //&#xA;  // By default, a [TextFormField] is used.&#xA;  fieldViewBuilder: (context, controller, focusNode) {&#xA;    return TextField(&#xA;      controller: controller,&#xA;      focusNode: focusNode,&#xA;    );&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AutocompleteTrigger&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AutocompleteTrigger(&#xA;  // The trigger string/character that will be used to trigger the&#xA;  // autocomplete.&#xA;  trigger: &#39;@&#39;,&#xA;  &#xA;  // If true, the [trigger] should only be recognised at&#xA;  // the start of the input text.&#xA;  //&#xA;  // valid example: &#34;@luke hello&#34;&#xA;  // invalid example: &#34;Hello @luke&#34;&#xA;  triggerOnlyAtStart: false,&#xA;  &#xA;  // If true, the [trigger] should only be recognised after&#xA;  // a space.&#xA;  //&#xA;  // valid example: &#34;@luke&#34;, &#34;Hello @luke&#34;&#xA;  // invalid example: &#34;Hello@luke&#34;&#xA;  triggerOnlyAfterSpace: true,&#xA;  &#xA;  // A minimum number of characters can be provided to only show&#xA;  // suggestions after the user has input enough characters.&#xA;  //&#xA;  // example:&#xA;  // &#34;Hello @l&#34; -&amp;gt; Shows zero suggestions.&#xA;  // &#34;Hello @lu&#34; -&amp;gt; Shows suggestions for @lu.&#xA;  minimumRequiredCharacters: 2,&#xA;  &#xA;  // The options view builder is used to build the options view&#xA;  // that will be shown when the [trigger] is detected.&#xA;  optionsViewBuilder: (context, autocompleteQuery, controller) {&#xA;    return MentionAutocompleteOptions(&#xA;      query: autocompleteQuery.query,&#xA;      onMentionUserTap: (user) {&#xA;        // Accept the autocomplete option.&#xA;        final autocomplete = MultiTriggerAutocomplete.of(context);&#xA;        return autocomplete.acceptAutocompleteOption(user.id);&#xA;      },&#xA;    );&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xsahil03x/multi_trigger_autocomplete/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>