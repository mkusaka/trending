<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:38:00Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mulaRahul/keyviz</title>
    <updated>2022-08-04T01:38:00Z</updated>
    <id>tag:github.com,2022-08-04:/mulaRahul/keyviz</id>
    <link href="https://github.com/mulaRahul/keyviz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Keyviz is a free and open-source tool to visualize your keystrokes ‚å®Ô∏è in real-time.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Keyviz&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/mulaRahul/keyviz/total?color=fff&#34; alt=&#34;downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keyviz is a free and open-source software to visualize your ‚å®Ô∏è keystrokes in realtime! Let your audience know what handy shortcuts/keys you&#39;re pressing during screencasts, presentations, collaborations, or whenever you need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mulaRahul/keyviz/main/previews/key-visual.png&#34; alt=&#34;keyviz-preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü¶Ñ Style&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mulaRahul/keyviz/main/previews/multiple-styles.png&#34; alt=&#34;multiple-styles&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t restrain yourself to just black &amp;amp; white! Change the visualization&#39;s style, size, color (modifier and normal keys), border, icon, and symbols.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Fully Customizable&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mulaRahul/keyviz/main/previews/settings-window.png&#34; alt=&#34;keyviz-settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Powerful and easy to use configuration options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filter normal keys and only display shortcuts like &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adjust visualization position on the screen&lt;/li&gt; &#xA; &lt;li&gt;Decide for how much the visualization lingers on the screen before animating out&lt;/li&gt; &#xA; &lt;li&gt;Switch between animation presets to animate your visualization in &amp;amp; out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of keyviz from the &lt;a href=&#34;https://github.com/mulaRahul/keyviz/releases&#34;&gt;Github Releases&lt;/a&gt; page. Unzip the downloaded file, run the installer and follow the familiar steps to install keyviz.&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;You can check out this &lt;a href=&#34;https://youtu.be/FwuTqWzlRSc&#34;&gt;video tutorial&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;To get started, follow the above &lt;a href=&#34;https://raw.githubusercontent.com/mulaRahul/keyviz/main/#installation&#34;&gt;installation&lt;/a&gt; process. You can start visualizing your keystrokes by just running the application.&lt;/p&gt; &#xA;&lt;p&gt;To open the settings window, find the keyviz icon on the right side of the &lt;strong&gt;Taskbar&lt;/strong&gt; or &lt;strong&gt;Taskbar &amp;gt; Hidden Icons &lt;kbd&gt;^&lt;/kbd&gt;&lt;/strong&gt;. Then click on the icon and select &lt;strong&gt;Settings&lt;/strong&gt;. The settings window will appear from which, you customize the style, appearance, and other general settings of the visualization.&lt;/p&gt; &#xA;&lt;h1&gt;Feature Requests&lt;/h1&gt; &#xA;&lt;p&gt;If you want to request any features, join our &lt;a href=&#34;https://discord.gg/qyrKWCvtEq&#34;&gt;discord&lt;/a&gt; community and let us know about your suggestions. You can also vote for the requested features by others and see the future development plans.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sarbagyastha/youtube_player_flutter</title>
    <updated>2022-08-04T01:38:00Z</updated>
    <id>tag:github.com,2022-08-04:/sarbagyastha/youtube_player_flutter</id>
    <link href="https://github.com/sarbagyastha/youtube_player_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter plugin for playing or streaming YouTube videos inline using the official iFrame Player API. Supports both Android and iOS platforms.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Youtube Player IFrame&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sarbagyastha/youtube_player_flutter/master/packages/youtube_player_flutter/misc/ypf_banner.png&#34; alt=&#34;YOUTUBE PLAYER IFRAME&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/youtube_player_iframe&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/youtube_player_iframe.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sarbagyastha/youtube_player_flutter/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/licence-BSD-orange.svg?sanitize=true&#34; alt=&#34;licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sarbagyastha/youtube_player_flutter/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/download-APK-informational.svg?sanitize=true&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sarbagyastha/youtube_player_flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/sarbagyastha/youtube_player_flutter?color=deeppink&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sarbagyastha/youtube_player_flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/sarbagyastha/youtube_player_flutter?color=9cf&#34; alt=&#34;Top Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dart.dev/guides/language/effective-dart&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-effective_dart-40c4ff.svg?sanitize=true&#34; alt=&#34;effective dart&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sarbagyastha.github.io/youtube_player_flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Web-DEMO-informational.svg?sanitize=true&#34; alt=&#34;Web DEMO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter plugin for playing or streaming YouTube videos inline using the official &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference&#34;&gt;&lt;strong&gt;iFrame Player API&lt;/strong&gt;&lt;/a&gt;. The package exposes almost all the API provided by &lt;strong&gt;iFrame Player API&lt;/strong&gt;. So, it&#39;s 100% customizable.&lt;/p&gt; &#xA;&lt;p&gt;Note: This package only provides default youtube web player&#39;s skin. If you need Youtube Android player like player with gesture support, use &lt;a href=&#34;https://pub.dartlang.org/packages/youtube_player_flutter&#34;&gt;youtube_player_flutter&lt;/a&gt; instead. &lt;code&gt;youtube_player_flutter&lt;/code&gt; also uses this package as dependency. (Migration Pending)&lt;/p&gt; &#xA;&lt;p&gt;Supported Platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sarbagyastha/youtube_player_flutter/master/youtube_player_iframe.png&#34; alt=&#34;YOUTUBE PLAYER IFRAME&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sarbagyastha.github.io/youtube_player_flutter&#34;&gt;Click here for WEB DEMO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Salient Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Inline Playback&lt;/li&gt; &#xA; &lt;li&gt;Supports captions&lt;/li&gt; &#xA; &lt;li&gt;No need for API Key&lt;/li&gt; &#xA; &lt;li&gt;Supports custom controls&lt;/li&gt; &#xA; &lt;li&gt;Retrieves video meta data&lt;/li&gt; &#xA; &lt;li&gt;Supports Live Stream videos&lt;/li&gt; &#xA; &lt;li&gt;Supports changing playback rate&lt;/li&gt; &#xA; &lt;li&gt;Support for both Android and iOS&lt;/li&gt; &#xA; &lt;li&gt;Adapts to quality as per the bandwidth&lt;/li&gt; &#xA; &lt;li&gt;Exposes builders for building custom controls&lt;/li&gt; &#xA; &lt;li&gt;Playlist Support (Both custom and Youtube&#39;s playlist)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Web, Flutter&#39;s &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/HtmlElementView-class.html&#34;&gt;HtmlElementView&lt;/a&gt;. For Android &amp;amp; iOS, the package uses &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_inappwebview&#34;&gt;flutter_inappwebview&lt;/a&gt; under-the-hood.&lt;/p&gt; &#xA;&lt;p&gt;If your app uses services workers, you may need add additional configuration on the app startup code, in order to ensure that the web view behaviour don&#39;t get unstable. To do so, please refer to the &lt;a href=&#34;https://inappwebview.dev/docs/service-worker-api/&#34;&gt;flutter_inappwebview documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since &lt;em&gt;flutter_inappwebview&lt;/em&gt; relies on Flutter&#39;s mechanism for embedding Android and iOS views, this plugin might share some known issues tagged with the &lt;a href=&#34;https://github.com/flutter/flutter/labels/a%3A%20platform-views&#34;&gt;platform-views&lt;/a&gt; label.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android&lt;/strong&gt;: &lt;code&gt;minSdkVersion 17&lt;/code&gt; and add support for &lt;code&gt;androidx&lt;/code&gt; (see &lt;a href=&#34;https://flutter.dev/docs/development/androidx-migration&#34;&gt;AndroidX Migration&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;iOS&lt;/strong&gt;: &lt;code&gt;--ios-language swift&lt;/code&gt;, Xcode version &lt;code&gt;&amp;gt;= 11&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;: None&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Web&lt;/h3&gt; &#xA;&lt;p&gt;No Configuration Required.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;No Configuration Required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_inappwebview#important-note-for-ios&#34;&gt;Follow the guide here for complete iOS setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;minSdkVersion&lt;/code&gt; of your &lt;code&gt;android/app/build.gradle&lt;/code&gt; file to at least 17.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_inappwebview#important-note-for-android&#34;&gt;Follow the guide here for complete Android setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Although the minimum to be set is 17, the player won&#39;t play on device with API &amp;lt; 20 (19 if Hybrid Composition is enabled). For API &amp;lt; 20 devices, you might want to forward the video to be played using YouTube app instead, using packages like &lt;code&gt;url_launcher&lt;/code&gt; or &lt;code&gt;android_intent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using the player&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;YoutubePlayerController _controller = YoutubePlayerController(&#xA;    initialVideoId: &#39;K18cpp_-gP8&#39;,&#xA;    params: YoutubePlayerParams(&#xA;        playlist: [&#39;nPt8bK2gbaU&#39;, &#39;gQDByCdjUXw&#39;], // Defining custom playlist&#xA;        startAt: Duration(seconds: 30),&#xA;        showControls: true,&#xA;        showFullscreenButton: true,&#xA;    ),&#xA;);&#xA;&#xA;YoutubePlayerIFrame(&#xA;    controller: _controller,&#xA;    aspectRatio: 16 / 9,&#xA;),&#xA;&#xA;-------------- OR --------------&#xA;&#xA;YoutubePlayerControllerProvider( // Provides controller to all the widget below it.&#xA;  controller: _controller,&#xA;  child: YoutubePlayerIFrame(&#xA;    aspectRatio: 16 / 9,&#xA;  ),&#xA;);&#xA;&#xA;// Access the controller as: `YoutubePlayerControllerProvider.of(context)` or `controller.ytController`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Want to customize the player?&lt;/h2&gt; &#xA;&lt;p&gt;The package provides &lt;code&gt;YoutubeValueBuilder&lt;/code&gt;, which can be used to create any custom controls.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s create a custom play pause button.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;YoutubeValueBuilder(&#xA;   controller: _controller, // This can be omitted, if using `YoutubePlayerControllerProvider`&#xA;   builder: (context, value) {&#xA;      return IconButton(&#xA;         icon: Icon( &#xA;                  value.playerState == PlayerState.playing&#xA;                    ? Icons.pause&#xA;                    : Icons.play_arrow,&#xA;         ),&#xA;         onPressed: value.isReady&#xA;            ? () {&#xA;                  value.playerState == PlayerState.playing&#xA;                    ? context.ytController.pause()&#xA;                    : context.ytController.play();&#xA;                 }&#xA;            : null,&#xA;      );&#xA;   },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Methods&lt;/h2&gt; &#xA;&lt;p&gt;Methods available for &lt;code&gt;YoutubePlayerController&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;play()&lt;/td&gt; &#xA;   &lt;td&gt;Plays the currently cued/loaded video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pause()&lt;/td&gt; &#xA;   &lt;td&gt;Pauses the currently playing video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stop()&lt;/td&gt; &#xA;   &lt;td&gt;Stops and cancels loading of the current video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nextVideo()&lt;/td&gt; &#xA;   &lt;td&gt;Loads and plays the next video in the playlist.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;previousVideo()&lt;/td&gt; &#xA;   &lt;td&gt;Loads and plays the previous video in the playlist.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;playVideoAt(index)&lt;/td&gt; &#xA;   &lt;td&gt;Loads and plays the specified video in the playlist.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;load(videoId, {startAt, endAt})&lt;/td&gt; &#xA;   &lt;td&gt;Loads and plays the specified video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cue(videoId, {startAt, endAt})&lt;/td&gt; &#xA;   &lt;td&gt;Loads the specified video&#39;s thumbnail and prepares the player to play the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;loadPlaylist(list, {listType, startAt, index})&lt;/td&gt; &#xA;   &lt;td&gt;Loads the specified list and plays it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cuePlaylist(list, {listType, startAt, index})&lt;/td&gt; &#xA;   &lt;td&gt;Queues the specified list of videos.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mute()&lt;/td&gt; &#xA;   &lt;td&gt;Mutes the player.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unMute()&lt;/td&gt; &#xA;   &lt;td&gt;Unmutes the player.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setVolume(volume)&lt;/td&gt; &#xA;   &lt;td&gt;Sets the volume of player.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seekTo(position, {allowSeekAhead})&lt;/td&gt; &#xA;   &lt;td&gt;Seeks to a specified time in the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setSize(size)&lt;/td&gt; &#xA;   &lt;td&gt;Sets the size in pixels of the player.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setPlaybackRate(rate)&lt;/td&gt; &#xA;   &lt;td&gt;Sets the playback speed for the video.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setLoop(loop)&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables looping.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setShuffle(shuffle)&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables shuffling playlist.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reset()&lt;/td&gt; &#xA;   &lt;td&gt;Resets the controller.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;convertUrlToId(url, {trimWhiteSpaces})&lt;/td&gt; &#xA;   &lt;td&gt;Converts fully qualified YouTube Url to video id.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;getThumbnail(videoId, {quality, webp})&lt;/td&gt; &#xA;   &lt;td&gt;Grabs YouTube video&#39;s thumbnail for provided video id.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onEnterFullScreen()&lt;/td&gt; &#xA;   &lt;td&gt;Called when player enters fullscreen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;onExitFullScreen()&lt;/td&gt; &#xA;   &lt;td&gt;Called when player exits fullscreen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;invokeJavascript(function)&lt;/td&gt; &#xA;   &lt;td&gt;Invoke custom javascript function.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hideTopMenu()&lt;/td&gt; &#xA;   &lt;td&gt;Hides the title and share icons at the top of player (&lt;em&gt;May violate YouTube&#39;s TOS. Use at your own risk.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hidePauseOverlay()&lt;/td&gt; &#xA;   &lt;td&gt;Hides the related videos overlay while player is paused (&lt;em&gt;May violate YouTube&#39;s TOS. Use at your own risk.&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Youtube Player Parameters&lt;/h2&gt; &#xA;&lt;p&gt;All the available parameters.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoPlay&lt;/td&gt; &#xA;   &lt;td&gt;Specifies whether the initial video will automatically start to play when the player loads. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mute&lt;/td&gt; &#xA;   &lt;td&gt;Mutes the player. &lt;strong&gt;Default = false&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;captionLanguage&lt;/td&gt; &#xA;   &lt;td&gt;Caption language. &lt;strong&gt;Default = &#39;en&#39;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableCaption&lt;/td&gt; &#xA;   &lt;td&gt;Enables caption by default. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the color that will be used in the player&#39;s video progress bar to highlight the amount of the video that the viewer has already seen. &lt;strong&gt;Default = red&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showControls&lt;/td&gt; &#xA;   &lt;td&gt;Indicates whether the video player controls are displayed. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableKeyboard&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables the player to respond to keyboard controls. &lt;strong&gt;Default = false&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableJavaScript&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables the player to be controlled via IFrame or JavaScript Player API calls. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;endAt&lt;/td&gt; &#xA;   &lt;td&gt;Ends the playback in specified time.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showFullscreenButton&lt;/td&gt; &#xA;   &lt;td&gt;Shows or hides the fullscreen button from displaying in the player. &lt;strong&gt;Default = false&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;interfaceLanguage&lt;/td&gt; &#xA;   &lt;td&gt;Sets the player&#39;s interface language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;showVideoAnnotations&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables video annotations to be shown by default. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;loop&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables the player to play the initial video again and again. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;playlist&lt;/td&gt; &#xA;   &lt;td&gt;Specifies a list of video IDs to be played after initialVideoId.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;playsInline&lt;/td&gt; &#xA;   &lt;td&gt;Controls whether videos play inline or fullscreen in an HTML5 player on iOS. &lt;strong&gt;Default = true&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;strictRelatedVideos&lt;/td&gt; &#xA;   &lt;td&gt;Enabling ensure that related videos will come from the same channel as the video that was just played. &lt;strong&gt;Default = false&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;startAt&lt;/td&gt; &#xA;   &lt;td&gt;Starts the video at specified time.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;desktopMode&lt;/td&gt; &#xA;   &lt;td&gt;The controls will be alike Youtube Desktop&#39;s controls.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useHybridComposition&lt;/td&gt; &#xA;   &lt;td&gt;Enable &lt;a href=&#34;https://github.com/flutter/flutter/wiki/Hybrid-Composition&#34;&gt;Hybrid Composition&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Limitation&lt;/h2&gt; &#xA;&lt;p&gt;For Android: Since the plugin is based on platform views. This plugin requires Android API level 19 or greater.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2021 Sarbagya Dhaubanjar. All rights reserved.&#xA;&#xA;Redistribution and use in source and binary forms, with or without modification,&#xA;are permitted provided that the following conditions are met:&#xA;&#xA;    * Redistributions of source code must retain the above copyright&#xA;      notice, this list of conditions and the following disclaimer.&#xA;    * Redistributions in binary form must reproduce the above&#xA;      copyright notice, this list of conditions and the following&#xA;      disclaimer in the documentation and/or other materials provided&#xA;      with the distribution.&#xA;&#xA;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND&#xA;ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED&#xA;WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE&#xA;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR&#xA;ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#xA;(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;&#xA;LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON&#xA;ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT&#xA;(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#xA;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>