<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:33:20Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gokberkbar/locale_plus</title>
    <updated>2023-02-19T01:33:20Z</updated>
    <id>tag:github.com,2023-02-19:/gokberkbar/locale_plus</id>
    <link href="https://github.com/gokberkbar/locale_plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LocalePlus allows easy access to native device locale data in Flutter apps. Includes language, country code, time zone, and number formatting preferences.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Locale Plus&lt;/h1&gt; &#xA;&lt;p&gt;LocalePlus allows easy access to native device locale data in Flutter apps. Includes language, country code, time zone, and number formatting preferences.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Content&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#author&#34;&gt;Author&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gokberkbar/locale_plus/main/#license&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;LocalePlus is a Flutter package that allows developers to easily retrieve data from the native device locale settings. With LocalePlus, developers can access information such as the device&#39;s language, country code, and time zone, as well as the device&#39;s number formatting preferences such as grouping and decimal separator. This makes it easy to build internationalized apps that provide a personalized experience for each user. Whether you&#39;re building a financial app that needs to display numbers in the user&#39;s local format or a social media app that needs to display timestamps in the user&#39;s time zone, LocalePlus has you covered. With a simple and intuitive API, LocalePlus is the perfect tool for any Flutter developer looking to add localization to their app.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dart sdk: &#34;&amp;gt;=2.16.2 &amp;lt;3.0.0&#34;&lt;/li&gt; &#xA; &lt;li&gt;Flutter: &#34;&amp;gt;=2.5.0&#34;&lt;/li&gt; &#xA; &lt;li&gt;Android: minSdkVersion 16&lt;/li&gt; &#xA; &lt;li&gt;iOS 9.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;with Flutter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flutter pub add locale_plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a line like this to your package&#39;s pubspec.yaml (and run an implicit &lt;code&gt;flutter pub get&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  locale_plus: ^1.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Patch the locales with the users&#39; group and decimal seperators&lt;/h2&gt; &#xA;&lt;p&gt;This function patches all locales in flutter, so that you can use the decimal seperator and group seperator from &lt;code&gt;numberFormatSymbols&lt;/code&gt; after the patch is complete. The patchNumberSeperators function patches the locales on android and ios. It is safe to call on MacOS, Windows, Linux and web.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;import &#39;package:locale_plus/locale_plus.dart&#39;;&#xA;&#xA;Future&amp;lt;void&amp;gt; main() async {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;  await PatchAllLocales.patchNumberSeperators();&#xA;  runApp(const MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Decimal &amp;amp; Grouping Separator&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final decimalSeparator = await LocalePlus().getDecimalSeparator();&#xA;final groupingSeparator = await LocalePlus().getGroupingSeparator();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Language &amp;amp; Region Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final regionCode = await LocalePlus().getRegionCode();&#xA;final languageCode = await LocalePlus().getLanguageCode();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Seconds from GMT&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final secondsFromGMT = await LocalePlus().getSecondsFromGMT();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Is Device Using 24 hour time and Current Locale AM PM Symbols&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final is24HourTime = await LocalePlus().is24HourTime();&#xA;final amSymbol = await LocalePlus().getAmSymbol();&#xA;final pmSymbol = await LocalePlus().getPmSymbol();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Is Device Using Metric System&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final usesMetricSystem = await LocalePlus().usesMetricSystem();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get TimeZone Identifier&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final timeZoneIdentifier = await LocalePlus().getTimeZoneIdentifier();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Author&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.github.com/gokberkbar&#34;&gt;Gökberk Bardakçı&lt;/a&gt;, &lt;a href=&#34;https://www.github.com/uygar&#34;&gt;Uygar İşiçelik&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BentEngbers&#34;&gt;Bent Engbers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;LocalePlus is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gokberkbar/memory_cache</title>
    <updated>2023-02-19T01:33:20Z</updated>
    <id>tag:github.com,2023-02-19:/gokberkbar/memory_cache</id>
    <link href="https://github.com/gokberkbar/memory_cache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Memory Cache is simple, fast and global in-memory cache with CRUD features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Memory Cache&lt;/h1&gt; &#xA;&lt;p&gt;Memory Cache is simple, fast and global in-memory cache.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create, read, update, delete and invalidate cache.&lt;/li&gt; &#xA; &lt;li&gt;Expirable Cache&lt;/li&gt; &#xA; &lt;li&gt;Creating local MemoryCache instance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Use this package as a Library&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Depend On it&lt;/p&gt; &#xA;&lt;p&gt;Run this command&lt;/p&gt; &#xA;&lt;p&gt;with Dart:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dart pub add memory_cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with Flutter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flutter pub add memory_cache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a line like this to your package&#39;s pubspec.yaml (and run an implicit &lt;code&gt;dart pub get&lt;/code&gt; or &lt;code&gt;flutter pub get&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  memory_cache: ^1.2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Create New Value&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MemoryCache.instance.create(&#39;myKey&#39;, &#39;myValue&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with Expiry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MemoryCache.instance.create(&#xA;    &#39;myKey&#39;,&#xA;    &#39;myValue&#39;,&#xA;    expiry: const Duration(seconds: 5),&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read Value&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final myValue = MemoryCache.instance.read&amp;lt;String&amp;gt;(&#39;myKey&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update Value&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MemoryCache.instance.update(&#39;myKey&#39;, &#39;myUpdatedValue&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete Value&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MemoryCache.instance.delete(&#39;myKey&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Instance&lt;/h3&gt; &#xA;&lt;p&gt;MemoryCache can be created locally and same features will be supported&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final MemoryCache localCache = MemoryCache();&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tharwatsamy/Flutter-Beginners-Projects</title>
    <updated>2023-02-19T01:33:20Z</updated>
    <id>tag:github.com,2023-02-19:/tharwatsamy/Flutter-Beginners-Projects</id>
    <link href="https://github.com/tharwatsamy/Flutter-Beginners-Projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>