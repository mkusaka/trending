<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-10T01:32:23Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>entronad/graphic</title>
    <updated>2022-11-10T01:32:23Z</updated>
    <id>tag:github.com,2022-11-10:/entronad/graphic</id>
    <link href="https://github.com/entronad/graphic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A grammar of data visualization and Flutter charting library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Graphic&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/graphic&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/graphic.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Graphic is a grammar of data visualization and Flutter charting library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Grammar of Graphics&lt;/strong&gt;: Graphic derives from Leland Wilkinson&#39;s book &lt;em&gt;The Grammar of Graphics&lt;/em&gt;, and tries to balance between theoretical beauty and practicability. It inherits most concepts, like the graphic algebra.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative and Reactive&lt;/strong&gt;: As is encouraged in Flutter, the chart widget of Graphic is declarative and reactive. The grammar of data visualization is implemented by a declarative specification and the chart will reevaluate automatically on widget update.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive&lt;/strong&gt;: With the &lt;em&gt;signal&lt;/em&gt; and &lt;em&gt;selection&lt;/em&gt; mechanism, the chart is highly interactive. It is easy to pop a tooltip or scale the coordinate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;: With the &lt;em&gt;shape&lt;/em&gt; and &lt;em&gt;figure&lt;/em&gt; classes, it&#39;s easy to custom your own element, tooltip, annotation, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dataflow Graph and Operators&lt;/strong&gt;: Graphic has a internal structure of a dataflow graph and operators. That is how the reactive reevaluation and interaction is implemented.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See in the &lt;a href=&#34;https://pub.dev/documentation/graphic/latest/graphic/graphic-library.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Example of charts can be seen in the &lt;a href=&#34;https://github.com/entronad/graphic/tree/main/example&#34;&gt;Example App&lt;/a&gt;. Please clone this repository and run the example project in example directory.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/entronad/graphic/raw/main/devdoc/signal_channel.gif&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/entronad/graphic/raw/main/devdoc/selection_channel.gif&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/entronad/graphic/raw/main/devdoc/examples.jpg&#34; alt=&#34;examples&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@entronad/the-versatility-of-the-grammar-of-graphics-d1366760424d&#34;&gt;The Versatility of the Grammar of Graphics&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@entronad/how-to-build-interactive-charts-in-flutter-e317492d5ba1&#34;&gt;How to Build Interactive Charts in Flutter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;Besides &lt;em&gt;The Grammar of Graphics&lt;/em&gt;, the API terminology also referes to &lt;a href=&#34;https://antv.vision/en&#34;&gt;AntV&lt;/a&gt; and &lt;a href=&#34;https://vega.github.io/&#34;&gt;Vega&lt;/a&gt;. The dataflow structure is inspired by &lt;a href=&#34;https://vega.github.io/&#34;&gt;Vega&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Graphic is &lt;a href=&#34;https://github.com/entronad/graphic/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keep Informed&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/entronad_viz&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@entronad&#34;&gt;Medium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/people/entronad&#34;&gt;Zhihu&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Widle-Studio/Grocery-App</title>
    <updated>2022-11-10T01:32:23Z</updated>
    <id>tag:github.com,2022-11-10:/Widle-Studio/Grocery-App</id>
    <link href="https://github.com/Widle-Studio/Grocery-App" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter Grocery Shopping App (Mobile App, Web App)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;grocery_app&lt;/h1&gt; &#xA;&lt;p&gt;Become a financial contributor - &lt;img alt=&#34;open collective badge&#34; src=&#34;https://opencollective.com/grocery-platform/tiers/backers/badge.svg?label=backer&amp;amp;color=brightgreen&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#system-requirements&#34;&gt;System Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#figma-design-guideline-for-better-accuracy&#34;&gt;Figma design guidelines for better accuracy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#app-navigations&#34;&gt;App Navigations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#how-you-can-do-code-formatting&#34;&gt;How you can do code formatting?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#how-you-can-improve-the-readability-of-code&#34;&gt;How you can improve the readability of code?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#libraries-and-tools-used&#34;&gt;Libraries and tools used&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Widle-Studio/Grocery-App/Grocery-App/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Dart SDK Version 2.17.0 or greater. Flutter SDK Version 3.0.0 or greater.&lt;/p&gt; &#xA;&lt;h3&gt;Figma design guidelines for better accuracy&lt;/h3&gt; &#xA;&lt;h3&gt;App Navigations&lt;/h3&gt; &#xA;&lt;p&gt;Check your app&#39;s UI from the AppNavigation screen of your app.&lt;/p&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;p&gt;After successful build, your application structure should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── android                         - contains files and folders required for running the application on an Android operating system.&#xA;├── assets                          - contains all images and fonts of your application.&#xA;├── ios                             - contains files required by the application to run the dart code on iOS platforms.&#xA;├── lib                             - Most important folder in the project, used to write most of the Dart code.&#xA;    ├── main.dart                   - starting point of the application&#xA;    ├── core&#xA;    │   ├── app_export.dart         - contains commonly used file imports &#xA;    │   ├── constants               - contains all constants classes&#xA;    │   ├── errors                  - contains error handling classes                  &#xA;    │   ├── network                 - contains network related classes&#xA;    │   └── utils                   - contains common files and utilities of project&#xA;    ├── data&#xA;    │   ├── apiClient               - contains API calling methods &#xA;    │   ├── models                  - contains request/response models &#xA;    │   └── repository              - network repository&#xA;    ├── localization                - contains localization classes&#xA;    ├── presentation                - contains all screens and screen controllers&#xA;    │   └── screens                 - contains all screens&#xA;    ├── routes                      - contains all the routes of application&#xA;    └── theme                       - contains app theme and decoration classes&#xA;    └── widgets                     - contains all custom widget classes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How you can do code formatting?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if your code is not formatted then run following command in your terminal to format code &lt;pre&gt;&lt;code&gt;dart format .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How you can improve the readability of code?&lt;/h3&gt; &#xA;&lt;p&gt;Resolve the errors and warnings that are shown in the application.&lt;/p&gt; &#xA;&lt;h3&gt;Libraries and tools used&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get - State management &lt;a href=&#34;https://pub.dev/packages/get&#34;&gt;https://pub.dev/packages/get&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;connectivity_plus - For status of network connectivity &lt;a href=&#34;https://pub.dev/packages/connectivity_plus&#34;&gt;https://pub.dev/packages/connectivity_plus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;shared_preferences - Provide persistent storage for simple data &lt;a href=&#34;https://pub.dev/packages/shared_preferences&#34;&gt;https://pub.dev/packages/shared_preferences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cached_network_image - For storing internet image into cache &lt;a href=&#34;https://pub.dev/packages/cached_network_image&#34;&gt;https://pub.dev/packages/cached_network_image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support&lt;/h3&gt; &#xA;&lt;p&gt;Connect to Widle Studio Team.&lt;/p&gt;</summary>
  </entry>
</feed>