<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-30T01:29:59Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mapleafgo/clash-for-flutter</title>
    <updated>2023-11-30T01:29:59Z</updated>
    <id>tag:github.com,2023-11-30:/mapleafgo/clash-for-flutter</id>
    <link href="https://github.com/mapleafgo/clash-for-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clash的桌面客户端，支持 windows、linux、macos&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clash For Flutter&lt;/h1&gt; &#xA;&lt;p&gt;这是一个 &lt;strong&gt;Clash&lt;/strong&gt; 的桌面客户端，支持 windows、linux、macos。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://mapleafgo.github.io/clash-for-flutter&#34;&gt;使用说明&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;界面&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mapleafgo/clash-for-flutter/main/docs/images/home_page.png&#34; alt=&#34;主页&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mapleafgo/clash-for-flutter/main/docs/images/proxy_page.png&#34; alt=&#34;代理页&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mapleafgo/clash-for-flutter/main/docs/images/profile_page.png&#34; alt=&#34;订阅页&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mapleafgo/clash-for-flutter/main/docs/images/settings_page.png&#34; alt=&#34;设置页&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;开发、打包说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;基础环境&lt;/p&gt; &lt;p&gt;&lt;code&gt;GCC&lt;/code&gt;、&lt;code&gt;Go v1.20+&lt;/code&gt;、&lt;code&gt;Flutter v3.10+&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;环境下 &lt;a href=&#34;https://github.com/leanflutter/tray_manager&#34;&gt;tray_manager&lt;/a&gt; 需要 &lt;code&gt;libayatana-appindicator3-dev&lt;/code&gt; or &lt;code&gt;libappindicator3-dev&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编译项目&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 1. 获取项目依赖&#xA;$ flutter pub get&#xA;# 2. 生成 .g.dart 文件&#xA;$ dart run build_runner build --delete-conflicting-outputs&#xA;&#xA;# 3. 编译 Clash 内核&#xA;$ cd core&#xA;# windows&#xA;$ go build -ldflags=&#34;-w -s&#34; -buildmode=c-shared -o ./dist/libclash.dll&#xA;# Linux&#xA;$ go build -ldflags=&#34;-w -s&#34; -buildmode=c-shared -o ./dist/libclash.so&#xA;# macos&#xA;$ go build -ldflags=&#34;-w -s&#34; -buildmode=c-shared -o ./dist/libclash.dylib&#xA;&#xA;# 回到项目根目录&#xA;$ cd ../&#xA;# macos 系统需要移动下编译的内核路径&#xA;$ cp -f ./core/dist/libclash.dylib ./macos/Frameworks/libclash.dylib&#xA;&#xA;# 4. 运行项目 (linux)&#xA;$ flutter run -d linux&#xA;# 4. 运行项目 (windows)&#xA;$ flutter run -d windows&#xA;# 4. 运行项目 (macos)&#xA;$ flutter run -d macos&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打包项目&lt;/p&gt; &lt;p&gt;该项目用 &lt;a href=&#34;https://distributor.leanflutter.org/&#34;&gt;flutter_distributor&lt;/a&gt; 打包，打包步骤看 &lt;code&gt;flutter_distributor&lt;/code&gt; 的官方文档吧&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;主要技术&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antler119/system_tray&#34;&gt;system_tray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leanflutter/window_manager&#34;&gt;window_manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Kingtous/proxy_manager&#34;&gt;proxy_manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Flutterando/modular&#34;&gt;flutter_modular&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://distributor.leanflutter.org/&#34;&gt;flutter_distributor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;写在后面&lt;/h2&gt; &#xA;&lt;p&gt;自 1.0.0 版本开始，本软件全面从之前的 Go-Flutter 迁移到了官方 Flutter 版本。迁移中部分参考了 &lt;a href=&#34;https://github.com/Kingtous/Fclash&#34;&gt;Fclash&lt;/a&gt; 非常感谢！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Workiva/react_testing_library</title>
    <updated>2023-11-30T01:29:59Z</updated>
    <id>tag:github.com,2023-11-30:/Workiva/react_testing_library</id>
    <link href="https://github.com/Workiva/react_testing_library" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dart bindings for the JS dom-testing-library and react-testing-library packages, which provide simple and complete DOM/React testing utilities that encourage good testing practices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Testing Library for Dart&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dart.dev/&#34;&gt;Dart&lt;/a&gt; bindings for the JS &lt;a href=&#34;https://testing-library.com/docs/dom-testing-library/intro&#34;&gt;dom-testing-library&lt;/a&gt; and &lt;a href=&#34;https://testing-library.com/docs/react-testing-library/intro&#34;&gt;react-testing-library&lt;/a&gt; packages, which provide simple and complete DOM/React testing utilities that encourage good testing practices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Workiva/react_testing_library/actions/workflows/dart_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Workiva/react_testing_library/actions/workflows/dart_ci.yml/badge.svg?branch=master&#34; alt=&#34;Dart CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://workiva.github.io/react_testing_library&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=API&amp;amp;message=Documentation&amp;amp;color=informational&#34; alt=&#34;API Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/react_testing_library/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/react_testing_library/master/#how-does-it-work&#34;&gt;How Does It Work?&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/react_testing_library/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/react_testing_library/master/#migration-guides&#34;&gt;Migration Guides&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Workiva/react_testing_library/master/#dart--js-api-parity&#34;&gt;Dart / JS API Parity&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The libraries in this package help you to test Dart UI components in a user-centric way.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://testing-library.com/docs/&#34;&gt;The more your tests resemble the way your software is used, the more confidence they can give you.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To paint the full picture of how / why to use this library, &lt;strong&gt;please read the JS Testing Library &lt;a href=&#34;https://testing-library.com/docs/&#34;&gt;Introduction&lt;/a&gt;, &lt;a href=&#34;https://testing-library.com/docs/guiding-principles&#34;&gt;Guiding Principles&lt;/a&gt; and &lt;a href=&#34;https://testing-library.com/docs/dom-testing-library/faq&#34;&gt;FAQs&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How Does It Work?&lt;/h2&gt; &#xA;&lt;p&gt;Rather than dealing with &lt;a href=&#34;https://pub.dev/packages/over_react&#34;&gt;OverReact&lt;/a&gt; &lt;code&gt;UiComponent&lt;/code&gt; instances, or React VDom &lt;code&gt;ReactElement&lt;/code&gt;s, your tests will work with actual DOM nodes. The utilities this library provides facilitate &lt;strong&gt;querying the DOM in the same way the user would.&lt;/strong&gt; Finding form elements by their label text &lt;em&gt;(just like a user would)&lt;/em&gt;, finding links and buttons from their text &lt;em&gt;(like a user would)&lt;/em&gt;. It also exposes a recommended way to find elements by an HTML &lt;code&gt;data-test-id&lt;/code&gt; attribute value as an &#34;escape hatch&#34; for elements where the text content and label do not make sense or is not practical.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This library encourages your Dart web applications to be more accessible&lt;/strong&gt; and allows you to get your tests closer to using your components the way a user will, which allows your tests to give you more confidence that your application will work when a real user uses it.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Before using this library, you should familiarize yourself with &lt;a href=&#34;https://dart.dev/overview&#34;&gt;Dart&lt;/a&gt;, &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;Dart&#39;s &lt;code&gt;test&lt;/code&gt; library&lt;/a&gt;, &lt;a href=&#34;https://reactjs.org/&#34;&gt;ReactJS&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/packages/over_react&#34;&gt;OverReact&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Add the necessary dependencies to your project&lt;/h3&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  pubspec.yaml&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  # This is not required to use this library, but it is assumed&#xA;  # that you are testing OverReact UI components, so it is &#xA;  # shown here for completeness.&#xA;  over_react: ^4.0.0&#xA;&#xA;dev_dependencies:&#xA;  build_runner: &#34;&amp;gt;=1.7.1 &amp;lt;3.0.0&#34;&#xA;  build_test: &#34;&amp;gt;=0.10.9 &amp;lt;3.0.0&#34;&#xA;  build_web_compilers: &#34;&amp;gt;=2.12.0 &amp;lt;4.0.0&#34;&#xA;  react_testing_library: ^1.1.13&#xA;  test: ^1.14.4&#xA;  # This is not technically required, &#xA;  # but makes the HTML portion of your test bootstrapping much easier!&#xA;  test_html_builder: ^2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h3&gt;2. Configure &lt;code&gt;build.yaml&lt;/code&gt; to generate test outputs&lt;/h3&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  build.yaml&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      build_web_compilers|entrypoint:&#xA;        # These are globs for the entrypoints you want to compile.&#xA;        generate_for:&#xA;          - test/**.browser_test.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The configuration above is a minimum recommendation only. &lt;a href=&#34;https://pub.dev/packages/build_config&#34;&gt;Read more about configuring a Dart build&lt;/a&gt; to learn more / ensure your configuration meets your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;3. Configure &lt;code&gt;dart_test.yaml&lt;/code&gt; to run your tests&lt;/h3&gt; &#xA;&lt;p&gt;Create &lt;code&gt;dart_test.yaml&lt;/code&gt; in the root of your project.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  dart_test.yaml&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;platforms:&#xA;  - chrome&#xA;&#xA;paths:&#xA;  - test/unit/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The configuration above is a minimum recommendation only. &lt;a href=&#34;https://github.com/dart-lang/test/raw/master/pkgs/test/doc/configuration.md&#34;&gt;Read more about configuring Dart tests&lt;/a&gt;, or about &lt;a href=&#34;https://pub.dev/packages/test&#34;&gt;Dart&#39;s &lt;code&gt;test&lt;/code&gt; library&lt;/a&gt; to learn more / ensure your configuration meets your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4. Add an HTML template for your tests that will load the necessary React / react-testing-library JS files&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;NOTE: The names of the files below are recommendations only, and are not essential to a functional setup.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Using test_html_builder (recommended)&lt;/h4&gt; &#xA;&lt;p&gt;We &lt;em&gt;strongly&lt;/em&gt; recommend using the &lt;a href=&#34;https://pub.dev/packages/test_html_builder&#34;&gt;test_html_builder&lt;/a&gt; library to create a template that will be used to load each &lt;code&gt;.dart.js&lt;/code&gt; test file.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  test/unit/rtl_unit_test_template.html&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;      &amp;lt;title&amp;gt;{{testName}}&amp;lt;/title&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/react/react.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/react/react_dom.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/react_testing_library/js/react-testing-library.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;      {{testScript}}&#xA;      &amp;lt;script src=&#34;packages/test/dart.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use the template &lt;code&gt;.html&lt;/code&gt; file above and follow the &lt;a href=&#34;https://pub.dev/packages/test_html_builder&#34;&gt;test_html_builder&lt;/a&gt; library instructions for wiring it up!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adding / committing your own HTML file(s)&lt;/h4&gt; &#xA;&lt;p&gt;If for some reason you do not wish to use the &lt;a href=&#34;https://pub.dev/packages/test_html_builder&#34;&gt;test_html_builder&lt;/a&gt; library to generate the necessary &lt;code&gt;.html&lt;/code&gt; file(s), you must create one for each analogous &lt;code&gt;*_test.dart&lt;/code&gt; file in which you are using &lt;code&gt;react_testing_library&lt;/code&gt; as shown below. Note that you will have to have one &lt;code&gt;.html&lt;/code&gt; file for each &lt;code&gt;.dart&lt;/code&gt; file containing your unit tests.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  test/unit/some_unit_test.html&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;      &amp;lt;title&amp;gt;Some Unit Test&amp;lt;/title&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/react/react.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/react/react_dom.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/react_testing_library/js/react-testing-library.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;      &amp;lt;link rel=&#34;x-dart-test&#34; href=&#34;some_unit_test.dart&#34;&amp;gt;&#xA;      &amp;lt;script src=&#34;packages/test/dart.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h3&gt;5. Write test(s) for your component(s)!&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://workiva.github.io/react_testing_library/rtl.react/render.html&#34;&gt;render&lt;/a&gt; function, you can now generate DOM using React components and &lt;a href=&#34;https://workiva.github.io/react_testing_library/topics/Queries-topic.html&#34;&gt;query&lt;/a&gt; within that DOM to get the element(s) you want to test!&lt;/p&gt; &#xA;&lt;p&gt;Then, you can use the &lt;a href=&#34;https://workiva.github.io/react_testing_library/topics/Matchers-topic.html&#34;&gt;&lt;code&gt;Matcher&lt;/code&gt;s&lt;/a&gt; from the &lt;code&gt;matchers.dart&lt;/code&gt; entrypoint to perform assertions on that DOM, and the events and user events entrypoints or whatever to interact with the DOM.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more in depth examples, see the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/react_testing_library/master/#migration-guides&#34;&gt;migration guides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  lib/src/components/greeting.dart&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:over_react/over_react.dart&#39;;&#xA;&#xA;part &#39;greeting.over_react.g.dart&#39;;&#xA;&#xA;mixin GreetingProps on UiProps {&#xA;  String heading;&#xA;  String subHeading;&#xA;  String getStartedRoute;&#xA;}&#xA;&#xA;UiFactory&amp;lt;GreetingProps&amp;gt; Greeting = uiFunction(&#xA;  (props) {&#xA;    return (Dom.header()..role = &#39;group&#39;)(&#xA;      Dom.h1()(props.heading),&#xA;      Dom.h2()(props.subHeading),&#xA;      (Dom.a()..href = props.getStartedRoute)(&#39;Get started&#39;),&#xA;    );&#xA;  },&#xA;  _$GreetingConfig, // ignore: undefined_identifier&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;figure&gt; &#xA; &lt;figcaption&gt;&#xA;  test/unit/components/greeting_test.dart&#xA; &lt;/figcaption&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:html&#39;;&#xA;&#xA;import &#39;package:test/test.dart&#39;;&#xA;import &#39;package:react_testing_library/react_testing_library.dart&#39; as rtl;&#xA;import &#39;package:react_testing_library/matchers.dart&#39;;&#xA;&#xA;import &#39;package:your_package/src/components/greeting.dart&#39;;&#xA;&#xA;main() {&#xA;  group(&#39;Greeting&#39;, () {&#xA;    rtl.RenderResult view;&#xA;    tearDown(() {&#xA;      view = null;&#xA;    });&#xA;    &#xA;    group(&#39;renders the expected elements:&#39;, () {&#xA;      group(&#39;a &amp;lt;header&amp;gt;&#39;, () {&#xA;        HtmlElement headerElement;&#xA;        &#xA;        setUp(() {&#xA;          view = rtl.render((Greeting()&#xA;            ..heading = &#39;Hello There!&#39;&#xA;            ..subHeading = &#39;Welcome to the unit testing party.&#39;&#xA;            ..getStartedRoute = &#39;/start/partying&#39;&#xA;          )());&#xA;          &#xA;          headerElement = view.getByRole(&#39;group&#39;);&#xA;        });&#xA;        &#xA;        test(&#39;with a child &amp;lt;h1&amp;gt; with a text value equal to props.heading&#39;, () {&#xA;          final h1Element = rtl.within(headerElement).getByRole(&#39;heading&#39;, level: 1); &#xA;          expect(h1Element, hasTextContent(&#39;Hello There!&#39;));&#xA;        });&#xA;        &#xA;        test(&#39;with a child &amp;lt;h2&amp;gt; with a text value equal to props.subHeading&#39;, () {&#xA;          final h2Element = rtl.within(headerElement).getByRole(&#39;heading&#39;, level: 2); &#xA;          expect(h2Element, hasTextContent(&#39;Welcome to the unit testing party.&#39;));&#xA;        });&#xA;        &#xA;        test(&#39;with a child &amp;lt;a&amp;gt; with an href equal to props.getStartedRoute&#39;, () {&#xA;          final anchorElement = rtl.within(headerElement).getByRole(&#39;link&#39;); &#xA;          expect(anchorElement, hasAttribute(&#39;href&#39;, &#39;/start/partying&#39;));&#xA;        });&#xA;      });&#xA;    });&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/figure&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://workiva.github.io/react_testing_library/topics/Queries-topic.html&#34;&gt;Read more about how queries are scoped to both the &lt;code&gt;view&lt;/code&gt; and return value of &lt;code&gt;within()&lt;/code&gt;in the above example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Migration Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Workiva/react_testing_library/raw/master/doc/migration_guides/from_over_react_test.md&#34;&gt;OverReact Test to React Testing Library Migration Guide&lt;/a&gt;: A guide to updating tests to use &lt;code&gt;react_testing_library&lt;/code&gt; instead of &lt;a href=&#34;https://github.com/Workiva/over_react_test&#34;&gt;&lt;code&gt;over_react_test&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dart / JS API Parity&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;react_testing_library&lt;/code&gt; Dart package strives to maintain API parity with the analogous JS &lt;code&gt;testing-library&lt;/code&gt; packages within reason. However, there are certain differences that are either unavoidable, or intentional for the purposes of building Dart APIs that are easy to use and reason about.&lt;/p&gt; &#xA;&lt;p&gt;Read more about Dart / JS API Parity for the following API categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://workiva.github.io/react_testing_library/topics/Queries-topic.html&#34;&gt;Queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://workiva.github.io/react_testing_library/rtl.react/render.html&#34;&gt;Rendering&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ZebraDevs/zeta_flutter</title>
    <updated>2023-11-30T01:29:59Z</updated>
    <id>tag:github.com,2023-11-30:/ZebraDevs/zeta_flutter</id>
    <link href="https://github.com/ZebraDevs/zeta_flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zeta Flutter&lt;/h1&gt; &#xA;&lt;p&gt;Zeta is the new, formal, standardized Zebra Design System based off the successes of ZDS (Zebra Design System).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🚧 &lt;strong&gt;Note&lt;/strong&gt;: This package is in pre-release, and so many aspects are incomplete.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;zeta_flutter&lt;/code&gt;, follow the instructions &lt;a href=&#34;https://pub.dev/packages/zeta_flutter/install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Zeta offers flexibility in theming through its &lt;code&gt;ZetaProvider&lt;/code&gt; widget. Here&#39;s a breakdown of its features:&lt;/p&gt; &#xA;&lt;h3&gt;Setting the Initial Theme Mode&lt;/h3&gt; &#xA;&lt;p&gt;Zeta allows you to specify an initial theme mode for your app, which can be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ThemeMode.system&lt;/code&gt;: Adheres to the system&#39;s theme.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ThemeMode.light&lt;/code&gt;: Uses the light theme mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ThemeMode.dark&lt;/code&gt;: Uses the dark theme mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, the theme mode is set to &lt;code&gt;ThemeMode.system&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initialThemeMode: ThemeMode.light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Providing Initial Theme Data&lt;/h3&gt; &#xA;&lt;p&gt;You can provide the initial theme data for the app which contains all the theming information. If you don&#39;t specify one, it will default to a basic instance of &lt;code&gt;ZetaThemeData&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initialThemeData: ZetaThemeData()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting the Initial Contrast&lt;/h3&gt; &#xA;&lt;p&gt;Zeta also lets you define the initial contrast setting for your app. By default, it&#39;s set to &lt;code&gt;ZetaContrast.aa&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initialContrast: ZetaContrast.aa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Your App with Zeta Theming&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;builder&lt;/code&gt; function is used to construct the widget tree with the provided theming information. This function is expected to receive a &lt;code&gt;BuildContext&lt;/code&gt;, &lt;code&gt;ZetaThemeData&lt;/code&gt;, and &lt;code&gt;ThemeMode&lt;/code&gt; as arguments, and it should return a &lt;code&gt;Widget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;builder: (context, themeData, themeMode) {&#xA;  // Your app&#39;s widget tree here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constructing the ZetaProvider&lt;/h3&gt; &#xA;&lt;p&gt;To tie everything together, use the &lt;code&gt;ZetaProvider&lt;/code&gt; constructor. The &lt;code&gt;builder&lt;/code&gt; argument is mandatory, while the others are optional but allow you to set initial values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA; @override&#xA;  Widget build(BuildContext context) {&#xA;    return ZetaProvider(&#xA;      builder: (context, themeData, themeMode) {&#xA;        final dark = themeData.colorsDark.toScheme();&#xA;        final light = themeData.colorsLight.toScheme();&#xA;        return MaterialApp.router(&#xA;          routerConfig: router,&#xA;          themeMode: themeMode,&#xA;          theme: ThemeData(&#xA;            fontFamily: themeData.fontFamily,&#xA;            scaffoldBackgroundColor: light.background,&#xA;            colorScheme: light,&#xA;          ),&#xA;          darkTheme: ThemeData(&#xA;            fontFamily: themeData.fontFamily,&#xA;            scaffoldBackgroundColor: dark.background,&#xA;            colorScheme: dark,&#xA;          ),&#xA;        );&#xA;      },&#xA;    );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With these configurations, Zeta makes it easy to achieve consistent theming throughout your Flutter application.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing the components&lt;/h2&gt; &#xA;&lt;p&gt;To view examples of all the components in the library, you can run the example app in this repo or go to &lt;a href=&#34;https://zeta-ds.web.app/&#34;&gt;Zeta&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;This software is licensed with the MIT license (see &lt;a href=&#34;https://raw.githubusercontent.com/ZebraDevs/zeta_flutter/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>