<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-30T01:32:33Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kubenav/kubenav</title>
    <updated>2023-01-30T01:32:33Z</updated>
    <id>tag:github.com,2023-01-30:/kubenav/kubenav</id>
    <link href="https://github.com/kubenav/kubenav" rel="alternate"></link>
    <summary type="html">&lt;p&gt;kubenav is the navigator for your Kubernetes clusters right in your pocket.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kubenav/kubenav/main/utils/images/repo/github-readme-logo.png&#34; width=&#34;200&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;strong&gt;kubenav&lt;/strong&gt; is the navigator for your &lt;strong&gt;Kubernetes&lt;/strong&gt; clusters right in your pocket. kubenav is a &lt;strong&gt;mobile and desktop&lt;/strong&gt; app to manage Kubernetes clusters and to get an overview of the status of your Kubernetes resources.&lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://apps.apple.com/us/app/kubenav/id1494512160&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubenav/kubenav/main/utils/images/repo/badge-app-store.png&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=io.kubenav.kubenav&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubenav/kubenav/main/utils/images/repo/badge-google-play.png&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubenav/kubenav/releases&#34; target=&#34;_self&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubenav/kubenav/main/utils/images/repo/badge-desktop.png&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kubenav/kubenav/main/utils/images/repo/github-screenshot.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;kubenav is a mobile and desktop app to manage Kubernetes clusters. The app provides an overview of all resources in a Kubernetes cluster, including current status information for workloads. The details view for resources provides additional information. It is possible to view logs and events or to get a shell into a container. You can also edit and delete resources or scale your workloads within the app.&lt;/p&gt; &#xA;&lt;p&gt;The app is developed using &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt; and &lt;a href=&#34;https://go.dev&#34;&gt;Go&lt;/a&gt;. For more information you can read through our &lt;a href=&#34;https://github.com/kubenav/kubenav/raw/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; for development.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Available for mobile and desktop:&lt;/strong&gt; kubenav provides the same experience for mobile and desktop, with nearly 100% code sharing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manage Resources:&lt;/strong&gt; All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Resource Definitions:&lt;/strong&gt; View all Custom Resource Definitions and mange Custom Resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modify Resources:&lt;/strong&gt; Edit and delete all available resources or scale your Deployments, StatefulSets, DaemonSets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filter and Search:&lt;/strong&gt; Filter the resources by Namespace and find them by their name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Status Information:&lt;/strong&gt; Fast overview of the status of workloads and detailed information including Events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource Usage:&lt;/strong&gt; View the requests, limits and current usage of Pods and Containers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Logs:&lt;/strong&gt; View the logs of a container or stream the logs in realtime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; Get a shell into a container, right from your phone.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Manage multiple Clusters:&lt;/strong&gt; Add multiple clusters via &lt;code&gt;kubeconfig&lt;/code&gt; or your preferred Cloud Provider, including Google, AWS and Azure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Port-Forwarding:&lt;/strong&gt; Create a port-forwarding connection to one of your Pods and open the served page in your browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prometheus Integration:&lt;/strong&gt; kubenav allows you to view your Prometheus metrics directly in the dashboard and to build your own dashboards via the Prometheus plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The mobile version of kubenav can be downloaded from the &lt;a href=&#34;https://apps.apple.com/us/app/kubenav/id1494512160&#34;&gt;App Store&lt;/a&gt; or &lt;a href=&#34;https://play.google.com/store/apps/details?id=io.kubenav.kubenav&#34;&gt;Google Play&lt;/a&gt;. The desktop version for macOS, Linux and Windows can be downloaded from the &lt;a href=&#34;https://github.com/kubenav/kubenav/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For testing new features and faster feedback, we provide a &lt;strong&gt;beta version&lt;/strong&gt; via &lt;a href=&#34;https://testflight.apple.com/join/RQUFGkHi&#34;&gt;Apple Testflight&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/apps/testing/io.kubenav.kubenav&#34;&gt;Google Play&lt;/a&gt;. For the desktop version we are building the app &lt;strong&gt;on each PR&lt;/strong&gt;. The binaries are then uploaded as artifacts in the &lt;a href=&#34;https://github.com/kubenav/kubenav/actions/workflows/continuous-delivery.yaml&#34;&gt;GitHub Action&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alexmercerind/window_plus</title>
    <updated>2023-01-30T01:32:33Z</updated>
    <id>tag:github.com,2023-01-30:/alexmercerind/window_plus</id>
    <link href="https://github.com/alexmercerind/window_plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;As it should be. Extend view into title-bar.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/alexmercerind/window_plus&#34;&gt;window+&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Work in progress. API may change.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As it should be. Extend view into title-bar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/28951144/201383429-f1dd42bc-e53e-493b-b777-95024788212a.png&#34; alt=&#34;0&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/28951144/201383435-34fedc2e-7cd9-46f9-86f7-b3f5a2a6f985.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Windows 7 &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/28951144/201383993-55c9c937-5e08-4627-843e-7ae63d382dfe.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remembering window position &amp;amp; state at application launch &amp;amp; quit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Frameless &amp;amp; customizable title-bar on Windows 10 RS1 or higher with correct resize &amp;amp; move hit-box.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Excellent backward compatibility, till Windows 7 SP1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fullscreen support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Overlay &amp;amp; always on-top support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programmatic maximize, restore, size, move, close &amp;amp; destroy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Subscription to window resize, move, minimize, maximize &amp;amp; fullscreen events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Customizable minimum window size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple monitor(s) compatibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Single instance support &amp;amp; argument vector (&lt;code&gt;List&amp;lt;String&amp;gt; args&lt;/code&gt;) forwarding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Windows 11 snap layouts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interception of window close event &lt;em&gt;e.g.&lt;/em&gt; for code execution or clean-up before application quit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Well tested &amp;amp; stable as fuck.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h4&gt;Initializing the plugin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;void&amp;gt; main() async {&#xA;  WidgetsFlutterBinding.ensureInitialized();&#xA;  /// Ideally, should be present right after [WidgetsFlutterBinding.ensureInitialized] &amp;amp; anywhere before [runApp].&#xA;  await WindowPlus.ensureInitialized(&#xA;    /// Pass a unique identifier for your application.&#xA;    application: &#39;com.alexmercerind.window_plus&#39;,&#xA;    /// Optional: &#xA;    enableCustomFrame: true,     // true by default on Windows 10 RS1 or higher.&#xA;    enableEventStreams: false,    // true by default.&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Intercepting window close event&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;WindowPlus.instance.setWindowCloseHandler(() async {&#xA;  /// Show alert to the user. Likely if some operation is pending.&#xA;  /// Perform clean-up.&#xA;  final bool canWindowClose = await doSomethingBeforeClose();&#xA;  return canWindowClose;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Receiving single instance arguments&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;WindowPlus.instance.setSingleInstanceArgumentsHandler((List&amp;lt;String&amp;gt; args) {&#xA;  print(args.toString());&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Entering or leaving fullscreen&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;WindowPlus.instance.setIsFullscreen(true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Programmatically controlling window&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;/// Control window state.&#xA;&#xA;WindowPlus.instance.minimize();&#xA;WindowPlus.instance.maximize();&#xA;WindowPlus.instance.restore();&#xA;&#xA;WindowPlus.instance.move(40, 40);&#xA;WindowPlus.instance.resize(640, 480);&#xA;&#xA;WindowPlus.instance.show();&#xA;WindowPlus.instance.hide();&#xA;&#xA;/// Close the window.&#xA;/// [WindowPlus.instance.setWindowCloseHandler] may be used to intercept the action.&#xA;&#xA;WindowPlus.instance.close();&#xA;&#xA;/// Closes the window without respecting the [WindowPlus.instance.setWindowCloseHandler] handler.&#xA;&#xA;WindowPlus.instance.destroy();&#xA;&#xA;/// Query.&#xA;final bool maximized = await WindowPlus.instance.maximized;&#xA;final bool minimized = await WindowPlus.instance.minimized;&#xA;final bool fullscreen = await WindowPlus.instance.fullscreen;&#xA;final Rect size = await WindowPlus.instance.size;&#xA;final Offset position = await WindowPlus.instance.position;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fetching available monitors&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// Get all the available monitors.&#xA;&#xA;final List&amp;lt;Monitor&amp;gt; monitors = await WindowPlus.instance.monitors;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subscribing to window events&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;WindowPlus.instance.maximizedStream.listen((bool value) {&#xA;  print(value.toString());&#xA;});&#xA;&#xA;WindowPlus.instance.minimizedStream.listen((bool value) {&#xA;  print(value.toString());&#xA;});&#xA;&#xA;WindowPlus.instance.fullscreenStream.listen((bool value) {&#xA;  print(value.toString());&#xA;});&#xA;&#xA;WindowPlus.instance.sizeStream.listen((Rect size) {&#xA;  print(size.toString());&#xA;});&#xA;&#xA;WindowPlus.instance.positionStream.listen((Offset position) {&#xA;  print(position.toString());&#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Displaying custom title-bar&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;1. Default Windows look.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;        /// Use a [Stack] to make your app&#39;s content to &#34;bleed through the title-bar&#34; &amp;amp; give a seamless look.&#xA;        body: Stack(&#xA;          alignment: Alignment.topCenter,&#xA;          children: [&#xA;            /// Actual application content.&#xA;            MyScreen(),&#xA;            /// Window title-bar that follows Windows&#39; default design.&#xA;            /// It&#39;s height can be accessed using [WindowPlus.instance.captionHeight].&#xA;            /// Only shows on Windows 10 or higher. On lower Windows versions, the default window frame is kept. Thus, no need for rendering second one.&#xA;            WindowCaption(&#xA;              /// Optionally, [brightness] may be set to make window controls white or black (as default Windows 10+ design does).&#xA;              /// By default, this is decided by [MediaQuery].&#xA;              brightness: Brightness.dark,&#xA;              /// A [child] may be passed to render custom content in the title-bar.&#xA;            ),&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;2. Custom look.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may compose your own window title-bar &amp;amp; controls. See following widgets for reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowCaptionArea&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowMinimizeButton&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowMaximizeButton&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowRestoreButton&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowCloseButton&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowRestoreMaximizeButton&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Following configuration is required.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;windows/runner/win32_window.cpp&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;   HWND window = CreateWindow(&#xA;-      window_class, title.c_str(), WS_OVERLAPPEDWINDOW | WS_VISIBLE,&#xA;+      window_class, title.c_str(), WS_OVERLAPPEDWINDOW,&#xA;       Scale(origin.x, scale_factor), Scale(origin.y, scale_factor),&#xA;       Scale(size.width, scale_factor), Scale(size.height, scale_factor),&#xA;       nullptr, nullptr, GetModuleHandle(nullptr), this);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-    case WM_SIZE: {&#xA;-      RECT rect = GetClientArea();&#xA;-      if (child_content_ != nullptr) {&#xA;-        // Size and position the child window.&#xA;-        MoveWindow(child_content_, rect.left, rect.top, rect.right - rect.left,&#xA;-                   rect.bottom - rect.top, TRUE);&#xA;-      }&#xA;-      return 0;&#xA;-    }&#xA;&#xA;     case WM_ACTIVATE:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;linux/my_application.cc&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-  gtk_widget_show(GTK_WIDGET(window));&#xA;+  gtk_widget_realize(GTK_WIDGET(window));&#xA;   g_autoptr(FlDartProject) project = fl_dart_project_new();&#xA;   fl_dart_project_set_dart_entrypoint_arguments(&#xA;       project, self-&amp;gt;dart_entrypoint_arguments);&#xA;   FlView* view = fl_view_new(project);&#xA;-  gtk_widget_show(GTK_WIDGET(view));&#xA;+  gtk_widget_realize(GTK_WIDGET(view));&#xA;   gtk_container_add(GTK_CONTAINER(window), GTK_WIDGET(view));&#xA;   fl_register_plugins(FL_PLUGIN_REGISTRY(view));&#xA;-  gtk_widget_grab_focus(GTK_WIDGET(view));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Single Instance&lt;/h2&gt; &#xA;&lt;p&gt;For enabling single instance support, follow the steps below.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;windows/runner/main.cpp&lt;/code&gt;, add the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  #include &amp;lt;flutter/dart_project.h&amp;gt;&#xA;  #include &amp;lt;flutter/flutter_view_controller.h&amp;gt;&#xA;  #include &amp;lt;windows.h&amp;gt;&#xA;&#xA;  #include &#34;flutter_window.h&#34;&#xA;  #include &#34;utils.h&#34;&#xA;+ #include &#34;window_plus/window_plus_plugin_c_api.h&#34;&#xA;&#xA;  int APIENTRY wWinMain(_In_ HINSTANCE instance, _In_opt_ HINSTANCE prev,&#xA;                        _In_ wchar_t* command_line, _In_ int show_command) {&#xA;+   ::WindowPlusPluginCApiHandleSingleInstance(NULL, NULL);&#xA;&#xA;    // Attach to console when present (e.g., &#39;flutter run&#39;) or create a&#xA;    // new console when running with a debugger.&#xA;    if (!::AttachConsole(ATTACH_PARENT_PROCESS) &amp;amp;&amp;amp; ::IsDebuggerPresent()) {&#xA;      CreateAndAttachConsole();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use custom window class name, then you can pass it as the first argument instead of &lt;code&gt;NULL&lt;/code&gt;. Similarly, if you want to also account for your window&#39;s title, then you can pass it as the second argument instead of &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;You need to edit your &lt;code&gt;linux/my_application.cc&lt;/code&gt; file. See &lt;a href=&#34;https://github.com/alexmercerind/window_plus/raw/master/example/linux/my_application.cc&#34;&gt;this file for reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice how &lt;code&gt;G_APPLICATION_HANDLES_OPEN&lt;/code&gt; &amp;amp; &lt;code&gt;G_APPLICATION_HANDLES_COMMAND_LINE&lt;/code&gt; &lt;a href=&#34;https://github.com/alexmercerind/window_plus/raw/562407f7f316714024577ce5467a12ee8f99bc24/example/linux/my_application.cc#L135-L149&#34;&gt;are implemented&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, forward the arguments to Dart / Flutter, with &lt;a href=&#34;https://github.com/alexmercerind/window_plus/raw/562407f7f316714024577ce5467a12ee8f99bc24/example/linux/my_application.cc#L24-L31&#34;&gt;&lt;code&gt;window_plus_plugin_handle_single_instance&lt;/code&gt; call at the required location&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alexmercerind/window_plus&#34;&gt;&lt;code&gt;package:window_plus&lt;/code&gt;&lt;/a&gt; is made to leverage requirements of &lt;a href=&#34;https://github.com/harmonoid/harmonoid&#34;&gt;Harmonoid&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Initially, &lt;a href=&#34;https://github.com/harmonoid/harmonoid&#34;&gt;Harmonoid&lt;/a&gt; used &lt;a href=&#34;https://github.com/bitsdojo/bitsdojo_window&#34;&gt;&lt;code&gt;package:bitsdojo_window&lt;/code&gt;&lt;/a&gt; for a &lt;em&gt;modern-looking window&lt;/em&gt; on Windows. However, as time went by a number of issues were faced like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resize hit-box inside window (which made &lt;code&gt;Widget&lt;/code&gt;s near window borders hard to interract e.g. scrollbar)&lt;/li&gt; &#xA; &lt;li&gt;Windows 7 support.&lt;/li&gt; &#xA; &lt;li&gt;Other stability &amp;amp; crash issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This gave birth to &lt;a href=&#34;https://github.com/alexmercerind/bitsdojo_window&#34;&gt;my fork of &lt;code&gt;package:bitsdojo_window&lt;/code&gt;&lt;/a&gt;, where I fixed various issues I discovered. However, after mending things in a dirty manner (partially due to the fact that my style of writing code is different), the code became really spaghetti &amp;amp; now it&#39;s something I can no longer trust. Thus, I decided to create &lt;a href=&#34;https://github.com/alexmercerind/window_plus&#34;&gt;&lt;code&gt;package:window_plus&lt;/code&gt;&lt;/a&gt; which is far more cleaner (follows &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;), correctly implemented &amp;amp; offers additional features like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to intercept window close event.&lt;/li&gt; &#xA; &lt;li&gt;Remembering window position &amp;amp; state.&lt;/li&gt; &#xA; &lt;li&gt;Fullscreen support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I also didn&#39;t want a custom frame on GNU/Linux version of &lt;a href=&#34;https://github.com/harmonoid/harmonoid&#34;&gt;Harmonoid&lt;/a&gt;, since it&#39;s &lt;em&gt;&#34;not the trend&#34;&lt;/em&gt;. See: Discord, Visual Studio Code or Spotify. I believe ensuring compatibility with &lt;em&gt;all&lt;/em&gt; desktop environments like KDE, XFCE, GNOME &amp;amp; other tiling ones is far more important. So, best is to customize the native window behavior as less as possible on Linux. On the other hand, most GNU/Linux desktop environments offer various customization options for changing window controls&#39; style/position, window&#39;s frame/border etc. anyway. This functionality of host OS would be unusable after implementing a custom frame &amp;amp; rendering custom title bar with Flutter.&lt;/p&gt; &#xA;&lt;p&gt;Stability &amp;amp; correct implementation is the primary concern here.&lt;/p&gt; &#xA;&lt;p&gt;Now, &lt;em&gt;i.e.&lt;/em&gt; &lt;a href=&#34;https://github.com/alexmercerind/window_plus&#34;&gt;&lt;code&gt;package:window_plus&lt;/code&gt;&lt;/a&gt; can serve as a starting point for applications other than &lt;a href=&#34;https://github.com/harmonoid/harmonoid&#34;&gt;Harmonoid&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2022, Hitesh Kumar Saini &lt;a href=&#34;mailto:saini123hitesh@gmail.com&#34;&gt;saini123hitesh@gmail.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;It&#39;s free real estate.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>