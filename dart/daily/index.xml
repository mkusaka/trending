<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-26T01:30:31Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Workiva/opentelemetry-dart</title>
    <updated>2025-04-26T01:30:31Z</updated>
    <id>tag:github.com,2025-04-26:/Workiva/opentelemetry-dart</id>
    <link href="https://github.com/Workiva/opentelemetry-dart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTelemetry for Dart&lt;/h1&gt; &#xA;&lt;p&gt;This repository is the Dart implementation of the &lt;a href=&#34;https://opentelemetry.io/&#34;&gt;OpenTelemetry project&lt;/a&gt;. All contributions and designs should follow the &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-specification&#34;&gt;OpenTelemetry specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Signal&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Traces&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metrics&lt;/td&gt; &#xA;   &lt;td&gt;Alpha&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Logs&lt;/td&gt; &#xA;   &lt;td&gt;Unimplemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This section will show you how to initialize the OpenTelemetry SDK, capture a span, and propagate context.&lt;/p&gt; &#xA;&lt;h3&gt;Initialize the OpenTelemetry SDK&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:opentelemetry/sdk.dart&#39;&#xA;    show&#xA;        BatchSpanProcessor,&#xA;        CollectorExporter,&#xA;        ConsoleExporter,&#xA;        SimpleSpanProcessor,&#xA;        TracerProviderBase;&#xA;import &#39;package:opentelemetry/api.dart&#39;&#xA;    show registerGlobalTracerProvider, globalTracerProvider;&#xA;&#xA;void main(List&amp;lt;String&amp;gt; args) {&#xA;  final tracerProvider = TracerProviderBase(processors: [&#xA;    BatchSpanProcessor(&#xA;        CollectorExporter(Uri.parse(&#39;https://my-collector.com/v1/traces&#39;))),&#xA;    SimpleSpanProcessor(ConsoleExporter())&#xA;  ]);&#xA;&#xA;  registerGlobalTracerProvider(tracerProvider);&#xA;  final tracer = globalTracerProvider.getTracer(&#39;instrumentation-name&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capture a Span&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:opentelemetry/api.dart&#39; show StatusCode, globalTracerProvider;&#xA;&#xA;void main(List&amp;lt;String&amp;gt; args) {&#xA;  final tracer = globalTracerProvider.getTracer(&#39;instrumentation-name&#39;);&#xA;&#xA;  final span = tracer.startSpan(&#39;main&#39;);&#xA;  try {&#xA;    // do some work&#xA;    span.addEvent(&#39;some work&#39;);&#xA;  } catch (e, s) {&#xA;    span&#xA;      ..setStatus(StatusCode.error, e.toString())&#xA;      ..recordException(e, stackTrace: s);&#xA;    rethrow;&#xA;  } finally {&#xA;    span.end();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Propagate Context&lt;/h3&gt; &#xA;&lt;h3&gt;Intra-process&lt;/h3&gt; &#xA;&lt;p&gt;In order to parent spans, context must be propagated. Propagation can be achieved by manually passing an instance of &lt;code&gt;Context&lt;/code&gt; or by using Dart &lt;a href=&#34;https://dart.dev/libraries/async/zones&#34;&gt;&lt;code&gt;Zones&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/opentelemetry-dart/master/example/attach_detach_context&#34;&gt;attach detach context example&lt;/a&gt;for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Inter-process&lt;/h3&gt; &#xA;&lt;p&gt;In order to parent spans between processes, context can be serialized and deserialized using a &lt;code&gt;TextMapPropagator&lt;/code&gt;, &lt;code&gt;TextMapSetter&lt;/code&gt;, and &lt;code&gt;TextMapGetter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Workiva/opentelemetry-dart/master/example/w3c_context_propagation.dart&#34;&gt;W3C context propagation example&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;High Resolution Timestamps&lt;/h4&gt; &#xA;&lt;p&gt;A tracer provider can register a web-specific time provider that uses the browser&#39;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Performance/now&#34;&gt;performance API&lt;/a&gt; instead of &lt;a href=&#34;https://api.dart.dev/stable/dart-core/DateTime-class.html&#34;&gt;DateTime&lt;/a&gt; when recording timestamps for a span&#39;s start timestamp, end timestamp, and span events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:opentelemetry/web_sdk.dart&#39; as web_sdk;&#xA;&#xA;final tracerProvider =&#xA;    web_sdk.WebTracerProvider(timeProvider: web_sdk.WebTimeProvider());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Important Note: Span timestamps may be inaccurate if the executing system is suspended for sleep. See &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-js/issues/852&#34;&gt;https://github.com/open-telemetry/opentelemetry-js/issues/852&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;In order to generate protobuf definitions, you must have &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;protoc&lt;/a&gt; installed and available in your path.&lt;/p&gt; &#xA;&lt;h3&gt;Publishing New Versions&lt;/h3&gt; &#xA;&lt;p&gt;Only Workiva maintainers can publish new versions of opentelemetry-dart. See &lt;a href=&#34;https://github.com/Workiva/Observability/raw/master/doc/publishing_opentelemetry_dart.md&#34;&gt;Publishing opentelemetry-dart&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>