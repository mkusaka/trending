<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-12T01:33:35Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>redevRx/Flutter-ChatGPT</title>
    <updated>2023-01-12T01:33:35Z</updated>
    <id>tag:github.com,2023-01-12:/redevRx/Flutter-ChatGPT</id>
    <link href="https://github.com/redevRx/Flutter-ChatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ChatGPT Application with flutter&lt;/h2&gt; &#xA;&lt;p&gt;ChatGPT is a chatbot launched by OpenAI in November 2022. It is built on top of OpenAI&#39;s GPT-3.5 family of large language models, and is fine-tuned with both supervised and reinforcement learning techniques.&lt;/p&gt; &#xA;&lt;h2&gt;Install Package&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;chat_gpt:1.0.1+5&#xA;pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Create ChatGPT Instance&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parameter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Token &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Your secret API keys are listed below. Please note that we do not display your secret API keys again after you generate them.&lt;/li&gt; &#xA;     &lt;li&gt;Do not share your API key with others, or expose it in the browser or other client-side code. In order to protect the security of your account, OpenAI may also automatically rotate any API key that we&#39;ve found has leaked publicly.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;https://beta.openai.com/account/api-keys&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OrgId &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Identifier for this organization sometimes used in API requests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/account/org-settings&#34;&gt;https://beta.openai.com/account/org-settings&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final openAI = ChatGPT.instance.builder(&#34;token&#34;, baseOption: HttpSetup(receiveTimeout: 6000));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text Complete API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Translate Method &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;translateEngToThai&lt;/li&gt; &#xA;     &lt;li&gt;translateThaiToEng&lt;/li&gt; &#xA;     &lt;li&gt;translateToJapanese&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Model &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;kTranslateModelV3&lt;/li&gt; &#xA;     &lt;li&gt;kTranslateModelV2&lt;/li&gt; &#xA;     &lt;li&gt;kCodeTranslateModelV2 &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Translate natural language to SQL queries.&lt;/li&gt; &#xA;       &lt;li&gt;Create code to call the Stripe API using natural language.&lt;/li&gt; &#xA;       &lt;li&gt;Find the time complexity of a function.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/examples&#34;&gt;https://beta.openai.com/examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final request = CompleteReq(prompt: translateEngToThai(word: &#39;&#39;),&#xA;                model: kTranslateModelV3, max_tokens: 200);&#xA;&#xA; openAI.onCompleteStream(request:request).listen((response) =&amp;gt; print(response));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example Q&amp;amp;A &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Answer questions based on existing knowledge.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final request = CompleteReq(prompt:&#39;What is human life expectancy in the United States?&#39;),&#xA;                model: kTranslateModelV3, max_tokens: 200);&#xA;&#xA; openAI.onCompleteStream(request:request).listen((response) =&amp;gt; print(response));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Q: What is human life expectancy in the United States?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;A: Human life expectancy in the United States is 78 years.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Model List &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List and describe the various models available in the API. You can refer to the Models documentation to understand what models are available and the differences between them.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/api-reference/models&#34;&gt;https://beta.openai.com/docs/api-reference/models&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final models = await openAI.listModel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Engine List &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://beta.openai.com/docs/api-reference/engines&#34;&gt;https://beta.openai.com/docs/api-reference/engines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final engines = await openAI.listEngine();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flutter Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class _TranslateScreenState extends State&amp;lt;TranslateScreen&amp;gt; {&#xA;  /// text controller&#xA;  final _txtWord = TextEditingController();&#xA;&#xA;  CompleteRes? _response;&#xA;  StreamSubscription? subscription;&#xA;&#xA;  final api = ChatGPT.instance;&#xA;&#xA;  void _translateEngToThai() {&#xA;    final request = CompleteReq(&#xA;        prompt: translateEngToThai(word: _txtWord.text.toString()),&#xA;        model: kTranslateModelV3,&#xA;        max_tokens: 1000);&#xA;    subscription = ChatGPT.instance&#xA;        .builder(&#34;token&#34;)&#xA;        .onCompleteStream(request: request)&#xA;        .listen((res) {&#xA;      setState(() {&#xA;        _response = res;&#xA;      });&#xA;    });&#xA;  }&#xA;&#xA;  void modelDataList() async{&#xA;    final model = await ChatGPT.instance&#xA;        .builder(&#34;token&#34;)&#xA;        .listModel();&#xA;&#xA;  }&#xA;&#xA;  void engineList() async{&#xA;    final engines = await ChatGPT.instance&#xA;        .builder(&#34;token&#34;)&#xA;        .listEngine();&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    subscription?.cancel();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    var size = MediaQuery.of(context).size;&#xA;    return Scaffold(&#xA;      backgroundColor: Colors.white,&#xA;      body: SingleChildScrollView(&#xA;        child: Center(&#xA;          child: Padding(&#xA;            padding: const EdgeInsets.symmetric(vertical: 16.0),&#xA;            child: Column(&#xA;              crossAxisAlignment: CrossAxisAlignment.center,&#xA;              children: [&#xA;                /**&#xA;                 * title translate&#xA;                 */&#xA;                _titleCard(size),&#xA;                /**&#xA;                 * input card&#xA;                 * insert your text for translate to th.com&#xA;                 */&#xA;                _inputCard(size),&#xA;&#xA;                /**&#xA;                 * card input translate&#xA;                 */&#xA;                _resultCard(size),&#xA;                /**&#xA;                 * button translate&#xA;                 */&#xA;                _btnTranslate()&#xA;              ],&#xA;            ),&#xA;          ),&#xA;        ),&#xA;      ),&#xA;      bottomNavigationBar: _navigation(size),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://scontent.fkkc2-1.fna.fbcdn.net/v/t39.30808-6/321956306_528473869217638_4959635231571092650_n.jpg?_nc_cat=104&amp;amp;ccb=1-7&amp;amp;_nc_sid=730e14&amp;amp;_nc_ohc=TcRQz9fKY10AX_PBKuX&amp;amp;tn=aWCijFs0IEeQXzfE&amp;amp;_nc_ht=scontent.fkkc2-1.fna&amp;amp;oh=00_AfDJKR5tmk4aZUongrkPn1UJ-oBP5nrx8moxoRIzOfKjmA&amp;amp;oe=63B818E4&#34;&gt;</summary>
  </entry>
</feed>