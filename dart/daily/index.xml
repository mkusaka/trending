<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-05T01:37:44Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jonjomckay/fritter</title>
    <updated>2022-07-05T01:37:44Z</updated>
    <id>tag:github.com,2022-07-05:/jonjomckay/fritter</id>
    <link href="https://github.com/jonjomckay/fritter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A privacy-friendly Twitter frontend for mobile devices&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Fritter &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jonjomckay/fritter&#34;&gt; &lt;img alt=&#34;Fritter&#34; title=&#34;Fritter&#34; src=&#34;http://i.imgur.com/xmO9MTv.png&#34; width=&#34;144&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A privacy-friendly Twitter frontend for mobile devices. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://f-droid.org/packages/com.jonjomckay.fritter/&#34;&gt; &lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.jonjomckay.fritter&#34;&gt; &lt;img src=&#34;https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png&#34; alt=&#34;Get it on Google Play&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Device-local subscriptions and groups, Newpipe-style, including a feed view&lt;/li&gt; &#xA; &lt;li&gt;Device-local saving of tweets, allowing offline reading&lt;/li&gt; &#xA; &lt;li&gt;Viewing profiles&lt;/li&gt; &#xA; &lt;li&gt;Viewing tweets, and tweet replies, threads and conversations&lt;/li&gt; &#xA; &lt;li&gt;Viewing and downloading pictures, videos and GIFs in tweets&lt;/li&gt; &#xA; &lt;li&gt;Searching for tweets and users&lt;/li&gt; &#xA; &lt;li&gt;Viewing trending topics&lt;/li&gt; &#xA; &lt;li&gt;Supports opening twitter.com links directly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;| &lt;img alt=&#34;Viewing groups and subscriptions&#34; src=&#34;https://raw.githubusercontent.com/jonjomckay/fritter/master/fastlane/metadata/android/en-US/images/phoneScreenshots/1.jpg&#34; width=&#34;200&#34;&gt; | &lt;img alt=&#34;Viewing a profile&#34; src=&#34;https://raw.githubusercontent.com/jonjomckay/fritter/master/fastlane/metadata/android/en-US/images/phoneScreenshots/2.jpg&#34; width=&#34;200&#34;&gt; | &lt;img alt=&#34;Tweet cards&#34; src=&#34;https://raw.githubusercontent.com/jonjomckay/fritter/master/fastlane/metadata/android/en-US/images/phoneScreenshots/3.jpg&#34; width=&#34;200&#34;&gt; | &lt;img alt=&#34;Viewing trends&#34; src=&#34;https://raw.githubusercontent.com/jonjomckay/fritter/master/fastlane/metadata/android/en-US/images/phoneScreenshots/4.jpg&#34; width=&#34;200&#34;&gt; | &lt;img alt=&#34;Viewing saved tweets&#34; src=&#34;https://raw.githubusercontent.com/jonjomckay/fritter/master/fastlane/metadata/android/en-US/images/phoneScreenshots/5.jpg&#34; width=&#34;200&#34;&gt; |&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Icons made by &lt;a href=&#34;https://www.freepik.com&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com&#34;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;Help translate this project on &lt;a href=&#34;https://hosted.weblate.org/projects/fritter/&#34;&gt;Hosted Weblate&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rrousselGit/provider</title>
    <updated>2022-07-05T01:37:44Z</updated>
    <id>tag:github.com,2022-07-05:/rrousselGit/provider</id>
    <link href="https://github.com/rrousselGit/provider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;InheritedWidgets, but simple&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/provider/raw/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/provider/raw/master/resources/translations/pt_br/README.md&#34;&gt;Português&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/provider/raw/master/resources/translations/zh-CN/README.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/provider/raw/master/resources/translations/es_MX/README.md&#34;&gt;Español&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/provider/raw/master/resources/translations/ko-KR/README.md&#34;&gt;한국어&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/provider/master/resources/translations/bn_BD/README.md&#34;&gt;বাংলা&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/provider/raw/master/resources/translations/ja_JP/README.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/provider/actions&#34;&gt;&lt;img src=&#34;https://github.com/rrousselGit/provider/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/rrousselGit/provider&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rrousselGit/provider/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Bbumvej&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/765557403865186374.svg?logo=discord&amp;amp;color=blue&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/favorites&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/provider/master/resources/flutter_favorite.png&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A wrapper around &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt; to make them easier to use and more reusable.&lt;/p&gt; &#xA;&lt;p&gt;By using &lt;code&gt;provider&lt;/code&gt; instead of manually writing &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt;, you get:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simplified allocation/disposal of resources&lt;/li&gt; &#xA; &lt;li&gt;lazy-loading&lt;/li&gt; &#xA; &lt;li&gt;a vastly reduced boilerplate over making a new class every time&lt;/li&gt; &#xA; &lt;li&gt;devtool friendly – using Provider, the state of your application will be visible in the Flutter devtool&lt;/li&gt; &#xA; &lt;li&gt;a common way to consume these &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html&#34;&gt;InheritedWidget&lt;/a&gt;s (See &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Provider/of.html&#34;&gt;Provider.of&lt;/a&gt;/&lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Consumer-class.html&#34;&gt;Consumer&lt;/a&gt;/&lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Selector-class.html&#34;&gt;Selector&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;increased scalability for classes with a listening mechanism that grows exponentially in complexity (such as &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt;, which is O(N) for dispatching notifications).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To read more about a &lt;code&gt;provider&lt;/code&gt;, see its &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/provider-library.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/development/data-and-backend/state-mgmt/simple&#34;&gt;The official Flutter state management documentation&lt;/a&gt;, which showcases how to use &lt;code&gt;provider&lt;/code&gt; + &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianegan/flutter_architecture_samples/tree/master/change_notifier_provider&#34;&gt;flutter architecture sample&lt;/a&gt;, which contains an implementation of that app using &lt;code&gt;provider&lt;/code&gt; + &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/felangel/bloc&#34;&gt;flutter_bloc&lt;/a&gt; and &lt;a href=&#34;https://github.com/mobxjs/mobx.dart&#34;&gt;Mobx&lt;/a&gt;, which uses a &lt;code&gt;provider&lt;/code&gt; in their architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration from 4.x.x to 5.0.0-nullsafety&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;initialData&lt;/code&gt; for both &lt;code&gt;FutureProvider&lt;/code&gt; and &lt;code&gt;StreamProvider&lt;/code&gt; is now required.&lt;/p&gt; &lt;p&gt;To migrate, what used to be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FutureProvider&amp;lt;int&amp;gt;(&#xA;  create: (context) =&amp;gt; Future.value(42),&#xA;  child: MyApp(),&#xA;)&#xA;&#xA;Widget build(BuildContext context) {&#xA;  final value = context.watch&amp;lt;int&amp;gt;();&#xA;  return Text(&#39;$value&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;is now:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FutureProvider&amp;lt;int?&amp;gt;(&#xA;  initialValue: null,&#xA;  create: (context) =&amp;gt; Future.value(42),&#xA;  child: MyApp(),&#xA;)&#xA;&#xA;Widget build(BuildContext context) {&#xA;  // be sure to specify the ? in watch&amp;lt;int?&amp;gt;&#xA;  final value = context.watch&amp;lt;int?&amp;gt;();&#xA;  return Text(&#39;$value&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ValueListenableProvider&lt;/code&gt; is removed&lt;/p&gt; &lt;p&gt;To migrate, you can instead use &lt;code&gt;Provider&lt;/code&gt; combined with &lt;code&gt;ValueListenableBuilder&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ValueListenableBuilder&amp;lt;int&amp;gt;(&#xA;  valueListenable: myValueListenable,&#xA;  builder: (context, value, _) {&#xA;    return Provider&amp;lt;int&amp;gt;.value(&#xA;      value: value,&#xA;      child: MyApp(),&#xA;    );&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Exposing a value&lt;/h3&gt; &#xA;&lt;h4&gt;Exposing a new object instance&lt;/h4&gt; &#xA;&lt;p&gt;Providers allow you to not only expose a value, but also create, listen, and dispose of it.&lt;/p&gt; &#xA;&lt;p&gt;To expose a newly created object, use the default constructor of a provider. Do &lt;em&gt;not&lt;/em&gt; use the &lt;code&gt;.value&lt;/code&gt; constructor if you want to &lt;strong&gt;create&lt;/strong&gt; an object, or you may otherwise have undesired side effects.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://stackoverflow.com/questions/52249578/how-to-deal-with-unwanted-widget-build&#34;&gt;this StackOverflow answer&lt;/a&gt; which explains why using the &lt;code&gt;.value&lt;/code&gt; constructor to create values is undesired.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DO&lt;/strong&gt; create a new object inside &lt;code&gt;create&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Provider(&#xA;  create: (_) =&amp;gt; MyModel(),&#xA;  child: ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DON&#39;T&lt;/strong&gt; use &lt;code&gt;Provider.value&lt;/code&gt; to create your object.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ChangeNotifierProvider.value(&#xA;  value: MyModel(),&#xA;  child: ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;DON&#39;T&lt;/strong&gt; create your object from variables that can change over time.&lt;/p&gt; &lt;p&gt;In such a situation, your object would never update when the value changes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;int count;&#xA;&#xA;Provider(&#xA;  create: (_) =&amp;gt; MyModel(count),&#xA;  child: ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pass variables that can change over time to your object, consider using &lt;code&gt;ProxyProvider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;int count;&#xA;&#xA;ProxyProvider0(&#xA;  update: (_, __) =&amp;gt; MyModel(count),&#xA;  child: ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt; callback of a provider, it is worth noting that this callback is called lazily by default.&lt;/p&gt; &#xA;&lt;p&gt;This means that until the value is requested at least once, the &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt; callbacks won&#39;t be called.&lt;/p&gt; &#xA;&lt;p&gt;This behavior can be disabled if you want to pre-compute some logic, using the &lt;code&gt;lazy&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MyProvider(&#xA;  create: (_) =&amp;gt; Something(),&#xA;  lazy: false,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reusing an existing object instance:&lt;/h4&gt; &#xA;&lt;p&gt;If you already have an object instance and want to expose it, it would be best to use the &lt;code&gt;.value&lt;/code&gt; constructor of a provider.&lt;/p&gt; &#xA;&lt;p&gt;Failing to do so may call your object &lt;code&gt;dispose&lt;/code&gt; method when it is still in use.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DO&lt;/strong&gt; use &lt;code&gt;ChangeNotifierProvider.value&lt;/code&gt; to provide an existing &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MyChangeNotifier variable;&#xA;&#xA;ChangeNotifierProvider.value(&#xA;  value: variable,&#xA;  child: ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DON&#39;T&lt;/strong&gt; reuse an existing &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt; using the default constructor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MyChangeNotifier variable;&#xA;&#xA;ChangeNotifierProvider(&#xA;  create: (_) =&amp;gt; variable,&#xA;  child: ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading a value&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to read a value is by using the extension methods on [BuildContext]:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;context.watch&amp;lt;T&amp;gt;()&lt;/code&gt;, which makes the widget listen to changes on &lt;code&gt;T&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context.read&amp;lt;T&amp;gt;()&lt;/code&gt;, which returns &lt;code&gt;T&lt;/code&gt; without listening to it&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context.select&amp;lt;T, R&amp;gt;(R cb(T value))&lt;/code&gt;, which allows a widget to listen to only a small part of &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One can also use the static method &lt;code&gt;Provider.of&amp;lt;T&amp;gt;(context)&lt;/code&gt;, which will behave similarly to &lt;code&gt;watch&lt;/code&gt;. When the &lt;code&gt;listen&lt;/code&gt; parameter is set to &lt;code&gt;false&lt;/code&gt; (as in &lt;code&gt;Provider.of&amp;lt;T&amp;gt;(context, listen: false)&lt;/code&gt;), then it will behave similarly to &lt;code&gt;read&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s worth noting that &lt;code&gt;context.read&amp;lt;T&amp;gt;()&lt;/code&gt; won&#39;t make a widget rebuild when the value changes and it cannot be called inside &lt;code&gt;StatelessWidget.build&lt;/code&gt;/&lt;code&gt;State.build&lt;/code&gt;. On the other hand, it can be freely called outside of these methods.&lt;/p&gt; &#xA;&lt;p&gt;These methods will look up in the widget tree starting from the widget associated with the &lt;code&gt;BuildContext&lt;/code&gt; passed and will return the nearest variable of type &lt;code&gt;T&lt;/code&gt; found (or throw if nothing is found).&lt;/p&gt; &#xA;&lt;p&gt;This operation is O(1). It doesn&#39;t involve walking in the widget tree.&lt;/p&gt; &#xA;&lt;p&gt;Combined with the first example of &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/provider/master/#exposing-a-value&#34;&gt;exposing a value&lt;/a&gt;, this the widget will read the exposed &lt;code&gt;String&lt;/code&gt; and render &#34;Hello World.&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Home extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Text(&#xA;      // Don&#39;t forget to pass the type of the object you want to obtain to `watch`!&#xA;      context.watch&amp;lt;String&amp;gt;(),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, instead of using these methods, we can use &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Consumer-class.html&#34;&gt;Consumer&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Selector-class.html&#34;&gt;Selector&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These can be useful for performance optimizations or when it is difficult to obtain a &lt;code&gt;BuildContext&lt;/code&gt; descendant of the provider.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/rrousselGit/provider#my-widget-rebuilds-too-often-what-can-i-do&#34;&gt;FAQ&lt;/a&gt; or the documentation of &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Consumer-class.html&#34;&gt;Consumer&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Selector-class.html&#34;&gt;Selector&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Optionally depending on a provider&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes, we may want to support cases where a provider does not exist. An example would be for reusable widgets that could be used in various locations, including outside of a provider.&lt;/p&gt; &#xA;&lt;p&gt;To do so, when calling &lt;code&gt;context.watch&lt;/code&gt;/&lt;code&gt;context.read&lt;/code&gt;, make the generic type nullable. Such that instead of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;context.watch&amp;lt;Model&amp;gt;()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will throw a &lt;code&gt;ProviderNotFoundException&lt;/code&gt; if no matching providers are found, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;context.watch&amp;lt;Model?&amp;gt;()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will try to obtain a matching provider. But if none are found, &lt;code&gt;null&lt;/code&gt; will be returned instead of throwing.&lt;/p&gt; &#xA;&lt;h3&gt;MultiProvider&lt;/h3&gt; &#xA;&lt;p&gt;When injecting many values in big applications, &lt;code&gt;Provider&lt;/code&gt; can rapidly become pretty nested:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Provider&amp;lt;Something&amp;gt;(&#xA;  create: (_) =&amp;gt; Something(),&#xA;  child: Provider&amp;lt;SomethingElse&amp;gt;(&#xA;    create: (_) =&amp;gt; SomethingElse(),&#xA;    child: Provider&amp;lt;AnotherThing&amp;gt;(&#xA;      create: (_) =&amp;gt; AnotherThing(),&#xA;      child: someWidget,&#xA;    ),&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MultiProvider(&#xA;  providers: [&#xA;    Provider&amp;lt;Something&amp;gt;(create: (_) =&amp;gt; Something()),&#xA;    Provider&amp;lt;SomethingElse&amp;gt;(create: (_) =&amp;gt; SomethingElse()),&#xA;    Provider&amp;lt;AnotherThing&amp;gt;(create: (_) =&amp;gt; AnotherThing()),&#xA;  ],&#xA;  child: someWidget,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The behavior of both examples is strictly the same. &lt;code&gt;MultiProvider&lt;/code&gt; only changes the appearance of the code.&lt;/p&gt; &#xA;&lt;h3&gt;ProxyProvider&lt;/h3&gt; &#xA;&lt;p&gt;Since the 3.0.0, there is a new kind of provider: &lt;code&gt;ProxyProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ProxyProvider&lt;/code&gt; is a provider that combines multiple values from other providers into a new object and sends the result to &lt;code&gt;Provider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;That new object will then be updated whenever one of the provider we depend on gets updated.&lt;/p&gt; &#xA;&lt;p&gt;The following example uses &lt;code&gt;ProxyProvider&lt;/code&gt; to build translations based on a counter coming from another provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  return MultiProvider(&#xA;    providers: [&#xA;      ChangeNotifierProvider(create: (_) =&amp;gt; Counter()),&#xA;      ProxyProvider&amp;lt;Counter, Translations&amp;gt;(&#xA;        update: (_, counter, __) =&amp;gt; Translations(counter.value),&#xA;      ),&#xA;    ],&#xA;    child: Foo(),&#xA;  );&#xA;}&#xA;&#xA;class Translations {&#xA;  const Translations(this._value);&#xA;&#xA;  final int _value;&#xA;&#xA;  String get title =&amp;gt; &#39;You clicked $_value times&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It comes under multiple variations, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ProxyProvider&lt;/code&gt; vs &lt;code&gt;ProxyProvider2&lt;/code&gt; vs &lt;code&gt;ProxyProvider3&lt;/code&gt;, ...&lt;/p&gt; &lt;p&gt;That digit after the class name is the number of other providers that &lt;code&gt;ProxyProvider&lt;/code&gt; depends on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ProxyProvider&lt;/code&gt; vs &lt;code&gt;ChangeNotifierProxyProvider&lt;/code&gt; vs &lt;code&gt;ListenableProxyProvider&lt;/code&gt;, ...&lt;/p&gt; &lt;p&gt;They all work similarly, but instead of sending the result into a &lt;code&gt;Provider&lt;/code&gt;, a &lt;code&gt;ChangeNotifierProxyProvider&lt;/code&gt; will send its value to a &lt;code&gt;ChangeNotifierProvider&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;Can I inspect the content of my objects?&lt;/h4&gt; &#xA;&lt;p&gt;Flutter comes with a &lt;a href=&#34;https://github.com/flutter/devtools&#34;&gt;devtool&lt;/a&gt; that shows what the widget tree is at a given moment.&lt;/p&gt; &#xA;&lt;p&gt;Since providers are widgets, they are also visible in that devtool:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/provider/master/resources/devtools_providers.jpg&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;From there, if you click on one provider, you will be able to see the value it exposes:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/provider/master/resources/expanded_devtools.jpg&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;(screenshot of the devtools using the &lt;code&gt;example&lt;/code&gt; folder)&lt;/p&gt; &#xA;&lt;h4&gt;The devtool only shows &#34;Instance of MyClass&#34;. What can I do?&lt;/h4&gt; &#xA;&lt;p&gt;By default, the devtool relies on &lt;code&gt;toString&lt;/code&gt;, which defaults to &#34;Instance of MyClass&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To have something more useful, you have two solutions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;use the &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/Diagnosticable-class.html&#34;&gt;Diagnosticable&lt;/a&gt; API from Flutter.&lt;/p&gt; &lt;p&gt;For most cases, I will use &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/DiagnosticableTreeMixin-mixin.html&#34;&gt;DiagnosticableTreeMixin&lt;/a&gt; on your objects, followed by a custom implementation of &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/DiagnosticableTreeMixin/debugFillProperties.html&#34;&gt;debugFillProperties&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyClass with DiagnosticableTreeMixin {&#xA;  MyClass({this.a, this.b});&#xA;&#xA;  final int a;&#xA;  final String b;&#xA;&#xA;  @override&#xA;  void debugFillProperties(DiagnosticPropertiesBuilder properties) {&#xA;    super.debugFillProperties(properties);&#xA;    // list all the properties of your class here.&#xA;    // See the documentation of debugFillProperties for more information.&#xA;    properties.add(IntProperty(&#39;a&#39;, a));&#xA;    properties.add(StringProperty(&#39;b&#39;, b));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Override &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you cannot use &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/DiagnosticableTreeMixin-mixin.html&#34;&gt;DiagnosticableTreeMixin&lt;/a&gt; (like if your class is in a package that does not depend on Flutter), then you can override &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This is easier than using &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/DiagnosticableTreeMixin-mixin.html&#34;&gt;DiagnosticableTreeMixin&lt;/a&gt; but is less powerful: You will not be able to expand/collapse the details of your object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyClass with DiagnosticableTreeMixin {&#xA;  MyClass({this.a, this.b});&#xA;&#xA;  final int a;&#xA;  final String b;&#xA;&#xA;  @override&#xA;  String toString() {&#xA;    return &#39;$runtimeType(a: $a, b: $b)&#39;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;I have an exception when obtaining Providers inside &lt;code&gt;initState&lt;/code&gt;. What can I do?&lt;/h4&gt; &#xA;&lt;p&gt;This exception happens because you&#39;re trying to listen to a provider from a life-cycle that will never ever be called again.&lt;/p&gt; &#xA;&lt;p&gt;It means that you either should use another life-cycle (&lt;code&gt;build&lt;/code&gt;), or explicitly specify that you do not care about updates.&lt;/p&gt; &#xA;&lt;p&gt;As such, instead of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initState() {&#xA;  super.initState();&#xA;  print(context.watch&amp;lt;Foo&amp;gt;().value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Value value;&#xA;&#xA;Widget build(BuildContext context) {&#xA;  final value = context.watch&amp;lt;Foo&amp;gt;.value;&#xA;  if (value != this.value) {&#xA;    this.value = value;&#xA;    print(value);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will print &lt;code&gt;value&lt;/code&gt; whenever it changes (and only when it changes).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initState() {&#xA;  super.initState();&#xA;  print(context.read&amp;lt;Foo&amp;gt;().value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will print &lt;code&gt;value&lt;/code&gt; once &lt;em&gt;and ignore updates.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;How to handle hot-reload on my objects?&lt;/h4&gt; &#xA;&lt;p&gt;You can make your provided object implement &lt;code&gt;ReassembleHandler&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example extends ChangeNotifier implements ReassembleHandler {&#xA;  @override&#xA;  void reassemble() {&#xA;    print(&#39;Did hot-reload&#39;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then used typically with &lt;code&gt;provider&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ChangeNotifierProvider(create: (_) =&amp;gt; Example()),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;I use &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt;, and I have an exception when I update it. What happens?&lt;/h4&gt; &#xA;&lt;p&gt;This likely happens because you are modifying the &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt; from one of its descendants &lt;em&gt;while the widget tree is building&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A typical situation where this happens is when starting an http request, where the future is stored inside the notifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initState() {&#xA;  super.initState();&#xA;  context.read&amp;lt;MyNotifier&amp;gt;().fetchSomething();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is not allowed because the state update is synchronous.&lt;/p&gt; &#xA;&lt;p&gt;This means that some widgets may build &lt;em&gt;before&lt;/em&gt; the mutation happens (getting an old value), while other widgets will build &lt;em&gt;after&lt;/em&gt; the mutation is complete (getting a new value). This could cause inconsistencies in your UI and is therefore not allowed.&lt;/p&gt; &#xA;&lt;p&gt;Instead, you should perform that mutation in a place that would affect the entire tree equally:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;directly inside the &lt;code&gt;create&lt;/code&gt; of your provider/constructor of your model:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyNotifier with ChangeNotifier {&#xA;  MyNotifier() {&#xA;    _fetchSomething();&#xA;  }&#xA;&#xA;  Future&amp;lt;void&amp;gt; _fetchSomething() async {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful when there&#39;s no &#34;external parameter&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;asynchronously at the end of the frame:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;initState() {&#xA;  super.initState();&#xA;  Future.microtask(() =&amp;gt;&#xA;    context.read&amp;lt;MyNotifier&amp;gt;().fetchSomething(someValue);&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is slightly less ideal, but allows passing parameters to the mutation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Do I have to use &lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html&#34;&gt;ChangeNotifier&lt;/a&gt; for complex states?&lt;/h4&gt; &#xA;&lt;p&gt;No.&lt;/p&gt; &#xA;&lt;p&gt;You can use any object to represent your state. For example, an alternate architecture is to use &lt;code&gt;Provider.value()&lt;/code&gt; combined with a &lt;code&gt;StatefulWidget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a counter example using such architecture:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example extends StatefulWidget {&#xA;  const Example({Key key, this.child}) : super(key: key);&#xA;&#xA;  final Widget child;&#xA;&#xA;  @override&#xA;  ExampleState createState() =&amp;gt; ExampleState();&#xA;}&#xA;&#xA;class ExampleState extends State&amp;lt;Example&amp;gt; {&#xA;  int _count;&#xA;&#xA;  void increment() {&#xA;    setState(() {&#xA;      _count++;&#xA;    });&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Provider.value(&#xA;      value: _count,&#xA;      child: Provider.value(&#xA;        value: this,&#xA;        child: widget.child,&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where we can read the state by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return Text(context.watch&amp;lt;int&amp;gt;().toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and modify the state with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return FloatingActionButton(&#xA;  onPressed: () =&amp;gt; context.read&amp;lt;ExampleState&amp;gt;().increment(),&#xA;  child: Icon(Icons.plus_one),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can create your own provider.&lt;/p&gt; &#xA;&lt;h4&gt;Can I make my Provider?&lt;/h4&gt; &#xA;&lt;p&gt;Yes. &lt;code&gt;provider&lt;/code&gt; exposes all the small components that make a fully-fledged provider.&lt;/p&gt; &#xA;&lt;p&gt;This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SingleChildStatelessWidget&lt;/code&gt;, to make any widget works with &lt;code&gt;MultiProvider&lt;/code&gt;. This interface is exposed as part of &lt;code&gt;package:provider/single_child_widget&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/InheritedProvider-class.html&#34;&gt;InheritedProvider&lt;/a&gt;, the generic &lt;code&gt;InheritedWidget&lt;/code&gt; obtained when doing &lt;code&gt;context.watch&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of a custom provider to use &lt;code&gt;ValueNotifier&lt;/code&gt; as the state: &lt;a href=&#34;https://gist.github.com/rrousselGit/4910f3125e41600df3c2577e26967c91&#34;&gt;https://gist.github.com/rrousselGit/4910f3125e41600df3c2577e26967c91&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;My widget rebuilds too often. What can I do?&lt;/h4&gt; &#xA;&lt;p&gt;Instead of &lt;code&gt;context.watch&lt;/code&gt;, you can use &lt;code&gt;context.select&lt;/code&gt; to listen only to the specific set of properties on the obtained object.&lt;/p&gt; &#xA;&lt;p&gt;For example, while you can write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  final person = context.watch&amp;lt;Person&amp;gt;();&#xA;  return Text(person.name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may cause the widget to rebuild if something other than &lt;code&gt;name&lt;/code&gt; changes.&lt;/p&gt; &#xA;&lt;p&gt;Instead, you can use &lt;code&gt;context.select&lt;/code&gt; to listen only to the &lt;code&gt;name&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  final name = context.select((Person p) =&amp;gt; p.name);&#xA;  return Text(name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, the widget won&#39;t unnecessarily rebuild if something other than &lt;code&gt;name&lt;/code&gt; changes.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, you can use &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Consumer-class.html&#34;&gt;Consumer&lt;/a&gt;/&lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/Selector-class.html&#34;&gt;Selector&lt;/a&gt;. Their optional &lt;code&gt;child&lt;/code&gt; argument allows rebuilding only a particular part of the widget tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Foo(&#xA;  child: Consumer&amp;lt;A&amp;gt;(&#xA;    builder: (_, a, child) {&#xA;      return Bar(a: a, child: child);&#xA;    },&#xA;    child: Baz(),&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, only &lt;code&gt;Bar&lt;/code&gt; will rebuild when &lt;code&gt;A&lt;/code&gt; updates. &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Baz&lt;/code&gt; won&#39;t unnecessarily rebuild.&lt;/p&gt; &#xA;&lt;h4&gt;Can I obtain two different providers using the same type?&lt;/h4&gt; &#xA;&lt;p&gt;No. While you can have multiple providers sharing the same type, a widget will be able to obtain only one of them: the closest ancestor.&lt;/p&gt; &#xA;&lt;p&gt;Instead, it would help if you explicitly gave both providers a different type.&lt;/p&gt; &#xA;&lt;p&gt;Instead of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Provider&amp;lt;String&amp;gt;(&#xA;  create: (_) =&amp;gt; &#39;England&#39;,&#xA;  child: Provider&amp;lt;String&amp;gt;(&#xA;    create: (_) =&amp;gt; &#39;London&#39;,&#xA;    child: ...,&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Provider&amp;lt;Country&amp;gt;(&#xA;  create: (_) =&amp;gt; Country(&#39;England&#39;),&#xA;  child: Provider&amp;lt;City&amp;gt;(&#xA;    create: (_) =&amp;gt; City(&#39;London&#39;),&#xA;    child: ...,&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Can I consume an interface and provide an implementation?&lt;/h4&gt; &#xA;&lt;p&gt;Yes, a type hint must be given to the compiler to indicate the interface will be consumed, with the implementation provided in create.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class ProviderInterface with ChangeNotifier {&#xA;  ...&#xA;}&#xA;&#xA;class ProviderImplementation with ChangeNotifier implements ProviderInterface {&#xA;  ...&#xA;}&#xA;&#xA;class Foo extends StatelessWidget {&#xA;  @override&#xA;  build(context) {&#xA;    final provider = Provider.of&amp;lt;ProviderInterface&amp;gt;(context);&#xA;    return ...&#xA;  }&#xA;}&#xA;&#xA;ChangeNotifierProvider&amp;lt;ProviderInterface&amp;gt;(&#xA;  create: (_) =&amp;gt; ProviderImplementation(),&#xA;  child: Foo(),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Existing providers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;provider&lt;/code&gt; exposes a few different kinds of &#34;provider&#34; for different types of objects.&lt;/p&gt; &#xA;&lt;p&gt;The complete list of all the objects available is &lt;a href=&#34;https://pub.dev/documentation/provider/latest/provider/provider-library.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/provider/latest/provider/Provider-class.html&#34;&gt;Provider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The most basic form of provider. It takes a value and exposes it, whatever the value is.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/provider/latest/provider/ListenableProvider-class.html&#34;&gt;ListenableProvider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A specific provider for Listenable object. ListenableProvider will listen to the object and ask widgets which depend on it to rebuild whenever the listener is called.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/provider/latest/provider/ChangeNotifierProvider-class.html&#34;&gt;ChangeNotifierProvider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A specification of ListenableProvider for ChangeNotifier. It will automatically call &lt;code&gt;ChangeNotifier.dispose&lt;/code&gt; when needed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/provider/latest/provider/ValueListenableProvider-class.html&#34;&gt;ValueListenableProvider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen to a ValueListenable and only expose &lt;code&gt;ValueListenable.value&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/provider/latest/provider/StreamProvider-class.html&#34;&gt;StreamProvider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen to a Stream and expose the latest value emitted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/provider/latest/provider/FutureProvider-class.html&#34;&gt;FutureProvider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Takes a &lt;code&gt;Future&lt;/code&gt; and updates dependents when the future completes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;My application throws a StackOverflowError because I have too many providers, what can I do?&lt;/h3&gt; &#xA;&lt;p&gt;If you have a very large number of providers (150+), it is possible that some devices will throw a &lt;code&gt;StackOverflowError&lt;/code&gt; because you end-up building too many widgets at once.&lt;/p&gt; &#xA;&lt;p&gt;In this situation, you have a few solutions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If your application has a splash-screen, try mounting your providers over time instead of all at once.&lt;/p&gt; &lt;p&gt;You could do:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MultiProvider(&#xA;  providers: [&#xA;    if (step1) ...[&#xA;      &amp;lt;lots of providers&amp;gt;,&#xA;    ],&#xA;    if (step2) ...[&#xA;      &amp;lt;some more providers&amp;gt;&#xA;    ]&#xA;  ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;where during your splash screen animation, you would do:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool step1 = false;&#xA;bool step2 = false;&#xA;@override&#xA;initState() {&#xA;  super.initState();&#xA;  Future(() {&#xA;    setState(() =&amp;gt; step1 = true);&#xA;    Future(() {&#xA;      setState(() =&amp;gt; step2 = true);&#xA;    });&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consider opting out of using &lt;code&gt;MultiProvider&lt;/code&gt;. &lt;code&gt;MultiProvider&lt;/code&gt; works by adding a widget between every providers. Not using &lt;code&gt;MultiProvider&lt;/code&gt; can increase the limit before a &lt;code&gt;StackOverflowError&lt;/code&gt; is reached.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fleaflet/flutter_map</title>
    <updated>2022-07-05T01:37:44Z</updated>
    <id>tag:github.com,2022-07-05:/fleaflet/flutter_map</id>
    <link href="https://github.com/fleaflet/flutter_map" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter map widget inspired by Leaflet&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_map&lt;/h1&gt; &#xA;&lt;p&gt;A versatile mapping package for Flutter, based off of &lt;a href=&#34;https://leafletjs.com/&#34;&gt;&#39;leaflet.js&#39;&lt;/a&gt;. Simple and easy to learn, yet completely customizable and configurable, it&#39;s the best choice for mapping in your Flutter app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_map&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_map.svg?label=Latest+Version&#34; alt=&#34;Pub.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fleaflet/flutter_map/actions?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://badgen.net/github/checks/fleaflet/flutter_map?label=Checks+%26+Tests&amp;amp;color=orange&#34; alt=&#34;Checks &amp;amp; Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/flutter_map/score&#34;&gt;&lt;img src=&#34;https://badges.bar/flutter_map/pub%20points&#34; alt=&#34;points&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/fleaflet/flutter_map/stargazers&#34;&gt;&lt;img src=&#34;https://badgen.net/github/stars/fleaflet/flutter_map?label=stars&amp;amp;color=green&amp;amp;icon=github&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/flutter_map/score&#34;&gt;&lt;img src=&#34;https://badges.bar/flutter_map/likes&#34; alt=&#34;likes&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://GitHub.com/fleaflet/flutter_map/issues&#34;&gt;&lt;img src=&#34;https://badgen.net/github/open-issues/fleaflet/flutter_map?label=Open+Issues&amp;amp;color=green&#34; alt=&#34;Open Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://GitHub.com/fleaflet/flutter_map/pulls&#34;&gt;&lt;img src=&#34;https://badgen.net/github/open-prs/fleaflet/flutter_map?label=Open+PRs&amp;amp;color=green&#34; alt=&#34;Open PRs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://discord.gg/egEGeByf4q&#34;&gt;Discord Server&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Join the Discord server: &lt;a href=&#34;https://discord.gg/egEGeByf4q&#34;&gt;https://discord.gg/egEGeByf4q&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Talk about &#39;flutter_map&#39;, get and give help, and receive notifications about new &#39;flutter_map&#39; updates! More additions planned in the future.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.fleaflet.dev/&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.fleaflet.dev/&#34;&gt;documentation website here&lt;/a&gt;, for all information about how to use this library, including setup and usage instructions.&lt;/p&gt; &#xA;&lt;p&gt;Some documentation is also provided within the code and can be view inside your favourite editor. These docs are also over at the &lt;a href=&#34;https://pub.dev/documentation/flutter_map/latest/flutter_map/flutter_map-library.html&#34;&gt;pub.dev package&lt;/a&gt;, and can be viewed from within your favourite editor.&lt;/p&gt;</summary>
  </entry>
</feed>