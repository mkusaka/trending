<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-27T01:34:11Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wolfenrain/stateless</title>
    <updated>2022-08-27T01:34:11Z</updated>
    <id>tag:github.com,2022-08-27:/wolfenrain/stateless</id>
    <link href="https://github.com/wolfenrain/stateless" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A stateless stateful state management package that is not stateless.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Stateless&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;A stateless stateful state management package that is not stateless.&lt;/h3&gt;&#xA;&lt;h3&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wolfenrain/stateless/actions&#34;&gt;&lt;img src=&#34;https://github.com/wolfenrain/stateless/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;stateless&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wolfenrain/stateless/actions&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wolfenrain/stateless/main/coverage_badge.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/very_good_analysis&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-very_good_analysis-B22C89.svg?sanitize=true&#34; alt=&#34;style: very good analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-purple.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/stateless&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/stateless.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: Please do not use this package in production, it uses Dart Magic under the hood that could break whenever Flutter wants it to break.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &lt;/h3&gt;&#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this package is to see if we can have state management without having to care about state management. The learning curve of Stateless should be at a minimal, knowledge developers have from known Flutter APIs should be transferable, like &lt;code&gt;initState&lt;/code&gt;, &lt;code&gt;dispose&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;In your flutter project, add the following in your &lt;code&gt;pubspec.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  dependencies:&#xA;    stateless: ^0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The classic Flutter Counter Widget, rewritten with Stateless:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:stateless/stateless.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(const MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  const MyApp({super.key});&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &#39;Stateless Demo&#39;,&#xA;      debugShowCheckedModeBanner: false,&#xA;      theme: ThemeData(primarySwatch: Colors.blue),&#xA;      home: MyHomePage(title: &#39;Stateless Demo Home Page&#39;),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;// We define the interface that will describe our state data.&#xA;abstract class MyCounterState {&#xA;  late int counter;&#xA;}&#xA;&#xA;// We extends from Stateless to create our stateless stateful widget.&#xA;class MyHomePage extends Stateless implements MyCounterState {&#xA;  MyHomePage({super.key, required this.title});&#xA;&#xA;  final String title;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    // Initialize our state data.&#xA;    counter = 0;&#xA;  }&#xA;&#xA;  void showSnackBar() {&#xA;    // We can access the BuildContext from anywhere in our widget.&#xA;    ScaffoldMessenger.of(context).showSnackBar(&#xA;      SnackBar(content: Text(&#39;The count is at: $counter&#39;)),&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(title)),&#xA;      body: const Center(child: MyCounterText()),&#xA;      floatingActionButton: Column(&#xA;        mainAxisAlignment: MainAxisAlignment.end,&#xA;        children: [&#xA;          FloatingActionButton(&#xA;            // Update the counter by just simply incrementing it.&#xA;            onPressed: () =&amp;gt; counter++,&#xA;            tooltip: &#39;Increment&#39;,&#xA;            child: const Icon(Icons.add),&#xA;          ),&#xA;          const SizedBox(height: 8),&#xA;          FloatingActionButton(&#xA;            onPressed: showSnackBar,&#xA;            tooltip: &#39;Show SnackBar&#39;,&#xA;            child: const Icon(Icons.lightbulb),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see the API is barely any different from normal Flutter widgets, by extending from &lt;code&gt;Stateless&lt;/code&gt; and implementing our state interface we can just update the interface properties and it will automatically know that it&#39;s state has changed and therefore triggers a rebuild.&lt;/p&gt; &#xA;&lt;h2&gt;Accessing state data in a child&lt;/h2&gt; &#xA;&lt;p&gt;Quite often you want to access state data from a parent in the tree, well Stateless is capable of doing that for you!&lt;/p&gt; &#xA;&lt;p&gt;Lets re-imagine the above counter app into two parts, one is the &lt;code&gt;Stateless&lt;/code&gt; widget and the second part is a normal &lt;code&gt;StatelessWidget&lt;/code&gt; that displays the counter value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyHomePage extends Stateless implements MyCounter {&#xA;  ... &#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(title: Text(title)),&#xA;      // We build our custom text counter widget here.&#xA;      body: const Center(child: MyCounterText()),&#xA;      floatingActionButton: Column(&#xA;        mainAxisAlignment: MainAxisAlignment.end,&#xA;        children: [&#xA;          FloatingActionButton(&#xA;            onPressed: () =&amp;gt; counter++,&#xA;            tooltip: &#39;Increment&#39;,&#xA;            child: const Icon(Icons.add),&#xA;          ),&#xA;          const SizedBox(height: 8),&#xA;          FloatingActionButton(&#xA;            onPressed: showSnackBar,&#xA;            tooltip: &#39;Show SnackBar&#39;,&#xA;            child: const Icon(Icons.lightbulb),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;class MyCounterText extends StatelessWidget {&#xA;  const MyCounterText({super.key});&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    // We can then observe our MyHomePage for state changes.&#xA;    final myHomePage = context.observe&amp;lt;MyHomePage&amp;gt;();&#xA;&#xA;    return Column(&#xA;      mainAxisAlignment: MainAxisAlignment.center,&#xA;      children: [&#xA;        const Text(&#39;You have pushed the button this many times:&#39;),&#xA;        Text(&#xA;          &#39;${myHomePage.counter}&#39;,&#xA;          style: Theme.of(context).textTheme.headline4,&#xA;        ),&#xA;      ],&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our &lt;code&gt;MyCounterText&lt;/code&gt; widget can simply observe the state of our &lt;code&gt;MyHomePage&lt;/code&gt; and read the current &lt;code&gt;counter&lt;/code&gt; value from it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Interested in contributing? We love pull request! See the &lt;a href=&#34;https://raw.githubusercontent.com/wolfenrain/stateless/main/CONTRIBUTING.md&#34;&gt;Contribution&lt;/a&gt; document for more information.&lt;/p&gt;</summary>
  </entry>
</feed>