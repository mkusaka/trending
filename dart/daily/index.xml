<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:36:54Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sangwan5688/BlackHole</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/Sangwan5688/BlackHole</id>
    <link href="https://github.com/Sangwan5688/BlackHole" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Music Player App made with Flutter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/87353286/144381080-faf8e557-7909-43a1-a8e2-208936e5a8f8.png&#34; alt=&#34;Repo Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BlackHole&lt;/h1&gt; &#xA;&lt;p&gt;An Open-Source Music Player App for all your needs!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with-Flutter-1f425f.svg?sanitize=true&#34; alt=&#34;made-with-flutter&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/Sangwan5688/BlackHole&#34; alt=&#34;Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/Sangwan5688/BlackHole/total&#34; alt=&#34;Downloads&#34;&gt; &lt;a href=&#34;https://github.com/Sangwan5688/BlackHole/actions/workflows/flutter.yml&#34;&gt;&lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/actions/workflows/flutter.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/engage/blackhole/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/blackhole/-/translations/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation-Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t forget to &lt;span&gt;‚≠ê&lt;/span&gt; the repo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com//Sangwan5688/BlackHole&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Sangwan5688/BlackHole.svg?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/forks/Sangwan5688/BlackHole.svg?style=social&amp;amp;label=Forks&#34; alt=&#34;GitHub forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/followers/Sangwan5688.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;GitHub followers&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://android.izzysoft.de/repo/apk/com.shadow.blackhole&#34;&gt;&lt;img src=&#34;https://gitlab.com/IzzyOnDroid/repo/-/raw/master/assets/IzzyOnDroid.png&#34; alt=&#34;Get it on IzzyDroid&#34; height=&#34;100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/packages/com.shadow.blackhole/&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/Sangwan5688/BlackHole/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GitHub-181717?logo=github&amp;amp;logoColor=white&#34; alt=&#34;Download from GitHub&#34; height=&#34;60&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://t.me/blackhole_official&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Join Telegram Channel&#34; height=&#34;60&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sangwan5688/BlackHole/main/README.ES.md&#34;&gt;Spanish &lt;span&gt;üá™üá∏&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sangwan5688/BlackHole/main/README.RU.md&#34;&gt;Russian &lt;span&gt;üá∑üá∫&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sangwan5688/BlackHole/main/README.FR.md&#34;&gt;French &lt;span&gt;üá´üá∑&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Sangwan5688/BlackHole/main/README.PT.md&#34;&gt;Portuguese &lt;span&gt;üáßüá∑&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hosted.weblate.org/projects/blackhole/translations/&#34;&gt;Translate App on Weblate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Best Streaming Quality (320kbps aac)&lt;/li&gt; &#xA; &lt;li&gt;Song, Album, Artist and Playlist Search&lt;/li&gt; &#xA; &lt;li&gt;Language Specific Promoted Playlists&lt;/li&gt; &#xA; &lt;li&gt;Trending Songs&lt;/li&gt; &#xA; &lt;li&gt;Artist and Genre Radios&lt;/li&gt; &#xA; &lt;li&gt;Support 15+ music languages&lt;/li&gt; &#xA; &lt;li&gt;Local and Global Top Spotify songs&lt;/li&gt; &#xA; &lt;li&gt;Add Songs to Favorite&lt;/li&gt; &#xA; &lt;li&gt;Playlists support&lt;/li&gt; &#xA; &lt;li&gt;Import Playlists from Spotify &amp;amp; YouTube&lt;/li&gt; &#xA; &lt;li&gt;Import/Export Playlists as JSON File&lt;/li&gt; &#xA; &lt;li&gt;Share Playlists&lt;/li&gt; &#xA; &lt;li&gt;Sleep timer&lt;/li&gt; &#xA; &lt;li&gt;Lyrics Support&lt;/li&gt; &#xA; &lt;li&gt;Queue Management&lt;/li&gt; &#xA; &lt;li&gt;Listening history record&lt;/li&gt; &#xA; &lt;li&gt;Dark mode / accent color&lt;/li&gt; &#xA; &lt;li&gt;Custom Gradients and other Theme options&lt;/li&gt; &#xA; &lt;li&gt;Supports Portrait as well as Landscape mode&lt;/li&gt; &#xA; &lt;li&gt;Download for offline play (320kbps with ID3 tags)&lt;/li&gt; &#xA; &lt;li&gt;Play Online as well as Offline Songs&lt;/li&gt; &#xA; &lt;li&gt;Tag Editing Support&lt;/li&gt; &#xA; &lt;li&gt;Trending Search Results&lt;/li&gt; &#xA; &lt;li&gt;YouTube Search Support&lt;/li&gt; &#xA; &lt;li&gt;Promoted Youtube Playlists&lt;/li&gt; &#xA; &lt;li&gt;Play videos as audio&lt;/li&gt; &#xA; &lt;li&gt;Auto Song Recommendations&lt;/li&gt; &#xA; &lt;li&gt;Inbuilt Equalizer&lt;/li&gt; &#xA; &lt;li&gt;Backup &amp;amp; Restore&lt;/li&gt; &#xA; &lt;li&gt;Auto Update Check&lt;/li&gt; &#xA; &lt;li&gt;Cache support&lt;/li&gt; &#xA; &lt;li&gt;No Subscription&lt;/li&gt; &#xA; &lt;li&gt;No Ads&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and much more... Check it yourself :)&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/fastlane/metadata/android/en-US/images/phoneScreenshots/1.png?raw=true&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/fastlane/metadata/android/en-US/images/phoneScreenshots/2.png?raw=true&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/fastlane/metadata/android/en-US/images/phoneScreenshots/3.png?raw=true&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/fastlane/metadata/android/en-US/images/phoneScreenshots/4.png?raw=true&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/fastlane/metadata/android/en-US/images/phoneScreenshots/5.png?raw=true&#34; width=&#34;32%&#34;&gt; &lt;img src=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/fastlane/metadata/android/en-US/images/phoneScreenshots/6.png?raw=true&#34; width=&#34;32%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright ¬© 2021 Ankit Sangwan&#xA;&#xA;BlackHole is a free software licensed under GPL v3.0&#xA;It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;&#xA;without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Being Open Source doesn&#39;t mean you can just make a copy of the app and upload it on playstore or sell&#xA;a closed source copy of the same.&#xA;Read the following carefully:&#xA;1. Any copy of a software under GPL must be under same license. So you can&#39;t upload the app on a closed source&#xA;  app repository like PlayStore/AppStore without distributing the source code.&#xA;2. You can&#39;t sell any copied/modified version of the app under any &#34;non-free&#34; license.&#xA;   You must provide the copy with the original software or with instructions on how to obtain original software,&#xA;   should clearly state all changes, should clearly disclose full source code, should include same license&#xA;   and all copyrights should be retained.&#xA;&#xA;In simple words, You can ONLY use the source code of this app for `Open Source` Project under `GPL v3.0` or later&#xA;with all your source code CLEARLY DISCLOSED on any code hosting platform like GitHub, with clear INSTRUCTIONS on&#xA;how to obtain the original software, should clearly STATE ALL CHANGES made and should RETAIN all copyrights.&#xA;Use of this software under any &#34;non-free&#34; license is NOT permitted.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/LICENSE&#34;&gt;GNU General Public License&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you don&#39;t have Flutter SDK installed, please visit official &lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt; site.&lt;/li&gt; &#xA; &lt;li&gt;Fetch latest source code from master branch.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Sangwan5688/BlackHole.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the app with Android Studio or VS Code. Or the command line:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub get&#xA;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. Please read our &lt;a href=&#34;https://github.com/Sangwan5688/BlackHole/raw/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; before contributing.&lt;/p&gt; &#xA;&lt;h2&gt;Facing any Issue?&lt;/h2&gt; &#xA;&lt;p&gt;Have a look at some &lt;a href=&#34;https://github.com/Sangwan5688/BlackHole/wiki/Common-Issues&#34;&gt;common Issues&lt;/a&gt; that you might face. If your problem is not there, feel free to open an Issue :)&lt;/p&gt; &#xA;&lt;h2&gt;Want to test Beta Versions? Need help??&lt;/h2&gt; &#xA;&lt;p&gt;You can join our &lt;a href=&#34;https://t.me/blackhole_official&#34;&gt;Telegram Channel&lt;/a&gt; or &lt;a href=&#34;https://t.me/joinchat/fHDC1AWnOhw0ZmI9&#34;&gt;Telegram Group&lt;/a&gt;, if you have any query, or need help with something as well as to get beta updates of the project.&lt;/p&gt; &#xA;&lt;h2&gt;Liked my work?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/ankitsangwan&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;p&gt;To read full changelog visit the &lt;a href=&#34;https://github.com/Sangwan5688/BlackHole/wiki/Changelog&#34;&gt;wiki page&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lohanidamodar/flutter_ui_challenges</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/lohanidamodar/flutter_ui_challenges</id>
    <link href="https://github.com/lohanidamodar/flutter_ui_challenges" rel="alternate"></link>
    <summary type="html">&lt;p&gt;100+ Professional UI implementations with Code in Flutter. Available in Android, iOS, Linux and Web&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter UI Challenges&lt;/h1&gt; &#xA;&lt;p&gt;My effort on replicating various apps UI on flutter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lohanidamodar.github.io/flutter_ui_challenges/#/&#34;&gt;View on Web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.popupbits.flutteruichallenges&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/play-store-logo.png&#34; width=&#34;450&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/np/app/flutter-ui-challenges/id1473537882&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/app-store-logo.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snapcraft.io/flutter-ui-challenges&#34;&gt;&lt;img src=&#34;https://snapcraft.io/static/images/badges/en/snap-store-black.svg?sanitize=true&#34; alt=&#34;Get it from the Snap Store&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and running the code [ &lt;strong&gt;Updated&lt;/strong&gt; ]&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thank you all for your tremendous support. With latest update, I have removed all firebase dependency, and project now runs on web and desktop as well. Please use flutter master channel to run and build. If you want previous version with firebase please checkout &lt;a href=&#34;https://github.com/lohanidamodar/flutter_ui_challenges/tree/with-firebase&#34;&gt;with-firebase&lt;/a&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Table of contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#animations&#34;&gt;Animation Examples UI&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#ecommerce&#34;&gt;Ecommerce UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#user-flow-screens&#34;&gt;Login/signup UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#settings-uis&#34;&gt;Settings UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#dashboard-uis&#34;&gt;Dashboard UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#quotes-app-uis&#34;&gt;Quotes App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#motorbike-app-uis&#34;&gt;Motorbike App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#profile-screens&#34;&gt;Profile UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#inviation-app-ui&#34;&gt;Invitation App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#lists-uis&#34;&gt;Lists UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#navigations&#34;&gt;Navigation UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#onboarding-screens&#34;&gt;Onboarding UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#miscellaneous-widgets&#34;&gt;Miscellaneous UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#blog&#34;&gt;Blog UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#food-app&#34;&gt;Food App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#quiz-app&#34;&gt;Quiz App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#todo-app&#34;&gt;Todo App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#hotel-app&#34;&gt;Hotel App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#travel-app&#34;&gt;Travel App UIs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#grocery-app-ui-kit&#34;&gt;Grocery App UI Kit&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#bank-app-clone&#34;&gt;Bank App Clone&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/#furniture-app-ui&#34;&gt;Furniture App UI&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lohanidamodar&#34;&gt;Damodar Lohani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Aparna Dulal] (&lt;a href=&#34;https://github.com/ambikadulal&#34;&gt;https://github.com/ambikadulal&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sudeepthapa&#34;&gt;Sudip Thapa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://uilearner.com&#34;&gt;Shyam Adhikari (UI/UX Designer)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mausamRayamajhi&#34;&gt;Mausam Rayamajhi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cimplesid&#34;&gt;Siddhartha Joshi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Packages Used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flutter Swiper (&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_swiper_null_safety&#34;&gt;https://pub.dartlang.org/packages/flutter_swiper_null_safety&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Flutter Custom Clippers (&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_custom_clippers&#34;&gt;https://pub.dartlang.org/packages/flutter_custom_clippers&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;The code for Springy Widget is taken and refactored from (&lt;a href=&#34;https://github.com/matthew-carroll/flutter_ui_challenge_springy_slider&#34;&gt;https://github.com/matthew-carroll/flutter_ui_challenge_springy_slider&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Animations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/anim5.gif&#34; height=&#34;480px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/animated_bottom_nav.gif&#34; height=&#34;480px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/anim3.gif&#34; height=&#34;480px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/animation2.gif&#34; height=&#34;480px&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/animation1.gif&#34; height=&#34;480px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ecommerce&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/cart3.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/cart2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/ecommerce4.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/checkout1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/ecommerce_details3.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/home_page1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/confirm_order1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/cart1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/ecommerce1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/ecommerce2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/ecommerce_detail1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/ecommerce_detail2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User Flow Screens&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/signup3.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login14.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login13.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login12.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login10.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login9.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login8.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/auth3-1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/auth3-2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login7.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/signup2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login6.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/auth2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login5.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/auth1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login4.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/login3.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/signup1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Settings UIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/settings1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/settings2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/settings3.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profilesetting.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/settings4.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dashboard UIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dash1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dash2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dash3.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quotes App UIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quotes1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quotes2.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Motorbike App UIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/bikeshop.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/bike1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/bike2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Profile Screens&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile12.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile11.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile10.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile9.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile8.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile7.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile4.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile3.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/p6.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile5.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/profile2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inviation App UI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/invitation1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/inauth.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/inland.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lists UIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/grid_view.jpg&#34; height=&#34;480px&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/schoolList.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;screenshots/place list.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Navigations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/menu2.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/menu1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/bottom.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/drawer2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dark_drawer_nav.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/hidden_menu1.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Onboarding Screens&lt;/h2&gt; &#xA;&lt;p&gt;(Smart walled onboarding is from &lt;a href=&#34;https://www.uplabs.com/posts/smart-wallet-onboarding&#34;&gt;https://www.uplabs.com/posts/smart-wallet-onboarding&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/intro6.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/intro4.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/onboard3.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/onboard2.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/onboarding1.gif&#34;&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/i5.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;miscellaneous widgets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/whatsapp.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/youtube.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/otp1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/gallery1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/musicplayer2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/image-popup.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dash3.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dash2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/chat2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dash1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/chatui.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/landing1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/form.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/sliders.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dialog2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/dialog1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/hidden_menu1.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/springy_slider.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/sliverappbar1.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/hero-animation.gif&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/btm2.png&#34;&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/music.png&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/crop1.png&#34; height=&#34;480px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Blog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/news1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/sports_news1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/blog-home1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/article2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/article1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Food App&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/food_checkout_1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/recipe-single.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/recipe-list.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/recipe_details1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/avocado.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/cake.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/fdhome.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quiz App&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quiz1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quiz2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quiz3.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quiz5.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/quiz6.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Todo App&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/todo_home3.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/todo_home2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/todo2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/todohome1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hotel App&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/room-details.png&#34;&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/hotelbooking.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/hotel-home.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Travel App&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/travelstory.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/travel_home1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/thome.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/tdetails.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/travel_nepal.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;grocery App UI Kit&lt;/h2&gt; &#xA;&lt;p&gt;(design credit: &lt;a href=&#34;https://www.uplabs.com/posts/grocery-app-kit&#34;&gt;https://www.uplabs.com/posts/grocery-app-kit&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Whats implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Working bottom navigator to show different pages&lt;/li&gt; &#xA; &lt;li&gt;Navigation push/pop to show details page&lt;/li&gt; &#xA; &lt;li&gt;Stateless &amp;amp; Stateful Widgets&lt;/li&gt; &#xA; &lt;li&gt;Custom widgets for list items, category items etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/grocery_home.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/grocery_details.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/grocery_cart.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/grocery_wishlist.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/grocery_options.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bank App Clone&lt;/h2&gt; &#xA;&lt;p&gt;Bank app clone by &lt;a href=&#34;https://github.com/mausamRayamajhi&#34;&gt;Mausam Rayamajhi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/nic1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/nic2.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/nic3.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Furniture App UI&lt;/h2&gt; &#xA;&lt;p&gt;Furniture App by &lt;a href=&#34;https://github.com/mausamRayamajhi&#34;&gt;Mausam Rayamajhi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/f1.png&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/f2.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Plant App UI&lt;/h2&gt; &#xA;&lt;p&gt;Plant UI Clone by &lt;a href=&#34;https://github.com/Ambikadulal&#34;&gt;Ambika Dulal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/plant-1.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/plant-2.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/plant-3.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/plant-4.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/plant-5.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/plant-6.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TravelUi Clone&lt;/h2&gt; &#xA;&lt;p&gt;Furniture App by &lt;a href=&#34;https://github.com/Ambikadulal&#34;&gt;Ambika Dulal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/travelui1.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/travelui2.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wallet App Clone&lt;/h2&gt; &#xA;&lt;p&gt;Furniture App by &lt;a href=&#34;https://github.com/Ambikadulal&#34;&gt;Ambika Dulal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/wallet-1.jpg&#34;&gt; &lt;img height=&#34;480px&#34; src=&#34;https://raw.githubusercontent.com/lohanidamodar/flutter_ui_challenges/master/screenshots/wallet-2.jpg&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutter/codelabs</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/flutter/codelabs</id>
    <link href="https://github.com/flutter/codelabs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter codelab examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter codelabs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutter/codelabs/actions?workflow=Flutter%20CI&#34;&gt;&lt;img src=&#34;https://github.com/flutter/codelabs/workflows/Flutter%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the code for a variety of &lt;a href=&#34;https://codelabs.developers.google.com/?product=flutter&#34;&gt;Flutter Codelabs&lt;/a&gt;. Here is a list of the codelabs represented here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/flutter-adaptive-app&#34;&gt;Adaptive Apps in Flutter&lt;/a&gt; is in &lt;code&gt;adaptive_app&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/google-maps-in-flutter&#34;&gt;Adding Google Maps to a Flutter app&lt;/a&gt; is in &lt;code&gt;google-maps-in-flutter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/flutter-in-app-purchases&#34;&gt;Adding in-app purchases to your Flutter app&lt;/a&gt; is in &lt;code&gt;in_app_purchases&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/flutter-webview&#34;&gt;Adding WebView to your Flutter app&lt;/a&gt; is in &lt;code&gt;webview_flutter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/google-photos-sharing&#34;&gt;Build a Photo Sharing app with Google Photos and Flutter &lt;/a&gt; is in &lt;code&gt;photos-sharing&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/flutter-cupertino&#34;&gt;Building a Cupertino app with Flutter&lt;/a&gt; is in &lt;code&gt;cupertino_store&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firebase.google.com/codelabs/firebase-get-to-know-flutter&#34;&gt;Get to know Firebase for Flutter&lt;/a&gt; is in &lt;code&gt;firebase-get-to-know-flutter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/flutter-app-testing&#34;&gt;How to test a Flutter app&lt;/a&gt; is in &lt;code&gt;testing_codelab&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/write-flutter-plugin&#34;&gt;How to write a Flutter plugin&lt;/a&gt; is in &lt;code&gt;plugin_codelab&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/web-url-launcher&#34;&gt;Using a plugin with a Flutter web app&lt;/a&gt; is in &lt;code&gt;star_counter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/flutter-github-client&#34;&gt;Write a Flutter desktop application&lt;/a&gt; is in &lt;code&gt;github-client&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt1&#34;&gt;Write your first Flutter app, part 1&lt;/a&gt; and &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2&#34;&gt;Write your first Flutter app, part 2&lt;/a&gt; are in &lt;code&gt;startup_namer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/learn/pathways/text-classification-flutter&#34;&gt;Get started with text classification in Flutter apps&lt;/a&gt; pathway is in &lt;code&gt;tfserving-flutter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/tfrecommenders-flutter&#34;&gt;Building a fullstack movie recommendation system&lt;/a&gt; is in &lt;code&gt;tfrs-flutter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codelabs.developers.google.com/tfagents-flutter#0&#34;&gt;Building a board game with TensorFlow Agents and Flutter&lt;/a&gt; is in &lt;code&gt;tfagents-flutter&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about setting up Flutter and running apps, see &lt;a href=&#34;https://flutter.dev/docs/get-started&#34;&gt;flutter.dev/get-started&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>samarthagarwal/FlutterScreens</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/samarthagarwal/FlutterScreens</id>
    <link href="https://github.com/samarthagarwal/FlutterScreens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of Screens and attractive UIs built with Flutter ready to be used in your applications. No external libraries are used. Just download, add to your project and use.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Screens&lt;/h1&gt; &#xA;&lt;p&gt;A collection of Login Screens, Buttons, Loaders and Widgets with attractive UIs, built with Flutter, ready to be used in your applications.&lt;/p&gt; &#xA;&lt;h6&gt;Last Update: Added SlideListView Widget&lt;/h6&gt; &#xA;&lt;h2&gt;Screenshots And Usage&lt;/h2&gt; &#xA;&lt;h2&gt;SlideListView&lt;/h2&gt; &#xA;&lt;p&gt;A widget that can be used to present two different views that can be toggled using a Floating Action Button. The views toggle with a nice cube-rotation animation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/slide_list_view.gif&#34; alt=&#34;Screenshots on iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Rating&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/rating.gif&#34; alt=&#34;Screenshots on iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Loaders&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/loaders.gif&#34; alt=&#34;Screenshots on iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ColorLoaders&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/color_loader.gif&#34; alt=&#34;Screenshot&#34;&gt; Color Loader 1&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/color_loader_2.gif&#34; alt=&#34;Screenshot&#34;&gt; Color Loader 2&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/color_loader_3.gif&#34; alt=&#34;Screenshot&#34;&gt; Color Loader 3&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/color_loader_4.gif&#34; alt=&#34;Screenshot&#34;&gt; Color Loader 4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/color_loader_5.gif&#34; alt=&#34;Screenshot&#34;&gt; Color Loader 5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;FlipLoaders&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Example #1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FlipLoader(&#xA;  loaderBackground: Colors.red,&#xA;  iconColor: Colors.white,&#xA;  icon: Icons.email,&#xA;  animationType: &#34;full_flip&#34;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Example #2&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FlipLoader(&#xA;  loaderBackground: Colors.blueAccent,&#xA;  iconColor: Colors.orangeAccent,&#xA;  icon: Icons.subway,&#xA;  animationType: &#34;half_flip&#34;,&#xA;  rotateIcon: true,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Example #3&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FlipLoader(&#xA;  loaderBackground: Colors.green,&#xA;  iconColor: Colors.white,&#xA;  icon: Icons.wifi,&#xA;  animationType: &#34;half_flip&#34;,&#xA;  shape: &#34;circle&#34;,&#xA;  rotateIcon: false,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h6&gt;I am working on more loaders. These loaders will also be updated. Thanks to &lt;a href=&#34;https://github.com/jakeleveroni&#34;&gt;jakeleveroni&lt;/a&gt; for parameterizing the FlipLoader.&lt;/h6&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Buttons&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/buttons1.png&#34; alt=&#34;Screenshots on iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Simple Round Button&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;SimpleRoundButton(&#xA;    backgroundColor: Colors.redAccent,&#xA;    buttonText: Text(&#34;LOGIN&#34;, &#xA;        style: TextStyle(&#xA;            color: Colors.white&#xA;        ),&#xA;    ),&#xA;    textColor: Colors.white,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Simple Round Icon Button&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;SimpleRoundIconButton(&#xA;    backgroundColor: Colors.orangeAccent,&#xA;    buttonText: Text(&#34;SEND EMAIL&#34;, &#xA;        style: TextStyle(&#xA;            color: Colors.white&#xA;        ),&#xA;    ),        &#xA;    textColor: Colors.white,&#xA;    icon: Icon(Icons.email),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Simple Round Icon Only Button&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;SimpleRoundOnlyIconButton(&#xA;  backgroundColor: Colors.blueAccent,&#xA;  icon: Icon(Icons.phone),&#xA;  iconAlignment: Alignment.center,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Login Screens&lt;/h2&gt; &#xA;&lt;h3&gt;Login Screen 1&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/login_screen_1.png&#34; alt=&#34;Screenshots on Android and iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Container(&#xA;&#x9;child: LoginScreen1(&#xA;&#x9;primaryColor: Color(0xFF4aa0d5),&#xA;&#x9;backgroundColor: Colors.white,&#xA;&#x9;backgroundImage: new AssetImage(&#34;assets/images/full-bloom.png&#34;),&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Login Screen 2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/login_screen_2.png&#34; alt=&#34;Screenshots on Android and iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Container(&#xA;&#x9;child: LoginScreen2(&#xA;       backgroundColor1: Color(0xFF444152),&#xA;       backgroundColor2: Color(0xFF6f6c7d),&#xA;       highlightColor: Color(0xfff65aa3),&#xA;       foregroundColor: Colors.white,&#xA;       logo: new AssetImage(&#34;assets/images/full-bloom.png&#34;),&#xA;       ),&#xA;   )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Login Screen 3&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/login_screen_3.gif&#34; alt=&#34;Screenshots on Android and iOS&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Container(&#xA;&#x9;child: LoginScreen3(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Login Screen 4&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/login_screen_4.jpeg&#34; alt=&#34;Screenshot on Android&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Container(&#xA;&#x9;child: LoginScreen4(&#xA;       primaryColor: Color(0xff18203d),&#xA;       secondaryColor: Color(0xff232c51),&#xA;       logoGreen: Color(0xff25bcbb),&#xA;       ),&#xA;   )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Login Screen 5&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/login_screen_5.jpeg&#34; alt=&#34;Screenshot on Android&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Container(&#xA;&#x9;child: LoginScreen5(&#xA;       avatarImage: &#34;path/to/image.png&#34;,&#xA;       onLoginClick: () {&#xA;         // when login button is pressed&#xA;       },&#xA;       googleSignIn: () {&#xA;         // when google signin button is pressed&#xA;       },&#xA;       navigatePage: () {&#xA;         // change to signup screen&#xA;       }&#xA;       ),&#xA;   )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Login Screen 6&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/samarthagarwal/FlutterScreens/master/screenshots/login_screen_6.jpeg&#34; alt=&#34;Screenshot on Android&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Usage&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;Container(&#xA;&#x9;child: LoginScreen6(&#xA;       onLoginClick: () {&#xA;         // when login button is pressed&#xA;       },&#xA;       navigatePage: () {&#xA;         // change to signup screen&#xA;       }&#xA;       ),&#xA;   )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribution and Donation&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to contribute. If you like the project and want to donate, &lt;a href=&#34;https://www.paypal.me/samarthagarwal&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gskinnerTeam/flutter-folio</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/gskinnerTeam/flutter-folio</id>
    <link href="https://github.com/gskinnerTeam/flutter-folio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A platform adaptive Flutter app for desktop, mobile and web.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://flutter.gskinner.com&#34;&gt;&lt;img src=&#34;https://flutter.gskinner.com/folio/assets/images/gskinnerxflutter.png?&#34; width=&#34;440px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://flutter.gskinner.com/folio/assets/images/git_promoimage.png?&#34; width=&#34;800px&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Flutter Folio&lt;/h1&gt; &#xA;&lt;p&gt;A demo app showcasing how Flutter can deliver a great multi-platform experience, targeting iOS, Android, MacOS, Windows, Linux, and web. Built by &lt;a href=&#34;https://gskinner.com&#34;&gt;gskinner&lt;/a&gt; in partnership with Google, Flutter Folio purposefully considers user expectations, input devices and idioms for each platform, ensuring it feels at home on every device.&lt;/p&gt; &#xA;&lt;p&gt;In addition to forking and reviewing the &lt;a href=&#34;https://raw.githubusercontent.com/gskinnerTeam/flutter-folio/master/LICENSE.md&#34;&gt;MIT licensed&lt;/a&gt; code available here, you can check out more information on the &lt;a href=&#34;https://flutter.gskinner.com&#34;&gt;Flutter Folio Showcase Website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;About gskinner&lt;/h3&gt; &#xA;&lt;p&gt;We exist to build innovative digital experiences for smart clients, and we love how easy Flutter makes that experience. Don&#39;t hesitate to &lt;a href=&#34;https://gskinner.com&#34;&gt;stop by our site&lt;/a&gt; to learn more about what we do. We&#39;d love to hear from you!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://flutter.gskinner.com/folio/assets/images/git_dashes.png?&#34; width=&#34;800px&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Demo Builds&lt;/h3&gt; &#xA;&lt;p&gt;To preview the app you can download from the app store on your device by visiting: &lt;a href=&#34;https://flutter.gskinner.com/folio/#g-download&#34;&gt;https://flutter.gskinner.com/folio/#g-download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re new to Flutter the first thing you&#39;ll need is to follow the &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;setup instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once Flutter is setup, you can use the latest &lt;code&gt;stable&lt;/code&gt; channel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter channel stable&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flutter upgrade&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you&#39;re on &lt;code&gt;dev&lt;/code&gt; and desktop is enabled, you&#39;re ready to run the app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d windows&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d macos&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d linux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d android&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter run -d web&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you re-start your IDE, you should also see a new launch option for your current desktop platform.&lt;/p&gt; &#xA;&lt;h3&gt;Client Keys&lt;/h3&gt; &#xA;&lt;p&gt;This repo includes a set of Keys for Cloudinary and Firebase that are on the free pricing plans. Depending on traffic, these may reach their limit. If that happens, you will need to provide your own keys in order to run the app locally, those can be found in &lt;code&gt;AppKeys.dart&lt;/code&gt;. These limits should refresh each month, so your mileage will vary here.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This application is released under the &lt;a href=&#34;https://raw.githubusercontent.com/gskinnerTeam/flutter-folio/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;. You can use the code for any purpose, including commercial projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GroovinChip/macos_ui</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/GroovinChip/macos_ui</id>
    <link href="https://github.com/GroovinChip/macos_ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter widgets and themes implementing the current macOS design language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;macos_ui&lt;/h1&gt; &#xA;&lt;p&gt;Flutter widgets and themes implementing the current macOS design language.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;strong&gt;interactive widget gallery&lt;/strong&gt; online at &lt;a href=&#34;https://groovinchip.github.io/macos_ui/#/&#34;&gt;https://groovinchip.github.io/macos_ui/#/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guides, codelabs, and other documentation can be found at &lt;a href=&#34;https://macosui.dev&#34;&gt;https://macosui.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/macos_ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/macos_ui.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/macos_ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/publisher/macos_ui.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/flutter_analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/flutter_analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/pana_analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/pana_analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;Pana Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/codecov.yaml&#34;&gt;&lt;img src=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/codecov.yaml/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/GroovinChip/macos_ui&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/GroovinChip/macos_ui/branch/dev/graph/badge.svg?token=1SZGEVVMCH&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/5mFQKBU.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Contributing &amp;amp; Resources&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macos_ui&#34;&gt;macos_ui&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Layout&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#layout&#34;&gt;Layout&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macoswindow&#34;&gt;MacosWindow&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macosscaffold&#34;&gt;MacosScaffold&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#modern-window-look&#34;&gt;Modern Window Look&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#toolbar&#34;&gt;ToolBar&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#MacosListTile&#34;&gt;MacosListTile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Icons&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#icons&#34;&gt;Icons&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#MacosIcon&#34;&gt;MacosIcon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Buttons&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#buttons&#34;&gt;Buttons&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macoscheckbox&#34;&gt;MacosCheckbox&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#helpbutton&#34;&gt;HelpButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#radiobutton&#34;&gt;RadioButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#pulldownbutton&#34;&gt;PulldownButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#popupbutton&#34;&gt;PopupButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#pushbutton&#34;&gt;PushButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macosswitch&#34;&gt;MacosSwitch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dialogs &amp;amp; Sheets&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#dialogs&#34;&gt;Dialogs &amp;amp; Sheets&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#MacosAlertDialog&#34;&gt;MacosAlertDialog&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#MacosSheet&#34;&gt;MacosSheet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Fields &amp;amp; Labels&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#fields&#34;&gt;Fields&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macostextfield&#34;&gt;MacosTextField&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macossearchfield&#34;&gt;MacosSearchField&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#labels&#34;&gt;Labels&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macostooltip&#34;&gt;MacosTooltip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Indicators&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#indicators&#34;&gt;Indicators&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#progress-indicators&#34;&gt;Progress Indicators&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#progresscircle&#34;&gt;ProgressCircle&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#progressbar&#34;&gt;ProgressBar&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#level-indicators&#34;&gt;Level Indicators&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#capacityindicator&#34;&gt;CapacityIndicator&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#ratingindicator&#34;&gt;RatingIndicator&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#relevanceindicator&#34;&gt;RelevanceIndicator&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Selectors&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#selectors&#34;&gt;Selectors&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macosdatepicker&#34;&gt;MacosDatePicker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#macostimepicker&#34;&gt;MacosTimePicker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;macos_ui&lt;/code&gt; welcomes contributions! Please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/resources/&#34;&gt;macOS Design Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos&#34;&gt;macOS Human Interface Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.figma.com/file/M6K5L3GK0WJh6pnsASyVeE/macOS-Big-Sur-UI-Kit?node-id=1%3A2&#34;&gt;macOS Big Sur Figma kit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Layout&lt;/h1&gt; &#xA;&lt;h2&gt;MacosWindow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MacosWindow&lt;/code&gt; is the basic frame for a macOS-style layout.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/olstQFC.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;img src=&#34;https://imgur.com/yFXsoSy.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;It supports a &lt;code&gt;Sidebar&lt;/code&gt; on the left, an optional &lt;code&gt;TitleBar&lt;/code&gt; at the top, and the rest of the window is typically filled out with a &lt;code&gt;MacosScaffold&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A scope for the &lt;code&gt;MacosWindow&lt;/code&gt; is provided by &lt;code&gt;MacosWindowScope&lt;/code&gt;. The sidebar can be toggled with &lt;code&gt;MacosWindowScope.of(context).toggleSidebar()&lt;/code&gt;. &lt;strong&gt;Please note&lt;/strong&gt; that you must wrap your &lt;code&gt;MacosScaffold&lt;/code&gt; in a &lt;code&gt;Builder&lt;/code&gt; widget in order for this to work properly.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/IBbp5rN.gif&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;MacosScaffold&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MacosScaffold&lt;/code&gt; is what you might call a &#34;page&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The scaffold has a &lt;code&gt;toolbar&lt;/code&gt; property and a &lt;code&gt;children&lt;/code&gt; property. &lt;code&gt;children&lt;/code&gt; accepts a &lt;code&gt;ContentArea&lt;/code&gt; widget and multiple &lt;code&gt;ResizablePane&lt;/code&gt; widgets. To catch navigation or routes below the scaffold, consider wrapping the &lt;code&gt;MacosScaffold&lt;/code&gt; in a &lt;a href=&#34;https://api.flutter.dev/flutter/cupertino/CupertinoTabView-class.html&#34;&gt;&lt;code&gt;CupertinoTabView&lt;/code&gt;&lt;/a&gt;. By doing so, navigation inside the &lt;code&gt;MacosScaffold&lt;/code&gt; will be displayed inside the &lt;code&gt;MacosScaffold&lt;/code&gt; area instead of covering the entire window. To push a route outside a &lt;code&gt;MacosScaffold&lt;/code&gt; wrapped in a &lt;a href=&#34;https://api.flutter.dev/flutter/cupertino/CupertinoTabView-class.html&#34;&gt;&lt;code&gt;CupertinoTabView&lt;/code&gt;&lt;/a&gt;, use the root navigator &lt;code&gt;Navigator.of(context, rootNavigator: true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for customizations and &lt;code&gt;ToolBar&lt;/code&gt; examples.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/KT1fdjI.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;img src=&#34;https://imgur.com/4mknLAy.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;img src=&#34;https://imgur.com/mXR2wwu.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;Modern window look&lt;/h2&gt; &#xA;&lt;p&gt;A new look for macOS apps was introduced in Big Sur (macOS 11). To match that look in your Flutter app, like our screenshots, your &lt;code&gt;macos/Runner/MainFlutterWindow.swift&lt;/code&gt; file should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Cocoa&#xA;import FlutterMacOS&#xA;&#xA;class BlurryContainerViewController: NSViewController {&#xA;  let flutterViewController = FlutterViewController()&#xA;&#xA;  init() {&#xA;    super.init(nibName: nil, bundle: nil)&#xA;  }&#xA;&#xA;  required init?(coder: NSCoder) {&#xA;    fatalError()&#xA;  }&#xA;&#xA;  override func loadView() {&#xA;    let blurView = NSVisualEffectView()&#xA;    blurView.autoresizingMask = [.width, .height]&#xA;    blurView.blendingMode = .behindWindow&#xA;    blurView.state = .active&#xA;    if #available(macOS 10.14, *) {&#xA;        blurView.material = .sidebar&#xA;    }&#xA;    self.view = blurView&#xA;  }&#xA;&#xA;  override func viewDidLoad() {&#xA;    super.viewDidLoad()&#xA;&#xA;    self.addChild(flutterViewController)&#xA;&#xA;    flutterViewController.view.frame = self.view.bounds&#xA;    flutterViewController.view.autoresizingMask = [.width, .height]&#xA;    self.view.addSubview(flutterViewController.view)&#xA;  }&#xA;}&#xA;&#xA;class MainFlutterWindow: NSWindow, NSWindowDelegate {&#xA;  override func awakeFromNib() {&#xA;    delegate = self&#xA;    let blurryContainerViewController = BlurryContainerViewController()&#xA;    let windowFrame = self.frame&#xA;    self.contentViewController = blurryContainerViewController&#xA;    self.setFrame(windowFrame, display: true)&#xA;&#xA;    if #available(macOS 10.13, *) {&#xA;      let customToolbar = NSToolbar()&#xA;      customToolbar.showsBaselineSeparator = false&#xA;      self.toolbar = customToolbar&#xA;    }&#xA;    self.titleVisibility = .hidden&#xA;    self.titlebarAppearsTransparent = true&#xA;    if #available(macOS 11.0, *) {&#xA;      // Use .expanded if the app will have a title bar, else use .unified&#xA;      self.toolbarStyle = .unified&#xA;    }&#xA;&#xA;    self.isMovableByWindowBackground = true&#xA;    self.styleMask.insert(NSWindow.StyleMask.fullSizeContentView)&#xA;&#xA;    self.isOpaque = false&#xA;    self.backgroundColor = .clear&#xA;&#xA;    RegisterGeneratedPlugins(registry: blurryContainerViewController.flutterViewController)&#xA;&#xA;    super.awakeFromNib()&#xA;  }&#xA;&#xA;  func window(_ window: NSWindow, willUseFullScreenPresentationOptions proposedOptions: NSApplication.PresentationOptions = []) -&amp;gt; NSApplication.PresentationOptions {&#xA;    return [.autoHideToolbar, .autoHideMenuBar, .fullScreen]&#xA;  }&#xA;&#xA;  func windowWillEnterFullScreen(_ notification: Notification) {&#xA;      self.toolbar?.isVisible = false&#xA;  }&#xA;  &#xA;  func windowDidExitFullScreen(_ notification: Notification) {&#xA;      self.toolbar?.isVisible = true&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/flutter/flutter/issues/59969#issuecomment-916682559&#34;&gt;this issue comment&lt;/a&gt; for more details on the new look and explanations for how it works.&lt;/p&gt; &#xA;&lt;p&gt;Please note that if you are using a title bar (&lt;code&gt;TitleBar&lt;/code&gt;) in your &lt;code&gt;MacosWindow&lt;/code&gt;, you should set the &lt;code&gt;toolbarStyle&lt;/code&gt; of NSWindow to &lt;code&gt;.expanded&lt;/code&gt;, in order to properly align the close, minimize, zoom window buttons. In any other case, you should keep it as &lt;code&gt;.unified&lt;/code&gt;. This must be set beforehand, i.e. it cannot be switched in runtime.&lt;/p&gt; &#xA;&lt;h2&gt;ToolBar&lt;/h2&gt; &#xA;&lt;p&gt;Creates a toolbar in the &lt;code&gt;MacosScaffold&lt;/code&gt;. The toolbar appears below the title bar (if present) of the macOS app or integrates with it, by using its &lt;code&gt;title&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;A toolbar provides convenient access to frequently used commands and features (toolbar items). Different routes of your app could have different toolbars.&lt;/p&gt; &#xA;&lt;p&gt;Toolbar items include &lt;code&gt;ToolBarIconButton&lt;/code&gt;, &lt;code&gt;ToolBarPulldownButton&lt;/code&gt;, and &lt;code&gt;ToolBarSpacer&lt;/code&gt; widgets, and should be provided via the &lt;code&gt;items&lt;/code&gt; property. The action of every toolbar item should also be provided as a menu bar command of your app.&lt;/p&gt; &#xA;&lt;p&gt;Toolbars look best and are easiest to understand when they contain elements of the same type (so either use labels for every toolbar item or not).&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;ToolBarSpacer&lt;/code&gt; widgets to set the grouping of the different toolbar actions.&lt;/p&gt; &#xA;&lt;p&gt;An example toolbar would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ToolBar(&#xA;  title: const Text(&#39;Untitled Document&#39;),&#xA;  titleWidth: 200.0,&#xA;  leading: MacosBackButton(&#xA;    onPressed: () =&amp;gt; debugPrint(&#39;click&#39;),&#xA;    fillColor: Colors.transparent,&#xA;  ),&#xA;  actions: [&#xA;    ToolBarIconButton(&#xA;      label: &#34;Add&#34;,&#xA;      icon: const MacosIcon(&#xA;        CupertinoIcons.add_circled,&#xA;      ),&#xA;      onPressed: () =&amp;gt; debugPrint(&#34;Add...&#34;),&#xA;      showLabel: true,&#xA;    ),&#xA;    const ToolBarSpacer(),&#xA;    ToolBarIconButton(&#xA;      label: &#34;Delete&#34;,&#xA;      icon: const MacosIcon(&#xA;        CupertinoIcons.trash,&#xA;      ),&#xA;      onPressed: () =&amp;gt; debugPrint(&#34;Delete&#34;),&#xA;      showLabel: false,&#xA;    ),&#xA;    ToolBarPullDownButton(&#xA;      label: &#34;Actions&#34;,&#xA;      icon: CupertinoIcons.ellipsis_circle,&#xA;      items: [&#xA;        MacosPulldownMenuItem(&#xA;          label: &#34;New Folder&#34;,&#xA;          title: const Text(&#34;New Folder&#34;),&#xA;          onTap: () =&amp;gt; debugPrint(&#34;Creating new folder...&#34;),&#xA;        ),&#xA;        MacosPulldownMenuItem(&#xA;          label: &#34;Open&#34;,&#xA;          title: const Text(&#34;Open&#34;),&#xA;          onTap: () =&amp;gt; debugPrint(&#34;Opening...&#34;),&#xA;        ),&#xA;      ],&#xA;    ),&#xA;  ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds this simple toolbar: &lt;img src=&#34;https://imgur.com/BDUdQkj.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other toolbar examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with icon buttons (no labels):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/PtrjhPx.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with icon buttons and labels:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/Ouaud12.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with a pulldown button open:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/QCxoGmM.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with title bar above (also see &lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#modern-window-look&#34;&gt;the note above&lt;/a&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/eAgcsKY.png&#34;&gt; &#xA;&lt;p&gt;You can also create your own &lt;code&gt;CustomToolbarItem&lt;/code&gt; to include any type of widget in the toolbar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Add a grey vertical line as a custom toolbar item:&#xA;CustomToolbarItem(&#xA;  inToolbarBuilder: (context) =&amp;gt; Padding(&#xA;    padding: const EdgeInsets.all(8.0),&#xA;    child: Container(color: Colors.grey, width: 1, height: 30),&#xA;  ),&#xA;  inOverflowedBuilder: (context) =&amp;gt;&#xA;      Container(color: Colors.grey, width: 30, height: 1),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosListTile&lt;/h2&gt; &#xA;&lt;p&gt;A widget that aims to approximate the [ListTile] widget found in Flutter&#39;s material library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/pQB99M2.png&#34; alt=&#34;MacosListTile&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosListTile(&#xA;  leading: const Icon(CupertinoIcons.lightbulb),&#xA;  title: Text(&#xA;    &#39;A robust library of Flutter components for macOS&#39;,&#xA;    style: MacosTheme.of(context).typography.headline,&#xA;  ),&#xA;  subtitle: Text(&#xA;    &#39;Create native looking macOS applications using Flutter&#39;,&#xA;    style: MacosTheme.of(context).typography.subheadline.copyWith(&#xA;      color: MacosColors.systemGrayColor,&#xA;    ),&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Icons&lt;/h1&gt; &#xA;&lt;h2&gt;MacosIcon&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;MacosIcon&lt;/code&gt; is identical to a regular &lt;code&gt;Icon&lt;/code&gt; in every way with one exception - it respects a &lt;code&gt;MacosTheme&lt;/code&gt;. Use it the same way you would a regular icon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosIcon(&#xA;  CupertinoIcons.add,&#xA;  // color: CupertinoColors.activeBlue.color,&#xA;  // size: 20,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Buttons&lt;/h1&gt; &#xA;&lt;h2&gt;MacosCheckbox&lt;/h2&gt; &#xA;&lt;p&gt;A checkbox is a type of button that lets the user choose between two opposite states, actions, or values. A selected checkbox is considered on when it contains a checkmark and off when it&#39;s empty. A checkbox is almost always followed by a title unless it appears in a checklist. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/checkboxes/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Off&lt;/th&gt; &#xA;   &lt;th&gt;On&lt;/th&gt; &#xA;   &lt;th&gt;Mixed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/CheckBoxes_Deselected.svg?sanitize=true&#34; alt=&#34;Off Checkbox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/CheckBoxes_Selected.svg?sanitize=true&#34; alt=&#34;On Checkbox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/CheckBoxes_Mixed.svg?sanitize=true&#34; alt=&#34;Mixed Checkbox&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic checkbox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool selected = false;&#xA;&#xA;MacosCheckbox(&#xA;  value: selected,&#xA;  onChanged: (value) {&#xA;    setState(() =&amp;gt; selected = value);&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make a checkbox in the &lt;code&gt;mixed&lt;/code&gt; state, set &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HelpButton&lt;/h2&gt; &#xA;&lt;p&gt;A help button appears within a view and opens app-specific help documentation when clicked. All help buttons are circular, consistently sized buttons that contain a question mark icon. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/help-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/buttonsHelp.png&#34; alt=&#34;HelpButton Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a help button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;HelpButton(&#xA;  onPressed: () {&#xA;    print(&#39;pressed help button&#39;),&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the help button appearance and behaviour using the &lt;code&gt;HelpButtonTheme&lt;/code&gt;, but it&#39;s not recommended by apple to change help button&#39;s appearance.&lt;/p&gt; &#xA;&lt;h2&gt;RadioButton&lt;/h2&gt; &#xA;&lt;p&gt;A radio button is a small, circular button followed by a title. Typically presented in groups of two to five, radio buttons provide the user a set of related but mutually exclusive choices. A radio button‚Äôs state is either on (a filled circle) or off (an empty circle). &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/radio-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/radioButtons.png&#34; alt=&#34;RadioButton Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic radio button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool selected = false;&#xA;&#xA;MacosRadioButton(&#xA;  value: selected,&#xA;  onChanged: (value) {&#xA;    setState(() =&amp;gt; selected = value);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PulldownButton&lt;/h2&gt; &#xA;&lt;p&gt;A pull-down button (often referred to as a pull-down menu) is a type of pop-up button that, when clicked, displays a menu containing a list of choices. The menu appears below the button. Once the menu is displayed onscreen, it remains open until the user chooses a menu item, clicks outside of the menu, switches to another app, or quits the app; or until the system displays an alert. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/pull-down-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use a pull-down button to present a list of commands. A pull-down button can either show a &lt;code&gt;title&lt;/code&gt; or an &lt;code&gt;icon&lt;/code&gt; to describe the contents of the button&#39;s menu. If you use an icon, make sure it clearly communicates the button‚Äôs purpose.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;items&lt;/code&gt; is null, the button will be disabled (greyed out).&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;title&lt;/code&gt; or an &lt;code&gt;icon&lt;/code&gt; must be provided, to be displayed as the pull-down button&#39;s title, but not both at the same time.&lt;/p&gt; &#xA;&lt;p&gt;The menu can also be navigated with the up/down keys and an action selected with the Return key.&lt;/p&gt; &#xA;&lt;p&gt;It can also appear in the toolbar, via the &lt;code&gt;ToolBarPulldownButton&lt;/code&gt; widget.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/XZlsUxF.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/EtrydYd.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/KVX8OsR.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/mTvBxyL.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/k1Wm6fd.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/wb08RXI.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic pull-down button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosPulldownButton(&#xA;  title: &#34;Actions&#34;,&#xA;  // Or provide an icon to use as title:&#xA;  // icon: CupertinoIcons.ellipsis_circle, &#xA;  items: [&#xA;    MacosPulldownMenuItem(&#xA;      title: const Text(&#39;Save&#39;),&#xA;      onTap: () =&amp;gt; debugPrint(&#34;Saving...&#34;),&#xA;    ),&#xA;    MacosPulldownMenuItem(&#xA;      title: const Text(&#39;Save as...&#39;),&#xA;      onTap: () =&amp;gt; debugPrint(&#34;Opening Save As dialog...&#34;),&#xA;    ),&#xA;    const MacosPulldownMenuDivider(),&#xA;    MacosPulldownMenuItem(&#xA;      enabled: false,&#xA;      title: const Text(&#39;Export&#39;),&#xA;      onTap: () =&amp;gt; debugPrint(&#34;Exporting&#34;),&#xA;    ),&#xA;  ],&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PopupButton&lt;/h2&gt; &#xA;&lt;p&gt;A pop-up button (often referred to as a pop-up menu) is a type of button that, when clicked, displays a menu containing a list of mutually exclusive choices. The menu appears on top of the button. Like other types of menus, a pop-up button‚Äôs menu can include separators and symbols like checkmarks. After the menu is revealed, it remains open until the user chooses a menu item, clicks outside of the menu, switches to another app, or quits the app; or until the system displays an alert. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/pop-up-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The type &lt;code&gt;T&lt;/code&gt; of the &lt;code&gt;MacosPopupButton&lt;/code&gt; is the type of the value that each pop-up menu item represents. All the entries in a given menu must represent values with consistent types. Typically, an &lt;code&gt;enum&lt;/code&gt; is used. Each &lt;code&gt;MacosPopupMenuItem&lt;/code&gt; in items must be specialized with that same type argument.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;onChanged&lt;/code&gt; callback should update a state variable that defines the pop-up menu&#39;s value. It should also call &lt;code&gt;State.setState&lt;/code&gt; to rebuild the pop-up button with the new value.&lt;/p&gt; &#xA;&lt;p&gt;When there are menu items that cannot be displayed within the available menu constraints, a caret is shown at the top or bottom of the open menu to signal that there are items that are not currently visible.&lt;/p&gt; &#xA;&lt;p&gt;The menu can also be navigated with the up/down keys and an item selected with the Return key.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/ov0kzJC.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/buhYEo1.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/BOEH59L.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/61S7DSX.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/zY0d8RF.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/W4CMa5z.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic pop-up button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String popupValue = &#39;One&#39;;&#xA;&#xA;MacosPopupButton&amp;lt;String&amp;gt;(&#xA;  value: popupValue,&#xA;  onChanged: (String? newValue) {&#xA;    setState(() {&#xA;      popupValue = newValue!;&#xA;    });&#xA;  },&#xA;  items: &amp;lt;String&amp;gt;[&#39;One&#39;, &#39;Two&#39;, &#39;Three&#39;, &#39;Four&#39;]&#xA;      .map&amp;lt;MacosPopupMenuItem&amp;lt;String&amp;gt;&amp;gt;((String value) {&#xA;    return MacosPopupMenuItem&amp;lt;String&amp;gt;(&#xA;      value: value,&#xA;      child: Text(value),&#xA;    );&#xA;  }).toList(),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PushButton&lt;/h2&gt; &#xA;&lt;p&gt;A push button appears within a view and initiates an instantaneous app-specific action, such as printing a document or deleting a file. Push buttons contain text‚Äînot icons‚Äîand often open a separate window, dialog, or app so the user can complete a task. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/push-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/GsShoF6.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/klWHTAX.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/v99ekWA.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/hj6uGhI.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/wt0K6u4.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/7khWnwt.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/TgfjJdQ.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/83cEMeP.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic push button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PushButton(&#xA;  child: Text(&#39;button&#39;),&#xA;  buttonSize: ButtonSize.large,&#xA;  onPressed: () {&#xA;    print(&#39;button pressed&#39;);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosSwitch&lt;/h2&gt; &#xA;&lt;p&gt;A switch is a visual toggle between two mutually exclusive states ‚Äî on and off. A switch shows that it&#39;s on when the accent color is visible and off when the switch appears colorless. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/switches/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;On&lt;/th&gt; &#xA;   &lt;th&gt;Off&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/qK1VCVr.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/IBh5jkz.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic toggle switch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool selected = false;&#xA;&#xA;MacosSwitch(&#xA;  value: selected,&#xA;  onChanged: (value) {&#xA;    setState(() =&amp;gt; selected = value);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Dialogs and Sheets&lt;/h1&gt; &#xA;&lt;h2&gt;MacosAlertDialog&lt;/h2&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;showMacosAlertDialog(&#xA;  context: context,&#xA;  builder: (_) =&amp;gt; MacosAlertDialog(&#xA;    appIcon: FlutterLogo(&#xA;      size: 56,&#xA;    ),&#xA;    title: Text(&#xA;      &#39;Alert Dialog with Primary Action&#39;,&#xA;      style: MacosTheme.of(context).typography.headline,&#xA;    ),&#xA;    message: Text(&#xA;      &#39;This is an alert dialog with a primary action and no secondary action&#39;,&#xA;      textAlign: TextAlign.center,&#xA;      style: MacosTheme.of(context).typography.headline,&#xA;    ),&#xA;    primaryButton: PushButton(&#xA;      buttonSize: ButtonSize.large,&#xA;      child: Text(&#39;Primary&#39;),&#xA;      onPressed: () {},&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/G3dcjew.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://imgur.com/YHtgv59.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://imgur.com/xuBR5qK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MacosSheet&lt;/h2&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;showMacosSheet(&#xA;  context: context,&#xA;  builder: (_) =&amp;gt; const MacosuiSheet(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/NV0o5Ws.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Fields&lt;/h1&gt; &#xA;&lt;h2&gt;MacosTextField&lt;/h2&gt; &#xA;&lt;p&gt;A text field is a rectangular area in which the user enters or edits one or more lines of text. A text field can contain plain or styled text.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/UzyMlcL.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic text field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosTextField(&#xA;  placeholder: &#39;Type some text here&#39;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosSearchField&lt;/h2&gt; &#xA;&lt;p&gt;A search field is a style of text field optimized for performing text-based searches in a large collection of values.&lt;/p&gt; &#xA;&lt;p&gt;When the user starts typing into the search field, a list of selectable results appears in an overlay below (or above) the field.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/qbabwAW.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/Jol85ny.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/xP3l3Lv.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a search field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosSearchField(&#xA;  placeholder: &#39;Search for a country...&#39;,&#xA;  results: countries.map((e) =&amp;gt; SearchResultItem(e)).toList(),&#xA;  onResultSelected: (resultItem) {&#xA;    debugPrint(resultItem.searchKey);&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;examples/fields_page&lt;/code&gt; for more examples.&lt;/p&gt; &#xA;&lt;h1&gt;Labels&lt;/h1&gt; &#xA;&lt;p&gt;Labels are a short description of what an element on the screen does.&lt;/p&gt; &#xA;&lt;h2&gt;MacosTooltip&lt;/h2&gt; &#xA;&lt;p&gt;Tooltips succinctly describe how to use controls without shifting people‚Äôs focus away from the primary interface. Help tags appear when the user positions the pointer over a control for a few seconds. A tooltip remains visible for 10 seconds, or until the pointer moves away from the control.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/0qLFqdK.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/Y3PLqBo.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To create a tooltip, wrap any widget on a &lt;code&gt;MacosTooltip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosTooltip(&#xA;  message: &#39;This is a tooltip&#39;,&#xA;  child: Text(&#39;Hover or long press to show a tooltip&#39;),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the tooltip the way you want by customizing the theme&#39;s &lt;code&gt;TooltipTheme&lt;/code&gt;. A tooltip automatically adapts to its environment, responding to touch and pointer events. To use a tooltip with a toolbar item, provide it with a &lt;code&gt;tooltipMessage&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h1&gt;Indicators&lt;/h1&gt; &#xA;&lt;h2&gt;Progress Indicators&lt;/h2&gt; &#xA;&lt;p&gt;Don‚Äôt make people sit around staring at a static screen waiting for your app to load content or perform lengthy data processing operations. Use progress indicators to let people know your app hasn&#39;t stalled and to give them some idea of how long they‚Äôll be waiting.&lt;/p&gt; &#xA;&lt;p&gt;Progress indicators have two distinct styles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bar indicators&lt;/strong&gt;, more commonly known as progress bars, show progress in a horizontal bar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Spinning indicators&lt;/strong&gt; show progress in a circular form, either as a spinner or as a circle that fills in as progress continues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;People don&#39;t interact with progress indicators; however, they are often accompanied by a button for canceling the corresponding operation. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/progress-indicators/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/ProgressIndicators_Lead.png&#34; alt=&#34;Progress Indicator Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ProgressCircle&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;ProgressCircle&lt;/code&gt; can be either determinate or indeterminate.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Determinate Progress Circle&lt;/th&gt; &#xA;   &lt;th&gt;Indeterminate Progress Circle&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/hr3dHn9.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/NSbKqLK.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an indeterminate progress circle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ProgressCircle(&#xA;  value: null,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide a non-null value to &lt;code&gt;value&lt;/code&gt; to make the progress circle determinate.&lt;/p&gt; &#xA;&lt;h3&gt;ProgressBar&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;ProgressBar&lt;/code&gt; can only be determinate.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/tdYgJmB.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a determinate progress bar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ProgressBar(&#xA;  value: 30,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Level Indicators&lt;/h2&gt; &#xA;&lt;p&gt;A level indicator graphically represents of a specific value within a range of numeric values. It‚Äôs similar to a &lt;a href=&#34;https://raw.githubusercontent.com/GroovinChip/macos_ui/dev/#slider&#34;&gt;slider&lt;/a&gt; in purpose, but more visual and doesn‚Äôt contain a distinct control for selecting a value‚Äîclicking and dragging across the level indicator itself to select a value is supported, however. A level indicator can also include tick marks, making it easy for the user to pinpoint a specific value in the range. There are three different level indicator styles, each with a different appearance, for communicating capacity, rating, and relevance.&lt;/p&gt; &#xA;&lt;h3&gt;CapacityIndicator&lt;/h3&gt; &#xA;&lt;p&gt;A capacity indicator illustrates the current level in relation to a finite capacity. Capacity indicators are often used when communicating factors like disk and battery usage. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#capacity-indicators&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Continuous&lt;/th&gt; &#xA;   &lt;th&gt;Discrete&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicators-continous.png&#34; alt=&#34;Continuous CapacityIndicator Example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicators-discrete.png&#34; alt=&#34;Discrete CapacityIndicator Example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A horizontal translucent track that fills with a colored bar to indicate the current value. Tick marks are often displayed to provide context.&lt;/td&gt; &#xA;   &lt;td&gt;A horizontal row of separate, equally sized, rectangular segments. The number of segments matches the total capacity, and the segments fill completely‚Äînever partially‚Äîwith color to indicate the current value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an interactive continuous capacity indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;double value = 30;&#xA;&#xA;CapacityIndicator(&#xA;  value: value,&#xA;  discrete: false,&#xA;  onChanged: (v) {&#xA;    setState(() =&amp;gt; value = v);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;discrete&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to make it a discrete capacity indicator.&lt;/p&gt; &#xA;&lt;h3&gt;RatingIndicator&lt;/h3&gt; &#xA;&lt;p&gt;A rating indicator uses a series of horizontally arranged graphical symbols to communicate a ranking level. The default symbol is a star.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicator-rating.png&#34; alt=&#34;RatingIndicator Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A rating indicator doesn‚Äôt display partial symbols‚Äîits value is rounded in order to display complete symbols only. Within a rating indicator, symbols are always the same distance apart and don&#39;t expand or shrink to fit the control. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#rating-indicators&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an interactive rating indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;double value = 3;&#xA;&#xA;RatingIndicator(&#xA;  amount: 5,&#xA;  value: value,&#xA;  onChanged: (v) {&#xA;    setState(() =&amp;gt; value = v);&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RelevanceIndicator&lt;/h3&gt; &#xA;&lt;p&gt;A relevance indicator communicates relevancy using a series of vertical bars. It often appears in a list of search results for reference when sorting and comparing multiple items. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#relevance-indicators&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicator-relevance.png&#34; alt=&#34;RelevanceIndicator Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a relevance indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RelevanceIndicator(&#xA;  value: 15,&#xA;  amount: 20,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Selectors&lt;/h1&gt; &#xA;&lt;h2&gt;MacosDatePicker&lt;/h2&gt; &#xA;&lt;img src=&#34;https://imgur.com/sprmep1.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;p&gt;Lets the user choose a date.&lt;/p&gt; &#xA;&lt;p&gt;There are three styles of &lt;code&gt;MacosDatePickers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textual&lt;/code&gt;: a text-only date picker where the user must select the day, month, or year and use the caret-control buttons to change the value. This is useful when space in your app is constrained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graphical&lt;/code&gt;: a visual date picker where the user can navigate through a calendar-like interface to select a date.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;combined&lt;/code&gt;: provides both &lt;code&gt;textual&lt;/code&gt; and &lt;code&gt;graphical&lt;/code&gt; interfaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MacosTimePicker&lt;/h2&gt; &#xA;&lt;img src=&#34;https://imgur.com/RtPbRo2.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Lets the user choose a time.&lt;/p&gt; &#xA;&lt;p&gt;There are three styles of &lt;code&gt;MacosTimePickers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textual&lt;/code&gt;: a text-only time picker where the user must select the hour or minute and use the caret-control buttons to change the value. This is useful when space in your app is constrained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graphical&lt;/code&gt;: a visual time picker where the user can move the hands of a clock-like interface to select a time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;combined&lt;/code&gt;: provides both &lt;code&gt;textual&lt;/code&gt; and &lt;code&gt;graphical&lt;/code&gt; interfaces.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>flutterchina/flukit</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/flutterchina/flukit</id>
    <link href="https://github.com/flutterchina/flukit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter UI KitÔºà‰∏Ä‰∏™ Flutter UIÁªÑ‰ª∂Â∫ìÔºâÔºå2.0 is available now !&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/README-EN.md&#34;&gt;English&lt;/a&gt;|‰∏≠ÊñáÁÆÄ‰Ωì&lt;/p&gt; &#xA;&lt;h1&gt;Flukit &lt;a href=&#34;https://pub.dartlang.org/packages/flukit&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flukit.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;flukit&lt;/em&gt; ÔºàFlutter UI KitÔºâÊòØ‰∏Ä‰∏™Flutter WidgetÂ∫ì„ÄÇÁõÆÂâç 2.0 ÁâàÊú¨Ê≠£Âú®È¢ÑËßà‰∏≠Ôºå2.0 ÁâàÊú¨ÊúâÂæàÂ§ßÊõ¥Êñ∞ÔºåÂèØÊãâÂèñÈ°πÁõÆÂêéÊú¨Âú∞Ë∑ëdemo‰ΩìÈ™å„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Ê≥®ÊÑè&lt;/h2&gt; &#xA;&lt;p&gt;Êú¨È°πÁõÆÊ≠£Âú®ÊåÅÁª≠Ëø≠‰ª£‰∏≠ÔºåÊ¨¢ËøéÂ§ßÂÆ∂Ë¥°ÁåÆ‰ª£Á†Å„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Ë¥°ÁåÆ‰ª£Á†ÅÈ°ªÁü•&lt;/h2&gt; &#xA;&lt;h3&gt;Â∑•Á®ãÁõÆÂΩï&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;flukit&#xA;&#x9;--lib           //Á§∫‰æãÁõÆÂΩï&#xA;&#x9;--package_src&#xA;&#x9;  --lib&#xA;&#x9;   --example&#xA;&#x9;   --src  //widgetÂ∫ìÁõÆÂΩï&#xA;&#x9;--docs //ÊñáÊ°£ÁõÆÂΩïÔºåÊñáÊ°£ÂøÖÈ°ªÊòØmarkdownÊ†ºÂºè&#xA;      --images //ÊñáÊ°£Áî®Âà∞ÁöÑÂõæÁâáÈÉΩÊîæÂú®ËøôÈáåÔºåÂ¶ÇÊà™Âõæ&#xA;      --chs //‰∏≠ÊñáÊñáÊ°£ÁõÆÂΩï&#xA;      --en //Ëã±ÊñáÊñáÊ°£ÁõÆÂΩï&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ËøêË°åDemo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/flukit/tree/main/package_src/lib/example&#34;&gt;Á§∫‰æãÁõÆÂΩï&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Êèê‰∫§‰ª£Á†ÅÈ°ªÁü•&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Â¶ÇÊûú‰Ω†Ê∑ªÂä†‰∫Ü‰∏Ä‰∏™ÁªÑ‰ª∂ÔºåËØ∑ÈÅµÂæ™Â¶Ç‰∏ãËßÑÂàôÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Â∞ΩÂèØËÉΩÂ§öÁöÑÊ∑ªÂä†Ê≥®ÈáäÔºåÊñáÊ°£Ê≥®Èáä‰∏∫‰∏âÊñúÁ∫ø&#34;///&#34;&lt;/li&gt; &#xA; &lt;li&gt;Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑWidgetÂêéÔºåËØ∑Âú®DemoÁõÆÂΩïÊ∑ªÂä†‰ΩøÁî®Á§∫‰æãÔºåÁ§∫‰æãÂ∫îËØ•Á∫ØÂáÄÊó†Âπ≤Êâ∞ÔºåÂ¶ÇÊûú‰∏Ä‰∏™widgetÈúÄË¶ÅÂ§ö‰∏™Á§∫‰æãÔºåÂèØ‰ª•ÂàõÂª∫‰∏Ä‰∏™‰∫åÁ∫ßÈ°µÈù¢ÔºåÂèØ‰ª•ÂèÇÁÖßÊ∞¥Âç∞ÁªÑ‰ª∂ WaterMark ÁöÑÁ§∫‰æã„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÂèØ‰ª•ÔºåËØ∑Â∞ΩÂèØËÉΩÂú®doc ÁõÆÂΩï‰∏ã‰∏∫widgetÊ∑ªÂä†‰ΩøÁî®ÊñáÊ°£ÔºåÊñáÊ°£ÂøÖÈ°ªÊòØmarkdownÊ†ºÂºèÔºåÊñáÊ°£ÂêçÂ∫î‰∏éwidgetÊñá‰ª∂ÂêçÂêåÂêç&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Widgets&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Widget&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AfterLayout&lt;/td&gt; &#xA;   &lt;td&gt;Âú®Â∏ÉÂ±ÄÁªìÊùüÂêéÔºåÂèØ‰ª•ÊãøÂà∞ÂØπÂ∫îÁöÑRenderObjectÂØπË±°„ÄÇÈùûÂ∏∏ÂÆûÁî®ÁöÑ‰∏Ä‰∏™ÁªÑ‰ª∂ÔºåÈúÄË¶ÅÊÖ¢ÊÖ¢‰Ωì‰ºö„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AccurateSizedBox&lt;/td&gt; &#xA;   &lt;td&gt;‰∏Ä‰∏™Á≤æÁ°ÆÁöÑSizedBox„ÄÇSizedBox ‰ºöÂ∞ÜÁà∂ÁªÑ‰ª∂ÁöÑÁ∫¶Êùü‰º†ÈÄíÁªôÂÖ∂Â≠êÁªÑ‰ª∂ÔºåÊâÄ‰ª•Êúâ‰∫õÊó∂ÂÄôÂ≠êÁªÑ‰ª∂Â§ßÂ∞èÂπ∂‰∏çÁ≠â‰∫éÊàë‰ª¨ÈÄöËøáSizedBoxÊåáÂÆöÁöÑÂÆΩÈ´òÔºåËÄå AccurateSizedBox ËÉΩÂæàÂ•ΩËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò„ÄÇÂÖ∑‰ΩìËßÅÁ§∫‰æã„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AnimatedRotationBox&lt;/td&gt; &#xA;   &lt;td&gt;Rotates child forever&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DoneWidget&lt;/td&gt; &#xA;   &lt;td&gt;ÂÆåÊàêÊèêÁ§∫ÁªÑ‰ª∂ÔºàÊâßË°å‰∏Ä‰∏™ÊâìÂãæÂä®ÁîªÔºâ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GradientButton&lt;br&gt;ElevatedGradientButton&lt;/td&gt; &#xA;   &lt;td&gt;ËÉåÊôØËâ≤Ê∏êÂèòÊåâÈíÆ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GradientCircularProgressIndicator&lt;/td&gt; &#xA;   &lt;td&gt;‰∏Ä‰∏™ÊîØÊåÅÈ¢úËâ≤Ê∏êÂèòÁöÑÂúÜÂΩ¢ËøõÂ∫¶ÊåáÁ§∫Âô®&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HitTestBlocker&lt;/td&gt; &#xA;   &lt;td&gt;ÈÄöËøáËØ•ÁªÑ‰ª∂ÂèØ‰ª•Êã¶Êà™ hit test ÊµÅÁ®ã„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;KeepAliveWrapper&lt;/td&gt; &#xA;   &lt;td&gt;ÂåÖÊã¨ÂèØÊªöÂä®ÁªÑ‰ª∂ÁöÑÂ≠êÁªÑ‰ª∂ÂêéÔºåËØ•Â≠êÁªÑ‰ª∂Â∞Ü‰ºöË¢´ÁºìÂ≠òÔºåÊÑèÂë≥ÁùÄÂç≥‰ΩøÊªëÂá∫Â±èÂπï‰πü‰∏ç‰ºöË¢´ÈîÄÊØÅ„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LeftRightBox&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ∑¶-Âè≥Â∏ÉÂ±ÄÁöÑÁªÑ‰ª∂Ôºå‰∏ç‰ºöÊúâÊñáÊú¨Ê∫¢Âá∫ÔºåÂè≥ÁªÑ‰ª∂ÊúÄÂ§öÂç†ÊÄªÊòæÁ§∫ÂÆΩÂ∫¶ÁöÑ‰∏ÄÂçä„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LayoutLogPrint&lt;/td&gt; &#xA;   &lt;td&gt;‰∏Ä‰∏™Â∏ÆÂä©ÁªÑ‰ª∂ÔºöÂú®Ë∞ÉËØïÊ®°Âºè‰∏ãÂèØ‰ª•Â∞ÜÁà∂ÁªÑ‰ª∂‰º†ÈÄíÁöÑÁ∫¶Êùü‰ø°ÊÅØÊâìÂç∞Âá∫Êù•„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LogListenerScope&lt;/td&gt; &#xA;   &lt;td&gt;ÁõëÂê¨ÊòØÂê¶ÊúâÊó•ÂøóÔºàprintÔºâÂà∞Êù•„ÄÇÊòØ‰∏Ä‰∏™Ë∞ÉËØïÂ∑•ÂÖ∑ÔºåÂèØ‰ª•Êã¶Êà™Â∫îÁî®ÂÜÖprintÁöÑËæìÂá∫ÁÑ∂ÂêéÊòæÁ§∫Âú® UI ‰∏äÔºåÂÖ∑‰ΩìËßÅÁ§∫‰æãdemo.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VerticalLogPanel&lt;/td&gt; &#xA;   &lt;td&gt;ÊòæÁ§∫&lt;code&gt;print&lt;/code&gt;ËæìÂá∫ÁöÑlog„ÄÇÂÆÉ‰ºöÂ∞ÜÊòæÁ§∫Âå∫ÂüüÂàÜ‰∏∫‰∏ä‰∏ã‰∏§ÈÉ®ÂàÜÔºåÂ≠êÁªÑ‰ª∂ÊòæÁ§∫Âú®‰∏äÈù¢ÔºåÊó•ÂøóÈù¢ÊùøÊòæÁ§∫Âú®‰∏ãÈù¢„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LogPanel&lt;/td&gt; &#xA;   &lt;td&gt;ÊòæÁ§∫&lt;code&gt;print&lt;/code&gt;ËæìÂá∫ÁöÑlog.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PullRefreshScope&lt;/td&gt; &#xA;   &lt;td&gt;‰∏ãÊãâÂà∑Êñ∞ÔºàÂíåflutterËá™Â∏¶ÁöÑÊúâ‰∏§ÁÇπ‰∏çÂêåÔºöPullRefreshScope ÊòØÊâãÊåáÊä¨Ëµ∑ÂêéÊâçÂà∑Êñ∞ÔºåÂè¶Â§ñÂà∑Êñ∞ÂÆåÊàêÂêéËøîÂõûÊó∂‰ºöÊâßË°åÂä®ÁîªÔºâ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SliverPullRefreshIndicator&lt;/td&gt; &#xA;   &lt;td&gt;‰∏ãÊãâËàíÊñ∞ÊåáÁ§∫Âô®ÔºåÈÖçÂêàPullRefreshScope ‰ΩøÁî®„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QuickScrollbar&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØÊãñÂä®ÁöÑÊªöÂä®Êù°&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swiper&lt;/td&gt; &#xA;   &lt;td&gt;‰∏Ä‰∏™ËΩÆÊí≠ÁªÑ‰ª∂&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScaleView&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØ‰ª•ÂØπÂ≠êÁªÑ‰ª∂ËøõË°åÁº©ÊîæÔºàÊîØÊåÅÂèåÊåá‰º∏Áº©„ÄÅÂèåÂáªÔºâ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SliverFlexibleHeader&lt;/td&gt; &#xA;   &lt;td&gt;‰∏Ä‰∏™ÈöèÁùÄÁî®Êà∑‰∏ãÊãâÔºåÈ´òÂ∫¶ÂèØ‰ª•‰º∏Áº©ÁöÑ sliver headerÔºåÈÄöÂ∏∏‰∏∫ CustomScrollView ÁöÑÁ¨¨‰∏ÄÂ≠êsliver„ÄÇÂ∏∏ËßÅÁöÑÂú∫ÊôØÊòØÂæÆ‰ø°ÊúãÂèãÂúà‰∏™‰∫∫‰∏ªÈ°µÈ°∂ÈÉ®Âõæ‰∏ãÊãâÊó∂ÁöÑÂºπÊÄßÊïàÊûú„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SliverPersistentHeaderToBox&lt;/td&gt; &#xA;   &lt;td&gt;Âíå [SliverPersistentHeader]ÂäüËÉΩÁ±ª‰ººÔºå‰ΩÜ‰∏çÂêåÊòØ[SliverPersistentHeaderToBox] ËÉΩÂ§üÁõ¥Êé•ÂåÖÂê´‰∏Ä‰∏™ÁõíÊ®°ÂûãÂ≠êÁªÑ‰ª∂ÔºàBox widgetÔºâÔºåÂπ∂‰∏îÈ´òÂ∫¶‰ºö‰ΩøÁî®Â≠êÁªÑ‰ª∂È´òÂ∫¶„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SliverHeaderDelegate&lt;/td&gt; &#xA;   &lt;td&gt;[SliverPersistentHeader] ÁöÑÂ∏ÆÂä©Á±ªÔºåÁî®‰∫éÂø´ÈÄüÂàõÂª∫delegate „ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SlideTransitionX&lt;/td&gt; &#xA;   &lt;td&gt;ÂÆûÁé∞ÂêåÂêëÊªëÂä®ÊïàÊûúÔºåÈÄöÂ∏∏Âíå[AnimatedSwitcher]‰∏ÄËµ∑‰ΩøÁî®ÔºåÂÖ∑‰ΩìÊïàÊûúËßÅÁ§∫‰æãdemo.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TranslateWithExpandedPaintingArea&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØ‰ª•Â∞ÜÂ≠êÁªÑ‰ª∂Ê≤øÁùÄÊüê‰∏™ÊñπÂêëÂπ≥ÁßªxÂÉèÁ¥†ÔºåÂπ≥ÁßªÂêéÔºåÂèçÊñπÂêë‰∏ç‰ºöÂá∫Áé∞Á©∫ÁôΩ„ÄÇÂéüÁêÜÊòØËØ•ÁªÑ‰ª∂ÂÖÅËÆ∏Â≠êÁªÑ‰ª∂ÁöÑÁªòÂà∂Á©∫Èó¥Â§ßÂ∞èÂú®Âπ≥ÁßªÊñπÂêëË∂ÖËøáÂΩìÂâçÊòæÁ§∫Á©∫Èó¥xÂÉèÁ¥†„ÄÇÂÖ∑‰ΩìÊïàÊûúËßÅÁ§∫‰æãdemo.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TurnBox&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØÊåâ‰ªªÊÑèËßíÂ∫¶ÊóãËΩ¨Â≠êÁªÑ‰ª∂ÔºåÊóãËΩ¨ËøáÁ®ãÊâßË°åÂä®Áîª„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WaterMark&lt;/td&gt; &#xA;   &lt;td&gt;Ê∞¥Âç∞ÁªÑ‰ª∂&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tools&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ExtraInfoBoxConstraints&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØ‰ª•‰º†ÈÄíÈ¢ùÂ§ñ‰ø°ÊÅØÁöÑ BoxConstraints„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SafeValueNotifier&lt;/td&gt; &#xA;   &lt;td&gt;Âú®build/layout/paint Èò∂ÊÆµÂèëÂá∫ÈÄöÁü•Êó∂‰πüËÉΩÁ°Æ‰øùValueListenableBuilderÊ≠£Â∏∏Êõ¥Êñ∞„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderObjectAnimationMixin&lt;/td&gt; &#xA;   &lt;td&gt;Â¶ÇÊûúË¶ÅÂú®RenderObject‰∏≠ÊâßË°åÂä®ÁîªÔºåÂàôËØ•mixin‰ºöÈùûÂ∏∏ÊúâÁî®ÔºåÂÆÉÂ∞ÅË£Ö‰∫ÜÂä®ÁîªË∞ÉÂ∫¶ÂäüËÉΩ„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;DemoÈÉ®ÂàÜÊà™ÂõæÔºàÂè™ÊúâÊûÅÂ∞ëÊï∞ÊúâÂõæÁâáÔºåÂæÖË°•ÂÖÖÔºâ&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/docs/images/quick_scroll_bar.gif&#34; width=&#34;320&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/docs/images/animated_rotation_box.gif&#34; width=&#34;320&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/docs/images/gradient_circular_progress_indicator.gif&#34; width=&#34;320&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/docs/images/swiper.gif&#34; width=&#34;320&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/docs/images/photoview.gif&#34; width=&#34;320&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/flutterchina/flukit/main/docs/images/raised_button.png&#34; width=&#34;320&#34;&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/power_image</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/alibaba/power_image</id>
    <link href="https://github.com/alibaba/power_image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful plugin that fully uses the native image library&#39;s ability to display images on the flutter side.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerImage&lt;/h1&gt; &#xA;&lt;p&gt;A powerful plugin that fully uses the native image library&#39;s ability to display images on the flutter side.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/power_image/raw/main/README_CN.md&#34;&gt;‰∏≠ÊñáÊñáÊ°£&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports the ability to load ui.Image. In the solution based on external texture, the user could not get the real ui.Image to use, which made the image library powerless in this special usage scenario.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support image preloading capability. Just like flutter precacheImage. This is very useful in some scenarios that require high image display speed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Added texture cache to connect with flutter&#39;s imageCache! Unified image cache to avoid memory problems caused by mixing native images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emulators are supported. Before flutter-1.23.0-18.1.pre, the emulator could not display Texture Widget.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improve the custom image type channel. Solve the demand for business custom image acquisition.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perfect exception capture and collection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support animation. (PR from LiteTao)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;power_imageÔºöIt is recommended to use the latest version, &lt;a href=&#34;https://pub.dev/packages/power_image/versions&#34;&gt;power_image pub versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;power_image_extÔºöYou need to choose the version based on the flutter version you are using. Go to &lt;a href=&#34;https://github.com/alibaba/power_image_ext&#34;&gt;power_image_ext&lt;/a&gt; for detailsÔºÅ&lt;a href=&#34;https://pub.dev/packages/power_image_ext/versions&#34;&gt;power_image_ext pub versions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  power_image: 0.1.0-pre.2&#xA;      &#xA;dependency_overrides:&#xA;  power_image_ext: 2.5.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use code in github directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  power_image:&#xA;    git:&#xA;      url: &#39;git@github.com:alibaba/power_image.git&#39;&#xA;      ref: &#39;0.1.0-pre.2&#39;&#xA;      &#xA;dependency_overrides:&#xA;  power_image_ext:&#xA;    git:&#xA;      url: &#39;git@github.com:alibaba/power_image_ext.git&#39;&#xA;      ref: &#39;2.5.3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Flutter&lt;/h3&gt; &#xA;&lt;h4&gt;1. Replace &lt;code&gt;ImageCache&lt;/code&gt; with &lt;code&gt;ImageCacheExt&lt;/code&gt;.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// call before runApp()&#xA;PowerImageBinding();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;/// return ImageCacheExt in createImageCache(), &#xA;/// if you have extends with WidgetsFlutterBinding&#xA;class XXX extends WidgetsFlutterBinding {&#xA;  @override&#xA;  ImageCache createImageCache() {&#xA;    return ImageCacheExt();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Setup PowerImageLoader&lt;/h4&gt; &#xA;&lt;p&gt;Initialize and set the global default rendering mode, renderingTypeTexture is texture mode, renderingTypeExternal is ffi mode In addition, there are exception reports in PowerImageSetupOptions, and the sampling rate of exception reports can be set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    PowerImageLoader.instance.setup(PowerImageSetupOptions(renderingTypeTexture,&#xA;        errorCallbackSamplingRate: 1.0,&#xA;        errorCallback: (PowerImageLoadException exception) {&#xA;&#xA;    }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;PowerImage provides basic image types, including network, file, nativeAsset, and flutter assets. Users need to customize their corresponding loaders.&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageNetworkImageLoader new] forType:kPowerImageImageTypeNetwork];&#xA;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageAssetsImageLoader new] forType:kPowerImageImageTypeNativeAsset];&#xA;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageFlutterAssertImageLoader new] forType:kPowerImageImageTypeAsset];&#xA;    [[PowerImageLoader sharedInstance] registerImageLoader:[PowerImageFileImageLoader new] forType:kPowerImageImageTypeFile];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;        PowerImageLoader.sharedInstance().register(PowerImageNetworkImageLoader.init(), forType: kPowerImageImageTypeNetwork)&#xA;        PowerImageLoader.sharedInstance().register(PowerImageAssetsImageLoader.init(), forType: kPowerImageImageTypeNativeAsset)&#xA;        PowerImageLoader.sharedInstance().register(PowerImageFlutterAssertImageLoader.init(), forType: kPowerImageImageTypeAsset)&#xA;        PowerImageLoader.sharedInstance().register(PowerImageFileImageLoader.init(), forType: kPowerImageImageTypeFile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The loader needs to follow the PowerImageLoaderProtocol protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;typedef void(^PowerImageLoaderCompletionBlock)(BOOL success, PowerImageResult *imageResult);&#xA;&#xA;@protocol PowerImageLoaderProtocol &amp;lt;NSObject&amp;gt;&#xA;@required&#xA;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock;&#xA;@end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Network image loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    &#xA;    /// CDN optimization, you need transfer reqSize to native image loader!&#xA;    /// CDN optimization, you need transfer reqSize to native image loader!&#xA;    /// like this: [[SDWebImageManager sharedManager] downloadImageWithURL:[NSURL URLWithString:requestConfig.srcString] viewSize:reqSize completed:&#xA;    CGSize reqSize = requestConfig.originSize;&#xA;    /// attention.&#xA;&#xA;    &#xA;    [[SDWebImageManager sharedManager] loadImageWithURL:[NSURL URLWithString:requestConfig.srcString] options:nil progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {&#xA;&#xA;        } completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {&#xA;            if (image != nil) {&#xA;                completedBlock([PowerImageResult successWithImage:image]);&#xA;            }else {&#xA;                completedBlock([PowerImageResult failWithMessage:error.localizedDescription]);&#xA;            }&#xA;    }];&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        let reqSize:CGSize = requestConfig.originSize&#xA;        let url = URL(string: requestConfig.srcString())&#xA;        SDWebImageManager.shared.loadImage(with: url, progress: nil) { image, data, error, cacheType, finished, url in&#xA;            &#xA;            if let image = image {&#xA;                if (image.sd_isAnimated) {&#xA;                    let frames:[SDImageFrame] = SDImageCoderHelper.frames(from: image)!&#xA;                    if frames.count &amp;gt; 0 {&#xA;                        var arr:[PowerImageFrame] = []&#xA;                        for index in 0..&amp;lt;frames.count {&#xA;                            let frame:SDImageFrame = frames[index]&#xA;                            arr.append(PowerImageFrame(image: frame.image, duration: frame.duration))&#xA;                        }&#xA;                        let flutterImage = PowerFlutterMultiFrameImage(image: image, frames: arr)&#xA;                        completedBlock(PowerImageResult.success(with: flutterImage))&#xA;                        return&#xA;                    }&#xA;                }&#xA;                &#xA;                completedBlock(PowerImageResult.success(with: image))&#xA;                &#xA;            }else{&#xA;                completedBlock(PowerImageResult.fail(withMessage: error?.localizedDescription ?? &#34;PowerImageNetworkLoaderError!&#34;))&#xA;            }   &#xA;       }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;native asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    UIImage *image = [UIImage imageNamed:requestConfig.srcString];&#xA;    if (image) {&#xA;        completedBlock([PowerImageResult successWithImage:image]);&#xA;    }else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;MyAssetsImageLoader UIImage imageNamed: nil&#34;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        &#xA;        let image = UIImage(named: requestConfig.srcString())&#xA;        &#xA;        if let image = image {&#xA;            completedBlock(PowerImageResult.success(with: image))&#xA;        }else{&#xA;            completedBlock(PowerImageResult.fail(withMessage: &#34;PowerImageAssetsImageLoaderError!&#34;))&#xA;        }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;flutter asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    UIImage *image = [self flutterImageWithName:requestConfig];&#xA;    if (image) {&#xA;        completedBlock([PowerImageResult successWithImage:image]);&#xA;    } else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;flutterImageWithName nil&#34;]);&#xA;    }&#xA;}&#xA;&#xA;- (UIImage*)flutterImageWithName:(PowerImageRequestConfig *)requestConfig {&#xA;    NSString *name = requestConfig.srcString;&#xA;    NSString *package = requestConfig.src[@&#34;package&#34;];&#xA;    NSString *filename = [name lastPathComponent];&#xA;    NSString *path = [name stringByDeletingLastPathComponent];&#xA;    for (int screenScale = [UIScreen mainScreen].scale; screenScale &amp;gt; 1; --screenScale) {&#xA;        NSString *key = [self lookupKeyForAsset:[NSString stringWithFormat:@&#34;%@/%d.0x/%@&#34;, path, screenScale, filename] fromPackage:package];&#xA;        UIImage *image = [UIImage imageNamed:key inBundle:[NSBundle mainBundle] compatibleWithTraitCollection:nil];&#xA;        if (image) {&#xA;            return image;&#xA;        }&#xA;    }&#xA;    NSString *key = [self lookupKeyForAsset:name fromPackage:package];&#xA;&#xA;    /// webp iOS &amp;lt; 14 not support &#xA;    if ([name hasSuffix:@&#34;.webp&#34;] &amp;amp;&amp;amp; !(@available(ios 14.0, *))) {&#xA;        NSString *mPath = [[NSBundle mainBundle] pathForResource:key ofType:nil];&#xA;        NSData *webpData = [NSData dataWithContentsOfFile:mPath];&#xA;        return [UIImage sd_imageWithWebPData:webpData];&#xA;    }&#xA;    return [UIImage imageNamed:key inBundle:[NSBundle mainBundle] compatibleWithTraitCollection:nil];&#xA;}&#xA;&#xA;- (NSString *)lookupKeyForAsset:(NSString *)asset fromPackage:(NSString *)package {&#xA;    if (package &amp;amp;&amp;amp; [package isKindOfClass:[NSString class]] &amp;amp;&amp;amp; ![package isEqualToString:@&#34;&#34;]) {&#xA;        return [FlutterDartProject lookupKeyForAsset:asset fromPackage:package];&#xA;    }else {&#xA;        return [FlutterDartProject lookupKeyForAsset:asset];&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        let image = self.flutterImage(requestConfig: requestConfig)&#xA;        if let image = image {&#xA;            completedBlock(PowerImageResult.success(with: image))&#xA;        }else {&#xA;            completedBlock(PowerImageResult.fail(withMessage: &#34;PowerImageFlutterAssertImageLoaderError&#34;))&#xA;        }&#xA;    }&#xA;    &#xA;    &#xA;    private func flutterImage(requestConfig:PowerImageRequestConfig) -&amp;gt; UIImage? {&#xA;        &#xA;        let name:String = requestConfig.srcString()!&#xA;        let package:String? = requestConfig.src[&#34;package&#34;] as? String&#xA;        let fileName:String = NSString(string: name).lastPathComponent&#xA;        let path:String = NSString(string: name).deletingLastPathComponent&#xA;        &#xA;        &#xA;        let scaleArr:[Int] = (2...Int(UIScreen.main.scale)).reversed()&#xA;        &#xA;        for scale in scaleArr {&#xA;            let key:String = self.lookupKeyForAsset(asset: String(format: &#34;%s/%d.0x/%s&#34;, path,scale,fileName), package: package)&#xA;            let image = UIImage(named: key,in: Bundle.main,compatibleWith: nil)&#xA;            if image != nil {&#xA;                return image!&#xA;            }&#xA;        }&#xA;        &#xA;        let key = self.lookupKeyForAsset(asset: name, package: package)&#xA;        return UIImage(named: key,in: Bundle.main,compatibleWith: nil)&#xA;    }&#xA;    &#xA;    private func lookupKeyForAsset(asset:String,package:String?) -&amp;gt; String {&#xA;        if let package = package, package != &#34;&#34; {&#xA;            return FlutterDartProject.lookupKey(forAsset: asset,fromPackage: package)&#xA;        }else{&#xA;            return FlutterDartProject.lookupKey(forAsset: asset)&#xA;        }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;file loader example:&lt;/p&gt; &#xA;&lt;h4&gt;OC&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    &#xA;    UIImage *image = [[UIImage alloc] initWithContentsOfFile:requestConfig.srcString];&#xA;&#xA;    if (image) {&#xA;        completedBlock([PowerImageResult successWithImage:image]);&#xA;    } else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;UIImage initWithContentsOfFile nil&#34;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Swift&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;&#xA;func handleRequest(_ requestConfig: PowerImageRequestConfig!, completed completedBlock: PowerImageLoaderCompletionBlock!) {&#xA;        &#xA;        let image = UIImage(contentsOfFile: requestConfig.srcString())&#xA;        &#xA;        if let image = image {&#xA;            completedBlock(PowerImageResult.success(with: image))&#xA;        }else{&#xA;            completedBlock(PowerImageResult.fail(withMessage: &#34;PowerImageFileImageLoaderError!&#34;))&#xA;        }&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;PowerImage provides basic image types, including network, file, nativeAsset, and flutter assets. Users need to customize their corresponding loaders.&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageNetworkLoader(this.getApplicationContext()), &#34;network&#34;);&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageNativeAssetLoader(this.getApplicationContext()), &#34;nativeAsset&#34;);&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageFlutterAssetLoader(this.getApplicationContext()), &#34;asset&#34;);&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;                new PowerImageFileLoader(this.getApplicationContext()), &#34;file&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageNetworkLoader(this.applicationContext), &#34;network&#34;&#xA;)&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageNativeAssetLoader(this.applicationContext), &#34;nativeAsset&#34;&#xA;)&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageFlutterAssetLoader(this.applicationContext), &#34;asset&#34;&#xA;)&#xA;PowerImageLoader.getInstance().registerImageLoader(&#xA;            PowerImageFileLoader(this.applicationContext), &#34;file&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The loader needs to follow the PowerImageLoaderProtocol protocol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface PowerImageLoaderProtocol {&#xA;    void handleRequest(PowerImageRequestConfig request, PowerImageResult result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Network image loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageNetworkLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private Context context;&#xA;&#xA;    public PowerImageNetworkLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        Glide.with(context).asDrawable().load(request.srcString()).listener(new RequestListener&amp;lt;Drawable&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Drawable&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Drawable resource, Object model, Target&amp;lt;Drawable&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                if (resource instanceof GifDrawable) {&#xA;                    response.onResult(PowerImageResult.genSucRet(new GlideMultiFrameImage((GifDrawable) resource, false)));&#xA;                } else {&#xA;                    if (resource instanceof BitmapDrawable) {&#xA;                        response.onResult(PowerImageResult.genSucRet(new FlutterSingleFrameImage((BitmapDrawable) resource)));&#xA;                    } else {&#xA;                        response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•:  resource : &#34; + String.valueOf(resource)));&#xA;                    }&#xA;                }&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageNetworkLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        Glide.with(context).asDrawable().load(request.srcString())&#xA;            .listener(object : RequestListener&amp;lt;Drawable&amp;gt; {&#xA;                override fun onLoadFailed(&#xA;                    e: GlideException?,&#xA;                    model: Any,&#xA;                    target: Target&amp;lt;Drawable&amp;gt;,&#xA;                    isFirstResource: Boolean&#xA;                ): Boolean {&#xA;                    response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                    return true&#xA;                }&#xA;&#xA;                override fun onResourceReady(&#xA;                    resource: Drawable,&#xA;                    model: Any,&#xA;                    target: Target&amp;lt;Drawable&amp;gt;,&#xA;                    dataSource: DataSource,&#xA;                    isFirstResource: Boolean&#xA;                ): Boolean {&#xA;                    if (resource is GifDrawable) {&#xA;                        response.onResult(&#xA;                            PowerImageResult.genSucRet(&#xA;                                GlideMultiFrameImage(&#xA;                                    resource as GifDrawable,&#xA;                                    false&#xA;                                )&#xA;                            )&#xA;                        )&#xA;                    } else {&#xA;                        if (resource is BitmapDrawable) {&#xA;                            response.onResult(&#xA;                                PowerImageResult.genSucRet(&#xA;                                    FlutterSingleFrameImage(&#xA;                                        resource as BitmapDrawable&#xA;                                    )&#xA;                                )&#xA;                            )&#xA;                        } else {&#xA;                            response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•:  resource : $resource&#34;))&#xA;                        }&#xA;                    }&#xA;                    return true&#xA;                }&#xA;            }).submit(&#xA;                if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;                if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;            )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;native asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageNativeAssetLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private Context context;&#xA;&#xA;    public PowerImageNativeAssetLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        Resources resources = context.getResources();&#xA;        int resourceId = 0;&#xA;        try {&#xA;            resourceId = resources.getIdentifier(request.srcString(),&#xA;                    &#34;drawable&#34;, context.getPackageName());&#xA;        } catch (Resources.NotFoundException e) {&#xA;            // ËµÑÊ∫êÊú™ÊâæÂà∞&#xA;            e.printStackTrace();&#xA;        }&#xA;        if (resourceId == 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;ËµÑÊ∫êÊú™ÊâæÂà∞&#34;));&#xA;            return;&#xA;        }&#xA;        Glide.with(context).asBitmap().load(resourceId).listener(new RequestListener&amp;lt;Bitmap&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Bitmap&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Bitmap resource, Object model, Target&amp;lt;Bitmap&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genSucRet(resource));&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageNativeAssetLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        val resources = context.resources&#xA;        var resourceId = 0&#xA;        try {&#xA;            resourceId = resources.getIdentifier(&#xA;                request.srcString(),&#xA;                &#34;drawable&#34;, context.packageName&#xA;            )&#xA;        } catch (e: Resources.NotFoundException) {&#xA;            // ËµÑÊ∫êÊú™ÊâæÂà∞&#xA;            e.printStackTrace()&#xA;        }&#xA;        if (resourceId == 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;ËµÑÊ∫êÊú™ÊâæÂà∞&#34;))&#xA;            return&#xA;        }&#xA;        Glide.with(context).asBitmap().load(resourceId).listener(object : RequestListener&amp;lt;Bitmap?&amp;gt; {&#xA;            override fun onLoadFailed(&#xA;                e: GlideException?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                return true&#xA;            }&#xA;&#xA;            override fun onResourceReady(&#xA;                resource: Bitmap?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                dataSource: DataSource,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genSucRet(resource))&#xA;                return true&#xA;            }&#xA;        }).submit(&#xA;            if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;            if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;        )&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;flutter asset loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageFlutterAssetLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private Context context;&#xA;&#xA;    public PowerImageFlutterAssetLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        String name = request.srcString();&#xA;        if (name == null || name.length() &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src ‰∏∫Á©∫&#34;));&#xA;            return;&#xA;        }&#xA;        String assetPackage = &#34;&#34;;&#xA;        if (request.src != null) {&#xA;            assetPackage = (String) request.src.get(&#34;package&#34;);&#xA;        }&#xA;        String path;&#xA;        if (assetPackage != null &amp;amp;&amp;amp; assetPackage.length() &amp;gt; 0) {&#xA;            path = FlutterMain.getLookupKeyForAsset(name, assetPackage);&#xA;        } else {&#xA;            path = FlutterMain.getLookupKeyForAsset(name);&#xA;        }&#xA;        if (path == null || path.length() &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;path ‰∏∫Á©∫&#34;));&#xA;            return;&#xA;        }&#xA;        Uri asset = Uri.parse(&#34;file:///android_asset/&#34; + path);&#xA;        Glide.with(context).asBitmap().load(asset).listener(new RequestListener&amp;lt;Bitmap&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Bitmap&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Bitmap resource, Object model, Target&amp;lt;Bitmap&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genSucRet(resource));&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageFlutterAssetLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        val name = request.srcString()&#xA;        if (name == null || name.length &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src ‰∏∫Á©∫&#34;))&#xA;            return&#xA;        }&#xA;        var assetPackage: String? = &#34;&#34;&#xA;        if (request.src != null) {&#xA;            assetPackage = request.src[&#34;package&#34;] as String?&#xA;        }&#xA;        val path: String = if (assetPackage != null &amp;amp;&amp;amp; assetPackage.length &amp;gt; 0) {&#xA;            FlutterMain.getLookupKeyForAsset(name, assetPackage)&#xA;        } else {&#xA;            FlutterMain.getLookupKeyForAsset(name)&#xA;        }&#xA;        if (path.isEmpty()) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;path ‰∏∫Á©∫&#34;))&#xA;            return&#xA;        }&#xA;        val asset = Uri.parse(&#34;file:///android_asset/$path&#34;)&#xA;        Glide.with(context).asBitmap().load(asset).listener(object : RequestListener&amp;lt;Bitmap?&amp;gt; {&#xA;            override fun onLoadFailed(&#xA;                e: GlideException?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                return true&#xA;            }&#xA;&#xA;            override fun onResourceReady(&#xA;                resource: Bitmap?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                dataSource: DataSource,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genSucRet(resource))&#xA;                return true&#xA;            }&#xA;        }).submit(&#xA;            if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;            if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;file loader example:&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageFileLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private final Context context;&#xA;&#xA;    public PowerImageFileLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, PowerImageResponse response) {&#xA;        String name = request.srcString();&#xA;        if (name == null || name.length() &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src ‰∏∫Á©∫&#34;));&#xA;            return;&#xA;        }&#xA;        Uri asset = Uri.parse(&#34;file://&#34; + name);&#xA;        Glide.with(context).asBitmap().load(asset).listener(new RequestListener&amp;lt;Bitmap&amp;gt;() {&#xA;            @Override&#xA;            public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&amp;lt;Bitmap&amp;gt; target, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + (e != null ? e.getMessage() : &#34;null&#34;)));&#xA;                return true;&#xA;            }&#xA;&#xA;            @Override&#xA;            public boolean onResourceReady(Bitmap resource, Object model, Target&amp;lt;Bitmap&amp;gt; target, DataSource dataSource, boolean isFirstResource) {&#xA;                response.onResult(PowerImageResult.genSucRet(resource));&#xA;                return true;&#xA;            }&#xA;        }).submit(request.width &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.width,&#xA;                request.height &amp;lt;= 0 ? Target.SIZE_ORIGINAL : request.height);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Kotlin&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;class PowerImageFileLoader(private val context: Context) : PowerImageLoaderProtocol {&#xA;    override fun handleRequest(request: PowerImageRequestConfig, response: PowerImageResponse) {&#xA;        val name = request.srcString()&#xA;        if (name == null || name.length &amp;lt;= 0) {&#xA;            response.onResult(PowerImageResult.genFailRet(&#34;src ‰∏∫Á©∫&#34;))&#xA;            return&#xA;        }&#xA;        val asset = Uri.parse(&#34;file://$name&#34;)&#xA;        Glide.with(context).asBitmap().load(asset).listener(object : RequestListener&amp;lt;Bitmap?&amp;gt; {&#xA;            override fun onLoadFailed(&#xA;                e: GlideException?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genFailRet(&#34;NativeÂä†ËΩΩÂ§±Ë¥•: &#34; + if (e != null) e.message else &#34;null&#34;))&#xA;                return true&#xA;            }&#xA;&#xA;            override fun onResourceReady(&#xA;                resource: Bitmap?,&#xA;                model: Any,&#xA;                target: Target&amp;lt;Bitmap?&amp;gt;,&#xA;                dataSource: DataSource,&#xA;                isFirstResource: Boolean&#xA;            ): Boolean {&#xA;                response.onResult(PowerImageResult.genSucRet(resource))&#xA;                return true&#xA;            }&#xA;        }).submit(&#xA;            if (request.width &amp;lt;= 0) Target.SIZE_ORIGINAL else request.width,&#xA;            if (request.height &amp;lt;= 0) Target.SIZE_ORIGINAL else request.height&#xA;        )&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;network image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PowerImage.network(&#xA;    String src, {&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nativeAsset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PowerImage.nativeAsset(&#xA;    String src, {&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flutter asset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PowerImage.asset(&#xA;    String src, {&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    String? package,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;File:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PowerImage.file(String src,&#xA;      {Key key,&#xA;      this.width,&#xA;      this.height,&#xA;      this.frameBuilder,&#xA;      this.errorBuilder,&#xA;      this.fit = BoxFit.cover,&#xA;      this.alignment = Alignment.center,&#xA;      String renderingType,&#xA;      double imageWidth,&#xA;      double imageHeight})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom Image Type:&lt;/p&gt; &#xA;&lt;p&gt;1.Define custom ImageType like &#34;album&#34;.&lt;/p&gt; &#xA;&lt;p&gt;2.Define custom PowerImageRequestOptionsSrc to pass argument to Native loader.&lt;/p&gt; &#xA;&lt;p&gt;3.Register custom loader in Android and iOS for &#34;album&#34; to receive argument and return Bitmap or UIImage.&lt;/p&gt; &#xA;&lt;p&gt;4.Flutter Side will display Image successfully.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  /// Ëá™ÂÆö‰πâ imageType\src&#xA;  /// ÊïàÊûúÔºöÂ∞Üsrc encode ÂêéÔºåÂÆåÊàêÂú∞‰º†ÈÄíÁªô native ÂØπÂ∫î imageType Ê≥®ÂÜåÁöÑ loader&#xA;  /// ‰ΩøÁî®Âú∫ÊôØÔºö&#xA;  /// ‰æãÂ¶ÇÔºåËá™ÂÆö‰πâÂä†ËΩΩÁõ∏ÂÜåÁÖßÁâáÔºåÈÄöËøáËá™ÂÆö‰πâ imageType ‰∏∫ &#34;album&#34;Ôºå&#xA;  /// native ‰æßÊ≥®ÂÜå &#34;album&#34; Á±ªÂûãÁöÑ loader Ëá™ÂÆö‰πâÂõæÁâáÁöÑÂä†ËΩΩ„ÄÇ  &#xA;PowerImage.type(&#xA;    String imageType, {&#xA;    required PowerImageRequestOptionsSrc src,&#xA;    Key? key,&#xA;    String? renderingType,&#xA;    double? imageWidth,&#xA;    double? imageHeight,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  /// Êõ¥Âä†ÁÅµÊ¥ªÁöÑÊñπÂºèÔºåÈÄöËøáËá™ÂÆö‰πâoptionsÊù•Â±ïÁ§∫ÂõæÁâá&#xA;  ///&#xA;  /// PowerImageRequestOptions({&#xA;  ///   @required this.src,   //ËµÑÊ∫ê&#xA;  ///   @required this.imageType, //ËµÑÊ∫êÁ±ªÂûãÔºåÂ¶ÇÁΩëÁªúÂõæÔºåÊú¨Âú∞ÂõæÊàñËÄÖËá™ÂÆö‰πâÁ≠â&#xA;  ///   this.renderingType, //Ê∏≤ÊüìÊñπÂºèÔºåÈªòËÆ§ÂÖ®Â±Ä&#xA;  ///   this.imageWidth,  //ÂõæÁâáÁöÑÊ∏≤ÊüìÁöÑÂÆΩÂ∫¶&#xA;  ///   this.imageHeight, //ÂõæÁâáÊ∏≤ÊüìÁöÑÈ´òÂ∫¶&#xA;  /// });&#xA;  ///&#xA;  /// PowerExternalImageProviderÔºàFFI[bitmap]ÊñπÊ°àÔºâ&#xA;  /// PowerTextureImageProviderÔºàtextureÊñπÊ°àÔºâ&#xA;  ///&#xA;  /// ‰ΩøÁî®Âú∫ÊôØÔºö&#xA;  /// ‰æãÂ¶ÇÔºåËá™ÂÆö‰πâÂä†ËΩΩÁõ∏ÂÜåÁÖßÁâáÔºåÈÄöËøáËá™ÂÆö‰πâ imageType ‰∏∫ &#34;album&#34;Ôºå&#xA;  /// native ‰æßÊ≥®ÂÜå &#34;album&#34; Á±ªÂûãÁöÑ loader Ëá™ÂÆö‰πâÂõæÁâáÁöÑÂä†ËΩΩ„ÄÇ&#xA;  ///&#xA;PowerImage.options(&#xA;    PowerImageRequestOptions options, {&#xA;    Key? key,&#xA;    this.width,&#xA;    this.height,&#xA;    this.frameBuilder,&#xA;    this.errorBuilder,&#xA;    this.fit = BoxFit.cover,&#xA;    this.alignment = Alignment.center,&#xA;    this.semanticLabel,&#xA;    this.excludeFromSemantics = false,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PowerImageLoader.getInstance().registerImageLoader(&#xA;  new PowerImageAlbumLoader(application.getApplicationContext()), &#34;album&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PowerImageAlbumLoader implements PowerImageLoaderProtocol {&#xA;&#xA;    private final Context context;&#xA;&#xA;    public PowerImageAlbumLoader(Context context) {&#xA;        this.context = context;&#xA;    }&#xA;&#xA;    @Override&#xA;    public void handleRequest(PowerImageRequestConfig request, final PowerImageResponse response) {&#xA;        Map&amp;lt;String, Object&amp;gt; src = request.src;&#xA;        if (src == null || src.get(Const.Argument.ASSET_ID) == null || src.get(Const.Argument.ASSET_TYPE) == null) {&#xA;            PowerImageResult result = PowerImageResult.genFailRet(&#34;asset id or assetType == null&#34;);&#xA;            response.onResult(result);&#xA;            return;&#xA;        }&#xA;        AssetQuality quality = AssetQuality.values()[(int) src.get(Const.Argument.QUALITY)];&#xA;        boolean highQuality = quality == AssetQuality.fullScreen;&#xA;        final LocalMedia media = new LocalMedia();&#xA;        media.fromMap(src);&#xA;        final ThumbnailLoader thumbnailLoader = new ThumbnailLoader(context);&#xA;        thumbnailLoader.load(media, highQuality, new ThumbnailLoader.ThumbnailLoadListener() {&#xA;            @Override&#xA;            public void onThumbnailLoaded(final Bitmap bitmap) {&#xA;                PowerImageResult result;&#xA;                if (bitmap == null) {&#xA;                    result = PowerImageResult.genFailRet(&#34;bitmap == null&#34;);&#xA;                } else {&#xA;                    result = PowerImageResult.genSucRet(bitmap);&#xA;                }&#xA;                response.onResult(result);&#xA;            }&#xA;        });&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;[[PowerImageLoader sharedInstance] registerImageLoader:[AlbumAssetsImageLoader new] forType:@&#34;album&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34;&gt;- (void)handleRequest:(PowerImageRequestConfig *)requestConfig completed:(PowerImageLoaderCompletionBlock)completedBlock {&#xA;    NSString *assetId = requestConfig.src[@&#34;assetId&#34;];&#xA;    NSNumber *imageWidth = requestConfig.src[@&#34;imageWidth&#34;];&#xA;    NSNumber *imageHeight = requestConfig.src[@&#34;imageHeight&#34;];&#xA;    if (assetId) {&#xA;        if (imageWidth &amp;amp;&amp;amp; imageHeight) {&#xA;            [[MPAssetManager sharedInstance] getImageWithAssetId:assetId&#xA;                                                       imageSize:CGSizeMake(imageWidth.doubleValue, imageHeight.doubleValue)&#xA;                                                  successHandler:^(UIImage *image) {&#xA;                completedBlock([PowerImageResult successWithImage:image]);&#xA;            } failureHandler:^(NSError *error) {&#xA;                completedBlock([PowerImageResult failWithMessage:error.localizedDescription]);&#xA;            }];&#xA;        } else {&#xA;            [[MPAssetManager sharedInstance] getThumbnail:assetId&#xA;                                           successHandler:^(UIImage *image) {&#xA;                completedBlock([PowerImageResult successWithImage:image]);&#xA;            } failureHandler:^(NSError *error) {&#xA;                completedBlock([PowerImageResult failWithMessage:error.localizedDescription]);&#xA;            }];&#xA;        }&#xA;    } else {&#xA;        completedBlock([PowerImageResult failWithMessage:@&#34;assetId is nil&#34;]);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;Network&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;          return PowerImage.network(&#xA;            &#39;https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg&#39;,&#xA;            width: 100,&#xA;            height: 100,&#xA;          );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Best practice&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/power_image/main/BESTPRACTICE.md&#34;&gt;Best practice&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/TdTGK21S-Yd3aD-yZDoYyQ&#34;&gt;https://mp.weixin.qq.com/s/TdTGK21S-Yd3aD-yZDoYyQ&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EaniaHuui/android_tool</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/EaniaHuui/android_tool</id>
    <link href="https://github.com/EaniaHuui/android_tool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;android_tool&lt;/h1&gt; &#xA;&lt;p&gt;‰Ωú‰∏∫‰∏Ä‰∏™AndroidÂºÄÂèëËÄÖÔºåÂú®ÂºÄÂèëËøáÁ®ã‰∏≠ÁªèÂ∏∏‰ºöÁî®Âà∞ADBÂëΩ‰ª§ÔºåÊØèÊ¨°ËøõË°åÊâãÊï≤ÈÉΩËßâÂæóÈ∫ªÁÉ¶ÂæóÂæàÔºåÂ∞§ÂÖ∂ÊòØÊúâ‰∫õÂëΩ‰ª§ÂøòËÆ∞‰∫ÜÔºåËøòÂæóÂéªÊü•ÔºåÊµ™Ë¥πÊó∂Èó¥ÔºåÂΩ±ÂìçÊïàÁéáÔºå‰∫éÊòØÁî®FlutterÊää‰∏Ä‰∫õÂ∏∏Áî®ÁöÑADBÂëΩ‰ª§Â∞ÅË£ÖÊàê‰∏Ä‰∏™Â∫îÁî®„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÁÆÄ‰ªã&lt;/h2&gt; &#xA;&lt;p&gt;ÈÄöËøáÊâßË°åADBÂëΩ‰ª§Êù•ÊìçÊéßAndroidËÆæÂ§áÔºåÂÆûÁé∞‰∏Ä‰∫õÂ∏∏Áî®ÁöÑÂäüËÉΩÔºåÊñπ‰æøÂú®ËøõË°åAndroidÂºÄÂèëÊó∂ËøõË°åË∞ÉËØïÔºåÁõÆÂâçÂú®WindowsÂíåMac OSÂèØ‰ª•ËøêË°åÔºåLinux‰∏äÂæÖÈ™åËØÅÔºåÊîØÊåÅ‰∏Ä‰∫õÂ∏∏Áî®ADBÂëΩ‰ª§‰ª•ÂèäÊñá‰ª∂ÁÆ°ÁêÜÔºåÂπ∂‰∏îÊîØÊåÅÊãñÊãΩÊñá‰ª∂ËøõË°åÊñá‰ª∂‰º†ËæìÂíåÂÆâË£ÖAPKÔºå‰ª•ÂèäÊîØÊåÅÊü•ÁúãLogÂäüËÉΩ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EaniaHuui/android_tool/releases&#34;&gt;‰∏ãËΩΩËØïÁî®&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ÊºîÁ§∫&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/EaniaHuui/android_tool/raw/main/screenshot/screenshot1.png&#34; alt=&#34;alt screenshot1&#34;&gt; &lt;img src=&#34;https://github.com/EaniaHuui/android_tool/raw/main/screenshot/screenshot2.png&#34; alt=&#34;alt screenshot2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÂÆûÁé∞&lt;/h2&gt; &#xA;&lt;p&gt;FlutterÂºÄÂèëÊ°åÈù¢Á´ØÂ∫îÁî®ÈúÄË¶ÅÂºÄÂêØÁõ∏ÂÖ≥Âπ≥Âè∞ÁöÑÈÖçÁΩÆÔºåÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// ÂºÄÂêØÊîØÊåÅWindowsÂπ≥Âè∞ÂºÄÂèëÔºàFlutter 2.10ÁâàÊú¨‰ª•‰∏äÂ∑≤ÁªèÈªòËÆ§ÂêØÁî®Ôºâ&#xA;flutter config --enable-windows-desktop&#xA;// ÂºÄÂêØÊîØÊåÅMacÂπ≥Âè∞ÂºÄÂèë&#xA;flutter config --enable-macos-desktop&#xA;// ÂºÄÂêØÊîØÊåÅLinuxÂπ≥Âè∞ÂºÄÂèë&#xA;flutter config --enable-linux-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‰ΩøÁî®ÁöÑÊèí‰ª∂&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;provider&lt;/code&gt;ÔºöÂÆûÁé∞Áä∂ÊÄÅÁÆ°ÁêÜ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;process_run&lt;/code&gt;ÔºöÁî®‰∫éÊâßË°åADBÂëΩ‰ª§&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;desktop_drop&lt;/code&gt;ÔºöÂÆûÁé∞ÊãñÂä®Êñá‰ª∂Âà∞Â∫îÁî®ÔºåÂπ∂‰∏îÊîØÊåÅÂ§ö‰∏™Êñá‰ª∂ÔºåÂú®Ê≠§È°πÁõÆ‰∏≠Áî®‰∫é‰ªéÁîµËÑë‰∏≠‰º†ËæìÊñá‰ª∂Âà∞AndroidËÆæÂ§á‰∏≠Ôºå‰ª•ÂèäËøõË°åÂÆâË£ÖAPK&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file_selector&lt;/code&gt;ÔºöÁî®‰∫éÁÆ°ÁêÜÊñá‰ª∂Âíå‰∏éÊñá‰ª∂ÂØπËØùÊ°ÜÁöÑ‰∫§‰∫íÔºåÂèØ‰ª•Êñπ‰æøÂø´Êç∑ÁöÑÂºπÂá∫Êñá‰ª∂ÊàñÊñá‰ª∂Â§πÈÄâÊã©ÂØπËØùÊ°Ü&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shared_preferences&lt;/code&gt;ÔºöÊï∞ÊçÆÁöÑÊåÅ‰πÖÂåñÂ≠òÂÇ®&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path_provider&lt;/code&gt;ÔºöÁî®‰∫éËé∑ÂèñÁ≥ªÁªü‰∏≠ÁöÑ‰∏Ä‰∫õÁõÆÂΩïÁöÑË∑ØÂæÑ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dio&lt;/code&gt;ÔºöÁΩëÁªúËØ∑Ê±ÇÔºåÂΩìÂâçÈ°πÁõÆ‰∏≠‰∏ªË¶ÅÁî®Êù•‰∏ãËΩΩADBÂ∑•ÂÖ∑ÂåÖ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;archive&lt;/code&gt;ÔºöËß£ÂéãÁº©Êèí‰ª∂ÔºåÂΩìÂâçÈ°πÁõÆ‰∏≠‰∏ªË¶ÅÁî®Êù•Âú®WindowsÂπ≥Âè∞‰∏äËß£ÂéãzipÊñá‰ª∂&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;event_bus&lt;/code&gt;ÔºöÊ∂àÊÅØ‰º†ÈÄíÔºå‰∏ªË¶ÅÁî®‰∫é‰º†ÈÄí‰∏Ä‰∫õÊï∞ÊçÆÔºåÊõ¥Êñ∞ÂÖ∂‰ªñWidget&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;substring_highlight&lt;/code&gt;ÔºöÁî®‰∫éÂÆûÁé∞ÊêúÁ¥¢ÂÖ≥ÈîÆÂ≠óÈ´ò‰∫ÆÊòæÁ§∫&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter_list_view&lt;/code&gt;ÔºöÁî®‰∫éÂÆûÁé∞ListViewÁöÑÊªöÂä®Âà∞ÊåáÂÆöItemÁöÑ‰ΩçÁΩÆ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;ÊÑüÂÖ¥Ë∂£ÁöÑÂ∞è‰ºô‰º¥ÂèØ‰ª•ÁÇπÂáª‰∏ãÊñπÈìæÊé•‰∏ãËΩΩËØïÁî®„ÄÇ&lt;br&gt; ÂØπ‰∫é‰ª£Á†ÅÈÄªËæëÊÑüÂÖ¥Ë∂£‰πüÂèØÁõ¥Êé•ÁúãÊ∫êÁ†Å„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;‰∏äÈìæÊé•&lt;/h2&gt; &#xA;&lt;p&gt;GitHubÂú∞ÂùÄÔºö&lt;a href=&#34;https://github.com/EaniaHuui/android_tool&#34;&gt;android_tool&lt;/a&gt;&lt;br&gt; ‰∏ãËΩΩËØïÁî®Ôºö&lt;a href=&#34;https://github.com/EaniaHuui/android_tool/releases&#34;&gt;release&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>syncfusion/flutter-examples</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/syncfusion/flutter-examples</id>
    <link href="https://github.com/syncfusion/flutter-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains the Syncfusion Flutter UI widgets examples and the guide to use them.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Syncfusion Flutter examples&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains awesome demos of &lt;a href=&#34;https://www.syncfusion.com/flutter-widgets&#34;&gt;Syncfusion Flutter UI widgets&lt;/a&gt;. This is the best place to check our widgets to get more insight into the usage of APIs. You can also check our widgets by installing the complete Flutter sample browser from &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.syncfusion.flutter.examples&#34;&gt;Google Play Store&lt;/a&gt; or &lt;a href=&#34;https://apps.apple.com/us/app/syncfusion-flutter-ui-widgets/id1475231341&#34;&gt;App Store&lt;/a&gt;, in which you can browse the demo for all the widgets and view the source code of each sample within the app itself.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/images/flutter_examples.png&#34;&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#requirements-to-run-the-demo&#34;&gt;Requirements to run the demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#repository-structure&#34;&gt;Repository Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#widgets-catalog&#34;&gt;Widgets Catalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#using-the-examples&#34;&gt;Using the examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/syncfusion/flutter-examples/master/#support-and-feedback&#34;&gt;Support and Feedback&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;requirements-to-run-the-demo&#34;&gt;&lt;/a&gt;Requirements to run the demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IDE tools are &lt;a href=&#34;https://flutter.dev/docs/get-started/editor?tab=vscode&#34;&gt;Visual Studio code&lt;/a&gt; and &lt;a href=&#34;https://flutter.dev/docs/get-started/editor?tab=androidstudio&#34;&gt;Android studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Flutter SDK &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Channel&lt;/th&gt; &#xA;     &lt;th&gt;Version&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Stable&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;2.0.2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Beta&lt;/td&gt; &#xA;     &lt;td&gt;&lt;a href=&#34;https://storage.googleapis.com/flutter_infra/releases/beta/windows/flutter_windows_2.0.2-beta.zip&#34;&gt;2.0.2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dart and Flutter add-ons for Visual Studio Code (available via the Visual studio code extension) in Android Studio it available in plugin preference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;repository-structure&#34;&gt;&lt;/a&gt; Repository Structure&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;b&gt;lib/samples&lt;/b&gt; directory contains the Flutter widget examples for each widget such as Charts, DataGrid, etc. All the examples can be deployed in Android, iOS, and web platforms.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;widgets-catalog&#34;&gt;&lt;/a&gt;Widgets Catalog&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Widgets&lt;/th&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Barcode Generator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/barcodes&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calendar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/calendar&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Charts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/chart&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DataGrid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/datagrid&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Date Range Picker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/date_picker&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linear Gauge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/linear_gauge&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Maps&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/maps&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PDF&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/pdf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PDF Viewer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/pdf_viewer&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Progress Bar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/progress_bar&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Radial Gauge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/gauge&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Range Selector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sliders/range_selector&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Range Slider&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sliders/range_slider&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slider&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sliders/slider&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spark Charts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/sparkline&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Signature Pad&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/signature_pad&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Treemap&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/treemap&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XlsIO&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncfusion/flutter-examples/tree/master/lib/samples/xlsio&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;license&#34;&gt;&lt;/a&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Syncfusion has no liability for any damage or consequence that may arise by the use or viewing of the examples. The examples are for demonstrative purposes and if you choose to use or access the examples you agree to not hold Syncfusion liable, in any form, for any damage that is related to use, accessing or otherwise viewing the examples. By accessing, viewing, or otherwise seeing the examples you acknowledge and agree Syncfusion‚Äôs examples will not allow you to seek injunctive relief in any form for any claim related to the sample. If you do not agree to this, do not view, access, utilize or otherwise do anything with Syncfusion‚Äôs examples.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;using-the-examples&#34;&gt;&lt;/a&gt;Using the examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unzip the downloaded flutter example archive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you clone this repository ignore this step.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open the flutter example folder in an IDE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to get the required packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;$ flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run your application either using &lt;code&gt;F5&lt;/code&gt; or &lt;code&gt;Run &amp;gt; Start Debugging&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get the demo application&lt;/h2&gt; &#xA;&lt;p&gt;Explore the full capabilities of our Flutter widgets on your device by installing our sample browser applications from the below app stores, and view samples code in GitHub.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.syncfusion.flutter.examples&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/google-play-store.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://apps.apple.com/us/app/syncfusion-flutter-ui-widgets/id1475231341&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/ios-store.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://flutter.syncfusion.com&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/web-sample-browser.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.microsoft.com/en-us/p/syncfusion-flutter-gallery/9nhnbwcsf85d?activetab=pivot:overviewtab&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/windows-store.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://install.appcenter.ms/orgs/syncfusion-demos/apps/syncfusion-flutter-gallery/distribution_groups/release&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/macos-app-center.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/syncfusion-flutter-gallery&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/snap-store.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/syncfusion/flutter-examples&#34;&gt;&lt;img src=&#34;https://cdn.syncfusion.com/content/images/FTControl/github-samples.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the following to learn more about Syncfusion Flutter widgets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/flutter-widgets&#34;&gt;Syncfusion Flutter product page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.syncfusion.com/flutter/introduction/overview&#34;&gt;User guide documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.syncfusion.com/flutter/introduction/api-reference&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/kb/flutter&#34;&gt;Knowledge base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/tutorial-videos/flutter&#34;&gt;Video tutorials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support and feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For any other queries, reach our &lt;a href=&#34;https://www.syncfusion.com/support/directtrac/incidents/newincident&#34;&gt;Syncfusion support team&lt;/a&gt; or post the queries through the &lt;a href=&#34;https://www.syncfusion.com/forums&#34;&gt;Community forums&lt;/a&gt; and submit a feature request or a bug through our &lt;a href=&#34;https://www.syncfusion.com/feedback/flutter&#34;&gt;Feedback portal&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To renew the subscription, click &lt;a href=&#34;https://www.syncfusion.com/sales/products&#34;&gt;renew&lt;/a&gt; or contact our sales team at &lt;a href=&#34;mailto:salessupport@syncfusion.com&#34;&gt;salessupport@syncfusion.com&lt;/a&gt; | Toll Free: 1-888-9 DOTNET.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Syncfusion&lt;/h2&gt; &#xA;&lt;p&gt;Founded in 2001 and headquartered in Research Triangle Park, N.C., Syncfusion has more than 20,000 customers and more than 1 million users, including large financial institutions, Fortune 500 companies, and global IT consultancies.&lt;/p&gt; &#xA;&lt;p&gt;Today we provide 1,000+ controls and frameworks for web (&lt;a href=&#34;https://www.syncfusion.com/aspnet-core-ui-controls&#34;&gt;ASP.NET Core&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/aspnet-mvc-ui-controls&#34;&gt;ASP.NET MVC&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/jquery/aspnet-web-forms-ui-controls&#34;&gt;ASP.NET WebForms&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/javascript-ui-controls&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/angular-ui-components&#34;&gt;Angular&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/react-ui-components&#34;&gt;React&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/vue-ui-components&#34;&gt;Vue&lt;/a&gt;, and &lt;a href=&#34;https://www.syncfusion.com/blazor-components&#34;&gt;Blazor&lt;/a&gt;, mobile (&lt;a href=&#34;https://www.syncfusion.com/xamarin-ui-controls&#34;&gt;Xamarin&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/flutter-widgets&#34;&gt;Flutter&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/uwp-ui-controls&#34;&gt;UWP&lt;/a&gt;, and &lt;a href=&#34;https://www.syncfusion.com/javascript-ui-controls&#34;&gt;JavaScript&lt;/a&gt;), and desktop development (&lt;a href=&#34;https://www.syncfusion.com/winforms-ui-controls&#34;&gt;WinForms&lt;/a&gt;, &lt;a href=&#34;https://www.syncfusion.com/wpf-ui-controls&#34;&gt;WPF&lt;/a&gt;, and &lt;a href=&#34;https://www.syncfusion.com/uwp-ui-controls&#34;&gt;UWP&lt;/a&gt; and &lt;a href=&#34;https://www.syncfusion.com/winui-controls&#34;&gt;WinUI&lt;/a&gt;). We provide ready-to deploy enterprise software for dashboards, reports, data integration, and big data processing. Many customers have saved millions in licensing fees by deploying our software.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>isar/isar</title>
    <updated>2022-06-03T01:36:54Z</updated>
    <id>tag:github.com,2022-06-03:/isar/isar</id>
    <link href="https://github.com/isar/isar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Super Fast Cross Platform Database for Flutter Apps&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://isar.dev&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/isar/isar/main/.github/assets/isar.svg?sanitize=true&#34; height=&#34;128&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Isar Database&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/isar&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/isar?label=pub.dev&amp;amp;labelColor=333940&amp;amp;logo=dart&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/isar/isar/actions/workflows/test.yml&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/isar/isar/Dart%20CI/main?label=tests&amp;amp;labelColor=333940&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://t.me/isardb&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=join&amp;amp;message=isardb&amp;amp;labelColor=333940&amp;amp;logo=telegram&amp;amp;logoColor=white&amp;amp;color=229ED9&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/isar/isar/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/isar/isar?color=%23007A88&amp;amp;labelColor=333940&amp;amp;logo=apache&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/simonleier&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/simonleier?style=flat&amp;amp;label=Follow&amp;amp;color=1DA1F2&amp;amp;labelColor=333940&amp;amp;logo=twitter&amp;amp;logoColor=fff&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://isar.dev&#34;&gt;Quickstart&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://isar.dev/schema&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/isar/samples&#34;&gt;Sample Apps&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/isar/isar/discussions&#34;&gt;Support &amp;amp; Ideas&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://pub.dev/packages/isar&#34;&gt;Pub.dev&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h4&gt;Isar [ee-zahr]:&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;River in Bavaria, Germany.&lt;/li&gt; &#xA;  &lt;li&gt;Database that will make your life easier.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üíô &lt;strong&gt;Made for Flutter&lt;/strong&gt;. Easy to use, no config, no boilerplate&lt;/li&gt; &#xA; &lt;li&gt;üöÄ &lt;strong&gt;Highly scalable&lt;/strong&gt; The sky is the limit (pun intended)&lt;/li&gt; &#xA; &lt;li&gt;üç≠ &lt;strong&gt;Feature rich&lt;/strong&gt;. Composite &amp;amp; multi-entry indexes, query modifiers, JSON support etc.&lt;/li&gt; &#xA; &lt;li&gt;‚è± &lt;strong&gt;Asynchronous&lt;/strong&gt;. Parallel query operations &amp;amp; multi-isolate support by default&lt;/li&gt; &#xA; &lt;li&gt;ü¶Ñ &lt;strong&gt;Open source&lt;/strong&gt;. Everything is open source and free forever!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Isar can do much more (and we are just getting started)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üïµÔ∏è &lt;strong&gt;Full-text search&lt;/strong&gt;. Make searching fast and fun&lt;/li&gt; &#xA; &lt;li&gt;üì± &lt;strong&gt;Multiplatform&lt;/strong&gt;. iOS, Android, Desktop and FULL WEB SUPPORT!&lt;/li&gt; &#xA; &lt;li&gt;üß™ &lt;strong&gt;ACID semantics&lt;/strong&gt;. Rely on consistency&lt;/li&gt; &#xA; &lt;li&gt;üíÉ &lt;strong&gt;Static typing&lt;/strong&gt;. Compile-time checked and autocompleted queries&lt;/li&gt; &#xA; &lt;li&gt;‚ú® &lt;strong&gt;Beautiful documentation&lt;/strong&gt;. Readable, easy to understand and ever improving&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://t.me/isardb&#34;&gt;Telegram group&lt;/a&gt; for discussion and check out the &lt;a href=&#34;https://github.com/isar/isar/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; doc.&lt;/p&gt; &#xA;&lt;p&gt;If you want to say thank you, star us on GitHub and like us on pub.dev üôåüíô&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Holy smokes you&#39;re here! Let&#39;s get started...&lt;/p&gt; &#xA;&lt;h3&gt;1. Add to pubspec.yaml&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  isar: 3.0.0-dev.0&#xA;  isar_flutter_libs: 3.0.0-dev.0 # contains the binaries&#xA;&#xA;dev_dependencies:&#xA;  isar_generator: 3.0.0-dev.0&#xA;  build_runner: any&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Annotate a Collection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;part &#39;post.g.dart&#39;;&#xA;&#xA;@Collection()&#xA;class Post {&#xA;  int id = Isar.autoIncrement;&#xA;&#xA;  late String title;&#xA;&#xA;  late DateTime date;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Open an instance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final dir = await getApplicationSupportDirectory(); // path_provider package&#xA;final isar = await Isar.open(&#xA;  schemas: [PostSchema],&#xA;  directory: dir.path,&#xA;  inspector: true, // if you want to enable the inspector for debug builds&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Query the database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final posts = await isar.posts.filter()&#xA;  .titleContains(&#39;awesome&#39;, caseSensitive: false)&#xA;  .sortByDateDesc()&#xA;  .limit(10)&#xA;  .findAll();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Isar Inspector&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/isar/isar/releases/latest&#34;&gt;Isar Inspector&lt;/a&gt; allows you to inspect the Isar instances &amp;amp; collections of your app in real time. You can execute queries, switch between instances and sort the data.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/isar/isar/main/.github/assets/isar-inspector.png?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;CRUD operations&lt;/h2&gt; &#xA;&lt;p&gt;All basic crud operations are available via the IsarCollection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final newPost = Post()..title = &#39;Amazing new database&#39;;&#xA;&#xA;await isar.writeTxn(() {&#xA;  newPost.id = await isar.posts.put(newPost); // insert &amp;amp; update&#xA;});&#xA;&#xA;final existingPost = await isar.posts.get(newPost.id!); // get&#xA;&#xA;await isar.writeTxn(() {&#xA;  await isar.posts.delete(existingPost.id!); // delete&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Queries&lt;/h2&gt; &#xA;&lt;p&gt;Isar has a powerful query language that allows you to make use of your indexes, filter distinct objects, use complex &lt;code&gt;and()&lt;/code&gt; and &lt;code&gt;or()&lt;/code&gt; groups, query links and sort the results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final usersWithPrefix = isar.users&#xA;  .where()&#xA;  .nameStartsWith(&#39;dan&#39;) // use index&#xA;  .limit(10)&#xA;  .findAll()&#xA;&#xA;final usersLivingInMunich = isar.users&#xA;  .filter()&#xA;  .ageGreaterThan(32)&#xA;  .or()&#xA;  .addressMatches(&#39;*Munich*&#39;, caseSensitive: false) // address containing &#39;munich&#39; (case insensitive)&#xA;  .optional(&#xA;    shouldSort, // only apply if shouldSort == true&#xA;    (q) =&amp;gt; q.sortedByAge(),&#xA;  )&#xA;  .findAll()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;You can easily define relationships between objects. In Isar they are called links and backlinks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@Collection()&#xA;class Teacher {&#xA;    int? id;&#xA;&#xA;    late String subject;&#xA;&#xA;    @Backlink(to: &#39;teacher&#39;)&#xA;    final students = IsarLinks&amp;lt;Student&amp;gt;();&#xA;}&#xA;&#xA;@Collection()&#xA;class Student {&#xA;    int? id;&#xA;&#xA;    late String name;&#xA;&#xA;    final teacher = IsarLink&amp;lt;Teacher&amp;gt;();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Watchers&lt;/h2&gt; &#xA;&lt;p&gt;With Isar, you can watch Collections, Objects, or Queries. A watcher is notified after a transaction commits successfully and the target actually changes. Watchers can be lazy and not reload the data or they can be non-lazy and fetch new results in the background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Stream&amp;lt;void&amp;gt; collectionStream = isar.posts.watchLazy;&#xA;&#xA;Stream&amp;lt;List&amp;lt;Post&amp;gt;&amp;gt; queryStream = databasePosts.watch();&#xA;&#xA;queryStream.listen((newResult) {&#xA;  // do UI updates&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bechmarks&lt;/h2&gt; &#xA;&lt;p&gt;Benchmarks only give a rough idea of the performance of a database but as you can see, Isar is quite fast üòá&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/isar/isar/main/.github/assets/benchmarks/insert.png&#34; width=&#34;100%&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/isar/isar/main/.github/assets/benchmarks/query.png&#34; width=&#34;100%&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/isar/isar/main/.github/assets/benchmarks/delete.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/isar/isar/main/.github/assets/benchmarks/size.png&#34; width=&#34;100%&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you are interested in more benchmarks or check how Isar performs on your device you can run the &lt;a href=&#34;https://github.com/isar/isar_benchmark&#34;&gt;benchmarks&lt;/a&gt; yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Unit tests&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use Isar in unit tests or Dart code, call &lt;code&gt;await Isar.initializeIsarCore(download: true)&lt;/code&gt; before using Isar in your tests.&lt;/p&gt; &#xA;&lt;p&gt;Isar will automatically download the correct binary for your platform. You can also pass a &lt;code&gt;libraries&lt;/code&gt; map to adjust the download location for each platform.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to use &lt;code&gt;flutter test -j 1&lt;/code&gt; to avoid tests running in parallel. This would break the automatic download.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Simon Leier&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>