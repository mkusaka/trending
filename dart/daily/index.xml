<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:39:00Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iampawan/VelocityX</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/iampawan/VelocityX</id>
    <link href="https://github.com/iampawan/VelocityX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimalist Flutter framework for rapidly building Flutter apps.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://velocityx.dev/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://i.imgur.com/GcsbeIW.png&#34; width=&#34;800&#34; alt=&#34;VelocityX&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;a href=&#34;https://www.producthunt.com/posts/velocityx?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-velocityx&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=289488&amp;amp;theme=light&#34; alt=&#34;VelocityX - A minimalist Flutter framework | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iampawan/velocityx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/velocityx-fast-red&#34; alt=&#34;VelocityX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/velocity_x&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/velocity_x.svg?style=flat-square&#34; alt=&#34;Pub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iampawan/velocityx&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/iampawan/velocityx.svg?style=flat-square&#34; alt=&#34;GitHub Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iampawan/velocityx/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/iampawan/velocityx.svg?style=flat-square&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/iampawan/velocityx&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/top/iampawan/velocityx.svg?style=flat-square&#34; alt=&#34;GitHub top language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/velocity_x/score&#34;&gt;&lt;img src=&#34;https://badges.bar/velocity_x/likes&#34; alt=&#34;Likes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/velocity_x/score&#34;&gt;&lt;img src=&#34;https://badges.bar/velocity_x/popularity&#34; alt=&#34;Popularity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/9tXYvNq&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/746087597759004835.svg?logo=discord&amp;amp;color=blue&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Show some &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; and star the repo.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iampawan/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/iampawan.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;GitHub followers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/imthepk&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/imthepk.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://badges.frapsoft.com/os/v1/open-source.svg?v=102&#34; alt=&#34;Open Source Love&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://vx-demo.web.app/&#34;&gt;Demo App&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://codepur.dev/&#34;&gt;Subscribe to Codepur&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://velocityx.dev/&#34;&gt;&lt;strong&gt;VelocityX&lt;/strong&gt;&lt;/a&gt; is a 100% free Flutter open-source minimalist UI Framework built with &lt;a href=&#34;https://flutter.dev/&#34; target=&#34;_blank&#34;&gt;Flutter SDK&lt;/a&gt; to make Flutter development easier and more joyful than ever.&lt;/p&gt; &#xA;&lt;h2&gt;Inspired from Tailwindcss and SwiftUI.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#34;Welcome to VelocityX&#34;.text.white.xl4.bold.center.makeCentered().box.roundedLg.red500.shadow2xl.make().whHalf(context).centered();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;In the &lt;code&gt;pubspec.yaml&lt;/code&gt; of your flutter project, add the following dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  ...&#xA;  velocity_x: &amp;lt;latest_version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your library add the following import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:velocity_x/velocity_x.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For help getting started with Flutter, view the online &lt;a href=&#34;https://velocityx.dev/docs/install&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;üìå &amp;nbsp; Bulletin&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now supports null-safety&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IOhJCN4T1V4&amp;amp;list=PLR2qQy0Zxs_UHLXSYbK50jEapx0ORmLYv&#34;&gt;Video Tutorials on YouTube&lt;/a&gt; for updates &amp;amp; walk through videos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/9tXYvNq&#34;&gt;Join the discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why use VelocityX?&lt;/h2&gt; &#xA;&lt;p&gt;VelocityX is known for :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Vx&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Vx&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;100% fast, performant &amp;amp; compatible&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;100% free &amp;amp; open-source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;100% ready for production&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;200% faster for writing UIs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/vxstate/getting_started&#34;&gt;State Management&lt;/a&gt; &lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/vxnavigator/getting_started&#34;&gt;Navigator 2.0&lt;/a&gt;&lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/install&#34;&gt;Custom UIs&lt;/a&gt;&lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/shapes/vxcircle&#34;&gt;Custom Shapes&lt;/a&gt;&lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/supervx/vxswiper&#34;&gt;Super VX&lt;/a&gt;&lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/extensions/context&#34;&gt;Extension Methods&lt;/a&gt;&lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/features/responsive&#34;&gt;Responsive Layout&lt;/a&gt;&lt;br&gt; ‚úÖ &amp;nbsp; &lt;a href=&#34;https://velocityx.dev/docs/colors&#34;&gt;Color Palette&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://velocityx.dev/docs/install&#34;&gt;Getting started page of VelocityX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VelocityX Video Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLR2qQy0Zxs_UHLXSYbK50jEapx0ORmLYv&#34;&gt;Watch here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/mtechviral&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Some popular Super Vx widgets&lt;/h2&gt; &#xA;&lt;p&gt;| &lt;a href=&#34;https://velocityx.dev/docs/shapes/vxcircle&#34;&gt;VxShapes&lt;/a&gt; | &lt;a href=&#34;https://velocityx.dev/docs/supervx/vxswiper&#34;&gt;VxSwiper&lt;/a&gt; | &lt;a href=&#34;https://velocityx.dev/docs/features/responsive&#34;&gt;VxResponsive&lt;/a&gt; | &lt;a href=&#34;https://velocityx.dev/docs/supervx/vxplatform&#34;&gt;VxPlatform&lt;/a&gt; | &lt;a href=&#34;https://velocityx.dev/docs/supervx/vxtoast&#34;&gt;VxToast&lt;/a&gt; | &lt;a href=&#34;https://velocityx.dev/docs/supervx/vxrating&#34;&gt;VxRating&lt;/a&gt; | &lt;a href=&#34;https://velocityx.dev/docs/supervx/vxstepper&#34;&gt;VxStepper&lt;/a&gt; |&lt;/p&gt; &#xA;&lt;h2&gt;Some Quick UIs made using VelocityX&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://i.imgur.com/DlSuaOG.png&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://i.imgur.com/JZ9tOoy.png&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://i.imgur.com/JFpw795.png&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://i.imgur.com/nuGnpG1.png&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://i.imgur.com/DlSuaOG.png&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://i.imgur.com/41kZ4Hd.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;VelocityX is &lt;strong&gt;100% free&lt;/strong&gt; and &lt;strong&gt;open source&lt;/strong&gt;. We encourage and support an active, healthy community that accepts contributions from the public ‚Äì including you. There are a couple of ways in which you can contribute to the growing community of &lt;code&gt;VelocityX&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pick up any issue marked with &lt;a href=&#34;https://github.com/iampawan/velocityx/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;&#34;good first issue&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix a bug&lt;/li&gt; &#xA; &lt;li&gt;Write and improve some &lt;strong&gt;documentation&lt;/strong&gt;. Documentation is very critical to us. We would appreciate help in adding multiple languages to our docs.&lt;/li&gt; &#xA; &lt;li&gt;If you are a developer, feel free to check out the source and submit pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Dig into &lt;a href=&#34;https://raw.githubusercontent.com/iampawan/VelocityX/stable/CONTRIBUTING.md&#34;&gt;&lt;strong&gt;CONTRIBUTING.MD&lt;/strong&gt;&lt;/a&gt;, which covers submitting bugs, requesting new features, preparing your code for a pull request, etc.&lt;/li&gt; &#xA; &lt;li&gt;Please don&#39;t forget to &lt;strong&gt;like&lt;/strong&gt;, &lt;strong&gt;follow&lt;/strong&gt;, and &lt;strong&gt;star our repo&lt;/strong&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://velocityx.dev/docs/install&#34;&gt;&lt;strong&gt;Installation Guide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;‚ù§Ô∏è&lt;/span&gt; Found this project useful?&lt;/h3&gt; &#xA;&lt;p&gt;If you found this project useful, then please consider giving it a &lt;span&gt;‚≠ê&lt;/span&gt; on Github and sharing it with your friends via social media.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;YouTube Channel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/hellocodepur&#34;&gt;Codepur&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.youtube.com/hindicodepur&#34;&gt;Codepur Hindi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Facebook Group&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/groups/425920117856409/&#34;&gt;Let&#39;s Flutter With Dart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Collection of flutter apps with tutorial&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iampawan/FlutterExampleApps&#34;&gt;Flutter Example Apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Project Created &amp;amp; Maintained By&lt;/h2&gt; &#xA;&lt;h3&gt;Pawan Kumar&lt;/h3&gt; &#xA;&lt;p&gt;Google Developer Expert for Flutter. Passionate #Flutter, #Android Developer. #Entrepreneur #YouTuber&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/dev?id=7703305844118303242&amp;amp;hl=en&#34;&gt;&lt;img src=&#34;https://github.com/aritraroy/social-icons/raw/master/play-store-icon.png?raw=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://medium.com/@imthepk&#34;&gt;&lt;img src=&#34;https://github.com/aritraroy/social-icons/raw/master/medium-icon.png?raw=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/imthepk&#34;&gt;&lt;img src=&#34;https://github.com/aritraroy/social-icons/raw/master/twitter-icon.png?raw=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://linkedin.com/in/imthepk&#34;&gt;&lt;img src=&#34;https://github.com/aritraroy/social-icons/raw/master/linkedin-icon.png?raw=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://facebook.com/imthepk&#34;&gt;&lt;img src=&#34;https://github.com/aritraroy/social-icons/raw/master/facebook-icon.png?raw=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://instagram.com/codepur_ka_superhero&#34;&gt;&lt;img src=&#34;https://github.com/aritraroy/social-icons/raw/master/instagram-icon.png?raw=true&#34; width=&#34;60&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you found this project helpful or you learned something from the source code and want to thank me, consider buying me a cup of &lt;span&gt;‚òï&lt;/span&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.paypal.me/imthepk/&#34;&gt;PayPal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Note: VelocityX is not directly and/or indirectly associated/affiliated with Flutter or Google LLC.&lt;/h3&gt; &#xA;&lt;h2&gt;Active Contributors&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ayush Bherwani&lt;/li&gt; &#xA; &lt;li&gt;Hasnen Tai&lt;/li&gt; &#xA; &lt;li&gt;Harpreet Singh&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Copyright-and-license&lt;/h2&gt; &#xA;&lt;p&gt;Code and documentation Copyright 2020 &lt;a href=&#34;https://pawan.live&#34;&gt;Pawan Kumar&lt;/a&gt;. Code released under the &lt;a href=&#34;https://raw.githubusercontent.com/iampawan/VelocityX/stable/LICENSE&#34;&gt;Apache License&lt;/a&gt;. Docs released under &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard</id>
    <link href="https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Responsive Admin Panel or Dashboard using Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Responsive Admin Panel or Dashboard - Flutter UI&lt;/h1&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/#contributors-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/all_contributors-3-orange.svg?style=flat-square&#34; alt=&#34;All Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-BADGE:END --&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://abuanwar072.github.io/Flutter-Responsive-Admin-Panel-or-Dashboard/#/&#34;&gt;Live Preview&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packages we are using:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flutter_svg: &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;google_fonts: &lt;a href=&#34;https://pub.dev/packages/google_fonts&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;provider: &lt;a href=&#34;https://pub.dev/packages/provider&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fonts&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Poppins &lt;a href=&#34;https://fonts.google.com/specimen/Poppins&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtu.be/_uOgXpEHNbc&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;On Flutter V2.* web officially supported on a stable branch. Today I share an Admin panel or you can call it dashboard UI build with flutter. Now you can build your app dashboard using flutter. This dashboard contains almost everything that you need like a chart, table, nice small card for showing info. It works perfectly on the Web, macOS app, Tablet also on both Android and iOS phones. It&#39;s time to code once run everywhere. Yeah, Flutter web is not SEO friendly but we don&#39;t need SEO for the admin panel.&lt;/p&gt; &#xA;&lt;h3&gt;Responsive Admin Panel or Dashboard Final UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/gif.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/ui.png&#34; alt=&#34;App UI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ‚ú®&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/simon1tan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1250858?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Simon Tan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/issues?q=author%3Asimon1tan&#34; title=&#34;Bug reports&#34;&gt;üêõ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gillescoolen&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/31668393?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Gilles&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/issues?q=author%3Agillescoolen&#34; title=&#34;Bug reports&#34;&gt;üêõ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/RounakTadvi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/38634459?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rounak Tadvi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/master/#maintenance-RounakTadvi&#34; title=&#34;Maintenance&#34;&gt;üöß&lt;/a&gt; &lt;a href=&#34;https://github.com/abuanwar072/Flutter-Responsive-Admin-Panel-or-Dashboard/commits?author=RounakTadvi&#34; title=&#34;Code&#34;&gt;üíª&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pauldemarco/flutter_blue</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/pauldemarco/flutter_blue</id>
    <link href="https://github.com/pauldemarco/flutter_blue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bluetooth plugin for Flutter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_blue&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_blue.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Yk5Efra&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/634853295160033301.svg?style=flat-square&amp;amp;colorB=758ED3&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;FlutterBlue&#34; src=&#34;https://github.com/pauldemarco/flutter_blue/raw/master/site/flutterblue.png?raw=true&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBlue is a bluetooth plugin for &lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt;, a new app SDK to help developers build modern multi-platform apps.&lt;/p&gt; &#xA;&lt;h2&gt;Alpha version&lt;/h2&gt; &#xA;&lt;p&gt;This library is actively developed alongside production apps, and the API will evolve as we continue our way to version 1.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please be fully prepared to deal with breaking changes.&lt;/strong&gt; &lt;strong&gt;This package must be tested on a real device.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Having trouble adapting to the latest API? I&#39;d love to hear your use-case, please contact me.&lt;/p&gt; &#xA;&lt;h2&gt;Cross-Platform Bluetooth LE&lt;/h2&gt; &#xA;&lt;p&gt;FlutterBlue aims to offer the most from both platforms (iOS and Android).&lt;/p&gt; &#xA;&lt;p&gt;Using the FlutterBlue instance, you can scan for and connect to nearby devices (&lt;a href=&#34;https://raw.githubusercontent.com/pauldemarco/flutter_blue/master/#bluetoothdevice-api&#34;&gt;BluetoothDevice&lt;/a&gt;). Once connected to a device, the BluetoothDevice object can discover services (&lt;a href=&#34;https://raw.githubusercontent.com/pauldemarco/flutter_blue/master/lib/src/bluetooth_service.dart&#34;&gt;BluetoothService&lt;/a&gt;), characteristics (&lt;a href=&#34;https://raw.githubusercontent.com/pauldemarco/flutter_blue/master/lib/src/bluetooth_characteristic.dart&#34;&gt;BluetoothCharacteristic&lt;/a&gt;), and descriptors (&lt;a href=&#34;https://raw.githubusercontent.com/pauldemarco/flutter_blue/master/lib/src/bluetooth_descriptor.dart&#34;&gt;BluetoothDescriptor&lt;/a&gt;). The BluetoothDevice object is then used to directly interact with characteristics and descriptors.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Obtain an instance&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlutterBlue flutterBlue = FlutterBlue.instance;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan for devices&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Start scanning&#xA;flutterBlue.startScan(timeout: Duration(seconds: 4));&#xA;&#xA;// Listen to scan results&#xA;var subscription = flutterBlue.scanResults.listen((results) {&#xA;    // do something with scan results&#xA;    for (ScanResult r in results) {&#xA;        print(&#39;${r.device.name} found! rssi: ${r.rssi}&#39;);&#xA;    }&#xA;});&#xA;&#xA;// Stop scanning&#xA;flutterBlue.stopScan();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connect to a device&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Connect to the device&#xA;await device.connect();&#xA;&#xA;// Disconnect from device&#xA;device.disconnect();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discover services&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;BluetoothService&amp;gt; services = await device.discoverServices();&#xA;services.forEach((service) {&#xA;    // do something with service&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read and write characteristics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Reads all characteristics&#xA;var characteristics = service.characteristics;&#xA;for(BluetoothCharacteristic c in characteristics) {&#xA;    List&amp;lt;int&amp;gt; value = await c.read();&#xA;    print(value);&#xA;}&#xA;&#xA;// Writes to a characteristic&#xA;await c.write([0x12, 0x34])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read and write descriptors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Reads all descriptors&#xA;var descriptors = characteristic.descriptors;&#xA;for(BluetoothDescriptor d in descriptors) {&#xA;    List&amp;lt;int&amp;gt; value = await d.read();&#xA;    print(value);&#xA;}&#xA;&#xA;// Writes to a descriptor&#xA;await d.write([0x12, 0x34])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set notifications and listen to changes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await characteristic.setNotifyValue(true);&#xA;characteristic.value.listen((value) {&#xA;    // do something with new value&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read the MTU and request larger size&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final mtu = await device.mtu.first;&#xA;await device.requestMtu(512);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that iOS will not allow requests of MTU size, and will always try to negotiate the highest possible MTU (iOS supports up to MTU size 185)&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Change the minSdkVersion for Android&lt;/h3&gt; &#xA;&lt;p&gt;Flutter_blue is compatible only from version 19 of Android SDK so you should change this in &lt;strong&gt;android/app/build.gradle&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Android {&#xA;  defaultConfig {&#xA;     minSdkVersion: 19&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add permissions for Bluetooth&lt;/h3&gt; &#xA;&lt;p&gt;We need to add the permission to use Bluetooth and access location:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;android/app/src/main/AndroidManifest.xml&lt;/strong&gt; let‚Äôs add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#x9; &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; /&amp;gt;  &#xA;&#x9; &amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_ADMIN&#34; /&amp;gt;  &#xA;&#x9; &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34;/&amp;gt;  &#xA; &amp;lt;application&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;IOS&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In the &lt;strong&gt;ios/Runner/Info.plist&lt;/strong&gt; let‚Äôs add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#x9;&amp;lt;dict&amp;gt;  &#xA;&#x9;    &amp;lt;key&amp;gt;NSBluetoothAlwaysUsageDescription&amp;lt;/key&amp;gt;  &#xA;&#x9;    &amp;lt;string&amp;gt;Need BLE permission&amp;lt;/string&amp;gt;  &#xA;&#x9;    &amp;lt;key&amp;gt;NSBluetoothPeripheralUsageDescription&amp;lt;/key&amp;gt;  &#xA;&#x9;    &amp;lt;string&amp;gt;Need BLE permission&amp;lt;/string&amp;gt;  &#xA;&#x9;    &amp;lt;key&amp;gt;NSLocationAlwaysAndWhenInUseUsageDescription&amp;lt;/key&amp;gt;  &#xA;&#x9;    &amp;lt;string&amp;gt;Need Location permission&amp;lt;/string&amp;gt;  &#xA;&#x9;    &amp;lt;key&amp;gt;NSLocationAlwaysUsageDescription&amp;lt;/key&amp;gt;  &#xA;&#x9;    &amp;lt;string&amp;gt;Need Location permission&amp;lt;/string&amp;gt;  &#xA;&#x9;    &amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;  &#xA;&#x9;    &amp;lt;string&amp;gt;Need Location permission&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For location permissions on iOS see more at: &lt;a href=&#34;https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services&#34;&gt;https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;FlutterBlue API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scan&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starts a scan for Bluetooth Low Energy devices.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;state&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of state changes for the Bluetooth Adapter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isAvailable&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks whether the device supports Bluetooth.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;isOn&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks if Bluetooth functionality is turned on.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothDevice API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;connect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Establishes a connection to the device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;disconnect&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cancels an active or pending connection to the device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;discoverServices&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discovers services offered by the remote device as well as their characteristics and descriptors.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;services&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gets a list of services. Requires that discoverServices() has completed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;state&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of state changes for the Bluetooth Device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mtu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of mtu size changes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;requestMtu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Request to change the MTU for the device.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothCharacteristic API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves the value of the characteristic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes the value of the characteristic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;setNotifyValue&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets notifications or indications on the characteristic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;value&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Stream of characteristic&#39;s value when changed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;BluetoothDescriptor API&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;read&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves the value of the descriptor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;write&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes the value of the descriptor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;When I scan using a service UUID filter, it doesn&#39;t find any devices.&lt;/h3&gt; &#xA;&lt;p&gt;Make sure the device is advertising which service UUID&#39;s it supports. This is found in the advertisement packet as &lt;strong&gt;UUID 16 bit complete list&lt;/strong&gt; or &lt;strong&gt;UUID 128 bit complete list&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>singerdmx/flutter-quill</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/singerdmx/flutter-quill</id>
    <link href="https://github.com/singerdmx/flutter-quill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rich text editor for Flutter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/10923085/119221946-2de89000-baf2-11eb-8285-68168a78c658.png&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;A rich text editor for Flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/singerdmx/flutter-quill.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=for-the-badge&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/singerdmx/flutter-quill.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Watch on GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FlutterQuill is a rich text editor and a &lt;a href=&#34;https://quilljs.com/docs/formats&#34;&gt;Quill&lt;/a&gt; component for &lt;a href=&#34;https://github.com/flutter/flutter&#34;&gt;Flutter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library is a WYSIWYG editor built for the modern mobile platform, with web compatibility under development. Check out our &lt;a href=&#34;https://youtube.com/playlist?list=PLbhaS_83B97vONkOAWGJrSXWX58et9zZ2&#34;&gt;Youtube Playlist&lt;/a&gt; to take a detailed walkthrough of the code base. You can join our &lt;a href=&#34;https://join.slack.com/t/bulletjournal1024/shared_invite/zt-fys7t9hi-ITVU5PGDen1rNRyCjdcQ2g&#34;&gt;Slack Group&lt;/a&gt; for discussion.&lt;/p&gt; &#xA;&lt;p&gt;Demo App: &lt;a href=&#34;https://bulletjournal.us/home/index.html&#34;&gt;https://bulletjournal.us/home/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pub: &lt;a href=&#34;https://pub.dev/packages/flutter_quill&#34;&gt;https://pub.dev/packages/flutter_quill&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;example&lt;/code&gt; directory for a minimal example of how to use FlutterQuill. You typically just need to instantiate a controller:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;QuillController _controller = QuillController.basic();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then embed the toolbar and the editor, within your app. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Column(&#xA;  children: [&#xA;    QuillToolbar.basic(controller: _controller),&#xA;    Expanded(&#xA;      child: Container(&#xA;        child: QuillEditor.basic(&#xA;          controller: _controller,&#xA;          readOnly: false, // true for view only mode&#xA;        ),&#xA;      ),&#xA;    )&#xA;  ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart&#34;&gt;Sample Page&lt;/a&gt; for advanced usage.&lt;/p&gt; &#xA;&lt;h2&gt;Input / Output&lt;/h2&gt; &#xA;&lt;p&gt;This library uses &lt;a href=&#34;https://quilljs.com/docs/formats&#34;&gt;Quill&lt;/a&gt; as an internal data format.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;_controller.document.toDelta()&lt;/code&gt; to extract the deltas.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;_controller.document.toPlainText()&lt;/code&gt; to extract plain text.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FlutterQuill provides some JSON serialisation support, so that you can save and open documents. To save a document as JSON, do something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var json = jsonEncode(_controller.document.toDelta().toJson());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then write this to storage.&lt;/p&gt; &#xA;&lt;p&gt;To open a FlutterQuill editor with an existing JSON representation that you&#39;ve previously stored, you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var myJSON = jsonDecode(incomingJSONText);&#xA;_controller = QuillController(&#xA;          document: Document.fromJson(myJSON),&#xA;          selection: TextSelection.collapsed(offset: 0));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;QuillToolbar&lt;/code&gt; class lets you customise which formatting options are available. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart&#34;&gt;Sample Page&lt;/a&gt; provides sample code for advanced usage and configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Font Size&lt;/h3&gt; &#xA;&lt;p&gt;Within the editor toolbar, a drop-down with font-sizing capabilities is available. This can be enabled or disabled with &lt;code&gt;showFontSize&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When enabled, the default font-size values can be modified via &lt;em&gt;optional&lt;/em&gt; &lt;code&gt;fontSizeValues&lt;/code&gt;. &lt;code&gt;fontSizeValues&lt;/code&gt; accepts a &lt;code&gt;Map&amp;lt;String, String&amp;gt;&lt;/code&gt; consisting of a &lt;code&gt;String&lt;/code&gt; title for the font size and a &lt;code&gt;String&lt;/code&gt; value for the font size. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fontSizeValues: const {&#39;Small&#39;: &#39;8&#39;, &#39;Medium&#39;: &#39;24.5&#39;, &#39;Large&#39;: &#39;46&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Font size can be cleared with a value of &lt;code&gt;0&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fontSizeValues: const {&#39;Small&#39;: &#39;8&#39;, &#39;Medium&#39;: &#39;24.5&#39;, &#39;Large&#39;: &#39;46&#39;, &#39;Clear&#39;: &#39;0&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Icons&lt;/h3&gt; &#xA;&lt;p&gt;You may add custom icons to the &lt;em&gt;end&lt;/em&gt; of the toolbar, via the &lt;code&gt;customIcons&lt;/code&gt; option, which is a &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;QuillCustomIcon&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add an Icon, we should use a new QuillCustomIcon class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    QuillCustomIcon(&#xA;        icon:Icons.ac_unit,&#xA;        onTap: () {&#xA;          debugPrint(&#39;snowflake&#39;);&#xA;        }&#xA;    ),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &lt;code&gt;QuillCustomIcon&lt;/code&gt; is used as part of the &lt;code&gt;customIcons&lt;/code&gt; option as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;QuillToolbar.basic(&#xA;   (...),&#xA;    customIcons: [&#xA;        QuillCustomIcon(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake1&#39;);&#xA;            }&#xA;        ),&#xA;&#xA;        QuillCustomIcon(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake2&#39;);&#xA;            }&#xA;        ),&#xA;&#xA;        QuillCustomIcon(&#xA;            icon:Icons.ac_unit,&#xA;            onTap: () {&#xA;              debugPrint(&#39;snowflake3&#39;);&#xA;            }&#xA;        ),&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;For web development, use &lt;code&gt;flutter config --enable-web&lt;/code&gt; for flutter or use &lt;a href=&#34;https://github.com/zenoamaro/react-quill&#34;&gt;ReactQuill&lt;/a&gt; for React.&lt;/p&gt; &#xA;&lt;p&gt;It is required to provide &lt;code&gt;EmbedBuilder&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/universal_ui/universal_ui.dart#L28&#34;&gt;defaultEmbedBuilderWeb&lt;/a&gt;. Also it is required to provide &lt;code&gt;webImagePickImpl&lt;/code&gt;, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart#L218&#34;&gt;Sample Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Desktop&lt;/h2&gt; &#xA;&lt;p&gt;It is required to provide &lt;code&gt;filePickImpl&lt;/code&gt; for toolbar image button, e.g. &lt;a href=&#34;https://github.com/singerdmx/flutter-quill/raw/master/example/lib/pages/home_page.dart#L198&#34;&gt;Sample Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Size Image for Mobile&lt;/h2&gt; &#xA;&lt;p&gt;Define &lt;code&gt;mobileWidth&lt;/code&gt;, &lt;code&gt;mobileHeight&lt;/code&gt;, &lt;code&gt;mobileMargin&lt;/code&gt;, &lt;code&gt;mobileAlignment&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;      &#34;insert&#34;: {&#xA;         &#34;image&#34;: &#34;https://user-images.githubusercontent.com/122956/72955931-ccc07900-3d52-11ea-89b1-d468a6e2aa2b.png&#34;&#xA;      },&#xA;      &#34;attributes&#34;:{&#xA;         &#34;style&#34;:&#34;mobileWidth: 50; mobileHeight: 50; mobileMargin: 10; mobileAlignment: topLeft&#34;&#xA;      }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;The package offers translations for the quill toolbar and editor, it will follow the system locale unless you set your own locale with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;QuillToolbar(locale: Locale(&#39;fr&#39;), ...)&#xA;QuillEditor(locale: Locale(&#39;fr&#39;), ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, translations are available for these 19 locales:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;en&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ar&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;de&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;da&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;fr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;zh&#39;, &#39;CN&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ko&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ru&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;es&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;tr&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;uk&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;ur&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;pt&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;pl&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;vi&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;id&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;no&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;fa&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Locale(&#39;hi&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing to translations&lt;/h3&gt; &#xA;&lt;p&gt;The translation file is located at &lt;a href=&#34;https://raw.githubusercontent.com/singerdmx/flutter-quill/master/lib/src/translations/toolbar.i18n.dart&#34;&gt;lib/src/translations/toolbar.i18n.dart&lt;/a&gt;. Feel free to contribute your own translations, just copy the English translations map and replace the values with your translations. Then open a pull request so everyone can benefit from your translations!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/103142422-9bb19c80-46b7-11eb-83e4-dd0538a9236e.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/103142455-0531ab00-46b8-11eb-89f8-26a77de9227f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/102963021-f28f5a00-449c-11eb-8f5f-6e9dd60844c4.png&#34;&gt; &lt;img width=&#34;400&#34; alt=&#34;1&#34; src=&#34;https://user-images.githubusercontent.com/122956/102977404-c9c88e00-44b7-11eb-9423-b68f3b30b0e0.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://bulletjournal.us/home/index.html&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/122956/72955931-ccc07900-3d52-11ea-89b1-d468a6e2aa2b.png&#34; width=&#34;150px&#34; height=&#34;150px&#34;&gt;&lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>dengyin2000/dynamic_widget</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/dengyin2000/dynamic_widget</id>
    <link href="https://github.com/dengyin2000/dynamic_widget" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Backend-Driven UI toolkit, build your dynamic UI with json, and the json format is very similar with flutter widget code.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/dynamic_widget&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dynamic_widget.svg?color=orange&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt; &lt;img alt=&#34;Awesome Flutter&#34; src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Flutter Dynamic Widget&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A Backend-Driven UI toolkit, build your dynamic UI with json, and the json format is very similar with flutter widget code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;From 4.0.0-nullsafety.1 version, it supports null-safety.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;From 3.0.0 version, it supports exporting your flutter code to json code. please check &lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#how-to-write-the-json-code&#34;&gt;How to write the json code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;From 1.0.4 version, it supports flutter web application.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#general-info&#34;&gt;General info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#get-started&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#how-to-implement-a-widgetparser&#34;&gt;How to implement a WidgetParser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#how-to-add-a-click-listener&#34;&gt;How to add a click listener&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#how-to-write-the-json-code&#34;&gt;How to write the json code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#widget-documents&#34;&gt;Widget Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General info&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I work for an e-commerce company. We need to build flexible pages. So we define a light UI protocol, and implement on Android and iOS. We can dynamic update App UIs by pushing a json file. With this ability, we can do some UI A/B testing without publishing App to app store. Flutter allows you to build beautiful native apps on iOS and Android from a single codebase, it can allow you to build web app later. Flutter&#39;s hot reload helps you quickly and easily experiment, build UIs, add features, and fix bugs faster. But it still build native app, the UIs can&#39;t be dynamic updated. If you want to modify the UIs, you need to publish the updated app to app store. With this project, you can build your UIs from a json string, which is the UI protocol. The json string is very similar with the Flutter widget dart code. All widget type and widget properties are the same.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/img/Sample.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;p&gt;Widget type will be a type property, and widget&#39;s properties will be the json properties too. All properties and their values will be almost the same. You can checkout the following document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/WIDGETS.md&#34;&gt;Currently support flutter widgets and properties&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/img/demo1.gif&#34; width=&#34;400&#34;&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;1. Depend on it&lt;/h4&gt; &#xA;&lt;p&gt;Add this to your package&#39;s pubspec.yaml file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  dynamic_widget: ^3.0.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Install it&lt;/h4&gt; &#xA;&lt;p&gt;You can install packages from the command line:&lt;/p&gt; &#xA;&lt;p&gt;with Flutter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flutter packages get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, your editor might support &lt;code&gt;flutter packages get&lt;/code&gt;. Check the docs for your editor to learn more.&lt;/p&gt; &#xA;&lt;h4&gt;3. Import it&lt;/h4&gt; &#xA;&lt;p&gt;Now in your Dart code, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dynamic_widget/dynamic_widget.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;You should use &lt;code&gt;DynamicWidgetBuilder().build&lt;/code&gt; method to covert a json string into flutter widget. It will be time-consuming. so you&#39;d better using &lt;code&gt;FutureBuilder&lt;/code&gt; to build the UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dynamic_widget/dynamic_widget.dart&#39;;&#xA;class PreviewPage extends StatelessWidget {&#xA;  final String jsonString;&#xA;&#xA;  PreviewPage(this.jsonString);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        // Here we take the value from the MyHomePage object that was created by&#xA;        // the App.build method, and use it to set our appbar title.&#xA;        title: Text(&#34;Preview&#34;),&#xA;      ),&#xA;      body: FutureBuilder&amp;lt;Widget&amp;gt;(&#xA;        future: _buildWidget(context),&#xA;        builder: (BuildContext context, AsyncSnapshot&amp;lt;Widget&amp;gt; snapshot) {&#xA;          if (snapshot.hasError) {&#xA;            print(snapshot.error);&#xA;          }&#xA;          return snapshot.hasData&#xA;              ? SizedBox.expand(&#xA;                  child: snapshot.data,&#xA;                )&#xA;              : Text(&#34;Loading...&#34;);&#xA;        },&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  Future&amp;lt;Widget&amp;gt; _buildWidget(BuildContext context) async {&#xA;    return DynamicWidgetBuilder.build(jsonString, context, new DefaultClickListener());&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to implement a WidgetParser&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need to implement the &lt;code&gt;WidgetParser&lt;/code&gt; abstract class.&lt;/li&gt; &#xA; &lt;li&gt;Add new created WidgetParser by &lt;code&gt;DynamicWidgetBuilder.addParser(WidgetParser parser)&lt;/code&gt; method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This is a RaisedButton widget parser.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dynamic_widget/dynamic_widget/utils.dart&#39;;&#xA;import &#39;package:dynamic_widget/dynamic_widget.dart&#39;;&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;&#xA;class RaisedButtonParser extends WidgetParser {&#xA;  @override&#xA;  String get widgetName =&amp;gt; &#34;RaisedButton&#34;;&#xA;&#xA;  @override&#xA;  Widget parse(Map&amp;lt;String, dynamic&amp;gt; map, BuildContext buildContext, ClickListener listener) {&#xA;    String clickEvent =&#xA;        map.containsKey(&#34;click_event&#34;) ? map[&#39;click_event&#39;] : &#34;&#34;;&#xA;&#xA;    var raisedButton = RaisedButton(&#xA;      color: map.containsKey(&#39;color&#39;) ? parseHexColor(map[&#39;color&#39;]) : null,&#xA;      disabledColor: map.containsKey(&#39;disabledColor&#39;)&#xA;          ? parseHexColor(map[&#39;disabledColor&#39;])&#xA;          : null,&#xA;      disabledElevation:&#xA;          map.containsKey(&#39;disabledElevation&#39;) ? map[&#39;disabledElevation&#39;]?.toDouble() : 0.0,&#xA;      disabledTextColor: map.containsKey(&#39;disabledTextColor&#39;)&#xA;          ? parseHexColor(map[&#39;disabledTextColor&#39;])&#xA;          : null,&#xA;      elevation: map.containsKey(&#39;elevation&#39;) ? map[&#39;elevation&#39;]?.toDouble() : 0.0,&#xA;      padding: map.containsKey(&#39;padding&#39;)&#xA;          ? parseEdgeInsetsGeometry(map[&#39;padding&#39;])&#xA;          : null,&#xA;      splashColor: map.containsKey(&#39;splashColor&#39;)&#xA;          ? parseHexColor(map[&#39;splashColor&#39;])&#xA;          : null,&#xA;      textColor:&#xA;          map.containsKey(&#39;textColor&#39;) ? parseHexColor(map[&#39;textColor&#39;]) : null,&#xA;      child: DynamicWidgetBuilder.buildFromMap(map[&#39;child&#39;], buildContext, listener),&#xA;      onPressed: () {&#xA;        listener.onClicked(clickEvent);&#xA;      },&#xA;    );&#xA;&#xA;    return raisedButton;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add it to parsers list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;DynamicWidgetBuilder.addParser(RaisedButtonParser());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to add a click listener&lt;/h2&gt; &#xA;&lt;p&gt;Add &#34;click_event&#34; property to your widget json definition. for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var raisedButton_json =&#xA;&#39;&#39;&#39;&#xA;{&#xA;  &#34;type&#34;: &#34;Container&#34;,&#xA;  &#34;alignment&#34;: &#34;center&#34;,&#xA;  &#34;child&#34;: {&#xA;    &#34;type&#34;: &#34;RaisedButton&#34;,&#xA;    &#34;color&#34;: &#34;##FF00FF&#34;,&#xA;    &#34;padding&#34;: &#34;8,8,8,8&#34;,&#xA;    &#34;textColor&#34;: &#34;#00FF00&#34;,&#xA;    &#34;elevation&#34; : 8.0,&#xA;    &#34;splashColor&#34; : &#34;#00FF00&#34;,&#xA;    &#34;click_event&#34; : &#34;route://productDetail?goods_id=123&#34;,&#xA;    &#34;child&#34; : {&#xA;      &#34;type&#34;: &#34;Text&#34;,&#xA;      &#34;data&#34;: &#34;I am a button&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We suggest you&#39;d better to use an URI to define the event, as the exmaple, it&#39;s a event for going to a product detail page.&lt;/p&gt; &#xA;&lt;p&gt;Then, define a ClickListener&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class DefaultClickListener implements ClickListener{&#xA;  @override&#xA;  void onClicked(String event) {&#xA;    print(&#34;Receive click event: &#34; + event);&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, pass the listener to build method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  Future&amp;lt;Widget&amp;gt; _buildWidget() async{&#xA;&#xA;    return DynamicWidgetBuilder.build(jsonString, buildContext, new DefaultClickListener());&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to write the json code&lt;/h2&gt; &#xA;&lt;p&gt;You don&#39;t need to write the json code by hand, you can export your flutter code to json code efficiently with DynamicWidgetJsonExportor widget. You just need to wrap your flutter code with DynamicWidgetJsonExportor widget, then invoke its &lt;code&gt;exportJsonString()&lt;/code&gt; method, look at following example, click the &#34;export&#34; button, it will find the DynamicWidgetJsonExportor widget, and export its child to json code efficiently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class _JSONExporterState extends State&amp;lt;JSONExporter&amp;gt; {&#xA;  GlobalKey key = GlobalKey();&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Scaffold(&#xA;      appBar: AppBar(&#xA;        // Here we take the value from the MyHomePage object that was created by&#xA;        // the App.build method, and use it to set our appbar title.&#xA;        title: Text(&#34;export example&#34;),&#xA;      ),&#xA;      body: Builder(&#xA;        builder: (context) =&amp;gt; Column(&#xA;          children: [&#xA;            Expanded(&#xA;              child: DynamicWidgetJsonExportor(&#xA;                key: key,&#xA;                child: Container(&#xA;                  child: GridViewWidget(&#xA;                      GridViewParams(&#xA;                          mainAxisSpacing: 2.0,&#xA;                          crossAxisSpacing: 2.0,&#xA;                          crossAxisCount: 2,&#xA;                          childAspectRatio: 1.6,&#xA;                          padding: EdgeInsets.all(10.0),&#xA;                          pageSize: 10,&#xA;                          children: [&#xA;                            ListTile(&#xA;                              leading: Text(&#34;Leading text&#34;),&#xA;                              title: Text(&#34;title&#34;),&#xA;                              subtitle: Text(&#34;subtitle&#34;),&#xA;                            ),&#xA;                            ListTile(&#xA;                              leading: Text(&#34;Leading text&#34;),&#xA;                              title: Text(&#34;title&#34;),&#xA;                              subtitle: Text(&#34;subtitle&#34;),&#xA;                            )&#xA;                          ]),&#xA;                      context),&#xA;                ),&#xA;              ),&#xA;            ),&#xA;            RaisedButton(&#xA;              child: Text(&#34;Export&#34;),&#xA;              onPressed: () {&#xA;                var exportor = key.currentWidget as DynamicWidgetJsonExportor;&#xA;                var exportJsonString = exportor.exportJsonString();&#xA;                Scaffold.of(context).showSnackBar(SnackBar(&#xA;                    content: Text(&#34;json string was exported to editor page.&#34;)));&#xA;                Future.delayed(Duration(seconds: 3), (){&#xA;                  Navigator.push(&#xA;                      context,&#xA;                      MaterialPageRoute(&#xA;                          builder: (context) =&amp;gt;&#xA;                              CodeEditorPage(exportJsonString)));&#xA;                });&#xA;              },&#xA;            )&#xA;          ],&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use whatever your favorite IDE to build the UI, then use DynamicWidgetJsonExportor to export to json code. For detail, please check the Dynamic Widget Demo source code.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/img/export.gif&#34; width=&#34;320&#34;&gt; &#xA;&lt;h2&gt;Widget Documents&lt;/h2&gt; &#xA;&lt;p&gt;Already completed widgets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#container-widget&#34;&gt;Container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#text-widget&#34;&gt;Text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#textspan&#34;&gt;TextSpan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#textstyle&#34;&gt;TextStyle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#raisedbutton-widget&#34;&gt;RaisedButton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#elevatedbutton-widget&#34;&gt;ElevatedButton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#textbutton-widget&#34;&gt;TextButton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#row-widget&#34;&gt;Row&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#column-widget&#34;&gt;Column&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#assetimage-widget&#34;&gt;AssetImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#networkimage-widget&#34;&gt;NetworkImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#fileimage-widget&#34;&gt;FileImage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#placeholder-widget&#34;&gt;Placeholder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#gridview-widget&#34;&gt;GridView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#listview-widget&#34;&gt;ListView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#pageview-widget&#34;&gt;PageView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#expanded-widget&#34;&gt;Expanded&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#padding-widget&#34;&gt;Padding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#center-widget&#34;&gt;Center&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#align-widget&#34;&gt;Align&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#aspectratio-widget&#34;&gt;AspectRatio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#fittedbox-widget&#34;&gt;FittedBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#baseline-widget&#34;&gt;Baseline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#stack-widget&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#positioned-widget&#34;&gt;Positioned&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#indexedstack-widget&#34;&gt;IndexedStack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#expandedsizedbox-widget&#34;&gt;ExpandedSizedBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#sizedbox-widget&#34;&gt;SizedBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#opacity-widget&#34;&gt;Opacity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#wrap-widget&#34;&gt;Wrap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#cliprrect-widget&#34;&gt;ClipRRect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#safearea-widget&#34;&gt;SafeArea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#selectabletext-widget&#34;&gt;SelectableText&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#icon-widget&#34;&gt;Icon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#dropcaptext-widget&#34;&gt;DropCapText&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#scaffold-widget&#34;&gt;Scaffold&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#appbar-widget&#34;&gt;AppBar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#limitedbox-widget&#34;&gt;LimitedBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#offstage-widget&#34;&gt;Offstage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#overflowbox-widget&#34;&gt;OverflowBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#divider-widget&#34;&gt;Divider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#rotatedbox-widget&#34;&gt;RotatedBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dengyin2000/dynamic_widget/raw/master/WIDGETS.md#singlechildscrollview-widget&#34;&gt;SingleChildScrollView&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can view &lt;a href=&#34;https://raw.githubusercontent.com/dengyin2000/dynamic_widget/master/WIDGETS.md&#34;&gt;Currently support widgets and properties&lt;/a&gt; here.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Checkout this project and run demo.&lt;/p&gt; &#xA;&lt;h2&gt;Code Examples&lt;/h2&gt; &#xA;&lt;p&gt;Checkout this project and run demo.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://www.jianshu.com/u/efa51344ce61&#34;&gt;@deng.yin@gmail.com&lt;/a&gt; - feel free to contact me&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abuanwar072/Welcome-Login-Signup-Page-Flutter</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/abuanwar072/Welcome-Login-Signup-Page-Flutter</id>
    <link href="https://github.com/abuanwar072/Welcome-Login-Signup-Page-Flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mobile app onboarding, Login, Signup page with #flutter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome page, Login Page and Sign up page - Flutter UI&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://youtu.be/ExKYjqgswJg&#34;&gt;Watch it on YouTube&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Packages we are using:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;flutter_svg: &lt;a href=&#34;https://pub.dev/packages/flutter_svg&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We design 3 screens first one is a welcome screen like then user open your app it shows then users have two options, if he has an account then press the login button and it just shifts him to the login screen or if he or she don&#39;t have an account then press signup button its transfers to the signup screen.&lt;/p&gt; &#xA;&lt;h3&gt;Auth UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/abuanwar072/Welcome-Login-Signup-Page-Flutter/master/UI.png&#34; alt=&#34;App UI&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flutterchina/dio</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/flutterchina/dio</id>
    <link href="https://github.com/flutterchina/dio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful Http client for Dart, which supports Interceptors, FormData, Request Cancellation, File Downloading, Timeout etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Language: &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/README-ZH.md&#34;&gt;‰∏≠ÊñáÁÆÄ‰Ωì&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;dio&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutterchina/dio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-flutter%7Cflutter%20web%7Cdart%20vm-ff69b4.svg?style=flat-square&#34; alt=&#34;support&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A powerful Http client for Dart, which supports Interceptors, Global configuration, FormData, Request Cancellation, File downloading, Timeout etc.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;h3&gt;Add dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  dio: ^4.0.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Already know Dio 3 and just want to learn about what&#39;s new in Dio 4? Check out the &lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/migration_to_4.x.md&#34;&gt;Migration Guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Super simple to use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;void getHttp() async {&#xA;  try {&#xA;    var response = await Dio().get(&#39;http://www.google.com&#39;);&#xA;    print(response);&#xA;  } catch (e) {&#xA;    print(e);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;awesome-dio&lt;/h2&gt; &#xA;&lt;p&gt;üéâ A curated list of awesome things related to dio.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins (support 4.x)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugins&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager&#34;&gt;dio_cookie_manager&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio_cookie_manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_cookie_manager.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A cookie manager for Dio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter&#34;&gt;dio_http2_adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/dio_http2_adapter&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_http2_adapter.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Dio HttpClientAdapter which support Http/2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rodion-m/dio_smart_retry&#34;&gt;dio_smart_retry&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_smart_retry&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_smart_retry.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flexible retry library for Dio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/diefferson/http_certificate_pinning&#34;&gt;http_certificate_pinning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/http_certificate_pinning&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/http_certificate_pinning.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Https Certificate pinning for Flutter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OwnWeb/curl_logger_dio_interceptor&#34;&gt;curl_logger_dio_interceptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/curl_logger_dio_interceptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/curl_logger_dio_interceptor.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Flutter curl-command generator for Dio.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/llfbandit/dio_cache_interceptor&#34;&gt;dio_cache_interceptor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_cache_interceptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_cache_interceptor.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dio HTTP cache interceptor with multiple stores respecting HTTP directives (or not)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hurshi/dio-http-cache&#34;&gt;dio_http_cache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/dio_http_cache&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dio_http_cache.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A simple cache library for Dio like Rxcache in Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Milad-Akarie/pretty_dio_logger&#34;&gt;pretty_dio_logger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/packages/pretty_dio_logger&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/pretty_dio_logger.svg?style=flat-square&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Related Projects&lt;/h3&gt; &#xA;&lt;p&gt;Welcome to submit Dio&#39;s third-party plugins and related libraries &lt;a href=&#34;https://github.com/flutterchina/dio/issues/347&#34;&gt;here&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#dio-apis&#34;&gt;Dio APIs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#request-options&#34;&gt;Request Options&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#response-schema&#34;&gt;Response Schema&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#interceptors&#34;&gt;Interceptors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#cookie-manager&#34;&gt;Cookie Manager&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#using-applicationx-www-form-urlencoded-format&#34;&gt;Using application/x-www-form-urlencoded format&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#sending-formdata&#34;&gt;Sending FormData&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#transformer&#34;&gt;Transformer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#using-proxy&#34;&gt;Using proxy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#https-certificate-verification&#34;&gt;Https certificate verification&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#httpclientadapter&#34;&gt;HttpClientAdapter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#cancellation&#34;&gt;Cancellation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#extends-dio-class&#34;&gt;Extends Dio class&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#http2-support&#34;&gt;Http2 support&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutterchina/dio/develop/#features-and-bugs&#34;&gt;Features and bugs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response response;&#xA;var dio = Dio();&#xA;response = await dio.get(&#39;/test?id=12&amp;amp;name=wendu&#39;);&#xA;print(response.data.toString());&#xA;// Optionally the request above could also be done as&#xA;response = await dio.get(&#39;/test&#39;, queryParameters: {&#39;id&#39;: 12, &#39;name&#39;: &#39;wendu&#39;});&#xA;print(response.data.toString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.post(&#39;/test&#39;, data: {&#39;id&#39;: 12, &#39;name&#39;: &#39;wendu&#39;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing multiple concurrent requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await Future.wait([dio.post(&#39;/info&#39;), dio.get(&#39;/token&#39;)]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Downloading a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.download(&#39;https://www.google.com/&#39;, &#39;./xx.html&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get response stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response&amp;lt;ResponseBody&amp;gt; rs;&#xA;rs = await Dio().get&amp;lt;ResponseBody&amp;gt;(url,&#xA;  options: Options(responseType: ResponseType.stream),  // set responseType to `stream`&#xA;);&#xA;print(rs.data.stream); //response stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get response with bytes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response&amp;lt;List&amp;lt;int&amp;gt;&amp;gt; rs &#xA;rs = await Dio().get&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;(url,&#xA; options: Options(responseType: ResponseType.bytes), // set responseType to `bytes`&#xA;);&#xA;print(rs.data); // List&amp;lt;int&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending FormData:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;});&#xA;var response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uploading multiple files to server by FormData:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;  &#39;file&#39;: await MultipartFile.fromFile(&#39;./text.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;  &#39;files&#39;: [&#xA;    await MultipartFile.fromFile(&#39;./text1.txt&#39;, filename: &#39;text1.txt&#39;),&#xA;    await MultipartFile.fromFile(&#39;./text2.txt&#39;, filename: &#39;text2.txt&#39;),&#xA;  ]&#xA;});&#xA;var response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Listening the uploading progress:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.post(&#xA;  &#39;http://www.dtworkroom.com/doris/1/2.0.0/test&#39;,&#xA;  data: {&#39;aa&#39;: &#39;bb&#39; * 22},&#xA;  onSendProgress: (int sent, int total) {&#xA;    print(&#39;$sent $total&#39;);&#xA;  },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Post binary data by Stream:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Binary data&#xA;List&amp;lt;int&amp;gt; postData = &amp;lt;int&amp;gt;[...];&#xA;await dio.post(&#xA;  url,&#xA;  data: Stream.fromIterable(postData.map((e) =&amp;gt; [e])), //create a Stream&amp;lt;List&amp;lt;int&amp;gt;&amp;gt;&#xA;  options: Options(&#xA;    headers: {&#xA;      Headers.contentLengthHeader: postData.length, // set content-length&#xA;    },&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚Ä¶you can find all examples code &lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dio APIs&lt;/h2&gt; &#xA;&lt;h3&gt;Creating an instance and set default configs.&lt;/h3&gt; &#xA;&lt;p&gt;You can create instance of Dio with an optional &lt;code&gt;BaseOptions&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var dio = Dio(); // with default Options&#xA;&#xA;// Set default configs&#xA;dio.options.baseUrl = &#39;https://www.xx.com/api&#39;;&#xA;dio.options.connectTimeout = 5000; //5s&#xA;dio.options.receiveTimeout = 3000;&#xA;&#xA;// or new Dio with a BaseOptions instance.&#xA;var options = BaseOptions(&#xA;  baseUrl: &#39;https://www.xx.com/api&#39;,&#xA;  connectTimeout: 5000,&#xA;  receiveTimeout: 3000,&#xA;);&#xA;Dio dio = Dio(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core API in Dio instance is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Future&#xA;  &lt;response&gt;&#xA;    request(String path, {data,Map queryParameters, Options options,CancelToken cancelToken, ProgressCallback onSendProgress, ProgressCallback onReceiveProgress)&#xA;  &lt;/response&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;response = await dio.request(&#xA;  &#39;/test&#39;,&#xA;  data: {&#39;id&#39;:12,&#39;name&#39;:&#39;xx&#39;},&#xA;  options: Options(method:&#39;GET&#39;),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request method aliases&lt;/h3&gt; &#xA;&lt;p&gt;For convenience aliases have been provided for all supported request methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future&amp;lt;Response&amp;gt; get(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; post(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; put(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; delete(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; head(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; put(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; path(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; download(...)&#xA;&#xA;Future&amp;lt;Response&amp;gt; fetch(RequestOptions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Request Options&lt;/h2&gt; &#xA;&lt;p&gt;The Options class describes the http request information and configuration. Each Dio instance has a base config for all requests maked by itself, and we can override the base config with [Options] when make a single request. The [BaseOptions] declaration as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;  /// Http method.&#xA;  String method;&#xA;&#xA;  /// Request base url, it can contain sub path, like: &#39;https://www.google.com/api/&#39;.&#xA;  String baseUrl;&#xA;&#xA;  /// Http request headers.&#xA;  Map&amp;lt;String, dynamic&amp;gt; headers;&#xA;&#xA;   /// Timeout in milliseconds for opening  url.&#xA;  int connectTimeout;&#xA;&#xA;   ///  Whenever more than [receiveTimeout] (in milliseconds) passes between two events from response stream,&#xA;  ///  [Dio] will throw the [DioError] with [DioErrorType.RECEIVE_TIMEOUT].&#xA;  ///  Note: This is not the receiving time limitation.&#xA;  int receiveTimeout;&#xA;&#xA;  /// Request data, can be any type.&#xA;  T data;&#xA;&#xA;  /// If the `path` starts with &#39;http(s)&#39;, the `baseURL` will be ignored, otherwise,&#xA;  /// it will be combined and then resolved with the baseUrl.&#xA;  String path=&#39;&#39;;&#xA;&#xA;  /// The request Content-Type. The default value is &#39;application/json; charset=utf-8&#39;.&#xA;  /// If you want to encode request body with &#39;application/x-www-form-urlencoded&#39;,&#xA;  /// you can set [Headers.formUrlEncodedContentType], and [Dio]&#xA;  /// will automatically encode the request body.&#xA;  String contentType;&#xA;&#xA;  /// [responseType] indicates the type of data that the server will respond with&#xA;  /// options which defined in [ResponseType] are `JSON`, `STREAM`, `PLAIN`.&#xA;  ///&#xA;  /// The default value is `JSON`, dio will parse response string to json object automatically&#xA;  /// when the content-type of response is &#39;application/json&#39;.&#xA;  ///&#xA;  /// If you want to receive response data with binary bytes, for example,&#xA;  /// downloading a image, use `STREAM`.&#xA;  ///&#xA;  /// If you want to receive the response data with String, use `PLAIN`.&#xA;  ResponseType responseType;&#xA;&#xA;  /// `validateStatus` defines whether the request is successful for a given&#xA;  /// HTTP response status code. If `validateStatus` returns `true` ,&#xA;  /// the request will be perceived as successful; otherwise, considered as failed.&#xA;  ValidateStatus validateStatus;&#xA;&#xA;  /// Custom field that you can retrieve it later in [Interceptor]„ÄÅ[Transformer] and the   [Response] object.&#xA;  Map&amp;lt;String, dynamic&amp;gt; extra;&#xA;  &#xA;  /// Common query parameters&#xA;  Map&amp;lt;String, dynamic /*String|Iterable&amp;lt;String&amp;gt;*/ &amp;gt; queryParameters;  &#xA;  &#xA;   /// [collectionFormat] indicates the format of collection data in request&#xA;  /// options which defined in [CollectionFormat] are `csv`, `ssv`, `tsv`, `pipes`, `multi`,`multiCompatible`.&#xA;  /// The default value is `multiCompatible`&#xA;  late CollectionFormat collectionFormat;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/options.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Response Schema&lt;/h2&gt; &#xA;&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;{&#xA;  /// Response body. may have been transformed, please refer to [ResponseType].&#xA;  T? data;&#xA;  /// Response headers.&#xA;  Headers headers;&#xA;  /// The corresponding request info.&#xA;  Options request;&#xA;  /// Http status code.&#xA;  int? statusCode;&#xA;  String? statusMessage;&#xA;  /// Whether redirect &#xA;  bool? isRedirect;  &#xA;  /// redirect info    &#xA;  List&amp;lt;RedirectInfo&amp;gt; redirects ;&#xA;  /// Returns the final real request uri (maybe redirect). &#xA;  Uri realUri;    &#xA;  /// Custom field that you can retrieve it later in `then`.&#xA;  Map&amp;lt;String, dynamic&amp;gt; extra;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When request is succeed, you will receive the response as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Response response = await dio.get(&#39;https://www.google.com&#39;);&#xA;print(response.data);&#xA;print(response.headers);&#xA;print(response.requestOptions);&#xA;print(response.statusCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interceptors&lt;/h2&gt; &#xA;&lt;p&gt;For each dio instance, We can add one or more interceptors, by which we can intercept requests „ÄÅ responses and errors before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catchError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(InterceptorsWrapper(&#xA;    onRequest:(options, handler){&#xA;     // Do something before request is sent&#xA;     return handler.next(options); //continue&#xA;     // If you want to resolve the request with some custom dataÔºå&#xA;     // you can resolve a `Response` object eg: `handler.resolve(response)`.&#xA;     // If you want to reject the request with a error message,&#xA;     // you can reject a `DioError` object eg: `handler.reject(dioError)`&#xA;    },&#xA;    onResponse:(response,handler) {&#xA;     // Do something with response data&#xA;     return handler.next(response); // continue&#xA;     // If you want to reject the request with a error message,&#xA;     // you can reject a `DioError` object eg: `handler.reject(dioError)` &#xA;    },&#xA;    onError: (DioError e, handler) {&#xA;     // Do something with response error&#xA;     return  handler.next(e);//continue&#xA;     // If you want to resolve the request with some custom dataÔºå&#xA;     // you can resolve a `Response` object eg: `handler.resolve(response)`.  &#xA;    }&#xA;));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple interceptor example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;class CustomInterceptors extends Interceptor {&#xA;  @override&#xA;  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {&#xA;    print(&#39;REQUEST[${options.method}] =&amp;gt; PATH: ${options.path}&#39;);&#xA;    return super.onRequest(options, handler);&#xA;  }&#xA;  @override&#xA;  void onResponse(Response response, ResponseInterceptorHandler handler) {&#xA;    print(&#39;RESPONSE[${response.statusCode}] =&amp;gt; PATH: ${response.requestOptions.path}&#39;);&#xA;    super.onResponse(response, handler);&#xA;  }&#xA;  @override&#xA;  Future onError(DioError err, ErrorInterceptorHandler handler) {&#xA;    print(&#39;ERROR[${err.response?.statusCode}] =&amp;gt; PATH: ${err.requestOptions.path}&#39;);&#xA;    return super.onError(err, handler);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resolve and reject the request&lt;/h3&gt; &#xA;&lt;p&gt;In all interceptors, you can interfere with their execution flow. If you want to resolve the request/response with some custom dataÔºåyou can call &lt;code&gt;handler.resolve(Response)&lt;/code&gt;. If you want to reject the request/response with a error message, you can call &lt;code&gt;handler.reject(dioError)&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(InterceptorsWrapper(&#xA;  onRequest:(options, handler) {&#xA;   return handler.resolve(Response(requestOptions:options,data:&#39;fake data&#39;));&#xA;  },&#xA;));&#xA;Response response = await dio.get(&#39;/test&#39;);&#xA;print(response.data);//&#39;fake data&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;QueuedInterceptor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Interceptor&lt;/code&gt; can be executed concurrently, that is, all of the requests enter the interceptor at once, rather than executing sequentially. However, in some cases we expect that requests enter the interceptor sequentially like #590 „ÄÇ Therefore, we need to provide a mechanism for sequential accessÔºàone by oneÔºâ to interceptors and &lt;code&gt;QueuedInterceptor&lt;/code&gt; can solve this problem.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Because of security reasons, we need all the requests to set up a csrfToken in the header, if csrfToken does not exist, we need to request a csrfToken first, and then perform the network request, because the request csrfToken progress is asynchronous, so we need to execute this async request in request interceptor. The code is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  var dio = Dio();&#xA;  //  dio instance to request token&#xA;  var tokenDio = Dio();&#xA;  String? csrfToken;&#xA;  dio.options.baseUrl = &#39;http://www.dtworkroom.com/doris/1/2.0.0/&#39;;&#xA;  tokenDio.options = dio.options;&#xA;  dio.interceptors.add(QueuedInterceptorsWrapper(&#xA;    onRequest: (options, handler) {&#xA;      print(&#39;send requestÔºöpath:${options.path}ÔºåbaseURL:${options.baseUrl}&#39;);&#xA;      if (csrfToken == null) {&#xA;        print(&#39;no tokenÔºårequest token firstly...&#39;);&#xA;        tokenDio.get(&#39;/token&#39;).then((d) {&#xA;          options.headers[&#39;csrfToken&#39;] = csrfToken = d.data[&#39;data&#39;][&#39;token&#39;];&#xA;          print(&#39;request token succeed, value: &#39; + d.data[&#39;data&#39;][&#39;token&#39;]);&#xA;          print(&#xA;              &#39;continue to perform requestÔºöpath:${options.path}ÔºåbaseURL:${options.path}&#39;);&#xA;          handler.next(options);&#xA;        }).catchError((error, stackTrace) {&#xA;          handler.reject(error, true);&#xA;        });&#xA;      } else {&#xA;        options.headers[&#39;csrfToken&#39;] = csrfToken;&#xA;        return handler.next(options);&#xA;      }&#xA;    },&#xA;   ); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can clean the waiting queue by calling &lt;code&gt;clear()&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;p&gt;For complete codes click &lt;a href=&#34;https://github.com/flutterchina/dio/raw/develop/example/queued_interceptor_crsftoken.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Log&lt;/h3&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;LogInterceptor&lt;/code&gt; to print request/response log automaticlly, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.interceptors.add(LogInterceptor(responseBody: false)); //ÂºÄÂêØËØ∑Ê±ÇÊó•Âøó&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Interceptor&lt;/h3&gt; &#xA;&lt;p&gt;You can custom interceptor by extending the &lt;code&gt;Interceptor/QueuedInterceptor&lt;/code&gt; class. There is an example that implementing a simple cache policy: &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/custom_cache_interceptor.dart&#34;&gt;custom cache interceptor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cookie Manager&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/cookie_manager&#34;&gt;dio_cookie_manager&lt;/a&gt; package is a cookie manager for Dio.&lt;/p&gt; &#xA;&lt;h2&gt;Handling Errors&lt;/h2&gt; &#xA;&lt;p&gt;When a error occurs, Dio will wrap the &lt;code&gt;Error/Exception&lt;/code&gt; to a &lt;code&gt;DioError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;try {&#xA;  //404&#xA;  await dio.get(&#39;https://wendux.github.io/xsddddd&#39;);&#xA;} on DioError catch (e) {&#xA;  // The request was made and the server responded with a status code&#xA;  // that falls out of the range of 2xx and is also not 304.&#xA;  if (e.response != null) {&#xA;    print(e.response.data)&#xA;    print(e.response.headers)&#xA;    print(e.response.requestOptions)&#xA;  } else {&#xA;    // Something happened in setting up or sending the request that triggered an Error&#xA;    print(e.requestOptions)&#xA;    print(e.message)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DioError scheme&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; {&#xA;  /// Response info, it may be `null` if the request can&#39;t reach to&#xA;  /// the http server, for example, occurring a dns error, network is not available.&#xA;  Response? response;&#xA;  /// Request info.&#xA;  RequestOptions? request;&#xA;  /// Error descriptions.&#xA;  String message;&#xA;&#xA;  DioErrorType type;&#xA;  /// The original error/exception object; It&#39;s usually not null when `type`&#xA;  /// is DioErrorType.DEFAULT&#xA;  dynamic? error;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DioErrorType&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;enum DioErrorType {&#xA;  /// It occurs when url is opened timeout.&#xA;  connectTimeout,&#xA;&#xA;  /// It occurs when url is sent timeout.&#xA;  sendTimeout,&#xA;&#xA;  ///It occurs when receiving timeout.&#xA;  receiveTimeout,&#xA;&#xA;  /// When the server response, but with a incorrect status, such as 404, 503...&#xA;  response,&#xA;&#xA;  /// When the request is cancelled, dio will throw a error with this type.&#xA;  cancel,&#xA;&#xA;  /// Default error type, Some other Error. In this case, you can&#xA;  /// use the DioError.error if it is not null.&#xA;  other,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using application/x-www-form-urlencoded format&lt;/h2&gt; &#xA;&lt;p&gt;By default, Dio serializes request data(except String type) to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format instead, you can :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//Instance level&#xA;dio.options.contentType= Headers.formUrlEncodedContentType;&#xA;//or works once&#xA;dio.post(&#xA;  &#39;/info&#39;,&#xA;  data: {&#39;id&#39;: 5},&#xA;  options: Options(contentType: Headers.formUrlEncodedContentType),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending FormData&lt;/h2&gt; &#xA;&lt;p&gt;You can also send FormData with Dio, which will send data in the &lt;code&gt;multipart/form-data&lt;/code&gt;, and it supports uploading files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData.fromMap({&#xA;  &#39;name&#39;: &#39;wendux&#39;,&#xA;  &#39;age&#39;: 25,&#xA;  &#39;file&#39;: await MultipartFile.fromFile(&#39;./text.txt&#39;,filename: &#39;upload.txt&#39;)&#xA;});&#xA;response = await dio.post(&#39;/info&#39;, data: formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/formdata.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple files upload&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to add multiple files to &lt;code&gt; FormData&lt;/code&gt;Ôºå the only difference is that upload keys are different for array types„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormData.fromMap({&#xA;  &#39;files&#39;: [&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;, filename: &#39;upload.txt&#39;),&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The upload key eventually becomes &#39;files[]&#39;ÔºåThis is because many back-end services add a middle bracket to key when they get an array of files. &lt;strong&gt;If you don&#39;t want ‚Äú[]‚Äù&lt;/strong&gt;Ôºåyou should create FormData as followsÔºàDon&#39;t use &lt;code&gt;FormData.fromMap&lt;/code&gt;Ôºâ:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var formData = FormData();&#xA;formData.files.addAll([&#xA;  MapEntry(&#39;files&#39;,&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;,filename: &#39;upload.txt&#39;),&#xA;  ),&#xA;  MapEntry(&#39;files&#39;,&#xA;    MultipartFile.fromFileSync(&#39;./example/upload.txt&#39;,filename: &#39;upload.txt&#39;),&#xA;  ),&#xA;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transformer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Transformer&lt;/code&gt; allows changes to the request/response data before it is sent/received to/from the server. This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, and &#39;PATCH&#39;. Dio has already implemented a &lt;code&gt;DefaultTransformer&lt;/code&gt;, and as the default &lt;code&gt;Transformer&lt;/code&gt;. If you want to customize the transformation of request/response data, you can provide a &lt;code&gt;Transformer&lt;/code&gt; by your self, and replace the &lt;code&gt;DefaultTransformer&lt;/code&gt; by setting the &lt;code&gt;dio.transformer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;In flutter&lt;/h3&gt; &#xA;&lt;p&gt;If you use dio in flutter development, you&#39;d better to decode json in background with [compute] function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;// Must be top-level function&#xA;_parseAndDecode(String response) {&#xA;  return jsonDecode(response);&#xA;}&#xA;&#xA;parseJson(String text) {&#xA;  return compute(_parseAndDecode, text);&#xA;}&#xA;&#xA;void main() {&#xA;  ...&#xA;  //Custom jsonDecodeCallback&#xA;  (dio.transformer as DefaultTransformer).jsonDecodeCallback = parseJson;&#xA;  runApp(MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Example&lt;/h3&gt; &#xA;&lt;p&gt;There is an example for &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/transfomer.dart&#34;&gt;customizing Transformer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HttpClientAdapter&lt;/h2&gt; &#xA;&lt;p&gt;HttpClientAdapter is a bridge between Dio and HttpClient.&lt;/p&gt; &#xA;&lt;p&gt;Dio implements standard and friendly API for developer.&lt;/p&gt; &#xA;&lt;p&gt;HttpClient: It is the real object that makes Http requests.&lt;/p&gt; &#xA;&lt;p&gt;We can use any HttpClient not just &lt;code&gt;dart:io:HttpClient&lt;/code&gt; to make the Http request. And all we need is providing a &lt;code&gt;HttpClientAdapter&lt;/code&gt;. The default HttpClientAdapter for Dio is &lt;code&gt;DefaultHttpClientAdapter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;dio.httpClientAdapter = new DefaultHttpClientAdapter();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/adapter.dart&#34;&gt;Here&lt;/a&gt; is a simple example to custom adapter.&lt;/p&gt; &#xA;&lt;h3&gt;Using proxy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DefaultHttpClientAdapter&lt;/code&gt; provide a callback to set proxy to &lt;code&gt;dart:io:HttpClient&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:dio/adapter.dart&#39;;&#xA;...&#xA;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client) {&#xA;  // config the http client&#xA;  client.findProxy = (uri) {&#xA;    //proxy all request to localhost:8888&#xA;    return &#39;PROXY localhost:8888&#39;;&#xA;  };&#xA;  // you can also create a new HttpClient to dio&#xA;  // return HttpClient();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/proxy.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Https certificate verification&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to verify the https certificate. Suppose the certificate format is PEM, the code like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String PEM=&#39;XXXXX&#39;; // certificate content&#xA;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate  = (client) {&#xA;  client.badCertificateCallback=(X509Certificate cert, String host, int port){&#xA;    if(cert.pem==PEM){ // Verify the certificate&#xA;      return true;&#xA;    }&#xA;    return false;&#xA;  };&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way is creating a &lt;code&gt;SecurityContext&lt;/code&gt; when create the &lt;code&gt;HttpClient&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;(dio.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate  = (client) {&#xA;  SecurityContext sc = SecurityContext();&#xA;  //file is the path of certificate&#xA;  sc.setTrustedCertificates(file);&#xA;  HttpClient httpClient = HttpClient(context: sc);&#xA;  return httpClient;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this way, the format of certificate must be PEM or PKCS12.&lt;/p&gt; &#xA;&lt;h2&gt;Http2 support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutterchina/dio/tree/master/plugins/http2_adapter&#34;&gt;dio_http2_adapter&lt;/a&gt; package is a Dio HttpClientAdapter which support Http/2.0 .&lt;/p&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;p&gt;You can cancel a request using a &lt;em&gt;cancel token&lt;/em&gt;. One token can be shared with multiple requests. When a token&#39;s &lt;code&gt;cancel&lt;/code&gt; method invoked, all requests with this token will be cancelled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CancelToken token = CancelToken();&#xA;dio.get(url, cancelToken: token)&#xA;   .catchError((DioError err){&#xA;    if (CancelToken.isCancel(err)) {&#xA;      print(&#39;Request canceled! &#39;+ err.message)&#xA;    }else{&#xA;      // handle error.&#xA;    }&#xA;   });&#xA;// cancel the requests with &#34;cancelled&#34; message.&#xA;token.cancel(&#39;cancelled&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a complete example &lt;a href=&#34;https://github.com/flutterchina/dio/raw/master/example/cancel_request.dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extends Dio class&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Dio&lt;/code&gt; is a abstract class with factory constructorÔºåso we don&#39;t extend &lt;code&gt;Dio&lt;/code&gt; class directy. For this purpose, we can extend &lt;code&gt;DioForNative&lt;/code&gt; or &lt;code&gt;DioForBrowser&lt;/code&gt; instead, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dio/dio.dart&#39;;&#xA;import &#39;package:dio/native_imp.dart&#39;; //If in browser, import &#39;package:dio/browser_imp.dart&#39;&#xA;&#xA;class Http extends DioForNative {&#xA;  Http([BaseOptions options]):super(options){&#xA;    // do something&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also implement our Dio client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyDio with DioMixin implements Dio{&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright &amp;amp; License&lt;/h2&gt; &#xA;&lt;p&gt;This open source project authorized by &lt;a href=&#34;https://flutterchina.club&#34;&gt;https://flutterchina.club&lt;/a&gt; , and the license is MIT.&lt;/p&gt; &#xA;&lt;h2&gt;Features and bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file feature requests and bugs at the &lt;a href=&#34;https://github.com/flutterchina/dio/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Buy a cup of coffee for me (Scan by wechat)Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/flutterchina/flutter-in-action@1.0.3/docs/imgs/pay.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluttercommunity/plus_plugins</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/fluttercommunity/plus_plugins</id>
    <link href="https://github.com/fluttercommunity/plus_plugins" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter Community Plus Plugins&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://plus.fluttercommunity.dev/&#34;&gt; Flutter Community Plus Plugins&lt;br&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Plus plugins&lt;/h1&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://flutter.dev/docs/development/packages-and-plugins/favorites&#34; target=&#34;_blank&#34; rel=&#34;noreferrer noopener&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/website/static/img/flutter-favorite-badge.png&#34; width=&#34;100&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/actions?query=workflow%3Aall_plugins&#34;&gt; &lt;img src=&#34;https://github.com/fluttercommunity/plus_plugins/workflows/all_plugins/badge.svg?sanitize=true&#34; alt=&#34;all_plugins GitHub Workflow Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/flutter_community/plus_plugins/&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/fluttercommunity/plus_plugins/graph/badge.svg?sanitize=true&#34; alt=&#34;all_plugins Coverage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/FlutterComm&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/FlutterComm.svg?colorA=1da1f2&amp;amp;colorB=&amp;amp;label=Follow%20on%20Twitter&#34; alt=&#34;Follow on Twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;PlusPlugins is a set of Flutter plugins that is developed based on existing &lt;a href=&#34;https://github.com/flutter/plugins&#34;&gt;Flutter plugins&lt;/a&gt; with extra functionalities, platforms support, and better maintenance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; As of January 2021, the Flutter team is no longer accepting non-critical PRs for the original set of plugins in &lt;code&gt;flutter/plugins&lt;/code&gt;, and instead they should be submitted in this project. &lt;a href=&#34;https://github.com/flutter/plugins/raw/master/CONTRIBUTING.md#important-note&#34;&gt;You can read more about this announcement here.&lt;/a&gt; as well as &lt;a href=&#34;https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65&#34;&gt;in the Flutter 2 announcement blog post.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/issues&#34;&gt;Feedback&lt;/a&gt; and &lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/pulls&#34;&gt;Pull Requests&lt;/a&gt; are most welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of contents:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#battery_plus&#34;&gt;Battery‚ûï (&lt;code&gt;battery_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#connectivity_plus&#34;&gt;Connectivity‚ûï (&lt;code&gt;connectivity_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#device_info_plus&#34;&gt;Device Info‚ûï (&lt;code&gt;device_info_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#network_info_plus&#34;&gt;Network Info‚ûï (&lt;code&gt;network_info_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#package_info_plus&#34;&gt;Package Info‚ûï (&lt;code&gt;package_info_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#sensors_plus&#34;&gt;Sensor‚ûï (&lt;code&gt;sensors_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#share_plus&#34;&gt;Share‚ûï (&lt;code&gt;share_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#android_alarm_manager_plus&#34;&gt;Android Alarm Manager‚ûï (&lt;code&gt;android_alarm_manager_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fluttercommunity/plus_plugins/main/#android_intent_plus&#34;&gt;Android Intent‚ûï (&lt;code&gt;android_intent_plus&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;battery_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/battery_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/battery_plus.svg?sanitize=true&#34; alt=&#34;battery_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/battery_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/battery_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for accessing information about the battery state(full, charging, discharging) on Android and iOS.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/battery_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;connectivity_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/connectivity_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/connectivity_plus.svg?sanitize=true&#34; alt=&#34;connectivity_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/connectivity_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/connectivity_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for discovering the state of the network (WiFi &amp;amp; mobile/cellular) connectivity on Android and iOS.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/connectivity_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;device_info_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/device_info_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/device_info_plus.svg?sanitize=true&#34; alt=&#34;device_info_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/device_info_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/device_info_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin providing detailed information about the device (make, model, etc.), and Android or iOS version the app is running on.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/device_info_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;network_info_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/network_info_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/network_info_plus.svg?sanitize=true&#34; alt=&#34;network_info_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/network_info_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/network_info_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for discovering network info.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/network_info_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;package_info_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/package_info_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/package_info_plus.svg?sanitize=true&#34; alt=&#34;package_info_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/package_info_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/package_info_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for querying information about the application package, such as CFBundleVersion on iOS or versionCode on Android.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/package_info_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;sensors_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/sensors_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/sensors_plus.svg?sanitize=true&#34; alt=&#34;sensors_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/sensors_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/sensors_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for accessing accelerometer and gyroscope sensors.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/sensors_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;share_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/share_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/share_plus.svg?sanitize=true&#34; alt=&#34;share_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/share_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/share_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for sharing content via the platform share UI, using the ACTION_SEND intent on Android and UIActivityViewController on iOS.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/share_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;iOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;android_alarm_manager_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/android_alarm_manager_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/android_alarm_manager_plus.svg?sanitize=true&#34; alt=&#34;android_alarm_manager_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/android_alarm_manager_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/android_alarm_manager_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for accessing the Android AlarmManager service, and running Dart code in the background when alarms fire.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/android_alarm_manager_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;android_intent_plus&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/android_intent_plus&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/android_intent_plus.svg?sanitize=true&#34; alt=&#34;android_intent_plus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/android_intent_plus/score&#34;&gt;&lt;img src=&#34;https://badges.bar/android_intent_plus/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Flutter plugin for launching Android Intents. Not supported on iOS.&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/android_intent_plus&#34;&gt;View Source&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Platform Support&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Android&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please file PlusPlugins specific issues, bugs, or feature requests in our &lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/issues/new&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Plugin issues that are not specific to PlusPlugins can be filed in the &lt;a href=&#34;https://github.com/flutter/flutter/issues/new&#34;&gt;Flutter issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contribute a change to any of the existing plugins in this repo, please review our &lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/raw/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; and open a &lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This repository is maintained by FlutterCommunity authors. Issues here are answered by maintainers and other community members on GitHub on a best-effort basis.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PhilipsHue/flutter_reactive_ble</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/PhilipsHue/flutter_reactive_ble</id>
    <link href="https://github.com/PhilipsHue/flutter_reactive_ble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter library that handles BLE operations for multiple devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter reactive BLE library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_reactive_ble&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_reactive_ble?label=flutter_reactive_ble&#34; alt=&#34;flutter_reactive_ble version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter library that handles BLE operations for multiple devices.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an new issue or a pull request to make this project better&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;This project uses melos to manage all the packages inside this repo.&lt;/p&gt; &#xA;&lt;p&gt;Install melos: &lt;code&gt;dart pub global activate melos&lt;/code&gt; Setup melos to point to the dependencies in your local folder: &lt;code&gt;melos bootstrap&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Library requires kotlin version &lt;code&gt;1.5.31&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Update kotlin version&lt;/h3&gt; &#xA;&lt;p&gt;To update the kotlin version open Android studio and go to &lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin plugin updates&lt;/code&gt; and update &lt;code&gt;Update channel&lt;/code&gt; to &lt;code&gt;1.5.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The reactive BLE lib supports the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BLE device discovery&lt;/li&gt; &#xA; &lt;li&gt;Observe host device BLE status&lt;/li&gt; &#xA; &lt;li&gt;Establishing a BLE connection&lt;/li&gt; &#xA; &lt;li&gt;Maintaining connection status of multiple BLE devices&lt;/li&gt; &#xA; &lt;li&gt;Discover services(will be implicit)&lt;/li&gt; &#xA; &lt;li&gt;Read / write a characteristic&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to a characteristic&lt;/li&gt; &#xA; &lt;li&gt;Clear GATT cache&lt;/li&gt; &#xA; &lt;li&gt;Negotiate MTU size&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;You need to add the following permissions to your AndroidManifest.xml file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_SCAN&#34; android:usesPermissionFlags=&#34;neverForLocation&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH_CONNECT&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34; android:maxSdkVersion=&#34;30&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;BLUETOOTH_SCAN&lt;/code&gt; to determine location, remove &lt;code&gt;android:usesPermissionFlags=&#34;neverForLocation&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use location services in your app, remove &lt;code&gt;android:maxSdkVersion=&#34;30&#34;&lt;/code&gt; from the location permission tags&lt;/p&gt; &#xA;&lt;h3&gt;Android ProGuard rules&lt;/h3&gt; &#xA;&lt;p&gt;In case you are using ProGuard add the following snippet to your &lt;code&gt;proguard-rules.pro&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-keep class com.signify.hue.** { *; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will prevent issues like &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/issues/131&#34;&gt;#131&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;For iOS it is required you add the following entries to the &lt;code&gt;Info.plist&lt;/code&gt; file of your app. It is not allowed to access Core BLuetooth without this. See &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/raw/master/example/ios/Runner/Info.plist&#34;&gt;our example app&lt;/a&gt; on how to implement this. For more indepth details: &lt;a href=&#34;https://medium.com/flawless-app-stories/handling-ios-13-bluetooth-permissions-26c6a8cbb816&#34;&gt;Blog post on iOS bluetooth permissions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;iOS13 and higher&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSBluetoothAlwaysUsageDescription&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;iOS12 and lower&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NSBluetoothPeripheralUsageDescription&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;Initializing the library should be done the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final flutterReactiveBle = FlutterReactiveBle();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Device discovery&lt;/h3&gt; &#xA;&lt;p&gt;Discovering BLE devices should be done like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutterReactiveBle.scanForDevices(withServices: [serviceId], scanMode: ScanMode.lowLatency).listen((device) {&#xA;      //code for handling results&#xA;    }, onError: () {&#xA;      //code for handling error&#xA;    });&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;withServices&lt;/code&gt; parameter specifies the advertised service IDs to look for. If an empty list is passed, all the advertising devices will be reported. The parameter &lt;code&gt;scanMode&lt;/code&gt; is only used on Android and follows the conventions described on &lt;a href=&#34;https://developer.android.com/reference/android/bluetooth/le/ScanSettings#SCAN_MODE_BALANCED&#34;&gt;ScanSettings&lt;/a&gt; Android reference page. If &lt;code&gt;scanMode&lt;/code&gt; is omitted the balanced scan mode will be used.&lt;/p&gt; &#xA;&lt;h3&gt;Observe host device BLE status&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;statusStream&lt;/code&gt; to retrieve updates about the BLE status of the host device (the device running the app) . This stream can be used in order to determine if the BLE is turned on, on the device or if the required permissions are granted. Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_ble.statusStream.listen((status) {&#xA;  //code for handling status update&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt; _ble.status&lt;/code&gt; to get the current status of the host device.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/raw/master/packages/reactive_ble_platform_interface/lib/src/model/ble_status.dart&#34;&gt;BleStatus&lt;/a&gt; for more info about the meaning of the different statuses.&lt;/p&gt; &#xA;&lt;h3&gt;Establishing connection&lt;/h3&gt; &#xA;&lt;p&gt;To interact with a device you first need to establish a connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutterReactiveBle.connectToDevice(&#xA;      id: foundDeviceId,&#xA;      servicesWithCharacteristicsToDiscover: {serviceId: [char1, char2]},&#xA;      connectionTimeout: const Duration(seconds: 2),&#xA;    ).listen((connectionState) {&#xA;      // Handle connection state updates&#xA;    }, onError: (Object error) {&#xA;      // Handle a possible error&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the required &lt;code&gt;id&lt;/code&gt; parameter use a device ID retrieved through device discovery. On iOS the device ID is a UUID and on Android it is a MAC address (which may also be randomized, depending on the Android version). Supplying a map with service and characteristic IDs you want to discover may speed up the connection on iOS (otherwise &lt;em&gt;all&lt;/em&gt; services and characteristics will be discovered). You can specify a &lt;code&gt;connectionTimeout&lt;/code&gt; when the client will provide an error in case the connection cannot be established within the specified time.&lt;/p&gt; &#xA;&lt;p&gt;There are numerous issues on the Android BLE stack that leave it hanging when you try to connect to a device that is not in range. To work around this issue use the method &lt;code&gt;connectToAdvertisingDevice&lt;/code&gt; to first scan for the device and only if it is found connect to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutterReactiveBle.connectToAdvertisingDevice(&#xA;    id: foundDeviceId,&#xA;    withServices: [serviceUuid],&#xA;    prescanDuration: const Duration(seconds: 5),&#xA;    servicesWithCharacteristicsToDiscover: {serviceId: [char1, char2]},&#xA;    connectionTimeout: const Duration(seconds:  2),&#xA;  ).listen((connectionState) {&#xA;    // Handle connection state updates&#xA;  }, onError: (dynamic error) {&#xA;    // Handle a possible error&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides the normal connection parameters that are described above this function also has 2 additional required parameters: &lt;code&gt;withServices&lt;/code&gt; and &lt;code&gt;prescanDuration&lt;/code&gt;. PreScanDuration is the amount of time the ble stack will scan for the device before it attempts to connect (if the device is found)&lt;/p&gt; &#xA;&lt;h3&gt;Read / write characteristics&lt;/h3&gt; &#xA;&lt;h4&gt;Read characteristic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId);&#xA;final response = await flutterReactiveBle.readCharacteristic(characteristic);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Write with response&lt;/h4&gt; &#xA;&lt;p&gt;Write a value to characteristic and await the response. The &#34;response&#34; in &#34;write characteristic with response&#34; means &#34;an acknowledgement of reception&#34;. The write can either be acknowledged (success) or failed (an exception is thrown), thus the return type is &lt;code&gt;void&lt;/code&gt; and there is nothing to print (though you can &lt;code&gt;print(&#34;Write successful&#34;)&lt;/code&gt; and in a catch-clause &lt;code&gt;print(&#34;Write failed: $e&#34;)&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;BLE does not provide a request-response mechanism like you may know from HTTP out of the box. If you need to perform request-response calls, you will need to implement a custom mechanism on top of the basic BLE functionality. A typical approach is to implement a &#34;control point&#34;: a characteristic that is writable and delivers &lt;a href=&#34;https://duckduckgo.com/?q=BLE+%22indications%22+vs+%22notifications%22&#34;&gt;notifications or indications&lt;/a&gt;, so that a request is written to it and a response is delivered back as a notification or an indication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId); &#xA;await flutterReactiveBle.writeCharacteristicWithResponse(characteristic, value: [0x00]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Write without response&lt;/h4&gt; &#xA;&lt;p&gt;Use this operation if you want to execute multiple consecutive write operations in a small timeframe (e.g uploading firmware to device) or if the device does not provide a response. This is performance wise the fastest way of writing a value but there&#39;s a chance that the BLE device cannot handle that many consecutive writes in a row, so do a &lt;code&gt;writeWithResponse&lt;/code&gt; once in a while.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId);&#xA;flutterReactiveBle.writeCharacteristicWithoutResponse(characteristic, value: [0x00]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subscribe to characteristic&lt;/h3&gt; &#xA;&lt;p&gt;Instead of periodically reading the characteristic you can also listen to the notifications (in case the specific service supports it) in case the value changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final characteristic = QualifiedCharacteristic(serviceId: serviceUuid, characteristicId: characteristicUuid, deviceId: foundDeviceId);&#xA;   flutterReactiveBle.subscribeToCharacteristic(characteristic).listen((data) {&#xA;      // code to handle incoming data&#xA;    }, onError: (dynamic error) {&#xA;      // code to handle errors&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Negotiate MTU size&lt;/h3&gt; &#xA;&lt;p&gt;You can increase or decrease the MTU size to reach a higher throughput. This operation will return the actual negotiated MTU size, but it is no guarantee that the requested size will be successfully negotiated. iOS has a default MTU size which cannot be negotiated, however you can still use this operation to get the current MTU.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final mtu = await flutterReactiveBle.requestMtu(deviceId: foundDeviceId, mtu: 250);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android specific operations&lt;/h3&gt; &#xA;&lt;p&gt;The following operations will only have effect for Android and are not supported by iOS. When using these operations on iOS the library will throw an UnSupportedOperationException.&lt;/p&gt; &#xA;&lt;h4&gt;Request connection priority&lt;/h4&gt; &#xA;&lt;p&gt;On Android you can send a connection priority update to the BLE device. The parameter &lt;code&gt;priority&lt;/code&gt; is an enum that uses the same spec as the &lt;a href=&#34;https://developer.android.com/reference/android/bluetooth/BluetoothGatt#requestConnectionPriority(int)&#34;&gt;BluetoothGatt Android spec&lt;/a&gt;. Using &lt;code&gt;highPerformance&lt;/code&gt; will increase battery usage but will speed up GATT operations. Be cautious when setting the priority when communicating with multiple devices because if you set highperformance for all devices the effect of increasing the priority will be lower.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await flutterReactiveBle.requestConnectionPriority(deviceId: foundDeviceId, priority:  ConnectionPriority.highPerformance);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clear GATT cache&lt;/h4&gt; &#xA;&lt;p&gt;The Android OS maintains a table per device of the discovered service in cache. Sometimes it happens that after a firmware update a new service is introduced but the cache is not updated. To invalidate the cache you can use the cleargattCache operation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a hidden BLE operation and should be used with extreme caution since this operation is on the &lt;a href=&#34;https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces&#34;&gt;greylist&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await flutterReactiveBle.clearGattCache(foundDeviceId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;How to handle the BLE undeliverable exception&lt;/h4&gt; &#xA;&lt;p&gt;On Android side we use the &lt;a href=&#34;https://github.com/Polidea/RxAndroidBle&#34;&gt;RxAndroidBle&lt;/a&gt; library of Polidea. After migration towards RxJava 2 some of the errors are not routed properly to their listeners and thus this will result in a BLE Undeliverable Exception. The root cause lies in the threading of the Android OS. As workaround RxJava has a hook where you can set the global errorhandler. For more info see &lt;a href=&#34;https://github.com/ReactiveX/RxJava/wiki/What&#39;s-different-in-2.0#error-handling&#34;&gt;RxJava docs&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;A default workaround implementation in the Flutter app (needs to be in the Java / Kotlin part e.g. mainactivity) is shown below. For an example (in Java) see Polidea RxAndroidBle &lt;a href=&#34;https://github.com/Polidea/RxAndroidBle/tree/master/sample/src/main/java/com/polidea/rxandroidble2/sample&#34;&gt;sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;BleException is coming from Polidea RxAndroidBle, so make sure your application declares the following depedency: &lt;code&gt;implementation &#34;com.polidea.rxandroidble2:rxandroidble:1.11.1&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;RxJavaPlugins.setErrorHandler { throwable -&amp;gt;&#xA;  if (throwable is UndeliverableException &amp;amp;&amp;amp; throwable.cause is BleException) {&#xA;    return@setErrorHandler // ignore BleExceptions since we do not have subscriber&#xA;  }&#xA;  else {&#xA;    throw throwable&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Why doesn&#39;t the BLE stack directly connect to my peripheral&lt;/h4&gt; &#xA;&lt;p&gt;Before you are able to execute BLE operations the BLE-stack of the device makes sure everything is setup correctly and then reports ready for operation. For some devices this takes a bit longer than for others. When starting the app make sure that the BLE-stack is properly initialized before you execute BLE operations. The safest way to do this is by listening to the &lt;code&gt;statusStream&lt;/code&gt; and wait for &lt;code&gt;BleStatus.ready&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will prevent issues like &lt;a href=&#34;https://github.com/PhilipsHue/flutter_reactive_ble/issues/147&#34;&gt;#147&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unofficial example apps&lt;/h4&gt; &#xA;&lt;p&gt;Example implementation UART over BLE:&lt;a href=&#34;https://github.com/wolfc01/flutter_reactive_ble_uart_example&#34;&gt;link&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws-amplify/amplify-flutter</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/aws-amplify/amplify-flutter</id>
    <link href="https://github.com/aws-amplify/amplify-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative library with an easy-to-use interface for building Flutter applications on AWS.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/aws-mobile-hub-images/aws-amplify-logo.png&#34; alt=&#34;AWS Amplify&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/jWVbPfC&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/308323056592486420?logo=discord&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/aws-amplify/amplify-flutter/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/aws-amplify/amplify-flutter/tree/main.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Amplify Flutter&lt;/h2&gt; &#xA;&lt;p&gt;AWS Amplify provides a declarative and easy-to-use interface across different categories of cloud operations. Our default implementation works with Amazon Web Services (AWS), but AWS Amplify is designed to be open and pluggable for any custom backend or service. See &lt;a href=&#34;https://docs.amplify.aws&#34;&gt;AWS Amplify&lt;/a&gt; for further details about the Amplify Framework.&lt;/p&gt; &#xA;&lt;p&gt;We are iterating and looking for feedback and collaboration, so please &lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/issues/5&#34;&gt;&lt;strong&gt;let us know your feedback&lt;/strong&gt;&lt;/a&gt; on our direction and roadmap.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/start/getting-started/setup/q/integration/flutter&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/tree/main/example&#34;&gt;Example Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/issues/5&#34;&gt;Roadmap/Provide Feedback&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‚ö†Ô∏è &lt;strong&gt;For breaking changes from the developer preview versions please refer to this &lt;a href=&#34;https://github.com/aws-amplify/amplify-flutter/issues/274&#34;&gt;issue&lt;/a&gt; for migration details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Amplify Categories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/auth/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/a&gt;: APIs and building blocks for developers who want to create user authentication experiences with Amazon Cognito.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_auth_cognito&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_auth_cognito.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/analytics/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;Analytics&lt;/strong&gt;&lt;/a&gt;: Easily collect analytics data for your app with Pinpoint. Analytics data includes user sessions and other custom events that you want to track in your app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_analytics_pinpoint&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_analytics_pinpoint.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/storage/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;Storage&lt;/strong&gt;&lt;/a&gt;: Provides a simple mechanism for managing user content for your app in public, protected or private storage buckets with Amazon S3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_storage_s3&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_storage_s3.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/datastore/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;DataStore&lt;/strong&gt;&lt;/a&gt;: A programming model for leveraging shared and distributed data without writing additional code for offline and online scenarios, which makes working with distributed, cross-user data just as simple as working with local-only data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_datastore&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_datastore.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/restapi/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;API (Rest)&lt;/strong&gt;&lt;/a&gt;: Provides a simple solution when making HTTP requests. It provides an automatic, lightweight signing process which complies with AWS Signature Version 4.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_api&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_api.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://docs.amplify.aws/lib/graphqlapi/getting-started/q/platform/flutter&#34;&gt;&lt;strong&gt;API (GraphQL)&lt;/strong&gt;&lt;/a&gt;: Interact with your GraphQL server or AWS AppSync API with an easy-to-use &amp;amp; configured GraphQL client.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;a href=&#34;https://pub.dev/packages/amplify_api&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/amplify_api.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;To Be Implemented&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Predictions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Storage Hub Events (Listening to the Amplify Storage events)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Amplify for Flutter currently supports &lt;strong&gt;iOS&lt;/strong&gt; and &lt;strong&gt;Android&lt;/strong&gt; platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/start/q/integration/flutter&#34;&gt;Getting Started with Amplify Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/&#34;&gt;Amplify Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/project-setup/prereq/q/platform/flutter#install-and-configure-the-amplify-cli&#34;&gt;Install the Amplify CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-flutter/main/CONTRIBUTING.md&#34;&gt;Contributing to Amplify Flutter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flutter Development Guide&lt;/h2&gt; &#xA;&lt;p&gt;Amplify for Flutter is an open-source project and welcomes contributions from the Flutter community, see &lt;a href=&#34;https://raw.githubusercontent.com/aws-amplify/amplify-flutter/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.amplify.aws/lib/project-setup/prereq/q/platform/flutter#option-1-watch-the-video-guide&#34;&gt;Amplify CLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting Started with Flutter app development and Amplify&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Install Amplify in a Flutter project&lt;/li&gt; &#xA; &lt;li&gt;Add basic Amplify functionality to your project using one of the supported categories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone git@github.com:aws-amplify/amplify-flutter.git&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your Flutter project. If you do not have an active Flutter project, you can create one after installing the &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;Flutter development tooling&lt;/a&gt; and running &lt;code&gt;flutter create &amp;lt;project-name&amp;gt;&lt;/code&gt; in your terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the Amplify CLI, run &lt;code&gt;amplify init&lt;/code&gt; from the root of your project:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.amplify.aws/lib/project-setup/prereq/q/platform/flutter#install-and-configure-the-amplify-cli&#34;&gt;Amplify CLI Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==&amp;gt; amplify init&#xA;Note: It is recommended to run this command from the root of your app directory&#xA;? Enter a name for the project helloAmplify&#xA;? Enter a name for the environment dev&#xA;? Choose your default editor: Visual Studio Code&#xA;? Choose the type of app that you\&#39;re building flutter&#xA;Please tell us about your project&#xA;Only the following resource types are supported:&#xA; * Auth&#xA; * Analytics&#xA; * Storage&#xA; * API&#xA;? Where do you want to store your configuration file? ./lib/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Amplify categories (choose defaults for this example):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ amplify add auth&#xA;$ amplify add analytics&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push changes to the cloud to provision the backend resources:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ amplify push&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your pubspec.yaml file, add the following to &lt;code&gt;dependencies&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Do not include dependencies in your &lt;code&gt;pubspec&lt;/code&gt; file that you are not using in your app. This can cause a configuration error in the underlying SDK.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  flutter:&#xA;    sdk: flutter&#xA;  amplify_flutter:&#xA;    path: /{path to your local amplify-flutter}/amplify-flutter/packages/amplify_flutter&#xA;  amplify_analytics_pinpoint:&#xA;    path: /{path to your local amplify-flutter}/amplify-flutter/packages/amplify_analytics_pinpoint&#xA;  amplify_auth_cognito:&#xA;    path: /{path to your local amplify-flutter}/amplify-flutter/packages/amplify_auth_cognito&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;From the terminal run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;In your main.dart file, add:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:amplify_flutter/amplify_flutter.dart&#39;;&#xA;import &#39;package:amplify_analytics_pinpoint/amplify_analytics_pinpoint.dart&#39;;&#xA;import &#39;package:amplify_auth_cognito/amplify_auth_cognito.dart&#39;;&#xA;&#xA;import &#39;amplifyconfiguration.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(MyApp());&#xA;}&#xA;&#xA;class MyApp extends StatefulWidget {&#xA;  @override&#xA;  _MyAppState createState() =&amp;gt; _MyAppState();&#xA;}&#xA;&#xA;class _MyAppState extends State&amp;lt;MyApp&amp;gt; {&#xA;  bool _amplifyConfigured = false;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;  }&#xA;&#xA;  void _configureAmplify() async {&#xA;    if (!mounted) return;&#xA;&#xA;    // Add Pinpoint and Cognito Plugins&#xA;    Amplify.addPlugin(AmplifyAuthCognito());&#xA;    Amplify.addPlugin(AmplifyAnalyticsPinpoint());&#xA;&#xA;    // Once Plugins are added, configure Amplify&#xA;    try {&#xA;      await Amplify.configure(amplifyconfig);&#xA;      setState(() {&#xA;        _amplifyConfigured = true;&#xA;      });&#xA;    } on AmplifyAlreadyConfiguredException {&#xA;      print(&#xA;          &#34;Amplify was already configured. Looks like app restarted on android.&#34;);&#xA;    }&#xA;&#xA;  }&#xA;&#xA;  // Send an event to Pinpoint&#xA;  void _recordEvent() async {&#xA;    AnalyticsEvent event = AnalyticsEvent(&#39;test&#39;);&#xA;    event.properties.addBoolProperty(&#39;boolKey&#39;, true);&#xA;    event.properties.addDoubleProperty(&#39;doubleKey&#39;, 10.0);&#xA;    event.properties.addIntProperty(&#39;intKey&#39;, 10);&#xA;    event.properties.addStringProperty(&#39;stringKey&#39;, &#39;stringValue&#39;);&#xA;    Amplify.Analytics.recordEvent(event: event);&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      home: Scaffold(&#xA;          appBar: AppBar(&#xA;            title: const Text(&#39;Amplify example app&#39;),&#xA;          ),&#xA;          body: ListView(padding: EdgeInsets.all(10.0), children: &amp;lt;Widget&amp;gt;[&#xA;            Center(&#xA;              child: Column (&#xA;                children: [&#xA;                  const Padding(padding: EdgeInsets.all(5.0)),&#xA;                  ElevatedButton(&#xA;                    onPressed: _amplifyConfigured ? null : _configureAmplify,&#xA;                    child: const Text(&#39;configure Amplify&#39;)&#xA;                  ),&#xA;                  ElevatedButton(&#xA;                    onPressed: _amplifyConfigured ? _recordEvent : null,&#xA;                    child: const Text(&#39;record event&#39;)&#xA;                  )&#xA;                ]&#xA;              ),&#xA;            )&#xA;          ])&#xA;      )&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For iOS builds complete the following steps (from the root of your project):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rm ios/Podfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flutter build ios&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Modify the &lt;code&gt;ios/Podfile&lt;/code&gt; and replace the second line with: &lt;code&gt;platform :ios, &#39;11.0&#39;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This ensures that your Flutter project is running the same ios version that the Amplify plugins are built on.&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;From the root of your project, execute &lt;code&gt;flutter run&lt;/code&gt; in the terminal.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that an Android or iOS device is already running; this can be a virtual device started from Android Studio.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Click &lt;strong&gt;Configure Amplify&lt;/strong&gt;, then &lt;strong&gt;Record Event&lt;/strong&gt;. From the terminal (in the root of your project) run &lt;code&gt;amplify console analytics&lt;/code&gt;. This will open the Amazon Pinpoint console for your project in your default web browser. Within about a minute you should start seeing the events populating in the Events section of then Pinpoint console.&lt;/p&gt; &#xA;&lt;p&gt;For further documentation and Amplify Category API usage, see the &lt;a href=&#34;https://docs.amplify.aws/lib/q/platform/flutter&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Flutter and the related logo are trademarks of Google LLC. We are not endorsed by or affiliated with Google LLC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FilledStacks/flutter-tutorials</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/FilledStacks/flutter-tutorials</id>
    <link href="https://github.com/FilledStacks/flutter-tutorials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The repo contains the source code for all the tutorials on the FilledStacks Youtube channel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter tutorials&lt;/h1&gt; &#xA;&lt;p&gt;The repo contains the source code for all the written tutorials by Filledstacks.&lt;/p&gt; &#xA;&lt;p&gt;All Tutorials plus additional snippets and shorter posts can be found on the &lt;a href=&#34;https://www.filledstacks.com/&#34;&gt;Official FilledStacks website&lt;/a&gt;. Each tutorial&#39;s code can be downloaded separately using the &#34;Download Code&#34; button under the Thumbnail images in the Written tutorials linked below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/L4L5WN7R&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://az743702.vo.msecnd.net/cdn/kofi4.png?v=2&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please clone and star this repo to stay up to date on changes.&lt;/p&gt; &#xA;&lt;h2&gt;Packages by FilledStacks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/stacked&#34;&gt;Stacked&lt;/a&gt;: A package that helps implement the stacked architecture as shown in &lt;a href=&#34;https://youtu.be/DO8le1W_HqQ&#34;&gt;this series&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/smart_flare&#34;&gt;SmartFlare&lt;/a&gt;: An extension of the already awesome Flare packages that adds interactive to FlareActors with some more functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/responsive_builder&#34;&gt;Responsive Builder&lt;/a&gt;: A package that helps you write a readable and maintainable Responsive UI code base. Based on the &lt;a href=&#34;https://www.youtube.com/playlist?list=PLQQBiNtFxeyJbOkeKBe_JG36gm1V2629H&#34;&gt;responsive UI series&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;** Important **&lt;/h2&gt; &#xA;&lt;p&gt;When you want to run any of the code first run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter create .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the repo to generate the platform projects for the tutorials.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;067 - Flutter Slivers Explained&lt;/strong&gt; [ &lt;a href=&#34;&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;&#34;&gt;Source&lt;/a&gt; ] [ &lt;a href=&#34;&#34;&gt;Written&lt;/a&gt; ] - In this tutorial I go over what slivers are, how they work and how to implement your own custom sliver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;066 - Login and Create Account Implementation&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/Y-JawJ4m6Fg&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/boxtout/tree/main/src/clients/customer&#34;&gt;Source&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/building-flutter-login-and-sign-up-forms/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over implementation we&#39;ll be using for Login and Create Account functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;064 - New Improved Stacked Setup&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/1WW8xHhZvyA&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/boxtout/tree/main/src/clients/customer&#34;&gt;Source&lt;/a&gt; ] - This tutorial goes over the new and improved stacked setup that includes navigation, dependency registration and the traditional stacked statemanagement.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;063 - Firebase Authentication in 5 minutes&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/2YZrXEHrvBI&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/boxtout/tree/main/src/clients/customer&#34;&gt;Source&lt;/a&gt; ] - In this tutorial we setup the firebase authentication for a flutter app in 5 minutes&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;062 - Code overview for Firebase Backend&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/ImjeP6Ts8JI&#34;&gt;Video&lt;/a&gt; ] - This tutorial goes over the code required to build a scalable firebase backend&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;061 - Planning a Firebase Backend&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/nj21LXUUhyo&#34;&gt;Video&lt;/a&gt; ] - In this tutorial we go over a detailed plan for building a scalable backend using Firebase Cloud Functions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;060 - Making Technical decisions&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/Ly6_gkY4sUQ&#34;&gt;Video&lt;/a&gt; ] - In this tutorial we go over the thinking and reasoning behind making some of the technical decisions required when planning for a large scale product development&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;059 - Planning a Food Delivery Service&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/8nVnrdFFBWw&#34;&gt;Video&lt;/a&gt; ] - This tutorial goes over the planning for a food delivery product&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;058 - Bottom Sheet Service | Using Flutter Bottom Sheets without context&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/OvBl-j59bOg&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/bottom-sheets-in-flutter-through-stacked-services/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-8-bottom-sheet-service&#34;&gt;Source&lt;/a&gt; ] - This tutorial goes over the usage of the new BottomSheetService in the stacked_services package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;057 - SQLite in Flutter | Migrations and Schema Management&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/yR37lWE6xO4&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/sq-lite-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over the SQLite implementation used in our production applications. It shows the basics of SQLite. The meat of the tutorial comes from the schema management solution we use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;055 - Lottie Splash Screen in Flutter&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/YcUip0Y8CUg&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/lottie-splash-screen-intro-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - A tutorial that shows you how to implement an animated splash screen using Lottie and delay the navigation until it&#39;s complete.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;054 - Flutter Architecture Part 7 - Dialog Service&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/uuyJHCxxMEY&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/show-dialogs-without-context/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-7-dialog-service&#34;&gt;Source Code&lt;/a&gt; ] - A complete guide to the setup of the basics for a starter stacked architecture project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;053 - Flutter Architecture Part 6 - Bottom Navigation with Stacked&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/OBIrqm0LDaA&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/bottom-navigation-with-stacked-architecture/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-6-bottom-nav&#34;&gt;Source Code&lt;/a&gt; ] - A guide to implementing a bottom navigation bar using stacked.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;052 - Flutter Architecture Part 5 - How to Mock - Unit Testing&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/Kq-YMAE1ssA&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/how-to-mock-for-unit-testing/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-5-mocking-unit-tests&#34;&gt;Source Code&lt;/a&gt; ] - A complete guide to mocking in unit testing, how it&#39;s used for tests and what they&#39;re used for.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;051 - Flutter Architecture Part 4 - How to Unit test a Unit Testing intro&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/n21w5T3jdWE&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/how-to-unit-test-in-flutter/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-4-unit-testing-1&#34;&gt;Source Code&lt;/a&gt; ] - An intro to unit testing and how to set it up in Flutter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;050 - Flutter Architecture Part 3 - Flutter Services&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/UoZQS1bkNTw&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/services-in-code-and-how-to-use-them-in-flutter/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-3-services&#34;&gt;Source Code&lt;/a&gt; ] - A complete guide on services, service classes, what they are used for and how to use them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;049 - Flutter Architecture Part 2 - Stacked State Management scenarios&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/hEy_36LPcgQ&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-and-provider-architecture-using-stacked/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part-2-stacked-statemanagement&#34;&gt;Source Code&lt;/a&gt; ] - This tutorial goes over common state management situation encountered in a real world application&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;048 - Flutter Architecture Part 1 - Stacked, Routing and GetIt setup&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/DO8le1W_HqQ&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-and-provider-architecture-using-stacked/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/stacked-example/tree/part1-setup&#34;&gt;Source Code&lt;/a&gt; ] - A complete guide to the setup of the basics for a starter stacked architecture project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;047 - Firebase and Flutter Part 10 - Remote Config&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/mPghiKYKUV4&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/remote-config-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over remote config and how to manage it in a flutter project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;046 - Firebase and Flutter Part 9 - Dynamic Links in Flutter&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/aBrRJqrQTpQ&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/dynamic-links-in-flutter-a-complete-guide/&#34;&gt;Written&lt;/a&gt; ] - This tutorial covers the use of dynamic links in flutter to perform auto routing and deep linking.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;045 - Firebase and Flutter Part 8 - Realtime Paginated Data using Firestore&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/1chV50D5BVU&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/how-to-perform-real-time-pagination-with-firestore/&#34;&gt;Written&lt;/a&gt; ] - This tutorial shows the implementation of getting real time firebase data when impelementing an infinte scrolling view.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;044 - Firebase and Flutter Part 7 - Analytics&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/31KpJXqCayo&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/firebase-analytics-and-metrics-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - This tutorial shows you how to add analytics into your Flutter app for live monitoring of your users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;043 - Firebase and Flutter Part 6 - Push Notifications using Cloud Messaging&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/Lq9-DPKWtIc&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/push-notifications-in-flutter-using-firebase/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over my implementation of Push Notification in Flutter using Firebase Cloud Messaging.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;042 - Firebase and Flutter - Part 5 - Firebase Cloud Storage&lt;/strong&gt; [&lt;a href=&#34;https://youtu.be/WDqi-ZUXHEo&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/firebase-cloud-storage-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - In this tutorial we go over the implementation details of using Firebase Cloud Storage inside a Flutter application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;041 - Firebase and Flutter - Part 4 - Firestore Security Rules&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/8rRr9GnynR0&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/firestore-security-rules-with-testing/&#34;&gt;Written&lt;/a&gt; ] - This tutorial covers the implementation of Firestore security rules and how to test them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;040 - Firebase and Flutter - Part 3 - CRUD using Firestore&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/1PhAPWzGaM4&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://filledstacks.firebaseapp.com/post/firestore-crud-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over the CRUD implementation using Firestore. We Create documents, Read the collection, Delete documents and Update existing documents data through Flutter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;039 - Firebase and Flutter - Part 2 - Custom Startup Logic and User Profiles&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/d6FaV7cp_YE&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/firebase-startup-logic-and-custom-user-profiles/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over the process of making sure we startup on the correct view and the logic behind adding a custom user profile.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;038 - Firebase and Flutter - Part 1 - Basic Authentication&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/tKET5s_Vu-c&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/firebase-authentication-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - This tutorial covers the setup of a firebase project and the basic functionality to perform a login / sign up using Firebase email authentication.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;037 - Flutter Web Development - Part 6 - Advanced URL navigation&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/q-n1Q98s92s&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-web-advanced-navigation/&#34;&gt;Written&lt;/a&gt; ] - In this video we cover URL navigation in Flutter Web that allows us to navigation within a template and pass in query parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;036 - Flutter Web Development - Part 5 - Hover Effects&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/VABcKZLpvyg&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-web-hover-and-mouse-cursor/&#34;&gt;Written&lt;/a&gt; ] - This video goes over how to add hover effects into Flutter Web.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;035 - Flutter Web Development - Part 4 - State and API integration&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/qailF0Ut_c0&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-api-integration/&#34;&gt;Written&lt;/a&gt; ] - In this video we integrate the provider_architecture package and create a simple API class to fetch our data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;034 - Flutter Web Development - Part 3 - Template Layouts&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/nw2c6YI1Sb8&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/template-layouts-and-navigation-in-flutter-web/&#34;&gt;Written&lt;/a&gt; ] - This tutorial contains the code for a Flutter Template Layout for Web Development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;033 - Flutter Web Development - Part 2 - Responsive UI&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/Kl69yxukBdw&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/building-a-responsive-website-using-flutter/&#34;&gt;Written&lt;/a&gt; ] - This guide goes over adding responsiveness to your Flutter web UI&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;032 - Flutter Web Development - Part 1&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/XmBuwm-GhNc&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/create-and-deploy-a-flutter-web-app/&#34;&gt;Written&lt;/a&gt; ] - In this tutorial we create a Flutter web app, build a basic UI and deploy it to firestore.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;031 - Flutter Responsive UI - Part 3&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/HUSqk0OrR7I&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/a-responsive-ui-architecture-solution-with-provider/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over the process of adding Provider on top of an existing Responsive UI framework for state management.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;030 - Flutter Responsive UI - Part 2&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/udsysUj-X4w&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/building-a-responsive-ui-architecture-in-flutter/&#34;&gt;Written&lt;/a&gt; ] - This tutorial / guide goes over how you can build a responsive UI architecture to allow for a maintainable and manageable multi platform code base.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;029 - Flutter Responsive UI - Part 1&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/z7P1OFLw4kY&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/the-best-flutter-responsive-ui-pattern/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over the process of building a base widget that provides us with all the information to build a responsive UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;028 - Flutter Continuous Scroll&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/rr7d3SuhLiU&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-infinite-scroll-using-flutter-only/&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over how to create a continuous scrolling list in Flutter using index numbers and not the scroll controller.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;027 - Flutter Location Service&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/UdBUe_NP-BI&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/snippet/build-a-flutter-location-service&#34;&gt;Written&lt;/a&gt; ] - This tutorial covers the should be common task of wrapping a set of functionality within a service. We build a location service that provides continuous updates using the Location package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;026 - Flutter stream basics. Absolute basics&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/53jIxLiCv2E&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/a-complete-guide-to-flutter-streams&#34;&gt;Written&lt;/a&gt; ] - This is a short tutorial that covers the creation, usage and management of streams. I also cover how to manually create Streams using &lt;code&gt;async*&lt;/code&gt; functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;025 - Flutter navigation without BuildContext | Navigation Service&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/kopdISefbJc&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;http://filledstacks.com/post/navigate-without-build-context-in-flutter-using-a-navigation-service&#34;&gt;Written&lt;/a&gt; ] - This tutorial covers the creation of a Navigation Service to move your navigation logic out of your UI files into the business logic files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;024 - Abstraction in Flutter Pt2 | Better unit tests using Abstraction&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/oZW3Eb3J9s0&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/better-unit-tests-in-flutter-using-abstraction&#34;&gt;Written&lt;/a&gt; ] - In this tutorial we go over how using Abstraction can make your unit tests better.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;023 - Abstraction In Flutter Pt1 | How it can save hours of development time&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/n2yGl7vJJGM&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/develop-faster-in-flutter-using-abstraction&#34;&gt;Written&lt;/a&gt; ] - This tutorial is part one of the abstraction series that will cover the benefits of abstraction in practical use cases. In this one we look at how using a second implementation of an interface that returns fake data can speed up your application development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;022 - Build a Lifecycle manager for Background behaviour in Flutter&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/NfvA-7-HzYk&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-application-life-cycle-management&#34;&gt;Written&lt;/a&gt; ] - In this tutorial I go over how to build and hook up a LifeCycle manager to the Flutter AppLifeCycle. We use that to start and stop services within our architecture when the app enters a background state or come back to the foreground.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;021 - Build an architecture for your dialog management in Flutter&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/IrFU_BrCWnE&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/manager-your-flutter-dialogs-with-a-dialog-manager&#34;&gt;Written&lt;/a&gt; ] - This tutorial guides you on how to create a dialog manager in Flutter that allows you to show and access information from dialogs from your business logic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;020 - A Guide to using Futures&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/DAS0EQuM-oU&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/complete-beginners-guide-to-futures&#34;&gt;Written&lt;/a&gt; ] - This tutorial goes over the functionality provided by Futures and how to use it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;019 - Flutter animation Guide | Deep Dive | Flutter Hooks and Flutter Sequence Builder&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-animation-guide-flutter-hooks-animation-flutter-animation-sequences/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/mdhoIQqS2z0&#34;&gt;Video&lt;/a&gt; ] - This tutorial goes over every way you can organise your animation code using the provided flutter functionality. Then we go to Flutter hooks to help reduce the code and we look at the sequence builder to create some combined animations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;018 - Bottom Sheet Guide in Flutter&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/bottom-sheet-guide-in-flutter&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/zXFcceP0JbY&#34;&gt;Video&lt;/a&gt; ] - This tutorial goes over everything you need to know to effectively make use of the BottomSheet in your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;017 - Better Logging in Flutter&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-logging-a-guide-to-use-it-effectively&#34;&gt;Written - Effective Logging&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/snippet/a-guide-to-setting-up-better-logging-in-flutter&#34;&gt;Written - Setup Guide&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/c5CwHXj21xw&#34;&gt;Video&lt;/a&gt; ] - This set of tutorials cover logging in Flutter. It shows you how to set it up, and it also gives you guidelines on where to use it and what to log when using it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;016 - Flutter Navigation using Named Routing&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-navigation-cheatsheet-a-guide-to-named-routing&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/YXDFlpdpp3g&#34;&gt;Video&lt;/a&gt; ] - This tutorial guides you through everything you need to know about navigation in Flutter using named routing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;015 - Animated SplashScreen with Flare&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-animated-splash-screen-with-flare&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/4PgdFYcQpuc&#34;&gt;Video&lt;/a&gt; ] - This tutorial shows how to setup your splash following up with a nice intro animation built in Flare.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;014 - Flutter Provider V3 Architecture using ProxyProvider&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-provider-v3-architecture&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/VgrK_LlQRJ4&#34;&gt;Video&lt;/a&gt; ] - In this tutorial we implement a previously built app using Provider only and show how an architecture with dependency injection can be setup using the ProxyProvider.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;013 - Flutter Dependency Injection for Beginners&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-dependency-injection-a-beginners-guide/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/vBT-FhgMaWM&#34;&gt;Video&lt;/a&gt; ] - In this tutorial I explain what dependency injection is in plain english and show three ways of implementing it in Flutter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;012 - Flutter Provider - Sharing Data Between Models using Services&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-provider-architecture-sharing-data-across-your-models/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/dnW0NunWBTM&#34;&gt;Video&lt;/a&gt; ] - In this tutorial I expand on my previous tutorial showing how you share data between models using services.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;011 - Network Sensitive UI in Flutter using Provider and Connectivity&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/make-your-flutter-app-network-aware-using-provider-and-connectivity-status/&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/u9O8NOnQi_A&#34;&gt;Video&lt;/a&gt; ] - In this tutorial I create a network sensitive UI that shows different states based on the status of your connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;010 - Flutter Architecture - A complete guide to Provider&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-architecture-my-provider-implementation-guide&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/kDEflMYTFlk&#34;&gt;Video&lt;/a&gt; ] - In this tutorial / guide I cover the complete architecture to build a production app using the provider package for state management.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;009 - Build a User Feedback app using Flutter and Firebase&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/build-a-user-feedback-app-in-flutter-and-firebase&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/g5-ZkfN2mvY&#34;&gt;Video&lt;/a&gt; ] - In this tutorial I guide you through the steps to implement a real time user feedback app using firebase, flutter and the ScopedModel architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;008 - Building a Realtime stats monitor using Flutter and Firebase&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/building-a-realtime-stats-monitor-in-flutter&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/qa6A2TOqY0A&#34;&gt;Video&lt;/a&gt; ] - In this tutorial I go over the steps for implementing a real time stats monitor for &lt;a href=&#34;https://www.appskeletons.com/&#34;&gt;AppSkeletons&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;007 - Flutter Architecture - A complete guide to the ScopedModel architecture&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-architecture-scoped-model-implementation-guide&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/JsjDLHxGz4M&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.appskeletons.com/&#34;&gt;AppSkeletons&lt;/a&gt; ]- In this tutorial we&#39;ll lay the foundation to develop an application using Flutter and ScopedModel that&#39;s easy to maintain and extend.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;006 - Flutter + (Smart)Flare - Building a Gooey side menu&lt;/strong&gt; [ &lt;a href=&#34;https://github.com/FilledStacks/flutter-tutorials/tree/master/006-flare-drawer&#34;&gt;Source&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/fZuLh-oc5Ao&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.2dimensions.com/a/danemackier/files/flare/slideout-menu/preview&#34;&gt;Animation&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flare-and-flutter-build-a-super-cool-gooey-slideout-menu&#34;&gt;Written (code only)&lt;/a&gt; ] - In this tutorial I go over the process of building a slide out menu in Flare. Then importing into Flutter and using SmartFlare to add some interactive functionality to it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;005 - Overflown Stacks - A Guide to basic navigation in Flutter using Navigator&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/DlArCl8jvlo&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-navigation-cheatsheet-a-guide-to-the-navigator&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/flutter-tutorials/tree/master/005-basic-navigation&#34;&gt;Source&lt;/a&gt; ] - This repo contains an implementation of basic navigation using the code snippets defined in the guide.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;004 - Flutter Foundation - Handling Async behaviour - From setState to Architecture&lt;/strong&gt; [ &lt;a href=&#34;https://www.filledstacks.com/post/flutter-basics-going-from-set-state-to-architecture&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/flutter-tutorials/tree/master/004-flutter-basics&#34;&gt;Source&lt;/a&gt; ] [ &lt;a href=&#34;https://youtu.be/TZkGT8WkjdA&#34;&gt;Video&lt;/a&gt; ] - In this tutorial I show how you to handle async functionality and all it&#39;s states starting with setState and working up to a reactive architecture using streams.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;003 - Using SmartFlare for Flare animation interactions&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/vsyjMrZa5OU&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/smart-flare-interactive-flare-actors-in-flutter-an-experiment&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/smart_flare&#34;&gt;Package&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/flutter-tutorials/tree/master/003-smart-flare&#34;&gt;Source&lt;/a&gt; ] - In this tutorial I introduce my SmartFlare package that wraps normal FlareActors into a more interactable widget.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;002 - Smarter Flare Animations in Flutter - An Experiment&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/vsyjMrZa5OU&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/reducing-boilerplate-code-in-flutter-using-flare&#34;&gt;Written&lt;/a&gt; ] [ &lt;a href=&#34;https://github.com/FilledStacks/flutter-tutorials/tree/master/002-flutter-flare-pt1&#34;&gt;Source&lt;/a&gt; ] - In this tutorial we look at how to reduce animation boiler plate code in Flutter using some basic calculations and the Awesome Flare.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;001 - Building a UI in Flutter - TikTok example:&lt;/strong&gt; [ &lt;a href=&#34;https://youtu.be/kJ2mGh5BLYk&#34;&gt;Video&lt;/a&gt; ] [ &lt;a href=&#34;https://www.filledstacks.com/post/building-tik-tok-s-ui-in-flutter-the-building-process&#34;&gt;Written P1&lt;/a&gt; ] [&lt;a href=&#34;https://www.filledstacks.com/post/building-tik-tok-s-ui-in-flutter-from-layout-to-polish&#34;&gt;Written P2&lt;/a&gt;] [&lt;a href=&#34;https://github.com/FilledStacks/flutter-tutorials/tree/master/001-tik_tok_ui&#34;&gt;Source&lt;/a&gt;] - In this tutorial we break down the UI into Flutter Widgets, complete our layout and then tweak to get our final design to match our screenshots.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RivaanRanawat/flutter-amazon-clone-tutorial</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/RivaanRanawat/flutter-amazon-clone-tutorial</id>
    <link href="https://github.com/RivaanRanawat/flutter-amazon-clone-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full Stack Amazon Clone with Admin Panel using Flutter, Node, MongoDB&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon Clone&lt;/h1&gt; &#xA;&lt;p&gt;Full Stack Amazon Clone along with Admin Panel&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email &amp;amp; Password Authentication&lt;/li&gt; &#xA; &lt;li&gt;Persisting Auth State&lt;/li&gt; &#xA; &lt;li&gt;Searching Products&lt;/li&gt; &#xA; &lt;li&gt;Filtering Products (Based on Category)&lt;/li&gt; &#xA; &lt;li&gt;Product Details&lt;/li&gt; &#xA; &lt;li&gt;Rating&lt;/li&gt; &#xA; &lt;li&gt;Getting Deal of the Day&lt;/li&gt; &#xA; &lt;li&gt;Cart&lt;/li&gt; &#xA; &lt;li&gt;Checking out with Google/Apple Pay&lt;/li&gt; &#xA; &lt;li&gt;Viewing My Orders&lt;/li&gt; &#xA; &lt;li&gt;Viewing Order Details &amp;amp; Status&lt;/li&gt; &#xA; &lt;li&gt;Sign Out&lt;/li&gt; &#xA; &lt;li&gt;Admin Panel &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Viewing All Products&lt;/li&gt; &#xA;   &lt;li&gt;Adding Products&lt;/li&gt; &#xA;   &lt;li&gt;Deleting Products&lt;/li&gt; &#xA;   &lt;li&gt;Viewing Orders&lt;/li&gt; &#xA;   &lt;li&gt;Changing Order Status&lt;/li&gt; &#xA;   &lt;li&gt;Viewing Total Earnings&lt;/li&gt; &#xA;   &lt;li&gt;Viewing Category Based Earnings (on Graph)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;YouTube&lt;/h2&gt; &#xA;&lt;p&gt;I have created a tutorial based on this, do check it out on my channel &lt;a href=&#34;https://youtu.be/O3nmP-lZAdg&#34;&gt;Rivaan Ranawat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://github.com/RivaanRanawat/flutter-amazon-clone-tutorial/raw/master/screenshot.png&#34; alt=&#34;Youtube Tutorial Image&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;After cloning this repository, migrate to &lt;code&gt;flutter-amazon-clone-tutorial&lt;/code&gt; folder. Then, follow the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create MongoDB Project &amp;amp; Cluster&lt;/li&gt; &#xA; &lt;li&gt;Click on Connect, follow the process where you will get the uri.- Replace the MongoDB uri with yours in &lt;code&gt;server/index.js&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Head to &lt;code&gt;lib/constants/global_variables.dart&lt;/code&gt; file, replace &#xA;  &lt;yourip&gt;&#xA;    with your IP Address.&#xA;  &lt;/yourip&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create Cloudinary Project, enable unsigned operation in settings.&lt;/li&gt; &#xA; &lt;li&gt;Head to &lt;code&gt;lib/features/admin/services/admin_services.dart&lt;/code&gt;, replace &lt;code&gt;denfgaxvg&lt;/code&gt; and &lt;code&gt;uszbstnu&lt;/code&gt; with your Cloud Name and Upload Preset respectively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then run the following commands to run your app:&lt;/p&gt; &#xA;&lt;h3&gt;Server Side&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  cd server&#xA;  npm install&#xA;  npm run dev (for continuous development)&#xA;  OR&#xA;  npm start (to run script 1 time)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client Side&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  flutter pub get&#xA;  open -a simulator (to get iOS Simulator)&#xA;  flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tech Used&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;: Node.js, Express, Mongoose, MongoDB, Cloudinary&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;: Flutter, Provider&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have any feedback, please reach out to me at &lt;a href=&#34;mailto:namanrivaan@gmail.com&#34;&gt;namanrivaan@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JordyHers/Times-up-flutter</title>
    <updated>2022-06-02T01:39:00Z</updated>
    <id>tag:github.com,2022-06-02:/JordyHers/Times-up-flutter</id>
    <link href="https://github.com/JordyHers/Times-up-flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parental Control App- For Android üåüThis Application use Native plugins to get local data such as Location and AppData to send it to the database. These information are saved in cache. In order to monitor the time spend on screen parent can then send messages and warn kids when it‚Äôs time to go to bed or do their homework. üì±üåüüåü&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Time&#39;s Up üöº&lt;/h1&gt; &#xA;&lt;p&gt;Time&#39;s Up is a mobile application developed using flutter to monitor the time kids spend on screen. So far the app is only available on Android. The app can&#39;t run on iOS devices.The application has for sole purpose to track and record the data from the child&#39;s device and send it to parents. The application does not violate the privacy policies settled for user, and doesn&#39;t collect data for third parties companies.&lt;/p&gt; &#xA;&lt;h6&gt; Live App Demo &lt;/h6&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49708438/171131514-2da559c6-53b8-468a-b447-db69eb233d59.mov&#34;&gt;https://user-images.githubusercontent.com/49708438/171131514-2da559c6-53b8-468a-b447-db69eb233d59.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The first version doesn&#39;t contain all the features. Some features have been hardcoded on purpose. In order to have the code, please approach the author.üî•&lt;/h3&gt; &#xA;&lt;p&gt;This version includes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Location Tracking&lt;/li&gt; &#xA; &lt;li&gt;App Usage&lt;/li&gt; &#xA; &lt;li&gt;Notification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Premium&lt;/strong&gt; ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;App Icons üì±&lt;/li&gt; &#xA; &lt;li&gt;App Usage Metrics üìà&lt;/li&gt; &#xA; &lt;li&gt;Setting page (Update Profile) üöπ&lt;/li&gt; &#xA; &lt;li&gt;Contact Us pageüì©&lt;/li&gt; &#xA; &lt;li&gt;Dark Mode üåò&lt;/li&gt; &#xA; &lt;li&gt;Customize Notification üì≥&lt;/li&gt; &#xA; &lt;li&gt;Battery Level üì∂&lt;/li&gt; &#xA; &lt;li&gt;Marker image (Child&#39;s Picture) on Map üó∫&lt;/li&gt; &#xA; &lt;li&gt;Email follow up for weekly report üì®&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Onboarding Screen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img width=&#34;215&#34; alt=&#34;Onboarding Screen&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897259-af5ed4b4-8bdc-4460-80c7-1b83d797d079.png&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;OnboardingScreen2&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897294-e71daa79-343b-4c39-b8c4-0181449ada27.png&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;OnboardingScreen3&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897320-73528e2d-26f8-41f7-ab42-1b7e73cc7d06.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run Project on your device&lt;/h2&gt; &#xA;&lt;h3&gt;Step_1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;gt; flutter create parental_control&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step_2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;gt; git clone project and copy files to new projects &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step_3&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Add the necessary permissions to /android/app/src/main/AndroidManifest.xml&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    &amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34;/&amp;gt;&#xA;    &amp;lt;uses-permission&#xA;        android:name=&#34;android.permission.PACKAGE_USAGE_STATS&#34;&#xA;        tools:ignore=&#34;ProtectedPermissions&#34; /&amp;gt;&#xA;    &amp;lt;uses-permission&#xA;        android:name=&#34;android.permission.ACCESS_FINE_LOCATION&#34;&#xA;        /&amp;gt;&#xA;    &amp;lt;uses-permission&#xA;        android:name=&#34;android.permission.ACCESS_COARSE_LOCATION&#34;&#xA;        /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Add your APi Key to project /android/app/src/main/AndroidManifest.xml&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Create api Google Map key on Google cloud Console to launch the map. &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/google-maps-in-flutter#5&#34;&gt;Set Up Google map in Flutter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  &amp;lt;meta-data&#xA;            android:name=&#34;com.google.android.geo.API_KEY&#34;&#xA;            android:value=&#34;&amp;lt;Your Api Key&amp;gt;&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step_4&lt;/h3&gt; &#xA;&lt;p&gt;Create a new firebase project and add your credentials and SHA-1 and SHA-256 Keys&lt;/p&gt; &#xA;&lt;p&gt;Then Add google.json file to android / app folder &lt;a href=&#34;https://firebase.google.com/docs/flutter/setup?platform=android&#34;&gt;Add Firebase to your flutter app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Location Tracking&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; App Usage Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CloudFunctions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Messaging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PushNotifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;App Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The app is composed by two main layers.&lt;/p&gt; &#xA;&lt;h3&gt;Presentation Layer&lt;/h3&gt; &#xA;&lt;p&gt;This layer holds all the widgets, along with their controllers.&lt;/p&gt; &#xA;&lt;p&gt;Widgets do not communicate directly with the repository.&lt;/p&gt; &#xA;&lt;p&gt;Instead, they watch some controllers that extend the &lt;code&gt;StateNotifier&lt;/code&gt;. The busineess Logic&lt;/p&gt; &#xA;&lt;p&gt;used to control pages is &lt;a href=&#34;https://bloclibrary.dev/#/&#34;&gt;BLoC&lt;/a&gt;. It is the perfect tool in&lt;/p&gt; &#xA;&lt;p&gt;this use case as BLoC allows to emit states using Specific ENUMS cases.&lt;/p&gt; &#xA;&lt;h2&gt;Packages in use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/firebase_auth&#34;&gt;firebase auth&lt;/a&gt; for authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/provider&#34;&gt;provider&lt;/a&gt; for state management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_bloc&#34;&gt;flutter_bloc&lt;/a&gt; for Child&#39;s page management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/easy_location&#34;&gt;easy location&lt;/a&gt; for tracking locations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/geo_locator&#34;&gt;geo_locator&lt;/a&gt; for Lat and long values&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/cached_network_image&#34;&gt;cached_network_image&lt;/a&gt; for caching images&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/app_usage&#34;&gt;app_usage&lt;/a&gt; for app usage data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/shared_preferences&#34;&gt;shared_preferences&lt;/a&gt; for String and bool caching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Login Parent üë®‚Äçüë©‚Äç&lt;/h2&gt; &#xA;&lt;p&gt;The first step is to log in the parent. Then Location permission we be asked and needs to be enabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;215&#34; alt=&#34;LoginParent1&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897543-4d48ee61-503f-4415-bf30-fe8321143df9.png&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;LoginParent2&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897485-86a199b6-e8d7-4111-98e1-f9a56fa91a7c.png&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;LoginParent3&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897562-f0aa6264-6d71-441f-b732-4336d19539ca.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Parent side üë®‚Äçüë©‚Äçüë¶&lt;/h2&gt; &#xA;&lt;p&gt;First the parent downloads the app on his android device.To explain in a few details, the first step&lt;/p&gt; &#xA;&lt;p&gt;of the application is the Splash screen. A splash screen will present a landing page. In this case, suppose the login is a parent.&lt;/p&gt; &#xA;&lt;p&gt;Just touch the Parent DEVICE button for the parent.After that, you will be redirected to a login page. There are currently 3 possible&lt;/p&gt; &#xA;&lt;p&gt;input options.See Figure (4.2).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;- Sign in with email&#xA;- Sign in with facebook&#xA;- Sign in with google&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897672-26bdf5a3-d2e4-475e-8966-ef5216bd9f5a.png&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897692-5c884f1b-7452-49ed-9705-41d6702d5514.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Child&#39;s details page üö∏&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170897989-fc598995-c215-4292-91ef-3a242348dc1b.png&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170898002-2951e3cc-ef13-415c-ac40-9f12f001cb5c.png&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Registering the new child&#39;s device&lt;/h2&gt; &#xA;&lt;p&gt;Now the next step is to add a new sub device. Each user can only add a child device to the database as a sub- collection&lt;/p&gt; &#xA;&lt;p&gt;therefore does not have access to all stored child devices. Moreover each parent will be able to show only their child.&lt;/p&gt; &#xA;&lt;p&gt;To achieve this a FloatingActionButton (+) is available on the Home page. This action will then open a page where you can&lt;/p&gt; &#xA;&lt;p&gt;add the child&#39;s picture, name, and email. Although email remains optional, it&#39;s always a good idea to keep an email.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170898921-b4045131-62f8-4df9-a34d-767aa99e18a9.jpeg&#34;&gt; &lt;img width=&#34;215&#34; height=&#34;450&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170898969-ee2ac8eb-990f-4cdc-b936-c41a7cd4a5f3.jpeg&#34;&gt; &lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170899020-42aaa9cb-cf06-4580-b47a-efc767d747eb.jpeg&#34;&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-05-10 at 19 51 51&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170899070-ca7abdef-accb-4f81-a470-f07b17133f1c.jpeg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Database State at this step üóÇ&lt;/h3&gt; &#xA;&lt;img width=&#34;1009&#34; alt=&#34;Screen Shot 2022-05-30 at 03 55 19&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170899554-a6dcd93b-3db6-4c35-a7cf-c6d4e90e04b1.png&#34;&gt; &#xA;&lt;h2&gt;Child&#39;s side&lt;/h2&gt; &#xA;&lt;p&gt;The parent must then log into the child&#39;s device with their credentials (email and password).&lt;/p&gt; &#xA;&lt;p&gt;Then the parent would have to enter the child‚Äôs unique key displayed in red (see fig.4.4-4). As soon as the child is verified,&lt;/p&gt; &#xA;&lt;p&gt;the device&#39;s location, TokenID and App List will be retrieved and added to Firebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-01-15 at 16 04 41&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170900224-4432f103-4719-4653-8d48-9be54b58aeb5.jpeg&#34;&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-01-15 at 16 04 41&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170900229-a3728616-195b-4690-9f54-3bbf1e7d0901.jpeg&#34;&gt;&lt;img width=&#34;215&#34; alt=&#34;Screen Shot 2022-01-15 at 16 04 41&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170900455-4160e63a-3952-4d78-a2d1-ccd401ef698c.jpeg&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt; Database State at this step üóÇ &lt;/h3&gt; &#xA;&lt;img width=&#34;1005&#34; alt=&#34;Screen Shot 2022-05-30 at 04 02 59&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170900031-8be98721-25db-4165-9c6c-7a04ce653b0c.png&#34;&gt; &#xA;&lt;h3&gt;Notification Page&lt;/h3&gt; &#xA;&lt;p&gt;The notification page will essentially allow the parent to send messages to the child&#39;s device. There are currently only two&lt;/p&gt; &#xA;&lt;p&gt;pre-written messages.&lt;strong&gt;HOMEWORK TIME&lt;/strong&gt; and &lt;strong&gt;GO TO BED&lt;/strong&gt;. Of course, it will be possible to customize these messages shortly. As soon&lt;/p&gt; &#xA;&lt;p&gt;as the parent taps the button a new message is written to the Firebase database. Therefore, it triggers a cloud function that will send&lt;/p&gt; &#xA;&lt;p&gt;the text message to the Token ID corresponding to the device. The system working behind as the backend is entirely handled by&lt;/p&gt; &#xA;&lt;p&gt;CloudFunction of the Firebase database. To achieve this a single javascript function was written and deployed.&lt;/p&gt; &#xA;&lt;img width=&#34;315&#34; alt=&#34;Screen Shot 2022-01-15 at 16 08 38&#34; src=&#34;https://user-images.githubusercontent.com/49708438/149622900-03ea5412-43b6-4b17-a5d0-838b9b027042.png&#34;&gt; &#xA;&lt;h3&gt;Setting Page&lt;/h3&gt; &#xA;&lt;p&gt;Note that some of the settings have not been implemented in the public version of the repo.&lt;/p&gt; &#xA;&lt;img width=&#34;215&#34; alt=&#34;SettigPage&#34; src=&#34;https://user-images.githubusercontent.com/49708438/170898009-c18ee423-e47d-4d41-8f60-ae82ad97150a.png&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE THAT THE PROJECT HAS NOT BEEN MOVE TO NULLL SAFETY YET&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JordyHers/Times-up-flutter/master/LICENSE.md&#34;&gt;LICENSE: MIT&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
</feed>