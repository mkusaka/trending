<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-12T01:29:44Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>diegoveloper/flutter_keyboard_actions</title>
    <updated>2024-10-12T01:29:44Z</updated>
    <id>tag:github.com,2024-10-12:/diegoveloper/flutter_keyboard_actions</id>
    <link href="https://github.com/diegoveloper/flutter_keyboard_actions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Keyboard Actions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/keyboard_actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/keyboard_actions.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add features to the Android / iOS keyboard in a simple way.&lt;/p&gt; &#xA;&lt;p&gt;Because the keyboard that Android / iOS offers us specifically when we are in numeric mode, does not bring the button to hide the keyboard. This causes a lot of inconvenience for users, so this package allows adding functionality to the existing keyboard.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; height=&#34;600&#34; src=&#34;https://media.giphy.com/media/fR4Hum4osoRJaLn25V/giphy.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Done button for the keyboard (You can customize the button).&lt;/li&gt; &#xA; &lt;li&gt;Move up/down between your Textfields (You can hide for set &lt;code&gt;nextFocus: false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Keyboard Bar customization.&lt;/li&gt; &#xA; &lt;li&gt;Custom footer widget below keyboard bar&lt;/li&gt; &#xA; &lt;li&gt;Create your own Keyboard in an easy way&lt;/li&gt; &#xA; &lt;li&gt;You can use it for Android, iOS or both platforms.&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Dialog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of the custom footer:&lt;/p&gt; &#xA;&lt;img width=&#34;250&#34; alt=&#34;Screen Shot 2019-05-22 at 5 46 50 PM&#34; src=&#34;https://user-images.githubusercontent.com/3268245/58218221-0409f200-7cbb-11e9-91d8-592f2e99fa8a.png&#34;&gt; &#xA;&lt;p&gt;For more fun, use that widget as a custom keyboard with your custom input:&lt;/p&gt; &#xA;&lt;img width=&#34;250&#34; alt=&#34;Screen Shot 2019-05-22 at 5 46 54 PM&#34; src=&#34;https://user-images.githubusercontent.com/3268245/58218234-0ec48700-7cbb-11e9-81b6-e61658f4d200.png&#34;&gt; &#xA;&lt;p&gt;Even more fun:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thumbs.gfycat.com/NimbleGraveDarwinsfox-mobile.mp4&#34;&gt;Watch the video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You should ensure that you add the dependency in your flutter project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  keyboard_actions: &#34;^4.1.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should then run &lt;code&gt;flutter packages upgrade&lt;/code&gt; or update your packages in IntelliJ.&lt;/p&gt; &#xA;&lt;h2&gt;Example Project&lt;/h2&gt; &#xA;&lt;p&gt;There is an example project in the &lt;code&gt;example&lt;/code&gt; folder where you can get more information. Check it out. Otherwise, keep reading to get up and running.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import  &#39;package:flutter/material.dart&#39;;&#xA;import  &#39;package:keyboard_actions/keyboard_actions.dart&#39;;&#xA;&#xA;&#xA;class Content extends StatefulWidget {&#xA;  const Content({&#xA;    Key key,&#xA;  }) : super(key: key);&#xA;&#xA;  @override&#xA;  _ContentState createState() =&amp;gt; _ContentState();&#xA;}&#xA;&#xA;class _ContentState extends State&amp;lt;Content&amp;gt; {&#xA;  final FocusNode _nodeText1 = FocusNode();&#xA;  final FocusNode _nodeText2 = FocusNode();&#xA;  final FocusNode _nodeText3 = FocusNode();&#xA;  final FocusNode _nodeText4 = FocusNode();&#xA;  final FocusNode _nodeText5 = FocusNode();&#xA;  final FocusNode _nodeText6 = FocusNode();&#xA;&#xA;  /// Creates the [KeyboardActionsConfig] to hook up the fields&#xA;  /// and their focus nodes to our [FormKeyboardActions].&#xA;  KeyboardActionsConfig _buildConfig(BuildContext context) {&#xA;    return KeyboardActionsConfig(&#xA;      keyboardActionsPlatform: KeyboardActionsPlatform.ALL,&#xA;      keyboardBarColor: Colors.grey[200],&#xA;      nextFocus: true,&#xA;      actions: [&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText1,&#xA;        ),&#xA;        KeyboardActionsItem(focusNode: _nodeText2, toolbarButtons: [&#xA;          (node) {&#xA;            return GestureDetector(&#xA;              onTap: () =&amp;gt; node.unfocus(),&#xA;              child: Padding(&#xA;                padding: EdgeInsets.all(8.0),&#xA;                child: Icon(Icons.close),&#xA;              ),&#xA;            );&#xA;          }&#xA;        ]),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText3,&#xA;          onTapAction: () {&#xA;            showDialog(&#xA;                context: context,&#xA;                builder: (context) {&#xA;                  return AlertDialog(&#xA;                    content: Text(&#34;Custom Action&#34;),&#xA;                    actions: &amp;lt;Widget&amp;gt;[&#xA;                      FlatButton(&#xA;                        child: Text(&#34;OK&#34;),&#xA;                        onPressed: () =&amp;gt; Navigator.of(context).pop(),&#xA;                      )&#xA;                    ],&#xA;                  );&#xA;                });&#xA;          },&#xA;        ),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText4,&#xA;          displayCloseWidget: false,&#xA;        ),&#xA;          KeyboardActionsItem(&#xA;          focusNode: _nodeText5,&#xA;          toolbarButtons: [&#xA;            //button 1&#xA;            (node) {&#xA;              return GestureDetector(&#xA;                onTap: () =&amp;gt; node.unfocus(),&#xA;                child: Container(&#xA;                  color: Colors.white,&#xA;                  padding: EdgeInsets.all(8.0),&#xA;                  child: Text(&#xA;                    &#34;CLOSE&#34;,&#xA;                    style: TextStyle(color: Colors.black),&#xA;                  ),&#xA;                ),&#xA;              );&#xA;            },&#xA;            //button 2&#xA;            (node) {&#xA;              return GestureDetector(&#xA;                onTap: () =&amp;gt; node.unfocus(),&#xA;                child: Container(&#xA;                  color: Colors.black,&#xA;                  padding: EdgeInsets.all(8.0),&#xA;                  child: Text(&#xA;                    &#34;DONE&#34;,&#xA;                    style: TextStyle(color: Colors.white),&#xA;                  ),&#xA;                ),&#xA;              );&#xA;            }&#xA;          ],&#xA;        ),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText6,&#xA;          footerBuilder: (_) =&amp;gt; PreferredSize(&#xA;              child: SizedBox(&#xA;                  height: 40,&#xA;                  child: Center(&#xA;                    child: Text(&#39;Custom Footer&#39;),&#xA;                  )),&#xA;              preferredSize: Size.fromHeight(40)),&#xA;        ),&#xA;      ],&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return KeyboardActions(&#xA;      config: _buildConfig(context),&#xA;      child: Center(&#xA;        child: Padding(&#xA;          padding: const EdgeInsets.all(15.0),&#xA;          child: Column(&#xA;            crossAxisAlignment: CrossAxisAlignment.stretch,&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText1,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.text,&#xA;                focusNode: _nodeText2,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Text with Custom Done Button&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText3,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number with Custom Action&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.text,&#xA;                focusNode: _nodeText4,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Text without Done button&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText5,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number with Toolbar Buttons&#34;,&#xA;                ),&#xA;              ),&#xA;              TextField(&#xA;                keyboardType: TextInputType.number,&#xA;                focusNode: _nodeText6,&#xA;                decoration: InputDecoration(&#xA;                  hintText: &#34;Input Number with Custom Footer&#34;,&#xA;                ),&#xA;              ),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Custom Keyboard&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import  &#39;package:flutter/material.dart&#39;;&#xA;import  &#39;package:keyboard_actions/keyboard_actions.dart&#39;;&#xA;&#xA;class Content extends StatelessWidget {&#xA;  final FocusNode _nodeText7 = FocusNode();&#xA;  final FocusNode _nodeText8 = FocusNode();&#xA;  //This is only for custom keyboards&#xA;  final custom1Notifier = ValueNotifier&amp;lt;String&amp;gt;(&#34;0&#34;);&#xA;  final custom2Notifier = ValueNotifier&amp;lt;Color&amp;gt;(Colors.blue);&#xA;&#xA;  /// Creates the [KeyboardActionsConfig] to hook up the fields&#xA;  /// and their focus nodes to our [FormKeyboardActions].&#xA;  KeyboardActionsConfig _buildConfig(BuildContext context) {&#xA;    return KeyboardActionsConfig(&#xA;      keyboardActionsPlatform: KeyboardActionsPlatform.ALL,&#xA;      keyboardBarColor: Colors.grey[200],&#xA;      nextFocus: true,&#xA;      actions: [&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText7,&#xA;          footerBuilder: (_) =&amp;gt; CounterKeyboard(&#xA;            notifier: custom1Notifier,&#xA;          ),&#xA;        ),&#xA;        KeyboardActionsItem(&#xA;          focusNode: _nodeText8,&#xA;          footerBuilder: (_) =&amp;gt; ColorPickerKeyboard(&#xA;            notifier: custom2Notifier,&#xA;          ),&#xA;        ),&#xA;      ],&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return KeyboardActions(&#xA;      config: _buildConfig(context),&#xA;      child: Center(&#xA;        child: Container(&#xA;          padding: const EdgeInsets.all(15.0),&#xA;          child: Column(&#xA;            crossAxisAlignment: CrossAxisAlignment.stretch,&#xA;            children: &amp;lt;Widget&amp;gt;[&#xA;              KeyboardCustomInput&amp;lt;String&amp;gt;(&#xA;                focusNode: _nodeText7,&#xA;                height: 65,&#xA;                notifier: custom1Notifier,&#xA;                builder: (context, val, hasFocus) {&#xA;                  return Container(&#xA;                    alignment: Alignment.center,&#xA;                    color: hasFocus ? Colors.grey[300] : Colors.white,&#xA;                    child: Text(&#xA;                      val,&#xA;                      style:&#xA;                          TextStyle(fontSize: 30, fontWeight: FontWeight.bold),&#xA;                    ),&#xA;                  );&#xA;                },&#xA;              ),&#xA;              KeyboardCustomInput&amp;lt;Color&amp;gt;(&#xA;                focusNode: _nodeText8,&#xA;                height: 65,&#xA;                notifier: custom2Notifier,&#xA;                builder: (context, val, hasFocus) {&#xA;                  return Container(&#xA;                    width: double.maxFinite,&#xA;                    color: val ?? Colors.transparent,&#xA;                  );&#xA;                },&#xA;              ),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&#xA;/// A quick example &#34;keyboard&#34; widget for picking a color.&#xA;class ColorPickerKeyboard extends StatelessWidget&#xA;    with KeyboardCustomPanelMixin&amp;lt;Color&amp;gt;&#xA;    implements PreferredSizeWidget {&#xA;  final ValueNotifier&amp;lt;Color&amp;gt; notifier;&#xA;  static const double _kKeyboardHeight = 200;&#xA;&#xA;  ColorPickerKeyboard({Key key, this.notifier}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    final double rows = 3;&#xA;    final double screenWidth = MediaQuery.of(context).size.width;&#xA;    final int colorsCount = Colors.primaries.length;&#xA;    final int colorsPerRow = (colorsCount / rows).ceil();&#xA;    final double itemWidth = screenWidth / colorsPerRow;&#xA;    final double itemHeight = _kKeyboardHeight / rows;&#xA;&#xA;    return Container(&#xA;      height: _kKeyboardHeight,&#xA;      child: Wrap(&#xA;        children: &amp;lt;Widget&amp;gt;[&#xA;          for (final color in Colors.primaries)&#xA;            GestureDetector(&#xA;              onTap: () {&#xA;                updateValue(color);&#xA;              },&#xA;              child: Container(&#xA;                color: color,&#xA;                width: itemWidth,&#xA;                height: itemHeight,&#xA;              ),&#xA;            )&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;&#xA;  @override&#xA;  Size get preferredSize =&amp;gt; Size.fromHeight(_kKeyboardHeight);&#xA;}&#xA;&#xA;/// A quick example &#34;keyboard&#34; widget for counter value.&#xA;class CounterKeyboard extends StatelessWidget&#xA;    with KeyboardCustomPanelMixin&amp;lt;String&amp;gt;&#xA;    implements PreferredSizeWidget {&#xA;  final ValueNotifier&amp;lt;String&amp;gt; notifier;&#xA;&#xA;  CounterKeyboard({Key key, this.notifier}) : super(key: key);&#xA;&#xA;  @override&#xA;  Size get preferredSize =&amp;gt; Size.fromHeight(200);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Container(&#xA;      height: preferredSize.height,&#xA;      child: Row(&#xA;        children: [&#xA;          Expanded(&#xA;            child: InkWell(&#xA;              onTap: () {&#xA;                int value = int.tryParse(notifier.value) ?? 0;&#xA;                value--;&#xA;                updateValue(value.toString());&#xA;              },&#xA;              child: FittedBox(&#xA;                child: Text(&#xA;                  &#34;-&#34;,&#xA;                  style: TextStyle(&#xA;                    fontWeight: FontWeight.bold,&#xA;                  ),&#xA;                ),&#xA;              ),&#xA;            ),&#xA;          ),&#xA;          Expanded(&#xA;            child: InkWell(&#xA;              onTap: () {&#xA;                int value = int.tryParse(notifier.value) ?? 0;&#xA;                value++;&#xA;                updateValue(value.toString());&#xA;              },&#xA;              child: FittedBox(&#xA;                child: Text(&#xA;                  &#34;+&#34;,&#xA;                  style: TextStyle(&#xA;                    fontWeight: FontWeight.bold,&#xA;                  ),&#xA;                ),&#xA;              ),&#xA;            ),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can follow me on twitter &lt;a href=&#34;https://www.twitter.com/diegoveloper&#34;&gt;@diegoveloper&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>