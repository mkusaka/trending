<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-08T01:34:13Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cfug/flutter.cn</title>
    <updated>2023-06-08T01:34:13Z</updated>
    <id>tag:github.com,2023-06-08:/cfug/flutter.cn</id>
    <link href="https://github.com/cfug/flutter.cn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter CN docs translation plan, get started from the wiki: https://github.com/cfug/flutter.cn/wiki&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://docs.flutter.dev&#34;&gt;&lt;img src=&#34;https://github.com/dart-lang/site-shared/raw/main/src/_assets/image/flutter/icon/64.png?raw=1&#34; alt=&#34;Flutter logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://docs.flutter.dev/&#34;&gt;Flutter&lt;/a&gt; website&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutter/website/actions?query=workflow%3Abuild+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/flutter/website/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deps.dev/project/github/flutter%2Fwebsite&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/flutter/website/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#issues-bugs-and-requests&#34;&gt;Issues, bugs, and requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#before-you-submit-a-pr&#34;&gt;Before you submit a PR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#before-you-build-this-site&#34;&gt;Before you build this site&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#1-get-the-prerequisites&#34;&gt;1. Get the prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#2-clone-this-repo-and-its-submodules&#34;&gt;2. Clone this repo &lt;em&gt;and&lt;/em&gt; its submodules&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#setting-up-your-local-environment-and-serving-changes&#34;&gt;Setting up your local environment and serving changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#creating-andor-editing-dartpad-example-code&#34;&gt;Creating and/or editing DartPad example code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#dartpad-example-code-in-github-gists&#34;&gt;DartPad example code in GitHub gists&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#dartpad-example-code-in-this-repo&#34;&gt;DartPad example code in this repo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#deploying-to-a-staging-site&#34;&gt;Deploying to a staging site&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cfug/flutter.cn/master/#writing-for-flutterdev&#34;&gt;Writing for flutter.dev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues, bugs, and requests&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions and feedback on our website. Please file a request in our &lt;a href=&#34;https://github.com/flutter/website/issues/new/choose&#34;&gt;issue tracker&lt;/a&gt; or create a &lt;a href=&#34;https://github.com/flutter/website/pulls&#34;&gt;pull request&lt;/a&gt;. For simple changes (such as tweaking some text), it&#39;s easiest to make changes using the GitHub UI.&lt;/p&gt; &#xA;&lt;p&gt;If you have an issue with the API docs on &lt;a href=&#34;https://api.flutter.dev&#34;&gt;api.flutter.dev&lt;/a&gt;, please file those issues on the &lt;a href=&#34;https://github.com/flutter/flutter/issues&#34;&gt;flutter/flutter&lt;/a&gt; repo, not on this (flutter/website) repo. The API docs are embedded in Flutter&#39;s source code, so the engineering team handles those.&lt;/p&gt; &#xA;&lt;h2&gt;Before you submit a PR&lt;/h2&gt; &#xA;&lt;p&gt;We love it when the community gets involved in improving our docs! But here are a few notes to keep in mind before you submit a PR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When triaging issues, we sometimes label an issue with the tag &lt;strong&gt;PRs welcome&lt;/strong&gt;. But we welcome PRs on other issues as well— it doesn&#39;t have to be tagged with that label.&lt;/li&gt; &#xA; &lt;li&gt;Please don&#39;t run our docs through Grammarly (or similar) and submit those changes as a PR.&lt;/li&gt; &#xA; &lt;li&gt;We follow the &lt;a href=&#34;https://developers.google.com/style&#34;&gt;Google Developer Documentation Style Guidelines&lt;/a&gt; — for example, don&#39;t use &#34;i.e.&#34; or &#34;e.g.&#34;, avoid writing in first person, and avoid writing in future tense. You can start with the &lt;a href=&#34;https://developers.google.com/style/highlights&#34;&gt;style guide highlights&lt;/a&gt; or the &lt;a href=&#34;https://developers.google.com/style/word-list&#34;&gt;word list&lt;/a&gt;, or use the search bar that&#39;s at the top of every style guide page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We truly thank you for your willingness and helpfulness in keeping the website docs up to date!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Before you build this site&lt;/h2&gt; &#xA;&lt;p&gt;For changes beyond simple text and CSS tweaks, we recommend building the site.&lt;/p&gt; &#xA;&lt;h3&gt;1. Get the prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Install the following tools, if you don&#39;t have them already:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;bash&lt;/strong&gt;, the Bourne shell&lt;br&gt; These instructions assume you&#39;re using &lt;code&gt;bash&lt;/code&gt;, and setup might not work if you use another shell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GNU Make&lt;/strong&gt;&lt;br&gt; On Windows the easiest way to install Make is &lt;code&gt;choco install make&lt;/code&gt;. Other options include using a &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;subsystem&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;. We use Docker for local dev, tests, and building the site. Install it from &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;https://docs.docker.com/get-docker/&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Firebase CLI&lt;/strong&gt;, for hosting the site locally. One way to get this is to run &lt;code&gt;npm install -g firebase-tools&lt;/code&gt;. For full setup details, read the &lt;a href=&#34;https://firebase.google.com/docs/cli&#34;&gt;Firebase CLI documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Clone this repo &lt;em&gt;and&lt;/em&gt; its submodules&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repo has git &lt;em&gt;submodules&lt;/em&gt;, which affects how you clone it. The GitHub documentation has general help on &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/fork-a-repo&#34;&gt;forking&lt;/a&gt; and &lt;a href=&#34;https://help.github.com/articles/cloning-a-repository&#34;&gt;cloning&lt;/a&gt; repos.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you are working in the Windows desktop environment, make sure you have Git &lt;code&gt;autocrlf&lt;/code&gt; set to &lt;code&gt;input&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; initializing the submodules. This ensures that line endings are handled correctly &lt;em&gt;before&lt;/em&gt; any Bash scripts are executed within the submodules. See &lt;a href=&#34;https://github.com/flutter/website/issues/6201&#34;&gt;issue 6201&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re outside of the Flutter organization, we recommend you &lt;strong&gt;create a fork&lt;/strong&gt; of the repo under your own account, and then submit a PR from that fork.&lt;/p&gt; &#xA;&lt;p&gt;Once you have a fork (or you&#39;re a Flutter org member), &lt;em&gt;choose one&lt;/em&gt; of the following submodule-cloning techniques:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo and its submodule at the same using the &lt;code&gt;--recurse-submodules&lt;/code&gt; option:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recurse-submodules https://github.com/&amp;lt;username-or-flutter&amp;gt;/website.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;OR&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;ve already cloned the repo without its submodule, then run this command from the repo root:&lt;br&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; At any time during development you can use the &lt;code&gt;git submodule&lt;/code&gt; command to refresh submodules:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git pull; git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Setting up your local environment and serving changes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; After cloning the repo and its submodules, create a branch for your changes:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git checkout -b &amp;lt;BRANCH_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the Docker Desktop application isn&#39;t already running, start it. Look at its status icon: if it has an exclamation point (&lt;code&gt;!&lt;/code&gt;), then update Docker Desktop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the initial setup command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make setup&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Serve the site locally (via &lt;code&gt;docker-compose&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The site is generated, and then the development server runs in the Docker container, with the generated &lt;code&gt;_site&lt;/code&gt; directory visible locally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;View your changes in the browser by navigating to &lt;code&gt;http://localhost:4002&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Unless you&#39;re editing files under &lt;code&gt;site-shared&lt;/code&gt;, you can safely ignore &lt;code&gt;ERROR: directory is already being watched&lt;/code&gt; messages. For details, see &lt;a href=&#34;https://github.com/flutter/website/issues/1363&#34;&gt;#1363&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your changes. The files are updated, and your browser view should update to reflect the changes. You can either edit files locally or use an editor like &lt;code&gt;vim&lt;/code&gt; directly in a shell in the container. To start a container shell, run &lt;code&gt;docker-compose exec site bash&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; If you aren&#39;t seeing the changes you expect, restart the server and rebuild the site from scratch:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make down &amp;amp;&amp;amp; make clean &amp;amp;&amp;amp; make up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;In some rare cases you might want to force all running containers down:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker rm -f $(docker ps -aq)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Commit your changes to the branch and submit your PR.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you&#39;ve finished developing, shut down the Docker container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make down&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; To find additional commands, read the &lt;a href=&#34;https://github.com/flutter/website/raw/main/Makefile&#34;&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt;. For example, if you need to debug the Docker infrastructure, you can run &lt;code&gt;make debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Creating and/or editing DartPad example code&lt;/h2&gt; &#xA;&lt;p&gt;Most of the code used to create &lt;a href=&#34;https://dartpad.dev&#34;&gt;DartPad&lt;/a&gt; examples is hosted on GitHub. However, this repo also contains some &lt;code&gt;*.dart&lt;/code&gt; files responsible for DartPad example code.&lt;/p&gt; &#xA;&lt;h3&gt;DartPad example code in GitHub gists&lt;/h3&gt; &#xA;&lt;p&gt;A typical DartPad example takes the form of an &lt;code&gt;iframe&lt;/code&gt;, for example, within a codelab&#39;s Markdown file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;iframe&#xA;  src=&#34;{{ site.custom.dartpad.embed-flutter-prefix }}?id=d7b09149ffee2f0535bb0c04d96987f5&#34; &#xA;  style=&#34;border:1px solid lightgrey;margin-top:10px;margin-bottom:25px&#34;&#xA;  frameborder=&#34;no&#34; height=&#34;500&#34; width=&#34;100%&#34;&amp;gt;&#xA;&amp;lt;/iframe&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This &lt;code&gt;iframe&lt;/code&gt; depends on the following GitHub gist URL:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://gist.github.com/d7b09149ffee2f0535bb0c04d96987f5&#34;&gt;https://gist.github.com/d7b09149ffee2f0535bb0c04d96987f5&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For detailed instructions on how to use this approach to DartPad examples, see the &lt;a href=&#34;https://github.com/dart-lang/dart-pad/wiki/Embedding-Guide&#34;&gt;DartPad embedding guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;DartPad example code in this repo&lt;/h3&gt; &#xA;&lt;p&gt;Some DartPad example code remains in this repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/_packages/dartpad_picker/web/dartpad_picker_main.dart&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This code must be manually compiled, which also regenerates the associated JavaScript file in &lt;code&gt;src/assets/js&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd src/_packages/dartpad_picker&#xA;$ ./compile.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying to a staging site&lt;/h2&gt; &#xA;&lt;p&gt;You can deploy your local edits to a personal staging site as follows.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t already have a Firebase project, navigate to the &lt;a href=&#34;https://console.firebase.google.com&#34;&gt;Firebase Console&lt;/a&gt; and create your own Firebase project (for example, &lt;code&gt;my-foo&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a separate &lt;code&gt;bash&lt;/code&gt; shell, change to the repo directory and initialize Firebase:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npx firebase init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you created a new project, add it using the &lt;a href=&#34;https://firebase.googleblog.com/2016/07/deploy-to-multiple-environments-with.html&#34;&gt;&lt;code&gt;firebase use&lt;/code&gt; command&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npx firebase use --add&#xA;? Which project do you want to add? &amp;lt;select the project you created&amp;gt;&#xA;? What alias do you want to use for this project? (e.g. staging) my-foo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tell Firebase that you want to deploy to your project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npx firebase use my-foo&#xA;Now using alias staging (my-foo)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and deploy to the specified staging site:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make stage-local&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Your personal version of the Flutter website is now deployed to Firebase. Copy the serving URL from the command output.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;br&gt; Before staging the site on Firebase, terminate all instances serving the site locally with &lt;code&gt;make up&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Refreshing code excerpts&lt;/h2&gt; &#xA;&lt;p&gt;A build that fails with the error &lt;code&gt;=&amp;gt; ERROR: some code excerpts were not refreshed!&lt;/code&gt; means that one or more code excerpts in the markdown file aren&#39;t identical to the code in the corresponding &lt;code&gt;.dart&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;To resolve this error, from the root of the &lt;code&gt;website&lt;/code&gt; directory, run &lt;code&gt;./tool/refresh-code-excerpts.sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/code-excerpts.md&#34;&gt;Code excerpts&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;Writing for flutter.dev&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/dart-lang/site-shared&#34;&gt;site-shared&lt;/a&gt; repo contains infrastructure shared by most of our Dart and Flutter websites. Some of this README is in the &lt;a href=&#34;https://github.com/dart-lang/site-shared/tree/main/doc&#34;&gt;doc&lt;/a&gt; directory in the site-shared repo.&lt;/p&gt; &#xA;&lt;p&gt;For more information on using and writing for this repo, refer to the following docs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/writing-for-dart-and-flutter-websites.md&#34;&gt;Writing for Dart and Flutter websites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/infrastructure.md&#34;&gt;Infrastructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/markdown.md&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/examples.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/code-excerpts.md&#34;&gt;Code excerpts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/images.md&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/main/doc/mobile-friendly-pages.md&#34;&gt;Mobile friendly pages: tips &amp;amp; tricks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Baseflow/flutter_cache_manager</title>
    <updated>2023-06-08T01:34:13Z</updated>
    <id>tag:github.com,2023-06-08:/Baseflow/flutter_cache_manager</id>
    <link href="https://github.com/Baseflow/flutter_cache_manager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generic cache manager for flutter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;BREAKING CHANGES IN V2&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;CacheManager v2 introduced some breaking changes when configuring a custom CacheManager. &lt;a href=&#34;https://raw.githubusercontent.com/Baseflow/flutter_cache_manager/develop/#breaking-changes-in-v2&#34;&gt;See the bottom of this page for the changes.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;flutter_cache_manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_cache_manager&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_cache_manager.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.bitrise.io/app/b3454de795b5c22a&#34;&gt;&lt;img src=&#34;https://app.bitrise.io/app/b3454de795b5c22a/status.svg?token=vEfW1ztZ-tkoUx64yXeklg&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Baseflow/flutter_cache_manager&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Baseflow/flutter_cache_manager/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CacheManager to download and cache files in the cache directory of the app. Various settings on how long to keep a file can be changed.&lt;/p&gt; &#xA;&lt;p&gt;It uses the cache-control http header to efficiently retrieve files.&lt;/p&gt; &#xA;&lt;p&gt;The more basic usage is explained here. See the complete docs for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The cache manager can be used to get a file on various ways The easiest way to get a single file is call &lt;code&gt;.getSingleFile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    var file = await DefaultCacheManager().getSingleFile(url);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;getFileStream(url)&lt;/code&gt; returns a stream with the first result being the cached file and later optionally the downloaded file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getFileStream(url, withProgress: true)&lt;/code&gt; when you set withProgress on true, this stream will also emit DownloadProgress when the file is not found in the cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;downloadFile(url)&lt;/code&gt; directly downloads from the web.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;getFileFromCache&lt;/code&gt; only retrieves from cache and returns no file when the file is not in the cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;putFile&lt;/code&gt; gives the option to put a new file into the cache without downloading it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;removeFile&lt;/code&gt; removes a file from the cache.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;emptyCache&lt;/code&gt; removes all files from the cache.&lt;/p&gt; &#xA;&lt;h2&gt;Other implementations&lt;/h2&gt; &#xA;&lt;p&gt;When your files are stored on Firebase Storage you can use &lt;a href=&#34;https://pub.dev/packages/flutter_cache_manager_firebase&#34;&gt;flutter_cache_manager_firebase&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customize&lt;/h2&gt; &#xA;&lt;p&gt;The cache manager is customizable by creating a new CacheManager. It is very important to not create more than 1 CacheManager instance with the same key as these bite each other. In the example down here the manager is created as a Singleton, but you could also use for example Provider to Provide a CacheManager on the top level of your app. Below is an example with other settings for the maximum age of files, maximum number of objects and a custom FileService. The key parameter in the constructor is mandatory, all other variables are optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class CustomCacheManager {&#xA;  static const key = &#39;customCacheKey&#39;;&#xA;  static CacheManager instance = CacheManager(&#xA;    Config(&#xA;      key,&#xA;      stalePeriod: const Duration(days: 7),&#xA;      maxNrOfCacheObjects: 20,&#xA;      repo: JsonCacheInfoRepository(databaseName: key),&#xA;      fileSystem: IOFileSystem(key),&#xA;      fileService: HttpFileService(),&#xA;    ),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Baseflow/flutter_cache_manager/develop/#how-are-the-cache-files-stored&#34;&gt;How are the cache files stored?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Baseflow/flutter_cache_manager/develop/#when-are-the-cached-files-updated&#34;&gt;When are the cached files updated?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Baseflow/flutter_cache_manager/develop/#when-are-cached-files-removed&#34;&gt;When are cached files removed?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How are the cache files stored?&lt;/h3&gt; &#xA;&lt;p&gt;By default the cached files are stored in the temporary directory of the app. This means the OS can delete the files any time.&lt;/p&gt; &#xA;&lt;p&gt;Information about the files is stored in a database using sqflite on Android, iOS and macOs, or in a plain JSON file on other platforms. The file name of the database is the key of the cacheManager, that&#39;s why that has to be unique.&lt;/p&gt; &#xA;&lt;h3&gt;When are the cached files updated?&lt;/h3&gt; &#xA;&lt;p&gt;A valid url response should contain a Cache-Control header. More info on the header can be found &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&#34;&gt;here&lt;/a&gt;, but in summary it says for how long the image can be expected to be up to date. It also contains an &#39;eTag&#39; which can be used to check (after that time) whether the file did change or if it is actually still valid.&lt;/p&gt; &#xA;&lt;p&gt;When a file is in the cache that is always directly returned when calling &lt;code&gt;getSingleFile&lt;/code&gt; or &lt;code&gt;getFileStream&lt;/code&gt;. After that the information is check if the file is actually still valid. If the file is outdated according to the Cache-Control headers the manager tries to update the file and store the new one in the cache. When you use &lt;code&gt;getFileStream&lt;/code&gt; this updated file will also be returned in the stream.&lt;/p&gt; &#xA;&lt;h3&gt;When are cached files removed?&lt;/h3&gt; &#xA;&lt;p&gt;The files can be removed by the cache manager or by the operating system. By default the files are stored in a cache folder, which is sometimes cleaned for example on Android with an app update.&lt;/p&gt; &#xA;&lt;p&gt;The cache manager uses 2 variables to determine when to delete a file, the &lt;code&gt;maxNrOfCacheObjects&lt;/code&gt; and the &lt;code&gt;stalePeriod&lt;/code&gt;. The cache knows when files have been used latest. When cleaning the cache (which happens continuously), the cache deletes files when there are too many, ordered by last use, and when files just haven&#39;t been used for longer than the stale period.&lt;/p&gt; &#xA;&lt;h2&gt;Breaking changes in v2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;There is no longer a need to extend on BaseCacheManager, you can directly call the constructor. The BaseCacheManager is therefore renamed to CacheManager as it is not really just a &#39;base&#39; anymore.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The constructor now expects a Config object with some settings you were used to, but some are slightly different. For example the system where you want to store your files is not just a dictionary anymore, but a FileSystem. That way you have more freedom on where to store your files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dart-code-checker/dart-code-metrics</title>
    <updated>2023-06-08T01:34:13Z</updated>
    <id>tag:github.com,2023-06-08:/dart-code-checker/dart-code-metrics</id>
    <link href="https://github.com/dart-code-checker/dart-code-metrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Software analytics tool that helps developers analyse and improve software quality.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dart-code-checker/dart-code-metrics/master/assets/logo.svg?sanitize=true&#34; alt=&#34;DCM logo&#34; height=&#34;150&#34; width=&#34;150&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DCM&lt;/h1&gt; &#xA;&lt;p&gt;This package is entering the deprecation process and will be fully discontinued on July 16th. You can read more in this blog post &lt;a href=&#34;https://dcm.dev/blog/2023/06/06/announcing-dcm-free-version-sunset/&#34;&gt;https://dcm.dev/blog/2023/06/06/announcing-dcm-free-version-sunset/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are grateful to our users and especially contributors for using and working on this package!&lt;/p&gt; &#xA;&lt;p&gt;If you are a DCM contributor, you can receive a special license. Feel free to reach out to &lt;a href=&#34;mailto:info@dcm.dev&#34;&gt;info@dcm.dev&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>