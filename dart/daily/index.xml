<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-23T01:26:29Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Hamad-Anwar/Task-Sync-Pro-Flutter</title>
    <updated>2023-08-23T01:26:29Z</updated>
    <id>tag:github.com,2023-08-23:/Hamad-Anwar/Task-Sync-Pro-Flutter</id>
    <link href="https://github.com/Hamad-Anwar/Task-Sync-Pro-Flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Welcome to the Beautiful Task Scheduler App repository! This Flutter-based task management application combines elegant design with a robust backend, ensuring a seamless and organized task management experience. From stunning UI to real-time synchronization, this app has you covered.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beautiful Task Scheduler App&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Beautiful Task Scheduler App repository! This Flutter-based task management application combines elegant design with a robust backend, ensuring a seamless and organized task management experience. From stunning UI to real-time synchronization, this app has you covered.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Hamad-Anwar/Task-Sync-Pro-Flutter/master/demo.png&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stunning UI&lt;/strong&gt;: Immerse yourself in a visually captivating user interface designed to enhance your task management experience.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Optimized Backend&lt;/strong&gt;: The app&#39;s backend is finely tuned for optimal performance, ensuring smooth navigation and operation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Offline Access&lt;/strong&gt;: With Sqflite integration, the app remains fully functional even when offline, so you can manage tasks without interruptions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Real-time Sync&lt;/strong&gt;: The Firebase Realtime Database powers real-time synchronization of tasks across multiple devices, making sure your tasks are up-to-date everywhere.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Device Experience&lt;/strong&gt;: Create, update, or delete tasks on one device and see the changes instantly reflected on all devices linked to your account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Secure Authentication&lt;/strong&gt;: Firebase Authentication ensures the security of your tasks and data, allowing you to manage your to-dos with peace of mind.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Authentication and Session Management&lt;/strong&gt;: Utilizing Firebase Authentication and the &lt;code&gt;firebase_auth&lt;/code&gt; package, the app provides a robust user authentication system. The session management is handled seamlessly, allowing users to securely access their tasks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository using `git clone &lt;a href=&#34;https://github.com/Hamad-Anwar/Task-Sync-Pro-Flutter.git&#34;&gt;https://github.com/Hamad-Anwar/Task-Sync-Pro-Flutter.git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory: &lt;code&gt;cd task-scheduler-app&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies: &lt;code&gt;flutter pub get&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Add &lt;code&gt;google-services.json&lt;/code&gt;:&lt;/strong&gt; For Firebase setup, each developer needs to add their own &lt;code&gt;google-services.json&lt;/code&gt; file obtained from their Firebase project. Place this file in the &lt;code&gt;android/app&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set Up Firebase Authentication:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to the Firebase Console and create a project.&lt;/li&gt; &#xA;   &lt;li&gt;Enable the Email/Password sign-in method.&lt;/li&gt; &#xA;   &lt;li&gt;Add your Android app to the project and download the &lt;code&gt;google-services.json&lt;/code&gt; file.&lt;/li&gt; &#xA;   &lt;li&gt;Add your iOS app if needed and download the &lt;code&gt;GoogleService-Info.plist&lt;/code&gt; file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set Up Firebase Realtime Database:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the Firebase Console, create a Realtime Database.&lt;/li&gt; &#xA;   &lt;li&gt;Set up security rules as per your requirements.&lt;/li&gt; &#xA;   &lt;li&gt;Update the Firebase configuration in your Flutter app code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app: &lt;code&gt;flutter run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This app utilizes the following dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;google_fonts: ^5.1.0&lt;/strong&gt;: Provides easy access to a wide range of Google Fonts for consistent and appealing typography in the app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get: ^4.6.5&lt;/strong&gt;: Offers a clean and reactive state management solution for your Flutter app, simplifying UI updates and interactions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;email_validator: ^2.1.17&lt;/strong&gt;: Allows you to validate email addresses, ensuring accurate input during user registration and login.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;font_awesome_flutter: ^10.5.0&lt;/strong&gt;: Grants access to a comprehensive library of FontAwesome icons to enhance the visual elements of your app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firebase_core: ^2.15.1&lt;/strong&gt;: Essential for initializing and connecting your Flutter app with Firebase services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firebase_auth: ^4.7.3&lt;/strong&gt;: Enables robust user authentication using various methods, enhancing app security.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;firebase_database: ^10.2.5&lt;/strong&gt;: Provides integration with the Firebase Realtime Database for real-time synchronization of tasks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;shared_preferences: ^2.2.0&lt;/strong&gt;: Allows you to store simple key-value pairs on the device, facilitating data persistence.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;google_sign_in: ^6.1.4&lt;/strong&gt;: Streamlines the integration of Google Sign-In functionality for user authentication.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sign_in_with_apple: ^5.0.0&lt;/strong&gt;: Simplifies the process of adding Apple Sign-In as an authentication option in your app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;flutter_svg: ^2.0.7&lt;/strong&gt;: Renders SVG images, offering a scalable and resolution-independent solution for graphics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;intl: ^0.18.1&lt;/strong&gt;: Provides internationalization and localization support, making your app accessible to users from different regions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;sqflite: ^2.3.0&lt;/strong&gt;: Offers local database capabilities, enabling offline access and data storage even when the app is not connected to the internet.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;connectivity: ^3.0.6&lt;/strong&gt;: Monitors network connectivity, allowing you to adapt your app&#39;s behavior based on the user&#39;s internet status.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you find a bug or want to add new features, feel free to open an issue or submit a pull request. Please follow our &lt;a href=&#34;https://raw.githubusercontent.com/Hamad-Anwar/Task-Sync-Pro-Flutter/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/Hamad-Anwar/Task-Sync-Pro-Flutter/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Designed and developed with ❤️ by &lt;a href=&#34;https://www.linkedin.com/in/hamad-anwar/&#34;&gt;Hamad Anwar&lt;/a&gt;.&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>woltapp/wolt_modal_sheet</title>
    <updated>2023-08-23T01:26:29Z</updated>
    <id>tag:github.com,2023-08-23:/woltapp/wolt_modal_sheet</id>
    <link href="https://github.com/woltapp/wolt_modal_sheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This package provides a responsive modal with multiple pages, motion animation for page transitions, and scrollable content within each page.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/wolt_modal_sheet&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/wolt_modal_sheet.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/wolt_modal_sheet/publisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/publisher/wolt_modal_sheet.svg?sanitize=true&#34; alt=&#34;package publisher&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WoltModalSheet&lt;/h1&gt; &#xA;&lt;p&gt;WoltModalSheet is designed to revolutionize the use of Flutter modal sheets. Built with Wolt-grade design quality and used extensively in &lt;a href=&#34;https://wolt.com/&#34;&gt;Wolt&lt;/a&gt; products, this UI component offers a visually appealing and user-friendly modal sheet with multiple pages, motion animation for page transitions, and scrollable content within each page.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Multi-Page Layout&lt;/h3&gt; &#xA;&lt;p&gt;Traverse through numerous pages within a single sheet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_multi.gif?raw=true&#34; alt=&#34;Experience multi-page navigation in WoltModalSheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Scrollable Content&lt;/h3&gt; &#xA;&lt;p&gt;Greater flexibility with scrollable content per page, accommodating large content effortlessly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_scrolling.gif?raw=true&#34; alt=&#34;Scroll with ease in WoltModalSheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Responsive Design&lt;/h3&gt; &#xA;&lt;p&gt;The modal sheet adjusts to fit all screen sizes, appearing as a dialog on larger screens and as a bottom sheet on smaller screens, guided by user-specified conditions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_responsive.gif?raw=true&#34; alt=&#34;Adaptability to different screen sizes in WoltModalSheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Motion Animation&lt;/h3&gt; &#xA;&lt;p&gt;Engage users with dynamic motion animation for page transitions and scrolling.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pagination&lt;/th&gt; &#xA;   &lt;th&gt;Scrolling&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_motion_pagination.gif?raw=true&#34; alt=&#34;Pagination&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_scroll_motion.gif?raw=true&#34; alt=&#34;Scrolling&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Imperative and Declarative Navigation&lt;/h3&gt; &#xA;&lt;p&gt;The library showcases examples of both imperative and declarative navigation patterns to display modal sheet on screen.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_navigator_2.gif?raw=true&#34; alt=&#34;Illustration of imperative and declarative navigation in WoltModalSheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic Pagination&lt;/h3&gt; &#xA;&lt;p&gt;User input can dynamically shape the modal sheet&#39;s page list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_dynamic_pagination.gif?raw=true&#34; alt=&#34;Dynamic pagination in action in WoltModalSheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;State Management Integration&lt;/h3&gt; &#xA;&lt;p&gt;Pages in the Wolt Modal Sheet offer a customizable look and the page components are provided with an instance of WoltModalSheetPage class. The API provides a way to manage the state among the page components to be used with popular libraries such as Bloc and Provider &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Understanding the page elements&lt;/h2&gt; &#xA;&lt;p&gt;Each element within the WoltModalSheet has a role to play, offering context, navigational assistance, and explicit action prompts to the user. By understanding these elements and their roles, you can fully harness the power of WoltModalSheet and create an intuitive and engaging user experience.&lt;/p&gt; &#xA;&lt;p&gt;The structure is organized across layers on the z-axis:&lt;/p&gt; &#xA;&lt;li&gt;&lt;b&gt;Main Content Layer&lt;/b&gt;: The fundamental content of the page, including the optional page title, optional hero image, and the main content, which may be scrollable.&lt;/li&gt; &#xA;&lt;li&gt;&lt;b&gt;Top Bar Layer&lt;/b&gt;: Further above the main content layer, this layer with the filled color includes the top bar title and may become hidden or sticky based on scroll position and specific properties.&lt;/li&gt; &#xA;&lt;li&gt;&lt;b&gt;Navigation Bar Layer&lt;/b&gt;: Sitting at the top of the top bar layer on z-axis, this transparent-background layer contains navigational widgets for the interface, such as back or close buttons.&lt;/li&gt; &#xA;&lt;li&gt;&lt;b&gt;Sticky Action Bar Layer&lt;/b&gt;: Positioned at the top of the z axis, this layer guides the user towards the next step, uses an optional gentle gradient on top to hint that there is more content below ready for scrolling.&lt;/li&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/modal_sheet_page.png&#34; alt=&#34;Modal sheet page layers&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;By employing these various layers, you can create an interactive and visually appealing interface that resonates with users. Each layer contributes to the overall coherence of the page, serving a specific purpose and enhancing the overall user experience. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/bottom_sheet_elements.jpeg&#34; alt=&#34;Modal sheet elements breakdown&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Navigation bar widgets&lt;/h3&gt; &#xA;&lt;p&gt;The navigation bar has a transparent background, and resides at the top of the sheet, situated directly above the top bar on the z-axis. It includes two specific widgets: the leading and the trailing. The leading widget usually functions as the back button, enabling users to navigate to the previous page. The trailing widget often serves as the close button, utilized to close the modal sheet. Together, these widgets provide clear and intuitive navigational control, differentiating themselves from the top bar by focusing specifically on directional navigation within the interface.&lt;/p&gt; &#xA;&lt;h3&gt;Top bar and top bar title&lt;/h3&gt; &#xA;&lt;p&gt;The Top Bar sits above the main content layer and below the navigation bar layer. It aids users in grasping the context by displaying an optional title. In scenarios where sheets are filled with content requiring scrolling, the top bar becomes visible as the user scrolls, causing the page title replaced. At this point, the top bar adopts a &#39;sticky&#39; position at the top, guaranteeing consistent visibility. Its design is flexible, with an option to remain hidden or always visible regardless of the scroll position. The navigation bar widgets overlay above the top bar, and the top bar title is symmetrically framed between the leading and trailing navigation bar widgets. &lt;br&gt; &lt;br&gt; The Top Bar design is flexible, when &lt;code&gt;hasTopBarLayer&lt;/code&gt; is set to false, the top bar and the &lt;code&gt;topBarTitle&lt;/code&gt; will be hidden. If &lt;code&gt;isTopBarLayerAlwaysVisible&lt;/code&gt; set to true, the top bar will be always visible regardless of the scroll position.&lt;/p&gt; &#xA;&lt;h3&gt;Sticky action bar (SAB)&lt;/h3&gt; &#xA;&lt;p&gt;The Sticky Action Bar (SAB) guides the user towards the next step. Anchored to the bottom of the view, the SAB elevates above the content with an optional gentle gradient. This position guarantees that the action remains visible, subtly hinting to the user that there is more content to be explored below the fold by scrolling.&lt;/p&gt; &#xA;&lt;h3&gt;Hero image&lt;/h3&gt; &#xA;&lt;p&gt;An optional Hero Image can be positioned at the top of the main content. This element immediately grabs the user&#39;s attention, effectively conveying the primary theme or message of the content.&lt;/p&gt; &#xA;&lt;h3&gt;Page Title&lt;/h3&gt; &#xA;&lt;p&gt;An optional page title above the main content provides users with a quick understanding of what to expect from the page. As the user scrolls, this title becomes hidden, at which point the top bar title continues to serve this context-providing purpose.&lt;/p&gt; &#xA;&lt;h3&gt;Main content&lt;/h3&gt; &#xA;&lt;p&gt;The main content delivers information according to the user need. It can be scrollable to handle larger content. The content is built lazily to improve the performance.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example that shows all the modal sheet elements in use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/bottom_sheet_example.jpeg&#34; alt=&#34;Modal sheet elements in use&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin, add wolt_modal_sheet as a dependency in your pubspec.yaml file.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This package has 4 example projects.&lt;/p&gt; &#xA;&lt;h3&gt;Example app&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/woltapp/wolt_modal_sheet/main/example/&#34;&gt;example&lt;/a&gt; app demonstrates how to display a two-page modal sheet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MainApp extends StatelessWidget {&#xA;  const MainApp({super.key});&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    final pageIndexNotifier = ValueNotifier(0);&#xA;&#xA;    WoltModalSheetPage page1(BuildContext modalSheetContext) {&#xA;      return WoltModalSheetPage.withSingleChild(&#xA;        stickyActionBar: Padding(&#xA;          padding: const EdgeInsets.all(16.0),&#xA;          child: Column(&#xA;            children: [&#xA;              ElevatedButton(&#xA;                onPressed: () =&amp;gt; Navigator.of(modalSheetContext).pop(),&#xA;                child: const SizedBox(&#xA;                  height: 56.0,&#xA;                  width: double.infinity,&#xA;                  child: Center(child: Text(&#39;Cancel&#39;)),&#xA;                ),&#xA;              ),&#xA;              const SizedBox(height: 8),&#xA;              ElevatedButton(&#xA;                onPressed: () =&amp;gt; pageIndexNotifier.value = pageIndexNotifier.value + 1,&#xA;                child: const SizedBox(&#xA;                  height: 56.0,&#xA;                  width: double.infinity,&#xA;                  child: Center(child: Text(&#39;Next page&#39;)),&#xA;                ),&#xA;              ),&#xA;            ],&#xA;          ),&#xA;        ),&#xA;        topBarTitle: Text(&#39;Pagination&#39;, style: Theme.of(context).textTheme.titleSmall),&#xA;        isTopBarLayerAlwaysVisible: true,&#xA;        trailingNavBarWidget: IconButton(&#xA;          padding: const EdgeInsets.all(16),&#xA;          icon: const Icon(Icons.close),&#xA;          onPressed: Navigator.of(modalSheetContext).pop,&#xA;        ),&#xA;        child: const Padding(&#xA;            padding: EdgeInsets.fromLTRB(16, 16, 16, 150),&#xA;            child: Text(&#xA;              &#39;&#39;&#39;&#xA;Pagination involves a sequence of screens the user navigates sequentially. We chose a lateral motion for these transitions. When proceeding forward, the next screen emerges from the right; moving backward, the screen reverts to its original position. We felt that sliding the next screen entirely from the right could be overly distracting. As a result, we decided to move and fade in the next page using 30% of the modal side.&#xA;&#39;&#39;&#39;,&#xA;            )),&#xA;      );&#xA;    }&#xA;&#xA;    WoltModalSheetPage page2(BuildContext modalSheetContext) {&#xA;      return WoltModalSheetPage.withCustomSliverList(&#xA;        stickyActionBar: Padding(&#xA;          padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),&#xA;          child: ElevatedButton(&#xA;            onPressed: () {&#xA;              Navigator.of(modalSheetContext).pop();&#xA;              pageIndexNotifier.value = 0;&#xA;            },&#xA;            child: const SizedBox(&#xA;              height: 56.0,&#xA;              width: double.infinity,&#xA;              child: Center(child: Text(&#39;Close&#39;)),&#xA;            ),&#xA;          ),&#xA;        ),&#xA;        pageTitle: Padding(&#xA;          padding: const EdgeInsets.symmetric(horizontal: 16),&#xA;          child: Text(&#xA;            &#39;Material Colors&#39;,&#xA;            style:&#xA;                Theme.of(context).textTheme.headlineMedium!.copyWith(fontWeight: FontWeight.bold),&#xA;          ),&#xA;        ),&#xA;        heroImageHeight: 200,&#xA;        heroImage: const Image(&#xA;          image: AssetImage(&#39;lib/assets/images/material_colors_hero.png&#39;),&#xA;          fit: BoxFit.cover,&#xA;        ),&#xA;        leadingNavBarWidget: IconButton(&#xA;          padding: const EdgeInsets.all(16),&#xA;          icon: const Icon(Icons.arrow_back_rounded),&#xA;          onPressed: () =&amp;gt; pageIndexNotifier.value = pageIndexNotifier.value - 1,&#xA;        ),&#xA;        trailingNavBarWidget: IconButton(&#xA;          padding: const EdgeInsets.all(16),&#xA;          icon: const Icon(Icons.close),&#xA;          onPressed: () {&#xA;            Navigator.of(modalSheetContext).pop();&#xA;            pageIndexNotifier.value = 0;&#xA;          },&#xA;        ),&#xA;        sliverList: SliverList(&#xA;          delegate: SliverChildBuilderDelegate(&#xA;            (_, index) =&amp;gt; ColorTile(color: allMaterialColors[index]),&#xA;            childCount: allMaterialColors.length,&#xA;          ),&#xA;        ),&#xA;      );&#xA;    }&#xA;&#xA;    return MaterialApp(&#xA;      theme: ThemeData(colorSchemeSeed: const Color(0xFF009DE0), useMaterial3: true),&#xA;      home: Scaffold(&#xA;        body: Builder(&#xA;          builder: (context) {&#xA;            return Center(&#xA;              child: SizedBox(&#xA;                width: 200,&#xA;                child: ElevatedButton(&#xA;                  onPressed: () {&#xA;                    WoltModalSheet.show&amp;lt;void&amp;gt;(&#xA;                      pageIndexNotifier: pageIndexNotifier,&#xA;                      context: context,&#xA;                      pageListBuilder: (modalSheetContext) {&#xA;                        return [&#xA;                          page1(modalSheetContext),&#xA;                          page2(modalSheetContext),&#xA;                        ];&#xA;                      },&#xA;                      modalTypeBuilder: (context) {&#xA;                        final size = MediaQuery.of(context).size.width;&#xA;                        if (size &amp;lt; 768) {&#xA;                          return WoltModalType.bottomSheet;&#xA;                        } else {&#xA;                          return WoltModalType.dialog;&#xA;                        }&#xA;                      },&#xA;                      onModalDismissedWithBarrierTap: () {&#xA;                        debugPrint(&#39;Closed modal sheet with barrier tap&#39;);&#xA;                        Navigator.of(context).pop();&#xA;                        pageIndexNotifier.value = 0;&#xA;                      },&#xA;                      maxDialogWidth: 560,&#xA;                      minDialogWidth: 400,&#xA;                      minPageHeight: 0.4,&#xA;                      maxPageHeight: 0.9,&#xA;                    );&#xA;                  },&#xA;                  child: const SizedBox(&#xA;                    height: 56.0,&#xA;                    child: Center(child: Text(&#39;Show Modal Sheet&#39;)),&#xA;                  ),&#xA;                ),&#xA;              ),&#xA;            );&#xA;          },&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The code snippet above produces the following: &lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/wms_example.gif?raw=true&#34; alt=&#34;Example app&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Playground app with imperative navigation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/woltapp/wolt_modal_sheet/main/playground/&#34;&gt;playground&lt;/a&gt; app demonstrates how to imperatively show the modal sheet. The purpose of this module is to play and experiment with various use cases. These use cases include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A page with forced max height independent of its content.&lt;/li&gt; &#xA; &lt;li&gt;A page with a hero image&lt;/li&gt; &#xA; &lt;li&gt;A page with a list whose items are lazily built.&lt;/li&gt; &#xA; &lt;li&gt;A page with an auto-focused text field.&lt;/li&gt; &#xA; &lt;li&gt;A page without a page title nor a top bar.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Playground app with declarative navigation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/woltapp/wolt_modal_sheet/main/playground_navigator2/&#34;&gt;playground_navigator2&lt;/a&gt; has the same content with the &lt;a href=&#34;https://raw.githubusercontent.com/woltapp/wolt_modal_sheet/main/playground/&#34;&gt;playground&lt;/a&gt; app but the modal sheet is shown using Navigator 2.0 (Router API) in a declarative way.&lt;/p&gt; &#xA;&lt;h3&gt;Coffee maker app for state management example&lt;/h3&gt; &#xA;&lt;p&gt;Finally, the &lt;a href=&#34;https://raw.githubusercontent.com/woltapp/wolt_modal_sheet/main/coffee_maker/&#34;&gt;coffee_maker&lt;/a&gt; app demonstrates how to manage the state among the page components with an opinionated use of the Provider state management library.&lt;/p&gt; &#xA;&lt;p&gt;The code snippet demonstrates how to decorate the modal sheet with a change notifier provider so that the page components can be rebuilt according to the current state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  void _onCoffeeOrderSelectedInAddWaterState(BuildContext context,&#xA;    String coffeeOrderId) {&#xA;  final model = context.read&amp;lt;StoreOnlineViewModel&amp;gt;();&#xA;  final pageIndexNotifier = ValueNotifier(0);&#xA;&#xA;  WoltModalSheet.show(&#xA;    pageIndexNotifier: pageIndexNotifier,&#xA;    context: context,&#xA;    decorator: (child) {&#xA;      return ChangeNotifierProvider&amp;lt;StoreOnlineViewModel&amp;gt;.value(&#xA;        value: model,&#xA;        builder: (_, __) =&amp;gt; child,&#xA;      );&#xA;    },&#xA;    pageListBuilderNotifier: AddWaterModalPageBuilder.build(&#xA;      coffeeOrderId: coffeeOrderId,&#xA;      goToPreviousPage: () =&amp;gt;&#xA;      pageIndexNotifier.value = pageIndexNotifier.value - 1,&#xA;      goToNextPage: () =&amp;gt; pageIndexNotifier.value = pageIndexNotifier.value + 1,&#xA;    ),&#xA;    modalTypeBuilder: _modalTypeBuilder,&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/woltapp/wolt_modal_sheet/raw/main/doc/ss_coffee_maker.gif?raw=true&#34; alt=&#34;Dynamic pagination in action in WoltModalSheet&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;Design Philosophy&lt;/b&gt;: Dive into the creative thought process behind WoltModalSheet&#39;s functionality &lt;a href=&#34;https://careers.wolt.com/en/blog/engineering/an-overview-of-the-multi-page-scrollable-bottom-sheet-ui-design&#34;&gt;in our blog post&lt;/a&gt; . Explore how we tackled the design challenges to create an intuitive and responsive experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Insights from FlutterCon&#39;23 talk&lt;/b&gt;: We delved into both the design and developmental facets of this package at the FlutterCon&#39;23 conference. Catch the enlightening &lt;a href=&#34;https://www.droidcon.com/2023/08/07/the-art-of-responsive-modals-building-a-multi-page-sheet-in-flutter/&#34;&gt;recording of his talk&lt;/a&gt; to understand the nuances.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>