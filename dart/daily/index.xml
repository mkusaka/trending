<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-06T01:29:32Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>conceptadev/mix</title>
    <updated>2024-09-06T01:29:32Z</updated>
    <id>tag:github.com,2024-09-06:/conceptadev/mix</id>
    <link href="https://github.com/conceptadev/mix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A styling system for Flutter&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/leoafarias/mix/main/assets/dark.svg&#34;&gt; &#xA; &lt;img alt=&#34;Mix logo&#34; src=&#34;https://raw.githubusercontent.com/leoafarias/mix/main/assets/light.svg?sanitize=true&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/conceptadev/mix?style=for-the-badge&amp;amp;logo=GitHub&amp;amp;logoColor=black&amp;amp;labelColor=white&amp;amp;color=dddddd&#34; alt=&#34;GitHub stars&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/mix/changelog&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/mix?label=version&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pub/likes/mix?label=Pub%20Likes&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Likes&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/points/mix?label=Pub%20Points&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Points&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/leoafarias/mix?style=for-the-badge&amp;amp;longCache=true&#34; alt=&#34;MIT Licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/awesome-flutter-purple?longCache=true&amp;amp;style=for-the-badge&#34; alt=&#34;Awesome Flutter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mix is a simple and intuitive styling system for Flutter, enabling the creation of beautiful and consistent UIs with ease.&lt;/p&gt; &#xA;&lt;p&gt;Mix brings industry-proven design system concepts to Flutter. It separates style semantics from widgets while maintaining an easy-to-understand and manageable relationship between them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easily compose, merge, and apply styles across widgets.&lt;/li&gt; &#xA; &lt;li&gt;Write cleaner, more maintainable styling definitions.&lt;/li&gt; &#xA; &lt;li&gt;Apply styles conditionally based on the BuildContext.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Mix?&lt;/h2&gt; &#xA;&lt;p&gt;Flutter developers often face challenges when it comes to styling widgets and maintaining a consistent look and feel across their apps. Flutter is heavily dependent on the Material Design System and theming, and that can be challenging, especially when creating your own design system.&lt;/p&gt; &#xA;&lt;p&gt;Mix addresses these challenges by creating a styling system that uses utility functions for a more intuitive and composable way to style. This approach can be kept consistent across widgets and files.&lt;/p&gt; &#xA;&lt;h2&gt;Goals with Mix&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define visual properties outside the widget&#39;s build method while still allowing access to the BuildContext. This is done by having the style definition resolved during widget build, similar to how the current &lt;code&gt;Theme.of&lt;/code&gt; works, but with much more flexibility.&lt;/li&gt; &#xA; &lt;li&gt;Ensure consistent styling throughout your app. By having separate style definitions, you can reuse not only specific values, like colors and typography, but also entire style definitions across other styles.&lt;/li&gt; &#xA; &lt;li&gt;Quickly adapt to changing design requirements. By promoting style composability and inheritance, you can more easily maintain a &lt;code&gt;DRY&lt;/code&gt; approach to managing your design system.&lt;/li&gt; &#xA; &lt;li&gt;Create adaptive designs and layouts by leveraging style variants, which are based on existing styles but can be applied conditionally or responsively.&lt;/li&gt; &#xA; &lt;li&gt;Type-safe composability. Mix leverages the power of Dart&#39;s type system and class to create a type-safe styling experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Guiding Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple Abstraction&lt;/strong&gt;: A low-cost layer over the Flutter API, letting you style widgets without altering their core behavior, ensuring they remain compatible and predictable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent&lt;/strong&gt;: Even though we are creating a new styling system, we should always keep the styling API consistent with its Flutter equivalents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composable&lt;/strong&gt;: Styles should be easily composable by combining simple, reusable elements, promoting code reuse and maintainability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Mix should allow for reasonable overrides and reuse of its utilities, making it easy to fit your own needs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Powerful Styling API&lt;/strong&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Styles are easily defined using the &lt;code&gt;Style&lt;/code&gt; class, which allows you to define a style&#39;s properties and values. Here&#39;s an example of defining a style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final style = Style(&#xA;  $box.height(100),&#xA;  $box.width(100),&#xA;  $box.color.purple(),&#xA;  $box.borderRadius(10),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://fluttermix.com/docs/guides/styling&#34;&gt;styling&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;First-Class Variant Support&lt;/strong&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;First-class support for variants, allowing you to define styling variations that can be applied conditionally or responsively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;const onOutlined = Variant(&#39;outlined&#39;);&#xA;&#xA;final baseStyle = Style(&#xA;  $box.borderRadius(10),&#xA;  $box.color.black(),&#xA;  $text.style.color.white(),&#xA;&#xA;  onOutlined(&#xA;    $box.color.transparent(),&#xA;    $box.border.color.black(),&#xA;    $text.style.color.black(),&#xA;  ),&#xA;);&#xA;&#xA;final outlinedStyle = baseStyle.applyVariant(onOutlined);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://fluttermix.com/docs/guides/variants&#34;&gt;variants&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;BuildContext Responsive Styling&lt;/strong&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Mix allows you to define styles that are context-aware, allowing you to apply styles conditionally based on the BuildContext.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final style = Style(&#xA;  $box.color.black(),&#xA;  $text.style.color.white(),&#xA;  $on.dark(&#xA;    $box.color.white(),&#xA;    $text.style.color.black(),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://fluttermix.com/docs/guides/variants#context-variants&#34;&gt;context variants&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Design Tokens and Theming&lt;/strong&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Mix goes beyond the Material &lt;code&gt;Theme&lt;/code&gt; definitions by allowing the definition of design tokens and properties that can be used across all styling utilities.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Utility-First Approach&lt;/strong&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;A complete set of utility primitives allows you to define styling properties and values in a more intuitive and composable way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;$box.padding(20); /// Padding 20 on all sides&#xA;$box.padding(20, 10); /// Padding 20 on top and bottom, 10 on left and right&#xA;&#xA;$box.padding.top(20); /// Padding 20 on top&#xA;$box.padding.horizontal(20); /// Padding 20 on left and right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://fluttermix.com/docs/overview/utility-first&#34;&gt;utilities&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/conceptadev/mix/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=conceptadev/mix&#34;&gt; &lt;/a&gt;</summary>
  </entry>
</feed>