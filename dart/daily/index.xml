<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:33:58Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>comigor/artemis</title>
    <updated>2023-06-24T01:33:58Z</updated>
    <id>tag:github.com,2023-06-24:/comigor/artemis</id>
    <link href="https://github.com/comigor/artemis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build dart types from GraphQL schemas and queries&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/735858/58768495-8ecbd600-8572-11e9-9321-4fa5ce4ea007.png&#34; height=&#34;200&#34;&gt; &lt;/p&gt;&#xA;&lt;h1&gt;&lt;b&gt;Artemis&lt;/b&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build dart types from GraphQL schemas and queries&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- Badges --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/artemis&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/artemis?style=for-the-badge&#34; alt=&#34;View at pub.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/comigor/artemis/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/comigor/artemis/test?style=for-the-badge&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/comigor/artemis/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=for-the-badge&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/comigor/artemis/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/comigor/artemis.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/comigor/artemis/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/comigor/artemis.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=ffffff&#34; alt=&#34;Fork on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/2Y4wdE4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/559455668810153989.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/comigor/artemis/tree/beta&#34;&gt;&lt;strong&gt;beta&lt;/strong&gt;&lt;/a&gt; branch for the bleeding edge (and breaking) stuff.&lt;/p&gt; &#xA;&lt;p&gt;Artemis is a code generator that looks for &lt;code&gt;schema.graphql&lt;/code&gt; (GraphQL SDL - Schema Definition Language) and &lt;code&gt;*.graphql&lt;/code&gt; files and builds &lt;code&gt;.graphql.dart&lt;/code&gt; files typing that query, based on the schema. That&#39;s similar to what &lt;a href=&#34;https://github.com/apollographql/apollo-client&#34;&gt;Apollo&lt;/a&gt; does (Artemis is his sister anyway).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file to be able to do code generation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dev_dependencies:&#xA;  artemis: &#39;&amp;gt;=6.0.0 &amp;lt;7.0.0&#39;&#xA;  build_runner: ^1.10.4&#xA;  json_serializable: ^3.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated code uses the following packages in run-time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  artemis: &#39;&amp;gt;=6.0.0 &amp;lt;7.0.0&#39; # only if you&#39;re using ArtemisClient!&#xA;  json_annotation: ^3.1.0&#xA;  equatable: ^1.2.5&#xA;  meta: &#39;&amp;gt;=1.0.0 &amp;lt;2.0.0&#39; # only if you have non nullable fields&#xA;  gql: &#39;&amp;gt;=0.12.3 &amp;lt;1.0.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pub packages get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter packages get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now Artemis will generate the API files for you by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pub run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;flutter pub run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Configuration&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Artemis offers some configuration options to generate code. All options should be included on &lt;code&gt;build.yaml&lt;/code&gt; file on the root of the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      artemis:&#xA;        options:&#xA;          # custom configuration options!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Make sure your configuration file is called &lt;code&gt;build.yaml&lt;/code&gt; (with &lt;code&gt;.yaml&lt;/code&gt; extension, not &lt;code&gt;.yml&lt;/code&gt;)!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;generate_helpers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If Artemis should generate query/mutation helper GraphQLQuery subclasses.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scalar_mapping&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mapping of GraphQL and Dart types. See &lt;a href=&#34;https://raw.githubusercontent.com/comigor/artemis/master/#custom-scalars&#34;&gt;Custom scalars&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;schema_mapping&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mapping of queries and which schemas they will use for code generation. See &lt;a href=&#34;https://raw.githubusercontent.com/comigor/artemis/master/#schema-mapping&#34;&gt;Schema mapping&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fragments_glob&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Import path to the file implementing fragments for all queries mapped in schema_mapping. If it&#39;s assigned, fragments defined in schema_mapping will be ignored.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ignore_for_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The linter rules to ignore for artemis generated files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;It&#39;s important to remember that, by default, &lt;a href=&#34;https://github.com/dart-lang/build&#34;&gt;build&lt;/a&gt; will follow &lt;a href=&#34;https://dart.dev/tools/pub/package-layout&#34;&gt;Dart&#39;s package layout conventions&lt;/a&gt;, meaning that only some folders will be considered to parse the input files. So, if you want to reference files from a folder other than &lt;code&gt;lib/&lt;/code&gt;, make sure you&#39;ve included it on &lt;code&gt;sources&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    sources:&#xA;      - lib/**&#xA;      - graphql/**&#xA;      - data/**&#xA;      - schema.graphql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Schema mapping&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;By default, Artemis won&#39;t generate anything. That&#39;s because your queries/mutations should be linked to GraphQL schemas. To configure it, you need to point a &lt;code&gt;schema_mapping&lt;/code&gt; to the path of those queries and schemas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      artemis:&#xA;        options:&#xA;          schema_mapping:&#xA;            - output: lib/graphql_api.dart&#xA;              schema: lib/my_graphql_schema.graphql&#xA;              queries_glob: lib/**.graphql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &lt;code&gt;SchemaMap&lt;/code&gt; is configured this way:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Relative path to output the generated code. It should end with &lt;code&gt;.graphql.dart&lt;/code&gt; or else the generator will need to generate one more file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;schema&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Relative path to the GraphQL schema.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;queries_glob&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Glob that selects all query files to be used with this schema.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;naming_scheme&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pathedWithTypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The naming scheme to be used on generated classes names. &lt;code&gt;pathedWithTypes&lt;/code&gt; is the default for retrocompatibility, where the names of previous types are used as prefix of the next class. This can generate duplication on certain schemas. With &lt;code&gt;pathedWithFields&lt;/code&gt;, the names of previous fields are used as prefix of the next class and with &lt;code&gt;simple&lt;/code&gt;, only the actual GraphQL class name is considered.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;type_name_field&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;__typename&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the field used to differentiatiate interfaces and union types (commonly &lt;code&gt;__typename&lt;/code&gt; or &lt;code&gt;__resolveType&lt;/code&gt;). Note that &lt;code&gt;__typename&lt;/code&gt; field are not added automatically to the query. If you want interface/union type resolution, you need to manually add it there.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/comigor/artemis/master/example&#34;&gt;examples&lt;/a&gt; for more information and configuration options.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Custom scalars&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If your schema uses custom scalars, they must be defined on &lt;code&gt;build.yaml&lt;/code&gt;. If it needs a custom parser (to decode from/to json), the &lt;code&gt;custom_parser_import&lt;/code&gt; path must be set and the file must implement both &lt;code&gt;fromGraphQL___ToDart___&lt;/code&gt; and &lt;code&gt;fromDart___toGraphQL___&lt;/code&gt; constant functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      artemis:&#xA;        options:&#xA;          scalar_mapping:&#xA;            - custom_parser_import: &#39;package:graphbrainz_example/coercers.dart&#39;&#xA;              graphql_type: Date&#xA;              dart_type: DateTime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your custom scalar needs to import Dart libraries, you can provide it in the config as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;targets:&#xA;  $default:&#xA;    builders:&#xA;      artemis:&#xA;        options:&#xA;          scalar_mapping:&#xA;            - custom_parser_import: &#39;package:graphbrainz_example/coercers.dart&#39;&#xA;              graphql_type: BigDecimal&#xA;              dart_type:&#xA;                name: Decimal&#xA;                imports:&#xA;                  - &#39;package:decimal/decimal.dart&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each &lt;code&gt;ScalarMap&lt;/code&gt; is configured this way:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;graphql_type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The GraphQL custom scalar name on schema.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dart_type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Dart type this custom scalar should be converted from/to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;custom_parser_import&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Import path to the file implementing coercer functions for custom scalars. See &lt;a href=&#34;https://raw.githubusercontent.com/comigor/artemis/master/#custom-scalars&#34;&gt;Custom scalars&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/comigor/artemis/master/example&#34;&gt;examples&lt;/a&gt; for more information and configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Articles and videos&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@v.ditsyak/ultimate-toolchain-to-work-with-graphql-in-flutter-13aef79c6484&#34;&gt;Ultimate toolchain to work with GraphQL in Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;Awesome GraphQL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;strong&gt;ArtemisClient&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;generate_helpers&lt;/code&gt;, Artemis will create a subclass of &lt;code&gt;GraphQLQuery&lt;/code&gt; for you, this class can be used in conjunction with &lt;code&gt;ArtemisClient&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final client = ArtemisClient(&#39;/graphql&#39;);&#xA;final gitHubReposQuery = MyGitHubReposQuery();&#xA;final response = await client.execute(gitHubReposQuery);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ArtemisClient&lt;/code&gt; adds type-awareness around &lt;code&gt;Link&lt;/code&gt; from &lt;a href=&#34;https://pub.dev/packages/gql&#34;&gt;&lt;code&gt;package:gql/link&lt;/code&gt;&lt;/a&gt;. You can create &lt;code&gt;ArtemisClient&lt;/code&gt; from any &lt;code&gt;Link&lt;/code&gt; using &lt;code&gt;ArtemisClient.fromLink&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/comigor/artemis/master/example&#34;&gt;examples&lt;/a&gt; to see how to use it in details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Milad-Akarie/skeletonizer</title>
    <updated>2023-06-24T01:33:58Z</updated>
    <id>tag:github.com,2023-06-24:/Milad-Akarie/skeletonizer</id>
    <link href="https://github.com/Milad-Akarie/skeletonizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/art/skeletonizer_logo.svg?sanitize=true&#34; height=&#34;130&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.shields.io/badge/License-MIT-green&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Milad-Akarie/skeletonizer/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Milad-Akarie/skeletonizer?style=flat&amp;amp;logo=github&amp;amp;colorB=green&amp;amp;label=stars&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/skeletonizer&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/skeletonizer.svg?label=pub&amp;amp;color=orange&#34; alt=&#34;pub version&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.buymeacoffee.com/miladakarie&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;30px&#34; width=&#34;108px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/#basic-usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/#the-need-for-fake-data&#34;&gt;The need for fake data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/#annotations&#34;&gt;Annotations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/#customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/skeletonizer/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;What are skeleton loaders?&lt;/h3&gt; &#xA;&lt;p&gt;UI skeleton loading is a technique used to enhance user experience during web or app loading. It involves displaying a simplified, static version of the user interface while the actual content is being fetched. This placeholder UI gives the illusion of instant loading and prevents users from perceiving long loading times.&lt;/p&gt; &#xA;&lt;h3&gt;Motivation&lt;/h3&gt; &#xA;&lt;p&gt;Creating a skeleton-layout for your screens doesn&#39;t only feel like a duplicate work but things can go out of sync real quick, when updating the actual layout we often forget to update the corresponding skeleton-layout.&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;As the name suggests, skeletonizer will reduce your already existing layouts into mere skeletons and apply painting effects on them, typically a shimmer effect. It automatically does the job for you, in addition SkeletonAnnotations can be used to change how some widgets are skeletonized.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply wrap your layout with &lt;code&gt;Skeletonizer&lt;/code&gt; widget&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;Skeletonizer(&#xA;  enabled: _loading,&#xA;  child: ListView.builder(&#xA;    itemCount: 7,&#xA;    itemBuilder: (context, index) {&#xA;      return Card(&#xA;        child: ListTile(&#xA;          title: Text(&#39;Item number $index as title&#39;),&#xA;          subtitle: const Text(&#39;Subtitle here&#39;),&#xA;          trailing: const Icon(Icons.ac_unit),&#xA;        ),&#xA;      );&#xA;    },&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: all the following shimmer effects are disturbed by the gif optimization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Skeletonizer with default config&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/skeletonizer_demo_1.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Skeletonizer with no containers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;Skeletonizer(ignoreContainers: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/skeletonizer_demo_2.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The need for fake data&lt;/h2&gt; &#xA;&lt;p&gt;In order for skeletonizer to work it actually needs a layout, but in most cases the layout would need data to shape which. e.g the following ListView ill not render anything unless &lt;code&gt;users&lt;/code&gt; is populated, so if users is empty we have no layout which mean we have nothing to skeletonize.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Skeletonizer(&#xA;  enabled: _loading,&#xA;  child: ListView.builder(&#xA;    itemCount: users.lenght,&#xA;    itemBuilder: (context, index) {&#xA;      return Card(&#xA;        child: ListTile(&#xA;          title: Text(users[index].name),&#xA;          subtitle: Text(users[index].jobTitle),&#xA;          leading: CircleAvatar(&#xA;            radius: 24,&#xA;            backgroundImage: NetworkImage(users[index].avatar),&#xA;          ),&#xA;        ),&#xA;      );&#xA;    },&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So the key here is to provide fake data for the layout to shape until the real data is fetched form backend, so we would such a setup in our build method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; &#xA;  if (_loading) {&#xA;    final fakeUsers = List.generate(&#xA;      7, (index) =&amp;gt; const User(&#xA;        name: &#39;User name&#39;,&#xA;        jobTitle: &#39;Developer&#39;,&#xA;        avatar: &#39;&#39;&#xA;    ),&#xA;    );&#xA;    return Skeletonizer(&#xA;      child: UserList(users: fakeUsers),&#xA;    );&#xA;  } else {&#xA;    return UserList(users: realUsers);&#xA;  }  &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or by utilizing the &lt;code&gt;enabled&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  {&#xA;  final users = _loading ? List.generate(&#xA;      7, (index) =&amp;gt; const User(&#xA;      name: &#39;User name&#39;,&#xA;      jobTitle: &#39;Developer&#39;,&#xA;      avatar: &#39;&#39;&#xA;  ) : realUsers;&#xA;  );&#xA;  return Skeletonizer(&#xA;    enabled: _loading,&#xA;    child: UserList(users: users),&#xA;  );&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we have our layout but one issue remains, if you run the above example you&#39;ll get an error in your console stating that an invalid url was passed to &lt;code&gt;NetworkImage&lt;/code&gt; which is true because our fake avatar url is an empty string, in such cases we need to make sure NetworkImage is not in our widget tree when skeletonizer is enabled and we do that by using a skeleton annotation called &lt;code&gt;Skeleton.replace&lt;/code&gt; ..read more about annotations below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Skeletonizer(&#xA;  enabled: _loading,&#xA;  child: ListView.builder(&#xA;    itemCount: users.lenght,&#xA;    itemBuilder: (context, index) {&#xA;      return Card(&#xA;        child: ListTile(&#xA;          title: Text(users[index].name),&#xA;          subtitle: Text(users[index].jobTitle),&#xA;            leading: Skeleton.replace(&#xA;            width: 48, // width of replacement&#xA;            height: 48, // height of replacement&#xA;            child; CircleAvatar(&#xA;            radius: 24,&#xA;            backgroundImage: NetworkImage(users[index].avatar),&#xA;          ),&#xA;        ),&#xA;      );&#xA;    },&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you can do it directly like follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Skeletonizer(&#xA;  enabled: _loading,&#xA;  child: ListView.builder(&#xA;    itemCount: users.lenght,&#xA;    itemBuilder: (context, index) {&#xA;      return Card(&#xA;        child: ListTile(&#xA;          title: Text(users[index].name),&#xA;          subtitle: Text(users[index].jobTitle),&#xA;            leading: CircleAvatar(&#xA;            radius: 24,&#xA;            backgroundImage: _loading ? null : NetworkImage(users[index].avatar),&#xA;          ),&#xA;        ),&#xA;      ),);&#xA;    },&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: you can also check wither a skeletonizer is enabled inside descendent widgets using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Skeletonizer.of(context).enabled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Annotations&lt;/h2&gt; &#xA;&lt;p&gt;We can use annotations to change how some widgets should be skeletonized, skeleton annotations have no effect on the real layout as they&#39;re only hold information for skeletonizer to use when it&#39;s enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Skeleton.ignore&lt;/h3&gt; &#xA;&lt;p&gt;Widgets annotated with &lt;code&gt;Skeleton.ignore&lt;/code&gt; will not be skeletonized&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Card(&#xA;  child: ListTile(&#xA;    title: Text(&#39;The title goes here&#39;),&#xA;    subtitle: Text(&#39;Subtitle here&#39;),&#xA;    trailing: Skeleton.ignore( // the icon will not be skeletonized&#xA;      child: Icon(Icons.ac_unit, size: 40),&#xA;    ),&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/ignored_skeleton_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ignored multiple descendants demo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Card(&#xA;  child: Skeleton.ignore( // all descendents will be ignored&#xA;    child: ListTile(&#xA;      title: Text(&#39;The title goes here&#39;),&#xA;      subtitle: Text(&#39;Subtitle here&#39;),&#xA;      trailing: Icon(Icons.ac_unit, size: 40),&#xA;    ),&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/ignored_skeleton_demo2.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Skeleton.keep&lt;/h3&gt; &#xA;&lt;p&gt;Widgets annotated with &lt;code&gt;Skeleton.keep&lt;/code&gt; will not be skeletonized but will be painted as is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Card(&#xA;  child: ListTile(&#xA;    title: Text(&#39;The title goes here&#39;),&#xA;    subtitle: Text(&#39;Subtitle here&#39;),&#xA;    trailing: Skeleton.keep( // the icon will be painted as is&#xA;      child: Icon(Icons.ac_unit, size: 40),&#xA;    ),&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/kept_skeleton_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Skeleton.shade&lt;/h3&gt; &#xA;&lt;p&gt;Widgets annotated with &lt;code&gt;Skeleton.shade&lt;/code&gt; will not be skeletonized but will be shaded by a shader mask&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Card(&#xA;  child: ListTile(&#xA;    title: Text(&#39;The title goes here&#39;),&#xA;    subtitle: Text(&#39;Subtitle here&#39;),&#xA;    trailing: Skeleton.shade( // the icon will be shaded by shader mask&#xA;      child: Icon(Icons.ac_unit, size: 40),&#xA;    ),&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/shaded_skeleton_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Skeleton.replace&lt;/h3&gt; &#xA;&lt;p&gt;Widgets annotated with &lt;code&gt;Skeleton.replace&lt;/code&gt; will be replaced when skeletonizer is enabled and the replacement will be skeletonized, This is good for widgets that can render with fake data like &lt;code&gt;Image.network()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Card(&#xA;  child: ListTile(&#xA;    title: Text(&#39;The title goes here&#39;),&#xA;    subtitle: Text(&#39;Subtitle here&#39;),&#xA;    trailing: Skeleton.replace( // the icon will be replaced when skeletonizer is on&#xA;        width: 50, // the width of the replacement&#xA;        height: 50, // the height of the replacement&#xA;        replacment: // defaults to a DecoratedBox&#xA;        child: Icon(Icons.ac_unit, size: 40),&#xA;  ),&#xA;)&#xA;,)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/replaced_skeleton_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Skeleton.unite&lt;/h3&gt; &#xA;&lt;p&gt;Widgets annotated with &lt;code&gt;Skeleton.unite&lt;/code&gt; will not be united and drawn as one big bone, this is good for when you have multiple small bones close to each other and you want to present them as one bone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Card(&#xA;  child: ListTile(&#xA;    title: Text(&#39;Item number 1 as title&#39;),&#xA;    subtitle: Text(&#39;Subtitle here&#39;),&#xA;    trailing: Skeleton.unite(&#xA;      child: Row(&#xA;        mainAxisSize: MainAxisSize.min,&#xA;        children: [&#xA;          Icon(Icons.ac_unit, size: 32),&#xA;          SizedBox(width: 8),&#xA;          Icon(Icons.access_alarm, size: 32),&#xA;        ],&#xA;      ),&#xA;    ),&#xA;  ),&#xA;)&#xA;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/united_skeleton_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This annotation can also be used to merge a while layout and present it as one&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Skeleton.unite(&#xA;  child: Card(&#xA;    child: ListTile(&#xA;      title: Text(&#39;Item number 1 as title&#39;),&#xA;      subtitle: Text(&#39;Subtitle here&#39;),&#xA;      trailing: Row(&#xA;        mainAxisSize: MainAxisSize.min,&#xA;        children: [&#xA;          Icon(Icons.ac_unit, size: 32),&#xA;          SizedBox(width: 8),&#xA;          Icon(Icons.access_alarm, size: 32),&#xA;        ],&#xA;      ),&#xA;    ),&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/united_skeleton_demo2.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;h3&gt;Loading effects&lt;/h3&gt; &#xA;&lt;p&gt;Skeletonizer has 3 different parting effects to choose from and which can be customized to your liking.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Loading effects are disturbed by Gif optimization, these look much better on flutter&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/loading_effects_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text skeleton config&lt;/h3&gt; &#xA;&lt;p&gt;You can provide a global text config options to skeletonizer widgets like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Skeletonizer(&#xA;    justifyMultiLineText: false,&#xA;    textBoneBorderRadius: TextBoneBorderRadius.fromHeightFactor(.5),&#xA;    ...&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Milad-Akarie/skeletonizer/raw/main/art/text_config_demo.gif?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using the inheritable SkeletonizerConfig widget&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;SkeletonizerConfig&lt;/code&gt; somewhere up your widgets tree e.g above the &lt;code&gt;MaterialApp&lt;/code&gt; widget to provide default skeletonizer configurations to your whole App.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;SkeletonizerConfig(&#xA;    data: SkeletonizerConfigData(&#xA;      effect: const ShimmerEffect(),&#xA;      justifyMultiLineText: true,&#xA;      textBorderRadius: TextBoneBorderRadius(..),&#xA;      ignoreContainers: false,&#xA;    ),&#xA;    .....&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@milad-akarie/flutter-skeleton-loader-using-skeletonizer-13d410dc4ac7&#34;&gt;Flutter skeleton loader using skeletonizer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Skeletonizer&lt;/h3&gt; &#xA;&lt;p&gt;You can support skeletonizer by liking it on Pub and staring it on Github, sharing ideas on how we can enhance a certain functionality or by reporting any problems you encounter and of course buying a couple coffees will help speed up the development process.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liftoff-app/liftoff</title>
    <updated>2023-06-24T01:33:58Z</updated>
    <id>tag:github.com,2023-06-24:/liftoff-app/liftoff</id>
    <link href="https://github.com/liftoff-app/liftoff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐒 A mobile client for lemmy&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/liftoff-app/liftoff/actions&#34;&gt;&lt;img src=&#34;https://github.com/liftoff-app/liftoff/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://matrix.to/#/#liftoff-dev:matrix.org&#34;&gt;&lt;img src=&#34;https://matrix.to/img/matrix-badge.svg?sanitize=true&#34; alt=&#34;Chat on Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!--&#xA;[![Translation status](http://weblate.yerbamate.ml/widgets/liftoff/-/liftoff/svg-badge.svg)](http://weblate.yerbamate.ml/engage/liftoff/)&#xA;--&gt; &#xA; &lt;img width=&#34;200px&#34; height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/assets/app_icon.svg?sanitize=true&#34;&gt; &#xA; &lt;h1&gt;Liftoff!&lt;/h1&gt; &#xA; &lt;!--&#xA;[&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;](https://f-droid.org/packages/com.LiftoffOrg.liftoff)&#xA;[&lt;img src=&#34;https://cdn.rawgit.com/steverichey/google-play-badge-svg/master/img/en_get.svg&#34; height=&#34;80&#34;&gt;](https://play.google.com/store/apps/details?id=com.LiftoffOrg.liftoff)&#xA;--&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/liftoff-app/liftoff/releases/latest&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/andOTP/andOTP/master/assets/badges/get-it-on-github.png&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;A mobile client for &lt;a href=&#34;https://github.com/LemmyNet/lemmy&#34;&gt;Lemmy&lt;/a&gt; - a federated reddit alternative&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#liftoff&#34;&gt;liftoff&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#version-xxx-was-released-why-is-it-not-yet-on-f-droid&#34;&gt;Version x.x.x was released, why is it not yet on F-droid?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liftoff-app/liftoff/master/#app-not-installed---what-to-do&#34;&gt;&#34;App not installed&#34; - what to do?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please consider contributing! Even if you don&#39;t know flutter well use this as a chance to learn! &lt;a href=&#34;https://github.com/liftoff-app/liftoff/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on the matrix for support in contributions! &lt;a href=&#34;https://matrix.to/#/#liftoff-dev:matrix.org&#34;&gt;#liftoff-dev:matrix.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;flutter&lt;/a&gt;: To check if this step was successful run &lt;code&gt;flutter doctor&lt;/code&gt; (Installing android studio is not required if you setup the android SDK yourself)&lt;/li&gt; &#xA; &lt;li&gt;Clone this repo: &lt;code&gt;git clone https://github.com/liftoff-app/liftoff&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the repo: &lt;code&gt;cd liftoff&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;flutter build apk --flavor prod --target lib/main_prod.dart --release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The apk will be in &lt;code&gt;build/app/outputs/flutter-apk/app-prod-release.apk&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have the additional &lt;a href=&#34;https://flutter.dev/desktop#additional-linux-requirements&#34;&gt;linux requirements&lt;/a&gt; (verify with &lt;code&gt;flutter doctor&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;flutter build linux --target lib/main_prod.dart --release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The executable will be in &lt;code&gt;build/linux/x64/release/bundle/liftoff&lt;/code&gt; (be aware, however, that this executable is not standalone)&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have the additional &lt;a href=&#34;https://flutter.dev/desktop#additional-windows-requirements&#34;&gt;windows requirements&lt;/a&gt; (verify with &lt;code&gt;flutter doctor&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Build: &lt;code&gt;flutter build windows --target lib/main_prod.dart --release&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The executable will be in &lt;code&gt;build\windows\runner\Release\liftoff.exe&lt;/code&gt; (be aware, however, that this executable is not standalone)&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Version x.x.x was released, why is it not yet on F-droid?&lt;/h3&gt; &#xA;&lt;p&gt;We have no control over F-droid&#39;s build process. This process is automatic and not always predictable in terms of time it takes. If a new version does not appear in F-droid a week after its release, then feel free to open an issue about it and we will look into it.&lt;/p&gt; &#xA;&lt;h3&gt;&#34;App not installed&#34; - what to do?&lt;/h3&gt; &#xA;&lt;p&gt;When installing the APK directly you might get this message. This happens when you are trying to update liftoff from a different source than where you originally got it from. To fix it simply uninstall the previous version (you will lose all local data) and then install the new one. Always make sure to install liftoff APKs only from verified sources.&lt;/p&gt;</summary>
  </entry>
</feed>