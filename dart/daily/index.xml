<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-23T01:33:36Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>macosui/macos_ui</title>
    <updated>2023-02-23T01:33:36Z</updated>
    <id>tag:github.com,2023-02-23:/macosui/macos_ui</id>
    <link href="https://github.com/macosui/macos_ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter widgets and themes implementing the current macOS design language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;macos_ui&lt;/h1&gt; &#xA;&lt;p&gt;Flutter widgets and themes implementing the current macOS design language.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;strong&gt;interactive widget gallery&lt;/strong&gt; online at &lt;a href=&#34;https://groovinchip.github.io/macos_ui/#/&#34;&gt;https://groovinchip.github.io/macos_ui/#/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Guides, codelabs, and other documentation can be found at &lt;a href=&#34;https://macosui.dev&#34;&gt;https://macosui.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/macos_ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/macos_ui.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/macos_ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/publisher/macos_ui.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/flutter_analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/flutter_analysis.yml/badge.svg?branch=stable&#34; alt=&#34;Flutter Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/pana_analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/pana_analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;Pana Analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/codecov.yaml&#34;&gt;&lt;img src=&#34;https://github.com/GroovinChip/macos_ui/actions/workflows/codecov.yaml/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/GroovinChip/macos_ui&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/GroovinChip/macos_ui/branch/dev/graph/badge.svg?token=1SZGEVVMCH&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/5mFQKBU.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;ðŸš¨ Usage notes&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://storage.googleapis.com/cms-storage-bucket/0dbfcc7a59cd1cf16282.png&#34; height=&#34;14&#34;&gt; Flutter channel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;macos_ui&lt;/code&gt; is developed against Flutter&#39;s &lt;code&gt;stable&lt;/code&gt; channel. To ensure a smooth development experience with &lt;code&gt;macos_ui&lt;/code&gt;, you should build your application on Flutter&#39;s &lt;code&gt;stable&lt;/code&gt; channel.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://storage.googleapis.com/cms-storage-bucket/0dbfcc7a59cd1cf16282.png&#34; height=&#34;14&#34;&gt; Platform Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;pub.dev shows that &lt;code&gt;macos_ui&lt;/code&gt; only supports macOS. This is because &lt;code&gt;macos_ui&lt;/code&gt; calls some native code, and therefore specifies macOS as a plugin platform in the &lt;code&gt;pubspec.yaml&lt;/code&gt; file. &lt;code&gt;macos_ui&lt;/code&gt; &lt;em&gt;will&lt;/em&gt; work on any platform that Flutter supports, &lt;strong&gt;but you will get best results on macOS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The features of &lt;code&gt;macos_ui&lt;/code&gt; that will &lt;em&gt;not&lt;/em&gt; work on platforms other than macOS due to calling native code are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;MacosColors.controlAccentColor()&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;MacosColorWell&lt;/code&gt; widget&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://imgur.com/TIP0V7H.png&#34; height=&#34;14&#34;&gt; Popups &amp;amp; window resizing&lt;/h3&gt; &#xA;&lt;p&gt;Since at this time Flutter does not allow UI elements to overflow the bounds of the window, popups are constrained to the available space.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, if you are using widgets that create popups in your toolbar, like &lt;code&gt;ToolBarPopupButton&lt;/code&gt;, you should avoid allowing your application window to be resized below the height of your tallest popup.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Contributing &amp;amp; Resources&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macos_ui&#34;&gt;macos_ui&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Layout&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#layout&#34;&gt;Layout&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macoswindow&#34;&gt;MacosWindow&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#sidebar&#34;&gt;Sidebar&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macosscaffold&#34;&gt;MacosScaffold&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#modern-window-look&#34;&gt;Modern Window Look&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#toolbar&#34;&gt;ToolBar&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#MacosListTile&#34;&gt;MacosListTile&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#MacosTabView&#34;&gt;MacosTabView&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Icons&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#icons&#34;&gt;Icons&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#MacosIcon&#34;&gt;MacosIcon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Buttons&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#buttons&#34;&gt;Buttons&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macoscheckbox&#34;&gt;MacosCheckbox&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#helpbutton&#34;&gt;HelpButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#radiobutton&#34;&gt;RadioButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#pulldownbutton&#34;&gt;PulldownButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#popupbutton&#34;&gt;PopupButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#pushbutton&#34;&gt;PushButton&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macosswitch&#34;&gt;MacosSwitch&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macossegmentedcontrol&#34;&gt;MacosSegmentedControl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Dialogs &amp;amp; Sheets&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#dialogs&#34;&gt;Dialogs &amp;amp; Sheets&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#MacosAlertDialog&#34;&gt;MacosAlertDialog&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#MacosSheet&#34;&gt;MacosSheet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Fields &amp;amp; Labels&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#fields&#34;&gt;Fields&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macostextfield&#34;&gt;MacosTextField&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macossearchfield&#34;&gt;MacosSearchField&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#labels&#34;&gt;Labels&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macostooltip&#34;&gt;MacosTooltip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Indicators&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#indicators&#34;&gt;Indicators&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#progress-indicators&#34;&gt;Progress Indicators&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#progresscircle&#34;&gt;ProgressCircle&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#progressbar&#34;&gt;ProgressBar&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#level-indicators&#34;&gt;Level Indicators&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#capacityindicator&#34;&gt;CapacityIndicator&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#ratingindicator&#34;&gt;RatingIndicator&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#relevanceindicator&#34;&gt;RelevanceIndicator&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Selectors&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#selectors&#34;&gt;Selectors&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macosdatepicker&#34;&gt;MacosDatePicker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macostimepicker&#34;&gt;MacosTimePicker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#macoscolorwell&#34;&gt;MacosColorWell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;macos_ui&lt;/code&gt; welcomes contributions! Please see &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/resources/&#34;&gt;macOS Design Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos&#34;&gt;macOS Human Interface Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.figma.com/file/M6K5L3GK0WJh6pnsASyVeE/macOS-Big-Sur-UI-Kit?node-id=1%3A2&#34;&gt;macOS Big Sur Figma kit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Layout&lt;/h1&gt; &#xA;&lt;h2&gt;MacosWindow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MacosWindow&lt;/code&gt; is the basic frame for a macOS-style layout.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/olstQFC.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;img src=&#34;https://imgur.com/yFXsoSy.png&#34; width=&#34;40%&#34;&gt; &#xA;&lt;p&gt;It supports a &lt;code&gt;Sidebar&lt;/code&gt; on the left, an optional &lt;code&gt;TitleBar&lt;/code&gt; at the top, and the rest of the window is typically filled out with a &lt;code&gt;MacosScaffold&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A scope for the &lt;code&gt;MacosWindow&lt;/code&gt; is provided by &lt;code&gt;MacosWindowScope&lt;/code&gt;. The sidebar can be toggled with &lt;code&gt;MacosWindowScope.of(context).toggleSidebar()&lt;/code&gt;. &lt;strong&gt;Please note&lt;/strong&gt; that you must wrap your &lt;code&gt;MacosScaffold&lt;/code&gt; in a &lt;code&gt;Builder&lt;/code&gt; widget in order for this to work properly.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/IBbp5rN.gif&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;Sidebar&lt;/h2&gt; &#xA;&lt;p&gt;A sidebar enables app navigation and provides quick access to top-level collections of content in your app.&lt;/p&gt; &#xA;&lt;p&gt;Sidebars may be placed at the left or right of your app. To place a sidebar on the left, use the &lt;code&gt;MacosWindow.sidebar&lt;/code&gt; property. To place a sidebar on the right, use the &lt;code&gt;MacosWindow.endSidebar&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/sz4VPNR.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;int pageIndex = 0;&#xA;&#xA;...&#xA;&#xA;MacosWindow(&#xA;  sidebar: Sidebar(&#xA;    minWidth: 200,&#xA;    builder: (context, scrollController) {&#xA;      return SidebarItems(&#xA;        currentIndex: pageIndex,&#xA;        scrollController: scrollController,&#xA;        itemSize: SidebarItemSize.large,&#xA;        onChanged: (i) {&#xA;          setState(() =&amp;gt; pageIndex = i);&#xA;        },&#xA;        items: const [&#xA;          SidebarItem(&#xA;            label: Text(&#39;Page One&#39;),&#xA;          ),&#xA;          SidebarItem(&#xA;            label: Text(&#39;Page Two&#39;),&#xA;          ),&#xA;        ],&#xA;      );&#xA;    },&#xA;  ),&#xA;  endSidebar: Sidebar(&#xA;    startWidth: 200,&#xA;    minWidth: 200,&#xA;    maxWidth: 300,&#xA;    shownByDefault: false,&#xA;    builder: (context, _) {&#xA;      return const Center(&#xA;        child: Text(&#39;End Sidebar&#39;),&#xA;      );&#xA;    },&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosScaffold&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MacosScaffold&lt;/code&gt; is what you might call a &#34;page&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The scaffold has a &lt;code&gt;toolbar&lt;/code&gt; property and a &lt;code&gt;children&lt;/code&gt; property. &lt;code&gt;children&lt;/code&gt; accepts a &lt;code&gt;ContentArea&lt;/code&gt; widget and multiple &lt;code&gt;ResizablePane&lt;/code&gt; widgets. To catch navigation or routes below the scaffold, consider wrapping the &lt;code&gt;MacosScaffold&lt;/code&gt; in a &lt;a href=&#34;https://api.flutter.dev/flutter/cupertino/CupertinoTabView-class.html&#34;&gt;&lt;code&gt;CupertinoTabView&lt;/code&gt;&lt;/a&gt;. By doing so, navigation inside the &lt;code&gt;MacosScaffold&lt;/code&gt; will be displayed inside the &lt;code&gt;MacosScaffold&lt;/code&gt; area instead of covering the entire window. To push a route outside a &lt;code&gt;MacosScaffold&lt;/code&gt; wrapped in a &lt;a href=&#34;https://api.flutter.dev/flutter/cupertino/CupertinoTabView-class.html&#34;&gt;&lt;code&gt;CupertinoTabView&lt;/code&gt;&lt;/a&gt;, use the root navigator &lt;code&gt;Navigator.of(context, rootNavigator: true)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for customizations and &lt;code&gt;ToolBar&lt;/code&gt; examples.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/KT1fdjI.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;img src=&#34;https://imgur.com/4mknLAy.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;img src=&#34;https://imgur.com/mXR2wwu.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;Modern window look&lt;/h2&gt; &#xA;&lt;p&gt;A new look for macOS apps was introduced in Big Sur (macOS 11). To match that look in your Flutter app, like our screenshots, your &lt;code&gt;macos/Runner/MainFlutterWindow.swift&lt;/code&gt; file should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import Cocoa&#xA;import FlutterMacOS&#xA;&#xA;class BlurryContainerViewController: NSViewController {&#xA;  let flutterViewController = FlutterViewController()&#xA;&#xA;  init() {&#xA;    super.init(nibName: nil, bundle: nil)&#xA;  }&#xA;&#xA;  required init?(coder: NSCoder) {&#xA;    fatalError()&#xA;  }&#xA;&#xA;  override func loadView() {&#xA;    let blurView = NSVisualEffectView()&#xA;    blurView.autoresizingMask = [.width, .height]&#xA;    blurView.blendingMode = .behindWindow&#xA;    blurView.state = .active&#xA;    if #available(macOS 10.14, *) {&#xA;        blurView.material = .sidebar&#xA;    }&#xA;    self.view = blurView&#xA;  }&#xA;&#xA;  override func viewDidLoad() {&#xA;    super.viewDidLoad()&#xA;&#xA;    self.addChild(flutterViewController)&#xA;&#xA;    flutterViewController.view.frame = self.view.bounds&#xA;+   flutterViewController.backgroundColor = .clear // **Required post-Flutter 3.7.0**&#xA;    flutterViewController.view.autoresizingMask = [.width, .height]&#xA;    self.view.addSubview(flutterViewController.view)&#xA;  }&#xA;}&#xA;&#xA;class MainFlutterWindow: NSWindow, NSWindowDelegate {&#xA;  override func awakeFromNib() {&#xA;    delegate = self&#xA;    let blurryContainerViewController = BlurryContainerViewController()&#xA;    let windowFrame = self.frame&#xA;    self.contentViewController = blurryContainerViewController&#xA;    self.setFrame(windowFrame, display: true)&#xA;&#xA;    if #available(macOS 10.13, *) {&#xA;      let customToolbar = NSToolbar()&#xA;      customToolbar.showsBaselineSeparator = false&#xA;      self.toolbar = customToolbar&#xA;    }&#xA;    self.titleVisibility = .hidden&#xA;    self.titlebarAppearsTransparent = true&#xA;    if #available(macOS 11.0, *) {&#xA;      // Use .expanded if the app will have a title bar, else use .unified&#xA;      self.toolbarStyle = .unified&#xA;    }&#xA;&#xA;    self.isMovableByWindowBackground = true&#xA;    self.styleMask.insert(NSWindow.StyleMask.fullSizeContentView)&#xA;&#xA;    self.isOpaque = false&#xA;    self.backgroundColor = .clear&#xA;&#xA;    RegisterGeneratedPlugins(registry: blurryContainerViewController.flutterViewController)&#xA;&#xA;    super.awakeFromNib()&#xA;  }&#xA;&#xA;  func window(_ window: NSWindow, willUseFullScreenPresentationOptions proposedOptions: NSApplication.PresentationOptions = []) -&amp;gt; NSApplication.PresentationOptions {&#xA;    return [.autoHideToolbar, .autoHideMenuBar, .fullScreen]&#xA;  }&#xA;&#xA;  func windowWillEnterFullScreen(_ notification: Notification) {&#xA;      self.toolbar?.isVisible = false&#xA;  }&#xA;  &#xA;  func windowDidExitFullScreen(_ notification: Notification) {&#xA;      self.toolbar?.isVisible = true&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/flutter/flutter/issues/59969#issuecomment-916682559&#34;&gt;this issue comment&lt;/a&gt; for more details on the new look and explanations for how it works.&lt;/p&gt; &#xA;&lt;p&gt;Please note that if you are using a title bar (&lt;code&gt;TitleBar&lt;/code&gt;) in your &lt;code&gt;MacosWindow&lt;/code&gt;, you should set the &lt;code&gt;toolbarStyle&lt;/code&gt; of NSWindow to &lt;code&gt;.expanded&lt;/code&gt;, in order to properly align the close, minimize, zoom window buttons. In any other case, you should keep it as &lt;code&gt;.unified&lt;/code&gt;. This must be set beforehand, i.e. it cannot be switched in runtime.&lt;/p&gt; &#xA;&lt;h2&gt;ToolBar&lt;/h2&gt; &#xA;&lt;p&gt;Creates a toolbar in the &lt;code&gt;MacosScaffold&lt;/code&gt;. The toolbar appears below the title bar (if present) of the macOS app or integrates with it, by using its &lt;code&gt;title&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;A toolbar provides convenient access to frequently used commands and features (toolbar items). Different routes of your app could have different toolbars.&lt;/p&gt; &#xA;&lt;p&gt;Toolbar items include &lt;code&gt;ToolBarIconButton&lt;/code&gt;, &lt;code&gt;ToolBarPulldownButton&lt;/code&gt;, and &lt;code&gt;ToolBarSpacer&lt;/code&gt; widgets, and should be provided via the &lt;code&gt;items&lt;/code&gt; property. The action of every toolbar item should also be provided as a menu bar command of your app.&lt;/p&gt; &#xA;&lt;p&gt;Toolbars look best and are easiest to understand when they contain elements of the same type (so either use labels for every toolbar item or not).&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;ToolBarSpacer&lt;/code&gt; widgets to set the grouping of the different toolbar actions.&lt;/p&gt; &#xA;&lt;p&gt;An example toolbar would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ToolBar(&#xA;  title: const Text(&#39;Untitled Document&#39;),&#xA;  titleWidth: 200.0,&#xA;  leading: MacosBackButton(&#xA;    onPressed: () =&amp;gt; debugPrint(&#39;click&#39;),&#xA;    fillColor: Colors.transparent,&#xA;  ),&#xA;  actions: [&#xA;    ToolBarIconButton(&#xA;      label: &#34;Add&#34;,&#xA;      icon: const MacosIcon(&#xA;        CupertinoIcons.add_circled,&#xA;      ),&#xA;      onPressed: () =&amp;gt; debugPrint(&#34;Add...&#34;),&#xA;      showLabel: true,&#xA;    ),&#xA;    const ToolBarSpacer(),&#xA;    ToolBarIconButton(&#xA;      label: &#34;Delete&#34;,&#xA;      icon: const MacosIcon(&#xA;        CupertinoIcons.trash,&#xA;      ),&#xA;      onPressed: () =&amp;gt; debugPrint(&#34;Delete&#34;),&#xA;      showLabel: false,&#xA;    ),&#xA;    ToolBarPullDownButton(&#xA;      label: &#34;Actions&#34;,&#xA;      icon: CupertinoIcons.ellipsis_circle,&#xA;      items: [&#xA;        MacosPulldownMenuItem(&#xA;          label: &#34;New Folder&#34;,&#xA;          title: const Text(&#34;New Folder&#34;),&#xA;          onTap: () =&amp;gt; debugPrint(&#34;Creating new folder...&#34;),&#xA;        ),&#xA;        MacosPulldownMenuItem(&#xA;          label: &#34;Open&#34;,&#xA;          title: const Text(&#34;Open&#34;),&#xA;          onTap: () =&amp;gt; debugPrint(&#34;Opening...&#34;),&#xA;        ),&#xA;      ],&#xA;    ),&#xA;  ]&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This builds this simple toolbar: &lt;img src=&#34;https://imgur.com/BDUdQkj.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other toolbar examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with icon buttons (no labels):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/PtrjhPx.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with icon buttons and labels:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/Ouaud12.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with a pulldown button open:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/QCxoGmM.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Toolbar with title bar above (also see &lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#modern-window-look&#34;&gt;the note above&lt;/a&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://imgur.com/eAgcsKY.png&#34;&gt; &#xA;&lt;p&gt;You can also create your own &lt;code&gt;CustomToolbarItem&lt;/code&gt; to include any type of widget in the toolbar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Add a grey vertical line as a custom toolbar item:&#xA;CustomToolbarItem(&#xA;  inToolbarBuilder: (context) =&amp;gt; Padding(&#xA;    padding: const EdgeInsets.all(8.0),&#xA;    child: Container(color: Colors.grey, width: 1, height: 30),&#xA;  ),&#xA;  inOverflowedBuilder: (context) =&amp;gt;&#xA;      Container(color: Colors.grey, width: 30, height: 1),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosListTile&lt;/h2&gt; &#xA;&lt;p&gt;A widget that aims to approximate the &lt;a href=&#34;https://api.flutter.dev/flutter/material/ListTile-class.html&#34;&gt;&lt;code&gt;ListTile&lt;/code&gt;&lt;/a&gt; widget found in Flutter&#39;s material library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/pQB99M2.png&#34; alt=&#34;MacosListTile&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosListTile(&#xA;  leading: const Icon(CupertinoIcons.lightbulb),&#xA;  title: Text(&#xA;    &#39;A robust library of Flutter components for macOS&#39;,&#xA;    style: MacosTheme.of(context).typography.headline,&#xA;  ),&#xA;  subtitle: Text(&#xA;    &#39;Create native looking macOS applications using Flutter&#39;,&#xA;    style: MacosTheme.of(context).typography.subheadline.copyWith(&#xA;      color: MacosColors.systemGrayColor,&#xA;    ),&#xA;  ),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosTabView&lt;/h2&gt; &#xA;&lt;p&gt;A multipage interface that displays one page at a time. Must be used in a &lt;code&gt;StatefulWidget&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/Mdn7Li2.png&#34;&gt; &#xA;&lt;p&gt;You can control the placement of the tabs using the &lt;code&gt;position&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final _controller = MacosTabController(&#xA;  initialIndex: 0,&#xA;  length: 3,&#xA;);&#xA;&#xA;...&#xA;&#xA;MacosTabView(&#xA;  controller: _controller,&#xA;  tabs: const [&#xA;    MacosTab(&#xA;      label: &#39;Tab 1&#39;,&#xA;    ),&#xA;    MacosTab(&#xA;      label: &#39;Tab 2&#39;,&#xA;    ),&#xA;    MacosTab(&#xA;      label: &#39;Tab 3&#39;,&#xA;    ),&#xA;  ],&#xA;  children: const [&#xA;    Center(&#xA;      child: Text(&#39;Tab 1&#39;),&#xA;    ),&#xA;    Center(&#xA;      child: Text(&#39;Tab 2&#39;),&#xA;    ),&#xA;    Center(&#xA;      child: Text(&#39;Tab 3&#39;),&#xA;    ),&#xA;  ],&#xA;),        &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Icons&lt;/h1&gt; &#xA;&lt;h2&gt;MacosIcon&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;MacosIcon&lt;/code&gt; is identical to a regular &lt;code&gt;Icon&lt;/code&gt; in every way with one exception - it respects a &lt;code&gt;MacosTheme&lt;/code&gt;. Use it the same way you would a regular icon:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosIcon(&#xA;  CupertinoIcons.add,&#xA;  // color: CupertinoColors.activeBlue.color,&#xA;  // size: 20,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Buttons&lt;/h1&gt; &#xA;&lt;h2&gt;MacosCheckbox&lt;/h2&gt; &#xA;&lt;p&gt;A checkbox is a type of button that lets the user choose between two opposite states, actions, or values. A selected checkbox is considered on when it contains a checkmark and off when it&#39;s empty. A checkbox is almost always followed by a title unless it appears in a checklist. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/checkboxes/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Off&lt;/th&gt; &#xA;   &lt;th&gt;On&lt;/th&gt; &#xA;   &lt;th&gt;Mixed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/CheckBoxes_Deselected.svg?sanitize=true&#34; alt=&#34;Off Checkbox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/CheckBoxes_Selected.svg?sanitize=true&#34; alt=&#34;On Checkbox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/CheckBoxes_Mixed.svg?sanitize=true&#34; alt=&#34;Mixed Checkbox&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic checkbox:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool selected = false;&#xA;&#xA;MacosCheckbox(&#xA;  value: selected,&#xA;  onChanged: (value) {&#xA;    setState(() =&amp;gt; selected = value);&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make a checkbox in the &lt;code&gt;mixed&lt;/code&gt; state, set &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;HelpButton&lt;/h2&gt; &#xA;&lt;p&gt;A help button appears within a view and opens app-specific help documentation when clicked. All help buttons are circular, consistently sized buttons that contain a question mark icon. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/help-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/buttonsHelp.png&#34; alt=&#34;HelpButton Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a help button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;HelpButton(&#xA;  onPressed: () {&#xA;    print(&#39;pressed help button&#39;),&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the help button appearance and behaviour using the &lt;code&gt;HelpButtonTheme&lt;/code&gt;, but it&#39;s not recommended by apple to change help button&#39;s appearance.&lt;/p&gt; &#xA;&lt;h2&gt;RadioButton&lt;/h2&gt; &#xA;&lt;p&gt;A radio button is a small, circular button followed by a title. Typically presented in groups of two to five, radio buttons provide the user a set of related but mutually exclusive choices. A radio buttonâ€™s state is either on (a filled circle) or off (an empty circle). &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/radio-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/radioButtons.png&#34; alt=&#34;RadioButton Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic radio button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool selected = false;&#xA;&#xA;MacosRadioButton(&#xA;  value: selected,&#xA;  onChanged: (value) {&#xA;    setState(() =&amp;gt; selected = value);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PulldownButton&lt;/h2&gt; &#xA;&lt;p&gt;A pull-down button (often referred to as a pull-down menu) is a type of pop-up button that, when clicked, displays a menu containing a list of choices. The menu appears below the button. Once the menu is displayed onscreen, it remains open until the user chooses a menu item, clicks outside of the menu, switches to another app, or quits the app; or until the system displays an alert. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/pull-down-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use a pull-down button to present a list of commands. A pull-down button can either show a &lt;code&gt;title&lt;/code&gt; or an &lt;code&gt;icon&lt;/code&gt; to describe the contents of the button&#39;s menu. If you use an icon, make sure it clearly communicates the buttonâ€™s purpose.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;items&lt;/code&gt; is null, the button will be disabled (greyed out).&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;title&lt;/code&gt; or an &lt;code&gt;icon&lt;/code&gt; must be provided, to be displayed as the pull-down button&#39;s title, but not both at the same time.&lt;/p&gt; &#xA;&lt;p&gt;The menu can also be navigated with the up/down keys and an action selected with the Return key.&lt;/p&gt; &#xA;&lt;p&gt;It can also appear in the toolbar, via the &lt;code&gt;ToolBarPulldownButton&lt;/code&gt; widget.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/XZlsUxF.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/EtrydYd.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/KVX8OsR.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/mTvBxyL.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/k1Wm6fd.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/wb08RXI.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic pull-down button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosPulldownButton(&#xA;  title: &#34;Actions&#34;,&#xA;  // Or provide an icon to use as title:&#xA;  // icon: CupertinoIcons.ellipsis_circle, &#xA;  items: [&#xA;    MacosPulldownMenuItem(&#xA;      title: const Text(&#39;Save&#39;),&#xA;      onTap: () =&amp;gt; debugPrint(&#34;Saving...&#34;),&#xA;    ),&#xA;    MacosPulldownMenuItem(&#xA;      title: const Text(&#39;Save as...&#39;),&#xA;      onTap: () =&amp;gt; debugPrint(&#34;Opening Save As dialog...&#34;),&#xA;    ),&#xA;    const MacosPulldownMenuDivider(),&#xA;    MacosPulldownMenuItem(&#xA;      enabled: false,&#xA;      title: const Text(&#39;Export&#39;),&#xA;      onTap: () =&amp;gt; debugPrint(&#34;Exporting&#34;),&#xA;    ),&#xA;  ],&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PopupButton&lt;/h2&gt; &#xA;&lt;p&gt;A pop-up button (often referred to as a pop-up menu) is a type of button that, when clicked, displays a menu containing a list of mutually exclusive choices. The menu appears on top of the button. Like other types of menus, a pop-up buttonâ€™s menu can include separators and symbols like checkmarks. After the menu is revealed, it remains open until the user chooses a menu item, clicks outside of the menu, switches to another app, or quits the app; or until the system displays an alert. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/pop-up-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The type &lt;code&gt;T&lt;/code&gt; of the &lt;code&gt;MacosPopupButton&lt;/code&gt; is the type of the value that each pop-up menu item represents. All the entries in a given menu must represent values with consistent types. Typically, an &lt;code&gt;enum&lt;/code&gt; is used. Each &lt;code&gt;MacosPopupMenuItem&lt;/code&gt; in items must be specialized with that same type argument.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;onChanged&lt;/code&gt; callback should update a state variable that defines the pop-up menu&#39;s value. It should also call &lt;code&gt;State.setState&lt;/code&gt; to rebuild the pop-up button with the new value.&lt;/p&gt; &#xA;&lt;p&gt;When there are menu items that cannot be displayed within the available menu constraints, a caret is shown at the top or bottom of the open menu to signal that there are items that are not currently visible.&lt;/p&gt; &#xA;&lt;p&gt;The menu can also be navigated with the up/down keys and an item selected with the Return key.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/ov0kzJC.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/buhYEo1.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/BOEH59L.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/61S7DSX.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/zY0d8RF.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/W4CMa5z.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic pop-up button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String popupValue = &#39;One&#39;;&#xA;&#xA;MacosPopupButton&amp;lt;String&amp;gt;(&#xA;  value: popupValue,&#xA;  onChanged: (String? newValue) {&#xA;    setState(() {&#xA;      popupValue = newValue!;&#xA;    });&#xA;  },&#xA;  items: &amp;lt;String&amp;gt;[&#39;One&#39;, &#39;Two&#39;, &#39;Three&#39;, &#39;Four&#39;]&#xA;      .map&amp;lt;MacosPopupMenuItem&amp;lt;String&amp;gt;&amp;gt;((String value) {&#xA;    return MacosPopupMenuItem&amp;lt;String&amp;gt;(&#xA;      value: value,&#xA;      child: Text(value),&#xA;    );&#xA;  }).toList(),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PushButton&lt;/h2&gt; &#xA;&lt;p&gt;A push button appears within a view and initiates an instantaneous app-specific action, such as printing a document or deleting a file. Push buttons contain textâ€”not iconsâ€”and often open a separate window, dialog, or app so the user can complete a task. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/push-buttons/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/GsShoF6.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/klWHTAX.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/v99ekWA.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/hj6uGhI.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/wt0K6u4.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/7khWnwt.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/TgfjJdQ.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/83cEMeP.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic push button:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PushButton(&#xA;  child: Text(&#39;button&#39;),&#xA;  buttonSize: ButtonSize.large,&#xA;  onPressed: () {&#xA;    print(&#39;button pressed&#39;);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosSwitch&lt;/h2&gt; &#xA;&lt;p&gt;A switch is a visual toggle between two mutually exclusive states â€” on and off. A switch shows that it&#39;s on when the accent color is visible and off when the switch appears colorless. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/buttons/switches/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;On&lt;/th&gt; &#xA;   &lt;th&gt;Off&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/qK1VCVr.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/IBh5jkz.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic toggle switch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool selected = false;&#xA;&#xA;MacosSwitch(&#xA;  value: selected,&#xA;  onChanged: (value) {&#xA;    setState(() =&amp;gt; selected = value);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosSegmentedControl&lt;/h2&gt; &#xA;&lt;p&gt;Displays one or more navigational tabs in a single horizontal group. Used by &lt;code&gt;MacosTabView&lt;/code&gt; to navigate between the different tabs of the tab bar.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/Igvms1w.jpg&#34;&gt; &#xA;&lt;p&gt;The typical usage of this widget is by &lt;code&gt;MacosTabView&lt;/code&gt;, to control the navigation of its children. You do not need to specify a &lt;code&gt;MacosSegmentedControl&lt;/code&gt; with your &lt;code&gt;MacosTabView&lt;/code&gt;, as it is built by that widget.&lt;/p&gt; &#xA;&lt;h1&gt;Dialogs and Sheets&lt;/h1&gt; &#xA;&lt;h2&gt;MacosAlertDialog&lt;/h2&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;showMacosAlertDialog(&#xA;  context: context,&#xA;  builder: (_) =&amp;gt; MacosAlertDialog(&#xA;    appIcon: FlutterLogo(&#xA;      size: 56,&#xA;    ),&#xA;    title: Text(&#xA;      &#39;Alert Dialog with Primary Action&#39;,&#xA;      style: MacosTheme.of(context).typography.headline,&#xA;    ),&#xA;    message: Text(&#xA;      &#39;This is an alert dialog with a primary action and no secondary action&#39;,&#xA;      textAlign: TextAlign.center,&#xA;      style: MacosTheme.of(context).typography.headline,&#xA;    ),&#xA;    primaryButton: PushButton(&#xA;      buttonSize: ButtonSize.large,&#xA;      child: Text(&#39;Primary&#39;),&#xA;      onPressed: () {},&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/G3dcjew.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://imgur.com/YHtgv59.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://imgur.com/xuBR5qK.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MacosSheet&lt;/h2&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;showMacosSheet(&#xA;  context: context,&#xA;  builder: (_) =&amp;gt; const MacosuiSheet(),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgur.com/NV0o5Ws.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Fields&lt;/h1&gt; &#xA;&lt;h2&gt;MacosTextField&lt;/h2&gt; &#xA;&lt;p&gt;A text field is a rectangular area in which the user enters or edits one or more lines of text. A text field can contain plain or styled text.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/UzyMlcL.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a basic text field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosTextField(&#xA;  placeholder: &#39;Type some text here&#39;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosSearchField&lt;/h2&gt; &#xA;&lt;p&gt;A search field is a style of text field optimized for performing text-based searches in a large collection of values.&lt;/p&gt; &#xA;&lt;p&gt;When the user starts typing into the search field, a list of selectable results appears in an overlay below (or above) the field.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/qbabwAW.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/Jol85ny.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/xP3l3Lv.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a search field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosSearchField(&#xA;  placeholder: &#39;Search for a country...&#39;,&#xA;  results: countries.map((e) =&amp;gt; SearchResultItem(e)).toList(),&#xA;  onResultSelected: (resultItem) {&#xA;    debugPrint(resultItem.searchKey);&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;examples/fields_page&lt;/code&gt; for more examples.&lt;/p&gt; &#xA;&lt;h1&gt;Labels&lt;/h1&gt; &#xA;&lt;p&gt;Labels are a short description of what an element on the screen does.&lt;/p&gt; &#xA;&lt;h2&gt;MacosTooltip&lt;/h2&gt; &#xA;&lt;p&gt;Tooltips succinctly describe how to use controls without shifting peopleâ€™s focus away from the primary interface. Help tags appear when the user positions the pointer over a control for a few seconds. A tooltip remains visible for 10 seconds, or until the pointer moves away from the control.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dark Theme&lt;/th&gt; &#xA;   &lt;th&gt;Light Theme&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/0qLFqdK.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/Y3PLqBo.jpg&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To create a tooltip, wrap any widget on a &lt;code&gt;MacosTooltip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosTooltip(&#xA;  message: &#39;This is a tooltip&#39;,&#xA;  child: Text(&#39;Hover or long press to show a tooltip&#39;),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the tooltip the way you want by customizing the theme&#39;s &lt;code&gt;TooltipTheme&lt;/code&gt;. A tooltip automatically adapts to its environment, responding to touch and pointer events. To use a tooltip with a toolbar item, provide it with a &lt;code&gt;tooltipMessage&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h1&gt;Indicators&lt;/h1&gt; &#xA;&lt;h2&gt;Progress Indicators&lt;/h2&gt; &#xA;&lt;p&gt;Donâ€™t make people sit around staring at a static screen waiting for your app to load content or perform lengthy data processing operations. Use progress indicators to let people know your app hasn&#39;t stalled and to give them some idea of how long theyâ€™ll be waiting.&lt;/p&gt; &#xA;&lt;p&gt;Progress indicators have two distinct styles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bar indicators&lt;/strong&gt;, more commonly known as progress bars, show progress in a horizontal bar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Spinning indicators&lt;/strong&gt; show progress in a circular form, either as a spinner or as a circle that fills in as progress continues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;People don&#39;t interact with progress indicators; however, they are often accompanied by a button for canceling the corresponding operation. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/progress-indicators/&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/ProgressIndicators_Lead.png&#34; alt=&#34;Progress Indicator Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ProgressCircle&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;ProgressCircle&lt;/code&gt; can be either determinate or indeterminate.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Determinate Progress Circle&lt;/th&gt; &#xA;   &lt;th&gt;Indeterminate Progress Circle&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/hr3dHn9.jpg&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://imgur.com/NSbKqLK.gif&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an indeterminate progress circle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ProgressCircle(&#xA;  value: null,&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can provide a non-null value to &lt;code&gt;value&lt;/code&gt; to make the progress circle determinate.&lt;/p&gt; &#xA;&lt;h3&gt;ProgressBar&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;ProgressBar&lt;/code&gt; can only be determinate.&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/tdYgJmB.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a determinate progress bar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ProgressBar(&#xA;  value: 30,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Level Indicators&lt;/h2&gt; &#xA;&lt;p&gt;A level indicator graphically represents of a specific value within a range of numeric values. Itâ€™s similar to a &lt;a href=&#34;https://raw.githubusercontent.com/macosui/macos_ui/dev/#slider&#34;&gt;slider&lt;/a&gt; in purpose, but more visual and doesnâ€™t contain a distinct control for selecting a valueâ€”clicking and dragging across the level indicator itself to select a value is supported, however. A level indicator can also include tick marks, making it easy for the user to pinpoint a specific value in the range. There are three different level indicator styles, each with a different appearance, for communicating capacity, rating, and relevance.&lt;/p&gt; &#xA;&lt;h3&gt;CapacityIndicator&lt;/h3&gt; &#xA;&lt;p&gt;A capacity indicator illustrates the current level in relation to a finite capacity. Capacity indicators are often used when communicating factors like disk and battery usage. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#capacity-indicators&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Continuous&lt;/th&gt; &#xA;   &lt;th&gt;Discrete&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicators-continous.png&#34; alt=&#34;Continuous CapacityIndicator Example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicators-discrete.png&#34; alt=&#34;Discrete CapacityIndicator Example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A horizontal translucent track that fills with a colored bar to indicate the current value. Tick marks are often displayed to provide context.&lt;/td&gt; &#xA;   &lt;td&gt;A horizontal row of separate, equally sized, rectangular segments. The number of segments matches the total capacity, and the segments fill completelyâ€”never partiallyâ€”with color to indicate the current value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an interactive continuous capacity indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;double value = 30;&#xA;&#xA;CapacityIndicator(&#xA;  value: value,&#xA;  discrete: false,&#xA;  onChanged: (v) {&#xA;    setState(() =&amp;gt; value = v);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;discrete&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to make it a discrete capacity indicator.&lt;/p&gt; &#xA;&lt;h3&gt;MacosSlider&lt;/h3&gt; &#xA;&lt;p&gt;A slider is a control that lets people select a value from a continuous or discrete range of values by moving the slider thumb.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Continuous&lt;/th&gt; &#xA;   &lt;th&gt;Discrete&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://i.imgur.com/dc4YjoX.png&#34; alt=&#34;Continuous Slider Example&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://i.imgur.com/KckOTUf.png&#34; alt=&#34;Discrete Slider Example&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;A horizontal slider where any value continuous value between a min and max can be selected&lt;/td&gt; &#xA;   &lt;td&gt;A horizontal slider where only discrete values between a min and max can be selected. Tick marks are often displayed to provide context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an interactive continuous slider:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;double value = 0.5;&#xA;&#xA;MacosSlider(&#xA;  value: value,&#xA;  onChanged: (v) {&#xA;    setState(() =&amp;gt; value = v);&#xA;  },&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RatingIndicator&lt;/h3&gt; &#xA;&lt;p&gt;A rating indicator uses a series of horizontally arranged graphical symbols to communicate a ranking level. The default symbol is a star.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicator-rating.png&#34; alt=&#34;RatingIndicator Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A rating indicator doesnâ€™t display partial symbolsâ€”its value is rounded in order to display complete symbols only. Within a rating indicator, symbols are always the same distance apart and don&#39;t expand or shrink to fit the control. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#rating-indicators&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create an interactive rating indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;double value = 3;&#xA;&#xA;RatingIndicator(&#xA;  amount: 5,&#xA;  value: value,&#xA;  onChanged: (v) {&#xA;    setState(() =&amp;gt; value = v);&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RelevanceIndicator&lt;/h3&gt; &#xA;&lt;p&gt;A relevance indicator communicates relevancy using a series of vertical bars. It often appears in a list of search results for reference when sorting and comparing multiple items. &lt;a href=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#relevance-indicators&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://developer.apple.com/design/human-interface-guidelines/macos/images/indicator-relevance.png&#34; alt=&#34;RelevanceIndicator Example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to create a relevance indicator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RelevanceIndicator(&#xA;  value: 15,&#xA;  amount: 20,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Selectors&lt;/h1&gt; &#xA;&lt;h2&gt;MacosDatePicker&lt;/h2&gt; &#xA;&lt;img src=&#34;https://imgur.com/sprmep1.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;p&gt;Lets the user choose a date.&lt;/p&gt; &#xA;&lt;p&gt;There are three styles of &lt;code&gt;MacosDatePickers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textual&lt;/code&gt;: a text-only date picker where the user must select the day, month, or year and use the caret-control buttons to change the value. This is useful when space in your app is constrained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graphical&lt;/code&gt;: a visual date picker where the user can navigate through a calendar-like interface to select a date.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;combined&lt;/code&gt;: provides both &lt;code&gt;textual&lt;/code&gt; and &lt;code&gt;graphical&lt;/code&gt; interfaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosDatePicker(&#xA;  onDateChanged: (date) =&amp;gt; debugPrint(&#39;$date&#39;),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosTimePicker&lt;/h2&gt; &#xA;&lt;img src=&#34;https://imgur.com/RtPbRo2.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Lets the user choose a time.&lt;/p&gt; &#xA;&lt;p&gt;There are three styles of &lt;code&gt;MacosTimePickers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;textual&lt;/code&gt;: a text-only time picker where the user must select the hour or minute and use the caret-control buttons to change the value. This is useful when space in your app is constrained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graphical&lt;/code&gt;: a visual time picker where the user can move the hands of a clock-like interface to select a time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;combined&lt;/code&gt;: provides both &lt;code&gt;textual&lt;/code&gt; and &lt;code&gt;graphical&lt;/code&gt; interfaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosTimePicker(&#xA;  onTimeChanged: (time) =&amp;gt; debugPrint(&#39;$time&#39;),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacosColorWell&lt;/h2&gt; &#xA;&lt;img src=&#34;https://imgur.com/VpK4IlM.gif&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Lets the user choose a color via the native macOS color picker.&lt;/p&gt; &#xA;&lt;p&gt;You can choose which mode to launch the picker in using the &lt;code&gt;ColorPickerMode&lt;/code&gt; enum. The default is &lt;code&gt;ColorPickerMode.wheel&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ðŸš¨ This widget will not work on platforms other than macOS!&lt;/p&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MacosColorWell(&#xA;  onColorSelected: (color) =&amp;gt; debugPrint(&#39;$color&#39;),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>