<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-01T01:34:17Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>igniti0n/flutter_algorithms_visualization</title>
    <updated>2023-03-01T01:34:17Z</updated>
    <id>tag:github.com,2023-03-01:/igniti0n/flutter_algorithms_visualization</id>
    <link href="https://github.com/igniti0n/flutter_algorithms_visualization" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visualizing algorithms with Flutter &amp; Dart&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Algorithm visualization with Flutter &amp;amp; Dart&lt;/h2&gt; &#xA;&lt;p&gt;This project aims to visualize different algorithms using Flutter in &amp;amp; Dart. Starting from path finding algorithms, but wishing to go further to arrays, trees, graphs...&lt;/p&gt; &#xA;&lt;p&gt;Feel free to contribute by opening some PR&#39;s &lt;span&gt;ðŸ”¥&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/igniti0n/flutter_algorithms_visualization/raw/main/assets/dijkstra.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/igniti0n/flutter_algorithms_visualization/raw/main/assets/a_star.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/igniti0n/flutter_algorithms_visualization/raw/main/assets/maze.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Learning&lt;/h1&gt; &#xA;&lt;p&gt;Dijkstra&#39;s algorithm explained, with the help of this visualization project&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/p/32b73722406a&#34;&gt;https://github.com/igniti0n/flutter_algorithms_visualization&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A* algorithm explained&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ySN5Wnu88nE&#34;&gt;https://www.youtube.com/watch?v=ySN5Wnu88nE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ideas &lt;span&gt;âœ¨&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;âœ…&lt;/span&gt; Add time control, to increase/decrease time step&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;âœ…&lt;/span&gt; Enable/disable diagonal nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;âœ…&lt;/span&gt; DFS/BFS&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;ðŸ”³&lt;/span&gt; Ability to move the end/start node and see the change&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;ðŸ”³&lt;/span&gt; Impmenent sorting of nodes with heap rather then sorting a list for Dijkstra/A*&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;âœ…&lt;/span&gt; Maze generator&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dart-homework-2022B/control_flow_statements</title>
    <updated>2023-03-01T01:34:17Z</updated>
    <id>tag:github.com,2023-03-01:/dart-homework-2022B/control_flow_statements</id>
    <link href="https://github.com/dart-homework-2022B/control_flow_statements" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome&lt;/h1&gt; &#xA;&lt;h1&gt;Control flow statements&lt;/h1&gt; &#xA;&lt;p&gt;Automated grading of homework assignments and tests&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fork this repository&lt;/li&gt; &#xA; &lt;li&gt;solve the task&lt;/li&gt; &#xA; &lt;li&gt;commit with proper message&lt;/li&gt; &#xA; &lt;li&gt;commit with proper message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Problems&lt;/h1&gt; &#xA;&lt;h2&gt;if01&lt;/h2&gt; &#xA;&lt;p&gt;Given three integers a, b, c, check the following statement &#34;The number b is between a and c&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=1&#xA;Output: 2&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-5&#xA;Output: -5&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if02&lt;/h2&gt; &#xA;&lt;p&gt;If the number is positive, increase it to 1, else decrease it to 2.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=5&#xA;Output: 6&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-1&#xA;Output: -3&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if03&lt;/h2&gt; &#xA;&lt;p&gt;If the number is positive, increase it to 1, else decrease it to 2. If it is 0, assign 10.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-9&#xA;Output: -11&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=3&#xA;Output: 4&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if04&lt;/h2&gt; &#xA;&lt;p&gt;Find how many positive numbers there are in the given numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-2 b=4 c=1&#xA;Output: 2&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=3 b=-3 c=-6&#xA;Output: 1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if05&lt;/h2&gt; &#xA;&lt;p&gt;Find how many negative numbers there are in the given numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-2 b=4 c=1&#xA;Output: 1&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=3 b=-3 c=-6&#xA;Output: 2&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if06&lt;/h2&gt; &#xA;&lt;p&gt;Find how many positive and how many negative numbers there are in the given numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-2 b=4 c=1&#xA;Output: &#34;there are a lot of positive numbers&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=3 b=-3 c=-6&#xA;Output: &#34;there are a lot of negative numbers&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if07&lt;/h2&gt; &#xA;&lt;p&gt;Given an integer a, check the following conditions: &#34;positive odd number&#34;, &#34;positive even number&#34;, &#34;negative odd number&#34;, &#34;negative even number&#34;, &#34;the number is zero&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=57&#xA;Output: &#34;positive odd number&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-24&#xA;Output: &#34;negative even number&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;9&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;9&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if08&lt;/h2&gt; &#xA;&lt;p&gt;Given an integer a, check the following conditions: &#34;two-digit odd number&#34;, &#34;two-digit even number&#34;, &#34;three-digit odd number&#34;, &#34;three-digit even number&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=57&#xA;Output: &#34;two-digit odd number&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-242&#xA;Output: &#34;three-digit even number&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;3&lt;/sup&gt; &amp;lt; num &amp;lt; 10 &lt;sup&gt;3&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if09&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;The two-digit integer is given.&#xA;Replace the digits of the number.&#xA;True if the resulting number is less than or equal to the old number, otherwise return False.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=57&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=21&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;3&lt;/sup&gt; &amp;lt; num &amp;lt; 10 &lt;sup&gt;3&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;if10&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Display the message according to the following temperature conditions given to you in Celsius:&#xA;Temp&amp;lt;0: &#34;Freezing&#34;&#xA;Temp 1-10: &#34;Very Cold&#34;&#xA;Temp 11-20: &#34;Cold&#34;&#xA;Temp 21-30: &#34;Normal&#34;&#xA;Temp 31-40: &#34;Hot&#34;&#xA;Temp &amp;gt;40: &#34;Very Hot&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=21&#xA;Output: &#34;Normal&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;Input: a=-4&#xA;Output: &#34;Freezing&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;3&lt;/sup&gt; &amp;lt; num &amp;lt; 10 &lt;sup&gt;3&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Warning&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;don&#39;t copy other solutions or any solution&lt;/li&gt; &#xA; &lt;li&gt;don&#39;t remove comments&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>