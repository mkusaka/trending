<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:36:58Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dnfield/flutter_svg</title>
    <updated>2022-09-08T01:36:58Z</updated>
    <id>tag:github.com,2022-09-08:/dnfield/flutter_svg</id>
    <link href="https://github.com/dnfield/flutter_svg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SVG parsing, rendering, and widget library for Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_svg&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/flutter_svg&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_svg.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/dnfield/flutter_svg&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dnfield/flutter_svg.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/dnfield/flutter_svg?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/dnfield/flutter_svg/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable MD033 --&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/dnfield/flutter_svg/7d374d7107561cbd906d7c0ca26fef02cc01e7c8/example/assets/flutter_logo.svg?sanitize=true&#34; width=&#34;200px&#34; alt=&#34;Flutter Logo which can be rendered by this package!&#34;&gt; &#xA;&lt;!-- markdownlint-enable MD033 --&gt; &#xA;&lt;p&gt;Draw SVG (and &lt;em&gt;some&lt;/em&gt; Android VectorDrawable (XML)) files on a Flutter Widget.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This is a Dart-native rendering library. Issues/PRs will be raised in Flutter and flutter/engine as necessary for features that are not good candidates for Dart implementations (especially if they&#39;re impossible to implement without engine support). However, not everything that Skia can easily do needs to be done by Skia; for example, the Path parsing logic here isn&#39;t much slower than doing it in native, and Skia isn&#39;t always doing low level GPU accelerated work where you might think it is (e.g. Dash Paths).&lt;/p&gt; &#xA;&lt;p&gt;All of the SVGs in the &lt;code&gt;assets/&lt;/code&gt; folder (except the text related one(s)) now have corresponding PNGs in the &lt;code&gt;golden/&lt;/code&gt; folder that were rendered using &lt;code&gt;flutter test tool/gen_golden.dart&lt;/code&gt; and compared against their rendering output in Chrome. Automated tests will continue to compare these to ensure code changes do not break known-good renderings.&lt;/p&gt; &#xA;&lt;p&gt;Basic usage (to create an SVG rendering widget from an asset):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final String assetName = &#39;assets/image.svg&#39;;&#xA;final Widget svg = SvgPicture.asset(&#xA;  assetName,&#xA;  semanticsLabel: &#39;Acme Logo&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can color/tint the image like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final String assetName = &#39;assets/up_arrow.svg&#39;;&#xA;final Widget svgIcon = SvgPicture.asset(&#xA;  assetName,&#xA;  color: Colors.red,&#xA;  semanticsLabel: &#39;A red up arrow&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default placeholder is an empty box (&lt;code&gt;LimitedBox&lt;/code&gt;) - although if a &lt;code&gt;height&lt;/code&gt; or &lt;code&gt;width&lt;/code&gt; is specified on the &lt;code&gt;SvgPicture&lt;/code&gt;, a &lt;code&gt;SizedBox&lt;/code&gt; will be used instead (which ensures better layout experience). There is currently no way to show an Error visually, however errors will get properly logged to the console in debug mode.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a placeholder widget. The placeholder will display during parsing/loading (normally only relevant for network access).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Will print error messages to the console.&#xA;final String assetName = &#39;assets/image_that_does_not_exist.svg&#39;;&#xA;final Widget svg = SvgPicture.asset(&#xA;  assetName,&#xA;);&#xA;&#xA;final Widget networkSvg = SvgPicture.network(&#xA;  &#39;https://site-that-takes-a-while.com/image.svg&#39;,&#xA;  semanticsLabel: &#39;A shark?!&#39;,&#xA;  placeholderBuilder: (BuildContext context) =&amp;gt; Container(&#xA;      padding: const EdgeInsets.all(30.0),&#xA;      child: const CircularProgressIndicator()),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to render the SVG to some other canvas, you can do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_svg/flutter_svg.dart&#39;;&#xA;final String rawSvg = &#39;&#39;&#39;&amp;lt;svg viewBox=&#34;...&#34;&amp;gt;...&amp;lt;/svg&amp;gt;&#39;&#39;&#39;;&#xA;final DrawableRoot svgRoot = await svg.fromSvgString(rawSvg, rawSvg);&#xA;&#xA;// If you only want the final Picture output, just use&#xA;final Picture picture = svgRoot.toPicture();&#xA;&#xA;// Otherwise, if you want to draw it to a canvas:&#xA;// Optional, but probably normally desirable: scale the canvas dimensions to&#xA;// the SVG&#39;s viewbox&#xA;svgRoot.scaleCanvasToViewBox(canvas);&#xA;&#xA;// Optional, but probably normally desireable: ensure the SVG isn&#39;t rendered&#xA;// outside of the viewbox bounds&#xA;svgRoot.clipCanvasToViewBox(canvas);&#xA;// The second parameter is not used&#xA;svgRoot.draw(canvas, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;SvgPicture&lt;/code&gt; helps to automate this logic, and it provides some convenience wrappers for getting assets from multiple sources and caching the resultant &lt;code&gt;Picture&lt;/code&gt;. &lt;em&gt;It does not render the data to an &lt;code&gt;Image&lt;/code&gt; at any point&lt;/em&gt;; you certainly can do that in Flutter, but you then lose some of the benefit of having a vector format to begin with.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dnfield/flutter_svg/master/example/lib/main.dart&#34;&gt;main.dart&lt;/a&gt; for a complete sample.&lt;/p&gt; &#xA;&lt;h2&gt;Check SVG compatibility&lt;/h2&gt; &#xA;&lt;p&gt;As not all SVG features are supported by this library (see below), sometimes we have to dynamically check if an SVG contains any unsupported features resulting in broken images. You might also want to throw errors in tests, but only warn about them at runtime. This can be done by using the snippet below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final SvgParser parser = SvgParser();&#xA;try {&#xA;  parser.parse(svgString, warningsAsErrors: true);&#xA;  print(&#39;SVG is supported&#39;);&#xA;} catch (e) {&#xA;  print(&#39;SVG contains unsupported features&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The library currently only detects unsupported elements (like the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;-tag), but not unsupported attributes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Your designer creates a vector asset that you want to include without converting to 5 different raster format resolutions.&lt;/li&gt; &#xA; &lt;li&gt;Your vector drawing is meant to be static and non (or maybe minimally) interactive.&lt;/li&gt; &#xA; &lt;li&gt;You want to load SVGs dynamically from network sources at runtime.&lt;/li&gt; &#xA; &lt;li&gt;You want to paint SVG data and render it to an image.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Out of scope/non-goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SMIL animations. That just seems crazy. I think it&#39;ll be possible to animate the SVG but probably in a more Flutter driven way.&lt;/li&gt; &#xA; &lt;li&gt;Interactivity/events in SVG.&lt;/li&gt; &#xA; &lt;li&gt;Any CSS support - preprocess your SVGs (perhaps with &lt;a href=&#34;https://github.com/RazrFalcon/resvg/tree/master/usvg&#34;&gt;usvg&lt;/a&gt; or &lt;a href=&#34;https://github.com/scour-project/scour&#34;&gt;scour&lt;/a&gt; to get rid of all CSS?).&lt;/li&gt; &#xA; &lt;li&gt;Scripting in SVGs&lt;/li&gt; &#xA; &lt;li&gt;Foreign elements&lt;/li&gt; &#xA; &lt;li&gt;Rendering properties/hints&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recommended Adobe Illustrator SVG Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Styling: choose Presentation Attributes instead of Inline CSS because CSS is not fully supported.&lt;/li&gt; &#xA; &lt;li&gt;In Images: choose Embded not Linked to other file to get a single svg with no dependency to other files.&lt;/li&gt; &#xA; &lt;li&gt;In Objects IDs: choose layer names to add every layer name to svg tags or you can use minimal,it is optional. &lt;img src=&#34;https://user-images.githubusercontent.com/2842459/62599914-91de9c00-b8fe-11e9-8fb7-4af57d5100f7.png&#34; alt=&#34;Export configuration&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SVG sample attribution&lt;/h2&gt; &#xA;&lt;p&gt;SVGs in &lt;code&gt;/assets/w3samples&lt;/code&gt; pulled from &lt;a href=&#34;https://dev.w3.org/SVG/tools/svgweb/samples/svg-files/&#34;&gt;W3 sample files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SVGs in &lt;code&gt;/assets/deborah_ufw&lt;/code&gt; provided by @deborah-ufw&lt;/p&gt; &#xA;&lt;p&gt;SVGs in &lt;code&gt;/assets/simple&lt;/code&gt; are pulled from trivial examples or generated to test basic functionality - some of them come directly from the SVG 1.1 spec. Some have also come or been adapted from issues raised in this repository.&lt;/p&gt; &#xA;&lt;p&gt;SVGs in &lt;code&gt;/assets/wikimedia&lt;/code&gt; are pulled from &lt;a href=&#34;https://commons.wikimedia.org/wiki/Main_Page&#34;&gt;Wikimedia Commons&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Android Drawables in &lt;code&gt;/assets/android_vd&lt;/code&gt; are pulled from Android Documentation and examples.&lt;/p&gt; &#xA;&lt;p&gt;The Flutter Logo created based on the Flutter Logo Widget © Google.&lt;/p&gt; &#xA;&lt;p&gt;The Dart logo is from &lt;a href=&#34;https://github.com/dart-lang/site-shared/raw/master/src/_assets/images/dart/logo%2Btext/horizontal/original.svg&#34;&gt;dartlang.org&lt;/a&gt; © Google&lt;/p&gt; &#xA;&lt;p&gt;SVGs in &lt;code&gt;/assets/noto-emoji&lt;/code&gt; are from &lt;a href=&#34;https://github.com/googlei18n/noto-emoji&#34;&gt;Google i18n noto-emoji&lt;/a&gt;, licensed under the Apache license.&lt;/p&gt; &#xA;&lt;p&gt;Please submit SVGs that can&#39;t render properly (e.g. that don&#39;t render here the way they do in chrome), as long as they&#39;re not using anything &#34;probably out of scope&#34; (above).&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rive.app/&#34;&gt;Rive&lt;/a&gt; supports importing SVGs and animating vector graphics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluttershapemaker.com&#34;&gt;FlutterShapeMaker&lt;/a&gt; supports converting SVGs to &lt;a href=&#34;https://api.flutter.dev/flutter/widgets/CustomPaint-class.html&#34;&gt;CustomPaint&lt;/a&gt; widgets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/jovial_svg&#34;&gt;Jovial SVG&lt;/a&gt; supports a slightly different feature set and a fast binary format.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>odroe/prisma-dart</title>
    <updated>2022-09-08T01:36:58Z</updated>
    <id>tag:github.com,2022-09-08:/odroe/prisma-dart</id>
    <link href="https://github.com/odroe/prisma-dart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;◭ Next-generation ORM for Dart Navtive &amp; Flutter | PostgreSQL, MySQL, MariaDB, SQL Server, SQLite, MongoDB and CockroachDB&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Next-generation ORM for Dart Native &amp;amp; Flutter | PostgreSQL, MySQL, MariaDB, SQL Server, SQLite, MongoDB and CockroachDB.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/orm&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/orm?label=latest&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/odroe/prisma-dart/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/odroe/prisma-dart&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;Prisma is a &lt;strong&gt;next-generation ORM&lt;/strong&gt; that consists of these tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prisma CLI&lt;/strong&gt; - A command line tool that allows you to create and manage your Prisma projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prisma Dart Runtime&lt;/strong&gt; - A Dart package, that allows you to use the ORM in your Dart code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prisma Query Engine&lt;/strong&gt; - Prisma query engines wrapper: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Binary Engine&lt;/strong&gt; - Only for Dart Native.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Dynamic Library Engine&lt;/strong&gt; - Supported for Dart Native and Flutter Native. &lt;code&gt;❌ Waiting&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Prisma Data Proxy Engint&lt;/strong&gt; - Supported all platforms. &lt;code&gt;❌ Waiting&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;: Dart SDK &lt;code&gt;&amp;gt;=2.17.6 &amp;lt;3.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Create Dart project and setup Prisma&lt;/h3&gt; &#xA;&lt;p&gt;As a first step, create a simple dart console project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dart create hello&#xA;cd hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add &lt;code&gt;orm&lt;/code&gt; package to your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dart pub add orm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, initialize ORM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dart run orm init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Model your data in the Prisma schema&lt;/h3&gt; &#xA;&lt;p&gt;The Prisma schema provides an intuitive way to model data. Add the following models to your schema.prisma file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prisma&#34;&gt;model User {&#xA;  id    Int     @id @default(autoincrement())&#xA;  email String  @unique&#xA;  name  String?&#xA;  posts Post[]&#xA;}&#xA;&#xA;model Post {&#xA;  id        Int     @id @default(autoincrement())&#xA;  title     String&#xA;  content   String?&#xA;  published Boolean @default(false)&#xA;  author    User    @relation(fields: [authorId], references: [id])&#xA;  authorId  Int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Models in the Prisma schema have two main purposes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Represent the tables in the underlying database&lt;/li&gt; &#xA; &lt;li&gt;Serve as foundation for the generated Prisma Client API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Generate the Prisma Client API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dart run orm generate&#xA;dart run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model deserialize (Why run &lt;code&gt;build_runner build&lt;/code&gt;?)&lt;/h2&gt; &#xA;&lt;p&gt;Deserialization of data models is currently done using &lt;code&gt;json_annotation&lt;/code&gt; and &lt;code&gt;json_serializable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; There are currently no plans to remove &lt;code&gt;json_annotation&lt;/code&gt;, because &lt;code&gt;json_annotation&lt;/code&gt; works very well and we currently do not have the ability to do the development work of deserialization ourselves.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Whenever you run the &lt;code&gt;orm generate&lt;/code&gt; command, you must run &lt;code&gt;build_runner build&lt;/code&gt; for the Prisma client to work properly. For more information see 👉 &lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Prisma schema&lt;/h2&gt; &#xA;&lt;p&gt;Every project that uses a tool from the Prisma toolkit starts with a &lt;a href=&#34;https://www.prisma.io/docs/concepts/components/prisma-schema&#34;&gt;Prisma schema file&lt;/a&gt;. The Prisma schema allows developers to define their application models in an intuitive data modeling language. It also contains the connection to a database and defines a generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prisma&#34;&gt;// Data source&#xA;datasource db {&#xA;  provider = &#34;postgresql&#34;&#xA;  url      = env(&#34;DATABASE_URL&#34;)&#xA;}&#xA;&#xA;// Generator&#xA;generator client {&#xA;  provider = &#34;prisma-client-dart&#34;&#xA;}&#xA;&#xA;// Data model&#xA;model Post {&#xA;  id        Int     @id @default(autoincrement())&#xA;  title     String&#xA;  content   String?&#xA;  published Boolean @default(false)&#xA;  author    User?   @relation(fields:  [authorId], references: [id])&#xA;  authorId  Int?&#xA;}&#xA;&#xA;model User {&#xA;  id    Int     @id @default(autoincrement())&#xA;  email String  @unique&#xA;  name  String?&#xA;  posts Post[]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this schema, you configure three things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data source&lt;/strong&gt; - Specifies your database connection (via an environment variable)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generator&lt;/strong&gt; - Indicates that you want to generate Prisma Client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data model&lt;/strong&gt; - Defines your application models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Accessing your database with Prisma Client&lt;/h2&gt; &#xA;&lt;h3&gt;Generating Prisma Client&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to generate Prisma Client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dart run orm generate&#xA;dart run build_runner build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Prisma Client to send queries to your database&lt;/h3&gt; &#xA;&lt;p&gt;Once the Prisma Client is generated, you can import it in your code and send queries to your database. This is what the setup code looks like.&lt;/p&gt; &#xA;&lt;p&gt;Import and instantiate Prisma Client&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;prisma_client.dart&#39;;&#xA;&#xA;final PrismaClient prisma = PrismaClient();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can start sending queries via the generated Prisma Client API, here are few sample queries. Note that all Prisma Client queries return plain old &lt;code&gt;Map&amp;lt;String, dynamic&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Retrieve all User records from the database&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Run inside `async` function&#xA;final allUsers = await prisma.user.findMany();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Filter all Post records that contain &#34;odore&#34;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final filteredPosts = await prisma.post.findMany(&#xA;  where: PostFindManyWhereInput(&#xA;    OR: [&#xA;      PostFindManyWhereInput(&#xA;        title: StringFilter(equals: &#34;odore&#34;),&#xA;      ),&#xA;      PostFindManyWhereInput(&#xA;        content: StringFilter(equals: &#34;odore&#34;),&#xA;      ),&#xA;    ],&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create a new User and a new Post record in the same query&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final user = await prisma.user.create(&#xA;  data: PrismaUnion.zero(&#xA;    UserCreateInput(&#xA;      name: &#39;Odroe&#39;,&#xA;      posts: PostCreateNestedManyWithoutAuthorInput(&#xA;        create: [&#xA;          PostCreateWithoutAuthorInput(&#xA;            title: &#39;Hello World&#39;,&#xA;            content: &#39;This is my first post&#39;,&#xA;            published: true,&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    ),&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;p&gt;Q: Why does the Prisma query engine process still exist in the program process after I close it?&lt;/p&gt; &#xA;&lt;p&gt;A: Prisma engine startup is automatic, but shutdown is not, you need to call &lt;code&gt;$disconnect&lt;/code&gt; at the end of your program shutdown to stop the engine process.&lt;/p&gt; &#xA;&lt;p&gt;Q: Why do I get an error when I run a transaction?&lt;/p&gt; &#xA;&lt;p&gt;A: Because the official version of Prisma is still in preview for interactive transactions, you need to add &lt;code&gt;previewFeatures = [&#34;interactiveTransactions&#34;]&lt;/code&gt; to the generator of &lt;code&gt;schema.prisma&lt;/code&gt;, the files created by &lt;code&gt;orm init&lt;/code&gt; have been added by default.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MyLittleSuite/pine</title>
    <updated>2022-09-08T01:36:58Z</updated>
    <id>tag:github.com,2022-09-08:/MyLittleSuite/pine</id>
    <link href="https://github.com/MyLittleSuite/pine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight architecture helper for your Flutter project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pine&lt;/h1&gt; &#xA;&lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/MyLittleSuite/pine/master/assets/pine_logo.png&#34; width=&#34;350&#34; alt=&#34;Pine logo&#34; border=&#34;0&#34;&gt; &#xA;&lt;p&gt;A lightweight architecture helper for your Flutter projects&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/pine&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/pine.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/MyLittleSuite/pine/workflows/Dart%20CI/badge.svg?sanitize=true&#34; alt=&#34;Dart CI&#34;&gt; &lt;a href=&#34;https://github.com/MyLittleSuite/pine&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/MyLittleSuite/pine.svg?style=flat&amp;amp;logo=github&amp;amp;colorB=deeppink&amp;amp;label=stars&#34; alt=&#34;Star on GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-purple.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to support this project,&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/angeloavv&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Pine relies on the following dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/provider&#34;&gt;Provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_bloc&#34;&gt;Flutter BLoC&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this tool, you will easily define the architecture of your Flutter application using Provider to inject elements in the widget tree and BLoC as a state manager.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;This package is intended to support development of Flutter projects. In general, put it under &lt;a href=&#34;https://dart.dev/tools/pub/dependencies&#34;&gt;dependencies&lt;/a&gt;, in your &lt;a href=&#34;https://dart.dev/tools/pub/pubspec&#34;&gt;pubspec.yaml&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dev_dependencies:&#xA;  pine: ^1.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install packages from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply add it through the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;flutter pub add pine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it Works&lt;/h2&gt; &#xA;&lt;h4&gt;The architecture&lt;/h4&gt; &#xA;&lt;p&gt;Elements are injected from top to bottom.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first elements added in the widget tree are mappers, particularly useful to convert data coming from data layers to something that should be used in the presentation layer.&lt;/li&gt; &#xA; &lt;li&gt;The second elements are providers: here you can inject services that manipulate data or access to it like REST clients or DAOs interfaces.&lt;/li&gt; &#xA; &lt;li&gt;The third layer is used to inject the repositories that access to the data layer using an abstraction layer.&lt;/li&gt; &#xA; &lt;li&gt;The last layer is used to inject the logic: Pine relies on BLoC as a state manager, that&#39;s why we&#39;ll inject global scoped BLoCs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Each element might rely on the top level ones and are generally accessed from the bottom level ones: for instance a repository may need to access to a REST client service to gather data, save it into a database, and the return it to a BLoC. To access top-level items, you can use the read and watch functions exposed by Provider.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MyLittleSuite/pine/master/assets/architecture.png&#34; alt=&#34;Pine logo&#34; border=&#34;0&#34;&gt; &#xA;&lt;h4&gt;The interactions&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MyLittleSuite/pine/master/assets/interaction.png&#34; alt=&#34;Pine logo&#34; border=&#34;0&#34;&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A pine architecture can be achieved by using the DependencyInjectorHelper widget, which helps you to inject different types of elements into the widget tree. If you are working on a simple project, you should use the DependencyInjectorHelper straight into your main app widget.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class App extends StatelessWidget {&#xA;  const App({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) =&amp;gt; DependencyInjectorHelper(&#xA;    blocs: [&#xA;      BlocProvider&amp;lt;NewsBloc&amp;gt;(&#xA;        create: (context) =&amp;gt; NewsBloc(&#xA;          newsRepository: context.read(),&#xA;        )..fetchNews(),&#xA;      ),&#xA;    ],&#xA;    mappers: [&#xA;      Provider&amp;lt;DTOMapper&amp;lt;ArticleDTO, Article&amp;gt;&amp;gt;(&#xA;        create: (_) =&amp;gt; ArticleMapper(),&#xA;      ),&#xA;    ],&#xA;    providers: [&#xA;      Provider&amp;lt;Dio&amp;gt;(&#xA;        create: (_) =&amp;gt; Dio(),&#xA;      ),&#xA;      Provider&amp;lt;NewsService&amp;gt;(&#xA;        create: (context) =&amp;gt; NewsService(&#xA;          context.read(),&#xA;          baseUrl: &#39;https://newsapi.org/v2/&#39;,&#xA;        ),&#xA;      ),&#xA;    ],&#xA;    repositories: [&#xA;      RepositoryProvider&amp;lt;NewsRepository&amp;gt;(&#xA;        create: (context) =&amp;gt; NewsRepositoryImpl(&#xA;          newsService: context.read(),&#xA;          mapper: context.read(),&#xA;        ),&#xA;      ),&#xA;    ],&#xA;    child: MaterialApp(&#xA;      debugShowCheckedModeBanner: false,&#xA;      title: &#39;News App&#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;        visualDensity: VisualDensity.adaptivePlatformDensity,&#xA;      ),&#xA;      home: const HomePage(),&#xA;    ),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As the project grows, it&#39;s better to create a new widget that wraps all of these items in different files. We can name this widget DependencyInjector. dependency_injector.dart:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&#xA;part &#39;blocs.dart&#39;;&#xA;part &#39;mappers.dart&#39;;&#xA;part &#39;providers.dart&#39;;&#xA;part &#39;repositories.dart&#39;;&#xA;&#xA;class DependencyInjector extends StatelessWidget {&#xA;  final Widget child;&#xA;&#xA;  const DependencyInjector({&#xA;    Key? key,&#xA;    required this.child,&#xA;  }) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) =&amp;gt; DependencyInjectorHelper(&#xA;    blocs: _blocs,&#xA;    providers: _providers,&#xA;    mappers: _mappers,&#xA;    repositories: _repositories,&#xA;    child: child,&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this widget, we need to define all the dependencies that are required in our project. I prefer splitting these elements into different files according to their type. In our example, we will create four different files because we inject blocs, mappers, providers, and repositories.&lt;/p&gt; &#xA;&lt;p&gt;blocs.dart&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;part of &#39;dependency_injector.dart&#39;;&#xA;&#xA;final List&amp;lt;BlocProvider&amp;gt; _blocs = [&#xA;  BlocProvider&amp;lt;NewsBloc&amp;gt;(&#xA;    create: (context) =&amp;gt; NewsBloc(&#xA;      newsRepository: context.read(),&#xA;    )..fetchNews(),&#xA;  ),&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;mappers.dart&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;part of &#39;dependency_injector.dart&#39;;&#xA;&#xA;final List&amp;lt;SingleChildWidget&amp;gt; _mappers = [&#xA;  Provider&amp;lt;DTOMapper&amp;lt;ArticleDTO, Article&amp;gt;&amp;gt;(&#xA;    create: (_) =&amp;gt; ArticleMapper(),&#xA;  ),&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;providers.dart&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;part of &#39;dependency_injector.dart&#39;;&#xA;&#xA;final List&amp;lt;SingleChildWidget&amp;gt; _providers = [&#xA;  Provider&amp;lt;Dio&amp;gt;(&#xA;    create: (_) =&amp;gt; Dio(),&#xA;  ),&#xA;  Provider&amp;lt;NewsService&amp;gt;(&#xA;    create: (context) =&amp;gt; NewsService(&#xA;      context.read(),&#xA;      baseUrl: &#39;https://newsapi.org/v2/&#39;,&#xA;    ),&#xA;  ),&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;repositories.dart&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;part of &#39;dependency_injector.dart&#39;;&#xA;&#xA;final List&amp;lt;RepositoryProvider&amp;gt; _repositories = [&#xA;  RepositoryProvider&amp;lt;NewsRepository&amp;gt;(&#xA;    create: (context) =&amp;gt; NewsRepositoryImpl(&#xA;      newsService: context.read(),&#xA;      mapper: context.read(),&#xA;    ),&#xA;  ),&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once we finished defining the global dependencies to inject into the widget tree, we need to wrap our MaterialApp/CupertinoApp with the DependencyInjector widget as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class App extends StatelessWidget {&#xA;  const App({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) =&amp;gt; DependencyInjector(&#xA;    child: MaterialApp(&#xA;      debugShowCheckedModeBanner: false,&#xA;      title: &#39;News App&#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;        visualDensity: VisualDensity.adaptivePlatformDensity,&#xA;      ),&#xA;      home: const HomePage(),&#xA;    ),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;With the DependencyInjectorHelper it&#39;s easy to inject dependencies into the widget tree. Simply wrap the widget you need to test with the DependencyInjectorHelper class and inject the dependencies you need.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we will test the HomePage widget which relies on NewsBloc. Before pumping the MaterialApp containing the HomePage, we will wrap it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;    await tester.pumpWidget(&#xA;      DependencyInjectorHelper(&#xA;        blocs: [&#xA;          BlocProvider&amp;lt;NewsBloc&amp;gt;.value(value: newsBloc),&#xA;        ],&#xA;        child: const MaterialApp(&#xA;          home: HomePage(),&#xA;        ),&#xA;      ),&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, since we are testing the HomePage, we are injecting a mocked newsBloc.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Pine is available under the MIT license. See the LICENSE file for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flaticon.com/free-icons/pine&#34; title=&#34;pine icons&#34;&gt;Pine icons created by Freepik - Flaticon&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>