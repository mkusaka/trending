<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-10T01:27:47Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mobile-Artificial-Intelligence/maid</title>
    <updated>2024-02-10T01:27:47Z</updated>
    <id>tag:github.com,2024-02-10:/Mobile-Artificial-Intelligence/maid</id>
    <link href="https://github.com/Mobile-Artificial-Intelligence/maid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Maid is a cross-platform Flutter app for interfacing with GGUF / llama.cpp models locally, and with Ollama and OpenAI models remotely.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img alt=&#34;logo&#34; height=&#34;200px&#34; src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/logo.png?raw=true&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Maid - Mobile Artificial Intelligence Distribution&lt;/h1&gt; &#xA;&lt;p&gt;Maid is a cross-platform Flutter app for interfacing with GGUF / llama.cpp models locally, and with Ollama models remotely. The goal of Maid is to create a platform for AI that can be used freely on any device.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo1.jpg?raw=true&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo2.jpg?raw=true&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo3.jpg?raw=true&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo4.jpg?raw=true&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo5.jpg?raw=true&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo6.jpg?raw=true&#34; width=&#34;200&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo8.png?raw=true&#34; width=&#34;600&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo9.png?raw=true&#34; width=&#34;600&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo10.png?raw=true&#34; width=&#34;600&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/raw/main/.images/demo11.png?raw=true&#34; width=&#34;600&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Works on multiple devices :&lt;/h2&gt; &#xA;&lt;p&gt;Windows, Linux, Android. &lt;a href=&#34;https://github.com/Mobile-Artificial-Intelligence/maid/releases&#34;&gt;Releases page.&lt;/a&gt; MacOS and IOS Releases not available at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Supported API&#39;s&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Llama.cpp (Local)&lt;/li&gt; &#xA; &lt;li&gt;Ollama&lt;/li&gt; &#xA; &lt;li&gt;OpenAI&lt;/li&gt; &#xA; &lt;li&gt;MistralAI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help Wanted&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write code comments&lt;/li&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA; &lt;li&gt;Testing and Building on MacOS and IOS&lt;/li&gt; &#xA; &lt;li&gt;Spreading the word&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks and Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidmigloz/langchain_dart&#34;&gt;davidmigloz/langchain_dart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/netdur/llama_cpp_dart&#34;&gt;netdur/llama_cpp_dart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Android version tested on a Oneplus 10 Pro 11gb phone. Also tested on Debian Linux, Windows 11. Tested with calypso 3b, orcamini 3b, llama 2 7B-Chat and llama 7B.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the llama.cpp models are owned and officially distributed by Meta. This app only serves as an environment for the model&#39;s capabilities and functionality. The developers of this app do not provide the LLaMA models and are not responsible for any issues related to their usage.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluttercommunity/flutter_workmanager</title>
    <updated>2024-02-10T01:27:47Z</updated>
    <id>tag:github.com,2024-02-10:/fluttercommunity/flutter_workmanager</id>
    <link href="https://github.com/fluttercommunity/flutter_workmanager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter plugin which allows you to execute code in the background on Android and iOS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Workmanager&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/workmanager&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/workmanager.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/vrtdev/flutter_workmanager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/cirrus/github/vrtdev/flutter_workmanager/master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Flutter WorkManager is a wrapper around &lt;a href=&#34;https://developer.android.com/topic/libraries/architecture/workmanager&#34;&gt;Android&#39;s WorkManager&lt;/a&gt;, &lt;a href=&#34;https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623125-application&#34;&gt;iOS&#39; performFetchWithCompletionHandler&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/backgroundtasks/bgapprefreshtask&#34;&gt;iOS BGAppRefreshTask&lt;/a&gt;, effectively enabling headless execution of Dart code in the background.&lt;/p&gt; &#xA;&lt;p&gt;For iOS users, please watch this video on a general introduction to background processing: &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2020/10063&#34;&gt;https://developer.apple.com/videos/play/wwdc2020/10063&lt;/a&gt;. All of the constraints discussed in the video also apply to this plugin.&lt;/p&gt; &#xA;&lt;p&gt;This is especially useful to run periodic tasks, such as fetching remote data on a regular basis.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This plugin was featured in this &lt;a href=&#34;https://medium.com/vrt-digital-studio/flutter-workmanager-81e0cfbd6f6e&#34;&gt;Medium blogpost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Platform Setup&lt;/h1&gt; &#xA;&lt;p&gt;In order for background work to be scheduled correctly you should follow the Android and iOS setup first.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fluttercommunity/flutter_workmanager/raw/master/ANDROID_SETUP.md&#34;&gt;Android Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fluttercommunity/flutter_workmanager/raw/master/IOS_SETUP.md&#34;&gt;iOS Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use the package?&lt;/h1&gt; &#xA;&lt;p&gt;See sample folder for a complete working example.&lt;br&gt; Before registering any task, the WorkManager plugin must be initialized.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@pragma(&#39;vm:entry-point&#39;) // Mandatory if the App is obfuscated or using Flutter 3.1+&#xA;void callbackDispatcher() {&#xA;  Workmanager().executeTask((task, inputData) {&#xA;    print(&#34;Native called background task: $task&#34;); //simpleTask will be emitted here.&#xA;    return Future.value(true);&#xA;  });&#xA;}&#xA;&#xA;void main() {&#xA;  Workmanager().initialize(&#xA;    callbackDispatcher, // The top level function, aka callbackDispatcher&#xA;    isInDebugMode: true // If enabled it will post a notification whenever the task is running. Handy for debugging tasks&#xA;  );&#xA;  Workmanager().registerOneOffTask(&#34;task-identifier&#34;, &#34;simpleTask&#34;);&#xA;  runApp(MyApp());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;callbackDispatcher&lt;/code&gt; needs to be either a static function or a top level function to be accessible as a Flutter entry point.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The workmanager runs on a separate isolate from the main flutter isolate. Ensure to initialize all dependencies inside the &lt;code&gt;Workmanager().executeTask&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Debugging tips&lt;/h5&gt; &#xA;&lt;p&gt;Wrap the code inside your &lt;code&gt;Workmanager().executeTask&lt;/code&gt; in a &lt;code&gt;try and catch&lt;/code&gt; in order to catch any exceptions thrown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@pragma(&#39;vm:entry-point&#39;)&#xA;void callbackDispatcher() {&#xA;  Workmanager().executeTask((task, inputData) {&#xA;&#xA;    int? totalExecutions;&#xA;    final _sharedPreference = await SharedPreferences.getInstance(); //Initialize dependency&#xA;&#xA;    try { //add code execution&#xA;      totalExecutions = _sharedPreference.getInt(&#34;totalExecutions&#34;);&#xA;      _sharedPreference.setInt(&#34;totalExecutions&#34;, totalExecutions == null ? 1 : totalExecutions+1);&#xA;    } catch(err) {&#xA;      Logger().e(err.toString()); // Logger flutter package, prints error on the debug console&#xA;      throw Exception(err);&#xA;    }&#xA;&#xA;    return Future.value(true);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Android tasks are identified using their &lt;code&gt;taskName&lt;/code&gt;. iOS tasks are identitied using their &lt;code&gt;taskIdentifier&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, there is an exception for iOS background fetch: &lt;code&gt;Workmanager.iOSBackgroundTask&lt;/code&gt;, a constant for iOS background fetch task.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Work Result&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;Workmanager().executeTask(...&lt;/code&gt; block supports 3 possible outcomes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Future.value(true)&lt;/code&gt;: The task is successful.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Future.value(false)&lt;/code&gt;: The task did not complete successfully and needs to be retried. On Android, the retry is done automatically. On iOS (when using BGTaskScheduler), the retry needs to be scheduled manually.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Future.error(...)&lt;/code&gt;: The task failed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;On Android, the &lt;code&gt;BackoffPolicy&lt;/code&gt; will configure how &lt;code&gt;WorkManager&lt;/code&gt; is going to retry the task.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the example app for a successful, retrying and a failed task.&lt;/p&gt; &#xA;&lt;h1&gt;iOS specific setup and note&lt;/h1&gt; &#xA;&lt;p&gt;iOS supports &lt;strong&gt;One off tasks&lt;/strong&gt; with a few basic constraints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().registerOneOffTask(&#xA;  &#34;task-identifier&#34;,&#xA;  simpleTaskKey, // Ignored on iOS&#xA;  initialDelay: Duration(minutes: 30),&#xA;  constraints: Constraints(&#xA;    // connected or metered mark the task as requiring internet&#xA;    networkType: NetworkType.connected,&#xA;    // require external power&#xA;    requiresCharging: true,&#xA;  ),&#xA;  inputData: ... // fully supported&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information see the &lt;a href=&#34;https://developer.apple.com/documentation/backgroundtasks&#34;&gt;BGTaskScheduler documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Customisation (Android)&lt;/h1&gt; &#xA;&lt;p&gt;Not every &lt;code&gt;Android WorkManager&lt;/code&gt; feature is ported.&lt;/p&gt; &#xA;&lt;p&gt;Two kinds of background tasks can be registered :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;One off task&lt;/strong&gt; : runs only once&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Periodic tasks&lt;/strong&gt; : runs indefinitely on a regular basis&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// One off task registration&#xA;Workmanager().registerOneOffTask(&#xA;    &#34;oneoff-task-identifier&#34;, &#xA;    &#34;simpleTask&#34;&#xA;);&#xA;&#xA;// Periodic task registration&#xA;Workmanager().registerPeriodicTask(&#xA;    &#34;periodic-task-identifier&#34;, &#xA;    &#34;simplePeriodicTask&#34;, &#xA;    // When no frequency is provided the default 15 minutes is set.&#xA;    // Minimum frequency is 15 min. Android will automatically change your frequency to 15 min if you have configured a lower frequency.&#xA;    frequency: Duration(hours: 1),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each task must have an &lt;strong&gt;unique name&lt;/strong&gt;;&lt;br&gt; This allows cancellation of a started task.&lt;br&gt; The second parameter is the &lt;code&gt;String&lt;/code&gt; that will be sent to your &lt;code&gt;callbackDispatcher&lt;/code&gt; function, indicating the task&#39;s &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tagging&lt;/h2&gt; &#xA;&lt;p&gt;You can set the optional &lt;code&gt;tag&lt;/code&gt; property.&lt;br&gt; Handy for cancellation by &lt;code&gt;tag&lt;/code&gt;.&lt;br&gt; This is different from the unique name in that you can group multiple tasks under one tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().registerOneOffTask(&#34;1&#34;, &#34;simpleTask&#34;, tag: &#34;tag&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Existing Work Policy&lt;/h2&gt; &#xA;&lt;p&gt;Indicates the desired behaviour when the same task is scheduled more than once.&lt;br&gt; The default is &lt;code&gt;KEEP&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().registerOneOffTask(&#34;1&#34;, &#34;simpleTask&#34;, existingWorkPolicy: ExistingWorkPolicy.append);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Initial Delay&lt;/h2&gt; &#xA;&lt;p&gt;Indicates how along a task should waitbefore its first run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().registerOneOffTask(&#34;1&#34;, &#34;simpleTask&#34;, initialDelay: Duration(seconds: 10));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Constraints&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Constraints are mapped at best effort to each platform. Android&#39;s WorkManager supports most of the specific constraints, whereas iOS tasks are limited.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NetworkType Constrains the type of network required for your work to run. For example, Connected. The &lt;code&gt;NetworkType&lt;/code&gt; lists various network conditions. &lt;code&gt;.connected&lt;/code&gt; &amp;amp; &lt;code&gt;.metered&lt;/code&gt; will be mapped to &lt;a href=&#34;https://developer.apple.com/documentation/backgroundtasks/bgprocessingtaskrequest/3142242-requiresnetworkconnectivity&#34;&gt;&lt;code&gt;requiresNetworkConnectivity&lt;/code&gt;&lt;/a&gt; on iOS.&lt;/li&gt; &#xA; &lt;li&gt;RequiresBatteryNotLow (Android only) When set to true, your work will not run if the device is in low battery mode. &lt;strong&gt;Enabling the battery saving mode on the android device prevents the job from running&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;RequiresCharging When set to true, your work will only run when the device is charging.&lt;/li&gt; &#xA; &lt;li&gt;RequiresDeviceIdle (Android only) When set to true, this requires the user’s device to be idle before the work will run. This can be useful for running batched operations that might otherwise have a - negative performance impact on other apps running actively on the user’s device.&lt;/li&gt; &#xA; &lt;li&gt;RequiresStorageNotLow (Android only) When set to true, your work will not run if the user’s storage space on the device is too low.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().registerOneOffTask(&#xA;    &#34;1&#34;,&#xA;    &#34;simpleTask&#34;,&#xA;    constraints: Constraints(&#xA;        networkType: NetworkType.connected,&#xA;        requiresBatteryNotLow: true,&#xA;        requiresCharging: true,&#xA;        requiresDeviceIdle: true,&#xA;        requiresStorageNotLow: true&#xA;    )&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;InputData&lt;/h3&gt; &#xA;&lt;p&gt;Add some input data for your task. Valid value types are: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; and their &lt;code&gt;list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; Workmanager().registerOneOffTask(&#xA;    &#34;1&#34;,&#xA;    &#34;simpleTask&#34;,&#xA;    inputData: {&#xA;    &#39;int&#39;: 1,&#xA;    &#39;bool&#39;: true,&#xA;    &#39;double&#39;: 1.0,&#xA;    &#39;string&#39;: &#39;string&#39;,&#xA;    &#39;array&#39;: [1, 2, 3],&#xA;    },&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;BackoffPolicy&lt;/h2&gt; &#xA;&lt;p&gt;Indicates the waiting strategy upon task failure.&lt;br&gt; The default is &lt;code&gt;BackoffPolicy.exponential&lt;/code&gt;.&lt;br&gt; You can also specify the delay.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().registerOneOffTask(&#34;1&#34;, &#34;simpleTask&#34;, backoffPolicy: BackoffPolicy.exponential, backoffPolicyDelay: Duration(seconds: 10));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;p&gt;A task can be cancelled in different ways :&lt;/p&gt; &#xA;&lt;h3&gt;By Tag&lt;/h3&gt; &#xA;&lt;p&gt;Cancels the task that was previously registered using this &lt;strong&gt;Tag&lt;/strong&gt;, if any.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().cancelByTag(&#34;tag&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;By Unique Name&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().cancelByUniqueName(&#34;&amp;lt;MyTask&amp;gt;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Workmanager().cancelAll();&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>