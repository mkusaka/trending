<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:39:36Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tunitowen/fancy_bottom_navigation</title>
    <updated>2022-07-13T01:39:36Z</updated>
    <id>tag:github.com,2022-07-13:/tunitowen/fancy_bottom_navigation</id>
    <link href="https://github.com/tunitowen/fancy_bottom_navigation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter plugin - FancyBottomNavigation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FancyBottomNavigation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tunitowen/fancy_bottom_navigation/raw/master/fancy_gif.gif&#34; alt=&#34;Fancy Gif&#34; title=&#34;Fancy Gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Add the plugin (pub coming soon):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  ...&#xA;  fancy_bottom_navigation: ^0.3.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;For now this is limited to more than 1 tab, and less than 5. So 2-4 tabs.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Adding the widget&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bottomNavigationBar: FancyBottomNavigation(&#xA;    tabs: [&#xA;        TabData(iconData: Icons.home, title: &#34;Home&#34;),&#xA;        TabData(iconData: Icons.search, title: &#34;Search&#34;),&#xA;        TabData(iconData: Icons.shopping_cart, title: &#34;Basket&#34;)&#xA;    ],&#xA;    onTabChangedListener: (position) {&#xA;        setState(() {&#xA;        currentPage = position;&#xA;        });&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TabData&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;iconData&lt;/strong&gt; -&amp;gt; Icon to be used for the tab&lt;br&gt; &lt;strong&gt;title&lt;/strong&gt; -&amp;gt; String to be used for the tab&lt;br&gt; &lt;strong&gt;onClick&lt;/strong&gt; -&amp;gt; Optional function to be used when the circle itself is clicked, on an active tab&lt;/p&gt; &#xA;&lt;h2&gt;Attributes&lt;/h2&gt; &#xA;&lt;h3&gt;required&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tabs&lt;/strong&gt; -&amp;gt; List of &lt;code&gt;TabData&lt;/code&gt; objects&lt;br&gt; &lt;strong&gt;onTabChangedListener&lt;/strong&gt; -&amp;gt; Function to handle a tap on a tab, receives &lt;code&gt;int position&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;optional&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;initialSelection&lt;/strong&gt; -&amp;gt; Defaults to 0&lt;br&gt; &lt;strong&gt;circleColor&lt;/strong&gt; -&amp;gt; Defaults to null, derives from &lt;code&gt;Theme&lt;/code&gt;&lt;br&gt; &lt;strong&gt;activeIconColor&lt;/strong&gt; -&amp;gt; Defaults to null, derives from &lt;code&gt;Theme&lt;/code&gt;&lt;br&gt; &lt;strong&gt;inactiveIconColor&lt;/strong&gt; -&amp;gt; Defaults to null, derives from &lt;code&gt;Theme&lt;/code&gt;&lt;br&gt; &lt;strong&gt;textColor&lt;/strong&gt; -&amp;gt; Defaults to null, derives from &lt;code&gt;Theme&lt;/code&gt;&lt;br&gt; &lt;strong&gt;barBackgroundColor&lt;/strong&gt; -&amp;gt; Defaults to null, derives from &lt;code&gt;Theme&lt;/code&gt;&lt;br&gt; &lt;strong&gt;key&lt;/strong&gt; -&amp;gt; Defaults to null&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Theming&lt;/h2&gt; &#xA;&lt;p&gt;The bar will attempt to use your current theme out of the box, however you may want to theme it. Here are the attributes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tunitowen/fancy_bottom_navigation/raw/master/fancy_theming.png&#34; alt=&#34;Fancy Theming&#34; title=&#34;Fancy Theming&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Programmatic Selection&lt;/h2&gt; &#xA;&lt;p&gt;To select a tab programmatically you will need to assign a GlobalKey to the widget. When you want to change tabs you will need to access the State using this key, and then call &lt;code&gt;setPage(position)&lt;/code&gt;.&lt;br&gt; See example project, main.dart, line 75 for an example.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;Using this package in a live app, let me know and I&#39;ll add you app here.&lt;/p&gt; &#xA;&lt;h2&gt;Inspiration&lt;/h2&gt; &#xA;&lt;p&gt;This package was inspired by a design on dribbble by Manoj Rajput:&lt;br&gt; &lt;a href=&#34;https://dribbble.com/shots/5419022-Tab&#34;&gt;https://dribbble.com/shots/5419022-Tab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome, please submit a PR :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rrousselGit/flutter_hooks</title>
    <updated>2022-07-13T01:39:36Z</updated>
    <id>tag:github.com,2022-07-13:/rrousselGit/flutter_hooks</id>
    <link href="https://github.com/rrousselGit/flutter_hooks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React hooks for Flutter. Hooks are a new kind of object that manages a Widget life-cycles. They are used to increase code sharing between widgets and as a complete replacement for StatefulWidget.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/flutter_hooks/raw/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/rrousselGit/flutter_hooks/raw/master/packages/flutter_hooks/resources/translations/pt_br/README.md&#34;&gt;PortuguÃªs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rrousselGit/flutter_hooks/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/rrousselGit/flutter_hooks/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/rrousselGit/flutter_hooks&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rrousselGit/flutter_hooks/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/flutter_hooks&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_hooks.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat-square&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Bbumvej&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/765557403865186374.svg?logo=discord&amp;amp;color=blue&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/flutter_hooks/master/packages/flutter_hooks/flutter-hook.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;Flutter Hooks&lt;/h1&gt; &#xA;&lt;p&gt;A Flutter implementation of React hooks: &lt;a href=&#34;https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889&#34;&gt;https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hooks are a new kind of object that manage the life-cycle of a &lt;code&gt;Widget&lt;/code&gt;. They exist for one reason: increase the code-sharing &lt;em&gt;between&lt;/em&gt; widgets by removing duplicates.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;StatefulWidget&lt;/code&gt; suffers from a big problem: it is very difficult to reuse the logic of say &lt;code&gt;initState&lt;/code&gt; or &lt;code&gt;dispose&lt;/code&gt;. An obvious example is &lt;code&gt;AnimationController&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example extends StatefulWidget {&#xA;  final Duration duration;&#xA;&#xA;  const Example({Key? key, required this.duration})&#xA;      : super(key: key);&#xA;&#xA;  @override&#xA;  _ExampleState createState() =&amp;gt; _ExampleState();&#xA;}&#xA;&#xA;class _ExampleState extends State&amp;lt;Example&amp;gt; with SingleTickerProviderStateMixin {&#xA;  AnimationController? _controller;&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    _controller = AnimationController(vsync: this, duration: widget.duration);&#xA;  }&#xA;&#xA;  @override&#xA;  void didUpdateWidget(Example oldWidget) {&#xA;    super.didUpdateWidget(oldWidget);&#xA;    if (widget.duration != oldWidget.duration) {&#xA;      _controller!.duration = widget.duration;&#xA;    }&#xA;  }&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    _controller!.dispose();&#xA;    super.dispose();&#xA;  }&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return Container();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All widgets that desire to use an &lt;code&gt;AnimationController&lt;/code&gt; will have to reimplement almost all of this logic from scratch, which is of course undesired.&lt;/p&gt; &#xA;&lt;p&gt;Dart mixins can partially solve this issue, but they suffer from other problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A given mixin can only be used once per class.&lt;/li&gt; &#xA; &lt;li&gt;Mixins and the class share the same object.&lt;br&gt; This means that if two mixins define a variable under the same name, the result may vary between compilation fails to unknown behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This library proposes a third solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Example extends HookWidget {&#xA;  const Example({Key? key, required this.duration})&#xA;      : super(key: key);&#xA;&#xA;  final Duration duration;&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    final controller = useAnimationController(duration: duration);&#xA;    return Container();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code is functionally equivalent to the previous example. It still disposes the &lt;code&gt;AnimationController&lt;/code&gt; and still updates its &lt;code&gt;duration&lt;/code&gt; when &lt;code&gt;Example.duration&lt;/code&gt; changes. But you&#39;re probably thinking:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Where did all the logic go?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That logic has been moved into &lt;code&gt;useAnimationController&lt;/code&gt;, a function included directly in this library (see &lt;a href=&#34;https://github.com/rrousselGit/flutter_hooks#existing-hooks&#34;&gt;Existing hooks&lt;/a&gt;) - It is what we call a &lt;em&gt;Hook&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Hooks are a new kind of object with some specificities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;They can only be used in the &lt;code&gt;build&lt;/code&gt; method of a widget that mix-in &lt;code&gt;Hooks&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The same hook can be reused arbitrarily many times. The following code defines two independent &lt;code&gt;AnimationController&lt;/code&gt;, and they are correctly preserved when the widget rebuild.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  final controller = useAnimationController();&#xA;  final controller2 = useAnimationController();&#xA;  return Container();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hooks are entirely independent of each other and from the widget.&lt;br&gt; This means that they can easily be extracted into a package and published on &lt;a href=&#34;https://pub.dartlang.org/&#34;&gt;pub&lt;/a&gt; for others to use.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Principle&lt;/h2&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;State&lt;/code&gt;, hooks are stored in the &lt;code&gt;Element&lt;/code&gt; of a &lt;code&gt;Widget&lt;/code&gt;. However, instead of having one &lt;code&gt;State&lt;/code&gt;, the &lt;code&gt;Element&lt;/code&gt; stores a &lt;code&gt;List&amp;lt;Hook&amp;gt;&lt;/code&gt;. Then in order to use a &lt;code&gt;Hook&lt;/code&gt;, one must call &lt;code&gt;Hook.use&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The hook returned by &lt;code&gt;use&lt;/code&gt; is based on the number of times it has been called. The first call returns the first hook; the second call returns the second hook, the third call returns the third hook and so on.&lt;/p&gt; &#xA;&lt;p&gt;If this idea is still unclear, a naive implementation of hooks could look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class HookElement extends Element {&#xA;  List&amp;lt;HookState&amp;gt; _hooks;&#xA;  int _hookIndex;&#xA;&#xA;  T use&amp;lt;T&amp;gt;(Hook&amp;lt;T&amp;gt; hook) =&amp;gt; _hooks[_hookIndex++].build(this);&#xA;&#xA;  @override&#xA;  performRebuild() {&#xA;    _hookIndex = 0;&#xA;    super.performRebuild();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more explanation of how hooks are implemented, here&#39;s a great article about how is was done in React: &lt;a href=&#34;https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e&#34;&gt;https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;Due to hooks being obtained from their index, some rules must be respected:&lt;/p&gt; &#xA;&lt;h3&gt;DO always prefix your hooks with &lt;code&gt;use&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  // starts with `use`, good name&#xA;  useMyHook();&#xA;  // doesn&#39;t start with `use`, could confuse people into thinking that this isn&#39;t a hook&#xA;  myHook();&#xA;  // ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DO call hooks unconditionally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  useMyHook();&#xA;  // ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DON&#39;T wrap &lt;code&gt;use&lt;/code&gt; into a condition&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget build(BuildContext context) {&#xA;  if (condition) {&#xA;    useMyHook();&#xA;  }&#xA;  // ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;About hot-reload&lt;/h3&gt; &#xA;&lt;p&gt;Since hooks are obtained from their index, one may think that hot-reloads while refactoring will break the application.&lt;/p&gt; &#xA;&lt;p&gt;But worry not, a &lt;code&gt;HookWidget&lt;/code&gt; overrides the default hot-reload behavior to work with hooks. Still, there are some situations in which the state of a Hook may be reset.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following list of hooks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;useA();&#xA;useB(0);&#xA;useC();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then consider that we edited the parameter of &lt;code&gt;HookB&lt;/code&gt; after performing a hot-reload:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;useA();&#xA;useB(42);&#xA;useC();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here everything works fine and all hooks maintain their state.&lt;/p&gt; &#xA;&lt;p&gt;Now consider that we removed &lt;code&gt;HookB&lt;/code&gt;. We now have:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;useA();&#xA;useC();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this situation, &lt;code&gt;HookA&lt;/code&gt; maintains its state but &lt;code&gt;HookC&lt;/code&gt; gets hard reset. This happens because, when a hot-reload is performed after refactoring, all hooks &lt;em&gt;after&lt;/em&gt; the first line impacted are disposed of. So, since &lt;code&gt;HookC&lt;/code&gt; was placed &lt;em&gt;after&lt;/em&gt; &lt;code&gt;HookB&lt;/code&gt;, it will be disposed.&lt;/p&gt; &#xA;&lt;h2&gt;How to create a hook&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to create a hook:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A function&lt;/p&gt; &lt;p&gt;Functions are by far the most common way to write hooks. Thanks to hooks being composable by nature, a function will be able to combine other hooks to create a more complex custom hook. By convention, these functions will be prefixed by &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The following code defines a custom hook that creates a variable and logs its value to the console whenever the value changes:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;ValueNotifier&amp;lt;T&amp;gt; useLoggedState&amp;lt;T&amp;gt;([T initialData]) {&#xA;  final result = useState&amp;lt;T&amp;gt;(initialData);&#xA;  useValueChanged(result.value, (_, __) {&#xA;    print(result.value);&#xA;  });&#xA;  return result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A class&lt;/p&gt; &lt;p&gt;When a hook becomes too complex, it is possible to convert it into a class that extends &lt;code&gt;Hook&lt;/code&gt; - which can then be used using &lt;code&gt;Hook.use&lt;/code&gt;.&lt;br&gt; As a class, the hook will look very similar to a &lt;code&gt;State&lt;/code&gt; class and have access to widget life-cycle and methods such as &lt;code&gt;initHook&lt;/code&gt;, &lt;code&gt;dispose&lt;/code&gt; and &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It is usually good practice to hide the class under a function as such:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Result useMyHook() {&#xA;  return use(const _TimeAlive());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following code defines a hook that prints the total time a &lt;code&gt;State&lt;/code&gt; has been alive on its dispose.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class _TimeAlive extends Hook&amp;lt;void&amp;gt; {&#xA;  const _TimeAlive();&#xA;&#xA;  @override&#xA;  _TimeAliveState createState() =&amp;gt; _TimeAliveState();&#xA;}&#xA;&#xA;class _TimeAliveState extends HookState&amp;lt;void, _TimeAlive&amp;gt; {&#xA;  DateTime start;&#xA;&#xA;  @override&#xA;  void initHook() {&#xA;    super.initHook();&#xA;    start = DateTime.now();&#xA;  }&#xA;&#xA;  @override&#xA;  void build(BuildContext context) {}&#xA;&#xA;  @override&#xA;  void dispose() {&#xA;    print(DateTime.now().difference(start));&#xA;    super.dispose();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Existing hooks&lt;/h2&gt; &#xA;&lt;p&gt;Flutter_Hooks already comes with a list of reusable hooks which are divided into different kinds:&lt;/p&gt; &#xA;&lt;h3&gt;Primitives&lt;/h3&gt; &#xA;&lt;p&gt;A set of low-level hooks that interact with the different life-cycles of a widget&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useEffect.html&#34;&gt;useEffect&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Useful for side-effects and optionally canceling them.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useState.html&#34;&gt;useState&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a variable and subscribes to it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useMemoized.html&#34;&gt;useMemoized&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Caches the instance of a complex object.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useRef.html&#34;&gt;useRef&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates an object that contains a single mutable property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useCallback.html&#34;&gt;useCallback&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Caches a function instance.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useContext.html&#34;&gt;useContext&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Obtains the &lt;code&gt;BuildContext&lt;/code&gt; of the building &lt;code&gt;HookWidget&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useValueChanged.html&#34;&gt;useValueChanged&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Watches a value and triggers a callback whenever its value changed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Object-binding&lt;/h3&gt; &#xA;&lt;p&gt;This category of hooks the manipulation of existing Flutter/Dart objects with hooks. They will take care of creating/updating/disposing an object.&lt;/p&gt; &#xA;&lt;h4&gt;dart:async related hooks:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useStream.html&#34;&gt;useStream&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subscribes to a &lt;code&gt;Stream&lt;/code&gt; and returns its current state as an &lt;code&gt;AsyncSnapshot&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useStreamController.html&#34;&gt;useStreamController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a &lt;code&gt;StreamController&lt;/code&gt; which will automatically be disposed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useFuture.html&#34;&gt;useFuture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subscribes to a &lt;code&gt;Future&lt;/code&gt; and returns its current state as an &lt;code&gt;AsyncSnapshot&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Animation related hooks:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useSingleTickerProvider.html&#34;&gt;useSingleTickerProvider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a single usage &lt;code&gt;TickerProvider&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useAnimationController.html&#34;&gt;useAnimationController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates an &lt;code&gt;AnimationController&lt;/code&gt; which will be automatically disposed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useAnimation.html&#34;&gt;useAnimation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subscribes to an &lt;code&gt;Animation&lt;/code&gt; and returns its value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Listenable related hooks:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useListenable.html&#34;&gt;useListenable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subscribes to a &lt;code&gt;Listenable&lt;/code&gt; and marks the widget as needing build whenever the listener is called.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useListenableSelector.html&#34;&gt;useListenableSelector&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Similar to &lt;code&gt;useListenable&lt;/code&gt;, but allows filtering UI rebuilds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useValueNotifier.html&#34;&gt;useValueNotifier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a &lt;code&gt;ValueNotifier&lt;/code&gt; which will be automatically disposed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useValueListenable.html&#34;&gt;useValueListenable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subscribes to a &lt;code&gt;ValueListenable&lt;/code&gt; and return its value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Misc hooks:&lt;/h4&gt; &#xA;&lt;p&gt;A series of hooks with no particular theme.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useReducer.html&#34;&gt;useReducer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An alternative to &lt;code&gt;useState&lt;/code&gt; for more complex states.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/usePrevious.html&#34;&gt;usePrevious&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the previous argument called to [usePrevious].&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dev/documentation/flutter_hooks/latest/flutter_hooks/useTextEditingController-constant.html&#34;&gt;useTextEditingController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a &lt;code&gt;TextEditingController&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useFocusNode.html&#34;&gt;useFocusNode&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a &lt;code&gt;FocusNode&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useTabController.html&#34;&gt;useTabController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates and disposes a &lt;code&gt;TabController&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useScrollController.html&#34;&gt;useScrollController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates and disposes a &lt;code&gt;ScrollController&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/usePageController.html&#34;&gt;usePageController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates and disposes a &lt;code&gt;PageController&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useAppLifecycleState.html&#34;&gt;useAppLifecycleState&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the current &lt;code&gt;AppLifecycleState&lt;/code&gt; and rebuilds the widget on change.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useOnAppLifecycleStateChange.html&#34;&gt;useOnAppLifecycleStateChange&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listens to &lt;code&gt;AppLifecycleState&lt;/code&gt; changes and triggers a callback on change.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useTransformationController.html&#34;&gt;useTransformationController&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates and disposes a &lt;code&gt;TransformationController&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useIsMounted.html&#34;&gt;useIsMounted&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An equivalent to &lt;code&gt;State.mounted&lt;/code&gt; for hooks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useAutomaticKeepAlive.html&#34;&gt;useAutomaticKeepAlive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An equivalent to the &lt;code&gt;AutomaticKeepAlive&lt;/code&gt; widget for hooks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pub.dartlang.org/documentation/flutter_hooks/latest/flutter_hooks/useOnPlatformBrightnessChange.html&#34;&gt;useOnPlatformBrightnessChange&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listens to platform &lt;code&gt;Brightness&lt;/code&gt; changes and triggers a callback on change.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed!&lt;/p&gt; &#xA;&lt;p&gt;If you feel that a hook is missing, feel free to open a pull-request.&lt;/p&gt; &#xA;&lt;p&gt;For a custom-hook to be merged, you will need to do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Describe the use-case.&lt;/p&gt; &lt;p&gt;Open an issue explaining why we need this hook, how to use it, ... This is important as a hook will not get merged if the hook doesn&#39;t appeal to a large number of people.&lt;/p&gt; &lt;p&gt;If your hook is rejected, don&#39;t worry! A rejection doesn&#39;t mean that it won&#39;t be merged later in the future if more people show interest in it. In the mean-time, feel free to publish your hook as a package on &lt;a href=&#34;https://pub.dev&#34;&gt;https://pub.dev&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write tests for your hook&lt;/p&gt; &lt;p&gt;A hook will not be merged unless fully tested to avoid inadvertently breaking it in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add it to the README and write documentation for it.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>