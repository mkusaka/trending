<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:49:53Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BenjaminMahmic/fashion_shop_ui</title>
    <updated>2022-06-13T01:49:53Z</updated>
    <id>tag:github.com,2022-06-13:/BenjaminMahmic/fashion_shop_ui</id>
    <link href="https://github.com/BenjaminMahmic/fashion_shop_ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Fashion Shop App UI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/89051381/172973481-59d3f3f7-fb65-4b48-9561-f97b23c2958e.jpeg&#34; alt=&#34;image1&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zubairehman/flutter-boilerplate-project</title>
    <updated>2022-06-13T01:49:53Z</updated>
    <id>tag:github.com,2022-06-13:/zubairehman/flutter-boilerplate-project</id>
    <link href="https://github.com/zubairehman/flutter-boilerplate-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A boilerplate project created in flutter using MobX and Provider.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Boilerplate Project&lt;/h1&gt; &#xA;&lt;p&gt;A boilerplate project created in flutter using MobX and Provider. Boilerplate supports both web and mobile, clone the appropriate branches mentioned below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Mobile: &lt;a href=&#34;https://github.com/zubairehman/flutter-boilerplate-project/tree/master&#34;&gt;https://github.com/zubairehman/flutter-boilerplate-project/tree/master&lt;/a&gt; (stable channel)&lt;/li&gt; &#xA; &lt;li&gt;For Web: &lt;a href=&#34;https://github.com/zubairehman/flutter-boilerplate-project/tree/feature/web-support&#34;&gt;https://github.com/zubairehman/flutter-boilerplate-project/tree/feature/web-support&lt;/a&gt; (beta channel)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The Boilerplate contains the minimal implementation required to create a new library or project. The repository code is preloaded with some basic components like basic app architecture, app theme, constants and required dependencies to create a new project. By using boiler plate code as standard initializer, we can have same patterns in all the projects that will inherit it. This will also help in reducing setup &amp;amp; development time by allowing you to use same code pattern and avoid re-writing from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download or clone this repo by using the link below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/zubairehman/flutter-boilerplate-project.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go to project root and execute the following command in console to get the required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub get &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project uses &lt;code&gt;inject&lt;/code&gt; library that works with code generation, execute the following command to generate files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter packages pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or watch command in order to keep the source code synced automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter packages pub run build_runner watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hide Generated Files&lt;/h2&gt; &#xA;&lt;p&gt;In-order to hide generated files, navigate to &lt;code&gt;Android Studio&lt;/code&gt; -&amp;gt; &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Editor&lt;/code&gt; -&amp;gt; &lt;code&gt;File Types&lt;/code&gt; and paste the below lines under &lt;code&gt;ignore files and folders&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*.inject.summary;*.inject.dart;*.g.dart;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Visual Studio Code, navigate to &lt;code&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; and search for &lt;code&gt;Files:Exclude&lt;/code&gt;. Add the following patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;**/*.inject.summary&#xA;**/*.inject.dart&#xA;**/*.g.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Boilerplate Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Splash&lt;/li&gt; &#xA; &lt;li&gt;Login&lt;/li&gt; &#xA; &lt;li&gt;Home&lt;/li&gt; &#xA; &lt;li&gt;Routing&lt;/li&gt; &#xA; &lt;li&gt;Theme&lt;/li&gt; &#xA; &lt;li&gt;Dio&lt;/li&gt; &#xA; &lt;li&gt;Database&lt;/li&gt; &#xA; &lt;li&gt;MobX (to connect the reactive data of your application with the UI)&lt;/li&gt; &#xA; &lt;li&gt;Provider (State Management)&lt;/li&gt; &#xA; &lt;li&gt;Encryption&lt;/li&gt; &#xA; &lt;li&gt;Validation&lt;/li&gt; &#xA; &lt;li&gt;Code Generation&lt;/li&gt; &#xA; &lt;li&gt;User Notifications&lt;/li&gt; &#xA; &lt;li&gt;Logging&lt;/li&gt; &#xA; &lt;li&gt;Dependency Injection&lt;/li&gt; &#xA; &lt;li&gt;Dark Theme Support (new)&lt;/li&gt; &#xA; &lt;li&gt;Multilingual Support (new)&lt;/li&gt; &#xA; &lt;li&gt;Provider example (new)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Up-Coming Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connectivity Support&lt;/li&gt; &#xA; &lt;li&gt;Background Fetch Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Libraries &amp;amp; Tools Used&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutterchina/dio&#34;&gt;Dio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tekartik/sembast.dart&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mobxjs/mobx.dart&#34;&gt;MobX&lt;/a&gt; (to connect the reactive data of your application with the UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;Provider&lt;/a&gt; (State Management)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xxtea/xxtea-dart&#34;&gt;Encryption&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-league/validators&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zubairehman/Flogs&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreHaueisen/flushbar&#34;&gt;Notifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dart-lang/json_serializable&#34;&gt;Json Serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fluttercommunity/get_it&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Folder Structure&lt;/h3&gt; &#xA;&lt;p&gt;Here is the core folder structure which flutter provides.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter-app/&#xA;|- android&#xA;|- build&#xA;|- ios&#xA;|- lib&#xA;|- test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the folder structure we have been using in this project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lib/&#xA;|- constants/&#xA;|- data/&#xA;|- stores/&#xA;|- ui/&#xA;|- utils/&#xA;|- widgets/&#xA;|- main.dart&#xA;|- routes.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, lets dive into the lib folder which has the main code for the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1- constants - All the application level constants are defined in this directory with-in their respective files. This directory contains the constants for `theme`, `dimentions`, `api endpoints`, `preferences` and `strings`.&#xA;2- data - Contains the data layer of your project, includes directories for local, network and shared pref/cache.&#xA;3- stores - Contains store(s) for state-management of your application, to connect the reactive data of your application with the UI. &#xA;4- ui — Contains all the ui of your project, contains sub directory for each screen.&#xA;5- util — Contains the utilities/common functions of your application.&#xA;6- widgets — Contains the common widgets for your applications. For example, Button, TextField etc.&#xA;7- routes.dart — This file contains all the routes for your application.&#xA;8- main.dart - This is the starting point of the application. All the application level configurations are defined in this file i.e, theme, routes, title, orientation etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;This directory contains all the application level constants. A separate file is created for each type as shown in example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constants/&#xA;|- app_theme.dart&#xA;|- dimens.dart&#xA;|- endpoints.dart&#xA;|- preferences.dart&#xA;|- strings.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data&lt;/h3&gt; &#xA;&lt;p&gt;All the business logic of your application will go into this directory, it represents the data layer of your application. It is sub-divided into three directories &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;network&lt;/code&gt; and &lt;code&gt;sharedperf&lt;/code&gt;, each containing the domain specific logic. Since each layer exists independently, that makes it easier to unit test. The communication between UI and data layer is handled by using central repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data/&#xA;|- local/&#xA;    |- constants/&#xA;    |- datasources/&#xA;    |- app_database.dart&#xA;   &#xA;|- network/&#xA;    |- constants/&#xA;    |- exceptions/&#xA;    |- rest_client.dart&#xA;    &#xA;|- sharedpref&#xA;    |- constants/&#xA;    |- shared_preference_helper.dart&#xA;    &#xA;|- repository.dart&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stores&lt;/h3&gt; &#xA;&lt;p&gt;The store is where all your application state lives in flutter. The Store is basically a widget that stands at the top of the widget tree and passes it&#39;s data down using special methods. In-case of multiple stores, a separate folder for each store is created as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stores/&#xA;|- login/&#xA;    |- login_store.dart&#xA;    |- form_validator.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI&lt;/h3&gt; &#xA;&lt;p&gt;This directory contains all the ui of your application. Each screen is located in a separate folder making it easy to combine group of files related to that particular screen. All the screen specific widgets will be placed in &lt;code&gt;widgets&lt;/code&gt; directory as shown in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ui/&#xA;|- login&#xA;   |- login_screen.dart&#xA;   |- widgets&#xA;      |- login_form.dart&#xA;      |- login_button.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utils&lt;/h3&gt; &#xA;&lt;p&gt;Contains the common file(s) and utilities used in a project. The folder structure is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;utils/&#xA;|- encryption&#xA;   |- xxtea.dart&#xA;|- date&#xA;  |- date_time.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Widgets&lt;/h3&gt; &#xA;&lt;p&gt;Contains the common widgets that are shared across multiple screens. For example, Button, TextField etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;widgets/&#xA;|- app_icon_widget.dart&#xA;|- empty_app_bar.dart&#xA;|- progress_indicator.dart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;This file contains all the routes for your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;&#xA;import &#39;ui/home/home.dart&#39;;&#xA;import &#39;ui/login/login.dart&#39;;&#xA;import &#39;ui/splash/splash.dart&#39;;&#xA;&#xA;class Routes {&#xA;  Routes._();&#xA;&#xA;  //static variables&#xA;  static const String splash = &#39;/splash&#39;;&#xA;  static const String login = &#39;/login&#39;;&#xA;  static const String home = &#39;/home&#39;;&#xA;&#xA;  static final routes = &amp;lt;String, WidgetBuilder&amp;gt;{&#xA;    splash: (BuildContext context) =&amp;gt; SplashScreen(),&#xA;    login: (BuildContext context) =&amp;gt; LoginScreen(),&#xA;    home: (BuildContext context) =&amp;gt; HomeScreen(),&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Main&lt;/h3&gt; &#xA;&lt;p&gt;This is the starting point of the application. All the application level configurations are defined in this file i.e, theme, routes, title, orientation etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:boilerplate/routes.dart&#39;;&#xA;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:flutter/services.dart&#39;;&#xA;&#xA;import &#39;constants/app_theme.dart&#39;;&#xA;import &#39;constants/strings.dart&#39;;&#xA;import &#39;ui/splash/splash.dart&#39;;&#xA;&#xA;void main() {&#xA;  SystemChrome.setPreferredOrientations([&#xA;    DeviceOrientation.portraitUp,&#xA;    DeviceOrientation.portraitDown,&#xA;    DeviceOrientation.landscapeRight,&#xA;    DeviceOrientation.landscapeLeft,&#xA;  ]).then((_) {&#xA;    runApp(MyApp());&#xA;  });&#xA;}&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  // This widget is the root of your application.&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      debugShowCheckedModeBanner: false,&#xA;      title: Strings.appName,&#xA;      theme: themeData,&#xA;      routes: Routes.routes,&#xA;      home: SplashScreen(),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Checkout &lt;a href=&#34;https://github.com/zubairehman/flutter-boilerplate-project/wiki&#34;&gt;wiki&lt;/a&gt; for more info&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;I will be happy to answer any questions that you may have on this approach, and if you want to lend a hand with the boilerplate then please feel free to submit an issue and/or pull request 🙂&lt;/p&gt; &#xA;&lt;p&gt;Again to note, this is example can appear as over-architectured for what it is - but it is an example only. If you liked my work, don’t forget to ⭐ star the repo to show your support.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alextran1502/immich</title>
    <updated>2022-06-13T01:49:53Z</updated>
    <id>tag:github.com,2022-06-13:/alextran1502/immich</id>
    <link href="https://github.com/alextran1502/immich" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Self-hosted photo and video backup solution directly from your mobile phone.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?color=3F51B5&amp;amp;style=for-the-badge&amp;amp;label=License&amp;amp;logoColor=000000&amp;amp;labelColor=ececec&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alextran1502/immich&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/alextran1502/immich.svg?style=for-the-badge&amp;amp;logo=github&amp;amp;color=3F51B5&amp;amp;label=Stars&amp;amp;logoColor=000000&amp;amp;labelColor=ececec&#34; alt=&#34;Star on Github&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://immichci.little-home.net/viewType.html?buildTypeId=Immich_BuildAndroidAndGetArtifact&amp;amp;guest=1&#34;&gt; &lt;img src=&#34;https://img.shields.io/teamcity/http/immichci.little-home.net/s/Immich_BuildAndroidAndGetArtifact.svg?style=for-the-badge&amp;amp;label=Android&amp;amp;logo=teamcity&amp;amp;logoColor=000000&amp;amp;labelColor=ececec&#34; alt=&#34;Android Build&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://immichci.little-home.net/viewType.html?buildTypeId=Immich_BuildAndPublishIOSToTestFlight&amp;amp;guest=1&#34;&gt; &lt;img src=&#34;https://img.shields.io/teamcity/http/immichci.little-home.net/s/Immich_BuildAndPublishIOSToTestFlight.svg?style=for-the-badge&amp;amp;label=iOS&amp;amp;logo=teamcity&amp;amp;logoColor=000000&amp;amp;labelColor=ececec&#34; alt=&#34;iOS Build&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://actions-badge.atrox.dev/alextran1502/immich/goto?ref=main&#34;&gt; &lt;img alt=&#34;Build Status&#34; src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Falextran1502%2Fimmich%2Fbadge%3Fref%3Dmain&amp;amp;style=for-the-badge&amp;amp;label=Server Docker&amp;amp;logo=docker&amp;amp;labelColor=ececec&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/rxnyVTXGbM&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/979116623879368755.svg?label=Immich%20Discord&amp;amp;logo=Discord&amp;amp;style=for-the-badge&amp;amp;logoColor=000000&amp;amp;labelColor=ececec&#34; atl=&#34;Immich Discord&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/feature-panel.png&#34; title=&#34;Immich Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Immich&lt;/h1&gt; &#xA;&lt;p&gt;Self-hosted photo and video backup solution directly from your mobile phone.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/y8ZeaAigGmNvlSoKhU/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Loading ~4000 images/videos&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Mobile client&lt;/h3&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/login-screen.png&#34; width=&#34;150&#34; title=&#34;Login With Custom URL&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/backup-screen.png&#34; width=&#34;150&#34; title=&#34;Backup Setting Info&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/selective-backup-screen.png&#34; width=&#34;150&#34; title=&#34;Backup Setting Info&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/home-screen.jpeg&#34; width=&#34;150&#34; title=&#34;Home Screen&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/search-screen.jpeg&#34; width=&#34;150&#34; title=&#34;Curated Search Info&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/shared-albums.png&#34; width=&#34;150&#34; title=&#34;Shared Albums&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/nsc6.png&#34; width=&#34;150&#34; title=&#34;EXIF Info&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Web client&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/dashboard_photos.jpeg&#34; width=&#34;100%&#34; title=&#34;Home Dashboard&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Note&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;!! NOT READY FOR PRODUCTION! DO NOT USE TO STORE YOUR ASSETS !!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is under heavy development, there will be continuous functions, features and api changes.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upload and view assets (videos/images).&lt;/li&gt; &#xA; &lt;li&gt;Auto Backup.&lt;/li&gt; &#xA; &lt;li&gt;Download asset to local device.&lt;/li&gt; &#xA; &lt;li&gt;Multi-user supported.&lt;/li&gt; &#xA; &lt;li&gt;Quick navigation with drag scroll bar.&lt;/li&gt; &#xA; &lt;li&gt;Support HEIC/HEIF Backup.&lt;/li&gt; &#xA; &lt;li&gt;Extract and display EXIF info.&lt;/li&gt; &#xA; &lt;li&gt;Real-time render from multi-device upload event.&lt;/li&gt; &#xA; &lt;li&gt;Image Tagging/Classification based on ImageNet dataset&lt;/li&gt; &#xA; &lt;li&gt;Object detection based on COCO SSD.&lt;/li&gt; &#xA; &lt;li&gt;Search assets based on tags and exif data (lens, make, model, orientation)&lt;/li&gt; &#xA; &lt;li&gt;[Optional] Reverse geocoding using Mapbox (Generous free-tier of 100,000 search/month)&lt;/li&gt; &#xA; &lt;li&gt;Show asset&#39;s location information on map (OpenStreetMap).&lt;/li&gt; &#xA; &lt;li&gt;Show curated places on the search page&lt;/li&gt; &#xA; &lt;li&gt;Show curated objects on the search page&lt;/li&gt; &#xA; &lt;li&gt;Shared album with users on the same server&lt;/li&gt; &#xA; &lt;li&gt;Selective backup - albums can be included and excluded during the backup process.&lt;/li&gt; &#xA; &lt;li&gt;Web interface is available for administrative tasks (creating new users) and viewing assets on the server - additional features are coming.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System Requirement&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;OS&lt;/strong&gt;: Preferred unix-based operating system (Ubuntu, Debian, MacOS...etc).&lt;/p&gt; &#xA;&lt;p&gt;I haven&#39;t tested with &lt;code&gt;Docker for Windows&lt;/code&gt; as well as &lt;code&gt;WSL&lt;/code&gt; on Windows&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Raspberry Pi can be used but &lt;code&gt;microservices&lt;/code&gt; container has to be comment out in &lt;code&gt;docker-compose&lt;/code&gt; since TensorFlow has not been supported in Docker image on arm64v7 yet.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;RAM&lt;/strong&gt;: At least 2GB, preffered 4GB.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt;: At least 2 cores, preffered 4 cores.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;You can use docker compose for development and testing out the application, there are several services that compose Immich:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;NestJs&lt;/strong&gt; - Backend of the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SvelteKit&lt;/strong&gt; - Web frontend of the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; - Main database of the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Redis&lt;/strong&gt; - For sharing websocket instance between docker instances and background tasks message queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nginx&lt;/strong&gt; - Load balancing and optimized file uploading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt; - Object Detection and Image Classification.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Step 1: Populate .env file&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;docker&lt;/code&gt; directory and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then populate the value in there.&lt;/p&gt; &#xA;&lt;p&gt;Notice that if set &lt;code&gt;ENABLE_MAPBOX&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you will have to provide &lt;code&gt;MAPBOX_KEY&lt;/code&gt; for the server to run.&lt;/p&gt; &#xA;&lt;p&gt;Pay attention to the key &lt;code&gt;UPLOAD_LOCATION&lt;/code&gt;, this directory must exist and is owned by the user that run the &lt;code&gt;docker-compose&lt;/code&gt; command below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;###################################################################################&#xA;# Database&#xA;###################################################################################&#xA;DB_USERNAME=postgres&#xA;DB_PASSWORD=postgres&#xA;DB_DATABASE_NAME=immich&#xA;&#xA;###################################################################################&#xA;# Upload File Config&#xA;###################################################################################&#xA;UPLOAD_LOCATION=&amp;lt;put-the-path-of-the-upload-folder-here&amp;gt;&#xA;&#xA;###################################################################################&#xA;# JWT SECRET&#xA;###################################################################################&#xA;JWT_SECRET=randomstringthatissolongandpowerfulthatnoonecanguess&#xA;&#xA;###################################################################################&#xA;# MAPBOX&#xA;####################################################################################&#xA;# ENABLE_MAPBOX is either true of false -&amp;gt; if true, you have to provide MAPBOX_KEY&#xA;ENABLE_MAPBOX=false&#xA;MAPBOX_KEY=&#xA;&#xA;###################################################################################&#xA;# WEB&#xA;###################################################################################&#xA;# This is the URL of your vm/server where you host Immich, so that the web frontend&#xA;# know where can it make the request to.&#xA;# For example: If your server IP address is 10.1.11.50, the environment variable will&#xA;# be VITE_SERVER_ENDPOINT=http://10.1.11.50:2283&#xA;VITE_SERVER_ENDPOINT=http://192.168.1.216:2283&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Step 2: Start the server&lt;/h2&gt; &#xA;&lt;p&gt;To &lt;strong&gt;start&lt;/strong&gt;, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f ./docker/docker-compose.yml up &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a few thousand photos/videos, I suggest running docker-compose with &lt;em&gt;scaling&lt;/em&gt; option for the &lt;code&gt;immich_server&lt;/code&gt; container to handle high I/O load when using fast scrolling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f ./docker/docker-compose.yml up --scale immich-server=5 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To &lt;em&gt;update&lt;/em&gt; docker-compose with newest image (if you have started the docker-compose previously)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose -f ./docker/docker-compose.yml pull &amp;amp;&amp;amp; docker-compose -f ./docker/docker-compose.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will be running at &lt;code&gt;http://your-ip:2283&lt;/code&gt; through &lt;code&gt;Nginx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Step 3: Register User&lt;/h2&gt; &#xA;&lt;p&gt;Access the web interface at &lt;code&gt;http://your-ip:2285&lt;/code&gt; to register an admin account.&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/admin-registration-form.png&#34; width=&#34;300&#34; title=&#34;Admin Registration&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional accounts on the server can be created by the admin account.&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/admin-interface.png&#34; width=&#34;500&#34; title=&#34;Admin User Management&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Step 4: Run mobile app&lt;/h2&gt; &#xA;&lt;p&gt;The app is distributed on several platforms below.&lt;/p&gt; &#xA;&lt;h2&gt;F-Droid&lt;/h2&gt; &#xA;&lt;p&gt;You can get the app on F-droid by clicking the image below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f-droid.org/packages/app.alextran.immich&#34;&gt;&lt;img src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; alt=&#34;Get it on F-Droid&#34; height=&#34;80&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;h4&gt;Get the app on Google Play Store &lt;a href=&#34;https://play.google.com/store/apps/details?id=app.alextran.immich&#34;&gt;here&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;The App version might be lagging behind the latest release due to the review process.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/google-play-qr-code.png&#34; width=&#34;200&#34; title=&#34;Google Play Store&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;iOS&lt;/h2&gt; &#xA;&lt;h4&gt;Get the app on Apple AppStore &lt;a href=&#34;https://apps.apple.com/us/app/immich/id1613945652&#34;&gt;here&lt;/a&gt;:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;The App version might be lagging behind the latest release due to the review process.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alextran1502/immich/main/design/ios-qr-code.png&#34; width=&#34;200&#34; title=&#34;Apple App Store&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;The development environment can be started from the root of the project after populating the &lt;code&gt;.env&lt;/code&gt; file with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make dev # required Makefile installed on the system.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All servers and web container are hot reload for quick feedback loop.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;If you like the app, find it helpful, and want to support me to offset the cost of publishing to AppStores, you can sponsor the project with &lt;a href=&#34;https://github.com/sponsors/alextran1502&#34;&gt;&lt;strong&gt;Github Sponsor&lt;/strong&gt;&lt;/a&gt;, or a one time donation with the Buy Me a coffee link below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/altran1502&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;&amp;quot;Buy Me A Coffee&amp;quot;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is also a meaningful way to give me motivation and encouragement to continue working on the app.&lt;/p&gt; &#xA;&lt;p&gt;Cheers! 🎉&lt;/p&gt; &#xA;&lt;h1&gt;Known Issue&lt;/h1&gt; &#xA;&lt;h2&gt;TensorFlow Build Issue&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This is a known issue on RaspberryPi 4 arm64-v7 and incorrect Promox setup&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;TensorFlow doesn&#39;t run with older CPU architecture, it requires a CPU with AVX and AVX2 instruction set. If you encounter the error &lt;code&gt;illegal instruction core dump&lt;/code&gt; when running the docker-compose command above, check for your CPU flags with the command and make sure you see &lt;code&gt;AVX&lt;/code&gt; and &lt;code&gt;AVX2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;more /proc/cpuinfo | grep flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are running virtualization in Promox, the VM doesn&#39;t have the flag enabled.&lt;/p&gt; &#xA;&lt;p&gt;You need to change the CPU type from &lt;code&gt;kvm64&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt; under VMs hardware tab.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Hardware &amp;gt; Processors &amp;gt; Edit &amp;gt; Advanced &amp;gt; Type (dropdown menu) &amp;gt; host&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Otherwise you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;edit &lt;code&gt;docker-compose.yml&lt;/code&gt; file and comment the whole &lt;code&gt;immich_microservices&lt;/code&gt; service &lt;strong&gt;which will disable machine learning features like object detection and image classification&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;switch to a different VM/desktop with different architecture.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>