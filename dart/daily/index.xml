<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-20T01:30:32Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MisterJimson/flutter_keyboard_visibility</title>
    <updated>2025-04-20T01:30:32Z</updated>
    <id>tag:github.com,2025-04-20:/MisterJimson/flutter_keyboard_visibility</id>
    <link href="https://github.com/MisterJimson/flutter_keyboard_visibility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get notified on keyboard visibility changes in your Flutter app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Keyboard Visibility&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_keyboard_visibility&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_keyboard_visibility.svg?label=flutter_keyboard_visibility&amp;amp;color=blue&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/MisterJimson/flutter_keyboard_visibility/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;ci&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/MisterJimson/flutter_keyboard_visibility&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/MisterJimson/flutter_keyboard_visibility/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;React to keyboard visibility changes.&lt;/p&gt; &#xA;&lt;h3&gt;Note about Flutter Web and Desktop support&lt;/h3&gt; &#xA;&lt;p&gt;Web support is an open issue &lt;a href=&#34;https://github.com/MisterJimson/flutter_keyboard_visibility/issues/10&#34;&gt;here&lt;/a&gt;, desktop support is an open issue &lt;a href=&#34;https://github.com/MisterJimson/flutter_keyboard_visibility/issues/124&#34;&gt;here&lt;/a&gt;. Currently this library will just return &lt;code&gt;false&lt;/code&gt; for keyboard visibility on web and desktop.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_keyboard_visibility/install&#34;&gt;Install the package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage: React to Keyboard Visibility Changes&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: Within your &lt;code&gt;Widget&lt;/code&gt; tree using a builder&lt;/h3&gt; &#xA;&lt;p&gt;Build your Widget tree based on whether or not the keyboard is visible by using &lt;code&gt;KeyboardVisibilityBuilder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart&#39;;&#xA;&#xA;/// In any of your widgets...&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  return KeyboardVisibilityBuilder(&#xA;      builder: (context, isKeyboardVisible) {&#xA;        return Text(&#xA;          &#39;The keyboard is: ${isKeyboardVisible ? &#39;VISIBLE&#39; : &#39;NOT VISIBLE&#39;}&#39;,&#xA;        );&#xA;      }&#xA;  );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option 2: Within your &lt;code&gt;Widget&lt;/code&gt; tree using a provider&lt;/h3&gt; &#xA;&lt;p&gt;Build your &lt;code&gt;Widget&lt;/code&gt; tree based on whether or not the keyboard is visible by including a &lt;code&gt;KeyboardVisibilityProvider&lt;/code&gt; near the top of your tree.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart&#39;;&#xA;&#xA;// Somewhere near the top of your tree...&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  return KeyboardVisibilityProvider(&#xA;    child: MyDemoPage(),&#xA;  );&#xA;}&#xA;&#xA;// Within MyDemoPage...&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  final bool isKeyboardVisible = KeyboardVisibilityProvider.isKeyboardVisible(context);&#xA;  return Text(&#xA;    &#39;The keyboard is: ${isKeyboardVisible ? &#39;VISIBLE&#39; : &#39;NOT VISIBLE&#39;}&#39;,&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Option 3: Direct query and subscription&lt;/h3&gt; &#xA;&lt;p&gt;Query and/or subscribe to keyboard visibility directly with the &lt;code&gt;KeyboardVisibilityController&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart&#39;;&#xA;import &#39;dart:async&#39;;&#xA;&#xA;late StreamSubscription&amp;lt;bool&amp;gt; keyboardSubscription;&#xA;&#xA;@override&#xA;void initState() {&#xA;  super.initState();&#xA;&#xA;  var keyboardVisibilityController = KeyboardVisibilityController();&#xA;  // Query&#xA;  print(&#39;Keyboard visibility direct query: ${keyboardVisibilityController.isVisible}&#39;);&#xA;&#xA;  // Subscribe&#xA;  keyboardSubscription = keyboardVisibilityController.onChange.listen((bool visible) {&#xA;    print(&#39;Keyboard visibility update. Is visible: $visible&#39;);&#xA;  });&#xA;}&#xA;&#xA;@override&#xA;void dispose() {&#xA;  keyboardSubscription.cancel();&#xA;  super.dispose();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage: Dismiss keyboard on tap&lt;/h2&gt; &#xA;&lt;p&gt;Place a &lt;code&gt;KeyboardDismissOnTap&lt;/code&gt; near the top of your &lt;code&gt;Widget&lt;/code&gt; tree. When a user taps outside of the currently focused &lt;code&gt;Widget&lt;/code&gt;, the &lt;code&gt;Widget&lt;/code&gt; will drop focus and the keyboard will be dismissed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart&#39;;&#xA;&#xA;// Somewhere near the top of your tree...&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  return KeyboardDismissOnTap(&#xA;    child: MyDemoPage(),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;KeyboardDismissOnTap&lt;/code&gt; will only dismiss taps not captured by other interactive &lt;code&gt;Widget&lt;/code&gt;s, like buttons. If you would like to dismiss the keyboard for any tap, including taps on interactive &lt;code&gt;Widget&lt;/code&gt;s, set &lt;code&gt;dismissOnCapturedTaps&lt;/code&gt; to true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart&#39;;&#xA;&#xA;// Somewhere near the top of your tree...&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  return KeyboardDismissOnTap(&#xA;    dismissOnCapturedTaps: true,&#xA;    child: MyDemoPage(),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;IgnoreKeyboardDismiss&lt;/code&gt; &lt;code&gt;Widget&lt;/code&gt; can be used to further refine which taps do and do not dismiss the keyboard. Checkout the example app for more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Testing using mocks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;KeyboardVisibilityProvider&lt;/code&gt; and &lt;code&gt;KeyboardVisibilityBuilder&lt;/code&gt; accept a &lt;code&gt;controller&lt;/code&gt; parameter that allow you to mock or replace the logic for reporting keyboard visibility updates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@GenerateMocks([KeyboardVisibilityController])&#xA;void main() {&#xA;  testWidgets(&#39;It reports true when the keyboard is visible&#39;, (WidgetTester tester) async {&#xA;    // Pretend that the keyboard is visible.&#xA;    var mockController = MockKeyboardVisibilityController();&#xA;    when(mockController.onChange)&#xA;        .thenAnswer((_) =&amp;gt; Stream.fromIterable([true]));&#xA;    when(mockController.isVisible).thenAnswer((_) =&amp;gt; true);&#xA;&#xA;    // Build a Widget tree and query KeyboardVisibilityProvider&#xA;    // for the visibility of the keyboard.&#xA;    bool? isKeyboardVisible;&#xA;&#xA;    await tester.pumpWidget(&#xA;      KeyboardVisibilityProvider(&#xA;        controller: mockController,&#xA;        child: Builder(&#xA;          builder: (BuildContext context) {&#xA;            isKeyboardVisible =&#xA;                KeyboardVisibilityProvider.isKeyboardVisible(context);&#xA;            return SizedBox();&#xA;          },&#xA;        ),&#xA;      ),&#xA;    );&#xA;&#xA;    // Verify that KeyboardVisibilityProvider reported that the&#xA;    // keyboard is visible.&#xA;    expect(isKeyboardVisible, true);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing with a global override&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;KeyboardVisibilityTesting.setVisibilityForTesting(false);&lt;/code&gt; to set a custom value to use during &lt;code&gt;flutter test&lt;/code&gt;. This is set globally and will override the standard logic of the native platform.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main() {&#xA;  testWidgets(&#39;My Test&#39;, (WidgetTester tester) async {&#xA;    KeyboardVisibilityTesting.setVisibilityForTesting(true);&#xA;    await tester.pumpWidget(MyApp());&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>