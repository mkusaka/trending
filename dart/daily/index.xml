<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-13T01:30:09Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deriv-com/flutter-deriv-api</title>
    <updated>2024-10-13T01:30:09Z</updated>
    <id>tag:github.com,2024-10-13:/deriv-com/flutter-deriv-api</id>
    <link href="https://github.com/deriv-com/flutter-deriv-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter/Dart API for binary.com websockets API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Deriv API&lt;/h1&gt; &#xA;&lt;p&gt;Flutter Deriv API is an abstraction layer over &lt;code&gt;Binary WebSocket&lt;/code&gt; (&lt;em&gt;&lt;a href=&#34;https://github.com/binary-com/websockets&#34;&gt;https://github.com/binary-com/websockets&lt;/a&gt;&lt;/em&gt;) for &lt;code&gt;Dart&lt;/code&gt; and &lt;code&gt;Flutter&lt;/code&gt; developers.&lt;/p&gt; &#xA;&lt;h2&gt;Using Flutter Deriv API&lt;/h2&gt; &#xA;&lt;h3&gt;A. Creating a websocket connection&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;APIInitializer&lt;/code&gt; to prepare API instance for dependency injection, you can pass &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;isMock&lt;/code&gt; parameter for testing purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;APIInitializer().initialize();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Establishing a connection to WebSocket needs an instance of the &lt;code&gt;ConnectionInformation&lt;/code&gt; class for initializing API connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final BaseAPI api = Injector()&amp;lt;BaseAPI&amp;gt;();&#xA;&#xA;api.connect(&#xA;    ConnectionInformation(&#xA;        appId: ...,&#xA;        brand: ...,&#xA;        endpoint: ...,&#xA;        language: ...,&#xA;    ),&#xA;    onDone: () async { ... },&#xA;    onOpen: () async { ... },&#xA;    printResponse: true,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;B. Calling API methods&lt;/h3&gt; &#xA;&lt;p&gt;You can invoke API calls with either using classes in the abstraction layer (&lt;code&gt;Ping, Order, Advert, ...&lt;/code&gt;) or directly with API calls from the &lt;code&gt;BaseAPI&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;h4&gt;Calling method by abstraction layer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final Ping ping = await Ping.ping();&#xA;&#xA;print(ping.succeeded);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Calling method directly with &lt;code&gt;BaseAPI&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final BaseAPI api = Injector()&amp;lt;BaseAPI&amp;gt;();&#xA;&#xA;final PingResponse response =&#xA;    await api.call(request: const PingRequest());&#xA;&#xA;print(response.ping);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request Compare Predicate&lt;/h3&gt; &#xA;&lt;p&gt;To prevent adding duplicate requests &lt;code&gt;Subscription Manager&lt;/code&gt; applies some mechanism to compare and return a suitable result if a subscription request already exists.&lt;/p&gt; &#xA;&lt;p&gt;By default, the subscription manager uses the &lt;code&gt;Equatable&lt;/code&gt; package to compare the current request with the request pool. Sometimes you do not want to rely on the package, in that case you can add &lt;code&gt;Compare Predicate&lt;/code&gt; to your call API, and compare your request with already existing requests in subscription manager.&lt;/p&gt; &#xA;&lt;p&gt;You just need to define a &lt;code&gt;Compare Predicate&lt;/code&gt; method to compare your request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;...&#xA;&#xA;subscribeToSomeApiCall(request, comparePredicate: getComparePredicate);&#xA;&#xA;...&#xA;&#xA;bool getComparePredicate({&#xA;    bool equatableResult,&#xA;    PendingRequest&amp;lt;Response&amp;gt; pendingRequest,&#xA;    Request request,&#xA;}) {&#xA;    SomeRequest otherRequest = pendingRequest.request as SomeRequest;&#xA;    SomeRequest currentRequest = request as SomeRequest;&#xA;&#xA;    return equatableResult &amp;amp;&amp;amp; otherRequest.param01 == currentRequest.param01 &amp;amp;&amp;amp; ...;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;API Architecture&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/deriv-com/flutter-deriv-api/master/deriv_api_architecture.png&#34; alt=&#34;API Architecture&#34; width=&#34;70%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;API Reference&lt;/h3&gt; &#xA;&lt;p&gt;The complete API reference is &lt;a href=&#34;https://raw.githubusercontent.com/deriv-com/flutter-deriv-api/master/#&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Clone repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/regentmarkets/flutter-deriv-api.git&#xA;&#xA;$ cd flutter-deriv-api&#xA;$ flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use this package as a library&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your package&#39;s &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;    ...&#xA;    flutter_deriv_api:&#xA;        git:&#xA;            url: https://github.com/regentmarkets/flutter-deriv-api.git&#xA;            ref: master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use this package as a submodule&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git submodule add https://github.com/regentmarkets/flutter-deriv-api.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this to your package&#39;s &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;    ...&#xA;    flutter_deriv_api:&#xA;        path: ./flutter-deriv-api/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Initialize and update submodule&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git submodule init&#xA;$ git submodule update --remote&#xA;$ ./setup.sh&#xA;$ dart run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flutter test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate documentations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dartdoc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;h3&gt;JSON Schema Parser&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;JsonSchemaParser&lt;/code&gt; class is a tool for extracting main and nested classes from model schema contents.&lt;/p&gt; &#xA;&lt;h4&gt;Using schema parser&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Call &lt;code&gt;getModels(Map&amp;lt;String, dynamic&amp;gt; schema)&lt;/code&gt; method and pass decoded schema to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pass the result of &lt;code&gt;getModels&lt;/code&gt; method to &lt;code&gt;getClasses(List&amp;lt;SchemaModel&amp;gt; models, String className)&lt;/code&gt; as &lt;code&gt;models&lt;/code&gt; parameter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The final result is a &lt;code&gt;string&lt;/code&gt; that contains the main class and all related classes of that schema file including &lt;code&gt;Model Classes, Constructors, Properties&lt;/code&gt; and &lt;code&gt;toJson(), fromJson(), copyWith()&lt;/code&gt; Methods.&lt;/p&gt; &#xA;&lt;h4&gt;Run schema parser&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flutter pub run lib/tools/parser.dart &amp;lt;json_schema_path&amp;gt; &amp;lt;main_class_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ flutter pub run lib/tools/parser.dart active_symbols_receive.json ActiveSymbols&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;This tool is for helping developers to convert JSON Schema easier, you may require some adjustments to the result file according to your needs.&lt;/li&gt; &#xA; &lt;li&gt;The resulting file will be generated in the same path as the JSON schema file.&lt;/li&gt; &#xA; &lt;li&gt;Some JSON schemas are not standard and this tool may not convert them properly.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>