<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-17T01:28:09Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mchome/flutter_colorpicker</title>
    <updated>2024-05-17T01:28:09Z</updated>
    <id>tag:github.com,2024-05-17:/mchome/flutter_colorpicker</id>
    <link href="https://github.com/mchome/flutter_colorpicker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HSV(HSB)/HSL/RGB/Material color picker inspired by all the good design for your amazing flutter apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_colorpicker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_colorpicker&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_colorpicker?include_prereleases.svg?sanitize=true&#34; alt=&#34;pub package&#34; title=&#34;Flutter Color Picker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mchome/flutter_colorpicker&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20built%20with-%20%E2%9D%A4-ff69b4.svg?sanitize=true&#34; alt=&#34;badge&#34; title=&#34;build with love&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HSV(HSB)/HSL/RGB/Material color picker inspired by all the good design for your amazing flutter apps.&lt;br&gt; Adorable color pickers out of the box with highly customized widgets to all developers&#39; needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mchome.github.io/flutter_colorpicker&#34;&gt;Web Example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Use it in [showDialog] widget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// create some values&#xA;Color pickerColor = Color(0xff443a49);&#xA;Color currentColor = Color(0xff443a49);&#xA;&#xA;// ValueChanged&amp;lt;Color&amp;gt; callback&#xA;void changeColor(Color color) {&#xA;  setState(() =&amp;gt; pickerColor = color);&#xA;}&#xA;&#xA;// raise the [showDialog] widget&#xA;showDialog(&#xA;  context: context,&#xA;  child: AlertDialog(&#xA;    title: const Text(&#39;Pick a color!&#39;),&#xA;    content: SingleChildScrollView(&#xA;      child: ColorPicker(&#xA;        pickerColor: pickerColor,&#xA;        onColorChanged: changeColor,&#xA;      ),&#xA;      // Use Material color picker:&#xA;      //&#xA;      // child: MaterialPicker(&#xA;      //   pickerColor: pickerColor,&#xA;      //   onColorChanged: changeColor,&#xA;      //   showLabel: true, // only on portrait mode&#xA;      // ),&#xA;      //&#xA;      // Use Block color picker:&#xA;      //&#xA;      // child: BlockPicker(&#xA;      //   pickerColor: currentColor,&#xA;      //   onColorChanged: changeColor,&#xA;      // ),&#xA;      //&#xA;      // child: MultipleChoiceBlockPicker(&#xA;      //   pickerColors: currentColors,&#xA;      //   onColorsChanged: changeColors,&#xA;      // ),&#xA;    ),&#xA;    actions: &amp;lt;Widget&amp;gt;[&#xA;      ElevatedButton(&#xA;        child: const Text(&#39;Got it&#39;),&#xA;        onPressed: () {&#xA;          setState(() =&amp;gt; currentColor = pickerColor);&#xA;          Navigator.of(context).pop();&#xA;        },&#xA;      ),&#xA;    ],&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7392658/36585408-bb4e96a4-18b8-11e8-8c20-d4dc200e1a7c.gif&#34; alt=&#34;preview&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/7392658/74600957-5efa3980-50d3-11ea-9458-55842927e565.png&#34; alt=&#34;SlidePicker&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable MD033 --&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/7392658/141606774-8193f4ee-e40d-49fc-b081-261c72325bf8.png&#34;&gt; &#xA;&lt;p&gt;Details in &lt;a href=&#34;https://github.com/mchome/flutter_colorpicker/tree/master/example&#34;&gt;example&lt;/a&gt; folder.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Flutterando/calamidade</title>
    <updated>2024-05-17T01:28:09Z</updated>
    <id>tag:github.com,2024-05-17:/Flutterando/calamidade</id>
    <link href="https://github.com/Flutterando/calamidade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;App Ajuda Enchentes RS&lt;/h1&gt; &#xA;&lt;p&gt;Este aplicativo é uma iniciativa para auxiliar as vítimas das enchentes no Rio Grande do Sul, facilitando a conexão entre voluntários, doadores e as famílias afetadas.&lt;/p&gt; &#xA;&lt;h2&gt;Personagens&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Voluntários Adopters&lt;/strong&gt;: Indivíduos ou famílias que desejam &#34;adotar&#34; famílias afetadas, fornecendo apoio contínuo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Voluntários de Campo&lt;/strong&gt;: Voluntários que trabalham diretamente no terreno para auxiliar os afetados pelas enchentes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Funcionalidades&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coleta de Informações sobre Doações&lt;/strong&gt;: Uma interface para registrar e gerenciar as informações sobre as doações recebidas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transparência na Destinação de Recursos&lt;/strong&gt;: Relatórios e atualizações sobre como os recursos estão sendo usados, garantindo transparência.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recebimento de Donativos&lt;/strong&gt;: Sistema para conectar doadores com as necessidades específicas das vítimas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arrecadação de Fundos&lt;/strong&gt;: Ferramenta para facilitar a arrecadação de fundos para apoiar os afetados.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;QR Code para Doações&lt;/strong&gt;: Facilitar doações por meio de um QR code que direciona para uma conta dedicada.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Liberação de Recursos&lt;/h2&gt; &#xA;&lt;p&gt;As liberações de recursos são feitas parcialmente, acompanhadas de comprovantes e transações financeiras claras para garantir transparência e confiança.&lt;/p&gt; &#xA;&lt;h2&gt;Contato&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coordenadora do Projeto&lt;/strong&gt;: Rosane (contato ainda será adicionado)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Metodologia de Desenvolvimento&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dia 1 (Segunda)&lt;/strong&gt;: Brainstorm de ideias e requisitos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dia 2 (Terça)&lt;/strong&gt;: Refinamento das ideias e planejamento.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dia 3 (Quarta)&lt;/strong&gt;: Produção e desenvolvimento.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dia 4 (Quinta)&lt;/strong&gt;: Testes de funcionalidades.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dia 5 (Sexta)&lt;/strong&gt;: Revisão final e entrega.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tecnologias e Pacotes Utilizados&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/auto_injector&#34;&gt;Auto Injector&lt;/a&gt;: Para injeção de dependências.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/routefly&#34;&gt;Routefly&lt;/a&gt;: Gerenciamento de rotas no app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.flutter.dev/flutter/foundation/ValueNotifier-class.html&#34;&gt;ValueNotifier&lt;/a&gt;: Utilizado para gerenciar estados dentro do app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Como Contribuir&lt;/h2&gt; &#xA;&lt;p&gt;Você pode contribuir com o projeto de várias maneiras, incluindo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fazer o fork do repositório do github&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Criar uma branch para a feature que deseja implementar&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Após a implementação, faça um pull request para a branch de desenvolvimento.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Como executar o projeto&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Certifique-se de que sua versão do dart seja &amp;gt;= 3.3.3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Certifique-se de que sua versão do flutter seja &amp;gt;= 3.19.5&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Para executar o seu projeto você deve clonar o projeto que você acabou de fazer o fork&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;git clone https://github.com/seu_usuario/calamidade.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Acesse a pasta do projeto&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;cd calamidade/app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instale as dependências&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute o projeto&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Como fazer o Sync Fork:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Flutterando/calamidade/main/doc/sync_fork.png&#34; alt=&#34;Como fazer o Sync Fork&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutoriais e Recursos&lt;/h2&gt; &#xA;&lt;p&gt;Para ajudar os desenvolvedores a se familiarizarem com as tecnologias e pacotes utilizados neste projeto, compilamos uma lista de vídeos e tutoriais úteis:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flutter com RouteFly&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=DmbIABioAME&#34;&gt;Assista ao tutorial&lt;/a&gt; Este vídeo explica como utilizar o pacote RouteFly para gerenciamento de rotas no Flutter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flutter ValueNotifier&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=zV1X9vwYcdI&amp;amp;list=PLlBnICoI-g-eG0eVkHu2IaO48TljxPjPq&#34;&gt;Assista à série de vídeos&lt;/a&gt; Esta série de vídeos oferece uma visão detalhada sobre como usar &lt;code&gt;ValueNotifier&lt;/code&gt; para gerenciar estados no Flutter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Auto Injector no Flutter&lt;/strong&gt;: &lt;a href=&#34;https://www.youtube.com/watch?v=BwrbAWlKWsQ&#34;&gt;Assista ao tutorial&lt;/a&gt; Aprenda a implementar injeção de dependência no seu projeto Flutter usando o pacote Auto Injector.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Estes recursos são recomendados para todos os membros da equipe, especialmente aqueles novos nas bibliotecas e frameworks utilizados.&lt;/p&gt; &#xA;&lt;h2&gt;Nomenclatura&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Diretórios e Arquivos&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Classes&lt;/strong&gt;: PascalCase&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Variaveis&lt;/strong&gt;: Funções e métodos: camelCase&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Interfaces&lt;/strong&gt;: Começam com um &lt;code&gt;I&lt;/code&gt;, por ex. &lt;code&gt;IRepository&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Implementação&lt;/strong&gt;: Termina com &lt;code&gt;Impl&lt;/code&gt;, por ex. &lt;code&gt;RepositoryImpl&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Snake Case&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use o estilo snake_case para nomes de arquivos.&lt;/li&gt; &#xA;   &lt;li&gt;Todas as letras devem ser minúsculas.&lt;/li&gt; &#xA;   &lt;li&gt;Palavras separadas por sublinhado.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Descrição Concisa&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mantenha o nome do arquivo descritivo e conciso, refletindo seu conteúdo ou funcionalidade.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Toda pagina deve ter seu nome mais o sufixo &#39;&lt;code&gt;_page.dar&lt;/code&gt;t&#39; para a geração de rotas do routefly.&lt;/p&gt; &#xA;&lt;h3&gt;Padrão para classes de interface&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//good&#xA;abstract interface class IUser {}&#xA;&#xA;//bad&#xA;abstract interface class InterfaceUser {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Padrão para classes de implementação de interface&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//good&#xA;class UserImpl implements IUser {}&#xA;&#xA;//bad&#xA;class UserImplements implements IUser {}&#xA;&#xA;### Padrão para classes de entity&#xA;&#xA;#### definição: entity vai replicar o que a tela precisa&#xA;&#xA;```dart&#xA;//good&#xA;class UserEntity {}&#xA;&#xA;//bad&#xA;class User {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;State Pattern&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flutter State Pattern&lt;/strong&gt;: &lt;a href=&#34;https://blog.flutterando.com.br/entendendo-state-pattern-flutter-b0318bab77c3&#34;&gt;Aprenda State Pattern&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;sealed class BasetState {}&#xA;&#xA;class InitialState implements BasetState {}&#xA;&#xA;class LoadingState implements BasetState {}&#xA;&#xA;class SuccessState&amp;lt;R&amp;gt; implements BasetState {&#xA;  const SuccessState({&#xA;    required this.data,&#xA;  });&#xA;&#xA;  final R data;&#xA;}&#xA;&#xA;class ErrorState&amp;lt;T&amp;gt; implements BasetState {&#xA;  const ErrorState({&#xA;    required this.exception,&#xA;  });&#xA;&#xA;  final T exception;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exemplo de uso do State Pattern&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class LoginControllerImpl extends BaseController {&#xA;  final IAuthRepository _repository;&#xA;&#xA;  LoginControllerImpl({&#xA;    required this.repository,&#xA;  }) : super(InitialState());&#xA;&#xA;  Future&amp;lt;void&amp;gt; login({&#xA;    required String email,&#xA;    required String password,&#xA;  }) async {&#xA;    &#xA;    _state.value = LoadingState();&#xA;&#xA;    final credentials = Credentials(&#xA;      email: email.trim().toLowerCase(),&#xA;      password: password.trim(),&#xA;    );&#xA;&#xA;    final result = await _repository.login(credentials);&#xA;&#xA;    final newState = result.fold(&#xA;      (error) =&amp;gt; ErrorState(exception: error),&#xA;      (success) =&amp;gt; SuccessState(data: success),&#xA;    );&#xA;&#xA;    // set state&#xA;    update(newState);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Princípio da inversão de dependências (DIP)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;É um dos cinco princípios SOLID da programação orientada a objetos. Ele estabelece que: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender de abstrações.&lt;/li&gt; &#xA;   &lt;li&gt;Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Em termos mais simples, o DIP sugere que os módulos de alto nível devem depender de abstrações, não de implementações concretas. Isso permite que você escreva código que seja mais flexível e fácil de manter, pois os módulos de alto nível não estão vinculados a detalhes de implementação específicos dos módulos de baixo nível&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Para aplicar o DIP em um projeto, você precisa seguir algumas práticas&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Definir abstrações claras&lt;/strong&gt;: Identifique as interfaces ou classes abstratas que descrevem os comportamentos que os módulos de alto nível precisam. Essas abstrações devem ser independentes de qualquer implementação concreta.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Injetar dependências&lt;/strong&gt;: Em vez de instanciar objetos diretamente dentro de outros objetos, injete as dependências por meio de construtores, métodos ou propriedades. Isso permite que as implementações concretas sejam substituídas por outras implementações compatíveis sem alterar o código dos módulos de alto nível.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Seguir o Princípio da Inversão de Controle (IoC)&lt;/strong&gt;: No DIP, o controle é invertido para que as implementações concretas dependam das abstrações. Isso é frequentemente alcançado por meio de um contêiner de injeção de dependência que gerencia a criação e resolução de dependências.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Testar unidades isoladas&lt;/strong&gt;: Ao usar abstrações e injetar dependências, você pode escrever testes de unidade mais facilmente, substituindo as implementações reais por mocks ou stubs durante os testes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Ao seguir essas práticas, você pode criar um código mais flexível, modular e fácil de manter, alinhado com os princípios do DIP&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  final IAuthRepository _repository;&#xA;&#xA;  LoginControllerImpl({&#xA;    required IAuthRepository repository,&#xA;  }) : _repository = repository;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manipulação de Erros e Resultados&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ao trabalhar com operações que podem retornar resultados ou erros, podemmos usar o typedef &lt;code&gt;Output&amp;lt;T&amp;gt;&lt;/code&gt; para representar a saída dessas operações. Este typedef nos permite encapsular tanto o sucesso quanto o fracasso em um único tipo usando &lt;code&gt;Either&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Definição de um typedef para representar a saída de uma operação, onde o tipo de dado retornado pode ser um sucesso (T) ou um erro &lt;code&gt;(BaseException)&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Este typedef é parametrizado com um tipo genérico T, que representa o tipo de dado retornado em caso de sucesso.&lt;/li&gt; &#xA;   &lt;li&gt;Exemplo de uso: &lt;code&gt;Output&amp;lt;User&amp;gt;&lt;/code&gt; representa a saída de uma operação que retorna um objeto do tipo User em caso de sucesso, ou uma exceção do tipo &lt;code&gt;BaseException&lt;/code&gt; em caso de erro.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;typedef Output&amp;lt;T&amp;gt; = Either&amp;lt;BaseException, T&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exemplo de uso do &lt;code&gt;Output&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;abstract class IAuthRepository {&#xA;  Future&amp;lt;Output&amp;lt;void&amp;gt;&amp;gt; login(Credentials credential);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Como criar uma nova feature&lt;/h2&gt; &#xA;&lt;p&gt;As features devem ficar no diretorio app/features usando a arquitetura minicore&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arquitetura Minicore&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Flutterando/minicore&#34;&gt;Minicore Doc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A features será dividida em 3 camadas, UI, Interactor, Data.&lt;/p&gt; &#xA;&lt;p&gt;UI - toda parta visual da feature se trata da tela em si.&lt;/p&gt; &#xA;&lt;p&gt;Interactor - aqui ficarão as entidades, o Interactor que tem a regra de négocios e a gerenciamento de estados e também as interfaces que a camada data deve implementar.&lt;/p&gt; &#xA;&lt;p&gt;Data - Implementação dos contratos, e os Adapters que devem retornar entity que seriam as serialização dos dados.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;App todo minicore&lt;/strong&gt;: &lt;a href=&#34;https://github.com/EdsonMello-code/todoapp&#34;&gt;App usando Minicore de exemplo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Uso de Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Os adapters recebem um Map e devem retornar entity, podem existir também adapters que recebem uma Entity e retornam outra.&lt;/p&gt; &#xA;&lt;h2&gt;Como adicionar um package&lt;/h2&gt; &#xA;&lt;p&gt;forma para adicionar packages no app Os packages devem ficar dentro de core/shared/services/&lt;/p&gt; &#xA;&lt;p&gt;Criar um diretorio com o nome do package e deve conter um contrato que deve ser usada pelo projeto e sua implementação feita com determinado package, o contrato e a implementação devem ficar no mesmo arquivo.&lt;/p&gt; &#xA;&lt;p&gt;caso o package adicionado seja compartilhado ele deve ficar no core_module&lt;/p&gt; &#xA;&lt;p&gt;e também deve ter um contrato e sua implementação.&lt;/p&gt; &#xA;&lt;h2&gt;Core Module&lt;/h2&gt; &#xA;&lt;p&gt;O core module é uma lib interna que serve para compartilhar o código entre os 2 projetos que temos, o app e o dashboard ele vai lidar com packages compartilhados os contratos e estados que também serão usados nos dois apps.&lt;/p&gt; &#xA;&lt;h2&gt;Design system&lt;/h2&gt; &#xA;&lt;p&gt;O design system é uma lib interna que vai ter todos components compartilhados e temas, eles ficarão divididos em diretorios exemplo: dentro de buttons/ todos nossos tipos de botões, seguindo a mesma lógica para toda criação de components.&lt;/p&gt; &#xA;&lt;h3&gt;Theme Color&lt;/h3&gt; &#xA;&lt;p&gt;Todas as cores podem ser acessadas usando o código:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final colors = CoopartilharColors.of(context);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Convenção de Commits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Commits&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;feat&lt;/code&gt;, &lt;code&gt;fix&lt;/code&gt;, &lt;code&gt;doc&lt;/code&gt;, &lt;code&gt;etc&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0&#34;&gt;Conventional Commits&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Convenção de nomenclatura para branches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;prefixos utilizados&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;feat&lt;/strong&gt;: adição de código novo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt;: correção de pré-existente&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;refact&lt;/strong&gt;: mudança de um código pré-existente&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;release&lt;/strong&gt;: alterações no pubspac&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;doc&lt;/strong&gt;: alteração na documentação&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;exemplo&lt;/strong&gt;: &lt;code&gt;feat/#10-nova-tela-de-usuario&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;obs: esse #10 é uma referencia a issue.&lt;/p&gt; &#xA;&lt;h2&gt;Code review&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;[!WARNING]&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Atenção&lt;/code&gt;: Somente será feito o merge de MRs revisados por múltiplas pessoas. Esse controle será feito através da verificação do número de reações ao MR que deverá ter ao menos dois.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Todo código deverá passar por Code Review através da feature &#34;Pull Request (PR)&#34; do Gitlab durante o processo de merge da branch de &#34;feature&#34; para a branch alvo. É recomendado que durante o desenvolvimento da feature seja criado um Pull Request de WIP (trabalho em progresso) para permitir coletar feedbacks ao longo do processo. Isso ocorre quando o título da PR é prefixado de WIP:&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acesse nossa comunidade no discord&lt;/h2&gt; &#xA;&lt;p&gt;Entrar no servidor do &lt;a href=&#34;https://discord.gg/BMKxRGnEmT&#34;&gt;Discord&lt;/a&gt; para discutir ideias e colaborar com outros membros da equipe.&lt;/p&gt; &#xA;&lt;h2&gt;Variáveis de ambiente&lt;/h2&gt; &#xA;&lt;p&gt;As keys de desenvolvimento estão em &lt;code&gt;dev.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Para usar a key: &lt;code&gt;String.fromEnvironment(CHAVE_DA_VARIAVEL);&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Por questões de segurança, para prod é necessário criar um arquivo local &lt;code&gt;.env&lt;/code&gt; e adiconar à root de &lt;code&gt;app/&lt;/code&gt;, seguir o padrão de &lt;code&gt;dev.env&lt;/code&gt; As keys podem ser fornecidas pelos participantes do projeto, entrar em contato com Flutterando caso seja necessário debugar o app prod&lt;/p&gt; &#xA;&lt;h2&gt;Licença&lt;/h2&gt; &#xA;&lt;p&gt;Este projeto é distribuído sob a Licença MIT, o que permite o uso, cópia, modificação, fusão, publicação, distribuição, sublicenciação, e/ou venda de cópias do software, desde que as cópias do software sejam acompanhadas pelo aviso de direitos autorais e este aviso de permissão.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aloisdeniel/flutter_device_preview</title>
    <updated>2024-05-17T01:28:09Z</updated>
    <id>tag:github.com,2024-05-17:/aloisdeniel/flutter_device_preview</id>
    <link href="https://github.com/aloisdeniel/flutter_device_preview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Approximate how your app looks and performs on another device.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/aloisdeniel/flutter_device_preview/raw/master/logo.png&#34; alt=&#34;Device Preview for Flutter&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Approximate how your app looks and performs on another device.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/device_preview&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/device_preview.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/aloisdeniel&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/$-donate-ff69b4.svg?maxAge=2592000&amp;amp;style=flat&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/aloisdeniel/flutter_device_preview/raw/master/device_preview.gif&#34; alt=&#34;Device Preview for Flutter&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Main features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Preview any device from any device&lt;/li&gt; &#xA; &lt;li&gt;Change the device orientation&lt;/li&gt; &#xA; &lt;li&gt;Dynamic system configuration (&lt;em&gt;language, dark mode, text scaling factor, ...)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Freeform device with adjustable resolution and safe areas&lt;/li&gt; &#xA; &lt;li&gt;Keep the application state&lt;/li&gt; &#xA; &lt;li&gt;Plugin system (&lt;em&gt;Screenshot, File explorer, ...&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Customizable plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Add dependency to your pubspec file&lt;/h3&gt; &#xA;&lt;p&gt;Since Device Preview is a simple Dart package, you have to declare it as any other dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  device_preview: &amp;lt;latest version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add DevicePreview&lt;/h3&gt; &#xA;&lt;p&gt;Wrap your app&#39;s root widget in a &lt;code&gt;DevicePreview&lt;/code&gt; and make sure to :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set your app&#39;s &lt;code&gt;useInheritedMediaQuery&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set your app&#39;s &lt;code&gt;builder&lt;/code&gt; to &lt;code&gt;DevicePreview.appBuilder&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set your app&#39;s &lt;code&gt;locale&lt;/code&gt; to &lt;code&gt;DevicePreview.locale(context)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure to override the previous properties as described. If not defined, &lt;code&gt;MediaQuery&lt;/code&gt; won&#39;t be simulated for the selected device.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:device_preview/device_preview.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(&#xA;  DevicePreview(&#xA;    enabled: !kReleaseMode,&#xA;    builder: (context) =&amp;gt; MyApp(), // Wrap your app&#xA;  ),&#xA;);&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      useInheritedMediaQuery: true,&#xA;      locale: DevicePreview.locale(context),&#xA;      builder: DevicePreview.appBuilder,&#xA;      theme: ThemeData.light(),&#xA;      darkTheme: ThemeData.dark(),&#xA;      home: const HomePage(),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aloisdeniel.github.io/flutter_device_preview/&#34; target=&#34;_blank&#34;&gt;Open the website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flutter-device-preview.firebaseapp.com/&#34; target=&#34;_blank&#34;&gt;Open the demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Think of Device Preview as a first-order approximation of how your app looks and feels on a mobile device. With Device Mode you don&#39;t actually run your code on a mobile device. You simulate the mobile user experience from your laptop, desktop or tablet.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are some aspects of mobile devices that Device Preview will never be able to simulate. When in doubt, your best bet is to actually run your app on a real device.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>