<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-22T01:33:59Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ABausG/home_widget</title>
    <updated>2022-08-22T01:33:59Z</updated>
    <id>tag:github.com,2022-08-22:/ABausG/home_widget</id>
    <link href="https://github.com/ABausG/home_widget" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter Package for Easier Creation of Home Screen Widgets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Home Widget&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/home_widget&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/home_widget.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/home_widget/score&#34;&gt;&lt;img src=&#34;https://badges.bar/home_widget/likes&#34; alt=&#34;likes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/home_widget/score&#34;&gt;&lt;img src=&#34;https://badges.bar/home_widget/popularity&#34; alt=&#34;popularity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/home_widget/score&#34;&gt;&lt;img src=&#34;https://badges.bar/home_widget/pub%20points&#34; alt=&#34;pub points&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ABausG/home_widget/actions/workflows/main.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/abausg/home_widget/actions/workflows/main.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ABausG/home_widget&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ABausG/home_widget/branch/main/graph/badge.svg?token=ZXTZOL6KFO&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HomeWidget is a Plugin to make it easier to create HomeScreen Widgets on Android and iOS. HomeWidget does &lt;strong&gt;not&lt;/strong&gt; allow writing Widgets with Flutter itself. It still requires writing the Widgets with native code. However, it provides a unified Interface for sending data, retrieving data and updating the Widgets&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;&amp;nbsp;Android&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ABausG/home_widget/raw/main/.github/assets/demo_ios.png?raw=true&#34; width=&#34;500px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/ABausG/home_widget/raw/main/.github/assets/demo_android.png?raw=true&#34; width=&#34;608px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Platform Setup&lt;/h2&gt; &#xA;&lt;p&gt;In order to work correctly there needs to be some platform specific setup. Check below on how to add support for Android and iOS&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Android&lt;/summary&gt; &#xA; &lt;h3&gt;Create Widget Layout inside &lt;code&gt;android/app/src/main/res/layout&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;h3&gt;Create Widget Configuration into &lt;code&gt;android/app/src/main/res/xml&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;appwidget-provider xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34;&#xA;    android:minWidth=&#34;40dp&#34;&#xA;    android:minHeight=&#34;40dp&#34;&#xA;    android:updatePeriodMillis=&#34;86400000&#34;&#xA;    android:initialLayout=&#34;@layout/example_layout&#34;&#xA;    android:resizeMode=&#34;horizontal|vertical&#34;&#xA;    android:widgetCategory=&#34;home_screen&#34;&amp;gt;&#xA;&amp;lt;/appwidget-provider&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Add WidgetReceiver to AndroidManifest&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;receiver android:name=&#34;HomeWidgetExampleProvider&#34; &amp;gt;&#xA;    &amp;lt;intent-filter&amp;gt;&#xA;        &amp;lt;action android:name=&#34;android.appwidget.action.APPWIDGET_UPDATE&#34; /&amp;gt;&#xA;    &amp;lt;/intent-filter&amp;gt;&#xA;    &amp;lt;meta-data android:name=&#34;android.appwidget.provider&#34;&#xA;        android:resource=&#34;@xml/home_widget_example&#34; /&amp;gt;&#xA;&amp;lt;/receiver&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Write your WidgetProvider&lt;/h3&gt; &#xA; &lt;p&gt;For convenience, you can extend from &lt;a href=&#34;https://raw.githubusercontent.com/ABausG/home_widget/main/android/src/main/kotlin/es/antonborri/home_widget/HomeWidgetProvider.kt&#34;&gt;HomeWidgetProvider&lt;/a&gt; which gives you access to a SharedPreferences Object with the Data in the &lt;code&gt;onUpdate&lt;/code&gt; method. In case you don&#39;t want to use the convenience Method you can access the Data using&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;import es.antonborri.home_widget.HomeWidgetPlugin&#xA;...&#xA;HomeWidgetPlugin.getData(context)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;which will give you access to the same SharedPreferences&lt;/p&gt; &#xA; &lt;h3&gt;More Information&lt;/h3&gt; &#xA; &lt;p&gt;For more Information on how to create and configure Android Widgets checkout (&lt;a href=&#34;https://developer.android.com/guide/topics/appwidgets)%5Bthis&#34;&gt;https://developer.android.com/guide/topics/appwidgets)[this&lt;/a&gt; guide] on the Android Developers Page.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;iOS&lt;/summary&gt; &#xA; &lt;h3&gt;Add a Widget to your App in Xcode&lt;/h3&gt; &#xA; &lt;p&gt;Add a widget extension by going &lt;code&gt;File &amp;gt; Target &amp;gt; Widget Extension&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/ABausG/home_widget/raw/main/.github/assets/widget_extension.png?raw=true&#34; alt=&#34;Widget Extension&#34;&gt;&lt;/p&gt; &#xA; &lt;h3&gt;Add GroupId&lt;/h3&gt; &#xA; &lt;p&gt;You need to add a groupId to the App and the Widget Extension&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note: in order to add groupIds you need a paid Apple Developer Account&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Go to your &lt;a href=&#34;https://developer.apple.com/account/resources/identifiers/list/applicationGroup&#34;&gt;Apple Developer Account&lt;/a&gt; and add a new group Add this group to you Runner and the Widget Extension inside XCode &lt;code&gt;Signing &amp;amp; Capabilities &amp;gt; App Groups &amp;gt; +&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/ABausG/home_widget/raw/main/.github/assets/target.png?raw=true&#34; alt=&#34;Build Targets&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;(To swap between your App, and the Extension change the Target)&lt;/p&gt; &#xA; &lt;h3&gt;Sync CFBundleVersion (optional)&lt;/h3&gt; &#xA; &lt;p&gt;This step is optional, this will sync the widget extension build version with your app version, so you don&#39;t get warnings of mismatch version from App Store Connect when uploading your app.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/ABausG/home_widget/raw/main/.github/assets/build_phases.png?raw=true&#34; alt=&#34;Build Phases&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;In your Runner (app) target go to &lt;code&gt;Build Phases &amp;gt; + &amp;gt; New Run Script Phase&lt;/code&gt; and add the following script:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;generatedPath=&#34;$SRCROOT/Flutter/Generated.xcconfig&#34;&#xA;versionNumber=$(grep FLUTTER_BUILD_NAME $generatedPath | cut -d &#39;=&#39; -f2)&#xA;buildNumber=$(grep FLUTTER_BUILD_NUMBER $generatedPath | cut -d &#39;=&#39; -f2)&#xA;/usr/libexec/PlistBuddy -c &#34;Set :CFBundleVersion $buildNumber&#34; &#34;$SRCROOT/HomeExampleWidget/Info.plist&#34;&#xA;/usr/libexec/PlistBuddy -c &#34;Set :CFBundleShortVersionString $versionNumber&#34; &#34;$SRCROOT/HomeExampleWidget/Info.plist&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Replace &lt;code&gt;HomeExampleWidget&lt;/code&gt; with the name of the widget extension folder that you have created.&lt;/p&gt; &#xA; &lt;h3&gt;Write your Widget&lt;/h3&gt; &#xA; &lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/ABausG/home_widget/main/example/ios/HomeWidgetExample/HomeWidgetExample.swift&#34;&gt;Example App&lt;/a&gt; for an Implementation of a Widget A more detailed overview on how to write Widgets for iOS 14 can fbe found on the &lt;a href=&#34;https://developer.apple.com/documentation/swiftui/widget&#34;&gt;Apple Developer documentation&lt;/a&gt;. In order to access the Data send with Flutter can be access with&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let data = UserDefaults.init(suiteName:&#34;YOUR_GROUP_ID&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;For iOS, you need to call &lt;code&gt;HomeWidget.setAppGroupId(&#39;YOUR_GROUP_ID&#39;);&lt;/code&gt; Without this you won&#39;t be able to share data between your App and the Widget and calls to &lt;code&gt;saveWidgetData&lt;/code&gt; and &lt;code&gt;getWidgetData&lt;/code&gt; will return an error&lt;/p&gt; &#xA;&lt;h3&gt;Save Data&lt;/h3&gt; &#xA;&lt;p&gt;In order to save Data call &lt;code&gt;HomeWidget.saveWidgetData&amp;lt;String&amp;gt;(&#39;id&#39;, data)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update a Widget&lt;/h3&gt; &#xA;&lt;p&gt;In order to force a reload of the HomeScreenWidget you need to call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;HomeWidget.updateWidget(&#xA;    name: &#39;HomeWidgetExampleProvider&#39;,&#xA;    androidName: &#39;HomeWidgetExampleProvider&#39;,&#xA;    iOSName: &#39;HomeWidgetExample&#39;,&#xA;    qualifiedAndroidName: &#39;com.example.app.HomeWidgetExampleProvider&#39;,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The name for Android will be chosen by checking &lt;code&gt;qualifiedAndroidName&lt;/code&gt;, falling back to &lt;code&gt;&amp;lt;packageName&amp;gt;.androidName&lt;/code&gt; and if that was not provided it will fallback to &lt;code&gt;&amp;lt;packageName&amp;gt;.name&lt;/code&gt;. This Name needs to be equal to the Classname of the &lt;a href=&#34;https://raw.githubusercontent.com/ABausG/home_widget/main/#Write-your-Widget&#34;&gt;WidgetProvider&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The name for iOS will be chosen by checking &lt;code&gt;iOSName&lt;/code&gt; if that was not provided it will fallback to &lt;code&gt;name&lt;/code&gt;. This name needs to be equal to the Kind specified in you Widget&lt;/p&gt; &#xA;&lt;h3&gt;Retrieve Data&lt;/h3&gt; &#xA;&lt;p&gt;To retrieve the current Data saved in the Widget call &lt;code&gt;HomeWidget.getWidgetData&amp;lt;String&amp;gt;(&#39;id&#39;, defaultValue: data)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Background Update&lt;/h3&gt; &#xA;&lt;p&gt;As the methods of HomeWidget are static it is possible to use HomeWidget in the background to update the Widget even when the App is in the background.&lt;/p&gt; &#xA;&lt;p&gt;The example App is using the &lt;a href=&#34;https://pub.dev/packages/workmanager&#34;&gt;flutter_workmanager&lt;/a&gt; plugin to achieve this. Please follow the Setup Instructions for flutter_workmanager (or your preferred background code execution plugin). Most notably make sure that Plugins get registered in iOS in order to be able to communicate with the HomeWidget Plugin. In case of flutter_workmanager this achieved by adding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;WorkmanagerPlugin.setPluginRegistrantCallback { registry in&#xA;    GeneratedPluginRegistrant.register(with: registry)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to &lt;a href=&#34;https://raw.githubusercontent.com/ABausG/home_widget/main/example/ios/Runner/AppDelegate.swift&#34;&gt;AppDelegate.swift&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Clicking&lt;/h3&gt; &#xA;&lt;p&gt;To detect if the App has been initially started by clicking the Widget you can call &lt;code&gt;HomeWidget.initiallyLaunchedFromHomeWidget()&lt;/code&gt; if the App was already running in the Background you can receive these Events by listening to &lt;code&gt;HomeWidget.widgetClicked&lt;/code&gt;. Both methods will provide Uris, so you can easily send back data from the Widget to the App to for example navigate to a content page.&lt;/p&gt; &#xA;&lt;p&gt;In order for these methods to work you need to follow these steps:&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;.widgetUrl&lt;/code&gt; to your WidgetComponent&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Text(entry.message)&#xA;    .font(.body)&#xA;    .widgetURL(URL(string: &#34;homeWidgetExample://message?message=\(entry.message)&amp;amp;homeWidget&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to only detect Widget Links you need to add the queryParameter&lt;code&gt;homeWidget&lt;/code&gt; to the URL&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;p&gt;Add an &lt;code&gt;IntentFilter&lt;/code&gt; to the &lt;code&gt;Activity&lt;/code&gt; Section in your &lt;code&gt;AndroidManifest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;intent-filter&amp;gt;&#xA;    &amp;lt;action android:name=&#34;es.antonborri.home_widget.action.LAUNCH&#34; /&amp;gt;&#xA;&amp;lt;/intent-filter&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your WidgetProvider add a PendingIntent to your View using &lt;code&gt;HomeWidgetLaunchIntent.getActivity&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val pendingIntentWithData = HomeWidgetLaunchIntent.getActivity(&#xA;        context,&#xA;        MainActivity::class.java,&#xA;        Uri.parse(&#34;homeWidgetExample://message?message=$message&#34;))&#xA;setOnClickPendingIntent(R.id.widget_message, pendingIntentWithData)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Background Click&lt;/h3&gt; &#xA;&lt;p&gt;Android allows interactive elements in HomeScreenWidgets. This allows to for example add a refresh button on a widget. With home_widget you can use this by following these steps:&lt;/p&gt; &#xA;&lt;h4&gt;Android/Native Part&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the necessary Receiver and Service to you &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file &lt;pre&gt;&lt;code&gt;&amp;lt;receiver android:name=&#34;es.antonborri.home_widget.HomeWidgetBackgroundReceiver&#34;&amp;gt;&#xA;    &amp;lt;intent-filter&amp;gt;&#xA;        &amp;lt;action android:name=&#34;es.antonborri.home_widget.action.BACKGROUND&#34; /&amp;gt;&#xA;    &amp;lt;/intent-filter&amp;gt;&#xA;&amp;lt;/receiver&amp;gt;&#xA;&amp;lt;service android:name=&#34;es.antonborri.home_widget.HomeWidgetBackgroundService&#34;&#xA;    android:permission=&#34;android.permission.BIND_JOB_SERVICE&#34; android:exported=&#34;true&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;HomeWidgetBackgroundIntent.getBroadcast&lt;/code&gt; PendingIntent to the View you want to add a click listener to &lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val backgroundIntent = HomeWidgetBackgroundIntent.getBroadcast(&#xA;    context,&#xA;    Uri.parse(&#34;homeWidgetExample://titleClicked&#34;)&#xA;)&#xA;setOnClickPendingIntent(R.id.widget_title, backgroundIntent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Dart&lt;/h4&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Write a &lt;strong&gt;static&lt;/strong&gt; function that takes a Uri as an argument. This will get called when a user clicks on the View &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void backgroundCallback(Uri data) {&#xA;  // do something with data&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Register the callback function by calling &lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;HomeWidget.registerBackgroundCallback(backgroundCallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>yang991178/fluent-reader-lite</title>
    <updated>2022-08-22T01:33:59Z</updated>
    <id>tag:github.com,2022-08-22:/yang991178/fluent-reader-lite</id>
    <link href="https://github.com/yang991178/fluent-reader-lite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simplistic mobile RSS client built with Flutter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;120&#34; height=&#34;120&#34; src=&#34;https://github.com/yang991178/fluent-reader/raw/master/build/icon.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Fluent Reader Lite&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A simplistic mobile RSS client&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/app/id1549611796&#34;&gt;Download from App Store&lt;/a&gt; ($1.99. This will support development and help cover the $99 annual fee.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testflight.apple.com/join/9fwRtH8C&#34;&gt;Download from TestFlight&lt;/a&gt; (Free. Inactive testers may be removed due to TestFlight restrictions.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=me.hyliu.fluent_reader_lite&#34;&gt;Download from Google Play&lt;/a&gt; ($1.99)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yang991178/fluent-reader-lite/releases&#34;&gt;Download APK from GitHub Releases&lt;/a&gt; (Free)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Desktop App&lt;/h3&gt; &#xA;&lt;p&gt;The repo of the full-featured desktop app &lt;a href=&#34;https://github.com/yang991178/fluent-reader&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/yang991178/fluent-reader-lite/raw/master/assets/demo/demo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Fluent Reader Lite is a simplistic, cross-platform, and open-source RSS client.&lt;/p&gt; &#xA;&lt;p&gt;The following self-hosted and commercial RSS services are supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fever API (TT-RSS Fever plugin, FreshRSS, Miniflux, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Google Reader API (Bazqux Reader, The Old Reader, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Inoreader&lt;/li&gt; &#xA; &lt;li&gt;Feedbin (official or self-hosted)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dark mode for UI and reading.&lt;/li&gt; &#xA; &lt;li&gt;Configure sources to load full content or webpage by default.&lt;/li&gt; &#xA; &lt;li&gt;A dedicated subscriptions tab organized by latest updates with article titles.&lt;/li&gt; &#xA; &lt;li&gt;Search for local articles or filter by read status.&lt;/li&gt; &#xA; &lt;li&gt;Organize subscriptions with groups.&lt;/li&gt; &#xA; &lt;li&gt;Support for two-pane view and multitasking on iPad and Android tablets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following features from the desktop app are &lt;strong&gt;NOT&lt;/strong&gt; present:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local RSS support and source / group management.&lt;/li&gt; &#xA; &lt;li&gt;Importing or exporting OPML files, full application data backup &amp;amp; restoration.&lt;/li&gt; &#xA; &lt;li&gt;Regular expression rules that mark articles as they arrive.&lt;/li&gt; &#xA; &lt;li&gt;Fetch articles in the background and send push notifications.&lt;/li&gt; &#xA; &lt;li&gt;Keyboard shortcuts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;Help make Fluent Reader better by reporting bugs or opening feature requests through &lt;a href=&#34;https://github.com/yang991178/fluent-reader-lite/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also help internationalize the app by providing &lt;a href=&#34;https://github.com/yang991178/fluent-reader-lite/tree/master/lib/l10n&#34;&gt;translations into additional languages&lt;/a&gt;. You can read more about ARB files &lt;a href=&#34;https://localizely.com/flutter-arb&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://github.com/google/app-resource-bundle/wiki/ApplicationResourceBundleSpecification&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you enjoy using this app, consider supporting its development by donating through &lt;a href=&#34;https://www.paypal.me/yang991178&#34;&gt;Paypal&lt;/a&gt; or &lt;a href=&#34;https://hyliu.me/fluent-reader/imgs/alipay.jpg&#34;&gt;Alipay&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://flutter.dev/docs&#34;&gt;Flutter documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Developed with&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter/flutter&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postlight/mercury-parser&#34;&gt;Mercury Parser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;BSD&lt;/p&gt;</summary>
  </entry>
</feed>