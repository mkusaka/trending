<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-08T01:30:43Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>florent37/Flutter-AssetsAudioPlayer</title>
    <updated>2025-05-08T01:30:43Z</updated>
    <id>tag:github.com,2025-05-08:/florent37/Flutter-AssetsAudioPlayer</id>
    <link href="https://github.com/florent37/Flutter-AssetsAudioPlayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Play simultaneously music/audio from assets/network/file directly from Flutter, compatible with android / ios / web / macos, displays notifications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🎧 assets_audio_player 🔊&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dartlang.org/packages/assets_audio_player&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/assets_audio_player.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Solido/awesome-flutter&#34;&gt; &lt;img alt=&#34;Awesome Flutter&#34; src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-android%20%7C%20ios%20%7C%20macos%20%7C%20web%20-%23989898&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codemagic.io/apps/5ed8002fe1907b001c67db52/5ed8002fe1907b001c67db51/latest_build&#34;&gt;&lt;img src=&#34;https://api.codemagic.io/apps/5ed8002fe1907b001c67db52/5ed8002fe1907b001c67db51/status_badge.svg?sanitize=true&#34; alt=&#34;Codemagic build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/florent37/flutter-assetsaudioplayer&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/florent37/flutter-assetsaudioplayer/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Play music/audio stored in assets files (simultaneously) directly from Flutter (android / ios / web / macos).&lt;/p&gt; &#xA;&lt;p&gt;You can also use play audio files from &lt;strong&gt;network&lt;/strong&gt; using their url, &lt;strong&gt;radios/livestream&lt;/strong&gt; and &lt;strong&gt;local files&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notification can be displayed on Android &amp;amp; iOS, and bluetooth actions are handled&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;flutter:&#xA;  assets:&#xA;    - assets/audios/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;AssetsAudioPlayer.newPlayer().open(&#xA;    Audio(&#34;assets/audios/song1.mp3&#34;),&#xA;    autoStart: true,&#xA;    showNotification: true,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/florent37/Flutter-AssetsAudioPlayer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/florent37/Flutter-AssetsAudioPlayer/master/medias/sample1.png&#34; alt=&#34;sample1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/florent37/Flutter-AssetsAudioPlayer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/florent37/Flutter-AssetsAudioPlayer/master/medias/sample2.png&#34; alt=&#34;sample1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📥 Import&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  assets_audio_player: ^3.0.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Works with &lt;code&gt;flutter: &#34;&amp;gt;=3.3.0&#34;&lt;/code&gt;, be sure to upgrade your sdk&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You like the package ? buy me a kofi :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/A160LCC&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://az743702.vo.msecnd.net/cdn/kofi1.png?v=0&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Audio Source&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🗄️ Asset file (asset path)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🌐 Network file (url)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📁 Local file (path)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📻 Network LiveStream / radio (url) &lt;br&gt; (&lt;b&gt;Default, HLS, Dash, SmoothStream&lt;/b&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎶 Multiple players&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💽 Open Playlist&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;💬System notification&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🎧 Bluetooth actions&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔕 Respect System silent mode&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📞 Pause on phone call&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Commands&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;▶ Play&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏸ Pause&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏹ Stop&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏩ Seek(position)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏪⏩ SeekBy(position)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏩ Forward(speed)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏪ Rewind(speed)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏭ Next&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏮ Prev&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Widgets&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🐦 Audio Widget&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🐦 Widget Builders&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🐦 AudioPlayer Builders Extension&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Properties&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔁 Loop&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔀 Shuffle&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🔊 get/set Volume&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏩ get/set Play Speed&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⏩ get/set Pitch&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Listeners&lt;/th&gt; &#xA;   &lt;th&gt;Android&lt;/th&gt; &#xA;   &lt;th&gt;iOS&lt;/th&gt; &#xA;   &lt;th&gt;Web&lt;/th&gt; &#xA;   &lt;th&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻 Listener onReady(completeDuration)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻 Listener currentPosition&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻 Listener finished&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻 Listener buffering&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻 Listener volume&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻Listener Play Speed&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦻Listener Pitch&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;   &lt;td&gt;🚫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;📁 Import assets files&lt;/h1&gt; &#xA;&lt;p&gt;No needed to copy songs to a media cache, with assets_audio_player you can open them directly from the assets.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an audio directory in your assets (not necessary named &#34;audios&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Declare it inside your pubspec.yaml&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;flutter:&#xA;  assets:&#xA;    - assets/audios/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🛠️ Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final assetsAudioPlayer = AssetsAudioPlayer();&#xA;&#xA;assetsAudioPlayer.open(&#xA;    Audio(&#34;assets/audios/song1.mp3&#34;),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also play &lt;em&gt;network songs&lt;/em&gt; from &lt;em&gt;url&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final assetsAudioPlayer = AssetsAudioPlayer();&#xA;&#xA;try {&#xA;    await assetsAudioPlayer.open(&#xA;        Audio.network(&#34;http://www.mysite.com/myMp3file.mp3&#34;),&#xA;    );&#xA;} catch (t) {&#xA;    //mp3 unreachable&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;LiveStream / Radio&lt;/em&gt; from &lt;em&gt;url&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The main difference with network, if you pause/play, on livestream it will resume to present duration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final assetsAudioPlayer = AssetsAudioPlayer();&#xA;&#xA;try {&#xA;    await assetsAudioPlayer.open(&#xA;        Audio.liveStream(MY_LIVESTREAM_URL),&#xA;    );&#xA;} catch (t) {&#xA;    //stream unreachable&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And play &lt;em&gt;songs from file&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;//create a new player&#xA;final assetsAudioPlayer = AssetsAudioPlayer();&#xA;&#xA;assetsAudioPlayer.open(&#xA;    Audio.file(FILE_URI),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for file uri, please look at &lt;a href=&#34;https://pub.dev/packages/path_provider&#34;&gt;https://pub.dev/packages/path_provider&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.playOrPause();&#xA;assetsAudioPlayer.play();&#xA;assetsAudioPlayer.pause();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.seek(Duration to);&#xA;assetsAudioPlayer.seekBy(Duration by);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.forwardRewind(double speed);&#xA;//if positive, forward, if negative, rewind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.stop();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Notifications&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/florent37/Flutter-AssetsAudioPlayer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/florent37/Flutter-AssetsAudioPlayer/master/medias/notification_android.png&#34; alt=&#34;notification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/florent37/Flutter-AssetsAudioPlayer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/florent37/Flutter-AssetsAudioPlayer/master/medias/notification_iOS.png&#34; alt=&#34;notification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;on iOS, it will use &lt;code&gt;MPNowPlayingInfoCenter&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add metas inside your audio&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final audio = Audio.network(&#34;/assets/audio/country.mp3&#34;,&#xA;    metas: Metas(&#xA;            title:  &#34;Country&#34;,&#xA;            artist: &#34;Florent Champigny&#34;,&#xA;            album: &#34;CountryAlbum&#34;,&#xA;            image: MetasImage.asset(&#34;assets/images/country.jpg&#34;), //can be MetasImage.network&#xA;          ),&#xA;   );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;open with &lt;code&gt;showNotification: true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_player.open(audio, showNotification: true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom notification&lt;/h2&gt; &#xA;&lt;p&gt;Custom icon (android only)&lt;/p&gt; &#xA;&lt;h3&gt;By ResourceName&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you added those icons inside your &lt;code&gt;android/res/drawable&lt;/code&gt; &lt;strong&gt;!!! not on flutter assets !!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;await _assetsAudioPlayer.open(&#xA;        myAudio,&#xA;        showNotification: true,&#xA;        notificationSettings: NotificationSettings(&#xA;            customStopIcon: AndroidResDrawable(name: &#34;ic_stop_custom&#34;),&#xA;            customPauseIcon: AndroidResDrawable(name:&#34;ic_pause_custom&#34;),&#xA;            customPlayIcon: AndroidResDrawable(name:&#34;ic_play_custom&#34;),&#xA;            customPrevIcon: AndroidResDrawable(name:&#34;ic_prev_custom&#34;),&#xA;            customNextIcon: AndroidResDrawable(name:&#34;ic_next_custom&#34;),&#xA;        )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And don&#39;t forget tell proguard to keep those resources for release mode&lt;/p&gt; &#xA;&lt;p&gt;(part Keeping Resources)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/resource-shrinking&#34;&gt;https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/resource-shrinking&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;resources xmlns:tools=&#34;http://schemas.android.com/tools&#34;&#xA;tools:keep=&#34;@drawable/ic_next_custom, @drawable/ic_prev_custom, @drawable/ic_pause_custom, @drawable/ic_play_custom, @drawable/ic_stop_custom&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;By Manifest&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your icon into your android&#39;s &lt;code&gt;res&lt;/code&gt; folder (android/app/src/main/res)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reference this icon into your AndroidManifest (android/app/src/main/AndroidManifest.xml)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data&#xA;     android:name=&#34;assets.audio.player.notification.icon&#34;&#xA;     android:resource=&#34;@drawable/ic_music_custom&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change actions icons&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;meta-data&#xA;    android:name=&#34;assets.audio.player.notification.icon.play&#34;&#xA;    android:resource=&#34;@drawable/ic_play_custom&#34;/&amp;gt;&#xA;&amp;lt;meta-data&#xA;    android:name=&#34;assets.audio.player.notification.icon.pause&#34;&#xA;    android:resource=&#34;@drawable/ic_pause_custom&#34;/&amp;gt;&#xA;&amp;lt;meta-data&#xA;    android:name=&#34;assets.audio.player.notification.icon.stop&#34;&#xA;    android:resource=&#34;@drawable/ic_stop_custom&#34;/&amp;gt;&#xA;&amp;lt;meta-data&#xA;    android:name=&#34;assets.audio.player.notification.icon.next&#34;&#xA;    android:resource=&#34;@drawable/ic_next_custom&#34;/&amp;gt;&#xA;&amp;lt;meta-data&#xA;    android:name=&#34;assets.audio.player.notification.icon.prev&#34;&#xA;    android:resource=&#34;@drawable/ic_prev_custom&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handle notification click (android)&lt;/h2&gt; &#xA;&lt;p&gt;Add in main&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AssetsAudioPlayer.setupNotificationsOpenAction((notification) {&#xA;    //custom action&#xA;    return true; //true : handled, does not notify others listeners&#xA;                 //false : enable others listeners to handle it&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then if you want a custom action on widget&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AssetsAudioPlayer.addNotificationOpenAction((notification) {&#xA;   //custom action&#xA;   return false; //true : handled, does not notify others listeners&#xA;                 //false : enable others listeners to handle it&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom actions&lt;/h2&gt; &#xA;&lt;p&gt;You can enable/disable a notification action&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;open(AUDIO,&#xA;   showNotification: true,&#xA;   notificationSettings: NotificationSettings(&#xA;       prevEnabled: false, //disable the previous button&#xA;&#xA;       //and have a custom next action (will disable the default action)&#xA;       customNextAction: (player) {&#xA;         print(&#34;next&#34;);&#xA;       }&#xA;   )&#xA;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update audio&#39;s metas / notification content&lt;/h2&gt; &#xA;&lt;p&gt;After your audio creation, just call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;audio.updateMetas(&#xA;       player: _assetsAudioPlayer, //add the player if the audio is actually played&#xA;       title: &#34;My new title&#34;,&#xA;       artist: &#34;My new artist&#34;,&#xA;       //if I not provide a new album, it keep the old one&#xA;       image: MetasImage.network(&#xA;         //my new image url&#xA;       ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bluetooth Actions&lt;/h2&gt; &#xA;&lt;p&gt;You have to enable notification to make them work&lt;/p&gt; &#xA;&lt;p&gt;Available remote commands :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Play / Pause&lt;/li&gt; &#xA; &lt;li&gt;Next&lt;/li&gt; &#xA; &lt;li&gt;Prev&lt;/li&gt; &#xA; &lt;li&gt;Stop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HeadPhone Strategy&lt;/h2&gt; &#xA;&lt;p&gt;(Only for Android for now)&lt;/p&gt; &#xA;&lt;p&gt;while opening a song/playlist, add a strategy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;assetsAudioPlayer.open(&#xA;   ...&#xA;  headPhoneStrategy: HeadPhoneStrategy.pauseOnUnplug,&#xA;  //headPhoneStrategy: HeadPhoneStrategy.none, //default&#xA;  //headPhoneStrategy: HeadPhoneStrategy.pauseOnUnplugPlayOnPlug,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to make it work on bluetooth too, you&#39;ll have to add the BLUETOOTH permission inside your AndroidManifest.xml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.BLUETOOTH&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;⛓ Play in parallel / simultaneously&lt;/h1&gt; &#xA;&lt;p&gt;You can create new AssetsAudioPlayer using AssetsAudioPlayer.newPlayer(), which will play songs in a different native Media Player&lt;/p&gt; &#xA;&lt;p&gt;This will enable to play two songs simultaneously&lt;/p&gt; &#xA;&lt;p&gt;You can have as many player as you want !&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;///play 3 songs in parallel&#xA;AssetsAudioPlayer.newPlayer().open(&#xA;    Audio(&#34;assets/audios/song1.mp3&#34;)&#xA;);&#xA;AssetsAudioPlayer.newPlayer().open(&#xA;    Audio(&#34;assets/audios/song2.mp3&#34;)&#xA;);&#xA;&#xA;//another way, with create, open, play &amp;amp; dispose the player on finish&#xA;AssetsAudioPlayer.playAndForget(&#xA;    Audio(&#34;assets/audios/song3.mp3&#34;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each player has an unique generated &lt;code&gt;id&lt;/code&gt;, you can retrieve or create them manually using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final player = AssetsAudioPlayer.withId(id: &#34;MY_UNIQUE_ID&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;🗄️ Playlist&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.open(&#xA;  Playlist(&#xA;    audios: [&#xA;      Audio(&#34;assets/audios/song1.mp3&#34;),&#xA;      Audio(&#34;assets/audios/song2.mp3&#34;)&#xA;    ]&#xA;  ),&#xA;  loopMode: LoopMode.playlist //loop the full playlist&#xA;);&#xA;&#xA;assetsAudioPlayer.next();&#xA;assetsAudioPlayer.prev();&#xA;assetsAudioPlayer.playlistPlayAtIndex(1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Audio Widget&lt;/h2&gt; &#xA;&lt;p&gt;If you want a more flutter way to play audio, try the &lt;code&gt;AudioWidget&lt;/code&gt; !&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/florent37/Flutter-AssetsAudioPlayer&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/florent37/Flutter-AssetsAudioPlayer/master/medias/audio_widget.gif&#34; alt=&#34;sample&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;//inside a stateful widget&#xA;&#xA;bool _play = false;&#xA;&#xA;@override&#xA;Widget build(BuildContext context) {&#xA;  return AudioWidget.assets(&#xA;     path: &#34;assets/audios/country.mp3&#34;,&#xA;     play: _play,&#xA;     child: RaisedButton(&#xA;           child: Text(&#xA;               _play ? &#34;pause&#34; : &#34;play&#34;,&#xA;           ),&#xA;           onPressed: () {&#xA;               setState(() {&#xA;                 _play = !_play;&#xA;               });&#xA;           }&#xA;      ),&#xA;      onReadyToPlay: (duration) {&#xA;          //onReadyToPlay&#xA;      },&#xA;      onPositionChanged: (current, duration) {&#xA;          //onPositionChanged&#xA;      },&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How to 🛑 stop 🛑 the AudioWidget ?&lt;/p&gt; &#xA;&lt;p&gt;Just remove the Audio from the tree ! Or simply keep &lt;code&gt;play: false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎧 Listeners&lt;/h2&gt; &#xA;&lt;p&gt;All listeners exposes Streams Using RxDart, AssetsAudioPlayer exposes some listeners as ValueObservable (Observable that provides synchronous access to the last emitted item);&lt;/p&gt; &#xA;&lt;h3&gt;🎵 Current song&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;//The current playing audio, filled with the total song duration&#xA;assetsAudioPlayer.current //ValueObservable&amp;lt;PlayingAudio&amp;gt;&#xA;&#xA;//Retrieve directly the current played asset&#xA;final PlayingAudio playing = assetsAudioPlayer.current.value;&#xA;&#xA;//Listen to the current playing song&#xA;assetsAudioPlayer.current.listen((playingAudio){&#xA;    final asset = playingAudio.assetAudio;&#xA;    final songDuration = playingAudio.duration;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⌛ Current song duration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;//Listen to the current playing song&#xA;final duration = assetsAudioPlayer.current.value.duration;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⏳ Current position (in seconds)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.currentPosition //ValueObservable&amp;lt;Duration&amp;gt;&#xA;&#xA;//retrieve directly the current song position&#xA;final Duration position = assetsAudioPlayer.currentPosition.value;&#xA;&#xA;return StreamBuilder(&#xA;    stream: assetsAudioPlayer.currentPosition,&#xA;    builder: (context, asyncSnapshot) {&#xA;        final Duration duration = asyncSnapshot.data;&#xA;        return Text(duration.toString());&#xA;    }),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use a PlayerBuilder !&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PlayerBuilder.currentPosition(&#xA;     player: _assetsAudioPlayer,&#xA;     builder: (context, duration) {&#xA;       return Text(duration.toString());&#xA;     }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Player Builder Extension&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_assetsAudioPlayer.builderCurrentPosition(&#xA;     builder: (context, duration) {&#xA;       return Text(duration.toString());&#xA;     }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;▶ IsPlaying&lt;/h3&gt; &#xA;&lt;p&gt;boolean observable representing the current mediaplayer playing state&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.isPlaying // ValueObservable&amp;lt;bool&amp;gt;&#xA;&#xA;//retrieve directly the current player state&#xA;final bool playing = assetsAudioPlayer.isPlaying.value;&#xA;&#xA;//will follow the AssetsAudioPlayer playing state&#xA;return StreamBuilder(&#xA;    stream: assetsAudioPlayer.isPlaying,&#xA;    builder: (context, asyncSnapshot) {&#xA;        final bool isPlaying = asyncSnapshot.data;&#xA;        return Text(isPlaying ? &#34;Pause&#34; : &#34;Play&#34;);&#xA;    }),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use a PlayerBuilder !&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PlayerBuilder.isPlaying(&#xA;     player: _assetsAudioPlayer,&#xA;     builder: (context, isPlaying) {&#xA;       return Text(isPlaying ? &#34;Pause&#34; : &#34;Play&#34;);&#xA;     }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Player Builder Extension&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_assetsAudioPlayer.builderIsPlaying(&#xA;     builder: (context, isPlaying) {&#xA;       return Text(isPlaying ? &#34;Pause&#34; : &#34;Play&#34;);&#xA;     }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔊 Volume&lt;/h3&gt; &#xA;&lt;p&gt;Change the volume (between 0.0 &amp;amp; 1.0)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.setVolume(0.5);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The media player can follow the system &#34;volume mode&#34; (vibrate, muted, normal) Simply set the &lt;code&gt;respectSilentMode&lt;/code&gt; optional parameter as &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_player.open(PLAYABLE, respectSilentMode: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/media/AudioManager.html?hl=fr#getRingerMode()&#34;&gt;https://developer.android.com/reference/android/media/AudioManager.html?hl=fr#getRingerMode()&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/avfoundation/avaudiosessioncategorysoloambient&#34;&gt;https://developer.apple.com/documentation/avfoundation/avaudiosessioncategorysoloambient&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Listen the volume&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return StreamBuilder(&#xA;    stream: assetsAudioPlayer.volume,&#xA;    builder: (context, asyncSnapshot) {&#xA;        final double volume = asyncSnapshot.data;&#xA;        return Text(&#34;volume : $volume&#34;);&#xA;    }),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use a PlayerBuilder !&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;PlayerBuilder.volume(&#xA;     player: _assetsAudioPlayer,&#xA;     builder: (context, volume) {&#xA;       return Text(&#34;volume : $volume&#34;);&#xA;     }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;✋ Finished&lt;/h3&gt; &#xA;&lt;p&gt;Called when the current song has finished to play,&lt;/p&gt; &#xA;&lt;p&gt;it gives the Playing audio that just finished&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.playlistAudioFinished //ValueObservable&amp;lt;Playing&amp;gt;&#xA;&#xA;assetsAudioPlayer.playlistAudioFinished.listen((Playing playing){&#xA;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Called when the complete playlist has finished to play&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.playlistFinished //ValueObservable&amp;lt;bool&amp;gt;&#xA;&#xA;assetsAudioPlayer.playlistFinished.listen((finished){&#xA;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔁 Looping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;final LoopMode loopMode = assetsAudioPlayer.loop;&#xA;// possible values&#xA;// LoopMode.none : not looping&#xA;// LoopMode.single : looping a single audio&#xA;// LoopMode.playlist : looping the fyll playlist&#xA;&#xA;assetsAudioPlayer.setLoopMode(LoopMode.single);&#xA;&#xA;assetsAudioPlayer.loopMode.listen((loopMode){&#xA;    //listen to loop&#xA;})&#xA;&#xA;assetsAudioPlayer.toggleLoop(); //toggle the value of looping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🏃 Play Speed&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.setPlaySpeed(1.5);&#xA;&#xA;assetsAudioPlayer.playSpeed.listen((playSpeed){&#xA;    //listen to playSpeed&#xA;})&#xA;&#xA;//change play speed for a particular Audio&#xA;&#xA;Audio audio = Audio.network(&#xA;    url,&#xA;    playSpeed: 1.5&#xA;);&#xA;assetsAudioPlayer.open(audio);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🎙️ Pitch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dart&#34;&gt;assetsAudioPlayer.setPitch(1.2);&#xA;&#xA;assetsAudioPlayer.pitch.listen((pitch){&#xA;    //listen to pitch&#xA;})&#xA;&#xA;//change pitch for a particular Audio&#xA;&#xA;Audio audio = Audio.network(&#xA;    url,&#xA;    pitch: 1.2&#xA;);&#xA;assetsAudioPlayer.open(audio);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Error Handling&lt;/h1&gt; &#xA;&lt;p&gt;By default, on playing error, it stop the audio&lt;/p&gt; &#xA;&lt;p&gt;BUT you can add a custom behavior&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_player.onErrorDo = (handler){&#xA;  handler.player.stop();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open another audio&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_player.onErrorDo = (handler){&#xA;  handler.player.open(ANOTHER_AUDIO);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try to open again on same position&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_player.onErrorDo = (handler){&#xA;  handler.player.open(&#xA;      handler.playlist.copyWith(&#xA;        startIndex: handler.playlistIndex&#xA;      ),&#xA;      seek: handler.currentPosition&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Network Policies (android/iOS/macOS)&lt;/h1&gt; &#xA;&lt;p&gt;Android only allow HTTPS calls, you will have an error if you&#39;re using HTTP, don&#39;t forget to add INTERNET permission and seet &lt;code&gt;usesCleartextTraffic=&#34;true&#34;&lt;/code&gt; in your &lt;strong&gt;AndroidManifest.xml&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;manifest ...&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;    &amp;lt;application&#xA;        ...&#xA;        android:usesCleartextTraffic=&#34;true&#34;&#xA;        ...&amp;gt;&#xA;        ...&#xA;    &amp;lt;/application&amp;gt;&#xA;&amp;lt;/manifest&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;iOS only allow HTTPS calls, you will have an error if you&#39;re using HTTP, don&#39;t forget to edit your &lt;strong&gt;info.plist&lt;/strong&gt; and set &lt;code&gt;NSAppTransportSecurity&lt;/code&gt; to &lt;code&gt;NSAllowsArbitraryLoads&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable http calls on macOs, you have to add input/output calls capabilities into &lt;code&gt;info.plist&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;key&amp;gt;UIBackgroundModes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;string&amp;gt;audio&amp;lt;/string&amp;gt;&#xA;    &amp;lt;string&amp;gt;fetch&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;com.apple.security.network.client&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and in your&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Runner/DebugProfile.entitlements&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.security.network.client&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complete &lt;code&gt;Runner/DebugProfile.entitlements&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&#x9;&amp;lt;key&amp;gt;com.apple.security.app-sandbox&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;true/&amp;gt;&#xA;&#x9;&amp;lt;key&amp;gt;com.apple.security.cs.allow-jit&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;true/&amp;gt;&#xA;&#x9;&amp;lt;key&amp;gt;com.apple.security.network.server&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;true/&amp;gt;&#xA;&#x9;&amp;lt;key&amp;gt;com.apple.security.network.client&amp;lt;/key&amp;gt;&#xA;&#x9;&amp;lt;true/&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;🎶 Musics&lt;/h1&gt; &#xA;&lt;p&gt;All musics used in the samples came from &lt;a href=&#34;https://www.freemusicarchive.org/&#34;&gt;https://www.freemusicarchive.org/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>