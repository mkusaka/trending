<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:28:47Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>andrey-ushakov/esc_pos_utils</title>
    <updated>2023-09-17T01:28:47Z</updated>
    <id>tag:github.com,2023-09-17:/andrey-ushakov/esc_pos_utils</id>
    <link href="https://github.com/andrey-ushakov/esc_pos_utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Basic Flutter/Dart classes for ESC/POS printing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;esc_pos_utils&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/esc_pos_utils&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/esc_pos_utils&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Base Flutter/Dart classes for ESC/POS printing. &lt;code&gt;Generator&lt;/code&gt; class generates ESC/POS commands that can be sent to a thermal printer.&lt;/p&gt; &#xA;&lt;p&gt;This is the &#34;base&#34; library that used for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flutter WiFi/Ethernet printing: &lt;a href=&#34;https://github.com/andrey-ushakov/esc_pos_printer&#34;&gt;esc_pos_printer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flutter Bluetooth printing: &lt;a href=&#34;https://github.com/andrey-ushakov/esc_pos_bluetooth&#34;&gt;esc_pos_bluetooth&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Main Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect to Wi-Fi / Ethernet printers&lt;/li&gt; &#xA; &lt;li&gt;Simple text printing using &lt;em&gt;text&lt;/em&gt; method&lt;/li&gt; &#xA; &lt;li&gt;Tables printing using &lt;em&gt;row&lt;/em&gt; method&lt;/li&gt; &#xA; &lt;li&gt;Text styling: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;size, align, bold, reverse, underline, different fonts, turn 90°&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Print images&lt;/li&gt; &#xA; &lt;li&gt;Print barcodes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UPC-A, UPC-E, JAN13 (EAN13), JAN8 (EAN8), CODE39, ITF (Interleaved 2 of 5), CODABAR (NW-7), CODE128&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Paper cut (partial, full)&lt;/li&gt; &#xA; &lt;li&gt;Beeping (with different duration)&lt;/li&gt; &#xA; &lt;li&gt;Paper feed, reverse feed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Your printer may not support some of the presented features (some styles, partial/full paper cutting, reverse feed, barcodes...).&lt;/p&gt; &#xA;&lt;h2&gt;Generate a Ticket&lt;/h2&gt; &#xA;&lt;h3&gt;Simple ticket with styles:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;List&amp;lt;int&amp;gt; testTicket() {&#xA;  final List&amp;lt;int&amp;gt; bytes = [];&#xA;  // Using default profile&#xA;  final profile = await CapabilityProfile.load();&#xA;  final generator = Generator(PaperSize.mm80, profile);&#xA;  List&amp;lt;int&amp;gt; bytes = [];&#xA;&#xA;  bytes += generator.text(&#xA;      &#39;Regular: aA bB cC dD eE fF gG hH iI jJ kK lL mM nN oO pP qQ rR sS tT uU vV wW xX yY zZ&#39;);&#xA;  bytes += generator.text(&#39;Special 1: àÀ èÈ éÉ ûÛ üÜ çÇ ôÔ&#39;,&#xA;      styles: PosStyles(codeTable: PosCodeTable.westEur));&#xA;  bytes += generator.text(&#39;Special 2: blåbærgrød&#39;,&#xA;      styles: PosStyles(codeTable: PosCodeTable.westEur));&#xA;&#xA;  bytes += generator.text(&#39;Bold text&#39;, styles: PosStyles(bold: true));&#xA;  bytes += generator.text(&#39;Reverse text&#39;, styles: PosStyles(reverse: true));&#xA;  bytes += generator.text(&#39;Underlined text&#39;,&#xA;      styles: PosStyles(underline: true), linesAfter: 1);&#xA;  bytes += generator.text(&#39;Align left&#39;, styles: PosStyles(align: PosAlign.left));&#xA;  bytes += generator.text(&#39;Align center&#39;, styles: PosStyles(align: PosAlign.center));&#xA;  bytes += generator.text(&#39;Align right&#39;,&#xA;      styles: PosStyles(align: PosAlign.right), linesAfter: 1);&#xA;&#xA;  bytes += generator.text(&#39;Text size 200%&#39;,&#xA;      styles: PosStyles(&#xA;        height: PosTextSize.size2,&#xA;        width: PosTextSize.size2,&#xA;      ));&#xA;&#xA;  bytes += generator.feed(2);&#xA;  bytes += generator.cut();&#xA;  return bytes;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Print a table row:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;generator.row([&#xA;    PosColumn(&#xA;      text: &#39;col3&#39;,&#xA;      width: 3,&#xA;      styles: PosStyles(align: PosAlign.center, underline: true),&#xA;    ),&#xA;    PosColumn(&#xA;      text: &#39;col6&#39;,&#xA;      width: 6,&#xA;      styles: PosStyles(align: PosAlign.center, underline: true),&#xA;    ),&#xA;    PosColumn(&#xA;      text: &#39;col3&#39;,&#xA;      width: 3,&#xA;      styles: PosStyles(align: PosAlign.center, underline: true),&#xA;    ),&#xA;  ]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Print an image:&lt;/h3&gt; &#xA;&lt;p&gt;This package implements 3 ESC/POS functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ESC *&lt;/code&gt; - print in column format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GS v 0&lt;/code&gt; - print in bit raster format (obsolete)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GS ( L&lt;/code&gt; - print in bit raster format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that your printer may support only some of the above functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:io&#39;;&#xA;import &#39;package:image/image.dart&#39;;&#xA;&#xA;final ByteData data = await rootBundle.load(&#39;assets/logo.png&#39;);&#xA;final Uint8List bytes = data.buffer.asUint8List();&#xA;final Image image = decodeImage(bytes);&#xA;// Using `ESC *`&#xA;generator.image(image);&#xA;// Using `GS v 0` (obsolete)&#xA;generator.imageRaster(image);&#xA;// Using `GS ( L`&#xA;generator.imageRaster(image, imageFn: PosImageFn.graphics);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Print a Barcode:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final List&amp;lt;int&amp;gt; barData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 4];&#xA;generator.barcode(Barcode.upcA(barData));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Print a QR Code:&lt;/h3&gt; &#xA;&lt;p&gt;Using native ESC/POS commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;generator.qrcode(&#39;example.com&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To print a QR Code as an image (if your printer doesn&#39;t support native commands), add &lt;a href=&#34;https://pub.dev/packages/qr_flutter&#34;&gt;qr_flutter&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/packages/path_provider&#34;&gt;path_provider&lt;/a&gt; as a dependency in your &lt;code&gt;pubspec.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;String qrData = &#34;google.com&#34;;&#xA;const double qrSize = 200;&#xA;try {&#xA;  final uiImg = await QrPainter(&#xA;    data: qrData,&#xA;    version: QrVersions.auto,&#xA;    gapless: false,&#xA;  ).toImageData(qrSize);&#xA;  final dir = await getTemporaryDirectory();&#xA;  final pathName = &#39;${dir.path}/qr_tmp.png&#39;;&#xA;  final qrFile = File(pathName);&#xA;  final imgFile = await qrFile.writeAsBytes(uiImg.buffer.asUint8List());&#xA;  final img = decodeImage(imgFile.readAsBytesSync());&#xA;&#xA;  generator.image(img);&#xA;} catch (e) {&#xA;  print(e);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Code Tables&lt;/h2&gt; &#xA;&lt;p&gt;Different printers support different sets of code tables. Some printer models are defined in &lt;code&gt;CapabilityProfile&lt;/code&gt; class. So, if you want to change the default code table, it&#39;s important to choose the right profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// Xprinter XP-N160I&#xA;final profile = await CapabilityProfile.load(&#39;XP-N160I&#39;);&#xA;final generator = Generator(PaperSize.mm80, profile);&#xA;bytes += generator.setGlobalCodeTable(&#39;CP1252&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All available profiles can be retrieved by calling :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final profiles = await CapabilityProfile.getAvailableProfiles();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a CapabilityProfile to support your printer&#39;s model. A new profile should be added to &lt;code&gt;lib/resources/capabilities.json&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Test your printer and add it in the table: &lt;a href=&#34;https://github.com/andrey-ushakov/esc_pos_printer/raw/master/printers.md&#34;&gt;Wifi/Network printer&lt;/a&gt; or &lt;a href=&#34;https://github.com/andrey-ushakov/esc_pos_bluetooth/raw/master/printers.md&#34;&gt;Bluetooth printer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Test and report bugs&lt;/li&gt; &#xA; &lt;li&gt;Share your ideas about what could be improved (code optimization, new features...)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>flutter-form-builder-ecosystem/form_builder_phone_field</title>
    <updated>2023-09-17T01:28:47Z</updated>
    <id>tag:github.com,2023-09-17:/flutter-form-builder-ecosystem/form_builder_phone_field</id>
    <link href="https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field" rel="alternate"></link>
    <summary type="html">&lt;p&gt;International phone number field for FlutterFormBuilder package&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Form Builder Phone Field&lt;/h1&gt; &#xA;&lt;p&gt;International phone number field for &lt;a href=&#34;https://pub.dev/packages/flutter_form_builder&#34;&gt;flutter_form_builder&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pub.dev/packages/form_builder_phone_field&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/form_builder_phone_field?logo=flutter&amp;amp;style=for-the-badge&#34; alt=&#34;Pub Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/actions/workflows/base.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/flutter-form-builder-ecosystem/form_builder_phone_field/base.yaml?branch=main&amp;amp;logo=github&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/flutter-form-builder-ecosystem/form_builder_phone_field&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/flutter-form-builder-ecosystem/form_builder_phone_field?logo=codefactor&amp;amp;style=for-the-badge&#34; alt=&#34;CodeFactor Grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/flutter-form-builder-ecosystem/form_builder_phone_field/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/flutter-form-builder-ecosystem/form_builder_phone_field?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#basic-use&#34;&gt;Basic use&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#support&#34;&gt;Support&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#questions-and-answers&#34;&gt;Questions and answers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#donations&#34;&gt;Donations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#ecosystem&#34;&gt;Ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#thanks-to&#34;&gt;Thanks to&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Country selector&lt;/li&gt; &#xA; &lt;li&gt;Automatic parsing international number&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Configure dependency phone_number. More details &lt;a href=&#34;https://pub.dev/packages/phone_number#setup&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Basic use&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FormBuilderPhoneField(&#xA;  name: &#39;phone_number&#39;,&#xA;  decoration: const InputDecoration(&#xA;    labelText: &#39;Phone Number&#39;,&#xA;    hintText: &#39;Hint&#39;,&#xA;  ),&#xA;  priorityListByIsoCode: [&#39;KE&#39;],&#xA;  validator: FormBuilderValidators.compose([&#xA;    FormBuilderValidators.required(),&#xA;  ]),&#xA;),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pub.dev/packages/form_builder_phone_field/example&#34;&gt;pub.dev example tab&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/example/lib/main.dart&#34;&gt;github code&lt;/a&gt; for more details&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;You have some ways to contribute to this packages&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beginner: Reporting bugs or request new features&lt;/li&gt; &#xA; &lt;li&gt;Intermediate: Implement new features (from issues or not) and created pull requests&lt;/li&gt; &#xA; &lt;li&gt;Advanced: Join the &lt;a href=&#34;https://raw.githubusercontent.com/flutter-form-builder-ecosystem/form_builder_phone_field/main/#ecosystem&#34;&gt;organization&lt;/a&gt; like a member and help coding, manage issues, dicuss new features and other things&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/.github/raw/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Questions and answers&lt;/h3&gt; &#xA;&lt;p&gt;You can question or search answers on &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/discussions&#34;&gt;Github discussion&lt;/a&gt; or on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flutter-form-builder&#34;&gt;StackOverflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Donations&lt;/h3&gt; &#xA;&lt;p&gt;Donate or become a sponsor of Flutter Form Builder Ecosystem&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/flutter-form-builder-ecosystem&#34;&gt;&lt;img src=&#34;https://opencollective.com/flutter-form-builder-ecosystem/tiers/sponsor.svg?avatarHeight=56&#34; alt=&#34;Become a Sponsor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/issues/11&#34;&gt;Add complete web support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/issues/12&#34;&gt;Add visual examples&lt;/a&gt; (images, gifs, videos, sample application)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/issues&#34;&gt;Solve open issues&lt;/a&gt;, &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/labels/bug&#34;&gt;prioritizing bugs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Take a look to &lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem&#34;&gt;our awesome ecosystem&lt;/a&gt; and all packages in there&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/flutter-form-builder-ecosystem/form_builder_phone_field/graphs/contributors&#34;&gt;All constributors&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sangvaleap/app-flutter-online-course-clean-architecture-bloc</title>
    <updated>2023-09-17T01:28:47Z</updated>
    <id>tag:github.com,2023-09-17:/sangvaleap/app-flutter-online-course-clean-architecture-bloc</id>
    <link href="https://github.com/sangvaleap/app-flutter-online-course-clean-architecture-bloc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Online Course App - Flutter | Clean Architecture - Bloc&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Preview video: &lt;a href=&#34;https://youtu.be/DAdxI8mrTjI&#34;&gt;https://youtu.be/DAdxI8mrTjI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support my work: &lt;a href=&#34;https://www.patreon.com/sangvaleap&#34;&gt;https://www.patreon.com/sangvaleap&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.patreon.com/sangvaleap&#34;&gt;My Patreon&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/sangvaleap-vanny-353b25aa/&#34;&gt;My Linkedin&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/sangvaleap&#34;&gt;My Twitter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screen Shot 2022-02-16 at 8 28 31 PM&#34; src=&#34;https://user-images.githubusercontent.com/86506519/154279567-9b5677dd-984a-4096-8112-e02fbf5bab50.png&#34;&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screen Shot 2022-02-16 at 8 28 53 PM&#34; src=&#34;https://user-images.githubusercontent.com/86506519/154279582-a65b4792-3ed3-4b3c-8fc1-fb4b694224e7.png&#34;&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screen Shot 2022-02-16 at 8 29 57 PM&#34; src=&#34;https://user-images.githubusercontent.com/86506519/154279596-f5117821-fbe4-47d3-aef5-0ec75674ac04.png&#34;&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screen Shot 2022-02-16 at 8 29 10 PM&#34; src=&#34;https://user-images.githubusercontent.com/86506519/154279590-66ae8b8b-f70a-4f69-857e-f7c35129410a.png&#34;&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;Screen Shot 2022-02-16 at 8 30 26 PM&#34; src=&#34;https://user-images.githubusercontent.com/86506519/154279603-13a425c8-0b9a-4e53-a8ba-17ae40fc4035.png&#34;&gt; &#xA;&lt;img width=&#34;596&#34; alt=&#34;Screen Shot 2022-02-16 at 8 30 44 PM&#34; src=&#34;https://user-images.githubusercontent.com/86506519/154279628-e180bcc9-d225-46f6-8b1a-879bf4d99a2b.png&#34;&gt;</summary>
  </entry>
</feed>