<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-17T01:32:39Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JonLatane/jonline</title>
    <updated>2023-06-17T01:32:39Z</updated>
    <id>tag:github.com,2023-06-17:/JonLatane/jonline</id>
    <link href="https://github.com/JonLatane/jonline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Federated gRPC social network implemented in Rust/Tonic/Diesel with both Flutter and React (web+native) frontends. üêïüí©EZ to deploy to your k8s cluster.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jonline&lt;/h1&gt; &#xA;&lt;p&gt;Jonline is an open-source, community-scale social network designed to be capable of &#34;federating&#34; with other Jonline instances/communities, making sharing between local-size instances easy. Two demo instances are up at &lt;a href=&#34;https://jonline.io&#34;&gt;Jonline.io&lt;/a&gt; and &lt;a href=&#34;https://getj.online&#34;&gt;GetJ.online&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Statuses&lt;/h2&gt; &#xA;&lt;h3&gt;Deployments&lt;/h3&gt; &#xA;&lt;p&gt;These badges link to the communities&#39; &#34;About&#34; pages. The versions, names, and/or themes may be out of date due to how GitHub caches the images.&lt;/p&gt; &#xA;&lt;h4&gt;Continously Deployed (&#34;Preview Release&#34; Communities)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getj.online/about&#34;&gt;&lt;img src=&#34;https://getj.online/info_shield?nostore1&#34; alt=&#34;GetJ.online&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manually Deployed&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jonline.io/about&#34;&gt;&lt;img src=&#34;https://jonline.io/info_shield?nostore1&#34; alt=&#34;Jonline.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DockerHub&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/jonlatane/jonline/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/jonlatane/jonline?label=jonline&amp;amp;style=for-the-badge&#34; alt=&#34;DockerHub Server Images&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jonlatane/jonline_preview_generator/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/jonlatane/jonline_preview_generator?label=jonline_preview_generator&amp;amp;style=for-the-badge&#34; alt=&#34;DockerHub Preview Generator Images&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Continuous Delivery&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Workflow Status&lt;/th&gt; &#xA;   &lt;th&gt;Information&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/deploy_server.yml/badge.svg?sanitize=true&#34; alt=&#34;Server CD Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/deploy_server.yml&#34;&gt;Server Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/deploy_preview_generator.yml/badge.svg?sanitize=true&#34; alt=&#34;Preview Generator CD Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/deploy_preview_generator.yml&#34;&gt;Preview Generator Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Continuous Integration&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Workflow Status&lt;/th&gt; &#xA;   &lt;th&gt;Information&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/backend.yml/badge.svg?sanitize=true&#34; alt=&#34;Rust Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/backend.yml&#34;&gt;Rust Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/tamagui_web.yml/badge.svg?sanitize=true&#34; alt=&#34;Tamagui Web Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/tamagui_web.yml&#34;&gt;Tamagui Web Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_web.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter Web Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_web.yml&#34;&gt;Flutter Web Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_ios.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter iOS Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_ios.yml&#34;&gt;Flutter iOS Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_android.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter Android Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_android.yml&#34;&gt;Flutter Android Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_macos.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter macOS Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_macos.yml&#34;&gt;Flutter macOS Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_windows.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter Windows Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_windows.yml&#34;&gt;Flutter Windows Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_linux.yml/badge.svg?sanitize=true&#34; alt=&#34;Flutter Linux Build Badge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonlatane/jonline/actions/workflows/flutter_linux.yml&#34;&gt;Flutter Linux Build Results&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#jonline&#34;&gt;Jonline&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#statuses&#34;&gt;Statuses&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#deployments&#34;&gt;Deployments&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#continously-deployed-preview-release-communities&#34;&gt;Continously Deployed (&#34;Preview Release&#34; Communities)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#manually-deployed&#34;&gt;Manually Deployed&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#dockerhub&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#continuous-delivery&#34;&gt;Continuous Delivery&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#what-is-jonline&#34;&gt;What is Jonline?&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#why-jonline-vs-mastodonopensocial&#34;&gt;Why Jonline vs. Mastodon/OpenSocial?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#why-not-jonline&#34;&gt;Why &lt;em&gt;not&lt;/em&gt; Jonline?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#protocol-documentation&#34;&gt;Protocol documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#quick-deploy-to-your-own-cluster&#34;&gt;Quick deploy to your own cluster&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#deploying-to-other-namespaces&#34;&gt;Deploying to other namespaces&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#validating-your-deployment&#34;&gt;Validating your deployment&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#kubernetes-service-statuses&#34;&gt;Kubernetes service statuses&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#external-ip-management&#34;&gt;External IP Management&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#pointing-a-domain-at-your-deployment&#34;&gt;Pointing a domain at your deployment&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#securing-your-deployment&#34;&gt;Securing your deployment&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#deleting-your-deployment&#34;&gt;Deleting your deployment&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#motivations&#34;&gt;Motivations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#scaling-social-software-via-federation&#34;&gt;Scaling Social Software via Federation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#features-overview&#34;&gt;Features Overview&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#media&#34;&gt;Media&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#posts&#34;&gt;Posts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#future-features&#34;&gt;Future features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Jonline?&lt;/h2&gt; &#xA;&lt;p&gt;Jonline is a network of, and a protocol for, social networks. Use cases include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neighborhoods, communities, or cities&lt;/li&gt; &#xA; &lt;li&gt;(Ex-)Coworkers wanting a private channel to chat&lt;/li&gt; &#xA; &lt;li&gt;Run/bike/etc. clubs&lt;/li&gt; &#xA; &lt;li&gt;App user groups&lt;/li&gt; &#xA; &lt;li&gt;Online game clans&lt;/li&gt; &#xA; &lt;li&gt;Board game groups&lt;/li&gt; &#xA; &lt;li&gt;D&amp;amp;D parties&lt;/li&gt; &#xA; &lt;li&gt;Local concert listings&lt;/li&gt; &#xA; &lt;li&gt;Event venue calendars&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The core model of Jonline is that &lt;em&gt;each of these communities is run as its own Jonline instance&lt;/em&gt;. Each of these instances and their data are literally &lt;em&gt;owned&lt;/em&gt; by the organization (or a chosen &#34;IT admin person&#34; and/or &#34;moderation team&#34; for it). Finally, the same person&#39;s &lt;em&gt;accounts on all of these instances can be federated&lt;/em&gt; (if the user chooses, and dependent upon server configurations and permissions, of course). Federation is simply a means to let, say, a user, Jeff, see their D&amp;amp;D DM also knows the guy from run club who left his wallet, &lt;em&gt;even if Jeff and the DM are not friends on the run club network&lt;/em&gt;, but &lt;em&gt;only if the DM chooses&lt;/em&gt; to federate their identity across both those networks.&lt;/p&gt; &#xA;&lt;p&gt;One way to think of Jonline is as social media meets the email server model (I use Gmail, you use your ISP&#39;s email, we can still talk to each other), with a bit of the ListServ model too (it&#39;s &lt;em&gt;very&lt;/em&gt; easy to set up a neighborhood Jonline instance, Posts function effectively identically to ListServ messages, and Events are basically just a nice extra feature ListServ doesn&#39;t have).&lt;/p&gt; &#xA;&lt;p&gt;Another way to think of Jonline is that it&#39;s like Slack or Discord, except instead of messages/channels/voice chats, it&#39;s just for Posts and Events. And your Jonline instance is code you can actually see running on equipment you own, not proprietary code running on a corporation&#39;s servers.&lt;/p&gt; &#xA;&lt;p&gt;A core goal is to make Jonline dogshit easy (üêïüí©EZ) for anyone else to deploy to any Kubernetes provider of their choosing (and to fork and modify). It&#39;s also (optimistically) simple and straightforward enough to serve as a starter for many projects, so long as they retain the &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/LICENSE.md&#34;&gt;GPLv3 license Jonline is released under&lt;/a&gt;. All you need is a Kubernetes (k8s) cluster, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;kubectl&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, and a few minutes to get the &lt;a href=&#34;https://hub.docker.com/repository/docker/jonlatane/jonline&#34;&gt;prebuilt image&lt;/a&gt; up and running.&lt;/p&gt; &#xA;&lt;p&gt;Why this goal for this project? The tl;dr is that it keeps our social media data decentralized and in the hands of people we at least kinda trust. See &lt;a href=&#34;https://raw.githubusercontent.com/JonLatane/jonline/main/#scaling-social-software-via-federation&#34;&gt;Scaling Social Software via Federation&lt;/a&gt; for more rants tho.&lt;/p&gt; &#xA;&lt;h3&gt;Why Jonline vs. Mastodon/OpenSocial?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jonline&#39;s UI is hopefully designed to let users key into the federated features of the app much more easily.&lt;/li&gt; &#xA; &lt;li&gt;Jonline deploy scripts are designed to be so easy to deploy to Kubernetess you can be braindead and get it up and running for your website. Further, it&#39;s all just &lt;code&gt;Makefile&lt;/code&gt;s and &lt;code&gt;kubectl&lt;/code&gt; commands (though maybe that&#39;s a con for the reader üòÅ).&lt;/li&gt; &#xA; &lt;li&gt;Jonline&#39;s server images are structured so you only need one LoadBalancer (the things you typically pay for) per deploy/website, and really only one web-facing container (though it defaults to 2) per deploy. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Within the containers themselves, everything is handled by a single Rust BE binary. No scripting runtime. So containers are small, even with useful Linux tools like &lt;code&gt;psql&lt;/code&gt; and &lt;code&gt;grpcurl&lt;/code&gt; built in. They start &lt;em&gt;really fast&lt;/em&gt;, and Kubernetes failovers work very smoothly.&lt;/li&gt; &#xA;   &lt;li&gt;And the Rust BE is, after all, Rust; it&#39;s &lt;em&gt;fast&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To be specific, at the time of this writing: &lt;a href=&#34;https://hub.docker.com/r/jonlatane/jonline/tags&#34;&gt;Jonline&#39;s Docker images are currently 105MB&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/tootsuite/mastodon/tags&#34;&gt;Mastodon&#39;s are 500+MB&lt;/a&gt;, and &lt;a href=&#34;https://hub.docker.com/r/goalgorilla/open_social_docker/tags&#34;&gt;OpenSocial&#39;s are over 1GB&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The new Tamagui FE is also demonstrably lightweight.&lt;/li&gt; &#xA; &lt;li&gt;A major feature I &lt;em&gt;hope&lt;/em&gt; to differentiate on is Events, but it&#39;s not done yet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The goal of all this is to make it as easy as possible for local businesses to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Engage with customers on a platform customers enjoy.&lt;/li&gt; &#xA; &lt;li&gt;Use Jonline to share information about customers between each other, in a way customers can easily understand and consent to, without a central corporation being involved. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: make it easy for Kathy to share her band&#39;s show with the folks at her yoga studio, by cross-posting it to her yoga studio profile&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why &lt;em&gt;not&lt;/em&gt; Jonline?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s not done.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s near-0% test coverage.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s just my own (Jon) thing I&#39;m doing in my spare time.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s no community for ongoing support yet. It&#39;s just me, Jon üôÉ But do get in contact if you&#39;re trying to use this!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Protocol documentation&lt;/h2&gt; &#xA;&lt;p&gt;A benefit of being built with gRPC is that &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/docs/protocol.md#jonline-Jonline&#34;&gt;Jonline&#39;s generated Markdown documentation is pretty readable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick deploy to your own cluster&lt;/h2&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;, you can be setup in a few minutes. (If you&#39;re looking for a quick, fairly priced, scalable Kubernetes host, &lt;a href=&#34;https://m.do.co/c/1eaa3f9e536c&#34;&gt;I recommend DigitalOcean&lt;/a&gt;.) First make sure &lt;code&gt;kubectl&lt;/code&gt; is setup correctly and your instance has the &lt;code&gt;jonline&lt;/code&gt; namespace available with &lt;code&gt;kubectl get services&lt;/code&gt; and &lt;code&gt;kubectl get namespace jonline&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get services&#xA;NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE&#xA;kubernetes   ClusterIP   10.245.0.1   &amp;lt;none&amp;gt;        443/TCP   161d&#xA;$ kubectl get namespace jonline&#xA;Error from server (NotFound): namespaces &#34;jonline&#34; not found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To begin setup, first clone this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/JonLatane/jonline.git&#xA;cd jonline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, from the repo root, to create Postgres, Minio and two load-balanced Jonline servers in the namespace &lt;code&gt;jonline&lt;/code&gt; (plus a few recurring jobs), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make deploy_data_create deploy_be_create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You&#39;ve created Minio and Postgres servers along with an &lt;em&gt;unsecured Jonline instance&lt;/em&gt; where &lt;em&gt;&lt;strong&gt;passwords and auth tokens will be sent in plain text&lt;/strong&gt;&lt;/em&gt; (You should secure it immediately if you care about any data/people, but feel free to play around with it until you do! Simply &lt;code&gt;make deploy_data_delete deploy_data_create deploy_be_restart&lt;/code&gt; to reset your server&#39;s data.) Because Jonline is a very tiny Rust service, it will all be up within seconds. Your Kubenetes provider will probably take some time to assign you an IP, though.&lt;/p&gt; &#xA;&lt;h3&gt;Deploying to other namespaces&lt;/h3&gt; &#xA;&lt;p&gt;To deploy anything to a namespace other than &lt;code&gt;jonline&lt;/code&gt;, simply add the environment variable &lt;code&gt;NAMESPACE=my_namespace&lt;/code&gt;. So, for the initial deploy, &lt;code&gt;NAMESPACE=my_namespace make deploy_data_create deploy_be_create&lt;/code&gt; to deploy to &lt;code&gt;my_namespace&lt;/code&gt;. This should work for any of the &lt;code&gt;make deploy_*&lt;/code&gt; targets in Jonline.&lt;/p&gt; &#xA;&lt;h3&gt;Validating your deployment&lt;/h3&gt; &#xA;&lt;h4&gt;Kubernetes service statuses&lt;/h4&gt; &#xA;&lt;p&gt;To see &lt;em&gt;everything&lt;/em&gt; you just deployed (minio, postgres, Jonline server and background cron jobs), run &lt;code&gt;make deploy_get_all&lt;/code&gt;. It should look something like this (with fewer jobs after a fresh install, probably):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make deploy_get_all&#xA;kubectl get all -n jonline&#xA;NAME                                                  READY   STATUS        RESTARTS   AGE&#xA;pod/delete-expired-tokens-27742795--1-nlkh6           0/1     Completed     0          11m&#xA;pod/delete-expired-tokens-27742800--1-tpplp           0/1     Completed     0          6m49s&#xA;pod/delete-expired-tokens-27742805--1-dgrsb           0/1     Completed     0          109s&#xA;pod/generate-preview-images-27721161--1-2hqgq         0/1     Error         0          15d&#xA;pod/generate-preview-images-27721161--1-6fwvq         0/1     Error         0          15d&#xA;pod/generate-preview-images-27721161--1-kxtvt         0/1     Error         0          15d&#xA;pod/generate-preview-images-27721161--1-mpnbv         0/1     Error         0          15d&#xA;pod/generate-preview-images-27721161--1-sg7rz         0/1     Error         0          15d&#xA;pod/generate-preview-images-27721161--1-t24th         0/1     Error         0          15d&#xA;pod/generate-preview-images-27742804--1-q8vdn         0/1     Completed     0          2m49s&#xA;pod/generate-preview-images-27742805--1-tbbvm         0/1     Completed     0          109s&#xA;pod/generate-preview-images-27742806--1-qrrnx         0/1     Completed     0          49s&#xA;pod/jonline-7f69759bd7-x64nd                          1/1     Running       0          30s&#xA;pod/jonline-7f69759bd7-x6scq                          1/1     Running       0          36s&#xA;pod/jonline-c4b798878-l6xhk                           1/1     Terminating   0          53m&#xA;pod/jonline-c4b798878-tg5qf                           1/1     Terminating   0          53m&#xA;pod/jonline-expired-token-cleanup-27742795--1-l8fzs   0/1     Completed     0          11m&#xA;pod/jonline-expired-token-cleanup-27742800--1-x6gch   0/1     Completed     0          6m49s&#xA;pod/jonline-expired-token-cleanup-27742805--1-hd2wj   0/1     Completed     0          109s&#xA;pod/jonline-minio-84685f9bd4-8knxq                    1/1     Running       0          4d22h&#xA;pod/jonline-postgres-bf6cb7679-l6mcb                  1/1     Running       0          53m&#xA;&#xA;NAME                       TYPE           CLUSTER-IP       EXTERNAL-IP       PORT(S)                                                     AGE&#xA;service/jonline            LoadBalancer   10.245.199.164   178.128.137.194   27707:30679/TCP,443:32401/TCP,80:30932/TCP,8000:30414/TCP   20d&#xA;service/jonline-minio      LoadBalancer   10.245.220.21    174.138.106.145   9000:32603/TCP                                              2d&#xA;service/jonline-postgres   ClusterIP      10.245.198.74    &amp;lt;none&amp;gt;            5432/TCP                                                    53m&#xA;&#xA;NAME                               READY   UP-TO-DATE   AVAILABLE   AGE&#xA;deployment.apps/jonline            2/2     2            2           20d&#xA;deployment.apps/jonline-minio      1/1     1            1           4d22h&#xA;deployment.apps/jonline-postgres   1/1     1            1           53m&#xA;&#xA;NAME                                         DESIRED   CURRENT   READY   AGE&#xA;replicaset.apps/jonline-54d8b475bb           0         0         0       4d6h&#xA;replicaset.apps/jonline-6b6655cd79           0         0         0       2d23h&#xA;replicaset.apps/jonline-6bb49b7c9c           0         0         0       24h&#xA;replicaset.apps/jonline-6c8899f68c           0         0         0       4d2h&#xA;replicaset.apps/jonline-6f5c8955f7           0         0         0       3d22h&#xA;replicaset.apps/jonline-74557695b            0         0         0       2d23h&#xA;replicaset.apps/jonline-77585dcf8            0         0         0       3d20h&#xA;replicaset.apps/jonline-7bff45979c           0         0         0       4d6h&#xA;replicaset.apps/jonline-7f69759bd7           2         2         2       38s&#xA;replicaset.apps/jonline-7f6d9d4cbd           0         0         0       3d23h&#xA;replicaset.apps/jonline-c4b798878            0         0         0       53m&#xA;replicaset.apps/jonline-minio-84685f9bd4     1         1         1       4d22h&#xA;replicaset.apps/jonline-postgres-bf6cb7679   1         1         1       53m&#xA;&#xA;NAME                                          SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE&#xA;cronjob.batch/delete-expired-tokens           */5 * * * *   False     0        113s            15d&#xA;cronjob.batch/generate-preview-images         * * * * *     False     0        53s             15d&#xA;cronjob.batch/jonline-expired-token-cleanup   0/5 * * * *   False     0        113s            20d&#xA;&#xA;NAME                                               COMPLETIONS   DURATION   AGE&#xA;job.batch/delete-expired-tokens-27742795           1/1           4s         11m&#xA;job.batch/delete-expired-tokens-27742800           1/1           4s         6m53s&#xA;job.batch/delete-expired-tokens-27742805           1/1           4s         113s&#xA;job.batch/generate-preview-images-27721161         0/1           15d        15d&#xA;job.batch/generate-preview-images-27742804         1/1           1s         2m53s&#xA;job.batch/generate-preview-images-27742805         1/1           4s         113s&#xA;job.batch/generate-preview-images-27742806         1/1           1s         53s&#xA;job.batch/jonline-expired-token-cleanup-27721007   0/1           15d        15d&#xA;job.batch/jonline-expired-token-cleanup-27742795   1/1           4s         11m&#xA;job.batch/jonline-expired-token-cleanup-27742800   1/1           5s         6m53s&#xA;job.batch/jonline-expired-token-cleanup-27742805   1/1           4s         113s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;External IP Management&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;make deploy_be_get_external_ip&lt;/code&gt; to see what your service&#39;s external IP is (until set, it will return &lt;code&gt;&amp;lt;pending&amp;gt;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make deploy_be_get_external_ip&#xA;188.166.203.133&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, once the IP is set, to test the service from your own computer, use &lt;code&gt;make deploy_test_be_unsecured&lt;/code&gt; to run tests against that external IP (you need &lt;code&gt;grpcurl&lt;/code&gt; for this; &lt;code&gt;brew install grpcurl&lt;/code&gt; works for macOS):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make deploy_test_be&#xA;Getting services on target server...&#xA;grpcurl -plaintext 188.166.203.133:27707 list&#xA;grpc.reflection.v1alpha.ServerReflection&#xA;jonline.Jonline&#xA;&#xA;Getting Jonline service version...&#xA;grpcurl -plaintext 188.166.203.133:27707 jonline.Jonline/GetServiceVersion&#xA;{&#xA;  &#34;version&#34;: &#34;0.1.18&#34;&#xA;}&#xA;&#xA;Getting available Jonline RPCs...&#xA;grpcurl -plaintext 188.166.203.133:27707 list jonline.Jonline&#xA;jonline.Jonline.CreateAccount&#xA;jonline.Jonline.GetCurrentUser&#xA;jonline.Jonline.GetServiceVersion&#xA;jonline.Jonline.Login&#xA;jonline.Jonline.AccessToken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You&#39;re up and running, although again, &lt;em&gt;it&#39;s an unsecured instance&lt;/em&gt; where &lt;em&gt;&lt;strong&gt;passwords and auth tokens will be sent in plain text&lt;/strong&gt;&lt;/em&gt;. Get that thing secured before you go telling people to use it!&lt;/p&gt; &#xA;&lt;h3&gt;Pointing a domain at your deployment&lt;/h3&gt; &#xA;&lt;p&gt;Before you can secure with LetsEncrypt, you need to point a domain at your Jonline instance&#39;s IP. Again, you can get the IP with &lt;code&gt;make deploy_be_get_external_ip&lt;/code&gt;, and create your DNS records with your DNS provider. If you&#39;re choosing a DNS provider, it&#39;s worth noting that &lt;a href=&#34;https://m.do.co/c/1eaa3f9e536c&#34;&gt;I recommend DigitalOcean DNS (sponsored link)&lt;/a&gt; and Jonline has scripts for it. However, any &lt;a href=&#34;http://cert-manager.io&#34;&gt;Cert-Manager&lt;/a&gt; supported DNS provider (for the LetsEncrypt dns01 challenge) should be pretty easy to set up.&lt;/p&gt; &#xA;&lt;p&gt;Continue to the next section for more info about setting up encryption and its relation to your DNS provider.&lt;/p&gt; &#xA;&lt;h3&gt;Securing your deployment&lt;/h3&gt; &#xA;&lt;p&gt;Jonline uses üêïüí©EZ, boring normal TLS certificate management to negotiate trust around its decentralized social network. If you&#39;re using DigitalOcean DNS you can be setup in a few minutes.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/JonLatane/jonline/tree/main/deploys/generated_certs&#34;&gt;&lt;code&gt;deploys/generated_certs/README.md&lt;/code&gt;&lt;/a&gt; for quick TLS setup instructions, either &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/deploys/generated_certs/README.md#use-cert-manager-recommended&#34;&gt;using Cert-Manager (recommended)&lt;/a&gt;, &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/deploys/generated_certs/README.md#use-certs-from-another-ca&#34;&gt;some other CA&lt;/a&gt; or &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/generated_certs/README.md#use-your-own-custom-ca&#34;&gt;your own custom CA&lt;/a&gt; (i.e. to distribute a secure, network-specific Flutter app and only let users in through that - custom CAs would break/disable the web app entirely).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/backend/README.md&#34;&gt;&lt;code&gt;backend/README.md&lt;/code&gt;&lt;/a&gt; for more detailed descriptions of how the deployment and TLS system works.&lt;/p&gt; &#xA;&lt;h3&gt;Deleting your deployment&lt;/h3&gt; &#xA;&lt;p&gt;You can delete your Jonline deployment piece by piece with &lt;code&gt;make deploy_be_delete deploy_db_delete&lt;/code&gt; or simply &lt;code&gt;kubectl delete namespace jonline&lt;/code&gt; assuming you deployed to the default namespace &lt;code&gt;jonline&lt;/code&gt;. Otherwise, assuming you deployed to &lt;code&gt;my_namespace&lt;/code&gt;, run &lt;code&gt;NAMESPACE=my_namespace make deploy_be_delete deploy_db_delete&lt;/code&gt; or simply &lt;code&gt;kubectl delete namespace my_namespace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivations&lt;/h2&gt; &#xA;&lt;p&gt;Current social media and messaging solutions all kind of suck. The early open source software (OSS) movement, dating to the 80s, was generally right about many of the problems that have arisen mixing a market(ing)-based economy with social computing. If we entrust our social interactions to applications with closed source run on private Alphabet, Meta, Apple, etc. servers, &lt;em&gt;of course we&#39;re going to see the disinformation and effective-advertising-driven consumerism that plague the world today&lt;/em&gt;. These models are profitable.&lt;/p&gt; &#xA;&lt;p&gt;Meanwhile, email has existed for a &lt;em&gt;long time&lt;/em&gt; even though it&#39;s not particularly profitable. Notably, email is a federated protocol. You can use any email provider to talk to anyone else on any other email provider. At any time, you can take all your message history to any other email provider. It&#39;s even easy to set up forwarding/notifying contacts of an address change &lt;em&gt;just because&lt;/em&gt; the email protocol is so standardized. And while, yes, spam was a problem at one point, the consequences of social media meeting data-driven advertising have been demonstrably more problematic and harder to solve via legislation.&lt;/p&gt; &#xA;&lt;p&gt;There isn&#39;t an open federated protocol like email for a complete posts+events+messaging package, even though this is essentially how most people use a large amount of their screen time. Lots of non-open, privatized implementations exist, like Facebook, Google+, and so forth. Other federated protocols like XMPP and CalDAV have replicated many of the communication features we use social media for, but are really meant for decades-old problems rather than what social media apps &#34;solve.&#34; XMPP and CalDAV have seen varying degrees of success, but like many protocols more than a decade old, they&#39;re a bit obscure and hard to use; most devs only use &#34;high-level&#34; libraries to do this kind of work. Fortunately, in the last decade or so, Google has built and refined a free way to &lt;a href=&#34;https://grpc.io&#34;&gt;create a protocol ourselves&lt;/a&gt; that works in virtually any language and is straightforward enough for most developers.&lt;/p&gt; &#xA;&lt;p&gt;So, Jonline is a shot at implementing federated, open social media, in a way that is easy for developers to modify and, perhaps most importantly, for &lt;em&gt;users to understand&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Scaling Social Software via Federation&lt;/h3&gt; &#xA;&lt;p&gt;At the same time as the closed source/private server model has grown due to its profitability, software complexity has grown immensely to handle scaling these &#34;modern&#34; applications. We have ETLs, data lakes, statistics, and near-infinite ways of easily creating &#34;trillions of points&#34;-size data sets that require hundreds of thousands of dollars&#39; worth of computing power and leveraging them for any number of rarely-publicly-disclosed purposes.&lt;/p&gt; &#xA;&lt;p&gt;But is scaling social media applications in this way &lt;em&gt;necessary for what people use these applications for&lt;/em&gt;? Or is it &lt;em&gt;the best way to keep data available for marketing and other private use&lt;/em&gt;? Or more simply: are we optimizing for profit, or for actual computer performance? There are many legitimate applications for, say, MapReduce across a huge privately-owned cluster, like making the entire Internet searchable. But for communicating with a network of friends you know in real life, I don&#39;t really think it&#39;s necessary.&lt;/p&gt; &#xA;&lt;p&gt;Jonline is a federated social network. The general idea is that it should provide a functional network with a single server, but that you should be able to communicate with users on other servers from a single account. This is handled via sharing of OAuth2 auth tokens between servers.&lt;/p&gt; &#xA;&lt;h2&gt;Features Overview&lt;/h2&gt; &#xA;&lt;p&gt;The intended use case for Jonline is thus:&lt;/p&gt; &#xA;&lt;p&gt;I (Jon üòäüëã) will run the Jonline server at &lt;a href=&#34;https://jonline.io&#34;&gt;https://jonline.io&lt;/a&gt;. It&#39;s fully open to the web and I&#39;m paying for the DB behind it and the k8s cluster on it. Friends who want to connect with me can register for an account and communicate with me and with each other.&lt;/p&gt; &#xA;&lt;h3&gt;Media&lt;/h3&gt; &#xA;&lt;p&gt;Jonline Media is essentially a content-type+bytes-based blob storage service. It&#39;s the reason Jonline requires S3/MinIO (though, if desired, Jonline could realistically support making MinIO optional). Unlike Posts and Events (and any other future &#34;high level types&#34;), Media is generally not shared directly. It is instead associated with Posts and Events (for media listings) as well as Users and Groups (for their avatars).&lt;/p&gt; &#xA;&lt;p&gt;Media is perhaps core-most part of Jonline&#39;s features, and the &lt;em&gt;only&lt;/em&gt; part of the APIS offered through HTTP as well as gRPC/gRPC-over-HTTP. (Hopefully the reasons for this are obvious: easy browser streaming and cache utilization for things like images.) Details on the HTTP APIs are in the &#34;Media&#34; section of the &lt;a href=&#34;https://github.com/JonLatane/jonline/raw/main/docs/protocol.md#jonline-Jonline&#34;&gt;protocol documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Posts&lt;/h3&gt; &#xA;&lt;p&gt;To keep things straightforward, all Posts in Jonline have global visibility. Twitter is easily the closest comparison.&lt;/p&gt; &#xA;&lt;p&gt;They may be enabled/disabled at the server level (which should hide the UI tab/web links in the future).&lt;/p&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;Events may be public, private, or private with friend invitations.&lt;/p&gt; &#xA;&lt;p&gt;In the future, Events should.&lt;/p&gt; &#xA;&lt;h2&gt;Future features&lt;/h2&gt; &#xA;&lt;p&gt;Potential future features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Payments &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Jonline should support user-to-user payments via Apple Pay, Venmo, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Products &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Products should be flexible enough to be used for neighborhood buy/sell groups, or for independent artists or artist collectives to have a web store presence (with community/social features around it).&lt;/li&gt; &#xA;   &lt;li&gt;Payments should be built upon Jonline Payments.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Transport &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For either products or humans.&lt;/li&gt; &#xA;   &lt;li&gt;Fulfillment side of Jonline Products.&lt;/li&gt; &#xA;   &lt;li&gt;Built atop OpenStreetMap, Google Maps, or possibly let the user/server choose implmementation.&lt;/li&gt; &#xA;   &lt;li&gt;OSS, social-baed competitor to Uber/Lyft.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dart-lang/web_socket_channel</title>
    <updated>2023-06-17T01:32:39Z</updated>
    <id>tag:github.com,2023-06-17:/dart-lang/web_socket_channel</id>
    <link href="https://github.com/dart-lang/web_socket_channel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;StreamChannel wrappers for WebSockets.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dart-lang/web_socket_channel/actions/workflows/test-package.yml&#34;&gt;&lt;img src=&#34;https://github.com/dart-lang/web_socket_channel/actions/workflows/test-package.yml/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;web_socket_channel&lt;/code&gt; package provides &lt;a href=&#34;https://pub.dev/packages/stream_channel&#34;&gt;&lt;code&gt;StreamChannel&lt;/code&gt;&lt;/a&gt; wrappers for WebSocket connections. It provides a cross-platform &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel-class.html&#34;&gt;&lt;code&gt;WebSocketChannel&lt;/code&gt;&lt;/a&gt; API, a cross-platform implementation of that API that communicates over an underlying &lt;a href=&#34;https://pub.dev/packages/stream_channel&#34;&gt;&lt;code&gt;StreamChannel&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel.io/IOWebSocketChannel-class.html&#34;&gt;an implementation&lt;/a&gt; that wraps &lt;code&gt;dart:io&lt;/code&gt;&#39;s &lt;code&gt;WebSocket&lt;/code&gt; class, and &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel.html/HtmlWebSocketChannel-class.html&#34;&gt;a similar implementation&lt;/a&gt; that wraps &lt;code&gt;dart:html&lt;/code&gt;&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;It also provides constants for the WebSocket protocol&#39;s pre-defined status codes in the &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/status/status-library.html&#34;&gt;&lt;code&gt;status.dart&lt;/code&gt; library&lt;/a&gt;. It&#39;s strongly recommended that users import this library with the prefix &lt;code&gt;status&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:web_socket_channel/web_socket_channel.dart&#39;;&#xA;import &#39;package:web_socket_channel/status.dart&#39; as status;&#xA;&#xA;main() async {&#xA;  final wsUrl = Uri.parse(&#39;ws://localhost:1234&#39;)&#xA;  var channel = WebSocketChannel.connect(wsUrl);&#xA;&#xA;  channel.stream.listen((message) {&#xA;    channel.sink.add(&#39;received!&#39;);&#xA;    channel.sink.close(status.goingAway);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;WebSocketChannel&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel-class.html&#34;&gt;&lt;code&gt;WebSocketChannel&lt;/code&gt;&lt;/a&gt; class&#39;s most important role is as the interface for WebSocket stream channels across all implementations and all platforms. In addition to the base &lt;code&gt;StreamChannel&lt;/code&gt; interface, it adds a &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/protocol.html&#34;&gt;&lt;code&gt;protocol&lt;/code&gt;&lt;/a&gt; getter that returns the negotiated protocol for the socket, as well as &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/closeCode.html&#34;&gt;&lt;code&gt;closeCode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/closeReason.html&#34;&gt;&lt;code&gt;closeReason&lt;/code&gt;&lt;/a&gt; getters that provide information about why the socket closed.&lt;/p&gt; &#xA;&lt;p&gt;The channel&#39;s &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/sink.html&#34;&gt;&lt;code&gt;sink&lt;/code&gt; property&lt;/a&gt; is also special. It returns a &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketSink-class.html&#34;&gt;&lt;code&gt;WebSocketSink&lt;/code&gt;&lt;/a&gt;, which is just like a &lt;code&gt;StreamSink&lt;/code&gt; except that its &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketSink/close.html&#34;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method supports optional &lt;code&gt;closeCode&lt;/code&gt; and &lt;code&gt;closeReason&lt;/code&gt; parameters. These parameters allow the caller to signal to the other socket exactly why they&#39;re closing the connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WebSocketChannel&lt;/code&gt; also works as a cross-platform implementation of the WebSocket protocol. The &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/WebSocketChannel.connect.html&#34;&gt;&lt;code&gt;WebSocketChannel.connect&lt;/code&gt; constructor&lt;/a&gt; connects to a listening server using the appropriate implementation for the platform. The &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/WebSocketChannel.html&#34;&gt;&lt;code&gt;WebSocketChannel()&lt;/code&gt; constructor&lt;/a&gt; takes an underlying &lt;a href=&#34;https://pub.dev/packages/stream_channel&#34;&gt;&lt;code&gt;StreamChannel&lt;/code&gt;&lt;/a&gt; over which it communicates using the WebSocket protocol. It also provides the static &lt;a href=&#34;https://pub.dev/documentation/web_socket_channel/latest/web_socket_channel/WebSocketChannel/signKey.html&#34;&gt;&lt;code&gt;signKey()&lt;/code&gt;&lt;/a&gt; method to make it easier to implement the &lt;a href=&#34;https://tools.ietf.org/html/rfc6455#section-4.2.2&#34;&gt;initial WebSocket handshake&lt;/a&gt;. These are used in the &lt;a href=&#34;https://pub.dev/packages/shelf_web_socket&#34;&gt;&lt;code&gt;shelf_web_socket&lt;/code&gt;&lt;/a&gt; package to support WebSockets in a cross-platform way.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hanguk0726/Avatar-Vision</title>
    <updated>2023-06-17T01:32:39Z</updated>
    <id>tag:github.com,2023-06-17:/hanguk0726/Avatar-Vision</id>
    <link href="https://github.com/hanguk0726/Avatar-Vision" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Avatar Vision.&lt;/h1&gt; &#xA;&lt;p&gt;A video diary app written in flutter and rust without ffmpeg.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/hanguk0726/nemo_public/raw/main/assets/avatar_vision_demo.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;The video diary scene in the movie Avatar influenced this project.&lt;/p&gt; &#xA;&lt;img src=&#34;https://drive.google.com/uc?export=view&amp;amp;id=11ktL4BpFbSuMIi2z2tqioAXa-1UvOwjE&#34; width=&#34;600&#34;&gt; &#xA;&lt;h1&gt;Anatomy of the app.&lt;/h1&gt; &#xA;&lt;p&gt;I wrote an article on the Medium for details.&lt;br&gt; &lt;a href=&#34;https://medium.com/@hangukshin/building-a-video-diary-app-written-in-flutter-and-rust-without-ffmpeg-8eb97a97fb49&#34;&gt;https://medium.com/@hangukshin/building-a-video-diary-app-written-in-flutter-and-rust-without-ffmpeg-8eb97a97fb49&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://drive.google.com/uc?export=view&amp;amp;id=1eGoCuF9NH13XzUyj5DosAOJu8SUbb9N9&#34; width=&#34;600&#34;&gt; &#xA;&lt;h1&gt;Platform&lt;/h1&gt; &#xA;&lt;p&gt;windows 64bit&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are welcome!&lt;/p&gt; &#xA;&lt;h1&gt;About assets&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flaticon.com/free-icons/eye&#34; title=&#34;eye icons&#34;&gt;Eye icons created by 3ab2ou - Flaticon&lt;/a&gt; &lt;br&gt; Image by &lt;a href=&#34;https://www.freepik.com/free-photo/portrait-smiley-woman-waving_12501660.htm#page=17&amp;amp;query=video%20meeting&amp;amp;position=9&amp;amp;from_view=keyword&amp;amp;track=ais&#34;&gt;Freepik&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>