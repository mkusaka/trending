<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-26T01:33:28Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>heshamerfan97/flutter_google_maps_example</title>
    <updated>2022-10-26T01:33:28Z</updated>
    <id>tag:github.com,2022-10-26:/heshamerfan97/flutter_google_maps_example</id>
    <link href="https://github.com/heshamerfan97/flutter_google_maps_example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter application to demonstrate how to implement Google maps and its advanced options in a flutter app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;google_maps_flutter_example&lt;/h1&gt; &#xA;&lt;p&gt;A new Flutter application to demonstrate how to implement flutter google maps in a flutter application and perfoem advanced tasks on it.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Map To the App&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Get an API key at &lt;a href=&#34;https://cloud.google.com/maps-platform/&#34;&gt;https://cloud.google.com/maps-platform/&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable Google Map SDK for each platform.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Developers Console.&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Choose the project that you want to enable Google Maps on.&lt;/li&gt; &#xA;   &lt;li&gt;Select the navigation menu and then select &#34;Google Maps&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;APIs&#34; under the Google Maps menu.&lt;/li&gt; &#xA;   &lt;li&gt;To enable Google Maps for Android, select &#34;Maps SDK for Android&#34; in the &#34;Additional APIs&#34; section, then select &#34;ENABLE&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;To enable Google Maps for iOS, select &#34;Maps SDK for iOS&#34; in the &#34;Additional APIs&#34; section, then select &#34;ENABLE&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Make sure the APIs you enabled are under the &#34;Enabled APIs&#34; section.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; inside &lt;code&gt;Application tag&lt;/code&gt; add your key&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;manifest ...&#xA;  &amp;lt;application ...&#xA;    &amp;lt;meta-data android:name=&#34;com.google.android.geo.API_KEY&#34;&#xA;               android:value=&#34;YOUR KEY HERE&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In &lt;code&gt;ios/Runner/AppDelegate.swift&lt;/code&gt; add the following lines&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import UIKit&#xA;import Flutter&#xA;import GoogleMaps&#xA;&#xA;@UIApplicationMain&#xA;@objc class AppDelegate: FlutterAppDelegate {&#xA;  override func application(&#xA;    _ application: UIApplication,&#xA;    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?&#xA;  ) -&amp;gt; Bool {&#xA;    GMSServices.provideAPIKey(&#34;YOUR KEY HERE&#34;)&#xA;    GeneratedPluginRegistrant.register(with: self)&#xA;    return super.application(application, didFinishLaunchingWithOptions: launchOptions)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;GoogleMapsWidget.dart&lt;/code&gt; inside the &lt;code&gt;lib/widget&lt;/code&gt; folder as normal widget and use it where you want.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Adding Custom Marker To the map&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/screenshots/custom_marker_screen.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Adding normal marker&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Declare a Set of Markers that will be shown on the map&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Set&amp;lt;Marker&amp;gt; _markers = Set&amp;lt;Marker&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add the set of markers to GoogleMap widget&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GoogleMap(&#xA;      markers: _markers,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Update the set of markers after the map is created in &lt;strong&gt;onMapCreated&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;GoogleMap(&#xA;      onMapCreated: (GoogleMapController controller) {&#xA;              _controller.complete(controller);&#xA;              _setMapPins([LatLng(30.029585, 31.022356)]);&#xA;            }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Using this function the map will be updated with the given markers on it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_setMapPins(List&amp;lt;LatLng&amp;gt; markersLocation) {&#xA;    _markers.clear();&#xA;    setState(() {&#xA;      markersLocation.forEach((markerLocation) {&#xA;        _markers.add(Marker(&#xA;          markerId: MarkerId(markerLocation.toString()),&#xA;          position: markerLocation,&#xA;        ));&#xA;      });&#xA;    });&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customizing the markers&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Declare a BitmapDescriptor which will hold the customIcon&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;late BitmapDescriptor customIcon;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Inside &lt;strong&gt;initState()&lt;/strong&gt; Assign the needed png to the &lt;strong&gt;customIcon&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@override&#xA;  void initState() {&#xA;    BitmapDescriptor.fromAssetImage(ImageConfiguration(size: Size(50, 50)),&#xA;            &#39;assets/images/marker_car.png&#39;)&#xA;        .then((icon) {&#xA;      customIcon = icon;&#xA;    });&#xA;    super.initState();&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Finally add the &lt;strong&gt;customIcon&lt;/strong&gt; to the marker&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Marker(&#xA;     markerId: MarkerId(markerLocation.toString()),&#xA;     position: markerLocation,&#xA;     icon: customIcon,&#xA;   )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Map Customization (Light/Dark mode)&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/screenshots/map_dark_light.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Prepare the map styles&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://mapstyle.withgoogle.com/&#34;&gt;https://mapstyle.withgoogle.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose the old version of the site by choosing &lt;strong&gt;No thanks, take me to the old style wizard&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You will find a lot of options, play with it until you get the desired style.&lt;/li&gt; &#xA; &lt;li&gt;Click Finish and a pop-up will show with the json code of your style, copy it and add it as a json file in your assets folder &lt;strong&gt;Don&#39;t forgot to mention it in your pubspec.yaml&lt;/strong&gt; &lt;strong&gt;You can find two styles in the project&#39;s assets folder&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adding styles to the map&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Declare Strings that will hold your style&#39;s json and a bool to control which mode is shown on the map&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;bool mapDarkMode = true;&#xA;late String _darkMapStyle;&#xA;late String _lightMapStyle;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In initState declare the styles&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future _loadMapStyles() async {&#xA;    _darkMapStyle = await rootBundle.loadString(&#39;assets/map_style/dark.json&#39;);&#xA;    _lightMapStyle = await rootBundle.loadString(&#39;assets/map_style/light.json&#39;);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;After creating the map, set the style&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;onMapCreated: (GoogleMapController controller) {&#xA;          _controller.complete(controller);&#xA;          _setMapPins([LatLng(30.029585, 31.022356)]);&#xA;          _setMapStyle();&#xA;        },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Future _setMapStyle() async {&#xA;    final controller = await _controller.future;&#xA;    if (mapDarkMode)&#xA;      controller.setMapStyle(_darkMapStyle);&#xA;    else&#xA;      controller.setMapStyle(_lightMapStyle);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To change the style we created a button on the map using the stack widget&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Positioned(&#xA;   top: 100,&#xA;   right: 30,&#xA;   child: Container(&#xA;     height: 30,&#xA;     width: 30,&#xA;     child: IconButton(&#xA;       icon: Icon(&#xA;         mapDarkMode ? Icons.brightness_4 : Icons.brightness_5,&#xA;         color: Theme.of(context).primaryColor,&#xA;       ),&#xA;       onPressed: () {&#xA;         setState(() {&#xA;           mapDarkMode = !mapDarkMode;&#xA;           _setMapStyle();&#xA;         });&#xA;       },&#xA;     ),&#xA;   )),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Drawing routes&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/screenshots/routing.jpg&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Activating Directions API&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Developers Console.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Choose the project that you want to enable Google Maps on.&lt;/li&gt; &#xA; &lt;li&gt;Select the navigation menu and then select &#34;Google Maps&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;APIs&#34; under the Google Maps menu.&lt;/li&gt; &#xA; &lt;li&gt;Enable Google Directions, select &#34;Directions API&#34; in the &#34;Additional APIs&#34; section, then select &#34;ENABLE&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the APIs you enabled are under the &#34;Enabled APIs&#34; section.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Adding route to the map&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Declare your start and end points&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final LatLng initialLatLng = LatLng(30.029585, 31.022356);&#xA;final LatLng destinationLatLng = LatLng(30.060567, 30.962413);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Declare polyline and polylineCoordinates&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Set&amp;lt;Polyline&amp;gt; _polyline = {};&#xA;List&amp;lt;LatLng&amp;gt; polylineCoordinates = [];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;After creating the map, set the polyline&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;onMapCreated: (GoogleMapController controller) {&#xA;          _controller.complete(controller);&#xA;          _setMapPins([LatLng(30.029585, 31.022356)]);&#xA;          _setMapStyle();&#xA;          _addPolyLines();&#xA;        },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_addPolyLines() {&#xA;    setState(() {&#xA;      lat = (initialLatLng.latitude + destinationLatLng.latitude)/2;&#xA;      lng= (initialLatLng.longitude + destinationLatLng.longitude)/2;&#xA;      _moveCamera(13.0);&#xA;      _setPolyLines();&#xA;    });&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To set polyline we send a get request to &lt;a href=&#34;https://www.maps.googleapis.com/maps/api/directions/json&#34;&gt;https://www.maps.googleapis.com/maps/api/directions/json&lt;/a&gt; with the start location, end location and the api key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final result = await MapRepository()&#xA;        .getRouteCoordinates(initialLatLng, destinationLatLng);&#xA;final route = result.data[&#34;routes&#34;][0][&#34;overview_polyline&#34;][&#34;points&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Then we translate the results to a polyline using the MapUtils&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;_polyline.add(Polyline(&#xA;    polylineId: PolylineId(&#34;tripRoute&#34;),&#xA;    //pass any string here&#xA;    width: 3,&#xA;    geodesic: true,&#xA;    points: MapUtils.convertToLatLng(MapUtils.decodePoly(route)),&#xA;    color: Theme.of(context).primaryColor));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Location&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/screenshots/live_location.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Preparing the app&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;a href=&#34;https://pub.dev/packages/location&#34;&gt;location: ^4.3.0&lt;/a&gt; in pubspec.yaml file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;android/app/src/main/AndroidManifest.xml&lt;/code&gt; add the following permissions&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;uses-permission android:name=&#34;android.permission.FOREGROUND_SERVICE&#34; /&amp;gt;&#xA;    &amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_BACKGROUND_LOCATION&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;android/app/build.gradle&lt;/code&gt; increase the minSdkVersion to 20&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;ios/runner/info.plist&lt;/code&gt; add the following lines&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plist&#34;&gt;&amp;lt;key&amp;gt;NSLocationAlwaysAndWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;we will use this to get user location&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;NSLocationAlwaysUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;we will use this to get user location&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;we will use this to get user location&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Current location service&lt;/h3&gt; &#xA;&lt;p&gt;In the services folder you can find &lt;a href=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/lib/services/current_location_service.dart&#34;&gt;current_location_service.dart&lt;/a&gt; where we enable the service&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;serviceEnabled = await  location.serviceEnabled();&#xA;    if(!serviceEnabled){&#xA;      serviceEnabled = await location.requestService();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and listen to location changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; currentLocationStream =&#xA;             location.onLocationChanged.listen((LocationData currentLocation) {&#xA;               return AppBloc.liveLocationCubit.updateUserLocation(currentLocation);&#xA;             });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;after getting the permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  PermissionStatus isGranted = await location.hasPermission();&#xA;      if (isGranted == PermissionStatus.granted )&#xA;        return true;&#xA;      else {&#xA;        PermissionStatus requestResult = await location.requestPermission();&#xA;        if (requestResult == PermissionStatus.granted)&#xA;          return true;&#xA;        return false;&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that for deployment, you need to tell the user (through UI) that you will be collecting his location even when the app is in background.&lt;/p&gt; &#xA;&lt;h3&gt;Using the current location service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using any state management you prefer &lt;a href=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/lib/controller/live_location_cubit.dart&#34;&gt;(Here using BLoC/Cubit)&lt;/a&gt; to control the service&lt;/li&gt; &#xA; &lt;li&gt;Every change in the service triggers the controller to update the UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   AppBloc.liveLocationCubit.updateUserLocation(currentLocation);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In your UI &lt;a href=&#34;https://raw.githubusercontent.com/heshamerfan97/flutter_google_maps_example/master/lib/widgets/google_maps_widget.dart&#34;&gt;(Here google_maps_widget.dart)&lt;/a&gt; listen to the controller changes and update UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  BlocListener&amp;lt;LiveLocationCubit, LocationData?&amp;gt;(&#xA;          listener: (context, liveLocation) {&#xA;            if (liveLocation != null) {&#xA;              _updateUserMarker(liveLocation);&#xA;            }&#xA;          },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   _updateUserMarker(LocationData currentLocation) {&#xA;       if (currentLocation.latitude != null &amp;amp;&amp;amp; currentLocation.longitude != null) {&#xA;         _markers.removeWhere((marker) =&amp;gt; marker.markerId.value == &#39;user&#39;);&#xA;         lat = currentLocation.latitude!;&#xA;         lng = currentLocation.longitude!;&#xA;         _moveCamera();&#xA;         setState(() {&#xA;           _markers.add(Marker(&#xA;               markerId: MarkerId(&#39;user&#39;),&#xA;               position: LatLng(currentLocation.latitude!, currentLocation.longitude!)));&#xA;         });&#xA;       }&#xA;     }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>