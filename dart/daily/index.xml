<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-30T01:33:15Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flutterboy20/space_app</title>
    <updated>2022-12-30T01:33:15Z</updated>
    <id>tag:github.com,2022-12-30:/flutterboy20/space_app</id>
    <link href="https://github.com/flutterboy20/space_app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Space app UI in Flutter!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Space App UI in Flutter&lt;/h1&gt; &#xA;&lt;p&gt;A new Flutter project.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project is a starting point for a Flutter application.&lt;/p&gt; &#xA;&lt;p&gt;A few resources to get you started if this is your first Flutter project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/get-started/codelab&#34;&gt;Lab: Write your first Flutter app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/cookbook&#34;&gt;Cookbook: Useful Flutter samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For help getting started with Flutter, view our &lt;a href=&#34;https://flutter.dev/docs&#34;&gt;online documentation&lt;/a&gt;, which offers tutorials, samples, guidance on mobile development, and a full API reference.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/85279360/151657808-9dda34ac-b649-49db-ad46-2e43c5494d51.mp4&#34;&gt;https://user-images.githubusercontent.com/85279360/151657808-9dda34ac-b649-49db-ad46-2e43c5494d51.mp4&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simc/crimson</title>
    <updated>2022-12-30T01:33:15Z</updated>
    <id>tag:github.com,2022-12-30:/simc/crimson</id>
    <link href="https://github.com/simc/crimson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, efficient and easy-to-use JSON parser and serializer for Dart.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/simc/crimson&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/simc/crimson/main/.github/crimson.svg?sanitize=true&#34; width=&#34;350&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pub.dev/packages/crimson&#34;&gt; &lt;img src=&#34;https://img.shields.io/pub/v/crimson?label=pub.dev&amp;amp;labelColor=333940&amp;amp;logo=dart&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/simc/crimson/actions/workflows/test.yaml&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/simc/crimson/test.yaml?branch=main&amp;amp;label=tests&amp;amp;labelColor=333940&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/simc/crimson&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/simc/crimson?logo=codecov&amp;amp;logoColor=fff&amp;amp;labelColor=333940&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/simonleier&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/simonleier?style=flat&amp;amp;label=Follow&amp;amp;color=1DA1F2&amp;amp;labelColor=333940&amp;amp;logo=twitter&amp;amp;logoColor=fff&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Fast, efficient and easy-to-use JSON parser and serializer for Dart.&lt;br&gt;Crimson does not verify your JSON!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üöß &lt;strong&gt;Crimson is still in early development and is not ready for production use. &lt;br&gt; Only parsing is supported for now&lt;/strong&gt; üöß&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üèéÔ∏è &lt;strong&gt;Fast&lt;/strong&gt;: Like really fast. Crimson parses JSON in a single pass.&lt;/li&gt; &#xA; &lt;li&gt;üåª &lt;strong&gt;Easy to use&lt;/strong&gt;: Crimson is designed to be easy to use and understand.&lt;/li&gt; &#xA; &lt;li&gt;üíÉ &lt;strong&gt;Flexible&lt;/strong&gt;: Crimson can partially parse and serialize JSON.&lt;/li&gt; &#xA; &lt;li&gt;ü•∂ &lt;strong&gt;Freezed support&lt;/strong&gt;: Crimson supports &lt;a href=&#34;https://pub.dev/packages/freezed&#34;&gt;freezed&lt;/a&gt; classes.&lt;/li&gt; &#xA; &lt;li&gt;ü™∂ &lt;strong&gt;Lightweight&lt;/strong&gt;: Crimson is lightweight and has no third-party dependencies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After adding Crimson to your &lt;code&gt;pubspec.yaml&lt;/code&gt;, you can start annotating your classes with &lt;code&gt;@json&lt;/code&gt; and optionally &lt;code&gt;@JsonField()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:crimson/crimson.dart&#39;;&#xA;&#xA;part &#39;tweet.g.dart&#39;;&#xA;&#xA;@json&#xA;class Tweet {&#xA;  DateTime? createdAt;&#xA;&#xA;  String? tweet;&#xA;&#xA;  int? favoriteCount;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you just need to run &lt;code&gt;pub run build_runner build&lt;/code&gt; to generate the necessary code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:crimson/crimson.dart&#39;;&#xA;&#xA;void main() {&#xA;  final jsonBytes = downloadTweets();&#xA;  final crimson = Crimson(jsonBytes);&#xA;&#xA;  final tweets = crimson.parseTweetList();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You can now parse and serialize JSON with ease.&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring fields&lt;/h2&gt; &#xA;&lt;p&gt;Annotate properties with &lt;code&gt;@jsonIgnore&lt;/code&gt; to ignore them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@json&#xA;class Tweet {&#xA;  DateTime? created_at;&#xA;&#xA;  String? tweet;&#xA;&#xA;  @jsonIgnore&#xA;  int? favoriteCount;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Renaming fields&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;@JsonName()&lt;/code&gt; annotation to rename individual fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@json&#xA;class Tweet {&#xA;  @JsonName(&#39;created_at&#39;)&#xA;  DateTime? createdAt;&#xA;&#xA;  @JsonName(&#39;text&#39;, aliases: {&#39;alias1&#39;, &#39;alias2&#39;})&#xA;  String? tweet;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same works for enum values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@json&#xA;enum TweetType {&#xA;  tweet,&#xA;&#xA;  @JsonName(&#39;re-tweet&#39;)&#xA;  retweet,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to rename all fields or enum values, you can use &lt;code&gt;@jsonKebabCase&lt;/code&gt; and &lt;code&gt;@jsonSnakeCase&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@jsonKebabCase&#xA;class Tweet {&#xA;  DateTime? createdAt; // created-at&#xA;&#xA;  String? tweet; // tweet&#xA;&#xA;  int? favoriteCount; // favorite-count&#xA;}&#xA;&#xA;@jsonSnakeCase&#xA;enum PlaceType {&#xA;  country, // country&#xA;  largeCity, // large_city&#xA;  smallCity, // small_city&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom converters&lt;/h2&gt; &#xA;&lt;p&gt;You can use custom converters to convert between JSON and Dart types using the &lt;code&gt;@JsonConvert()&lt;/code&gt; annotation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@json&#xA;class Tweet {&#xA;  String? tweet;&#xA;&#xA;  @JsonConvert(fromJson: jsonIntToBool, toJson: boolToJsonInt)&#xA;  bool? isFavorite;&#xA;}&#xA;&#xA;bool jsonIntToBool(int json) =&amp;gt; json &amp;gt;= 1;&#xA;&#xA;int boolToJsonInt(bool value) =&amp;gt; value ? 1 : 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Freezed Support&lt;/h2&gt; &#xA;&lt;p&gt;Crimson supports classes annotated with &lt;code&gt;@freezed&lt;/code&gt; from the &lt;a href=&#34;https://pub.dev/packages/freezed&#34;&gt;freezed&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:crimson/crimson.dart&#39;;&#xA;&#xA;part &#39;tweet.g.dart&#39;;&#xA;part &#39;tweet.freezed.dart&#39;;&#xA;&#xA;@freezed&#xA;class Tweet with _$Tweet {&#xA;  @json&#xA;  const factory Tweet({&#xA;    DateTime? created_at,&#xA;    @JsonField(name: &#39;text&#39;) String? tweet,&#xA;    int? reply_count,&#xA;    int? retweet_count,&#xA;    int? favorite_count,&#xA;  }) = _Tweet;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2022 Simon Choi&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>