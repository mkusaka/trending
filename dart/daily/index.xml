<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-07T01:37:29Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dart-homework-2022B/logical_operators</title>
    <updated>2022-08-07T01:37:29Z</updated>
    <id>tag:github.com,2022-08-07:/dart-homework-2022B/logical_operators</id>
    <link href="https://github.com/dart-homework-2022B/logical_operators" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome&lt;/h1&gt; &#xA;&lt;h1&gt;Boolean Data Types&lt;/h1&gt; &#xA;&lt;p&gt;Automated grading of homework assignments and tests&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fork this repository&lt;/li&gt; &#xA; &lt;li&gt;solve the task&lt;/li&gt; &#xA; &lt;li&gt;commit with proper message&lt;/li&gt; &#xA; &lt;li&gt;commit with proper message&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Problems&lt;/h1&gt; &#xA;&lt;h2&gt;logic01&lt;/h2&gt; &#xA;&lt;p&gt;Given three integers a, b, c, check the following statement &#34;The number b is between a and c&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=3 b=4 c=5&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=6 b=4 c=5&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=6 b=4 c=1&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic02&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;Each of the numbers &#39;a&#39; and &#39;b&#39; is positive&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=5 b=3&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=6 b=-4&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic03&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;Each of the numbers A and B is negative&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=-1 b=-3&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=6 b=-4&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic04&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;Each of the numbers a and b is even&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=3 b=6&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=6 b=4&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic05&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;Each of the numbers A and B is odd&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=3 b=8&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=9 b=1&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic06&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;At least one of the numbers A and B is positive&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=-3 b=8&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=-9 b=-1&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic07&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;At least one of the numbers &#39;a&#39; and &#39;b&#39; is negative&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=-3 b=8&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=4 b=1&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic08&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;At least one of the numbers &#39;a&#39; and &#39;b&#39; is even&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=6 b=3&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=7 b=1&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic09&lt;/h2&gt; &#xA;&lt;p&gt;Given two integers a, b, check the following statement &#34;At least one of the numbers &#39;a&#39; and &#39;b&#39; is odd&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=5 b=3&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=4 b=9&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic10&lt;/h2&gt; &#xA;&lt;p&gt;Given integer a, check the following statement &#34;The integer is two-digit number&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=3&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=12&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic11&lt;/h2&gt; &#xA;&lt;p&gt;Given integer a, check the following statement &#34;The integer is three-digit number&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=3&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=12&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=123&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic12&lt;/h2&gt; &#xA;&lt;p&gt;Given a two-digit integer a, check the following statement &#34;All digits of the number are the same&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=32&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=22&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic13&lt;/h2&gt; &#xA;&lt;p&gt;Given a two-digit integer a, check the following statement &#34;All digits sum is even&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=45&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=35&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic14&lt;/h2&gt; &#xA;&lt;p&gt;Given a two-digit integer a, check the following statement &#34;All digits sum is odd&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=45&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=35&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=num&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic15&lt;/h2&gt; &#xA;&lt;p&gt;Given a three-digit integer a, check the following statement &#34;All digits sum is odd&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=152&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=335&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=a&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic16&lt;/h2&gt; &#xA;&lt;p&gt;Given integer a, check the following statement &#34;The integer is a five-digit number&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=15234&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=763&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=a&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic17&lt;/h2&gt; &#xA;&lt;p&gt;Given a five-digit integer a, check the following statement &#34;All digits of the number are in ascending order&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=12345&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=54647&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=a&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic18&lt;/h2&gt; &#xA;&lt;p&gt;Given a five-digit integer a, check the following statement &#34;All digits of the number are in descending order&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=75421&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: a=12347&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;-10&lt;sup&gt;18&lt;/sup&gt;&amp;lt;=a&amp;lt;=10&lt;sup&gt;18&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic19&lt;/h2&gt; &#xA;&lt;p&gt;Given a three digit or two digit integer x, return true if x is palindrome integer. An integer is a palindrome when it reads the same backward as forward.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: x=121&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: x=10&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: x=11&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;9 &amp;lt; x &amp;lt; 1000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;logic20&lt;/h2&gt; &#xA;&lt;p&gt;A number consisting of one and zero is given (the number starts at once). If the number of ones is greater than zero, true, otherwise False is returned. n five-digit number.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: n=1100&#xA;Output: False&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Input: n=10011&#xA;Output: True&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0 &amp;lt; n &amp;lt; 100000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Warning&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;don&#39;t copy other solutions or any solution&lt;/li&gt; &#xA; &lt;li&gt;don&#39;t remove comments&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MindscapeHQ/raygun4flutter</title>
    <updated>2022-08-07T01:37:29Z</updated>
    <id>tag:github.com,2022-08-07:/MindscapeHQ/raygun4flutter</id>
    <link href="https://github.com/MindscapeHQ/raygun4flutter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Raygun SDK for Flutter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;raygun4flutter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/pub/v/raygun4flutter&#34; alt=&#34;Pub Version&#34;&gt; &lt;a href=&#34;https://github.com/MindscapeHQ/raygun4flutter/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/MindscapeHQ/raygun4flutter/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The world&#39;s best Flutter Crash Reporting solution.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;Library organisation&lt;/h3&gt; &#xA;&lt;p&gt;Raygun4Flutter is from version 1.0.0 onwards built entirely in Dart and does &lt;em&gt;not&lt;/em&gt; rely on the native providers &lt;a href=&#34;https://github.com/MindscapeHQ/raygun4android/raw/master/README.md&#34;&gt;Raygun4Android&lt;/a&gt; and &lt;a href=&#34;https://github.com/MindscapeHQ/raygun4apple&#34;&gt;Raygun4Apple&lt;/a&gt; anymore as earlier versions of Raygun4Flutter.&lt;/p&gt; &#xA;&lt;p&gt;The file &lt;code&gt;lib/raygun4flutter.dart&lt;/code&gt; provides the main API entry point for Flutter users.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dart SDK 2.12+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As of release 1.0.0 we&#39;ve started to improve support for Flutter Desktop and Web. The package seems to be working fine with these targets but we&#39;d appreciate any additional feedback on Github.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;1. Depend on it&lt;/h3&gt; &#xA;&lt;p&gt;Run this command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ flutter pub add raygun4flutter&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will add a line like this to your package&#39;s pubspec.yaml (and run an implicit &lt;code&gt;dart pub get&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dependencies:&#xA;  raygun4flutter: ^1.2.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, your editor might support &lt;code&gt;flutter pub get&lt;/code&gt;. Check the docs for your editor to learn more.&lt;/p&gt; &#xA;&lt;h3&gt;2. Import it&lt;/h3&gt; &#xA;&lt;p&gt;Now in your Dart code, you can use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;import &#39;package:raygun4flutter/raygun4flutter.dart&#39;;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the &#34;Installing&#34; tab on &lt;a href=&#34;https://pub.dev/packages/raygun4flutter/install&#34;&gt;https://pub.dev/packages/raygun4flutter/install&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;3. Platform-specific notes&lt;/h3&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;p&gt;If your application comprises hybrid code both using Flutter and native Android or iOS elements, please be aware that the Raygun4Flutter package will only track and report crashes from Flutter and Dart.&lt;/p&gt; &#xA;&lt;p&gt;If you have a requirement to track crash reports across various layers and parts of your application written in different technologies you might need to implement the respective native providers for Android, iOS or other platforms of choice as well.&lt;/p&gt; &#xA;&lt;h4&gt;Android-specific&lt;/h4&gt; &#xA;&lt;p&gt;In your app&#39;s &lt;strong&gt;AndroidManifest.xml&lt;/strong&gt; (usually located in your Flutter project&#39;s &lt;code&gt;/android/src/main&lt;/code&gt; directory), make sure you have granted Internet permissions. Inside the &lt;code&gt;&amp;lt;manifest&amp;gt;&lt;/code&gt; element add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;uses-permission android:name=&#34;android.permission.INTERNET&#34; /&amp;gt;&#xA;&amp;lt;uses-permission android:name=&#34;android.permission.ACCESS_NETWORK_STATE&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if it doesn&#39;t exist yet.&lt;/p&gt; &#xA;&lt;h2&gt;Setup and usage&lt;/h2&gt; &#xA;&lt;h3&gt;Initialisation and version tracking&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;Raygun.init()&lt;/code&gt; with an apiKey argument to initialise RaygunClient on application start, for example, from your &lt;code&gt;initState&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class _MyAppState extends State&amp;lt;MyApp&amp;gt; {&#xA;&#xA;  @override&#xA;  void initState() {&#xA;    super.initState();&#xA;    Raygun.init(apiKey:&#39;12345&#39;);&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;.init()&lt;/code&gt; method can also accept an optional &lt;code&gt;version&lt;/code&gt; argument. If this is supplied, the version of your app will be tracked across Raygun crash reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.init(apiKey:&#39;12345&#39;, version:&#39;1.4.5&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an additional convenience way to set the version, a method &lt;code&gt;.setVersion()&lt;/code&gt; is available. Typical use cases would most likely fall back to setting the app version in the .init() method call when you setup the library.&lt;/p&gt; &#xA;&lt;h2&gt;Capturing and sending errors&lt;/h2&gt; &#xA;&lt;p&gt;To be able to capture errors inside Flutter, you need to add a custom &lt;code&gt;FlutterError.onError&lt;/code&gt; handler to your main method. That redirects Flutter errors to Raygun.&lt;/p&gt; &#xA;&lt;p&gt;Note: This only works when the app is running in &#34;Release&#34; mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  FlutterError.onError = (details) {&#xA;    // Default error handling&#xA;    FlutterError.presentError(details);&#xA;&#xA;    // Raygun error handling&#xA;    Raygun.sendException(&#xA;      error: details.exception,&#xA;      stackTrace: details.stack,&#xA;    );&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also catch Dart errors outside of the code controlled by the Flutter framework by calling to &lt;code&gt;runApp&lt;/code&gt; from a &lt;code&gt;runZonedGuarded&lt;/code&gt; and redirecting captured errors to Raygun. For example: errors that happen in asynchronous code.&lt;/p&gt; &#xA;&lt;p&gt;Note: This works both in &#34;Release&#34; and &#34;Debug&#34; modes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  runZonedGuarded&amp;lt;Future&amp;lt;void&amp;gt;&amp;gt;(() async {&#xA;    runApp(const MyApp());&#xA;  }, (Object error, StackTrace stackTrace) {&#xA;    Raygun.sendException(&#xA;      error: error,&#xA;      stackTrace: stackTrace,&#xA;    );&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending errors manually&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;Raygun.sendException(error, tags, customData, stackTrace)&lt;/code&gt; to send errors to Raygun.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;try {&#xA;  // code that crashes&#xA;} catch (error) {&#xA;  Raygun.sendException(error: error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All arguments but &lt;code&gt;error&lt;/code&gt; are optional. This method is mainly a convenience wrapper around the more customisable &lt;code&gt;.sendCustom()&lt;/code&gt; method that obtains the class name and the message from the &lt;code&gt;error&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;h3&gt;Sending custom errors manually&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;Raygun.sendCustom(className, reason, tags, customData, stackTrace)&lt;/code&gt; to send custom errors to Raygun with your own customised &lt;code&gt;className&lt;/code&gt; and &lt;code&gt;reason&lt;/code&gt;. As with &lt;code&gt;.sendException()&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;customData&lt;/code&gt; and &lt;code&gt;stackTrace&lt;/code&gt; are optional.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.sendCustom(&#xA;  className: &#39;MyApp&#39;,&#xA;  reason: &#39;test error message&#39;,&#xA;  tags: [&#39;API&#39;,&#39;Tag2&#39;],&#xA;  customData: {&#xA;    &#39;custom1&#39;: &#39;value&#39;,&#xA;    &#39;custom2&#39;: 42,&#xA;  },&#xA;  stackTrace: StackTrace.current,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Crash reports will be sent to the Raygun backend after the crash occurred. Should a user&#39;s device be offline, Raygun4Flutter will store up to 64 crash reports locally and try to send them when the device comes back online.&lt;/p&gt; &#xA;&lt;h2&gt;Other functionality&lt;/h2&gt; &#xA;&lt;h3&gt;Setting tags&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Raygun.setTags()&lt;/code&gt; sets a list of global tags that will be logged with every exception. This will be merged with other tags passed into manually created crash reports via &lt;code&gt;sendException()&lt;/code&gt; and &lt;code&gt;sendCustom()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.setTags([&#39;Tag1&#39;,&#39;Tag2&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting custom data&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Raygun.setCustomData()&lt;/code&gt; sets a global map of key-value pairs that, similar to tags, that will be logged with every exception. This will be merged with other custom data passed into manually created crash reports via &lt;code&gt;sendException()&lt;/code&gt; and &lt;code&gt;sendCustom()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.setCustomData({&#xA;  &#39;custom1&#39;: &#39;value&#39;,&#xA;  &#39;custom2&#39;: 42,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending breadcrumbs&lt;/h3&gt; &#xA;&lt;p&gt;Breadcrumbs can be sent to Raygun to provide additional information to look into and debug issues stemming from crash reports. Breadcrumbs can be created in two ways.&lt;/p&gt; &#xA;&lt;h4&gt;Simple string:&lt;/h4&gt; &#xA;&lt;p&gt;Call &lt;code&gt;Raygun.recordBreadcrumb(message)&lt;/code&gt;, where &lt;code&gt;message&lt;/code&gt; is just a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.recordBreadcrumb(&#39;test breadcrumb&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using RaygunBreadcrumbMessage:&lt;/h4&gt; &#xA;&lt;p&gt;Create your own &lt;code&gt;RaygunBreadcrumbMessage&lt;/code&gt; object and send more than just a message with &lt;code&gt;Raygun.recordBreadcrumb(RaygunBreadcrumbMessage)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The structure of the type &lt;code&gt;RaygunBreadcrumbMessage&lt;/code&gt; is as shown here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; RaygunBreadcrumbMessage({&#xA;    required this.message,&#xA;    this.category,&#xA;    this.level = RaygunBreadcrumbLevel.info,&#xA;    this.customData,&#xA;    this.className,&#xA;    this.methodName,&#xA;    this.lineNumber,&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Breadcrumbs can be cleared with &lt;code&gt;Raygun.clearBreadcrumbs()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting/setting/cancelling the error before it is sent&lt;/h3&gt; &#xA;&lt;p&gt;This provider has an &lt;code&gt;onBeforeSend&lt;/code&gt; API to support accessing or mutating the candidate error payload immediately before it is sent, or cancelling the sending action.&lt;/p&gt; &#xA;&lt;p&gt;This is provided as the public callback &lt;code&gt;Raygun.onBeforeSend&lt;/code&gt;, which takes an &lt;code&gt;OnBeforeSendCallback&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.onBeforeSend = (payload) {&#xA;  // e.g. override the payload error message with a new message&#xA;  payload.details.error!.message = &#39;New Error Message&#39;;&#xA;  &#xA;  // important: return the payload to continue the sending action&#xA;  return payload;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To cancel the sending action, return &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.onBeforeSend = (payload) {&#xA;  return null;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;Raygun.onBeforeSend&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; to remove your custom callback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.onBeforeSend = null;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Affected Customers&lt;/h3&gt; &#xA;&lt;p&gt;Raygun supports tracking the unique customers who encounter bugs in your apps.&lt;/p&gt; &#xA;&lt;p&gt;By default, a device-derived UUID is transmitted. You can also add the currently logged in customer&#39;s data like this using an object of type &lt;code&gt;RaygunUserInfo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.setUser(&#xA;  RaygunUserInfo(&#xA;    identifier: &#39;1234&#39;,&#xA;    firstName: &#39;FIRST&#39;,&#xA;    fullName: &#39;LAST&#39;,&#xA;    email: &#39;test@example.com&#39;,&#xA;  ),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To clear the currently logged in customer, call &lt;code&gt;setUser(null)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is an additional convenience method that offers a shortcut to just track your customer by an indentifier only. If you use an email address to identify the user, please consider using &lt;code&gt;setUser&lt;/code&gt; instead of &lt;code&gt;setUserId&lt;/code&gt; as it would allow you to set the email address into both the identifier and email fields of the crash data to be sent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.setUserId(&#39;1234&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call with &lt;code&gt;null&lt;/code&gt; to clear the user identifier: &lt;code&gt;setUserId(null)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom endpoints&lt;/h3&gt; &#xA;&lt;p&gt;Raygun supports sending data from Crash Reporting to your own endpoints. If you want to set custom endpoints, could can do so by setting them after you&#39;ve initialised Raygun:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Raygun.setCustomCrashReportingEndpoint(url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that setting a custom endpoint will stop Crash Report or Real User Monitoring data from being sent to the Raygun backend.&lt;/p&gt; &#xA;&lt;h2&gt;Comprehensive sample app&lt;/h2&gt; &#xA;&lt;p&gt;For a working sample app across multiple platforms, check the Flutter project in the &lt;code&gt;example&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;setMaxReportsStoredOnDevice&lt;/code&gt; is not exposed and is currently set to 64.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>