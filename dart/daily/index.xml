<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-09T01:32:49Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>brendan-duncan/image</title>
    <updated>2023-03-09T01:32:49Z</updated>
    <id>tag:github.com,2023-03-09:/brendan-duncan/image</id>
    <link href="https://github.com/brendan-duncan/image" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dart Image Library for opening, manipulating, and saving various different image file formats.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dart Image Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/brendan-duncan/image/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/brendan-duncan/image/actions/workflows/build.yaml/badge.svg?branch=4.0&#34; alt=&#34;Dart CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/image&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/image.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Dart Image Library provides the ability to load, save, and &lt;a href=&#34;https://github.com/brendan-duncan/image/raw/main/doc/filters.md&#34;&gt;manipulate&lt;/a&gt; images in a variety of image file &lt;a href=&#34;https://github.com/brendan-duncan/image/raw/main/doc/formats.md&#34;&gt;formats&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library can be used with both dart:io and dart:html, for command-line, Flutter, and web applications.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: 4.0 is a major revision from the previous version of the library.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/brendan-duncan/image/raw/main/doc/README.md&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/brendan-duncan/image/raw/main/doc/formats.md&#34;&gt;Supported Image Formats&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read/Write&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JPG&lt;/li&gt; &#xA; &lt;li&gt;PNG / Animated APNG&lt;/li&gt; &#xA; &lt;li&gt;GIF / Animated GIF&lt;/li&gt; &#xA; &lt;li&gt;BMP&lt;/li&gt; &#xA; &lt;li&gt;TIFF&lt;/li&gt; &#xA; &lt;li&gt;TGA&lt;/li&gt; &#xA; &lt;li&gt;PVR&lt;/li&gt; &#xA; &lt;li&gt;ICO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read Only&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WebP / Animated WebP&lt;/li&gt; &#xA; &lt;li&gt;PSD&lt;/li&gt; &#xA; &lt;li&gt;EXR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write Only&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CUR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Create an image, set pixel values, save it to a PNG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:io&#39;;&#xA;import &#39;package:image/image.dart&#39; as img;&#xA;void main() async {&#xA;  // Create a 256x256 8-bit (default) rgb (default) image.&#xA;  final image = img.Image(width: 256, height: 256);&#xA;  // Iterate over its pixels&#xA;  for (var pixel in image) {&#xA;    // Set the pixels red value to its x position value, creating a gradient.&#xA;    pixel..r = pixel.x&#xA;    // Set the pixels green value to its y position value.&#xA;    ..g = pixel.y;&#xA;  }&#xA;  // Encode the resulting image to the PNG image format.&#xA;  final png = img.encodePng(image);&#xA;  // Write the PNG formatted data to a file.&#xA;  await File(&#39;image.png&#39;).writeAsBytes(png);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To asynchronously load an image file, resize it, and save it as a thumbnail:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:image/image.dart&#39; as img;&#xA;&#xA;void main(List&amp;lt;String&amp;gt; args) async {&#xA;  final path = args.isNotEmpty ? args[0] : &#39;test.png&#39;;&#xA;  final cmd = img.Command()&#xA;    // Decode the image file at the given path&#xA;    ..decodeImageFile(path)&#xA;    // Resize the image to a width of 64 pixels and a height that maintains the aspect ratio of the original. &#xA;    ..copyResize(width: 64)&#xA;    // Write the image to a PNG file (determined by the suffix of the file path). &#xA;    ..writeToFile(&#39;thumbnail.png&#39;);&#xA;  // On platforms that support Isolates, execute the image commands asynchronously on an isolate thread.&#xA;  // Otherwise, the commands will be executed synchronously.&#xA;  await cmd.executeThread();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>