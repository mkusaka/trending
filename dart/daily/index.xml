<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-16T01:32:14Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>payam-zahedi/toastification</title>
    <updated>2023-03-16T01:32:14Z</updated>
    <id>tag:github.com,2023-03-16:/payam-zahedi/toastification</id>
    <link href="https://github.com/payam-zahedi/toastification" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toastification is a Flutter package for displaying customizable toast messages. It provides predefined widgets for success, error, warning, and info messages, as well as a custom widget for flexibility. With Toastification, you can add and manage multiple toast messages at the same time with ease.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toastification &lt;a href=&#34;https://pub.dartlang.org/packages/toastification&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/toastification?color=blue&amp;amp;style=plastic&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Toastification is a Flutter package that allows developers to easily display toast notifications in their apps. Toast notifications are a type of pop-up message that typically appear on the screen and disappear after a short amount of time. They are commonly used to display information, alerts, or confirmations to the user.&lt;/p&gt; &#xA;&lt;p&gt;One of the advantages of the Toastification package is its ability to handle multiple toast messages. With Toastification, developers can display multiple toast notifications at once and display them in a queue. This means that if multiple notifications are triggered at the same time, they will be displayed one after the other, rather than overlapping on the screen.&lt;/p&gt; &#xA;&lt;p&gt;Overall, Toastification is a useful package for Flutter developers who want to add toast notifications to their apps without having to write the code from scratch.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Web Example&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Mobile Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/payam-zahedi/toastification/main/doc/usecase/web.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/payam-zahedi/toastification/main/doc/usecase/mobile.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use Toastification, you need to add it to your pubspec.yaml file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  toastification: ^0.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run &lt;code&gt;flutter pub get&lt;/code&gt; to install the package.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use Toastification in your Flutter app, first import the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:toastification/toastification.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call the show method to display a toast notification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.show(&#xA;  context: context,&#xA;  title: &#39;Hello, world!&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use Constructor of the Toastification class and call the show method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Toastification().show(&#xA;  context: context,&#xA;  title: &#39;Hello, world!&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both methods have the same behavior:&lt;/p&gt; &#xA;&lt;p&gt;This will display a toast message with the text &#34;Hello, world!&#34;.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the appearance of the toast message by passing in additional parameters to the &lt;code&gt;show()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.show(&#xA;  context: context,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;  title: &#39;Hello, World!&#39;,&#xA;  description: &#39;This is a sample toast message.&#39;,&#xA;  icon: Icon(Icons.check),&#xA;  backgroundColor: const Color(0xff1976d2),&#xA;  foregroundColor: Colors.white,&#xA;  brightness: Brightness.light,&#xA;  padding: const EdgeInsets.all(16),&#xA;  margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),&#xA;  borderRadius: BorderRadius.circular(8),&#xA;  elevation: 4,&#xA;  onCloseTap: () {&#xA;    // Do something when the toast is closed&#xA;  },&#xA;  showProgressBar: true,&#xA;  showCloseButton: true,&#xA;  closeOnClick: false,&#xA;  pauseOnHover: true,&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;autoCloseDuration&lt;/code&gt; (optional): A Duration object that specifies how long the toast message should be displayed before automatically closing. If this parameter is not provided, the default duration of 2 seconds will be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;overlayState&lt;/code&gt; (optional): An OverlayState object that represents the state of the overlay where the toast message will be displayed. If this parameter is not provided, a new OverlayState object will be created. &lt;code&gt;title&lt;/code&gt; (required): A string that represents the main message of the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; (optional): A string that represents a secondary message of the toast notification, displayed below the main message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;icon&lt;/code&gt; (optional): A widget that represents an icon to be displayed in the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backgroundColor&lt;/code&gt; (optional): A Color object that represents the background color of the toast notification. By default, the background color is set to Colors.grey[700].&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;foregroundColor&lt;/code&gt; (optional): A Color object that represents the foreground (text) color of the toast notification. By default, the foreground color is set to white.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brightness&lt;/code&gt; (optional): A Brightness object that represents the brightness of the toast notification. By default, the brightness is set to Brightness.dark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;padding&lt;/code&gt; (optional): An EdgeInsetsGeometry object that specifies the padding of the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin&lt;/code&gt; (optional): An EdgeInsetsGeometry object that specifies the margin of the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;borderRadius&lt;/code&gt; (optional): A BorderRadiusGeometry object that specifies the border radius of the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;elevation&lt;/code&gt; (optional): A double value that specifies the elevation of the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onCloseTap&lt;/code&gt; (optional): A VoidCallback function that will be called when the user taps on the close button of the toast notification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showProgressBar&lt;/code&gt; (optional): A boolean value that indicates whether to display a progress bar on the toast notification. By default, the progress bar is hidden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showCloseButton&lt;/code&gt; (optional): A boolean value that indicates whether to display a close button on the toast notification. By default, the close button is shown.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;closeOnClick&lt;/code&gt; (optional): A boolean value that indicates whether the toast notification should be closed when clicked. By default, the toast notification will not be closed when clicked.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pauseOnHover&lt;/code&gt; (optional): A boolean value that indicates whether the toast notification should be paused when the mouse pointer hovers over it. By default, the toast notification will not be paused on hover.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Predefined Styles methods&lt;/h3&gt; &#xA;&lt;p&gt;The Toastification package also provides four predefined methods to quickly create and display toast messages with different styles, depending on the type of message being displayed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;showSuccess&lt;/code&gt;: displays a success message with a green background and a checkmark icon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showError&lt;/code&gt;: displays an error message with a red background and an error icon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showInfo&lt;/code&gt;: displays an information message with a blue background and an information icon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;showWarning&lt;/code&gt;: displays a warning message with a yellow background and a warning icon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All four of these methods accept the same set of parameters as the show() method, allowing you to customize the appearance and behavior of the toast message as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Here are examples of using each of the predefined methods:&lt;/h3&gt; &#xA;&lt;h4&gt;showSuccess()&lt;/h4&gt; &#xA;&lt;p&gt;Displays a success message with a green background and a checkmark icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.showSuccess(&#xA;  context: context,&#xA;  title: &#39;Success!&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;showError()&lt;/h4&gt; &#xA;&lt;p&gt;Displays an error message with a red background and an error icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.showError(&#xA;  context: context,&#xA;  title: &#39;Error!&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;showInfo()&lt;/h4&gt; &#xA;&lt;p&gt;Displays an information message with a blue background and an information icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.showInfo(&#xA;  context: context,&#xA;  title: &#39;Info&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;showWarning()&lt;/h4&gt; &#xA;&lt;p&gt;Displays a warning message with a yellow background and a warning icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.showWarning(&#xA;  context: context,&#xA;  title: &#39;Warning!&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create Your Own Toast Style with showCustom()&lt;/h3&gt; &#xA;&lt;p&gt;If you are looking for even more control over the appearance and behavior of your toast messages, you can use the showCustom() method to create a completely custom toast message. This method lets you pass in a builder function that returns the widget you want to display, giving you complete control over the toast&#39;s layout, styling, and interactivity.&lt;/p&gt; &#xA;&lt;p&gt;With showCustom(), the possibilities are endless. You can create a custom toast message that matches your app&#39;s unique visual style, or you can add interactive elements like buttons and sliders to make your toast messages more engaging and dynamic.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to use showCustom() to create a custom toast message with a button that lets users perform an action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;toastification.showCustom(&#xA;  context: context,&#xA;  builder: (BuildContext context, ToastificationItem holder) {&#xA;    return Container(&#xA;      decoration: BoxDecoration(&#xA;        borderRadius: BorderRadius.circular(8),&#xA;        color: Colors.blue,&#xA;      ),&#xA;      padding: const EdgeInsets.all(16),&#xA;      child: Column(&#xA;        crossAxisAlignment: CrossAxisAlignment.start,&#xA;        children: [&#xA;          Text(&#39;Custom Toast&#39;, style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),&#xA;          SizedBox(height: 8),&#xA;          Text(&#39;This is a custom toast message!&#39;, style: TextStyle(color: Colors.white)),&#xA;          SizedBox(height: 16),&#xA;          ElevatedButton(&#xA;            onPressed: () {&#xA;              // Perform an action when the button is pressed&#xA;            },&#xA;            child: Text(&#39;Do Something&#39;),&#xA;          ),&#xA;        ],&#xA;      ),&#xA;    );&#xA;  },&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With showCustom(), you&#39;re only limited by your imagination. Create a toast message that stands out from the crowd and adds a touch of personality to your app!&lt;/p&gt; &#xA;&lt;h2&gt;Manage Your Notifications&lt;/h2&gt; &#xA;&lt;p&gt;In addition to displaying toast messages, the Toastification package also provides methods for managing and dismissing existing notifications. Here are the available methods:&lt;/p&gt; &#xA;&lt;h4&gt;Find a Notification item&lt;/h4&gt; &#xA;&lt;p&gt;Find a notification with the given ID&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final notification = Toastification().findToastificationItem(&#39;my_notification&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dismiss a Notification&lt;/h4&gt; &#xA;&lt;p&gt;Remove a specific notification from the screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final notification = Toastification().show(&#xA;  context: context,&#xA;  title: &#39;Hello&#39;,&#xA;  autoCloseDuration: const Duration(seconds: 5),&#xA;);&#xA;&#xA;Toastification().dismiss(notification);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dismiss a Notification by ID&lt;/h4&gt; &#xA;&lt;p&gt;Remove a notification with the given ID from the screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Toastification().dismissById(&#39;my_notification_id&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dismiss the First Notification&lt;/h4&gt; &#xA;&lt;p&gt;Remove the first notification that was shown from the screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Toastification().dismissFirst();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dismiss the Last Notification&lt;/h4&gt; &#xA;&lt;p&gt;Remove the last notification that was shown from the screen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Toastification().dismissLast();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! If you have any suggestions, bug reports, or feature requests, please open an issue on the GitHub repository.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to contribute to the project, please read the &lt;a href=&#34;https://github.com/payam-zahedi/toastification/CONTRIBUTING.md&#34; title=&#34;CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more information on how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Toastification is released under the &lt;code&gt;BSD-3-Clause&lt;/code&gt; License. You can find the full text of the license in the LICENSE file in the root of the repository.&lt;/p&gt; &#xA;&lt;h4&gt;* Written with the help of Chat GPT&lt;/h4&gt;</summary>
  </entry>
  <entry>
    <title>Securrency-OSS/mirai</title>
    <updated>2023-03-16T01:32:14Z</updated>
    <id>tag:github.com,2023-03-16:/Securrency-OSS/mirai</id>
    <link href="https://github.com/Securrency-OSS/mirai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A server driven UI library for Flutter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Securrency-OSS/mirai/raw/main/assets/mirai_banner.png&#34; alt=&#34;Mirai&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.png&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Mirai is a Server-Driven UI (SDUI) library for Flutter. Mirai allows you to build beautiful cross-platform applications with JSON in real-time.&lt;/p&gt; &#xA;&lt;p&gt;Developed with 💙 by &lt;a href=&#34;https://securrency.com&#34;&gt;Securrency&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation 🚀&lt;/h2&gt; &#xA;&lt;p&gt;First, we need to add mirai to our pubspec.yaml file.&lt;/p&gt; &#xA;&lt;p&gt;Install the plugin by running the following command from the project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub add mirai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add a line like this to your package&#39;s pubspec.yaml.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:&#xA;  mirai: ^0.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run flutter pub get.&lt;/p&gt; &#xA;&lt;h2&gt;Usage 🧑‍💻&lt;/h2&gt; &#xA;&lt;p&gt;Now that we have successfully installed mirai, we can import mirai in main.dart.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:mirai/mirai.dart&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initalize mirai, replace your MaterialApp with MiraiApp. And call your json with Mirai.fromJson(json, context).&lt;/p&gt; &#xA;&lt;p&gt;Note&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:mirai/mirai.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(const MyApp());&#xA;}&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  const MyApp({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MiraiApp(&#xA;      title: &#39;Mirai Demo&#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: Mirai.fromJson(json, context),&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Eample&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example of a basic form screen build with Mirai.&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;scaffold&#34;,&#xA;  &#34;appBar&#34;: {&#xA;    &#34;type&#34;: &#34;appBar&#34;,&#xA;    &#34;title&#34;: {&#xA;      &#34;type&#34;: &#34;text&#34;,&#xA;      &#34;data&#34;: &#34;Text Field&#34;,&#xA;      &#34;style&#34;: {&#xA;        &#34;color&#34;: &#34;#ffffff&#34;,&#xA;        &#34;fontSize&#34;: 21&#xA;      }&#xA;    },&#xA;    &#34;backgroundColor&#34;: &#34;#4D00E9&#34;&#xA;  },&#xA;  &#34;backgroundColor&#34;: &#34;#ffffff&#34;,&#xA;  &#34;body&#34;: {&#xA;    &#34;type&#34;: &#34;scrollView&#34;,&#xA;    &#34;child&#34;: {&#xA;      &#34;type&#34;: &#34;container&#34;,&#xA;      &#34;padding&#34;: {&#xA;        &#34;left&#34;: 12,&#xA;        &#34;right&#34;: 12,&#xA;        &#34;top&#34;: 12,&#xA;        &#34;bottom&#34;: 12&#xA;      },&#xA;      &#34;child&#34;: {&#xA;        &#34;type&#34;: &#34;column&#34;,&#xA;        &#34;mainAxisAlignment&#34;: &#34;center&#34;,&#xA;        &#34;crossAxisAlignment&#34;: &#34;center&#34;,&#xA;        &#34;children&#34;: [&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 24&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;textField&#34;,&#xA;            &#34;maxLines&#34;: 1,&#xA;            &#34;keyboardType&#34;: &#34;text&#34;,&#xA;            &#34;textInputAction&#34;: &#34;done&#34;,&#xA;            &#34;textAlign&#34;: &#34;start&#34;,&#xA;            &#34;textCapitalization&#34;: &#34;none&#34;,&#xA;            &#34;textDirection&#34;: &#34;ltr&#34;,&#xA;            &#34;textAlignVertical&#34;: &#34;top&#34;,&#xA;            &#34;obscureText&#34;: false,&#xA;            &#34;cursorColor&#34;: &#34;#FC3F1B&#34;,&#xA;            &#34;style&#34;: {&#xA;              &#34;color&#34;: &#34;#000000&#34;&#xA;            },&#xA;            &#34;decoration&#34;: {&#xA;              &#34;hintText&#34;: &#34;What do people call you?&#34;,&#xA;              &#34;filled&#34;: true,&#xA;              &#34;icon&#34;: {&#xA;                &#34;type&#34;: &#34;icon&#34;,&#xA;                &#34;iconType&#34;: &#34;cupertino&#34;,&#xA;                &#34;icon&#34;: &#34;person_solid&#34;,&#xA;                &#34;size&#34;: 24&#xA;              },&#xA;              &#34;hintStyle&#34;: {&#xA;                &#34;color&#34;: &#34;#797979&#34;&#xA;              },&#xA;              &#34;labelText&#34;: &#34;Name*&#34;,&#xA;              &#34;fillColor&#34;: &#34;#F2F2F2&#34;&#xA;            },&#xA;            &#34;readOnly&#34;: false,&#xA;            &#34;enabled&#34;: true&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 24&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;textField&#34;,&#xA;            &#34;maxLines&#34;: 1,&#xA;            &#34;keyboardType&#34;: &#34;text&#34;,&#xA;            &#34;textInputAction&#34;: &#34;done&#34;,&#xA;            &#34;textAlign&#34;: &#34;start&#34;,&#xA;            &#34;textCapitalization&#34;: &#34;none&#34;,&#xA;            &#34;textDirection&#34;: &#34;ltr&#34;,&#xA;            &#34;textAlignVertical&#34;: &#34;top&#34;,&#xA;            &#34;obscureText&#34;: false,&#xA;            &#34;cursorColor&#34;: &#34;#FC3F1B&#34;,&#xA;            &#34;style&#34;: {&#xA;              &#34;color&#34;: &#34;#000000&#34;&#xA;            },&#xA;            &#34;decoration&#34;: {&#xA;              &#34;hintText&#34;: &#34;Where can we reach you?&#34;,&#xA;              &#34;filled&#34;: true,&#xA;              &#34;icon&#34;: {&#xA;                &#34;type&#34;: &#34;icon&#34;,&#xA;                &#34;iconType&#34;: &#34;cupertino&#34;,&#xA;                &#34;icon&#34;: &#34;phone_solid&#34;,&#xA;                &#34;size&#34;: 24&#xA;              },&#xA;              &#34;hintStyle&#34;: {&#xA;                &#34;color&#34;: &#34;#797979&#34;&#xA;              },&#xA;              &#34;labelText&#34;: &#34;Phone number*&#34;,&#xA;              &#34;fillColor&#34;: &#34;#F2F2F2&#34;&#xA;            },&#xA;            &#34;readOnly&#34;: false,&#xA;            &#34;enabled&#34;: true&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 24&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;textField&#34;,&#xA;            &#34;maxLines&#34;: 1,&#xA;            &#34;keyboardType&#34;: &#34;text&#34;,&#xA;            &#34;textInputAction&#34;: &#34;done&#34;,&#xA;            &#34;textAlign&#34;: &#34;start&#34;,&#xA;            &#34;textCapitalization&#34;: &#34;none&#34;,&#xA;            &#34;textDirection&#34;: &#34;ltr&#34;,&#xA;            &#34;textAlignVertical&#34;: &#34;top&#34;,&#xA;            &#34;obscureText&#34;: false,&#xA;            &#34;cursorColor&#34;: &#34;#FC3F1B&#34;,&#xA;            &#34;style&#34;: {&#xA;              &#34;color&#34;: &#34;#000000&#34;&#xA;            },&#xA;            &#34;decoration&#34;: {&#xA;              &#34;hintText&#34;: &#34;Your email address&#34;,&#xA;              &#34;filled&#34;: true,&#xA;              &#34;icon&#34;: {&#xA;                &#34;type&#34;: &#34;icon&#34;,&#xA;                &#34;iconType&#34;: &#34;material&#34;,&#xA;                &#34;icon&#34;: &#34;email&#34;,&#xA;                &#34;size&#34;: 24&#xA;              },&#xA;              &#34;hintStyle&#34;: {&#xA;                &#34;color&#34;: &#34;#797979&#34;&#xA;              },&#xA;              &#34;labelText&#34;: &#34;Email&#34;,&#xA;              &#34;fillColor&#34;: &#34;#F2F2F2&#34;&#xA;            },&#xA;            &#34;readOnly&#34;: false,&#xA;            &#34;enabled&#34;: true&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 24&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 100,&#xA;            &#34;child&#34;: {&#xA;              &#34;type&#34;: &#34;textField&#34;,&#xA;              &#34;expands&#34;: true,&#xA;              &#34;cursorColor&#34;: &#34;#FC3F1B&#34;,&#xA;              &#34;style&#34;: {&#xA;                &#34;color&#34;: &#34;#000000&#34;&#xA;              },&#xA;              &#34;decoration&#34;: {&#xA;                &#34;filled&#34;: true,&#xA;                &#34;hintStyle&#34;: {&#xA;                  &#34;color&#34;: &#34;#797979&#34;&#xA;                },&#xA;                &#34;labelText&#34;: &#34;Life story&#34;,&#xA;                &#34;fillColor&#34;: &#34;#F2F2F2&#34;&#xA;              },&#xA;              &#34;readOnly&#34;: false,&#xA;              &#34;enabled&#34;: true&#xA;            }&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 24&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;textField&#34;,&#xA;            &#34;maxLines&#34;: 1,&#xA;            &#34;keyboardType&#34;: &#34;text&#34;,&#xA;            &#34;textInputAction&#34;: &#34;done&#34;,&#xA;            &#34;textAlign&#34;: &#34;start&#34;,&#xA;            &#34;textCapitalization&#34;: &#34;none&#34;,&#xA;            &#34;textDirection&#34;: &#34;ltr&#34;,&#xA;            &#34;textAlignVertical&#34;: &#34;top&#34;,&#xA;            &#34;obscureText&#34;: true,&#xA;            &#34;cursorColor&#34;: &#34;#FC3F1B&#34;,&#xA;            &#34;style&#34;: {&#xA;              &#34;color&#34;: &#34;#000000&#34;&#xA;            },&#xA;            &#34;decoration&#34;: {&#xA;              &#34;filled&#34;: true,&#xA;              &#34;suffixIcon&#34;: {&#xA;                &#34;type&#34;: &#34;icon&#34;,&#xA;                &#34;iconType&#34;: &#34;cupertino&#34;,&#xA;                &#34;icon&#34;: &#34;eye&#34;,&#xA;                &#34;size&#34;: 24&#xA;              },&#xA;              &#34;hintStyle&#34;: {&#xA;                &#34;color&#34;: &#34;#797979&#34;&#xA;              },&#xA;              &#34;labelText&#34;: &#34;Password*&#34;,&#xA;              &#34;fillColor&#34;: &#34;#F2F2F2&#34;&#xA;            },&#xA;            &#34;readOnly&#34;: false,&#xA;            &#34;enabled&#34;: true&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 24&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;textField&#34;,&#xA;            &#34;maxLines&#34;: 1,&#xA;            &#34;keyboardType&#34;: &#34;text&#34;,&#xA;            &#34;textInputAction&#34;: &#34;done&#34;,&#xA;            &#34;textAlign&#34;: &#34;start&#34;,&#xA;            &#34;textCapitalization&#34;: &#34;none&#34;,&#xA;            &#34;textDirection&#34;: &#34;ltr&#34;,&#xA;            &#34;textAlignVertical&#34;: &#34;top&#34;,&#xA;            &#34;obscureText&#34;: true,&#xA;            &#34;cursorColor&#34;: &#34;#FC3F1B&#34;,&#xA;            &#34;style&#34;: {&#xA;              &#34;color&#34;: &#34;#000000&#34;&#xA;            },&#xA;            &#34;decoration&#34;: {&#xA;              &#34;filled&#34;: true,&#xA;              &#34;suffixIcon&#34;: {&#xA;                &#34;type&#34;: &#34;icon&#34;,&#xA;                &#34;iconType&#34;: &#34;cupertino&#34;,&#xA;                &#34;icon&#34;: &#34;eye&#34;,&#xA;                &#34;size&#34;: 24&#xA;              },&#xA;              &#34;hintStyle&#34;: {&#xA;                &#34;color&#34;: &#34;#797979&#34;&#xA;              },&#xA;              &#34;labelText&#34;: &#34;Re-type password*&#34;,&#xA;              &#34;fillColor&#34;: &#34;#F2F2F2&#34;&#xA;            },&#xA;            &#34;readOnly&#34;: false,&#xA;            &#34;enabled&#34;: true&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;sizedBox&#34;,&#xA;            &#34;height&#34;: 48&#xA;          },&#xA;          {&#xA;            &#34;type&#34;: &#34;elevatedButton&#34;,&#xA;            &#34;child&#34;: {&#xA;              &#34;type&#34;: &#34;text&#34;,&#xA;              &#34;data&#34;: &#34;Submit&#34;&#xA;            },&#xA;            &#34;style&#34;: {&#xA;              &#34;backgroundColor&#34;: &#34;#4D00E9&#34;,&#xA;              &#34;padding&#34;: {&#xA;                &#34;top&#34;: 8,&#xA;                &#34;left&#34;: 12,&#xA;                &#34;right&#34;: 12,&#xA;                &#34;bottom&#34;: 8&#xA;              }&#xA;            },&#xA;            &#34;onPressed&#34;: {}&#xA;          }&#xA;        ]&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flutter&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:mirai/mirai.dart&#39;;&#xA;&#xA;void main() {&#xA;  runApp(const MyApp());&#xA;}&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  const MyApp({Key? key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MiraiApp(&#xA;      title: &#39;Mirai Demo&#39;,&#xA;      theme: ThemeData(&#xA;        primarySwatch: Colors.blue,&#xA;      ),&#xA;      home: Mirai.fromNetwork(&#xA;        MiraiRequest(&#xA;          url: _url,&#xA;          method: Method.get,&#xA;        ),&#xA;      ),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note:&lt;/p&gt; &#xA; &lt;p&gt;Mirai provides multiple methods to parse JSONs into Flutter widgets. You can use &lt;code&gt;Mirai.fromNetwork()&lt;/code&gt;, &lt;code&gt;Mirai.fromJson()&lt;/code&gt; &amp;amp; &lt;code&gt;Mirai.fromAsset()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That&#39;s it with just few lines of code your SDUI app is up and running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Securrency-OSS/mirai/raw/main/assets/form_screen_image.png&#34; alt=&#34;Form Screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More examples&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Securrency-OSS/mirai/tree/main/examples/mirai_gallery&#34;&gt;Mirai Gallery&lt;/a&gt; app for more such examples.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/divyanshub024&#34;&gt;Divyanshu Bhargava&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AsimKhanSecurrency&#34;&gt;Aasim Khan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>