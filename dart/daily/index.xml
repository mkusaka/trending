<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-09T01:35:39Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lichess-org/mobile</title>
    <updated>2022-11-09T01:35:39Z</updated>
    <id>tag:github.com,2022-11-09:/lichess-org/mobile</id>
    <link href="https://github.com/lichess-org/mobile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lichess mobile app v2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lichess Mobile&lt;/h1&gt; &#xA;&lt;p&gt;Second iteration of the &lt;a href=&#34;https://lichess.org/mobile&#34;&gt;Lichess mobile app&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alnitak/flutter_flow_chart</title>
    <updated>2022-11-09T01:35:39Z</updated>
    <id>tag:github.com,2022-11-09:/alnitak/flutter_flow_chart</id>
    <link href="https://github.com/alnitak/flutter_flow_chart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A #Flutter package that let you draw a flow chart diagram with different kind of customizable elements&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Flow Chart&lt;/h1&gt; &#xA;&lt;p&gt;A package that let you draw a flow chart diagram with different kind of customizable elements. Dashboards can be saved for later use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alnitak/flutter_flow_chart/raw/main/images/flowchart.gif&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See online example &lt;a href=&#34;https://alnitak.github.io/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;diamond, rectangle, oval, storage, parallelogram&lt;/em&gt; elements&lt;/li&gt; &#xA; &lt;li&gt;elements can be customizable with background, border and text color, border thickness, text size and weight.&lt;/li&gt; &#xA; &lt;li&gt;interactively connect elements&lt;/li&gt; &#xA; &lt;li&gt;save/load dashboard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First create a &lt;em&gt;Dashboard&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dashboard dashboard = Dashboard();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then crete the [FlowChart] widget where you can react to the user interactions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;FlowChart(&#xA;    dashboard: dashboard,&#xA;    onDashboardTapped: ((context, position) {}),&#xA;    onDashboardLongtTapped: ((context, position) {}),&#xA;    onElementLongPressed: (context, element) {},&#xA;    onElementPressed: (context, element) {},&#xA;    onHandlerPressed: (context, position, handler, element) {},&#xA;    onHandlerLongPressed: (context, position, handler, element) {},&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then use the &lt;em&gt;dashboard&lt;/em&gt; variable to add, remove, resize etc. elements or load/save the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://github.com/alnitak/flutter_flow_chart/raw/master/example/lib/main.dart&#34;&gt;example&lt;/a&gt;, the &lt;a href=&#34;https://pub.dev/packages/star_menu&#34;&gt;StarMenu&lt;/a&gt; package is used to easily interact with user inputs.&lt;/p&gt; &#xA;&lt;h2&gt;The Dashboard&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Dashboard&lt;/strong&gt; object contains all the methods described below used to interact with the flow chart.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;relevant methods&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setGridBackgroundParams&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set grid background parameters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setHandlerFeedbackOffset&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set the feedback offset to help on mobile device to see the end of arrow and not hiding behind the finger when moving it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setElementResizable&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set the element as resizable. A handle will be displayed on the bottom right and will disappear when finish resizing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;addElement&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;add a &lt;em&gt;FlowElement&lt;/em&gt; to the dashboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;removeAllElements&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove all elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;removeElementConnection&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove the given handler connection of the given element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;removeElementConnections&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove all the connections from the given element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;removeElementById&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove all the elements with the given id from the dashboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;removeElement&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;remove the given element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;addNextById&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;make a connection from the given sourceElement to the elements with the given id&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;saveDashboard&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;save the dashboard into the given file path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;loadDashboard&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;clear the dashboard and load the new one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;The FlowElement&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;FlowElement&lt;/em&gt; defines the element kind with its position, size, colors and so on.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;properties&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;position&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offset&lt;/td&gt; &#xA;   &lt;td&gt;The position of the &lt;em&gt;FlowElement&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;size&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;The size of the &lt;em&gt;FlowElement&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Element text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;textColor&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;Text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;textSize&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;double&lt;/td&gt; &#xA;   &lt;td&gt;Text size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;textIsBold&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;Makes text bold if true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;kind&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ElementKind&lt;/td&gt; &#xA;   &lt;td&gt;Element shape: enum {rectangle, diamond, storage, oval, parallelogram}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;handlers&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&#xA;    &lt;handler&gt;&lt;/handler&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connection handlers: enum {topCenter, bottomCenter, rightCenter, leftCenter}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;handlerSize&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;The size of element handlers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;backgroundColor&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;Background color of the element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;borderColor&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;Border color of the element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;borderThickness&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;Border thickness of the element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;elevation&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size&lt;/td&gt; &#xA;   &lt;td&gt;Shadow elevation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;next&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List&#xA;    &lt;connectionparams&gt;&lt;/connectionparams&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shadow elevation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;relevant methods&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setIsResizing&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When setting to true, a handler will disply at the element bottom right to let the user to resize it. When finish it will disappear.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setText&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set element text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setTextColor&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setTextSize&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setTextIsBold&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set text bold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setBackgroundColor&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setBorderColor&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set border color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setBorderThickness&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set border thickness&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;setElevation&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set elevation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;changePosition&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change element position in the dashboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;changeSize&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change element size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;h2&gt;Add an element to Dashboard&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Dashboard dashboard = Dashboard();&#xA;&#xA;///////////////////////////////////&#xA;/// Define 2 elements&#xA;FlowElement element1 = FlowElement(&#xA;    /// position in the local dashboard coordinates&#xA;    position: const Offset(100, 100),&#xA;    /// element size&#xA;    size: const Size(100, 100),&#xA;    /// text to show&#xA;    text: &#39;diamond&#39;,&#xA;    /// rectangle, diamond, storage, oval or parallelogram element kind&#xA;    kind: ElementKind.diamond,&#xA;    /// which handler to make active&#xA;    handlers: [&#xA;        Handler.bottomCenter,&#xA;        Handler.topCenter,&#xA;        Handler.leftCenter,&#xA;        Handler.rightCenter,&#xA;    ]);&#xA;FlowElement element2 = FlowElement(&#xA;    position: const Offset(300, 100),&#xA;    size: const Size(100, 150),&#xA;    text: &#39;rect&#39;,&#xA;    kind: ElementKind.rectangle,&#xA;    handlers: [&#xA;        Handler.bottomCenter,&#xA;        Handler.topCenter,&#xA;        Handler.leftCenter,&#xA;        Handler.rightCenter,&#xA;    ]);&#xA;///////////////////////////////////&#xA;/// Add the element to Dashboard&#xA;dashboard.addElement(element);&#xA;&#xA;///////////////////////////////////&#xA;/// Connect right handler of element1 &#xA;/// to the left handler of element2&#xA;dashboard.addNextById(&#xA;    element1,&#xA;    element2.id,&#xA;    ArrowParams(&#xA;        thickness: 1.5,&#xA;        color: Colors.Black,&#xA;        startArrowPosition: Alignment.centerRight,&#xA;        endArrowPosition: Alignment.centerLeft,&#xA;    ),&#xA;);&#xA;&#xA;///////////////////////////////////&#xA;/// Save/load dashboard&#xA;Directory appDocDir =&#xA;    await path.getApplicationDocumentsDirectory();&#xA;&#xA;dashboard.saveDashboard(&#39;${appDocDir.path}/FLOWCHART.json&#39;);&#xA;&#xA;dashboard.loadDashboard(&#39;${appDocDir.path}/FLOWCHART.json&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>