<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-20T01:36:44Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SongTube/SongTube-App</title>
    <updated>2022-06-20T01:36:44Z</updated>
    <id>tag:github.com,2022-06-20:/SongTube/SongTube-App</id>
    <link href="https://github.com/SongTube/SongTube-App" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple &amp; Beautiful App (Tool) made in Flutter to Download Media from YouTube&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Y80SpfK.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SongTube is a new beautiful and fast application made in flutter, it supports YouTube audio and video downloading at any quality, In-App YouTube Browser, audio conversion, Playlists and an Audio tags editor.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Video Download at any available Quality&lt;/li&gt; &#xA; &lt;li&gt;Download HDR and 60fps Videos&lt;/li&gt; &#xA; &lt;li&gt;Audio Download at best available Quality&lt;/li&gt; &#xA; &lt;li&gt;Audio Tags &amp;amp; Artwork Editor&lt;/li&gt; &#xA; &lt;li&gt;Audio Filters (Volume, Bass, Treble)&lt;/li&gt; &#xA; &lt;li&gt;Audio Conversion (AAC, OGG and MP3) (optional)&lt;/li&gt; &#xA; &lt;li&gt;Full Playlist Downloads (Only Audio)&lt;/li&gt; &#xA; &lt;li&gt;Set custom path for Audio/Video download&lt;/li&gt; &#xA; &lt;li&gt;Music Player built-in&lt;/li&gt; &#xA; &lt;li&gt;Video Player built-in&lt;/li&gt; &#xA; &lt;li&gt;Music Equalizer&lt;/li&gt; &#xA; &lt;li&gt;Music Playlists&lt;/li&gt; &#xA; &lt;li&gt;Youtube Videos Playlists&lt;/li&gt; &#xA; &lt;li&gt;In-App Youtube Browser&lt;/li&gt; &#xA; &lt;li&gt;Light/Dark/Black Themes&lt;/li&gt; &#xA; &lt;li&gt;Accent Color Picker&lt;/li&gt; &#xA; &lt;li&gt;UI Customizations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Download SongTube&lt;/h2&gt; &#xA;&lt;p&gt;You can get this application from the Official SongTube Channel on &lt;strong&gt;Telegram:&lt;/strong&gt; &lt;a href=&#34;https://t.me/songtubechannel&#34;&gt;https://t.me/songtubechannel&lt;/a&gt; &lt;strong&gt;You can also join SongTube Official Group from the Channel, any kind of issue report or recommendation is welcomed!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other SongTube download sites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drive: &lt;a href=&#34;https://tinyurl.com/SongTubeDrive&#34;&gt;https://tinyurl.com/SongTubeDrive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;https://tinyurl.com/STGithub&#34;&gt;https://tinyurl.com/STGithub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;AppGallery: &lt;a href=&#34;https://tinyurl.com/STAppGallery&#34;&gt;https://tinyurl.com/STAppGallery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute on anything you want from new features fixes, etc... But most importantly if the app doesn&#39;t support your native Language you can contribute by implementing it! It&#39;s really easy:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1st Step:&lt;/strong&gt; Create a new Language File by creating it under this project&#39;s &lt;strong&gt;internal/languages&lt;/strong&gt; folder, the file needs to be named: &#34;language&lt;strong&gt;Code&lt;/strong&gt;.dart&#34; (&lt;strong&gt;Code&lt;/strong&gt; is the LanguageCode of the Language you are implementing, for example: &lt;strong&gt;En&lt;/strong&gt; or &lt;strong&gt;Es&lt;/strong&gt;), you can then copy the contents of any other already supported Language and adapt/translate it to your new one (Remember to change the class name to &#34;Language&lt;strong&gt;Code&lt;/strong&gt;&#34;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2nd Step:&lt;/strong&gt; To finish your implementation, open this file: &lt;a href=&#34;https://github.com/SongTube/SongTube-App/raw/master/lib/internal/languages.dart&#34;&gt;languages.dart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inside that file you will find at the first code lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final _supportedLanguages = &amp;lt;LanguageData&amp;gt;[&#xA;  // English (US)&#xA;  LanguageData(&#34;üá∫üá∏&#34;, &#34;English&#34;, &#39;en&#39;),&#xA;  // Spanish (VE)&#xA;  LanguageData(&#34;ve&#34;, &#34;Espa√±ol&#34;, &#34;es&#34;),&#xA;];&#xA;Future&amp;lt;Languages&amp;gt; _loadLocale(Locale locale) async {&#xA;  switch (locale.languageCode) {&#xA;    // English (US)&#xA;    case &#39;en&#39;:&#xA;      return LanguageEn();&#xA;    // Spanish (VE)&#xA;    case &#39;es&#39;:&#xA;      return LanguageEs();&#xA;    // Default Language (English)&#xA;    default:&#xA;      return LanguageEn();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where for your new Language you have to add a new LanguageData(flag, name, languageCode) into the &lt;strong&gt;_supportedLanguages&lt;/strong&gt; list, then, a new switch case in &lt;strong&gt;_loadLocale()&lt;/strong&gt; function with your languageCode and return your new language File, open a Pull Request and after checking I will merge it!.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you don&#39;t feel like doing this last step, you can still send me your new Language File via PullRequest and I will do it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Current list of Languages Supported:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English&lt;/li&gt; &#xA; &lt;li&gt;Espa√±ol&lt;/li&gt; &#xA; &lt;li&gt;Portugu√™s (Thanks to &lt;a href=&#34;https://github.com/RickyM7&#34;&gt;@RickyM7&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Igbo (Thanks to &lt;a href=&#34;https://github.com/enweazudaniel&#34;&gt;@enweazudaniel&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Indonesian (Thanks to &lt;a href=&#34;https://github.com/breakdowns&#34;&gt;@breakdowns&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Turkish (Thanks to Barƒ±≈ü Kƒ±rmƒ±zƒ±)&lt;/li&gt; &#xA; &lt;li&gt;Russian (Thanks yxur_bruh)&lt;/li&gt; &#xA; &lt;li&gt;Arabic (Thanks JOOD_TECH)&lt;/li&gt; &#xA; &lt;li&gt;Somali (Thanks &lt;a href=&#34;https://github.com/nadiration&#34;&gt;@nadiration&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;German (Thanks &lt;a href=&#34;https://github.com/Paduu29&#34;&gt;@Paduu29&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bengali (Thanks &lt;a href=&#34;https://github.com/pieas-asif&#34;&gt;@pieas-asif&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ukrainian (Thanks &lt;a href=&#34;https://github.com/redman-dev29&#34;&gt;@redman-dev29&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Japanese (Thanks to &lt;a href=&#34;https://github.com/HiSubway&#34;&gt;@HiSubway&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Italian (Thanks to &lt;a href=&#34;https://github.com/alpha4041&#34;&gt;@alpha4041&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>VeryGoodOpenSource/dart_frog</title>
    <updated>2022-06-20T01:36:44Z</updated>
    <id>tag:github.com,2022-06-20:/VeryGoodOpenSource/dart_frog</id>
    <link href="https://github.com/VeryGoodOpenSource/dart_frog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, minimalistic backend framework for Dart üéØ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/verygoodopensource/dart_frog#gh-dark-mode-only&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/assets/dart_frog_logo_white.png#gh-dark-mode-only&#34; alt=&#34;Dart Frog Logo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/verygoodopensource/dart_frog#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/assets/dart_frog_logo_black.png#gh-light-mode-only&#34; alt=&#34;Dart Frog Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/dart_frog.yaml&#34;&gt;&lt;img src=&#34;https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/dart_frog.yaml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/dart_frog.yaml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/packages/dart_frog/coverage_badge.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/dart_frog&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/dart_frog.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/very_good_analysis&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-very_good_analysis-B22C89.svg?sanitize=true&#34; alt=&#34;style: very good analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/felangel/mason&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Ftinyurl.com%2Fmason-badge&#34; alt=&#34;Powered by Mason&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fast, minimalistic backend framework for Dart üéØ&lt;/p&gt; &#xA;&lt;p&gt;Developed with üíô by &lt;a href=&#34;https://verygood.ventures&#34;&gt;Very Good Ventures&lt;/a&gt; ü¶Ñ&lt;/p&gt; &#xA;&lt;h2&gt;Experimental üöß&lt;/h2&gt; &#xA;&lt;p&gt;Dart Frog is an experimental project under development and should not be used in production at this time.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start üöÄ&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites üìù&lt;/h3&gt; &#xA;&lt;p&gt;In order to use Dart Frog you must have the &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;Dart SDK&lt;/a&gt; installed on your machine.&lt;/p&gt; &#xA;&lt;h3&gt;Installing üßë‚Äçüíª&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# üì¶ Install the dart_frog cli from pub.dev&#xA;dart pub global activate dart_frog_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Project ‚ú®&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;dart_frog create&lt;/code&gt; command to create a new project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# üöÄ Create a new project called &#34;my_project&#34;&#xA;dart_frog create my_project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start the Dev Server üèÅ&lt;/h3&gt; &#xA;&lt;p&gt;Next, open the newly created project and start the dev server via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# üèÅ Start the dev server&#xA;dart_frog dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üí° &lt;strong&gt;Tip&lt;/strong&gt;: By default port &lt;code&gt;8080&lt;/code&gt; is used. A custom port can be used via the &lt;code&gt;--port&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h3&gt;Create a Production Build üì¶&lt;/h3&gt; &#xA;&lt;p&gt;Create a production build which includes a &lt;code&gt;DockerFile&lt;/code&gt; so that you can deploy anywhere:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# üì¶ Create a production build&#xA;dart_frog build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Goals üéØ&lt;/h2&gt; &#xA;&lt;p&gt;Dart Frog is built on top of &lt;a href=&#34;https://pub.dev/packages/shelf&#34;&gt;shelf&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/packages/mason&#34;&gt;mason&lt;/a&gt; and is inspired by many tools including &lt;a href=&#34;https://remix.run&#34;&gt;remix.run&lt;/a&gt;, &lt;a href=&#34;https://nextjs.org&#34;&gt;next.js&lt;/a&gt;, and &lt;a href=&#34;https://expressjs.com&#34;&gt;express.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of Dart Frog is to help developers effectively build backends in Dart. Currently, Dart Frog is focused on optimizing the process of building backends which aggregate, compose, and normalize data from multiple sources.&lt;/p&gt; &#xA;&lt;p&gt;Dart Frog provides a simple core with a small API surface area in order to reduce the learning curve and ramp-up time for developers. In addition, Dart Frog is intended to help Flutter/Dart developers maximize their productivity by having a unified tech stack that enables sharing tooling, models, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Feature Set ‚ú®&lt;/h2&gt; &#xA;&lt;p&gt;‚úÖ Hot Reload ‚ö°Ô∏è&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Dart Dev Tools ‚öôÔ∏è&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ File System Routing üöè&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Index Routes üóÇ&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Nested Routes ü™Ü&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Dynamic Routes üåì&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Middleware üçî&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Dependency Injection üíâ&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Production Builds üë∑‚Äç‚ôÇÔ∏è&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ Docker üê≥&lt;/p&gt; &#xA;&lt;p&gt;üöß Generated Dart Client Package üì¶&lt;/p&gt; &#xA;&lt;p&gt;üöß Generated API Documentation üìî&lt;/p&gt; &#xA;&lt;h2&gt;Documentation üìù&lt;/h2&gt; &#xA;&lt;h3&gt;Routes üöè&lt;/h3&gt; &#xA;&lt;p&gt;In Dart Frog, a route consists of an &lt;code&gt;onRequest&lt;/code&gt; function (called a route handler) exported from a &lt;code&gt;.dart&lt;/code&gt; file in the &lt;code&gt;routes&lt;/code&gt; directory. Each endpoint is associated with a routes file based on its file name. Files named, &lt;code&gt;index.dart&lt;/code&gt; will correspond to a &lt;code&gt;/&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you create &lt;code&gt;routes/hello.dart&lt;/code&gt; that exports an &lt;code&gt;onRequest&lt;/code&gt; method like below, it will be accessible at &lt;code&gt;/hello&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response(body: &#39;Hello World&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All route handlers have access to a &lt;code&gt;RequestContext&lt;/code&gt; which can be used to access the incoming request as well as dependencies provided to the request context (see middleware).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  // Access the incoming request.&#xA;  final request = context.request;&#xA;&#xA;  // Return a response.&#xA;  return Response(body: &#39;Hello World&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can customize the status code of the response via the &lt;code&gt;statusCode&lt;/code&gt; parameter on the &lt;code&gt;Response&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response(statusCode: 204);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, we can return JSON via the &lt;code&gt;Response.json&lt;/code&gt; constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response.json(&#xA;    body: &amp;lt;String, dynamic&amp;gt;{&#39;hello&#39;: &#39;world!&#39;},&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also return any Dart object in the &lt;code&gt;body&lt;/code&gt; of the &lt;code&gt;Response.json&lt;/code&gt; constructor and it will be serialized correctly as long as it has a &lt;code&gt;toJson&lt;/code&gt; method that returns a &lt;code&gt;Map&amp;lt;String, dynamic&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;üí° &lt;em&gt;Tip: Check out &lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;json_serializable&lt;/a&gt; to automate the &lt;code&gt;toJson&lt;/code&gt; generation&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:json_annotation/json_annotation.dart&#39;;&#xA;&#xA;part &#39;user.g.dart&#39;;&#xA;&#xA;@JsonSerializable()&#xA;class User {&#xA;  const User({required this.name, required this.age});&#xA;&#xA;  final String name;&#xA;  final int age;&#xA;&#xA;  Map&amp;lt;String, dynamic&amp;gt; toJson() =&amp;gt; _$UserToJson(this);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  return Response.json(&#xA;    body: User(name: &#39;Dash&#39;, age: 42),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Route handlers can be synchronous or asynchronous. To convert the above route handlers to async, we just need to update the return type from &lt;code&gt;Response&lt;/code&gt; to &lt;code&gt;Future&amp;lt;Response&amp;gt;&lt;/code&gt;. We can add the &lt;code&gt;async&lt;/code&gt; keyword in order to &lt;code&gt;await&lt;/code&gt; futures within our handler before returning a &lt;code&gt;Response&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Future&amp;lt;Response&amp;gt; onRequest(RequestContext context) async {&#xA;  final result = await _someFuture();&#xA;  return Response(body: &#39;Result is: $result!&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dynamic Routes üåì&lt;/h4&gt; &#xA;&lt;p&gt;Dart Frog supports dynamic routes. For example, if you create a file called &lt;code&gt;routes/posts/[id].dart&lt;/code&gt;, then it will be accessible at &lt;code&gt;/posts/1&lt;/code&gt;, &lt;code&gt;/posts/2&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Routing parameters are forwarded to the &lt;code&gt;onRequest&lt;/code&gt; method as seen below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context, String id) {&#xA;  return Response(body: &#39;post id: $id&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Middleware üçî&lt;/h3&gt; &#xA;&lt;p&gt;Middleware in Dart Frog allows you to execute code before and after a request is processed. You can modify the inbound request and outbound responses, provide dependencies, and more!&lt;/p&gt; &#xA;&lt;p&gt;In Dart Frog, a piece of middleware consists of a &lt;code&gt;middleware&lt;/code&gt; function exported from a &lt;code&gt;_middleware.dart&lt;/code&gt; file within a subdirectory of the &lt;code&gt;routes&lt;/code&gt; folder. There can only ever be once piece of middleware per route directory with &lt;code&gt;routes/_middleware.dart&lt;/code&gt; being middleware that is executed for all inbound requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Handler middleware(Handler handler) {&#xA;  return (context) async {&#xA;    // Execute code before request is handled.&#xA;&#xA;    // Forward the request to the respective handler.&#xA;    final response = await handler(context);&#xA;&#xA;    // Execute code after request is handled.&#xA;&#xA;    // Return a response.&#xA;    return response;&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can chain built-in middleware, such as the &lt;code&gt;requestLogger&lt;/code&gt; middleware via the &lt;code&gt;use&lt;/code&gt; API. For example, if we create &lt;code&gt;routes/_middleware.dart&lt;/code&gt; with the following contents, we will automatically log all requests to our server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Handler middleware(Handler handler) {&#xA;  return handler.use(requestLogger());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dependency Injection üíâ&lt;/h4&gt; &#xA;&lt;p&gt;Middleware can also be used to provide dependencies to a &lt;code&gt;RequestContext&lt;/code&gt; via a &lt;code&gt;provider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;provider&lt;/code&gt; is a type of middleware that can create and provide an instance of type &lt;code&gt;T&lt;/code&gt; to the request context. The &lt;code&gt;create&lt;/code&gt; callback is called lazily and the injected &lt;code&gt;RequestContext&lt;/code&gt; can be used to perform additional lookups to access values provided upstream.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, we&#39;ll use a &lt;code&gt;provider&lt;/code&gt; to inject a &lt;code&gt;String&lt;/code&gt; into our request context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Handler middleware(Handler handler) {&#xA;  return handler&#xA;      .use(requestLogger())&#xA;      .use(provider&amp;lt;String&amp;gt;((context) =&amp;gt; &#39;Welcome to Dart Frog!&#39;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can later access the provided via from within a route handler using &lt;code&gt;context.read&amp;lt;T&amp;gt;()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;&#xA;Response onRequest(RequestContext context) {&#xA;  final greeting = context.read&amp;lt;String&amp;gt;();&#xA;  return Response(body: greeting);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing üß™&lt;/h3&gt; &#xA;&lt;p&gt;In Dart Frog, we can unit test our route handlers and middleware effectively because they are plain functions.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can test our route handler above using &lt;code&gt;package:test&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;dart:io&#39;;&#xA;&#xA;import &#39;package:dart_frog/dart_frog.dart&#39;;&#xA;import &#39;package:mocktail/mocktail.dart&#39;;&#xA;import &#39;package:test/test.dart&#39;;&#xA;&#xA;import &#39;../../routes/index.dart&#39; as route;&#xA;&#xA;class _MockRequestContext extends Mock implements RequestContext {}&#xA;&#xA;void main() {&#xA;  group(&#39;GET /&#39;, () {&#xA;    test(&#39;responds with a 200 and greeting.&#39;, () async {&#xA;      const greeting = &#39;Hello World!&#39;;&#xA;      final context = _MockRequestContext();&#xA;      when(() =&amp;gt; context.read&amp;lt;String&amp;gt;()).thenReturn(greeting);&#xA;      final response = route.onRequest(context);&#xA;      expect(response.statusCode, equals(HttpStatus.ok));&#xA;      expect(response.body(), completion(equals(greeting)));&#xA;    });&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above test, we&#39;re using &lt;code&gt;package:mocktail&lt;/code&gt; to create a mock &lt;code&gt;RequestContext&lt;/code&gt; and stub the return value when calling &lt;code&gt;context.read&amp;lt;String&amp;gt;()&lt;/code&gt;. Then, all we need to do is call &lt;code&gt;onRequest&lt;/code&gt; with the mocked context and we can assert that the response is what we expect. In this case, we&#39;re checking the statusCode and response body to ensure that the response is a 200 with the provided greeting.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Resources üìö&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/tree/main/example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VeryGoodOpenSource/dart_frog/raw/main/ROADMAP.md&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://verygood.ventures/blog/dart-frog&#34;&gt;Blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/N7l0b09c6DA&#34;&gt;Livestream demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;üí° Fun Fact: the &lt;a href=&#34;https://dart.dev/tools/dart2js&#34;&gt;dart2js&lt;/a&gt; compiler &lt;a href=&#34;https://github.com/dart-lang/sdk/issues/2194&#34;&gt;used to be called frog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>VeryGoodOpenSource/very_good_cli</title>
    <updated>2022-06-20T01:36:44Z</updated>
    <id>tag:github.com,2022-06-20:/VeryGoodOpenSource/very_good_cli</id>
    <link href="https://github.com/VeryGoodOpenSource/very_good_cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Very Good Command Line Interface for Dart created by Very Good Ventures ü¶Ñ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Very Good CLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://verygood.ventures/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=CLI#gh-dark-mode-only&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VGVentures/very_good_brand/main/styles/README/vgv_logo_white.png#gh-dark-mode-only&#34; alt=&#34;Very Good Ventures&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://verygood.ventures/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=CLI#gh-light-mode-only&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VGVentures/very_good_brand/main/styles/README/vgv_logo_black.png#gh-light-mode-only&#34; alt=&#34;Very Good Ventures&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Developed with üíô by &lt;a href=&#34;https://verygood.ventures/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=CLI&#34;&gt;Very Good Ventures&lt;/a&gt; ü¶Ñ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VeryGoodOpenSource/very_good_cli/actions&#34;&gt;&lt;img src=&#34;https://github.com/VeryGoodOpenSource/very_good_cli/workflows/very_good_cli/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/VeryGoodOpenSource/very_good_cli/actions&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/very_good_cli/main/coverage_badge.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/very_good_cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/very_good_cli.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/very_good_analysis&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style-very_good_analysis-B22C89.svg?sanitize=true&#34; alt=&#34;style: very good analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A Very Good Command Line Interface for Dart.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dart pub global activate very_good_cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;very_good create&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create a very good project in seconds based on the provided template. The &lt;a href=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/very_good_cli/main/doc/very_good_core.md&#34;&gt;Very Good Core&lt;/a&gt; template is used by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/very_good_cli/main/doc/assets/very_good_create.gif&#34; alt=&#34;Very Good Create&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Creates a new very good project in the specified directory.&#xA;&#xA;Usage: very_good create &amp;lt;output directory&amp;gt;&#xA;-h, --help                    Print this usage information.&#xA;    --project-name            The project name for this new project. This must be a valid dart package name.&#xA;    --desc                    The description for this new project.&#xA;                              (defaults to &#34;A Very Good Project created by Very Good CLI.&#34;)&#xA;    --org-name                The organization for this new project.&#xA;                              (defaults to &#34;com.example.verygoodcore&#34;)&#xA;-t, --template                The template used to generate this new project.&#xA;&#xA;          [core] (default)    Generate a Very Good Flutter application.&#xA;          [dart_pkg]          Generate a reusable Dart package.&#xA;          [flutter_pkg]       Generate a reusable Flutter package.&#xA;          [flutter_plugin]    Generate a reusable Flutter federated plugin.&#xA;              --android       The plugin supports the Android platform.&#xA;              --ios           The plugin supports the iOS platform.&#xA;              --web           The plugin supports the Web platform.&#xA;              --linux         The plugin supports the Linux platform.&#xA;              --macos         The plugin supports the macOS platform.&#xA;              --windows       The plugin supports the Windows platform.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create a new Flutter app named my_app&#xA;very_good create my_app --desc &#34;My new Flutter app&#34;&#xA;&#xA;# Create a new Flutter app named my_app with a custom org&#xA;very_good create my_app --desc &#34;My new Flutter app&#34; --org &#34;com.custom.org&#34;&#xA;&#xA;# Create a new Flutter package named my_flutter_package&#xA;very_good create my_flutter_package -t flutter_pkg --desc &#34;My new Flutter package&#34;&#xA;&#xA;# Create a new Dart package named my_dart_package&#xA;very_good create my_dart_package -t dart_pkg --desc &#34;My new Dart package&#34;&#xA;&#xA;# Create a new Flutter plugin named my_flutter_plugin (all platforms enabled)&#xA;very_good create my_flutter_plugin -t flutter_plugin --desc &#34;My new Flutter plugin&#34;&#xA;&#xA;# Create a new Flutter plugin named my_flutter_plugin (some platforms disabled)&#xA;very_good create my_flutter_plugin -t flutter_plugin --desc &#34;My new Flutter plugin&#34; --windows false --macos false --linux false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s Included in Very Good Core? üì¶&lt;/h3&gt; &#xA;&lt;p&gt;Out of the box, &lt;a href=&#34;https://raw.githubusercontent.com/VeryGoodOpenSource/very_good_cli/main/doc/very_good_core.md&#34;&gt;Very Good Core&lt;/a&gt; includes:&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://flutter.dev/docs/development/tools/sdk/release-notes/supported-platforms&#34;&gt;Cross Platform Support&lt;/a&gt; - Built-in support for iOS, Android, Web, and Windows (MacOS/Linux coming soon!)&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://flutter.dev/docs/deployment/flavors&#34;&gt;Build Flavors&lt;/a&gt; - Multiple flavor support for development, staging, and production&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://flutter.dev/docs/development/accessibility-and-localization/internationalization&#34;&gt;Internationalization Support&lt;/a&gt; - Internationalization support using synthetic code generation to streamline the development process&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://flutter.dev/docs/null-safety&#34;&gt;Sound Null-Safety&lt;/a&gt; - No more null-dereference exceptions at runtime. Develop with a sound, static type system.&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://bloclibrary.dev&#34;&gt;Bloc&lt;/a&gt; - Integrated bloc architecture for scalable, testable code which offers a clear separation between business logic and presentation&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://flutter.dev/docs/testing&#34;&gt;Testing&lt;/a&gt; - Unit and Widget Tests with 100% line coverage (Integration Tests coming soon!)&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://api.flutter.dev/flutter/dart-developer/log.html&#34;&gt;Logging&lt;/a&gt; - Built-in, extensible logging to capture uncaught Flutter and Dart Exceptions&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://pub.dev/packages/very_good_analysis&#34;&gt;Very Good Analysis&lt;/a&gt; - Strict Lint Rules which are used at &lt;a href=&#34;https://verygood.ventures/?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=CLI&#34;&gt;Very Good Ventures&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚úÖ&amp;nbsp; &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Continuous Integration&lt;/a&gt; - Lint, format, test, and enforce code coverage using &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;* Learn more at &lt;a href=&#34;https://verygood.ventures/blog/flutter-starter-app-very-good-core-cli?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=CLIblog&#34;&gt;Flutter Starter App: Very Good Core &amp;amp; CLI&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;very_good packages get&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get packages in a Dart or Flutter project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install packages in the current directory&#xA;very_good packages get&#xA;&#xA;# Install packages in ./some/other/directory&#xA;very_good packages get ./some/other/directory&#xA;&#xA;# Install packages recursively&#xA;very_good packages get --recursive&#xA;&#xA;# Install packages recursively (shorthand)&#xA;very_good packages get -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Complete Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Get packages in a Dart or Flutter project.&#xA;&#xA;Usage: very_good packages get [arguments]&#xA;-h, --help         Print this usage information.&#xA;-r, --recursive    Install dependencies recursively for all nested packages.&#xA;&#xA;Run &#34;very_good help&#34; to see global options.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;very_good test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Run tests in a Dart or Flutter project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Run all tests&#xA;very_good test&#xA;&#xA;# Run all tests and collect coverage&#xA;very_good test --coverage&#xA;&#xA;# Run all tests and enforce 100% coverage&#xA;very_good test --coverage --min-coverage 100&#xA;&#xA;# Run only tests in ./some/other/directory&#xA;very_good test ./some/other/directory&#xA;&#xA;# Run tests recursively&#xA;very_good test --recursive&#xA;&#xA;# Run tests recursively (shorthand)&#xA;very_good test -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Complete Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Run tests in a Dart or Flutter project.&#xA;&#xA;Usage: very_good test [arguments]&#xA;-h, --help                            Print this usage information.&#xA;    --coverage                        Whether to collect coverage information.&#xA;-r, --recursive                       Run tests recursively for all nested packages.&#xA;    --[no-]optimization               Whether to apply optimizations for test performance.&#xA;                                      (defaults to on)&#xA;    --exclude-coverage                A glob which will be used to exclude files that match from the coverage.&#xA;-x, --exclude-tags                    Run only tests that do not have the specified tags.&#xA;    --min-coverage                    Whether to enforce a minimum coverage percentage.&#xA;    --test-randomize-ordering-seed    The seed to randomize the execution order of test cases within test files.&#xA;    --update-goldens                  Whether &#34;matchesGoldenFile()&#34; calls within your test methods should update the golden files.&#xA;&#xA;Run &#34;very_good help&#34; to see global options.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;very_good --help&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;See the complete list of commands and usage information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ü¶Ñ A Very Good Command Line Interface&#xA;&#xA;Usage: very_good &amp;lt;command&amp;gt; [arguments]&#xA;&#xA;Global options:&#xA;-h, --help           Print this usage information.&#xA;    --version        Print the current version.&#xA;    --analytics      Toggle anonymous usage statistics.&#xA;&#xA;          [false]    Disable anonymous usage statistics&#xA;          [true]     Enable anonymous usage statistics&#xA;&#xA;Available commands:&#xA;  create     very_good create &amp;lt;output directory&amp;gt;&#xA;             Creates a new very good project in the specified directory.&#xA;  packages   Command for managing packages.&#xA;  test       Run tests in a Dart or Flutter project.&#xA;&#xA;Run &#34;very_good help &amp;lt;command&amp;gt;&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>