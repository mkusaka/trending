<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-17T01:38:42Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>simplezhli/flutter_deer</title>
    <updated>2022-06-17T01:38:42Z</updated>
    <id>tag:github.com,2022-06-17:/simplezhli/flutter_deer</id>
    <link href="https://github.com/simplezhli/flutter_deer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦌 Flutter 练习项目(包括集成测试、可访问性测试)。内含完整UI设计图，更贴近真实项目的练习。Flutter practice project. Includes a complete UI design and exercises that are closer to real projects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Deer&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/logo.jpg&#34;&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/README-EN.md&#34;&gt;English&lt;/a&gt; | 中文&lt;/h2&gt; &#xA;&lt;p&gt;本项目为个人学习Flutter的练习项目。&lt;/p&gt; &#xA;&lt;p&gt;通过设置、修改、组合自带部件以及自定义来实现具体的设计效果，满足日常开发的需求。&lt;/p&gt; &#xA;&lt;p&gt;本项目设计图见design目录，你可以通过我提供的设计图有目标的去练习。所有的实现仅是个人的学习理解，如果有更好的实现方案欢迎交流。&lt;/p&gt; &#xA;&lt;h2&gt;预览&lt;/h2&gt; &#xA;&lt;p&gt;部分页面效果如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_1.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_2.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_3.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_4.png&#34; alt=&#34;&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_5.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_6.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_7.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_8.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_9.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_10.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_11.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_12.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_13.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_14.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_15.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_17.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_18.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_19.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_20.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_21.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_22.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_23.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_24.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_25.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_26.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/Screenshot_27.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/preview/lottie.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;觉得还可以的话，来个Star、Fork支持一波！本项目持续维护中，有问题欢迎提Issue。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;实现内容（已迁移到空安全）&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mvp模式&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;provider&lt;/code&gt; (6.x 版本)做状态管理&lt;/li&gt; &#xA; &lt;li&gt;基于&lt;code&gt;dio&lt;/code&gt; （4.x 版本）的网络请求封装&lt;/li&gt; &#xA; &lt;li&gt;完整的集成测试、可访问性测试。&lt;/li&gt; &#xA; &lt;li&gt;支持深色模式&lt;/li&gt; &#xA; &lt;li&gt;本地化（感谢 @ghedwards）&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;Sliver&lt;/code&gt; 系列组件实现复杂滚动效果&lt;/li&gt; &#xA; &lt;li&gt;使用高德地图定位选择地址（支持Web）&lt;/li&gt; &#xA; &lt;li&gt;通用Widget的处理封装&lt;/li&gt; &#xA; &lt;li&gt;下拉刷新 + 上拉加载更多&lt;/li&gt; &#xA; &lt;li&gt;应用检查更新&lt;/li&gt; &#xA; &lt;li&gt;PopupWindow&lt;/li&gt; &#xA; &lt;li&gt;扫码功能（qr_code_scanner插件）&lt;/li&gt; &#xA; &lt;li&gt;菜单切换动画（圆形扩散、3D翻转）&lt;/li&gt; &#xA; &lt;li&gt;侧滑删除&lt;/li&gt; &#xA; &lt;li&gt;城市选择&lt;/li&gt; &#xA; &lt;li&gt;类似京东选择城市的三级联动&lt;/li&gt; &#xA; &lt;li&gt;各种自定义Dialog&lt;/li&gt; &#xA; &lt;li&gt;列表头部吸顶&lt;/li&gt; &#xA; &lt;li&gt;密码输入键盘&lt;/li&gt; &#xA; &lt;li&gt;验证码输入框&lt;/li&gt; &#xA; &lt;li&gt;自定义简易日历&lt;/li&gt; &#xA; &lt;li&gt;曲线图及&lt;a href=&#34;https://dartpad.cn/d06f8f737d6eb2d87978eb2d14b87864&#34;&gt;饼状图&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;模块化路由管理&lt;/li&gt; &#xA; &lt;li&gt;更多Demo（水波纹动画、刮刮卡、lottie）&lt;/li&gt; &#xA; &lt;li&gt;更多的细节优化&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;具体可以下载体验：&lt;/p&gt; &#xA;&lt;p&gt;Android版安装包：&lt;a href=&#34;https://www.pgyer.com/gYXj&#34;&gt;点击下载&lt;/a&gt;，下载密码：&lt;code&gt;111111&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;iOS需要自行下载代码运行。&lt;/p&gt; &#xA;&lt;p&gt;Web体验地址：&lt;a href=&#34;https://simplezhli.github.io/flutter_deer/&#34;&gt;https://simplezhli.github.io/flutter_deer/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目运行环境&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplezhli/flutter_deer/actions?query=workflow%3A%22flutter_deer+driver%22+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/simplezhli/flutter_deer/workflows/flutter_deer%20driver/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Flutter version 3.0.1&#xA;&#xA;2. Dart version 2.17.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;注意事项&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;debug&lt;/code&gt;模式下会有部分卡顿现象，这属于正常现象。良好的体验需要打&lt;code&gt;release&lt;/code&gt; 包。 iOS可以执行命令&lt;code&gt;flutter build ios&lt;/code&gt; 以创建&lt;code&gt;release&lt;/code&gt;版本。 Android可以执行命令&lt;code&gt;flutter build apk&lt;/code&gt; 以创建&lt;code&gt;release&lt;/code&gt;版本。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;项目运行有问题可以在&lt;a href=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/docs/iOS%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.md&#34;&gt;iOS问题汇总&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/simplezhli/flutter_deer/master/docs/Android%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.md&#34;&gt;Android问题汇总&lt;/a&gt;中尝试寻找解决办法。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;由于部分插件的原因，本项目在Windows、macOS仅做预览（主要为原生功能方面，UI问题不大）。有兴趣的可自行运行体验。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可以执行集成测试命令&lt;code&gt;flutter drive --target=test_driver/driver.dart&lt;/code&gt; 查看功能演示。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;因为页面有点多，一开始可能会导致页面无法与设计图对应上。我在代码注释中有添加设计图的相对路径，可以搜索或查找到对应页面，希望对你有帮助。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;本项目使用&lt;a href=&#34;https://github.com/zhangruiyu/FlutterJsonBeanFactory&#34;&gt;FlutterJsonBeanFactory&lt;/a&gt;插件来生成Bean。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Web受制于js等资源过大和部署在Github上，访问会慢一些。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;心得总结（推荐阅读）&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/90546727&#34;&gt;Flutter开发中的一些Tips(一)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/94849020&#34;&gt;Flutter开发中的一些Tips(二)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/100108123&#34;&gt;Flutter开发中的一些Tips(三)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/102531559&#34;&gt;Flutter适配深色模式（DarkMode）&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/103452637&#34;&gt;说说Flutter中的RepaintBoundary&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/103823259&#34;&gt;说说Flutter中的Semantics&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/104745624&#34;&gt;说说Flutter中最熟悉的陌生人 —— Key&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/107132031&#34;&gt;说说Flutter中的无名英雄 —— Focus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/106046434&#34;&gt;Flutter性能优化实践 —— UI篇&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/105237677&#34;&gt;玩玩Flutter的拖拽——实现一款万能遥控器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/106465792&#34;&gt;玩玩Flutter Web —— 实现高德地图插件&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/114744416&#34;&gt;在GitHub Actions上进行Flutter 的测试和部署&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/95632571&#34;&gt;Flutter动画曲线Curves 效果一览&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/108352306&#34;&gt;Flutter状态管理之Riverpod&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/107857569&#34;&gt;【译】正确操作Dart中的字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/108902282&#34;&gt;【译】学习Flutter中新的Navigator和Router系统&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://weilu.blog.csdn.net/article/details/117061293&#34;&gt;【译】Flutter 2.2中的新功能&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用到的三方库&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;库&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/dio&#34;&gt;dio&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;网络库&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;状态管理&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/simplezhli/flutter_2d_amap&#34;&gt;flutter_2d_amap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;高德2D地图&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/renefloor/flutter_cached_network_image&#34;&gt;cached_network_image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;图片加载&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/theyakka/fluro&#34;&gt;fluro&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;路由管理&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/OpenFlutter/flutter_oktoast&#34;&gt;flutter_oktoast&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Toast&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Sky24n/common_utils&#34;&gt;common_utils&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dart 常用工具类库&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/letsar/flutter_slidable&#34;&gt;flutter_slidable&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;侧滑删除&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Sky24n/flustars&#34;&gt;flustars&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Flutter 常用工具类库&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/best-flutter/flutter_swiper&#34;&gt;flutter_swiper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Flutter 轮播组件&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutter/plugins/tree/master/packages/url_launcher&#34;&gt;url_launcher&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;启动URL的插件&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutter/plugins/tree/master/packages/image_picker&#34;&gt;image_picker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;图片选择插件&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ReactiveX/rxdart&#34;&gt;rxdart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Dart的响应式扩展&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutter/plugins/tree/master/packages/webview_flutter&#34;&gt;webview_flutter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;WebView插件&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/diegoveloper/flutter_keyboard_actions&#34;&gt;keyboard_actions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;处理键盘事件&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fluttercommunity/flutter_sticky_headers&#34;&gt;sticky_headers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;列表悬浮头&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flutterchina/azlistview&#34;&gt;azlistview&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;城市选择列表&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/apptreesoftware/date_utils&#34;&gt;date_utils&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;常用的日期工具类&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aeyrium/bezier-chart&#34;&gt;bezier_chart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;曲线图表&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Naddiseo/dart-sprintf&#34;&gt;sprintf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;格式化String&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/juliuscanute/qr_code_scanner&#34;&gt;qr_code_scanner&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;扫码功能&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dart-lang/intl&#34;&gt;intl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;本地化&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/fluttercommunity/plus_plugins/tree/main/packages/device_info_plus&#34;&gt;device_info_plus&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;获取设备信息&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benjamindean/flutter_vibration&#34;&gt;vibration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;振动&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xvrh/lottie-flutter&#34;&gt;lottie&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;动画效果&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;详细内容可以参看&lt;a href=&#34;https://github.com/simplezhli/flutter_deer/raw/master/pubspec.yaml&#34;&gt;pubspec.yaml&lt;/a&gt;文件&lt;/p&gt; &#xA;&lt;h2&gt;后续计划：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;添加地图功能，具体实现插件见 &lt;a href=&#34;https://github.com/simplezhli/flutter_2d_amap&#34;&gt;flutter_2d_amap&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;下拉刷新 + 上拉加载更多&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;引入状态管理，预计使用 &lt;a href=&#34;https://github.com/rrousselGit/provider&#34;&gt;provider&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;页面添加设计图路径注释，方便寻找对应的设计图。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;添加集成测试。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;深色模式支持。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;添加&lt;code&gt;Semantics&lt;/code&gt;（语义）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Web端支持。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;迁移到空安全。（安装包减少135KB，10.3M -&amp;gt; 10.1M）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;迁移至Navigator 2.0。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;已知存在问题：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;部分使用的到的三方库没有适配3.0.0，flutter_swiper_null_safety、flustars、azlistview（scrollable_positioned_list）。暂不影响运行，只是会有警告。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2.0.0 已知存在问题(#68571 #73351 #73388 #74890 #79773 #79931)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ListView在没有设置分割线的情况下，个别Item之间存在大约1像素的间隔（&lt;a href=&#34;https://github.com/flutter/flutter/issues/14288&#34;&gt;像素对齐问题&lt;/a&gt;）。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;其他历史问题见docs目录下的问题汇总。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks For&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sky24n/flutter_wanandroid&#34;&gt;flutter_wanandroid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2019 simplezhli&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;   https://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Milad-Akarie/auto_route_library</title>
    <updated>2022-06-17T01:38:42Z</updated>
    <id>tag:github.com,2022-06-17:/Milad-Akarie/auto_route_library</id>
    <link href="https://github.com/Milad-Akarie/auto_route_library" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter route generator&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/art/auto_route_logo.svg?sanitize=true&#34; height=&#34;170&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://img.shields.io/badge/License-MIT-green&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Milad-Akarie/auto_route_library/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Milad-Akarie/auto_route_library?style=flat&amp;amp;logo=github&amp;amp;colorB=green&amp;amp;label=stars&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/auto_route&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/auto_route.svg?label=pub&amp;amp;color=orange&#34; alt=&#34;pub version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/x3SBU4WRRd&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/821043906703523850.svg?color=7289da&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;style=flat-square&#34; alt=&#34;Discord Badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.buymeacoffee.com/miladakarie&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;30px&#34; width=&#34;108px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#setup-and-usage&#34;&gt;Setup and Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#generated-routes&#34;&gt;Generated routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#navigating-between-screens&#34;&gt;Navigation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#navigating-between-screens&#34;&gt;Navigating Between Screens&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#passing-arguments&#34;&gt;Passing Arguments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#returning-results&#34;&gt;Returning Results&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#nested-navigation&#34;&gt;Nested navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#tab-navigation&#34;&gt;Tab Navigation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#using-pageview&#34;&gt;Using PageView&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#using-tabbar&#34;&gt;Using TabBar&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#finding-the-right-router&#34;&gt;Finding The Right Router&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#navigating-without-context&#34;&gt;Navigating Without Context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#declarative-navigation&#34;&gt;Declarative Navigation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#working-with-paths&#34;&gt;Working with Paths&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#route-guards&#34;&gt;Route guards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#wrapping-routes&#34;&gt;Wrapping routes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#navigation-observers&#34;&gt;Navigation Observers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#customizations&#34;&gt;Customization&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#custom-route-transitions&#34;&gt;Custom Route Transitions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#custom-route-builder&#34;&gt;Custom Route Builder&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#others&#34;&gt;Others&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#autoleadingbutton-backbutton&#34;&gt;AutoLeadingButton-BackButton&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#activeguardobserver&#34;&gt;ActiveGuardObserver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#remove-shadow-from-nested-routers&#34;&gt;Remove shadow from nested routers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h4&gt;What is AutoRoute?&lt;/h4&gt; &#xA;&lt;p&gt;It’s a Flutter navigation package, it allows for strongly-typed arguments passing, effortless deep-linking and it uses code generation to simplify routes setup, with that being said it requires a minimal amount of code to generate everything needed for navigation inside of your App.&lt;/p&gt; &#xA;&lt;h4&gt;Why AutoRoute?&lt;/h4&gt; &#xA;&lt;p&gt;If your App requires deep-linking or guarded routes or just a clean routing setup you&#39;ll need to use named/generated routes and you’ll end up writing a lot of boilerplate code for mediator argument classes, checking for required arguments, extracting arguments and a bunch of other stuff. AutoRoute does all that for you and much more.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dependencies:            &#xA; auto_route: [latest-version]            &#xA;           &#xA;dev_dependencies:            &#xA; auto_route_generator: [latest-version]            &#xA; build_runner:            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup And Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a placeholder class and annotate it with &lt;code&gt;@MaterialAutoRouter&lt;/code&gt; which takes a list of routes as a required argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Unless you want to generate a part of file (.gr.dart) The name of the router must be prefixed with &lt;strong&gt;$&lt;/strong&gt; so we have a generated class with the same name minus the &lt;strong&gt;$&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;            &#xA;// @CupertinoAutoRouter            &#xA;// @AdaptiveAutoRouter            &#xA;// @CustomAutoRouter            &#xA;@MaterialAutoRouter(            &#xA;  replaceInRouteName: &#39;Page,Route&#39;,            &#xA;  routes: &amp;lt;AutoRoute&amp;gt;[            &#xA;    AutoRoute(page: BookListPage, initial: true),            &#xA;    AutoRoute(page: BookDetailsPage),            &#xA;  ],            &#xA;)            &#xA;class $AppRouter {}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using part builder ( New in version 3.0.0+)&lt;/h3&gt; &#xA;&lt;p&gt;To generate a part-of file instead of a stand alone &lt;code&gt;AppRouter&lt;/code&gt; class, simply add a &lt;code&gt;Part Directive&lt;/code&gt; to your &lt;code&gt;AppRouter&lt;/code&gt; and extend the generated private router.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;part &#39;app_router.gr.dart&#39;;    &#xA;      &#xA;@MaterialAutoRouter(            &#xA;  replaceInRouteName: &#39;Page,Route&#39;,            &#xA;  routes: &amp;lt;AutoRoute&amp;gt;[            &#xA;    AutoRoute(page: BookListPage, initial: true),            &#xA;    AutoRoute(page: BookDetailsPage),            &#xA;  ],            &#xA;)            &#xA;// extend the generated private router      &#xA;class AppRouter extends _$AppRouter{}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: You can Shorten auto-generated route names from e.g. &lt;strong&gt;BookListPageRoute&lt;/strong&gt; to &lt;strong&gt;BookListRoute&lt;/strong&gt; using the replaceInRouteName argument.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Now simply run the generator&lt;/h4&gt; &#xA;&lt;p&gt;Use the [watch] flag to watch the files&#39; system for edits and rebuild as necessary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;flutter packages pub run build_runner watch            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want the generator to run one time and exits use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;flutter packages pub run build_runner build            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Finalize the setup&lt;/h4&gt; &#xA;&lt;p&gt;after you run the generator your router class will be generated, hook it up with MaterialApp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// assuing this is the root widget of your App         &#xA;class App extends StatelessWidget {    &#xA;  // make sure you don&#39;t initiate your router        &#xA;  // inside of the build function.        &#xA;  final _appRouter = AppRouter();    &#xA;    &#xA;  @override    &#xA;  Widget build(BuildContext context){    &#xA;    return MaterialApp.router(    &#xA;      routerDelegate: _appRouter.delegate(),    &#xA;      routeInformationParser: _appRouter.defaultRouteParser(),    &#xA;    );    &#xA;  }    &#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generated Routes&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;PageRouteInfo&lt;/code&gt; object will be generated for every declared AutoRoute, These objects hold path information plus strongly-typed page arguments which are extracted from the page&#39;s default constructor. Think of them as string path segments on steroid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BookListRoute extends PageRouteInfo {            &#xA;  const BookListRoute() : super(name, path: &#39;/books&#39;);            &#xA;            &#xA;  static const String name = &#39;BookListRoute&#39;;            &#xA;}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if the declared route has children AutoRoute will add a children parameter to its constructor to be used in nested navigation. more on that here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class UserRoute extends PageRouteInfo {            &#xA;   UserRoute({List&amp;lt;PagerouteInfo&amp;gt; children}) :            &#xA;    super(            &#xA;         name,             &#xA;         path: &#39;/user/:id&#39;,            &#xA;         initialChildren: children);            &#xA;  static const String name = &#39;UserRoute&#39;;            &#xA;}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Navigating Between Screens&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;AutoRouter&lt;/code&gt; offers the same known push, pop and friends methods to manipulate the pages stack using both the generated &lt;code&gt;PageRouteInfo&lt;/code&gt; objects and paths.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// get the scoped router by calling            &#xA;AutoRouter.of(context)            &#xA;// or using the extension            &#xA;context.router            &#xA;            &#xA;// adds a new entry to the pages stack            &#xA;router.push(const BooksListRoute())          &#xA;// or by using using paths          &#xA;router.pushNamed(&#39;/books&#39;)           &#xA;        &#xA;// removes last entry in stack and pushs provided route         &#xA;// if last entry == provided route page will just be updated        &#xA;router.replace(const BooksListRoute())            &#xA;// or by using using paths          &#xA;router.replaceNamed(&#39;/books&#39;)          &#xA;        &#xA;// pops until provided route, if it already exists in stack            &#xA;// else adds it to the stack (good for web Apps).            &#xA;router.navigate(const BooksListRoute())          &#xA;// or by using using paths          &#xA;router.navigateNamed(&#39;/books&#39;)        &#xA;      &#xA;// on Web it calls window.history.back();    &#xA;// on Native it navigates you back     &#xA;// to the previous location    &#xA;router.navigateBack();    &#xA;    &#xA;// adds a list of routes to the pages stack at once        &#xA;router.pushAll([        &#xA;   BooksListRoute(),        &#xA;   BookDetailsRoute(id:1),        &#xA;]);        &#xA;        &#xA;// This&#39;s like providing a completely new stack as it rebuilds the stack        &#xA;// with the list of passed routes        &#xA;// entires might just update if already exist        &#xA;router.replaceAll([        &#xA;   LoginRoute()        &#xA;]);        &#xA;// pops the last page unless stack has 1 entry            &#xA;context.router.pop();           &#xA;// keeps poping routes until predicate is satisfied        &#xA;context.router.popUntil((route) =&amp;gt; route.name == &#39;HomeRoute&#39;);        &#xA;// a simplifed version of the above line        &#xA;context.router.popUntilRouteWithName(&#39;HomeRoute&#39;);        &#xA;// pops all routes down to the root        &#xA;context.router.popUntilRoot();        &#xA;             &#xA;// removes the top most page in stack even if it&#39;s the last        &#xA;// remove != pop, it doesn&#39;t respect WillPopScopes it just         &#xA;// removes the entry.        &#xA;context.router.removeLast();         &#xA;        &#xA;// removes any route in stack that satisfis the predicate        &#xA;// this works exactly like removing items from a regualar List        &#xA;// &amp;lt;PageRouteInfo&amp;gt;[...].removeWhere((r)=&amp;gt;)        &#xA;context.router.removeWhere((route) =&amp;gt; );        &#xA;            &#xA;// you can also use the common helper methods from context extension to navigate        &#xA;context.pushRoute(const BooksListRoute());        &#xA;context.replaceRoute(const BooksListRoute());        &#xA;context.navigateTo(const BooksListRoute());        &#xA;context.navigateNamedTo(&#39;/books&#39;);        &#xA;context.navigateBack();       &#xA;context.popRoute();        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Passing Arguments&lt;/h2&gt; &#xA;&lt;p&gt;That&#39;s the fun part! &lt;strong&gt;AutoRoute&lt;/strong&gt; automatically detects and handles your page arguments for you, the generated route object will deliver all the arguments your page needs including path/query params.&lt;/p&gt; &#xA;&lt;p&gt;e.g. The following page widget will take an argument of type &lt;code&gt;Book&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BookDetailsPage extends StatelessWidget {            &#xA; const BookDetailsPage({required this.book});            &#xA;            &#xA;  final Book book;         &#xA;  ...            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Default values are respected. Required fields are also respected and handled properly.&lt;/p&gt; &#xA;&lt;p&gt;The generated &lt;code&gt;BookDetailsRoute&lt;/code&gt; will deliver the same arguments to it&#39;s corresponding page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-drt&#34;&gt;router.push(BookDetailsRoute(book: book));            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; all args are generated as named parameters regardless of their original type.&lt;/p&gt; &#xA;&lt;h2&gt;Returning Results&lt;/h2&gt; &#xA;&lt;p&gt;You can return results by either using the pop completer or by passing a callback function as an argument the same way you&#39;d pass an object.&lt;/p&gt; &#xA;&lt;p&gt;1 - Using the pop completer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var result = await router.push(LoginRoute());            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then inside of your &lt;code&gt;LoginPage&lt;/code&gt; pop with results&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;router.pop(true);           &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as you&#39;d notice we did not specify the result type, we&#39;re playing with dynamic values here, which can be risky and I personally don&#39;t recommend it.&lt;/p&gt; &#xA;&lt;p&gt;To avoid working with dynamic values we specify what type of results we expect our page to return, which is a &lt;code&gt;bool&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AutoRoute&amp;lt;bool&amp;gt;(page: LoginPage),         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we push and specify the type of results we&#39;re expecting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var result = await router.push&amp;lt;bool&amp;gt;(LoginRoute());            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and of course we pop with the same type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;router.pop&amp;lt;bool&amp;gt;(true);           &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2- Passing a callback function as an argument.&lt;br&gt; We only have to add a callback function as a parameter to our page constructor like follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BookDetailsPage extends StatelessWidget {            &#xA; const BookDetailsRoute({this.book, required this.onRateBook});            &#xA;            &#xA;  final Book book;            &#xA;  final void Function(int) onRateBook;            &#xA;  ...            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated &lt;code&gt;BookDetailsRoute&lt;/code&gt; will deliver the same arguments to it&#39;s corresponding page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;context.router.push(            &#xA;      BookDetailsRoute(            &#xA;          book: book,            &#xA;          onRateBook: (rating) {            &#xA;           // handle result            &#xA;          }),            &#xA;    );            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you&#39;re finishing with results make sure you call the callback function as you pop the page&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;onRateBook(RESULT);            &#xA;context.router.pop();            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Default values are respected. Required fields are also respected and handled properly.&lt;/p&gt; &#xA;&lt;h2&gt;Nested Navigation&lt;/h2&gt; &#xA;&lt;p&gt;Nested navigation means building an inner router inside of a page of another router, for example in the below diagram users page is built inside of dashboard page.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/dev/art/nested_router_demo.png&#34; height=&#34;370&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;defining nested routes is as easy as populating the children field of the parent route. In the following example &lt;code&gt;UsersPage&lt;/code&gt; , &lt;code&gt;PostsPage&lt;/code&gt; and &lt;code&gt;SettingsPage&lt;/code&gt; are nested children of &lt;code&gt;DashboardPage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@MaterialAutoRouter(            &#xA;  replaceInRouteName: &#39;Page,Route&#39;,            &#xA;  routes: &amp;lt;AutoRoute&amp;gt;[            &#xA;    AutoRoute(            &#xA;      path: &#39;/dashboard&#39;,            &#xA;      page: DashboardPage,            &#xA;      children: [            &#xA;        AutoRoute(path: &#39;users&#39;, page: UsersPage),            &#xA;        AutoRoute(path: &#39;posts&#39;, page: PostsPage),        &#xA;        AutoRoute(path: &#39;settings&#39;, page: SettingsPage),              &#xA;      ],            &#xA;    ),        &#xA;    AutoRoute(path: &#39;/login&#39;, page: LoginPage)        &#xA;  ],            &#xA;)            &#xA;class $AppRouter {}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To render/build nested routes we need an &lt;code&gt;AutoRouter&lt;/code&gt; widget that works as an outlet or a nested router-view inside of our dashboard page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class DashboardPage extends StatelessWidget {        &#xA;  @override        &#xA;  Widget build(BuildContext context) {        &#xA;    return Row(        &#xA;      children: [        &#xA;        Column(        &#xA;          children: [        &#xA;            NavLink(label: &#39;Users&#39;, destination: const UsersRoute()),        &#xA;            NavLink(label: &#39;Posts&#39;, destination: const PostsRoute()),        &#xA;            NavLink(label: &#39;Settings&#39;, destination: const SettingsRoute()),        &#xA;          ],        &#xA;        ),        &#xA;        Expanded(        &#xA;          // nested routes will be rendered here        &#xA;          child: AutoRouter(),        &#xA;        )        &#xA;      ],        &#xA;    );        &#xA;  }        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if we navigate to &lt;code&gt;/dashboard/users&lt;/code&gt; we will be taken to the &lt;code&gt;DashboardPage&lt;/code&gt; and the &lt;code&gt;UsersPage&lt;/code&gt; will be shown inside of it.&lt;/p&gt; &#xA;&lt;p&gt;What if want to show one of the child pages at &lt;code&gt;/dashboard&lt;/code&gt;? we can simply do that by giving the child routes an empty path &lt;code&gt;&#39;&#39;&lt;/code&gt; or set it as initial.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   AutoRoute(            &#xA;      path: &#39;/dashboard&#39;,            &#xA;      page: DashboardPage,            &#xA;      children: [            &#xA;        AutoRoute(path: &#39;&#39;, page: UsersPage),        &#xA;        //The same thing can be done using the initial flag        &#xA;        //AutoRoute(page: UsersPage,initial: true),            &#xA;        AutoRoute(path: &#39;posts&#39;, page: PostsPage),            &#xA;      ],            &#xA;    ),            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or by using a &lt;code&gt;RedirectRoute&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   AutoRoute(            &#xA;   path: &#39;/dashboard&#39;,            &#xA;   page: DashboardPage,            &#xA;      children: [            &#xA;         RedirectRoute(path: &#39;&#39;, redirectTo: &#39;users&#39;),            &#xA;         AutoRoute(path: &#39;users&#39;, page: UsersPage),            &#xA;         AutoRoute(path: &#39;posts&#39;, page: PostsPage),             &#xA;      ],            &#xA;   ),      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which can be simplified to the following where &lt;code&gt;auto_route&lt;/code&gt; generates the redirect code for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   AutoRoute(            &#xA;      path: &#39;/dashboard&#39;,            &#xA;      page: DashboardPage,            &#xA;      children: [            &#xA;        // RedirectRoute(path: &#39;&#39;, redirectTo: &#39;users&#39;),            &#xA;        AutoRoute(path: &#39;users&#39;, page: UsersPage, initial: true),            &#xA;        AutoRoute(path: &#39;posts&#39;, page: PostsPage),             &#xA;      ],            &#xA;    ),            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Things to keep in mind when implementing nested navigation&lt;/h3&gt; &#xA;&lt;p&gt;1- Each router manages it&#39;s own pages stack.&lt;br&gt; 2- Navigation actions like push, pop and friends are handled by the topmost router and bubble up if it couldn&#39;t be handled.&lt;/p&gt; &#xA;&lt;h2&gt;Tab Navigation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re working with flutter mobile you&#39;re most likely to implement tabs navigation, that&#39;s why &lt;code&gt;auto_route&lt;/code&gt; makes tabs navigation as easy and straightforward as possible.&lt;/p&gt; &#xA;&lt;p&gt;in the previous example we used an &lt;code&gt;AutoRouter&lt;/code&gt; widget to render nested child routes, &lt;code&gt;AutoRouter&lt;/code&gt; is just a shortcut for &lt;code&gt;AutoStackRouter&lt;/code&gt;, &lt;code&gt;StackRouters&lt;/code&gt; manage a stack of pages inside of them where the active/visible page is always the one on top and you&#39;d need to pop it to see the page beneath it.&lt;/p&gt; &#xA;&lt;p&gt;Now we can try to implement our tabs using an &lt;code&gt;AutoRouter&lt;/code&gt; (StackRouter) by pushing or replacing a nested route every-time the tab changes and that might work but our tabs state will be lost, not to mention the transition between tabs issue, luckily auto_route comes equipped with an &lt;code&gt;AutoTabsRouter&lt;/code&gt; which is especially made to handle tab navigation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AutoTabsRouter&lt;/code&gt; lets you switch between different routes while preserving offstage-routes state, tab routes are lazily loaded by default ( can be disabled ) and finally it allows to create whatever transition animation you want.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s change the previous example to use tab navigation.&lt;/p&gt; &#xA;&lt;p&gt;Notice that we&#39;re not going to change anything in our routes declaration map, we still have a dashboard page that has tree nested children, users, posts and settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class DashboardPage extends StatelessWidget {        &#xA;  @override        &#xA;  Widget build(BuildContext context) {        &#xA;    return AutoTabsRouter(        &#xA;    // list of your tab routes        &#xA;    // routes used here must be declaraed as children        &#xA;    // routes of /dashboard         &#xA;      routes: const [        &#xA;        UsersRoute(),        &#xA;        PostsRoute(),        &#xA;        SettingsRoute(),        &#xA;      ],        &#xA;      builder: (context, child, animation) {        &#xA;        // obtain the scoped TabsRouter controller using context        &#xA;        final tabsRouter = AutoTabsRouter.of(context);        &#xA;        // Here we&#39;re building our Scaffold inside of AutoTabsRouter        &#xA;        // to access the tabsRouter controller provided in this context        &#xA;        //         &#xA;        //alterntivly you could use a global key        &#xA;        return Scaffold(        &#xA;            body: FadeTransition(        &#xA;              opacity: animation,        &#xA;              // the passed child is techinaclly our animated selected-tab page        &#xA;              child: child,        &#xA;            ),        &#xA;            bottomNavigationBar: BottomNavigationBar(        &#xA;              currentIndex: tabsRouter.activeIndex,        &#xA;              onTap: (index) {        &#xA;                // here we switch between tabs        &#xA;                tabsRouter.setActiveIndex(index);        &#xA;              },        &#xA;              items: [        &#xA;                BottomNavigationBarItem(label: &#39;Users&#39;,...),        &#xA;                BottomNavigationBarItem(label: &#39;Posts&#39;,...),        &#xA;                BottomNavigationBarItem(label: &#39;Settings&#39;,...),        &#xA;              ],        &#xA;            ));        &#xA;      },        &#xA;    );        &#xA;  }        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you think the above setup is a bit messy you could use the shipped-in &lt;code&gt;AutoTabsScaffold&lt;/code&gt; that makes things much cleaner.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class DashboardPage extends StatelessWidget {        &#xA; @override          &#xA;Widget build(context) {          &#xA; @override        &#xA;  Widget build(context) {        &#xA;    return AutoTabsScaffold(        &#xA;       routes: const [        &#xA;        UsersRoute(),        &#xA;        PostsRoute(),        &#xA;        SettingsRoute(),        &#xA;      ],        &#xA;      bottomNavigationBuilder: (_,tabsRouter) {        &#xA;          return BottomNavigationBar(        &#xA;              currentIndex: tabsRouter.activeIndex,        &#xA;              onTap: tabsRouter.setActiveIndex        &#xA;              items: [        &#xA;                BottomNavigationBarItem(label: &#39;Users&#39;,...),        &#xA;                BottomNavigationBarItem(label: &#39;Posts&#39;,...),        &#xA;                BottomNavigationBarItem(label: &#39;Settings&#39;,...),        &#xA;              ],        &#xA;            )),               &#xA;       }        &#xA;    );        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using PageView&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;AutoTabsRouter.pageView&lt;/code&gt; constructor to implement tabs using PageView&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AutoTabsRouter.pageView(    &#xA;     routes: [    &#xA;        BooksTab(),    &#xA;        ProfileTab(),    &#xA;        SettingsTab(),    &#xA;        ],   &#xA;     builder: (context, child, _) {    &#xA;        return Scaffold(    &#xA;              appBar: AppBar(    &#xA;              title: Text(context.topRoute.name),    &#xA;              leading: AutoLeadingButton()),    &#xA;              body: child,    &#xA;              bottomNavigationBar: BottomNavigationBar(        &#xA;                    currentIndex: tabsRouter.activeIndex,        &#xA;                    onTap: tabsRouter.setActiveIndex        &#xA;                    items: [        &#xA;                      BottomNavigationBarItem(label: &#39;Books&#39;,...),        &#xA;                      BottomNavigationBarItem(label: &#39;Profile&#39;,...),        &#xA;                      BottomNavigationBarItem(label: &#39;Settings&#39;,...),        &#xA;                    ],        &#xA;                  ),  &#xA;            ),    &#xA;      ); },  &#xA;  );  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using TabBar&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;AutoTabsRouter.tabBar&lt;/code&gt; constructor to implement tabs using TabBar&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AutoTabsRouter.tabBar(    &#xA;     routes: [    &#xA;        BooksTab(),    &#xA;        ProfileTab(),    &#xA;        SettingsTab(),    &#xA;        ],   &#xA;     builder: (context, child, controller) {    &#xA;        return Scaffold(    &#xA;              appBar: AppBar(    &#xA;                 title: Text(context.topRoute.name),    &#xA;                 leading: AutoLeadingButton(),  &#xA;                 bottom: TabBar(    &#xA;                    controller: controller,    &#xA;                    tabs: const [    &#xA;                    Tab(text: &#39;1&#39;, icon: Icon(Icons.abc)),    &#xA;                    Tab(text: &#39;2&#39;, icon: Icon(Icons.abc)),    &#xA;                    Tab(text: &#39;3&#39;, icon: Icon(Icons.abc)),    &#xA;                   ],),  &#xA;               ),    &#xA;              body: child,    &#xA;              bottomNavigationBar: BottomNavigationBar(        &#xA;                    currentIndex: tabsRouter.activeIndex,        &#xA;                    onTap: tabsRouter.setActiveIndex        &#xA;                    items: [        &#xA;                      BottomNavigationBarItem(label: &#39;Books&#39;,...),        &#xA;                      BottomNavigationBarItem(label: &#39;Profile&#39;,...),        &#xA;                      BottomNavigationBarItem(label: &#39;Settings&#39;,...),        &#xA;                    ],        &#xA;                  ),  &#xA;            ),    &#xA;      ); },  &#xA;  );  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Finding The Right Router&lt;/h2&gt; &#xA;&lt;p&gt;Every nested &lt;code&gt;AutoRouter&lt;/code&gt; has its own routing controller to manage the stack inside of it and the easiest way to obtain a scoped controller is by using context.&lt;/p&gt; &#xA;&lt;p&gt;In the previous example &lt;code&gt;DashboardPage&lt;/code&gt; is a root level stack entry so calling &lt;code&gt;AutoRouter.of(context)&lt;/code&gt; anywhere inside of it will get us the root routing controller.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AutoRouter&lt;/code&gt; widgets that are used to render nested routes, insert a new router scope into the widgets tree, so when a nested route calls for the scoped controller they will get the closest parent controller in the widgets tree not the root controller.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Dashboard extends StatelessWidget {            &#xA;           &#xA;  @override            &#xA;  Widget build(BuildContext context) {            &#xA;  // this will get us the root routing controller            &#xA;    AutoRouter.of(context);            &#xA;    return Scaffold(            &#xA;      appBar: AppBar(title: Text(&#39;Dashboard page&#39;)),             &#xA;      // this inserts a new router scope into the widgets tree            &#xA;      body: AutoRouter()             &#xA;    );            &#xA;  }            &#xA;}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s a simple diagram to help visualize this&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/art/scoped_routers_demo.png&#34; height=&#34;570&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;As you can tell from the above diagram it&#39;s possible to access parent routing controllers by calling &lt;code&gt;router.parent&amp;lt;T&amp;gt;()&lt;/code&gt;, we&#39;re using a generic function because we have too different routing controllers &lt;code&gt;StackRouter&lt;/code&gt; and &lt;code&gt;TabsRouter&lt;/code&gt;, one of them could be the parent controller of the current router and that&#39;s why we need to specify a type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;router.parent&amp;lt;StackRouter&amp;gt;() // this returns  the parent router as a Stack Routing controller            &#xA;router.parent&amp;lt;TabsRouter&amp;gt;() // this returns athe parent router as a Tabs Routing controller            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;on the other hand obtaining the root controller does not require type casting because it&#39;s always a &lt;code&gt;StackRouter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;router.root // this returns the root router as a Stack Routing controller            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can obtain access to inner-routers from outside their scope using a global key&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class DashboardPage extends StatefulWidget {        &#xA;  @override        &#xA;  _DashboardPageState createState() =&amp;gt; _DashboardPageState();        &#xA;}        &#xA;        &#xA;class _DashboardPageState extends State&amp;lt;DashboardPage&amp;gt; {        &#xA;  final _innerRouterKey = GlobalKey&amp;lt;AutoRouterState&amp;gt;();        &#xA;  @override        &#xA;  Widget build(BuildContext context) {        &#xA;    return Row(        &#xA;      children: [        &#xA;        Column(        &#xA;          children: [        &#xA;            NavLink(label: &#39;Users&#39;,        &#xA;            onTap:(){        &#xA;               final router = _innerRouterKey.currentState?.controller;        &#xA;               router?.push(const UsersRoute());        &#xA;             }        &#xA;            ),        &#xA;            ...        &#xA;          ],        &#xA;        ),        &#xA;        Expanded(        &#xA;          child: AutoRouter(key: _innerRouterKey),        &#xA;        )        &#xA;      ],        &#xA;    );        &#xA;  }        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could also obtain access to inner-routers from outside their scope without a global key as long as they&#39;re initiated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// assuming this&#39;s the root router            &#xA;context.innerRouterOf&amp;lt;StackRouter&amp;gt;(UserRoute.name)             &#xA;// or if we&#39;re usign an AutoTabsRouter inside of DashboardPage        &#xA;context.innerRouterOf&amp;lt;TabsRouter&amp;gt;(UserRoute.name)          &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessing the &lt;code&gt;DashboardPage&lt;/code&gt; inner router from the previous example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class Dashboard extends StatelessWidget {            &#xA;          &#xA;  @override            &#xA;  Widget build(BuildContext context) {            &#xA;    return Scaffold(            &#xA;      appBar: AppBar(            &#xA;        title: Text(&#39;Dashboard&#39;),            &#xA;        actions: [            &#xA;          IconButton(            &#xA;            icon: Icon(Icons.person),            &#xA;            onPressed: () {            &#xA;              // accessing the inner router from            &#xA;              // outside the scope            &#xA;              final router = context.innerRouterOf&amp;lt;StackRouter&amp;gt;(DashboardRoute.name)        &#xA;              router?.push(const UsersRoute());            &#xA;            },            &#xA;          ),            &#xA;        ],            &#xA;      ),            &#xA;      body: AutoRouter(), // we&#39;re trying to get access to this            &#xA;    );            &#xA;  }            &#xA;}            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Navigating Without Context&lt;/h2&gt; &#xA;&lt;p&gt;To navigate without context you can simply assign your generated router to a global variable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// declarate your route as a global vairable        &#xA;final appRouter = AppRouter();          &#xA;        &#xA;class MyApp extends StatefulWidget {        &#xA;        &#xA;  @override        &#xA;  Widget build(BuildContext context) {        &#xA;    return MaterialApp.router(        &#xA;      routerDelegate: AutoRouterDelegate(appRouter),        &#xA;      routeInformationParser: appRouter.defaultRouteParser(),        &#xA;      );        &#xA;    }        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; using global variable is not recommended and is considered a bad practice and most of the times you should use dependency injection instead.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example using &lt;code&gt;get_it&lt;/code&gt; which is just a personal favorite, you can use any dependency injection package you like.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;void main(){        &#xA;// make sure you register it as a Singleton or a lazySingleton        &#xA;  getIt.registerSingleton&amp;lt;AppRouter&amp;gt;(AppRouter());        &#xA;  runApp(MyApp());        &#xA; }        &#xA;        &#xA;class MyApp extends StatefulWidget {        &#xA;  @override        &#xA;  Widget build(BuildContext context) {        &#xA;    final router = getIt&amp;lt;AppRouter&amp;gt;();        &#xA;    return MaterialApp.router(        &#xA;      routerDelegate: AutoRouterDelegate(router),        &#xA;      routeInformationParser: router.defaultRouteParser(),        &#xA;      );        &#xA;    }        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;now you can access to your router anywhere inside of your App without using context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;getIt&amp;lt;AppRouter&amp;gt;().push(...);        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; navigating without context is not recommended in nested navigation unless you use &lt;code&gt;navigate&lt;/code&gt; instead of &lt;code&gt;push&lt;/code&gt; and you provide a full hierarchy. e.g &lt;code&gt;router.navigate(SecondRoute(children: [SubChild2Route()]))&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Declarative Navigation&lt;/h2&gt; &#xA;&lt;p&gt;To use declarative navigation with auto_route you simple use the &lt;code&gt;AutoRouter.declarative&lt;/code&gt; constructor and return a list of routes based on state.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AutoRouter.declarative(    &#xA;  routes: (handler) =&amp;gt; [    &#xA;     BookListRoute(),    &#xA;     if(_selectedBook != null)    &#xA;     BookDetailsRoute(id: _selectedBook.id),    &#xA; ],);  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the handler contains a temp-list of pending initial routes which can be read only once.&lt;/p&gt; &#xA;&lt;h2&gt;Working with Paths&lt;/h2&gt; &#xA;&lt;p&gt;Working with paths in &lt;strong&gt;AutoRoute&lt;/strong&gt; is optional because &lt;code&gt;PageRouteInfo&lt;/code&gt; objects are matched by name unless pushed as a string using the &lt;code&gt;initialDeepLink&lt;/code&gt; property in root delegate or &lt;code&gt;pushNamed&lt;/code&gt;, &lt;code&gt;replaceNamed&lt;/code&gt; &lt;code&gt;navigateNamed&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;if you don’t specify a path it’s going to be generated from the page name e.g. &lt;code&gt;BookListPage&lt;/code&gt; will have ‘book-list-page’ as a path, if initial arg is set to true the path will be &lt;code&gt;/&lt;/code&gt; unless it&#39;s relative then it will be an empty string &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When developing a web Application or a native App that requires deep-linking you&#39;d probably need to define paths with clear memorable names, and that&#39;s done using the &lt;code&gt;path&lt;/code&gt; argument in &lt;code&gt;AutoRoute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; AutoRoute(path: &#39;/books&#39;, page: BookListPage),            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Path Parameters (dynamic segments)&lt;/h3&gt; &#xA;&lt;p&gt;You can define a dynamic segment by prefixing it with a colon&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; AutoRoute(path: &#39;/books/:id&#39;, page: BookDetailsPage),            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The simplest way to extract path parameters from path and gain access to them is by annotating constructor params with &lt;code&gt;@PathParam(&#39;optional-alias&#39;)&lt;/code&gt; with the same alias/name of the segment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BookDetailsPage extends StatelessWidget {            &#xA;  const BookDetailsPage({@PathParam(&#39;id&#39;) this.bookId});        &#xA;          &#xA;  final int bookId;            &#xA;  ...            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now writing &lt;code&gt;/books/1&lt;/code&gt; in the browser will navigate you to &lt;code&gt;BookDetailsPage&lt;/code&gt; and automatically extract the &lt;code&gt;bookId&lt;/code&gt; argument from path and inject it to your widget.&lt;/p&gt; &#xA;&lt;h3&gt;Query Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Query parameters are accessed the same way, simply annotate the constructor parameter to hold the value of the query param with &lt;code&gt;@QueryParam(&#39;optional-alias&#39;)&lt;/code&gt; and let AutoRoute do the rest.&lt;/p&gt; &#xA;&lt;p&gt;you could also access path/query parameters using the scoped &lt;code&gt;RouteData&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; RouteData.of(context).pathParams;            &#xA; // or using the extension            &#xA; context.routeData.queryParams            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Tip&lt;/code&gt;: if your parameter name is the same as the path/query parameter, you could use the const &lt;code&gt;@pathParam&lt;/code&gt; or &lt;code&gt;@queryParam&lt;/code&gt; and not pass a slug/alias.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BookDetailsPage extends StatelessWidget {            &#xA;  const BookDetailsPage({@pathParam this.id});        &#xA;          &#xA;  final int id;            &#xA;  ...            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Redirecting Paths&lt;/h3&gt; &#xA;&lt;p&gt;Paths can be redirected using &lt;code&gt;RedirectRoute&lt;/code&gt;. The following setup will navigate us to &lt;code&gt;/books&lt;/code&gt; when &lt;code&gt;/&lt;/code&gt; is matched.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;lt;AutoRoute&amp;gt; [            &#xA;     RedirectRoute(path: &#39;/&#39;, redirectTo: &#39;/books&#39;),            &#xA;     AutoRoute(path: &#39;/books&#39;, page: BookListPage),            &#xA; ]            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When redirecting initial routes the above setup can be simplified by setting the &lt;code&gt;/books&lt;/code&gt; path as initial and auto_route will automatically generate the required redirect code for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;lt;AutoRoute&amp;gt; [              &#xA;     AutoRoute(path: &#39;/books&#39;, page: BookListPage, initial: true),            &#xA; ]            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also redirect paths with params like follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;&amp;lt;AutoRoute&amp;gt; [            &#xA;     RedirectRoute(path: &#39;books/:id&#39;, redirectTo: &#39;/books/:id/details&#39;),            &#xA;     AutoRoute(path: &#39;/books/:id/details&#39;, page: BookDetailsPage),            &#xA; ]            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;RedirectRoutes&lt;/code&gt; are fully matched.&lt;/p&gt; &#xA;&lt;h3&gt;Wildcards&lt;/h3&gt; &#xA;&lt;p&gt;auto_route supports wildcard matching to handle invalid or undefined paths.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;AutoRoute(path: &#39;*&#39;, page: UnknownRoutePage)            &#xA;// it could be used with defined prefixes            &#xA;AutoRoute(path: &#39;/profile/*&#39;, page: ProfilePage)            &#xA;// or it could be used with RedirectRoute            &#xA;RedirectRoute(path: &#39;*&#39;, redirectTo: &#39;/&#39;)            &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; be sure to always add your wildcards at the end of your route list because routes are matched in order.&lt;/p&gt; &#xA;&lt;h2&gt;Route Guards&lt;/h2&gt; &#xA;&lt;p&gt;Think of route guards as middleware or interceptors, routes can not be added to the stack without going through their assigned guards, guards are useful for restricting access to certain routes.&lt;/p&gt; &#xA;&lt;p&gt;We create a route guard by extending &lt;code&gt;AutoRouteGuard&lt;/code&gt; from the auto_route package&lt;br&gt; and implementing our logic inside of the onNavigation method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class AuthGuard extends AutoRouteGuard {        &#xA; @override        &#xA; void onNavigation(NavigationResolver resolver, StackRouter router) {        &#xA; // the navigation is paused until resolver.next() is called with either         &#xA; // true to resume/continue navigation or false to abort navigation        &#xA;     if(authenitcated){        &#xA;       // if user is authenticated we continue        &#xA;        resolver.next(true);        &#xA;      }else{        &#xA;         // we redirect the user to our login page        &#xA;         router.push(LoginRoute(onResult: (success){        &#xA;                // if success == true the navigation will be resumed        &#xA;                // else it will be aborted        &#xA;               resolver.next(success);        &#xA;          }));        &#xA;         }            &#xA;     }        &#xA;}        &#xA;        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: &lt;code&gt;resolver.next()&lt;/code&gt; should only be called once.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;NavigationResolver&lt;/code&gt; object contains the guarded route which you can access by calling the property &lt;code&gt;resolver.route&lt;/code&gt; and a list of pending routes (if there are any) accessed by calling &lt;code&gt;resolver.pendingRoutes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now we assign our guard to the routes we want to protect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; AutoRoute(page: ProfileScreen, guards: [AuthGuard]);        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After we run code generation, our router will have a required named argument called authGuard or whatever your guard name is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// we pass our AuthGuard to the generated router.        &#xA;final _appRouter = AppRouter(authGuard: AuthGuard());        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wrapping Routes&lt;/h2&gt; &#xA;&lt;p&gt;In some cases we want to wrap our screen with a parent widget usually to provide some values through context, e.g wrapping your route with a custom &lt;code&gt;Theme&lt;/code&gt; or a &lt;code&gt;Provider&lt;/code&gt;, to do that simply implement &lt;code&gt;AutoRouteWrapper&lt;/code&gt;, and have wrappedRoute(context) method return (this) as the child of your wrapper widget.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class ProductsScreen extends StatelessWidget implements AutoRouteWrapper {        &#xA;  @override        &#xA;  Widget wrappedRoute(BuildContext context) {        &#xA;  return Provider(create: (ctx) =&amp;gt; ProductsBloc(), child: this);        &#xA;  }        &#xA;  ...        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Navigation Observers&lt;/h2&gt; &#xA;&lt;p&gt;Navigation observers are used to observe when routes are pushed ,replaced or popped ..etc.&lt;/p&gt; &#xA;&lt;p&gt;We implement an AutoRouter observer by extending an &lt;code&gt;AutoRouterObserver&lt;/code&gt; which is just a &lt;code&gt;NavigatorObserver&lt;/code&gt; with tab route support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyObserver extends AutoRouterObserver {        &#xA;  @override        &#xA;  void didPush(Route route, Route? previousRoute) {        &#xA;    print(&#39;New route pushed: ${route.settings.name}&#39;);        &#xA;  }        &#xA; ...        &#xA; // only override to observer tab routes        &#xA; @override        &#xA;  void didInitTabRoute(TabPageRoute route, TabPageRoute? previousRoute) {        &#xA;    print(&#39;Tab route visited: ${route.name}&#39;);        &#xA;  }        &#xA;  @override        &#xA;  void didChangeTabRoute(TabPageRoute route, TabPageRoute previousRoute) {        &#xA;    print(&#39;Tab route re-visited: ${route.name}&#39;);        &#xA;  }        &#xA;  ...        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we pass our observer to the root delegate &lt;code&gt;AutoRouterDelegate&lt;/code&gt;.&lt;br&gt; &lt;strong&gt;Important&lt;/strong&gt; notice that &lt;code&gt;navigatorObservers&lt;/code&gt; property is a builder function that returns a list of observes and the reason for that is a navigator observer instance can only be used by a single router, so unless you&#39;re using a one single router or you don&#39;t want your nested routers to inherit observers make sure navigatorObservers builder always returns fresh observer instances.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   return MaterialApp.router(        &#xA;      routerDelegate: AutoRouterDelegate(        &#xA;        _appRouter,        &#xA;        navigatorObservers: () =&amp;gt; [MyObserver()],        &#xA;      ),        &#xA;      routeInformationParser: _appRouter.defaultRouteParser(),        &#xA;    );        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the following approach &lt;strong&gt;won&#39;t&lt;/strong&gt; work if you have nested routers unless they don&#39;t inherit the observers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   final _observer = MyObserver();        &#xA;   return MaterialApp.router(        &#xA;      routerDelegate: AutoRouterDelegate(        &#xA;        _appRouter,        &#xA;        // this should always return new instances        &#xA;        navigatorObservers: () =&amp;gt; [_observer],        &#xA;      ),        &#xA;      routeInformationParser: _appRouter.defaultRouteParser(),        &#xA;    );        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every nested router can have it&#39;s own observers and inherit it&#39;s parent&#39;s.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt; AutoRouter(        &#xA;    inheritNavigatorObservers: true, // true by default        &#xA;    navgiatorObservers:()=&amp;gt; [list of observers]);        &#xA;            &#xA; AutoTabsRouter(        &#xA;    inheritNavigatorObservers: true, // true by default        &#xA;    navgiatorObservers:()=&amp;gt; [list of observers]);        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also make a certain screen route aware by subscribing to an &lt;code&gt;AutoRouteObserver&lt;/code&gt; ( Route not Router).&lt;/p&gt; &#xA;&lt;p&gt;First we provide our &lt;code&gt;AutoRouteObserver&lt;/code&gt; instance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   return MaterialApp.router(        &#xA;      routerDelegate: AutoRouterDelegate(        &#xA;        _appRouter,        &#xA;       // Provide an AutoRouteObserver instance        &#xA;        navigatorObservers: () =&amp;gt; [AutoRouteObserver()],        &#xA;      ),        &#xA;      routeInformationParser: _appRouter.defaultRouteParser(),        &#xA;    );        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we use an &lt;code&gt;AutoRouteAware&lt;/code&gt; mixin which is a &lt;code&gt;RouteAware&lt;/code&gt; mixin with tab support to provided the needed listeners then subscribe to our &lt;code&gt;AutoRouteObserver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BooksListPage extends State&amp;lt;BookListPage&amp;gt; with AutoRouteAware {        &#xA;   AutoRouteObserver? _observer;        &#xA;           &#xA;  @override        &#xA;  void didChangeDependencies() {        &#xA;    super.didChangeDependencies();        &#xA;    // RouterScope exposes the list of provided observers        &#xA;    // including inherited observers        &#xA;   _observer = RouterScope.of(context).firstObserverOfType&amp;lt;AutoRouteObserver&amp;gt;();        &#xA;    if (_observer != null) {        &#xA;      // we subscribe to the observer by passing our        &#xA;      // AutoRouteAware state and the scoped routeData        &#xA;      _observer.subscribe(this, context.routeData);        &#xA;    }        &#xA;  }        &#xA;          &#xA; @override        &#xA;  void dispose() {        &#xA;    super.dispose();        &#xA;    // don&#39;t forget to unsubscribe from the        &#xA;    // observer on dispose        &#xA;    _observer.unsubscribe(this);        &#xA;  }        &#xA;        &#xA; // only override if this is a tab page        &#xA;   @override        &#xA;   void didInitTabRoute(TabPageRoute? previousRoute) {}        &#xA;        &#xA; // only override if this is a tab page        &#xA;   @override        &#xA;   void didChangeTabRoute(TabPageRoute previousRoute) {}        &#xA;        &#xA;   @override        &#xA;   void didPopNext() {}        &#xA;        &#xA;   @override        &#xA;   void didPushNext() {}        &#xA;        &#xA;   @override        &#xA;   void didPush() {}        &#xA;        &#xA;   @override        &#xA;   void didPop() {}        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;AutoRouteAwareStateMixin&lt;/h4&gt; &#xA;&lt;p&gt;The above code can be simplified using &lt;code&gt;AutoRouteAwareStateMixin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class BooksListPage extends State&amp;lt;BookListPage&amp;gt; with AutoRouteAwareStateMixin&amp;lt;BookListPage&amp;gt; {        &#xA;// only override if this is a tab page        &#xA; @override        &#xA; void didInitTabRoute(TabPageRoute? previousRoute) {}        &#xA;// only override if this is a tab page        &#xA; @override        &#xA; void didChangeTabRoute(TabPageRoute previousRoute) {}        &#xA;   &#xA;// only override if this is a stack page       &#xA; @override        &#xA; void didPopNext() {}        &#xA;// only override if this is a stack page       &#xA; @override        &#xA; void didPushNext() {}        &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizations&lt;/h2&gt; &#xA;&lt;h5&gt;MaterialAutoRouter | CupertinoAutoRouter | AdaptiveAutoRouter&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;preferRelativeImports [bool]&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;if true relative imports will be used when possible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;replaceInRouteName [String]&lt;/td&gt; &#xA;   &lt;td&gt;&#39;&#39;&lt;/td&gt; &#xA;   &lt;td&gt;used to replace conventional words in generated route name (whatToReplacePattern,replacement)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;CustomAutoRouter&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;customRouteBuilder&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;used to provide a custom route, it takes in BuildContext and a CustomPage and returns a PageRoute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;transitionsBuilder&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the transitionsBuilder property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opaque&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;extension for the opaque property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;barrierDismissible&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;extension for the barrierDismissible property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;durationInMilliseconds&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the transitionDuration(millieSeconds) property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reverseDurationInMilliseconds&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the reverseDurationInMilliseconds(millieSeconds) property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;MaterialRoute | CupertinoRoute | AdaptiveRoute | CustomRoute&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initial&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;sets path to &#39;/&#39; or &#39;&#39; unless path is provided then it generates auto redirect to it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;an auto generated path will be used if not provided&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;this will be the name of the generated route, if not provided a generated name will be used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usePathAsKey&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;if true path is used as page key instead of name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fullscreenDialog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;extension for the fullscreenDialog property in PageRoute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;maintainState&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;extension for the maintainState property in PageRoute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;{}&lt;/td&gt; &#xA;   &lt;td&gt;primitive meta data to be passed to the consumed route&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;CupertinoRoute Specific =&amp;gt; CupertinoPageRoute&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the title property in CupertinoPageRoute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;CustomRoute Specific =&amp;gt; PageRouteBuilder&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Definition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;transitionsBuilder&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the transitionsBuilder property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;customRouteBuilder&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;used to provide a custom route, it takes in BuildContext and a CustomPage and returns a PageRoute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opaque&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;extension for the opaque property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;barrierDismissible&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;extension for the barrierDismissible property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;durationInMilliseconds&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the transitionDuration(millieSeconds) property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reverseDurationInMilliseconds&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;extension for the reverseDurationInMilliseconds(millieSeconds) property in PageRouteBuilder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom Route Transitions&lt;/h2&gt; &#xA;&lt;p&gt;To use custom route transitions use a &lt;code&gt;CustomRoute&lt;/code&gt; and pass in your preferences.&lt;br&gt; The &lt;code&gt;TransitionsBuilder&lt;/code&gt; function needs to be passed as a static/const reference that has the same signature as the &lt;code&gt;TransitionsBuilder&lt;/code&gt; function of the &lt;code&gt;PageRouteBuilder&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CustomRoute(        &#xA;page: LoginScreen,        &#xA;//TransitionsBuilders class contains a preset of common transitions builders.         &#xA;transitionsBuilder: TransitionsBuilders.slideBottom,        &#xA;durationInMilliseconds: 400)        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip&lt;/em&gt; Use &lt;strong&gt;@CustomAutoRouter()&lt;/strong&gt; to define global custom route transitions.&lt;/p&gt; &#xA;&lt;p&gt;You can of course use your own transitionsBuilder function as long as it has the same function signature.&lt;br&gt; The function has to take in exactly a &lt;code&gt;BuildContext&lt;/code&gt;, &lt;code&gt;Animation&amp;lt;Double&amp;gt;&lt;/code&gt;, &lt;code&gt;Animation&amp;lt;Double&amp;gt;&lt;/code&gt; and a child &lt;code&gt;Widget&lt;/code&gt; and it needs to return a &lt;code&gt;Widget&lt;/code&gt;, typically you would wrap your child with one of flutter&#39;s transition widgets as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Widget zoomInTransition(BuildContext context, Animation&amp;lt;double&amp;gt; animation, Animation&amp;lt;double&amp;gt; secondaryAnimation, Widget child) {        &#xA; // you get an animation object and a widget        &#xA; // make your own transition        &#xA;    return ScaleTransition(scale: animation, child: child);        &#xA;  }        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now pass the reference of your function to &lt;code&gt;CustomRoute&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CustomRoute(page: ZoomInScreen, transitionsBuilder: zoomInTransition)        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Route Builder&lt;/h2&gt; &#xA;&lt;p&gt;You can use your own custom route by passing a &lt;code&gt;CustomRouteBuilder&lt;/code&gt; function to &lt;code&gt;CustomRoute&lt;/code&gt;, there isn&#39;t a simple way to strongly-type a static function in code generation, so make sure your custom builder signature matches the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;typedef CustomRouteBuilder = Route&amp;lt;T&amp;gt; Function&amp;lt;T&amp;gt;(          &#xA;  BuildContext context, Widget child, CustomPage page);        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we implement our builder function the same way we did with the TransitionsBuilder function,&lt;br&gt; the most important part here is passing the page argument to our custom route.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Route&amp;lt;T&amp;gt; myCustomRouteBuilder&amp;lt;T&amp;gt;(BuildContext context, Widget child, CustomPage&amp;lt;T&amp;gt; page){          &#xA;  return PageRouteBuilder(          &#xA;  fullscreenDialog: page.fullscreenDialog,          &#xA;  // this is important          &#xA;  settings: page,          &#xA;  pageBuilder: (,__,___) =&amp;gt; child);          &#xA;}        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We finish by passing a reference of our custom function to our CustomRoute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;CustomRoute(page: CustomPage, customRouteBuilder: myCustomRouteBuilder)        &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Others&lt;/h2&gt; &#xA;&lt;h3&gt;AutoLeadingButton-BackButton&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;AutoLeadingButton&lt;/code&gt; is AutoRoute&#39;s replacement to the default BackButton to handle nested or parent stack popping.&lt;br&gt; to use it simply assign it to the &lt;code&gt;leading&lt;/code&gt; property inside of &lt;code&gt;AppBar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;appBar: AppBar(    &#xA;  title: Text(context.topRoute.name),    &#xA;  leading: AutoLeadingButton(),    &#xA;)  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ActiveGuardObserver&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ActiveGuardObserver&lt;/code&gt; can notify you when a guard is being checked and what guard it is, it can be used to implement loading indicator for example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;var isLoading = false;&#xA; void initiState(){&#xA;   final guradObserver = context.router.activeGuardObserver;&#xA;    guradObserver.addListener(){&#xA;      setState((){&#xA;        isLoading = guardObserver.guardInProgress;&#xA;       });&#xA;     } &#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove shadow from nested routers&lt;/h3&gt; &#xA;&lt;p&gt;This fixes the issue referenced here&lt;br&gt; &lt;a href=&#34;https://stackoverflow.com/questions/53457772/why-there-is-a-shadow-between-nested-navigator&#34;&gt;https://stackoverflow.com/questions/53457772/why-there-is-a-shadow-between-nested-navigator&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://stackoverflow.com/questions/68986632/rid-of-elevation-of-nested-flutter-navigator-2-0&#34;&gt;https://stackoverflow.com/questions/68986632/rid-of-elevation-of-nested-flutter-navigator-2-0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MaterialApp.router(    &#xA;  theme: ThemeData.dark().copyWith(    &#xA;  pageTransitionsTheme: PageTransitionsTheme(    &#xA;     builders: {    &#xA;         // replace default CupertinoPageTransitionsBuilder with this  &#xA;        TargetPlatform.iOS: NoShadowCupertinoPageTransitionsBuilder(),    &#xA;        TargetPlatform.android: FadeUpwardsPageTransitionsBuilder(),    &#xA;    } )  &#xA;  ),  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;CupertinoRoute&lt;/code&gt; already uses this fix, so no need to override &lt;code&gt;PageTransitionsTheme&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;coming soon&lt;/p&gt; &#xA;&lt;h3&gt;Support auto_route&lt;/h3&gt; &#xA;&lt;p&gt;You can support auto_route by liking it on Pub and staring it on Github, sharing ideas on how we can enhance a certain functionality or by reporting any problems you encounter and of course buying a couple coffees will help speed up the development process.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xuelongqy/flutter_easyrefresh</title>
    <updated>2022-06-17T01:38:42Z</updated>
    <id>tag:github.com,2022-06-17:/xuelongqy/flutter_easyrefresh</id>
    <link href="https://github.com/xuelongqy/flutter_easyrefresh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A flutter widget that provides pull-down refresh and pull-up load.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter_easyrefresh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/v3/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/flutter?sort=votes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&amp;amp;style=flat-square&#34; alt=&#34;Awesome Flutter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.flutter-io.cn/packages/flutter_easyrefresh&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/flutter_easyrefresh&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/README_EN.md&#34;&gt;English&lt;/a&gt; | 中文&lt;/h2&gt; &#xA;&lt;p&gt;正如名字一样，EasyRefresh很容易就能在Flutter应用上实现下拉刷新以及上拉加载操作，它支持几乎所有的Flutter控件。它的功能与Android的SmartRefreshLayout很相似，同样也吸取了很多三方库的优点。EasyRefresh中集成了多种风格的Header和Footer，但是它并没有局限性，你可以很轻松的自定义。使用Flutter强大的动画，甚至随便一个简单的控件也可以完成。EasyRefresh的目标是为Flutter打造一个强大，稳定，成熟的下拉刷新框架。&lt;/p&gt; &#xA;&lt;p&gt;Web版本移步：&lt;a href=&#34;https://github.com/xuelongqy/vue-easyrefresh&#34;&gt;vue-easyrefresh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Demo：&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/master/v2/art/pkg/EasyRefresh.apk&#34;&gt;下载 apk&lt;/a&gt; | &lt;a href=&#34;https://xuelongqy.github.io/flutter_easyrefresh/&#34;&gt;web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/apk_QRCode.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特点功能:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持绝大多数Widget&lt;/li&gt; &#xA; &lt;li&gt;支持自定义并且已经集成了很多炫酷的 Header 和 Footer&lt;/li&gt; &#xA; &lt;li&gt;支持下拉刷新、上拉加载(可控制触发)&lt;/li&gt; &#xA; &lt;li&gt;支持 Header 和 Footer 列表嵌入以及视图浮动两种形式&lt;/li&gt; &#xA; &lt;li&gt;支持列表事件监听，制作任何样子的 Header 和 Footer，并且能够放在任何位置&lt;/li&gt; &#xA; &lt;li&gt;支持首次刷新，并自定义视图&lt;/li&gt; &#xA; &lt;li&gt;支持自定义列表空视图&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;传送门&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/document/cn/PROPERTY.md&#34;&gt;属性文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/document/cn/FQA.md&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/CHANGELOG_CN.md&#34;&gt;更新日志&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/document/cn/CUSTOM_HEADER_FOOTER.md&#34;&gt;自定义Header和Footer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;项目演示&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;基本样式&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;个人中心&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/basic.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/user_profile.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/basic.dart&#34;&gt;BasicPage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/user_profile.dart&#34;&gt;UserProfilePage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;NestedScrollView&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Header连接器&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/nested_scroll_view.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/link_header.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/nested_scroll_view.dart&#34;&gt;NestedScrollViewPage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/link_header.dart&#34;&gt;LinkHeaderPage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;首次刷新&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;空视图&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/first_refresh.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/empty.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/first_refresh.dart&#34;&gt;FirstRefreshPage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/empty.dart&#34;&gt;EmptyPage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;二楼&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;聊天页面&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/second_floor.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/chat.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/second_floor.dart&#34;&gt;SecondFloorPage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/sample/chat.dart&#34;&gt;ChatPage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;样式演示&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Material&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BallPulse&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/material.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/ball_pulse.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/material.dart&#34;&gt;MaterialPage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/ball_pulse.dart&#34;&gt;BallPulsePage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BezierCircle&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BezierHourGlass&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/bezier_circle.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/bezier_hour_glass.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/bezier_circle.dart&#34;&gt;BezierCirclePage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/bezier_hour_glass.dart&#34;&gt;BezierHourGlassPage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Phoenix&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Delivery&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/phoenix.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/taurus.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/phoenix.dart&#34;&gt;PhoenixPage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/taurus.dart&#34;&gt;TaurusPage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Space&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Delivery&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/space.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/flutter_easyrefresh/master/v2/art/image/delivery.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/space.dart&#34;&gt;SpacePage&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuelongqy/flutter_easyrefresh/raw/v2/example/lib/page/style/delivery.dart&#34;&gt;DeliveryPage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;简单用例&lt;/h2&gt; &#xA;&lt;h4&gt;1.在 pubspec.yaml 中添加依赖&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;//pub方式&#xA;dependencies:&#xA;  flutter_easyrefresh: version&#xA;&#xA;//导入方式&#xA;dependencies:&#xA;  flutter_easyrefresh:&#xA;    path: 项目路径&#xA;&#xA;//git方式&#xA;dependencies:&#xA;  flutter_easyrefresh:&#xA;    git:&#xA;      url: git://github.com/xuelongqy/flutter_easyrefresh.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.在布局文件中添加 EasyreFresh&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_easyrefresh/easy_refresh.dart&#39;;&#xA;....&#xA;  // 方式一&#xA;  EasyRefresh(&#xA;    child: ScrollView(),&#xA;    onRefresh: () async{&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;  )&#xA;  // 方式二&#xA;  EasyRefresh.custom(&#xA;    slivers: &amp;lt;Widget&amp;gt;[],&#xA;    onRefresh: () async{&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;  )&#xA;  // 方式三&#xA;  EasyRefresh.builder(&#xA;    builder: (context, physics, header, footer) {&#xA;      return CustomScrollView(&#xA;        physics: physics,&#xA;        slivers: &amp;lt;Widget&amp;gt;[&#xA;          ...&#xA;          header,&#xA;          ...&#xA;          footer,&#xA;        ],&#xA;      );&#xA;    }&#xA;    onRefresh: () async{&#xA;      ....&#xA;    },&#xA;    onLoad: () async {&#xA;      ....&#xA;    },&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.触发刷新和加载动作&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefreshController _controller = EasyRefreshController();&#xA;  ....&#xA;  EasyRefresh(&#xA;    controller: _controller,&#xA;    ....&#xA;  );&#xA;  ....&#xA;  _controller.callRefresh();&#xA;  _controller.callLoad();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4.控制加载和刷新完成&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;  EasyRefreshController _controller = EasyRefreshController();&#xA;  ....&#xA;  EasyRefresh(&#xA;&#x9;enableControlFinishRefresh: true,&#xA;&#x9;enableControlFinishLoad: true,&#xA;    ....&#xA;  );&#xA;  ....&#xA;  _controller.finishRefresh(success: true);&#xA;  _controller.finishLoad(success： true, noMore: false);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用指定的 Header 和 Footer&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter_easyrefresh/easy_refresh.dart&#39;;&#xA;import &#39;package:flutter_easyrefresh/material_header.dart&#39;;&#xA;import &#39;package:flutter_easyrefresh/material_footer.dart&#39;;&#xA;....&#xA;  new EasyRefresh(&#xA;    header: MaterialHeader(),&#xA;    footer: MaterialFooter(),&#xA;    child: ScrollView(),&#xA;    ....&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;添加国际化支持&lt;/h2&gt; &#xA;&lt;p&gt;不提供自带国际化支持，请自行设置ClassicalHeader和ClassicalFooter中需要展示的文字。&lt;/p&gt; &#xA;&lt;h1&gt;捐赠&lt;/h1&gt; &#xA;&lt;p&gt;如果你喜欢我的项目，请在项目右上角 &#34;Star&#34; 一下。你的支持是我最大的鼓励！ ^_^ 你也还可以扫描下面的二维码，或者通过&lt;a href=&#34;https://www.paypal.com/paypalme/xuelongqy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/paypal-donate-yellow.svg?sanitize=true&#34; alt=&#34;Donate to this project using Paypal&#34;&gt;&lt;/a&gt;，对作者进行打赏。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/pay_alipay.jpg?raw=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/pay_wxpay.jpg?raw=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/xuelongqy/donation/master/pay_tencent.jpg?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果在捐赠留言中备注名称，将会被记录到列表中~ 如果你也是github开源作者，捐赠时可以留下github项目地址或者个人主页地址，链接将会被添加到列表中起到互相推广的作用&lt;br&gt; &lt;a href=&#34;https://github.com/xuelongqy/donation/raw/master/DONATIONLIST.md&#34;&gt;捐赠列表&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;QQ讨论群 - 554981921&lt;/h3&gt; &#xA;&lt;h4&gt;进群须知&lt;/h4&gt; &#xA;&lt;p&gt;这个群不仅仅是解决EasyreFresh的问题，任何Flutter相关的问题都可以进行讨论。正如它的名字一样，有问必答，只要群主有时间，都会帮大家一起解决问题。&lt;/p&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/peng8350/flutter_pulltorefresh&#34;&gt;flutter_pulltorefresh&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/scwang90/SmartRefreshLayout&#34;&gt;SmartRefreshLayout&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/jogboms/flutter_spinkit&#34;&gt;flutter_spinkit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;开源协议&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt; &#xA;MIT License&#xA;&#xA;Copyright (c) 2018 xuelongqy&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>