<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:29:31Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cem256/manga_clean_arch</title>
    <updated>2023-09-01T01:29:31Z</updated>
    <id>tag:github.com,2023-09-01:/cem256/manga_clean_arch</id>
    <link href="https://github.com/cem256/manga_clean_arch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Manga app with a feature-first layered clean architecture, generic caching, lazy loading, debouncing, throttling, and adaptive theming.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Manga App&lt;/h1&gt; &#xA;&lt;p&gt;Manga app with a feature-first layered clean architecture, generic caching, lazy loading, debouncing, throttling, and adaptive theming. The UI of the app is intentionally kept simple, as my primary objective was to showcase the implementation of clean architecture, generic caching, lazy loading, debouncing, and throttling.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Popular Mangas List: The app displays a list of popular mangas. This list is loaded lazily to optimize performance and reduce initial loading times. Additionally, throttling is implemented to minimize consecutive API calls.&lt;/li&gt; &#xA; &lt;li&gt;View Details: Access detailed information about each manga.&lt;/li&gt; &#xA; &lt;li&gt;Favorites: Add and store favorite mangas locally using &lt;a href=&#34;https://pub.dev/packages/hive&#34;&gt;HiveDB&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Search: Find any manga with the search feature. Debouncing technique is used to prevent unnecessary API calls.&lt;/li&gt; &#xA; &lt;li&gt;Adaptive Theme: The app automatically adjusts its theme based on the device&#39;s settings and remembers user preferences.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Built With&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dart.dev/&#34;&gt;Dart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.api.jikan.moe/&#34;&gt;Jikan API v4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cem256/manga_clean_arch/master/screenshots/preview.gif&#34; width=&#34;19%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cem256/manga_clean_arch/master/screenshots/popular.png&#34; width=&#34;19%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cem256/manga_clean_arch/master/screenshots/detail.png&#34; width=&#34;19%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cem256/manga_clean_arch/master/screenshots/favorites.png&#34; width=&#34;19%&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cem256/manga_clean_arch/master/screenshots/search.png&#34; width=&#34;19%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;app&#34; folder holds files specific to this particular application.&lt;/li&gt; &#xA; &lt;li&gt;&#34;core&#34; folder contains application-agnostic code that can be reused in other projects.&lt;/li&gt; &#xA; &lt;li&gt;&#34;feature&#34; folder represents the app&#39;s feature set. Each feature is divided into subfolders for data, domain, and presentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;State Management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/flutter_bloc&#34;&gt;Bloc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Caching &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/hive&#34;&gt;Hive&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/hydrated_bloc&#34;&gt;HydratedBloc&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Networking &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/dio&#34;&gt;Dio&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/pretty_dio_logger&#34;&gt;PrettyDioLogger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/dio_smart_retry&#34;&gt;DioSmartRetry&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Routing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/auto_route&#34;&gt;AutoRoute&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dependency Injection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/get_it&#34;&gt;GetIt&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JsonParsing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/json_serializable&#34;&gt;JsonSerializable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Localization &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/easy_localization&#34;&gt;EasyLocalization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Functional Programming &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/dartz&#34;&gt;Dartz&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/mocktail&#34;&gt;Mocktail&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/bloc_test&#34;&gt;BlocTest&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run this project&lt;/h3&gt; &#xA;&lt;h5&gt;Clone this repository&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/cem256/manga_clean_arch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Go to the project directory&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd manga_clean_arch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Get all the packages&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Execute these scripts in the terminal&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh scripst/build_runner.sh&#xA;sh scripts/localization.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Run the project&lt;/h5&gt;</summary>
  </entry>
  <entry>
    <title>Flutter-Triad/Flutter-Triad</title>
    <updated>2023-09-01T01:29:31Z</updated>
    <id>tag:github.com,2023-09-01:/Flutter-Triad/Flutter-Triad</id>
    <link href="https://github.com/Flutter-Triad/Flutter-Triad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Triad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://flutter-triad.actit.ps/assets/img/logo.svg?sanitize=true&#34; alt=&#34;Flutter Triad Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flutter Triad is a clean architecture-based Flutter template designed to accelerate app development by providing a structured and organized project foundation. Whether you&#39;re building a new app or refactoring an existing one, Flutter Triad simplifies the development process, making it more efficient and maintainable.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#state-management&#34;&gt;State Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#networking&#34;&gt;Networking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Flutter-Triad/Flutter-Triad/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clean Architecture&lt;/strong&gt;: Flutter Triad follows a clean architecture pattern, separating the project into data, domain, and presentation layers. This promotes maintainability, scalability, and testability.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;State Management&lt;/strong&gt;: Choose your preferred state management solution, whether it&#39;s the built-in &lt;code&gt;Provider&lt;/code&gt;, &lt;code&gt;GetX&lt;/code&gt;, &lt;code&gt;Riverpod&lt;/code&gt;, or any other state management library. Flutter Triad provides flexibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Networking&lt;/strong&gt;: Simplify API requests using Retrofit and Dio. Use generated code to interact with your APIs efficiently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: Enjoy a built-in error handling system that seamlessly integrates with Dio, making it easy to handle errors throughout your app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Custom Code Generator&lt;/strong&gt;: Boost productivity with a custom code generator that automates the creation of feature-specific files and directories. Say goodbye to repetitive tasks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Responsive UI&lt;/strong&gt;: Flutter Triad includes &lt;code&gt;flutter_screenutil&lt;/code&gt; for responsive UI design, making it easy to adapt your app to various screen sizes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Localization&lt;/strong&gt;: Use the &lt;code&gt;easy_localization&lt;/code&gt; library to add multilingual support to your app with ease.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;: Implement data caching effortlessly with &lt;code&gt;flutter_cache_manager&lt;/code&gt; and &lt;code&gt;path_provider&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Animations&lt;/strong&gt;: Enhance your app&#39;s user experience with animations using the &lt;code&gt;lottie&lt;/code&gt; library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Custom UI Components&lt;/strong&gt;: Flutter Triad provides custom UI components and widgets to jumpstart your development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Navigation&lt;/strong&gt;: Implement persistent bottom navigation and smooth transitions between screens with &lt;code&gt;persistent_bottom_nav_bar_v2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before you begin, ensure you have met the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;: Make sure you have Flutter installed on your machine. If not, you can &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;install Flutter here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;: Flutter requires the Dart programming language. &lt;a href=&#34;https://dart.dev/get-dart&#34;&gt;Install Dart here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To get started with Flutter Triad, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/your-username/Flutter-Triad.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace your-username with your GitHub username or the repository URL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Flutter-Triad&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fetch the project dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter pub get&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter run &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This will launch the app on your default emulator or connected device.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;If you&#39;re using models with the &lt;code&gt;@JsonSerializable()&lt;/code&gt; annotation, generate the necessary serialization code by running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using the Flutter SDK directly: &lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using the Flutter Version Manager (FVM): &lt;pre&gt;&lt;code&gt;fvm flutter pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running the App To launch the app on your default emulator or connected device, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flutter run &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;New Feature&lt;/h2&gt; &#xA;&lt;p&gt;For create a new feature use this commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fvm dart command_file_path -f feature_name -n dart_file_name.dart &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;// Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fvm dart lib/core/commands/custom_command.dart -f product -n product.dart &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Project Structure&lt;/h1&gt; &#xA;&lt;p&gt;Flutter Triad follows a clean architecture pattern, organizing the project into the following layers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: Contains data-related logic, including data sources, repositories, and models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;domain&lt;/strong&gt;: Contains the core business logic, including use cases and entities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;presentation&lt;/strong&gt;: Contains the UI-related logic, including views, controllers, and presenters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This structure promotes separation of concerns, making your codebase more maintainable and testable.&lt;/p&gt; &#xA;&lt;h1&gt;State Management&lt;/h1&gt; &#xA;&lt;p&gt;Flutter Triad is flexible when it comes to state management. You can choose your preferred state management solution, such as Provider, GetX, or Riverpod. The project is designed to work seamlessly with your choice.&lt;/p&gt; &#xA;&lt;h1&gt;Networking&lt;/h1&gt; &#xA;&lt;p&gt;Simplify API requests with Retrofit and Dio. Use code generation to create network-related files, reducing boilerplate code. Retrofit and Dio integration makes working with APIs efficient and straightforward.&lt;/p&gt; &#xA;&lt;h1&gt;Error Handling&lt;/h1&gt; &#xA;&lt;p&gt;Flutter Triad includes a built-in error handling system that seamlessly integrates with Dio. Handle errors gracefully and provide a smooth user experience even when things go wrong.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome contributions to enhance Flutter Triad. To contribute, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch with a descriptive name for your feature or bug fix.&lt;/li&gt; &#xA; &lt;li&gt;Make the necessary changes and additions.&lt;/li&gt; &#xA; &lt;li&gt;Commit and push your changes to your forked repository.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request, explaining the changes made and their purpose.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Flutter Triad is released under the MIT License.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions, suggestions, or feedback, please feel free to reach out to our team at &lt;a href=&#34;mailto:mohanned@ait.ps&#34;&gt;mohanned@ait.ps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you for choosing Flutter Triad. We hope it streamlines your app development and helps you create amazing Flutter apps!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>