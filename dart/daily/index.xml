<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-24T01:33:14Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bizz84/tmdb_movie_app_riverpod</title>
    <updated>2022-10-24T01:33:14Z</updated>
    <id>tag:github.com,2022-10-24:/bizz84/tmdb_movie_app_riverpod</id>
    <link href="https://github.com/bizz84/tmdb_movie_app_riverpod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter Movies app with Riverpod (TMDB API)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Movies app with Riverpod (TMDB API)&lt;/h1&gt; &#xA;&lt;p&gt;This is an improved version of my &lt;a href=&#34;https://github.com/bizz84/movie_app_state_management_flutter&#34;&gt;old movies app&lt;/a&gt; based on the latest Riverpod 2.0 APIs.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/bizz84/tmdb_movie_app_riverpod/raw/main/.github/images/movies-app-preview.png?raw=true&#34; alt=&#34;Movies app preview&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;I built this app to showcase the &lt;strong&gt;latest APIs&lt;/strong&gt; for popular packages such as Riverpod and GoRouter.&lt;/p&gt; &#xA;&lt;p&gt;This is not meant to be a complete movies app, yet it should implement common use cases and features. üëá&lt;/p&gt; &#xA;&lt;h2&gt;Current Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Infinite scrolling with pagination&lt;/li&gt; &#xA; &lt;li&gt;Pull to refresh&lt;/li&gt; &#xA; &lt;li&gt;Search functionality&lt;/li&gt; &#xA; &lt;li&gt;Loading UI with the &lt;a href=&#34;https://pub.dev/packages/shimmer&#34;&gt;Shimmer&lt;/a&gt; package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned Features (no promises üòÖ)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Favourites&lt;/li&gt; &#xA; &lt;li&gt;Stateful nested routing&lt;/li&gt; &#xA; &lt;li&gt;Responsive UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packages in use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/riverpod&#34;&gt;flutter_riverpod&lt;/a&gt; and &lt;a href=&#34;https://pub.dev/packages/riverpod_generator&#34;&gt;riverpod_generator&lt;/a&gt; for data caching (and much more!)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/freezed&#34;&gt;freezed&lt;/a&gt; for JSON serialization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/dio&#34;&gt;dio&lt;/a&gt; for networking&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/go_router&#34;&gt;go_router&lt;/a&gt; for navigation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/shimmer&#34;&gt;shimmer&lt;/a&gt; for the loading UI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/envied&#34;&gt;envied&lt;/a&gt; for handling API keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/cached_network_image&#34;&gt;cached_network_image&lt;/a&gt; for caching images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;App Architecture &amp;amp; Folder structure&lt;/h2&gt; &#xA;&lt;p&gt;The project follows my Riverpod app architecture with a feature-first project structure.&lt;/p&gt; &#xA;&lt;p&gt;More details here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewithandrea.com/articles/flutter-app-architecture-riverpod-introduction/&#34;&gt;Flutter App Architecture with Riverpod: An Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewithandrea.com/articles/flutter-project-structure/&#34;&gt;Flutter Project Structure: Feature-first or Layer-first?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also uses the new &lt;a href=&#34;https://pub.dev/packages/riverpod_generator&#34;&gt;Riverpod Generator&lt;/a&gt; package, which I have covered here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewithandrea.com/articles/flutter-riverpod-generator/&#34;&gt;How to Auto-Generate your Providers with Flutter Riverpod Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting a TMDB API key&lt;/h2&gt; &#xA;&lt;p&gt;This project uses the TMDB API to get the latest movies data.&lt;/p&gt; &#xA;&lt;p&gt;Before running the app you need to &lt;a href=&#34;https://www.themoviedb.org/signup&#34;&gt;sign up on the TMDB website&lt;/a&gt;, then obtain an API key on the &lt;a href=&#34;https://www.themoviedb.org/settings/api&#34;&gt;settings API page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have this, create an &lt;code&gt;.env&lt;/code&gt; file &lt;strong&gt;at the root of the project&lt;/strong&gt; and add your key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// .env&#xA;TMDB_KEY=your-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the code generator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a &lt;code&gt;env.g.dart&lt;/code&gt; file inside &lt;code&gt;lib/env&lt;/code&gt;. This contains the &lt;code&gt;tmdbApiKey&lt;/code&gt; that is used when making requests to the TMDB API.&lt;/p&gt; &#xA;&lt;p&gt;Congratulations, you&#39;re good to go. üòé&lt;/p&gt; &#xA;&lt;h2&gt;Note: Loading images from insecure HTTP endpoints&lt;/h2&gt; &#xA;&lt;p&gt;The data returned by the TMBD API points to image URLs using http rather than https. In order for images to load correctly, the following changes have been made:&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Created a file at &lt;code&gt;android/app/src/main/res/xml/network_security_config.xml&lt;/code&gt; with these contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;network-security-config&amp;gt;&#xA;    &amp;lt;base-config cleartextTrafficPermitted=&#34;true&#34; /&amp;gt;&#xA;&amp;lt;/network-security-config&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Added this to the application tag in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;android:networkSecurityConfig=&#34;@xml/network_security_config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;ios/Runner/info.pList&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;&#xA;  &amp;lt;dict&amp;gt;&#xA;      &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&#xA;      &amp;lt;true/&amp;gt;&#xA;  &amp;lt;/dict&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.dev/docs/release/breaking-changes/network-policy-ios-android&#34;&gt;Insecure HTTP connections are disabled by default on iOS and Android.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Since macOS applications are sandboxed by default, we get a &lt;code&gt;SocketException&lt;/code&gt; if we haven&#39;t added the required entitlements. This has been fixes by adding these lines to &lt;code&gt;macos/Runner/DebugProfile.entitlements&lt;/code&gt; and &lt;code&gt;macos/Runner/Release.entitlements&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.security.network.client&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More info here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewithandrea.com/tips/socket-exception-connection-failed-macos/&#34;&gt;How to fix &#34;SocketException: Connection failed (Operation not permitted)&#34; with Flutter on macOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bizz84/tmdb_movie_app_riverpod/main/LICENSE.md&#34;&gt;LICENSE: MIT&lt;/a&gt;&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>sbis04/flutterfire-samples</title>
    <updated>2022-10-24T01:33:14Z</updated>
    <id>tag:github.com,2022-10-24:/sbis04/flutterfire-samples</id>
    <link href="https://github.com/sbis04/flutterfire-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Firebase + Flutter sample apps with code snippets, supported by comprehensive articles for each implementation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sbis04/flutterfire-samples/main/screenshots/flutterfire-samples-repo-cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo is created to contain various sample apps demonstrating the integration of &lt;strong&gt;Firebase&lt;/strong&gt; with &lt;strong&gt;Flutter&lt;/strong&gt;. The final goal is to create something like the &lt;a href=&#34;https://github.com/flutter/gallery&#34;&gt;Flutter Gallery&lt;/a&gt; app, but for Firebase.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This entire repo uses the latest &lt;strong&gt;Flutter 3.3.4 stable&lt;/strong&gt; release, with &lt;strong&gt;null safety&lt;/strong&gt; enabled, for creating the sample apps.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you like the content of this repository, please don&#39;t forget to &lt;span&gt;‚≠ê&lt;/span&gt; this.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;üöß&lt;/span&gt; . &lt;span&gt;üî¥&lt;/span&gt; . The &lt;code&gt;main&lt;/code&gt; branch is currently &lt;strong&gt;WIP&lt;/strong&gt; for adding all types of Firebase samples in this repo. If you want to try out any sample checkout the following branches:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Currently the repo contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sbis04/flutterfire-samples/tree/email-password&#34;&gt;Firebase Authentication (email &amp;amp; password)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sbis04/flutterfire-samples/tree/google-sign-in&#34;&gt;Firebase Authentication (using Google Sign-In)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sbis04/flutterfire-samples/tree/crud-firestore&#34;&gt;Cloud Firestore database (CRUD operations)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;The aim of this repo is to include examples for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Email &amp;amp; password registration &amp;amp; login&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Login using various providers (Google, GitHub, Apple, etc.)*&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Phone OTP verification&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multi Factor Authentication (MFA)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; CRUD operations on Firebase Cloud Firestore&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Storing &amp;amp; retrieving images/videos/files to/fro Cloud Storage&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Using Realtime Database&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Backend Actions&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cloud Functions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; User Presence tracking&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Push notifications using Firebase Cloud Messaging (FCM)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test recognition&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Face detection&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Image recognition (more might be added here)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Other utilities&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Analytics/Crashlytics&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remote config&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A/B testing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; In-app messaging&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Dynamic Linking&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Firebase extensions (BETA)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;*Only Google Sign-In implemented currently.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;For this project you have to add two plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/firebase_core&#34;&gt;firebase_core&lt;/a&gt;: Required for initializing Firebase and using any other Firebase plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pub.dev/packages/firebase_auth&#34;&gt;firebase_auth&lt;/a&gt;: For using Firebase Authentication service in Flutter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The latest version of both these plugins support &lt;em&gt;null safety&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;If you want to try out the this sample app, first you have to create and configure a Firebase project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/sbis04/flutterfire-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If you want to contribute to this project, instead of the above command -- &lt;strong&gt;fork&lt;/strong&gt; this project and then &lt;strong&gt;clone&lt;/strong&gt; using:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/&amp;lt;your-user-id&amp;gt;/flutterfire-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new Firebase project from the &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;console&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the Firebase for each platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app using the command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd flutterfire-samples&#xA;flutter run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Souvik Biswas&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>larryaasen/upgrader</title>
    <updated>2022-10-24T01:33:14Z</updated>
    <id>tag:github.com,2022-10-24:/larryaasen/upgrader</id>
    <link href="https://github.com/larryaasen/upgrader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Flutter package for prompting users to upgrade when there is a newer version of the app in the store.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Upgrader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/larryaasen/upgrader&#34;&gt;&lt;img src=&#34;https://travis-ci.com/larryaasen/upgrader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/larryaasen/upgrader&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/larryaasen/upgrader/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dartlang.org/packages/upgrader&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/upgrader.svg?sanitize=true&#34; alt=&#34;pub package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/larryaasen/upgrader/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/larryaasen/upgrader.svg?sanitize=true&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/larryaasen&#34;&gt; &lt;img alt=&#34;Buy me a coffee&#34; src=&#34;https://img.shields.io/badge/Donate-Buy%20Me%20A%20Coffee-yellow.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/upgraderpackage&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/upgraderpackage.svg?style=social&amp;amp;label=Follow%20%40upgraderpackage&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter package for prompting users to upgrade when there is a newer version of the app in the store.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;When a newer app version is available in the app store, a simple alert prompt or card is displayed. With today&#39;s modern app stores, there is little need to persuade users to upgrade because most are already using the auto upgrade feature. However, there may be times when an app needs to be updated more quickly than usual, and nagging a user to upgrade will entice the upgrade sooner. Also, with Flutter supporting more than just Android and iOS platforms in the future, it will become more likely that users on other app stores need to be nagged about upgrading.&lt;/p&gt; &#xA;&lt;h3&gt;Platform Support&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Automatically Supported?&lt;/th&gt; &#xA;   &lt;th&gt;Appcast Supported?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ANDROID&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IOS&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LINUX&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå No&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MACOS&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå No&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WEB&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå No&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WINDOWS&lt;/td&gt; &#xA;   &lt;td&gt;‚ùå No&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Widgets&lt;/h2&gt; &#xA;&lt;p&gt;The widgets come in two flavors: alert or card. The &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/#alert-example&#34;&gt;UpgradeAlert&lt;/a&gt; widget is used to display the popup alert prompt, and the &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/#card-example&#34;&gt;UpgradeCard&lt;/a&gt; widget is used to display the inline material design card.&lt;/p&gt; &#xA;&lt;h2&gt;Alert Example&lt;/h2&gt; &#xA;&lt;p&gt;Just wrap your body widget in the &lt;code&gt;UpgradeAlert&lt;/code&gt; widget, and it will handle the rest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;import &#39;package:flutter/material.dart&#39;;&#xA;import &#39;package:upgrader/upgrader.dart&#39;;&#xA;&#xA;void main() =&amp;gt; runApp(MyApp());&#xA;&#xA;class MyApp extends StatelessWidget {&#xA;  const MyApp({Key key}) : super(key: key);&#xA;&#xA;  @override&#xA;  Widget build(BuildContext context) {&#xA;    return MaterialApp(&#xA;      title: &#39;Upgrader Example&#39;,&#xA;      home: Scaffold(&#xA;          appBar: AppBar(title: Text(&#39;Upgrader Example&#39;)),&#xA;          body: UpgradeAlert(&#xA;            child: Center(child: Text(&#39;Checking...&#39;)),&#xA;          )),&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot of alert&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/screenshots/example1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cupertino Alert Example&lt;/h2&gt; &#xA;&lt;p&gt;You can also display a Cupertino style dialog by using the &lt;code&gt;dialogStyle&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;          body: UpgradeAlert(&#xA;            upgrader: Upgrader(dialogStyle: UpgradeDialogStyle.cupertino),&#xA;            child: Center(child: Text(&#39;Checking...&#39;)),&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot of Cupertino alert&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/screenshots/example-cupertino.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Card Example&lt;/h2&gt; &#xA;&lt;p&gt;Just return an &lt;code&gt;UpgradeCard&lt;/code&gt; widget in your build method and a material design card will be displayed when an update is detected. The widget will have width and height of 0.0 when no update is detected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;return Container(&#xA;        margin: EdgeInsets.fromLTRB(12.0, 0.0, 12.0, 0.0),&#xA;        child: UpgradeCard());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot of card&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/screenshots/example2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;The text displayed in the &lt;code&gt;upgrader&lt;/code&gt; package is localized in &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/#language-localization&#34;&gt;many languages&lt;/a&gt;, and supports customization.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;The release notes are displayed by default when a new version is available. On Android the release notes are taken from the the WHAT&#39;S NEW section on Google Play when available, otherwise the main app description is used. On iOS the release notes are taken from the App Store What&#39;s New section. For &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/#appcast&#34;&gt;appcast&lt;/a&gt;), the release notes are taken from the description field.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;The Upgrader class can be customized by setting parameters in the constructor.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;appcast: Provide an Appcast that can be replaced for mock testing, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;appcastConfig: the appcast configuration, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;canDismissDialog: can alert dialog be dismissed on tap outside of the alert dialog, which defaults to &lt;code&gt;false&lt;/code&gt; (not used by UpgradeCard)&lt;/li&gt; &#xA; &lt;li&gt;countryCode: the country code that will override the system locale, which defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;languageCode: the language code that will override the system locale, which defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;client: an HTTP Client that can be replaced for mock testing, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;debugDisplayAlways: always force the upgrade to be available, defaults to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;debugDisplayOnce: display the upgrade at least once once, defaults to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;debugLogging: display logging statements, which defaults to &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;dialogStyle: the upgrade dialog style, either &lt;code&gt;material&lt;/code&gt; or &lt;code&gt;cupertino&lt;/code&gt;, defaults to &lt;code&gt;material&lt;/code&gt;, used only by UpgradeAlert, works on Android and iOS.&lt;/li&gt; &#xA; &lt;li&gt;durationUntilAlertAgain: duration until alerting user again, which defaults to &lt;code&gt;3 days&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;messages: optional localized messages used for display in &lt;code&gt;upgrader&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;minAppVersion: the minimum app version supported by this app. Earlier versions of this app will be forced to update to the current version. Defaults to &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;onIgnore: called when the ignore button is tapped, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;onLater: called when the later button is tapped, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;onUpdate: called when the update button is tapped, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;platform: The target platform, defaults to &lt;code&gt;defaultTargetPlatform&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;shouldPopScope: called when the back button is tapped, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;showIgnore: hide or show Ignore button, which defaults to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;showLater: hide or show Later button, which defaults to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;showReleaseNotes: hide or show release notes, which defaults to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;willDisplayUpgrade: called when &lt;code&gt;upgrader&lt;/code&gt; determines that an upgrade may or may not be displayed, defaults to &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum App Version&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;upgrader&lt;/code&gt; package can enforce a minimum app version simply by adding a version number to the description field in the app stores.&lt;/p&gt; &#xA;&lt;p&gt;For the Android Play Store, use this format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Minimum supported app version: 1.2.3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the iOS App Store, use this format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[:mav: 1.2.3]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using that text says that the minimum app version is 1.2.3 and that earlier versions of this app will be forced to update to the current version.&lt;/p&gt; &#xA;&lt;p&gt;After the app containing this text has been submitted for review, approved, and released on the app store, the version number will be visible to the &lt;code&gt;upgrader&lt;/code&gt; package. When the minimum app version is updated in the future, all previously installed apps with this package will recognize and honor that value.&lt;/p&gt; &#xA;&lt;p&gt;This overrides any value supplied in the &lt;code&gt;minAppVersion&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Add this text to the bottom of the full description field in the Google Play Console under the main store listing.&lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;Add this text to the bottom of the description field in App Store Connect in the description field.&lt;/p&gt; &#xA;&lt;h2&gt;Android Back Button&lt;/h2&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;UpgradeAlert&lt;/code&gt; widget, the Android back button will not dismiss the alert dialog by default. To allow the back button to dismiss the dialog, use &lt;code&gt;shouldPopScope&lt;/code&gt; and return true like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UpgradeAlert(Upgrader(shouldPopScope: () =&amp;gt; true));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Country Code&lt;/h2&gt; &#xA;&lt;p&gt;On iOS, when your app is &lt;em&gt;not&lt;/em&gt; in the &lt;code&gt;US&lt;/code&gt; App Store, which is the default, you must use the &lt;code&gt;countryCode&lt;/code&gt; parameter mentioned above. The &lt;code&gt;upgrader&lt;/code&gt; package does not know which country app store to use because it is not provided by iOS. It assumes the app is in the &lt;code&gt;US&lt;/code&gt; App Store.&lt;/p&gt; &#xA;&lt;p&gt;On Android, the &lt;code&gt;upgrader&lt;/code&gt; package uses the system locale to determine the country code.&lt;/p&gt; &#xA;&lt;h2&gt;Android Language Code&lt;/h2&gt; &#xA;&lt;p&gt;Android description and release notes language, defaults to &lt;code&gt;en&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;These widgets work on both Android and iOS. When running on Android the Google Play Store will provide the latest app version. When running on iOS the App Store will provide the latest app version. In all cases, the widget will display the prompt at the appropriate times.&lt;/p&gt; &#xA;&lt;p&gt;On Android, the version number is often not available from the Google Play Store, such as with the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.maps&#34;&gt;Google Maps&lt;/a&gt; app. In this case, the version is listed as &lt;code&gt;Varies with device&lt;/code&gt;. That is not a valid version for &lt;code&gt;upgrader&lt;/code&gt; and cannot be used. The &lt;code&gt;upgrader&lt;/code&gt; widget will not be displayed in this case.&lt;/p&gt; &#xA;&lt;p&gt;There is an &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/#appcast&#34;&gt;appcast&lt;/a&gt; that can be used to remotely configure the latest app version. See &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/#appcast&#34;&gt;appcast&lt;/a&gt; below for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Appcast&lt;/h2&gt; &#xA;&lt;p&gt;The class &lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/lib/src/appcast.dart&#34;&gt;Appcast&lt;/a&gt;, in this Flutter package, is used by the &lt;code&gt;upgrader&lt;/code&gt; widgets to download app details from an appcast, based on the &lt;a href=&#34;https://sparkle-project.org/&#34;&gt;Sparkle&lt;/a&gt; framework by Andy Matuschak. You can read the Sparkle documentation here: &lt;a href=&#34;https://sparkle-project.org/documentation/publishing/&#34;&gt;https://sparkle-project.org/documentation/publishing/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An appcast is an RSS feed with one channel that has a collection of items that each describe one app version. The appcast will describe each app version and will provide the latest app version to &lt;code&gt;upgrader&lt;/code&gt; that indicates when an upgrade should be recommended.&lt;/p&gt; &#xA;&lt;p&gt;The appcast must be hosted on a server that can be reached by everyone from the app. The appcast XML file can be autogenerated during the release process, or just manually updated after a release is available on the app store.&lt;/p&gt; &#xA;&lt;p&gt;The Appcast class can be used stand alone or as part of &lt;code&gt;upgrader&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Appcast Example&lt;/h3&gt; &#xA;&lt;p&gt;This is an Appcast example for Android.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;@override&#xA;Widget build(BuildContext context) {&#xA;  // On Android, setup the Appcast.&#xA;  // On iOS, the default behavior will be to use the App Store version.&#xA;  final appcastURL =&#xA;      &#39;https://raw.githubusercontent.com/larryaasen/upgrader/master/test/testappcast.xml&#39;;&#xA;  final cfg = AppcastConfiguration(url: appcastURL, supportedOS: [&#39;android&#39;]);&#xA;&#xA;  return MaterialApp(&#xA;    title: &#39;Upgrader Example&#39;,&#xA;    home: Scaffold(&#xA;        appBar: AppBar(&#xA;          title: Text(&#39;Upgrader Example&#39;),&#xA;        ),&#xA;        body: UpgradeAlert(&#xA;          Upgrader(appcastConfig: cfg),&#xA;          child: Center(child: Text(&#39;Checking...&#39;)),&#xA;        )),&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Appcast Sample File&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;rss version=&#34;2.0&#34; xmlns:sparkle=&#34;http://www.andymatuschak.org/xml-namespaces/sparkle&#34;&amp;gt;&#xA;    &amp;lt;channel&amp;gt;&#xA;        &amp;lt;title&amp;gt;Debt Now App - Appcast&amp;lt;/title&amp;gt;&#xA;        &amp;lt;item&amp;gt;&#xA;            &amp;lt;title&amp;gt;Version 1.15.0&amp;lt;/title&amp;gt;&#xA;            &amp;lt;description&amp;gt;Minor updates and improvements.&amp;lt;/description&amp;gt;&#xA;            &amp;lt;pubDate&amp;gt;Sun, 30 Dec 2018 12:00:00 +0000&amp;lt;/pubDate&amp;gt;&#xA;            &amp;lt;enclosure url=&#34;https://play.google.com/store/apps/details?id=com.moonwink.treasury&#34; sparkle:version=&#34;1.15.0&#34; sparkle:os=&#34;android&#34; /&amp;gt;&#xA;        &amp;lt;/item&amp;gt;&#xA;    &amp;lt;/channel&amp;gt;&#xA;&amp;lt;/rss&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Appcast Class&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final appcast = Appcast();&#xA;final items = await appcast.parseAppcastItemsFromUri(&#39;https://raw.githubusercontent.com/larryaasen/upgrader/master/test/testappcast.xml&#39;);&#xA;final bestItem = appcast.bestItem();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing the strings&lt;/h2&gt; &#xA;&lt;p&gt;The strings displayed in &lt;code&gt;upgrader&lt;/code&gt; can be customzied by extending the &lt;code&gt;UpgraderMessages&lt;/code&gt; class to provide custom values.&lt;/p&gt; &#xA;&lt;p&gt;As an example, to replace the Ignore button with a custom value, first create a new class that extends UpgraderMessages, and override the buttonTitleIgnore function. Next, when calling UpgradeAlert (or UpgradeCard), add the parameter messages with an instance of your extended class. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MyUpgraderMessages extends UpgraderMessages {&#xA;  @override&#xA;  String get buttonTitleIgnore =&amp;gt; &#39;My Ignore&#39;;&#xA;}&#xA;&#xA;UpgradeAlert(Upgrader(messages: MyUpgraderMessages()));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language localization&lt;/h2&gt; &#xA;&lt;p&gt;The strings displayed in &lt;code&gt;upgrader&lt;/code&gt; are already localized in 33 languages. New languages will be supported in the future with minor updates.&lt;/p&gt; &#xA;&lt;p&gt;Languages supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;English (&#39;en&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Arabic (&#39;ar&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Bengali (&#39;bn&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Chinese (&#39;zh&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Dutch (&#39;nl&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Filipino (&#39;fil&#39;)&lt;/li&gt; &#xA; &lt;li&gt;French (&#39;fr&#39;)&lt;/li&gt; &#xA; &lt;li&gt;German (&#39;de&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Greek (&#39;el&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Haitian Creole (&#39;ht&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Hebrew (&#39;he&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Hindi (&#39;hi&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Hungarian (&#39;hu&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Indonesian (&#39;id&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Italian (&#39;it&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Japanese (&#39;ja&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Kazakh (&#39;kk&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Khmer (&#39;km&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Korean (&#39;ko&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Lithuanian (&#39;lt&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Mongolian (&#39;mn&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Norwegian (&#39;nb&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Persian (&#39;fa&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Polish (&#39;pl&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (&#39;pt&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Russian (&#39;ru&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Spanish (&#39;es&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Swedish (&#39;sv&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Tamil (&#39;ta&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Telugu (&#39;te&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Turkish (&#39;tr&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Ukrainian (&#39;uk&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Vietnamese (&#39;vi&#39;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;upgrader&lt;/code&gt; package can be supplied with additional languages in your code by extending the &lt;code&gt;UpgraderMessages&lt;/code&gt; class to provide custom values.&lt;/p&gt; &#xA;&lt;p&gt;As an example, to add the Spanish (es) language (which is already provided), first create a new class that extends UpgraderMessages, and override the message function. Next, add a string for each of the messages. Finally, when calling UpgradeAlert (or UpgradeCard), add the parameter messages with an instance of your extended class. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class MySpanishMessages extends UpgraderMessages {&#xA;  /// Override the message function to provide custom language localization.&#xA;  @override&#xA;  String message(UpgraderMessage messageKey) {&#xA;    if (languageCode == &#39;es&#39;) {&#xA;      switch (messageKey) {&#xA;        case UpgraderMessage.body:&#xA;          return &#39;es A new version of {{appName}} is available!&#39;;&#xA;        case UpgraderMessage.buttonTitleIgnore:&#xA;          return &#39;es Ignore&#39;;&#xA;        case UpgraderMessage.buttonTitleLater:&#xA;          return &#39;es Later&#39;;&#xA;        case UpgraderMessage.buttonTitleUpdate:&#xA;          return &#39;es Update Now&#39;;&#xA;        case UpgraderMessage.prompt:&#xA;          return &#39;es Want to update?&#39;;&#xA;        case UpgraderMessage.releaseNotes:&#xA;          return &#39;es Release Notes&#39;;&#xA;        case UpgraderMessage.title:&#xA;          return &#39;es Update App?&#39;;&#xA;      }&#xA;    }&#xA;    // Messages that are not provided above can still use the default values.&#xA;    return super.message(messageKey);&#xA;  }&#xA;}&#xA;&#xA;UpgradeAlert(Upgrader(messages: MySpanishMessages()));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can even force the &lt;code&gt;upgrader&lt;/code&gt; package to use a specific language, instead of the system language on the device. Just pass the language code to an instance of UpgraderMessages when displaying the alert or card. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;UpgradeAlert(Upgrader(messages: UpgraderMessages(code: &#39;es&#39;)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semantic Versioning&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;upgrader&lt;/code&gt; package uses the &lt;a href=&#34;https://pub.dev/packages/version&#34;&gt;version&lt;/a&gt; package that is in compliance with the Semantic Versioning spec at &lt;a href=&#34;http://semver.org/&#34;&gt;http://semver.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;iTunes Search API&lt;/h2&gt; &#xA;&lt;p&gt;There is a class in this Flutter package used by the &lt;code&gt;upgrader&lt;/code&gt; widgets to download app details from the &lt;a href=&#34;https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api&#34;&gt;iTunes Search API&lt;/a&gt;. The class ITunesSearchAPI can be used standalone to query iTunes for app details.&lt;/p&gt; &#xA;&lt;h3&gt;ITunesSearchAPI Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;final iTunes = ITunesSearchAPI();&#xA;final resultsFuture = iTunes.lookupByBundleId(&#39;com.google.Maps&#39;);&#xA;resultsFuture.then((results) {&#xA;    print(&#39;results: $results&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/screenshots/results.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/larryaasen/upgrader/master/screenshots/results.png&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command Line App - Android&lt;/h3&gt; &#xA;&lt;p&gt;There is a command line app used to display the results from Google Play Store. The code is located in bin/playstore_lookup.dart, and can be run from the command line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd bin&#xA;$ dart playstore_lookup.dart id=com.google.android.apps.mapslite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;playstore_lookup releaseNotes: ‚Ä¢ Support plus.codes URLs‚Ä¢ Bug fixes&#xA;playstore_lookup version: 152.0.0&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command Line App - iOS&lt;/h3&gt; &#xA;&lt;p&gt;There is a command line app used to display the results from iTunes Search. The code is located in bin/itunes_lookup.dart, and can be run from the command line like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dart itunes_lookup.dart bundleid=com.google.Maps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;upgrader: download: https://itunes.apple.com/lookup?bundleId=com.google.Maps&#xA;upgrader: response statusCode: 200&#xA;itunes_lookup bundleId: com.google.Maps&#xA;itunes_lookup releaseNotes: Thanks for using Google Maps!&#xA;itunes_lookup trackViewUrl: https://apps.apple.com/us/app/google-maps-transit-food/id585027354?uo=4&#xA;itunes_lookup version: 5.58&#xA;itunes_lookup all results:&#xA;{resultCount: 1, results:&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please submit issue reports &lt;a href=&#34;https://github.com/larryaasen/upgrader/issues/new/choose&#34;&gt;here on GitHub&lt;/a&gt;. To better assist in analyzing issues, please include all of the &lt;code&gt;upgrader&lt;/code&gt; log, which should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flutter: upgrader: languageCode: en&#xA;flutter: upgrader: build UpgradeAlert&#xA;flutter: upgrader: default operatingSystem: ios 11.4&#xA;flutter: upgrader: operatingSystem: ios&#xA;flutter: upgrader: platform: TargetPlatform.iOS&#xA;flutter: upgrader: package info packageName: com.google.Maps&#xA;flutter: upgrader: package info appName: Upgrader&#xA;flutter: upgrader: package info version: 1.0.0&#xA;flutter: upgrader: countryCode: US&#xA;flutter: upgrader: blocked: false&#xA;flutter: upgrader: debugDisplayAlways: false&#xA;flutter: upgrader: debugDisplayOnce: false&#xA;flutter: upgrader: hasAlerted: false&#xA;flutter: upgrader: appStoreVersion: 5.81&#xA;flutter: upgrader: installedVersion: 1.0.0&#xA;flutter: upgrader: minAppVersion: null&#xA;flutter: upgrader: isUpdateAvailable: true&#xA;flutter: upgrader: shouldDisplayUpgrade: true&#xA;flutter: upgrader: shouldDisplayReleaseNotes: true&#xA;flutter: upgrader: showDialog title: Update App?&#xA;flutter: upgrader: showDialog message: A new version of Upgrader is available! Version 5.81 is now available-you have 1.0.0.&#xA;flutter: upgrader: showDialog releaseNotes: Thanks for using Google Maps! This release brings bug fixes that improve our product to help you discover new places and navigate to them.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, please include the upgrader version number from the pubspec.lock file, which should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  upgrader:&#xA;    dependency: &#34;direct main&#34;&#xA;    description:&#xA;      path: &#34;..&#34;&#xA;      relative: true&#xA;    source: path&#xA;    version: &#34;3.6.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;a href=&#34;https://github.com/larryaasen/upgrader/issues&#34;&gt;comments&lt;/a&gt; and &lt;a href=&#34;https://github.com/larryaasen/upgrader/pulls&#34;&gt;pull requests&lt;/a&gt; are welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Donations / Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;Please sponsor or donate to the creator of &lt;code&gt;upgrader&lt;/code&gt; on &lt;a href=&#34;https://flattr.com/@larryaasen&#34;&gt;Flattr&lt;/a&gt; or &lt;a href=&#34;https://www.patreon.com/larryaasen&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Builds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.travis-ci.com/github/larryaasen/upgrader&#34;&gt;&lt;img src=&#34;https://travis-ci.com/larryaasen/upgrader.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codemagic.io/apps/5ffb7888eb8402dcd1928753/flutter-package/latest_build&#34;&gt;&lt;img src=&#34;https://api.codemagic.io/apps/5ffb7888eb8402dcd1928753/flutter-package/status_badge.svg?sanitize=true&#34; alt=&#34;Codemagic&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dl.circleci.com/status-badge/redirect/gh/larryaasen/upgrader/tree/master&#34;&gt;&lt;img src=&#34;https://dl.circleci.com/status-badge/img/gh/larryaasen/upgrader/tree/master.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>