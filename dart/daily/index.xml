<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-10T01:36:04Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gskinner/flutter_animate</title>
    <updated>2022-09-10T01:36:04Z</updated>
    <id>tag:github.com,2022-09-10:/gskinner/flutter_animate</id>
    <link href="https://github.com/gskinner/flutter_animate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add beautiful animated effects &amp; builders in Flutter, via an easy, highly customizable unified API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Animate&lt;/h1&gt; &#xA;&lt;p&gt;A performant library that makes it simple to add almost any kind of animated effect in Flutter.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pre-built effects, like fade, scale, slide, blur, shake, shimmer, and color effects (saturation and tint)&lt;/li&gt; &#xA; &lt;li&gt;Easy custom effects and simplified animated builders&lt;/li&gt; &#xA; &lt;li&gt;Synchronize animations to scroll, notifiers, or anything&lt;/li&gt; &#xA; &lt;li&gt;Integrated events&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All via a simple, unified API without fussing with AnimationController and StatefulWidget.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This library is currently in prerelease. Some aspects of the API will change as it is refined. Your feedback is welcome via Github issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gskinner/flutter_animate/assets/infoView.gif&#34; alt=&#34;Basic Animations&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gskinner/flutter_animate/assets/visualView.gif&#34; alt=&#34;Visual Effects&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gskinner/flutter_animate/assets/adapterView.gif&#34; alt=&#34;Synchronized Animations&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Above: The included example app.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Duration extensions&lt;/h2&gt; &#xA;&lt;p&gt;This package includes extension methods for &lt;code&gt;num&lt;/code&gt;, to make specifying durations easier. For example: &lt;code&gt;2.seconds&lt;/code&gt;, &lt;code&gt;0.1.minutes&lt;/code&gt;, or &lt;code&gt;300.ms&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Basics&lt;/h1&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;p&gt;To apply effects, wrap the target widget in &lt;code&gt;Animate&lt;/code&gt;, and specify a list of effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Animate(&#xA;  effects: [FadeEffect(), ScaleEffect()],&#xA;  child: Text(&#34;Hello World!&#34;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also adds an &lt;code&gt;.animate()&lt;/code&gt; extension method to all widgets, which wraps the widget in &lt;code&gt;Animate()&lt;/code&gt;. Each effect also adds a chainable extension method to &lt;code&gt;Animate&lt;/code&gt; to enable a shorthand syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello World!&#34;).animate().fade().scale()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The shortform style is used in this README, but all functionality is available in either format.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Delay, duration, curve&lt;/h2&gt; &#xA;&lt;p&gt;Effects have optional &lt;code&gt;delay&lt;/code&gt;, &lt;code&gt;duration&lt;/code&gt;, and &lt;code&gt;curve&lt;/code&gt; parameters. Effects run in parallel, but you can use a &lt;code&gt;delay&lt;/code&gt; to run them sequentially:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello&#34;).animate()&#xA;  .fade(duration: 500.ms)&#xA;  .scale(delay: 500.ms) // runs after fade.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that effects are &#34;active&#34; for the duration of the full animation, so for example, two fade effects on the same target can have unexpected results (&lt;code&gt;SwapEffect&lt;/code&gt; detailed below, can help address this).&lt;/p&gt; &#xA;&lt;p&gt;If not specified (or null), these values are inherited from the previous effect, or from &lt;code&gt;Animate.defaultDuration&lt;/code&gt; and &lt;code&gt;Animate.defaultCurve&lt;/code&gt; if it is the first effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello World!&#34;).animate()&#xA;  .fadeIn() // uses `Animate.defaultDuration`&#xA;  .scale() // inherits duration from fadeIn&#xA;  .move(delay: 300.ms, duration: 600.ms) // runs after the above w/new duration&#xA;  .blur(end: 8.0) // inherits the delay &amp;amp; duration from move&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Animate&lt;/code&gt; also has its own &lt;code&gt;delay&lt;/code&gt; parameter, which happens before the animation runs. Unlike the delay on an &lt;code&gt;Effect&lt;/code&gt;, it is only applied once if the animation repeats.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello&#34;).animate(&#xA;    delay: 1000.ms, // this delay only happens once at the very start&#xA;    onPlay: (controller) =&amp;gt; controller.repeat(), // loop&#xA;  ).fadeIn(delay: 500.ms) // this delay happens at the start of each loop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sequencing with ThenEffect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ThenEffect&lt;/code&gt; is a special &#34;convenience&#34; effect that simply sets its own inheritable delay to the sum of the delay and duration of the previous effect, and its own (optional) delay. This makes it easier to sequence effects.&lt;/p&gt; &#xA;&lt;p&gt;In the following example, the slide would run immediately after the fade ended, then the blur would run 200ms after the slide ended.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello&#34;).animate()&#xA;  .fadeIn(delay: 300.ms, duration: 500.ms)&#xA;  .then() // sets own delay to 800ms (300+500)&#xA;  .slide(duration: 400.ms) // inherits the 800ms delay&#xA;  .then(delay: 200.ms) // sets delay to 1400ms (800+400+200)&#xA;  .blur() // inherits the 1400ms delay&#xA;  // Explicitly setting delay overrides the inherited value.&#xA;  // This move effect will run BEFORE the initial fade:&#xA;  .move(delay: 0.ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animating lists&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;AnimateList&lt;/code&gt; class offers similar functionality for lists of widgets, with the option to offset each child&#39;s animation by a specified &lt;code&gt;interval&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Column(children: AnimateList(&#xA;  interval: 400.ms,&#xA;  effects: [FadeEffect(duration: 300.ms)],&#xA;  children: [Text(&#34;Hello&#34;), Text(&#34;World&#34;),  Text(&#34;Goodbye&#34;)],&#xA;))&#xA;&#xA;// or shorthand:&#xA;Column(&#xA;  children: [Text(&#34;Hello&#34;), Text(&#34;World&#34;),  Text(&#34;Goodbye&#34;)]&#xA;    .animate(interval: 400.ms).fade(duration: 300.ms),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shared effects&lt;/h2&gt; &#xA;&lt;p&gt;Because &lt;code&gt;Effect&lt;/code&gt; instances are immutable, they can be reused. This makes it easy to create a global collection of effects that are used throughout your app and updated in one place. This is also useful for design systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;MyGlobalEffects.transitionIn = &amp;lt;Effect&amp;gt;[&#xA;  FadeEffect(duration: 100.ms, curve: Curves.easeOut),&#xA;  ScaleEffect(begin: 0.8, curve: Curves.easeIn)&#xA;]&#xA;&#xA;// then:&#xA;Text(&#39;Hello&#39;).animate(effects: MyGlobalEffects.transitionIn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Custom effects &amp;amp; builders&lt;/h1&gt; &#xA;&lt;p&gt;It is easy to write new resuable effects by extending &lt;code&gt;Effect&lt;/code&gt;, but you can also easily create one-off custom effects by using &lt;code&gt;CustomEffect&lt;/code&gt;, &lt;code&gt;ToggleEffect&lt;/code&gt;, and &lt;code&gt;SwapEffect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CustomEffect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;CustomEffect&lt;/code&gt; lets you build custom animated effects. Simply specify a &lt;code&gt;builder&lt;/code&gt; function that accepts a &lt;code&gt;context&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, and &lt;code&gt;child&lt;/code&gt;. The child is the target of the animation (which may already have been wrapped in other effects).&lt;/p&gt; &#xA;&lt;p&gt;For example, this would add a background behind the text and fade it from red to blue:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello World&#34;).animate().custom(&#xA;  duration: 300.ms,&#xA;  builder: (context, value, child) =&amp;gt; Container(&#xA;    color: Color.lerp(Colors.red, Colors.blue, value),&#xA;    padding: EdgeInsets.all(8),&#xA;    child: child, // child is the Text widget being animated&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default it provides a &lt;code&gt;value&lt;/code&gt; from &lt;code&gt;0-1&lt;/code&gt; (though some curves can generate values outside this range), based on the current time, duration, and curve. You can also specify &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; values as demonstrated in the example below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Animate&lt;/code&gt; can be created without a child, so you use &lt;code&gt;CustomEffect&lt;/code&gt; as a simplified builder. For example, this would build text counting down from 10, and fading out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Animate().custom(&#xA;  duration: 10.seconds,&#xA;  begin: 10,&#xA;  end: 0,&#xA;  builder: (_, value, __) =&amp;gt; Text(value.round()),&#xA;).fadeOut()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ToggleEffect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ToggleEffect&lt;/code&gt; also provides builder functionality, but instead of a &lt;code&gt;double&lt;/code&gt;, it provides a boolean value equal to &lt;code&gt;true&lt;/code&gt; before the end of the effect and &lt;code&gt;false&lt;/code&gt; after (ie. after its duration).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Animate().toggle(&#xA;  duration: 2.seconds,&#xA;  builder: (_, value, __) =&amp;gt; Text(value ? &#34;Before&#34; : &#34;After&#34;),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be used to activate &#34;Animated&#34; widgets, like &lt;code&gt;AnimatedContainer&lt;/code&gt;, by toggling their values with a minimal delay:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Animate().toggle(&#xA;  duration: 1.ms,&#xA;  builder: (_, value, __) =&amp;gt; AnimatedContainer(&#xA;    duration: 1.second,&#xA;    color: value ? Colors.red : Colors.green,&#xA;  ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SwapEffect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;SwapEffect&lt;/code&gt; lets you swap out the whole target widget at a specified time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Before&#34;).animate()&#xA;  .swap(duration: 900.ms, builder: (_, __) =&amp;gt; Text(&#34;After&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can also be useful for creating sequential effects, by swapping the target widget back in, effectively wiping all previous effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;text.animate().fadeOut(300.ms) // fade out &amp;amp; then...&#xA;  // swap in original widget &amp;amp; fade back in via a new Animate:&#xA;  .swap(builder: (_, child) =&amp;gt; child.animate().fadeIn())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Events &amp;amp; callbacks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Animate&lt;/code&gt; includes the following callbacks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;onPlay&lt;/code&gt;: the animation has started playing after any &lt;code&gt;Animate.delay&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onComplete&lt;/code&gt;: the animation has finished&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These callbacks return the &lt;code&gt;AnimationController&lt;/code&gt;, which can be used to manipulate the animation (ex. repeat, reverse, etc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Horrible Pulsing Text&#34;)&#xA;  .animate(onPlay: (controller) =&amp;gt; controller.repeat(reverse: true))&#xA;  .fadeOut(curve: Curves.easeInOut)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more nuanced callbacks, use &lt;code&gt;CallbackEffect&lt;/code&gt; or &lt;code&gt;ListenEffect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CallbackEffect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;CallbackEffect&lt;/code&gt; lets you add a callback to an arbitrary postion in your animations. For example, adding a callback halfway through a fade:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello&#34;).animate().fadeIn(duration: 600.ms)&#xA;  .callback(duration: 300.ms, callback: (_) =&amp;gt; print(&#39;halfway&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As with other effects, it will inherit the delay and duration of prior effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello&#34;).animate().scale(delay: 200.ms, duration: 400.ms)&#xA;  .callback(callback: (_) =&amp;gt; print(&#39;scale is done&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ListenEffect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ListenEffect&lt;/code&gt; lets you register a callback to receive the animation value (as a &lt;code&gt;double&lt;/code&gt;) for a given delay, duration, curve, begin, and end.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;Text(&#34;Hello&#34;).animate().fadeIn(curve: Curves.easeOutExpo)&#xA;  .listen(callback: (value) =&amp;gt; print(&#39;current opacity: $value&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example works, because the listen effect inherits duration and curve from the fade, and both use &lt;code&gt;begin=0, end=1&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;h1&gt;Adapters and Controllers&lt;/h1&gt; &#xA;&lt;p&gt;By default, all animations are driven by an internal &lt;code&gt;AnimationController&lt;/code&gt;, and update based on elapsed time. For more control, you can specify your own external &lt;code&gt;controller&lt;/code&gt;, or use an &lt;code&gt;adapter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adapters synchronize the &lt;code&gt;AnimationController&lt;/code&gt; to an external source. For example, the &lt;code&gt;ScrollAdapter&lt;/code&gt; updates an animation based on a &lt;code&gt;ScrollController&lt;/code&gt; so you can run complex animations based on scroll interactions.&lt;/p&gt; &#xA;&lt;p&gt;You still define animations using durations, but the external source must provide a &lt;code&gt;0-1&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;Flutter Animate ships with a collection of useful adapters. Check them out for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Grab it from &lt;a href=&#34;https://pub.dev/packages/flutter_animate/install&#34;&gt;pub.dev&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NimaPayande/Flutter-music-player</title>
    <updated>2022-09-10T01:36:04Z</updated>
    <id>tag:github.com,2022-09-10:/NimaPayande/Flutter-music-player</id>
    <link href="https://github.com/NimaPayande/Flutter-music-player" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flutter music player&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flutter Music Player&lt;/h1&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/96375955/188636956-4731f5f6-c054-477b-b4b5-dc36405e04b5.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/96375955/188636970-e66deeb6-7f9f-4428-bfd1-8e35c8180dcf.png&#34; width=&#34;300&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/96375955/188637221-2c8b241a-cc0f-473e-b912-346eb00f2138.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://instagram.com/niima.dev&#34;&gt;Instagram&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This project is a starting point for a Flutter application.&lt;/p&gt; &#xA;&lt;p&gt;A few resources to get you started if this is your first Flutter project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/get-started/codelab&#34;&gt;Lab: Write your first Flutter app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.flutter.dev/cookbook&#34;&gt;Cookbook: Useful Flutter samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For help getting started with Flutter development, view the &lt;a href=&#34;https://docs.flutter.dev/&#34;&gt;online documentation&lt;/a&gt;, which offers tutorials, samples, guidance on mobile development, and a full API reference.&lt;/p&gt;</summary>
  </entry>
</feed>