<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-04T01:28:06Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FilledStacks/expression-ui</title>
    <updated>2024-04-04T01:28:06Z</updated>
    <id>tag:github.com,2024-04-04:/FilledStacks/expression-ui</id>
    <link href="https://github.com/FilledStacks/expression-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework that allows you to build UI&#39;s using animation software&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;expression ui&lt;/h1&gt; &#xA;&lt;p&gt;I want to create a framework that makes UI building for mobile apps fun for EVERY major framework (Flutter, React-Native, iOS Native, Android Native, Kotlin MM).&lt;/p&gt; &#xA;&lt;p&gt;I am openly building this project as exploration into something that I think would be really fun to have for mobile app developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FilledStacks/expression-ui/main/resources/experience-so-far-resize.gif&#34; alt=&#34;Experience So Far&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is this about?&lt;/h2&gt; &#xA;&lt;p&gt;Currently the app building process works as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create or get a figma design&lt;/li&gt; &#xA; &lt;li&gt;Spend hours writing the code to render that Figma design 2a. &lt;em&gt;Every developer does it different&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the app and tweak the UI as you are building it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This process is accepted, and when I spoke about it, I was told to &lt;a href=&#34;https://www.reddit.com/r/FlutterDev/comments/1bieuy5/im_tired_of_building_flutter_uis/&#34;&gt;&#34;copy paste my old code&#34; to move faster and I should stop complaining&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;But I don&#39;t like step 2 in the process above.&lt;/p&gt; &#xA;&lt;p&gt;What if we could go from design directly to pixels.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s what I&#39;m exploring with this framework.&lt;/p&gt; &#xA;&lt;p&gt;The idea is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Design your UI on a canvas tool&lt;/li&gt; &#xA; &lt;li&gt;That gets rendered as-is, pixel-perfect using a rendering runtime&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Technical research&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in helping I would appreciate that.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m currently doing the Flutter parts, I would love for react-native, iOS native, Android native and all of those to be developed / researched at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Please reach out on &lt;a href=&#34;https://twitter.com/danemackier&#34;&gt;Twitter&lt;/a&gt; and I&#39;ll add you to our Discord if you&#39;d like to help explore this idea.&lt;/p&gt; &#xA;&lt;h2&gt;Repo Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples: is where the examples will go for each of the frameworks named examples-[framework]&lt;/li&gt; &#xA; &lt;li&gt;packages: is where the packages will go for each of the frameworks names expression-ui-[framework]&lt;/li&gt; &#xA; &lt;li&gt;resources: readme images and gifs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UI Research&lt;/h3&gt; &#xA;&lt;p&gt;These tasks are all related to the visuals and exploring how we can actually make the user interface work as expected.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Creating checkable boxes (up to 5) and update state in code&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Managing text input&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Performing interactive gestures (Swipes)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Bottom sheets (shoud be the same as normal UI)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Creating a long scrollable list view&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Dynamically update text&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Sync state with animation UI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Building multiple views and navigating between them&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Building responsive UI&#39;s - &lt;a href=&#34;https://github.com/FilledStacks/expression-ui/pull/1&#34;&gt;PR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Building a design system and composing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;del&gt;Works with a screen reader&lt;/del&gt; - &lt;em&gt;Attempted but rive&#39;s single widget is making this difficult. Work in &lt;code&gt;feat/screen-reader&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Experience Research&lt;/h3&gt; &#xA;&lt;p&gt;These tasks are all related to improving the dev experience, majority of them will probably be code generation using dart cli (not the build_runner package).&lt;/p&gt; &#xA;&lt;p&gt;The goal would be to read the rive file and use the data in there to improve the developers experience.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Automatic binding of click events and callbacks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Type safe referencing of all states, animations, events and artboards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Write ups&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/DaneMackier/status/1773348709461344415?s=20&#34;&gt;The first development experience&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Findings (Kind of Docs)&lt;/h2&gt; &#xA;&lt;h3&gt;Dynamically Update Text&lt;/h3&gt; &#xA;&lt;p&gt;When loading an artboard (your view), you will need to retrieve what&#39;s called a &#34;Text Run&#34;. This is a component defined in the rive editor, that allows you to read and dynamically update text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;RiveAnimation.asset(&#xA;    &#39;assets/counter.riv&#39;,&#xA;    artboard: &#39;counter&#39;,&#xA;    fit: BoxFit.cover,&#xA;    onInit: (Artboard artboard) {&#xA;        // The textRun method is an extension, see definition below&#xA;        final counterState = artboard.textRun(&#39;Counter&#39;)!;&#xA;    },&#xA;)&#xA;&#xA;// Extension&#xA;extension TextExtension on Artboard {&#xA;  TextValueRun? textRun(String name) =&amp;gt; component&amp;lt;TextValueRun&amp;gt;(name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sync Animation With State&lt;/h3&gt; &#xA;&lt;p&gt;You can see our working example with state on our side and updating by looking at the &lt;code&gt;counter_view.dart&lt;/code&gt; and &lt;code&gt;counter_viewmodel.dart&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;What we&#39;re doing is quite simple.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We get the &lt;code&gt;textRun&lt;/code&gt; as described above&lt;/li&gt; &#xA; &lt;li&gt;We store that &lt;code&gt;textRun&lt;/code&gt; in our state file&lt;/li&gt; &#xA; &lt;li&gt;We update that state when our state changes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s all the state code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;class CounterViewModel extends BaseViewModel {&#xA;  late TextValueRun _counter;&#xA;&#xA; // #2&#xA;  void setCounterState(TextValueRun counter) {&#xA;    _counter = counter;&#xA;  }&#xA;&#xA; // #3&#xA;  void onRiveEvent(RiveEvent event) {&#xA;    var counterValue = int.parse(_counter.text);&#xA;    counterValue++;&#xA;&#xA;    _counter.text = counterValue.toString();&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our goal will be to create this in a type safe way for the users of experienceUI to reference. I have some ideas around that.&lt;/p&gt; &#xA;&lt;h3&gt;Building multiple views&lt;/h3&gt; &#xA;&lt;p&gt;Each artboard can be a single view/screen and can be referenced per view file simply by giving the artboard name. See example below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FilledStacks/expression-ui/main/resources/multi-screen-design.jpg&#34; alt=&#34;Multi-screen design&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We navigate between them normally, by listening to the button tap events and doing navigation however we choose. This gives us the full capabilities of the framework we&#39;re using in terms of native style navigation and we don&#39;t have to manually build all transitions.&lt;/p&gt; &#xA;&lt;p&gt;It also gives us the ability to use the hero effect.&lt;/p&gt;</summary>
  </entry>
</feed>