<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Dart Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-18T01:37:29Z</updated>
  <subtitle>Daily Trending of Dart in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bizz84/complete-flutter-course</title>
    <updated>2022-08-18T01:37:29Z</updated>
    <id>tag:github.com,2022-08-18:/bizz84/complete-flutter-course</id>
    <link href="https://github.com/bizz84/complete-flutter-course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Complete Flutter Course Bundle - Flutter eCommerce App&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Complete Flutter Course Bundle - eCommerce App&lt;/h1&gt; &#xA;&lt;p&gt;This is the official repo for this course:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewithandrea.com/courses/complete-flutter-bundle/&#34;&gt;Complete Flutter Course Bundle&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will include a full-stack eCommerce app using Flutter &amp;amp; Firebase:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bizz84/complete-flutter-course/main/.github/images/ecommerce-app-preview.png&#34; alt=&#34;eCommerce App Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Flutter web preview of the app can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://my-shop-ecommerce-stg.web.app/&#34;&gt;Flutter Web Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; FAQ&lt;/h2&gt; &#xA;&lt;p&gt;This project includes a documentation website that can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.page/bizz84/complete-flutter-course&#34;&gt;Complete Flutter Course Bundle - Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Flutter Foundations - Course Syllabus&lt;/h2&gt; &#xA;&lt;h3&gt;1. Intro &amp;amp; Project Overview&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;What you will learn in this course&lt;/li&gt; &#xA; &lt;li&gt;Section overview&lt;/li&gt; &#xA; &lt;li&gt;VSCode Shortcuts, Extensions &amp;amp; Settings for Flutter development&lt;/li&gt; &#xA; &lt;li&gt;Join the Slack Channel&lt;/li&gt; &#xA; &lt;li&gt;Course Project on GitHub&lt;/li&gt; &#xA; &lt;li&gt;Download the Starter Project &amp;amp; &lt;code&gt;pubspec.yaml&lt;/code&gt; overview&lt;/li&gt; &#xA; &lt;li&gt;eCommerce app overview&lt;/li&gt; &#xA; &lt;li&gt;Code walkthrough: project structure&lt;/li&gt; &#xA; &lt;li&gt;Exploring the codebase with the Widget Inspector (DevTools)&lt;/li&gt; &#xA; &lt;li&gt;UI Design Principles: Composition &amp;amp; Reusable Widget Classes&lt;/li&gt; &#xA; &lt;li&gt;Useful Widgets for Responsive Design&lt;/li&gt; &#xA; &lt;li&gt;App Localization&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2. Navigation with GoRouter&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Limitations of Navigator 1.0&lt;/li&gt; &#xA; &lt;li&gt;GoRouter installation &amp;amp; initial setup with &lt;code&gt;MaterialApp.router&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Routes, sub-routes and navigation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GoRouterHelper&lt;/code&gt; Extension and &lt;code&gt;pageBuilder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adding some additional routes&lt;/li&gt; &#xA; &lt;li&gt;Routing by &lt;strong&gt;path&lt;/strong&gt; vs routing by &lt;strong&gt;name&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Routing with parameters&lt;/li&gt; &#xA; &lt;li&gt;GoRouter error handling&lt;/li&gt; &#xA; &lt;li&gt;Navigating with &lt;strong&gt;go&lt;/strong&gt; vs &lt;strong&gt;push&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adding the remaining routes&lt;/li&gt; &#xA; &lt;li&gt;How to pop a route with GoRouter&lt;/li&gt; &#xA; &lt;li&gt;Nested Navigation&lt;/li&gt; &#xA; &lt;li&gt;Wrap up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3. Flutter App Architecture&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Popular App Architectures: MVC, MVP, MVVM, Clean Architecture, Bloc&lt;/li&gt; &#xA; &lt;li&gt;Riverpod App Architecture with the Controller-Service-Repository Pattern&lt;/li&gt; &#xA; &lt;li&gt;Project Structure: Feature-first vs Layer-first&lt;/li&gt; &#xA; &lt;li&gt;The Repository Pattern and the Data Layer&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &#34;fake&#34; products repository as a singleton&lt;/li&gt; &#xA; &lt;li&gt;Working with Future and Stream-based APIs&lt;/li&gt; &#xA; &lt;li&gt;Wrap Up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;4. State Management with Riverpod - Part 1 (Product Listings)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Introduction to Riverpod&lt;/li&gt; &#xA; &lt;li&gt;Riverpod installation and setup&lt;/li&gt; &#xA; &lt;li&gt;Creating our first provider&lt;/li&gt; &#xA; &lt;li&gt;Reading providers with &lt;code&gt;ConsumerWidget&lt;/code&gt; and &lt;code&gt;Consumer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Working with &lt;code&gt;FutureProvider&lt;/code&gt;, &lt;code&gt;StreamProvider&lt;/code&gt;, and &lt;code&gt;AsyncValue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Testing &lt;code&gt;AsyncValue&lt;/code&gt; by adding a delay&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;family&lt;/code&gt; modifier&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;autoDispose&lt;/code&gt; modifier + advanced data caching options&lt;/li&gt; &#xA; &lt;li&gt;Creating a reusable &lt;code&gt;AsyncValueWidget&lt;/code&gt; helper&lt;/li&gt; &#xA; &lt;li&gt;Wrap Up + Exercise&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;5. State Management with Riverpod - Part 2 (Authentication Flow)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section intro&lt;/li&gt; &#xA; &lt;li&gt;Implementing a fake authentication repository&lt;/li&gt; &#xA; &lt;li&gt;Creating repositories using abstract classes (optional)&lt;/li&gt; &#xA; &lt;li&gt;Intro: a reactive in-memory store with RxDart&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;InMemoryStore&lt;/code&gt; with RxDart&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;InMemoryStore&lt;/code&gt; in the &lt;code&gt;FakeAuthRepository&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Accessing the &lt;code&gt;FakeAuthRepository&lt;/code&gt; with &lt;code&gt;ref.read()&lt;/code&gt; in the &lt;code&gt;AccountScreen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Creating our first controller using &lt;code&gt;StateNotifier&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;StateNotifier&lt;/code&gt; inside the &lt;code&gt;AccountScreen&lt;/code&gt; widget&lt;/li&gt; &#xA; &lt;li&gt;Listening to provider state changes with &lt;code&gt;ref.listen()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bug-fix for &lt;code&gt;Navigator.pop&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;AsyncValue.guard&lt;/code&gt; method&lt;/li&gt; &#xA; &lt;li&gt;Adding an &lt;code&gt;AsyncValue&lt;/code&gt; extension method&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;authStateChangesProvider&lt;/code&gt; in &lt;code&gt;HomeAppBar&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intro to the email &amp;amp; password sign-in screen&lt;/li&gt; &#xA; &lt;li&gt;How to generate immutable state classes in Dart&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;AsyncValue&lt;/code&gt; inside &lt;code&gt;EmailPasswordSignInState&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;EmailPasswordSignInController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;EmailPasswordSignInController&lt;/code&gt; in the widget class&lt;/li&gt; &#xA; &lt;li&gt;Bug fix + filtering state updates with &lt;code&gt;select()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;GoRouter redirects&lt;/li&gt; &#xA; &lt;li&gt;GoRouter: the &lt;code&gt;refreshListenable&lt;/code&gt; argument&lt;/li&gt; &#xA; &lt;li&gt;Fixing the checkout flows after changes to refreshListenable (advanced)&lt;/li&gt; &#xA; &lt;li&gt;Wrap Up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;6. Automated Testing - Part 1&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Introduction to Automated Testing and the Testing Pyramid&lt;/li&gt; &#xA; &lt;li&gt;Getting started with automated testing&lt;/li&gt; &#xA; &lt;li&gt;Writing the first unit test + adding &lt;code&gt;toString()&lt;/code&gt; and equality implementations&lt;/li&gt; &#xA; &lt;li&gt;Test matchers and working with methods that throw exceptions&lt;/li&gt; &#xA; &lt;li&gt;Fixing the &lt;code&gt;getProduct()&lt;/code&gt; method and updating the unit tests&lt;/li&gt; &#xA; &lt;li&gt;Working with groups and testing Futures and Streams&lt;/li&gt; &#xA; &lt;li&gt;Adding an optional delay to the &lt;code&gt;FakeProductsRepository&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;How to generate a Flutter test coverage report in VSCode&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;FakeAuthRepository&lt;/code&gt; (part 1)&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;FakeAuthRepository&lt;/code&gt; (part 2) + advanced stream matchers&lt;/li&gt; &#xA; &lt;li&gt;Mocks vs Fakes + installing the mocktail package&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;AccountScreenController&lt;/code&gt; (part 1) + &lt;code&gt;AsyncValue&lt;/code&gt; subclasses&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;AccountScreenController&lt;/code&gt; (part 2) + working with mocks&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;AccountScreenController&lt;/code&gt; (part 3) + type matchers&lt;/li&gt; &#xA; &lt;li&gt;Testing with Stream Matchers and Predicates&lt;/li&gt; &#xA; &lt;li&gt;Testing lifecycle methods (&lt;code&gt;setUp&lt;/code&gt;, &lt;code&gt;tearDown&lt;/code&gt;, &lt;code&gt;setUpAll&lt;/code&gt;, &lt;code&gt;tearDownAll&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;EmailPasswordSignInController&lt;/code&gt; with acceptance criteria&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;EmailPasswordSignInController&lt;/code&gt; (part 2)&lt;/li&gt; &#xA; &lt;li&gt;Tip: setting custom test timeouts per-file&lt;/li&gt; &#xA; &lt;li&gt;Adding a test workflow to automate testing with GitHub Actions&lt;/li&gt; &#xA; &lt;li&gt;Wrap up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;7. Automated Testing - Part 2&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Introduction to widget tests + starter project&lt;/li&gt; &#xA; &lt;li&gt;Writing our first widget test using &lt;code&gt;pumpWidget()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Working with &lt;code&gt;WidgetTester&lt;/code&gt; and finder&lt;/li&gt; &#xA; &lt;li&gt;Robot testing&lt;/li&gt; &#xA; &lt;li&gt;How to find widgets by key&lt;/li&gt; &#xA; &lt;li&gt;Writing widget tests with mocks and provider overrides&lt;/li&gt; &#xA; &lt;li&gt;Writing widget tests with &lt;code&gt;Future.delayed()&lt;/code&gt; and &lt;code&gt;runAsync()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adding the email &amp;amp; password widget tests&lt;/li&gt; &#xA; &lt;li&gt;Adding the email &amp;amp; password widget tests (part 2)&lt;/li&gt; &#xA; &lt;li&gt;Test setup for the authentication flow + using &lt;code&gt;pumpAndSettle()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fixing the RenderFlex overflow error&lt;/li&gt; &#xA; &lt;li&gt;Completing the authentication flow test&lt;/li&gt; &#xA; &lt;li&gt;Integration tests&lt;/li&gt; &#xA; &lt;li&gt;Golden image tests&lt;/li&gt; &#xA; &lt;li&gt;Running golden image tests with size variants&lt;/li&gt; &#xA; &lt;li&gt;How to deal with holden image tests failing on CI&lt;/li&gt; &#xA; &lt;li&gt;Wrap Up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;8. Feature: Shopping Cart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Overview of the shopping cart feature + technical requirements&lt;/li&gt; &#xA; &lt;li&gt;App Architecture for the shopping cart feature&lt;/li&gt; &#xA; &lt;li&gt;Starter project + overview of the data and domain layers&lt;/li&gt; &#xA; &lt;li&gt;Local data persistence with Sembast: Initial setup&lt;/li&gt; &#xA; &lt;li&gt;How to persist the shopping cart data with the &lt;code&gt;SembastCartRepository&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;CartService&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;CartService&lt;/code&gt; class to read dependencies using &lt;code&gt;Ref&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Writing unit tests using &lt;code&gt;ProviderContainer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Writing the unit tests for the &lt;code&gt;CartService&lt;/code&gt; class&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;AddToCartController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;AddToCartWidget&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bug Fix: Adding &lt;code&gt;autoDispose&lt;/code&gt; to the &lt;code&gt;AddToCartController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Showing the cart items in the &lt;code&gt;ShoppingCartScreen&lt;/code&gt; + AutoDispose vs AlwaysAlive error when combining providers&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;ShoppingCartItemController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;EditOrRemoveItemWidget&lt;/code&gt; and &lt;code&gt;ShoppingCartScreen&lt;/code&gt; widgets&lt;/li&gt; &#xA; &lt;li&gt;Calculating and showing the cart items count&lt;/li&gt; &#xA; &lt;li&gt;Calculating and showing the cart total price&lt;/li&gt; &#xA; &lt;li&gt;Limiting the available quantity when adding items to the shopping cart&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;CartSyncService&lt;/code&gt; with a listener&lt;/li&gt; &#xA; &lt;li&gt;Registering the &lt;code&gt;CartSyncService&lt;/code&gt; with &lt;code&gt;ProviderContainer&lt;/code&gt; when the app starts&lt;/li&gt; &#xA; &lt;li&gt;Implementing the logic inside the &lt;code&gt;CartSyncService&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implementing the logic inside the &lt;code&gt;CartSyncService&lt;/code&gt; (part 2 - optional)&lt;/li&gt; &#xA; &lt;li&gt;Unit tests for the &lt;code&gt;CartSyncService&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unit-testing providers with dependencies using &lt;code&gt;ProviderContainer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Updated widget and integration tests&lt;/li&gt; &#xA; &lt;li&gt;Wrap up + exercise (implement a wish list feature)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;9. Feature: Checkout Flows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section intro&lt;/li&gt; &#xA; &lt;li&gt;Starter project for the checkout flows&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;CheckoutScreen&lt;/code&gt; with the &lt;code&gt;PageController&lt;/code&gt; initialization logic&lt;/li&gt; &#xA; &lt;li&gt;Do we need a &lt;code&gt;StateNotifier&lt;/code&gt; for the &lt;code&gt;CheckoutScreen&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;PaymentPage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implementing the &lt;code&gt;PaymentButtonController&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wrap Up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;10. Error Handling&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Intro&lt;/li&gt; &#xA; &lt;li&gt;Errors vs exceptions&lt;/li&gt; &#xA; &lt;li&gt;Starter project overview + defining custom exceptions with enums and subclasses&lt;/li&gt; &#xA; &lt;li&gt;Freezed Introduction and Installation&lt;/li&gt; &#xA; &lt;li&gt;Creating an &lt;code&gt;AppException&lt;/code&gt; with Freezed&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;AsyncValueUI&lt;/code&gt; extension to handle &lt;code&gt;AppException&lt;/code&gt; values&lt;/li&gt; &#xA; &lt;li&gt;Adding an &lt;code&gt;AsyncErrorLogger&lt;/code&gt; using &lt;code&gt;ProviderObserver&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Creating a reusable &lt;code&gt;ErrorLogger&lt;/code&gt; to catch all exceptions&lt;/li&gt; &#xA; &lt;li&gt;Completing the error handling system&lt;/li&gt; &#xA; &lt;li&gt;Working with the &lt;code&gt;Result&lt;/code&gt; type (Success and Error)&lt;/li&gt; &#xA; &lt;li&gt;Drawbacks of the &lt;code&gt;Result&lt;/code&gt; type (and when not to use it)&lt;/li&gt; &#xA; &lt;li&gt;Wrap Up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;11. Feature: Product Reviews&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Starter project overview&lt;/li&gt; &#xA; &lt;li&gt;Overview of the &lt;code&gt;LeaveReviewScreen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implemeting a &lt;code&gt;LeaveReviewController&lt;/code&gt; and submitting form data&lt;/li&gt; &#xA; &lt;li&gt;Testing the &lt;code&gt;LeaveReviewForm&lt;/code&gt; and preventing an &lt;code&gt;AssertionError&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dismissing the &lt;code&gt;LeaveReviewScreen&lt;/code&gt; programmatically on success using a callback&lt;/li&gt; &#xA; &lt;li&gt;How to prefill a form with data from a repository/backend&lt;/li&gt; &#xA; &lt;li&gt;Optimization: only submit the form if the data has changed&lt;/li&gt; &#xA; &lt;li&gt;Showing existing reviews in the &lt;code&gt;ProductReviewsList&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Updating the &lt;code&gt;LeaveReviewAction&lt;/code&gt; by reading read data from the &lt;code&gt;userPurchaseProvider&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Calculating the average product ratings&lt;/li&gt; &#xA; &lt;li&gt;Updated tests &amp;amp; wrap up&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;12. Feature: Products Search&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Section Intro&lt;/li&gt; &#xA; &lt;li&gt;Client-side vs server-side search&lt;/li&gt; &#xA; &lt;li&gt;Adding a search method to the &lt;code&gt;FakeProductsRepository&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implementing client-side search with &lt;code&gt;StateProvider&lt;/code&gt; and &lt;code&gt;FutureProvider&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Riverpod caching with &lt;code&gt;autoDispose&lt;/code&gt; and &lt;code&gt;cacheTime&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debouncing and cancelling network requests&lt;/li&gt; &#xA; &lt;li&gt;Conclusion &amp;amp; Next Steps&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bizz84/complete-flutter-course/main/LICENSE.md&#34;&gt;LICENSE: MIT&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>git-xiaocao/pixiv_func_mobile</title>
    <updated>2022-08-18T01:37:29Z</updated>
    <id>tag:github.com,2022-08-18:/git-xiaocao/pixiv_func_mobile</id>
    <link href="https://github.com/git-xiaocao/pixiv_func_mobile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;功能齐全的Pixiv第三方客户端 免代理 支持查看动图查看直播&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pixiv Func&lt;/h1&gt; &#xA;&lt;h1&gt;全新设计UI&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xiao-cao-x/pixiv_func_mobile/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/xiao-cao-x/pixiv_func_mobile?label=latest%20release&#34; alt=&#34;latest release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/xiao-cao-x/pixiv_func_mobile/total.svg?label=total%20downloads&#34; alt=&#34;total downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/xiao-cao-x/pixiv_func_mobile?label=total%20stars&#34; alt=&#34;total stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/xiao-cao-x/pixiv_func_mobile?label=total%20forks&#34; alt=&#34;total forks&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pixiv第三方移动客户端&lt;/li&gt; &#xA; &lt;li&gt;使用了&lt;code&gt;GetX&lt;/code&gt;状态管理框架&lt;/li&gt; &#xA; &lt;li&gt;代码严格按照&lt;code&gt;flutter_lints&lt;/code&gt;的规范编写&lt;/li&gt; &#xA; &lt;li&gt;适合新手学习Flutter&lt;/li&gt; &#xA; &lt;li&gt;这是我的个人玩具,与其他现有同类项目无关,如果你想拿我的项目跟其他项目比较,那么请你离开,我并不欢迎你&lt;/li&gt; &#xA; &lt;li&gt;该项目用于我个人学习Flutter,开源且免费&lt;/li&gt; &#xA; &lt;li&gt;有哪里出现问题或者需要新功能,欢迎打开&lt;a href=&#34;https://github.com/git-xiaocao/pixiv_func_mobile/issues/new&#34;&gt;Issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://pixiv.xiaocao.moe/#/pixiv-func/mobile&#34;&gt;获取帮助以及预览&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;如何编译?&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在项目目录打开终端&lt;/li&gt; &#xA; &lt;li&gt;执行&lt;code&gt;flutter pub get&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;把&lt;a href=&#34;https://raw.githubusercontent.com/git-xiaocao/pixiv_func_mobile/new/build_release&#34;&gt;build_release&lt;/a&gt;复制到终端执行&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;功能列表&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;状态&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;推荐&lt;/td&gt; &#xA;   &lt;td&gt;插画 漫画 小说 用户&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;排行榜&lt;/td&gt; &#xA;   &lt;td&gt;每日 每日R 每日男R 每日女 每日女R 每周 每周R 每周原创 每周新人 每月&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;新作品&lt;/td&gt; &#xA;   &lt;td&gt;所有人(插画 漫画 小说) 关注者(插画&amp;amp;漫画 小说 全部/公开/悄悄)&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;搜索(关键字 ID)&lt;/td&gt; &#xA;   &lt;td&gt;推荐标签 插画&amp;amp;漫画 小说 用户 排序&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;图片搜源&lt;/td&gt; &#xA;   &lt;td&gt;saucenao.com(未注册用户每日50次上线)&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;浏览作品&lt;/td&gt; &#xA;   &lt;td&gt;插画(包括动图)&amp;amp;漫画 小说&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;保存作品&lt;/td&gt; &#xA;   &lt;td&gt;插画(包括动图)&amp;amp;漫画 小说&lt;/td&gt; &#xA;   &lt;td&gt;待完善(小说)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;浏览用户&lt;/td&gt; &#xA;   &lt;td&gt;作品(插画 漫画 小说) 收藏(插画&amp;amp;漫画 小说) 关注 详细资料 粉丝(自己) 背景图&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;分享&lt;/td&gt; &#xA;   &lt;td&gt;插画 漫画 小说&lt;/td&gt; &#xA;   &lt;td&gt;除小说外已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;收藏 关注&lt;/td&gt; &#xA;   &lt;td&gt;插画&amp;amp;漫画 小说 用户&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;收藏自定义标签&lt;/td&gt; &#xA;   &lt;td&gt;长按收藏的那个&lt;/td&gt; &#xA;   &lt;td&gt;未完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;屏蔽标签&lt;/td&gt; &#xA;   &lt;td&gt;屏蔽之后将不会在出现在列表里(可在设置中取消)&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;多语言&lt;/td&gt; &#xA;   &lt;td&gt;简体中文 日本语 英语 俄语&lt;/td&gt; &#xA;   &lt;td&gt;未完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;主题&lt;/td&gt; &#xA;   &lt;td&gt;黑暗 明亮 跟随系统&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;多账号&lt;/td&gt; &#xA;   &lt;td&gt;登录多个账号 可切换&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;深度链接启动APP&lt;/td&gt; &#xA;   &lt;td&gt;插画 用户 浏览器登录&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;查看评论&lt;/td&gt; &#xA;   &lt;td&gt;查看作品的评论&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;发布评论&lt;/td&gt; &#xA;   &lt;td&gt;发布评论 回复评论 可删除自己的&lt;/td&gt; &#xA;   &lt;td&gt;待完善(表情贴图)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;修改个人资料&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;观看直播&lt;/td&gt; &#xA;   &lt;td&gt;免代理观看直播(&lt;a href=&#34;https://github.com/git-xiaocao/pixiv_live_proxy_server_dart&#34;&gt;pixiv_live_proxy_server_dart&lt;/a&gt;) 弹幕&lt;/td&gt; &#xA;   &lt;td&gt;待完善(弹幕)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;发弹幕&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;未完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;私信用户&lt;/td&gt; &#xA;   &lt;td&gt;私信用户 发送文字 发送图片 消息推送&lt;/td&gt; &#xA;   &lt;td&gt;未完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;本地反代&lt;/td&gt; &#xA;   &lt;td&gt;用来给WebView登录&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;发布作品&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;未完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pixivision&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;待考虑&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;导出账号数据&lt;/td&gt; &#xA;   &lt;td&gt;加密的 仅用于从剪切板登录(MIUI要给剪贴板权限)帮不会登录的人登录账号&lt;/td&gt; &#xA;   &lt;td&gt;已完成&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;注意 当前不是正式版本&lt;/h1&gt; &#xA;&lt;h2&gt;关于直连失效&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;与运营商有关&lt;/li&gt; &#xA; &lt;li&gt;与地区有关&lt;/li&gt; &#xA; &lt;li&gt;可能间歇性的失效&lt;/li&gt; &#xA; &lt;li&gt;如果无法直连请开代理&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;鸣谢&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=xiao-cao-x/pixiv_func_mobile&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢 &lt;a href=&#34;https://www.jetbrains.com/?from=xiao-cao-x/pixiv_func_mobile&#34;&gt;JetBrains&lt;/a&gt; 为开源项目提供的以下IDE的免费授权&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/?from=xiao-cao-x/pixiv_func_mobile&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/IntelliJ_IDEA.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/go/?from=xiao-cao-x/pixiv_func_mobile&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/GoLand.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/datagrip/?from=xiao-cao-x/pixiv_func_mobile&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/DataGrip.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dart-lang/linter</title>
    <updated>2022-08-18T01:37:29Z</updated>
    <id>tag:github.com,2022-08-18:/dart-lang/linter</id>
    <link href="https://github.com/dart-lang/linter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linter for Dart.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Linter for Dart&lt;/h1&gt; &#xA;&lt;p&gt;The Dart Linter package defines lint rules that identify and report on &#34;lints&#34; found in Dart code. Linting is performed by the Dart analysis server and the &lt;code&gt;dart analyze&lt;/code&gt; command in the &lt;a href=&#34;https://dart.dev/tools/dart-tool&#34;&gt;Dart command-line tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dart-lang.github.io/linter/lints/&#34;&gt;&lt;img src=&#34;https://dart-lang.github.io/linter/lints/count-badge.svg?sanitize=true&#34; alt=&#34;Lint Count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dart-lang/linter/actions&#34;&gt;&lt;img src=&#34;https://github.com/dart-lang/linter/workflows/linter/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/dart-lang/linter&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/dart-lang/linter/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/linter&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/v/linter.svg?sanitize=true&#34; alt=&#34;Pub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pub.dev/packages/linter/publisher&#34;&gt;&lt;img src=&#34;https://img.shields.io/pub/publisher/linter.svg?sanitize=true&#34; alt=&#34;package publisher&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The linter is bundled with the Dart &lt;a href=&#34;https://dart.dev/tools/sdk&#34;&gt;SDK&lt;/a&gt;; if you have an updated Dart SDK already, you&#39;re done!&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you want to contribute to the linter or examine the source, clone the &lt;code&gt;linter&lt;/code&gt; repo like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/dart-lang/linter.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The linter gives you feedback to help you catch potential errors and keep your code in line with the published &lt;a href=&#34;https://dart.dev/guides/language/effective-dart/style/&#34;&gt;Dart Style Guide&lt;/a&gt;. Enforceable lint rules (or &#34;lints&#34;) are cataloged &lt;a href=&#34;https://dart-lang.github.io/linter/lints/&#34;&gt;here&lt;/a&gt; and can be configured via an &lt;a href=&#34;https://dart.dev/guides/language/analysis-options#the-analysis-options-file&#34;&gt;analysis options file&lt;/a&gt;. The linter is run from within the &lt;code&gt;dart analyze&lt;/code&gt; &lt;a href=&#34;https://dart.dev/tools/dart-analyze&#34;&gt;command-line tool&lt;/a&gt; shipped with the Dart SDK. Assuming you have lints configured in an &lt;code&gt;analysis_options.yaml&lt;/code&gt; file at the root of your project with these contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;linter:&#xA;  rules:&#xA;    - annotate_overrides&#xA;    - hash_and_equals&#xA;    - prefer_is_not_empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you could lint your package like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dart analyze .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and see any violations of the &lt;code&gt;annotate_overrides&lt;/code&gt;, &lt;code&gt;hash_and_equals&lt;/code&gt;, and &lt;code&gt;prefer_is_not_empty&lt;/code&gt; rules in the console. To help you choose the rules you want to enable for your package, we have provided a &lt;a href=&#34;https://dart-lang.github.io/linter/lints/&#34;&gt;complete list of rules&lt;/a&gt; with lints recommended by the Dart team collected in &lt;a href=&#34;https://github.com/dart-lang/lints&#34;&gt;&lt;code&gt;package:lints&lt;/code&gt;&lt;/a&gt;. For the lints that are enforced internally at Google, see &lt;a href=&#34;https://github.com/dart-lang/pedantic/raw/master/lib/analysis_options.yaml&#34;&gt;&lt;code&gt;package:pedantic&lt;/code&gt;&lt;/a&gt;. Lints recommended for Flutter apps, packages, and plugins are documented in &lt;a href=&#34;https://github.com/flutter/packages/tree/main/packages/flutter_lints&#34;&gt;&lt;code&gt;package:flutter_lints&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a specific lint warning should be ignored, it can be flagged with a comment. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   // ignore: camel_case_types&#xA;   class whyOhWhy { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tells the Dart analyzer to ignore this instance of the &lt;code&gt;camel_case_types&lt;/code&gt; warning.&lt;/p&gt; &#xA;&lt;p&gt;End-of-line comments are supported as well. The following communicates the same thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;   class whyOhWhy { // ignore: camel_case_types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To ignore a rule for an entire file, use the &lt;code&gt;ignore_for_file&lt;/code&gt; comment flag. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dart&#34;&gt;// ignore_for_file: camel_case_types&#xA;&#xA;...&#xA;&#xA;class whyOhWhy { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tells the Dart analyzer to ignore all occurrences of the &lt;code&gt;camel_case_types&lt;/code&gt; warning in this file.&lt;/p&gt; &#xA;&lt;p&gt;As lints are treated the same as errors and warnings by the analyzer, their severity can similarly be configured in an options file. For example, an analysis options file that specifies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;linter:&#xA;  rules:&#xA;    - camel_case_types&#xA;analyzer:&#xA;  errors:&#xA;    camel_case_types: error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tells the analyzer to treat &lt;code&gt;camel_case_types&lt;/code&gt; lints as errors. For more on configuring analysis see the analysis option file &lt;a href=&#34;https://dart.dev/guides/language/analysis-options#the-analysis-options-file&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feedback is greatly appreciated and contributions are welcome! Please read the &lt;a href=&#34;https://raw.githubusercontent.com/dart-lang/linter/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;; mechanics of writing lints are covered &lt;a href=&#34;https://raw.githubusercontent.com/dart-lang/linter/main/doc/writing-lints.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features and bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file feature requests and bugs in the &lt;a href=&#34;https://github.com/dart-lang/linter/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>