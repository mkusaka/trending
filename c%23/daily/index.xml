<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-05T01:28:23Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>feiyun0112/Gradio.Net</title>
    <updated>2024-06-05T01:28:23Z</updated>
    <id>tag:github.com,2024-06-05:/feiyun0112/Gradio.Net</id>
    <link href="https://github.com/feiyun0112/Gradio.Net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gradio for .NET ‚Äì a port of Gradio, an open-source Python package that allows you to quickly build a demo or web application for your machine learning model, API, or any arbitrary Python function. Gradio for .NET ‚Äì Âü∫‰∫é Gradio ÁöÑ .NET ÁßªÊ§çÔºåGradio ÊòØ‰∏Ä‰∏™ÂºÄÊ∫ê Python ÂåÖÔºåÂÖÅËÆ∏‰Ω†‰∏∫Êú∫Âô®Â≠¶‰π†Ê®°Âûã„ÄÅAPI Êàñ‰ªª‰Ωï‰ªªÊÑè Python ÂáΩÊï∞Âø´ÈÄüÊûÑÂª∫ÊºîÁ§∫Êàñ Web Â∫îÁî®Á®ãÂ∫è„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gradio.NET: Build Machine Learning Web Apps ‚Äî in .NET &lt;a href=&#34;https://github.com/feiyun0112/Gradio.Net/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/feiyun0112/Gradio.Net/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuget.org/packages/Gradio.Net&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Gradio.Net.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/README_zh-cn.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gradio for .NET ‚Äì a port of &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;, an open-source Python package that allows you to quickly &lt;strong&gt;build&lt;/strong&gt; a demo or web application for your machine learning model, API, or any arbitrary Python function. &lt;em&gt;No JavaScript, CSS, or web hosting experience needed!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It just takes a few lines of .NET code to create a beautiful demo like the one above, so let&#39;s get started üí´&lt;/p&gt; &#xA;&lt;h3&gt;Building Your First Demo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Create a ASP.NET Core Web API project.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;Install NuGet package &lt;strong&gt;Gradio.Net&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;Enter the sample code in Program.cs:&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;App.Launch(await CreateBlocks());&#xA;&#xA;async Task&amp;lt;Blocks&amp;gt; CreateBlocks()&#xA;{&#xA;    using (var blocks = gr.Blocks())&#xA;    {&#xA;        gr.Markdown(&#34;Start typing below and then click **Run** to see the output.&#34;);&#xA;        Textbox input, output;&#xA;        using (gr.Row())&#xA;        {&#xA;            input = gr.Textbox(placeholder: &#34;What is your name?&#34;);&#xA;            output = gr.Textbox();&#xA;        }&#xA;        var btn = gr.Button(&#34;Run&#34;);&#xA;        await btn.Click(fn: async (input) =&amp;gt; gr.Output($&#34;Welcome to Gradio.Net, {Textbox.Payload(input.Data[0])}!&#34;), inputs: new[] { input }, outputs: new[] { output });&#xA;&#xA;        return blocks;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s Allüéâüéâüéâ&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you wan to use &lt;strong&gt;Gradio.Net&lt;/strong&gt; in exists project&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;AddGradio&lt;/code&gt; and &lt;code&gt;UseGradio&lt;/code&gt; extension methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;var builder = WebApplication.CreateBuilder(args);&#xA;builder.Services.AddGradio();&#xA;&#xA;var app = builder.Build();&#xA;&#xA;app.UseGradio(await CreateBlocks());&#xA;&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Demos&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Source Code&lt;/th&gt; &#xA;   &lt;th&gt;Demo Image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/layout_demo.md&#34;&gt;Layout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/layout_demo.gif&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/form_demo.md&#34;&gt;Form&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/form_demo.gif&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/image_demo.md&#34;&gt;Image&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/image_demo.gif&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/chatbot_demo.md&#34;&gt;Chatbot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/chatbot_demo.gif&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/progress_demo.md&#34;&gt;Progress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/feiyun0112/Gradio.Net/main/readme_files/progress_demo.gif&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>Cysharp/ConsoleAppFramework</title>
    <updated>2024-06-05T01:28:23Z</updated>
    <id>tag:github.com,2024-06-05:/Cysharp/ConsoleAppFramework</id>
    <link href="https://github.com/Cysharp/ConsoleAppFramework" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero Dependency, Zero Overhead, Zero Reflection, Zero Allocation, AOT Safe CLI Framework powered by C# Source Generator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ConsoleAppFramework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Cysharp/ConsoleAppFramework/actions&#34;&gt;&lt;img src=&#34;https://github.com/Cysharp/ConsoleAppFramework/workflows/Build-Debug/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cysharp/ConsoleAppFramework/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Cysharp/ConsoleAppFramework.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ConsoleAppFramework v5 is Zero Dependency, Zero Overhead, Zero Reflection, Zero Allocation, AOT Safe CLI Framework powered by C# Source Generator; achieves exceptionally high performance and minimal binary size. Leveraging the latest features of .NET 8 and C# 12 (&lt;a href=&#34;https://github.com/dotnet/roslyn/raw/main/docs/features/incremental-generators.md&#34;&gt;IncrementalGenerator&lt;/a&gt;, &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/function-pointers#function-pointers-1&#34;&gt;managed function pointer&lt;/a&gt;, &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#input-parameters-of-a-lambda-expression&#34;&gt;params arrays and default values lambda expression&lt;/a&gt;, &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.ispanparsable-1&#34;&gt;&lt;code&gt;ISpanParsable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.posixsignalregistration&#34;&gt;&lt;code&gt;PosixSignalRegistration&lt;/code&gt;&lt;/a&gt;, etc.), this library ensures maximum performance while maintaining flexibility and extensibility.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Cysharp/ConsoleAppFramework/assets/46207/db4bf599-9fe0-4ce4-801f-0003f44d5628&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Set &lt;code&gt;RunStrategy=ColdStart WarmupCount=0&lt;/code&gt; to calculate the cold start benchmark, which is suitable for CLI application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The magical performance is achieved by statically generating everything and parsing inline. Let&#39;s take a look at a minimal example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using ConsoleAppFramework;&#xA;&#xA;// args: ./cmd --foo 10 --bar 20&#xA;ConsoleApp.Run(args, (int foo, int bar) =&amp;gt; Console.WriteLine($&#34;Sum: {foo + bar}&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike typical Source Generators that use attributes as keys for generation, ConsoleAppFramework analyzes the provided lambda expressions or method references and generates the actual code body of the Run method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;namespace ConsoleAppFramework;&#xA;&#xA;internal static partial class ConsoleApp&#xA;{&#xA;    public static void Run(string[] args, Action&amp;lt;int, int&amp;gt; command)&#xA;    {&#xA;        if (TryShowHelpOrVersion(args, 2, -1)) return;&#xA;&#xA;        var arg0 = default(int);&#xA;        var arg0Parsed = false;&#xA;        var arg1 = default(int);&#xA;        var arg1Parsed = false;&#xA;&#xA;        try&#xA;        {&#xA;            for (int i = 0; i &amp;lt; args.Length; i++)&#xA;            {&#xA;                var name = args[i];&#xA;&#xA;                switch (name)&#xA;                {&#xA;                    case &#34;--foo&#34;:&#xA;                    {&#xA;                        if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg0)) { ThrowArgumentParseFailed(&#34;foo&#34;, args[i]); }&#xA;                        arg0Parsed = true;&#xA;                        break;&#xA;                    }&#xA;                    case &#34;--bar&#34;:&#xA;                    {&#xA;                        if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg1)) { ThrowArgumentParseFailed(&#34;bar&#34;, args[i]); }&#xA;                        arg1Parsed = true;&#xA;                        break;&#xA;                    }&#xA;                    default:&#xA;                        if (string.Equals(name, &#34;--foo&#34;, StringComparison.OrdinalIgnoreCase))&#xA;                        {&#xA;                            if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg0)) { ThrowArgumentParseFailed(&#34;foo&#34;, args[i]); }&#xA;                            arg0Parsed = true;&#xA;                            break;&#xA;                        }&#xA;                        if (string.Equals(name, &#34;--bar&#34;, StringComparison.OrdinalIgnoreCase))&#xA;                        {&#xA;                            if (!TryIncrementIndex(ref i, args.Length) || !int.TryParse(args[i], out arg1)) { ThrowArgumentParseFailed(&#34;bar&#34;, args[i]); }&#xA;                            arg1Parsed = true;&#xA;                            break;&#xA;                        }&#xA;                        ThrowArgumentNameNotFound(name);&#xA;                        break;&#xA;                }&#xA;            }&#xA;            if (!arg0Parsed) ThrowRequiredArgumentNotParsed(&#34;foo&#34;);&#xA;            if (!arg1Parsed) ThrowRequiredArgumentNotParsed(&#34;bar&#34;);&#xA;&#xA;            command(arg0!, arg1!);&#xA;        }&#xA;        catch (Exception ex)&#xA;        {&#xA;            Environment.ExitCode = 1;&#xA;            if (ex is ValidationException)&#xA;            {&#xA;                LogError(ex.Message);&#xA;            }&#xA;            else&#xA;            {&#xA;                LogError(ex.ToString());&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    [MethodImpl(MethodImplOptions.AggressiveInlining)]&#xA;    static bool TryIncrementIndex(ref int index, int length)&#xA;    {&#xA;        if (index &amp;lt; length)&#xA;        {&#xA;            index++;&#xA;            return true;&#xA;        }&#xA;        return false;&#xA;    }&#xA;&#xA;    static partial void ShowHelp(int helpId)&#xA;    {&#xA;        Log(&#34;&#34;&#34;&#xA;Usage: [options...] [-h|--help] [--version]&#xA;&#xA;Options:&#xA;  --foo &amp;lt;int&amp;gt;     (Required)&#xA;  --bar &amp;lt;int&amp;gt;     (Required)&#xA;&#34;&#34;&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the code is straightforward and simple, making it easy to imagine the execution cost of the framework portion. That&#39;s right, it&#39;s zero. This technique was influenced by Rust&#39;s macros. Rust has &lt;a href=&#34;https://doc.rust-lang.org/book/ch19-06-macros.html&#34;&gt;Attribute-like macros and Function-like macros&lt;/a&gt;, and ConsoleAppFramework&#39;s generation can be considered as Function-like macros.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;ConsoleApp&lt;/code&gt; class, along with everything else, is generated entirely by the Source Generator, resulting in no dependencies, including ConsoleAppFramework itself. This characteristic should contribute to the small assembly size and ease of handling, including support for Native AOT.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, CLI applications typically involve single-shot execution from a cold start. As a result, common optimization techniques such as dynamic code generation (IL Emit, ExpressionTree.Compile) and caching (ArrayPool) do not work effectively. ConsoleAppFramework generates everything statically in advance, achieving performance equivalent to optimized hand-written code without reflection or boxing.&lt;/p&gt; &#xA;&lt;p&gt;ConsoleAppFramework offers a rich set of features as a framework. The Source Generator analyzes which modules are being used and generates the minimal code necessary to implement the desired functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SIGINT/SIGTERM(Ctrl+C) handling with gracefully shutdown via &lt;code&gt;CancellationToken&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Filter(middleware) pipeline to intercept before/after execution&lt;/li&gt; &#xA; &lt;li&gt;Exit code management&lt;/li&gt; &#xA; &lt;li&gt;Support for async commands&lt;/li&gt; &#xA; &lt;li&gt;Registration of multiple commands&lt;/li&gt; &#xA; &lt;li&gt;Registration of nested commands&lt;/li&gt; &#xA; &lt;li&gt;Setting option aliases and descriptions from code document comment&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;System.ComponentModel.DataAnnotations&lt;/code&gt; attribute-based Validation&lt;/li&gt; &#xA; &lt;li&gt;Dependency Injection for command registration by type and public methods&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Microsoft.Extensions&lt;/code&gt;(Logging, Configuration, etc...) integration&lt;/li&gt; &#xA; &lt;li&gt;High performance value parsing via &lt;code&gt;ISpanParsable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Parsing of params arrays&lt;/li&gt; &#xA; &lt;li&gt;Parsing of JSON arguments&lt;/li&gt; &#xA; &lt;li&gt;Help(&lt;code&gt;-h|--help&lt;/code&gt;) option builder&lt;/li&gt; &#xA; &lt;li&gt;Default show version(&lt;code&gt;--version&lt;/code&gt;) option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see from the generated output, the help display is also fast. In typical frameworks, the help string is constructed after the help invocation. However, in ConsoleAppFramework, the help is embedded as string constants, achieving the absolute maximum performance that cannot be surpassed!&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This library is distributed via NuGet, minimal requirement is .NET 8 and C# 12.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PM&amp;gt; Install-Package &lt;a href=&#34;https://www.nuget.org/packages/ConsoleAppFramework&#34;&gt;ConsoleAppFramework&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;ConsoleAppFramework is an analyzer (Source Generator) and does not have any dll references. When referenced, the entry point class &lt;code&gt;ConsoleAppFramework.ConsoleApp&lt;/code&gt; is generated internally.&lt;/p&gt; &#xA;&lt;p&gt;The first argument of &lt;code&gt;Run&lt;/code&gt; or &lt;code&gt;RunAsync&lt;/code&gt; can be &lt;code&gt;string[] args&lt;/code&gt;, and the second argument can be any lambda expression, method, or function reference. Based on the content of the second argument, the corresponding function is automatically generated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using ConsoleAppFramework;&#xA;&#xA;ConsoleApp.Run(args, (string name) =&amp;gt; Console.WriteLine($&#34;Hello {name}&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can execute command like &lt;code&gt;sampletool --name &#34;foo&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The return value can be &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;Task&lt;/code&gt;, or &lt;code&gt;Task&amp;lt;int&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If an &lt;code&gt;int&lt;/code&gt; is returned, that value will be set to &lt;code&gt;Environment.ExitCode&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;By default, option argument names are converted to &lt;code&gt;--lower-kebab-case&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, &lt;code&gt;jsonValue&lt;/code&gt; becomes &lt;code&gt;--json-value&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Option argument names are case-insensitive, but lower-case matches faster&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When passing a method, you can write it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ConsoleApp.Run(args, Sum);&#xA;&#xA;void Sum(int x, int y) =&amp;gt; Console.Write(x + y);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, for static functions, you can pass them as function pointers. In that case, the managed function pointer arguments will be generated, resulting in maximum performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;unsafe&#xA;{&#xA;    ConsoleApp.Run(args, &amp;amp;Sum);&#xA;}&#xA;&#xA;static void Sum(int x, int y) =&amp;gt; Console.Write(x + y);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static unsafe void Run(string[] args, delegate* managed&amp;lt;int, int, void&amp;gt; command)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unfortunately, currently &lt;a href=&#34;https://github.com/dotnet/csharplang/discussions/6746&#34;&gt;static lambdas cannot be assigned to function pointers&lt;/a&gt;, so defining a named function is necessary.&lt;/p&gt; &#xA;&lt;p&gt;When defining an asynchronous method using a lambda expression, the &lt;code&gt;async&lt;/code&gt; keyword is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// --foo, --bar&#xA;await ConsoleApp.RunAsync(args, async (int foo, int bar, CancellationToken cancellationToken) =&amp;gt;&#xA;{&#xA;    await Task.Delay(TimeSpan.FromSeconds(5), cancellationToken);&#xA;    Console.WriteLine($&#34;Sum: {foo + bar}&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use either the &lt;code&gt;Run&lt;/code&gt; or &lt;code&gt;RunAsync&lt;/code&gt; method for invocation. It is optional to use &lt;code&gt;CancellationToken&lt;/code&gt; as an argument. This becomes a special parameter and is excluded from the command options. Internally, it uses &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.posixsignalregistration&#34;&gt;&lt;code&gt;PosixSignalRegistration&lt;/code&gt;&lt;/a&gt; to handle &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGTERM&lt;/code&gt;, and &lt;code&gt;SIGKILL&lt;/code&gt;. When these signals are invoked (e.g., Ctrl+C), the CancellationToken is set to CancellationRequested. If &lt;code&gt;CancellationToken&lt;/code&gt; is not used as an argument, these signals will not be handled, and the program will terminate immediately. For more details, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/ConsoleAppFramework/master/#cancellationtokengracefully-shutdown-and-timeout&#34;&gt;CancellationToken and Gracefully Shutdown&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Option aliases and Help, Version&lt;/h2&gt; &#xA;&lt;p&gt;By default, if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is provided, or if no arguments are passed, the help display will be invoked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ConsoleApp.Run(args, (string message) =&amp;gt; Console.Write($&#34;Hello, {message}&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Usage: [options...] [-h|--help] [--version]&#xA;&#xA;Options:&#xA;  --message &amp;lt;string&amp;gt;     (Required)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In ConsoleAppFramework, instead of using attributes, you can provide descriptions and aliases for functions by writing Document Comments. This avoids the common issue in frameworks where arguments become cluttered with attributes, making the code difficult to read. With this approach, a natural writing style is achieved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ConsoleApp.Run(args, Commands.Hello);&#xA;&#xA;static class Commands&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// Display Hello.&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&#34;message&#34;&amp;gt;-m, Message to show.&amp;lt;/param&amp;gt;&#xA;    public static void Hello(string message) =&amp;gt; Console.Write($&#34;Hello, {message}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Usage: [options...] [-h|--help] [--version]&#xA;&#xA;Display Hello.&#xA;&#xA;Options:&#xA;  -m|--message &amp;lt;string&amp;gt;    Message to show. (Required)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add aliases to parameters, list the aliases separated by &lt;code&gt;|&lt;/code&gt; before the comma in the comment. For example, if you write a comment like &lt;code&gt;-a|-b|--abcde, Description.&lt;/code&gt;, then &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-b&lt;/code&gt;, and &lt;code&gt;--abcde&lt;/code&gt; will be treated as aliases, and &lt;code&gt;Description.&lt;/code&gt; will be the description.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, due to current C# specifications, lambda expressions and &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/2110&#34;&gt;local functions do not support document comments&lt;/a&gt;, so a class is required.&lt;/p&gt; &#xA;&lt;p&gt;In addition to &lt;code&gt;-h|--help&lt;/code&gt;, there is another special built-in option: &lt;code&gt;--version&lt;/code&gt;. This displays the &lt;code&gt;AssemblyInformationalVersion&lt;/code&gt; or &lt;code&gt;AssemblyVersion&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command&lt;/h2&gt; &#xA;&lt;p&gt;If you want to register multiple commands or perform complex operations (such as adding filters), instead of using &lt;code&gt;Run/RunAsync&lt;/code&gt;, obtain the &lt;code&gt;ConsoleAppBuilder&lt;/code&gt; using &lt;code&gt;ConsoleApp.Create()&lt;/code&gt;. Call &lt;code&gt;Add&lt;/code&gt;, &lt;code&gt;Add&amp;lt;T&amp;gt;&lt;/code&gt;, or &lt;code&gt;UseFilter&amp;lt;T&amp;gt;&lt;/code&gt; multiple times on the &lt;code&gt;ConsoleAppBuilder&lt;/code&gt; to register commands and filters, and finally execute the application using &lt;code&gt;Run&lt;/code&gt; or &lt;code&gt;RunAsync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;&#xA;app.Add(&#34;&#34;, (string msg) =&amp;gt; Console.WriteLine(msg));&#xA;app.Add(&#34;echo&#34;, (string msg) =&amp;gt; Console.WriteLine(msg));&#xA;app.Add(&#34;sum&#34;, (int x, int y) =&amp;gt; Console.WriteLine(x + y));&#xA;&#xA;// --msg&#xA;// echo --msg&#xA;// sum --x --y&#xA;app.Run(args);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument of &lt;code&gt;Add&lt;/code&gt; is the command name. If you specify an empty string &lt;code&gt;&#34;&#34;&lt;/code&gt;, it becomes the root command. Unlike parameters, command names are case-sensitive and cannot have multiple names.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;Add&amp;lt;T&amp;gt;&lt;/code&gt;, you can add multiple commands at once using a class-based approach, where public methods are treated as commands. If you want to write document comments for multiple commands, this approach allows for cleaner code, so it is recommended. Additionally, as mentioned later, you can also write clean code for Dependency Injection (DI) using constructor injection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;app.Add&amp;lt;MyCommands&amp;gt;();&#xA;app.Run(args);&#xA;&#xA;public class MyCommands&#xA;{&#xA;    /// &amp;lt;summary&amp;gt;Root command test.&amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&#34;msg&#34;&amp;gt;-m, Message to show.&amp;lt;/param&amp;gt;&#xA;    [Command(&#34;&#34;)]&#xA;    public void Root(string msg) =&amp;gt; Console.WriteLine(msg);&#xA;&#xA;    /// &amp;lt;summary&amp;gt;Display message.&amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&#34;msg&#34;&amp;gt;Message to show.&amp;lt;/param&amp;gt;&#xA;    public void Echo(string msg) =&amp;gt; Console.WriteLine(msg);&#xA;&#xA;    /// &amp;lt;summary&amp;gt;Sum parameters.&amp;lt;/summary&amp;gt;&#xA;    /// &amp;lt;param name=&#34;x&#34;&amp;gt;left value.&amp;lt;/param&amp;gt;&#xA;    /// &amp;lt;param name=&#34;y&#34;&amp;gt;right value.&amp;lt;/param&amp;gt;&#xA;    public void Sum(int x, int y) =&amp;gt; Console.WriteLine(x + y);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you check the registered commands with &lt;code&gt;--help&lt;/code&gt;, it will look like this. Note that you can register multiple &lt;code&gt;Add&amp;lt;T&amp;gt;&lt;/code&gt; and also add commands using &lt;code&gt;Add&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Usage: [command] [options...] [-h|--help] [--version]&#xA;&#xA;Root command test.&#xA;&#xA;Options:&#xA;  -m|--msg &amp;lt;string&amp;gt;    Message to show. (Required)&#xA;&#xA;Commands:&#xA;  echo    Display message.&#xA;  sum     Sum parameters.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the command name is derived from the method name converted to &lt;code&gt;lower-kebab-case&lt;/code&gt;. However, you can change the name to any desired value using the &lt;code&gt;[Command(string commandName)]&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;p&gt;If the class implements &lt;code&gt;IDisposable&lt;/code&gt; or &lt;code&gt;IAsyncDisposable&lt;/code&gt;, the Dispose or DisposeAsync method will be called after the command execution.&lt;/p&gt; &#xA;&lt;h3&gt;Nested command&lt;/h3&gt; &#xA;&lt;p&gt;You can create a deep command hierarchy by adding commands with paths separated by space(&lt;code&gt; &lt;/code&gt;) when registering them. This allows you to add commands at nested levels.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;&#xA;app.Add(&#34;foo&#34;, () =&amp;gt; { });&#xA;app.Add(&#34;foo bar&#34;, () =&amp;gt; { });&#xA;app.Add(&#34;foo bar barbaz&#34;, () =&amp;gt; { });&#xA;app.Add(&#34;foo baz&#34;, () =&amp;gt; { });&#xA;&#xA;// Commands:&#xA;//   foo&#xA;//   foo bar&#xA;//   foo bar barbaz&#xA;//   foo baz&#xA;app.Run(args);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Add&amp;lt;T&amp;gt;&lt;/code&gt; can also add commands to a hierarchy by passing a &lt;code&gt;string commandPath&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;app.Add&amp;lt;MyCommands&amp;gt;(&#34;foo&#34;);&#xA;&#xA;// Commands:&#xA;//  foo         Root command test.&#xA;//  foo echo    Display message.&#xA;//  foo sum     Sum parameters.&#xA;app.Run(args);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performance of Commands&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;ConsoleAppFramework&lt;/code&gt;, the number and types of registered commands are statically determined at compile time. For example, let&#39;s register the following four commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.Add(&#34;foo&#34;, () =&amp;gt; { });&#xA;app.Add(&#34;foo bar&#34;, (int x, int y) =&amp;gt; { });&#xA;app.Add(&#34;foo bar barbaz&#34;, (DateTime dateTime) =&amp;gt; { });&#xA;app.Add(&#34;foo baz&#34;, async (string foo = &#34;test&#34;, CancellationToken cancellationToken = default) =&amp;gt; { });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Source Generator generates four fields and holds them with specific types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;partial struct ConsoleAppBuilder&#xA;{&#xA;    Action command0 = default!;&#xA;    Action&amp;lt;int, int&amp;gt; command1 = default!;&#xA;    Action&amp;lt;global::System.DateTime&amp;gt; command2 = default!;&#xA;    Func&amp;lt;string, global::System.Threading.CancellationToken, Task&amp;gt; command3 = default!;&#xA;&#xA;    partial void AddCore(string commandName, Delegate command)&#xA;    {&#xA;        switch (commandName)&#xA;        {&#xA;            case &#34;foo&#34;:&#xA;                this.command0 = Unsafe.As&amp;lt;Action&amp;gt;(command);&#xA;                break;&#xA;            case &#34;foo bar&#34;:&#xA;                this.command1 = Unsafe.As&amp;lt;Action&amp;lt;int, int&amp;gt;&amp;gt;(command);&#xA;                break;&#xA;            case &#34;foo bar barbaz&#34;:&#xA;                this.command2 = Unsafe.As&amp;lt;Action&amp;lt;global::System.DateTime&amp;gt;&amp;gt;(command);&#xA;                break;&#xA;            case &#34;foo baz&#34;:&#xA;                this.command3 = Unsafe.As&amp;lt;Func&amp;lt;string, global::System.Threading.CancellationToken, Task&amp;gt;&amp;gt;(command);&#xA;                break;&#xA;            default:&#xA;                break;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This ensures the fastest execution speed without any additional unnecessary allocations such as arrays and without any boxing since it holds static delegate types.&lt;/p&gt; &#xA;&lt;p&gt;Command routing also generates a switch of nested string constants.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;partial void RunCore(string[] args)&#xA;{&#xA;    if (args.Length == 0)&#xA;    {&#xA;        ShowHelp(-1);&#xA;        return;&#xA;    }&#xA;    switch (args[0])&#xA;    {&#xA;        case &#34;foo&#34;:&#xA;            if (args.Length == 1)&#xA;            {&#xA;                RunCommand0(args, args.AsSpan(1), command0);&#xA;                return;&#xA;            }&#xA;            switch (args[1])&#xA;            {&#xA;                case &#34;bar&#34;:&#xA;                    if (args.Length == 2)&#xA;                    {&#xA;                        RunCommand1(args, args.AsSpan(2), command1);&#xA;                        return;&#xA;                    }&#xA;                    switch (args[2])&#xA;                    {&#xA;                        case &#34;barbaz&#34;:&#xA;                            RunCommand2(args, args.AsSpan(3), command2);&#xA;                            break;&#xA;                        default:&#xA;                            RunCommand1(args, args.AsSpan(2), command1);&#xA;                            break;&#xA;                    }&#xA;                    break;&#xA;                case &#34;baz&#34;:&#xA;                    RunCommand3(args, args.AsSpan(2), command3);&#xA;                    break;&#xA;                default:&#xA;                    RunCommand0(args, args.AsSpan(1), command0);&#xA;                    break;&#xA;            }&#xA;            break;&#xA;        default:&#xA;            ShowHelp(-1);&#xA;            break;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The C# compiler performs complex generation for string constant switches, making them extremely fast, and it would be difficult to achieve faster routing than this.&lt;/p&gt; &#xA;&lt;h2&gt;Parse and Value Binding&lt;/h2&gt; &#xA;&lt;p&gt;The method parameter names and types determine how to parse and bind values from the command-line arguments. When using lambda expressions, optional values and &lt;code&gt;params&lt;/code&gt; arrays supported from C# 12 are also supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ConsoleApp.Run(args, (&#xA;    [Argument]DateTime dateTime,  // Argument&#xA;    [Argument]Guid guidvalue,     // &#xA;    int intVar,                   // required&#xA;    bool boolFlag,                // flag&#xA;    MyEnum enumValue,             // enum&#xA;    int[] array,                  // array&#xA;    MyClass obj,                  // object&#xA;    string optional = &#34;abcde&#34;,    // optional&#xA;    double? nullableValue = null, // nullable&#xA;    params string[] paramsArray   // params&#xA;    ) =&amp;gt; { });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;ConsoleApp.Run&lt;/code&gt;, you can check the syntax of the command line in the tooltip to see how it is generated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Cysharp/ConsoleAppFramework/assets/46207/af480566-adac-4767-bd5e-af89ab6d71f1&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the rules on converting parameter names to option names, aliases, and how to set documentation, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/ConsoleAppFramework/master/#option-aliases-and-help-version&#34;&gt;Option aliases&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Parameters marked with the &lt;code&gt;[Argument]&lt;/code&gt; attribute receive values in order without parameter names. This attribute can only be set on sequential parameters from the beginning.&lt;/p&gt; &#xA;&lt;p&gt;To convert from string arguments to various types, basic primitive types (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;) use &lt;code&gt;TryParse&lt;/code&gt;. For types that implement &lt;code&gt;ISpanParsable&amp;lt;T&amp;gt;&lt;/code&gt; (&lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;DateTimeOffset&lt;/code&gt;, &lt;code&gt;Guid&lt;/code&gt;, &lt;code&gt;BigInteger&lt;/code&gt;, &lt;code&gt;Complex&lt;/code&gt;, &lt;code&gt;Half&lt;/code&gt;, &lt;code&gt;Int128&lt;/code&gt;, etc.), &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.iparsable-1.tryparse?view=net-8.0#system-ispanparsable-1-tryparse(system-readonlyspan((system-char))-system-iformatprovider-0@)&#34;&gt;IParsable&#xA;  &lt;tself&gt;&#xA;   .TryParse&#xA;  &lt;/tself&gt;&lt;/a&gt; or &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.ispanparsable-1.tryparse?view=net-8.0#system-ispanparsable-1-tryparse(system-readonlyspan((system-char))-system-iformatprovider-0@)&#34;&gt;ISpanParsable&#xA;  &lt;tself&gt;&#xA;   .TryParse&#xA;  &lt;/tself&gt;&lt;/a&gt; is used.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;enum&lt;/code&gt;, it is parsed using &lt;code&gt;Enum.TryParse(ignoreCase: true)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;bool&lt;/code&gt; is treated as a flag and is always optional. It becomes &lt;code&gt;true&lt;/code&gt; when the parameter name is passed.&lt;/p&gt; &#xA;&lt;h3&gt;Array&lt;/h3&gt; &#xA;&lt;p&gt;Array parsing has three special patterns.&lt;/p&gt; &#xA;&lt;p&gt;For a regular &lt;code&gt;T[]&lt;/code&gt;, if the value starts with &lt;code&gt;[&lt;/code&gt;, it is parsed using &lt;code&gt;JsonSerialzier.Deserialize&lt;/code&gt;. Otherwise, it is parsed as comma-separated values. For example, &lt;code&gt;[1,2,3]&lt;/code&gt; or &lt;code&gt;1,2,3&lt;/code&gt; are allowed as values. To set an empty array, pass &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;params T[]&lt;/code&gt;, all subsequent arguments become the values of the array. For example, if there is an input like &lt;code&gt;--paramsArray foo bar baz&lt;/code&gt;, it will be bound to a value like &lt;code&gt;[&#34;foo&#34;, &#34;bar&#34;, &#34;baz&#34;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Object&lt;/h3&gt; &#xA;&lt;p&gt;If none of the above cases apply, &lt;code&gt;JsonSerializer.Deserialize&amp;lt;T&amp;gt;&lt;/code&gt; is used to perform binding as JSON. However, &lt;code&gt;CancellationToken&lt;/code&gt; and &lt;code&gt;ConsoleAppContext&lt;/code&gt; are treated as special types and excluded from binding. Also, parameters with the &lt;code&gt;[FromServices]&lt;/code&gt; attribute are not subject to binding.&lt;/p&gt; &#xA;&lt;p&gt;If you want to change the deserialization options, you can set &lt;code&gt;JsonSerializerOptions&lt;/code&gt; to &lt;code&gt;ConsoleApp.JsonSerializerOptions&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Value Converter&lt;/h3&gt; &#xA;&lt;p&gt;To perform custom binding to existing types that do not support &lt;code&gt;ISpanParsable&amp;lt;T&amp;gt;&lt;/code&gt;, you can create and set up a custom parser. For example, if you want to pass &lt;code&gt;System.Numerics.Vector3&lt;/code&gt; as a comma-separated string like &lt;code&gt;1.3,4.12,5.947&lt;/code&gt; and parse it, you can create an &lt;code&gt;Attribute&lt;/code&gt; with &lt;code&gt;AttributeTargets.Parameter&lt;/code&gt; that implements &lt;code&gt;IArgumentParser&amp;lt;T&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;static bool TryParse(ReadOnlySpan&amp;lt;char&amp;gt; s, out Vector3 result)&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[AttributeUsage(AttributeTargets.Parameter)]&#xA;public class Vector3ParserAttribute : Attribute, IArgumentParser&amp;lt;Vector3&amp;gt;&#xA;{&#xA;    public static bool TryParse(ReadOnlySpan&amp;lt;char&amp;gt; s, out Vector3 result)&#xA;    {&#xA;        Span&amp;lt;Range&amp;gt; ranges = stackalloc Range[3];&#xA;        var splitCount = s.Split(ranges, &#39;,&#39;);&#xA;        if (splitCount != 3)&#xA;        {&#xA;            result = default;&#xA;            return false;&#xA;        }&#xA;&#xA;        float x;&#xA;        float y;&#xA;        float z;&#xA;        if (float.TryParse(s[ranges[0]], out x) &amp;amp;&amp;amp; float.TryParse(s[ranges[1]], out y) &amp;amp;&amp;amp; float.TryParse(s[ranges[2]], out z))&#xA;        {&#xA;            result = new Vector3(x, y, z);&#xA;            return true;&#xA;        }&#xA;&#xA;        result = default;&#xA;        return false;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By setting this attribute on a parameter, the custom parser will be called when parsing the args.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ConsoleApp.Run(args, ([Vector3Parser] Vector3 position) =&amp;gt; Console.WriteLine(position));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Syntax Parsing Policy and Performance&lt;/h3&gt; &#xA;&lt;p&gt;While there are some standards for command-line arguments, such as UNIX tools and POSIX, there is no absolute specification. The &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/commandline/syntax&#34;&gt;Command-line syntax overview for System.CommandLine&lt;/a&gt; provides an explanation of the specifications adopted by System.CommandLine. However, ConsoleAppFramework, while referring to these specifications to some extent, does not necessarily aim to fully comply with them.&lt;/p&gt; &#xA;&lt;p&gt;For example, specifications that change behavior based on &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;-X&lt;/code&gt; or allow bundling &lt;code&gt;-f -d -x&lt;/code&gt; as &lt;code&gt;-fdx&lt;/code&gt; are not easy to understand and also take time to parse. The poor performance of System.CommandLine may be influenced by its adherence to complex grammar. Therefore, ConsoleAppFramework prioritizes performance and clear rules. It uses lower-kebab-case as the basis while allowing case-insensitive matching. It does not support ambiguous grammar that cannot be processed in a single pass or takes time to parse.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/command-line-api/issues/2338&#34;&gt;System.CommandLine seems to be aiming for a new direction in .NET 9 and .NET 10&lt;/a&gt;, but from a performance perspective, it will never surpass ConsoleAppFramework.&lt;/p&gt; &#xA;&lt;h2&gt;CancellationToken(Gracefully Shutdown) and Timeout&lt;/h2&gt; &#xA;&lt;p&gt;In ConsoleAppFramework, when you pass a &lt;code&gt;CancellationToken&lt;/code&gt; as an argument, it can be used to check for interruption commands (SIGINT/SIGTERM/SIGKILL - Ctrl+C) rather than being treated as a parameter. For handling this, ConsoleAppFramework performs special code generation when a &lt;code&gt;CancellationToken&lt;/code&gt; is included in the parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using var posixSignalHandler = PosixSignalHandler.Register(ConsoleApp.Timeout);&#xA;var arg0 = posixSignalHandler.Token;&#xA;&#xA;await Task.Run(() =&amp;gt; command(arg0!)).WaitAsync(posixSignalHandler.TimeoutToken);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a CancellationToken is not passed, the application is immediately forced to terminate when an interruption command (Ctrl+C) is received. However, if a CancellationToken is present, it internally uses &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.posixsignalregistration&#34;&gt;&lt;code&gt;PosixSignalRegistration&lt;/code&gt;&lt;/a&gt; to hook SIGINT/SIGTERM/SIGKILL and sets the CancellationToken to a canceled state. Additionally, it prevents forced termination to allow for a graceful shutdown.&lt;/p&gt; &#xA;&lt;p&gt;If the CancellationToken is handled correctly, the application can perform proper termination processing based on the application&#39;s handling. However, if the CancellationToken is mishandled, the application may not terminate even when an interruption command is received. To avoid this, a timeout timer starts after the interruption command, and the application is forcibly terminated again after the specified time.&lt;/p&gt; &#xA;&lt;p&gt;The default timeout is 5 seconds, but it can be changed using &lt;code&gt;ConsoleApp.Timeout&lt;/code&gt;. For example, setting it to &lt;code&gt;ConsoleApp.Timeout = Timeout.InfiniteTimeSpan;&lt;/code&gt; disables the forced termination caused by the timeout.&lt;/p&gt; &#xA;&lt;p&gt;The hooking behavior using &lt;code&gt;PosixSignalRegistration&lt;/code&gt; is determined by the presence of a &lt;code&gt;CancellationToken&lt;/code&gt; (or always takes effect if a filter is set). Therefore, even for synchronous methods, it is possible to change the behavior by including a &lt;code&gt;CancellationToken&lt;/code&gt; as an argument.&lt;/p&gt; &#xA;&lt;h2&gt;Exit Code&lt;/h2&gt; &#xA;&lt;p&gt;If the method returns &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;Task&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;ConsoleAppFramework&lt;/code&gt; will set the return value to the exit code. Due to the nature of code generation, when writing lambda expressions, you need to explicitly specify either &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;Task&amp;lt;int&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// return Random ExitCode...&#xA;ConsoleApp.Run(args, int () =&amp;gt; Random.Shared.Next());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// return StatusCode&#xA;await ConsoleApp.RunAsync(args, async Task&amp;lt;int&amp;gt; (string url, CancellationToken cancellationToken) =&amp;gt;&#xA;{&#xA;    using var client = new HttpClient();&#xA;    var response = await client.GetAsync(url, cancellationToken);&#xA;    return (int)response.StatusCode;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the method throws an unhandled exception, ConsoleAppFramework always set &lt;code&gt;1&lt;/code&gt; to the exit code. Also, in that case, output &lt;code&gt;Exception.ToString&lt;/code&gt; to &lt;code&gt;ConsoleApp.LogError&lt;/code&gt; (the default is &lt;code&gt;Console.WriteLine&lt;/code&gt;). If you want to modify this code, please create a custom filter. For more details, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/ConsoleAppFramework/master/#filtermiddleware-pipline--consoleappcontext&#34;&gt;Filter&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Attribute based parameters validation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ConsoleAppFramework&lt;/code&gt; performs validation when the parameters are marked with attributes for validation from &lt;code&gt;System.ComponentModel.DataAnnotations&lt;/code&gt; (more precisely, attributes that implement &lt;code&gt;ValidationAttribute&lt;/code&gt;). The validation occurs after parameter binding and before command execution. If the validation fails, it throws a &lt;code&gt;ValidationException&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ConsoleApp.Run(args, ([EmailAddress] string firstArg, [Range(0, 2)] int secondArg) =&amp;gt; { });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, if you pass arguments like &lt;code&gt;args = &#34;--first-arg invalid.email --second-arg 10&#34;.Split(&#39; &#39;);&lt;/code&gt;, you will see validation failure messages such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;The firstArg field is not a valid e-mail address.&#xA;The field secondArg must be between 0 and 2.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the ExitCode is set to 1 in this case.&lt;/p&gt; &#xA;&lt;h2&gt;Filter(Middleware) Pipline / ConsoleAppContext&lt;/h2&gt; &#xA;&lt;p&gt;Filters are provided as a mechanism to hook into the execution before and after. To use filters, define an &lt;code&gt;internal class&lt;/code&gt; that implements &lt;code&gt;ConsoleAppFilter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class NopFilter(ConsoleAppFilter next) : ConsoleAppFilter(next) // ctor needs `ConsoleAppFilter next` and call base(next)&#xA;{&#xA;    // implement InvokeAsync as filter body&#xA;    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        try&#xA;        {&#xA;            /* on before */&#xA;            await Next.InvokeAsync(context, cancellationToken); // invoke next filter or command body&#xA;            /* on after */&#xA;        }&#xA;        catch&#xA;        {&#xA;            /* on error */&#xA;            throw;&#xA;        }&#xA;        finally&#xA;        {&#xA;            /* on finally */&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filters can be attached multiple times to &#34;global&#34;, &#34;class&#34;, or &#34;method&#34; using &lt;code&gt;UseFilter&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;[ConsoleAppFilter&amp;lt;T&amp;gt;]&lt;/code&gt;. The order of filters is global ‚Üí class ‚Üí method, and the execution order is determined by the definition order from top to bottom.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;&#xA;// global filters&#xA;app.UseFilter&amp;lt;NopFilter&amp;gt;(); //order 1&#xA;app.UseFilter&amp;lt;NopFilter&amp;gt;(); //order 2&#xA;&#xA;app.Add&amp;lt;MyCommand&amp;gt;();&#xA;app.Run(args);&#xA;&#xA;// per class filters&#xA;[ConsoleAppFilter&amp;lt;NopFilter&amp;gt;] // order 3&#xA;[ConsoleAppFilter&amp;lt;NopFilter&amp;gt;] // order 4&#xA;public class MyCommand&#xA;{&#xA;    // per method filters&#xA;    [ConsoleAppFilter&amp;lt;NopFilter&amp;gt;] // order 5&#xA;    [ConsoleAppFilter&amp;lt;NopFilter&amp;gt;] // order 6&#xA;    public void Echo(string msg) =&amp;gt; Console.WriteLine(msg);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filters allow various processes to be shared. For example, the process of measuring execution time can be written as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class LogRunningTimeFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)&#xA;{&#xA;    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        var startTime = Stopwatch.GetTimestamp();&#xA;        ConsoleApp.Log($&#34;Execute command at {DateTime.UtcNow.ToLocalTime()}&#34;); // LocalTime for human readable time&#xA;        try&#xA;        {&#xA;            await Next.InvokeAsync(context, cancellationToken);&#xA;            ConsoleApp.Log($&#34;Command execute successfully at {DateTime.UtcNow.ToLocalTime()}, Elapsed: &#34; + (Stopwatch.GetElapsedTime(startTime)));&#xA;        }&#xA;        catch&#xA;        {&#xA;            ConsoleApp.Log($&#34;Command execute failed at {DateTime.UtcNow.ToLocalTime()}, Elapsed: &#34; + (Stopwatch.GetElapsedTime(startTime)));&#xA;            throw;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of an exception, the &lt;code&gt;ExitCode&lt;/code&gt; is usually &lt;code&gt;1&lt;/code&gt;, and the stack trace is also displayed. However, by applying an exception handling filter, the behavior can be changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class ChangeExitCodeFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)&#xA;{&#xA;    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        try&#xA;        {&#xA;            await Next.InvokeAsync(context, cancellationToken);&#xA;        }&#xA;        catch (Exception ex)&#xA;        {&#xA;            if (ex is OperationCanceledException) return;&#xA;&#xA;            Environment.ExitCode = 9999; // change custom exit code&#xA;            ConsoleApp.LogError(ex.Message); // .ToString() shows stacktrace, .Message can avoid showing stacktrace to user.&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filters are executed after the command name routing is completed. If you want to prohibit multiple executions for each command name, you can use &lt;code&gt;ConsoleAppContext.CommandName&lt;/code&gt; as the key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class PreventMultipleSameCommandInvokeFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)&#xA;{&#xA;    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        var basePath = Assembly.GetEntryAssembly()?.Location.Replace(Path.DirectorySeparatorChar, &#39;_&#39;);&#xA;        var mutexKey = $&#34;{basePath}$$${context.CommandName}&#34;; // lock per command-name&#xA;&#xA;        using var mutex = new Mutex(true, mutexKey, out var createdNew);&#xA;        if (!createdNew)&#xA;        {&#xA;            throw new Exception($&#34;already running command:{context.CommandName} in another process.&#34;);&#xA;        }&#xA;&#xA;        await Next.InvokeAsync(context, cancellationToken);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pass values between filters or to commands, you can use &lt;code&gt;ConsoleAppContext.State&lt;/code&gt;. For example, if you want to perform authentication processing and pass around the ID, you can write code like the following. Since &lt;code&gt;ConsoleAppContext&lt;/code&gt; is an immutable record, you need to pass the rewritten context to Next using the &lt;code&gt;with&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class AuthenticationFilter(ConsoleAppFilter next) : ConsoleAppFilter(next)&#xA;{&#xA;    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        var requestId = Guid.NewGuid();&#xA;        var userId = await GetUserIdAsync();&#xA;&#xA;        // setup new state to context&#xA;        var authedContext = context with { State = new ApplicationContext(requestId, userId) };&#xA;        await Next.InvokeAsync(authedContext, cancellationToken);&#xA;    }&#xA;&#xA;    // get user-id from DB/auth saas/others&#xA;    async Task&amp;lt;int&amp;gt; GetUserIdAsync()&#xA;    {&#xA;        await Task.Delay(TimeSpan.FromSeconds(1));&#xA;        return 1999;&#xA;    }&#xA;}&#xA;&#xA;record class ApplicationContext(Guid RequiestId, int UserId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands can accept &lt;code&gt;ConsoleAppContext&lt;/code&gt; as an argument. This allows using the values processed by filters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;&#xA;app.UseFilter&amp;lt;AuthenticationFilter&amp;gt;();&#xA;&#xA;app.Add(&#34;&#34;, (int x, int y, ConsoleAppContext context) =&amp;gt;&#xA;{&#xA;    var appContext = (ApplicationContext)context.State!;&#xA;    var requestId = appContext.RequiestId;&#xA;    var userId = appContext.UserId;&#xA;&#xA;    Console.WriteLine($&#34;Request:{requestId} User:{userId} Sum:{x + y}&#34;);&#xA;});&#xA;&#xA;app.Run(args);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ConsoleAppContext&lt;/code&gt; also has a &lt;code&gt;ConsoleAppContext.Arguments&lt;/code&gt; property that allows you to obtain the (&lt;code&gt;string[] args&lt;/code&gt;) passed to Run/RunAsync.&lt;/p&gt; &#xA;&lt;h3&gt;Sharing Filters Between Projects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ConsoleAppFilter&lt;/code&gt; is defined as &lt;code&gt;internal&lt;/code&gt; for each project by the Source Generator. Therefore, an additional library is provided for referencing common filter definitions across projects.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PM&amp;gt; Install-Package &lt;a href=&#34;https://www.nuget.org/packages/ConsoleAppFramework.Abstractions&#34;&gt;ConsoleAppFramework.Abstractions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library includes the following classes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IArgumentParser&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConsoleAppContext&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConsoleAppFilter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConsoleAppFilterAttribute&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Internally, when referencing &lt;code&gt;ConsoleAppFramework.Abstractions&lt;/code&gt;, the &lt;code&gt;USE_EXTERNAL_CONSOLEAPP_ABSTRACTIONS&lt;/code&gt; compilation symbol is added. This disables the above classes generated by the Source Generator, and prioritizes using the classes within the library.&lt;/p&gt; &#xA;&lt;h3&gt;Performance of filter&lt;/h3&gt; &#xA;&lt;p&gt;In general frameworks, filters are dynamically added at runtime, resulting in a variable number of filters. Therefore, they need to be allocated using a dynamic array. In ConsoleAppFramework, the number of filters is statically determined at compile time, eliminating the need for any additional allocations such as arrays or lambda expression captures. The allocation amount is equal to the number of filter classes being used plus 1 (for wrapping the command method), resulting in the shortest execution path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.UseFilter&amp;lt;NopFilter&amp;gt;();&#xA;app.UseFilter&amp;lt;NopFilter&amp;gt;();&#xA;app.UseFilter&amp;lt;NopFilter&amp;gt;();&#xA;app.UseFilter&amp;lt;NopFilter&amp;gt;();&#xA;app.UseFilter&amp;lt;NopFilter&amp;gt;();&#xA;&#xA;// The above code will generate the following code:&#xA;&#xA;sealed class Command0Invoker(string[] args, Action command) : ConsoleAppFilter(null!)&#xA;{&#xA;    public ConsoleAppFilter BuildFilter()&#xA;    {&#xA;        var filter0 = new NopFilter(this);&#xA;        var filter1 = new NopFilter(filter0);&#xA;        var filter2 = new NopFilter(filter1);&#xA;        var filter3 = new NopFilter(filter2);&#xA;        var filter4 = new NopFilter(filter3);&#xA;        return filter4;&#xA;    }&#xA;&#xA;    public override Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        return RunCommand0Async(context.Arguments, args, command, context, cancellationToken);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When an &lt;code&gt;async Task&lt;/code&gt; completes synchronously, it returns the equivalent of &lt;code&gt;Task.CompletedTask&lt;/code&gt;, so &lt;code&gt;ValueTask&lt;/code&gt; is not necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Dependency Injection(Logging, Configuration, etc...)&lt;/h2&gt; &#xA;&lt;p&gt;The execution processing of &lt;code&gt;ConsoleAppFramework&lt;/code&gt; fully supports &lt;code&gt;DI&lt;/code&gt;. When you want to use a logger, read a configuration, or share processing with an ASP.NET project, using &lt;code&gt;Microsoft.Extensions.DependencyInjection&lt;/code&gt; or other DI libraries can make processing convenient.&lt;/p&gt; &#xA;&lt;p&gt;Lambda expressions passed to Run, class constructors, methods, and filter constructors can inject services obtained from &lt;code&gt;IServiceProvider&lt;/code&gt;. Let&#39;s look at a minimal example. Setting any &lt;code&gt;System.IServiceProvider&lt;/code&gt; to &lt;code&gt;ConsoleApp.ServiceProvider&lt;/code&gt; enables DI throughout the system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Microsoft.Extensions.DependencyInjection&#xA;var services = new ServiceCollection();&#xA;services.AddTransient&amp;lt;MyService&amp;gt;();&#xA;&#xA;using var serviceProvider = services.BuildServiceProvider();&#xA;&#xA;// Any DI library can be used as long as it can create an IServiceProvider&#xA;ConsoleApp.ServiceProvider = serviceProvider;&#xA;&#xA;// When passing to a lambda expression/method, using [FromServices] indicates that it is passed via DI, not as a parameter&#xA;ConsoleApp.Run(args, ([FromServices]MyService service, int x, int y) =&amp;gt; Console.WriteLine(x + y));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When passing to a lambda expression or method, the &lt;code&gt;[FromServices]&lt;/code&gt; attribute is used to distinguish it from command parameters. When passing a class, Constructor Injection can be used, resulting in a simpler appearance.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s try injecting a logger and enabling output to a file. The libraries used are Microsoft.Extensions.Logging and &lt;a href=&#34;https://github.com/Cysharp/ZLogger/&#34;&gt;Cysharp/ZLogger&lt;/a&gt; (a high-performance logger built on top of MS.E.Logging).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Package Import: ZLogger&#xA;var services = new ServiceCollection();&#xA;services.AddLogging(x =&amp;gt;&#xA;{&#xA;    x.ClearProviders();&#xA;    x.SetMinimumLevel(LogLevel.Trace);&#xA;    x.AddZLoggerConsole();&#xA;    x.AddZLoggerFile(&#34;log.txt&#34;);&#xA;});&#xA;&#xA;using var serviceProvider = services.BuildServiceProvider(); // using for logger flush(important!)&#xA;ConsoleApp.ServiceProvider = serviceProvider;&#xA;&#xA;var app = ConsoleApp.Create();&#xA;app.Add&amp;lt;MyCommand&amp;gt;();&#xA;app.Run(args);&#xA;&#xA;// inject logger to constructor&#xA;public class MyCommand(ILogger&amp;lt;MyCommand&amp;gt; logger)&#xA;{&#xA;    [Command(&#34;&#34;)]&#xA;    public void Echo(string msg)&#xA;    {&#xA;        logger.ZLogInformation($&#34;Message is {msg}&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ConsoleApp&lt;/code&gt; has replaceable default logging methods &lt;code&gt;ConsoleApp.Log&lt;/code&gt; and &lt;code&gt;ConsoleApp.LogError&lt;/code&gt; used for Help display and exception handling. If using &lt;code&gt;ILogger&amp;lt;T&amp;gt;&lt;/code&gt;, it&#39;s better to replace these as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using var serviceProvider = services.BuildServiceProvider(); // using for cleanup(important)&#xA;ConsoleApp.ServiceProvider = serviceProvider;&#xA;&#xA;// setup ConsoleApp system logger&#xA;var logger = serviceProvider.GetRequiredService&amp;lt;ILogger&amp;lt;Program&amp;gt;&amp;gt;();&#xA;ConsoleApp.Log = msg =&amp;gt; logger.LogInformation(msg);&#xA;ConsoleApp.LogError = msg =&amp;gt; logger.LogError(msg);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DI can also be effectively used when reading application configuration from &lt;code&gt;appsettings.json&lt;/code&gt;. For example, suppose you have the following JSON file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Position&#34;: {&#xA;    &#34;Title&#34;: &#34;Editor&#34;,&#xA;    &#34;Name&#34;: &#34;Joe Smith&#34;&#xA;  },&#xA;  &#34;MyKey&#34;: &#34;My appsettings.json Value&#34;,&#xA;  &#34;AllowedHosts&#34;: &#34;*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;Microsoft.Extensions.Configuration.Json&lt;/code&gt;, reading, binding, and registering with DI can be done as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Package Import: Microsoft.Extensions.Configuration.Json&#xA;var configuration = new ConfigurationBuilder()&#xA;    .SetBasePath(Directory.GetCurrentDirectory())&#xA;    .AddJsonFile(&#34;appsettings.json&#34;)&#xA;    .Build();&#xA;&#xA;// Bind to services&#xA;var services = new ServiceCollection();&#xA;services.Configure&amp;lt;PositionOptions&amp;gt;(configuration.GetSection(&#34;Position&#34;));&#xA;&#xA;using var serviceProvider = services.BuildServiceProvider();&#xA;ConsoleApp.ServiceProvider = serviceProvider;&#xA;&#xA;var app = ConsoleApp.Create();&#xA;app.Add&amp;lt;MyCommand&amp;gt;();&#xA;app.Run(args);&#xA;&#xA;// inject options&#xA;public class MyCommand(IOptions&amp;lt;PositionOptions&amp;gt; options)&#xA;{&#xA;    [Command(&#34;&#34;)]&#xA;    public void Echo(string msg)&#xA;    {&#xA;        ConsoleApp.Log($&#34;Binded Option: {options.Value.Title} {options.Value.Name}&#34;);&#xA;    }&#xA;}&#xA;&#xA;public class PositionOptions&#xA;{&#xA;    public string Title { get; set; } = &#34;&#34;;&#xA;    public string Name { get; set; } = &#34;&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have other applications such as ASP.NET in the entire project and want to use common DI and configuration set up using &lt;code&gt;Microsoft.Extensions.Hosting&lt;/code&gt;, you can share them by setting the &lt;code&gt;IServiceProvider&lt;/code&gt; of &lt;code&gt;IHost&lt;/code&gt; after building.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Package Import: Microsoft.Extensions.Hosting&#xA;var builder = Host.CreateApplicationBuilder(); // don&#39;t pass args.&#xA;&#xA;using var host = builder.Build(); // using&#xA;ConsoleApp.ServiceProvider = host.Services; // use host ServiceProvider&#xA;&#xA;ConsoleApp.Run(args, ([FromServices] ILogger&amp;lt;Program&amp;gt; logger) =&amp;gt; logger.LogInformation(&#34;Hello World!&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ConsoleAppFramework has its own lifetime management (see the &lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/ConsoleAppFramework/master/#cancellationtokengracefully-shutdown-and-timeout&#34;&gt;CancellationToken(Gracefully Shutdown) and Timeout&lt;/a&gt; section), so Host&#39;s Start/Stop is not necessary. However, be sure to use the Host itself.&lt;/p&gt; &#xA;&lt;p&gt;As it is, the DI scope is not set, but by using a global filter, you can add a scope for each command execution. &lt;code&gt;ConsoleAppFilter&lt;/code&gt; can also inject services via constructor injection, so let&#39;s get the &lt;code&gt;IServiceProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = ConsoleApp.Create();&#xA;app.UseFilter&amp;lt;ServiceProviderScopeFilter&amp;gt;();&#xA;&#xA;internal class ServiceProviderScopeFilter(IServiceProvider serviceProvider, ConsoleAppFilter next) : ConsoleAppFilter(next)&#xA;{&#xA;    public override async Task InvokeAsync(ConsoleAppContext context, CancellationToken cancellationToken)&#xA;    {&#xA;        // create Microsoft.Extensions.DependencyInjection scope&#xA;        await using var scope = serviceProvider.CreateAsyncScope();&#xA;        await Next.InvokeAsync(context, cancellationToken);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, since the construction of the filters is performed before execution, automatic injection using scopes is only effective for the command body itself.&lt;/p&gt; &#xA;&lt;h2&gt;Publish to executable file&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to run a CLI application in .NET:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-run&#34;&gt;dotnet run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-build&#34;&gt;dotnet build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-publish&#34;&gt;dotnet publish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;run&lt;/code&gt; is convenient when you want to execute the &lt;code&gt;csproj&lt;/code&gt; directly, such as for starting command tools in CI. &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;publish&lt;/code&gt; are quite similar, so it&#39;s possible to discuss them in general terms, but it&#39;s a bit difficult to talk about the precise differences. For more details, it&#39;s a good idea to check out &lt;a href=&#34;https://github.com/dotnet/sdk/issues/26247&#34;&gt;&lt;code&gt;build&lt;/code&gt; vs &lt;code&gt;publish&lt;/code&gt; -- can they be friends? ¬∑ Issue #26247 ¬∑ dotnet/sdk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also, to run with Native AOT, please refer to the &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/&#34;&gt;Native AOT deployment overview&lt;/a&gt;. In any case, ConsoleAppFramework thoroughly implements a dependency-free and reflection-free approach, so it shouldn&#39;t be an obstacle to execution.&lt;/p&gt; &#xA;&lt;h2&gt;v4 -&amp;gt; v5 Migration Guide&lt;/h2&gt; &#xA;&lt;p&gt;v4 was running on top of &lt;code&gt;Microsoft.Extensions.Hosting&lt;/code&gt;, so build a Host in the same way and set up a ServiceProvider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using var host = Host.CreateDefaultBuilder().Build();&#xA;ConsoleApp.ServiceProvider = host.ServiceProvider;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;var app = ConsoleApp.Create(args); app.Run();&lt;/code&gt; -&amp;gt; &lt;code&gt;var app = ConsoleApp.Create(); app.Run(args);&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app.AddCommand/AddSubCommand&lt;/code&gt; -&amp;gt; &lt;code&gt;app.Add(string commandName)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app.AddRootCommand&lt;/code&gt; -&amp;gt; &lt;code&gt;app.Add(&#34;&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app.AddCommands&amp;lt;T&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;app.Add&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app.AddSubCommands&amp;lt;T&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;app.Add&amp;lt;T&amp;gt;(string commandPath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app.AddAllCommandType&lt;/code&gt; -&amp;gt; &lt;code&gt;NotSupported&lt;/code&gt;(use &lt;code&gt;Add&amp;lt;T&amp;gt;&lt;/code&gt; manually)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[Option(int index)]&lt;/code&gt; -&amp;gt; &lt;code&gt;[Argument]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[Option(string shortName, string description)]&lt;/code&gt; -&amp;gt; &lt;code&gt;Xml Document Comment&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConsoleAppFilter.Order&lt;/code&gt; -&amp;gt; &lt;code&gt;NotSupported&lt;/code&gt;(global -&amp;gt; class -&amp;gt; method declrative order)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConsoleAppOptions.GlobalFilters&lt;/code&gt; -&amp;gt; &lt;code&gt;app.UseFilter&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is under the MIT License.&lt;/p&gt;</summary>
  </entry>
</feed>