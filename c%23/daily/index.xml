<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-17T01:31:08Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fullstackhero/dotnet-webapi-starter-kit</title>
    <updated>2023-12-17T01:31:08Z</updated>
    <id>tag:github.com,2023-12-17:/fullstackhero/dotnet-webapi-starter-kit</id>
    <link href="https://github.com/fullstackhero/dotnet-webapi-starter-kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture Template for .NET 7.0 WebApi built with Multitenancy Support.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/actions/workflows/dotnet.yml&#34;&gt;&lt;img src=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/actions/workflows/dotnet.yml/badge.svg?branch=main&#34; alt=&#34;dotnet-cicd&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/fullstackhero/dotnet-webapi-boilerplate?color=2da44e&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/yQWpShsKrf&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/878181478972928011?color=%237289da&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%237289da&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FullStackHero.WebAPI.Boilerplate/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/FullStackHero.WebAPI.Boilerplate?color=2da44e&amp;amp;label=nuget%20downloads&amp;amp;logo=nuget&#34; alt=&#34;Nuget downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/iammukeshm&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/iammukeshm.svg?style=social&amp;amp;label=Follow%20%40iammukeshm&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fullstackhero/dotnet-webapi-boilerplate/main/media/fullstack-hero-dotnet-7-webapi-boilerplate-banner.png&#34; alt=&#34;fullstackhero webapi&#34; title=&#34;fullstackhero webapi&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s fullstackhero&#39;s .NET Web API Boilerplate?&lt;/h2&gt; &#xA;&lt;p&gt;fullstackhero&#39;s .NET Web API Boilerplate is a starting point for your next &lt;code&gt;.NET 7 Clean Architecture Project&lt;/code&gt; that incorporates the most essential packages and features your projects will ever need including out of the box Multi-Tenancy support. This project can save well over &lt;code&gt;200+ hours&lt;/code&gt; of development time for your team.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As the name suggests, this is an API / Server Boilerplate. You can find other Client Boilerplates that consume this API under &lt;code&gt;@fullstackhero&lt;/code&gt; handle.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Find &lt;code&gt;Blazor WebAssembly Boilerplate&lt;/code&gt; here - &lt;a href=&#34;https://github.com/fullstackhero/blazor-wasm-boilerplate&#34;&gt;https://github.com/fullstackhero/blazor-wasm-boilerplate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;YouTube Video - .NET Web API Boilerplate | FullStackHero - Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Watch the Getting started video here&lt;/code&gt; : &lt;a href=&#34;https://www.youtube.com/watch?v=a1mWRLQf9hY&#34;&gt;https://www.youtube.com/watch?v=a1mWRLQf9hY&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a1mWRLQf9hY&#34;&gt;&lt;img src=&#34;https://codewithmukesh.com/wp-content/uploads/2023/04/fullstackhero-youtube.png&#34; alt=&#34;.NET Web API Boilerplate | FullStackHero - Getting Started&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this repository is to provide a complete and feature-rich starting point for any .NET Developer / Team to kick-start their next major project using .NET 7 Web API. This also serves the purpose of learning advanced concepts and implementations such as &lt;code&gt;Multitenancy, CQRS, Onion Architecture, Clean Coding standards, Cloud Deployments with Terraform to AWS, Docker Concepts, CICD Pipelines &amp;amp; Workflows&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built on .NET 7.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Follows Clean Architecture Principles&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Domain Driven Design&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cloud Ready. Can be deployed to AWS Infrastructure as ECS Containers using Terraform!&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker-Compose File Examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Documented at &lt;a href=&#34;https://fullstackhero.net&#34;&gt;fullstackhero.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi Tenancy Support with Finbuckle &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Tenants with Multi Database / Shared Database Support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Activate / Deactivate Tenants on Demand&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Upgrade Subscription of Tenants - Add More Validity Months to each tenant!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports MySQL, MSSQL, Oracle &amp;amp; PostgreSQL!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to See More!&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uses Entity Framework Core as DB Abstraction&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flexible Repository Pattern&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dapper Integration for Optimal Performance&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Serilog Integration with various Sinks - File, SEQ, Kibana&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; OpenAPI - Supports Client Service Generation&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mapster Integration for Quicker Mapping&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API Versioning&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Response Caching - Distributed Caching + REDIS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fluent Validations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Audit Logging&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Advanced User &amp;amp; Role Based Permission Management&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code Analysis &amp;amp; StyleCop Integration with Rulesets&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JSON Based Localization with Caching&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hangfire Support - Secured Dashboard&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File Storage Service&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Test Projects&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JWT &amp;amp; Azure AD Authentication&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MediatR - CQRS&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SignalR Notifications&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &amp;amp; Much More&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read Documentation related to this Boilerplate here - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/&#34;&gt;https://fullstackhero.net/dotnet-webapi-boilerplate/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Feel free to contribute to the Documentation Repository - &lt;a href=&#34;https://github.com/fullstackhero/docs&#34;&gt;https://github.com/fullstackhero/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with this Boilerplate, here are the available options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install using the &lt;code&gt;FSH CLI&lt;/code&gt; tool. Use this for release versions of the Boilerplate only.&lt;/li&gt; &#xA; &lt;li&gt;Fork the Repository. Use this if you want to always keep your version of the Boilerplate up-to date with the latest changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that your DEV enviroment is setup, &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/development-environment/&#34;&gt;Read the Development Environment Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;FSH CLI Tool&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Before creating your first fullstackhero solution, you should ensure that your local machine has:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;.NET 7&lt;/strong&gt; You can find the download &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/7.0&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NodeJS (16+)&lt;/strong&gt; You can find the download &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;After you have installed .NET, you will need to install the &lt;code&gt;fsh&lt;/code&gt; console tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet tool install --global FSH.CLI&#xA;fsh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This isntall the FSH CLI tools and the associated Templates. You are now ready to create your first FSH project!&lt;/p&gt; &#xA;&lt;h4&gt;FSH .NET WebAPI Boilerplate&lt;/h4&gt; &#xA;&lt;p&gt;Here&#39;s how you would create a Solution using the FSH .NET WebAPI Boilerplate.&lt;/p&gt; &#xA;&lt;p&gt;Simply navigate to a new directory (wherever you want to place your new solution), and open up Command Prompt at the opened directory.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command. Note that, in this demonstration, I am naming my new solution as FSH.Starter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fsh api new FSH.Starter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fsh api n FSH.Starter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new .NET 7 WEBAPI solution for you using the FSH Templates. For further steps and details, &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/getting-started/&#34;&gt;Read the Getting Started Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;p&gt;To update the tool &amp;amp; templates, run the following commands&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet tool update FSH.CLI --global&#xA;fsh update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Forking the Repository&lt;/h3&gt; &#xA;&lt;p&gt;You would probably need to take this approach if you want to keep your source code upto date with the latest changes. To get started based on this repository, you need to get a copy locally. You have three options: fork, clone, or download.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make a fork of this repository in your Github account.&lt;/li&gt; &#xA; &lt;li&gt;Create your new &lt;code&gt;dotnet-webapi-boilerplate&lt;/code&gt; personal project by cloning the forked repository on your personal github.&lt;/li&gt; &#xA; &lt;li&gt;Setup an upstream remote on your personal project pointing to your forked repository using command &lt;code&gt;git remote add upstream https://github.com/{githubuseraccount}/dotnet-webapi-boilerplate&lt;/code&gt; and &lt;code&gt;git remote set-url --push upstream DISABLE&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For step by step instructions, &lt;a href=&#34;https://discord.com/channels/878181478972928011/892573122186838046/933513103688224838&#34;&gt;follow this&lt;/a&gt; and &lt;a href=&#34;https://gist.github.com/0xjac/85097472043b697ab57ba1b1c7530274&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start Guide&lt;/h2&gt; &#xA;&lt;p&gt;So, for a better developer experience, I have added Makefile into the solution. Now that our solution is generated, let&#39;s navigate to the root folder of the solution and open up a command terminal.&lt;/p&gt; &#xA;&lt;p&gt;To build the solution,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the solution is configured to work with postgresql database (mainly because of hte OS licensing). So, you will have to make sure that postgresql database instance is up and running on your machine. You can modify the connection string to include your username and password. Connections strings can be found at &lt;code&gt;src/Host/Configurations/database.json&lt;/code&gt; and &lt;code&gt;src/Host/Configurations/hangfire.json&lt;/code&gt;. Once that&#39;s done, let&#39;s start up the API server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, the application would connect to the defined postgresql database and start creating tables, and seed required data.&lt;/p&gt; &#xA;&lt;p&gt;For testing this API, we have 3 options.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Swagger @ &lt;code&gt;localhost:5001/swagger&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postman collections are available &lt;code&gt;./postman&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;ThunderClient for VSCode. This is my personal favorite. You will have to install the Thunderclient extension for VSCode.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default credentials to this API is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;email&#34;:&#34;admin@root.com&#34;,&#xA;    &#34;password&#34;:&#34;123Pa$$word!&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open up Postman, Thunderclient or Swagger.&lt;/p&gt; &#xA;&lt;p&gt;identity -&amp;gt; get-token&lt;/p&gt; &#xA;&lt;p&gt;This is a POST Request. Here the body of the request will be the JSON (credentials) I specified earlier. And also, remember to pass the tenant id in the header of the request. The default tenant id is &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is a sample CURL command for getting the tokens.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -X POST \&#xA;  &#39;https://localhost:5001/api/tokens&#39; \&#xA;  --header &#39;Accept: */*&#39; \&#xA;  --header &#39;tenant: root&#39; \&#xA;  --header &#39;Accept-Language: en-US&#39; \&#xA;  --header &#39;Content-Type: application/json&#39; \&#xA;  --data-raw &#39;{&#xA;  &#34;email&#34;: &#34;admin@root.com&#34;,&#xA;  &#34;password&#34;: &#34;123Pa$$word!&#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is the response.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;token&#34;: &#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjM0YTY4ZjQyLWE0ZDgtNDNlMy1hNzE3LTI1OTczZjZmZTJjNyIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2VtYWlsYWRkcmVzcyI6ImFkbWluQHJvb3QuY29tIiwiZnVsbE5hbWUiOiJyb290IEFkbWluIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFtZSI6InJvb3QiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9zdXJuYW1lIjoiQWRtaW4iLCJpcEFkZHJlc3MiOiIxMjcuMC4wLjEiLCJ0ZW5hbnQiOiJyb290IiwiaW1hZ2VfdXJsIjoiIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbW9iaWxlcGhvbmUiOiIiLCJleHAiOjE2ODA5NDE3MzN9.VYNaNvk2T4YDvQ3wriXgk2W_Vy9zyEEhjveNauNAeJY&#34;,&#xA;  &#34;refreshToken&#34;: &#34;pyxO30zJK8KelpEXF0vPfbSbjntdlbbnxrZAlUFXfyE=&#34;,&#xA;  &#34;refreshTokenExpiryTime&#34;: &#34;2023-04-15T07:15:33.5187598Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to pass the &lt;code&gt;token&lt;/code&gt; in the request headers to authenticate calls to the fullstackhero API!&lt;/p&gt; &#xA;&lt;p&gt;For further steps and details, &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/getting-started/&#34;&gt;Read the Getting Started Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Containerization&lt;/h2&gt; &#xA;&lt;p&gt;The API project, being .NET 7, it is configured to have built-in support for containerization. That means, you really don&#39;t need a Dockerfile to containerize the webapi.&lt;/p&gt; &#xA;&lt;p&gt;To build a docker image, all you have to do is, ensure that docker-desktop or docker instance is running. And run the following command at the root of the solution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also push the docker image directly to dockerhub or any supported registry by using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make publish-to-hub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will have to update your docker registry / repo url in the Makefile though!.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Compose&lt;/h2&gt; &#xA;&lt;p&gt;This project also comes with examples of docker compose files, where you can spin up the webapi and database isntance in your local containers with the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;make dcu #docker compose up - Boots up the webapi &amp;amp; postgresql container&#xA;make dcd #docker compose down - Shuts down the webapi &amp;amp; postgresql containers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also examples for mysql &amp;amp; mssql variations of the fsh webapi. You can find the other docker-compose files under the ./docker-compose folder. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/fullstackhero/dotnet-webapi-starter-kit/master/docker-compose/README.md&#34;&gt;fullstackhero&#39;s docker-compose instructions &amp;amp; files here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cloud Deployment with Terraform + AWS ECS&lt;/h2&gt; &#xA;&lt;p&gt;This is something you wont get to see very often with boilerplates. But, we do support cloud deployment to AWS using terraform. The terraform files are available at the &lt;code&gt;./terraform&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Terraform&lt;/li&gt; &#xA; &lt;li&gt;Install &amp;amp; Configure AWS CLI profiles to allow terraform to provision resources for you. I have made a video about &lt;a href=&#34;https://www.youtube.com/watch?v=oY0-1mj4oCo&amp;amp;ab_channel=MukeshMurugan&#34;&gt;AWS Credentials Management&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In brief, the terraform folder has 2 sub-folders.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;backend&lt;/li&gt; &#xA; &lt;li&gt;environments/staging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Backend folder is internally used by Terraform for state management and locking. There is a one-time setup you have to do against this folder. Navigate to the backend folder and run the command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;terraform init&#xA;terraform apply -auto-approve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would create the required S3 Buckets and DDB table for you.&lt;/p&gt; &#xA;&lt;p&gt;Next is the &lt;code&gt;environments/staging&lt;/code&gt; folder. Here too, run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;terraform init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once done, you can go the terraform.tfvars file to change the variables like,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;project tags&lt;/li&gt; &#xA; &lt;li&gt;docker image name&lt;/li&gt; &#xA; &lt;li&gt;ecs cluster name and so on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After that, simply back to the root of the solution and run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make ta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will evaluate your terraform files and create a provision plan for you. Once you are ok, type in &lt;code&gt;yes&lt;/code&gt; and the tool will start to deploy your .NET WebAPI project as containers along with a RDS PostgreSQL intance. You will be receiving the hosted api url once the provisioning is completed!&lt;/p&gt; &#xA;&lt;p&gt;To destroy the deployed resources, run the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make td&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Important Links &amp;amp; Documentations&lt;/h2&gt; &#xA;&lt;p&gt;Overview - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/overview/&#34;&gt;Read&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Getting Started - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/getting-started/&#34;&gt;Read&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Development Environment - &lt;a href=&#34;https://fullstackhero.net/dotnet-webapi-boilerplate/general/development-environment/&#34;&gt;Learn about setting up the DEV environment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Participate in Discussions - &lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/discussions&#34;&gt;QNA &amp;amp; General Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join our Discord - &lt;a href=&#34;https://discord.gg/gdgHRt4mMw&#34;&gt;fullstackhero @ Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelogs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/raw/main/CHANGELOGS.md&#34;&gt;View Complete Changelogs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord &lt;a href=&#34;https://discord.gg/gdgHRt4mMw&#34;&gt;@fullstackhero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook Page &lt;a href=&#34;https://facebook.com/codewithmukesh&#34;&gt;@codewithmukesh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Youtube Channel &lt;a href=&#34;https://youtube.com/c/codewithmukesh&#34;&gt;@codewithmukesh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed with the &lt;a href=&#34;https://raw.githubusercontent.com/fullstackhero/dotnet-webapi-starter-kit/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support ⭐&lt;/h2&gt; &#xA;&lt;p&gt;Has this Project helped you learn something New? or Helped you at work? Here are a few ways by which you can support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leave a star! ⭐&lt;/li&gt; &#xA; &lt;li&gt;Recommend this awesome project to your colleagues. 🥇&lt;/li&gt; &#xA; &lt;li&gt;Do consider endorsing me on LinkedIn for ASP.NET Core - &lt;a href=&#34;https://codewithmukesh.com/linkedin&#34;&gt;Connect via LinkedIn&lt;/a&gt; 🦸&lt;/li&gt; &#xA; &lt;li&gt;Sponsor the project - &lt;a href=&#34;https://opencollective.com/fullstackhero&#34;&gt;opencollective/fullstackhero&lt;/a&gt; ❤️&lt;/li&gt; &#xA; &lt;li&gt;Or, &lt;a href=&#34;https://www.buymeacoffee.com/codewithmukesh&#34;&gt;consider buying me a coffee&lt;/a&gt;! ☕&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/codewithmukesh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fullstackhero/dotnet-webapi-boilerplate/main/media/buy-me-a-coffee.png&#34; alt=&#34;buy-me-a-coffee&#34; title=&#34;buy-me-a-coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/fullstackhero/dotnet-webapi-starter-kit/master/CONTRIBUTING.md&#34;&gt;Submit your PR and join the elite list!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fullstackhero/dotnet-webapi-boilerplate/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=fullstackhero/dotnet-webapi-boilerplate&#34; alt=&#34;fsh dotnet webapi contributors&#34; title=&#34;fsh dotnet webapi contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Financial Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Become a financial contributor and help me sustain the project. &lt;a href=&#34;https://opencollective.com/fullstackhero/contribute&#34;&gt;Support the Project!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/fullstackhero&#34;&gt;&lt;img src=&#34;https://opencollective.com/fullstackhero/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tjackenpacken/taskbar-groups</title>
    <updated>2023-12-17T01:31:08Z</updated>
    <id>tag:github.com,2023-12-17:/tjackenpacken/taskbar-groups</id>
    <link href="https://github.com/tjackenpacken/taskbar-groups" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight utility for organizing the taskbar through groups&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/main/Icon.ico&#34; alt=&#34;Logo&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Taskbar Groups&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tjackenpacken/taskbar-groups/issues&#34;&gt;&lt;img alt=&#34;Issues open&#34; src=&#34;https://img.shields.io/github/issues-raw/tjackenpacken/taskbar-groups?style=for-the-badge&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tjackenpacken/taskbar-groups/&#34;&gt;&lt;img alt=&#34;Last commit&#34; src=&#34;https://img.shields.io/github/last-commit/tjackenpacken/taskbar-groups?style=for-the-badge&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tjackenpacken/taskbar-groups/releases&#34;&gt;&lt;img alt=&#34;Latest version&#34; src=&#34;https://img.shields.io/github/v/tag/tjackenpacken/taskbar-groups?label=Latest%20Version&amp;amp;style=for-the-badge&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tjackenpacken/taskbar-groups/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;Latest version&#34; src=&#34;https://img.shields.io/github/license/tjackenpacken/taskbar-groups?style=for-the-badge&#34; height=&#34;20&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Taskbar groups is a lightweight utility for Windows that lets the users create groups of shortcuts in the taskbar.&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tjackenpacken/taskbar-groups/releases&#34;&gt;Download &amp;amp; Release Notes&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#table-of-contents&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📖 Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#-how-to-download-taskbar-groups&#34;&gt;➤ Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#%EF%B8%8F-creating-your-first-group&#34;&gt;➤ Creating your first group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#%EF%B8%8F-screenwindow-documentation&#34;&gt;➤ Screen/Window Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#main-screen-&#34;&gt;Main Screen&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#group-creation-screen-&#34;&gt;Group Creation Screen&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#extra-notes-&#34;&gt;Extra Notes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#-imageicon-caching&#34;&gt;➤ Image/Icon Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#%EF%B8%8F-program-shortcuts&#34;&gt;➤ Program Shortcuts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#-folder-structure-documentation&#34;&gt;➤ File/Folder Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#-License&#34;&gt;➤ License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#how-to-download-taskbar-groups&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔽 How to download Taskbar groups:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Download the .zip-file from the latest release (link above)&#xA;2. Unpack the .zip-file at a desired location&#xA;3. Run the TaskbarGroups.exe file in the extracted folder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#creating-your-first-group&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🛠️ Creating your first group&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. Press on the &#34;Add taskbar group&#34;&#xA;2. Give the group a name and an icon&#xA;3. Click on the &#34;Add new shortcut&#34; and select an .exe or .lnk (repeat until you got all your desired shortcuts)&#xA;    a. You can select multiple .exe or .lnk files at once&#xA;    b. You can drag and drop .exe, .lnk, or folders into the add new shortcut field&#xA;4. Save the group&#xA;enter image description here5. Left click on the group&#xA;6. In the folder that opens up, right click on the highlighted shortcut&#xA;7. Select &#34;Pin to taskbar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#screenwindow-documentation&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🖥️ Screen/Window Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Below will be some documentation for each of the screens with explaining the functionality of each of the components.&lt;/p&gt; &#xA;&lt;h4&gt;Main screen &lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#main-screen&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103317856-81025f00-49fa-11eb-907b-99623babf315.PNG&#34; alt=&#34;Group overview screen&#34;&gt;Here is the main group configuration screen. You get here by executing the TaskbarGroups.exe file. Here you can add groups and see what groups you have created.&lt;/p&gt; &#xA;&lt;h4&gt;Group Creation Screen &lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#group-creation&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103452967-36efd680-4ca3-11eb-8244-2aed6fc5af97.PNG&#34; alt=&#34;Group creation screen&#34;&gt;&lt;br&gt; Here is the group creation screen. Here you can start customizing and configuring your group. Here is the quick rundown of the features of this window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Name the new group&lt;/strong&gt; - You can insert any group name (no special characters) that you would like with a maximum character limit of 49 characters in total.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Width&lt;/strong&gt; - You can set the limit for how many shortcuts will appear on each line. For example I have 12 shortcuts and I have a width of 6. It will display 6 shortcuts per row/line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Change Group Icon&lt;/strong&gt; - You can click the (+) icon and it will bring up a file dialogue. You can select any type of image files (.png, .jpg, etc.), icon files (.ico), and any sort of executable or shortcut files (.exe, .lnk). On top of this you can drag and drop any of the mentioned file types above to use the icons from those files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add new shortcuts&lt;/strong&gt; - You can click the (+) icon and it will bring up a file dialogue like the change group icon section. You can select any type of executable or extension files (.exe, .lnk) to add to your group. You can also add &lt;strong&gt;shortcuts&lt;/strong&gt; leading to the windows store apps along with steam games/software. &lt;strong&gt;Do note however that if the shortcuts are moved, the application can no longer launch those applications and you will have to re-edit your group.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Allow open-all shortcuts&lt;/strong&gt; - When you launch the group to try to launch an app, you have the option to launch all the executables inside the group. To enable this feature, this checkbox has to be checked and the group has to be saved. All shortcuts can be launched through the usage of the Ctrl + Enter keybinds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shortcut Item Selection&lt;/strong&gt; - Once you have added shortcuts/applications, you can click on the &lt;strong&gt;sides of the individual entries&lt;/strong&gt; of those shortcuts/applications or anywhere that a text or image aren&#39;t blocking the background area. Clicking on them will &#34;select&#34; them and they would have a permanent background that is darker than the rest of the entries. This will be the same color as when you hover over applications/shortcuts. This will be needed to set &lt;strong&gt;Working Directories&lt;/strong&gt; and &lt;strong&gt;Arguments&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Working Directory&lt;/strong&gt; - Once you have selected an item, this textbox and the choose folder beside it will be enabled. Here you can change what working directory the application starts with. This may be required for some applications. By default for older groups, the working directory is the directory of the taskbar groups application. For new added shortcuts/applications, the working directory will be set as the location of the application or the directory of the target file for shortcuts. You can also manually set a loation through the &lt;strong&gt;Select Directory&lt;/strong&gt; button. Any directory that is changed manually will be checked to be valid and if the working directory is invalid, the target path will be set with the same process as if you added a new application/shortcut.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt; - Once you have selected an item, this textbox is enabled and you can type any launch arguments that you would like to include with the application on launch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dark color/Light color/Custom color&lt;/strong&gt; - Here you can select what color you want the background of your group to be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Opacity&lt;/strong&gt; - Here you can select how transparent you want the background of your application to be. The scale work from 0% (Solid color, no opacity) to 100% (Fully transparent).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Entry Name&lt;/strong&gt; - Whenever you add an application, the entry will have the text assumed from the name of the application without the extension at the end (.exe, .txt, etc.). This can be changed if you select the text directly and you can type into field. The textbox that you type in expands/shrinks based on the length of the text to make room to select the entry. The character limit here is 27 characters.&lt;/p&gt; &#xA;&lt;h4&gt;Extra Notes &lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#extra-notes&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;With fetching the icons of executables, the application will directly take the icon of the executable. With extensions, it works a little bit different. The application will try to fix the icon location for the extension to see if that exists anywhere on the system and use that if possible. If not, then the application would try to use the icon of the target file of that extension.&lt;/p&gt; &#xA;&lt;p&gt;On top of this, this works a bit differently for Microsoft App Store extensions. These extensions don&#39;t contain any sort of target path nor icon location. Here the application will try to fetch the image from the system folder where these icons are stored using the ID of the application grabbed from the extension. &lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#image-caching&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📦 Image/Icon Caching&lt;/h2&gt; &#xA;&lt;p&gt;Image/icon caching is done through recreating the icon and placing it locally in the icons folder of the group in the config folder. Here it is loaded up locally as to not waste resources to recreate the icon every time. When icons are deleted/not found, the application will display an x. The icon cache can be regenerated by simply saving the group again through the main application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#program-shortcuts&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⌨️ Program Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;When you open a group once its created through the shortcut provided, there are a list of hotkeys to make the program more easily usable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Top row numbers 1,2,3,4,5,6,7,8,9,0&lt;/strong&gt; - Opens the shortcuts at those positions respective from 1-10.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ctrl + Enter&lt;/strong&gt; - Opens all applications/shortcut within the group at once (Feature must be enabled through the settings when editing/creating the group for this to work)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tjackenpacken/taskbar-groups/master/#folder-structure&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📁 Folder Structure Documentation&lt;/h2&gt; &#xA;&lt;h4&gt;/config&lt;/h4&gt; &#xA;&lt;p&gt;In the config folder, you will have the data regarding each group that you have created.&lt;/p&gt; &#xA;&lt;h4&gt;/config/&amp;lt;Goup_Name&amp;gt;/Icons&lt;/h4&gt; &#xA;&lt;p&gt;This is the icon cache that comes with the folder. All icons of the shortcuts that you added are added into that cache. This cache will be read from when using your group to not have to fetch each individual icon every time.&lt;/p&gt; &#xA;&lt;h4&gt;/config/&amp;lt;Goup_Name&amp;gt;/GroupIcon.ico / GroupImage.png&lt;/h4&gt; &#xA;&lt;p&gt;Created image from the group icon you selected. This will be your application icon and read from when you start up the group.&lt;/p&gt; &#xA;&lt;h4&gt;/config/&amp;lt;Goup_Name&amp;gt;/ObjectData.xml&lt;/h4&gt; &#xA;&lt;p&gt;Crucial information about the shortcuts and the group itself stored inside of here. It saves your settings for the group and is important in determining what goes into the group when you open it and any other visual settings you may have configured.&lt;/p&gt; &#xA;&lt;h4&gt;/JITComp&lt;/h4&gt; &#xA;&lt;p&gt;In here stores the individual profiles for each form. Essentially these profiles are per-compiled code that the application can read from to improve loading times and responsiveness in the system.&lt;/p&gt; &#xA;&lt;h4&gt;/Shortcuts&lt;/h4&gt; &#xA;&lt;p&gt;Here is where all of your shortcuts to activate your group will go. All groups created will have their shortcut created here and after creation, you can feel free to move the shortcut or pin it to any desired locations. &lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://github.com/tjackenpacken/taskbar-groups/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/56088716/103312593-8a37ff80-49eb-11eb-91d3-75488e21a0a9.png&#34; alt=&#34;-----------------------------------------------------&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>