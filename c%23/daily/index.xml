<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:26:54Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YOLOP0wn/POSTDump</title>
    <updated>2023-09-17T01:26:54Z</updated>
    <id>tag:github.com,2023-09-17:/YOLOP0wn/POSTDump</id>
    <link href="https://github.com/YOLOP0wn/POSTDump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;POSTDump&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Another tool to perform minidump of LSASS process using few technics to avoid detection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YOLOP0wn/POSTDump/main/resources/driver.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;POSTDump is the C# / .NET implementation of the ReactOS minidump function (like nanodump), thus avoiding call to the Windows API MiniDumpWriteDump function. The dump logic code is saved under the &lt;code&gt;POSTMinidump&lt;/code&gt; project, feel free to use it for your own projects.&lt;/p&gt; &#xA;&lt;p&gt;Such as NanoDump, you can encrypt or use an invalid signature for the minidump.&lt;/p&gt; &#xA;&lt;p&gt;Usage of ProcExp driver is supported to dump/kill protected processes.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Dump LSASS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;c:\Temp&amp;gt;PostDump.exe --help&#xA;&#xA;-o, --output        Output filename [default: Machine_datetime.dmp] (fullpath handled)&#xA;&#xA;-e, --encrypt       Encrypt dump in-memory&#xA;&#xA;-s, --signature     Generate invalid Minidump signature&#xA;&#xA;--snap              Use snapshot technic&#xA;&#xA;--fork              Use fork technic [default]&#xA;&#xA;--elevate-handle    Open a handle to LSASS with low privileges and duplicate it to gain higher privileges&#xA;&#xA;--duplicate-elevate Look for existing lsass handle to duplicate and elevate&#xA;&#xA;--asr               Attempt LSASS dump using ASR bypass (win10/11/2019) (no signature/no encrypt)&#xA;&#xA;--driver            Use Process Explorer driver to open lsass handle (bypass PPL) and dump lsass&#xA;&#xA;--kill [processID]  Use Process Explorer driver to kill process and exit&#xA;&#xA;--help              Display this help screen.&#xA;&#xA;--version           Display version information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evasion&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usage of indirect syscall along with halo&#39;s gate technic to retrieve syscalls IDs&lt;/li&gt; &#xA; &lt;li&gt;No memory Allocation/Protection call is performed for indirect syscall, instead, free RWX codecave found in the current process are used&lt;/li&gt; &#xA; &lt;li&gt;ETW patching&lt;/li&gt; &#xA; &lt;li&gt;No call to MiniDumpWriteDump&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Improvements idea&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement more dump technics (seclogon, PPLMedic, Shtinkering ..)&lt;/li&gt; &#xA; &lt;li&gt;More evasion technics (callstack spoofing)&lt;/li&gt; &#xA; &lt;li&gt;Implement &lt;a href=&#34;https://github.com/gabriellandau/PPLFault&#34;&gt;Godfault&lt;/a&gt; to avoid driver usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can build using .NET Framework 4.5.1 as-is.&lt;/li&gt; &#xA; &lt;li&gt;Depending of the CLR version installed on the system where you execute PostDump, you may need to downgrade to .NET 3.5 &lt;a href=&#34;https://learn.microsoft.com/fr-fr/dotnet/framework/migration-guide/versions-and-dependencies&#34;&gt;more info here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.post.lu/business/produits-et-services/cyberforce&#34; title=&#34;Follow&#34;&gt; &lt;img width=&#34;150&#34; src=&#34;https://upload.wikimedia.org/wikipedia/de/c/c6/Post_Luxembourg_Logo_2013.png&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;I work at &lt;em&gt;POST Luxembourg&lt;/em&gt; and thank them for allocating some time for me to develop and maintain this project! Visit POST website at &lt;a href=&#34;https://www.post.lu/business/produits-et-services/cyberforce&#34;&gt;https://www.post.lu/business/produits-et-services/cyberforce&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/s4ntiago_p&#34;&gt;s4ntiago_p&lt;/a&gt; for the awesome NanoDump tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Yaxser/Backstab&#34;&gt;Yaxser&lt;/a&gt; (procexp driver)&lt;/li&gt; &#xA; &lt;li&gt;[SECFORCE] (&lt;a href=&#34;https://github.com/SECFORCE/SharpWhispers&#34;&gt;https://github.com/SECFORCE/SharpWhispers&lt;/a&gt;) for finding RWX codecave&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xAbdullah/&#34;&gt;0xAbdullah&lt;/a&gt; for &lt;a href=&#34;https://github.com/0xAbdullah/Offensive-Snippets/raw/main/C%23/PInvoke/ASR_bypass_to_dump_LSASS.cs&#34;&gt;ASR&lt;/a&gt; technic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This software has been created purely for the purposes of academic research and for the development of effective defensive techniques, and is not intended to be used to attack systems except where explicitly authorized. Project maintainers are not responsible or liable for misuse of the software. Use responsibly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gabe-k/themebleed</title>
    <updated>2023-09-17T01:26:54Z</updated>
    <id>tag:github.com,2023-09-17:/gabe-k/themebleed</id>
    <link href="https://github.com/gabe-k/themebleed" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof-of-Concept for CVE-2023-38146 (&#34;ThemeBleed&#34;)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ThemeBleed&lt;/h1&gt; &#xA;&lt;p&gt;Proof-of-Concept for CVE-2023-38146 (&#34;ThemeBleed&#34;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: ThemeBleed.exe &amp;lt;command&amp;gt;&#xA;&#xA;Commands:&#xA;        server                                   - Runs the server&#xA;        make_theme &amp;lt;host&amp;gt; &amp;lt;output path&amp;gt;          - Generates a .theme file referencing the specified host&#xA;        make_themepack &amp;lt;host&amp;gt; &amp;lt;output_path&amp;gt;      - Generates a .themepack file referencing the specified host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data files&lt;/h2&gt; &#xA;&lt;p&gt;The binaries in data correspond to the 3 files returned to the target by the PoC.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stage_1&lt;/code&gt; - An &lt;code&gt;msstyles&lt;/code&gt; file with the &lt;code&gt;PACKTHEM_VERSION&lt;/code&gt; set to 999.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stage_2&lt;/code&gt; - A valid unmodified &lt;code&gt;msstyles&lt;/code&gt; file to pass the signature check.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stage_3&lt;/code&gt; - The DLL that will be loaded and executed. The provided example simply launches &lt;code&gt;calc.exe&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To make your own payload, create a DLL with an export named &lt;code&gt;VerifyThemeVersion&lt;/code&gt; containing your code, and replace &lt;code&gt;stage_3&lt;/code&gt; with your newly created DLL.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>godotengine/godot-csharp-visualstudio</title>
    <updated>2023-09-17T01:26:54Z</updated>
    <id>tag:github.com,2023-09-17:/godotengine/godot-csharp-visualstudio</id>
    <link href="https://github.com/godotengine/godot-csharp-visualstudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Godot C# extension for Visual Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Godot C# extension for Visual Studio&lt;/h1&gt; &#xA;&lt;p&gt;Visual Studio extension for the Godot game engine C# projects.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Godot 3.2.3&lt;/strong&gt; or greater. Older versions of Godot are not supported and do not work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual Studio 2022&lt;/strong&gt;. VS 2019 or earlier are not supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visit 1.x&lt;/strong&gt; branch to get the &lt;strong&gt;Visual Studio 2019&lt;/strong&gt; supported version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugging.&lt;/li&gt; &#xA; &lt;li&gt;Launch a game directly in the Godot editor from Visual Studio.&lt;/li&gt; &#xA; &lt;li&gt;Additional code completion for Node paths, Input actions, Resource paths, Scene paths and Signal names.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTES:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A running Godot instance must be editing the project in order for code completion and the &lt;code&gt;Play in Editor&lt;/code&gt; debug target to work.&lt;/li&gt; &#xA; &lt;li&gt;Node path suggestions are provided from the currently edited scene in the Godot editor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Debug targets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Play in Editor&lt;/strong&gt;&lt;br&gt; Launches the game in the Godot editor for debugging in Visual Studio.&lt;br&gt; For this option to work, a running Godot instance must be editing the project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Launch&lt;/strong&gt;&lt;br&gt; Launches the game with a Godot executable for debugging in Visual Studio.&lt;br&gt; Before using this option, the value of the &lt;em&gt;&#34;executable&#34;&lt;/em&gt; property must be changed to a path that points to the Godot executable that will be launched.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Attach&lt;/strong&gt;&lt;br&gt; Attaches to a running Godot instance that was configured to listen for a debugger connection.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>