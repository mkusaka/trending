<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-06T01:33:54Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jbogard/Respawn</title>
    <updated>2022-11-06T01:33:54Z</updated>
    <id>tag:github.com,2022-11-06:/jbogard/Respawn</id>
    <link href="https://github.com/jbogard/Respawn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Intelligent database cleaner for integration tests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Respawn&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jbogard/Respawn/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/respawn&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/respawn.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/respawn&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/respawn.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://myget.org/gallery/respawn-ci&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/respawn-ci/v/respawn.svg?sanitize=true&#34; alt=&#34;MyGet (dev)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Respawn is a small utility to help in resetting test databases to a clean state. Instead of deleting data at the end of a test or rolling back a transaction, Respawn &lt;a href=&#34;http://lostechies.com/jimmybogard/2013/06/18/strategies-for-isolating-the-database-in-tests/&#34;&gt;resets the database back to a clean, empty state&lt;/a&gt; by intelligently deleting data from tables.&lt;/p&gt; &#xA;&lt;p&gt;To use, create a &lt;code&gt;Respawner&lt;/code&gt; and initialize with tables you want to skip, or schemas you want to keep/ignore:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var respawner = await Respawner.CreateAsync(connection, new RespawnerOptions&#xA;{&#xA;    TablesToIgnore = new Table[]&#xA;    {&#xA;        &#34;sysdiagrams&#34;,&#xA;        &#34;tblUser&#34;,&#xA;        &#34;tblObjectType&#34;,&#xA;        new Table(&#34;MyOtherSchema&#34;, &#34;MyOtherTable&#34;)&#xA;    },&#xA;    SchemasToExclude = new []&#xA;    {&#xA;        &#34;RoundhousE&#34;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to use a different database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var respawner = await Respawner.CreateAsync(connection, new RespawnerOptions&#xA;{&#xA;    SchemasToInclude = new []&#xA;    {&#xA;        &#34;public&#34;&#xA;    },&#xA;    DbAdapter = DbAdapter.Postgres&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your tests, in the fixture setup, reset to a clean state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await respawner.ResetAsync(&#34;MyConnectionStringName&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you&#39;re using a database besides SQL Server, pass an open &lt;code&gt;DbConnection&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var conn = new NpgsqlConnection(&#34;ConnectionString&#34;))&#xA;{&#xA;    await conn.OpenAsync();&#xA;&#xA;    await respawner.ResetAsync(conn);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;Respawn examines the SQL metadata intelligently to build a deterministic order of tables to delete based on foreign key relationships between tables. It navigates these relationships to build a DELETE script starting with the tables with no relationships and moving inwards until all tables are accounted for.&lt;/p&gt; &#xA;&lt;p&gt;Once this in-order list of tables is created in the &lt;code&gt;CreateAsync&lt;/code&gt; factory, the Respawner object keeps this list of tables privately so that the list of tables and the order is only calculated once.&lt;/p&gt; &#xA;&lt;p&gt;In your tests, you Reset your database before each test run. If there are any tables/schemas that you don&#39;t want to be cleared out, include these in the configuration of your RespawnerOptions.&lt;/p&gt; &#xA;&lt;p&gt;In benchmarks, a deterministic deletion of tables is faster than truncation, since truncation requires disabling or deleting foreign key constraints. Deletion results in easier test debugging/maintenance, as transaction rollbacks/post-test deletion still rely on that mechanism at the beginning of each test. If data comes in from another source, your test might fail. Respawning to a clean state assures you have a known starting point before each test.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Respawn&lt;/h3&gt; &#xA;&lt;p&gt;You should install &lt;a href=&#34;https://www.nuget.org/packages/Respawn&#34;&gt;Respawn with NuGet&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Respawn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via the .NET Core CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Respawn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command from Package Manager Console will download and install Respawn.&lt;/p&gt; &#xA;&lt;h3&gt;Local development&lt;/h3&gt; &#xA;&lt;p&gt;To install and run local dependencies needed for tests, (PostgreSQL and MySQL) install Docker for Windows and from the command line at the solution root run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will pull down the latest container images and run them. You can then run the local build/tests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NicolasConstant/BirdsiteLive</title>
    <updated>2022-11-06T01:33:54Z</updated>
    <id>tag:github.com,2022-11-06:/NicolasConstant/BirdsiteLive</id>
    <link href="https://github.com/NicolasConstant/BirdsiteLive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An ethical bridge from Twitter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/NicolasConstant/BirdsiteLive/workflows/.NET%20Core/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BirdsiteLIVE&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;BirdsiteLIVE is an ActivityPub bridge from Twitter, it&#39;s mostly a pet project/playground for me to handle ActivityPub concepts. Feel free to deploy your own instance (especially if you plan to follow a lot of users) since it use a proper Twitter API key and therefore will have limited calls ceiling (it won&#39;t scale, and it&#39;s by design).&lt;/p&gt; &#xA;&lt;h2&gt;State of development&lt;/h2&gt; &#xA;&lt;p&gt;The code is pretty messy and far from a good state, since it&#39;s a playground for me the aim was to understand some AP concepts, not provide a good state-of-the-art codebase. But I might refactor it to make it cleaner.&lt;/p&gt; &#xA;&lt;h2&gt;Official instance&lt;/h2&gt; &#xA;&lt;p&gt;You can find an official (and temporary) instance here: &lt;a href=&#34;https://beta.birdsite.live&#34;&gt;beta.birdsite.live&lt;/a&gt;. This instance can disappear at any time, if you want a long term instance you should install your own or use another one.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m providing a &lt;a href=&#34;https://hub.docker.com/r/nicolasconstant/birdsitelive&#34;&gt;docker build&lt;/a&gt;. To install it on your own server, please follow &lt;a href=&#34;https://github.com/NicolasConstant/BirdsiteLive/raw/master/INSTALLATION.md&#34;&gt;those instructions&lt;/a&gt;. More &lt;a href=&#34;https://github.com/NicolasConstant/BirdsiteLive/raw/master/VARIABLES.md&#34;&gt;options&lt;/a&gt; are also available.&lt;/p&gt; &#xA;&lt;p&gt;Also a &lt;a href=&#34;https://github.com/NicolasConstant/BirdsiteLive/raw/master/BSLManager.md&#34;&gt;CLI&lt;/a&gt; is available for adminitrative tasks.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the AGPLv3 License - see &lt;a href=&#34;https://github.com/NicolasConstant/BirdsiteLive/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;You can contact me via ActivityPub &lt;a rel=&#34;me&#34; href=&#34;https://fosstodon.org/@BirdsiteLIVE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gerardog/gsudo</title>
    <updated>2022-11-06T01:33:54Z</updated>
    <id>tag:github.com,2022-11-06:/gerardog/gsudo</id>
    <link href="https://github.com/gerardog/gsudo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Sudo for Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gsudo - a sudo for Windows&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/gsudo/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gsudo/community.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/gsudo/community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gerardog/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;CI Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gerardog/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.chocolatey.org/packages/gsudo&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/dt/gsudo?label=Chocolatey%20Downloads&#34; alt=&#34;Chocolatey Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gerardog/gsudo/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/gerardog/gsudo/total?label=GitHub%20Downloads&#34; alt=&#34;GitHub Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;gsudo&lt;/strong&gt; is a &lt;code&gt;sudo&lt;/code&gt; equivalent for Windows, with a similar user-experience as the original Unix/Linux sudo. Allows to run commands with elevated permissions, or to elevate the current shell, in the current console window or a new one.&lt;/p&gt; &#xA;&lt;p&gt;Just prepend &lt;code&gt;gsudo&lt;/code&gt; (or the &lt;code&gt;sudo&lt;/code&gt; alias) to your command and it will run elevated. One UAC popup will appear each time. You can see less popups if you enable &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#credentials-cache&#34;&gt;gsudo cache&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why use &lt;code&gt;gsudo&lt;/code&gt; instead of &lt;code&gt;some-other-sudo&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;gsudo&lt;/code&gt; is very easy to install and use. Its similarities with Unix/Linux sudo make the experience a breeze. It detects your current shell and elevates accordingly (as native shell commands). (Supports &lt;code&gt;Cmd&lt;/code&gt;, &lt;code&gt;PowerShell&lt;/code&gt;, &lt;code&gt;git-bash&lt;/code&gt;, &lt;code&gt;MinGW&lt;/code&gt;, &lt;code&gt;Cygwin&lt;/code&gt;, &lt;code&gt;Yori&lt;/code&gt;, &lt;code&gt;Take Command&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#gsudo---a-sudo-for-windows&#34;&gt;gsudo - a sudo for Windows&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#please-support-gsudo-&#34;&gt;Please support gsudo! 💵&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#usage-from-powershell--powershell-core&#34;&gt;Usage from PowerShell / PowerShell Core&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#powershell-module&#34;&gt;PowerShell Module&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#powershell-alias&#34;&gt;PowerShell Alias&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#usage-from-wsl-windows-subsystem-for-linux&#34;&gt;Usage from WSL (Windows Subsystem for Linux)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#credentials-cache&#34;&gt;Credentials Cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEW!&lt;/strong&gt; Extended documentation available at: &lt;a href=&#34;https://gerardog.github.io/gsudo/&#34;&gt;https://gerardog.github.io/gsudo/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/demo.gif&#34; alt=&#34;gsudo demo&#34;&gt; (with &lt;code&gt;gsudo config CacheMode auto&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Please support gsudo! 💵&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please consider &lt;a href=&#34;https://gerardog.github.io/gsudo/sponsor&#34;&gt;sponsoring gsudo&lt;/a&gt;. It helps to cover the yearly renewal of the code-signing certificate.&lt;/li&gt; &#xA; &lt;li&gt;No money? No problem! Please give us a star! ⭐&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Elevated commands are shown in the current console. No new window (unless you specify &lt;code&gt;-n&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#credentials-cache&#34;&gt;Credentials cache&lt;/a&gt;: &lt;code&gt;gsudo&lt;/code&gt; can elevate many times showing only one UAC pop-up if the user opts-in to enable the cache.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detects your current shell (Supports &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#usage&#34;&gt;&lt;code&gt;CMD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#usage-from-powershell--powershell-core&#34;&gt;&lt;code&gt;PowerShell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#usage-from-wsl-windows-subsystem-for-linux&#34;&gt;&lt;code&gt;WSL&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Bash for Windows&lt;/code&gt; (Git-Bash/MinGW/MSYS2/Cygwin), &lt;code&gt;Yori&lt;/code&gt;, &lt;code&gt;Take Command&lt;/code&gt; and &lt;code&gt;NuShell&lt;/code&gt;), and elevates your command correctly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports being used on scripts:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Outputs StdOut/StdErr can be piped or captured (e.g. &lt;code&gt;gsudo dir | findstr /c:&#34;bytes free&#34; &amp;gt; FreeSpace.txt&lt;/code&gt;) and exit codes too (&lt;code&gt;%errorlevel%&lt;/code&gt;). If &lt;code&gt;gsudo&lt;/code&gt; fails to elevate, the exit code will be 999.&lt;/li&gt; &#xA;   &lt;li&gt;If &lt;code&gt;gsudo&lt;/code&gt; is invoked from an already elevated console, it will just run the command (it won&#39;t fail). So, you don&#39;t have to worry if you run &lt;code&gt;gsudo&lt;/code&gt; or a script that uses &lt;code&gt;gsudo&lt;/code&gt; from an already elevated console. (The UAC popup will not appear, as no elevation is required)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gsudo !!&lt;/code&gt; elevates the last executed command. Works on CMD, Git-Bash, MinGW, Cygwin (and PowerShell with &lt;a href=&#34;https://raw.githubusercontent.com/gerardog/gsudo/master/#gsudomodule&#34;&gt;gsudo module&lt;/a&gt; only)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;gsudo&lt;/code&gt; is portable. No windows service is required or system change is done, except adding it to the Path.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt;: &lt;code&gt;scoop install gsudo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://github.com/microsoft/winget-cli/releases&#34;&gt;WinGet&lt;/a&gt; &lt;code&gt;winget install gerardog.gsudo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;Chocolatey&lt;/a&gt;: &lt;code&gt;choco install gsudo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Or manually: Unzip the latest release, and add to the path.&lt;/li&gt; &#xA; &lt;li&gt;Or running:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;PowerShell -Command &#34;Set-ExecutionPolicy RemoteSigned -scope Process; [Net.ServicePointManager]::SecurityProtocol = &#39;Tls12&#39;; iwr -useb https://raw.githubusercontent.com/gerardog/gsudo/master/installgsudo.ps1 | iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;gsudo [options]                  # Elevates your current shell&#xA;gsudo [options] {command} [args] # Runs {command} with elevated permissions&#xA;gsudo cache [on | off | help]    # Starts/Stops a credentials cache session. (less UAC popups)&#xA;gsudo status                     # Shows current user, cache and console status.&#xA;gsudo !!                         # Re-run last command as admin. (YMMV)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;New Window options:&#xA; -n | --new            # Starts the command in a new console/window (and returns immediately).&#xA; -w | --wait           # When in new console, wait for the command to end.&#xA; --keepShell           # After running a command, keep the elevated shell open.&#xA; --keepWindow          # After running a command in a new console, ask for keypress before closing the console/window.&#xA;&#xA;Security options:&#xA; -u | --user {usr}     # Run as the specified user. Asks for password. For local admins shows UAC unless &#39;-i Medium&#39;&#xA; -i | --integrity {v}  # Specify integrity level: Untrusted, Low, Medium, MediumPlus, High (default), System&#xA; -s | --system         # Run as Local System account (NT AUTHORITY\SYSTEM).&#xA; --ti                  # Run as member of NT SERVICE\TrustedInstaller&#xA; -k                    # Kills all cached credentials. The next time gsudo is run a UAC popup will be appear.&#xA;&#xA;Shell related options:&#xA; -d | --direct         # Skips Shell detection. Asume CMD shell or CMD {command}.&#xA; --loadProfile         # When elevating PowerShell commands, load user profile.&#xA;&#xA;Other options:&#xA; --loglevel {val}      # Set minimum log level to display: All, Debug, Info, Warning, Error, None&#xA; --debug               # Enable debug mode.&#xA; --copyns              # Connect network drives to the elevated user. Warning: Verbose, interactive asks for credentials&#xA; --copyev              # (deprecated) Copy environment variables to the elevated process. (not needed on default console mode)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use anywhere &lt;strong&gt;the &lt;code&gt;sudo&lt;/code&gt; alias&lt;/strong&gt; created by the installers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;gsudo   # elevates the current shell in the current console window (Supports Cmd/PowerShell/Pwsh Core/Yori/Take Command/git-bash/cygwin)&#xA;gsudo -n # launch the current shell elevated in a new console window&#xA;gsudo -n -w powershell ./Do-Something.ps1 # launch in new window and wait for exit&#xA;gsudo notepad %windir%\system32\drivers\etc\hosts # launch windows app&#xA;&#xA;sudo notepad # sudo alias built-in&#xA;&#xA;# redirect/pipe input/output/error example&#xA;gsudo dir | findstr /c:&#34;bytes free&#34; &amp;gt; FreeSpace.txt&#xA;&#xA;gsudo config LogLevel &#34;Error&#34;          # Configure Reduced logging&#xA;gsudo config Prompt &#34;$P [elevated]$G &#34; # Configure a custom Elevated Prompt&#xA;gsudo config Prompt --reset            # Reset to default value&#xA;&#xA;# Enable credentials cache (less UAC popups):&#xA;gsudo config CacheMode Auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage from PowerShell / PowerShell Core&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gsudo&lt;/code&gt; detects if invoked from PowerShell and elevates PS commands (unless &lt;code&gt;-d&lt;/code&gt; is used to elevate CMD commands).&lt;/p&gt; &#xA;&lt;p&gt;The command to elevate will ran in a different process, so it &lt;strong&gt;can&#39;t access the parent &lt;code&gt;$variables&lt;/code&gt; and scope.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are 3 possible syntaxes to elevate commands.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wrap command in {curly braces}&lt;/strong&gt;. (recommended, faster!)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;gsudo { Write-Output &#34;Hello World&#34; }&#xA;&#xA;# Pass arguments with -args&#xA;$MyString = &#34;Hello World&#34;&#xA;gsudo { Write-Output $args[0] } -args $MyString  &#xA;&#xA;# Output is serialized as PSObjects with properties.&#xA;$services = gsudo { Get-Service &#39;WSearch&#39;, &#39;Winmgmt&#39;} &#xA;Write-Output $services.DisplayName&#xA;&#xA;# Inputs too: Example elevated iteration of a list.&#xA;Get-ChildItem . | gsudo { $Input.CreationTime}&#xA;&#xA;# Syntax:&#xA;gsudo [-nwskd] [--loadProfile] &#xA;      [-u|--user {username}] [--integrity {i}] [--ti]&#xA;      { ScriptBlock } [-args $argument1[..., $argumentN]] ;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Avoids serializing the output objects if the result is not captured, which can improve performance like 100x when working with big outputs.&lt;/li&gt; &#xA;   &lt;li&gt;If { scriptblock } is ommitted, it elevates PowerShell.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Invoke-gsudo&lt;/strong&gt; wrapper function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$MyString = &#34;Hello World&#34;&#xA;Invoke-Gsudo { Write-Output $using:MyString }  &#xA;&#xA;# Syntax:&#xA;Invoke-Gsudo [-ScriptBlock] &amp;lt;ScriptBlock&amp;gt; &#xA;             [[-ArgumentList] &amp;lt;Object[]&amp;gt;] &#xA;             [-InputObject &amp;lt;PSObject&amp;gt;] &#xA;             [-LoadProfile | -NoProfile] &#xA;             [-Credential &amp;lt;PSCredential&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Native PowerShell syntax and auto serialization of inputs &amp;amp; outputs.&lt;/li&gt; &#xA;   &lt;li&gt;You can prefix variables with the &lt;code&gt;Using&lt;/code&gt; scope modifier (like &lt;code&gt;$using:variableName&lt;/code&gt;) and their serialized value is applied.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;-LoadProfile&lt;/code&gt; or &lt;code&gt;-NoProfile&lt;/code&gt; to override profile loading or not.&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;-Credential&lt;/code&gt; option for Run As User (same as &lt;code&gt;-u&lt;/code&gt; but for &lt;code&gt;Get-Credentials&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Better forwarding of your current context to the elevated instance (current Location, $ErrorActionPreference)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual string interpolation =&amp;gt; (Not recommended, character escaping hell)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Usage: gsudo &#39;string literal&#39;&#xA;&#xA;# Variable substitutions example:&#xA;$file=&#39;C:\My Secret.txt&#39;; $algorithm=&#39;md5&#39;;&#xA;$hash = gsudo &#34;(Get-FileHash &#39;$file&#39; -Algorithm $algorithm).Hash&#34;&#xA;# or &#xA;$hash = gsudo &#34;(Get-FileHash &#34;&#34;$file&#34;&#34; -Algorithm $algorithm).Hash&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Accepts a string literal with the command to elevate.&lt;/li&gt; &#xA;   &lt;li&gt;Returns a list of strings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;PowerShell Module&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a name=&#34;gsudomodule&#34;&gt;&lt;/a&gt; Optional: Import module &lt;code&gt;gsudoModule.psd1&lt;/code&gt; into your Profile:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enables &lt;code&gt;gsudo !!&lt;/code&gt; for PS&lt;/li&gt; &#xA;   &lt;li&gt;Auto-complete for &lt;code&gt;Invoke-gsudo&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;# Add the following line to your $PROFILE &#xA;Import-Module (Get-Command &#39;gsudoModule.psd1&#39;).Source&#xA;&#xA;# Or run:&#xA;Get-Command gsudoModule.psd1 | % { Write-Output &#34;`nImport-Module `&#34;$($_.Source)`&#34;&#34; | Add-Content $PROFILE }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;PowerShell Alias&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: You can create a custom alias &lt;code&gt;sudo&lt;/code&gt; for &lt;code&gt;gsudo&lt;/code&gt; or &lt;code&gt;Invoke-gsudo&lt;/code&gt; as you prefer, by adding one of these lines to your $PROFILE:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-Alias &#39;sudo&#39; &#39;gsudo&#39;&lt;/code&gt; or&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Set-Alias &#39;sudo&#39; &#39;Invoke-gsudo&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Usage from WSL (Windows Subsystem for Linux)&lt;/h3&gt; &#xA;&lt;p&gt;On WSL, elevation and &lt;code&gt;root&lt;/code&gt; are different concepts. &lt;code&gt;root&lt;/code&gt; allows full administration of WSL but not the windows system. Use WSL&#39;s native &lt;code&gt;su&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt; to gain &lt;code&gt;root&lt;/code&gt; access. To get admin privilege on the Windows box you need to elevate the WSL.EXE process. &lt;code&gt;gsudo&lt;/code&gt; allows that (a UAC popup will appear).&lt;/p&gt; &#xA;&lt;p&gt;On WSL bash, prepend &lt;code&gt;gsudo&lt;/code&gt; to elevate &lt;strong&gt;WSL commands&lt;/strong&gt; or &lt;code&gt;gsudo -d&lt;/code&gt; for &lt;strong&gt;CMD commands&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# elevate default shell&#xA;PC:~$ gsudo &#xA;&#xA;# run elevated WSL command&#xA;PC:~$ gsudo mkdir /mnt/c/Windows/MyFolder&#xA;&#xA;# run elevated Windows command&#xA;PC:~$ gsudo -d notepad C:/Windows/System32/drivers/etc/hosts&#xA;PC:~$ gsudo -d &#34;notepad C:\Windows\System32\drivers\etc\hosts&#34;&#xA;&#xA;# test for gsudo and command success&#xA;retval=$?;&#xA;if [ $retval -eq 0 ]; then&#xA;    echo &#34;Success&#34;;&#xA;elif [ $retval -eq $((999 % 256)) ]; then # gsudo failure exit code (999) is read as 231 on wsl (999 mod 256)&#xA;    echo &#34;gsudo failed to elevate!&#34;;&#xA;else&#xA;    echo &#34;Command failed with exit code $retval&#34;;&#xA;fi;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt; gsudo config                          # Show current config settings &amp;amp; values.&#xA; gsudo config {key} [--global] [value] # Read or write a user setting&#xA; gsudo config {key} [--global] --reset # Reset config to default value&#xA; --global                              # Affects all users (overrides user settings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credentials Cache&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Credentials Cache&lt;/code&gt;, if enabled and active, allows to elevate several times from a parent process with only one UAC pop-up.&lt;/p&gt; &#xA;&lt;p&gt;It is convenient, but it&#39;s safe only if you are not already hosting a malicious process: No matter how secure gsudo itself is, a malicious process could trick the allowed process (e.g. Cmd/Powershell) and force a running gsudo cache instance to elevate silently.&lt;/p&gt; &#xA;&lt;p&gt;How to use, very briefly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manually start/stop a cache session with &lt;code&gt;gsudo cache {on | off}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stop all cache sessions with &lt;code&gt;gsudo -k&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Available Cache Modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Disabled:&lt;/code&gt; Every elevation shows a UAC popup.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Explicit:&lt;/code&gt; (default) Every elevation shows a UAC popup, unless a cache session is started with &lt;code&gt;gsudo cache on&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Auto:&lt;/code&gt; Simil-unix-sudo. The first elevation shows a UAC Popup and starts a cache session automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Change Cache mode with &lt;code&gt;gsudo config CacheMode Disabled|Explicit|Auto&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gerardog.github.io/gsudo/docs/credentials-cache&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The elevated instances do not have access to the network shares connected on the non-elevated space. This is not a &lt;code&gt;gsudo&lt;/code&gt; issue but how Windows works. Use &lt;code&gt;--copyNS&lt;/code&gt; to replicate Network Shares into the elevated session, but this is not bi-directional and is interactive (may prompt for user/password).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;gsudo.exe&lt;/code&gt; can be placed on a network share and invoked as &lt;code&gt;\\server\share\gsudo {command}&lt;/code&gt; but doesn&#39;t work if your &lt;strong&gt;current&lt;/strong&gt; folder is a network drive. For example do not map &lt;code&gt;\\server\share\&lt;/code&gt; to &lt;code&gt;Z:&lt;/code&gt; and then &lt;code&gt;Z:\&amp;gt;gsudo do-something&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please report issues in the &lt;a href=&#34;https://github.com/gerardog/gsudo/issues&#34;&gt;Issues&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Why is it named &lt;code&gt;gsudo&lt;/code&gt; instead of just &lt;code&gt;sudo&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;When I created &lt;code&gt;gsudo&lt;/code&gt;, there were other &lt;code&gt;sudo&lt;/code&gt; packages on most Windows popular package managers such as &lt;code&gt;Chocolatey&lt;/code&gt; and &lt;code&gt;Scoop&lt;/code&gt;, so I had no other choice to pick another name. &lt;code&gt;gsudo&lt;/code&gt; installers create an alias for &lt;code&gt;sudo&lt;/code&gt;, so feel free to use &lt;code&gt;sudo&lt;/code&gt; on your command line to invoke &lt;code&gt;gsudo&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why did you migrated from &lt;code&gt;.Net Framework 4.6&lt;/code&gt; to &lt;code&gt;.Net Core 7.0&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;Starting from v1.4.0, it is built using &lt;code&gt;.Net 7.0&lt;/code&gt; NativeAOT. It loads faster and uses less memory, and runs on machines without any .Net runtime installed. Prior versions &lt;code&gt;&amp;lt;v1.3.0&lt;/code&gt; used .Net 4.6, because it was included in every Windows 10/11 installation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Is &lt;code&gt;gsudo&lt;/code&gt; a port of &lt;code&gt;*nix sudo&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;No. &lt;code&gt;gsudo&lt;/code&gt; reminds of the original sudo regarding user expectations. Many &lt;code&gt;sudo&lt;/code&gt; features are &lt;code&gt;*nix&lt;/code&gt; specific and could never have a &lt;code&gt;Windows&lt;/code&gt; counterpart. Other features (such as &lt;code&gt;sudoers&lt;/code&gt;) could potentially be implemented but are not at this point.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does it work in Windows 7/8?&lt;/p&gt; &lt;p&gt;Yes, it works from Win7 SP1 onwards, except the credentials cache.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I return to the previous security level after using gsudo?&lt;/p&gt; &lt;p&gt;In the same way as you would with &lt;code&gt;Unix/Linux sudo&lt;/code&gt;: &lt;code&gt;gsudo&lt;/code&gt; does not alter the current process, instead it launches a new process with different permissions/integrity level. To go back to the previous level, just end the new process. For &lt;code&gt;Command Prompt&lt;/code&gt; or &lt;code&gt;PowerShell&lt;/code&gt; just type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>