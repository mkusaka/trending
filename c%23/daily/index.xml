<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-30T01:29:38Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SimonCropp/Delta</title>
    <updated>2024-11-30T01:29:38Z</updated>
    <id>tag:github.com,2024-11-30:/SimonCropp/Delta</id>
    <link href="https://github.com/SimonCropp/Delta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An approach to implementing a 304 Not Modified leveraging SqlServer change tracking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/icon.png&#34; height=&#34;30px&#34;&gt; Delta&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/SimonCropp/Delta&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/20t96gnsmysklh09/branch/main?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Delta/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Delta.svg?label=Delta&#34; alt=&#34;NuGet Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Delta.EF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Delta.EF.svg?label=Delta.EF&#34; alt=&#34;NuGet Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Delta is an approach to implementing a &lt;a href=&#34;https://www.keycdn.com/support/304-not-modified&#34;&gt;304 Not Modified&lt;/a&gt; leveraging SqlServer change tracking&lt;/p&gt; &#xA;&lt;p&gt;The approach uses a last updated timestamp from the database to generate an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag&#34;&gt;ETag&lt;/a&gt;. All dynamic requests then have that ETag checked/applied.&lt;/p&gt; &#xA;&lt;p&gt;This approach works well when the frequency of updates is relatively low. In this scenario, the majority of requests will leverage the result in a 304 Not Modified being returned and the browser loading the content its cache.&lt;/p&gt; &#xA;&lt;p&gt;Effectively consumers will always receive the most current data, while the load on the server remains low.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/milestones?state=closed&#34;&gt;Milestones&lt;/a&gt; for release notes.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Assumptions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Frequency of updates to data is relatively low compared to reads&lt;/li&gt; &#xA; &lt;li&gt;Using either &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/relational-databases/track-changes/track-data-changes-sql-server&#34;&gt;SQL Server Change Tracking&lt;/a&gt; and/or &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/t-sql/data-types/rowversion-transact-sql&#34;&gt;SQL Server Row Versioning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;304 Not Modified Flow&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;    Request&#xA;    CalculateEtag[Calculate current ETag&amp;lt;br/&amp;gt;based on timestamp&amp;lt;br/&amp;gt;from web assembly and SQL]&#xA;    IfNoneMatch{Has&amp;lt;br/&amp;gt;If-None-Match&amp;lt;br/&amp;gt;header?}&#xA;    EtagMatch{Current&amp;lt;br/&amp;gt;Etag matches&amp;lt;br/&amp;gt;If-None-Match?}&#xA;    AddETag[Add current ETag&amp;lt;br/&amp;gt;to Response headers]&#xA;    304[Respond with&amp;lt;br/&amp;gt;304 Not-Modified]&#xA;    Request --&amp;gt; CalculateEtag&#xA;    CalculateEtag --&amp;gt; IfNoneMatch&#xA;    IfNoneMatch --&amp;gt;|Yes| EtagMatch&#xA;    IfNoneMatch --&amp;gt;|No| AddETag&#xA;    EtagMatch --&amp;gt;|No| AddETag&#xA;    EtagMatch --&amp;gt;|Yes| 304&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ETag calculation logic&lt;/h2&gt; &#xA;&lt;p&gt;The ETag is calculated from a combination several parts&lt;/p&gt; &#xA;&lt;h4&gt;AssemblyWriteTime&lt;/h4&gt; &#xA;&lt;p&gt;The last write time of the web entry point assembly&lt;/p&gt; &#xA;&lt;!-- snippet: AssemblyWriteTime --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-AssemblyWriteTime&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var webAssemblyLocation = Assembly.GetEntryAssembly()!.Location;&#xA;AssemblyWriteTime = File.GetLastWriteTime(webAssemblyLocation).Ticks.ToString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Shared.cs#L38-L43&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-AssemblyWriteTime&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h4&gt;SQL timestamp&lt;/h4&gt; &#xA;&lt;p&gt;A combination of &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/relational-databases/system-functions/change-tracking-current-version-transact-sql&#34;&gt;change_tracking_current_version&lt;/a&gt; (if tracking is enabled) and &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/t-sql/functions/dbts-transact-sql&#34;&gt;@@DBTS (row version timestamp)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- snippet: SqlTimestamp --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-SqlTimestamp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;declare @changeTracking bigint = change_tracking_current_version();&#xA;declare @timeStamp bigint = convert(bigint, @@dbts);&#xA;&#xA;if (@changeTracking is null)&#xA;  select cast(@timeStamp as varchar)&#xA;else&#xA;  select cast(@timeStamp as varchar) + &#39;-&#39; + cast(@changeTracking as varchar)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L189-L197&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-SqlTimestamp&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h4&gt;Suffix&lt;/h4&gt; &#xA;&lt;p&gt;An optional string suffix that is dynamically calculated at runtime based on the current &lt;code&gt;HttpContext&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- snippet: Suffix --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-Suffix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var app = builder.Build();&#xA;app.UseDelta(suffix: httpContext =&amp;gt; &#34;MySuffix&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L9-L14&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-Suffix&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Combining the above&lt;/h3&gt; &#xA;&lt;!-- snippet: BuildEtag --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-BuildEtag&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;internal static string BuildEtag(string timeStamp, string? suffix)&#xA;{&#xA;    if (suffix == null)&#xA;    {&#xA;        return $&#34;\&#34;{AssemblyWriteTime}-{timeStamp}\&#34;&#34;;&#xA;    }&#xA;&#xA;    return $&#34;\&#34;{AssemblyWriteTime}-{timeStamp}-{suffix}\&#34;&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Shared.cs#L130-L142&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-BuildEtag&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h2&gt;NuGet&lt;/h2&gt; &#xA;&lt;p&gt;Delta is shipped as two nugets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuget.org/packages/Delta/&#34;&gt;Delta&lt;/a&gt;: Delivers functionality using SqlConnection and SqlTransaction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuget.org/packages/Delta.EF/&#34;&gt;Delta.EF&lt;/a&gt;: Delivers functionality using &lt;a href=&#34;https://learn.microsoft.com/en-us/ef/core/providers/sql-server/?tabs=dotnet-core-cli&#34;&gt;SQL Server EF Database Provider&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only one of the above should be used.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;DB Schema&lt;/h3&gt; &#xA;&lt;p&gt;Ensure &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/relational-databases/track-changes/track-data-changes-sql-server&#34;&gt;SQL Server Change Tracking&lt;/a&gt; and/or &lt;a href=&#34;https://learn.microsoft.com/en-us/sql/t-sql/data-types/rowversion-transact-sql&#34;&gt;SQL Server Row Versioning&lt;/a&gt; is enabled for all relevant tables.&lt;/p&gt; &#xA;&lt;p&gt;Example SQL schema:&lt;/p&gt; &#xA;&lt;!-- snippet: Usage.Schema.verified.sql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-Usage.Schema.verified.sql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Tables&#xA;&#xA;CREATE TABLE [dbo].[Companies](&#xA;&#x9;[Id] [uniqueidentifier] NOT NULL,&#xA;&#x9;[RowVersion] [timestamp] NOT NULL,&#xA;&#x9;[Content] [nvarchar](max) NULL,&#xA; CONSTRAINT [PK_Companies] PRIMARY KEY CLUSTERED &#xA;(&#xA;&#x9;[Id] ASC&#xA;) ON [PRIMARY]&#xA;) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]&#xA;&#xA;CREATE TABLE [dbo].[Employees](&#xA;&#x9;[Id] [uniqueidentifier] NOT NULL,&#xA;&#x9;[RowVersion] [timestamp] NOT NULL,&#xA;&#x9;[CompanyId] [uniqueidentifier] NOT NULL,&#xA;&#x9;[Content] [nvarchar](max) NULL,&#xA;&#x9;[Age] [int] NOT NULL,&#xA; CONSTRAINT [PK_Employees] PRIMARY KEY CLUSTERED &#xA;(&#xA;&#x9;[Id] ASC&#xA;) ON [PRIMARY]&#xA;) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]&#xA;&#xA;CREATE NONCLUSTERED INDEX [IX_Employees_CompanyId] ON [dbo].[Employees]&#xA;(&#xA;&#x9;[CompanyId] ASC&#xA;) ON [PRIMARY]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.Schema.verified.sql#L1-L28&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-Usage.Schema.verified.sql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Add to WebApplicationBuilder&lt;/h3&gt; &#xA;&lt;!-- snippet: UseDelta --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-UseDelta&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var builder = WebApplication.CreateBuilder();&#xA;builder.Services.AddScoped(_ =&amp;gt; new SqlConnection(connectionString));&#xA;var app = builder.Build();&#xA;app.UseDelta();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/WebApplication/Program.cs#L10-L17&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-UseDelta&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Add to a Route Group&lt;/h3&gt; &#xA;&lt;p&gt;To add to a specific &lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers#route-groups&#34;&gt;Route Group&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;!-- snippet: UseDeltaMapGroup --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-UseDeltaMapGroup&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;app.MapGroup(&#34;/group&#34;)&#xA;    .UseDelta()&#xA;    .MapGet(&#34;/&#34;, () =&amp;gt; &#34;Hello Group!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/WebApplication/Program.cs#L58-L64&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-UseDeltaMapGroup&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;ShouldExecute&lt;/h3&gt; &#xA;&lt;p&gt;Optionally control what requests Delta is executed on.&lt;/p&gt; &#xA;&lt;!-- snippet: ShouldExecute --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-ShouldExecute&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var app = builder.Build();&#xA;app.UseDelta(&#xA;    shouldExecute: httpContext =&amp;gt;&#xA;    {&#xA;        var path = httpContext.Request.Path.ToString();&#xA;        return path.Contains(&#34;match&#34;);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L19-L29&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-ShouldExecute&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Custom Connection discovery&lt;/h3&gt; &#xA;&lt;p&gt;By default, Delta uses &lt;code&gt;HttpContext.RequestServices&lt;/code&gt; to discover the SqlConnection and SqlTransaction:&lt;/p&gt; &#xA;&lt;!-- snippet: DiscoverConnection --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-DiscoverConnection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;static Connection DiscoverConnection(HttpContext httpContext)&#xA;{&#xA;    var provider = httpContext.RequestServices;&#xA;    var connection = provider.GetRequiredService&amp;lt;SqlConnection&amp;gt;();&#xA;    var transaction = provider.GetService&amp;lt;SqlTransaction&amp;gt;();&#xA;    return new(connection, transaction);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Middleware.cs#L41-L51&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-DiscoverConnection&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;To use custom connection discovery:&lt;/p&gt; &#xA;&lt;!-- snippet: CustomDiscoveryConnection --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-CustomDiscoveryConnection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var application = webApplicationBuilder.Build();&#xA;application.UseDelta(&#xA;    getConnection: httpContext =&amp;gt; httpContext.RequestServices.GetRequiredService&amp;lt;SqlConnection&amp;gt;());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L200-L206&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-CustomDiscoveryConnection&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;To use custom connection and transaction discovery:&lt;/p&gt; &#xA;&lt;!-- snippet: CustomDiscoveryConnectionAndTransaction --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-CustomDiscoveryConnectionAndTransaction&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var webApplication = webApplicationBuilder.Build();&#xA;webApplication.UseDelta(&#xA;    getConnection: httpContext =&amp;gt;&#xA;    {&#xA;        var provider = httpContext.RequestServices;&#xA;        var sqlConnection = provider.GetRequiredService&amp;lt;SqlConnection&amp;gt;();&#xA;        var sqlTransaction = provider.GetService&amp;lt;SqlTransaction&amp;gt;();&#xA;        return new(sqlConnection, sqlTransaction);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L211-L223&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-CustomDiscoveryConnectionAndTransaction&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h2&gt;EF Usage&lt;/h2&gt; &#xA;&lt;h3&gt;DbContext using RowVersion&lt;/h3&gt; &#xA;&lt;p&gt;Enable row versioning in Entity Framework&lt;/p&gt; &#xA;&lt;!-- snippet: SampleDbContext.cs --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-SampleDbContext.cs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class SampleDbContext(DbContextOptions options) :&#xA;    DbContext(options)&#xA;{&#xA;    public DbSet&amp;lt;Employee&amp;gt; Employees { get; set; } = null!;&#xA;    public DbSet&amp;lt;Company&amp;gt; Companies { get; set; } = null!;&#xA;&#xA;    protected override void OnModelCreating(ModelBuilder builder)&#xA;    {&#xA;        var company = builder.Entity&amp;lt;Company&amp;gt;();&#xA;        company.HasKey(_ =&amp;gt; _.Id);&#xA;        company&#xA;            .HasMany(_ =&amp;gt; _.Employees)&#xA;            .WithOne(_ =&amp;gt; _.Company)&#xA;            .IsRequired();&#xA;        company&#xA;            .Property(_ =&amp;gt; _.RowVersion)&#xA;            .IsRowVersion()&#xA;            .HasConversion&amp;lt;byte[]&amp;gt;();&#xA;&#xA;        var employee = builder.Entity&amp;lt;Employee&amp;gt;();&#xA;        employee.HasKey(_ =&amp;gt; _.Id);&#xA;        employee&#xA;            .Property(_ =&amp;gt; _.RowVersion)&#xA;            .IsRowVersion()&#xA;            .HasConversion&amp;lt;byte[]&amp;gt;();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/WebApplicationEF/DataContext/SampleDbContext.cs#L1-L27&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-SampleDbContext.cs&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Add to WebApplicationBuilder&lt;/h3&gt; &#xA;&lt;!-- snippet: UseDeltaEF --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-UseDeltaEF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var builder = WebApplication.CreateBuilder();&#xA;builder.Services.AddSqlServer&amp;lt;SampleDbContext&amp;gt;(database.ConnectionString);&#xA;var app = builder.Build();&#xA;app.UseDelta&amp;lt;SampleDbContext&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/WebApplicationEF/Program.cs#L7-L14&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-UseDeltaEF&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Add to a Route Group&lt;/h3&gt; &#xA;&lt;p&gt;To add to a specific &lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers#route-groups&#34;&gt;Route Group&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;!-- snippet: UseDeltaMapGroupEF --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-UseDeltaMapGroupEF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;app.MapGroup(&#34;/group&#34;)&#xA;    .UseDelta&amp;lt;SampleDbContext&amp;gt;()&#xA;    .MapGet(&#34;/&#34;, () =&amp;gt; &#34;Hello Group!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/WebApplicationEF/Program.cs#L38-L44&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-UseDeltaMapGroupEF&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;ShouldExecute&lt;/h3&gt; &#xA;&lt;p&gt;Optionally control what requests Delta is executed on.&lt;/p&gt; &#xA;&lt;!-- snippet: ShouldExecuteEF --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-ShouldExecuteEF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var app = builder.Build();&#xA;app.UseDelta&amp;lt;SampleDbContext&amp;gt;(&#xA;    shouldExecute: httpContext =&amp;gt;&#xA;    {&#xA;        var path = httpContext.Request.Path.ToString();&#xA;        return path.Contains(&#34;match&#34;);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta.EFTests/Usage.cs#L16-L26&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-ShouldExecuteEF&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h2&gt;UseResponseDiagnostics&lt;/h2&gt; &#xA;&lt;p&gt;Response diagnostics is an opt-in feature that includes extra log information in the response headers.&lt;/p&gt; &#xA;&lt;p&gt;Enable by setting UseResponseDiagnostics to true at startup:&lt;/p&gt; &#xA;&lt;!-- snippet: UseResponseDiagnostics --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-UseResponseDiagnostics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;DeltaExtensions.UseResponseDiagnostics = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/ModuleInitializer.cs#L6-L10&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-UseResponseDiagnostics&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Response diagnostics headers are prefixed with &lt;code&gt;Delta-&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example Response header when the Request has not &lt;code&gt;If-None-Match&lt;/code&gt; header.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta-No304.png&#34;&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;Utility methods for working with databases using the Delta conventions.&lt;/p&gt; &#xA;&lt;h3&gt;GetLastTimeStamp&lt;/h3&gt; &#xA;&lt;h4&gt;For a &lt;code&gt;SqlConnection&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;!-- snippet: GetLastTimeStampSqlConnection --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-GetLastTimeStampSqlConnection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var timeStamp = await sqlConnection.GetLastTimeStamp();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L60-L64&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-GetLastTimeStampSqlConnection&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h4&gt;For a &lt;code&gt;DbContext&lt;/code&gt;:&lt;/h4&gt; &#xA;&lt;!-- snippet: GetLastTimeStampEF --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-GetLastTimeStampEF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var timeStamp = await dbContext.GetLastTimeStamp();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta.EFTests/Usage.cs#L55-L59&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-GetLastTimeStampEF&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;GetDatabasesWithTracking&lt;/h3&gt; &#xA;&lt;p&gt;Get a list of all databases with change tracking enabled.&lt;/p&gt; &#xA;&lt;!-- snippet: GetDatabasesWithTracking --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-GetDatabasesWithTracking&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var trackedDatabases = await sqlConnection.GetTrackedDatabases();&#xA;foreach (var db in trackedDatabases)&#xA;{&#xA;    Trace.WriteLine(db);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L98-L106&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-GetDatabasesWithTracking&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Uses the following SQL:&lt;/p&gt; &#xA;&lt;!-- snippet: GetTrackedDatabasesSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-GetTrackedDatabasesSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;select d.name&#xA;from sys.databases as d inner join&#xA;  sys.change_tracking_databases as t on&#xA;  t.database_id = d.database_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L140-L145&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-GetTrackedDatabasesSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;GetTrackedTables&lt;/h3&gt; &#xA;&lt;p&gt;Get a list of all tracked tables in database.&lt;/p&gt; &#xA;&lt;!-- snippet: GetTrackedTables --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-GetTrackedTables&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var trackedTables = await sqlConnection.GetTrackedTables();&#xA;foreach (var db in trackedTables)&#xA;{&#xA;    Trace.WriteLine(db);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L124-L132&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-GetTrackedTables&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Uses the following SQL:&lt;/p&gt; &#xA;&lt;!-- snippet: GetTrackedTablesSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-GetTrackedTablesSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;select t.Name&#xA;from sys.tables as t left join&#xA;  sys.change_tracking_tables as c on t.[object_id] = c.[object_id]&#xA;where c.[object_id] is not null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L76-L81&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-GetTrackedTablesSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;IsTrackingEnabled&lt;/h3&gt; &#xA;&lt;p&gt;Determine if change tracking is enabled for a database.&lt;/p&gt; &#xA;&lt;!-- snippet: IsTrackingEnabled --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-IsTrackingEnabled&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var isTrackingEnabled = await sqlConnection.IsTrackingEnabled();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L189-L193&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-IsTrackingEnabled&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Uses the following SQL:&lt;/p&gt; &#xA;&lt;!-- snippet: IsTrackingEnabledSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-IsTrackingEnabledSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;select count(d.name)&#xA;from sys.databases as d inner join&#xA;  sys.change_tracking_databases as t on&#xA;  t.database_id = d.database_id&#xA;where d.name = &#39;{database}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L97-L103&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-IsTrackingEnabledSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;EnableTracking&lt;/h3&gt; &#xA;&lt;p&gt;Enable change tracking for a database.&lt;/p&gt; &#xA;&lt;!-- snippet: EnableTracking --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-EnableTracking&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;await sqlConnection.EnableTracking();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L183-L187&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-EnableTracking&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Uses the following SQL:&lt;/p&gt; &#xA;&lt;!-- snippet: EnableTrackingSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-EnableTrackingSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;alter database {database}&#xA;set change_tracking = on&#xA;(&#xA;  change_retention = {retentionDays} days,&#xA;  auto_cleanup = on&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L61-L68&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-EnableTrackingSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;DisableTracking&lt;/h3&gt; &#xA;&lt;p&gt;Disable change tracking for a database and all tables within that database.&lt;/p&gt; &#xA;&lt;!-- snippet: DisableTracking --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-DisableTracking&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;await sqlConnection.DisableTracking();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L168-L172&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-DisableTracking&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Uses the following SQL:&lt;/p&gt; &#xA;&lt;h4&gt;For disabling tracking on a database:&lt;/h4&gt; &#xA;&lt;!-- snippet: DisableTrackingSqlDB --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-DisableTrackingSqlDB&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;alter database [{database}] set change_tracking = off;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L126-L128&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-DisableTrackingSqlDB&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h4&gt;For disabling tracking on tables:&lt;/h4&gt; &#xA;&lt;!-- snippet: DisableTrackingSqlTable --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-DisableTrackingSqlTable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;alter table [{table}] disable change_tracking;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L118-L120&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-DisableTrackingSqlTable&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;SetTrackedTables&lt;/h3&gt; &#xA;&lt;p&gt;Enables change tracking for all tables listed, and disables change tracking for all tables not listed.&lt;/p&gt; &#xA;&lt;!-- snippet: SetTrackedTables --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-SetTrackedTables&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;await sqlConnection.SetTrackedTables([&#34;Companies&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/DeltaTests/Usage.cs#L118-L122&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-SetTrackedTables&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Uses the following SQL:&lt;/p&gt; &#xA;&lt;h4&gt;For enabling tracking on a database:&lt;/h4&gt; &#xA;&lt;!-- snippet: EnableTrackingSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-EnableTrackingSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;alter database {database}&#xA;set change_tracking = on&#xA;(&#xA;  change_retention = {retentionDays} days,&#xA;  auto_cleanup = on&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L61-L68&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-EnableTrackingSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h4&gt;For enabling tracking on tables:&lt;/h4&gt; &#xA;&lt;!-- snippet: EnableTrackingTableSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-EnableTrackingTableSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;alter table [{table}] enable change_tracking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L24-L26&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-EnableTrackingTableSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h4&gt;For disabling tracking on tables:&lt;/h4&gt; &#xA;&lt;!-- snippet: DisableTrackingTableSql --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;snippet-DisableTrackingTableSql&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;alter table [{table}] disable change_tracking;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/src/Delta/DeltaExtensions_Sql.cs#L33-L35&#34; title=&#34;Snippet source file&#34;&gt;snippet source&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/SimonCropp/Delta/main/#snippet-DisableTrackingTableSql&#34; title=&#34;Start of snippet&#34;&gt;anchor&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h2&gt;Programmatic client usage&lt;/h2&gt; &#xA;&lt;p&gt;Delta is primarily designed to support web browsers as a client. All web browsers have the necessary 304 and caching functionally required.&lt;/p&gt; &#xA;&lt;p&gt;In the scenario where web apis (that support using 304) are being consumed using .net as a client, consider using one of the below extensions to cache responses.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SimonCropp/Replicant&#34;&gt;Replicant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tavis-software/Tavis.HttpCache&#34;&gt;Tavis.HttpCache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aliostad/CacheCow&#34;&gt;CacheCow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jamesmontemagno/monkey-cache&#34;&gt;Monkey Cache&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Icon&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thenounproject.com/term/estuary/1847616/&#34;&gt;Estuary&lt;/a&gt; designed by &lt;a href=&#34;https://thenounproject.com/Asphaleia/&#34;&gt;Daan&lt;/a&gt; from &lt;a href=&#34;https://thenounproject.com&#34;&gt;The Noun Project&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>