<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-11T01:27:27Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AnnulusGames/MagicTween</title>
    <updated>2023-09-11T01:27:27Z</updated>
    <id>tag:github.com,2023-09-11:/AnnulusGames/MagicTween</id>
    <link href="https://github.com/AnnulusGames/MagicTween" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extremely fast tween library implemented in Unity ECS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Magic Tween&lt;/h1&gt; &#xA;&lt;p&gt;Extremely fast tween library implemented in Unity ECS&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/MagicTween/raw/main/MagicTween/Assets/MagicTween/Documentation~/Header.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LICENSE-MIT-green.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/README_JP.md&#34;&gt;日本語版READMEはこちら&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Magic Tween is a high-performance tweening library implemented in Unity Entity Component System (ECS).&lt;/p&gt; &#xA;&lt;p&gt;In addition to powerful tweening functionality compatible with traditional components, it also offers even higher-performance APIs for ECS.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#samples&#34;&gt;Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#basic-usage&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#tweening-custom-value&#34;&gt;Tweening Custom Value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#tween-control&#34;&gt;Tween Control&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#getting-tween-information&#34;&gt;Getting Tween Information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#adding-settings&#34;&gt;Adding Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#callbacks&#34;&gt;Callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#delayedcall--empty&#34;&gt;DelayedCall / Empty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#sequence&#34;&gt;Sequence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#project-settings&#34;&gt;Project Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#textmesh-pro&#34;&gt;TextMesh Pro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#unirx&#34;&gt;UniRx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#unitask&#34;&gt;UniTask&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#implementation-for-ecs&#34;&gt;Implementation for ECS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#other-features&#34;&gt;Other Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#experimental-features&#34;&gt;Experimental Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#known-issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High-performance tweening library implemented in ECS.&lt;/li&gt; &#xA; &lt;li&gt;Add extension methods compatible with many components.&lt;/li&gt; &#xA; &lt;li&gt;Tween anything with Tween.To.&lt;/li&gt; &#xA; &lt;li&gt;Apply various settings using method chaining.&lt;/li&gt; &#xA; &lt;li&gt;Create complex animations with Sequences.&lt;/li&gt; &#xA; &lt;li&gt;Add processing via callbacks.&lt;/li&gt; &#xA; &lt;li&gt;Support for tweening TextMesh Pro.&lt;/li&gt; &#xA; &lt;li&gt;Support for conversion to Observable with UniRx.&lt;/li&gt; &#xA; &lt;li&gt;Support for async/await with UniTask.&lt;/li&gt; &#xA; &lt;li&gt;Even higher-performance implementation for ECS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/MagicTween/raw/main/MagicTween.Benchmarks/Assets/Documentation~/benchmark_64000_floats.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;p&gt;When tweening float values of regular classes using &lt;code&gt;Tween.To()&lt;/code&gt;, Magic Tween operates more than 2 to 5 times faster than other libraries.&lt;/p&gt; &#xA;&lt;p&gt;When tweening float values within ECS components using &lt;code&gt;Tween.Entity.To()&lt;/code&gt;, it is possible to achieve even higher performance.&lt;/p&gt; &#xA;&lt;p&gt;For more details on performance, please refer to the &lt;a href=&#34;https://github.com/AnnulusGames/MagicTween/raw/main/MagicTween.Benchmarks/README.md&#34;&gt;README&lt;/a&gt; in the &lt;code&gt;MagicTween.Benchmarks&lt;/code&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MagicTween.Samples&lt;/code&gt; project includes several samples implemented using Magic Tween. For more details, please refer to the &lt;a href=&#34;https://github.com/AnnulusGames/MagicTween/raw/main/MagicTween.Samples/README.md&#34;&gt;README&lt;/a&gt; in the project.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Requirement&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unity 2022.1 or higher&lt;/li&gt; &#xA; &lt;li&gt;Entities 1.0.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;Burst 1.8.8 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Package Manager from Window &amp;gt; Package Manager&lt;/li&gt; &#xA; &lt;li&gt;&#34;+&#34; button &amp;gt; Add package from git URL&lt;/li&gt; &#xA; &lt;li&gt;Enter the following to install&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/AnnulusGames/MagicTween.git?path=/MagicTween/Assets/MagicTween&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or open Packages/manifest.json and add the following to the dependencies block.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;dependencies&#34;: {&#xA;        &#34;com.annulusgames.magic-tween&#34;: &#34;https://github.com/AnnulusGames/MagicTween.git?path=/MagicTween/Assets/MagicTween&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;By introducing Magic Tween, numerous extension methods for creating tweens on traditional Unity components are added. Below is an example of animating the position of a Transform using these extension methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Move from the current position to (1, 2, 3) over 5 seconds&#xA;transform.TweenPosition(&#xA;    new Vector3(1f, 2f, 3f), // Target value&#xA;    5f // Duration of the change&#xA;);&#xA;&#xA;// Move from (0, 0, 0) to (1, 2, 3) over 5 seconds&#xA;transform.TweenPosition(&#xA;    new Vector3(0f, 0f, 0f), // Starting value&#xA;    new Vector3(1f, 2f, 3f), // Target value&#xA;    5f // Duration of the change&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Do not play multiple tweens on the same parameter simultaneously. This can lead to unexpected behavior due to overlapping value changes. (Tweens on different axes, such as TweenPositionX and TweenPositionY, will work.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Creating tweens in the editor is not supported.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Extension Methods&lt;/h3&gt; &#xA;&lt;p&gt;Magic Tween provides extension methods for most components included in Unity. These extension methods allow for more concise and optimized code compared to &lt;code&gt;Tween.To()&lt;/code&gt;. It&#39;s recommended to use extension methods when available.&lt;/p&gt; &#xA;&lt;p&gt;You can find a list of available extension methods &lt;a href=&#34;https://github.com/AnnulusGames/MagicTween/wiki&#34;&gt;here&lt;/a&gt; (a wiki is currently being created).&lt;/p&gt; &#xA;&lt;h3&gt;Classification&lt;/h3&gt; &#xA;&lt;p&gt;The extension methods added for tweening are classified into several categories:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method Name&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tween...&lt;/td&gt; &#xA;   &lt;td&gt;Creates a tween for a specific field/property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Punch...&lt;/td&gt; &#xA;   &lt;td&gt;Creates a tween that vibrates the value of a specific field/property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shake...&lt;/td&gt; &#xA;   &lt;td&gt;Creates a tween that randomly shakes the value of a specific field/property.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set...&lt;/td&gt; &#xA;   &lt;td&gt;Adds settings to customize the tween&#39;s behavior.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;On...&lt;/td&gt; &#xA;   &lt;td&gt;Adds callbacks at specific points during the tween.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tweening Custom Value&lt;/h2&gt; &#xA;&lt;p&gt;You can animate custom value using the &lt;code&gt;Tween.To()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;float foo;&#xA;&#xA;float endValue = 10f;&#xA;float duration = 2f;&#xA;&#xA;Tween.To(&#xA;    () =&amp;gt; foo,&#xA;    x =&amp;gt; foo = x,&#xA;    endValue,&#xA;    duration&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use only values without defining variables, you can use &lt;code&gt;Tween.FromTo()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;float startValue = 0f;&#xA;float endValue = 10f;&#xA;float duration = 2f;&#xA;&#xA;Tween.FromTo(&#xA;    x =&amp;gt; Debug.Log(&#34;current value: &#34; + x),&#xA;    startValue,&#xA;    endValue,&#xA;    duration&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create tweens that follow a curve passing through multiple points using &lt;code&gt;Tween.Path()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Vector3 foo;&#xA;&#xA;Vector3[] points;&#xA;float duration = 2f;&#xA;&#xA;Tween.Path(&#xA;    () =&amp;gt; foo,&#xA;    x =&amp;gt; foo = x,&#xA;    points,&#xA;    duration&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Avoiding Allocations&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;To&lt;/code&gt; and &lt;code&gt;FromTo&lt;/code&gt; methods mentioned above cause allocations because they capture external variables. To reduce unnecessary allocations when performing tweens on an object, you can specify the target object as the first argument to avoid lambda expression allocations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// A class with a field named &#39;foo&#39;&#xA;ExampleClass target;&#xA;&#xA;float endValue = 10f;&#xA;float duration = 2f;&#xA;&#xA;// Pass the object as the first argument to avoid allocations&#xA;Tween.To(&#xA;    target,&#xA;    obj =&amp;gt; obj.foo,&#xA;    (obj, x) =&amp;gt; obj.foo = x,&#xA;    endValue,&#xA;    duration&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tween Control&lt;/h2&gt; &#xA;&lt;p&gt;In general, created tweens play and are destroyed automatically, so there&#39;s no need for explicit control. However, there are situations where manual control is necessary, such as when dealing with tweens that loop indefinitely. In such cases, you can control tweens through the &lt;code&gt;Tween&lt;/code&gt; struct:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Tween tween = transform.TweenPosition(Vector3.up, 2f);&#xA;&#xA;// Start/resume the tween&#xA;tween.Play();&#xA;&#xA;// Pause the tween&#xA;tween.Pause();&#xA;&#xA;// Restart the tween from the beginning&#xA;tween.Restart();&#xA;&#xA;// Complete the tween&#xA;tween.Complete();&#xA;&#xA;// Kill the tween&#xA;tween.Kill();&#xA;&#xA;// Complete and kill the tween&#xA;tween.CompleteAndKill();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also perform operations on all playing tweens collectively. If you specify an ID as an argument, you can target only the tweens with matching IDs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Kill all playing tweens&#xA;Tween.KillAll();&#xA;&#xA;// Complete all tweens with an ID of 1&#xA;Tween.CompleteAll(1);&#xA;&#xA;// Pause all tweens with an ID of &#34;Alpha&#34;&#xA;Tween.PauseAll(&#34;Alpha&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Tween Information&lt;/h2&gt; &#xA;&lt;p&gt;You can check if a tween is currently active using &lt;code&gt;IsActive()&lt;/code&gt;. When performing operations on tweens, it&#39;s a good practice to check for activity, especially when there&#39;s a possibility that the tween may not be active:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Kill the tween if it&#39;s active&#xA;if (tween.IsActive()) tween.Kill();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve the duration of a tween using &lt;code&gt;GetDuration()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;float duration = tween.GetDuration();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding Settings&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the behavior of a tween using the Set methods. These methods can be chained together for concise code. The following code is an example of applying custom settings to a tween:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;transform.TweenLocalScale(Vector3.one * 2f, 5f)&#xA;    .SetEase(Ease.OutSine) // Set the easing function to OutSine&#xA;    .SetLoops(3, LoopType.Restart) // Repeat 3 times with restart behavior&#xA;    .SetDelay(1f); // Delay the start by 1 second&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SetEase&lt;/h3&gt; &#xA;&lt;p&gt;Sets the easing function to use for the tween. You can also use your own easing function by passing an &lt;code&gt;AnimationCurve&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SetLoops&lt;/h3&gt; &#xA;&lt;p&gt;Sets the number of times the tween should loop. By default, it&#39;s set to 1. You can create a tween that loops infinitely by setting it to -1. You can also specify the loop behavior using the second argument, &lt;code&gt;LoopType&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;SetPlaybackSpeed&lt;/h3&gt; &#xA;&lt;p&gt;Sets the playback speed of the tween. The default is 1, and negative values are not supported.&lt;/p&gt; &#xA;&lt;h3&gt;SetDelay&lt;/h3&gt; &#xA;&lt;p&gt;Sets a delay in seconds before the tween starts.&lt;/p&gt; &#xA;&lt;h3&gt;SetIgnoreTimeScale&lt;/h3&gt; &#xA;&lt;p&gt;Ignores the effect of TimeScale.&lt;/p&gt; &#xA;&lt;h3&gt;SetRelative&lt;/h3&gt; &#xA;&lt;p&gt;Sets the end value as a relative value from the start value.&lt;/p&gt; &#xA;&lt;h3&gt;SetInvert&lt;/h3&gt; &#xA;&lt;p&gt;Swaps the start and end values. You can adjust the behavior using the &lt;code&gt;InvertMode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;InvertMode&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InvertMode.None&lt;/td&gt; &#xA;   &lt;td&gt;Moves from the start value to the end value as usual.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InvertMode.Immediate&lt;/td&gt; &#xA;   &lt;td&gt;Moves to the end value as soon as the tween starts and then transitions towards the start value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InvertMode.AfterDelay&lt;/td&gt; &#xA;   &lt;td&gt;Waits until the tween starts, then moves to the end value and transitions towards the start value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SetId&lt;/h3&gt; &#xA;&lt;p&gt;Assigns an ID to the tween. This allows you to operate on tweens with the same ID in bulk when performing operations like KillAll. You can pass an int or a string with a length of 32 bytes or less as an ID (default is int 0 or an empty string).&lt;/p&gt; &#xA;&lt;h3&gt;SetLink&lt;/h3&gt; &#xA;&lt;p&gt;Links the tween&#39;s lifecycle to a GameObject. You can change the behavior by setting the &lt;code&gt;LinkBehaviour&lt;/code&gt; as the second argument. However, regardless of the option set, Kill will be called on OnDestroy.&lt;/p&gt; &#xA;&lt;h3&gt;SetAutoPlay&lt;/h3&gt; &#xA;&lt;p&gt;Sets whether the tween should automatically play (default is true). If set to false, you need to manually call &lt;code&gt;Play()&lt;/code&gt; to start the tween.&lt;/p&gt; &#xA;&lt;h3&gt;SetAutoKill&lt;/h3&gt; &#xA;&lt;p&gt;Sets whether the tween should automatically be killed at the end (default is true). If set to false, you need to manually call &lt;code&gt;Kill()&lt;/code&gt; to remove the tween. This option is useful when you want to reuse the same tween multiple times.&lt;/p&gt; &#xA;&lt;h3&gt;SetFrequency (Punch, Shake)&lt;/h3&gt; &#xA;&lt;p&gt;Available options for Punch and Shake tweens to set the frequency of vibration (default is 10).&lt;/p&gt; &#xA;&lt;h3&gt;SetDampingRatio (Punch, Shake)&lt;/h3&gt; &#xA;&lt;p&gt;Available options for Punch and Shake tweens to set the damping ratio of vibration. A value of 1 will completely dampen the vibration at the end, and a value of 0 will result in no damping (default is 1).&lt;/p&gt; &#xA;&lt;h3&gt;SetRandomSeed (Shake)&lt;/h3&gt; &#xA;&lt;p&gt;Available option for Shake tweens to set the seed value for the random numbers used in vibration. This option must be applied before playback.&lt;/p&gt; &#xA;&lt;h3&gt;SetPathType (Path)&lt;/h3&gt; &#xA;&lt;p&gt;Available option for Path-based tweens to set how the points are connected.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;PathType&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PathType.Linear&lt;/td&gt; &#xA;   &lt;td&gt;Connects each point using a straight line.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PathType.CatmullRom&lt;/td&gt; &#xA;   &lt;td&gt;Connects each point using a Catmull-Rom spline curve.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SetClosed (Path)&lt;/h3&gt; &#xA;&lt;p&gt;Available option for Path-based tweens to set whether the path is closed, allowing it to return to the starting point.&lt;/p&gt; &#xA;&lt;h3&gt;SetRoundingMode (int, int2, int3, int4, long)&lt;/h3&gt; &#xA;&lt;p&gt;Sets the rounding mode for decimal values. This option is applicable only to integer-based types.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;RoundingMode&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RoundingMode.ToEven&lt;/td&gt; &#xA;   &lt;td&gt;Default setting. Rounds the value to the nearest integer, and if the value is midway, it rounds to the nearest even integer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RoundingMode.AwayFromZero&lt;/td&gt; &#xA;   &lt;td&gt;Rounds the value to the nearest integer, and if the value is midway, it rounds away from zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RoundingMode.ToZero&lt;/td&gt; &#xA;   &lt;td&gt;Rounds the value towards zero.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RoundingMode.ToPositiveInfinity&lt;/td&gt; &#xA;   &lt;td&gt;Rounds the value towards positive infinity.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RoundingMode.ToNegativeInfinity&lt;/td&gt; &#xA;   &lt;td&gt;Rounds the value towards negative infinity.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SetScrambleMode (string)&lt;/h3&gt; &#xA;&lt;p&gt;Allows you to fill unrevealed characters with random characters. This option is only applicable to string tweens.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ScrambleMode&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrambleMode.None&lt;/td&gt; &#xA;   &lt;td&gt;Default setting. Nothing is displayed for unrevealed parts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrambleMode.Uppercase&lt;/td&gt; &#xA;   &lt;td&gt;Fills unrevealed parts with random uppercase letters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrambleMode.Lowercase&lt;/td&gt; &#xA;   &lt;td&gt;Fills unrevealed parts with random lowercase letters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrambleMode.Numerals&lt;/td&gt; &#xA;   &lt;td&gt;Fills unrevealed parts with random numbers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScrambleMode.All&lt;/td&gt; &#xA;   &lt;td&gt;Fills unrevealed parts with random uppercase letters, lowercase letters, or numbers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(ScrambleMode.Custom)&lt;/td&gt; &#xA;   &lt;td&gt;Fills unrevealed parts with random numbers from the specified string. This option cannot be explicitly set and is determined when passing a string as an argument to SetScrambleMode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;SetRichTextEnabled (string)&lt;/h3&gt; &#xA;&lt;p&gt;Enables RichText support, allowing text with RichText tags to be animated with proper character advancement. This option is only applicable to string tweens.&lt;/p&gt; &#xA;&lt;h2&gt;Callbacks&lt;/h2&gt; &#xA;&lt;p&gt;When you want to perform some actions at specific times, such as the start or completion of a tween, you can use the On-series methods. Callback methods, like other settings, can be written using method chaining.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;transform.TweenPosition(new Vector3(1f, 2f, 3f), 5f)&#xA;    .SetLoops(5)&#xA;    .OnUpdate(() =&amp;gt; Debug.Log(&#34;update&#34;))&#xA;    .OnStepComplete(() =&amp;gt; Debug.Log(&#34;step complete&#34;))&#xA;    .OnComplete(() =&amp;gt; Debug.Log(&#34;complete&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; When you set up any callback, the first callback creates an allocation for generating the component. Additionally, enabling one or more callbacks can reduce performance during playback. In most cases, the impact on performance is minimal, but it&#39;s recommended to avoid using callbacks when creating a large number of tweens.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;OnPlay&lt;/h3&gt; &#xA;&lt;p&gt;Called when the tween starts playing. Unlike OnStart, it ignores delays set with SetDelay and is also called if Play is invoked after a pause.&lt;/p&gt; &#xA;&lt;h3&gt;OnStart&lt;/h3&gt; &#xA;&lt;p&gt;Called when the tween begins its operation. If a delay is set with SetDelay, it is called after the delay has passed.&lt;/p&gt; &#xA;&lt;h3&gt;OnUpdate&lt;/h3&gt; &#xA;&lt;p&gt;Called every frame during the tween&#39;s playback.&lt;/p&gt; &#xA;&lt;h3&gt;OnStepComplete&lt;/h3&gt; &#xA;&lt;p&gt;Called at the end of each loop when SetLoops is configured.&lt;/p&gt; &#xA;&lt;h3&gt;OnComplete&lt;/h3&gt; &#xA;&lt;p&gt;Called when the tween is completed.&lt;/p&gt; &#xA;&lt;h3&gt;OnKill&lt;/h3&gt; &#xA;&lt;p&gt;Called when the tween is killed.&lt;/p&gt; &#xA;&lt;h2&gt;DelayedCall / Empty&lt;/h2&gt; &#xA;&lt;p&gt;You can create a tween that performs a specified action after a certain delay using &lt;code&gt;Tween.DelayedCall()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Display a log after 3 seconds&#xA;Tween.DelayedCall(3f, () =&amp;gt; Debug.Log(&#34;delayed call&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can create an empty tween using &lt;code&gt;Tween.Empty()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// A tween that completes after 3 seconds&#xA;Tween.Empty(3f);&#xA;&#xA;// DelayedCall() internally calls the following code&#xA;Tween.Empty(3f)&#xA;    .OnStepComplete(() =&amp;gt; Debug.Log(&#34;delayed call&#34;))&#xA;    .OnComplete(() =&amp;gt; Debug.Log(&#34;delayed call&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sequence&lt;/h2&gt; &#xA;&lt;p&gt;A Sequence is a feature used to group multiple tweens together. By using Sequences, you can easily create complex animations by combining multiple tweens.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a Sequence&lt;/h3&gt; &#xA;&lt;p&gt;You can obtain a new Sequence from &lt;code&gt;Sequence.Create()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Create a new Sequence&#xA;Sequence sequence = Sequence.Create();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Tweens&lt;/h3&gt; &#xA;&lt;p&gt;Next, you add the tweens you want to include in the Sequence. There are various methods available to add tweens to a Sequence. By using these methods, you can combine tweens and build complex animations.&lt;/p&gt; &#xA;&lt;p&gt;Sequences can be nested regardless of their hierarchy. Options and callbacks such as &lt;code&gt;SetDelay&lt;/code&gt; and &lt;code&gt;SetLoops&lt;/code&gt; will also work for the Sequence after it has been added.&lt;/p&gt; &#xA;&lt;h3&gt;Append&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Append()&lt;/code&gt; method adds tweens to the end of the Sequence. The added tweens will play in sequence when you play the Sequence.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Append a tween to the end&#xA;sequence.Append(transform.TweenPosition(new Vector3(1f, 0f, 0f), 2f))&#xA;    .Append(transform.TweenPosition(new Vector3(1f, 3f, 0f), 2f));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;AppendInterval()&lt;/code&gt; and &lt;code&gt;AppendCallback()&lt;/code&gt; to add delays or callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Append a delay to the end&#xA;sequence.AppendInterval(1f);&#xA;&#xA;// Append a callback to the end&#xA;sequence.AppendCallback(() =&amp;gt; Debug.Log(&#34;Hello!&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prepend&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add tweens to the beginning, you can use &lt;code&gt;Prepend()&lt;/code&gt;. In this case, the tweens already added will move back by the duration of the new prepend tween.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Prepend a tween to the beginning&#xA;sequence.Prepend(transform.TweenPosition(new Vector3(1f, 0f, 0f), 2f));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;PrependInterval()&lt;/code&gt; and &lt;code&gt;PrependCallback()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Prepend a delay to the beginning&#xA;sequence.PrependInterval(1f);&#xA;&#xA;// Prepend a callback to the beginning&#xA;sequence.PrependCallback(() =&amp;gt; Debug.Log(&#34;Hello!&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Join&lt;/h3&gt; &#xA;&lt;p&gt;To concatenate a tween with the ones added before it, you can use &lt;code&gt;Join()&lt;/code&gt;. Tweens added with &lt;code&gt;Join()&lt;/code&gt; will play concurrently with the previously added tween.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;sequence.Append(transform.TweenPosition(new Vector3(1f, 0f, 0f), 2f));&#xA;&#xA;// Join with the previous tween&#xA;sequence.Join(transform.TweenPosition(new Vector3(1f, 3f, 0f), 2f));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert&lt;/h3&gt; &#xA;&lt;p&gt;If you want to insert a tween at an arbitrary point, you can use &lt;code&gt;Insert()&lt;/code&gt;. The tween added with &lt;code&gt;Insert()&lt;/code&gt; will operate independently of other tweens and will start playing once it reaches the specified position.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Insert a tween at 1 second from the start&#xA;sequence.Insert(1f, transform.TweenPosition(new Vector3(1f, 0f, 0f), 2f));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also insert callbacks using &lt;code&gt;InsertCallback()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Insert a callback at 1 second from the start&#xA;sequence.InsertCallback(1f, () =&amp;gt; Debug.Log(&#34;Hello!&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implicit Conversion to Tween&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;Sequence&lt;/code&gt; can be implicitly converted to a &lt;code&gt;Tween&lt;/code&gt;, allowing you to assign it directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Sequence sequence = Sequence.Create();&#xA;&#xA;// Can be assigned directly to a Tween variable&#xA;Tween tween = sequence;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage Considerations&lt;/h3&gt; &#xA;&lt;p&gt;Here are some important points to keep in mind when using Sequences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You cannot add tweens to a Sequence while it is playing.&lt;/li&gt; &#xA; &lt;li&gt;You cannot add tweens with infinite loops to a Sequence.&lt;/li&gt; &#xA; &lt;li&gt;Once a tween is added to a Sequence, it becomes locked, and you cannot access it individually. Be cautious, as you cannot manipulate the individual tweens within a Sequence.&lt;/li&gt; &#xA; &lt;li&gt;You cannot include the same tween in multiple Sequences.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;If you want to perform logging of Tween callbacks and values for debugging purposes, you can easily achieve this using dedicated extension methods. Note that these logs will only be displayed if &lt;code&gt;MagicTweenSettings&lt;/code&gt;&#39; &lt;code&gt;LoggingMode&lt;/code&gt; is set to &lt;code&gt;Full&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using MagicTween;&#xA;using MagicTween.Diagnostics; // Enable debug extension methods&#xA;&#xA;// Log specific callback&#xA;transform.TweenPosition(Vector3.up, 5f)&#xA;    .LogOnUpdate();&#xA;&#xA;// Log all callbacks together&#xA;transform.TweenEulerAngles(new Vector3(0f, 0f, 90f), 5f)&#xA;    .LogCallbacks();&#xA;&#xA;// You can also assign a name for identification&#xA;transform.TweenLocalScale(Vector3.one * 2f, 5f)&#xA;    .LogCallbacks(&#34;Scale&#34;);&#xA;&#xA;float foo;&#xA;// You can also log values (current value per frame)&#xA;Tween.To(() =&amp;gt; foo, x =&amp;gt; foo = x, 5f, 10f)&#xA;    .LogValue();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Settings&lt;/h2&gt; &#xA;&lt;p&gt;You can customize Tween&#39;s initial settings and logging preferences.&lt;/p&gt; &#xA;&lt;h3&gt;Creating MagicTweenSettings&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;MagicTweenSettings&lt;/code&gt; asset to store your configuration by navigating to &lt;code&gt;Assets &amp;gt; Create &amp;gt; Magic Tween &amp;gt; Magic Tween Settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The created &lt;code&gt;MagicTweenSettings&lt;/code&gt; will be automatically added to the project&#39;s Preload Assets. If the settings are not being loaded, ensure that &lt;code&gt;MagicTweenSettings&lt;/code&gt; is included in the Preload Assets.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Logging Mode&lt;/h3&gt; &#xA;&lt;p&gt;Set whether logging is enabled or not.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;LoggingMode&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LoggingMode.Full&lt;/td&gt; &#xA;   &lt;td&gt;Display all logs, including Log-related extension methods, in the Console.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LoggingMode.WarningsAndErrors&lt;/td&gt; &#xA;   &lt;td&gt;Display only warnings and errors in the Console.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LoggingMode.ErrorsOnly&lt;/td&gt; &#xA;   &lt;td&gt;Display only errors in the Console.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Capture Exceptions&lt;/h3&gt; &#xA;&lt;p&gt;When set to &#34;On,&#34; exceptions that occur internally in Tweens will be logged as warnings. When set to &#34;Off,&#34; exceptions will be logged as regular exceptions.&lt;/p&gt; &#xA;&lt;h3&gt;Default Tween Parameters&lt;/h3&gt; &#xA;&lt;p&gt;You can modify the default settings for Tweens.&lt;/p&gt; &#xA;&lt;h3&gt;Changing Settings from Script&lt;/h3&gt; &#xA;&lt;p&gt;You can access these settings from the &lt;code&gt;MagicTweenSettings&lt;/code&gt; class in your script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Change Logging Mode from script&#xA;MagicTweenSettings.loggingMode = LoggingMode.ErrorsOnly;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TextMesh Pro&lt;/h2&gt; &#xA;&lt;p&gt;Magic Tween supports TextMesh Pro (TMP) and allows you to tween text characters individually using the &lt;code&gt;TweenChar&lt;/code&gt; extension methods. Here&#39;s how you can use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;TMP_Text tmp;&#xA;&#xA;// GetCharCount retrieves the number of tweenable characters&#xA;for (int i = 0; i &amp;lt; tmp.GetCharCount(); i++)&#xA;{&#xA;    tmp.TweenCharScale(i, Vector3.zero).SetInvert().SetDelay(i * 0.07f);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can stop the tweens associated with TMP_Text and reset the text&#39;s decoration to its initial state using &lt;code&gt;ResetCharTweens()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Stop the character tweens and reset the decoration to the initial state&#xA;tmp.ResetCharTweens();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Character tweens are powered by the &lt;code&gt;TMPTweenAnimator&lt;/code&gt; class internally, which you can access using &lt;code&gt;GetTMPTweenAnimator()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Get the internal TMPTweenAnimator&#xA;TMPTweenAnimator tmpAnimator = tmp.GetTMPTweenAnimator();&#xA;&#xA;// Extension methods for TMP_Text use methods from TMPTweenAnimator internally&#xA;tmpAnimator.TweenCharOffset(0, Vector3.up);&#xA;&#xA;// You can directly set parameters for each character using SetChar**&#xA;tmpAnimator.SetCharScale(1, Vector3.one * 2f);&#xA;tmpAnimator.SetCharColor(1, Color.red);&#xA;&#xA;// ResetCharTweens() equivalent&#xA;tmpAnimator.Reset();&#xA;&#xA;// GetCharCount() equivalent&#xA;tmpAnimator.GetCharCount();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;UniRx&lt;/h2&gt; &#xA;&lt;p&gt;By integrating UniRx, you can convert Tween callbacks and Tween operations into Observables.&lt;/p&gt; &#xA;&lt;h3&gt;Converting Callbacks to Observables&lt;/h3&gt; &#xA;&lt;p&gt;You can use methods like &lt;code&gt;OnUpdateAsObservable()&lt;/code&gt; to convert Tween callbacks into Observables. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;float foo;&#xA;&#xA;Tween.To(() =&amp;gt; foo, x =&amp;gt; foo = x, 10f, 10f)&#xA;    .OnUpdateAsObservable()&#xA;    .Subscribe(_ =&amp;gt;&#xA;    {&#xA;        Debug.Log(&#34;update!&#34;);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting Tweens to Observables&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ToObservable()&lt;/code&gt; to transform a Tween into an Observable that emits values each frame. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Tween.FromTo(0f, 10f, 10f, null)&#xA;    .ToObservable()&#xA;    .Where(x =&amp;gt; x &amp;gt;= 5f)&#xA;    .Subscribe(x =&amp;gt;&#xA;    {&#xA;        Debug.Log(&#34;current value: &#34; + x);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;UniTask&lt;/h2&gt; &#xA;&lt;p&gt;By integrating UniTask, you can use async/await to handle Tween waiting operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var tween = transform.TweenPosition(Vector3.up, 2f);&#xA;&#xA;// You can directly await the Tween (waits until the Tween is killed)&#xA;await tween;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;AwaitForKill()&lt;/code&gt; and pass a &lt;code&gt;CancellationToken&lt;/code&gt; to handle cancellation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Create a CancellationTokenSource&#xA;var cts = new CancellationTokenSource();&#xA;&#xA;// Wait until the Tween is killed, passing the CancellationToken&#xA;await transform.TweenPosition(Vector3.up, 2f)&#xA;    .AwaitForKill(cancellationToken: cts.Token);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also wait for other events like completion using &lt;code&gt;AwaitForComplete()&lt;/code&gt; or &lt;code&gt;AwaitForPause()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Wait until the Tween completes&#xA;await transform.TweenPosition(Vector3.up, 2f).AwaitForComplete();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore, you can specify the &lt;code&gt;CancelBehaviour&lt;/code&gt; to determine the behavior on cancellation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var cts = new CancellationTokenSource();&#xA;&#xA;// On cancellation, call Complete and throw OperationCanceledException&#xA;await transform.TweenPosition(Vector3.up, 2f)&#xA;    .AwaitForComplete(CancelBehaviour.CompleteAndCancelAwait, cts.Token);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CancelBehaviour&lt;/th&gt; &#xA;   &lt;th&gt;Behavior on Cancellation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.Kill&lt;/td&gt; &#xA;   &lt;td&gt;Calls the Kill method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.Complete&lt;/td&gt; &#xA;   &lt;td&gt;Calls the Complete method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.CompleteAndKill&lt;/td&gt; &#xA;   &lt;td&gt;Calls both Complete and Kill methods.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.CancelAwait&lt;/td&gt; &#xA;   &lt;td&gt;Throws an OperationCanceledException without calling Complete or Kill.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.KillAndCancelAwait&lt;/td&gt; &#xA;   &lt;td&gt;Default behavior. Calls Kill and throws an OperationCanceledException.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.CompleteAndCancelAwait&lt;/td&gt; &#xA;   &lt;td&gt;Calls Complete and throws an OperationCanceledException.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CancelBehaviour.CompleteAndKillAndCancelAwait&lt;/td&gt; &#xA;   &lt;td&gt;Calls both Complete and Kill methods and throws an OperationCanceledException.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Implementation for ECS&lt;/h2&gt; &#xA;&lt;p&gt;Magic Tween provides APIs for implementing Tween for ECS (Entity Component System), allowing you to create high-performance Tweens compared to regular ones.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a Translator&lt;/h3&gt; &#xA;&lt;p&gt;To Tween the values of specific Components, you need to create a &lt;code&gt;Translator&lt;/code&gt; for the target Component, along with a System to make it work.&lt;/p&gt; &#xA;&lt;p&gt;As an example, let&#39;s create a Translator for the following Component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public struct ExampleComponent : IComponentData&#xA;{&#xA;    public float value;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, define a structure that implements &lt;code&gt;ITweenTranslator&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public struct ExampleTranslator : ITweenTranslator&amp;lt;float, ExampleComponent&amp;gt;&#xA;{&#xA;    // A property to track the target Entity, used in the System&#xA;    public Entity TargetEntity { get; set; }&#xA;&#xA;    // Apply the value to the Component&#xA;    public void Apply(ref ExampleComponent component, in float value)&#xA;    {&#xA;        component.value = value;&#xA;    }&#xA;&#xA;    // Return the current value of the Component&#xA;    public float GetValue(ref ExampleComponent component)&#xA;    {&#xA;        return component.value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, create a System class that inherits from &lt;code&gt;TweenTranslationSystemBase&lt;/code&gt;, providing the Translator you created as a type argument. Keep the internal of the derived class empty, as the base class already implements the necessary logic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public partial class ExampleTweenTranslationSystem : TweenTranslationSystemBase&amp;lt;float, ExampleComponent, ExampleTranslator&amp;gt; { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you&#39;re prepared to Tween values.&lt;/p&gt; &#xA;&lt;h3&gt;Tweening Component Values&lt;/h3&gt; &#xA;&lt;p&gt;To Tween values using the Translator you created, you can use &lt;code&gt;Tween.Entity.To()&lt;/code&gt; or &lt;code&gt;Tween.Entity.FromTo()&lt;/code&gt;. Provide the type of your Translator as type arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var entity = EntityManager.CreateEntity();&#xA;EntityManager.AddComponent&amp;lt;ExampleComponent&amp;gt;(entity);&#xA;&#xA;// Tween the value of ExampleComponent&#39;s &#39;value&#39; field to 5 over 10 seconds&#xA;Tween.Entity.To&amp;lt;ExampleTranslator&amp;gt;(entity, 5f, 10f);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like regular Tweens, you can chain methods to add settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Tween.Entity.FromTo&amp;lt;ExampleTranslator&amp;gt;(entity, 0f, 5f, 10f)&#xA;    .SetEase(Ease.OutSine)&#xA;    .SetLoops(3, LoopType.Restart)&#xA;    .SetDelay(1f);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add these Tweens to a Sequence:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var entity1 = EntityManager.CreateEntity();&#xA;var entity2 = EntityManager.CreateEntity();&#xA;EntityManager.AddComponent&amp;lt;ExampleComponent&amp;gt;(entity1);&#xA;EntityManager.AddComponent&amp;lt;ExampleComponent&amp;gt;(entity2);&#xA;&#xA;var tween1 = Tween.Entity.To&amp;lt;ExampleTranslator&amp;gt;(entity1, 5f, 10f);&#xA;var tween2 = Tween.Entity.To&amp;lt;ExampleTranslator&amp;gt;(entity2, 5f, 10f);&#xA;&#xA;var sequence = Sequence.Create()&#xA;    .Append(tween1)&#xA;    .Append(tween2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; Avoid applying multiple concurrent Tweens with the same Translator to the same Entity. This may lead to overlapping value modifications and unexpected behavior.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Built-in Translators&lt;/h3&gt; &#xA;&lt;p&gt;Under &lt;code&gt;MagicTween.Translators&lt;/code&gt;, you can find built-in Translators for ECS components.&lt;/p&gt; &#xA;&lt;p&gt;Currently, there&#39;s a Translator that works with &lt;code&gt;LocalTransform&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have the Entities Graphics package installed, you&#39;ll find Translators for tweening Material properties.&lt;/p&gt; &#xA;&lt;h3&gt;Limitations&lt;/h3&gt; &#xA;&lt;p&gt;Creating and manipulating Tweens/Sequences is only supported on the main thread. You cannot create new Tweens or perform operations like Kill or Complete from a Job. To alleviate this limitation, there&#39;s ongoing development to introduce functionality for creating/operating Tweens using a dedicated CommandBuffer.&lt;/p&gt; &#xA;&lt;h2&gt;Other Features&lt;/h2&gt; &#xA;&lt;h3&gt;EaseUtility&lt;/h3&gt; &#xA;&lt;p&gt;The easing functions used internally by Tween can be accessed via EaseUtility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;float value1 = EaseUtility.Evaluate(0.5f, Ease.OutQuad);&#xA;float value2 = EaseUtility.InOutQuad(0.5f);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Experimental Features&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;MagicTween.Experimental&lt;/code&gt; namespace contains features that are currently under development. These features are available for use but come with no guarantees, and there may be breaking changes without notice.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h3&gt;Performance Drop in the Editor&lt;/h3&gt; &#xA;&lt;p&gt;ECS performs numerous checks to enhance safety, which leads to decreased performance within the editor. This performance degradation is particularly noticeable when creating Tweens and, in some cases, can result in processing times several times longer than usual.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s important to note that these safety checks are disabled in the build, so performance measurements should always be conducted in the build environment.&lt;/p&gt; &#xA;&lt;h3&gt;Performance Drop in WebGL&lt;/h3&gt; &#xA;&lt;p&gt;While it&#39;s possible to use ECS in WebGL, limitations in WebGL&#39;s specifications, such as the absence of multi-threading and SIMD, disable optimizations like the Job System and Burst. ECS achieves its high performance through the Job System and Burst, making performance degradation unavoidable in WebGL (hence, there are few advantages to using ECS on WebGL currently).&lt;/p&gt; &#xA;&lt;p&gt;Magic Tween optimizes the calculation part of Tweens using the Job System and Burst. Therefore, on WebGL, performance suffers for the reasons mentioned above. While these effects are typically not noticeable, please be mindful of this when creating a large number of Tweens.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Forum: &lt;a href=&#34;https://forum.unity.com/threads/magic-tween-extremely-fast-tween-library-implemented-in-ecs.1490080/&#34;&gt;https://forum.unity.com/threads/magic-tween-extremely-fast-tween-library-implemented-in-ecs.1490080/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/MagicTween/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>