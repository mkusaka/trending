<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-06T01:24:54Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>matterpreter/OffensiveCSharp</title>
    <updated>2023-09-06T01:24:54Z</updated>
    <id>tag:github.com,2023-09-06:/matterpreter/OffensiveCSharp</id>
    <link href="https://github.com/matterpreter/OffensiveCSharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of Offensive C# Tooling&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OffensiveCSharp&lt;/h1&gt; &#xA;&lt;p&gt;This is a collection of C# tooling and POCs I&#39;ve created for use on operations. Each project is designed to use no external libraries. Open each project&#39;s .SLN in Visual Studio and compile as &#34;Release&#34;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Project&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Minimum .NET Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;AbandonedCOMKeys&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enumerates abandoned COM keys (specifically &lt;code&gt;InprocServer32&lt;/code&gt;). Useful for persistence as you can, in some cases, write to the missing location and call with &lt;code&gt;rundll32.exe -sta {CLSID}&lt;/code&gt;. Technique referenced in &lt;a href=&#34;https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/&#34;&gt;this post&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/bohops&#34;&gt;@bohops&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;COMHunter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enumerates COM servers set in &lt;code&gt;LocalServer32&lt;/code&gt; and &lt;code&gt;InProc32&lt;/code&gt; keys on a system using WMI&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;CredPhisher&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prompts the current user for their credentials using the &lt;code&gt;CredUIPromptForWindowsCredentials&lt;/code&gt; WinAPI function. Supports an argument to provide the message text that will be shown to the user.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;DriverQuery&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Collect details about drivers on the system and optionally filter to find only ones not signed by Microsoft&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;EncryptedZIP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Compresses a directory or file and then encrypts the ZIP file with a supplied key using AES256 CFB. This assembly also clears the key out of memory using &lt;code&gt;RtlZeroMemory&lt;/code&gt;. Use the included Decrypter progam to decrypt the archive.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;ETWEventSubscription&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Similar to WMI event subscriptions but leverages Event Tracing for Windows. When the event on the system occurs, currently either when any user logs in or a specified process is started, the &lt;code&gt;DoEvil()&lt;/code&gt; method is executed.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;GPSCoordinates&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Tracks the system&#39;s GPS coordinates (accurate within 1km currently) if Location Services are enabled. Works on Windows 10 currently, but hoping to cover all versions 7+.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;HijackHunter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Parses a target&#39;s PE header in order to find lined DLLs vulnerable to hijacking. Provides reasoning and abuse techniques for each detected hijack opportunity&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;HookDetector&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Detects hooked Native API functions in the current process, indicating the presence of EDR&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;ImplantSSP&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Installs a user-supplied Security Support Provider (SSP) DLL on the system, which will be loaded by LSA on system start. The DLL must export &lt;code&gt;SpLsaModeInitialize&lt;/code&gt;. Inspired by &lt;a href=&#34;https://powersploit.readthedocs.io/en/latest/Persistence/Install-SSP/&#34;&gt;Install-SSP&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/mattifestation&#34;&gt;@mattifestation&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;InspectAssembly&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Inspect&#39;s a target .NET assembly&#39;s CIL for calls to deserializers and .NET remoting usage to aid in triaging potential privilege escalations.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;JunctionFolder&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Creates a junction folder in the Windows Accessories Start Up folder as described in the Vault 7 leaks. On start or when a user browses the directory, the referenced DLL will be executed by &lt;code&gt;verclsid.exe&lt;/code&gt; in medium integrity.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;MockDirUACBypass&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Creates a mock trusted directory, &lt;code&gt;C:\Windows \System32\&lt;/code&gt;, and moves an auto-elevating Windows executable into the mock directory. A user-supplied DLL which exports the appropriate functions is dropped and when the executable is run, the DLL is loaded and run as high integrity. Technique discovered by &lt;a href=&#34;https://twitter.com/ce2wells&#34;&gt;@ce2wells&lt;/a&gt; and outlined in &lt;a href=&#34;https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e&#34;&gt;this post.&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;PhantomService&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Searches for and removes non-ASCII services that can&#39;t be easily removed by built-in Windows tools. &lt;a href=&#34;https://twitter.com/matterpreter/status/1218290309500669952&#34;&gt;Reference&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;SessionSearcher&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Searches all connected drives for PuTTY private keys and RDP connection files and parses them for relevant details. Based on &lt;a href=&#34;https://github.com/Arvanaghi/SessionGopher&#34;&gt;SessionGopher&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/arvanaghi&#34;&gt;@arvanaghi&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;UnquotedPath&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Outputs a list of unquoted service paths that aren&#39;t in System32/SysWow64 to plant a PE into. &lt;a href=&#34;https://attack.mitre.org/techniques/T1034/&#34;&gt;ATT&amp;amp;CK Reference&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>