<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-08T01:28:24Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>daem0nc0re/VectorKernel</title>
    <updated>2023-12-08T01:28:24Z</updated>
    <id>tag:github.com,2023-12-08:/daem0nc0re/VectorKernel</id>
    <link href="https://github.com/daem0nc0re/VectorKernel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PoCs for Kernel-mode rootkit techniques research.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VectorKernel&lt;/h1&gt; &#xA;&lt;p&gt;PoCs for Kernel-mode rootkit techniques research or education. Currently focusing on Windows OS. All modules support 64bit OS only.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Some modules use &lt;code&gt;ExAllocatePool2&lt;/code&gt; API to allocate kernel pool memory. &lt;code&gt;ExAllocatePool2&lt;/code&gt; API is not supported in OSes older than Windows 10 Version 2004. If you want to test the modules in old OSes, replace &lt;code&gt;ExAllocatePool2&lt;/code&gt; API with &lt;code&gt;ExAllocatePoolWithTag&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;Detailed information is given in README.md in each project&#39;s directories. All modules are tested in Windows 11.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Module Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/BlockNewProc/&#34;&gt;BlockNewProc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to block new process with Process Notify Callback method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/GetFullPrivs/&#34;&gt;GetFullPrivs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to get full privileges with DKOM method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/GetProcHandle/&#34;&gt;GetProcHandle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to get full access process handle from kernelmode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/InjectLibrary/&#34;&gt;InjectLibrary&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to perform DLL injection with Kernel APC Injection method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/ModHide/&#34;&gt;ModHide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to hide loaded kernel drivers with DKOM method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/ProcHide/&#34;&gt;ProcHide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to hide process with DKOM method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/ProcProtect/&#34;&gt;ProcProtect&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to manipulate Protected Process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/QueryModule/&#34;&gt;QueryModule&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to perform retrieving kernel driver loaded address information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/VectorKernel/main/StealToken/&#34;&gt;StealToken&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PoCs to perform token stealing from kernelmode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;More PoCs especially about following things will be added later:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notify callback&lt;/li&gt; &#xA; &lt;li&gt;Filesystem mini-filter&lt;/li&gt; &#xA; &lt;li&gt;Network mini-filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recommended References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://leanpub.com/windowskernelprogrammingsecondedition&#34;&gt;Pavel Yosifovich, &lt;strong&gt;&lt;em&gt;Windows Kernel Programming, 2nd Edition&lt;/em&gt;&lt;/strong&gt; (Independently published, 2023)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Practical-Reverse-Engineering-Reversing-Obfuscation/dp/1502489309&#34;&gt;Bruce Dang, Alexandre Gazet, Elias Bachaalany, and SÃ©bastien Josse, &lt;strong&gt;&lt;em&gt;Practical Reverse Engineering: x86, x64, ARM, Windows Kernel, Reversing Tools, and Obfuscation&lt;/em&gt;&lt;/strong&gt; (Wiley Publishing, 2014)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Rootkits-Subverting-Windows-Greg-Hoglund/dp/0321294319&#34;&gt;Greg Hoglund, and Jamie Butler, &lt;strong&gt;&lt;em&gt;Rootkits : Subverting the Windows Kernel&lt;/em&gt;&lt;/strong&gt; (Addison-Wesley Professional, 2005)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Rootkit-Arsenal-Escape-Evasion-Corners/dp/144962636X&#34;&gt;Bill Blunden, &lt;strong&gt;&lt;em&gt;The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System, 2nd Edition&lt;/em&gt;&lt;/strong&gt; (Jones &amp;amp; Bartlett Learning, 2012)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.microsoftpressstore.com/store/windows-internals-part-1-system-architecture-processes-9780735684188&#34;&gt;Pavel Yosifovich, Mark E. Russinovich, Alex Ionescu, and David A. Solomon, &lt;strong&gt;&lt;em&gt;Windows Internals, Part 1: System architecture, processes, threads, memory management, and more, 7th Edition&lt;/em&gt;&lt;/strong&gt; (Microsoft Press, 2017)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.microsoftpressstore.com/store/windows-internals-part-2-9780135462409&#34;&gt;Andrea Allievi, Mark E. Russinovich, Alex Ionescu, and David A. Solomon, &lt;strong&gt;&lt;em&gt;Windows Internals, Part 2, 7th Edition&lt;/em&gt;&lt;/strong&gt; (Microsoft Press, 2021)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>