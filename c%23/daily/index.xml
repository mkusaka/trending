<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-19T01:29:39Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ncalc/ncalc</title>
    <updated>2024-11-19T01:29:39Z</updated>
    <id>tag:github.com,2024-11-19:/ncalc/ncalc</id>
    <link href="https://github.com/ncalc/ncalc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NCalc is a fast and lightweight expression evaluator library for .NET, designed for flexibility and high performance. It supports a wide range of mathematical and logical operations.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ncalc/ncalc/master/NCalc.png&#34; alt=&#34;NCalc&#34; style=&#34;width:100px;&#34;&gt; &#xA; &lt;h1&gt;NCalc&lt;/h1&gt; &#xA; &lt;a href=&#34;https://github.com/ncalc/ncalc/actions/workflows/build-test.yml&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/ncalc/ncalc/build-test.yml&#34; alt=&#34;GitHub Actions Workflow Status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://codecov.io/gh/ncalc/ncalc&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/ncalc/ncalc.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://nuget.org/packages/NCalcSync.signed&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/v/NCalcSync.signed.svg?label=nuget&amp;amp;color=004880&#34; alt=&#34;NuGet&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://nuget.org/packages/NCalcSync.signed&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/NCalcSync.svg?color=004880&#34; alt=&#34;NuGet Downloads&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/TeJkmXbqFk&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1237181265426387005?color=5b62ef&amp;amp;label=discord&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;NCalc is a fast and lightweight expression evaluator library for .NET, designed for flexibility and high performance. It supports a wide range of mathematical and logical operations. NCalc can parse any expression and evaluate the result, including static or dynamic parameters and custom functions. NCalc targets .NET 8, .NET Standard 2.0 and NET Framework 4.8.&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;p&gt;Need help or want to learn more? &lt;a href=&#34;https://ncalc.github.io/ncalc&#34;&gt;Check our docs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;For additional information on the technique we used to create this framework please read &lt;a href=&#34;https://www.codeproject.com/Articles/18880/State-of-the-Art-Expression-Evaluation&#34;&gt;this article.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If you need help, &lt;a href=&#34;https://github.com/ncalc/ncalc/issues/new/choose&#34;&gt;please open an issue&lt;/a&gt; and include the expression to help us better understand the problem. Providing this information will aid in resolving the issue effectively.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you want to evaluate simple expressions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package NCalcSync &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want &lt;code&gt;async&lt;/code&gt; support at your functions and parameters?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package NCalcAsync &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dependency Injection? We got you covered:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package NCalc.DependencyInjection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functionalities&lt;/h2&gt; &#xA;&lt;h3&gt;Simple Expressions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var expression = new Expression(&#34;2 + 3 * 5&#34;);&#xA;Debug.Assert(17 == expression.Evaluate());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Evaluates .NET data types&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Debug.Assert(123456 == new Expression(&#34;123456&#34;).Evaluate()); // integers&#xA;Debug.Assert(new DateTime(2001, 01, 01) == new Expression(&#34;#01/01/2001#&#34;).Evaluate()); // date and times&#xA;Debug.Assert(123.456 == new Expression(&#34;123.456&#34;).Evaluate()); // floating point numbers&#xA;Debug.Assert(true == new Expression(&#34;true&#34;).Evaluate()); // booleans&#xA;Debug.Assert(&#34;azerty&#34; == new Expression(&#34;&#39;azerty&#39;&#34;).Evaluate()); // strings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handles mathematical functional from System.Math&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Debug.Assert(0 == new Expression(&#34;Sin(0)&#34;).Evaluate());&#xA;Debug.Assert(2 == new Expression(&#34;Sqrt(4)&#34;).Evaluate());&#xA;Debug.Assert(0 == new Expression(&#34;Tan(0)&#34;).Evaluate());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Evaluates custom functions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var expression = new Expression(&#34;SecretOperation(3, 6)&#34;);&#xA;expression.Functions[&#34;SecretOperation&#34;] = (args) =&amp;gt; {&#xA;    return (int)args[0].Evaluate() + (int)args[1].Evaluate();&#xA;};&#xA;&#xA;Debug.Assert(9 == expression.Evaluate());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handles unicode characters&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Debug.Assert(&#34;経済協力開発機構&#34; == new Expression(&#34;&#39;経済協力開発機構&#39;&#34;).Evaluate());&#xA;Debug.Assert(&#34;Hello&#34; == new Expression(@&#34;&#39;\u0048\u0065\u006C\u006C\u006F&#39;&#34;).Evaluate());&#xA;Debug.Assert(&#34;だ&#34; == new Expression(@&#34;&#39;\u3060&#39;&#34;).Evaluate());&#xA;Debug.Assert(&#34;\u0100&#34; == new Expression(@&#34;&#39;\u0100&#39;&#34;).Evaluate());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Define parameters, even dynamic or expressions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var expression = new Expression(&#34;Round(Pow([Pi], 2) + Pow([Pi2], 2) + [X], 2)&#34;);&#xA;&#xA;expression.Parameters[&#34;Pi2&#34;] = new Expression(&#34;Pi * [Pi]&#34;);&#xA;expression.Parameters[&#34;X&#34;] = 10;&#xA;&#xA;expression.DynamicParameters[&#34;Pi&#34;] = _ =&amp;gt; {&#xA;    Console.WriteLine(&#34;I&#39;m evaluating π!&#34;);&#xA;    return 3.14;&#xA;};&#xA;&#xA;Debug.Assert(117.07 == expression.Evaluate());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;JSON Serialization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;At .NET 8+, NCalc have built-in support to polymorphic JSON serialization using &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json&#34;&gt;System.Text.Json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;const string expressionString = &#34;{waterLevel} &amp;gt; 4.0&#34;;&#xA;&#xA;var logicalExpression = LogicalExpressionFactory.Create(expressionString, ExpressionOptions.NoCache); //Created a BinaryExpression object.&#xA;&#xA;var jsonExpression = JsonSerializer.Serialize(parsedExpression);&#xA;&#xA;var deserializedLogicalExpression = JsonSerializer.Deserialize&amp;lt;LogicalExpression&amp;gt;(jsonExpression); //The object is still a BinaryExpression.&#xA;&#xA;var expression = new Expression(deserializedLogicalExpression);&#xA;&#xA;expression.Parameters = new Dictionary&amp;lt;string, object&amp;gt; {&#xA;    {&#34;waterLevel&#34;, 4.0}&#xA;};&#xA;&#xA;var result = expression.Evaluate();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt; NCalc automatically cache the parsing of strings using a &lt;a href=&#34;https://learn.microsoft.com/pt-br/dotnet/api/system.collections.concurrent.concurrentdictionary-2&#34;&gt;&lt;code&gt;ConcurrentDictionary&lt;/code&gt;&lt;/a&gt;. You can also use our &lt;a href=&#34;https://ncalc.github.io/ncalc/articles/plugins/memory_cache.html&#34;&gt;Memory Cache plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var expression = new Expression(&#34;1 + 2&#34;);&#xA;Func&amp;lt;int&amp;gt; function = expression.ToLambda&amp;lt;int&amp;gt;();&#xA;Debug.Assert(function()); //3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sebastienros/parlot&#34;&gt;Parlot&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Fast and lightweight parser creation tools by &lt;a href=&#34;https://github.com/sebastienros&#34;&gt;Sébastien Ros&lt;/a&gt; that NCalc uses at its parser.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/panoramicdata/PanoramicData.NCalcExtensions&#34;&gt;PanoramicData.NCalcExtensions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Extension functions for NCalc to handle many general functions,&lt;br&gt; including string functions, switch, if, in, typeOf, cast etc.&lt;br&gt; Developed by David, Dan and all at &lt;a href=&#34;https://github.com/panoramicdata&#34;&gt;Panoramic Data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sebastienros/jint&#34;&gt;Jint&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript Interpreter for .NET by &lt;a href=&#34;https://github.com/sebastienros&#34;&gt;Sébastien Ros&lt;/a&gt;, the author of NCalc library.&lt;br&gt; Runs on any modern .NET platform as it supports .NET Standard 2.0 and .NET 4.6.1 targets (and up).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/thomashambach/ncalcjs&#34;&gt;NCalcJS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A TypeScript/JavaScript port of NCalc.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://ncalc101.magicsuite.net&#34;&gt;NCalc101&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;NCalc 101 is a simple web application that allows you to try out the NCalc expression evaluator, developed by &lt;a href=&#34;https://github.com/panoramicdata&#34;&gt;Panoramic Data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/JJConsulting/JJMasterData/&#34;&gt;JJMasterData&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;JJMasterData is a runtime form generator from database metadata. It uses NCalc to evaluate expressions used in field visibility and other dynamic behaviors.&lt;/p&gt; &#xA;&lt;h2&gt;NCalc versioning&lt;/h2&gt; &#xA;&lt;p&gt;The project uses &lt;a href=&#34;https://github.com/dotnet/Nerdbank.GitVersioning&#34;&gt;Nerdbank.GitVersioning&lt;/a&gt; tool to manage versions.&lt;br&gt; Each library build can be traced back to the original git commit. Read more about &lt;a href=&#34;https://ncalc.github.io/ncalc/articles/new_release.html&#34;&gt;versioning here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Discord Server&lt;/h2&gt; &#xA;&lt;p&gt;If you want to talk with us, get support or just get the latest NCalc news, &lt;a href=&#34;https://discord.gg/TeJkmXbqFk&#34;&gt;come to our discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#ncalc/ncalc&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=ncalc/ncalc&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=ncalc/ncalc&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=ncalc/ncalc&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
</feed>