<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-14T01:33:27Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PayloadSecurity/Sandbox_Scryer</title>
    <updated>2022-09-14T01:33:27Z</updated>
    <id>tag:github.com,2022-09-14:/PayloadSecurity/Sandbox_Scryer</id>
    <link href="https://github.com/PayloadSecurity/Sandbox_Scryer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Sandbox Scryer&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Version: 1.0.4&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;License: GPL v3&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The Sandbox Scryer is an open-source tool for producing threat hunting and intelligence data from public sandbox detonation output The tool leverages the MITRE ATT&amp;amp;CK Framework to organize and prioritize findings, assisting in the assembly of IOCs, understanding attack movement and in threat hunting By allowing researchers to send thousands of samples to a sandbox for building a profile that can be used with the ATT&amp;amp;CK technique, the Sandbox Scryer delivers an unprecedented ability to solve use cases at scale The tool is intended for cybersecurity professionals who are interested in threat hunting and attack analysis leveraging sandbox output data. The Sandbox Scryer tool currently consumes output from the free and public Hybrid Analysis malware analysis service helping analysts expedite and scale threat hunting&lt;/p&gt; &#xA;&lt;h1&gt;Repository contents&lt;/h1&gt; &#xA;&lt;p&gt;[root] &lt;strong&gt;version&lt;/strong&gt;.txt - Current tool version LICENSE - Defines license for source and other contents README.md - This file&lt;/p&gt; &#xA;&lt;p&gt;[root\bin] \Linux - Pre-build binaries for running tool in Linux. Currently supports: Ubuntu x64 \MacOS - Pre-build binaries for running tool in MacOS. Currently supports: OSX 10.15 x64 \Windows - Pre-build binaries for running tool in Windows. Currently supports: Win10 x64&lt;/p&gt; &#xA;&lt;p&gt;[root\presentation_video] Sandbox_Scryer__BlackHat_Presentation_and_demo.mp4 - Video walking through slide deck and showing demo of tool&lt;/p&gt; &#xA;&lt;p&gt;[root\screenshots_and_videos] Various backing screenshots&lt;/p&gt; &#xA;&lt;p&gt;[root\scripts] Parse_report_set.* - Windows PowerShell and DOS Command Window batch file scripts that invoke tool to parse each HA Sandbox report summary in test set Collate_Results.* - Windows PowerShell and DOS Command Window batch file scripts that invoke tool to collate data from parsing report summaries and generate a MITRE Navigator layer file&lt;/p&gt; &#xA;&lt;p&gt;[root\slides] BlackHat_Arsenal_2022__Sandbox_Scryer__BH_template.pdf - PDF export of slides used to present the Sandbox Scryer at Black Hat 2022&lt;/p&gt; &#xA;&lt;p&gt;[root\src] Sandbox_Scryer - Folder with source for Sandbox Scryer tool (in c#) and Visual Studio 2019 solution file&lt;/p&gt; &#xA;&lt;p&gt;[root\test_data] (SHA256 filenames).json - Report summaries from submissions to Hybrid Analysis enterprise-attack__062322.json - MITRE CTI data TopAttackTechniques__High__060922.json - Top MITRE ATT&amp;amp;CK techniques generated with the MITRE calculator. Used to rank techniques for generating heat map in MITRE Navigator&lt;/p&gt; &#xA;&lt;p&gt;[root\test_output] (SHA256)_report__summary_Error_Log.txt - Errors (if any) encountered while parsing report summary for SHA256 included in name (SHA256)_report__summary_Hits__Complete_List.png - Graphic showing tecniques noted while parsing report summary for SHA256 included in name (SHA256)_report__summary_MITRE_Attck_Hits.csv - For collation step, techniques and tactics with select metadata from parsing report summary for SHA256 included in name (SHA256)_report__summary_MITRE_Attck_Hits.txt - More human-readable form of .csv file. Includes ranking data of noted techniques&lt;/p&gt; &#xA;&lt;p&gt;\collated_data collated_080122_MITRE_Attck_Heatmap.json - Layer file for import into MITRE Navigator&lt;/p&gt; &#xA;&lt;h1&gt;Operation&lt;/h1&gt; &#xA;&lt;p&gt;The Sandbox Scryer is intended to be invoked as a command-line tool, to facilitate scripting&lt;/p&gt; &#xA;&lt;p&gt;Operation consists of two steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parsing, where a specified report summary is parsed to extract the output noted earlier&lt;/li&gt; &#xA; &lt;li&gt;Collation, where the data from the set of parsing results from the parsing step is collated to produce a Navigator layer file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Invocation examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Parsing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Collation&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the parameter &#34;-h&#34; is specified, the built-in help is displayed as shown here Sandbox_Scryer.exe -h&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        Options:&#xA;           -h  Display command-line options&#xA;           -i  Input filepath&#xA;           -ita  Input filepath - MITRE report for top techniques&#xA;           -o  Output folder path&#xA;           -ft Type of file to submit&#xA;           -name Name to use with output&#xA;           -sb_name Identifier of sandbox to use  (default:  ha)&#xA;           -api_key API key to use with submission to sandbox&#xA;           -env_id Environment ID to use with submission to sandbox&#xA;           -inc_sub Include sub-techniques in graphical output  (default is to not include)&#xA;           -mitre_data Filepath for mitre cti data to parse (to populate att&amp;amp;ck techniques)&#xA;           -cmd  Command&#xA;                 Options:&#xA;                    parse  Process report file from prior sandbox submission&#xA;                           Uses -i, -ita, -o, -name, -inc_sub, -sig_data   parameters&#xA;                    col    Collates report data from prior sandbox submissions&#xA;                           Uses -i (treated as folder path), -ita, -o, -name, -inc_sub, -mitre_data   parameters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the Navigator layer file is produced, it may be loaded into the Navigator for viewing via &lt;a href=&#34;https://mitre-attack.github.io/attack-navigator/&#34;&gt;https://mitre-attack.github.io/attack-navigator/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Within the Navigator, techniques noted in the sandbox report summaries are highlighted and shown with increased heat based on a combined scoring of the technique ranking and the count of hits on the technique in the sandbox report summaries. Howevering of techniques will show select metadata.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nemanjarogic/DesignPatternsLibrary</title>
    <updated>2022-09-14T01:33:27Z</updated>
    <id>tag:github.com,2022-09-14:/nemanjarogic/DesignPatternsLibrary</id>
    <link href="https://github.com/nemanjarogic/DesignPatternsLibrary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive design patterns library implemented in C#, which covers various design patterns from the most commonly used ones to the lesser-known ones. Get familiar with and learn design patterns through moderately realistic examples.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Design Patterns Library&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 33 Design Patterns â€¢ 73 moderately realistic examples &lt;/p&gt; &#xA;&lt;h2&gt;What are Design Patterns?&lt;/h2&gt; &#xA;&lt;p&gt;In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design. A design pattern isn&#39;t a finished design that can be transformed directly into code. It is a description or template for how to solve a problem that can be used in many different situations. In addition, design patterns allow developers to communicate using well-known, well understood names for software interactions.&lt;/p&gt; &#xA;&lt;p&gt;Know when to use a certain design pattern, and when not to. No design pattern is a 42 - the answer to life, the universe and everything. There are situations in which every design pattern easily becomes an antipattern.&lt;/p&gt; &#xA;&lt;h2&gt;Design Pattern Types&lt;/h2&gt; &#xA;&lt;p&gt;Design patterns can be separated into three main categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creational&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Structural&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships among entities. Structural patterns are concerned with how classes and objects are composed to form larger structures.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Behavioral&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Behavioral patterns are concerned with algorithms and the assignment of responsibilities between objects. Behavioral patterns describe not just the patterns of objects or classes but also the patterns of communication between them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What this repository contains?&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a comprehensive design patterns library implemented in C#, which covers various design patterns from the most commonly used ones (Gang of Four) to the lesser-known ones. It enables you to get familiar with and learn design patterns through moderately realistic examples.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Design Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Introduction&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/CreationalPatterns/AbstractFactory&#34;&gt;Abstract Factory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Creational&lt;/td&gt; &#xA;   &lt;td&gt;Provides an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1363455494795501568&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Adapter/AdapterLibrary&#34;&gt;Adapter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Allows objects with incompatible interfaces to collaborate.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1365389288603594752&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Bridge/BridgeLibrary&#34;&gt;Bridge&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Lets you split a large class or a set of closely related classes into two separate hierarchiesâ€”abstraction and implementationâ€”which can be developed independently of each other.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1365603914561822720&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/CreationalPatterns/Builder/CustomSandwichBuilder&#34;&gt;Builder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Creational&lt;/td&gt; &#xA;   &lt;td&gt;Lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1364620803376099331&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/ChainOfResponsibility/ChainOfResponsibilityLibrary&#34;&gt;Chain Of Responsibility&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1367854184884736003&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Command/CommandLibrary&#34;&gt;Command&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a requestâ€™s execution, and support undoable operations.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1368268333242580997&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Composite/CompositeLibrary&#34;&gt;Composite&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Lets you compose objects into tree structures and then work with these structures as if they were individual objects. Treat individual objects and compositions of objects uniformly.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1365987790991851529&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Decorator/DecoratorLibrary&#34;&gt;Decorator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors. Extend or alter the functionality of objects at runtime.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1366423651684409344&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Facade/FacadeLibrary&#34;&gt;Facade&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Provides a simplified interface to a library, a framework, or any other complex set of classes. This makes a complex body of code simpler to use and consume.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1366763875169886208&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/CreationalPatterns/FactoryMethod/RestaurantManagement&#34;&gt;Factory Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Creational&lt;/td&gt; &#xA;   &lt;td&gt;Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1363094303493472259&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Flyweight/FlyweightLibrary&#34;&gt;Flyweight&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object. It reduces storage costs for a large number of objects.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1367163644874788876&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Iterator/IteratorLibrary&#34;&gt;Iterator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1369346045319258115&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Mediator/MediatorLibrary&#34;&gt;Mediator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1369751429552947207&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Memento/MementoLibrary&#34;&gt;Memento&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Lets you save and restore the previous state of an object without revealing the details of its implementation.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1370766571329687558&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Observer/ObserverLibrary&#34;&gt;Observer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they are observing.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1372233167856353287&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/CreationalPatterns/Prototype/PrototypeLibrary&#34;&gt;Prototype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Creational&lt;/td&gt; &#xA;   &lt;td&gt;Lets you copy existing objects without making your code dependent on their classes.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1365068441871384577&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/StructuralPatterns/Proxy/ProxyLibrary&#34;&gt;Proxy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Structural&lt;/td&gt; &#xA;   &lt;td&gt;Lets you provide a substitute or placeholder for another object. A proxy controls access to the original object, allowing you to perform something either before or after the request gets through to the original object.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1367576165377015810&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/CreationalPatterns/Singleton/Greeter&#34;&gt;Singleton&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Creational&lt;/td&gt; &#xA;   &lt;td&gt;Ensures that a class has only one instance, while providing a global access point to this instance.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1363080217871474691&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/State/StateLibrary&#34;&gt;State&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Lets an object alter its behavior when its internal state changes. It appears as if the object changed its class. This pattern is close to the concept of finite-state machines.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1373597389534138369&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Strategy/StrategyLibrary&#34;&gt;Strategy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Enables an algorithmâ€™s behavior to be selected at runtime. The pattern defines a family of algorithms, encapsulates each algorithm and makes the algorithms interchangeable within that family. In other words, this pattern is used when we have multiple algorithms for a specific task and we want the client to decide which actual implementation should be used at runtime.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1375753220685975554&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/TemplateMethod/TemplateMethodLibrary&#34;&gt;Template Method&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1376101142694916099&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/BehavioralPatterns/Visitor/VisitorLibrary&#34;&gt;Visitor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;A way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying the structures.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/rogic_nemanja/status/1378252176976457728&#34;&gt;&lt;img src=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/raw/main/assets/images/twitter.png&#34; height=&#34;16&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Extra content&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Design Pattern&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/EventAggregator/StoreManagement&#34;&gt;Event Aggregator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Channel events from multiple objects into a single object to simplify registration for clients.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/FluentInterface/FluentInterfaceLibrary&#34;&gt;Fluent Interface&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Creational&lt;/td&gt; &#xA;   &lt;td&gt;Provides an easy-readable, flowing interface, that often mimics a domain specific language. Using this pattern results in code that can be read nearly as human language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/Interpreter/InterpreterLibrary&#34;&gt;Interpreter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Defines a grammatical representation for a language and provides an interpreter to evaluate sentences in a language.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/LazyLoad/LazyLoadLibrary&#34;&gt;Lazy Load&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Data Access&lt;/td&gt; &#xA;   &lt;td&gt;Defers initialization of an object until the point at which it is needed. It can contribute to efficiency in the program&#39;s operation if properly and appropriately used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/NullObject/NullObjectLibrary&#34;&gt;Null Object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Encapsulates the absence of an object by providing a substitutable alternative that offers suitable default do nothing behavior.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/Repository/OrderManagement&#34;&gt;Repository&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Data Access&lt;/td&gt; &#xA;   &lt;td&gt;Encapsulates all the minutiae of data access. Mediates between the domain and data mapping layers using a collection-like interface for accessing domain objects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/Rules/RulesLibrary&#34;&gt;Rules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Behavioral&lt;/td&gt; &#xA;   &lt;td&gt;Separates the logic of each individual rule and its effects into its own class. Separates the selection and processing of rules into a separate Evaluator class.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/ServiceLocator/OrderProcessing&#34;&gt;Service Locator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Architectural&lt;/td&gt; &#xA;   &lt;td&gt;Improves the modularity of your application by removing the dependency between the client and the implementation of an interface. Encapsulates the processes involved in obtaining a service with a strong abstraction layer. This pattern uses a central registry known as the service locator which on request returns the information necessary to perform a certain task.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/Specification/ProductSpecification&#34;&gt;Specification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Architectural&lt;/td&gt; &#xA;   &lt;td&gt;Separates the statement of how to match a candidate, from the candidate object that it is matched against. Specification design pattern allows us to check whether our objects meet certain requirements. Through this design pattern, we can reuse expression specifications and combine those specifications to easily question whether more complex requirements are satisfied or not.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/main/src/AdditionalPatterns/UnitOfWork/UnitOfWorkLibrary&#34;&gt;Unit Of Work&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Data Access&lt;/td&gt; &#xA;   &lt;td&gt;Maintains a list of objects affected by a business transaction and coordinates the writing out of changes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;How to run&lt;/h3&gt; &#xA;&lt;p&gt;The solution contains one executable project called &lt;code&gt;DesignPatternsLibrary&lt;/code&gt;.&lt;br&gt; Run the solution and you will get a menu from which you can choose a design pattern.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/nemanjarogic/DesignPatternsLibrary/main/assets/images/console-menu.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;Compare the output from the console with the code for the chosen design pattern.&lt;br&gt; Repeat!&lt;/p&gt; &#xA;&lt;p&gt;The solution can be run using either &lt;code&gt;.NET 5&lt;/code&gt; (choose .NET 5 &lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/tree/dotnet-5&#34;&gt;branch&lt;/a&gt; or &lt;a href=&#34;https://github.com/nemanjarogic/DesignPatternsLibrary/releases/tag/v5.0.0&#34;&gt;release&lt;/a&gt;) or &lt;code&gt;.NET 6&lt;/code&gt; (the default option).&lt;/p&gt; &#xA;&lt;h3&gt;Afterword&lt;/h3&gt; &#xA;&lt;p&gt;For learning more about design patterns, I highly recommend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visiting &lt;a href=&#34;https://refactoring.guru/&#34;&gt;Refactoring.Guru&lt;/a&gt; website for amazing content about design patterns&lt;/li&gt; &#xA; &lt;li&gt;Reading the &lt;code&gt;Head First Design Patterns: A Brain-Friendly Guide&lt;/code&gt; book&lt;/li&gt; &#xA; &lt;li&gt;Watching courses about design patterns available on various learning platforms. The idea for this repository has been born after watching &lt;a href=&#34;https://www.pluralsight.com/courses/patterns-library&#34;&gt;Design Patterns Library course&lt;/a&gt; created by &lt;code&gt;Steve Smith, Robert Horvick, Brian Lagunas, David Starr, Keith Sparkjoy, Niraj Bhatt, Glenn Block, Scott Allen, John Brown and Donald Belcham&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Visiting blogs like &lt;a href=&#34;https://exceptionnotfound.net/&#34;&gt;ExceptionNotFound&lt;/a&gt;, &lt;a href=&#34;https://ardalis.com/blog&#34;&gt;Ardalis&lt;/a&gt; or &lt;a href=&#34;https://enterprisecraftsmanship.com/posts&#34;&gt;Enterprise Craftsmanship&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The examples that are used to demonstrate design patterns usage are a mix of my own ideas and ideas adapted from various resources (some of them are mentioned above).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/project-system</title>
    <updated>2022-09-14T01:33:27Z</updated>
    <id>tag:github.com,2022-09-14:/dotnet/project-system</id>
    <link href="https://github.com/dotnet/project-system" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The .NET Project System for Visual Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The .NET Project System for Visual Studio&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Unit Tests (Debug)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Unit Tests (Release)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Localization&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/project-system/tree/dev16.11.x&#34;&gt;16.11&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev16.11.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.11.x&amp;amp;jobName=Windows_Debug&amp;amp;%20Debug&amp;amp;label=dev16.11.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev16.11.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.11.x&amp;amp;jobName=Windows_Release&amp;amp;%20Release&amp;amp;label=dev16.11.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev16.11.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev16.11.x&amp;amp;jobName=Spanish&amp;amp;label=dev16.11.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/project-system/tree/dev17.0.x&#34;&gt;17.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.0.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.0.x&amp;amp;jobName=Windows_Debug&amp;amp;%20Debug&amp;amp;label=dev17.0.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.0.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.0.x&amp;amp;jobName=Windows_Release&amp;amp;%20Release&amp;amp;label=dev17.0.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.0.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.0.x&amp;amp;jobName=Spanish&amp;amp;label=dev17.0.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/project-system/tree/dev17.1.x&#34;&gt;17.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.1.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.1.x&amp;amp;jobName=Windows_Debug&amp;amp;%20Debug&amp;amp;label=dev17.1.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.1.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.1.x&amp;amp;jobName=Windows_Release&amp;amp;%20Release&amp;amp;label=dev17.1.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.1.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.1.x&amp;amp;jobName=Spanish&amp;amp;label=dev17.1.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/project-system/tree/dev17.2.x&#34;&gt;17.2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.2.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.2.x&amp;amp;jobName=Windows_Debug&amp;amp;%20Debug&amp;amp;label=dev17.2.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.2.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.2.x&amp;amp;jobName=Windows_Release&amp;amp;%20Release&amp;amp;label=dev17.2.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.2.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.2.x&amp;amp;jobName=Spanish&amp;amp;label=dev17.2.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/project-system/tree/dev17.3.x&#34;&gt;17.3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.3.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.3.x&amp;amp;jobName=Windows_Debug&amp;amp;%20Debug&amp;amp;label=dev17.3.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.3.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.3.x&amp;amp;jobName=Windows_Release&amp;amp;%20Release&amp;amp;label=dev17.3.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=dev17.3.x&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=dev17.3.x&amp;amp;jobName=Spanish&amp;amp;label=dev17.3.x&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dotnet/project-system/tree/main&#34;&gt;main&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=main&amp;amp;jobName=Windows_Debug&amp;amp;%20Debug&amp;amp;label=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=main&amp;amp;jobName=Windows_Release&amp;amp;%20Release&amp;amp;label=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=406&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/project-system/unit-tests?branchName=main&amp;amp;jobName=Spanish&amp;amp;label=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/dotnet/project-system?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/dotnet/project-system.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dotnet/project-system&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the .NET Project System for &lt;a href=&#34;https://www.visualstudio.com/vs/&#34;&gt;Visual Studio&lt;/a&gt; that is written on top of the &lt;a href=&#34;https://github.com/microsoft/vsprojectsystem&#34;&gt;Common Project System (CPS)&lt;/a&gt; framework. In Visual Studio 2017, Visual Studio 2019, and Visual Studio 2022, this project system is used for .NET Core [SDK-style] (C#, F# and Visual Basic) and Shared Projects (C# and Visual Basic) project types. In the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/project-system/main/docs/repo/roadmap.md&#34;&gt;long term&lt;/a&gt;, this project system will be the basis for all C#, F# and Visual Basic project types. For a list of feature differences between the project systems, see &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/project-system/main/docs/feature-comparison.md&#34;&gt;Feature Comparison&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The legacy C# and Visual Basic project systems (&lt;em&gt;csproj.dll&lt;/em&gt; and &lt;em&gt;msvbprj.dll&lt;/em&gt;) first shipped with Visual Studio .NET in 2002. They have served us well but are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native and COM-based&lt;/li&gt; &#xA; &lt;li&gt;Single threaded and bound to the UI thread&lt;/li&gt; &#xA; &lt;li&gt;Hard to extend outside of aggregation via the use of &lt;code&gt;&amp;lt;ProjectTypeGuids&amp;gt;&lt;/code&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/extensibility/internals/project-types&#34;&gt;sub types (flavors)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Separate implementations for C# and Visual Basic projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The current .NET Project System is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Managed and managed-interface based&lt;/li&gt; &#xA; &lt;li&gt;Multi-threaded, scalable, and responsive&lt;/li&gt; &#xA; &lt;li&gt;Easy to extend and compose via the Managed Extensibility Framework (MEF). Many parties, including 3rd parties, can contribute to a single project system.&lt;/li&gt; &#xA; &lt;li&gt;A single implementation for C#, F# and Visual Basic projects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is a project system?&lt;/h2&gt; &#xA;&lt;p&gt;A project system sits between a project file on disk (for example, &lt;em&gt;.csproj&lt;/em&gt; and &lt;em&gt;.vbproj&lt;/em&gt;) and various Visual Studio features including, but not limited to, Solution Explorer, designers, the debugger, language services, build and deployment. Almost all interaction that occurs with files contained in a project file happens through the project system.&lt;/p&gt; &#xA;&lt;p&gt;There are many technologies that come together to make up the .NET Project System:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/msbuild&#34;&gt;MSBuild&lt;/a&gt; provides the build engine and file format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/sdk&#34;&gt;SDK&lt;/a&gt; provides the command-line interface for building, running and interacting with .NET projects, along with the necessary MSBuild tasks and targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vsprojectsystem&#34;&gt;Common Project System&lt;/a&gt; provides the base building blocks for the project system including (but not limited to) project tree, build and debugger coordination and Visual Studio integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; provides C# and Visual Basic language support including compilers, IntelliSense, refactorings, analyzers, and code fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/fsharp&#34;&gt;Visual F# tools&lt;/a&gt; provides F# language support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet/project-system/main/docs/repo/images/solution-explorer.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I build the repository?&lt;/h2&gt; &#xA;&lt;p&gt;This repository is built on .NET Framework and requires the .NET Framework version of &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2022&#34;&gt;MSBuild&lt;/a&gt; to build successfully. Additionally, there is a dependency on the &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/extensibility/starting-to-develop-visual-studio-extensions?view=vs-2022&#34;&gt;Visual Studio SDK&lt;/a&gt; as the .NET Project System is bundled as a Visual Studio Extension for deployment into Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Here is how to acquire the necessary components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the latest &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select these workloads during installation: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;.NET desktop build tools&lt;/li&gt; &#xA;     &lt;li&gt;Visual Studio extension development&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet/project-system/main/docs/repo/images/workloads-for-building-the-repo.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After the necessary components are installed, simply run the &lt;code&gt;build.cmd&lt;/code&gt; batch file at the root of the repository. This will build, test, and bundle the repository appropriately.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;build.cmd&lt;/strong&gt; flags&lt;/h3&gt; &#xA;&lt;p&gt;All the command line arguments provided to &lt;strong&gt;build.cmd&lt;/strong&gt; get forwarded to MSBuild. There are some special properties we&#39;ve set up for building this repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Projects: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:SrcProjects=[true or false]&lt;/code&gt;: Includes the projects within the &lt;strong&gt;src&lt;/strong&gt; directory. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:TestProjects=[true or false]&lt;/code&gt;: Includes the projects within the &lt;strong&gt;tests&lt;/strong&gt; directory. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:SetupProjects=[true or false]&lt;/code&gt;: Includes the projects within the &lt;strong&gt;setup&lt;/strong&gt; directory. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Targets: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:Restore=[true or false]&lt;/code&gt;: Runs the &lt;strong&gt;Restore&lt;/strong&gt; target to acquire project dependencies. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:Build=[true or false]&lt;/code&gt;: Runs the &lt;strong&gt;Build&lt;/strong&gt; target to compile the projects into assemblies. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:Rebuild=[true or false]&lt;/code&gt;: Runs the &lt;strong&gt;Rebuild&lt;/strong&gt; target which cleans and builds the projects. Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:Test=[true or false]&lt;/code&gt;: Runs the &lt;strong&gt;Test&lt;/strong&gt; target to execute the xUnit test projects. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/p:Pack=[true or false]&lt;/code&gt;: Runs the &lt;strong&gt;Pack&lt;/strong&gt; target to bundle the projects into NuGet packages. Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I engage and contribute?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome you to try things out, &lt;a href=&#34;https://github.com/dotnet/project-system/issues&#34;&gt;file issues&lt;/a&gt;, make feature requests, and join us in design conversations. If you are looking for something to work on, take a look at our &lt;a href=&#34;https://github.com/dotnet/project-system/issues?q=is%3Aopen+is%3Aissue+label%3A%22Help+Wanted%22&#34;&gt;help wanted issues&lt;/a&gt; for a great place to start. Also, check out our &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/project-system/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted a code of conduct adapted from the &lt;a href=&#34;http://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. This code of conduct has been &lt;a href=&#34;http://contributor-covenant.org/adopters/&#34;&gt;adopted by many other projects&lt;/a&gt;. For more information, see &lt;a href=&#34;https://github.com/dotnet/home/raw/master/guidance/be-nice.md&#34;&gt;Contributors Code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
</feed>