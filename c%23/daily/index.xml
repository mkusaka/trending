<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-10T01:27:35Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ravibpatel/AutoUpdater.NET</title>
    <updated>2024-05-10T01:27:35Z</updated>
    <id>tag:github.com,2024-05-10:/ravibpatel/AutoUpdater.NET</id>
    <link href="https://github.com/ravibpatel/AutoUpdater.NET" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic desktop application projects.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ravibpatel/AutoUpdater.NET/b15a8fbf5863902ec28a2adfb04829dd75dba226/Logo/Horizontal.png&#34; alt=&#34;AutoUpdater.NET&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/ravibpatel/autoupdater-net&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/yng987o7dauk9gqc?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AutoUpdater.NET is a class library that allows .NET developers to easily add auto update functionality to their classic desktop application projects.&lt;/p&gt; &#xA;&lt;h2&gt;The NuGet Package &lt;a href=&#34;https://www.nuget.org/packages/Autoupdater.NET.Official/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Autoupdater.NET.Official.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Autoupdater.NET.Official/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Autoupdater.NET.Official.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PM&amp;gt; Install-Package Autoupdater.NET.Official&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported .NET versions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Framework 4.5 or above&lt;/li&gt; &#xA; &lt;li&gt;.NET Core 3.1&lt;/li&gt; &#xA; &lt;li&gt;.NET 5.0 or above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This library only works for WinForms or WPF application projects.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;AutoUpdater.NET downloads the XML file containing update information from your server. It uses this XML file to get the information about the latest version of the software. If the latest version of the software is greater than the current version of the software installed on User&#39;s PC then AutoUpdater.NET shows update dialog to the user. If user press the update button to update the software then It downloads the update file (Installer) from URL provided in XML file and executes the installer file it just downloaded. It is a job of installer after this point to carry out the update. If you provide zip file URL instead of installer then AutoUpdater.NET will extract the contents of zip file to application directory.&lt;/p&gt; &#xA;&lt;h2&gt;Using the code&lt;/h2&gt; &#xA;&lt;h3&gt;XML file&lt;/h3&gt; &#xA;&lt;p&gt;AutoUpdater.NET uses XML file located on a server to get the release information about the latest version of the software. You need to create XML file like below and then you need to upload it to your server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;item&amp;gt;&#xA;  &amp;lt;version&amp;gt;2.0.0.0&amp;lt;/version&amp;gt;&#xA;  &amp;lt;url&amp;gt;https://rbsoft.org/downloads/AutoUpdaterTest.zip&amp;lt;/url&amp;gt;&#xA;  &amp;lt;changelog&amp;gt;https://github.com/ravibpatel/AutoUpdater.NET/releases&amp;lt;/changelog&amp;gt;&#xA;  &amp;lt;mandatory&amp;gt;false&amp;lt;/mandatory&amp;gt;&#xA;&amp;lt;/item&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two things you need to provide in XML file as you can see above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;version (Required) : You need to provide latest version of the application between version tags. Version should be in X.X.X.X format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;url (Required): You need to provide URL of the latest version installer file or zip file between url tags. AutoUpdater.NET downloads the file provided here and install it when user press the Update button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;changelog (Optional): You need to provide URL of the change log of your application between changelog tags. If you don&#39;t provide the URL of the changelog then update dialog won&#39;t show the change log.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;mandatory (Optional): You can set this to true if you don&#39;t want user to skip this version. This will ignore Remind Later and Skip options and hide both Skip and Remind Later button on update dialog.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;mode (Attribute, Optional): You can provide mode attribute on mandatory element to change the behaviour of the mandatory flag. If you provide &#34;1&#34; as the value of mode attribute then it will also hide the Close button on update dialog. If you provide &#34;2&#34; as the value of mode attribute then it will skip the update dialog and start downloading and updating application automatically.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mandatory mode=&#34;2&#34;&amp;gt;true&amp;lt;/mandatory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;minVersion (Attribute, Optional): You can also provide minVersion attribute on mandatory element. When you provide it, Mandatory option will be triggered only if the installed version of the app is less than the minimum version you specified here.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mandatory minVersion=&#34;1.2.0.0&#34;&amp;gt;true&amp;lt;/mandatory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;executable (Optional): You can provide the path of the executable if it was changed in the update. It should be relative to the installation directory of the application. For example, if the new executable is located inside the bin folder of the installation directory, then you should provide it as shown below.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;executable&amp;gt;bin\AutoUpdaterTest.exe&amp;lt;/executable&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;args (Optional): You can provide command line arguments for Installer between this tag. You can include %path% with your command line arguments, it will be replaced by path of the directory where currently executing application resides.&lt;/li&gt; &#xA; &lt;li&gt;checksum (Optional): You can provide the checksum for the update file between this tag. If you do this AutoUpdater.NET will compare the checksum of the downloaded file before executing the update process to check the integrity of the file. You can provide algorithm attribute in the checksum tag to specify which algorithm should be used to generate the checksum of the downloaded file. Currently, MD5, SHA1, SHA256, SHA384, and SHA512 are supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;checksum algorithm=&#34;MD5&#34;&amp;gt;Update file Checksum&amp;lt;/checksum&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the XML creator tool created by one of the user to create the XML file. You can download it from &lt;a href=&#34;https://github.com/DwainSnickles/AutoUpdater.NET.XML-Creator-master/raw/master/AutoUpdaterXML.zip&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Adding one line to make it work&lt;/h3&gt; &#xA;&lt;p&gt;After you done creating and uploading XML file, It is very easy to add a auto update functionality to your application. First you need to add following line at the top of your form.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using AutoUpdaterDotNET;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you just need to add following line to your main form constructor or in Form_Load event. You can add this line anywhere you like. If you don&#39;t like to check for update when application starts then you can create a Check for update button and add this line to Button_Click event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Start(&#34;https://rbsoft.org/updates/AutoUpdaterTest.xml&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start method of AutoUpdater class takes URL of the XML file you uploaded to server as a parameter.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AutoUpdater.Start should be called from UI thread.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Current version detection&lt;/h3&gt; &#xA;&lt;p&gt;AutoUpdater.NET uses Assembly version to determine the current version of the application. You can update it by going to Properties of the project as shown in following screenshot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://rbsoft.org/images/assembly-version.png&#34; alt=&#34;How to change assembly version of your .NET application?&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Version specified in XML file should be higher than Assembly version to trigger the update.&lt;/p&gt; &#xA;&lt;p&gt;If you want to provide your own Assembly then you can do it by providing second argument of Start method as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Start(&#34;https://rbsoft.org/updates/AutoUpdaterTest.xml&#34;, myAssembly);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration Options&lt;/h2&gt; &#xA;&lt;h3&gt;Provide installed version manually&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want AutoUpdater.NET to determine the installed version from assembly then you can provide your own version by assigning it to InstalledVersion field as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.InstalledVersion = new Version(&#34;1.2&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download Update file and XML using FTP&lt;/h3&gt; &#xA;&lt;p&gt;If you like to use ftp XML URL to check for updates or download the update file then you can provide you FTP credentials in alternative Start method as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Start(&#34;ftp://rbsoft.org/updates/AutoUpdaterTest.xml&#34;, new NetworkCredential(&#34;FtpUserName&#34;, &#34;FtpPassword&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using FTP download URL in the XML file then credentials provided here will be used to authenticate the request.&lt;/p&gt; &#xA;&lt;h3&gt;Check for updates synchronously&lt;/h3&gt; &#xA;&lt;p&gt;If you want to check for updates synchronously then set Synchronous to true before starting the update as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Synchronous = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disable Skip Button&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to show Skip button on Update form then just add following line with above code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ShowSkipButton = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disable Remind Later Button&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to show Remind Later button on Update form then just add following line with above code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ShowRemindLaterButton = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ignore previous Remind Later or Skip settings&lt;/h3&gt; &#xA;&lt;p&gt;If you want to ignore previously set Remind Later and Skip settings then you can set Mandatory property to true. It will also hide Skip and Remind Later button. If you set Mandatory to true in code then value of Mandatory in your XML file will be ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Mandatory = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Forced updates&lt;/h3&gt; &#xA;&lt;p&gt;You can enable forced updates by setting Mandatory property to true and setting UpdateMode to value of &lt;code&gt;Mode.Forced&lt;/code&gt; or &lt;code&gt;Mode.ForcedDownload&lt;/code&gt;. &lt;code&gt;Mode.Forced&lt;/code&gt; option will hide Remind Later, Skip and Close buttons on the standard update dialog. &lt;code&gt;Mode.ForcedDownload&lt;/code&gt; option will skip the standard update dialog and start downloading and updating the application without user interaction. &lt;code&gt;Mode.ForceDownload&lt;/code&gt; option will also ignore value of OpenDownloadPage flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Mandatory = true;&#xA;AutoUpdater.UpdateMode = Mode.Forced;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Authentication&lt;/h3&gt; &#xA;&lt;p&gt;You can provide Basic Authentication for XML, Update file and Change Log as shown in below code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;BasicAuthentication basicAuthentication = new BasicAuthentication(&#34;myUserName&#34;, &#34;myPassword&#34;);&#xA;AutoUpdater.BasicAuthXML = AutoUpdater.BasicAuthDownload = AutoUpdater.BasicAuthChangeLog = basicAuthentication;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set User-Agent for http web requests&lt;/h3&gt; &#xA;&lt;p&gt;Set the User-Agent string to be used for HTTP web requests so you can differentiate them in your web server request logs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.HttpUserAgent = &#34;AutoUpdater&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enable Error Reporting&lt;/h3&gt; &#xA;&lt;p&gt;You can turn on error reporting by adding below code. If you do this AutoUpdater.NET will show error message, if there is no update available or if it can&#39;t get to the XML file from web server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ReportErrors = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run update process without Administrator privileges&lt;/h3&gt; &#xA;&lt;p&gt;If your application doesn&#39;t need administrator privileges to replace old version then you can set RunUpdateAsAdmin to false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.RunUpdateAsAdmin = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open Download Page&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to download the latest version of the application and just want to open the URL between url tags of your XML file then you need to add following line with above code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.OpenDownloadPage = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This kind of scenario is useful if you want to show some information to users before they download the latest version of an application.&lt;/p&gt; &#xA;&lt;h3&gt;Remind Later&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want users to select Remind Later time when they press the Remind Later button of update dialog then you need to add following lines with above code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.LetUserSelectRemindLater = false;&#xA;AutoUpdater.RemindLaterTimeSpan = RemindLaterFormat.Days;&#xA;AutoUpdater.RemindLaterAt = 2;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In above example when user press Remind Later button of update dialog, It will remind user for update after 2 days.&lt;/p&gt; &#xA;&lt;h3&gt;Proxy Server&lt;/h3&gt; &#xA;&lt;p&gt;If your XML and Update file can only be used from certain Proxy Server then you can use following settings to tell AutoUpdater.NET to use that proxy. Currently, if your Changelog URL is also restricted to Proxy server then you should omit changelog tag from XML file cause it is not supported using Proxy Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var proxy = new WebProxy(&#34;ProxyIP:ProxyPort&#34;, true)&#xA;{&#xA;    Credentials = new NetworkCredential(&#34;ProxyUserName&#34;, &#34;ProxyPassword&#34;)&#xA;};&#xA;AutoUpdater.Proxy = proxy;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify where to download the update file&lt;/h3&gt; &#xA;&lt;p&gt;You can specify where you want to download the update file by assigning DownloadPath field as shown below. It will be used for ZipExtractor too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.DownloadPath = Application.StartupPath;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify where to extract zip file containing updated files&lt;/h3&gt; &#xA;&lt;p&gt;If you are using a zip file as an update file then you can set the &#34;InstallationPath&#34; equal to the path where your app is installed. This is only necessary when your installation directory differs from your executable path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var currentDirectory = new DirectoryInfo(Application.StartupPath);&#xA;if (currentDirectory.Parent != null)&#xA;{&#xA;    AutoUpdater.InstallationPath = currentDirectory.Parent.FullName;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify relative path to executable you want to execute after update&lt;/h3&gt; &#xA;&lt;p&gt;If you are using a zip file as an update file, then you can set &#34;ExecutablePath&#34; equal to a new executable path relative to the installation directory. This is only necessary if your new executable path differs from current executable path. The &#34;executable&#34; value defined in XML takes precedence over this value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ExecutablePath = &#34;bin/AutoUpdater.exe&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Clear application directory before extracting update file&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it is necessary to clear previous version files before doing an update. In this case, you can specify whether to clear the application directory before extracting the update file using the below code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ClearAppDirectory = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specify size of the UpdateForm&lt;/h3&gt; &#xA;&lt;p&gt;You can specify the size of the update form by using below code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.UpdateFormSize = new System.Drawing.Size(800, 600);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change Icon of the UpdateForm&lt;/h3&gt; &#xA;&lt;p&gt;You can change the icon of the update form by using below code. It assumes that you have an image resource named Icon in your project. Size of icon file should be 64x64.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.Icon = Resources.Icon;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set the owner Form / Window&lt;/h3&gt; &#xA;&lt;p&gt;To ensure the dialogs showed by the auto updater are visible and always focussed correctly related to an application Form or Window, it may be necessary to set an owner. You can assign a Form or WPF Window as the owner by following the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.SetOwner(yourMainFormOrWpfWindow);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set the TopMost property of all updater dialogs&lt;/h3&gt; &#xA;&lt;p&gt;To ensure that the dialogs displayed by the auto updater are always on top, you can set the &#34;TopMost&#34; to true, as demonstrated in the code snippet below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.TopMost = true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change storage method of Remind Later and Skip options&lt;/h3&gt; &#xA;&lt;p&gt;You can change how AutoUpdater.NET saves the Remind Later and Skip values by assigning the PersistenceProvider. If you don&#39;t provide a PersistenceProvider then it will save the values in Windows registry.&lt;/p&gt; &#xA;&lt;p&gt;If you are using .NET 4.0 or above then you can use JsonFilePersistenceProvider instead of default RegistryPersistenceProvider as shown below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string jsonPath = Path.Combine(Environment.CurrentDirectory, &#34;settings.json&#34;);&#xA;AutoUpdater.PersistenceProvider = new JsonFilePersistenceProvider(jsonPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create your own PersistenceProvider by implementing &lt;a href=&#34;https://github.com/ravibpatel/AutoUpdater.NET/raw/master/AutoUpdater.NET/IPersistenceProvider.cs&#34;&gt;IPersistenceProvider&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;h2&gt;Check updates frequently&lt;/h2&gt; &#xA;&lt;p&gt;You can call Start method inside Timer to check for updates frequently.&lt;/p&gt; &#xA;&lt;h3&gt;WinForms&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;System.Timers.Timer timer = new System.Timers.Timer&#xA;{&#xA;    Interval = 2 * 60 * 1000,&#xA;    SynchronizingObject = this&#xA;};&#xA;timer.Elapsed += delegate&#xA;{&#xA;    AutoUpdater.Start(&#34;https://rbsoft.org/updates/AutoUpdaterTest.xml&#34;);&#xA;};&#xA;timer.Start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WPF&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;DispatcherTimer timer = new DispatcherTimer {Interval = TimeSpan.FromMinutes(2)};&#xA;timer.Tick += delegate&#xA;{&#xA;    AutoUpdater.Start(&#34;https://rbsoft.org/updates/AutoUpdaterTestWPF.xml&#34;);&#xA;};&#xA;timer.Start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling Application exit logic manually&lt;/h2&gt; &#xA;&lt;p&gt;If you like to handle Application exit logic yourself then you can use ApplicationExitEvent like below. This is very useful if you like to do something before closing the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ApplicationExitEvent += AutoUpdater_ApplicationExitEvent;&#xA;&#xA;private void AutoUpdater_ApplicationExitEvent()&#xA;{&#xA;    Text = @&#34;Closing application...&#34;;&#xA;    Thread.Sleep(5000);&#xA;    Application.Exit();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Handling updates manually&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes as a developer you need to maintain look and feel for the entire application similarly or you just need to do something before update. In this type of scenarios you can handle the updates manually by subscribing to an event. You can do it by adding following line with above code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.CheckForUpdateEvent += AutoUpdaterOnCheckForUpdateEvent;&#xA;&#xA;private void AutoUpdaterOnCheckForUpdateEvent(UpdateInfoEventArgs args)&#xA;{&#xA;    if (args.Error == null)&#xA;    {&#xA;        if (args.IsUpdateAvailable)&#xA;        {&#xA;            DialogResult dialogResult;&#xA;            if (args.Mandatory.Value)&#xA;            {&#xA;                dialogResult =&#xA;                    MessageBox.Show(&#xA;                        $@&#34;There is new version {args.CurrentVersion} available. You are using version {args.InstalledVersion}. This is required update. Press Ok to begin updating the application.&#34;, @&#34;Update Available&#34;,&#xA;                        MessageBoxButtons.OK,&#xA;                        MessageBoxIcon.Information);&#xA;            }&#xA;            else&#xA;            {&#xA;                dialogResult =&#xA;                    MessageBox.Show(&#xA;                        $@&#34;There is new version {args.CurrentVersion} available. You are using version {&#xA;                                args.InstalledVersion&#xA;                            }. Do you want to update the application now?&#34;, @&#34;Update Available&#34;,&#xA;                        MessageBoxButtons.YesNo,&#xA;                        MessageBoxIcon.Information);&#xA;            }&#xA;    &#xA;            // Uncomment the following line if you want to show standard update dialog instead.&#xA;            // AutoUpdater.ShowUpdateForm(args);&#xA;    &#xA;            if (dialogResult.Equals(DialogResult.Yes) || dialogResult.Equals(DialogResult.OK))&#xA;            {&#xA;                try&#xA;                {&#xA;                    if (AutoUpdater.DownloadUpdate(args))&#xA;                    {&#xA;                        Application.Exit();&#xA;                    }&#xA;                }&#xA;                catch (Exception exception)&#xA;                {&#xA;                    MessageBox.Show(exception.Message, exception.GetType().ToString(), MessageBoxButtons.OK,&#xA;                        MessageBoxIcon.Error);&#xA;                }&#xA;            }&#xA;        }&#xA;        else&#xA;        {&#xA;            MessageBox.Show(@&#34;There is no update available please try again later.&#34;, @&#34;No update available&#34;,&#xA;                MessageBoxButtons.OK, MessageBoxIcon.Information);&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        if (args.Error is WebException)&#xA;        {&#xA;            MessageBox.Show(&#xA;                @&#34;There is a problem reaching update server. Please check your internet connection and try again later.&#34;,&#xA;                @&#34;Update Check Failed&#34;, MessageBoxButtons.OK, MessageBoxIcon.Error);&#xA;        }&#xA;        else&#xA;        {&#xA;            MessageBox.Show(args.Error.Message,&#xA;                args.Error.GetType().ToString(), MessageBoxButtons.OK,&#xA;                MessageBoxIcon.Error);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you do this it will execute the code in above event when AutoUpdater.Start method is called instead of showing the update dialog.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IsUpdateAvailable (bool) : If update is available then returns true otherwise false.&lt;/li&gt; &#xA; &lt;li&gt;DownloadURL (string) : Download URL of the update file..&lt;/li&gt; &#xA; &lt;li&gt;ChangelogURL (string) : URL of the webpage specifying changes in the new update.&lt;/li&gt; &#xA; &lt;li&gt;CurrentVersion (Version) : Newest version of the application available to download.&lt;/li&gt; &#xA; &lt;li&gt;InstalledVersion (Version) : Version of the application currently installed on the user&#39;s PC.&lt;/li&gt; &#xA; &lt;li&gt;Mandatory (Mandatory) : Shows if the update is required or optional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Handling parsing logic manually&lt;/h2&gt; &#xA;&lt;p&gt;If you want to use other format instead of XML as an AppCast file then you need to handle the parsing logic by subscribing to ParseUpdateInfoEvent. You can do it as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AutoUpdater.ParseUpdateInfoEvent += AutoUpdaterOnParseUpdateInfoEvent;&#xA;AutoUpdater.Start(&#34;https://rbsoft.org/updates/AutoUpdaterTest.json&#34;);&#xA;&#xA;private void AutoUpdaterOnParseUpdateInfoEvent(ParseUpdateInfoEventArgs args)&#xA;{&#xA;    dynamic json = JsonConvert.DeserializeObject(args.RemoteData);&#xA;    args.UpdateInfo = new UpdateInfoEventArgs&#xA;    {&#xA;        CurrentVersion = json.version,&#xA;        ChangelogURL = json.changelog,&#xA;        DownloadURL = json.url,&#xA;        Mandatory = new Mandatory&#xA;        {&#xA;            Value = json.mandatory.value,&#xA;            UpdateMode = json.mandatory.mode,&#xA;            MinimumVersion = json.mandatory.minVersion&#xA;        },&#xA;        CheckSum = new CheckSum&#xA;        {&#xA;            Value = json.checksum.value,&#xA;            HashingAlgorithm = json.checksum.hashingAlgorithm&#xA;        }&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON file used in the Example above&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;version&#34;:&#34;2.0.0.0&#34;,&#xA;   &#34;url&#34;:&#34;https://rbsoft.org/downloads/AutoUpdaterTest.zip&#34;,&#xA;   &#34;changelog&#34;:&#34;https://github.com/ravibpatel/AutoUpdater.NET/releases&#34;,&#xA;   &#34;mandatory&#34;:{&#xA;      &#34;value&#34;:true,&#xA;      &#34;minVersion&#34;: &#34;2.0.0.0&#34;,&#xA;      &#34;mode&#34;:1&#xA;   },&#xA;   &#34;checksum&#34;:{&#xA;      &#34;value&#34;:&#34;E5F59E50FC91A9E52634FFCB11F32BD37FE0E2F1&#34;,&#xA;      &#34;hashingAlgorithm&#34;:&#34;SHA1&#34;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Steps to build it for further development&lt;/h2&gt; &#xA;&lt;p&gt;You can follow below steps to build the project on your local development environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable signing from project properties of both AutoUpdater.NET and ZipExtractor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit both .csproj file of AutoUpdater.NET and ZipExtractor and change following line. Use .NET version you prefer.&lt;/p&gt; &lt;p&gt;Before&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;TargetFrameworks&amp;gt;net45;netcoreapp3.1;net5.0-windows&amp;lt;/TargetFrameworks&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;TargetFramework&amp;gt;net5.0-windows&amp;lt;/TargetFramework&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build ZipExtractor project in &#34;Release&#34; configuration to create the executable in Resources folder. While compiling it for .NET Core 3.1 or above, you have to use publish command instead of build as shown &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/tutorials/publishing-with-visual-studio?pivots=dotnet-7-0&#34;&gt;here&lt;/a&gt; and copy the resulting executable to &#34;AutoUpdater.NET/Resources&#34; folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VS2022 doesn&#39;t allow building .NET Framework 4.5 by default, so if you are using it then you can just change it to any supported .NET version, or you have to follow steps from &lt;a href=&#34;https://stackoverflow.com/a/70109092/1273550&#34;&gt;here&lt;/a&gt; to use .NET Framework 4.5.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>simpleidserver/SimpleIdServer</title>
    <updated>2024-05-10T01:27:35Z</updated>
    <id>tag:github.com,2024-05-10:/simpleidserver/SimpleIdServer</id>
    <link href="https://github.com/simpleidserver/SimpleIdServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenID, OAuth 2.0, SCIM2.0, UMA2.0, FAPI, CIBA &amp; OPENBANKING Framework for ASP.NET Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simpleidserver core&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/simpleidserver/SimpleIdServer/master/images/logo.svg?sanitize=true&#34; alt=&#34;SimpleIdServer&#34; style=&#34;width:200px;&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/simpleidserver/simpleidserver&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/shtqlxhbda6gtdag?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.gitter.im/#/room/#simpleidserver:gitter.im&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/repo.svg?sanitize=true&#34; alt=&#34;Join the chat at https://app.gitter.im/#/room/#simpleidserver:gitter.im&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SimpleIdServer is an open source framework enabling the support of OPENID, OAUTH2.0, SCIM2.0, UMA2.0, FAPI and CIBA. It streamlines development, configuration and deployment of custom access control servers. Thanks to its modularity and extensibility, SimpleIdServer can be customized to the specific needs of your organization for authentication, authorization and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://simpleidserver.com&#34;&gt;Website&lt;/a&gt;, &lt;a href=&#34;https://simpleidserver.com/docs/intro&#34;&gt;Documentation&lt;/a&gt; and &lt;a href=&#34;https://website.simpleidserver.com/&#34;&gt;Demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.IdServer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.IdServer.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.IdServer.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.IdServer.Email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer.Email&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.IdServer.Email.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer.Email&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.IdServer.Email.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.IdServer.Sms&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer.Sms&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.IdServer.Sms.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer.Sms&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.IdServer.Sms.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.IdServer.WsFederation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer.WsFederation&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.IdServer.WsFederation.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.IdServer.WsFederation&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.IdServer.WsFederation.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.Templates&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Templates&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.Templates.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Templates&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.Templates.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.Scim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.Scim.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.Scim.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.Scim.Persistence.EF&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim.Persistence.EF&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.Scim.Persistence.EF.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim.Persistence.EF&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.Scim.Persistence.EF.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.Scim.Persistence.MongoDB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim.Persistence.MongoDB&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.Scim.Persistence.MongoDB.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim.Persistence.MongoDB&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.Scim.Persistence.MongoDB.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.Scim.Client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim.Client&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.Scim.Client.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.Scim.Client&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.Scim.Client.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SimpleIdServer.OpenIdConnect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.OpenIdConnect&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SimpleIdServer.OpenIdConnect.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/SimpleIdServer.OpenIdConnect&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/SimpleIdServer.OpenIdConnect.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Preparation&lt;/h1&gt; &#xA;&lt;p&gt;Install SimpleIdServer templates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new --install SimpleIdServer.Templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add the following templates&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command line&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotnet new idserver&lt;/td&gt; &#xA;   &lt;td&gt;Create Identity Server. By default, Entity Framework is configured to use SQLServer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotnet new idserverwebsite&lt;/td&gt; &#xA;   &lt;td&gt;Create Identity Server website. By default, Entity Framework is configured to use SQLServer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotnet new scim&lt;/td&gt; &#xA;   &lt;td&gt;Create SCIM Server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotnet new credissuer&lt;/td&gt; &#xA;   &lt;td&gt;Create credential issuer API.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotnet new credissueradminui&lt;/td&gt; &#xA;   &lt;td&gt;Create credential issuer administration UI.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Create Visual Studio Solution&lt;/h2&gt; &#xA;&lt;p&gt;Open a command prompt and execute the following commands to create the directory structure for the solution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir Quickstart&#xA;cd Quickstart&#xA;mkdir src&#xA;dotnet new sln -n Quickstart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create IdentityServer project&lt;/h2&gt; &#xA;&lt;p&gt;To create a web project named &lt;code&gt;IdServer&lt;/code&gt; with the &lt;code&gt;SimpleIdServer.IdServer&lt;/code&gt; package installed, execute the command line :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;dotnet new idserver -n IdServer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following files will be created within a new &lt;code&gt;src/IdServer&lt;/code&gt; directory :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IdServer.csproj&lt;/code&gt; : Project file with the &lt;code&gt;SimpleIdServer.IdServer&lt;/code&gt; NuGet package added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appsettings.json&lt;/code&gt; : Contains the ConnectionString.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Program.cs&lt;/code&gt; : Main application entry point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IdServerConfiguration.cs&lt;/code&gt; : Contains the &lt;code&gt;Clients&lt;/code&gt;, &lt;code&gt;Resources&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Next, add the &lt;code&gt;IdServer&lt;/code&gt; project into the Visual Studio Solution&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ..&#xA;dotnet sln add ./src/IdServer/IdServer.csproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the IdServer project, ensuring that it listens on the URL &lt;code&gt;https://localhost:5001&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src/IdServer&#xA;dotnet run --urls=https://localhost:5001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The IdentityServer is now ready to be used.&lt;/p&gt; &#xA;&lt;p&gt;By default, there is one administrator account configured. You can access their profile by navigating to the URL &lt;code&gt;https://localhost:5001/master&lt;/code&gt; and authenticate using the following credentials :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login : administrator&lt;/li&gt; &#xA; &lt;li&gt;Password : password&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;IdentityServer UI preview&lt;/h2&gt; &#xA;&lt;p&gt;The IdentityServer UI uses Bootstrap 5.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simpleidserver/SimpleIdServer/master/images/IdentityServer-1.png&#34; alt=&#34;IdentityServer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Create IdentityServer website project&lt;/h2&gt; &#xA;&lt;p&gt;create a web project named &lt;code&gt;IdServerWebsite&lt;/code&gt; with the &lt;code&gt;SimpleIdServer.IdServer.Website&lt;/code&gt; package installed, execute the command line :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;dotnet new idserverwebsite -n IdServerWebsite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;IdServerWebsite&lt;/code&gt; project, it must listens on the url &lt;code&gt;https://localhost:5002&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src/IdServerWebsite&#xA;dotnet run --urls=https://localhost:5002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The IdentityServer website is now ready to be used.&lt;/p&gt; &#xA;&lt;p&gt;The website can be used to manage all aspects of an Identity Server solution, such as managing clients, users, and scopes.&lt;/p&gt; &#xA;&lt;h2&gt;Identity Server website UI preview&lt;/h2&gt; &#xA;&lt;p&gt;The IdentityServer website UI uses Radzen.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simpleidserver/SimpleIdServer/master/images/IdentityServerWebsite-2.png&#34; alt=&#34;IdentityServerWebsite&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;SCIM Security&lt;/h2&gt; &#xA;&lt;p&gt;By default SCIM is configured to use API KEY authentication. For clients to perform any operation, they must include one of those keys in the &lt;code&gt;HTTP HEADER Authorization Bearer&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Owner&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IdServer&lt;/td&gt; &#xA;   &lt;td&gt;ba521b3b-02f7-4a37-b03c-58f713bf88e7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AzureAd&lt;/td&gt; &#xA;   &lt;td&gt;1595a72a-2804-495d-8a8a-2c861e7a736a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Create SCIM project with EF support&lt;/h2&gt; &#xA;&lt;p&gt;Create a web project named &lt;code&gt;ScimEF&lt;/code&gt; with the &lt;code&gt;SimpleIdServer.Scim.Persistence.EF&lt;/code&gt; package installed and Entity Framework (EF) configured to use SQLServer, execute the command line :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;dotnet new scim -n ScimEF --connectionString &#34;Data Source=.;Initial Catalog=SCIM;Integrated Security=True;TrustServerCertificate=True&#34; -t &#34;SQLSERVER&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add the &lt;code&gt;ScimEF&lt;/code&gt; project into the Visual Studio Solution&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ..&#xA;dotnet sln add ./src/ScimEF/ScimEF.csproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the ScimEF project, ensuring that it listens on the URL &lt;code&gt;https://localhost:5003&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src/SCIMEF&#xA;dotnet run --urls=https://localhost:5003&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that the SCIM server is running, you can check its Schemas endpoint by accessing &lt;a href=&#34;https://localhost:5003/Schemas&#34;&gt;https://localhost:5003/Schemas&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Create SCIM project with MongoDB support&lt;/h2&gt; &#xA;&lt;p&gt;To create a web project named ScimMongoDB with the SimpleIdServer.Scim.Persistence.MongoDB package installed and MongoDB support, execute the command line :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;dotnet new scim -n ScimMongoDB --connectionString &#34;mongodb://localhost:27017&#34; -t &#34;MONGODB&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, add the &lt;code&gt;ScimMongoDB&lt;/code&gt; project into the Visual Studio Solution&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ..&#xA;dotnet sln add ./src/ScimMongoDB/ScimMongoDB.csproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the ScimMongoDB project, ensuring that it listens on the URL &lt;code&gt;https://localhost:5003&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src/ScimMongoDB&#xA;dotnet run --urls=https://localhost:5003&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that the SCIM server is running, you can check its Schemas endpoint by accessing &lt;a href=&#34;https://localhost:5003/Schemas&#34;&gt;https://localhost:5003/Schemas&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Create credential issuer project&lt;/h2&gt; &#xA;&lt;p&gt;To create a web project named &lt;code&gt;CredentialIssuer&lt;/code&gt; with the &lt;code&gt;SimpleIdServer.CredentialIssuer&lt;/code&gt; package installed, execute the command line :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;dotnet new credissuer -n CredentialIssuer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following files will be created within a new &lt;code&gt;src/CredentialIssuer&lt;/code&gt; directory :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CredentialIssuer.csproj&lt;/code&gt; : Project file with the &lt;code&gt;SimpleIdServer.CredentialIssuer&lt;/code&gt; NuGet package added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;appsettings.json&lt;/code&gt; : Contains the properties to configure the Openid authentication, such as the ClientId, ClientSecret and Issuer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Program.cs&lt;/code&gt; : Main application entry point.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CredentialIssuerConfiguration.cs&lt;/code&gt; : Contains the &lt;code&gt;CredentialConfigurations&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run the CredentialIssuer project, ensuring that it listens on the URL &lt;code&gt;https://localhost:5005&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src/IdServer&#xA;dotnet run --urls=https://localhost:5005&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CredentialIssuer is now ready to be used.&lt;/p&gt; &#xA;&lt;h2&gt;Credential issuer UI preview&lt;/h2&gt; &#xA;&lt;p&gt;The CredentialIssuer UI uses Bootstrap 5.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simpleidserver/SimpleIdServer/master/images/CredentialIssuer-1.png&#34; alt=&#34;CredentialIssuer&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Create credential issuer website project&lt;/h2&gt; &#xA;&lt;p&gt;To create a web project named &lt;code&gt;CredentialIssuerAdminui&lt;/code&gt; with the &lt;code&gt;SimpleIdServer.CredentialIssuer.Website&lt;/code&gt; package installed, execute the command line :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;dotnet new credissueradminui -n CredentialIssuerAdminui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the &lt;code&gt;CredentialIssuerAdminui&lt;/code&gt; project, it must listens on the url &lt;code&gt;https://localhost:5006&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src/IdServerWebsite&#xA;dotnet run --urls=https://localhost:5006&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The credential issuer administration ui is now ready to be used.&lt;/p&gt; &#xA;&lt;p&gt;The website can be used to manage the credential configurations.&lt;/p&gt; &#xA;&lt;h2&gt;Credential issuer website UI preview&lt;/h2&gt; &#xA;&lt;p&gt;The CredentialIssuer website UI uses Radzen.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simpleidserver/SimpleIdServer/master/images/CredentialIssuer-2.png&#34; alt=&#34;CredentialIssuerAdminUi&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Running with docker&lt;/h1&gt; &#xA;&lt;p&gt;To execute all the projects in Docker, execute the following commands :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;psake dockerBuild&#xA;psake dockerUp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/simpleidserver/SimpleIdServer/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on our code of conduct, and the process for submitting pull requests to us.&lt;/p&gt; &#xA;&lt;h1&gt;Contact us&lt;/h1&gt; &#xA;&lt;p&gt;To contact the team, you can send an email to &lt;code&gt;agentsimpleidserver@gmail.com&lt;/code&gt; or share your ideas in gitter.im. The invitation link is &lt;a href=&#34;https://app.gitter.im/#/room/#simpleidserver:gitter.im&#34;&gt;https://app.gitter.im/#/room/#simpleidserver:gitter.im&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>