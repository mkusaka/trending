<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-22T01:31:26Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>danielpalme/ReportGenerator</title>
    <updated>2023-07-22T01:31:26Z</updated>
    <id>tag:github.com,2023-07-22:/danielpalme/ReportGenerator</id>
    <link href="https://github.com/danielpalme/ReportGenerator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ReportGenerator converts coverage reports generated by coverlet, OpenCover, dotCover, Visual Studio, NCover, Cobertura, JaCoCo, Clover, gcov or lcov into human readable reports in various formats.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/danielpalme/ReportGenerator/main/docs/resources/logo.svg?sanitize=true&#34; alt=&#34;ReportGenerator&#34; width=&#34;200&#34;&gt; &lt;br&gt; ReportGenerator &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;b&gt;Powerful code coverage visualization&lt;/b&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielpalme/ReportGenerator/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/danielpalme/ReportGenerator/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI-CD&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;ReportGenerator&lt;/em&gt; converts coverage reports generated by coverlet, OpenCover, dotCover, Visual Studio, NCover, Cobertura, JaCoCo, Clover, gcov or lcov into human readable reports in various formats.&lt;/p&gt; &#xA;&lt;p&gt;The reports show the coverage quotas and also visualize which lines of your source code have been covered.&lt;/p&gt; &#xA;&lt;p&gt;ReportGenerator supports merging several coverage files into a single report.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reportgenerator.io/resources/reports/Html/index.html&#34;&gt;Browse example HTML report&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://danielpalme.github.io/ReportGenerator/resources/input_output.png&#34; alt=&#34;Input and output&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ReportGenerator is licensed under the &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can support the project by becoming a sponsor. Sponsors have exclusive access to &lt;a href=&#34;https://reportgenerator.io/pro&#34;&gt;additional features&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ReportGenerator&lt;/em&gt; is a commandline tool which works with full .NET Framework and .NET Core.&lt;br&gt; Use the online &lt;a href=&#34;https://reportgenerator.io/usage&#34;&gt;configuration tool&lt;/a&gt; to get started quickly.&lt;/p&gt; &#xA;&lt;h3&gt;Install the package matching your platform and needs&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Package&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Platforms&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Installation/Usage&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ReportGenerator&#34;&gt;ReportGenerator&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/ReportGenerator&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ReportGenerator.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ReportGenerator.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET Core &amp;gt;=3.1&lt;br&gt;.NET Framework 4.7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use this package if your project is based on &lt;em&gt;.NET Framework&lt;/em&gt; or &lt;em&gt;.NET Core&lt;/em&gt; and you want to use &lt;em&gt;ReportGenerator&lt;/em&gt; via the command line or a build script.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;&lt;code&gt;dotnet $(UserProfile).nuget\packages\reportgenerator\x.y.z\tools\net6.0\ReportGenerator.dll [options]&lt;/code&gt;&lt;br&gt;&lt;code&gt;$(UserProfile).nuget\packages\reportgenerator\x.y.z\tools\net6.0\ReportGenerator.exe [options]&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;$(UserProfile)\.nuget\packages\reportgenerator\x.y.z\tools\net47\ReportGenerator.exe [options]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/dotnet-reportgenerator-globaltool&#34;&gt;dotnet-reportgenerator-globaltool&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/dotnet-reportgenerator-globaltool&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/dotnet-reportgenerator-globaltool.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/dotnet-reportgenerator-globaltool.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET Core &amp;gt;=3.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use this package if your project is based on &lt;em&gt;.NET Core&lt;/em&gt; and you want to use &lt;em&gt;ReportGenerator&lt;/em&gt; as a (global) &#39;DotnetTool&#39;.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;&lt;code&gt;dotnet tool install -g dotnet-reportgenerator-globaltool&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;dotnet tool install dotnet-reportgenerator-globaltool --tool-path tools&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;dotnet new tool-manifest&lt;/code&gt;&lt;br&gt;&lt;code&gt;dotnet tool install dotnet-reportgenerator-globaltool&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;&lt;code&gt;reportgenerator [options]&lt;/code&gt;&lt;br&gt;&lt;code&gt;tools\reportgenerator.exe [options]&lt;/code&gt;&lt;br&gt;&lt;code&gt;dotnet reportgenerator [options]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ReportGenerator.Core&#34;&gt;ReportGenerator.Core&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&#34;https://www.nuget.org/packages/ReportGenerator.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ReportGenerator.Core.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ReportGenerator.Core.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET Standard 2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use this package if you want to write a custom &lt;strong&gt;plugin&lt;/strong&gt; for &lt;em&gt;ReportGenerator&lt;/em&gt; or if you want to call/execute &lt;em&gt;ReportGenerator&lt;/em&gt; within your code base.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Plugin development&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Custom-reports&#34;&gt;Custom reports&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Custom-history-storage&#34;&gt;Custom history storage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Palmmedia.reportgenerator&#34;&gt;Azure DevOps extension&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Palmmedia.reportgenerator&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/v/Palmmedia.reportgenerator.svg?sanitize=true&#34; alt=&#34;Visual Studio Marketplace Version&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/azure-devops/installs/total/Palmmedia.reportgenerator.svg?sanitize=true&#34; alt=&#34;Visual Studio Marketplace Installs - Azure DevOps Extension&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET Core &amp;gt;=3.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Add the Azure DevOps extension to your build pipeline.&lt;br&gt;&lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Integration#azure-devops-extension&#34;&gt;Learn more&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/marketplace/actions/reportgenerator&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;.NET Core &amp;gt;=3.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Add the GitHub Action to your build pipeline.&lt;br&gt;&lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Integration#github-actions&#34;&gt;Learn more&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Usage / Command line parameters&lt;/h3&gt; &#xA;&lt;p&gt;Use the online &lt;a href=&#34;https://reportgenerator.io/usage&#34;&gt;configuration tool&lt;/a&gt; to get started quickly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Parameters:&#xA;    [&#34;]-reports:&amp;lt;report&amp;gt;[;&amp;lt;report&amp;gt;][;&amp;lt;report&amp;gt;][&#34;]&#xA;    [&#34;]-targetdir:&amp;lt;target directory&amp;gt;[&#34;]&#xA;    [[&#34;]-reporttypes:&amp;lt;Html|HtmlSummary|...&amp;gt;[;&amp;lt;Html|HtmlSummary|...&amp;gt;][&#34;]]&#xA;    [[&#34;]-sourcedirs:&amp;lt;directory&amp;gt;[;&amp;lt;directory&amp;gt;][;&amp;lt;directory&amp;gt;][&#34;]]&#xA;    [[&#34;]-historydir:&amp;lt;history directory&amp;gt;[&#34;]]&#xA;    [[&#34;]-plugins:&amp;lt;plugin&amp;gt;[;&amp;lt;plugin&amp;gt;][;&amp;lt;plugin&amp;gt;][&#34;]]&#xA;    [[&#34;]-assemblyfilters:&amp;lt;(+|-)filter&amp;gt;[;&amp;lt;(+|-)filter&amp;gt;][;&amp;lt;(+|-)filter&amp;gt;][&#34;]]&#xA;    [[&#34;]-classfilters:&amp;lt;(+|-)filter&amp;gt;[;&amp;lt;(+|-)filter&amp;gt;][;&amp;lt;(+|-)filter&amp;gt;][&#34;]]&#xA;    [[&#34;]-filefilters:&amp;lt;(+|-)filter&amp;gt;[;&amp;lt;(+|-)filter&amp;gt;][;&amp;lt;(+|-)filter&amp;gt;][&#34;]]&#xA;    [[&#34;]-verbosity:&amp;lt;Verbose|Info|Warning|Error|Off&amp;gt;[&#34;]]&#xA;    [[&#34;]-title:&amp;lt;title&amp;gt;[&#34;]]&#xA;    [[&#34;]-tag:&amp;lt;tag&amp;gt;[&#34;]]&#xA;    [[&#34;]-license:&amp;lt;license&amp;gt;[&#34;]]&#xA;&#xA;Explanations:&#xA;   Reports:            The coverage reports that should be parsed (separated by semicolon).&#xA;                       Globbing is supported.&#xA;   Target directory:   The directory where the generated report should be saved.&#xA;   Report types:       The output formats and scope (separated by semicolon).&#xA;                       Values: Badges, Clover, Cobertura, CsvSummary, &#xA;                       MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary&#xA;                       OpenCover&#xA;                       Html, Html_Light, Html_Dark, Html_BlueRed&#xA;                       HtmlChart, HtmlInline, HtmlSummary&#xA;                       HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Light, HtmlInline_AzurePipelines_Dark&#xA;                       JsonSummary, Latex, LatexSummary, lcov, MHtml, PngChart, SonarQube, TeamCitySummary&#xA;                       TextSummary, TextDeltaSummary&#xA;                       Xml, XmlSummary&#xA;   Source directories: Optional directories which contain the corresponding source code (separated by semicolon).&#xA;                       The source directories are used if coverage report contains classes without path information.&#xA;                       Globbing is not supported.&#xA;   History directory:  Optional directory for storing persistent coverage information.&#xA;                       Can be used in future reports to show coverage evolution.&#xA;   Plugins:            Optional plugin files for custom reports or custom history storage (separated by semicolon). &#xA;   Assembly filters:   Optional list of assemblies that should be included or excluded in the report.&#xA;   Class filters:      Optional list of classes that should be included or excluded in the report.&#xA;   File filters:       Optional list of files that should be included or excluded in the report.&#xA;                       Exclusion filters take precedence over inclusion filters.                      &#xA;                       Wildcards are allowed.&#xA;   Verbosity:          The verbosity level of the log messages.&#xA;                       Values: Verbose, Info, Warning, Error, Off&#xA;   Title:              Optional title.&#xA;   Tag:                Optional tag or build version.&#xA;   License:            Optional license for PRO version. Get your license here: https://reportgenerator.io/pro&#xA;&#xA;Default values:&#xA;   -reporttypes:Html&#xA;   -assemblyfilters:+*&#xA;   -classfilters:+*&#xA;   -filefilters:+*&#xA;   -verbosity:Info&#xA;&#xA;Examples:&#xA;   &#34;-reports:coverage.xml&#34; &#34;-targetdir:C:\report&#34;&#xA;   &#34;-reports:target\*\*.xml&#34; &#34;-targetdir:C:\report&#34; -reporttypes:Latex;HtmlSummary -title:IntegrationTest -tag:v1.4.5&#xA;   &#34;-reports:coverage1.xml;coverage2.xml&#34; &#34;-targetdir:report&#34; &#34;-sourcedirs:C:\MyProject&#34; -plugins:CustomReports.dll&#xA;   &#34;-reports:coverage.xml&#34; &#34;-targetdir:C:\report&#34; &#34;-assemblyfilters:+Included;-Excluded.*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;.netconfig support&lt;/h4&gt; &#xA;&lt;p&gt;All the above parameters can also be persisted in a &lt;a href=&#34;https://dotnetconfig.org&#34;&gt;.netconfig&lt;/a&gt; file, under a &lt;code&gt;[ReportGenerator]&lt;/code&gt; section. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gitconfig&#34;&gt;[ReportGenerator]&#xA;&#x9;reports = coverage.xml&#xA;&#x9;targetdir = &#34;C:\\report&#34;&#xA;&#x9;reporttypes = Latex;HtmlSummary&#xA;&#x9;assemblyfilters = +Test;-Test&#xA;&#x9;classfilters = +Test2;-Test2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the plural options can also be specified as multiple singular entries, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gitconfig&#34;&gt;[ReportGenerator]&#xA;&#x9;report = coverage1.xml&#xA;&#x9;report = coverage2.xml&#xA;&#x9;reporttype = Latex&#xA;&#x9;reporttype = HtmlSummary&#xA;&#x9;assemblyfilter = +Test&#xA;&#x9;assemblyfilter = -Test&#xA;&#x9;classfilter = +Test2&#xA;&#x9;classfilter = -Test2&#xA;&#x9;filefilter = +cs&#xA;&#x9;filefilter = -vb&#xA;&#x9;sourcedir = src&#xA;&#x9;sourcedir = test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding/removing values is trivial using the &lt;a href=&#34;https://dotnetconfig.org&#34;&gt;dotnet-config&lt;/a&gt; CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# set a single-valued variable&#xA;dotnet config reportgenerator.reporttypes Latex;HtmlSummary&#xA;# add to multi-valued variable&#xA;dotnet config --add reportgenerator.report coverage3.xml&#xA;# clear all multi-valued entries for a variable&#xA;dotnet config --unset-all reportgenerator.assemblyfilter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course it&#39;s equally trivial to just edit the &lt;code&gt;.netconfig&lt;/code&gt; file by hand.&lt;/p&gt; &#xA;&lt;h4&gt;MSBuild&lt;/h4&gt; &#xA;&lt;p&gt;A MSBuild task also exists:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;Project DefaultTargets=&#34;Coverage&#34; xmlns=&#34;http://schemas.microsoft.com/developer/msbuild/2003&#34; ToolsVersion=&#34;4.0&#34;&amp;gt;&#xA;  &amp;lt;ItemGroup&amp;gt;&#xA;    &amp;lt;PackageReference Include=&#34;ReportGenerator&#34; Version=&#34;x.y.z&#34; /&amp;gt;&#xA;  &amp;lt;/ItemGroup&amp;gt;&#xA;  &amp;lt;Target Name=&#34;Coverage&#34;&amp;gt;&#xA;    &amp;lt;ItemGroup&amp;gt;&#xA;      &amp;lt;CoverageFiles Include=&#34;OpenCover.xml&#34; /&amp;gt;&#xA;    &amp;lt;/ItemGroup&amp;gt;&#xA;    &amp;lt;ReportGenerator ProjectDirectory=&#34;$(MSBuildProjectDirectory)&#34; ReportFiles=&#34;@(CoverageFiles)&#34; TargetDirectory=&#34;report&#34; ReportTypes=&#34;Html;Latex&#34; HistoryDirectory=&#34;history&#34; Plugins=&#34;CustomReports.dll&#34; AssemblyFilters=&#34;+Include;-Excluded&#34; VerbosityLevel=&#34;Verbose&#34; /&amp;gt;&#xA;  &amp;lt;/Target&amp;gt;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MSBuild task parameters can be complemented with the &lt;code&gt;.netconfig&lt;/code&gt;, if used. That means that parameters can be omitted if they are provided via &lt;code&gt;.netconfig&lt;/code&gt;, which is useful when reusing fixed settings across multiple projects in a solution, where the MSBuild task is only provided the dynamic values for the current project:&lt;/p&gt; &#xA;&lt;p&gt;Given the following &lt;code&gt;.netconfig&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gitconfig&#34;&gt;[ReportGenerator]&#xA;  reporttypes = Html;Latex&#xA;  targetdirectory = report&#xA;  historydirectory = history&#xA;  assemblyfilters = +Include;-Excluded&#xA;  verbosityLevel = Verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above target could be simplified as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;Target Name=&#34;Coverage&#34;&amp;gt;&#xA;    &amp;lt;ItemGroup&amp;gt;&#xA;      &amp;lt;CoverageFiles Include=&#34;OpenCover.xml&#34; /&amp;gt;&#xA;    &amp;lt;/ItemGroup&amp;gt;&#xA;    &amp;lt;ReportGenerator ProjectDirectory=&#34;$(MSBuildProjectDirectory)&#34;&#xA;                     ReportFiles=&#34;@(CoverageFiles)&#34; &#xA;                     Plugins=&#34;CustomReports.dll&#34; /&amp;gt;&#xA;  &amp;lt;/Target&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported input and output file formats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ReportGenerator&lt;/em&gt; supports several input and output formats.&lt;br&gt; The wiki explains the different &lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Output-formats&#34;&gt;output formats&lt;/a&gt; or you can download &lt;a href=&#34;https://danielpalme.github.io/ReportGenerator/resources/SampleReports.zip&#34;&gt;sample reports&lt;/a&gt; of all supported output formats.&lt;br&gt; If you need a custom format, you can create a &lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Custom-reports&#34;&gt;plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Input formats&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Output formats&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/OpenCover/opencover&#34;&gt;OpenCover&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/OpenCover&#34;&gt;Nuget&lt;/a&gt;)&lt;br&gt;OpenCover format is also generated by &lt;a href=&#34;https://github.com/coverlet-coverage/coverlet/&#34;&gt;coverlet&lt;/a&gt; and &lt;a href=&#34;https://github.com/SteveGilham/altcover&#34;&gt;altcover&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/dotcover/help/dotCover__Console_Runner_Commands.html&#34;&gt;dotCover&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/JetBrains.dotCover.CommandLineTools/&#34;&gt;Nuget&lt;/a&gt;, /ReportType=DetailedXML)&lt;/li&gt;&#xA;     &lt;li&gt;Visual Studio (&lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Visual-Studio-Coverage-Tools#vstestconsoleexe&#34;&gt;vstest.console.exe&lt;/a&gt;, &lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Visual-Studio-Coverage-Tools#codecoverageexe&#34;&gt;CodeCoverage.exe&lt;/a&gt;)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://www.ncover.com/info/download&#34;&gt;NCover&lt;/a&gt; (tested version 1.5.8, other versions may not work)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/cobertura/cobertura&#34;&gt;Cobertura&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://www.jacoco.org/jacoco/index.html&#34;&gt;JaCoCo&lt;/a&gt; (version 0.8.3 or greater)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://openclover.org/&#34;&gt;Clover&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;Mono (&lt;a href=&#34;https://www.mono-project.com/docs/debug+profile/profile/profiler/#analyzing-the-profile-data&#34;&gt;mprof-report&lt;/a&gt;)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Gcov.html&#34;&gt;gcov&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/linux-test-project/lcov&#34;&gt;lcov&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Html, Html_Light, Html_Dark, Html_BlueRed, HtmlSummary, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Light, HtmlInline_AzurePipelines_Dark, &lt;a href=&#34;https://en.wikipedia.org/wiki/MHTML&#34;&gt;MHtml&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;Clover&lt;/li&gt;&#xA;     &lt;li&gt;Cobertura&lt;/li&gt;&#xA;     &lt;li&gt;OpenCover (&lt;a href=&#34;https://reportgenerator.io/pro&#34;&gt;PRO version&lt;/a&gt; only)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.sonarqube.org/latest/analysis/generic-test&#34;&gt;SonarQube&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;TeamCitySummary&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/linux-test-project/lcov&#34;&gt;lcov&lt;/a&gt;&lt;/li&gt;&#xA;     &lt;li&gt;Xml, XmlSummary&lt;/li&gt;&#xA;     &lt;li&gt;JsonSummary&lt;/li&gt;&#xA;     &lt;li&gt;Latex, LatexSummary&lt;/li&gt;&#xA;     &lt;li&gt;TextSummary, TextDeltaSummary&lt;/li&gt;&#xA;     &lt;li&gt;CsvSummary&lt;/li&gt;&#xA;     &lt;li&gt;MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary&lt;/li&gt;&#xA;     &lt;li&gt;PngChart&lt;/li&gt;&#xA;     &lt;li&gt;Badges&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/danielpalme/ReportGenerator/wiki/Custom-reports&#34;&gt;Custom reports&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Screenshots&lt;/h3&gt; &#xA;&lt;p&gt;The screenshots show two snippets of the generated reports: &#xA; &lt;picture&gt;&lt;/picture&gt;&lt;/p&gt; &#xA;&lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://danielpalme.github.io/ReportGenerator/resources/screenshot1_dark.webp&#34;&gt; &#xA;&lt;img alt=&#34;Screenshot 1&#34; src=&#34;https://danielpalme.github.io/ReportGenerator/resources/screenshot1.webp&#34;&gt;  &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://danielpalme.github.io/ReportGenerator/resources/screenshot2_dark.webp&#34;&gt; &#xA; &lt;img alt=&#34;Screenshot 2&#34; src=&#34;https://danielpalme.github.io/ReportGenerator/resources/screenshot2.webp&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;strong&gt;Badges&lt;/strong&gt;&lt;br&gt; Badges in SVG and PNG format can be generated if &lt;code&gt;-reporttypes:Badges&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;img src=&#34;https://danielpalme.github.io/ReportGenerator/resources/badge.svg?sanitize=true&#34; alt=&#34;Sample badge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reportgenerator.io/resources/reports/Badges/index.html&#34;&gt;See all badges&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Visual Studio extensions&lt;/h3&gt; &#xA;&lt;p&gt;The following extensions exist to visualize coverage in Visual Studio:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Coverage tool&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Links&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Comment&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run Coverlet Report VS2022&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/coverlet-coverage/coverlet/&#34;&gt;coverlet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/the-dext/RunCoverletReport&#34;&gt;GitHub&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ChrisDexter.RunCoverletReportVs2022&#34;&gt;Marketplace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FineCodeCoverage&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/coverlet-coverage/coverlet/&#34;&gt;coverlet&lt;/a&gt;, &lt;a href=&#34;https://github.com/OpenCover/opencover&#34;&gt;OpenCover&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/FortuneN/FineCodeCoverage&#34;&gt;GitHub&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=FortuneNgwenya.FineCodeCoverage&#34;&gt;Marketplace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;VS 2022 is not supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AxoCover&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/OpenCover/opencover&#34;&gt;OpenCover&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/axodox/AxoCover&#34;&gt;GitHub&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=axodox1.AxoCover&#34;&gt;Marketplace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;VS 2019+ is not supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.palmmedia.de/Blog/2017/12/6/reportgenerator-new-release-with-risk-hotspots-analysis&#34;&gt;https://www.palmmedia.de/Blog/2017/12/6/reportgenerator-new-release-with-risk-hotspots-analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.palmmedia.de/Blog/2016/11/6/reportgenerator-new-release-with-enhanced-html-report-and-cobertura-support&#34;&gt;https://www.palmmedia.de/Blog/2016/11/6/reportgenerator-new-release-with-enhanced-html-report-and-cobertura-support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.palmmedia.de/Blog/2015/1/27/reportgenerator-new-beta-with-historytrend-charts&#34;&gt;https://www.palmmedia.de/Blog/2015/1/27/reportgenerator-new-beta-with-historytrend-charts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.palmmedia.de/Blog/2012/4/29/reportgenerator-new-release-with-more-advanced-report-preprocessing&#34;&gt;https://www.palmmedia.de/Blog/2012/4/29/reportgenerator-new-release-with-more-advanced-report-preprocessing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download statistics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ReportGenerator.svg?label=ReportGenerator%40nuget&#34; alt=&#34;Nuget&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/dotnet-reportgenerator-globaltool.svg?label=dotnet-reportgenerator-globaltool%40nuget&#34; alt=&#34;Nuget&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/ReportGenerator.Core.svg?label=ReportGenerator.Core%40nuget&#34; alt=&#34;Nuget&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/azure-devops/installs/total/Palmmedia.reportgenerator.svg?label=Azure%20DevOps&#34; alt=&#34;Visual Studio Marketplace Installs - Azure DevOps Extension&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/danielpalme/ReportGenerator/total.svg?label=GitHub&#34; alt=&#34;GitHub All Releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/chocolatey/dt/reportgenerator.portable.svg?label=Chocolatey&#34; alt=&#34;Chocolatey&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trends&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nugettrends.com/packages?months=24&amp;amp;ids=ReportGenerator&amp;amp;ids=dotnet-reportgenerator-globaltool&amp;amp;ids=ReportGenerator.Core&amp;amp;ids=dotnet-reportgenerator-cli&#34;&gt;Nuget downloads&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://star-history.t9t.io/#danielpalme/ReportGenerator&#34;&gt;GitHub stars&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Author: Daniel Palme&lt;br&gt; Blog: &lt;a href=&#34;https://www.palmmedia.de&#34;&gt;www.palmmedia.de&lt;/a&gt;&lt;br&gt; Twitter: &lt;a href=&#34;https://twitter.com/danielpalme&#34;&gt;@danielpalme&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shack2/SNETCracker</title>
    <updated>2023-07-22T01:31:26Z</updated>
    <id>tag:github.com,2023-07-22:/shack2/SNETCracker</id>
    <link href="https://github.com/shack2/SNETCracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;超级弱口令检查工具是一款Windows平台的弱口令审计工具，支持批量多线程检查，可快速发现弱密码、弱口令账号，密码支持和用户名结合进行检查，大大提高成功率，支持自定义服务端口和字典。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;超级弱口令检查工具是一款Windows平台的弱口令审计工具，支持批量多线程检查，可快速发现弱密码、弱口令账号，密码支持和用户名结合进行检查，大大提高成功率，支持自定义服务端口和字典。 工具采用C#开发，需要安装.NET Framework 4.0，工具目前支持SSH、RDP、SMB、MySQL、SQLServer、Oracle、FTP、MongoDB、Memcached、PostgreSQL、Telnet、SMTP、SMTP_SSL、POP3、POP3_SSL、IMAP、IMAP_SSL、SVN、VNC、Redis等服务的弱口令检查工作。 工具特点： 1.支持多种常见服务的口令破解，支持RDP（3389远程桌面）弱口令检查。 2.支持批量导入IP地址或设置IP段，同时进行多个服务的弱口令检查。 3.程序自带端口扫描功能，可以不借助第三方端口扫描工具进行检查。 4.支持自定义检查的口令，自定义端口。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ViewFaceCore/ViewFaceCore</title>
    <updated>2023-07-22T01:31:26Z</updated>
    <id>tag:github.com,2023-07-22:/ViewFaceCore/ViewFaceCore</id>
    <link href="https://github.com/ViewFaceCore/ViewFaceCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# 超简单的离线人脸识别库。( 基于 SeetaFace6 )&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;ViewFaceCore&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/ViewFaceCore/ViewFaceCore/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ViewFaceCore/ViewFaceCore&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://img.shields.io/github/stars/ViewFaceCore/ViewFaceCore?style=flat&#34; alt=&#34;GitHub stars&#34;&gt; &amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://img.shields.io/github/forks/ViewFaceCore/ViewFaceCore&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;—— &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#1-%E5%85%B3%E4%BA%8E&#34;&gt;💎 关于&lt;/a&gt; &amp;nbsp;| &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#2-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B&#34;&gt;⭐ 快速开始&lt;/a&gt; &amp;nbsp;| &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#4-%E5%9F%BA%E6%9C%AC%E8%AF%B4%E6%98%8E&#34;&gt;📄 基本说明&lt;/a&gt; &amp;nbsp;| &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#5-viewfacecore-api&#34;&gt;🐟 API&lt;/a&gt; &amp;nbsp;| &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#6-%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3&#34;&gt;🔎 参考文档&lt;/a&gt; &amp;nbsp;| &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#7-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;❓ 常见问题&lt;/a&gt; &amp;nbsp;| &lt;a href=&#34;https://raw.githubusercontent.com/ViewFaceCore/ViewFaceCore/main/#8-%E4%BD%BF%E7%94%A8%E8%AE%B8%E5%8F%AF&#34;&gt;📦 使用许可&lt;/a&gt; ——&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;1. 关于&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;一个基于 &lt;a href=&#34;https://github.com/SeetaFace6Open/index&#34;&gt;SeetaFace6&lt;/a&gt; 的 .NET 人脸识别解决方案&lt;/li&gt; &#xA; &lt;li&gt;本项目受到了 &lt;a href=&#34;https://github.com/iarray/SeetaFaceEngine.Net&#34;&gt;SeetaFaceEngine.Net&lt;/a&gt; 的启发&lt;/li&gt; &#xA; &lt;li&gt;开源、免费、跨平台 (win/linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. 快速开始&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 受支持的 .NET 框架 和 操作系统&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;目标框架&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;最低版本&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;操作系统&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;.NET Framework&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;win ( x64/x86 )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;.NET Standard&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;win ( x64/x86 )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;.NET / .NET Core&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.1、5.0、6.0、7.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;win ( x64/x86 )、linux ( arm/arm64/x64 )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;2.2 简单的人脸信息检测&lt;/h3&gt; &#xA;&lt;p&gt;以 Windows x64平台 为例，一个简单的人脸检测Demo。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用 &lt;a href=&#34;https://www.nuget.org&#34;&gt;nuget&lt;/a&gt; 安装依赖&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;包名称&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;最小版本&lt;/th&gt; &#xA;   &lt;th&gt;生成文件夹&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore/&#34;&gt;ViewFaceCore&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;——&lt;/td&gt; &#xA;   &lt;td&gt;ViewFaceCore .NET 核心库&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.all_models&#34;&gt;ViewFaceCore.all_models&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.all_models&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.all_models.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore\models&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;人脸检测的模型支持(图省事可以直接安装这个)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.win.x64&#34;&gt;ViewFaceCore.runtime.win.x64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.win.x64&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.win.x64.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore\win\x64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows-x64 的本机运行时，其它平台自行选择安装，可安装多个&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.Extension.SkiaSharp&#34;&gt;ViewFaceCore.Extension.SkiaSharp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span style=&#34;display:inline-block;width:150px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.Extension.SkiaSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.Extension.SkiaSharp.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;——&lt;/td&gt; &#xA;   &lt;td&gt;SkiaSharp图像处理扩展，ImageSharp、SkiaSharp、System.Drawing三选一&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;获取人脸信息&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using SkiaSharp;&#xA;using System;&#xA;using ViewFaceCore.Core;&#xA;using ViewFaceCore.Model;&#xA;&#xA;namespace ViewFaceCore.Demo.ConsoleApp&#xA;{&#xA;    internal class Program&#xA;    {&#xA;        private readonly static string imagePath = @&#34;images/Jay_3.jpg&#34;;&#xA;&#xA;        static void Main(string[] args)&#xA;        {&#xA;            using var bitmap = SKBitmap.Decode(imagePath);&#xA;            using FaceDetector faceDetector = new FaceDetector();&#xA;            FaceInfo[] infos = faceDetector.Detect(bitmap);&#xA;            Console.WriteLine($&#34;识别到的人脸数量：{infos.Length} 个人脸信息：\n&#34;);&#xA;            Console.WriteLine($&#34;No.\t人脸置信度\t位置信息&#34;);&#xA;            for (int i = 0; i &amp;lt; infos.Length; i++)&#xA;            {&#xA;                Console.WriteLine($&#34;{i}\t{infos[i].Score:f8}\t{infos[i].Location}&#34;);&#xA;            }&#xA;            Console.ReadKey();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更多案例可以下载源码查看Demo。&lt;/p&gt; &#xA;&lt;h2&gt;3. 二次开发&lt;/h2&gt; &#xA;&lt;h3&gt;3.1 项目结构&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;├─Bridges                                        #Bridges&#xA;│  ├─Linux                                       ##Linux平台ViewFaceBridge项目&#xA;│  ├─Shared                                      ##共享库&#xA;│  └─Windows                                     ##Linux平台ViewFaceBridge项目&#xA;├─Examples                                       #一些案例&#xA;│  ├─ViewFaceCore.Demo.ConsoleApp                ##控制台项目案例&#xA;│  ├─ViewFaceCore.Demo.VideoForm                 ##Winform摄像头人脸识别项目&#xA;│  └─ViewFaceCore.Demo.WebApp                    ##ASP.NET Core web项目&#xA;├─Extensions                                     #扩展包项目&#xA;│  ├─ViewFaceCore.Extension.DependencyInjection  ##依赖注入扩展&#xA;│  ├─ViewFaceCore.Extension.ImageSharp           ##ImageSharp图像处理扩展项目&#xA;│  ├─ViewFaceCore.Extension.Shared               ##共享项目&#xA;│  ├─ViewFaceCore.Extension.SkiaSharp            ##SkiaSharp图像处理扩展项目&#xA;│  └─ViewFaceCore.Extension.SystemDrawing        ##System.Drawing图像处理扩展项目&#xA;├─Models                                         #模型项目&#xA;├─Runtimes                                       #对应各个平台的运行时&#xA;├─SeetaFace&#xA;│  └─index                                       #SeetaFace源码，build文件夹需要放到这个目录下面&#xA;├─Tests                                          #测试项目，包含各种单元测试&#xA;└─ViewFaceCore                                   #ViewFaceCore源码&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.2 开发环境&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022，需要安装.NET4/4.5支持（&lt;a href=&#34;https://www.quarkbook.com/?p=1311&#34; title=&#34;如何在Visual Studio 2022中安装.NET4/4.5？&#34;&gt;如何在Visual Studio 2022中安装.NET4/4.5？&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;Windows 10/11&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 20.04 (WSL)、Debian 10/11等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.3 编译SeetaFace6&lt;/h3&gt; &#xA;&lt;h4&gt;3.3.1 我对编译SeetaFace6不感兴趣~~~&lt;/h4&gt; &#xA;&lt;p&gt;即中科视图开源的SeetaFace6人脸识别引擎，如果你对编译这块不感兴趣，可以直接下载下面编译好的链接库，放入src/SeetaFace/index目录下面。&lt;br&gt; 二进制文件地址：&lt;a href=&#34;https://github.com/ViewFaceCore/SeetaFace6OpenBinary/releases&#34;&gt;https://github.com/ViewFaceCore/SeetaFace6OpenBinary/releases&lt;/a&gt;&lt;br&gt; 放置好之后的目录结构应该是这样的：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;src&#xA;└─SeetaFace&#xA;   └─index&#xA;      └─build&#xA;         ├─bin&#xA;         │  ├─x64&#xA;         │  └─x86&#xA;         ├─cmake&#xA;         ├─include&#xA;         ├─lib&#xA;         │  ├─arm&#xA;         │  ├─arm64&#xA;         │  ├─x64&#xA;         │  └─x86&#xA;         └─lib64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.3.2 我要编译SeetaFace6&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;SeetaFace6官方编译方式&lt;br&gt; 参考：&lt;a href=&#34;https://github.com/SeetaFace6Open/index#%E7%BC%96%E8%AF%91%E4%BE%9D%E8%B5%96&#34;&gt;https://github.com/SeetaFace6Open/index#%E7%BC%96%E8%AF%91%E4%BE%9D%E8%B5%96&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;使用项目中的编译脚本&lt;br&gt; 参考：&lt;a href=&#34;https://github.com/ViewFaceCore/ViewFaceCore/raw/main/docs/SeetaFace_Build.md&#34;&gt;https://github.com/ViewFaceCore/ViewFaceCore/blob/main/docs/SeetaFace_Build.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3.4 编译SeetaFaceBridge&lt;/h3&gt; &#xA;&lt;h4&gt;3.4.1 编译Windows环境下的SeetaFaceBridge&lt;/h4&gt; &#xA;&lt;p&gt;通过3.3.1或者3.3.2小节，完成SeetaFace6编译之后，就可以在VS中直接右键-&amp;gt;构建SeetaFaceBridge了。&lt;/p&gt; &#xA;&lt;h4&gt;3.4.2 编译Linux环境下的SeetaFaceBridge&lt;/h4&gt; &#xA;&lt;p&gt;前提条件也是需要通过3.3.1或者3.3.2小节，完成SeetaFace6的编译。&lt;br&gt; 有三种方式可以编译Linux环境下的SeetaFaceBridge，WSL、Remote Linux、交叉编译。具体步奏就不一一介绍了，选择自己比较熟悉或者喜欢的方式，building~&lt;/p&gt; &#xA;&lt;h3&gt;3.5 编译ViewFaceCore&lt;/h3&gt; &#xA;&lt;p&gt;就像编译C#的Hello World一样简单。&lt;/p&gt; &#xA;&lt;h2&gt;4. 基本说明&lt;/h2&gt; &#xA;&lt;h3&gt;4.1 各平台Runtime&lt;/h3&gt; &#xA;&lt;p&gt;为了兼容各个平台，我们分别编号好了各个平台的SeetaFace6以及ViewFaceBridge（用于通过C#调用C++写的SeetaFace6）。并打包好，发布到nuget上面。使用时，按需安装对应平台的nuget包。比如windows x64平台，安装对应的nuget包&lt;code&gt;ViewFaceCore.runtime.win.x64&lt;/code&gt;。runtime可以同时安装多个平台，但是不能不安装，至少需要安装一个当前平台对应的runtime。&lt;br&gt; 支持的平台以及nuget包如下表所示：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nuget包名&lt;/th&gt; &#xA;   &lt;th&gt;版本&lt;/th&gt; &#xA;   &lt;th&gt;输出目录&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.runtime.win.x64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.win.x64&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.win.x64.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore/win/x64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows，x64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.runtime.win.x86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.win.x86&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.win.x86.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore/win/x86&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows，x86&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.runtime.ubuntu.20.04.x64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.ubuntu.20.04.x64&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.ubuntu.20.04.x64.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore/linux/x64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux，x64；支持Ubuntu20.04+、Debian10+、Deepin20+等较新的debian系Linux系统&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.runtime.linux.arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.linux.arm&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.linux.arm.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore/linux/arm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux，armhf；支持树莓派，nanopi等&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.runtime.linux.arm64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.linux.arm64&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.linux.arm64.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;viewfacecore/linux/arm64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux，arm64；支持树莓派，nanopi等&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;在使用过程中，如果出现&lt;code&gt;DirectoryNotFoundException: Can not found library path.&lt;/code&gt;之类的异常，请检查对应目录下是否存在runtime依赖，有时网络问题会导致nuget包下载失败。&lt;/p&gt; &#xA;&lt;h3&gt;4.2 图形库扩展&lt;/h3&gt; &#xA;&lt;p&gt;ViewFaceCore本身不依赖任何图形库，但是为了调用方便，我们开发了三个常见图形库扩展。如下表所示：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nuget包名&lt;/th&gt; &#xA;   &lt;th&gt;版本&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.Extension.SkiaSharp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.Extension.SkiaSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.Extension.SkiaSharp.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SkiaSharp图形扩展&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.Extension.ImageSharp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.Extension.ImageSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.Extension.ImageSharp.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ImageSharp图形扩展&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.Extension.SystemDrawing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.Extension.SystemDrawing&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.Extension.SystemDrawing.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;System.Drawing图形扩展，微软不再支持System.Drawing跨平台了，但是这个包目前还是跨平台支持的&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;在使用过程中，可以选择任意一个自己熟悉或者当前项目中已经用到的图形库扩展使用。但是，&lt;strong&gt;图形库扩展不能安装多个，只能三者选其一&lt;/strong&gt;！！！&lt;/p&gt; &#xA;&lt;h3&gt;4.3 模型设置&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;在算法开发包中，除了代码库本身以外，还有数据文件，我们通常称之为模型。&lt;br&gt; 来源：入门教程 1.3节 &lt;a href=&#34;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-11&#34;&gt;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-11&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我们封装好了每个人脸识别功能对应的模型，并打包发布至nuget。在使用时，只需要安装对应模型的nuget包即可。&lt;br&gt; nuget包如下表所示:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nuget包名&lt;/th&gt; &#xA;   &lt;th&gt;版本&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.all_models&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.all_models&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.all_models.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;包含全部模型。不知道装哪一个时，装这个就行了，但是包特别大（300多MB）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.age_predictor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.age_predictor&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.age_predictor.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;年龄预测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.eye_state&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.eye_state&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.eye_state.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;眼睛状态检测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.gender_predictor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.gender_predictor&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.gender_predictor.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;性别预测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_detector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_detector&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_detector.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;人脸检测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.mask_detector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.mask_detector&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.mask_detector.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;口罩检测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_landmarker_mask_pts5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_landmarker_mask_pts5&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_landmarker_mask_pts5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;戴口罩关键定定位，5个关键点&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_landmarker_pts5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_landmarker_pts5&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_landmarker_pts5.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;关键定定位，5个关键点&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_landmarker_pts68&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_landmarker_pts68&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_landmarker_pts68.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;关键定定位，68个关键点&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_recognizer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_recognizer&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_recognizer.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;人脸识别，68个关键点&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_recognizer_light&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_recognizer_light&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_recognizer_light.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;人脸识别，5个关键点&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_recognizer_mask&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.face_recognizer_mask&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.face_recognizer_mask.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;人脸识别，戴口罩&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.fas_first&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.fas_first&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.fas_first.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;活体检测，局部&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.fas_second&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.fas_second&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.fas_second.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;活体检测，全局&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.pose_estimation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.pose_estimation&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.pose_estimation.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;姿态检测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.quality_lbn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span style=&#34;display:inline-block;width:100px&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.model.quality_lbn&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.model.quality_lbn.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;质量检测&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;4.4 调用说明&lt;/h3&gt; &#xA;&lt;h4&gt;4.4.1 对象生命周期&lt;/h4&gt; &#xA;&lt;p&gt;这里的对象的生命周期指的是人脸识别中各个功能对象的生命周期，并不是C#中GC和对象的生命周期。虽然也和C#中对象生命周期密不可分，但是这并不是这一小节的主题，这里不会过多的解释C#语言本身的特性。&lt;br&gt; 用&lt;code&gt;FaceDetector&lt;/code&gt;举个例子。在&lt;code&gt;FaceDetector&lt;/code&gt;的构造函数中&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public FaceDetector(FaceDetectConfig config = null)&#xA;{&#xA;    this.DetectConfig = config ?? new FaceDetectConfig();&#xA;    _handle = ViewFaceNative.GetFaceDetectorHandler(this.DetectConfig.FaceSize&#xA;        , this.DetectConfig.Threshold&#xA;        , this.DetectConfig.MaxWidth&#xA;        , this.DetectConfig.MaxHeight&#xA;        , (int)this.DetectConfig.DeviceType);&#xA;    if (_handle == IntPtr.Zero)&#xA;    {&#xA;        throw new Exception(&#34;Get face detector handler failed.&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过Native调用的方式，调用C++项目ViewFaceBridge中的函数&lt;code&gt;GetFaceDetectorHandler&lt;/code&gt;获取SeetaFace6中&lt;code&gt;seeta::v6::FaceDetector&lt;/code&gt;对象的IntPtr句柄。&lt;br&gt; ViewFaceBridge中的函数&lt;code&gt;GetFaceDetectorHandler&lt;/code&gt;函数代码如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;View_Api seeta::v6::FaceDetector *GetFaceDetectorHandler(const double faceSize = 20, const double threshold = 0.9, const double maxWidth = 2000, const double maxHeight = 2000, const SeetaDevice deviceType = SEETA_DEVICE_AUTO)&#xA;{&#xA;&#x9;seeta::v6::FaceDetector *faceDetector = new seeta::v6::FaceDetector(ModelSetting(modelPath + &#34;face_detector.csta&#34;, deviceType));&#xA;&#x9;faceDetector-&amp;gt;set(FaceDetector::Property::PROPERTY_MIN_FACE_SIZE, faceSize);&#xA;&#x9;faceDetector-&amp;gt;set(FaceDetector::Property::PROPERTY_THRESHOLD, threshold);&#xA;&#x9;faceDetector-&amp;gt;set(FaceDetector::Property::PROPERTY_MAX_IMAGE_WIDTH, maxWidth);&#xA;&#x9;faceDetector-&amp;gt;set(FaceDetector::Property::PROPERTY_MAX_IMAGE_HEIGHT, maxHeight);&#xA;&#x9;return faceDetector;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当对象使用完毕后，&lt;code&gt;FaceDetector&lt;/code&gt;中Dispose方法中通过Native调用&lt;code&gt;DisposeFaceDetector&lt;/code&gt;函数，释放掉&lt;code&gt;seeta::v6::FaceDetector&lt;/code&gt;对象。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;View_Api void DisposeFaceDetector(seeta::v6::FaceDetector *handler)&#xA;{&#xA;&#x9;_dispose(handler);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;综上所述，在编写代码的过程中，&lt;strong&gt;一定要使用&lt;code&gt;using&lt;/code&gt;语句或在结束后调用&lt;code&gt;Dispose&lt;/code&gt;释放掉对象&lt;/strong&gt;。且SeetaFace6对象的构造和释放会比较耗时，其中涉及到模型加载、计算等，建议&lt;strong&gt;尽可能的复用对象以及在需要频繁使用新对象的场景中使用对象池。&lt;/strong&gt;&lt;br&gt; 对象复用，又涉及到线程安全的问题。更多关于线程安全的细节，请继续阅读下一节。&lt;/p&gt; &#xA;&lt;h4&gt;4.4.2 线程安全&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;线程安全也是开发中需要重点关注的特性。然而，线程安全在不同的上下文解释中总会有不同解释。为了避免理解的偏差，这里用几种不同的用例去解释识别器的使用。&lt;/p&gt; &#xA; &lt;p&gt;1.&amp;nbsp;对象可以跨线程传递。线程1构造的识别器，可以在线程2中调用。&lt;br&gt; 2.&amp;nbsp;对象的构造可以并发构造，即可以多个线程同时构造识别器。&lt;br&gt; 3.&amp;nbsp;单个对象的接口调用不可以并发调用，即单个对象，在多个线程同时使用是被禁止的。&lt;br&gt; 来源：入门教程 1.5 线程安全性 &lt;a href=&#34;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-11&#34;&gt;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-11&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;因为SeetaFace6本身不支持多线程调用，所以在这个库设计的时候，在每个不支持并发操作的功能中通过加锁限制并发调用。可以认为，在单个对象的不同操作中，是线程安全的。&lt;/p&gt; &#xA;&lt;h4&gt;4.4.3 初始化配置&lt;/h4&gt; &#xA;&lt;p&gt;在一些场景下，比如不支持AVX2指令集、需要拿取内部日志等场景下，默认设置并不能满足要求。为此，我们提供了一个全局配置项：&lt;code&gt;GlobalConfig&lt;/code&gt;，下面的小节将具体介绍支持的特性。&lt;/p&gt; &#xA;&lt;h5&gt;4.4.3.1 输出内部日志&lt;/h5&gt; &#xA;&lt;p&gt;在生产环境或者某些不方便调试场景下，又出现一些莫名其妙的问题的时候，不妨看看内部日志，说不定有不一样的收获。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Config()&#xA;{&#xA;    //打印内部日志&#xA;    GlobalConfig.SetLog((msg) =&amp;gt;&#xA;    {&#xA;        Console.WriteLine($&#34;[内部日志]{msg}&#34;);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.4.3.2 特定指令集支持&lt;/h5&gt; &#xA;&lt;p&gt;x86环境，默认情况下，使用支持AVX2、FMA指令集的tennis神经网络推理系统。但在一些低功耗CPU上面，比如Intel的J系列和N系列，阉割了AVX2指令集。在这些不支持AVX2或FMA指令集的CPU上面运行时，可能会报异常：0x00007FFC3FDD104E (tennis.dll) (ConsoleApp1.exe 中)处有未经处理的异常: 0xC000001D: IllegInstruction。&lt;br&gt; 原因是tennis使用了不支持的指令集。下表是tennis文件对应支持的指令集。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;文件&lt;/th&gt; &#xA;   &lt;th&gt;指令集&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tennis.dll&lt;/td&gt; &#xA;   &lt;td&gt;AVX2、FMA&lt;/td&gt; &#xA;   &lt;td&gt;默认&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tennis_haswell.dll&lt;/td&gt; &#xA;   &lt;td&gt;AVX2、FMA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tennis_sandy_bridge.dll&lt;/td&gt; &#xA;   &lt;td&gt;AVX2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tennis_pentium.dll&lt;/td&gt; &#xA;   &lt;td&gt;SSE2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;但是tennis同样提供了不同指令集上面的解决方案。ViewFaceCore通过一个全局配置项，可以强制使用支持具体指令集的tennis。&lt;br&gt; 如下所示：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Config()&#xA;{&#xA;    //设置只支持SSE2指令集&#xA;    GlobalConfig.SetInstruction(X86Instruction.SSE2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;需要注意的是，设置指令集支持，必需在初始化任何API之前，否者无效。&lt;/p&gt; &#xA;&lt;h2&gt;5. ViewFaceCore API&lt;/h2&gt; &#xA;&lt;h3&gt;5.1 所有API通用配置参数&lt;/h3&gt; &#xA;&lt;p&gt;下表是所有API都能使用的配置参数，有些参数可能并不会生效。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DeviceType&lt;/td&gt; &#xA;   &lt;td&gt;枚举；支持值：AUTO、CPU、GPU&lt;/td&gt; &#xA;   &lt;td&gt;AUTO&lt;/td&gt; &#xA;   &lt;td&gt;检测所用的设备类型，目前只提供CPU支持，需要GPU请自行编译&lt;a href=&#34;https://github.com/TenniS-Open/TenniS&#34; title=&#34;TenniS&#34;&gt;TenniS&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;5.2 FaceAntiSpoofing（活体检测）&lt;/h3&gt; &#xA;&lt;p&gt;活体检测API。&lt;br&gt; 活体检测识别器可以加载一个&lt;code&gt;局部检测模型&lt;/code&gt;或者&lt;code&gt;局部检测模型+全局检测模型&lt;/code&gt;，使用参数&lt;code&gt;Global&lt;/code&gt;来区分，默认为&lt;code&gt;True&lt;/code&gt;。&lt;br&gt; 当使用&lt;code&gt;局部检测模型&lt;/code&gt;时，需要安装模型&lt;code&gt;ViewFaceCore.model.fas_second&lt;/code&gt;。 当使用&lt;code&gt;局部检测模型+全局检测模型&lt;/code&gt;时，需要安装模型&lt;code&gt;ViewFaceCore.model.fas_first&lt;/code&gt;和&lt;code&gt;ViewFaceCore.model.fas_second&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置项&lt;code&gt;FaceAntiSpoofingConfig&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VideoFrameCount&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;设置视频帧数，用于&lt;code&gt;PredictVideo&lt;/code&gt;，一般来说，在10以内，帧数越多，结果越稳定，相对性能越好，但是得到结果的延时越高。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BoxThresh&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;   &lt;td&gt;攻击介质存在的分数阈值，该阈值越高，表示对攻击介质的要求越严格&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Threshold&lt;/td&gt; &#xA;   &lt;td&gt;FaceAntiSpoofingConfigThreshold&lt;/td&gt; &#xA;   &lt;td&gt;(0.3, 0.8)&lt;/td&gt; &#xA;   &lt;td&gt;活体识别时，如果清晰度(clarity)低的话，就会直接返回FUZZY。清晰度满足阈值，则判断真实度（reality），超过阈值则认为是真人，低于阈值是攻击。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;是否开启全局检测模型。&lt;strong&gt;在Linux平台下面，存在bug，无法设置为FALSE&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;FaceAntiSpoofingConfigThreshold：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;0.3&lt;/td&gt; &#xA;   &lt;td&gt;清晰度(clarity)，如果清晰度(clarity)低的话，就会直接返回FUZZY&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reality&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;   &lt;td&gt;真实度(clarity)，超过阈值则认为是真人，低于阈值是攻击。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;AntiSpoofing&lt;/strong&gt;&lt;br&gt; 单帧活体检测。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public AntiSpoofingResult AntiSpoofing(FaceImage image, FaceInfo info, FaceMarkPoint[] points)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;image&lt;/td&gt; &#xA;   &lt;td&gt;FaceImage&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;图像数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;info&lt;/td&gt; &#xA;   &lt;td&gt;FaceInfo&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸信息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;points&lt;/td&gt; &#xA;   &lt;td&gt;FaceMarkPoint[]&lt;/td&gt; &#xA;   &lt;td&gt;struct数组&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;关键点位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;出参&lt;code&gt;AntiSpoofingResult&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AntiSpoofingStatus&lt;/td&gt; &#xA;   &lt;td&gt;枚举&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Error（错误或没有找到指定的人脸索引处的人脸）、Real（真实人脸）、Spoof（攻击人脸（假人脸））、Fuzzy（无法判断（人脸成像质量不好））、Detecting（正在检测）&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;清晰度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reality&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;真实度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;调用示例&lt;/strong&gt;&lt;br&gt; 单帧活体检测。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void AntiSpoofingDemo()&#xA;{&#xA;    using var bitmap = SKBitmap.Decode(imagePath0);&#xA;&#xA;    using FaceDetector faceDetector = new FaceDetector();&#xA;    using FaceLandmarker faceMark = new FaceLandmarker();&#xA;    using FaceAntiSpoofing faceAntiSpoofing = new FaceAntiSpoofing();&#xA;&#xA;    var info = faceDetector.Detect(bitmap).First();&#xA;    var markPoints = faceMark.Mark(bitmap, info);&#xA;&#xA;    Stopwatch sw = Stopwatch.StartNew();&#xA;    sw.Start();&#xA;&#xA;    var result = faceAntiSpoofing.AntiSpoofing(bitmap, info, markPoints);&#xA;    Console.WriteLine($&#34;活体检测，结果：{result.Status}，清晰度:{result.Clarity}，真实度：{result.Reality}，耗时：{sw.ElapsedMilliseconds}ms&#34;);&#xA;&#xA;    sw.Stop();&#xA;    Console.WriteLine();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;AntiSpoofingVideo&lt;/strong&gt;&lt;br&gt; 视频帧识别。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public AntiSpoofingResult AntiSpoofingVideo(FaceImage image, FaceInfo info, FaceMarkPoint[] points)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;使用方式同上。&lt;/p&gt; &#xA;&lt;h3&gt;5.3 FaceDetector（人脸检测）&lt;/h3&gt; &#xA;&lt;p&gt;人脸检测，输入待检测的图片，输出检测到的每个人脸位置，用矩形表示。&lt;br&gt; 人脸检测需要模型&lt;code&gt;ViewFaceCore.model.face_detector&lt;/code&gt;。一般检测返回的所有人脸的人脸位置数组，并按照置信度从大大小进行排序返回。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置项&lt;code&gt;FaceDetectConfig&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FaceSize&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;最小人脸，最小人脸和检测器性能息息相关。主要方面是速度，使用建议上，我们建议在应用范围内，这个值设定的越大越好。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Threshold&lt;/td&gt; &#xA;   &lt;td&gt;double&lt;/td&gt; &#xA;   &lt;td&gt;0.9&lt;/td&gt; &#xA;   &lt;td&gt;检测器阈值。默认值是0.9，合理范围为[0, 1]。这个值一般不进行调整，除了用来处理一些极端情况。这个值设置的越小，漏检的概率越小，同时误检的概率会提高。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MaxWidth&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;2000&lt;/td&gt; &#xA;   &lt;td&gt;可检测的图像最大宽度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MaxHeight&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;2000&lt;/td&gt; &#xA;   &lt;td&gt;可检测的图像最大高度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;更多细节请参考：&lt;a href=&#34;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-14&#34;&gt;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-14&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Detect&lt;/strong&gt;&lt;br&gt; 人脸信息检测。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public FaceInfo[] Detect(FaceImage image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;image&lt;/td&gt; &#xA;   &lt;td&gt;FaceImage&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸图像信息数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;出参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FaceInfo&lt;/td&gt; &#xA;   &lt;td&gt;struct数组&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸信息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;FaceInfo：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Score&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸置信度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Location&lt;/td&gt; &#xA;   &lt;td&gt;FaceRect&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸位置&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;FaceRect：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;左上角点横坐标&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;左上角点纵坐标&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Width&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;矩形宽度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Height&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;矩形高度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;调用示例&lt;/strong&gt;&lt;br&gt; 识别人脸并标记出来。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;using System.Drawing;&#xA;using System.Linq;&#xA;using ViewFaceCore;&#xA;using ViewFaceCore.Core;&#xA;using ViewFaceCore.Model;&#xA;&#xA;namespace Demo&#xA;{&#xA;    internal class Program&#xA;    {&#xA;        private readonly static string imagePath = @&#34;images/Jay_3.jpg&#34;;&#xA;        private readonly static string outputPath = @&#34;images/Jay_out.jpg&#34;;&#xA;&#xA;        static void Main(string[] args)&#xA;        {&#xA;            using var bitmap = (Bitmap)Image.FromFile(imagePath);&#xA;            using FaceDetector faceDetector = new FaceDetector();&#xA;            FaceInfo[] infos = faceDetector.Detect(bitmap);&#xA;            //输出人脸信息&#xA;            Console.WriteLine($&#34;识别到的人脸数量：{infos.Length} 个人脸信息：\n&#34;);&#xA;            Console.WriteLine($&#34;No.\t人脸置信度\t位置信息&#34;);&#xA;            for (int i = 0; i &amp;lt; infos.Length; i++)&#xA;            {&#xA;                Console.WriteLine($&#34;{i}\t{infos[i].Score:f8}\t{infos[i].Location}&#34;);&#xA;            }&#xA;            //画方框，标记人脸&#xA;            using (Graphics g = Graphics.FromImage(bitmap))&#xA;            {&#xA;                g.DrawRectangles(new Pen(Color.Red, 4), infos.Select(p =&amp;gt; new RectangleF(p.Location.X, p.Location.Y, p.Location.Width, p.Location.Height)).ToArray());&#xA;            }&#xA;            bitmap.Save(outputPath);&#xA;            Console.WriteLine($&#34;输出图片已保存至：{outputPath}&#34;);&#xA;            Console.WriteLine();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.4 FaceLandmarker（人脸关键点定位器）&lt;/h3&gt; &#xA;&lt;p&gt;关键定定位输入的是原始图片和人脸检测结果，给出指定人脸上的关键点的依次坐标。&lt;br&gt; 这里检测到的5点坐标循序依次为，左眼中心、右眼中心、鼻尖、左嘴角和右嘴角。注意这里的左右是基于图片内容的左右，并不是图片中人的左右，即左眼中心就是图片中左边的眼睛的中心。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置项&lt;code&gt;FaceLandmarkConfig&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MarkType&lt;/td&gt; &#xA;   &lt;td&gt;枚举&lt;/td&gt; &#xA;   &lt;td&gt;Light&lt;/td&gt; &#xA;   &lt;td&gt;关键点类型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;MarkType枚举：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;枚举值&lt;/th&gt; &#xA;   &lt;th&gt;所选模型&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_landmarker_pts68&lt;/td&gt; &#xA;   &lt;td&gt;68个关键点检测模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Light&lt;/td&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_landmarker_pts5&lt;/td&gt; &#xA;   &lt;td&gt;5个关键点检测模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mask&lt;/td&gt; &#xA;   &lt;td&gt;ViewFaceCore.model.face_landmarker_mask_pts5&lt;/td&gt; &#xA;   &lt;td&gt;戴口罩关键点检测模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;需要注意的是：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这里的关键点是指人脸上的关键位置的坐标，在一些表述中也将关键点称之为特征点，但是这个和人脸识别中提取的特征概念没有任何相关性。&lt;strong&gt;并不存在结论，关键点定位越多，人脸识别精度越高。&lt;/strong&gt;&lt;br&gt; 一般的关键点定位和其他的基于人脸的分析是基于5点定位的。而且算法流程确定下来之后，只能使用5点定位。5点定位是后续算法的先验，并不能直接替换。&lt;strong&gt;从经验上来说，5点定位已经足够处理人脸识别或其他相关分析的精度需求，单纯增加关键点个数，只是增加方法的复杂度，并不对最终结果产生直接影响。&lt;/strong&gt;&lt;br&gt; 来源：入门教程 2.2 人脸关键点定位器 &lt;a href=&#34;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-15&#34;&gt;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-15&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mark&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public FaceMarkPoint[] Mark(FaceImage image, FaceInfo info) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;image&lt;/td&gt; &#xA;   &lt;td&gt;FaceImage&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸图像信息数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;info&lt;/td&gt; &#xA;   &lt;td&gt;FaceInfo&lt;/td&gt; &#xA;   &lt;td&gt;struct&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;面部信息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;出参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FaceMarkPoin[]&lt;/td&gt; &#xA;   &lt;td&gt;struct数组&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;关键点坐标，坐标循序依次为，左眼中心、右眼中心、鼻尖、左嘴角和右嘴角&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;FaceMarkPoin&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;左上角点横坐标&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;左上角点纵坐标&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;调用示例&lt;/strong&gt;&lt;br&gt; 识别人脸并标记出来。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void FaceMarkDemo()&#xA;{&#xA;    using var bitmap0 = SKBitmap.Decode(imagePath0);&#xA;    using var faceImage = bitmap0.ToFaceImage();&#xA;    using FaceDetector faceDetector = new FaceDetector();&#xA;    using FaceLandmarker faceMark = new FaceLandmarker();&#xA;    Stopwatch sw = new Stopwatch();&#xA;&#xA;    var infos = faceDetector.Detect(faceImage);&#xA;    var markPoints = faceMark.Mark(faceImage, infos[0]);&#xA;&#xA;    sw.Stop();&#xA;    Console.WriteLine($&#34;识别到的关键点个数：{markPoints.Length}，耗时：{sw.ElapsedMilliseconds}ms&#34;);&#xA;    foreach (var item in markPoints)&#xA;    {&#xA;        Console.WriteLine($&#34;X:{item.X}, Y:{item.Y}&#34;);&#xA;    }&#xA;    Console.WriteLine();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.5 FaceRecognizer（人脸特征提取和对比）&lt;/h3&gt; &#xA;&lt;p&gt;人脸识别的一个基本概念，就是将待识别的人脸经过处理变成二进制数据的特征，然后基于特征表示的人脸进行相似度计算，最终与相似度阈值对比，一般超过阈值就认为特征表示的人脸是同一个人。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置项&lt;code&gt;FaceRecognizeConfig&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FaceType&lt;/td&gt; &#xA;   &lt;td&gt;枚举&lt;/td&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;人脸识别模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Threshold&lt;/td&gt; &#xA;   &lt;td&gt;阈值&lt;/td&gt; &#xA;   &lt;td&gt;FaceType.Normal：0.62、FaceType.Mask：0.4、FaceType.Light：0.55&lt;/td&gt; &#xA;   &lt;td&gt;不同人脸识别模型具有不同的默认值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;配置项中Threshold为私有变量，需要通过方法&lt;code&gt;GetThreshold&lt;/code&gt;来获取阈值，通过&lt;code&gt;SetThreshold&lt;/code&gt;来设置阈值。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Extract&lt;/strong&gt;&lt;br&gt; 特征提取。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public float[] Extract(FaceImage image, FaceMarkPoint[] points)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;image&lt;/td&gt; &#xA;   &lt;td&gt;FaceImage&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸图像信息数据&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;points&lt;/td&gt; &#xA;   &lt;td&gt;FaceMarkPoint数组&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸标记点位，通过FaceLandmarker.Mark方法获取&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;出参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float[]&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;提取的特征值都是float数组。提取特征值后通过下面的&lt;code&gt;Compare&lt;/code&gt;方法和其他人脸特征值进行对比，特征对比方式是向量內积。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://docs.geeiot.net/server/index.php?s=/api/attachment/visitFile&amp;amp;sign=edd1b0d73da5c2daaa5e4fd609ed1b10&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compare&lt;/strong&gt;&lt;br&gt; 计算相似度。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public float Compare(float[] lfs, float[] rfs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lfs&lt;/td&gt; &#xA;   &lt;td&gt;float[]&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rfs&lt;/td&gt; &#xA;   &lt;td&gt;float[]&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;出参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值相似度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;IsSelf&lt;/strong&gt;&lt;br&gt; 判断是否为同一人。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsSelf(float similarity)&#xA;或&#xA;public bool IsSelf(float[] lfs, float[] rfs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lfs&lt;/td&gt; &#xA;   &lt;td&gt;float[]&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rfs&lt;/td&gt; &#xA;   &lt;td&gt;float[]&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;或&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;similarity&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;特征值相似度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;通过和设置的阈值对比，大于阈值则为同一人。&lt;/p&gt; &#xA;&lt;p&gt;出参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;true为同一人，false不是同一个人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;调用示例&lt;/strong&gt;&lt;br&gt; 提取两张图片特征值后，判断两张图片中的人脸是否为同一人。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void FaceRecognizerDemo()&#xA;{&#xA;    Stopwatch sw = Stopwatch.StartNew();&#xA;    sw.Start();&#xA;&#xA;    using var faceImage0 = SKBitmap.Decode(imagePath0).ToFaceImage();&#xA;    using var faceImage1 = SKBitmap.Decode(imagePath1).ToFaceImage();&#xA;    //检测人脸信息&#xA;    using FaceDetector faceDetector = new FaceDetector();&#xA;    FaceInfo[] infos0 = faceDetector.Detect(faceImage0);&#xA;    FaceInfo[] infos1 = faceDetector.Detect(faceImage1);&#xA;    //标记人脸位置&#xA;    using FaceLandmarker faceMark = new FaceLandmarker();&#xA;    FaceMarkPoint[] points0 = faceMark.Mark(faceImage0, infos0[0]);&#xA;    FaceMarkPoint[] points1 = faceMark.Mark(faceImage1, infos1[0]);&#xA;    //提取特征值&#xA;    using FaceRecognizer faceRecognizer = new FaceRecognizer();&#xA;    float[] data0 = faceRecognizer.Extract(faceImage0, points0);&#xA;    float[] data1 = faceRecognizer.Extract(faceImage1, points1);&#xA;    //对比特征值&#xA;    bool isSelf = faceRecognizer.IsSelf(data0, data1);&#xA;&#xA;    Console.WriteLine($&#34;识别到的人脸是否为同一人：{isSelf}，对比耗时：{sw.ElapsedMilliseconds}ms&#34;);&#xA;    Console.WriteLine();&#xA;    sw.Stop();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.6 FaceTracker（人脸追踪）&lt;/h3&gt; &#xA;&lt;p&gt;人脸追踪是在进行识别之前就利用视频特性，首先就确认在视频序列中出现的那些人是同一人，并获取人脸在视频中的位置。人脸追踪获取的结果（&lt;code&gt;FaceTrackInfo&lt;/code&gt;）可以直接转换成&lt;code&gt;FaceInfo&lt;/code&gt;使用。&lt;br&gt; &lt;code&gt;FaceTrackInfo&lt;/code&gt;相比于&lt;code&gt;FaceInfo&lt;/code&gt;多了一个PID字段，PID就是人员编号，对于视频中出现的人脸，如果跟踪分配了同一个PID，那么就可以认为相同PID的人脸属于同一个人。&lt;br&gt; 更多内容请查看：&lt;a href=&#34;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-29&#34;&gt;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef#title-29&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置项&lt;code&gt;FaceTrackerConfig&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;配置项&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Width&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;视频宽度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Height&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;视频高度&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MinFaceSize&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;设置可检测的人脸大小，为人脸宽和高乘积的二次根值。最小人脸和检测器性能息息相关。主要方面是速度，使用建议上，我们建议在应用范围内，这个值设定的越大越好。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Threshold&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;0.9&lt;/td&gt; &#xA;   &lt;td&gt;检测器阈值。合理范围为[0, 1]。这个值一般不进行调整，除了用来处理一些极端情况。这个值设置的越小，漏检的概率越小，同时误检的概率会提高。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;是否进行检测结果的帧间平滑，使得检测结果从视觉上更好一些。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Interval&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;检测间隔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;配置项&lt;code&gt;FaceTrackerConfig&lt;/code&gt;必须指定视频宽度和高度，不能为空。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Track&lt;/strong&gt;&lt;br&gt; 识别传入图像中的人脸，并返回可跟踪的人脸信息。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public FaceTrackInfo[] Track(FaceImage image)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;入参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;image&lt;/td&gt; &#xA;   &lt;td&gt;FaceImage&lt;/td&gt; &#xA;   &lt;td&gt;struct&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;要追踪的图像&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;出参：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;默认值&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FaceTrackInfo&lt;/td&gt; &#xA;   &lt;td&gt;struct数组&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;人脸信息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reset&lt;/strong&gt;&lt;br&gt; 当检测逻辑断开，或者切换视频的时候，就需要排除之前跟踪的逻辑，这个时候调用Reset方式清楚之前所有跟踪的结果，重新PID计数。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Reset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;调用示例：&lt;br&gt; 追踪一张图片中的人脸，并获取人脸标记点。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void FaceTrackDemo()&#xA;{&#xA;    using var faceImage = SKBitmap.Decode(imagePath0).ToFaceImage();&#xA;    using FaceLandmarker faceMark = new FaceLandmarker();&#xA;    using FaceTracker faceTrack = new FaceTracker(new FaceTrackerConfig(faceImage.Width, faceImage.Height));&#xA;    var result = faceTrack.Track(faceImage);&#xA;    if (result == null || !result.Any())&#xA;    {&#xA;        Console.WriteLine(&#34;未追踪到任何人脸！&#34;);&#xA;        return;&#xA;    }&#xA;    foreach (var item in result)&#xA;    {&#xA;        FaceInfo faceInfo = item.ToFaceInfo();&#xA;        //标记人脸&#xA;        var points = faceMark.Mark(faceImage, faceInfo);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.7 MaskDetector（口罩检测）&lt;/h3&gt; &#xA;&lt;h4&gt;5.7.1 口罩检测&lt;/h4&gt; &#xA;&lt;p&gt;用于检测是否戴了口罩或有遮挡。&lt;/p&gt; &#xA;&lt;h4&gt;5.7.2 戴口罩人脸识别&lt;/h4&gt; &#xA;&lt;p&gt;口罩人脸识别，其底层还是调用口罩人脸识别模块，只需要替换为口罩人脸识别模型。&lt;/p&gt; &#xA;&lt;h3&gt;5.8 FaceQuality（质量检测）&lt;/h3&gt; &#xA;&lt;h3&gt;5.9 AgePredictor（年龄预测）&lt;/h3&gt; &#xA;&lt;h3&gt;5.10 GenderPredictor（性别预测）&lt;/h3&gt; &#xA;&lt;h3&gt;5.11 EyeStateDetector（眼睛状态检测）&lt;/h3&gt; &#xA;&lt;h2&gt;6. 参考文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seetafaceengine/SeetaFace6/raw/master/README.md&#34;&gt;&lt;em&gt;SeetaFace6 说明&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seetafaceengine/SeetaFace6/tree/master/docs&#34;&gt;&lt;em&gt;SeetaFace 各接口说明&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://leanote.com/blog/post/5e7d6cecab64412ae60016ef&#34;&gt;&lt;em&gt;SeetaFace 入门教程&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;7. 常见问题&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Unable to load DLL &#39;ViewFaceBridge&#39; or one of its dependencies&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;检查nuget包是否下载完全，编译目标文件夹下面的viewfacecore文件夹中是否有对应平台的依赖文件，比如说windows x64平台，在viewfacecore文件夹下面应该会有win/x64文件夹，文件夹中有很多*.dll文件。&lt;/li&gt; &#xA;   &lt;li&gt;缺少vc++依赖，安装nuget包&lt;code&gt;ViewFaceCore.runtime.win.vc&lt;/code&gt;.&lt;a href=&#34;https://www.nuget.org/packages/ViewFaceCore.runtime.win.vc&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ViewFaceCore.runtime.win.vc.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;开始人脸识别时卡死，然后异常结束，或者报异常：0x00007FFC3FDD104E (tennis.dll) (ConsoleApp1.exe 中)处有未经处理的异常: 0xC000001D: IllegInstruction。&lt;br&gt; 参考：&lt;a href=&#34;https://github.com/ViewFaceCore/ViewFaceCore/tree/main#4432-%E7%89%B9%E5%AE%9A%E6%8C%87%E4%BB%A4%E9%9B%86%E6%94%AF%E6%8C%81&#34;&gt;https://github.com/ViewFaceCore/ViewFaceCore/tree/main#4432-%E7%89%B9%E5%AE%9A%E6%8C%87%E4%BB%A4%E9%9B%86%E6%94%AF%E6%8C%81&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;8. 使用许可&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ViewFaceCore/ViewFaceCore/raw/main/LICENSE&#34;&gt;Copyright (c) 2021, View&lt;/a&gt; | &lt;a href=&#34;https://github.com/SeetaFace6Open/index/raw/master/LICENSE&#34;&gt;&lt;em&gt;Copyright (c) 2019, SeetaTech&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/SeetaFace6Open/index#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC&#34;&gt;[源]&lt;/a&gt; &amp;gt; &lt;em&gt;&lt;code&gt;SeetaFace&lt;/code&gt; 开源版可以免费用于商业和个人用途。如果需要更多的商业支持，请联系商务邮件 &lt;a href=&#34;mailto:bd@seetatech.com&#34;&gt;bd@seetatech.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>