<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T01:37:58Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grpc/grpc-dotnet</title>
    <updated>2022-07-31T01:37:58Z</updated>
    <id>tag:github.com,2022-07-31:/grpc/grpc-dotnet</id>
    <link href="https://github.com/grpc/grpc-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;gRPC for .NET&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC for .NET&lt;/h1&gt; &#xA;&lt;p&gt;gRPC is a modern, open source, high-performance remote procedure call (RPC) framework that can run anywhere. gRPC enables client and server applications to communicate transparently, and simplifies the building of connected systems.&lt;/p&gt; &#xA;&lt;p&gt;gRPC functionality for .NET Core 3.0 or later includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/Grpc.AspNetCore&#34;&gt;Grpc.AspNetCore&lt;/a&gt; – An ASP.NET Core framework for hosting gRPC services. gRPC on ASP.NET Core integrates with standard ASP.NET Core features like logging, dependency injection (DI), authentication and authorization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/Grpc.Net.Client&#34;&gt;Grpc.Net.Client&lt;/a&gt; – A gRPC client for .NET Core that builds upon the familiar &lt;code&gt;HttpClient&lt;/code&gt;. The client uses new HTTP/2 functionality in .NET Core.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/Grpc.Net.ClientFactory&#34;&gt;Grpc.Net.ClientFactory&lt;/a&gt; – gRPC client integration with &lt;code&gt;HttpClientFactory&lt;/code&gt;. The client factory allows gRPC clients to be centrally configured and injected into your app with DI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/grpc/&#34;&gt;An introduction to gRPC on .NET&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;gRPC for .NET is now the recommended implementation!&lt;/h2&gt; &#xA;&lt;p&gt;Starting from May 2021, gRPC for .NET is the recommended implemention of gRPC for C#. The original &lt;a href=&#34;https://github.com/grpc/grpc/tree/master/src/csharp&#34;&gt;gRPC for C#&lt;/a&gt; implementation (distributed as the &lt;code&gt;Grpc.Core&lt;/code&gt; nuget package) is now in maintenance mode and will be deprecated in the future. See &lt;a href=&#34;https://grpc.io/blog/grpc-csharp-future/&#34;&gt;blogpost&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;To start using gRPC for .NET&lt;/h2&gt; &#xA;&lt;p&gt;The best place to start using gRPC for .NET is the gRPC template that comes with .NET Core 3.0 or later. Use the template to &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/tutorials/grpc/grpc-start&#34;&gt;create a gRPC service website and client&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For additional examples of using gRPC in .NET refer to &lt;a href=&#34;https://github.com/grpc/grpc-dotnet/tree/master/examples&#34;&gt;https://github.com/grpc/grpc-dotnet/tree/master/examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;gRPC NuGet feed&lt;/h2&gt; &#xA;&lt;p&gt;Official versions of gRPC are published to &lt;a href=&#34;https://www.nuget.org/profiles/grpc-packages&#34;&gt;NuGet.org&lt;/a&gt;. This is the recommended place for most developers to get gRPC packages.&lt;/p&gt; &#xA;&lt;p&gt;Nightly versions of gRPC for ASP.NET Core are published to the gRPC NuGet repository at &lt;a href=&#34;https://grpc.jfrog.io/grpc/api/nuget/v3/grpc-nuget-dev&#34;&gt;https://grpc.jfrog.io/grpc/api/nuget/v3/grpc-nuget-dev&lt;/a&gt;. It is recommended to use a nightly gRPC package if you are using a nightly version of .NET Core, and vice-versa. There may be incompatibilities between .NET Core and gRPC for ASP.NET Core if a newer version of one is used with an older version of the other.&lt;/p&gt; &#xA;&lt;p&gt;To use the gRPC NuGet repository and get the latest packages from it, place a &lt;code&gt;NuGet.config&lt;/code&gt; file with the gRPC repository setup in your solution folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&amp;gt;&#xA;&amp;lt;configuration&amp;gt;&#xA;    &amp;lt;packageSources&amp;gt;&#xA;        &amp;lt;!-- Add this repository to the list of available repositories --&amp;gt;&#xA;        &amp;lt;add key=&#34;gRPC repository&#34; value=&#34;https://grpc.jfrog.io/grpc/api/nuget/v3/grpc-nuget-dev&#34; /&amp;gt;&#xA;    &amp;lt;/packageSources&amp;gt;&#xA;&amp;lt;/configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional instructions for configuring a project to use a custom NuGet repository are available at &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior#changing-config-settings&#34;&gt;Changing NuGet configuration settings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;To develop gRPC for ASP.NET Core&lt;/h2&gt; &#xA;&lt;p&gt;Installing .NET Core SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Run this script before building the project.&#xA;./build/get-dotnet.sh or ./build/get-dotnet.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set up the development environment to use the installed .NET Core SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Source this script to use the installed .NET Core SDK.&#xA;source ./activate.sh or . ./activate.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To launch Visual Studio with the installed SDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# activate.sh or activate.ps1 must be sourced first, see previous step&#xA;startvs.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet build Grpc.DotNet.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet test Grpc.DotNet.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;General rules for &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/CONTRIBUTING.md&#34;&gt;contributing to the gRPC project&lt;/a&gt; apply for this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OrchardCMS/OrchardCore</title>
    <updated>2022-07-31T01:37:58Z</updated>
    <id>tag:github.com,2022-07-31:/OrchardCMS/OrchardCore</id>
    <link href="https://github.com/OrchardCMS/OrchardCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Orchard Core is an open-source modular and multi-tenant application framework built with ASP.NET Core, and a content management system (CMS) built on top of that framework.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Orchard Core&lt;/h1&gt; &#xA;&lt;p&gt;Orchard Core consists of two distinct projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orchard Core Framework&lt;/strong&gt;: An application framework for building modular, multi-tenant applications on ASP.NET Core.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orchard Core CMS&lt;/strong&gt;: A Web Content Management System (CMS) built on top of the Orchard Core Framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/OrchardCMS/OrchardCore?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/OrchardCMS/OrchardCore&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OrchardCMS/OrchardCore/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD--3--Clause-blue.svg?sanitize=true&#34; alt=&#34;BSD-3-Clause License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.orchardcore.net/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/orchardcore/badge/&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/orchard-core&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/orchard-core/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Local communities&lt;/h2&gt; &#xA;&lt;p&gt;中文资源&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shang.qq.com/wpa/qunwpa?idkey=48721591a71ee7586316604a7a4ee99d26fd977c6120370a06585085a5936f62&#34;&gt;&lt;img src=&#34;https://docs.orchardcore.net/en/latest/docs/assets/images/orchard-core-cn-community-logo.png&#34; alt=&#34;Orchard Core CN 中文讨论组&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;p&gt;Stable (release/1.4):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OrchardCMS/OrchardCore/actions?query=workflow%3A%22Release+-+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/OrchardCMS/OrchardCore/actions/workflows/release_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/OrchardCore.Application.Cms.Targets&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/OrchardCore.Application.Cms.Targets.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nightly (main):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OrchardCMS/OrchardCore/actions?query=workflow%3A%22Preview+-+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/OrchardCMS/OrchardCore/actions/workflows/preview_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloudsmith.io/~orchardcore/repos/preview/packages/detail/nuget/OrchardCore.Application.Cms.Targets/latest/&#34;&gt;&lt;img src=&#34;https://api-prd.cloudsmith.io/badges/version/orchardcore/preview/nuget/OrchardCore.Application.Cms.Targets/latest/x/?render=true&amp;amp;badge_token=gAAAAABey9hKFD_C-ZIpLvayS3HDsIjIorQluDs53KjIdlxoDz6Ntt1TzvMNJp7a_UWvQbsfN5nS7_0IbxCyqHZsjhmZP6cBkKforo-NqwrH5-E6QCrJ3D8%3D&#34; alt=&#34;Cloudsmith&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;h3&gt;1.4.0&lt;/h3&gt; &#xA;&lt;p&gt;The software is finished -- and by finished, we mean there are no show-stopping, little-children-killing bugs in it. That we know of. There are probably numerous lower-priority bugs triaged into the next point release or service pack, as well.&lt;/p&gt; &#xA;&lt;p&gt;Here is a more detailed &lt;a href=&#34;https://github.com/OrchardCMS/OrchardCore/wiki/Roadmap&#34;&gt;roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository using the command &lt;code&gt;git clone https://github.com/OrchardCMS/OrchardCore.git&lt;/code&gt; and checkout the &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Command line&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the latest version of the .NET SDK from this page &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;https://dotnet.microsoft.com/download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Next, navigate to &lt;code&gt;./OrchardCore/src/OrchardCore.Cms.Web&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;dotnet run&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then open the &lt;code&gt;http://localhost:5000&lt;/code&gt; URL in your browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Visual Studio&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Visual Studio 2022 (any edition) from &lt;a href=&#34;https://www.visualstudio.com/downloads/&#34;&gt;https://www.visualstudio.com/downloads/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;OrchardCore.sln&lt;/code&gt; and wait for Visual Studio to restore all Nuget packages&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;code&gt;OrchardCore.Cms.Web&lt;/code&gt; is the startup project and run it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker run --name orchardcms -p 8080:80 orchardproject/orchardcore-cms-linux:latest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Docker images and parameters can be found at &lt;a href=&#34;https://hub.docker.com/u/orchardproject/&#34;&gt;https://hub.docker.com/u/orchardproject/&lt;/a&gt;&lt;br&gt; See &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#publish-or-expose-port--p---expose&#34;&gt;Docker documentation&lt;/a&gt; to expose different port.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The documentation can be accessed here: &lt;a href=&#34;https://docs.orchardcore.net/&#34;&gt;https://docs.orchardcore.net/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/OrchardCMS/OrchardCore/main/CODE-OF-CONDUCT.md&#34;&gt;CODE-OF-CONDUCT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;http://www.dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/RulesEngine</title>
    <updated>2022-07-31T01:37:58Z</updated>
    <id>tag:github.com,2022-07-31:/microsoft/RulesEngine</id>
    <link href="https://github.com/microsoft/RulesEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Json based Rules Engine with extensive Dynamic expression support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rules Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/RulesEngine/workflows/build/badge.svg?branch=main&#34; alt=&#34;build&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/microsoft/RulesEngine?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/microsoft/RulesEngine/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/RulesEngine/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/RulesEngine&#34; alt=&#34;Nuget download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Rules Engine is a library/NuGet package for abstracting business logic/rules/policies out of a system. It provides a simple way of giving you the ability to put your rules in a store outside the core logic of the system, thus ensuring that any change in rules don&#39;t affect the core system.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install this library, download the latest version of &lt;a href=&#34;https://www.nuget.org/packages/RulesEngine/&#34;&gt;NuGet Package&lt;/a&gt; from &lt;a href=&#34;https://www.nuget.org/&#34;&gt;nuget.org&lt;/a&gt; and refer it into your project.&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to populate workflows for the Rules Engine as listed below.&lt;/p&gt; &#xA;&lt;p&gt;You need to store the rules based on the &lt;a href=&#34;https://github.com/microsoft/RulesEngine/raw/main/schema/workflow-schema.json&#34;&gt;schema definition&lt;/a&gt; given and they can be stored in any store as deemed appropriate like Azure Blob Storage, Cosmos DB, Azure App Configuration, &lt;a href=&#34;https://github.com/microsoft/RulesEngine#entity-framework&#34;&gt;Entity Framework&lt;/a&gt;, SQL Servers, file systems etc. For RuleExpressionType &lt;code&gt;LamdaExpression&lt;/code&gt;, the rule is written as a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions&#34;&gt;lambda expressions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;WorkflowName&#34;: &#34;Discount&#34;,&#xA;    &#34;Rules&#34;: [&#xA;      {&#xA;        &#34;RuleName&#34;: &#34;GiveDiscount10&#34;,&#xA;        &#34;SuccessEvent&#34;: &#34;10&#34;,&#xA;        &#34;ErrorMessage&#34;: &#34;One or more adjust rules failed.&#34;,&#xA;        &#34;ErrorType&#34;: &#34;Error&#34;,&#xA;        &#34;RuleExpressionType&#34;: &#34;LambdaExpression&#34;,&#xA;        &#34;Expression&#34;: &#34;input1.country == \&#34;india\&#34; AND input1.loyaltyFactor &amp;lt;= 2 AND input1.totalPurchasesToDate &amp;gt;= 5000&#34;&#xA;      },&#xA;      {&#xA;        &#34;RuleName&#34;: &#34;GiveDiscount20&#34;,&#xA;        &#34;SuccessEvent&#34;: &#34;20&#34;,&#xA;        &#34;ErrorMessage&#34;: &#34;One or more adjust rules failed.&#34;,&#xA;        &#34;ErrorType&#34;: &#34;Error&#34;,&#xA;        &#34;RuleExpressionType&#34;: &#34;LambdaExpression&#34;,&#xA;        &#34;Expression&#34;: &#34;input1.country == \&#34;india\&#34; AND input1.loyaltyFactor &amp;gt;= 3 AND input1.totalPurchasesToDate &amp;gt;= 10000&#34;&#xA;      }&#xA;    ]&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can inject the rules into the Rules Engine by initiating an instance by using the following code -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var rulesEngine = new RulesEngine(workflow, logger);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;em&gt;workflow&lt;/em&gt; is a list of deserialized objects based on the schema explained above and &lt;em&gt;logger&lt;/em&gt; is a custom logger instance made out of an &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki/Getting-Started#logger&#34;&gt;ILogger&lt;/a&gt; instance.&lt;/p&gt; &#xA;&lt;p&gt;Once initialised, the Rules Engine needs to execute the rules for a given input. This can be done by calling the method &lt;code&gt;ExecuteAllRulesAsync&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;List&amp;lt;RuleResultTree&amp;gt; response = await rulesEngine.ExecuteAllRulesAsync(workflowName, input);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;em&gt;workflowName&lt;/em&gt; is the name of the workflow, which is &lt;em&gt;Discount&lt;/em&gt; in the above mentioned example. And &lt;em&gt;input&lt;/em&gt; is the object which needs to be checked against the rules, which itself may consist of a list of class instances.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;response&lt;/em&gt; will contain a list of &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki/Getting-Started#ruleresulttree&#34;&gt;&lt;em&gt;RuleResultTree&lt;/em&gt;&lt;/a&gt; which gives information if a particular rule passed or failed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: A detailed example showcasing how to use Rules Engine is explained in &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki/Getting-Started&#34;&gt;Getting Started page&lt;/a&gt; of &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki&#34;&gt;Rules Engine Wiki&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A demo app for the is available at &lt;a href=&#34;https://github.com/microsoft/RulesEngine/tree/main/demo&#34;&gt;this location&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Basic&lt;/h3&gt; &#xA;&lt;p&gt;A simple example via code only is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;List&amp;lt;Rule&amp;gt; rules = new List&amp;lt;Rule&amp;gt;();&#xA;&#xA;Rule rule = new Rule();&#xA;rule.RuleName = &#34;Test Rule&#34;;&#xA;rule.SuccessEvent = &#34;Count is within tolerance.&#34;;&#xA;rule.ErrorMessage = &#34;Over expected.&#34;;&#xA;rule.Expression = &#34;count &amp;lt; 3&#34;;&#xA;rule.RuleExpressionType = RuleExpressionType.LambdaExpression;&#xA;rules.Add(rule);&#xA;&#xA;var workflows = new List&amp;lt;Workflow&amp;gt;();&#xA;&#xA;Workflow exampleWorkflow = new Workflow();&#xA;exampleWorkflow.WorkflowName = &#34;Example Workflow&#34;;&#xA;exampleWorkflow.Rules = rules;&#xA;&#xA;workflows.Add(exampleWorkflow);&#xA;&#xA;var bre = new RulesEngine.RulesEngine(workflows.ToArray(), null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Entity Framework&lt;/h3&gt; &#xA;&lt;p&gt;Consuming Entity Framework and populating the Rules Engine is shown in the &lt;a href=&#34;https://github.com/microsoft/RulesEngine/raw/main/demo/DemoApp/EFDemo.cs&#34;&gt;EFDemo class&lt;/a&gt; with Workflow rules populating the array and passed to the Rules Engine, The Demo App includes an example &lt;a href=&#34;https://github.com/microsoft/RulesEngine/raw/main/demo/DemoApp.EFDataExample/RulesEngineDemoContext.cs&#34;&gt;RulesEngineDemoContext&lt;/a&gt; using SQLite and could be swapped out for another provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var wfr = db.Workflows.Include(i =&amp;gt; i.Rules).ThenInclude(i =&amp;gt; i.Rules).ToArray();&#xA;var bre = new RulesEngine.RulesEngine(wfr, null);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: For each level of nested rules expected, a ThenInclude query appended will be needed as shown above.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/RulesEngine/raw/main/assets/BlockDiagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The rules can be stored in any store and be fed to the system in a structure which adheres to the &lt;a href=&#34;https://github.com/microsoft/RulesEngine/raw/main/schema/workflow-schema.json&#34;&gt;schema&lt;/a&gt; of WorkFlow model.&lt;/p&gt; &#xA;&lt;p&gt;A wrapper needs to be created over the Rules Engine package, which will get the rules and input message(s) from any store that your system dictates and put it into the Engine. The wrapper then handles the output using appropriate means.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: To know in detail of the workings of Rules Engine, please visit &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki/Introduction#how-it-works&#34;&gt;How it works section&lt;/a&gt; in &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki&#34;&gt;Rules Engine Wiki&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3rd Party Tools&lt;/h2&gt; &#xA;&lt;h3&gt;RulesEngine Editor&lt;/h3&gt; &#xA;&lt;p&gt;There is an editor library with it&#39;s own &lt;a href=&#34;https://www.nuget.org/packages/RulesEngineEditor/&#34;&gt;NuGet Package&lt;/a&gt; written in Blazor, more information is in it&#39;s repo &lt;a href=&#34;https://github.com/alexreich/RulesEngineEditor&#34;&gt;https://github.com/alexreich/RulesEngineEditor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Live Demo&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://alexreich.github.io/RulesEngineEditor&#34;&gt;https://alexreich.github.io/RulesEngineEditor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This can also be installed as a standalone PWA and used offline.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;With Sample Data&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://alexreich.github.io/RulesEngineEditor/demo&#34;&gt;https://alexreich.github.io/RulesEngineEditor/demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;For more details please check out &lt;a href=&#34;https://github.com/microsoft/RulesEngine/wiki&#34;&gt;Rules Engine Wiki&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>