<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:25:43Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/azure-openai-dev-skills-orchestrator</title>
    <updated>2024-03-03T01:25:43Z</updated>
    <id>tag:github.com,2024-03-03:/microsoft/azure-openai-dev-skills-orchestrator</id>
    <link href="https://github.com/microsoft/azure-openai-dev-skills-orchestrator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building a set of semantic kernel skills to act as a virtual developer team&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sk-dev-team&lt;/h1&gt; &#xA;&lt;h1&gt;Build a Virtual AI Dev Team using Semantic Kernel Skills&lt;/h1&gt; &#xA;&lt;h1&gt;Goal&lt;/h1&gt; &#xA;&lt;p&gt;From a natural language specification, set out to integrate a team of AI copilot skills into your team’s dev process, either for discrete tasks on an existing repo (unit tests, pipeline expansions, PRs for specific intents), developing a new feature, or even building an application from scratch. Starting from an existing repo and a broad statement of intent, work with multiple AI copilot dev skills, each of which has a different emphasis - from architecture, to task breakdown, to plans for individual tasks, to code output, code review, efficiency, documentation, build, writing tests, setting up pipelines, deployment, integration tests, and then validation. The system will present a view that facilitates chain-of-thought coordination across multiple trees of reasoning with the dev team skills.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can iterate on building a workflow for your semantic kernel ai dev skills using Elsa Workflows designer and run these workflows to see the results. The workflows do not yet support adding memory context.&lt;/li&gt; &#xA; &lt;li&gt;You can use the CLI project to run the SK dev skills from the command line. The CLI supports using the &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/well-architected/&#34;&gt;Microsoft Azure Well-Architected Frameworl&lt;/a&gt; as memory context for the skill invocations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trying it out&lt;/h2&gt; &#xA;&lt;h3&gt;Elsa.SemanticKernel&lt;/h3&gt; &#xA;&lt;p&gt;SemanticKernel Activity Provider for Elsa Workflows 3.x&lt;/p&gt; &#xA;&lt;p&gt;The project supports running &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Microsoft Semantic Kernel&lt;/a&gt; Skills as workflows using &lt;a href=&#34;https://v3.elsaworkflows.io&#34;&gt;Elsa Workflows&lt;/a&gt;. You can build the workflows as .NET code or in the visual designer. To run the designer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd WorkflowsApp&#xA;&amp;gt; cp .env_example .env&#xA;# Edit the .env file to choose your AI model, add your API Endpoint, and secrets.&#xA;&amp;gt; . ./.env&#xA;&amp;gt; dotnet build&#xA;&amp;gt; dotnet run&#xA;# Open browser to the URI in the console output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By Default you can use &#34;admin&#34; and &#34;password&#34; to login. Please review &lt;a href=&#34;https://v3.elsaworkflows.io/docs/installation/aspnet-apps-workflow-server&#34;&gt;Workflow Security&lt;/a&gt; for into on securing the app, using API tokens, and more.&lt;/p&gt; &#xA;&lt;p&gt;To &lt;a href=&#34;https://v3.elsaworkflows.io/docs/guides/invoking-workflows&#34;&gt;invoke&lt;/a&gt; a workflow, first it must be &#34;Published&#34;. If your workflow has a trigger activity, you can use that. When your workflow is ready, click the &#34;Publish&#34; button. You can also execute the workflow using the API. Then, find the Workflow Definition ID. From a command line, you can use &#34;curl&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; curl --location &#39;https://localhost:5001/elsa/api/workflow-definitions/{workflow_definition_id}/execute&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--header &#39;Authorization: ApiKey {api_key}&#39; \&#xA;--data &#39;{&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have the app runing locally, you can login (admin/password - see the &lt;a href=&#34;https://v3.elsaworkflows.io&#34;&gt;Elsa Workflows&lt;/a&gt; for info about securing). Then you can click &#34;new workflow&#34; to begin building your workflow with semantic kernel skills.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag workflow Activity blocks into the designer, and examine the settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect the Activities to specify an order of operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use Workfflow Variables to pass state between activities.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Create a Workflow Variable, &#34;MyVariable&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Click on the Activity that you want to use to populate the variable.&lt;/li&gt; &#xA;   &lt;li&gt;In the Settings box for the Activity, Click &#34;Output&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Set the &#34;Output&#34; to the variable chosen.&lt;/li&gt; &#xA;   &lt;li&gt;Click the Activity that will use the variable. Click on &#34;Settings&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Find the text box representing the variable that you want to populate, in this case usually &#34;input&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Click the &#34;...&#34; widget above the text box, and select &#34;javascript&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Set the value of the text box to&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;`${getMyVariable()}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;9&#34;&gt; &#xA;   &lt;li&gt;Run the workflow.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Via CLI&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to run the project is in Codespaces. Codespaces will start a qdrant instance for you.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new codespace from the &lt;em&gt;code&lt;/em&gt; button on the main branch.&lt;/li&gt; &#xA; &lt;li&gt;Once the code space setup is finished, from the terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cd cli&#xA;cli&amp;gt; cp ../WorkflowsApp/.env_example . &#xA;# Edit the .env file to choose your AI model, add your API Endpoint, and secrets.&#xA;cli&amp;gt; bash .env&#xA;cli&amp;gt; dotnet build&#xA;cli&amp;gt; dotnet run --file util/ToDoListSamplePrompt.txt do it&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will find the output in the &lt;em&gt;output/&lt;/em&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Proposed UX&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Possible UI: Start with an existing repo (GH or ADO), either populated or empty, and API Keys / config for access – once configured / loaded split view between three columns: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Settings/History/Tasks (allows browsing into each of the chats with a copilot dev team role) | [Central Window Chat interface with Copilot DevTeam] | Repo browsing/editing&lt;/li&gt; &#xA;   &lt;li&gt;Alternate interface will be via VS Code plugin/other IDE plugins, following the plugin idiom for each IDE&lt;/li&gt; &#xA;   &lt;li&gt;Settings include teams channel for conversations, repo config and api keys, model config and api keys, and any desired prompt template additions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CLI: start simple with a CLI that can be passed a file as prompt input and takes optional arguments as to which skills to invoke&lt;/li&gt; &#xA; &lt;li&gt;User begins with specifying a repository and then statement of what they want to accomplish, natural language, as simple or as detailed as needed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SK DevTeam skill will use dialog to refine the intent as needed, returns a plan, proposes necessary steps&lt;/li&gt; &#xA;   &lt;li&gt;User approves the plan or gives feedback, requests iteration&lt;/li&gt; &#xA;   &lt;li&gt;Plan is parceled out to the appropriate further skills&lt;/li&gt; &#xA;   &lt;li&gt;Eg, for a new app: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Architecture is passed to DevLead skill gives plan/task breakdown.&lt;/li&gt; &#xA;     &lt;li&gt;DevLead breaks down tasks into smaller tasks, each of these is fed to a skill to decide if it is a single code module or multiple&lt;/li&gt; &#xA;     &lt;li&gt;Each module is further fed to a dev lead to break down again or specify a prompt for a coder&lt;/li&gt; &#xA;     &lt;li&gt;Each code module prompt is fed to a coder&lt;/li&gt; &#xA;     &lt;li&gt;Each module output from a coder is fed to a code reviewer (with context, specific goals)&lt;/li&gt; &#xA;     &lt;li&gt;Each reviewer proposes changes, which result in a new prompt for the original coder&lt;/li&gt; &#xA;     &lt;li&gt;Changes are accepted by the coder&lt;/li&gt; &#xA;     &lt;li&gt;Each module fed to a builder&lt;/li&gt; &#xA;     &lt;li&gt;If it doesn’t build sent back to review&lt;/li&gt; &#xA;     &lt;li&gt;(etc)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Proposed Architecture&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SK Kernel Service – ASP.NET Core Service with REST API&lt;/li&gt; &#xA; &lt;li&gt;SK Skills: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PM Skill – generates pot, word docs, describing app,&lt;/li&gt; &#xA;   &lt;li&gt;Designer Skill – mockups?&lt;/li&gt; &#xA;   &lt;li&gt;Architect Skill – proposes overall arch&lt;/li&gt; &#xA;   &lt;li&gt;DevLead Skill – proposes task breakdown&lt;/li&gt; &#xA;   &lt;li&gt;CoderSkill – builds code modules for each task&lt;/li&gt; &#xA;   &lt;li&gt;ReviewerSkill – improves code modules&lt;/li&gt; &#xA;   &lt;li&gt;TestSkill – writes tests&lt;/li&gt; &#xA;   &lt;li&gt;Etc&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web app: prompt front end and wizard style editor of app&lt;/li&gt; &#xA; &lt;li&gt;Build service sandboxes – using branches and actions/pipelines 1st draft; Alternate – ephemeral build containers&lt;/li&gt; &#xA; &lt;li&gt;Logging service streaming back to azure logs analytics, app insights, and teams channel&lt;/li&gt; &#xA; &lt;li&gt;Deployment service – actions/pipelines driven&lt;/li&gt; &#xA; &lt;li&gt;Azure Dev Skill – lean into azure integrations – crawl the azure estate to inventory a tenant’s existing resources to memory and help inform new code. Eg: you have a large azure sql estate? Ok, most likely you want to wire your new app to one of those dbs, etc….&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h1&gt;Legal Notices&lt;/h1&gt; &#xA;&lt;p&gt;Microsoft and any contributors grant you a license to the Microsoft documentation and other content in this repository under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;Creative Commons Attribution 4.0 International Public License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/azure-openai-dev-skills-orchestrator/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file, and grant you a license to any code in the repository under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/azure-openai-dev-skills-orchestrator/main/LICENSE-CODE&#34;&gt;LICENSE-CODE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft, Windows, Microsoft Azure and/or other Microsoft products and services referenced in the documentation may be either trademarks or registered trademarks of Microsoft in the United States and/or other countries. The licenses for this project do not grant you rights to use any Microsoft names, logos, or trademarks. Microsoft&#39;s general trademark guidelines can be found at &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkID=254653&#34;&gt;http://go.microsoft.com/fwlink/?LinkID=254653&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Privacy information can be found at &lt;a href=&#34;https://privacy.microsoft.com/en-us/&#34;&gt;https://privacy.microsoft.com/en-us/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft and any contributors reserve all other rights, whether under their respective copyrights, patents, or trademarks, whether by implication, estoppel or otherwise.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MoaidHathot/Dumpify</title>
    <updated>2024-03-03T01:25:43Z</updated>
    <id>tag:github.com,2024-03-03:/MoaidHathot/Dumpify</id>
    <link href="https://github.com/MoaidHathot/Dumpify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adding `.Dump()` extension methods to Console Applications, similar to LinqPad&#39;s.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dumpify&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MoaidHathot/Dumpify/main/assets/Dumpify-logo-styled.png&#34; alt=&#34;drawing&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/nu/Dumpify&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Dumpify.svg?sanitize=true&#34; alt=&#34;Github version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/MoaidHathot/Dumpify/actions/workflows/build-dumpify.yml/badge.svg?sanitize=true&#34; alt=&#34;example workflow&#34;&gt; &lt;img src=&#34;https://github.com/MoaidHathot/Dumpify/actions/workflows/publish-dumpify.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish Nuget&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/Dumpify&#34; alt=&#34;Nuget Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/MoaidHathot/Dumpify&#34; alt=&#34;GitHub Repo stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/MoaidHathot/Dumpify&#34; alt=&#34;GitHub License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Improve productivity and debuggability by adding &lt;code&gt;.Dump()&lt;/code&gt; extension methods to &lt;strong&gt;Console Applications&lt;/strong&gt;. &lt;code&gt;Dump&lt;/code&gt; any object in a structured and colorful way into the Console, Trace, Debug events or your own custom output.&lt;/p&gt; &#xA;&lt;h1&gt;How to Install&lt;/h1&gt; &#xA;&lt;p&gt;The library is published as a &lt;a href=&#34;https://www.nuget.org/packages/Dumpify&#34;&gt;Nuget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Either run &lt;code&gt;dotnet add package Dumpify&lt;/code&gt;, &lt;code&gt;Install-Package Dumpify&lt;/code&gt; or use Visual Studio&#39;s &lt;a href=&#34;https://learn.microsoft.com/en-us/nuget/consume-packages/install-use-packages-visual-studio&#34;&gt;NuGet Package Manager&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Overview Video&lt;/h1&gt; &#xA;&lt;p&gt;An overview video hosted on the &lt;code&gt;Open at Microsoft&lt;/code&gt; show&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ERWAMSgz-vc&#34;&gt; &lt;img src=&#34;https://github.com/MoaidHathot/Dumpify/assets/8770486/2fcdc3eb-1c09-465a-99ba-19c267565bea&#34; width=&#34;400&#34;&gt; &lt;br&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.youtube.com/watch?v=ERWAMSgz-vc&#34; alt=&#34;https://www.youtube.com/watch?v=ERWAMSgz-vc&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dump any object in a structured, colorful way to Console, Debug, Trace or any other custom output&lt;/li&gt; &#xA; &lt;li&gt;Support Properties, Fields and non-public members&lt;/li&gt; &#xA; &lt;li&gt;Support max nesting levels&lt;/li&gt; &#xA; &lt;li&gt;Support circular dependencies and references&lt;/li&gt; &#xA; &lt;li&gt;Support styling and customizations&lt;/li&gt; &#xA; &lt;li&gt;Highly Configurable&lt;/li&gt; &#xA; &lt;li&gt;Support for different output targets: Console, Trace, Debug, Text, Custom&lt;/li&gt; &#xA; &lt;li&gt;Fast!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples:&lt;/h1&gt; &#xA;&lt;h2&gt;Anonymous types&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;new { Name = &#34;Dumpify&#34;, Description = &#34;Dump any object to Console&#34; }.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232251633-5830bd48-0e45-4c89-9b26-3c678230a90a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Support nesting and circular references&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var moaid = new Person { FirstName = &#34;Moaid&#34;, LastName = &#34;Hathot&#34;, Profession = Profession.Software };&#xA;var haneeni = new Person { FirstName = &#34;Haneeni&#34;, LastName = &#34;Shibli&#34;, Profession = Profession.Health };&#xA;&#xA;moaid.Spouse = haneeni;&#xA;haneeni.Spouse = moaid;&#xA;&#xA;moaid.Dump();&#xA;//You can define max depth as well, e.g `moaid.Dump(maxDepth: 2)`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232280616-c6127820-7e2b-448b-81ca-1aded2894cdc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Support for Arrays, Dictionaries and Collections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var arr = new[] { 1, 2, 3, 4 }.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232251833-ef2650fe-64a3-476d-b676-4a0f73339560.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var arr2d = new int[,] { {1, 2}, {3, 4} }.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/230250735-66703e54-ce02-41c0-91b7-fcbee5f80ac3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;new Dictionary&amp;lt;string, string&amp;gt;&#xA;{&#xA;   [&#34;Moaid&#34;] = &#34;Hathot&#34;,&#xA;   [&#34;Haneeni&#34;] = &#34;Shibli&#34;,&#xA;   [&#34;Eren&#34;] = &#34;Yeager&#34;,&#xA;   [&#34;Mikasa&#34;] = &#34;Ackerman&#34;,&#xA;}.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232251913-add4a0d8-3355-44f6-ba94-5dfbf8d8e2ac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You can turn on or off fields and private members&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class AdditionValue&#xA;{&#xA;    private readonly int _a;&#xA;    private readonly int _b;&#xA;&#xA;    public AdditionValue(int a, int b)&#xA;    {&#xA;        _a = a;&#xA;        _b = b;&#xA;    }&#xA;&#xA;    private int Value =&amp;gt; _a + _b;&#xA;}&#xA;&#xA;&#xA;new AdditionValue(1, 2).Dump(members: new MembersConfig { IncludeFields = true, IncludeNonPublicMembers = true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232252840-c5b0ea4c-eae9-4dc2-bd6c-d42ee58505eb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You can turn on or off row separators and a type column&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//globally&#xA;DumpConfig.Default.TableConfig.ShowMemberTypes = true;&#xA;DumpConfig.Default.TableConfig.ShowRowSeparators = true;&#xA;&#xA;new { Name = &#34;Dumpify&#34;, Description = &#34;Dump any object to Console&#34; }.Dump();&#xA;&#xA;//or Per dump&#xA;new { Name = &#34;Dumpify&#34;, Description = &#34;Dump any object to Console&#34; }.Dump(tableConfig: new TableConfig { ShowRowSeparators = true, ShowMemberTypes = true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MoaidHathot/Dumpify/main/assets/screenshots/row-separator.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You can set custom labels or auto-labels&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;new { Description = &#34;You can manually specify labels to objects&#34; }.Dump(&#34;Manual label&#34;);&#xA;&#xA;//Set auto-label globally for all dumps if a custom label wasn&#39;t provider&#xA;DumpConfig.Default.UseAutoLabels = true;&#xA;new { Description = &#34;Or set labels automatically with auto-labels&#34; }.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MoaidHathot/Dumpify/main/assets/screenshots/custom-label-and-auto-labels.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You can customize colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var package = new { Name = &#34;Dumpify&#34;, Description = &#34;Dump any object to Console&#34; };&#xA;package.Dump(colors: ColorConfig.NoColors);&#xA;package.Dump(colors: new ColorConfig { PropertyValueColor = new DumpColor(Color.RoyalBlue)});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232252235-18d43c3a-0b54-475a-befc-0f957777f150.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;You can turn on or off type names, headers, lables and much more&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var moaid = new Person { FirstName = &#34;Moaid&#34;, LastName = &#34;Hathot&#34;, Profession = Profession.Software };&#xA;var haneeni = new Person { FirstName = &#34;Haneeni&#34;, LastName = &#34;Shibli&#34;, Profession = Profession.Health };&#xA;moaid.Spouse = haneeni;&#xA;haneeni.Spouse = moaid;&#xA;&#xA;moaid.Dump(typeNames: new TypeNamingConfig { ShowTypeNames = false }, tableConfig: new TableConfig { ShowTableHeaders = false });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8770486/232252319-58a98036-5a0e-4514-8d08-df6fdff5a8a7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;There are multiple output options (Console, Trace, Debug, Text) or provide your own&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var package = new { Name = &#34;Dumpify&#34;, Description = &#34;Dump any object to Console&#34; };&#xA;package.Dump(); //Similar to `package.DumpConsole()` and `package.Dump(output: Outputs.Console))`&#xA;package.DumpDebug(); //Dump to Visual Studio&#39;s Debug source&#xA;package.DumpTrace(); //Dump to Trace &#xA;var text = package.DumpText(); //The table in a text format&#xA;&#xA;using var writer = new StringWriter();&#xA;package.Dump(output: new DumpOutput(writer)); //Custom output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Every configuration can be defined per-Dump or globally for all Dumps, e.g:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;DumpConfig.Default.TypeNamingConfig.UseAliases = true;&#xA;DumpConfig.Default.TypeNamingConfig.ShowTypeNames = false;&#xA;DumpConfig.Default.ColorConfig.TypeNameColor = Color.Gold;&#xA;DumpConfig.Default.MaxDepth = 3;&#xA;//Much more...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features for the future 0.7.0 release&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add configuration for formatting Anonymous Objects type names&lt;/li&gt; &#xA; &lt;li&gt;Text renderer&lt;/li&gt; &#xA; &lt;li&gt;Better rendering of Delegates&lt;/li&gt; &#xA; &lt;li&gt;Write the &lt;code&gt;Count&lt;/code&gt; values of dictionaries and IEnumerables in the name, e.g &lt;code&gt;Dictionary&amp;lt;string, string&amp;gt;(3)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add an option to limit how many elements to render for collections and arrays.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;consider&lt;/strong&gt; changing the default color scheme to VSCode&#39;s&lt;/li&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA; &lt;li&gt;Consider changing the style/view of ObjectDescriptors without properties (currently empty table)&lt;/li&gt; &#xA; &lt;li&gt;Fix simplified type names with Collection expressions (IEnumearble&#xA;  &lt;int&gt;&#xA;    col = [1, 2, 3]);&#xA;  &lt;/int&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;To do&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Live outputs&lt;/li&gt; &#xA; &lt;li&gt;Add custom rendering for more types: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Exceptions, AggregateExceptions, etc...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Rethink Generators caching keys&lt;/li&gt; &#xA; &lt;li&gt;Ditch &lt;code&gt;ObjectIdGenerator&lt;/code&gt; and create a custom, modern implementation&lt;/li&gt; &#xA; &lt;li&gt;Consider using Max Depth for Descriptors&lt;/li&gt; &#xA; &lt;li&gt;Refactor Renderers and make it better extendable&lt;/li&gt; &#xA; &lt;li&gt;Add more renderers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text Renderers&lt;/li&gt; &#xA;   &lt;li&gt;re-introduce Json&lt;/li&gt; &#xA;   &lt;li&gt;CSharp Renderer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Consider Decoupling from Spectre.Console&lt;/li&gt; &#xA; &lt;li&gt;Tests &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;More tests&lt;/li&gt; &#xA;   &lt;li&gt;Visual (Render) Tests - consider acceptance tests&lt;/li&gt; &#xA;   &lt;li&gt;Tests for Nesting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;More sync between Custom Descriptors and Custom Renderers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Think how we can mark type&#39;s descriptor as needing special rendering.&lt;/li&gt; &#xA;   &lt;li&gt;The current CustomDescriptorGenerator must generate a value&lt;/li&gt; &#xA;   &lt;li&gt;Consider ValueTuple&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Refactor SpectureTableRenderer to share customization code&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>