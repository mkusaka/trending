<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:31:30Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>2881099/FreeIM</title>
    <updated>2022-09-01T01:31:30Z</updated>
    <id>tag:github.com,2022-09-01:/2881099/FreeIM</id>
    <link href="https://github.com/2881099/FreeIM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NETCore websocket 实现简易、高性能、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;FreeIM 使用 websocket 协议实现简易、高性能（单机支持5万+连接）、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。 &lt;code&gt;ImCore&lt;/code&gt; 已正式改名为 &lt;code&gt;FreeIM&lt;/code&gt;。&lt;a href=&#34;https://github.com/2881099/FightLandlord&#34;&gt;【网络版斗地主示例】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用场景：好友聊天、群聊天、直播间、实时评论区、游戏。&lt;/p&gt; &#xA;&lt;p&gt;如果对本项目感兴趣，欢迎加入 FreeSql QQ讨论群：8578575&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;dotnet add package FreeIM&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;ImServer 服务端&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Configure(IApplicationBuilder app)&#xA;{&#xA;    app.UseFreeImServer(new ImServerOptions&#xA;    {&#xA;        Redis = new FreeRedis.RedisClient(&#34;127.0.0.1:6379,poolsize=5&#34;),&#xA;        Servers = new[] { &#34;127.0.0.1:6001&#34; }, //集群配置&#xA;        Server = &#34;127.0.0.1:6001&#34;&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;一套永远不需要迭代更新的 &lt;code&gt;ImServer&lt;/code&gt; 服务端，支持 .NET6.0、.NETCore2.1+、NETStandard2.0&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;WebApi 业务端&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Configure(IApplicationBuilder app)&#xA;{&#xA;    //...&#xA;&#xA;    ImHelper.Initialization(new ImClientOptions&#xA;    {&#xA;        Redis = new FreeRedis.RedisClient(&#34;127.0.0.1:6379,poolsize=5&#34;),&#xA;        Servers = new[] { &#34;127.0.0.1:6001&#34; }&#xA;    });&#xA;&#xA;    ImHelper.EventBus(&#xA;        t =&amp;gt; Console.WriteLine(t.clientId + &#34;上线了&#34;), &#xA;        t =&amp;gt; Console.WriteLine(t.clientId + &#34;下线了&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ImHelper方法&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PrevConnectServer&lt;/td&gt; &#xA;   &lt;td&gt;(clientId, string)&lt;/td&gt; &#xA;   &lt;td&gt;在终端准备连接 websocket 前调用&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SendMessage&lt;/td&gt; &#xA;   &lt;td&gt;(发送者, 接收者, 消息内容, 是否回执)&lt;/td&gt; &#xA;   &lt;td&gt;发送消息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GetClientListByOnline&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;返回所有在线clientId&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HasOnline&lt;/td&gt; &#xA;   &lt;td&gt;clientId&lt;/td&gt; &#xA;   &lt;td&gt;判断客户端是否在线&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EventBus&lt;/td&gt; &#xA;   &lt;td&gt;(上线委托, 离线委托)&lt;/td&gt; &#xA;   &lt;td&gt;socket上线与下线事件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;频道&lt;/th&gt; &#xA;   &lt;th&gt;参数&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JoinChan&lt;/td&gt; &#xA;   &lt;td&gt;(clientId, 频道名)&lt;/td&gt; &#xA;   &lt;td&gt;加入&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LeaveChan&lt;/td&gt; &#xA;   &lt;td&gt;(clientId, 频道名)&lt;/td&gt; &#xA;   &lt;td&gt;离开&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GetChanClientList&lt;/td&gt; &#xA;   &lt;td&gt;(频道名)&lt;/td&gt; &#xA;   &lt;td&gt;获取频道所有clientId&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GetChanList&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;获取所有频道和在线人数&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GetChanListByClientId&lt;/td&gt; &#xA;   &lt;td&gt;(clientId)&lt;/td&gt; &#xA;   &lt;td&gt;获取用户参与的所有频道&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GetChanOnline&lt;/td&gt; &#xA;   &lt;td&gt;(频道名)&lt;/td&gt; &#xA;   &lt;td&gt;获取频道的在线人数&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SendChanMessage&lt;/td&gt; &#xA;   &lt;td&gt;(clientId, 频道名, 消息内容)&lt;/td&gt; &#xA;   &lt;td&gt;发送消息，所有在线的用户将收到消息&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;clientId 应该与用户id相同，或者关联；&lt;/li&gt; &#xA; &lt;li&gt;频道适用临时的群聊需求，如聊天室、讨论区；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ImHelper 支持 .NetFramework 4.5+、.NetStandard 2.0&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Html5 终端&lt;/h2&gt; &#xA;&lt;p&gt;终端连接 websocket 前，应该先请求 &lt;code&gt;WebApi&lt;/code&gt; 获得授权过的地址(ImHelper.PrevConnectServer)，伪代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ajax(&#39;/prev-connect-imserver&#39;, function(data) {&#xA;    var url = data; //此时的值：ws://127.0.0.1:6001/ws?token=xxxxx&#xA;    var sock = new WebSocket(url);&#xA;    sock.onmessage = function (e) {&#xA;        //...&#xA;    };&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;项目演示&lt;/h2&gt; &#xA;&lt;p&gt;运行环境：.NET6.0 + redis-server 2.8+&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;cd ImServer &amp;amp;&amp;amp; dotnet run --urls=http://*:6001&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;cd WebApi &amp;amp;&amp;amp; dotnet run&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;打开多个浏览器，分别访问 &lt;a href=&#34;http://127.0.0.1:5000&#34;&gt;http://127.0.0.1:5000&lt;/a&gt; 发送群消息&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16286519/187127834-d3bb2339-8a9b-4d8c-a0ed-3f1d35b4c7c3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;分析痛点&lt;/h2&gt; &#xA;&lt;p&gt;协议痛点：如果浏览器使用 websocket 协议，iOS 使用其他协议，协议不一致将很难维护。&lt;/p&gt; &#xA;&lt;p&gt;职责痛点：IM 的系统一般涉及【我的好友】、【我的群】、【历史消息】等等。。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImServer&lt;/code&gt; 与 &lt;code&gt;WebApi&lt;/code&gt;(业务方) 该保持何种关系呢？&lt;/p&gt; &#xA;&lt;p&gt;用户A向好友B发送消息，分析一下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;需要判断B是否为A好友；&lt;/li&gt; &#xA; &lt;li&gt;需要判断A是否有权限；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;获取历史聊天记录，多个 &lt;code&gt;终端&lt;/code&gt; websocket.send(&#39;gethistory&#39;)，再在 onmessage 定位回调处理，多麻烦啊？&lt;/p&gt; &#xA;&lt;p&gt;诸如此类业务判断会很复杂，使用 &lt;code&gt;ImServer&lt;/code&gt; 做业务逻辑，最终 &lt;code&gt;ImServer&lt;/code&gt; 和 &lt;code&gt;终端&lt;/code&gt; 都将变成巨无霸难以维护。&lt;/p&gt; &#xA;&lt;h2&gt;设计思路&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;终端&lt;/code&gt;（如浏览器/小程序/iOS/android） 统一使用 websocket 连接 &lt;code&gt;ImServer&lt;/code&gt;；&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImServer&lt;/code&gt;（支持集群）根据 clientId 分区管理 websocket 连接；&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WebApi&lt;/code&gt; 使用 ImHelper 调用方法（如：SendMessage、群聊相关方法），将数据推至 Redis chan；&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ImServer&lt;/code&gt; 订阅 Redis chan，收到消息后向 &lt;code&gt;终端&lt;/code&gt; 推送消息；&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;缓解了并发推送消息过多的问题；&lt;/li&gt; &#xA; &lt;li&gt;解决了连接数过多的问题；&lt;/li&gt; &#xA; &lt;li&gt;解耦了业务和通讯，架构更加清淅； &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ImServer&lt;/code&gt; 充当消息转发，连接维护，代码万年不变、且不需要重启维护&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WebApi&lt;/code&gt; 负责所有业务&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;举例1、用户A向B发送消息：&lt;code&gt;终端&lt;/code&gt;A ajax -&amp;gt; &lt;code&gt;WebApi&lt;/code&gt; -&amp;gt; &lt;code&gt;ImServer&lt;/code&gt; -&amp;gt; &lt;code&gt;终端&lt;/code&gt;B websocket.onmessage；&lt;/p&gt; &#xA;&lt;p&gt;举例2、获取历史聊天记录：&lt;code&gt;终端&lt;/code&gt; 请求 &lt;code&gt;WebApi&lt;/code&gt;(业务方) 接口，返回json(历史消息)。&lt;/p&gt; &#xA;&lt;p&gt;举例3、A向B发文件的例子：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A向 &lt;code&gt;WebApi&lt;/code&gt; 传文件&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebApi&lt;/code&gt; 通知 &lt;code&gt;ImServer&lt;/code&gt;，ImHelper.SendMessage(B, &#34;A正在给传送文件...&#34;)&lt;/li&gt; &#xA; &lt;li&gt;B收到消息，A正在给传送文件...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WebApi&lt;/code&gt; 文件接收完成时通知 &lt;code&gt;ImServer&lt;/code&gt;，ImHelper.SendMessage(B, &#34;A文件传输完毕（含文件链接）&#34;)&lt;/li&gt; &#xA; &lt;li&gt;B收到消息，A文件传输完毕（含文件链接）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FreeIM 强依赖 redis-server 组件功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;集成了 redis 轻量级的订阅发布功能，实现消息缓冲发送，后期可更换为其他技术&lt;/li&gt; &#xA; &lt;li&gt;使用了 redis 存储一些关系数据，如在线 clientId、频道信息、授权信息等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;集群分区&lt;/h2&gt; &#xA;&lt;p&gt;单个 &lt;code&gt;ImServer&lt;/code&gt; 实例支持多少个客户端连接，3万？如果在线用户有10万人，怎么办？？？&lt;/p&gt; &#xA;&lt;p&gt;部署 4 个 &lt;code&gt;ImServer&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ImServer&lt;/code&gt;1 订阅 redisChan1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImServer&lt;/code&gt;2 订阅 redisChan2&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImServer&lt;/code&gt;3 订阅 redisChan3&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImServer&lt;/code&gt;4 订阅 redisChan4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;WebApi&lt;/code&gt;(业务方) 根据接收方的 clientId 后四位 16 进制与节点总数取模，定位到对应的 redisChan，进行 redis-&amp;gt;publish 操作将消息定位到相应的 &lt;code&gt;ImServer&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;每个 &lt;code&gt;ImServer&lt;/code&gt; 管理着对应的终端连接，当接收到 redis 订阅消息后，向对应的终端连接推送数据。&lt;/p&gt; &#xA;&lt;h2&gt;事件消息&lt;/h2&gt; &#xA;&lt;p&gt;IM 系统比较常用的有上线、下线，在 &lt;code&gt;ImServer&lt;/code&gt; 层才能准确捕捉事件，但业务代码不合适在这上面编写了。&lt;/p&gt; &#xA;&lt;p&gt;此时采用 redis 发布订阅，将上线、下线等事件向指定频道发布，&lt;code&gt;WebApi&lt;/code&gt;(业务方) 通过 ImHelper.EventBus 方法进行订阅捕捉。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16286519/62150466-a46e3980-b330-11e9-86f3-d050160f0913.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;有感而发&lt;/h2&gt; &#xA;&lt;p&gt;为什么说 SignalR 不合适做 IM？&lt;/p&gt; &#xA;&lt;p&gt;1、IM 的特点必定是长连接，轮训的功能用不上；&lt;/p&gt; &#xA;&lt;p&gt;2、因为 SignalR 是双工通讯的设计，&lt;code&gt;终端&lt;/code&gt; 使用 hub.invoke 发送命令给 SignalR 服务端处理业务，适合用来代替 ajax 减少 http 请求数量；&lt;/p&gt; &#xA;&lt;p&gt;3、过多使用 hub，SignalR 服务端会被业务入侵，业务变化频繁后不得不重新发布版本，每次部署所有终端都会断开连接，遇到5分钟发一次业务补丁的时候，类似离线和上线提示好友的功能就无法实现；&lt;/p&gt; &#xA;&lt;p&gt;FreeIM 业务和推送分离设计，&lt;code&gt;终端&lt;/code&gt; 连接永不更新重启 &lt;code&gt;ImServer&lt;/code&gt; ，业务代码全部在 &lt;code&gt;WebApi&lt;/code&gt; 编写，因此重启 &lt;code&gt;WebApi&lt;/code&gt; 不会造成连接断开。&lt;/p&gt; &#xA;&lt;h2&gt;💕 Donation (捐赠)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢你的打赏&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/FreeSql/gallery/image/338860.html&#34;&gt;Alipay&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/FreeSql/gallery/image/338859.html&#34;&gt;WeChat&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🗄 License (许可证)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/2881099/FreeIM/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lele8/mscan</title>
    <updated>2022-09-01T01:31:30Z</updated>
    <id>tag:github.com,2022-09-01:/lele8/mscan</id>
    <link href="https://github.com/lele8/mscan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款域渗透扫描工具，方便一键自动化、全方位的信息收集及扫描域提权漏洞。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mscan&lt;/h1&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;一款域渗透扫描工具，方便一键自动化、全方位的信息收集及扫描域提权漏洞。&lt;/p&gt; &#xA;&lt;p&gt;支持常见的域信息收集、Zerologon、Nopac、Spooler、MS17010扫描等功能。&lt;/p&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;p&gt;通过代理使用mscan需要指定DC、域用户及密码，扫描域漏洞如Zerologon、Nopac。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mscan.exe --dc 10.1.1.1 --username test --password pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lele8/mscan/main/image/mscan.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本工具仅面向&lt;strong&gt;合法授权&lt;/strong&gt;的企业安全建设行为，如您需要测试本工具的可用性，请自行搭建靶机环境。&lt;/p&gt; &#xA;&lt;p&gt;在使用本工具进行检测时，您应确保该行为符合当地的法律法规，并且已经取得了足够的授权。&lt;strong&gt;请勿对非授权目标进行扫描。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如您在使用本工具的过程中存在任何非法行为，您需自行承担相应后果，作者将不承担任何法律及连带责任。&lt;/p&gt; &#xA;&lt;p&gt;在安装并使用本工具前，请您&lt;strong&gt;务必审慎阅读、充分理解各条款内容&lt;/strong&gt;，限制、免责条款或者其他涉及您重大权益的条款可能会以加粗、加下划线等形式提示您重点注意。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RicoSuter/NSwag</title>
    <updated>2022-09-01T01:31:30Z</updated>
    <id>tag:github.com,2022-09-01:/RicoSuter/NSwag</id>
    <link href="https://github.com/RicoSuter/NSwag" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Swagger/OpenAPI toolchain for .NET, ASP.NET Core and TypeScript.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;NSwag: The Swagger/OpenAPI toolchain for .NET, ASP.NET Core and TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;NSwag | &lt;a href=&#34;http://njsonschema.org&#34;&gt;NJsonSchema&lt;/a&gt; | &lt;a href=&#34;https://apimundo.com&#34;&gt;Apimundo&lt;/a&gt; | &lt;a href=&#34;https://github.com/RicoSuter/Namotion.Reflection&#34;&gt;Namotion.Reflection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages?q=NSwag&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/NSwag.Core.svg?sanitize=true&#34; alt=&#34;NuGet Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/nswag&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/nswag.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.myget.org/feed/Packages/nswag&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/nswag/v/NSwag.Core.svg?label=preview%20nuget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RicoSuter/NSwag/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/RicoSuter/NSwag/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/NSwag/NSwag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat-1dce73.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/4x48JjUT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-join%20chat-1dce73.svg?sanitize=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/tagged/nswag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/questions-on%20StackOverflow-orange.svg?style=flat&#34; alt=&#34;StackOverflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RicoSuter/nswag/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-in%20wiki-orange.svg?style=flat&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; &lt;a href=&#34;https://github.com/RicoSuter/NSwag/issues/3077&#34;&gt;&lt;strong&gt;Announcing Apimundo:&lt;/strong&gt; An API documentation system based on NSwag and NJsonSchema&lt;/a&gt; &lt;span&gt;👈&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;NSwag is a Swagger/OpenAPI 2.0 and 3.0 toolchain for .NET, .NET Core, Web API, ASP.NET Core, TypeScript (jQuery, AngularJS, Angular 2+, Aurelia, KnockoutJS and more) and other platforms, written in C#. The &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;OpenAPI/Swagger specification&lt;/a&gt; uses JSON and JSON Schema to describe a RESTful web API. The NSwag project provides tools to generate OpenAPI specifications from existing ASP.NET Web API controllers and client code from these OpenAPI specifications.&lt;/p&gt; &#xA;&lt;p&gt;The project combines the functionality of Swashbuckle (OpenAPI/Swagger generation) and AutoRest (client generation) in one toolchain (these two libs are not needed). This way a lot of incompatibilites can be avoided and features which are not well described by the OpenAPI specification or JSON Schema are better supported (e.g. &lt;a href=&#34;https://github.com/NJsonSchema/NJsonSchema/wiki/Inheritance&#34;&gt;inheritance&lt;/a&gt;, &lt;a href=&#34;https://github.com/NJsonSchema/NJsonSchema/wiki/Enums&#34;&gt;enum&lt;/a&gt; and reference handling). The NSwag project heavily uses &lt;a href=&#34;http://njsonschema.org&#34;&gt;NJsonSchema for .NET&lt;/a&gt; for JSON Schema handling and C#/TypeScript class/interface generation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/assets/ToolchainDiagram.png&#34; alt=&#34;ToolchainDiagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The project is developed and maintained by &lt;a href=&#34;http://rsuter.com&#34;&gt;Rico Suter&lt;/a&gt; and other contributors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/Middlewares&#34;&gt;Generate Swagger 2.0 and OpenAPI 3.0 specifications from C# ASP.NET (Core) controllers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Serve the specs via ASP.NET (Core) middleware, optionally with &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Swagger UI&lt;/a&gt; or &lt;a href=&#34;https://github.com/Rebilly/ReDoc&#34;&gt;ReDoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate C# or TypeScript clients/proxies from these specs&lt;/li&gt; &#xA; &lt;li&gt;Everything can be automated via CLI (distributed via NuGet tool or build target; or NPM)&lt;/li&gt; &#xA; &lt;li&gt;CLI configured via JSON file or NSwagStudio Windows UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ways to use the toolchain:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple to use Windows GUI, &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/NSwagStudio&#34;&gt;NSwagStudio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;By using the &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/Middlewares&#34;&gt;OpenAPI or OpenAPI UI OWIN and ASP.NET Core Middlewares&lt;/a&gt; (also serves the &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Swagger UI&lt;/a&gt;) (recommended)&lt;/li&gt; &#xA; &lt;li&gt;Via &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/CommandLine&#34;&gt;command line&lt;/a&gt; (Windows, Mac and Linux support through &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; or .NET Core console binary, also via &lt;a href=&#34;https://www.npmjs.com/package/nswag&#34;&gt;NPM package&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In your C# code, via &lt;a href=&#34;https://www.nuget.org/packages?q=NSwag&#34;&gt;NuGet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In your &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/NSwag.MSBuild&#34;&gt;MSBuild targets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/ServiceProjectReference&#34;&gt;ServiceProjectReference&lt;/a&gt; tags in your .csproj (preview)&lt;/li&gt; &#xA; &lt;li&gt;In your &lt;a href=&#34;https://github.com/Jusas/NSwag.AzureFunctionsV2&#34;&gt;Azure V2 Functions&lt;/a&gt; (external project, might not use latest NSwag version)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tutorials:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/AspNetCore-Middleware&#34;&gt;Add NSwag to your ASP.NET Core app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.rsuter.com/nswag-tutorial-integrate-the-nswag-toolchain-into-your-asp-net-web-api-project/&#34;&gt;Integrate the NSwag toolchain into your ASP.NET Web API project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.rsuter.com/nswag-tutorial-generate-an-angular-2-typescript-client-from-an-existing-asp-net-web-api-web-assembly/&#34;&gt;Generate an Angular TypeScript client from an existing ASP.NET Web API web assembly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lF9ZZ8p2Ciw&#34;&gt;Video Tutorial: How to integrate NSwag into your ASP.NET Core Web API project (5 mins)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenAPI/Swagger Generators:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ASP.NET Web API assembly to OpenAPI (supports .NET Core) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/AspNetCoreOpenApiDocumentGenerator&#34;&gt;AspNetCoreOpenApiDocumentGenerator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/WebApiOpenApiDocumentGenerator&#34;&gt;WebApiOpenApiDocumentGenerator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generates an OpenAPI specification for Web API controllers&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/WebApiToOpenApiCommand&#34;&gt;WebApiToOpenApiCommand&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generates an OpenAPI specification for controllers in an external Web API assembly&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/Assembly-loading&#34;&gt;Also supports loading of .NET Core assemblies&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/TypesToOpenApiCommand&#34;&gt;TypesToOpenApiCommand&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generates an OpenAPI specification containing only types from .NET assemblies&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code Generators:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CSharp Client&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/CSharpClientGenerator&#34;&gt;CSharpClientGenerator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generates C# clients from an OpenAPI specification&lt;/li&gt; &#xA;     &lt;li&gt;Generates POCOs or classes implementing &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx&#34;&gt;INotifyPropertyChanged&lt;/a&gt; supporting DTOs&lt;/li&gt; &#xA;     &lt;li&gt;The generated clients can be used with full .NET, .NET Core, Xamarin and .NET Standard 1.4 in general&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CSharp Controllers&lt;/strong&gt; (contract first/schema first development) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/CSharpControllerGenerator&#34;&gt;CSharpControllerGenerator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generates Web API Controllers based on a OpenAPI specification (ASP.NET Web API and ASP.NET Core)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TypeScript Client&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/TypeScriptClientGenerator&#34;&gt;TypeScriptClientGenerator&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Generates TypeScript clients from a OpenAPI specification&lt;/li&gt; &#xA;     &lt;li&gt;Available templates/supported libraries: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;JQuery with Callbacks, &lt;code&gt;JQueryCallbacks&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;JQuery with promises &lt;code&gt;JQueryPromises&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;AngularJS using $http, &lt;code&gt;AngularJS&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Angular (v2+) using the http service, &lt;code&gt;Angular&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;window.fetch API and ES6 promises, &lt;code&gt;Fetch&lt;/code&gt; (use this template in your React/Redux app)&lt;/li&gt; &#xA;       &lt;li&gt;Aurelia using the HttpClient from aurelia-fetch-client, &lt;code&gt;Aurelia&lt;/code&gt; (based on the Fetch template)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;Axios&lt;/code&gt; (preview)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Downloads&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/releases&#34;&gt;Download latest &lt;strong&gt;NSwagStudio MSI installer (NSwagStudio.msi)&lt;/strong&gt;&lt;/a&gt; (Windows Desktop application)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/releases&#34;&gt;Download latest &lt;strong&gt;NSwag command line tools&lt;/strong&gt; and NSwagStudio (NSwag.zip)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NPM Packages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/nswag&#34;&gt;NSwag&lt;/a&gt;: Command line tools (.NET and .NET Core) distributed as NPM package&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NuGet Packages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Core/versions/latest&#34;&gt;NSwag.Core&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The OpenAPI/Swagger reader and writer classes, see &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/OpenApiDocument&#34;&gt;OpenApiDocument&lt;/a&gt; (.NET Standard 1.0 / 2.0 and .NET 4.5)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Core.Yaml/versions/latest&#34;&gt;NSwag.Core.Yaml&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.3 / 2.0 and .NET 4.5) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Extensions to read and write YAML OpenAPI specifications&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Annotations/versions/latest&#34;&gt;NSwag.Annotations&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.0 / 2.0 and .NET 4.5) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Attributes to decorate Web API controllers to control the OpenAPI generation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OpenAPI generation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Generation/versions/latest/&#34;&gt;NSwag.Generation&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.0 / 2.0 and .NET 4.5) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Classes to generate OpenAPI specifications&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Generation.WebApi/versions/latest&#34;&gt;NSwag.Generation.WebApi&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.0 / 2.0 and .NET 4.5) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Classes to generate OpenAPI specifications from Web API controllers, see &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/WebApiOpenApiDocumentGenerator&#34;&gt;WebApiOpenApiDocumentGenerator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Generation.AspNetCore/versions/latest&#34;&gt;NSwag.Generation.AspNetCore&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.6 / 2.0 and .NET 4.5.1) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(Experimental) Classes to generate OpenAPI specifications from ASP.NET Core MVC controllers using the ApiExplorer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code generation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.CodeGeneration/versions/latest&#34;&gt;NSwag.CodeGeneration&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.3 / 2.0 / .NET 4.5.1) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Base classes to generate clients from OpenAPI specifications&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.CodeGeneration.CSharp/versions/latest&#34;&gt;NSwag.CodeGeneration.CSharp&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.3 and .NET 4.5.1) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Classes to generate C# clients from OpenAPI specifications, see &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/CSharpClientGenerator&#34;&gt;CSharpClientGenerator&lt;/a&gt; and &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/CSharpControllerGenerator&#34;&gt;CSharpControllerGenerator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.CodeGeneration.TypeScript/versions/latest&#34;&gt;NSwag.CodeGeneration.TypeScript&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.3 and .NET 4.5.1) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Classes to generate TypeScript clients from OpenAPI specifications, see &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/TypeScriptClientGenerator&#34;&gt;TypeScriptClientGenerator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ASP.NET and ASP.NET Core:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AspNetCore/versions/latest&#34;&gt;NSwag.AspNetCore&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.6 / 2.0 and .NET 4.5.1+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AspNet.Owin/versions/latest&#34;&gt;NSwag.AspNet.Owin&lt;/a&gt;&lt;/strong&gt; (.NET 4.5+) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/Middlewares&#34;&gt;ASP.NET Core/OWIN middlewares&lt;/a&gt; for serving OpenAPI specifications and Swagger UI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AspNet.WebApi/versions/latest&#34;&gt;NSwag.AspNet.WebApi&lt;/a&gt;&lt;/strong&gt; (.NET 4.5+) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ASP.NET Web API filter which serializes exceptions (&lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/JsonExceptionFilterAttribute&#34;&gt;JsonExceptionFilterAttribute&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Frontends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.AssemblyLoader/versions/latest&#34;&gt;NSwag.AssemblyLoader&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.6 / 2.0 and .NET 4.5.1): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Classes to load assemblies in an isolated AppDomain and generate OpenAPI specs from Web API controllers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.Commands/versions/latest&#34;&gt;NSwag.Commands&lt;/a&gt;&lt;/strong&gt; (.NET Standard 1.6 / 2.0 and .NET 4.5.1+): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Commands for the command line tool implementations and UI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.MSBuild/versions/latest&#34;&gt;NSwag.MSBuild&lt;/a&gt;&lt;/strong&gt; (MSBuild .targets): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds a .targets file to your Visual Studio project, so that you can run the NSwag command line tool in an MSBuild target, see &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/MSBuild&#34;&gt;MSBuild&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://apimundo.com/organizations/nuget-org/nuget-feeds/public/packages/NSwag.ConsoleCore/versions/latest&#34;&gt;NSwag.ConsoleCore&lt;/a&gt;&lt;/strong&gt; (.NET Core 1.0, 1.1, 2.0, 2.1 and 2.2): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Command line tool for .NET Core (&lt;code&gt;dotnet nswag&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;DotNetCliToolReference Include=&#34;NSwag.ConsoleCore&#34; Version=&#34;...&#34; /&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://chocolatey.org/packages/nswagstudio&#34;&gt;NSwagStudio&lt;/a&gt;&lt;/strong&gt; (Chocolatey, Windows): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Package to install the NSwagStudio and command line tools via Chocolatey&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CI NuGet Feed: &lt;a href=&#34;https://www.myget.org/F/nswag/api/v3/index.json&#34;&gt;https://www.myget.org/F/nswag/api/v3/index.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The NuGet packages may require the &lt;strong&gt;Microsoft.NETCore.Portable.Compatibility&lt;/strong&gt; package on .NET Core/UWP targets (if mscorlib is missing).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/assets/LayerDiagram.png&#34; alt=&#34;LayerDiagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage in C#&lt;/h3&gt; &#xA;&lt;p&gt;To register the &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/AspNetCore-Middleware&#34;&gt;middlewares&lt;/a&gt; to generate a OpenAPI spec and render the UI, register NSwag in &lt;code&gt;Startup.cs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Startup&#xA;{&#xA;    ...&#xA;&#xA;    public void ConfigureServices(IServiceCollection services)&#xA;    {&#xA;        services.AddOpenApiDocument(); // add OpenAPI v3 document&#xA;//      services.AddSwaggerDocument(); // add Swagger v2 document&#xA;    }&#xA;&#xA;    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)&#xA;    {&#xA;        ...&#xA;&#xA;        app.UseOpenApi(); // serve OpenAPI/Swagger documents&#xA;        app.UseSwaggerUi3(); // serve Swagger UI&#xA;        app.UseReDoc(); // serve ReDoc UI&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code shows how to read an OpenAPI/Swagger specification and generate C# client classes to call the described web services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var document = await OpenApiDocument.FromFileAsync(&#34;openapi.json&#34;);&#xA;var clientSettings = new CSharpClientGeneratorSettings &#xA;{&#xA;    ClassName = &#34;MyClass&#34;,&#xA;    CSharpGeneratorSettings = &#xA;    {&#xA;        Namespace = &#34;MyNamespace&#34;&#xA;    }&#xA;};&#xA;&#xA;var clientGenerator = new CSharpClientGenerator(document, clientSettings);&#xA;var code = clientGenerator.GenerateFile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki&#34;&gt;project Wiki&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;NSwagStudio&lt;/h3&gt; &#xA;&lt;p&gt;The generators can be used in a comfortable and simple Windows GUI called &lt;a href=&#34;https://github.com/RicoSuter/NSwag/wiki/NSwagStudio&#34;&gt;NSwagStudio&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/assets/screenshots/03_WebAPI_CSharp.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/assets/screenshots/03_WebAPI_CSharp.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors, support and consulting&lt;/h2&gt; &#xA;&lt;p&gt;Companies or individuals which paid a substantial amount for implementing, fixing issues, support or sponsoring are listed below. Thank you for supporting this project! You can also become a financial contributor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/RicoSuter&#34;&gt;Sponsor main contributor Rico Suter via GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/nswag&#34;&gt;Sponsor project via Open Collective for NSwag&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please contact &lt;a href=&#34;https://rsuter.com&#34;&gt;Rico Suter&lt;/a&gt; for paid consulting and support.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/RicoSuter/NSwag/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/RicoSuter/NSwag/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Top sponsors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://picturepark.com&#34;&gt;&lt;img src=&#34;https://images.gotowebinar.com/30dcc42d33945684be9cf66852300d1a&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sponsors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/NSwag/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/NSwag/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/NSwag#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/NSwag/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>