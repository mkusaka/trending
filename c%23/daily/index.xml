<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:37:30Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vkhorikov/CSharpFunctionalExtensions</title>
    <updated>2022-06-05T01:37:30Z</updated>
    <id>tag:github.com,2022-06-05:/vkhorikov/CSharpFunctionalExtensions</id>
    <link href="https://github.com/vkhorikov/CSharpFunctionalExtensions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functional extensions for C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Functional Extensions for C#&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/EnterpriseCraftsmanship/CSharpFunctionalExtensions/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/EnterpriseCraftsmanship/CSharpFunctionalExtensions/_apis/build/status/CSharpFunctionalExtensions?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/CSharpFunctionalExtensions/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/csharpfunctionalextensions.svg?sanitize=true&#34; alt=&#34;NuGet downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vkhorikov/CSharpFunctionalExtensions/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library helps write code in more functional way. To get to know more about the principles behind it, check out the &lt;a href=&#34;https://enterprisecraftsmanship.com/ps-func&#34;&gt;Applying Functional Principles in C# Pluralsight course&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Available on &lt;a href=&#34;https://www.nuget.org/packages/CSharpFunctionalExtensions/&#34;&gt;NuGet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package CSharpFunctionalExtensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PM&amp;gt; Install-Package CSharpFunctionalExtensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Get rid of primitive obsession&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result&amp;lt;CustomerName&amp;gt; name = CustomerName.Create(model.Name);&#xA;Result&amp;lt;Email&amp;gt; email = Email.Create(model.PrimaryEmail);&#xA;&#xA;Result result = Result.Combine(name, email);&#xA;if (result.IsFailure)&#xA;    return Error(result.Error);&#xA;&#xA;var customer = new Customer(name.Value, email.Value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Make nulls explicit with the Maybe type&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;Customer&amp;gt; customerOrNothing = _customerRepository.GetById(id);&#xA;if (customerOrNothing.HasNoValue)&#xA;    return Error(&#34;Customer with such Id is not found: &#34; + id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compose multiple operations in a single chain&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;return _customerRepository.GetById(id)&#xA;    .ToResult(&#34;Customer with such Id is not found: &#34; + id)&#xA;    .Ensure(customer =&amp;gt; customer.CanBePromoted(), &#34;The customer has the highest status possible&#34;)&#xA;    .Tap(customer =&amp;gt; customer.Promote())&#xA;    .Tap(customer =&amp;gt; _emailGateway.SendPromotionNotification(customer.PrimaryEmail, customer.Status))&#xA;    .Finally(result =&amp;gt; result.IsSuccess ? Ok() : Error(result.Error));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wrap multiple operations in a TransactionScope&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;return _customerRepository.GetById(id)&#xA;    .ToResult(&#34;Customer with such Id is not found: &#34; + id)&#xA;    .Ensure(customer =&amp;gt; customer.CanBePromoted(), &#34;The customer has the highest status possible&#34;)&#xA;    .WithTransactionScope(customer =&amp;gt; Result.Success(customer)&#xA;        .Tap(customer =&amp;gt; customer.Promote())&#xA;        .Tap(customer =&amp;gt; customer.ClearAppointments()))&#xA;    .Tap(customer =&amp;gt; _emailGateway.SendPromotionNotification(customer.PrimaryEmail, customer.Status))&#xA;    .Finally(result =&amp;gt; result.IsSuccess ? Ok() : Error(result.Error));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Maybe&lt;/h3&gt; &#xA;&lt;h4&gt;Explicit Construction&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Creating a new Maybe containing a value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; apple = Maybe&amp;lt;string&amp;gt;.From(&#34;apple&#34;);&#xA;&#xA;// or&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = Maybe.From(&#34;apple&#34;); // type inference&#xA;&#xA;// or&#xA;&#xA;var apple = Maybe.From(&#34;apple&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;None/No Value&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Replacing &lt;code&gt;null&lt;/code&gt; or the &lt;a href=&#34;https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/&#34;&gt;Null Object Pattern&lt;/a&gt; for representing &#39;missing&#39; data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int storeInventory = ...&#xA;&#xA;Maybe&amp;lt;string&amp;gt; fruit = storeInventory &amp;gt; 0&#xA;    ? Maybe&amp;lt;string&amp;gt;.From(&#34;apple&#34;)&#xA;    : Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;// or where the generic type is a reference type&#xA;&#xA;Maybe&amp;lt;string&amp;gt; fruit = null;&#xA;&#xA;// or where the generic type is a value type&#xA;&#xA;Maybe&amp;lt;int&amp;gt; fruit = default;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Implicit Conversion&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Easily creating a Maybe from a value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Constructing a Maybe&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;; // implicit conversion&#xA;&#xA;// Or as a method return value&#xA;Maybe&amp;lt;string&amp;gt; GetFruit(string fruit)&#xA;{&#xA;    if (string.IsNullOrWhiteSpace(fruit))&#xA;    {&#xA;        return Maybe&amp;lt;string&amp;gt;.None;&#xA;    }&#xA;&#xA;    return fruit; // implicit conversion&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Equality&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Comparing Maybes or values without knowledge of the inner value of the Maybes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; orange = &#34;orange&#34;;&#xA;string alsoOrange = &#34;orange&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;Console.WriteLine(apple == orange); // false&#xA;Console.WriteLine(apple != orange); // true&#xA;Console.WriteLine(orange == alsoOrange); // true&#xA;Console.WriteLine(alsoOrange == noFruit); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ToString&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;Console.WriteLine(apple.ToString()); // &#34;apple&#34;&#xA;Console.WriteLine(noFruit.ToString()); // &#34;No value&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GetValueOrThrow&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Procedurally accessing the inner value of the Maybe&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Call this will throw a &lt;code&gt;InvalidOperationException&lt;/code&gt; if there is no value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;Console.WriteLine(apple.GetValueOrThrow()); // &#34;apple&#34;;&#xA;Console.WriteLine(noFruit.GetValueOrThrow()); // throws InvalidOperationException !!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HasValue and HasNoValue&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Procedurally checking if the Maybe has a value, usually before accessing the value directly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void Response(string fruit)&#xA;{&#xA;    Console.WriteLine($&#34;Yum, a {fruit} 😀&#34;);&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;if (apple.HasValue)&#xA;{&#xA;    Response(apple.Value); // safe to access since we checked above&#xA;}&#xA;&#xA;if (noFruit.HasNoValue)&#xA;{&#xA;    Response(&#34;We&#39;re all out of fruit 😢&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GetValueOrDefault&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Safely accessing the inner value, without checking if there is one, by providing a fallback if no value exists&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void Response(string fruit)&#xA;{&#xA;    Console.WriteLine($&#34;It&#39;s a {fruit}&#34;);&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; unknownFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;string appleValue = apple.GetValueOrDefault(&#34;banana&#34;);&#xA;string unknownFruitValue = unknownFruit.GetValueOrDefault(&#34;banana&#34;);&#xA;&#xA;Response(appleValue); // It&#39;s a apple&#xA;Response(unknownFruitValue); // It&#39;s a banana&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Where&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Converting a Maybe with a value to a &lt;code&gt;Maybe.None&lt;/code&gt; if a condition isn&#39;t met&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The predicate passed to &lt;code&gt;Where&lt;/code&gt; (ex )&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;bool IsMyFavorite(string fruit)&#xA;{&#xA;    return fruit == &#34;papaya&#34;;&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;&#xA;Maybe&amp;lt;string&amp;gt; favoriteFruit = apple.Where(IsMyFavorite);&#xA;&#xA;Console.WriteLine(favoriteFruit.ToString()); // &#34;No value&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Map&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Transforming the value in the Maybe, if there is one, without needing to check if the value is there&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the delegate (ex &lt;code&gt;CreateMessage&lt;/code&gt;) passed to &lt;code&gt;Maybe.Map()&lt;/code&gt; is only executed if the Maybe has an inner value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string CreateMessage(string fruit)&#xA;{&#xA;    return $&#34;The fruit is a {fruit}&#34;;&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;Console.WriteLine(apple.Map(CreateMessage).Unwrap(&#34;No fruit&#34;)); // &#34;The fruit is a apple&#34;&#xA;Console.WriteLine(noFruit.Map(CreateMessage).Unwrap(&#34;No fruit&#34;)); // &#34;No fruit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Select&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alias&lt;/strong&gt;: &lt;code&gt;Maybe.Select()&lt;/code&gt; is an alias of &lt;code&gt;Maybe.Map()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bind&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Transforming from one Maybe into another Maybe (like &lt;code&gt;Maybe.Map&lt;/code&gt; but it transforms the Maybe instead of the inner value)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the delegate (ex &lt;code&gt;MakeAppleSauce&lt;/code&gt;) passed to &lt;code&gt;Maybe.Bind()&lt;/code&gt; is only executed if the Maybe has an inner value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; MakeAppleSauce(Maybe&amp;lt;string&amp;gt; fruit)&#xA;{&#xA;    if (fruit == &#34;apple&#34;) // we can only make applesauce from apples 🍎&#xA;    {&#xA;        return &#34;applesauce&#34;;&#xA;    }&#xA;&#xA;    return Maybe&amp;lt;string&amp;gt;.None;&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; banana = &#34;banana&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;Console.WriteLine(apple.Bind(MakeAppleSauce).ToString()); // &#34;applesauce&#34;&#xA;Console.WriteLine(banana.Bind(MakeAppleSauce).ToString()); // &#34;No value&#34;&#xA;Console.WriteLine(noFruit.Bind(MakeAppleSauce).ToString()); // &#34;No value&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SelectMany&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alias&lt;/strong&gt;: &lt;code&gt;Maybe.SelectMany()&lt;/code&gt; is an alias of &lt;code&gt;Maybe.Bind()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Choose&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Filter a collection of Maybes to only the ones that have a value, and then return the value for each, or map that value to a new one&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the delegate passed to &lt;code&gt;Maybe.Choose()&lt;/code&gt; is only executed on the Maybes of the collection with an inner value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IEnumerable&amp;lt;Maybe&amp;lt;string&amp;gt;&amp;gt; unknownFruits = new[] { &#34;apple&#34;, Maybe&amp;lt;string&amp;gt;.None, &#34;banana&#34; };&#xA;&#xA;IEnumerable&amp;lt;string&amp;gt; knownFruits = unknownFruits.Choose();&#xA;IEnumerable&amp;lt;string&amp;gt; fruitResponses = unknownFruits.Choose(fruit =&amp;gt; $&#34;Delicious {fruit}&#34;);&#xA;&#xA;Console.WriteLine(string.Join(&#34;, &#34;, fruits)) // &#34;apple, banana&#34;&#xA;Console.WriteLine(string.Join(&#34;, &#34;, fruitResponses)) // &#34;Delicious apple, Delicious banana&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Execute&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Safely executing a &lt;code&gt;void&lt;/code&gt; (or &lt;code&gt;Task&lt;/code&gt;) returning operation on the Maybe inner value without checking if there is one&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the &lt;code&gt;Action&lt;/code&gt; (ex &lt;code&gt;PrintFruit&lt;/code&gt;) passed to &lt;code&gt;Maybe.Execute()&lt;/code&gt; is only executed if the Maybe has an inner value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void PrintFruit(string fruit)&#xA;{&#xA;    Console.WriteLine($&#34;This is a {fruit}&#34;);&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;apple.Execute(PrintFruit); // &#34;This is a apple&#34;&#xA;noFruit.Execute(PrintFruit); // no output to the console&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ExecuteNoValue&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Executing a &lt;code&gt;void&lt;/code&gt; (or &lt;code&gt;Task&lt;/code&gt;) returning operation when the Maybe has no value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void LogNoFruit(string fruit)&#xA;{&#xA;    Console.WriteLine($&#34;There are no {fruit}&#34;);&#xA;}&#xA;&#xA;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; banana = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;apple.ExecuteNoValue(() =&amp;gt; LogNoFruit(&#34;apple&#34;)); // no output to console&#xA;banana.ExecuteNoValue(() =&amp;gt; LogNoFruit(&#34;banana&#34;)); // &#34;There are no banana&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Supplying a fallback value Maybe or value in the case that the Maybe has no inner value&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The fallback &lt;code&gt;Func&amp;lt;T&amp;gt;&lt;/code&gt; (ex &lt;code&gt;() =&amp;gt; &#34;banana&#34;&lt;/code&gt;) will only be executed if the Maybe has no inner value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; banana = &#34;banana&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;Console.WriteLine(apple.Or(banana).ToString()); // &#34;apple&#34;&#xA;Console.WriteLine(noFruit.Or(() =&amp;gt; banana)).ToString()); // &#34;banana&#34;&#xA;Console.WriteLine(noFruit.Or(&#34;banana&#34;).ToString()); // &#34;banana&#34;&#xA;Console.WriteLine(noFruit.Or(() =&amp;gt; &#34;banana&#34;).ToString()); // &#34;banana&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Match&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Defining two operations to perform on a Maybe. One to be executed if there is an inner value, and the other to executed if there is not&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; apple = &#34;apple&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;// Void returning Match&#xA;apple.Match(&#xA;    fruit =&amp;gt; Console.WriteLine($&#34;It&#39;s a {fruit}&#34;),&#xA;    () =&amp;gt; Console.WriteLine(&#34;There&#39;s no fruit&#34;));&#xA;&#xA;// Mapping Match&#xA;string fruitMessage = noFruit.Match(&#xA;    fruit =&amp;gt; $&#34;It&#39;s a {fruit}&#34;,&#xA;    () =&amp;gt; &#34;There&#39;s no fruit&#34;));&#xA;&#xA;Console.WriteLine(fruitMessage); // &#34;There&#39;s no fruit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TryFirst and TryLast&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Replacing &lt;code&gt;.FirstOrDefault()&lt;/code&gt; and &lt;code&gt;.LastOrDefault()&lt;/code&gt; so that you can return a Maybe instead of a &lt;code&gt;null&lt;/code&gt; or value type default value (like &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;) when working with collections&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IEnumerable&amp;lt;string&amp;gt; fruits = new[] { &#34;apple&#34;, &#34;coconut&#34;, &#34;banana&#34; };&#xA;&#xA;Maybe&amp;lt;string&amp;gt; firstFruit = fruits.TryFirst();&#xA;Maybe&amp;lt;string&amp;gt; probablyABanana = fruits.TryFirst(fruit =&amp;gt; fruit.StartsWith(&#34;ba&#34;));&#xA;Maybe&amp;lt;string&amp;gt; aPeachOrAPear = fruits.TryFirst(fruit =&amp;gt; fruit.StartsWith(&#34;p&#34;));&#xA;&#xA;Console.WriteLine(firstFruit.ToString()); // &#34;apple&#34;&#xA;Console.WriteLine(probablyABanana.ToString()); // &#34;banana&#34;&#xA;Console.WriteLine(aPeachOrAPear.ToString()); // &#34;No value&#34;&#xA;&#xA;Maybe&amp;lt;string&amp;gt; lastFruit = fruits.TryLast();&#xA;Maybe&amp;lt;string&amp;gt; anAppleOrApricot = fruits.TryLast(fruit =&amp;gt; fruit.StartsWith(&#34;a&#34;));&#xA;&#xA;Console.WriteLine(lastFruit.ToString()); // &#34;banana&#34;&#xA;Console.WriteLine(anAppleOrApricot.ToString()); // &#34;apple&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TryFind&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Safely getting a value out of a Dictionary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Dictionary&amp;lt;string, int&amp;gt; fruitInventory = new()&#xA;{&#xA;    { &#34;apple&#34;, 10 },&#xA;    { &#34;banana&#34;, 2 }&#xA;};&#xA;&#xA;Maybe&amp;lt;int&amp;gt; appleCount = fruitInventory.TryFind(&#34;apple&#34;);&#xA;Maybe&amp;lt;int&amp;gt; kiwiCount = fruitInventory.TryFind(&#34;kiwi&#34;);&#xA;&#xA;Console.WriteLine(appleCount.ToString()); // &#34;10&#34;&#xA;Console.WriteLine(kiwiCount.ToString()); // &#34;No value&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ToResult&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Representing the lack of an inner value in a Maybe as a failed operation&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: See &lt;code&gt;Result&lt;/code&gt; section below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Maybe&amp;lt;string&amp;gt; fruit = &#34;banana&#34;;&#xA;Maybe&amp;lt;string&amp;gt; noFruit = Maybe&amp;lt;string&amp;gt;.None;&#xA;&#xA;string errorMessage = &#34;There was no fruit to give&#34;;&#xA;&#xA;Result&amp;lt;string&amp;gt; weGotAFruit = fruit.ToResult(errorMessage);&#xA;Result&amp;lt;string&amp;gt; failedToGetAFruit = noFruit.ToResult(errorMessage);&#xA;&#xA;Console.WriteLine(weGotAFruit.Value); // &#34;banana&#34;&#xA;Console.WriteLine(failedToGetAFruit.Error); // &#34;There was no fruit to give&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Result&lt;/h3&gt; &#xA;&lt;h4&gt;Explicit Construction: Success and Failure&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Creating a new Result in a Success or Failure state&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;record FruitInventory(string Name, int Count);&#xA;&#xA;Result&amp;lt;FruitInventory&amp;gt; appleInventory = Result.Success(new FruitInventory(&#34;apple&#34;, 4));&#xA;Result&amp;lt;FruitInventory&amp;gt; failedOperation = Result.Failure&amp;lt;FruitInventory&amp;gt;(&#34;Could not find inventory&#34;);&#xA;Result successInventoryUpdate = Result.Success();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Conditional Construction: SuccessIf and FailureIf&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Creating successful or failed Results based on expressions or delegates instead of if/else statements or ternary expressions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;bool onTropicalIsland = true;&#xA;&#xA;Result foundCoconut = Result.SuccessIf(onTropicalIsland, &#34;These trees seem bare 🥥&#34;);&#xA;Result foundGrapes = Result.FailureIf(() =&amp;gt; onTropicalIsland, &#34;No grapes 🍇 here&#34;);&#xA;&#xA;// or&#xA;&#xA;bool isNewShipmentDay = true;&#xA;&#xA;Result&amp;lt;FruitInventory&amp;gt; appleInventory = Result.SuccessIf(isNewShipmentDay, new FruitInventory(&#34;apple&#34;, 4), &#34;No 🍎 today&#34;);&#xA;Result&amp;lt;FruitInventory&amp;gt; bananaInventory = Result.SuccessIf(() =&amp;gt; isNewShipmentDay, new FruitInventory(&#34;banana&#34;, 2), &#34;All out of 🍌&#34;);&#xA;&#xA;// or&#xA;&#xA;bool afterBreakfast = true;&#xA;&#xA;Result&amp;lt;FruitInventory&amp;gt; orangeInventory = Result.FailureIf(afterBreakfast, new FruitInventory(&#34;orange&#34;, 10), &#34;No 🍊 today&#34;);&#xA;Result&amp;lt;FruitInventory&amp;gt; grapefruitInventory = Result.FailureIf(() =&amp;gt; afterBreakfast, new FruitInventory(&#34;grapefruit&#34;, 5), &#34;No grapefruit 😢&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Implicit Conversion&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Easily creating a successful result from a value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result&amp;lt;FruitInventory&amp;gt; appleInventory = new FruitInventory(&#34;apple&#34;, 4);&#xA;Result failedInventoryUpdate = &#34;Could not update inventory&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ToString&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Printing out the state of a Result and its inner value or error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result&amp;lt;FruitInventory&amp;gt; appleInventory = new FruitInventory(&#34;apple&#34;, 4);&#xA;Result&amp;lt;FruitInventory&amp;gt; bananaInventory = Result.Failure&amp;lt;FruitInventory&amp;gt;(&#34;Could not find any bananas&#34;);&#xA;Result failedInventoryUpdate = &#34;Could not update inventory&#34;;&#xA;Result successfulInventoryUpdate = Result.Success();&#xA;&#xA;Console.WriteLine(appleInventory.ToString()); // &#34;Success(FruitInventory { Name = apple, Count = 4 })&#34;&#xA;Console.WriteLine(bananaInventory.ToString()); // &#34;Failure(Could not find any bananas)&#34;&#xA;Console.WriteLine(failedInventoryUpdate.ToString()); // &#34;Failure(Could not update inventory)&#34;&#xA;Console.WriteLine(successfulInventoryUpdate.ToString()); // &#34;Success&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Map&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Transforming the inner value of a successful Result, without needing to check on the success/failure state of the Result&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the delegate (ex &lt;code&gt;CreateMessage&lt;/code&gt;) passed to &lt;code&gt;Result.Map()&lt;/code&gt; is only executed if the Result was successful&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string CreateMessage(FruitInventory inventory)&#xA;{&#xA;    return $&#34;There are {inventory.Count} {inventory.Name}(s)&#34;;&#xA;}&#xA;&#xA;Result&amp;lt;FruitInventory&amp;gt; appleInventory = new FruitInventory(&#34;apple&#34;, 4);&#xA;Result&amp;lt;FruitInventory&amp;gt; bananaInventory = Result.Failure&amp;lt;FruitInventory&amp;gt;(&#34;Could not find any bananas&#34;);&#xA;&#xA;Console.WriteLine(appleInventory.Map(CreateMessage).ToString()); // &#34;Success(There are 4 apple(s))&#34;&#xA;Console.WriteLine(bananaInventory.Map(CreateMessage).ToString()); // &#34;Failure(Could not find any bananas)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MapError&lt;/h4&gt; &#xA;&lt;p&gt;Use case: Transforming the inner error of a failed Result, without needing to check on the success/failure state of the Result&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the delegate (ex &lt;code&gt;ErrorEnhancer&lt;/code&gt;) passed to &lt;code&gt;Result.MapError()&lt;/code&gt; is only executed if the Result failed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string ErrorEnhancer(string errorMessage)&#xA;{&#xA;    return $&#34;Failed operation: {errorMessage}&#34;;&#xA;}&#xA;&#xA;Console.WriteLine(appleInventory.MapError(ErrorEnhancer).ToString()); // &#34;Success(FruitInventory { Name = apple, Count = 4 })&#34;&#xA;Console.WriteLine(bananaInventory.MapError(ErrorEnhancer).ToString()); // &#34;Failed operation: Could not find any bananas&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;For extension methods on top of this library&#39;s &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt; that you can use in tests, you can use &lt;a href=&#34;https://fluentassertions.com/&#34;&gt;FluentAssertions&lt;/a&gt; with &lt;a href=&#34;https://www.nuget.org/packages/FluentAssertions.CSharpFunctionalExtensions/&#34;&gt;this NuGet package&lt;/a&gt; (&lt;a href=&#34;https://github.com/pedromtcosta/FluentAssertions.CSharpFunctionalExtensions&#34;&gt;GitHub link&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Arrange&#xA;var myClass = new MyClass();&#xA;&#xA;// Act&#xA;Result result = myClass.TheMethod();&#xA;&#xA;// Assert&#xA;result.Should().BeSuccess();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Read or Watch more about these ideas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&#34;&gt;Functional C#: Primitive obsession&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/&#34;&gt;Functional C#: Non-nullable reference types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/2015/03/20/functional-c-handling-failures-input-errors/&#34;&gt;Functional C#: Handling failures, input errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/ps-func&#34;&gt;Applying Functional Principles in C# Pluralsight course&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seangwright/typescript-functional-extensions&#34;&gt;Typescript Functional Extensions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;A big thanks to the project contributors!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ruudhe&#34;&gt;ruud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Yaevh&#34;&gt;Tomasz Malinowski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/staffanwingren&#34;&gt;Staffan Wingren&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DerStimmler&#34;&gt;Tim Schneider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Caleb9&#34;&gt;Piotr Karasiński&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MarcelRoozekrans&#34;&gt;Marcel Roozekrans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guythetechie&#34;&gt;guythetechie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lqkahler&#34;&gt;Logan Kahler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AliKhalili&#34;&gt;Ali Khalili&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Razenpok&#34;&gt;Andrei Andreev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YudApps&#34;&gt;YudApps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dataphysix&#34;&gt;dataphysix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LaszloLueck&#34;&gt;Laszlo Lueck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seangwright&#34;&gt;Sean G. Wright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SamuelViesselman&#34;&gt;Samuel Viesselman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stiankroknes&#34;&gt;Stian Kroknes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dataneodev&#34;&gt;dataneo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/michaeldileo&#34;&gt;michaeldileo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renato04&#34;&gt;Renato Ramos Nascimento&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/draptik&#34;&gt;Patrick Drechsler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mingazhev&#34;&gt;Vadim Mingazhev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darickc&#34;&gt;Darick Carpenter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kakone&#34;&gt;Stéphane Mitermite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mnissl&#34;&gt;Markus Nißl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freever&#34;&gt;Adrian Frielinghaus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/svroonland&#34;&gt;svroonland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JvSSD&#34;&gt;JvSSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mnissl&#34;&gt;mnissl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VladimirMakaev&#34;&gt;Vladimir Makaev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benprime&#34;&gt;Ben Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pedromtcosta&#34;&gt;pedromtcosta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikelThief&#34;&gt;Michał Bator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mukmyash&#34;&gt;mukmyash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azm102&#34;&gt;azm102&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasdc&#34;&gt;ThomasDC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bopazyn&#34;&gt;bopazyn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CommCody&#34;&gt;Joris Goovaerts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BillyFromAHill&#34;&gt;Ivan Deev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dpraimeyuu&#34;&gt;Damian Płaza&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ergwun&#34;&gt;ergwun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pilotMike&#34;&gt;Michael DiLeo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jcsonder&#34;&gt;Jean-Claude&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/space-alien&#34;&gt;Matt Jenkins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altmann&#34;&gt;Michael Altmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linkdotnet&#34;&gt;Steven Giesel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ahryshchanka&#34;&gt;Anton Hryshchanka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/saitonakamura&#34;&gt;Mikhail Bashurov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kostekk88&#34;&gt;kostekk88&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CarlHA&#34;&gt;Carl Abrahams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golavr&#34;&gt;golavr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hankovich&#34;&gt;Sviataslau Hankovich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/freakingawesome&#34;&gt;Chad Gilbert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robosek&#34;&gt;Robert Sęk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SergAtGitHub&#34;&gt;Sergey Solomentsev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mjharwood&#34;&gt;Malcolm J Harwood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dragan-stepanovic&#34;&gt;Dragan Stepanovic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonny-novikov&#34;&gt;Ivan Novikov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dmolokanov&#34;&gt;Denis Molokanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solvingJ&#34;&gt;Gerald Wiltse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yakimovim&#34;&gt;yakimovim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alex-erygin&#34;&gt;Alex Erygin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/omaraloraini&#34;&gt;Omar Aloraini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>codebude/QRCoder</title>
    <updated>2022-06-05T01:37:30Z</updated>
    <id>tag:github.com,2022-06-05:/codebude/QRCoder</id>
    <link href="https://github.com/codebude/QRCoder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure C# Open Source QR Code implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;QRCoder&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build&lt;/th&gt; &#xA;   &lt;th&gt;Code coverage&lt;/th&gt; &#xA;   &lt;th&gt;Build status&lt;/th&gt; &#xA;   &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latest / Stable&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/gh/codebude/QRCoder&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/codebude/QRCoder/branch/master/graph/badge.svg?token=3yNs88KD8S&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/actions/workflows/wf-build-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/codebude/QRCoder/actions/workflows/wf-build-release.yml/badge.svg?branch=master&#34; alt=&#34;Build, test, pack, push (Release)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/QRCoder/&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/QRCoder?rnd=0892982314&#34; alt=&#34;NuGet Badge&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CI / Last commit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codecov.io/gh/codebude/QRCoder&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/codebude/QRCoder/branch/master/graph/badge.svg?token=3yNs88KD8S&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/actions/workflows/wf-build-release-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/codebude/QRCoder/actions/workflows/wf-build-release-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build, test, pack, push (CI)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/codebude/qrcoder/packages&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Github-Packages-blue&#34; alt=&#34;Github packages&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;QRCoder is a simple library, written in C#.NET, which enables you to create QR codes. It hasn&#39;t any dependencies to other libraries and is available as .NET Framework and .NET Core PCL version on NuGet.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to grab-up/fork the project and make it better!&lt;/p&gt; &#xA;&lt;p&gt;For more information see: &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki&#34;&gt;&lt;strong&gt;QRCode Wiki&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;http://en.code-bude.net/2013/10/17/qrcoder-an-open-source-qr-code-generator-implementation-in-csharp/&#34;&gt;Creator&#39;s blog (english)&lt;/a&gt; | &lt;a href=&#34;http://code-bude.net/2013/10/17/qrcoder-eine-open-source-qr-code-implementierung-in-csharp/&#34;&gt;Creator&#39;s blog (german)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Release Notes&lt;/h3&gt; &#xA;&lt;p&gt;The release notes for the current and all past releases can be read here: &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Release-notes&#34;&gt;📄 Release Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Legal information and credits&lt;/h2&gt; &#xA;&lt;p&gt;QRCoder is a project by &lt;a href=&#34;https://raffaelherrmann.de&#34;&gt;Raffael Herrmann&lt;/a&gt; and was first released in 10/2013. It&#39;s licensed under the &lt;a href=&#34;https://github.com/codebude/QRCoder/raw/master/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Either checkout this Github repository or install QRCoder via NuGet Package Manager. If you want to use NuGet just search for &#34;QRCoder&#34; or run the following command in the NuGet Package Manager console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PM&amp;gt; Install-Package QRCoder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CI builds&lt;/h4&gt; &#xA;&lt;p&gt;The NuGet feed contains only &lt;strong&gt;major/stable&lt;/strong&gt; releases. If you want the latest functions and features, you can use the CI builds &lt;a href=&#34;https://github.com/codebude/qrcoder/packages&#34;&gt;via Github packages&lt;/a&gt;. &lt;em&gt;(More information on how to use Github Packages in Nuget Package Manager can be &lt;a href=&#34;http://webcache.googleusercontent.com/search?q=cache:i_gL6oIwpr8J:www.catiawidgets.net/2021/04/20/creating-github-packages-and-accessing-them-in-nuget/+&amp;amp;cd=1&amp;amp;hl=de&amp;amp;ct=clnk&amp;amp;gl=de&#34;&gt;found here&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You only need five lines of code, to generate and view your first QR code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;QRCodeGenerator qrGenerator = new QRCodeGenerator();&#xA;QRCodeData qrCodeData = qrGenerator.CreateQrCode(&#34;The text which should be encoded.&#34;, QRCodeGenerator.ECCLevel.Q);&#xA;QRCode qrCode = new QRCode(qrCodeData);&#xA;Bitmap qrCodeImage = qrCode.GetGraphic(20);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional parameters and overloads&lt;/h3&gt; &#xA;&lt;p&gt;The GetGraphics-method has some more overloads. The first two enable you to set the color of the QR code graphic. One uses Color-class-types, the other HTML hex color notation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//Set color by using Color-class types&#xA;Bitmap qrCodeImage = qrCode.GetGraphic(20, Color.DarkRed, Color.PaleGreen, true);&#xA;&#xA;//Set color by using HTML hex color notation&#xA;Bitmap qrCodeImage = qrCode.GetGraphic(20, &#34;#000ff0&#34;, &#34;#0ff000&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other overload enables you to render a logo/image in the center of the QR code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Bitmap qrCodeImage = qrCode.GetGraphic(20, Color.Black, Color.White, (Bitmap)Bitmap.FromFile(&#34;C:\\myimage.png&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a plenty of other options. So feel free to read more on that in our wiki: &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/How-to-use-QRCoder&#34;&gt;Wiki: How to use QRCoder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Special rendering types&lt;/h3&gt; &#xA;&lt;p&gt;Besides the normal QRCode class (which is shown in the example above) for creating QR codes in Bitmap format, there are some more QR code rendering classes, each for another special purpose.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#21-qrcode-renderer-in-detail&#34;&gt;QRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#211-artqrcode-renderer-in-detail&#34;&gt;ArtQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#22-asciiqrcode-renderer-in-detail&#34;&gt;AsciiQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#23-base64qrcode-renderer-in-detail&#34;&gt;Base64QRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#24-bitmapbyteqrcode-renderer-in-detail&#34;&gt;BitmapByteQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#210-pdfbyteqrcode-renderer-in-detail&#34;&gt;PdfByteQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#25-pngbyteqrcode-renderer-in-detail&#34;&gt;PngByteQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#29-postscriptqrcode-renderer-in-detail&#34;&gt;PostscriptQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#26-svgqrcode-renderer-in-detail&#34;&gt;SvgQRCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#27-unityqrcode-renderer-in-detail&#34;&gt;UnityQRCode&lt;/a&gt; (&lt;em&gt;via &lt;a href=&#34;https://www.nuget.org/packages/QRCoder.Unity&#34;&gt;QRCoder.Unity&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#28-xamlqrcode-renderer-in-detail&#34;&gt;XamlQRCode&lt;/a&gt; (&lt;em&gt;via &lt;a href=&#34;https://www.nuget.org/packages/QRCoder.Xaml&#34;&gt;QRCoder.Xaml&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Please be aware that not all renderers are available on all target frameworks. Please check the &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers#2-overview-of-the-different-renderers&#34;&gt;compatibility table&lt;/a&gt; in our wiki, to see if a specific renderer is available on your favourite target framework.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information about the different rendering types click on one of the types in the list above or have a look at: &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---QR-Code-renderers&#34;&gt;Wiki: Advanced usage - QR-Code renderers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PayloadGenerator.cs - Generate QR code payloads&lt;/h2&gt; &#xA;&lt;p&gt;Technically QR code is just a visual representation of a text/string. Nevertheless most QR code readers can read &#34;special&#34; QR codes which trigger different actions.&lt;/p&gt; &#xA;&lt;p&gt;For example: WiFi-QRcodes which, when scanned by smartphone, let the smartphone join an access point automatically.&lt;/p&gt; &#xA;&lt;p&gt;This &#34;special&#34; QR codes are generated by using special structured payload string, when generating the QR code. The &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators&#34;&gt;PayloadGenerator.cs class&lt;/a&gt; helps you to generate this payload strings. To generate a WiFi payload for example, you need just this one line of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;PayloadGenerator.WiFi wifiPayload = new PayloadGenerator.WiFi(&#34;MyWiFi-SSID&#34;, &#34;MyWiFi-Pass&#34;, PayloadGenerator.WiFi.Authentication.WPA);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a QR code from this payload, just call the &#34;ToString()&#34;-method and pass it to the QRCoder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//[...]&#xA;QRCodeData qrCodeData = qrGenerator.CreateQrCode(wifiPayload.ToString(), QRCodeGenerator.ECCLevel.Q);&#xA;//[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use overloaded method that accepts Payload as parameter. Payload generator can have QR Code Version set (default is auto set), ECC Level (default is M) and ECI mode (default is automatic detection).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//[...]&#xA;QRCodeData qrCodeData = qrGenerator.CreateQrCode(wifiPayload);&#xA;//[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to override ECC Level set by Payload generator, you can use overloaded method, that allows setting ECC Level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//[...]&#xA;QRCodeData qrCodeData = qrGenerator.CreateQrCode(wifiPayload, QRCodeGenerator.ECCLevel.Q);&#xA;//[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can learn more about the payload generator &lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators&#34;&gt;in our Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The PayloadGenerator supports the following types of payloads:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#31-bezahlcode&#34;&gt;BezahlCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#32-bitcoin-like-crypto-currency-payment-address&#34;&gt;Bitcoin-Like cryptocurrency (Bitcoin, Bitcoin Cash, Litecoin) payment address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#33-bookmark&#34;&gt;Bookmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#34-calendar-events-icalvevent&#34;&gt;Calendar events (iCal/vEvent)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#35-contactdata-mecardvcard&#34;&gt;ContactData (MeCard/vCard)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#36-geolocation&#34;&gt;Geolocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#37-girocode&#34;&gt;Girocode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#38-mail&#34;&gt;Mail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#39-mms&#34;&gt;MMS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#310-monero-addresspayment&#34;&gt;Monero address/payment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#311-one-time-password&#34;&gt;One-Time-Password&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#312-phonenumber&#34;&gt;Phonenumber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#313-russiapaymentorder&#34;&gt;RussiaPaymentOrder (ГОСТ Р 56042-2014)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#314-shadowsocks-configuration&#34;&gt;Shadowsocks configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#315-skype-call&#34;&gt;Skype call&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#316-slovenianupnqr&#34;&gt;SlovenianUpnQr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#317-sms&#34;&gt;SMS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#318-swissqrcode-iso-20022&#34;&gt;SwissQrCode (ISO-20022)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#319-url&#34;&gt;URL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#320-whatsappmessage&#34;&gt;WhatsAppMessage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codebude/QRCoder/wiki/Advanced-usage---Payload-generators#321-wifi&#34;&gt;WiFi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ardalis/CleanArchitecture</title>
    <updated>2022-06-05T01:37:30Z</updated>
    <id>tag:github.com,2022-06-05:/ardalis/CleanArchitecture</id>
    <link href="https://github.com/ardalis/CleanArchitecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture Solution Template: A starting point for Clean Architecture with ASP.NET Core&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/actions&#34;&gt;&lt;img src=&#34;https://github.com/ardalis/CleanArchitecture/workflows/.NET%20Core/badge.svg?sanitize=true&#34; alt=&#34;.NET Core&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/ardalis/CleanArchitecture/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;publish Ardalis.CleanArchitecture Template to nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Ardalis.CleanArchitecture.Template?label=Ardalis.CleanArchitecture.Template&#34; alt=&#34;Ardalis.CleanArchitecture.Template on NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=ardalis&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/ardalis.svg?label=Follow%20@ardalis&#34; alt=&#34;Follow @ardalis&#34;&gt; &lt;/a&gt; &amp;nbsp; &#xA;&lt;a href=&#34;https://twitter.com/intent/follow?screen_name=nimblepros&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/nimblepros.svg?label=Follow%20@nimblepros&#34; alt=&#34;Follow @nimblepros&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Clean Architecture&lt;/h1&gt; &#xA;&lt;p&gt;A starting point for Clean Architecture with ASP.NET Core. &lt;a href=&#34;https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;Clean Architecture&lt;/a&gt; is just the latest in a series of names for the same loosely-coupled, dependency-inverted architecture. You will also find it named &lt;a href=&#34;http://alistair.cockburn.us/Hexagonal+architecture&#34;&gt;hexagonal&lt;/a&gt;, &lt;a href=&#34;http://www.dossier-andreas.net/software_architecture/ports_and_adapters.html&#34;&gt;ports-and-adapters&lt;/a&gt;, or &lt;a href=&#34;http://jeffreypalermo.com/blog/the-onion-architecture-part-1/&#34;&gt;onion architecture&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This architecture is used in the &lt;a href=&#34;https://www.pluralsight.com/courses/fundamentals-domain-driven-design&#34;&gt;DDD Fundamentals course&lt;/a&gt; by &lt;a href=&#34;https://ardalis.com&#34;&gt;Steve Smith&lt;/a&gt; and &lt;a href=&#34;https://thedatafarm.com/&#34;&gt;Julie Lerman&lt;/a&gt;. Contact Steve&#39;s company, &lt;a href=&#34;https://nimblepros.com/&#34;&gt;NimblePros&lt;/a&gt;, for Clean Architecture or DDD training and/or implementation assistance for your team.&lt;/p&gt; &#xA;&lt;h2&gt;Table Of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#clean-architecture&#34;&gt;Clean Architecture&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#table-of-contents&#34;&gt;Table Of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#give-a-star-star&#34;&gt;Give a Star! &lt;span&gt;⭐&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GregTrevellick.CleanArchitecture&#34;&gt;Now available as a project template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#versions&#34;&gt;Versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#learn-more&#34;&gt;Learn More&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#using-the-visual-studio-item-template&#34;&gt;Using the Visual Studio Item Template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#using-the-dotnet-cli-template&#34;&gt;Using the dotnet CLI template&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#using-the-github-repository&#34;&gt;Using the GitHub Repository&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#running-migrations&#34;&gt;Running Migrations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#goals&#34;&gt;Goals&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#history-and-shameless-plug-section&#34;&gt;History and Shameless Plug Section&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#design-decisions-and-dependencies&#34;&gt;Design Decisions and Dependencies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-core-project&#34;&gt;The Core Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-sharedkernel-project&#34;&gt;The SharedKernel Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-infrastructure-project&#34;&gt;The Infrastructure Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-web-project&#34;&gt;The Web Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#the-test-projects&#34;&gt;The Test Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#patterns-used&#34;&gt;Patterns Used&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#domain-events&#34;&gt;Domain Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ardalis/CleanArchitecture/main/#related-projects&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Give a Star! &lt;span&gt;⭐&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project to learn or start your solution, please give it a star. Thanks!&lt;/p&gt; &#xA;&lt;p&gt;Or if you&#39;re feeling really generous, we now support GitHub sponsorships - see the button above.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;Now available as a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GregTrevellick.CleanArchitecture&#34;&gt;project template&lt;/a&gt; within Visual Studio.&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;The master branch is now using .NET 6. If you need a previous version use one of these tagged commits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/releases/tag/dotnet-core-5&#34;&gt;5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/tree/dotnet-core-3.1&#34;&gt;3.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/tree/dotnet-core-2.2&#34;&gt;2.2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/tree/dotnet-core-2.0&#34;&gt;2.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/c/Ardalis/search?query=clean%20architecture&#34;&gt;Live Stream Recordings Working on Clean Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://player.fm/series/net-rocks/clean-architecture-with-steve-smith&#34;&gt;DotNetRocks Podcast Discussion with Steve &#34;ardalis&#34; Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=k8cZUW4MS3I&#34;&gt;Fritz and Friends Streaming Discussion with Steve &#34;ardalis&#34; Smith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;To use this template, there are a few options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install using &lt;code&gt;dotnet new&lt;/code&gt; (preferred - see below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=GregTrevellick.CleanArchitecture&#34;&gt;Install the Visual Studio Template&lt;/a&gt; and use it within Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;Download this Repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are all covered below.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Visual Studio Item Template&lt;/h2&gt; &#xA;&lt;p&gt;After installing the template, you should be able to create a new project in Visual Studio and search for Clean Architecture. You should see the template appear in your list of project templates:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/80412393-cd116880-889b-11ea-886f-9b91fffbc767.png&#34; alt=&#34;Clean Architecture Project Template&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After choosing this template, provide a project name and finish the project creation wizard. You should be all set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/80412455-e5818300-889b-11ea-8219-379581583a92.png&#34; alt=&#34;Clean Architecture Project Template step 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the template is generally only updated with major updates to the project. The GitHub repository will always have the latest bug fixes and enhancements.&lt;/p&gt; &#xA;&lt;h2&gt;Using the dotnet CLI template&lt;/h2&gt; &#xA;&lt;p&gt;First, install the template from &lt;a href=&#34;https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/&#34;&gt;NuGet (https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet new -i Ardalis.CleanArchitecture.Template&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the template in the list of templates from &lt;code&gt;dotnet new&lt;/code&gt; after this install successfully. Look for &#34;Steve Smith Clean Architecture&#34; with Short Name of &#34;clean-arch&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the directory where you will put the new solution.&lt;/p&gt; &#xA;&lt;p&gt;Run this command to create the solution structure in a subfolder name &lt;code&gt;Your.ProjectName&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new clean-arch -o Your.ProjectName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Your.ProjectName&lt;/code&gt; directory and solution file will be created, and inside that will be all of your new solution contents, properly namespaced and ready to run/test!&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;img src=&#34;https://user-images.githubusercontent.com/782127/101661723-9fd28e80-3a16-11eb-8be4-f9195d825ad6.png&#34; alt=&#34;powershell screenshot showing steps&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/dahlsailrunner&#34;&gt;@dahlsailrunner&lt;/a&gt; for your help getting this working!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Known Issue&lt;/strong&gt;: Don&#39;t include hyphens in the name. See &lt;a href=&#34;https://github.com/ardalis/CleanArchitecture/issues/201&#34;&gt;#201&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using the GitHub Repository&lt;/h2&gt; &#xA;&lt;p&gt;To get started based on this repository, you need to get a copy locally. You have three options: fork, clone, or download. Most of the time, you probably just want to download.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;download the repository&lt;/strong&gt;, unblock the zip file, and extract it to a new folder if you just want to play with the project or you wish to use it as the starting point for an application.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;fork this repository&lt;/strong&gt; only if you plan on submitting a pull request. Or if you&#39;d like to keep a copy of a snapshot of the repository in your own GitHub account.&lt;/p&gt; &#xA;&lt;p&gt;You should &lt;strong&gt;clone this repository&lt;/strong&gt; if you&#39;re one of the contributors and you have commit access to it. Otherwise you probably want one of the other options.&lt;/p&gt; &#xA;&lt;h2&gt;Running Migrations&lt;/h2&gt; &#xA;&lt;p&gt;In Visual Studio, open the Package Manager Console, and run &lt;code&gt;Add-Migration InitialMigrationName -StartupProject Your.ProjectName.Web -Context AppDbContext -Project Your.ProjectName.Infrastructure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use SqlServer, change &lt;code&gt;options.UseSqlite(connectionString));&lt;/code&gt; to &lt;code&gt;options.UseSqlServer(connectionString));&lt;/code&gt; in the &lt;code&gt;Your.ProjectName.Infrastructure.StartupSetup&lt;/code&gt; file. Also remember to replace the &lt;code&gt;SqliteConnection&lt;/code&gt; with &lt;code&gt;DefaultConnection&lt;/code&gt; in the &lt;code&gt;Your.ProjectName.Web.Program&lt;/code&gt; file, which points to your Database Server.&lt;/p&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this repository is to provide a basic solution structure that can be used to build Domain-Driven Design (DDD)-based or simply well-factored, SOLID applications using .NET Core. Learn more about these topics here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/csharp-solid-principles&#34;&gt;SOLID Principles for C# Developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/principles-oo-design&#34;&gt;SOLID Principles of Object Oriented Design&lt;/a&gt; (the original, longer course)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/domain-driven-design-fundamentals&#34;&gt;Domain-Driven Design Fundamentals&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re used to building applications as single-project or as a set of projects that follow the traditional UI -&amp;gt; Business Layer -&amp;gt; Data Access Layer &#34;N-Tier&#34; architecture, I recommend you check out these two courses (ideally before DDD Fundamentals):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/n-tier-apps-part1&#34;&gt;Creating N-Tier Applications in C#, Part 1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/n-tier-csharp-part2&#34;&gt;Creating N-Tier Applications in C#, Part 2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I also maintain Microsoft&#39;s reference application, eShopOnWeb, and its associated free eBook. Check them out here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnWeb&#34;&gt;eShopOnWeb on GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/webappebook&#34;&gt;Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure&lt;/a&gt; (eBook)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History and Shameless Plug Section&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve used this starter kit to teach the basics of ASP.NET Core using Domain-Driven Design concepts and patterns for some time now (starting when ASP.NET Core was still in pre-release). Typically I teach a one- or two-day hands-on workshop ahead of events like DevIntersection, or private on-site workshops for companies looking to bring their teams up to speed with the latest development technologies and techniques. Feel free to &lt;a href=&#34;https://ardalis.com/contact-us&#34;&gt;contact me&lt;/a&gt; if you&#39;d like information about upcoming workshops.&lt;/p&gt; &#xA;&lt;h1&gt;Design Decisions and Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;The goal of this sample is to provide a fairly bare-bones starter kit for new projects. It does not include every possible framework, tool, or feature that a particular enterprise application might benefit from. Its choices of technology for things like data access are rooted in what is the most common, accessible technology for most business software developers using Microsoft&#39;s technology stack. It doesn&#39;t (currently) include extensive support for things like logging, monitoring, or analytics, though these can all be added easily. Below is a list of the technology dependencies it includes, and why they were chosen. Most of these can easily be swapped out for your technology of choice, since the nature of this architecture is to support modularity and encapsulation.&lt;/p&gt; &#xA;&lt;h2&gt;The Core Project&lt;/h2&gt; &#xA;&lt;p&gt;The Core project is the center of the Clean Architecture design, and all other project dependencies should point toward it. As such, it has very few external dependencies. The one exception in this case is the &lt;code&gt;System.Reflection.TypeExtensions&lt;/code&gt; package, which is used by &lt;code&gt;ValueObject&lt;/code&gt; to help implement its &lt;code&gt;IEquatable&amp;lt;&amp;gt;&lt;/code&gt; interface. The Core project should include things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Entities&lt;/li&gt; &#xA; &lt;li&gt;Aggregates&lt;/li&gt; &#xA; &lt;li&gt;Domain Events&lt;/li&gt; &#xA; &lt;li&gt;DTOs&lt;/li&gt; &#xA; &lt;li&gt;Interfaces&lt;/li&gt; &#xA; &lt;li&gt;Event Handlers&lt;/li&gt; &#xA; &lt;li&gt;Domain Services&lt;/li&gt; &#xA; &lt;li&gt;Specifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The SharedKernel Project&lt;/h2&gt; &#xA;&lt;p&gt;Many solutions will also reference a separate &lt;strong&gt;Shared Kernel&lt;/strong&gt; project/package. I recommend creating a separate SharedKernel project and solution if you will require sharing code between multiple &lt;a href=&#34;https://ardalis.com/encapsulation-boundaries-large-and-small/&#34;&gt;bounded contexts&lt;/a&gt; (see &lt;a href=&#34;https://www.pluralsight.com/courses/domain-driven-design-fundamentals&#34;&gt;DDD Fundamentals&lt;/a&gt;). I further recommend this be published as a NuGet package (most likely privately within your organization) and referenced as a NuGet dependency by those projects that require it. For this sample, in the interest of simplicity, I&#39;ve added a SharedKernel project to the solution. It contains types that would likely be shared between multiple bounded contexts (VS solutions, typically), in my experience. If you want to see an &lt;a href=&#34;https://www.nuget.org/packages/PluralsightDdd.SharedKernel/&#34;&gt;example of a SharedKernel package, the one I use in my updated Pluralsight DDD course is on NuGet here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The Infrastructure Project&lt;/h2&gt; &#xA;&lt;p&gt;Most of your application&#39;s dependencies on external resources should be implemented in classes defined in the Infrastructure project. These classes should implement interfaces defined in Core. If you have a very large project with many dependencies, it may make sense to have multiple Infrastructure projects (e.g. Infrastructure.Data), but for most projects one Infrastructure project with folders works fine. The sample includes data access and domain event implementations, but you would also add things like email providers, file access, web api clients, etc. to this project so they&#39;re not adding coupling to your Core or UI projects.&lt;/p&gt; &#xA;&lt;p&gt;The Infrastructure project depends on &lt;code&gt;Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt; and &lt;code&gt;Autofac&lt;/code&gt;. The former is used because it&#39;s built into the default ASP.NET Core templates and is the least common denominator of data access. If desired, it can easily be replaced with a lighter-weight ORM like Dapper. Autofac (formerly StructureMap) is used to allow wireup of dependencies to take place closest to where the implementations reside. In this case, an InfrastructureRegistry class can be used in the Infrastructure class to allow wireup of dependencies there, without the entry point of the application even having to have a reference to the project or its types. &lt;a href=&#34;https://ardalis.com/avoid-referencing-infrastructure-in-visual-studio-solutions&#34;&gt;Learn more about this technique&lt;/a&gt;. The current implementation doesn&#39;t include this behavior - it&#39;s something I typically cover and have students add themselves in my workshops.&lt;/p&gt; &#xA;&lt;h2&gt;The Web Project&lt;/h2&gt; &#xA;&lt;p&gt;The entry point of the application is the ASP.NET Core web project. This is actually a console application, with a &lt;code&gt;public static void Main&lt;/code&gt; method in &lt;code&gt;Program.cs&lt;/code&gt;. It currently uses the default MVC organization (Controllers and Views folders) as well as most of the default ASP.NET Core project template code. This includes its configuration system, which uses the default &lt;code&gt;appsettings.json&lt;/code&gt; file plus environment variables, and is configured in &lt;code&gt;Startup.cs&lt;/code&gt;. The project delegates to the &lt;code&gt;Infrastructure&lt;/code&gt; project to wire up its services using Autofac.&lt;/p&gt; &#xA;&lt;h2&gt;The Test Projects&lt;/h2&gt; &#xA;&lt;p&gt;Test projects could be organized based on the kind of test (unit, functional, integration, performance, etc.) or by the project they are testing (Core, Infrastructure, Web), or both. For this simple starter kit, the test projects are organized based on the kind of test, with unit, functional and integration test projects existing in this solution. In terms of dependencies, there are three worth noting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/xunit&#34;&gt;xunit&lt;/a&gt; I&#39;m using xunit because that&#39;s what ASP.NET Core uses internally to test the product. It works great and as new versions of ASP.NET Core ship, I&#39;m confident it will continue to work well with it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Moq/&#34;&gt;Moq&lt;/a&gt; I&#39;m using Moq as a mocking framework for white box behavior-based tests. If I have a method that, under certain circumstances, should perform an action that isn&#39;t evident from the object&#39;s observable state, mocks provide a way to test that. I could also use my own Fake implementation, but that requires a lot more typing and files. Moq is great once you get the hang of it, and assuming you don&#39;t have to mock the world (which we don&#39;t in this case because of good, modular design).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.TestHost&#34;&gt;Microsoft.AspNetCore.TestHost&lt;/a&gt; I&#39;m using TestHost to test my web project using its full stack, not just unit testing action methods. Using TestHost, you make actual HttpClient requests without going over the wire (so no firewall or port configuration issues). Tests run in memory and are very fast, and requests exercise the full MVC stack, including routing, model binding, model validation, filters, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Patterns Used&lt;/h1&gt; &#xA;&lt;p&gt;This solution template has code built in to support a few common patterns, especially Domain-Driven Design patterns. Here is a brief overview of how a few of them work.&lt;/p&gt; &#xA;&lt;h2&gt;Domain Events&lt;/h2&gt; &#xA;&lt;p&gt;Domain events are a great pattern for decoupling a trigger for an operation from its implementation. This is especially useful from within domain entities since the handlers of the events can have dependencies while the entities themselves typically do not. In the sample, you can see this in action with the &lt;code&gt;ToDoItem.MarkComplete()&lt;/code&gt; method. The following sequence diagram demonstrates how the event and its handler are used when an item is marked complete through a web API endpoint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/75702680-216ce300-5c73-11ea-9187-ec656192ad3b.png&#34; alt=&#34;Domain Event Sequence Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/apiendpoints&#34;&gt;ApiEndpoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/guardclauses&#34;&gt;GuardClauses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/result&#34;&gt;Result&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ardalis/specification&#34;&gt;Specification&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>