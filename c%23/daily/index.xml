<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-23T01:29:28Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IzyPro/WatchDog</title>
    <updated>2024-06-23T01:29:28Z</updated>
    <id>tag:github.com,2024-06-23:/IzyPro/WatchDog</id>
    <link href="https://github.com/IzyPro/WatchDog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WatchDog is a Realtime Message, Event, HTTP (Request &amp; Response) and Exception logger and viewer for ASP.Net Core Web Apps and APIs. It allows developers log and view messages, events, http requests made to their web application and also exception caught during runtime in their web applications, all in Realtime.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/IzyPro/WatchDog/raw/main/WatchDog/src/WatchPage/images/watchdogWhiteLogo.png&#34; alt=&#34;WatchDog Logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;WatchDog&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IzyPro/WatchDog&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/WatchDog-blueviolet&#34; alt=&#34;WatchDog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/WatchDog.NET#versions-tab&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/WatchDog.NET?color=orange&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/WatchDog.NET#versions-tab&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/WatchDog.NET?color=red&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IzyPro/WatchDog/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/IzyPro/WatchDog?color=Green&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?hashtags=WatchDog&amp;amp;original_referer=https%3A%2F%2Fdeveloper.twitter.com%2F&amp;amp;ref_src=twsrc%5Etfw%7Ctwcamp%5Ebuttonembed%7Ctwterm%5Eshare%7Ctwgr%5E&amp;amp;related=twitterapi%2Ctwitter&amp;amp;text=Hello%2C%20world!%0DCheck%20out%20this%20awesome%20developer%20tool&amp;amp;url=https%3A%2F%2Fgithub.com%2FIzyPro%2FWatchDog&amp;amp;via=HQWatchdog&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url?style=social&amp;amp;url=https%3A%2F%2Fgithub.com%2FIzyPro%2FWatchDog&#34; alt=&#34;WatchDog&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;WatchDog is a Realtime Message, Event, HTTP (Request &amp;amp; Response) and Exception logger and viewer for ASP.Net Core Web Apps and APIs. It allows developers log and view messages, events, http requests made to their web application and also exception caught during runtime in their web applications, all in Realtime. It leverages &lt;code&gt;SignalR&lt;/code&gt; for real-time monitoring and &lt;code&gt;LiteDb&lt;/code&gt; a Serverless MongoDB-like database with no configuration with the option of using your external databases (MSSQL, MySQl, Postgres, MongoDB).&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://github.com/IzyPro/WatchDog/raw/main/watchlog.png&#34; alt=&#34;Request &amp;amp; Response Viewer&#34;&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;General Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RealTime HTTP Request, Response, and Exception Logger&lt;/li&gt; &#xA; &lt;li&gt;In-code message and event logging&lt;/li&gt; &#xA; &lt;li&gt;User Friendly Logger Views&lt;/li&gt; &#xA; &lt;li&gt;Search Option for HTTP and Exception Logs&lt;/li&gt; &#xA; &lt;li&gt;Filtering Option for HTTP Logs using HTTP Methods and StatusCode&lt;/li&gt; &#xA; &lt;li&gt;Logger View Authentication&lt;/li&gt; &#xA; &lt;li&gt;Auto Clear Logs Option&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official support for .NET8&lt;/li&gt; &#xA; &lt;li&gt;Support for .NET8 UseOutputCache&lt;/li&gt; &#xA; &lt;li&gt;Blacklisting using Regex&lt;/li&gt; &#xA; &lt;li&gt;Bug Fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Breaking Changes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SqlDriverOption is now DbDriverOption (&amp;gt;= v1.4.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Core 3.1 and newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via .NET CLI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package WatchDog.NET --version 1.4.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install via Package Manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Install-Package WatchDog.NET --version 1.4.11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To enable WatchDog to listen for requests, use the WatchDog middleware provided by WatchDog.&lt;/p&gt; &#xA;&lt;p&gt;Add WatchDog Namespace in &lt;code&gt;Startup.cs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using WatchDog;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Register WatchDog service in &lt;code&gt;Startup.cs&lt;/code&gt; under &lt;code&gt;ConfigureService()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;services.AddWatchDogServices();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup AutoClear Logs &lt;code&gt;Optional&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This clears the logs after a specific duration.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; When &lt;code&gt;IsAutoClear = true&lt;/code&gt; Default Schedule Time is set to Weekly, override the settings like below:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;services.AddWatchDogServices(opt =&amp;gt; &#xA;{ &#xA;   opt.IsAutoClear = true;&#xA;   opt.ClearTimeSchedule = WatchDogAutoClearScheduleEnum.Monthly;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup Logging to External Db (MSSQL, MySQL, PostgreSQL &amp;amp; MongoDb) &lt;code&gt;Optional&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Add Database Connection String and Choose DbDriver Option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;services.AddWatchDogServices(opt =&amp;gt; &#xA;{&#xA;   opt.IsAutoClear = true; &#xA;   opt.SetExternalDbConnString = &#34;Server=localhost;Database=testDb;User Id=postgres;Password=root;&#34;; &#xA;   opt.DbDriverOption = WatchDogDbDriverEnum.PostgreSql; &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add WatchDog middleware in the HTTP request pipeline in &lt;code&gt;Startup.cs&lt;/code&gt; under &lt;code&gt;Configure()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://github.com/IzyPro/WatchDog/raw/main/login.png&#34; alt=&#34;Login page sample&#34;&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Add Authentication option like below: &lt;code&gt;Important&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This authentication information (Username and Password) will be used to access the log viewer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;app.UseWatchDog(opt =&amp;gt; &#xA;{ &#xA;   opt.WatchPageUsername = &#34;admin&#34;; &#xA;   opt.WatchPagePassword = &#34;Qwerty@123&#34;; &#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If your project uses authentication, then &lt;code&gt;app.UseWatchDog();&lt;/code&gt; should come after app.UseRouting(), app.UseAuthentication(), app.UseAuthorization(), in that order&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- &gt;If your projects startup or program class contains app.UseMvc() or app.UseRouting() then app.UseWatchDog() should come after `Important`&#xA;&gt;If your projects startup or program class contains app.UseEndpoints() then app.UseWatchDog() should come before `Important` --&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://github.com/IzyPro/WatchDog/raw/main/requestLog.png&#34; alt=&#34;Request and Response Sample Details&#34;&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;Optional Configurations: &lt;code&gt;Optional&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blacklist: List of routes, paths or endpoints to be ignored (should be a comma separated string like below).&lt;/li&gt; &#xA; &lt;li&gt;Serializer: If not default, specify the type of global json serializer/converter used.&lt;/li&gt; &#xA; &lt;li&gt;CorsPolicy: Policy Name if project uses CORS.&lt;/li&gt; &#xA; &lt;li&gt;UseOutputCache: If your application uses &lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/performance/caching/output&#34;&gt;ASP.NET Output Cache&lt;/a&gt;. This feature is only available for .NET8 and above.&lt;/li&gt; &#xA; &lt;li&gt;UseRegexForBlacklisting: Enables the use of Regex to blacklist request routes, paths or endpoints.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;app.UseWatchDog(opt =&amp;gt; &#xA;{ &#xA;   opt.WatchPageUsername = &#34;admin&#34;; &#xA;   opt.WatchPagePassword = &#34;Qwerty@123&#34;; &#xA;   //Optional&#xA;   opt.Blacklist = &#34;Test/testPost, api/auth/login&#34;; //Prevent logging for specified endpoints&#xA;   opt.Serializer = WatchDogSerializerEnum.Newtonsoft; //If your project use a global json converter&#xA;   opt.CorsPolicy = &#34;MyCorsPolicy&#34;;&#xA;   opt.UseOutputCache = true;&#xA;   opt.UseRegexForBlacklisting = true;&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add WatchDog Exception Logger &lt;code&gt;Optional&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is used to log in-app exceptions that occur during a particular HTTP request.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://github.com/IzyPro/WatchDog/raw/main/exceptionLog.png&#34; alt=&#34;Exception Sample Details&#34;&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Add Exception Logger before the main WatchDog Middleware, preferably at the top of the middleware hierarchy so as to catch possible early exceptions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;app.UseWatchDogExceptionLogger();&#xA;&#xA;...&#xA;&#xA;app.UseWatchDog(opt =&amp;gt; &#xA;{ &#xA;   opt.WatchPageUsername = &#34;admin&#34;; &#xA;   opt.WatchPagePassword = &#34;Qwerty@123&#34;; &#xA;   ...&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Log Messages/Events&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;WatchLogger.Log(&#34;...Test Log...&#34;);&#xA;WatchLogger.LogWarning(JsonConvert.Serialize(model));&#xA;WatchLogger.LogError(res.Content, eventId: reference);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://github.com/IzyPro/WatchDog/raw/main/in-code.png&#34; alt=&#34;In-code log messages&#34;&gt;&lt;/h1&gt; &#xA;&lt;h4&gt;Sink Logs from ILogger&lt;/h4&gt; &#xA;&lt;p&gt;You can also sink logs from the .NET ILogger into WatchDog&lt;/p&gt; &#xA;&lt;p&gt;For .NET 6 and above&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;builder.Logging.AddWatchDogLogger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For .NET Core 3.1, configure logging and add &lt;code&gt;.AddWatchDogLogger()&lt;/code&gt; to the &lt;code&gt;CreateHostBuilder&lt;/code&gt; method of the &lt;code&gt;Program.cs&lt;/code&gt; class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host.CreateDefaultBuilder(args)&#xA; .ConfigureLogging( logging =&amp;gt;&#xA; {&#xA;     logging.AddWatchDogLogger();&#xA; })&#xA; .ConfigureWebHostDefaults(webBuilder =&amp;gt;&#xA; {&#xA;     webBuilder.UseStartup&amp;lt;Startup&amp;gt;();&#xA; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View Logs and Exception&lt;/h3&gt; &#xA;&lt;p&gt;Start your server and head to &lt;code&gt;/watchdog&lt;/code&gt; to view the logs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Example: &lt;a href=&#34;https://myserver.com/watchdog&#34;&gt;https://myserver.com/watchdog&lt;/a&gt; or &lt;a href=&#34;https://localhost:%5Byour-port%5D/watchdog&#34;&gt;https://localhost:[your-port]/watchdog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Still confused? Check out the implementation in the &lt;a href=&#34;https://github.com/IzyPro/WatchDog/tree/main/WatchDogCompleteTestAPI&#34;&gt;WatchDogCompleteTestAPI&lt;/a&gt; folder or the .NET 6 implementation in the &lt;a href=&#34;https://github.com/IzyPro/WatchDog/tree/main/WatchDogCompleteApiNet6&#34;&gt;WatchDogCompleteApiNet6&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Feel like something is missing? Fork the repo and send a PR.&lt;/p&gt; &#xA;&lt;p&gt;Encountered a bug? Fork the repo and send a PR.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, open an issue and we&#39;ll get to it as soon as we can.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Kelechi Onyekwere - &lt;a href=&#34;https://github.com/Khelechy&#34;&gt;Github&lt;/a&gt; &lt;a href=&#34;https://twitter.com/khelechy1337&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Israel Ulelu - &lt;a href=&#34;https://github.com/IzyPro&#34;&gt;Github&lt;/a&gt; &lt;a href=&#34;https://twitter.com/IzyPro_&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;### [Official Documentation](https://watchdog-3.gitbook.io/watchdog)&#xA;--&gt;</summary>
  </entry>
</feed>