<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-01T01:30:36Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>oculus-samples/Unity-PassthroughCameraApiSamples</title>
    <updated>2025-06-01T01:30:36Z</updated>
    <id>tag:github.com,2025-06-01:/oculus-samples/Unity-PassthroughCameraApiSamples</id>
    <link href="https://github.com/oculus-samples/Unity-PassthroughCameraApiSamples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Sample Project for Passthrough Camera API in Unity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity-PassthroughCameraAPISamples&lt;/h1&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#project-overview&#34;&gt;Project Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#current-limitations--known-issues&#34;&gt;Current Limitations &amp;amp; Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#download-the-project&#34;&gt;Download the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#project-content&#34;&gt;Project Content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#how-to-use-the-passthrough-camera-api&#34;&gt;How to use the Passthrough Camera API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#best-practices&#34;&gt;Best Practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#unity-sentis-for-on-device-mlcv-models&#34;&gt;Unity Sentis for On-Device ML/CV Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Project Overview&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Unity-PassthroughCameraAPISamples&lt;/strong&gt; project helps Unity developers access Quest Camera data via the standard &lt;a href=&#34;https://docs.unity3d.com/6000.0/Documentation/ScriptReference/WebCamTexture.html&#34;&gt;&lt;code&gt;WebCamTexture&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://developer.android.com/media/camera/camera2&#34;&gt;&lt;code&gt;Android Camera2 API&lt;/code&gt;&lt;/a&gt;. It provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Two helper classes:&lt;/strong&gt; &lt;code&gt;WebCamTextureManager&lt;/code&gt; for handling permissions and initialization, and &lt;code&gt;PassthroughCameraUtils&lt;/code&gt; for retrieving camera metadata and converting 2D to 3D coordinates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Five sample implementations:&lt;/strong&gt; including basic camera feed, brightness estimation, object detection with Unity Sentis, and shader-based effects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;CameraToWorld&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BrightnessEstimation&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MultiObjectDectection&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ShaderSample&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Media/CameraToWorld.gif&#34; alt=&#34;GIF 1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Media/BrightnessEstimation.gif&#34; alt=&#34;GIF 2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Media/ObjectDetectionSentis.gif&#34; alt=&#34;GIF 3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Media/ShaderSample.gif&#34; alt=&#34;GIF 4&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For detailed project information, visit the &lt;a href=&#34;https://developers.meta.com/horizon/documentation/unity/unity-pca-overview&#34;&gt;Meta Developers Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Software&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unity:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tested with Unity &lt;strong&gt;&lt;code&gt;2022.3.58f1&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;6000.0.38f1&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Older minor versions may work but are not fully validated.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Packages / Dependencies:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://assetstore.unity.com/packages/tools/integration/meta-mr-utility-kit-272450?srsltid=AfmBOorj1QQDtt7_6vcIWgu0Tw2Q8YLTQB3hRN5QHORRmjaj8sUEmrkv&#34;&gt;&lt;strong&gt;&lt;code&gt;Meta MRUK&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (com.meta.xr.mrutilitykit, v74.0.0 or higher)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://unity.com/sentis&#34;&gt;&lt;strong&gt;&lt;code&gt;Unity Sentis&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; (com.unity.sentis, v2.1.1)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] When updating the project to &lt;strong&gt;&lt;code&gt;Unity 6&lt;/code&gt;&lt;/strong&gt;, the Android Manifest will need to be updated. Find more information in our &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#troubleshooting--known-issues&#34;&gt;Troubleshooting guide&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Meta Quest Devices:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Quest 3 / Quest 3S&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Must be running &lt;strong&gt;&lt;code&gt;Horizon OS v74&lt;/code&gt;&lt;/strong&gt; or higher&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Permissions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Android Permissions:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;android.permission.CAMERA&lt;/code&gt; - Required by &lt;code&gt;WebCamTexture&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;horizonos.permission.HEADSET_CAMERA&lt;/code&gt; - Custom Meta permission for passthrough camera access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Passthrough feature:&lt;/strong&gt; must be &lt;strong&gt;enabled&lt;/strong&gt; to access the Passthrough Camera API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current Limitations &amp;amp; Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single Camera Access:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Only one passthrough camera (left or right) can be accessed at a time. Switching between cameras requires disabling and re-enabling the camera manager component. This is a Unity &lt;code&gt;WebCamTexture&lt;/code&gt; limitation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebCamTexture Constraints:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unityâ€™s &lt;code&gt;WebCamTexture&lt;/code&gt; implementation does not support image timestamps, leading to slight misalignments (approximately 40-60ms delay) between the captured feed and real-world events.&lt;/li&gt; &#xA;   &lt;li&gt;The maximum supported resolution is 1280x960, with a rectangular capture area that may result in visual cropping.&lt;/li&gt; &#xA;   &lt;li&gt;v74 currently needs to one frame delay before &lt;code&gt;WebCamTexture.Play()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Permission Handling:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The API currently handles one permission request at a time. Using other permission management systems concurrently (e.g., OVRManager or OVRPermissionsRequester) might cause conflicts.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model Limitations (MultiObjectDetection Sample):&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The integrated object detection model, optimized for Quest 3/3S, may not achieve 100% accuracy. Certain objects can be misclassified (e.g., cell phones might be recognized as remote) and grouped under broad classes.&lt;/li&gt; &#xA;   &lt;li&gt;The model is trained on 80 classes, meaning that individual objects within the same class may not be distinctly recognized.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Considerations:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Processing high-resolution camera feeds and running on-device ML/CV models can impact performance, particularly on the main thread. Optimizations such as asynchronous data handling or layer-by-layer inference are recommended.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download the project&lt;/h2&gt; &#xA;&lt;p&gt;First, ensure you have Git LFS installed by running this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git lfs install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, clone this repo using the &#34;Code&#34; button above, or this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/oculus-samples/Unity-PassthroughCameraApiSamples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Content&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Unity-PassthroughCameraApiSamples&lt;/code&gt; Unity project contains &lt;strong&gt;five samples&lt;/strong&gt; that demonstrate how to use &lt;code&gt;WebCamTexture&lt;/code&gt; class to access the camera data. All sample code and resources are located inside the &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/&#34;&gt;&lt;strong&gt;&lt;code&gt;PassthroughCameraApiSamples&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; folder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/CameraViewer&#34;&gt;&lt;code&gt;CameraViewer&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Shows a 2D canvas with the camera data inside.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/CameraToWorld&#34;&gt;&lt;code&gt;CameraToWorld&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Demonstrates how to align the pose of the RGB camera images with Passthrough, and how a 2D image coordinates can be transformed into 3D rays in world space.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/BrightnessEstimation&#34;&gt;&lt;code&gt;BrightnessEstimation&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Illustrates brightness estimation and how it can be used to adapt the experience to the userâ€™s environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/MultiObjectDetection&#34;&gt;&lt;code&gt;MultiObjectDetection&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Shows how to feed camera data to Unity Sentis to recognize real-world objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/ShaderSample&#34;&gt;&lt;code&gt;ShaderSample&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Demonstrates how to apply custom effects to camera texture on GPU.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a C# classes to access the Quest Camera data using &lt;code&gt;WebCamTexture&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/PassthroughCamera&#34;&gt;&lt;code&gt;PassthroughCamera&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: Contains all the c# classes and prefabs to use &lt;code&gt;WebCamTexture&lt;/code&gt; object, manage permissions and access some camera metadata.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/StartScene&#34;&gt;&lt;code&gt;StartScene&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: The scene containing the menu to switch between the above-mentioned samples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use the Passthrough Camera API&lt;/h1&gt; &#xA;&lt;h2&gt;Configuring A Unity Project To Use PCA&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the GitHub project or download a zip archive as described &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#download-the-project&#34;&gt;above&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the project with &lt;strong&gt;&lt;code&gt;Unity 2022.3.58f1&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;Unity 6000.0.38f1&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Meta &amp;gt; Tools &amp;gt; Project Setup Tool&lt;/code&gt; and fix any issues that it finds in the configuration of your project.&lt;/li&gt; &#xA; &lt;li&gt;Create a new empty scene.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Meta &amp;gt; Tools &amp;gt; Building Blocks&lt;/code&gt; to add &lt;strong&gt;Camera Rig&lt;/strong&gt; building blocks to your scene.&lt;/li&gt; &#xA; &lt;li&gt;To integrate Passthrough Camera API in your scene, &lt;strong&gt;drag and drop&lt;/strong&gt; the &lt;strong&gt;&lt;code&gt;WebCamTextureManagerPrefab&lt;/code&gt;&lt;/strong&gt; prefab to your scene.&lt;/li&gt; &#xA; &lt;li&gt;To access the camera texture from a custom C# script, get a reference to the &lt;code&gt;WebCamTextureManager&lt;/code&gt; and access its &lt;strong&gt;&lt;code&gt;WebCamTexture&lt;/code&gt;&lt;/strong&gt; property. The property will return a valid non-null value only after all permissions have been granted and texture is initialized, so check it is not null before accessing properties of the returned &lt;code&gt;WebCamTexture&lt;/code&gt;. E.g., in the &lt;code&gt;CameraViewer&lt;/code&gt; example, we assign the &lt;code&gt;WebCamTexture&lt;/code&gt; to the &lt;code&gt;RawImage.texture&lt;/code&gt; to display the texture with the Unity UI system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Depending on the selected PassthroughCameraEye.eye, the &lt;code&gt;WebCamTextureManager&lt;/code&gt; will select a corresponding &lt;a href=&#34;https://docs.unity3d.com/ScriptReference/WebCamDevice.html&#34;&gt;&lt;code&gt;WebCamDevice&lt;/code&gt;&lt;/a&gt; by mapping &lt;a href=&#34;https://docs.unity3d.com/ScriptReference/WebCamTexture-devices.html&#34;&gt;&lt;code&gt;WebCamTexture.devices&lt;/code&gt;&lt;/a&gt; to CameraManager.getCameraIdList() by index.&lt;/p&gt; &#xA;&lt;p&gt;Each camera supports resolutions of &lt;code&gt;320 x 240&lt;/code&gt;, &lt;code&gt;640 x 480&lt;/code&gt;, &lt;code&gt;800 x 600&lt;/code&gt; and &lt;code&gt;1280 x 960&lt;/code&gt;. Thes can also be accessed via the &lt;code&gt;PassthroughCameraUtils.GetOutputSizes()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you don&#39;t assign any resolution on the &lt;code&gt;WebCamTextureManagerPrefab&lt;/code&gt; the system will default to the highest available resolution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;WebCamTextureManager&lt;/code&gt;&lt;/strong&gt; script is responsible for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initializing the &lt;code&gt;WebCamTexture&lt;/code&gt; object&lt;/strong&gt; to access the camera data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stopping and disposing of the &lt;code&gt;WebCamTexture&lt;/code&gt; object&lt;/strong&gt; when the scene is unloaded or the application is closed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, this prefab contains the PassthroughCameraPermissions C# class responsible for requesting necessary permissions: &lt;code&gt;android.permission.CAMERA&lt;/code&gt; and &lt;code&gt;horizonos.permission.HEADSET_CAMERA&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] this class uses &lt;a href=&#34;https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Android.Permission.html&#34;&gt;&lt;code&gt;UnityEngine.Android.Permission&lt;/code&gt;&lt;/a&gt; class which can only handle one permission request at a time. This script should not be used with any other scripts that manage permissions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Converting 2D Image Coordinates to 3D World Space&lt;/h2&gt; &#xA;&lt;p&gt;When working with the Passthrough Camera API, a common challenge is converting detected 2D image coordinates into accurate 3D world positions. For instance, if your app recognizes a can of soda, you might want to render a virtual augment directly over it. Achieving this requires determining the object&#39;s position and orientation in the 3D world.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;PassthroughCameraUtils&lt;/strong&gt; class provides several methods to assist with this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;List&amp;lt;Vector2Int&amp;gt; GetOutputSizes(PassthroughCameraEye cameraEye)&lt;/code&gt;&lt;/strong&gt; Retrieves a list of all supported resolutions for the specified camera eye.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;PassthroughCameraIntrinsics GetCameraIntrinsics(PassthroughCameraEye cameraEye)&lt;/code&gt;&lt;/strong&gt; Returns the cameraâ€™s intrinsic parameters, including focal length, principal point, resolution, and skew.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Pose GetCameraPoseInWorld(PassthroughCameraEye cameraEye)&lt;/code&gt;&lt;/strong&gt; Provides the most recent world pose of the passthrough camera.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;ScreenPointToRayInWorld(PassthroughCameraEye cameraEye, Vector2Int screenPoint)&lt;/code&gt;&lt;/strong&gt; Converts a 2D screen coordinate into a 3D ray in world space, starting from the camera&#39;s origin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Typically, you would use &lt;strong&gt;&lt;code&gt;ScreenPointToRayInWorld()&lt;/code&gt;&lt;/strong&gt; by passing the screen coordinate (e.g., the center of a detected object) to obtain a corresponding 3D ray.&lt;/p&gt; &#xA;&lt;p&gt;However, knowing the ray alone isn&#39;t enough to pinpoint an exact position. To accurately locate an object, you can combine the ray with a raycasting technique. The &lt;a href=&#34;https://developers.meta.com/horizon/documentation/unity/unity-mr-utility-kit-features#environmentraycastmanager&#34;&gt;&lt;strong&gt;&lt;code&gt;EnvironmentRaycastManager&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; from the &lt;strong&gt;&lt;a href=&#34;https://developers.meta.com/horizon/documentation/unity/unity-mr-utility-kit-overview&#34;&gt;&lt;code&gt;MR Utility Kit&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; provides the &lt;a href=&#34;https://developers.meta.com/horizon/reference/mruk/v72/class_meta_x_r_environment_raycast_manager&#34;&gt;&lt;code&gt;Raycast()&lt;/code&gt;&lt;/a&gt; method. This method uses real-time depth data to determine the intersection point between the ray and the physical environment.&lt;/p&gt; &#xA;&lt;p&gt;Below is a code snippet demonstrating this process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cameraScreenPoint = new Vector2Int(x, y);&#xA;var ray = PassthroughCameraUtils.ScreenPointToRayInWorld(PassthroughCameraEye.Left, cameraScreenPoint);&#xA;&#xA;if (environmentRaycastManager.Raycast(ray, out EnvironmentRaycastHit hitInfo))&#xA;{&#xA;    // Place a GameObject at the hit point (position) and rotation (normal)&#xA;    anchorGo.transform.SetPositionAndRotation(&#xA;        hitInfo.point,&#xA;        Quaternion.LookRotation(hitInfo.normal, Vector3.up));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about the capabilities of &lt;strong&gt;&lt;code&gt;PassthroughCameraUtils&lt;/code&gt;&lt;/strong&gt; class, refer to the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/CameraToWorld&#34;&gt;&lt;code&gt;CameraToWorld&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; sample.&lt;/p&gt; &#xA;&lt;h2&gt;Best Practices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Centralize Permission Handling:&lt;/strong&gt; Ensure that all Android permission requests are managed from a single location. The samples use the &lt;strong&gt;PassthroughCameraPermissions&lt;/strong&gt; script for this purpose. When integrating Camera Passthrough into an existing project, double-check that no other permission mechanisms (e.g., &lt;code&gt;OVRPermissionsRequester&lt;/code&gt; or &lt;code&gt;OVRManager / Permission Requests On Startup&lt;/code&gt;) are in use to avoid conflicts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accessing Camera Metadata:&lt;/strong&gt; The Unity &lt;code&gt;WebCamTexture&lt;/code&gt; class does not expose all camera metadata properties. For more advanced access, consider: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Using Unityâ€™s built-in tools to communicate directly with Android APIs (&lt;a href=&#34;https://docs.unity3d.com/6000.0/Documentation/Manual/android-plugins-java-code-from-c-sharp.html&#34;&gt;&lt;code&gt;Android Plugins&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Developing a native plugin that leverages the Camera2 API via the &lt;a href=&#34;https://developer.android.com/ndk&#34;&gt;&lt;code&gt;NDK&lt;/code&gt;&lt;/a&gt;. Refer to our native sample for practical examples.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Performance Optimization:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Asynchronous Operations:&lt;/strong&gt; Process camera data and handle permission requests asynchronously to avoid blocking the main thread.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Resource Management:&lt;/strong&gt; Ensure that resources such as the &lt;code&gt;WebCamTexture&lt;/code&gt; are properly stopped and disposed of when no longer needed (e.g., in the &lt;code&gt;OnDisable()&lt;/code&gt; method).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling and Logging:&lt;/strong&gt; Implement robust error handling for scenarios like permission denials and camera initialization failures. Utilize descriptive log messages to facilitate troubleshooting during development and in production.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistent API Usage:&lt;/strong&gt; Leverage the provided helper classes (&lt;code&gt;WebCamTextureManager&lt;/code&gt; and &lt;code&gt;PassthroughCameraUtils&lt;/code&gt;) to ensure a consistent and reliable approach when accessing and processing camera data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing on Target Devices:&lt;/strong&gt; Since performance and behavior may vary, thoroughly test your implementation on the target Quest hardware (Quest 3/3S running Horizon OS v74 or later) to ensure optimal performance and compatibility. Meta XR Simulator and Meta Link app are currently not supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting &amp;amp; Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Upgrading to Unity 6:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;When updating the project to &lt;strong&gt;&lt;code&gt;Unity 6&lt;/code&gt;&lt;/strong&gt;, the Android Manifest will need to be updated. This can be done either manually or by using one of two Meta tools, &lt;strong&gt;Meta&lt;/strong&gt; &amp;gt; &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Update AndroidManiest.xml&lt;/strong&gt; or &lt;strong&gt;Meta&lt;/strong&gt; &amp;gt; &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create store-compatible AndroidManiest.xml&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Android Manifest &lt;em&gt;android:name=&#34;com.unity3d.player.UnityPlayerActivity&#34;&lt;/em&gt; must be changed to &lt;em&gt;android:name=&#34;com.unity3d.player.UnityPlayer&lt;strong&gt;Game&lt;/strong&gt;Activity&#34;&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Open XR:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When using &lt;strong&gt;&lt;code&gt;Open XR&lt;/code&gt;&lt;/strong&gt; plugin, the &lt;strong&gt;Environment Depth&lt;/strong&gt; feature will be ONLY supported under &lt;strong&gt;&lt;code&gt;Unity 6&lt;/code&gt;&lt;/strong&gt;. Please read the &lt;a href=&#34;https://developers.meta.com/horizon/documentation/unity/unity-depthapi-overview/&#34;&gt;Depth API documentation&lt;/a&gt; for more information.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;MultiObject Detection&lt;/strong&gt; sample built using Unity 2022 will not place the markers correctly, because of this limitation with Open XR and &lt;strong&gt;Environment Depth&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Android Manifest will need the &lt;em&gt;android:theme=&#34;@style/Theme.AppCompat.DayNight.NoActionBar&#34;&lt;/em&gt; attribute added to the activity tag.&lt;/li&gt; &#xA;   &lt;li&gt;We recommend to install (com.unity.xr.meta-openxr@2.1.0 or latest) and select all &lt;strong&gt;Meta SDK features&lt;/strong&gt; in the &lt;strong&gt;&lt;code&gt;Project Settings&lt;/code&gt;&lt;/strong&gt; &amp;gt; &lt;strong&gt;&lt;code&gt;XR Plug-in Management&lt;/code&gt;&lt;/strong&gt; &amp;gt; &lt;strong&gt;&lt;code&gt;Open XR&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The &lt;code&gt;horizonos.permission.HEADSET_CAMERA&lt;/code&gt; permission has to be added back into the Manifest manually after updating.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;App cannot be accessed after denying all permissions:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, if users click on &lt;strong&gt;Don&#39;t Allow&lt;/strong&gt; for all permissions, they are unable to access the app even after changing Settings in the device.&lt;/li&gt; &#xA;   &lt;li&gt;The only solution right now is to uninstall and re-install the app.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check Log Output:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Inspect the Unity Console and device logs for descriptive error messages.&lt;/li&gt; &#xA;   &lt;li&gt;Both the sample and the Camera2 implementation provide detailed logging to help narrow down issues.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Verify Permissions:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure that both &lt;code&gt;android.permission.CAMERA&lt;/code&gt; and &lt;code&gt;horizonos.permission.HEADSET_CAMERA&lt;/code&gt; are granted.&lt;/li&gt; &#xA;   &lt;li&gt;Missing permissions can prevent the camera feed from initializing properly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Handling Permission Request Failures:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If permissions are not granted on the first attempt, note that the current implementation does not support re-requesting them.&lt;/li&gt; &#xA;   &lt;li&gt;In such cases, uninstall the app and perform a new build from Unity.&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively, it is also possible to grant permissions via ADB. Replace &lt;code&gt;{PACKAGE.NAME}&lt;/code&gt; with the name of your project, e.g. &lt;code&gt;com.john.cameraSamples&lt;/code&gt;. You can find your package name in the &lt;code&gt;Player Settings&lt;/code&gt; under &lt;code&gt;Identification &amp;gt; Override Default Package Name &amp;gt; Package Name&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;adb shell pm grant {PACKAGE.NAME} com.horizonos.permission.HEADSET_CAMERA&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration and Setup:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure that your project configuration is correct by resolving any issues flagged by the Meta/Tools Project Setup Tool.&lt;/li&gt; &#xA;   &lt;li&gt;Confirm that you are using a supported Unity version (e.g., &lt;code&gt;Unity 2022.3.58f1&lt;/code&gt; or &lt;code&gt;Unity 6000.0.38f1&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Device Compatibility:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Verify that you are testing on supported hardware (&lt;code&gt;Quest 3/3S&lt;/code&gt; running &lt;code&gt;Horizon OS v74&lt;/code&gt; or higher).&lt;/li&gt; &#xA;   &lt;li&gt;Check that your device meets the necessary hardware requirements for passthrough camera access.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following these steps should help you diagnose and resolve common issues when working with the &lt;code&gt;Passthrough Camera API&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Unity Sentis for On-Device ML/CV Models&lt;/h1&gt; &#xA;&lt;p&gt;Unity Sentis offers a framework to load models from popular open-source platforms and compile them directly on-device. This sample demonstrates how to use Sentis with a YOLO model for real-time object detection on Quest 3 devices. For more details, visit &lt;a href=&#34;https://unity.com/products/sentis&#34;&gt;&lt;code&gt;Unity Sentis&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Horizon OS:&lt;/strong&gt; v74 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Devices:&lt;/strong&gt; Quest 3 / 3S&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; Grant Camera and Spatial Data permissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unity:&lt;/strong&gt; 2022.3.58f1 with Sentis package 2.1.1 (com.unity.sentis)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MR Utility Kit (MRUK):&lt;/strong&gt; v74.0.0 or higher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model Accuracy:&lt;/strong&gt; The model is optimized for Quest 3 performance; accuracy may not reach 100%.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Granularity:&lt;/strong&gt; The model is trained on 80 classes, meaning similar objects (e.g., Monitor and TV) are grouped together (e.g., TV_Monitor).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Object Recognition Challenges:&lt;/strong&gt; Some classes (e.g., cell phones) may often be misidentified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Device Recognition:&lt;/strong&gt; New devices like Quest 3 controllers might not be recognized correctly or may appear as remote controllers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building the Sample&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/#download-the-project&#34;&gt;&lt;code&gt;Unity-PassthroughCameraApiSamples&lt;/code&gt;&lt;/a&gt; repository.&lt;/li&gt; &#xA; &lt;li&gt;Open the project in the Unity Editor.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;strong&gt;Build Profiles&lt;/strong&gt;, set the Active Platform to &lt;strong&gt;Android&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the sample scene &lt;code&gt;MultiObjectDectection.unity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;Meta &amp;gt; Tools &amp;gt; Project Setup Tool&lt;/code&gt;, if prompted with &#34;MR Utility Kit recommends Scene Support to be set to Required&#34;, select &#34;...&#34;, ignore it, then fix and apply any other issues.&lt;/li&gt; &#xA; &lt;li&gt;Build the app and test it on your headset.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using the Sample&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Demonstrates how to detect multiple objects using Sentis with a pretrained YOLO model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Controls (using Quest 3 controllers):&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Menus (Start/Pause):&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Button A:&lt;/strong&gt; Start playing&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;In-Game:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Button A:&lt;/strong&gt; Place a marker at each detected objectâ€™s world position&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Global:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Button MENU:&lt;/strong&gt; Return to Samples selection&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How to Play:&lt;/strong&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Start the application and look around.&lt;/li&gt; &#xA;   &lt;li&gt;When an object is detected, 2D floating boxes appear around it.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;strong&gt;Button A&lt;/strong&gt; to place a 3D marker with the objectâ€™s class name.&lt;/li&gt; &#xA;   &lt;li&gt;The model identifies 80 classes â€“ refer to &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/MultiObjectDetection/SentisInference/Model/SentisYoloClasses.txt&#34;&gt;&lt;code&gt;Sentis YOLO classes&lt;/code&gt;&lt;/a&gt; for details.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can modify this sample to load an ML/CV model of your choice. Models vary widely in complexity, so select one that meets your performance needs. Unity also offers samples for other tasks, such as digit recognition.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Recommendations for Using Sentis on Meta Quest Devices&lt;/h2&gt; &#xA;&lt;h3&gt;Model Architecture&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keep it Simple:&lt;/strong&gt; Use models with less complex architectures. Large generative models and LLMs perform poorly on Quest devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Main Thread Processing:&lt;/strong&gt; Sentis runs on the main thread, affecting render pipeline performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Implement a layer-by-layer inference technique (splitting inference across frames) to avoid blocking the main thread.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Model Size&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource Considerations:&lt;/strong&gt; Large models can lead to long load times, main thread lag during the first inference, and reduced memory for other resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recommendations:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use the smallest version of your model (e.g., the 8MB version of YOLO instead of the 146MB version).&lt;/li&gt; &#xA;   &lt;li&gt;Convert and quantize the model to Sentis format (e.g., to Uint8) to reduce loading times.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GPU vs. CPU Processing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Graphics-Related Tasks:&lt;/strong&gt; If the model is used for graphics (e.g., image processing directly for shaders), keep processing on the GPU. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use the &lt;strong&gt;GPUCompute backend&lt;/strong&gt; for Sentis and feed camera data directly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPU Processing:&lt;/strong&gt; If you need to access output data on the CPU: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run the model on the GPU and transfer results asynchronously, or&lt;/li&gt; &#xA;   &lt;li&gt;Run the model directly on the CPU.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;General Tip:&lt;/strong&gt; Always retrieve output data asynchronously to avoid main thread blocking. See &lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.sentis@2.1/manual/read-output-async.html&#34;&gt;&lt;code&gt;Sentis Async Output&lt;/code&gt;&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NPU Backend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Current Status:&lt;/strong&gt; Sentis does not currently leverage any NPU or hardware acceleration. It operates as a regular Android platform application on Quest devices, so factor this into model selection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Report an issue&lt;/h3&gt; &#xA;&lt;p&gt;If you encounter any issues, please report them with the following details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unity Engine version&lt;/strong&gt; used in your project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;XR plugin&lt;/strong&gt; used in your project (Oculus XR or Open XR) and the version number.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quest device&lt;/strong&gt; model and &lt;strong&gt;Horizon OS version&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Attach in your report any useful &lt;strong&gt;logcat logs&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use &lt;code&gt;adb logcat &amp;gt;&amp;gt; log.txt&lt;/code&gt; to save the logs to a file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Attach any &lt;strong&gt;video or screenshot&lt;/strong&gt; of the issue.&lt;/li&gt; &#xA; &lt;li&gt;Any &lt;strong&gt;relevant information&lt;/strong&gt; about your specific use case, e.g. other sdk or plugins used in your project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/LICENSE.txt&#34;&gt;&lt;code&gt;Oculus License&lt;/code&gt;&lt;/a&gt; applies to the SDK and supporting material. The &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/LICENSE.txt&#34;&gt;&lt;code&gt;MIT License&lt;/code&gt;&lt;/a&gt; applies to only certain, clearly marked documents. If an individual file does not indicate which license it is subject to, then the Oculus License applies.&lt;/p&gt; &#xA;&lt;p&gt;However,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Files from &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/Assets/PassthroughCameraApiSamples/MultiObjectDetection/SentisInference/Model&#34;&gt;&lt;code&gt;Assets/PassthroughCameraApiSamples/MultiObjectDetection/SentisInference/Model&lt;/code&gt;&lt;/a&gt; are licensed under &lt;a href=&#34;https://github.com/MultimediaTechLab/YOLO/raw/main/LICENSE&#34;&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/oculus-samples/Unity-PassthroughCameraApiSamples/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING&lt;/code&gt;&lt;/a&gt; file for how to help out.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huynhsontung/Screenbox</title>
    <updated>2025-06-01T01:30:36Z</updated>
    <id>tag:github.com,2025-06-01:/huynhsontung/Screenbox</id>
    <link href="https://github.com/huynhsontung/Screenbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LibVLC-based media player for the Universal Windows Platform&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;128&#34; align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/huynhsontung/Screenbox/main/Screenbox/Assets/StoreLogo.scale-400.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Screenbox &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The modern media player for Windows &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://apps.microsoft.com/detail/9NTSNMSVCB5L?cid=storebadge&amp;amp;mode=mini&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://get.microsoft.com/images/en-us%20light.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://get.microsoft.com/images/en-us%20dark.svg&#34;&gt; &#xA;   &lt;img alt=&#34;Store link&#34; src=&#34;https://get.microsoft.com/images/en-us%20dark.svg?sanitize=true&#34; height=&#34;50px&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Screenbox is a modern video player that cares about performance and ease of use on a wide range of device types. It features a beautiful, friendly user interface that is fast and lightweight. Screenbox is available on Windows 10 version 1903 and up, Windows 11, and Xbox consoles.&lt;/p&gt; &#xA;&lt;p&gt;Screenbox is built on top of &lt;a href=&#34;https://github.com/videolan/libvlcsharp&#34;&gt;LibVLCSharp&lt;/a&gt; and the Universal Windows Platform (UWP).&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;/assets/images/docs/PC-HeroHomePage-Dark.png?raw=true&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;/assets/images/docs/PC-HeroHomePage-Light.png?raw=true&#34;&gt; &#xA; &lt;img alt=&#34;Screenshot of the Screenbox home page.&#34; src=&#34;https://raw.githubusercontent.com/huynhsontung/Screenbox/main/assets/images/docs/PC-HeroHomePage-Dark.png?raw=true&#34; width=&#34;1248&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huynhsontung/Screenbox/main/assets/images/docs/PC-HeroPlayerPageVideo_Dark.png&#34; alt=&#34;Screenshot of the Screenbox video player&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some notable features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fluent design user interface&lt;/li&gt; &#xA; &lt;li&gt;Gesture support for seeking and changing volume&lt;/li&gt; &#xA; &lt;li&gt;Window resize hotkeys (number row &lt;code&gt;1&lt;/code&gt;-&lt;code&gt;4&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;YouTube-inspired hotkey layout&lt;/li&gt; &#xA; &lt;li&gt;Picture-in-picture mode&lt;/li&gt; &#xA; &lt;li&gt;Save the video frame as an image&lt;/li&gt; &#xA; &lt;li&gt;Chromecast support&lt;/li&gt; &#xA; &lt;li&gt;Browse and play media over the network&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many more on the way!&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install Screenbox is through the &lt;a href=&#34;https://www.microsoft.com/store/apps/9NTSNMSVCB5L&#34;&gt;Microsoft Store&lt;/a&gt;. Installing through the store ensures the app stays up to date automatically. You don&#39;t need a Microsoft account to download apps from the store. The app can also be installed through winget using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;winget install screenbox -s winget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an issue if you want to report a bug, give feedback, or ask a question. PRs are very welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crowdin.com/project/screenbox&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/screenbox/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Help translate the app to your language on &lt;a href=&#34;https://crowdin.com/project/screenbox&#34;&gt;Crowdin&lt;/a&gt;! Crowdin offers an intuitive UX for you to get started and is the recommended tool for localization. Translations are automatically synced to GitHub and published in the next minor update.&lt;/p&gt; &#xA;&lt;p&gt;You can also translate the app locally without Crowdin. The project source language is English, United States. All localizable source files are in the &lt;code&gt;Screenbox\Strings\en-US&lt;/code&gt; directory. Localizable file types are &lt;code&gt;.resw&lt;/code&gt; and &lt;code&gt;.md&lt;/code&gt;. It is recommended that you use &lt;a href=&#34;https://github.com/dotnet/ResXResourceManager&#34;&gt;ResX Resource Manager&lt;/a&gt; for easier &lt;code&gt;.resw&lt;/code&gt; translation.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have your translations in the appropriate folder under the &lt;code&gt;Screenbox\Strings&lt;/code&gt; directory. We use a &lt;a href=&#34;https://www.venea.net/web/culture_code&#34;&gt;IETF language tag&lt;/a&gt; to name the folder that contains resources for that language (e.g. &lt;code&gt;fr-FR&lt;/code&gt; for French (France), &lt;code&gt;es-ES&lt;/code&gt; for Spanish (Spain)). Files in these folders are translated copies of the original resource files in &lt;code&gt;Screenbox\Strings\en-US&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A typical workflow for translating resources:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork and clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;Create a folder for your language under &lt;code&gt;Screenbox\Strings&lt;/code&gt; if there isn&#39;t one already.&lt;/li&gt; &#xA; &lt;li&gt;Copy over any missing files from the &lt;code&gt;en-US&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Translate the &lt;code&gt;.resw&lt;/code&gt; and &lt;code&gt;.md&lt;/code&gt; files in the directory.&lt;/li&gt; &#xA; &lt;li&gt;Once you&#39;re done, commit your changes, push to GitHub, and make a pull request.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>