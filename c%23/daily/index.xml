<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-12T01:30:54Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zcgonvh/DCOMPotato</title>
    <updated>2022-12-12T01:30:54Z</updated>
    <id>tag:github.com,2022-12-12:/zcgonvh/DCOMPotato</id>
    <link href="https://github.com/zcgonvh/DCOMPotato" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some Service DCOM Object and SeImpersonatePrivilege abuse.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exploit collection for some Service DCOM Object local privalege escalation vulnerability(by SeImpersonatePrivilege abuse)&lt;/h1&gt; &#xA;&lt;h2&gt;writeup&lt;/h2&gt; &#xA;&lt;p&gt;DCOM use &lt;code&gt;RPC_C_IMP_LEVEL_IDENTIFY&lt;/code&gt; as default impersonation level, for the default out-bound &lt;code&gt;IUnknown&lt;/code&gt; call, see &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/com/com-security-defaults&#34;&gt;https://learn.microsoft.com/en-us/windows/win32/com/com-security-defaults&lt;/a&gt;. Of course, COM Server can override by call &lt;code&gt;CoInitializeSecurity&lt;/code&gt; explicitly.&lt;/p&gt; &#xA;&lt;p&gt;We known most windows service register their DCOM Server to provide features, &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/services/service-programs&#34;&gt;Shared Process Service&lt;/a&gt; was hosted by &lt;code&gt;svchost&lt;/code&gt;, read the default impersonation level from &lt;a href=&#34;https://www.geoffchappell.com/studies/windows/win32/services/svchost/process/index.htm&#34;&gt;registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If we pass a malicious &lt;code&gt;IUnknown&lt;/code&gt; object as parameter at some DCOM call, service process will call &lt;code&gt;IRemUnknown::RemQueryInterface/RemRelease/RemAddref&lt;/code&gt; on the ProxyObject, now we can got a &lt;code&gt;SecurityImpersonation&lt;/code&gt; token by &lt;code&gt;CoImpersonateClient&lt;/code&gt; because we are &lt;code&gt;DCOM Server&lt;/code&gt; at this time.&lt;/p&gt; &#xA;&lt;p&gt;Follow was the explicit setting &lt;code&gt;ImpersonationLevel&lt;/code&gt; as &lt;code&gt;RPC_C_IMP_LEVEL_IMPERSONATE&lt;/code&gt; in default installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;#after 12r2&#xA;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost\print@ImpersonationLevel&#xA;&#xA;#2022 only&#xA;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost\McpManagementServiceGroup@ImpersonationLevel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The services are &lt;code&gt;PrinterNotify&lt;/code&gt; and &lt;code&gt;McpManagementService&lt;/code&gt;, running as &lt;code&gt;SYSTEM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;build&lt;/h2&gt; &#xA;&lt;p&gt;Note this code was supports x64 and NetFX 4.x only, but you can do a little change for FX2.0/x86 compatibility(IUnknown vtbl hook, see &lt;code&gt;McpManagementPotato&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;csc /unsafe PrinterNotifyPotato.cs&#xA;csc /unsafe McpManagementPotato.cs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;McpManagementPotato/PrinterNotifyPotato &amp;lt;command&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zcgonvh/DCOMPotato/master/images/McpManagementPotato.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zcgonvh/DCOMPotato/master/images/PrinterNotifyPotato.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks for &lt;a href=&#34;https://github.com/codewhitesec/UnmarshalPwn&#34;&gt;UnmarshalPwn&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;(and love my cat, Vanilla, can someone make it nekogirl?)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DeJhon-Huang/FernNPR</title>
    <updated>2022-12-12T01:30:54Z</updated>
    <id>tag:github.com,2022-12-12:/DeJhon-Huang/FernNPR</id>
    <link href="https://github.com/DeJhon-Huang/FernNPR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NPR rendering Library in Unity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FernNPR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DeJhon-Huang/FernNPR/raw/master/README_CN.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/DeJhon-Huang/FernNPR/raw/master/README.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FernNPR is a NPR rendering library in Unity(UE in the future), not just cartoon rendering, It will include as many non-realistic rendering techniques as possible.&lt;/p&gt; &#xA;&lt;p&gt;It will be an easily scalable, multi-platform (PC/Mobile) rendering library.&lt;/p&gt; &#xA;&lt;h2&gt;Render Example&lt;/h2&gt; &#xA;&lt;p&gt;There are some simple scenes.&lt;/p&gt; &#xA;&lt;h3&gt;NPR Character&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/11-22.jpg&#34; alt=&#34;&#34;&gt; Model From: &lt;a href=&#34;https://www.aplaybox.com/details/model/S5d7KiigvyIb&#34;&gt;模之屋&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Background From: &lt;a href=&#34;https://gamevision.artstation.com/projects/ZGZxYG&#34;&gt;GameVision Studios&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Material Example&lt;/h3&gt; &#xA;&lt;p&gt;FernNPR can easy get various styles of materials, including NPR and PBR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/MaterialBall.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/MaterialBall_AdditonalLight.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Aniso Hair&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/aniso-hair.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Angle Ring Specular&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/compression/angleringspecular.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Toon Eye Shader&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/compression/eyeexample.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Face Shading&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SDF Face&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/compression/SDFFace.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Depth Shadow&lt;/h3&gt; &#xA;&lt;p&gt;Use trick of depth to get Clear shadow&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/DepthShadow.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hair Shadow Example&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/compression/DepthShadow-min.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Depth Offset Rim&lt;/h3&gt; &#xA;&lt;p&gt;Depth Offset allows Rim Light&#39;s width to remain consistent in screen space.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DeJhon-Huang/FernNPR/master/DocAssets/DepthOffsetRim.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More&lt;/h3&gt; &#xA;&lt;p&gt;If you are interested in this project, welcome to contact me, thanks!&lt;/p&gt; &#xA;&lt;h4&gt;Next&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Skin&lt;/li&gt; &#xA; &lt;li&gt;Fabric&lt;/li&gt; &#xA; &lt;li&gt;Art Tool&lt;/li&gt; &#xA; &lt;li&gt;Post Processing&lt;/li&gt; &#xA; &lt;li&gt;Deferred Shading&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/JasonMa0012/LWGUI&#34;&gt;LWGUI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://vroid.com/en&#34;&gt;VRoid Studio&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SebLague/Digital-Logic-Sim</title>
    <updated>2022-12-12T01:30:54Z</updated>
    <id>tag:github.com,2022-12-12:/SebLague/Digital-Logic-Sim</id>
    <link href="https://github.com/SebLague/Digital-Logic-Sim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Digital-Logic-Sim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QZwneRb-zqA&#34;&gt;Watch video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SebLague/Images/master/ALU.png&#34; alt=&#34;Simulation Screenshot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>