<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-22T01:31:38Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Suprcode/mir-eternal</title>
    <updated>2022-09-22T01:31:38Z</updated>
    <id>tag:github.com,2022-09-22:/Suprcode/mir-eternal</id>
    <link href="https://github.com/Suprcode/mir-eternal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mir Eternal Files&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/accountserver-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/accountserver-build.yml/badge.svg?branch=main&#34; alt=&#34;AccountServer Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/gameserver-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/gameserver-build.yml/badge.svg?sanitize=true&#34; alt=&#34;GameServer Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/launcher-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/launcher-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Launcher Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help us to continue maintaining the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=SYTUMJ7742MRC&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Suprcode/mir-eternal/main/docs/paypal-donate-button.png&#34; alt=&#34;Donate with paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;If you have problems donating, try this other option&lt;/em&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://paypal.me/armifer&#34;&gt;http://paypal.me/armifer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;Originally, these sources were published on LOMCN in the following post: &lt;a href=&#34;https://www.lomcn.org/forum/threads/legend-of-mir-3d-emu-source-code.108580/&#34;&gt;https://www.lomcn.org/forum/threads/legend-of-mir-3d-emu-source-code.108580/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this repository, we have done a refactoring, translation and correction work from the mentioned source.&lt;/p&gt; &#xA;&lt;h2&gt;How to start&lt;/h2&gt; &#xA;&lt;h3&gt;Client &amp;amp; Launcher Configuration&lt;/h3&gt; &#xA;&lt;p&gt;First, a compatible client will need to be downloaded, for example: &lt;a href=&#34;https://cq.dorado.sdo.com/downloader/cqyh_10340_downloader.exe&#34;&gt;https://cq.dorado.sdo.com/downloader/cqyh_10340_downloader.exe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest version still compatible with this files &lt;strong&gt;[1.0.3.64]&lt;/strong&gt; at 25/08/22!&lt;/p&gt; &#xA;&lt;p&gt;Once downloaded, you will need to copy the compiled binaries of the launcher to the root of the folder.&lt;/p&gt; &#xA;&lt;p&gt;In launcher there is a configuration file called &#34;ServerCfg.txt&#34;. In this file we must put our WAN IP and the AccountServer port (by default 7000), eg:&lt;/p&gt; &#xA;&lt;p&gt;If it is locally: &lt;code&gt;127.0.0.1:7000&lt;/code&gt; If it is WAN: &lt;code&gt;&amp;lt;public_ip&amp;gt;:7000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Account Server Configuration&lt;/h3&gt; &#xA;&lt;p&gt;We will have to create a file in the root of the account server called &#34;server&#34; in which we will include a list of the GS that we will have raised, by default we will only have one, so we will have something like the following:&lt;/p&gt; &#xA;&lt;p&gt;If it is locally: &lt;code&gt;127.0.0.1,8701/&amp;lt;ServerName&amp;gt;&lt;/code&gt; If it is WAN: &lt;code&gt;&amp;lt;public_ip&amp;gt;,8701/&amp;lt;ServerName&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Game Server Configuration&lt;/h3&gt; &#xA;&lt;p&gt;We must copy a valid system database in the &#34;Database/System&#34; folder.&lt;/p&gt; &#xA;&lt;p&gt;It does not require changing the default config.&lt;/p&gt; &#xA;&lt;p&gt;To publish on the internet, you must open ports 7000 and 8701 on your router&lt;/p&gt; &#xA;&lt;h3&gt;Network Communication Diagram&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Suprcode/mir-eternal/main/docs/mir-network.png&#34; alt=&#34;Mir Network&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CraZyEriK&lt;/li&gt; &#xA; &lt;li&gt;Wincha&lt;/li&gt; &#xA; &lt;li&gt;Lilcooldoode&lt;/li&gt; &#xA; &lt;li&gt;Far&lt;/li&gt; &#xA; &lt;li&gt;Armifer (ElAmO)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>testcontainers/testcontainers-dotnet</title>
    <updated>2022-09-22T01:31:38Z</updated>
    <id>tag:github.com,2022-09-22:/testcontainers/testcontainers-dotnet</id>
    <link href="https://github.com/testcontainers/testcontainers-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üêã A library to support tests with throwaway instances of Docker containers for all compatible .NET Standard versions.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Testcontainers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Testcontainers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Testcontainers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Testcontainers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/testcontainers/testcontainers-dotnet/actions/workflows/cicd.yml&#34;&gt;&lt;img src=&#34;https://github.com/testcontainers/testcontainers-dotnet/actions/workflows/cicd.yml/badge.svg?branch=develop&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=testcontainers_testcontainers-dotnet&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=testcontainers_testcontainers-dotnet&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=testcontainers_testcontainers-dotnet&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=testcontainers_testcontainers-dotnet&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Testcontainers&lt;/h1&gt; &#xA;&lt;p&gt;Testcontainers is a library to support tests with throwaway instances of Docker containers for all compatible .NET Standard versions. The library is built on top of the .NET Docker remote API and provides a lightweight implementation to support your test environment in all circumstances.&lt;/p&gt; &#xA;&lt;p&gt;Choose from existing pre-configured configurations and start containers within a second, to support and run your tests. Or create your own containers with Dockerfiles and run your tests immediately afterward.&lt;/p&gt; &#xA;&lt;p&gt;Get in touch with the Testcontainers team and others, and join our &lt;a href=&#34;https://slack.testcontainers.org/&#34;&gt;Slack workspace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported operating systems&lt;/h2&gt; &#xA;&lt;p&gt;Testcontainers supports Windows, Linux, and macOS as host systems. Linux Docker containers are supported on all three operating systems.&lt;/p&gt; &#xA;&lt;p&gt;Native Windows Docker containers are only supported on Windows. Windows requires the host operating system version to match the container operating system version. You&#39;ll find further information about Windows container version compatibility &lt;a href=&#34;https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind to enable the correct Docker engine on Windows host systems to match the container operating system. With Docker Desktop you can switch the engine either with the tray icon context menu or: &lt;code&gt;$env:ProgramFiles\Docker\Docker\DockerCli.exe -SwitchDaemon&lt;/code&gt; or &lt;code&gt;-SwitchLinuxEngine&lt;/code&gt;, &lt;code&gt;-SwitchWindowsEngine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported commands&lt;/h2&gt; &#xA;&lt;p&gt;To configure a container, use the &lt;code&gt;TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;&lt;/code&gt; builder, that provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WithImage&lt;/code&gt; specifies an &lt;code&gt;IMAGE[:TAG]&lt;/code&gt; to derive the container from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithWorkingDirectory&lt;/code&gt; specifies and overrides the &lt;code&gt;WORKDIR&lt;/code&gt; for the instruction sets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithEntrypoint&lt;/code&gt; specifies and overrides the &lt;code&gt;ENTRYPOINT&lt;/code&gt; that will run as an executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithCommand&lt;/code&gt; specifies and overrides the &lt;code&gt;COMMAND&lt;/code&gt; instruction provided from the Dockerfile.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithName&lt;/code&gt; sets the container name e.g. &lt;code&gt;--name nginx&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithHostname&lt;/code&gt; sets the container hostname e.g. &lt;code&gt;--hostname my-nginx&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithEnvironment&lt;/code&gt; sets an environment variable in the container e.g. &lt;code&gt;-e, --env &#34;test=containers&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithLabel&lt;/code&gt; applies metadata to the container e.g. &lt;code&gt;-l, --label testcontainers=awesome&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithExposedPort&lt;/code&gt; exposes a port inside the container e.g. &lt;code&gt;--expose=80&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithPortBinding&lt;/code&gt; publishes the container port to the host e.g. &lt;code&gt;-p, --publish 80:80&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithBindMount&lt;/code&gt; binds a path of a file or directory into the container e.g. &lt;code&gt;-v, --volume .:/tmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithVolumeMount&lt;/code&gt; mounts a managed volume into the container e.g. &lt;code&gt;--mount type=volume,source=.,destination=/tmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithTmpfsMount&lt;/code&gt; mounts a temporary volume into the container e.g. &lt;code&gt;--mount type=tmpfs,destination=/tmp&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithNetwork&lt;/code&gt; assigns a network to the container e.g. &lt;code&gt;--network=&#34;bridge&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithNetworkAliases&lt;/code&gt; assigns a network-scoped aliases to the container e.g. &lt;code&gt;--network-alias alias&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithAutoRemove&lt;/code&gt; will remove the stopped container automatically like &lt;code&gt;--rm&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithCleanUp&lt;/code&gt; will remove the container automatically after all tests have been run (see &lt;a href=&#34;https://raw.githubusercontent.com/testcontainers/testcontainers-dotnet/develop/#resource-reaper&#34;&gt;Resource Reaper&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithPrivileged&lt;/code&gt; sets the &lt;code&gt;--privileged&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithDockerEndpoint&lt;/code&gt; sets the Docker API endpoint e.g. &lt;code&gt;-H tcp://0.0.0.0:2376&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithRegistryAuthentication&lt;/code&gt; basic authentication against a private Docker registry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithOutputConsumer&lt;/code&gt; redirects &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; to capture the container output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithWaitStrategy&lt;/code&gt; sets the wait strategy to complete the container start and indicates when it is ready.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithCreateContainerParametersModifier&lt;/code&gt; allows low level modifications of the Docker container create parameter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithStartupCallback&lt;/code&gt; sets the startup callback to invoke after the container start.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithResourceReaperSessionId&lt;/code&gt; assigns a Resource Reaper session id to the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the additional builder for image (&lt;code&gt;ImageFromDockerfileBuilder&lt;/code&gt;), network (&lt;code&gt;TestcontainersNetworkBuilder&lt;/code&gt;) and volume (&lt;code&gt;TestcontainersVolumeBuilder&lt;/code&gt;) to set up your individual test environment.&lt;/p&gt; &#xA;&lt;h2&gt;Resource Reaper&lt;/h2&gt; &#xA;&lt;p&gt;Testcontainers assigns each Docker resource a Resource Reaper session id. After the tests are finished, &lt;a href=&#34;https://github.com/testcontainers/moby-ryuk&#34;&gt;Ryuk&lt;/a&gt; will take care of remaining Docker resources and removes them. You can change the Resource Reaper session and group Docker resources together with &lt;code&gt;WithResourceReaperSessionId&lt;/code&gt;. Right now, only Linux containers are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Pre-configured containers&lt;/h2&gt; &#xA;&lt;p&gt;The pre-configured Testcontainers below are supported. Further examples can be found in &lt;a href=&#34;https://github.com/testcontainers/testcontainers-dotnet/raw/develop/tests/Testcontainers.Tests/Unit/Containers/Unix/TestcontainersContainerTest.cs&#34;&gt;TestcontainersContainerTest&lt;/a&gt; as well as in &lt;a href=&#34;https://github.com/testcontainers/testcontainers-dotnet/raw/develop/tests/Testcontainers.Tests/Unit/Containers/Unix/Modules/Databases&#34;&gt;database&lt;/a&gt; or &lt;a href=&#34;https://github.com/testcontainers/testcontainers-dotnet/raw/develop/tests/Testcontainers.Tests/Unit/Containers/Unix/Modules/MessageBrokers&#34;&gt;message broker&lt;/a&gt; tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache CouchDB (couchdb:2.3.1)&lt;/li&gt; &#xA; &lt;li&gt;Azurite (mcr.microsoft.com/azure-storage/azurite:3.18.0)&lt;/li&gt; &#xA; &lt;li&gt;Couchbase (couchbase:6.5.1)&lt;/li&gt; &#xA; &lt;li&gt;Elasticsearch (elasticsearch:8.3.2)&lt;/li&gt; &#xA; &lt;li&gt;MariaDB (mariadb:10.8)&lt;/li&gt; &#xA; &lt;li&gt;Microsoft SQL Server (mcr.microsoft.com/mssql/server:2017-CU28-ubuntu-16.04)&lt;/li&gt; &#xA; &lt;li&gt;MongoDB (mongo:5.0.6)&lt;/li&gt; &#xA; &lt;li&gt;MySQL (mysql:8.0.28)&lt;/li&gt; &#xA; &lt;li&gt;Oracle Database (gvenzl/oracle-xe:21-slim)&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL (postgres:11.14)&lt;/li&gt; &#xA; &lt;li&gt;Redis (redis:5.0.14)&lt;/li&gt; &#xA; &lt;li&gt;Apache Kafka (confluentinc/cp-kafka:6.0.5)&lt;/li&gt; &#xA; &lt;li&gt;RabbitMQ (rabbitmq:3.7.28)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Pulls &lt;code&gt;nginx&lt;/code&gt;, creates a new container with port binding &lt;code&gt;80:80&lt;/code&gt; and hits the default site.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var testcontainersBuilder = new TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()&#xA;  .WithImage(&#34;nginx&#34;)&#xA;  .WithName(&#34;nginx&#34;)&#xA;  .WithPortBinding(80)&#xA;  .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(80));&#xA;&#xA;await using (var testcontainers = testcontainersBuilder.Build())&#xA;{&#xA;  await testcontainers.StartAsync();&#xA;  _ = WebRequest.Create(&#34;http://localhost:80&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mounts the current directory as volume into the container and runs &lt;code&gt;hostname &amp;gt; /tmp/hostname&lt;/code&gt; on startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var testcontainersBuilder = new TestcontainersBuilder&amp;lt;TestcontainersContainer&amp;gt;()&#xA;  .WithImage(&#34;nginx&#34;)&#xA;  .WithName(&#34;nginx&#34;)&#xA;  .WithBindMount(&#34;.&#34;, &#34;/tmp&#34;)&#xA;  .WithEntrypoint(&#34;/bin/sh&#34;, &#34;-c&#34;)&#xA;  .WithCommand(&#34;hostname &amp;gt; /tmp/hostname&#34;)&#xA;  .WithWaitStrategy(Wait.ForUnixContainer().UntilFileExists(&#34;/tmp/hostname&#34;));&#xA;&#xA;await using (var testcontainers = testcontainersBuilder.Build())&#xA;{&#xA;  await testcontainers.StartAsync();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example of a pre-configured container. In the example, Testcontainers starts a PostgreSQL database in a &lt;a href=&#34;https://xunit.net&#34;&gt;xUnit.net&lt;/a&gt; test and executes a SQL query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public sealed class PostgreSqlTest : IAsyncLifetime&#xA;{&#xA;  private readonly TestcontainerDatabase testcontainers = new TestcontainersBuilder&amp;lt;PostgreSqlTestcontainer&amp;gt;()&#xA;    .WithDatabase(new PostgreSqlTestcontainerConfiguration&#xA;    {&#xA;      Database = &#34;db&#34;,&#xA;      Username = &#34;postgres&#34;,&#xA;      Password = &#34;postgres&#34;,&#xA;    })&#xA;    .Build();&#xA;&#xA;  [Fact]&#xA;  public void ExecuteCommand()&#xA;  {&#xA;    using (var connection = new NpgsqlConnection(this.testcontainers.ConnectionString))&#xA;    {&#xA;      using (var command = new NpgsqlCommand())&#xA;      {&#xA;        connection.Open();&#xA;        command.Connection = connection;&#xA;        command.CommandText = &#34;SELECT 1&#34;;&#xA;        command.ExecuteReader();&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;  public Task InitializeAsync()&#xA;  {&#xA;    return this.testcontainers.StartAsync();&#xA;  }&#xA;&#xA;  public Task DisposeAsync()&#xA;  {&#xA;    return this.testcontainers.DisposeAsync().AsTask();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The implementation of the pre-configured wait strategies can be chained together to support individual requirements for Testcontainers with different container platform operating systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Wait.ForUnixContainer()&#xA;  .UntilPortIsAvailable(80)&#xA;  .UntilFileExists(&#34;/tmp/foo&#34;)&#xA;  .UntilFileExists(&#34;/tmp/bar&#34;)&#xA;  .UntilOperationIsSucceeded(() =&amp;gt; true, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;To enable and configure logging, set the static &lt;code&gt;TestcontainersSettings.Logger&lt;/code&gt; property before test execution.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/testcontainers/testcontainers-dotnet/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Andre Hofmeister&lt;/strong&gt; - &lt;em&gt;Initial work&lt;/em&gt; - &lt;a href=&#34;https://github.com/HofmeisterAn/&#34;&gt;HofmeisterAn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=testcontainers-dotnet&#34;&gt;JetBrains&lt;/a&gt; who provide an &lt;a href=&#34;https://www.jetbrains.com/community/opensource/&#34;&gt;Open Source License&lt;/a&gt; for this project &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/testcontainers/testcontainers-dotnet/develop/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TeamStepping/Stepping.NET</title>
    <updated>2022-09-22T01:31:38Z</updated>
    <id>tag:github.com,2022-09-22:/TeamStepping/Stepping.NET</id>
    <link href="https://github.com/TeamStepping/Stepping.NET" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stepping is a distributed BASE jobs implementation. You can use it as a workflow engine, event outbox/inbox, email/SMS sender, remote invoker, and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Stepping.NET&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/TeamStepping/Stepping.NET/Test%20code/main?style=flat-square&#34; alt=&#34;build and test&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/TeamStepping/Stepping.NET&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/TeamStepping/Stepping.NET/branch/main/graph/badge.svg?token=jUKLCxa6HF&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Stepping.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Stepping.Core.svg?style=flat-square&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Stepping.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Stepping.Core.svg?style=flat-square&#34; alt=&#34;NuGet Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stepping is a distributed &lt;a href=&#34;https://en.wikipedia.org/wiki/Eventual_consistency&#34;&gt;BASE&lt;/a&gt; jobs implementation. You can use it as a workflow engine, event outbox/inbox, email/SMS sender, remote invoker, and more.&lt;/p&gt; &#xA;&lt;h2&gt;What are &lt;code&gt;Job&lt;/code&gt; and &lt;code&gt;Step&lt;/code&gt; in Stepping?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Job&lt;/code&gt; is a distributed transaction unit, and &lt;code&gt;Step&lt;/code&gt; is a specific task inside a job.&lt;/p&gt; &#xA;&lt;p&gt;A job contains one or many steps, and the transaction manager will execute them in order. If step 1 fails, it will be retried until success, and then step 2 starts to execute.&lt;/p&gt; &#xA;&lt;h2&gt;Scenarios for Using Stepping&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://excalidraw.com/#json=sSS0SSIWEQ3hLKuEgKQbf,g1ijMIFvKb7L8BuoiQYd0w&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/30018771/190894723-dd4f1a17-f8f2-4d81-bea1-32f6ab7d4782.png&#34; alt=&#34;WhatCanSteppingDo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Want To Execute Steps and Ensure Atomicity&lt;/h3&gt; &#xA;&lt;p&gt;When you start a job, Stepping will eventually complete the steps you require. If the app crashes during the executions, the transaction manager will continue to execute the rest steps after it recovers.&lt;/p&gt; &#xA;&lt;p&gt;Stepping will complete your steps one by one. If a step fails, it will be tried later until success, which makes the job &lt;a href=&#34;https://coffeecodeclimb.com/2020/07/26/atomicity-and-idempotency-for-dummies/#atomicity&#34;&gt;atomic&lt;/a&gt;. Please ensure all your steps can eventually succeed after retrying unless it is a &lt;a href=&#34;https://raw.githubusercontent.com/TeamStepping/Stepping.NET/main/Steps.md#saga-step&#34;&gt;Saga step&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stepping may already complete the current step when your app crashes during the execution. When your app recovers, Stepping will execute it redundantly. Therefore, all your steps should be &lt;a href=&#34;https://coffeecodeclimb.com/2020/07/26/atomicity-and-idempotency-for-dummies/#idempotence&#34;&gt;idempotent&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Want To Ensure Executing Steps After a DB Transaction Commits&lt;/h3&gt; &#xA;&lt;p&gt;When you start a job with a DB transaction, Stepping will eventually complete the steps you require after the DB transaction commits.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to worry about the non-atomicity caused by the app crashes after the transaction commits but before the steps&#39; execution. We have handled this case by using the DTM&#39;s &lt;a href=&#34;https://en.dtm.pub/practice/msg.html&#34;&gt;2-phase messaging&lt;/a&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;Stepping also supports the &#34;multi-tenant with multi-DB&#34; scenario, meaning it works no matter how many different databases there are in your app.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The transaction manager will eventually complete the added steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var job = await distributedJobFactory.CreateJobAsync();&#xA;&#xA;job.AddStep(new RequestBank1TransferOutStep(args)); // step with args&#xA;job.AddStep&amp;lt;RequestBank2TransferInStep&amp;gt;(); // step without args&#xA;&#xA;await job.StartAsync();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/TeamStepping/Stepping.NET/main/Steps.md&#34;&gt;Steps document&lt;/a&gt; shows how to define a step.&lt;/p&gt; &#xA;&lt;p&gt;If you want to execute the steps after a DB transaction commits and ensure they will eventually be done:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var db = serviceProvider.GetRequiredService&amp;lt;MyDbContext&amp;gt;(); // example for EF Core&#xA;await db.Database.BeginTransactionAsync();&#xA;&#xA;var order = new Order(args);&#xA;&#xA;db.Orders.Add(order);&#xA;await db.SaveChangesAsync();&#xA;&#xA;var job = await distributedJobFactory.CreateJobAsync(new EfCoreSteppingDbContext(db));&#xA;&#xA;job.AddStep(new SendOrderCreatedEmailStep(order));&#xA;job.AddStep(new SendOrderCreatedSmsStep(order));&#xA;&#xA;await job.StartAsync(); // it will commit the DB transaction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stepping supports &lt;code&gt;EF Core&lt;/code&gt;, &lt;code&gt;ADO.NET&lt;/code&gt;(coming soon), and &lt;code&gt;MongoDB&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For details, please see the &lt;a href=&#34;https://raw.githubusercontent.com/TeamStepping/Stepping.NET/main/Usage.md&#34;&gt;Usage document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/TeamStepping/Stepping.NET/main/Installation.md&#34;&gt;Installation document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Transaction Managers&lt;/h2&gt; &#xA;&lt;p&gt;Stepping requires transaction managers. You can choose an implementation you like.&lt;/p&gt; &#xA;&lt;h3&gt;DTM Server&lt;/h3&gt; &#xA;&lt;p&gt;DTM is a mature transaction manager you can use as the TM provider for Stepping. DTM allows you to use many other distributed transaction patterns like Saga, TCC, and XA.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/TeamStepping/Stepping.NET/main/Dtm.md&#34;&gt;DTM document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Local-TM&lt;/h3&gt; &#xA;&lt;p&gt;Stepping provides a simple built-in TM implementation. The local-TM runs with your app as a local transaction manager. Which app starts a job should be the TM of this job.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/TeamStepping/Stepping.NET/main/LocalTm.md&#34;&gt;Local-TM document&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>