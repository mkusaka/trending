<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-24T01:32:55Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>arkypita/LaserGRBL</title>
    <updated>2023-01-24T01:32:55Z</updated>
    <id>tag:github.com,2023-01-24:/arkypita/LaserGRBL</id>
    <link href="https://github.com/arkypita/LaserGRBL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Laser optimized GUI for GRBL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LaserGRBL &lt;a href=&#34;https://www.paypal.com/donate?business=4WQX8HUBXRVUU&amp;amp;no_recurring=0&amp;amp;item_name=LaserGRBL&amp;amp;currency_code=EUR&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donation&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Official website &lt;a href=&#34;http://lasergrbl.com&#34;&gt;http://lasergrbl.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LaserGRBL is a Windows GUI for &lt;a href=&#34;https://github.com/gnea/grbl/wiki&#34;&gt;GRBL&lt;/a&gt;. Unlike other GUI LaserGRBL it is specifically developed for use with laser cutter and engraver. In order to use all of LaserGRBL feature, your engraver must supports laser power modulation through gcode &#34;S&#34; command. LaserGRBL is compatible with &lt;a href=&#34;https://github.com/grbl/grbl/&#34;&gt;Grbl v0.9&lt;/a&gt; and &lt;a href=&#34;https://github.com/gnea/grbl/&#34;&gt;Grbl v1.1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All downloads available at &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/releases&#34;&gt;https://github.com/arkypita/LaserGRBL/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Support and Donation&lt;/h3&gt; &#xA;&lt;p&gt;Do you like LaserGRBL? Support development with your donation!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?business=4WQX8HUBXRVUU&amp;amp;no_recurring=0&amp;amp;item_name=LaserGRBL&amp;amp;currency_code=EUR&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Existing Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GCode file loading with engraving/cutting job preview (with alpha blending for grayscale engraving)&lt;/li&gt; &#xA; &lt;li&gt;Image import (jpg, bmp...) with line by line GCode generation (horizontal, vertical, and diagonal).&lt;/li&gt; &#xA; &lt;li&gt;Image import (jpg, bmp...) with Vectorization!&lt;/li&gt; &#xA; &lt;li&gt;Image import (jpg, bmp...) with 1bit dithering, best result with low power laser&lt;/li&gt; &#xA; &lt;li&gt;Vector file import (svg only) [Experimental]&lt;/li&gt; &#xA; &lt;li&gt;Different color scheme optimized for different safety glasses&lt;/li&gt; &#xA; &lt;li&gt;User defined buttons, power to you!&lt;/li&gt; &#xA; &lt;li&gt;Grbl Configuration Import/Export&lt;/li&gt; &#xA; &lt;li&gt;Configuration, Alarm and Error codes decoding for Grbl v1.1 (with description tooltip)&lt;/li&gt; &#xA; &lt;li&gt;Homing button, Feed Hold button, Resume button and Grbl Reset button&lt;/li&gt; &#xA; &lt;li&gt;Job time preview and realtime projection&lt;/li&gt; &#xA; &lt;li&gt;Jogging (for any Grbl version)&lt;/li&gt; &#xA; &lt;li&gt;Feed overrides (for Grbl &amp;gt; v1.1) with easy-to-use interface&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;http://lasergrbl.com/en/usage/wifi-with-esp8266/&#34;&gt;WiFi connection via ESP8266 WebSocket&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/user-interface/&#34;&gt;LaserGRBL User Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/arduino-connection/&#34;&gt;Connect to arduino-grbl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/load-and-send/&#34;&gt;Load G-Code and send to machine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/overrides/&#34;&gt;Speed and power overrides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/jogging/&#34;&gt;Jogging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/custom-buttons/&#34;&gt;Custom buttons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/raster-image-import/&#34;&gt;Raster Image Import&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/raster-image-import/import-parameters/&#34;&gt;Grayscale conversion parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/raster-image-import/line-to-line-tool/&#34;&gt;Line 2 line grayscale conversion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/raster-image-import/dithering-tool/&#34;&gt;1bit dithering conversion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lasergrbl.com/usage/raster-image-import/vectorization-tool/&#34;&gt;Image vectorization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;Development status and roadmap can be found here: &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/issues/64&#34;&gt;Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Missing Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Minimal Z axis control (LaserGRBL is for XY machine)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Screenshot and videos&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Uk2fGoNL3Yk&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8782035/23578353/fba95768-00d4-11e7-9357-99c00a30631d.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8782035/21349915/dba84a5a-c6b4-11e6-965f-a74fd283267a.jpg&#34; alt=&#34;Galeon&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8782035/21425748/34400d46-c84b-11e6-99e5-6eb529a98f8f.jpg&#34; alt=&#34;Raster2Laser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8782035/21351296/1df460c2-c6bc-11e6-8eee-4612bb7978fa.jpg&#34; alt=&#34;Alpha&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8782035/21907662/bbe988be-d910-11e6-9bdb-75b6e3404e0a.jpg&#34; alt=&#34;FinalWork&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/8782035/23375844/238e5f70-fd2a-11e6-8826-5ff7743bbea0.jpg&#34; alt=&#34;UserDefinedButtons&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;p&gt;LaserGRBL is written in C# for .NET Framework 3.5 (or higher) and can be compiled with &lt;a href=&#34;http://www.icsharpcode.net/opensource/sd/&#34;&gt;SharpDevelop&lt;/a&gt; and of course with &lt;a href=&#34;https://www.visualstudio.com&#34;&gt;Microsoft Visual Studio&lt;/a&gt; IDE/Compiler&lt;/p&gt; &#xA;&lt;h3&gt;Licensing&lt;/h3&gt; &#xA;&lt;p&gt;LaserGRBL is free software, released under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;GPLv3 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Credits and Contribution&lt;/h3&gt; &#xA;&lt;p&gt;LaserGRBL contains some code from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/articles/17395/owner-drawn-trackbar-slider&#34;&gt;ColorSlider&lt;/a&gt; - Copyright Michal Brylka&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drawing3d.de/Downloads.aspx&#34;&gt;CsPotrace&lt;/a&gt; - Copyright Peter Selinger, port by Wolfgang Nagl&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domoszlai/bezier2biarc&#34;&gt;Bezier2Biarc&lt;/a&gt; - Copyright Laszlo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp&#34;&gt;websocket-sharp&lt;/a&gt; - Copyright sta.blockhead&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vubiostat/expression.cs&#34;&gt;Expression Evaluator&lt;/a&gt; - Copyright Will Gray, Jeremy Roberts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/svenhb/GRBL-Plotter&#34;&gt;GCodeFromSVG&lt;/a&gt; - Copyright Sven Hasemann&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://archive.codeplex.com/?p=svg&#34;&gt;MS SVG Library&lt;/a&gt; - Microsoft Public License&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.angusj.com/delphi/clipper.php&#34;&gt;Clipper&lt;/a&gt; - Angus Johnson. Copyright Â© 2010-2014&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Myself, for italian and english language&lt;/li&gt; &#xA; &lt;li&gt;Fernando Luna, sqall123, for spanish translation&lt;/li&gt; &#xA; &lt;li&gt;Olivier Salvador, guillaume-rico &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/848&#34;&gt;#848&lt;/a&gt; for french translation&lt;/li&gt; &#xA; &lt;li&gt;Gerd Vogel, for german translation&lt;/li&gt; &#xA; &lt;li&gt;Anders Lassen, for danish translation&lt;/li&gt; &#xA; &lt;li&gt;Gerson Koppe, for brasilian translation&lt;/li&gt; &#xA; &lt;li&gt;Alexey Golovin, Newcomere, AlexeyBond, for russian translation&lt;/li&gt; &#xA; &lt;li&gt;Yang Haiqiang, for chinese translation&lt;/li&gt; &#xA; &lt;li&gt;00alkskodi00, for slovak translation &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/issues/670&#34;&gt;#670&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ddogman, for hungarian translation &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/issues/735&#34;&gt;#735&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Petr Bitnar, for czech translation&lt;/li&gt; &#xA; &lt;li&gt;Ozzybanan, for polish translation&lt;/li&gt; &#xA; &lt;li&gt;onmaker, for traditional chinese translation &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/1066&#34;&gt;#1066&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nikolaos Ntekas, for Greek translation &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/1234&#34;&gt;#1234&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mrjavaci, for Turkish translation &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/1293&#34;&gt;#1293&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Filippo Rivato for code contribution &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/305&#34;&gt;#305&lt;/a&gt; and again &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/1251&#34;&gt;#1251&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fabio Ferretti for code contribution &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/592&#34;&gt;#592&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;guillaume-rico for code contribution on Smoothie support&lt;/li&gt; &#xA; &lt;li&gt;Tobias Falkner, for code contribution &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/937&#34;&gt;#937&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gmmanonymus111, for code contribution &lt;a href=&#34;https://github.com/arkypita/LaserGRBL/pull/1032&#34;&gt;#1032&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/TorchSharp</title>
    <updated>2023-01-24T01:32:55Z</updated>
    <id>tag:github.com,2023-01-24:/dotnet/TorchSharp</id>
    <link href="https://github.com/dotnet/TorchSharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET library that provides access to the library that powers PyTorch.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/dotnet/TorchSharp?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/dotnet/TorchSharp.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://dotnet.visualstudio.com/TorchSharp/_build/latest?definitionId=174&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dotnet.visualstudio.com/TorchSharp/_apis/build/status/dotnet.TorchSharp?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/TorchSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/TorchSharp.svg?cacheSeconds=3600&amp;amp;label=TorchSharp%20nuget&#34; alt=&#34;TorchSharp&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/TorchAudio&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/TorchAudio.svg?cacheSeconds=3600&amp;amp;label=TorchAudio%20nuget&#34; alt=&#34;TorchAudio&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/TorchVision&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/TorchVision.svg?cacheSeconds=3600&amp;amp;label=TorchVision%20nuget&#34; alt=&#34;TorchVision&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/TorchSharp-cpu&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/TorchSharp-cpu.svg?cacheSeconds=3600&amp;amp;label=TorchSharp-cpu%20nuget&#34; alt=&#34;TorchSharp-cpu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/TorchSharp-cuda-windows&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/TorchSharp-cuda-windows.svg?cacheSeconds=3600&amp;amp;label=TorchSharp-cuda-windows%20nuget&#34; alt=&#34;TorchSharp-cuda-windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/TorchSharp-cuda-linux&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/TorchSharp-cuda-linux.svg?cacheSeconds=3600&amp;amp;label=TorchSharp-cuda-linux%20nuget&#34; alt=&#34;TorchSharp-cuda-linux&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;br&gt; Please check the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/TorchSharp/main/RELEASENOTES.md&#34;&gt;Release Notes&lt;/a&gt; file for news on what&#39;s been updated in each new release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TorchSharp is now in the .NET Foundation!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using TorchSharp from NuGet, you should be using a version &amp;gt;= 0.98.3 of TorchSharp, and &amp;gt;= 1.12.0 of the libtorch-xxx redistributable packages. We recommend using one of the &#39;bundled&#39; packages: TorchSharp-cpu, TorchSharp-cuda-windows, or TorchSharp-cuda-linux. They will pull in the right libtorch backends.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; At this moment, VS versions 17.4.X will not build the TorchSharp native code library. Use 17.3.X until further notice. See: &lt;a href=&#34;https://github.com/dotnet/TorchSharp/issues/858&#34;&gt;https://github.com/dotnet/TorchSharp/issues/858&lt;/a&gt; for more information and workarounds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Please do &lt;strong&gt;not&lt;/strong&gt; use 0.95.0 -- the package was released to NuGet in error, and without its many dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TorchSharp examples now has their own home!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://github.com/dotnet/TorchSharpExamples&#34;&gt;TorchSharp Examples Repo&lt;/a&gt; for convenient access to existing and upcoming examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In PR 302, significant changes were made to the TorchSharp API, aligning more closely with the Pytorch APIs. This was a massive breaking change. We apologize for any extra work this may cause, but we believe that what was done is in the best long-term interest of TorchSharp users.&lt;/p&gt; &#xA;&lt;p&gt;In PR 354, further significant changes were made, again aligning with the Pytorch APIs. It is also a massively breaking change. We removed the {IntNN|FloatNN|ComplexNN}Tensor.* APIs, which had no parallel in PyTorch. Once again, we apologize for any extra work this may cause, but we believe that what was done is in the best long-term interest of TorchSharp users.&lt;/p&gt; &#xA;&lt;p&gt;As we build up to a v1.0 release, we will continue to make breaking changes, but only when we consider it necessary for usability. Similarity to the PyTorch experience is a primary design tenet, and we will continue on that path.&lt;/p&gt; &#xA;&lt;h1&gt;TorchSharp&lt;/h1&gt; &#xA;&lt;p&gt;TorchSharp is a .NET library that provides access to the library that powers PyTorch. It is part of the .NET Foundation.&lt;/p&gt; &#xA;&lt;p&gt;The focus is to bind the API surfaced by libtorch with a particular focus on tensors. The design intent is to stay as close as possible to the Pytorch experience, while still taking advantage of the benefits of the .NET static type system where it makes sense. For example: method overloading is relied on when Pytorch defines multiple valid types for a particular parameter.&lt;/p&gt; &#xA;&lt;p&gt;The technology is a &#34;wrapper library&#34;: no more, no less. &lt;a href=&#34;https://github.com/DiffSharp/DiffSharp/&#34;&gt;DiffSharp&lt;/a&gt; uses this repository extensively and has been a major factor in iterating support.&lt;/p&gt; &#xA;&lt;p&gt;Things that you can try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using TorchSharp;&#xA;using static TorchSharp.torch.nn;&#xA;&#xA;var lin1 = Linear(1000, 100);&#xA;var lin2 = Linear(100, 10);&#xA;var seq = Sequential((&#34;lin1&#34;, lin1), (&#34;relu1&#34;, ReLU()), (&#34;drop1&#34;, Dropout(0.1)), (&#34;lin2&#34;, lin2));&#xA;&#xA;var x = torch.randn(64, 1000);&#xA;var y = torch.randn(64, 10);&#xA;&#xA;var optimizer = torch.optim.Adam(seq.parameters());&#xA;&#xA;for (int i = 0; i &amp;lt; 10; i++) {&#xA;    var eval = seq.forward(x);&#xA;    var output = functional.mse_loss(eval, y, Reduction.Sum);&#xA;&#xA;    optimizer.zero_grad();&#xA;&#xA;    output.backward();&#xA;&#xA;    optimizer.step();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A Few Things to Know&lt;/h2&gt; &#xA;&lt;p&gt;While the intent has been to stay close to the Pytorch experience, there are some peculiarities to take note of:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;We have disregarded .NET naming conventions in favor of Python where it impacts the experience. We know this will feel wrong to some, but after a lot of deliberation, we decided to follow the lead of the SciSharp community and embrace naming similarity with Python over .NET tradition. We believe this will make it easier to take Python-based examples and snippets and apply them in .NET.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In order to make a constructor call look more the Pytorch code, each class has a factory method with the same name. Because we cannot have a method and a class with the same name in a scope, we moved the class declarations to a nested scope &#39;Modules.&#39;&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;Module conv1 = Conv1d(...);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;creates an instance of &lt;code&gt;Modules.Conv1d&lt;/code&gt;, which has &#39;torch.Module&#39; as its base class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C# uses &#39;:&#39; when passing a named parameter, while F# and Python uses &#39;=&#39;, and Pytorch functions have enough parameters to encourage passing them by name. This means that you cannot simply copy a lot of code into C#.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are a number of APIs where Pytorch encodes what are effectively enum types as strings. We have chosen to use proper .NET enumeration types in most cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The type &lt;code&gt;torch.device&lt;/code&gt; is &lt;code&gt;torch.Device&lt;/code&gt; in TorchSharp. We felt that using all-lowercase for a class type was one step too far. The device object constructors, which is what you use most of the time, are still called &lt;code&gt;device()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Memory management&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/TorchSharp/main/docfx/articles/memory.md&#34;&gt;docfx/articles/memory.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;TorchSharp is distributed via the NuGet gallery: &lt;a href=&#34;https://www.nuget.org/packages/TorchSharp/&#34;&gt;https://www.nuget.org/packages/TorchSharp/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use TorchSharp, you also need one of the LibTorch backend packages: &lt;a href=&#34;https://www.nuget.org/packages?q=libtorch&#34;&gt;https://www.nuget.org/packages?q=libtorch&lt;/a&gt;, specifically one of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libtorch-cpu-linux-x64&lt;/code&gt; (CPU, Linux)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libtorch-cpu-win-x64&lt;/code&gt; (CPU, Windows)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libtorch-cpu-osx-x64&lt;/code&gt; (CPU, OSX)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libtorch-cpu&lt;/code&gt; (CPU, references all three, larger download but simpler)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libtorch-cuda-11.7-linux-x64&lt;/code&gt; (CPU/CUDA 11.3, Linux)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: Due to the presence of very large native binaries, using the &lt;code&gt;libtorch-cuda-11.7-linux-x64&lt;/code&gt; package requires .NET 6, e.g. .NET SDK version &lt;code&gt;6.0.100-preview.5.21302.13&lt;/code&gt; or greater.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libtorch-cuda-11.7-win-x64&lt;/code&gt; (CPU/CUDA 11.3, Windows)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively you can access the libtorch native binaries via direct reference to existing local native binaries of LibTorch installed through other means (for example, by installing &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt; using a Python package manager). You will have to add an explicit load of the relevant native library, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    using System.Runtime.InteropServices;&#xA;    NativeLibrary.Load(&#34;/home/gunes/anaconda3/lib/python3.8/site-packages/torch/lib/libtorch.so&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Developing and Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/TorchSharp/main/DEVGUIDE.md&#34;&gt;DEVGUIDE.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/TorchSharp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Uses&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DiffSharp/DiffSharp/&#34;&gt;DiffSharp&lt;/a&gt; also uses this repository extensively and has been a major factor in iterating support.&lt;/p&gt;</summary>
  </entry>
</feed>