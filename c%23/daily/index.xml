<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-23T01:31:45Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>StateSmith/StateSmith</title>
    <updated>2022-09-23T01:31:45Z</updated>
    <id>tag:github.com,2022-09-23:/StateSmith/StateSmith</id>
    <link href="https://github.com/StateSmith/StateSmith" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A state machine code generation tool suitable for bare metal, embedded and more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;StateSmith&lt;/h1&gt; &#xA;&lt;p&gt;StateSmith is a cross platform, free/open source tool for generating state machines. The generated code is human readable, has zero dependencies and is suitable for use with tiny bare metal microcontrollers, kernels, or servers. It avoids dynamic memory allocations for the safety or performance inclined.&lt;/p&gt; &#xA;&lt;p&gt;StateSmith will one day generate code for multiple different languages, but for now, the focus is on good old &lt;code&gt;C&lt;/code&gt; (or &lt;code&gt;C++&lt;/code&gt;) with zero dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/images/workflow-1.png&#34; alt=&#34;picture 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a demo &lt;a href=&#34;https://www.youtube.com/watch?v=9czSDothuzM&#34;&gt;youtube video&lt;/a&gt; showing a Laser Tag menu implemented with StateSmith and running in an Arduino simulation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9czSDothuzM&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/images/main-lasertag-demo1.png&#34; alt=&#34;picture 1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start 🚀&lt;/h2&gt; &#xA;&lt;p&gt;Want to jump right in and just try it!? See &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/docs/quickstart1/quick-start.md&#34;&gt;quick-start.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be controlling a console light bulb&#39;s brightness in no time!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/docs/quickstart1/images/run-final.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/examples/README.md&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need help? Suggestion? Brainstorm?&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open a &lt;a href=&#34;https://github.com/StateSmith/StateSmith/issues&#34;&gt;github issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or you can use the project&#39;s &lt;a href=&#34;https://github.com/StateSmith/StateSmith/discussions&#34;&gt;discussion space&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why StateSmith?&lt;/h2&gt; &#xA;&lt;p&gt;I couldn&#39;t find a state machine code generator that was suitable for low level embedded application use, had an attractive license, and was enjoyable to use.&lt;/p&gt; &#xA;&lt;p&gt;Many options were painfully slow to use. You couldn&#39;t just start designing/writing code. You had to spend a bunch of time creating object oriented mappings of every little thing in an awkward GUI.&lt;/p&gt; &#xA;&lt;p&gt;One of the reasons why I like StateSmith so much is that you can just get started using it and write code how you want. You can even start with pseudo code and gradually shape it into real code. Even though StateSmith uses a GUI for drawing state machines, all of a state&#39;s functionality is written in text - no annoying awkward GUIs that slow you down.&lt;/p&gt; &#xA;&lt;h2&gt;Human Readable Code&lt;/h2&gt; &#xA;&lt;p&gt;To make the generated code as enjoyable to look at as possible, there are a fair number of customizations possible. You can easily create a custom name mangling for pretty much everything.&lt;/p&gt; &#xA;&lt;p&gt;The default naming strategy looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// State machine constructor...&#xA;void LaserTagMenu1Sm_ctor(LaserTagMenu1Sm* self);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But, you can easily customize to output another common naming convention like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// State machine constructor...&#xA;void blinky1_printf_sm_ctor(blinky1_printf_sm* self);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- Here&#39;s the example customization [code](https://github.com/StateSmith/StateSmith/blob/dev/examples/Blinky1Printf/CodeGen/Blinky1PrintfSm.cs#L84-L109) used for `blink1_printf_sm` above. --&gt; &#xA;&lt;h2&gt;Show me the code!&lt;/h2&gt; &#xA;&lt;p&gt;In the future, StateSmith will support numerous state machine code generators. You&#39;ll be able to choose from super fast, balanced, and tiny size. You&#39;ll also be able to implement your own. The current code generation strategy implements a balanced approach that will work well for various targets.&lt;/p&gt; &#xA;&lt;p&gt;For the below diagram, here&#39;s the generated &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/examples/BlankTemplate/BlankTemplate/BlankTemplateSm.h&#34;&gt;.h file&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/examples/BlankTemplate/BlankTemplate/BlankTemplateSm.c&#34;&gt;.c file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/images/blank-template-sm.png&#34; alt=&#34;picture 6&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The above state machine isn&#39;t very interesting. It just transitions between one state and another state when the &lt;code&gt;do&lt;/code&gt; event is dispatched to it.&lt;/p&gt; &#xA;&lt;h2&gt;A more interesting example: Laser Tag Menu! Pew pew! 🔫&lt;/h2&gt; &#xA;&lt;p&gt;There are a bunch of &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/examples/README.md&#34;&gt;examples&lt;/a&gt;. Below is one of them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/images/wokwi-lasertagmenu1sm.png&#34; alt=&#34;picture 7&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can interact with the generated laser tag menu code using the &lt;a href=&#34;https://wokwi.com/projects/341718036538982996&#34;&gt;wokwi simulation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the menu layout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;APP&#xA;├── HOME&#xA;│   ├── HOME1&#xA;│   ├── HOME2&#xA;│   └── HOME3&#xA;└── MAIN MENU&#xA;        ├── SELECT CLASS&#xA;        │   ├── ENGINEER&#xA;        │   ├── HEAVY&#xA;        │   ├── ARCHER&#xA;        │   ├── WIZARD&#xA;        │   └── SPY&#xA;        │── SHOW INFO&#xA;        │   ├── INFO 1&#xA;        │   ├── INFO 2&#xA;        │   └── INFO 3&#xA;        └── EAT BACK PRESSES&#xA;            └── &amp;lt;stuff to show event handling&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s the &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/images/yed-LaserTagMenu1Sm-outer.png&#34;&gt;design diagram&lt;/a&gt;. To view inside collapsed states like &lt;code&gt;MM_SELECT_CLASS&lt;/code&gt;, you&#39;ll need to open the diagram using the UI (see below).&lt;/p&gt; &#xA;&lt;h2&gt;User Interface&lt;/h2&gt; &#xA;&lt;p&gt;StateSmith doesn&#39;t actually provide a UI - it currently relies on the free to use, but closed source &lt;a href=&#34;https://www.yworks.com/products/yed&#34;&gt;yEd editor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/images/yed-blurb.png&#34; alt=&#34;picture 9&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;yEd is great because it is free to use (even for commercial use), cross platform, and meets our needs pretty well once you get used to it.&lt;/p&gt; &#xA;&lt;p&gt;StateSmith parses the yEd xml file, builds some intermediate graph representations (which will allow user modification soon), then passes the graph to the code generator.&lt;/p&gt; &#xA;&lt;p&gt;One major future goal is to create a draw.io vscode extension that we can use for the front end. StateSmith was written with this goal in mind so adding a different compiler front end will be relatively easy. The hard part is customizing draw.io to behave the way we need (entering collapsed groups). I did a quick proof of concept and it looks very doable, just needs time and hopefully an excited contributor that is good with web UIs :)&lt;/p&gt; &#xA;&lt;p&gt;Why use yEd? I like that we just type in text. Some of the other strict UML State Machine tools I tried drove me crazy. It was just so slow to do anything.&lt;/p&gt; &#xA;&lt;h2&gt;How to use yEd for StateSmith&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/docs/yed-training.md&#34;&gt;./docs/yed-training.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Is StateSmith ready for use? 🧪&lt;/h1&gt; &#xA;&lt;p&gt;StateSmith is generating working code, and has some decent test coverage, but I&#39;m sure we are going to uncover some bugs.&lt;/p&gt; &#xA;&lt;p&gt;Release 0.5.4-alpha added a lot of helpful error messages for when the input design is incorrect in some way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;Failed parsing diagram edge&#xA;from: Statemachine{LaserTagMenu1Sm}.State{MENUS_GROUP}.State{MM_SELECT_CLASS}&#xA;to:   Statemachine{LaserTagMenu1Sm}.State{MENUS_GROUP}.State{CLASS_SAVED}&#xA;Edge label: `via exitt saved`&#xA;Reason(s): mismatched input &#39;exitt&#39; expecting {&#39;entry&#39;, &#39;exit&#39;} at line 1 column 4. Offending symbol: `exitt`.&#xA;           extraneous input &#39;saved&#39; expecting &amp;lt;EOF&amp;gt; at line 1 column 10. Offending symbol: `saved`.&#xA;Edge diagram id: n0::n3::e3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The main thing I&#39;d like to caution at this point is that there will be some refactoring in the near future which may affect user code generation scripts. Breaking changes and migration steps will be documented in &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/CHANGELOG.md&#34;&gt;./CHANGELOG.md&lt;/a&gt; however and should be pretty minimal.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/docs/diagram-features.md&#34;&gt;./docs/diagram-features.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How To Run StateSmith&lt;/h1&gt; &#xA;&lt;p&gt;StateSmith is still in alpha development phase so please be patient :)&lt;/p&gt; &#xA;&lt;p&gt;There will eventually be a standalone CLI tool that has no installation dependencies and works cross platform. See &lt;a href=&#34;https://github.com/StateSmith/StateSmith/issues/10&#34;&gt;issue 10&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For now, we actually just run StateSmith as a regular C# project from the command line, vscode, or visual studio.&lt;/p&gt; &#xA;&lt;h1&gt;Tutorial&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/StateSmith/StateSmith/main/docs/quickstart1/quick-start.md&#34;&gt;quick-start.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gui-cs/Terminal.Gui</title>
    <updated>2022-09-23T01:31:45Z</updated>
    <id>tag:github.com,2022-09-23:/gui-cs/Terminal.Gui</id>
    <link href="https://github.com/gui-cs/Terminal.Gui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross Platform Terminal UI toolkit for .NET&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/gui-cs/Terminal.Gui/workflows/.NET%20Core/badge.svg?branch=master&#34; alt=&#34;.NET Core&#34;&gt; &lt;img src=&#34;https://github.com/gui-cs/Terminal.Gui/workflows/Code%20scanning%20-%20action/badge.svg?sanitize=true&#34; alt=&#34;Code scanning - action&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Terminal.Gui.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/migueldeicaza/90ef67a684cb71db1817921a970f8d27/raw/code-coverage.json&#34; alt=&#34;Code Coverage&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Terminal.Gui&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gui-cs/Terminal.Gui/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/gui-cs/gui.cs.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues/gui-cs/gui.cs/bug&#34; alt=&#34;Bugs&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Terminal.Gui - Cross Platform Terminal UI toolkit for .NET&lt;/h1&gt; &#xA;&lt;p&gt;A toolkit for building rich console apps for .NET, .NET Core, and Mono that works on Windows, the Mac, and Linux/Unix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gui-cs/Terminal.Gui/develop/docfx/images/sample.gif&#34; alt=&#34;Sample app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/index.html&#34;&gt;Documentation Home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/articles/overview.html&#34;&gt;Terminal.Gui Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/articles/views.html&#34;&gt;List of Views/Controls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/articles/index.html&#34;&gt;Conceptual Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.html&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;The Documentation matches the most recent Nuget release from the &lt;code&gt;main&lt;/code&gt; branch (&lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Terminal.Gui.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross Platform&lt;/strong&gt; - Windows, Mac, and Linux. Terminal drivers for Curses, &lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/issues/27&#34;&gt;Windows Console&lt;/a&gt;, and the .NET Console mean apps will work well on both color and monochrome terminals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyboard and Mouse Input&lt;/strong&gt; - Both keyboard and mouse input are supported, including support for drag &amp;amp; drop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/articles/overview.html#layout&#34;&gt;Flexible Layout&lt;/a&gt;&lt;/strong&gt; - Supports both &lt;em&gt;Absolute layout&lt;/em&gt; and an innovative &lt;em&gt;Computed Layout&lt;/em&gt; system. &lt;em&gt;Computed Layout&lt;/em&gt; makes it easy to layout controls relative to each other and enables dynamic terminal UIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clipboard support&lt;/strong&gt; - Cut, Copy, and Paste of text provided through the &lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.Clipboard.html&#34;&gt;&lt;code&gt;Clipboard&lt;/code&gt;&lt;/a&gt; class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.View.html&#34;&gt;Arbitrary Views&lt;/a&gt;&lt;/strong&gt; - All visible UI elements are subclasses of the &lt;code&gt;View&lt;/code&gt; class, and these in turn can contain an arbitrary number of sub-views.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced App Features&lt;/strong&gt; - The &lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.MainLoop.html&#34;&gt;Mainloop&lt;/a&gt; supports processing events, idle handlers, timers, and monitoring file descriptors. Most classes are safe for threading.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reactive Extensions&lt;/strong&gt; - Use &lt;a href=&#34;https://github.com/dotnet/reactive&#34;&gt;reactive extensions&lt;/a&gt; and benefit from increased code readability, and the ability to apply the MVVM pattern and &lt;a href=&#34;https://www.reactiveui.net/&#34;&gt;ReactiveUI&lt;/a&gt; data bindings. See the &lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/ReactiveExample&#34;&gt;source code&lt;/a&gt; of a sample app in order to learn how to achieve this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase &amp;amp; Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/UICatalog&#34;&gt;UI Catalog&lt;/a&gt;&lt;/strong&gt; - The UI Catalog project provides an easy to use and extend sample illustrating the capabilities of &lt;strong&gt;Terminal.Gui&lt;/strong&gt;. Run &lt;code&gt;dotnet run --project UICatalog&lt;/code&gt; to run the UI Catalog.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/ReactiveExample&#34;&gt;Reactive Example&lt;/a&gt;&lt;/strong&gt; - A sample app that shows how to use &lt;code&gt;System.Reactive&lt;/code&gt; and &lt;code&gt;ReactiveUI&lt;/code&gt; with &lt;code&gt;Terminal.Gui&lt;/code&gt;. The app uses the MVVM architecture that may seem familiar to folks coming from WPF, Xamarin Forms, UWP, Avalonia, or Windows Forms. In this app, we implement the data bindings using ReactiveUI &lt;code&gt;WhenAnyValue&lt;/code&gt; syntax and &lt;a href=&#34;https://github.com/reactiveui/pharmacist&#34;&gt;Pharmacist&lt;/a&gt; — a tool that converts all events in a NuGet package into observable wrappers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/Example&#34;&gt;Example (aka &lt;code&gt;demo.cs&lt;/code&gt;)&lt;/a&gt;&lt;/strong&gt; - Run &lt;code&gt;dotnet run&lt;/code&gt; in the &lt;code&gt;Example&lt;/code&gt; directory to run the simple demo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/StandaloneExample&#34;&gt;Standalone Example&lt;/a&gt;&lt;/strong&gt; - A trivial .NET core sample application can be found in the &lt;code&gt;StandaloneExample&lt;/code&gt; directory. Run &lt;code&gt;dotnet run&lt;/code&gt; in directory to test.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/FSharpExample&#34;&gt;F# Example&lt;/a&gt;&lt;/strong&gt; - An example showing how to build a Terminal.Gui app using F#.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/PowerShell/GraphicalTools/raw/master/docs/Microsoft.PowerShell.ConsoleGuiTools/Out-ConsoleGridView.md&#34;&gt;PowerShell&#39;s &lt;code&gt;Out-ConsoleGridView&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - &lt;code&gt;OCGV&lt;/code&gt; sends the output from a command to an interactive table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/En3Tho/PoshRedisViewer&#34;&gt;PoshRedisViewer&lt;/a&gt;&lt;/strong&gt; - A compact Redis viewer module for PowerShell written in F# and Gui.cs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/tznind/TerminalGuiDesigner&#34;&gt;TerminalGuiDesigner&lt;/a&gt;&lt;/strong&gt; - Cross platform view designer for building Terminal.Gui applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/tree/master/Terminal.Gui&#34;&gt;&lt;code&gt;Terminal.Gui/&lt;/code&gt; README&lt;/a&gt; for an overview of how the library is structured. The &lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/articles/index.html&#34;&gt;Conceptual Documentation&lt;/a&gt; provides insight into core concepts.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Usage&lt;/h2&gt; &#xA;&lt;p&gt;(This code uses C# 9.0 &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#top-level-statements&#34;&gt;Top-level statements&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Terminal.Gui;&#xA;using NStack;&#xA;&#xA;Application.Init();&#xA;var top = Application.Top;&#xA;&#xA;// Creates the top-level window to show&#xA;var win = new Window(&#34;MyApp&#34;)&#xA;{&#xA;&#x9;X = 0,&#xA;&#x9;Y = 1, // Leave one row for the toplevel menu&#xA;&#xA;&#x9;// By using Dim.Fill(), it will automatically resize without manual intervention&#xA;&#x9;Width = Dim.Fill(),&#xA;&#x9;Height = Dim.Fill()&#xA;};&#xA;&#xA;top.Add(win);&#xA;&#xA;// Creates a menubar, the item &#34;New&#34; has a help menu.&#xA;var menu = new MenuBar(new MenuBarItem[] {&#xA;&#x9;&#x9;&#x9;new MenuBarItem (&#34;_File&#34;, new MenuItem [] {&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_New&#34;, &#34;Creates new file&#34;, null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Close&#34;, &#34;&#34;,null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Quit&#34;, &#34;&#34;, () =&amp;gt; { if (Quit ()) top.Running = false; })&#xA;&#x9;&#x9;&#x9;}),&#xA;&#x9;&#x9;&#x9;new MenuBarItem (&#34;_Edit&#34;, new MenuItem [] {&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Copy&#34;, &#34;&#34;, null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;C_ut&#34;, &#34;&#34;, null),&#xA;&#x9;&#x9;&#x9;&#x9;new MenuItem (&#34;_Paste&#34;, &#34;&#34;, null)&#xA;&#x9;&#x9;&#x9;})&#xA;&#x9;&#x9;});&#xA;top.Add(menu);&#xA;&#xA;static bool Quit()&#xA;{&#xA;&#x9;var n = MessageBox.Query(50, 7, &#34;Quit Demo&#34;, &#34;Are you sure you want to quit this demo?&#34;, &#34;Yes&#34;, &#34;No&#34;);&#xA;&#x9;return n == 0;&#xA;}&#xA;&#xA;var login = new Label(&#34;Login: &#34;) { X = 3, Y = 2 };&#xA;var password = new Label(&#34;Password: &#34;)&#xA;{&#xA;&#x9;X = Pos.Left(login),&#xA;&#x9;Y = Pos.Top(login) + 1&#xA;};&#xA;var loginText = new TextField(&#34;&#34;)&#xA;{&#xA;&#x9;X = Pos.Right(password),&#xA;&#x9;Y = Pos.Top(login),&#xA;&#x9;Width = 40&#xA;};&#xA;var passText = new TextField(&#34;&#34;)&#xA;{&#xA;&#x9;Secret = true,&#xA;&#x9;X = Pos.Left(loginText),&#xA;&#x9;Y = Pos.Top(password),&#xA;&#x9;Width = Dim.Width(loginText)&#xA;};&#xA;&#xA;// Add some controls, &#xA;win.Add(&#xA;&#x9;// The ones with my favorite layout system, Computed&#xA;&#x9;login, password, loginText, passText,&#xA;&#xA;&#x9;// The ones laid out like an australopithecus, with Absolute positions:&#xA;&#x9;new CheckBox(3, 6, &#34;Remember me&#34;),&#xA;&#x9;new RadioGroup(3, 8, new ustring[] { &#34;_Personal&#34;, &#34;_Company&#34; }, 0),&#xA;&#x9;new Button(3, 14, &#34;Ok&#34;),&#xA;&#x9;new Button(10, 14, &#34;Cancel&#34;),&#xA;&#x9;new Label(3, 18, &#34;Press F9 or ESC plus 9 to activate the menubar&#34;)&#xA;);&#xA;&#xA;Application.Run();&#xA;Application.Shutdown();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above shows adding views using both styles of layout supported by &lt;strong&gt;Terminal.Gui&lt;/strong&gt;: &lt;strong&gt;Absolute layout&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://gui-cs.github.io/Terminal.Gui/articles/overview.html#layout&#34;&gt;Computed layout&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can encapsulate the app behavior in a new &lt;code&gt;Window&lt;/code&gt;-derived class, say &lt;code&gt;App.cs&lt;/code&gt; containing the code above, and simplify your &lt;code&gt;Main&lt;/code&gt; method to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Terminal.Gui;&#xA;&#xA;class Demo {&#xA;&#x9;static void Main ()&#xA;&#x9;{&#xA;&#x9;&#x9;Application.Run&amp;lt;App&amp;gt; ();&#xA;&#x9;&#x9;Application.Shutdown ();&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Use NuGet to install the &lt;code&gt;Terminal.Gui&lt;/code&gt; NuGet package: &lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui&#34;&gt;https://www.nuget.org/packages/Terminal.Gui&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation in .NET Core Projects&lt;/h3&gt; &#xA;&lt;p&gt;To install Terminal.Gui into a .NET Core project, use the &lt;code&gt;dotnet&lt;/code&gt; CLI tool with following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Terminal.Gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gui-cs/Terminal.Gui/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for instructions for downloading and forking the source.&lt;/p&gt; &#xA;&lt;h2&gt;Running and Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows, Mac, and Linux - Build and run using the .NET SDK command line tools (&lt;code&gt;dotnet build&lt;/code&gt; in the root directory). Run &lt;code&gt;UICatalog&lt;/code&gt; with &lt;code&gt;dotnet run --project UICatalog&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Windows - Open &lt;code&gt;Terminal.Gui.sln&lt;/code&gt; with Visual Studio 2019.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Debates on architecture and design can be found in Issues tagged with &lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/issues?q=is%3Aopen+is%3Aissue+label%3Adesign&#34;&gt;design&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;This is an updated version of &lt;a href=&#34;http://tirania.org/blog/archive/2007/Apr-16.html&#34;&gt;gui.cs&lt;/a&gt; that Miguel wrote for &lt;a href=&#34;https://github.com/mono/mono-curses&#34;&gt;mono-curses&lt;/a&gt; in 2007.&lt;/p&gt; &#xA;&lt;p&gt;The original &lt;strong&gt;gui.cs&lt;/strong&gt; was a UI toolkit in a single file and tied to curses. This version tries to be console-agnostic and instead of having a container/widget model, only uses Views (which can contain subviews) and changes the rendering model to rely on damage regions instead of burdening each view with the details.&lt;/p&gt; &#xA;&lt;p&gt;A presentation of this was part of the &lt;a href=&#34;https://channel9.msdn.com/Events/dotnetConf/2018/S313&#34;&gt;Retro.NET&lt;/a&gt; talk at .NET Conf 2018 &lt;a href=&#34;https://tirania.org/Retro.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The most recent release notes can be found in the &lt;a href=&#34;https://github.com/gui-cs/Terminal.Gui/raw/master/Terminal.Gui/Terminal.Gui.csproj&#34;&gt;Terminal.Gui.csproj&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bchavez/Bogus</title>
    <updated>2022-09-23T01:31:45Z</updated>
    <id>tag:github.com,2022-09-23:/bchavez/Bogus</id>
    <link href="https://github.com/bchavez/Bogus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📇 A simple fake data generator for C#, F#, and VB.NET. Based on and ported from the famed faker.js.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Bogus/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Bogus.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/bchavez/bogus&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/dxa14myphnlbplc6/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=Simple%20Fake%20Data%20Generator%20for%20.NET:&amp;amp;amp;url=https%3A%2F%2Fgithub.com%2Fbchavez%2FBogus&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/github.com/bchavez/Bogus.svg?style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bchavez/Bogus/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discussions-green&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo.png&#34; align=&#34;right&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bogus for .NET: C#, F#, and VB.NET&lt;/h1&gt; &#xA;&lt;h2&gt;Project Description&lt;/h2&gt; &#xA;&lt;p&gt;Hello. I&#39;m your host &lt;strong&gt;&lt;a href=&#34;https://github.com/bchavez&#34;&gt;Brian Chavez&lt;/a&gt;&lt;/strong&gt; (&lt;a href=&#34;https://twitter.com/bchavez&#34;&gt;twitter&lt;/a&gt;). &lt;strong&gt;Bogus&lt;/strong&gt; is a simple fake data generator for &lt;strong&gt;.NET&lt;/strong&gt; languages like &lt;strong&gt;C#&lt;/strong&gt;, &lt;strong&gt;F#&lt;/strong&gt; and &lt;strong&gt;VB.NET&lt;/strong&gt;. &lt;strong&gt;Bogus&lt;/strong&gt; is fundamentally a &lt;strong&gt;C#&lt;/strong&gt; port of &lt;a href=&#34;https://github.com/faker-js/faker.js/&#34;&gt;&lt;code&gt;faker.js&lt;/code&gt;&lt;/a&gt; and inspired by &lt;a href=&#34;https://github.com/JeremySkinner/FluentValidation&#34;&gt;&lt;code&gt;FluentValidation&lt;/code&gt;&lt;/a&gt;&#39;s syntax sugar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bogus&lt;/strong&gt; will help you load databases, UI and apps with fake data for your testing needs. If you like &lt;strong&gt;Bogus&lt;/strong&gt; star &lt;span&gt;⭐&lt;/span&gt; the repository and show your friends! &lt;span&gt;😄&lt;/span&gt; If you find &lt;strong&gt;Bogus&lt;/strong&gt; useful consider supporting the project by purchasing a &lt;a href=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/#bogus-premium-extensions&#34;&gt;&lt;strong&gt;Bogus Premium&lt;/strong&gt;&lt;/a&gt; license that gives you extra &lt;strong&gt;Bogus&lt;/strong&gt; superpowers! &lt;span&gt;💫&lt;/span&gt; &lt;span&gt;💪&lt;/span&gt; You can also &lt;a href=&#34;https://github.com/sponsors/bchavez&#34;&gt;sponsor the project here&lt;/a&gt;! &lt;span&gt;💰&lt;/span&gt; &lt;span&gt;💵&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Download &amp;amp; Install&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nuget Package &lt;a href=&#34;https://www.nuget.org/packages/Bogus/&#34;&gt;Bogus&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Package Bogus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Minimum Requirements: &lt;strong&gt;.NET Standard 1.3&lt;/strong&gt; or &lt;strong&gt;.NET Standard 2.0&lt;/strong&gt; or &lt;strong&gt;.NET Framework 4.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Projects That Use Bogus&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch-net&#34;&gt;&lt;strong&gt;Elasticsearch .NET Client (NEST)&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elastic/elasticsearch-net/tree/82c938893b2ff4ddca03a8e977ad14a16da712ba/src/Tests/Framework/MockData&#34;&gt;[code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FluentValidation/FluentValidation&#34;&gt;&lt;strong&gt;FluentValidation&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FluentValidation/FluentValidation/search?q=Bogus&#34;&gt;[code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Windows-XAML/Template10&#34;&gt;&lt;strong&gt;Microsoft Windows-XAML / Template10&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Windows-XAML/Template10/raw/beed5e58a4f8ab381cff6f063d2a91db5b4fc3bc/Basics/PrismSample/Services/DataService.cs#L1&#34;&gt;[code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MicrosoftLearning/20532-DevelopingMicrosoftAzureSolutions&#34;&gt;&lt;strong&gt;Microsoft Learning / Developing Microsoft Azure Solutions&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MicrosoftLearning/20532-DevelopingMicrosoftAzureSolutions/raw/4bb595f6b908798f8b3d49773455699102650806/Allfiles/Mod03/Labfiles/Starter/Contoso.Events.Data/ContextInitializer.cs&#34;&gt;[code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Microsoft Office Developer&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/OfficeDev/TrainingContent&#34;&gt;&lt;strong&gt;Office 365 Development Training Content&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OfficeDev/TrainingContent/raw/0b2579517f0271f9a64f613b2046ab2821a73956/Teams/03%20Authentication/LabFiles/Starter/officedev-talent-management/DataModel/PositionCandidateData.cs&#34;&gt;[code]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/OfficeDev/microsoft-teams-sample-connector-csharp&#34;&gt;&lt;strong&gt;Microsoft Teams Sample Connector&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OfficeDev/microsoft-teams-sample-connector-csharp/raw/8805bb1acb136949905e4644c4e714dd7b70a61a/TeamsToDoAppConnector/Utils/TaskHelper.cs&#34;&gt;[code]&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Featured In&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/orleans/deployment/deploy-to-azure-app-service&#34;&gt;&lt;strong&gt;Microsoft Docs: Deploy Orleans to Azure App Service - May 5th, 2022&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/modernize-wpf-tutorial-1#configure-nuget-packages-and-dependencies&#34;&gt;&lt;strong&gt;Microsoft Docs: Modernize a WPF app tutorial - Aug. 2nd, 2019&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=088e5IUqF6g&amp;amp;t=12m31s&#34;&gt;&lt;strong&gt;Microsoft Build 2018: Azure Tips and Tricks - May 8th, 2018&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://nugetmusthaves.com/article/top-unit-testing-libraries&#34;&gt;NuGet Must Haves: Top 10 Unit Testing Libraries in 2017&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/bchavez/status/842479138850070528&#34;&gt;.NET Rocks Podcast: #BetterKnowThatFramework - Mar. 16th 2017&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href=&#34;https://twitter.com/bchavez/status/1040479669743628290&#34;&gt;Sep. 13th, 2018&lt;/a&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;a href=&#34;https://twitter.com/bchavez/status/1264047877245988864&#34;&gt;May 7th, 2020&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2015/12/08/the-week-in-net-12082015/&#34;&gt;.NET Engineering Blog: NuGet Package of the week #1. - &#34;This week in .NET - December 8th 2015&#34;&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Blog Posts&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/nickchapsas&#34;&gt;Nick Chapsas&lt;/a&gt; - &lt;a href=&#34;https://www.youtube.com/watch?v=T9pwE1GAr_U&#34;&gt;Generating realistic fake data in .NET using Bogus [YouTube]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/jackhiston&#34;&gt;Jack Histon&lt;/a&gt; - &lt;a href=&#34;http://jackhiston.com/2017/10/1/how-to-create-bogus-data-in-c/&#34;&gt;How to Create Bogus Data in C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/christosmatskas&#34;&gt;Christos Matskas&lt;/a&gt; - &lt;a href=&#34;https://cmatskas.com/creating-net-fakes-using-bogus-2/&#34;&gt;Creating .NET fakes using Bogus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/robertsjason&#34;&gt;Jason Roberts&lt;/a&gt; - &lt;a href=&#34;http://dontcodetired.com/blog/post/Lifelike-Test-Data-Generation-with-Bogus&#34;&gt;Lifelike Test Data Generation with Bogus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mark Timmings - &lt;a href=&#34;http://putridparrot.com/blog/auto-generating-test-data-with-bogus/&#34;&gt;Auto generating test data with Bogus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coderulez.wordpress.com/2017/05/10/net-core-generating-test-data/&#34;&gt;.NET Core Generating Test Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Steve Leigh - &lt;a href=&#34;http://stevesspace.com/2017/01/seedy-fake-users/&#34;&gt;Seedy Fake Users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/volkan_paksoy&#34;&gt;Volkan Paksoy&lt;/a&gt; - &lt;a href=&#34;https://volkanpaksoy.com/archive/2019/06/27/Generating-Test-Data-with-Bogus/&#34;&gt;Generating Test Data with Bogus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alican Demirtas - &lt;a href=&#34;https://www.compositional-it.com/news-blog/bogus-on-f/&#34;&gt;Bogus on F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/buhakmeh&#34;&gt;Khalid Abuhakmeh&lt;/a&gt; - &lt;a href=&#34;https://khalidabuhakmeh.com/seed-entity-framework-core-with-bogus&#34;&gt;Seed Entity Framework Core With Bogus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;The Crypto Tip Jar!&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://commerce.coinbase.com/checkout/2faa393a-6fc3-4365-993a-6cc110bc4d35&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/tipjar.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;The Great C# Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public enum Gender&#xA;{&#xA;    Male,&#xA;    Female&#xA;}&#xA;&#xA;//Set the randomizer seed if you wish to generate repeatable data sets.&#xA;Randomizer.Seed = new Random(8675309);&#xA;&#xA;var fruit = new[] { &#34;apple&#34;, &#34;banana&#34;, &#34;orange&#34;, &#34;strawberry&#34;, &#34;kiwi&#34; };&#xA;&#xA;var orderIds = 0;&#xA;var testOrders = new Faker&amp;lt;Order&amp;gt;()&#xA;    //Ensure all properties have rules. By default, StrictMode is false&#xA;    //Set a global policy by using Faker.DefaultStrictMode&#xA;    .StrictMode(true)&#xA;    //OrderId is deterministic&#xA;    .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; orderIds++)&#xA;    //Pick some fruit from a basket&#xA;    .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.PickRandom(fruit))&#xA;    //A random quantity from 1 to 10&#xA;    .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 10))&#xA;    //A nullable int? with 80% probability of being null.&#xA;    //The .OrNull extension is in the Bogus.Extensions namespace.&#xA;    .RuleFor(o =&amp;gt; o.LotNumber, f =&amp;gt; f.Random.Int(0, 100).OrNull(f, .8f));&#xA;&#xA;&#xA;var userIds = 0;&#xA;var testUsers = new Faker&amp;lt;User&amp;gt;()&#xA;    //Optional: Call for objects that have complex initialization&#xA;    .CustomInstantiator(f =&amp;gt; new User(userIds++, f.Random.Replace(&#34;###-##-####&#34;)))&#xA;&#xA;    //Use an enum outside scope.&#xA;    .RuleFor(u =&amp;gt; u.Gender, f =&amp;gt; f.PickRandom&amp;lt;Gender&amp;gt;())&#xA;&#xA;    //Basic rules using built-in generators&#xA;    .RuleFor(u =&amp;gt; u.FirstName, (f, u) =&amp;gt; f.Name.FirstName(u.Gender))&#xA;    .RuleFor(u =&amp;gt; u.LastName, (f, u) =&amp;gt; f.Name.LastName(u.Gender))&#xA;    .RuleFor(u =&amp;gt; u.Avatar, f =&amp;gt; f.Internet.Avatar())&#xA;    .RuleFor(u =&amp;gt; u.UserName, (f, u) =&amp;gt; f.Internet.UserName(u.FirstName, u.LastName))&#xA;    .RuleFor(u =&amp;gt; u.Email, (f, u) =&amp;gt; f.Internet.Email(u.FirstName, u.LastName))&#xA;    .RuleFor(u =&amp;gt; u.SomethingUnique, f =&amp;gt; $&#34;Value {f.UniqueIndex}&#34;)&#xA;&#xA;    //Use a method outside scope.&#xA;    .RuleFor(u =&amp;gt; u.CartId, f =&amp;gt; Guid.NewGuid())&#xA;    //Compound property with context, use the first/last name properties&#xA;    .RuleFor(u =&amp;gt; u.FullName, (f, u) =&amp;gt; u.FirstName + &#34; &#34; + u.LastName)&#xA;    //And composability of a complex collection.&#xA;    .RuleFor(u =&amp;gt; u.Orders, f =&amp;gt; testOrders.Generate(3).ToList())&#xA;    //Optional: After all rules are applied finish with the following action&#xA;    .FinishWith((f, u) =&amp;gt;&#xA;        {&#xA;            Console.WriteLine(&#34;User Created! Id={0}&#34;, u.Id);&#xA;        });&#xA;&#xA;var user = testUsers.Generate();&#xA;Console.WriteLine(user.DumpAsJson());&#xA;&#xA;/* OUTPUT:&#xA;User Created! Id=0&#xA; *&#xA;{&#xA;  &#34;Id&#34;: 0,&#xA;  &#34;FirstName&#34;: &#34;Audrey&#34;,&#xA;  &#34;LastName&#34;: &#34;Spencer&#34;,&#xA;  &#34;FullName&#34;: &#34;Audrey Spencer&#34;,&#xA;  &#34;UserName&#34;: &#34;Audrey_Spencer72&#34;,&#xA;  &#34;Email&#34;: &#34;Audrey82@gmail.com&#34;,&#xA;  &#34;Avatar&#34;: &#34;https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg&#34;,&#xA;  &#34;CartId&#34;: &#34;863f9462-5b88-471f-b833-991d68db8c93&#34;,&#xA;  &#34;SSN&#34;: &#34;923-88-4231&#34;,&#xA;  &#34;Gender&#34;: 0,&#xA;  &#34;Orders&#34;: [&#xA;    {&#xA;      &#34;OrderId&#34;: 0,&#xA;      &#34;Item&#34;: &#34;orange&#34;,&#xA;      &#34;Quantity&#34;: 8&#xA;    },&#xA;    {&#xA;      &#34;OrderId&#34;: 1,&#xA;      &#34;Item&#34;: &#34;banana&#34;,&#xA;      &#34;Quantity&#34;: 2&#xA;    },&#xA;    {&#xA;      &#34;OrderId&#34;: 2,&#xA;      &#34;Item&#34;: &#34;kiwi&#34;,&#xA;      &#34;Quantity&#34;: 9&#xA;    }&#xA;  ]&#xA;} */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;More Examples!&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bchavez/Bogus/tree/master/Examples/GettingStarted&#34;&gt;&lt;strong&gt;Full working example of &#39;The Great C# Example&#39;&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bchavez/Bogus/tree/master/Examples/EFCoreSeedDb&#34;&gt;&lt;strong&gt;Using Bogus and EF Core to a seed database&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bchavez/Bogus/tree/master/Examples/ExtendingBogus&#34;&gt;&lt;strong&gt;Extending Bogus with custom APIs and data&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;F#&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/#the-fabulous-f-examples&#34;&gt;&lt;strong&gt;Using Bogus with F#&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;VB.NET&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/#the-very-basic-vbnet-example&#34;&gt;&lt;strong&gt;Using Bogus with VB.NET&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Locales&lt;/h3&gt; &#xA;&lt;p&gt;Since we&#39;re a port of &lt;strong&gt;faker.js&lt;/strong&gt;, we support a whole bunch of different locales. Here&#39;s an example in Korean:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void With_Korean_Locale()&#xA;{&#xA;    var lorem = new Bogus.DataSets.Lorem(locale: &#34;ko&#34;);&#xA;    Console.WriteLine(lorem.Sentence(5));&#xA;}&#xA;&#xA;/* 국가는 무상으로 행위로 의무를 구성하지 신체의 처벌받지 예술가의 경우와 */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bogus&lt;/strong&gt; supports the following locales:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Locale Code&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Locale Code&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Language&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;af_ZA &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Afrikaans&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;fr_CH &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;French (Switzerland)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ar &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Arabic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ge &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Georgian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;az &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azerbaijani&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;hr &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hrvatski&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;cz &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Czech&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;id_ID &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Indonesia&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;de &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;German&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;it &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Italian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;de_AT &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;German (Austria)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ja &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Japanese&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;de_CH &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;German (Switzerland)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ko &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Korean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;el &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Greek&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;lv &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Latvian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nb_NO &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Norwegian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_AU &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (Australia)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ne &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nepalese&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_AU_ocker &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (Australia Ocker)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nl &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dutch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_BORK &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (Bork)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;nl_BE &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dutch (Belgium)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_CA &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (Canada)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;pl &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Polish&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_GB &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (Great Britain)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;pt_BR &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Portuguese (Brazil)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_IE &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (Ireland)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;pt_PT &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Portuguese (Portugal)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_IND &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (India)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ro &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Romanian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_NG &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Nigeria (English)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ru &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Russian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_US &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (United States)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;sk &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Slovakian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;en_ZA &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English (South Africa)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;sv &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Swedish&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;es &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spanish&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;tr &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Turkish&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;es_MX &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Spanish (Mexico)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;uk &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ukrainian&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;fa &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Farsi&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;vi &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Vietnamese&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;fi &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Finnish&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;zh_CN &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;fr &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;French&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;zh_TW &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chinese (Taiwan)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;fr_CA &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;French (Canada)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;zu_ZA &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Zulu (South Africa)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; Some locales may not have a complete data set. For example, &lt;a href=&#34;https://github.com/faker-js/faker.js/tree/master/lib/locales/zh_CN&#34;&gt;&lt;code&gt;zh_CN&lt;/code&gt;&lt;/a&gt; does not have a &lt;code&gt;lorem&lt;/code&gt; data set, but &lt;a href=&#34;https://github.com/faker-js/faker.js/tree/master/lib/locales/ko&#34;&gt;&lt;code&gt;ko&lt;/code&gt;&lt;/a&gt; has a &lt;code&gt;lorem&lt;/code&gt; data set. &lt;strong&gt;Bogus&lt;/strong&gt; will default to &lt;code&gt;en&lt;/code&gt; if a &lt;em&gt;locale-specific&lt;/em&gt; data set is not found. To further illustrate the previous example, the missing &lt;code&gt;zh_CN:lorem&lt;/code&gt; data set will default to the &lt;code&gt;en:lorem&lt;/code&gt; data set.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to help contribute new locales or update existing ones please see our &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Creating-Locales&#34;&gt;Creating Locales&lt;/a&gt; wiki page for more info.&lt;/p&gt; &#xA;&lt;h3&gt;Without Fluent Syntax&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;strong&gt;Bogus&lt;/strong&gt; without a fluent setup. The examples below highlight three alternative ways to use &lt;strong&gt;Bogus&lt;/strong&gt; without a fluent syntax setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;Faker&lt;/code&gt; facade.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;DataSets&lt;/strong&gt; directly.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;Faker&amp;lt;T&amp;gt;&lt;/code&gt; &lt;strong&gt;inheritance&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using the &lt;code&gt;Faker&lt;/code&gt; facade:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Using_The_Faker_Facade()&#xA;{&#xA;   var faker = new Faker(&#34;en&#34;);&#xA;   var o = new Order()&#xA;       {&#xA;           OrderId = faker.Random.Number(1, 100),&#xA;           Item = faker.Lorem.Sentence(),&#xA;           Quantity = faker.Random.Number(1, 10)&#xA;       };&#xA;   o.Dump();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;strong&gt;DataSets&lt;/strong&gt; directly:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Using_DataSets_Directly()&#xA;{&#xA;   var random = new Bogus.Randomizer();&#xA;   var lorem = new Bogus.DataSets.Lorem(&#34;en&#34;);&#xA;   var o = new Order()&#xA;       {&#xA;           OrderId = random.Number(1, 100),&#xA;           Item = lorem.Sentence(),&#xA;           Quantity = random.Number(1, 10)&#xA;       };&#xA;   o.Dump();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;Faker&amp;lt;T&amp;gt;&lt;/code&gt; inheritance:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class OrderFaker : Faker&amp;lt;Order&amp;gt; {&#xA;   public OrderFaker() {&#xA;      RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; f.Random.Number(1, 100));&#xA;      RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Lorem.Sentence());&#xA;      RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 10));&#xA;   }&#xA;}&#xA;&#xA;public void Using_FakerT_Inheritance()&#xA;{&#xA;   var orderFaker = new OrderFaker();&#xA;   var o = orderFaker.Generate();&#xA;   o.Dump();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the examples above, all three alternative styles of using &lt;strong&gt;Bogus&lt;/strong&gt; produce the same &lt;code&gt;Order&lt;/code&gt; result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;OrderId&#34;: 61,&#xA;  &#34;Item&#34;: &#34;vel est ipsa&#34;,&#xA;  &#34;Quantity&#34;: 7&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bogus API Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;ZipCode&lt;/code&gt; - Get a zipcode.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;City&lt;/code&gt; - Get a city name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;StreetAddress&lt;/code&gt; - Get a street address.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CityPrefix&lt;/code&gt; - Get a city prefix.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CitySuffix&lt;/code&gt; - Get a city suffix.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;StreetName&lt;/code&gt; - Get a street name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BuildingNumber&lt;/code&gt; - Get a building number.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;StreetSuffix&lt;/code&gt; - Get a street suffix.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;SecondaryAddress&lt;/code&gt; - Get a secondary address like &#39;Apt. 2&#39; or &#39;Suite 321&#39;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;County&lt;/code&gt; - Get a county.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Country&lt;/code&gt; - Get a country.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FullAddress&lt;/code&gt; - Get a full address like Street, City, Country.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CountryCode&lt;/code&gt; - Get a random ISO 3166-1 country code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;State&lt;/code&gt; - Get a random state state.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;StateAbbr&lt;/code&gt; - Get a state abbreviation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Latitude&lt;/code&gt; - Get a Latitude.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Longitude&lt;/code&gt; - Get a Longitude.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Direction&lt;/code&gt; - Generates a cardinal or ordinal direction. IE: Northwest, South, SW, E.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CardinalDirection&lt;/code&gt; - Generates a cardinal direction. IE: North, South, E, W.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;OrdinalDirection&lt;/code&gt; - Generates an ordinal direction. IE: Northwest, Southeast, SW, NE.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Commerce&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Department&lt;/code&gt; - Get a random commerce department.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Price&lt;/code&gt; - Get a random product price.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Categories&lt;/code&gt; - Get random product categories.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ProductName&lt;/code&gt; - Get a random product name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Color&lt;/code&gt; - Get a random color.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Product&lt;/code&gt; - Get a random product.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ProductAdjective&lt;/code&gt; - Random product adjective.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ProductMaterial&lt;/code&gt; - Random product material.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ean8&lt;/code&gt; - Get a random EAN-8 barcode number.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ean13&lt;/code&gt; - Get a random EAN-13 barcode number.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Company&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;CompanySuffix&lt;/code&gt; - Get a company suffix. &#34;Inc&#34; and &#34;LLC&#34; etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CompanyName&lt;/code&gt; - Get a company name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CatchPhrase&lt;/code&gt; - Get a company catch phrase.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bs&lt;/code&gt; - Get a company BS phrase.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Database&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Column&lt;/code&gt; - Generates a column name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Type&lt;/code&gt; - Generates a column type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Collation&lt;/code&gt; - Generates a collation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Engine&lt;/code&gt; - Generates a storage engine.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Past&lt;/code&gt; - Get a &lt;code&gt;DateTime&lt;/code&gt; in the past between &lt;code&gt;refDate&lt;/code&gt; and &lt;code&gt;yearsToGoBack&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PastOffset&lt;/code&gt; - Get a &lt;code&gt;DateTimeOffset&lt;/code&gt; in the past between &lt;code&gt;refDate&lt;/code&gt; and &lt;code&gt;yearsToGoBack&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Soon&lt;/code&gt; - Get a &lt;code&gt;DateTime&lt;/code&gt; that will happen soon.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;SoonOffset&lt;/code&gt; - Get a &lt;code&gt;DateTimeOffset&lt;/code&gt; that will happen soon.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Future&lt;/code&gt; - Get a &lt;code&gt;DateTime&lt;/code&gt; in the future between &lt;code&gt;refDate&lt;/code&gt; and &lt;code&gt;yearsToGoForward&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FutureOffset&lt;/code&gt; - Get a &lt;code&gt;DateTimeOffset&lt;/code&gt; in the future between &lt;code&gt;refDate&lt;/code&gt; and &lt;code&gt;yearsToGoForward&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Between&lt;/code&gt; - Get a random &lt;code&gt;DateTime&lt;/code&gt; between &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BetweenOffset&lt;/code&gt; - Get a random &lt;code&gt;DateTimeOffset&lt;/code&gt; between &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Recent&lt;/code&gt; - Get a random &lt;code&gt;DateTime&lt;/code&gt; within the last few days.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RecentOffset&lt;/code&gt; - Get a random &lt;code&gt;DateTimeOffset&lt;/code&gt; within the last few days.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Timespan&lt;/code&gt; - Get a random &lt;code&gt;TimeSpan&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Month&lt;/code&gt; - Get a random month.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Weekday&lt;/code&gt; - Get a random weekday.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Finance&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Account&lt;/code&gt; - Get an account number. Default length is 8 digits.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AccountName&lt;/code&gt; - Get an account name. Like &#34;savings&#34;, &#34;checking&#34;, &#34;Home Loan&#34; etc..&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Amount&lt;/code&gt; - Get a random amount. Default 0 - 1000.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TransactionType&lt;/code&gt; - Get a transaction type: &#34;deposit&#34;, &#34;withdrawal&#34;, &#34;payment&#34;, or &#34;invoice&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Currency&lt;/code&gt; - Get a random currency.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CreditCardNumber&lt;/code&gt; - Generate a random credit card number with valid Luhn checksum.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CreditCardCvv&lt;/code&gt; - Generate a credit card CVV.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BitcoinAddress&lt;/code&gt; - Generates a random Bitcoin address.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;EthereumAddress&lt;/code&gt; - Generate a random Ethereum address.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RoutingNumber&lt;/code&gt; - Generates an ABA routing number with valid check digit.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bic&lt;/code&gt; - Generates Bank Identifier Code (BIC) code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Iban&lt;/code&gt; - Generates an International Bank Account Number (IBAN).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Hacker&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Abbreviation&lt;/code&gt; - Returns an abbreviation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Adjective&lt;/code&gt; - Returns a adjective.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Noun&lt;/code&gt; - Returns a noun.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Verb&lt;/code&gt; - Returns a verb.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IngVerb&lt;/code&gt; - Returns a verb ending with -ing.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Phrase&lt;/code&gt; - Returns a phrase.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Images&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DataUri&lt;/code&gt; - Get a SVG data URI image with a specific width and height.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PicsumUrl&lt;/code&gt; - Get an image from the &lt;a href=&#34;https://picsum.photos&#34;&gt;https://picsum.photos&lt;/a&gt; service.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PlaceholderUrl&lt;/code&gt; - Get an image from &lt;a href=&#34;https://placeholder.com&#34;&gt;https://placeholder.com&lt;/a&gt; service.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LoremFlickrUrl&lt;/code&gt; - Get an image from &lt;a href=&#34;https://loremflickr.com&#34;&gt;https://loremflickr.com&lt;/a&gt; service.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LoremPixelUrl&lt;/code&gt; - Creates an image URL with &lt;a href=&#34;http://lorempixel.com&#34;&gt;http://lorempixel.com&lt;/a&gt;. Note: This service is slow. Consider using PicsumUrl() as a faster alternative. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Abstract&lt;/code&gt; - Gets an abstract looking image.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Animals&lt;/code&gt; - Gets an image of an animal.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Business&lt;/code&gt; - Gets a business looking image.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Cats&lt;/code&gt; - Gets a picture of a cat.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;City&lt;/code&gt; - Gets a city looking image.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Food&lt;/code&gt; - Gets an image of food.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Nightlife&lt;/code&gt; - Gets an image with city looking nightlife.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Fashion&lt;/code&gt; - Gets an image in the fashion category.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;People&lt;/code&gt; - Gets an image of humans.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Nature&lt;/code&gt; - Gets an image of nature.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Sports&lt;/code&gt; - Gets an image related to sports.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Technics&lt;/code&gt; - Get a technology related image.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Transport&lt;/code&gt; - Get a transportation related image.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Internet&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Avatar&lt;/code&gt; - Generates a legit Internet URL avatar from twitter accounts.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Email&lt;/code&gt; - Generates an email address.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ExampleEmail&lt;/code&gt; - Generates an example email with @example.com.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UserName&lt;/code&gt; - Generates user names.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UserNameUnicode&lt;/code&gt; - Generates a user name preserving Unicode characters.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DomainName&lt;/code&gt; - Generates a random domain name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DomainWord&lt;/code&gt; - Generates a domain word used for domain names.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DomainSuffix&lt;/code&gt; - Generates a domain name suffix like .com, .net, .org&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ip&lt;/code&gt; - Gets a random IPv4 address string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Port&lt;/code&gt; - Generates a random port number.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IpAddress&lt;/code&gt; - Gets a random IPv4 IPAddress type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IpEndPoint&lt;/code&gt; - Gets a random IPv4 IPEndPoint.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ipv6&lt;/code&gt; - Generates a random IPv6 address string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ipv6Address&lt;/code&gt; - Generate a random IPv6 IPAddress type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ipv6EndPoint&lt;/code&gt; - Gets a random IPv6 IPEndPoint.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UserAgent&lt;/code&gt; - Generates a random user agent.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Mac&lt;/code&gt; - Gets a random mac address.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Password&lt;/code&gt; - Generates a random password.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Color&lt;/code&gt; - Gets a random aesthetically pleasing color near the base RGB. See &lt;a href=&#34;http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Protocol&lt;/code&gt; - Returns a random protocol. HTTP or HTTPS.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Url&lt;/code&gt; - Generates a random URL.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UrlWithPath&lt;/code&gt; - Get an absolute URL with random path.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UrlRootedPath&lt;/code&gt; - Get a rooted URL path like: /foo/bar. Optionally with file extension.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Lorem&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Word&lt;/code&gt; - Get a random lorem word.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Words&lt;/code&gt; - Get an array of random lorem words.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Letter&lt;/code&gt; - Get a character letter.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Sentence&lt;/code&gt; - Get a random sentence of specific number of words.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Sentences&lt;/code&gt; - Get some sentences.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Paragraph&lt;/code&gt; - Get a paragraph.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Paragraphs&lt;/code&gt; - Get a specified number of paragraphs.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Text&lt;/code&gt; - Get random text on a random lorem methods.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Lines&lt;/code&gt; - Get lines of lorem.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Slug&lt;/code&gt; - Slugify lorem words.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;FirstName&lt;/code&gt; - Get a first name. Getting a gender specific name is only supported on locales that support it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LastName&lt;/code&gt; - Get a last name. Getting a gender specific name is only supported on locales that support it.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FullName&lt;/code&gt; - Get a full name, concatenation of calling FirstName and LastName.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Prefix&lt;/code&gt; - Gets a random prefix for a name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Suffix&lt;/code&gt; - Gets a random suffix for a name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FindName&lt;/code&gt; - Gets a full name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;JobTitle&lt;/code&gt; - Gets a random job title.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;JobDescriptor&lt;/code&gt; - Get a job description.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;JobArea&lt;/code&gt; - Get a job area expertise.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;JobType&lt;/code&gt; - Get a type of job.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Phone&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PhoneNumber&lt;/code&gt; - Get a phone number.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PhoneNumberFormat&lt;/code&gt; - Gets a phone number based on the locale&#39;s phone_number.formats[] array index.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Rant&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Review&lt;/code&gt; - Generates a random user review.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Reviews&lt;/code&gt; - Generate an array of random reviews.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;System&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;FileName&lt;/code&gt; - Get a random file name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;DirectoryPath&lt;/code&gt; - Get a random directory path (Unix).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FilePath&lt;/code&gt; - Get a random file path (Unix).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CommonFileName&lt;/code&gt; - Generates a random file name with a common file extension.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MimeType&lt;/code&gt; - Get a random mime type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CommonFileType&lt;/code&gt; - Returns a commonly used file type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CommonFileExt&lt;/code&gt; - Returns a commonly used file extension.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FileType&lt;/code&gt; - Returns any file type available as mime-type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FileExt&lt;/code&gt; - Gets a random extension for the given mime type.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Semver&lt;/code&gt; - Get a random semver version string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Version&lt;/code&gt; - Get a random &lt;code&gt;Version&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Exception&lt;/code&gt; - Get a random &lt;code&gt;Exception&lt;/code&gt; with a fake stack trace.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AndroidId&lt;/code&gt; - Get a random GCM registration ID.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ApplePushToken&lt;/code&gt; - Get a random Apple Push Token.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BlackBerryPin&lt;/code&gt; - Get a random BlackBerry Device PIN.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Vehicle&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Vin&lt;/code&gt; - Generate a vehicle identification number (VIN).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Manufacturer&lt;/code&gt; - Get a vehicle manufacture name. IE: Toyota, Ford, Porsche.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Model&lt;/code&gt; - Get a vehicle model. IE: Camry, Civic, Accord.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Type&lt;/code&gt; - Get a vehicle type. IE: Minivan, SUV, Sedan.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Fuel&lt;/code&gt; - Get a vehicle fuel type. IE: Electric, Gasoline, Diesel.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Random&lt;/code&gt;/&lt;code&gt;Randomizer&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Number&lt;/code&gt; - Get an int from 0 to max.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Digits&lt;/code&gt; - Get a random sequence of digits.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Even&lt;/code&gt; - Returns a random even number.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Odd&lt;/code&gt; - Returns a random odd number.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Double&lt;/code&gt; - Get a random double, between 0.0 and 1.0.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Decimal&lt;/code&gt; - Get a random decimal, between 0.0 and 1.0.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Float&lt;/code&gt; - Get a random float, between 0.0 and 1.0.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Byte&lt;/code&gt; - Generate a random byte between 0 and 255.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bytes&lt;/code&gt; - Get a random sequence of bytes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;SByte&lt;/code&gt; - Generate a random sbyte between -128 and 127.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Int&lt;/code&gt; - Generate a random int between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UInt&lt;/code&gt; - Generate a random uint between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ULong&lt;/code&gt; - Generate a random ulong between -128 and 127.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Long&lt;/code&gt; - Generate a random long between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Short&lt;/code&gt; - Generate a random short between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;UShort&lt;/code&gt; - Generate a random ushort between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Char&lt;/code&gt; - Generate a random char between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Chars&lt;/code&gt; - Generate a random chars between MinValue and MaxValue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;String&lt;/code&gt; - Get a string of characters of a specific length.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;String2&lt;/code&gt; - Get a string of characters with a specific length drawing characters from &lt;code&gt;chars&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Hash&lt;/code&gt; - Return a random hex hash. Default 40 characters, aka SHA-1.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bool&lt;/code&gt; - Get a random boolean.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ArrayElement&amp;lt;T&amp;gt;&lt;/code&gt; - Get a random array element.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ArrayElement&lt;/code&gt; - Get a random array element.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ArrayElements&amp;lt;T&amp;gt;&lt;/code&gt; - Get a random subset of an array.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ListItem&amp;lt;T&amp;gt;&lt;/code&gt; - Get a random list item.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ListItems&amp;lt;T&amp;gt;&lt;/code&gt; - Get a random subset of a List.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CollectionItem&amp;lt;T&amp;gt;&lt;/code&gt; - Get a random collection item.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ReplaceNumbers&lt;/code&gt; - Replaces symbols with numbers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ReplaceSymbols&lt;/code&gt; - Replaces each character instance in a string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Replace&lt;/code&gt; - Replaces symbols with numbers and letters. # = number, ? = letter, * = number or letter.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ClampString&lt;/code&gt; - Clamps the length of a string between min and max characters.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Enum&amp;lt;T&amp;gt;&lt;/code&gt; - Picks a random Enum of T. Works only with Enums.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Shuffle&amp;lt;T&amp;gt;&lt;/code&gt; - Shuffles an IEnumerable source.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Word&lt;/code&gt; - Returns a single word or phrase in English.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Words&lt;/code&gt; - Gets some random words and phrases in English.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WordsArray&lt;/code&gt; - Get a range of words in an array (English).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Guid&lt;/code&gt; - Get a random GUID.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Uuid&lt;/code&gt; - Get a random GUID. Alias for Randomizer.Guid().&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RandomLocale&lt;/code&gt; - Returns a random locale.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AlphaNumeric&lt;/code&gt; - Returns a random set of alpha numeric characters 0-9, a-z.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Hexadecimal&lt;/code&gt; - Generates a random hexadecimal string.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;WeightedRandom&amp;lt;T&amp;gt;&lt;/code&gt; - Returns a selection of T[] based on a weighted distribution of probability.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;API Extension Methods&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Brazil;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Cpf()&lt;/code&gt; - Cadastro de Pessoas Físicas&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Company.Cnpj()&lt;/code&gt; - Cadastro Nacional da Pessoa Jurídica&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Canada;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Sin()&lt;/code&gt; - Social Insurance Number for Canada&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Denmark;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Cpr()&lt;/code&gt; - Danish Personal Identification number&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Finland;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Henkilötunnus()&lt;/code&gt; - Finnish Henkilötunnus&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Italy;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.CodiceFiscale()&lt;/code&gt; - Codice Fiscale&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Finance.CodiceFiscale()&lt;/code&gt; - Codice Fiscale&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Norway;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Fødselsnummer()&lt;/code&gt; - Norwegian national identity number&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Portugal;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Nif()&lt;/code&gt; - Número de Identificação Fiscal (NIF)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Company.Nipc()&lt;/code&gt; - Número de Identificação de Pessoa Colectiva (NIPC)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.Sweden;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Personnummer()&lt;/code&gt; - Swedish national identity number&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.UnitedKingdom;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Vehicle.GbRegistrationPlate()&lt;/code&gt; - GB Vehicle Registration Plate&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Finance.SortCode()&lt;/code&gt; - Banking Sort Code&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Finance.Nino()&lt;/code&gt; - National Insurance Number&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Address.CountryOfUnitedKingdom()&lt;/code&gt; - Country of the United Kingdom&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Extensions.UnitedStates;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.Person.Ssn()&lt;/code&gt; - Social Security Number&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Bogus.DataSets.Company.Ein()&lt;/code&gt; - Employer Identification Number&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;using Bogus.Distributions.Gaussian;&lt;/code&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Randomizer.GaussianInt()&lt;/code&gt; - Generate an &lt;code&gt;int&lt;/code&gt; based on a specific normal distribution.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Randomizer.GaussianFloat()&lt;/code&gt; - Generate a &lt;code&gt;float&lt;/code&gt; based on a specific normal distribution.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Randomizer.GaussianDouble()&lt;/code&gt; - Generate a &lt;code&gt;double&lt;/code&gt; based on a specific normal distribution.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Randomizer.GaussianDecimal()&lt;/code&gt; - Generate a &lt;code&gt;decimal&lt;/code&gt; based on a specific normal distribution.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Amazing Community Extensions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nickdodd79/AutoBogus&#34;&gt;&lt;strong&gt;AutoBogus&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages?q=AutoBogus&#34;&gt;&lt;code&gt;NuGet Package&lt;/code&gt;&lt;/a&gt;) by &lt;a href=&#34;https://github.com/nickdodd79/&#34;&gt;@nickdodd79&lt;/a&gt; - Extends &lt;strong&gt;Bogus&lt;/strong&gt; by adding automatic &lt;code&gt;.RuleFor()&lt;/code&gt; creation and population capabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SimonCropp/NaughtyStrings&#34;&gt;&lt;strong&gt;NaughtyStrings.Bogus&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/NaughtyStrings.Bogus/&#34;&gt;&lt;code&gt;NuGet Package&lt;/code&gt;&lt;/a&gt;) by &lt;a href=&#34;https://github.com/SimonCropp&#34;&gt;@SimonCropp&lt;/a&gt; - Extends &lt;strong&gt;Bogus&lt;/strong&gt; with list of naughty strings which have a high probability of causing issues when used as user-input data. Examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.SQLInjection()&lt;/code&gt; - Strings which can cause a SQL injection if inputs are not sanitized.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.ScriptInjection()&lt;/code&gt; - Strings which attempt to invoke a benign script injection; shows vulnerability to XSS.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.iOSVulnerabilities()&lt;/code&gt; - Strings which crashed iMessage in various versions of iOS.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.KnownCVEsandVulnerabilities()&lt;/code&gt; - Strings that test for known vulnerabilities.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.ServerCodeInjection()&lt;/code&gt; - Strings which can cause user to run code on server as a privileged user.&lt;/li&gt; &#xA;   &lt;li&gt;and more!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SimonCropp/WaffleGenerator&#34;&gt;&lt;strong&gt;WaffleGenerator.Bogus&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/WaffleGenerator.Bogus/&#34;&gt;&lt;code&gt;NuGet Package&lt;/code&gt;&lt;/a&gt;) by &lt;a href=&#34;https://github.com/SimonCropp&#34;&gt;@SimonCropp&lt;/a&gt; - The Waffle Generator produces of text which, on first glance, looks like real, ponderous, prose; replete with clichés.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SimonCropp/NodaTime.Bogus&#34;&gt;&lt;strong&gt;NodaTime.Bogus&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/NodaTime.Bogus/&#34;&gt;&lt;code&gt;NuGet Package&lt;/code&gt;&lt;/a&gt;) by &lt;a href=&#34;https://github.com/SimonCropp&#34;&gt;@SimonCropp&lt;/a&gt; - Adds support for &lt;a href=&#34;https://nodatime.org/&#34;&gt;NodaTime&lt;/a&gt; to &lt;strong&gt;Bogus&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SimonCropp/CountryData&#34;&gt;&lt;strong&gt;CountryData.Bogus&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/CountryData.Bogus/&#34;&gt;&lt;code&gt;NuGet Package&lt;/code&gt;&lt;/a&gt;) by &lt;a href=&#34;https://github.com/SimonCropp&#34;&gt;@SimonCropp&lt;/a&gt; - Wrapper around &lt;a href=&#34;https://www.geonames.org/&#34;&gt;GeoNames Data&lt;/a&gt;. Examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.Country().Name()&lt;/code&gt; - Random country name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.Country().CurrencyCode()&lt;/code&gt; - Random currency code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.Australia().Capital()&lt;/code&gt; - Country capital.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.Country().Iceland().PostCode()&lt;/code&gt; - Random country post code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmcau/AustralianElectorates&#34;&gt;&lt;strong&gt;AustralianElectorates.Bogus&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/AustralianElectorates.Bogus/&#34;&gt;&lt;code&gt;NuGet Package&lt;/code&gt;&lt;/a&gt;) by &lt;a href=&#34;https://github.com/SimonCropp&#34;&gt;@SimonCropp&lt;/a&gt; - Wrapper around Australian Electoral Commission (AEC) data (&lt;a href=&#34;https://www.aec.gov.au/&#34;&gt;https://www.aec.gov.au/&lt;/a&gt;). Examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;.AustralianElectorates().Electorate()&lt;/code&gt; - Random electorate.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.AustralianElectorates().Name()&lt;/code&gt; - Random electorate name.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.AustralianElectorates().CurrentMember()&lt;/code&gt; - Random current electorate member for parliament.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.AustralianElectorates().CurrentMemberName()&lt;/code&gt; - Random name of current a electorate member for parliament.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.AustralianElectorates().Member()&lt;/code&gt; - Random electorate member for parliament.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.AustralianElectorates().MemberName()&lt;/code&gt; - Random name of a electorate member for parliament.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bogus Premium Extensions!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo_green.png&#34; align=&#34;left&#34; height=&#34;42px&#34; width=&#34;42px&#34; style=&#34;padding-right: 15px&#34;&gt; &lt;strong&gt;Bogus Premium&lt;/strong&gt; [&lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Purchase Now!&lt;/strong&gt;&lt;/a&gt;] by &lt;a href=&#34;https://github.com/bchavez&#34;&gt;@bchavez&lt;/a&gt;&lt;br&gt;You can help support the &lt;strong&gt;Bogus&lt;/strong&gt; open source project by purchasing a &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus Premium&lt;/strong&gt;&lt;/a&gt; license! With an active premium license you&#39;ll be supporting this cool open-source project. You&#39;ll also gain new superpowers that extended &lt;strong&gt;Bogus&lt;/strong&gt; with new features and exclusive data sets! Check &#39;em out below!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Premium:&lt;/strong&gt; &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus.Tools.Analyzer&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Bogus.Tools.Analyzer/&#34;&gt;NuGet Package&lt;/a&gt;) - Save time using this handy Roslyn analyzer to generate and detect missing &lt;code&gt;.RuleFor()&lt;/code&gt; rules at development &amp;amp; compile time! This tool is included with the &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus Premium&lt;/strong&gt;&lt;/a&gt; license! &lt;img src=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/bogus_premium_tools_analyzer_demo.gif&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Premium:&lt;/strong&gt; &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus.Locations&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Bogus.Locations/&#34;&gt;NuGet Package&lt;/a&gt;) - A dataset that contains real geographical information for places and things. Create fake GPS points and paths. Helpful for creating geodesic data for location-based aware apps. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Altitude&lt;/code&gt; - Generate a random altitude, in meters. Default max height is 8848m (Mount Everest). Heights are always positive.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;AreaCircle&lt;/code&gt; - Get a latitude and longitude within a specific radius in meters.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Depth&lt;/code&gt; - Generate a random depth, in meters. Default max depth is -10994m (Mariana Trench). Depths are always negative.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Geohash&lt;/code&gt; - Generates a random Geohash. &lt;a href=&#34;https://en.wikipedia.org/wiki/Geohash&#34;&gt;See&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Premium:&lt;/strong&gt; &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus.Healthcare&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Bogus.Healthcare/&#34;&gt;NuGet Package&lt;/a&gt;) - A data set for the Healthcare industry. Generate fake medical records, injuries, diagnosis, drugs, dosages, human anatomy, and ICD-9 medical codes. Especially helpful in HIPAA regulated environments! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Drugs&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Administration&lt;/code&gt; - Get how a drug should be administered. IE: oral, nasal, injection.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Dosage&lt;/code&gt; - Get a drug dosage with MG units&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DosageAmount&lt;/code&gt; - Get a drug dosage.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DosageForm&lt;/code&gt; - Get the form of a drug. IE: tablet, capsule, gel.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Ingredient&lt;/code&gt; - Get a drug ingredient. IE: folic acid, magnesium hydroxide, ibuprofen.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Vitamin&lt;/code&gt; - Get a random vitamin.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Human&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;BloodType&lt;/code&gt; - Get a random blood type. Ex: A+, OB&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;BodyPartExternal&lt;/code&gt; - Get an external body part name. IE: Head, Arm, Leg.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;BodyPartInternal&lt;/code&gt; - Get an internal body part name. IE: Bladder, Lung, Heart.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;BodyRegion&lt;/code&gt; - Get a human body region. IE: Head and Neck, Thorax.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;BodySystem&lt;/code&gt; - Get a human body system. IE: Digestive, Nervous, Circulatory.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Diagnosis&lt;/code&gt; - Shortcut to Icd9.DiagnosisLongDescription&#34;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;InfectiousDisease&lt;/code&gt; - Get an infectious disease. IE: Chickenpox, Polio, Zika Fever.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Pain&lt;/code&gt; - Get a human pain. Ex: Chest pain, Headache, Toothache.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Plasma&lt;/code&gt; - Get a random plasma type. Ex: O, A, B, AB&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Procedure&lt;/code&gt; - Shortcut to Icd9.ProcedureLongDescription.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Icd9&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisCode&lt;/code&gt; - Get a ICD9 diagnosis code.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisEntry&lt;/code&gt; - Get a medical diagnosis.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisLongDescription&lt;/code&gt; - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisShortDescription&lt;/code&gt; - Get a short description of a medical diagnosis.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureCode&lt;/code&gt; - Get a ICD9 procedure code.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureEntry&lt;/code&gt; - Get a medical procedure.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureLongDescription&lt;/code&gt; - Get a medical procedure description.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureShortDescription&lt;/code&gt; - Get a short description of a medical procedure.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Icd10&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisCode&lt;/code&gt; - Get a ICD10 diagnosis code.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisEntry&lt;/code&gt; - Get a medical diagnosis.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisLongDescription&lt;/code&gt; - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DiagnosisShortDescription&lt;/code&gt; - Get a short description of a medical diagnosis.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureCode&lt;/code&gt; - Get a ICD10 procedure code.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureEntry&lt;/code&gt; - Get a medical procedure.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureLongDescription&lt;/code&gt; - Get a medical procedure description.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ProcedureShortDescription&lt;/code&gt; - Get a short description of a medical procedure.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Medical&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;Hospital&lt;/code&gt; - Get a random hospital.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HospitalCity&lt;/code&gt; - Get a hospital city.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HospitalName&lt;/code&gt; - Get a random hospital name. IE: UCLA Medical Center&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HospitalState&lt;/code&gt; - Get a hospital state.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HospitalStreetAddress&lt;/code&gt; - Get a hospital street address.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HospitalZipCode&lt;/code&gt; - Get a hospital ZipCode.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Phrase&lt;/code&gt; - Get a random medical phrase.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Word&lt;/code&gt; - Get a medical word.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Premium:&lt;/strong&gt; &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus.Hollywood&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Bogus.Hollywood/&#34;&gt;NuGet Package&lt;/a&gt;)- A dataset for the Entertainment industry. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Movies&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ActorName&lt;/code&gt; - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;MovieCollection&lt;/code&gt; - Get a random movie collection. IE: Star Wars Collection, Indiana Jones Collection.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;MovieOverview&lt;/code&gt; - Get a random movie overview&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;MovieReleaseDate&lt;/code&gt; - Get a random movie release date.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;MovieTagline&lt;/code&gt; - Get a random movie tagline.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;MovieTitle&lt;/code&gt; - Get a random movie title&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Production&lt;/code&gt; - Get a production company.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Tv&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ActorName&lt;/code&gt; - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Network&lt;/code&gt; - Get a random TV network. IE: BBC, ABC, NBC, FOX.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Production&lt;/code&gt; - Get a production company&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Series&lt;/code&gt; - Get a name of a TV series. IE: Rick and Morty, Silicon Valley, The Walking Dead&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Premium:&lt;/strong&gt; &lt;a href=&#34;https://github.com/bchavez/Bogus/wiki/Bogus-Premium&#34;&gt;&lt;strong&gt;Bogus.Text&lt;/strong&gt;&lt;/a&gt; (&lt;a href=&#34;https://www.nuget.org/packages/Bogus.Text/&#34;&gt;NuGet Package&lt;/a&gt;) - A dataset that contains historical texts in the public domain. Create fake sentences from famous speeches, classic books, and law &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;code&gt;Literature&lt;/code&gt;&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;CommonSense&lt;/code&gt; - Text from &#34;Common Sense, by Thomas Paine (1776)&#34;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;JfkSpeech&lt;/code&gt; - Text from &#34;JFK&#39;s Inaugural Address&#34;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Knowledge&lt;/code&gt; - Text from &#34;A Treatise Concerning the Principles of Human knowledge, by George Berkeley (1710)&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Helper Methods&lt;/h3&gt; &#xA;&lt;p&gt;The features shown below come standard with the &lt;a href=&#34;https://www.nuget.org/packages/Bogus/&#34;&gt;&lt;strong&gt;Bogus&lt;/strong&gt;&lt;/a&gt; NuGet package.&lt;/p&gt; &#xA;&lt;h4&gt;Person&lt;/h4&gt; &#xA;&lt;p&gt;If you want to generate a &lt;code&gt;Person&lt;/code&gt; with context relevant properties like an email that looks like it belongs to someone with the same first/last name, create a person!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void Create_Context_Related_Person()&#xA;{&#xA;    var person = new Bogus.Person();&#xA;&#xA;    person.Dump();&#xA;}&#xA;&#xA;/* OUTPUT:&#xA;{&#xA;  &#34;FirstName&#34;: &#34;Lee&#34;,&#xA;  &#34;LastName&#34;: &#34;Brown&#34;,&#xA;  &#34;UserName&#34;: &#34;Lee_Brown3&#34;,&#xA;  &#34;Avatar&#34;: &#34;https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg&#34;,&#xA;  &#34;Email&#34;: &#34;Lee_Brown369@yahoo.com&#34;,&#xA;  &#34;DateOfBirth&#34;: &#34;1984-01-16T21:31:27.87666&#34;,&#xA;  &#34;Address&#34;: {&#xA;    &#34;Street&#34;: &#34;2552 Bernard Rapid&#34;,&#xA;    &#34;Suite&#34;: &#34;Suite 199&#34;,&#xA;    &#34;City&#34;: &#34;New Haskell side&#34;,&#xA;    &#34;ZipCode&#34;: &#34;78425-0411&#34;,&#xA;    &#34;Geo&#34;: {&#xA;      &#34;Lat&#34;: -35.8154,&#xA;      &#34;Lng&#34;: -140.2044&#xA;    }&#xA;  },&#xA;  &#34;Phone&#34;: &#34;1-500-790-8836 x5069&#34;,&#xA;  &#34;Website&#34;: &#34;javier.biz&#34;,&#xA;  &#34;Company&#34;: {&#xA;    &#34;Name&#34;: &#34;Kuphal and Sons&#34;,&#xA;    &#34;CatchPhrase&#34;: &#34;Organic even-keeled monitoring&#34;,&#xA;    &#34;Bs&#34;: &#34;open-source brand e-business&#34;&#xA;  }&#xA;} */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Replace&lt;/h4&gt; &#xA;&lt;p&gt;Replace a formatted string with random numbers &lt;code&gt;#&lt;/code&gt;, letters &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;*&lt;/code&gt; random number or letter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void Create_an_SSN()&#xA;{&#xA;    var ssn = new Bogus.Randomizer().Replace(&#34;###-##-####&#34;);&#xA;    ssn.Dump();&#xA;&#xA;    var code = new Randomizer().Replace(&#34;##? ??? ####&#34;);&#xA;    code.Dump();&#xA;&#xA;    var serial = new Randomizer().Replace(&#34;**-****&#34;);&#xA;    serial.Dump();&#xA;}&#xA;/* OUTPUT:&#xA;&#34;618-19-3064&#34;&#xA;&#34;39E SPC 0790&#34;&#xA;&#34;L3-J9N5&#34;&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parse Handlebars&lt;/h4&gt; &#xA;&lt;p&gt;You can also parse strings in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void Handlebar()&#xA;{&#xA;    var faker = new Faker();&#xA;    var randomName = faker.Parse(&#34;{{name.lastName}}, {{name.firstName}} {{name.suffix}}&#34;);&#xA;    randomName.Dump();&#xA;}&#xA;&#xA;/* OUTPUT:&#xA;&#34;Roob, Michale PhD&#34;&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The name of a dataset is determined using &lt;code&gt;DataCategory&lt;/code&gt; attribute or class name otherwise. (i.e &lt;code&gt;PhoneNumber&lt;/code&gt; dataset in handlebars expression should be named as &lt;code&gt;phone_number&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;You can pass parameters to methods using braces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void HandlebarWithParameters()&#xA;{&#xA;    var faker = new Faker();&#xA;    var randomName = faker.Parse(&#34;{{name.firstname(Female)}}, {{name.firstname(Male)}}&#34;);&#xA;    randomName.Dump();&#xA;}&#xA;&#xA;/* OUTPUT:&#xA;&#34;Lindsay, Jonathan&#34;&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Implicit and Explicit Type Conversion&lt;/h4&gt; &#xA;&lt;p&gt;You can also use implicit type conversion to make your code look cleaner without having to explicitly call &lt;code&gt;Faker&amp;lt;T&amp;gt;.Generate()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var orderFaker = new Faker&amp;lt;Order&amp;gt;()&#xA;                     .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; f.IndexVariable++)&#xA;                     .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Commerce.Product())&#xA;                     .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1,3));&#xA;&#xA;Order testOrder1 = orderFaker;&#xA;Order testOrder2 = orderFaker;&#xA;testOrder1.Dump();&#xA;testOrder2.Dump();&#xA;&#xA;/* OUTPUT:&#xA;{&#xA;  &#34;OrderId&#34;: 0,&#xA;  &#34;Item&#34;: &#34;Computer&#34;,&#xA;  &#34;Quantity&#34;: 2&#xA;}&#xA;{&#xA;  &#34;OrderId&#34;: 1,&#xA;  &#34;Item&#34;: &#34;Tuna&#34;,&#xA;  &#34;Quantity&#34;: 3&#xA;}&#xA;*/&#xA;&#xA;//Explicit works too!&#xA;var anotherOrder = (Order)orderFaker;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bulk Rules&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes writing &lt;code&gt;.RuleFor(x =&amp;gt; x.Prop, ...)&lt;/code&gt; can get repetitive, use the &lt;code&gt;.Rules((f, t) =&amp;gt; {...})&lt;/code&gt; shortcut to specify rules in bulk as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void create_rules_for_an_object_the_easy_way()&#xA;{&#xA;    var faker = new Faker&amp;lt;Order&amp;gt;()&#xA;        .StrictMode(false)&#xA;        .Rules((f, o) =&amp;gt;&#xA;            {&#xA;                o.Quantity = f.Random.Number(1, 4);&#xA;                o.Item = f.Commerce.Product();&#xA;                o.OrderId = 25;&#xA;            });&#xA;    Order o = faker.Generate();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt;: When using the bulk &lt;code&gt;.Rules(...)&lt;/code&gt; action, &lt;code&gt;StrictMode&lt;/code&gt; cannot be set to &lt;code&gt;true&lt;/code&gt; since individual properties of type &lt;code&gt;T&lt;/code&gt; cannot be independently checked to ensure each property has a rule.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;Enumerable.Range()&lt;/code&gt; and LINQ&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Enumerable.Range()&lt;/code&gt; and LINQ are a great supplement when creating data with &lt;strong&gt;Bogus&lt;/strong&gt;. Here&#39;s how to generate a simple list of email addresses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var faker = new Faker(&#34;en&#34;);&#xA;&#xA;var emailList = Enumerable.Range(1, 5)&#xA;      .Select(_ =&amp;gt; faker.Internet.Email())&#xA;      .ToList();&#xA;&#xA;//OUTPUT:&#xA;Gustave83@hotmail.com    &#xA;Evie33@gmail.com &#xA;Abby_Wilkinson@yahoo.com &#xA;Cecilia.Hahn@yahoo.com   &#xA;Jasen.Waelchi85@gmail.com     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Topics, Guidance, and Best Practices&lt;/h2&gt; &#xA;&lt;h3&gt;Determinism&lt;/h3&gt; &#xA;&lt;p&gt;Determinism is a first class concept in &lt;strong&gt;Bogus&lt;/strong&gt;. &lt;strong&gt;Bogus&lt;/strong&gt; goes to great lengths so developers can generate the same sequence of data over multiple program executions. &lt;strong&gt;Bogus&lt;/strong&gt; has two strategies of setting up deterministic behavior:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Global Seed&lt;/strong&gt; determinism through the &lt;code&gt;Randomizer.Seed&lt;/code&gt; &lt;strong&gt;global static&lt;/strong&gt; property.&lt;br&gt; &lt;em&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/em&gt; Easy to get deterministic data setup quickly.&lt;br&gt; &lt;em&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/em&gt; Code changes can impact other data values. Not so good for unit tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Local Seed&lt;/strong&gt; determinism through instance &lt;strong&gt;properties&lt;/strong&gt; and &lt;strong&gt;methods&lt;/strong&gt;. Specifically,&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;Faker&amp;lt;T&amp;gt;.UseSeed(int)&lt;/code&gt; &lt;strong&gt;method&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;.Random&lt;/code&gt; &lt;strong&gt;property&lt;/strong&gt; on the &lt;code&gt;Faker&lt;/code&gt; facade and &lt;strong&gt;DataSets&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/em&gt; Code changes can be isolated with minimal impact on determinism. Good for unit tests.&lt;br&gt; &lt;em&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/em&gt; Requires some forethought in design.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When &lt;strong&gt;Local Seed&lt;/strong&gt; determinism is used to set a seed value, the &lt;strong&gt;global static&lt;/strong&gt; source of randomness is ignored. This has some interesting implications as described below.&lt;/p&gt; &#xA;&lt;h4&gt;Using Global Seed determinism&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to get deterministic data values over multiple executions of a program is to set the &lt;code&gt;Randomizer.Seed&lt;/code&gt; property as demonstrated below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Randomizer.Seed = new Random(1338);&#xA;var orderIds = 0;&#xA;var orderFaker = new Faker&amp;lt;Order&amp;gt;()&#xA;    .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; orderIds++)&#xA;    .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Commerce.Product())&#xA;    .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 5));&#xA;&#xA;orderFaker.Generate(5).Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OrderId&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Item&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Quantity&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Fish&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Chair&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Gloves&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shirt&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Re-running the code above with &lt;code&gt;1338&lt;/code&gt; as a global static seed value will produce the same table of data over and over again.&lt;/p&gt; &#xA;&lt;p&gt;Next, add a new &lt;code&gt;Description&lt;/code&gt; property to the &lt;code&gt;Order&lt;/code&gt; class along with a new &lt;code&gt;.RuleFor(o =&amp;gt; o.Description, ..)&lt;/code&gt; rule and see the data changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Randomizer.Seed = new Random(1338);&#xA;var orderIds = 0;&#xA;var orderFaker = new Faker&amp;lt;Order&amp;gt;()&#xA;    .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; orderIds++)&#xA;    .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Commerce.Product())&#xA;    .RuleFor(o =&amp;gt; o.Description, f =&amp;gt; f.Commerce.ProductAdjective()) //New Rule&#xA;    .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 5));&#xA;&#xA;orderFaker.Generate(5).Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OrderId&lt;/th&gt; &#xA;   &lt;th&gt;Item&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Quantity&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Fish&lt;/td&gt; &#xA;   &lt;td&gt;Fantastic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Keyboard&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Gorgeous&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Shirt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Handcrafted&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Tuna&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Small&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Table&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; Awesome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A couple of observations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Order 0: Item&lt;/code&gt; value &lt;code&gt;Fish&lt;/code&gt; remained the same.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Order 0: Quantity&lt;/code&gt; changed from &lt;code&gt;3&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Order 1: Item&lt;/code&gt; has changed from a &lt;code&gt;Chair&lt;/code&gt; to a &lt;code&gt;Keyboard&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In fact, every data value with a &lt;span&gt;🚩&lt;/span&gt; icon has changed. This is due to the newly added property which has the effect of shifting the entire global static pseudo-random sequence off by +1. This rippling effect can be a problem if unit tests are expecting data values to remain the same. The following section below shows how we can improve the situation.&lt;/p&gt; &#xA;&lt;h4&gt;Using Local Seed determinism&lt;/h4&gt; &#xA;&lt;p&gt;Making use of the &lt;code&gt;Faker&amp;lt;T&amp;gt;.UseSeed(int)&lt;/code&gt; method can help limit the impact of POCO schema changes on deterministic data values that span across an entire run. Consider the following code that uses a seed value for each instance of a POCO object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var orderIds = 0;&#xA;var orderFaker = new Faker&amp;lt;Order&amp;gt;()&#xA;    .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; orderIds++)&#xA;    .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Commerce.Product())&#xA;    .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 5));&#xA;    &#xA;Order SeededOrder(int seed){&#xA;   return orderFaker.UseSeed(seed).Generate();&#xA;}&#xA;&#xA;var orders = Enumerable.Range(1, 5)&#xA;   .Select(SeededOrder)&#xA;   .ToList();&#xA;&#xA;orders.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OrderId&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Item&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Quantity&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bike&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cheese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Gloves&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bacon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Pants&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Next, adding the &lt;code&gt;Description&lt;/code&gt; property to the &lt;code&gt;Order&lt;/code&gt; class and examining the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var orderIds = 0;&#xA;var orderFaker = new Faker&amp;lt;Order&amp;gt;()&#xA;    .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; orderIds++)&#xA;    .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Commerce.Product())&#xA;    .RuleFor(o =&amp;gt; o.Description, f =&amp;gt; f.Commerce.ProductAdjective()) //New Rule&#xA;    .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 5));&#xA;    &#xA;Order SeededOrder(int seed){&#xA;   return orderFaker.UseSeed(seed).Generate();&#xA;}&#xA;&#xA;var orders = Enumerable.Range(1,5)&#xA;   .Select(SeededOrder)&#xA;   .ToList();&#xA;&#xA;orders.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OrderId&lt;/th&gt; &#xA;   &lt;th&gt;Item&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Quantity&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Bike&lt;/td&gt; &#xA;   &lt;td&gt;Ergonomic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Cheese&lt;/td&gt; &#xA;   &lt;td&gt;Fantastic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Gloves&lt;/td&gt; &#xA;   &lt;td&gt;Handcrafted&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Bacon&lt;/td&gt; &#xA;   &lt;td&gt;Tasty&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Pants&lt;/td&gt; &#xA;   &lt;td&gt;Gorgeous&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🚩&lt;/span&gt; 2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Progress! This time only the &lt;code&gt;Quantity&lt;/code&gt; data values with the &lt;span&gt;🚩&lt;/span&gt; icon have changed. The &lt;code&gt;Item&lt;/code&gt; column remained the same before and after the new addition of the &lt;code&gt;Description&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;We can further prevent the &lt;code&gt;Quantity&lt;/code&gt; data values from changing by moving the &lt;code&gt;RuleFor(o =&amp;gt; o.Description,...)&lt;/code&gt; rule line to the end of the &lt;code&gt;Faker&amp;lt;Order&amp;gt;&lt;/code&gt; declaration as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var orderIds = 0;&#xA;var orderFaker = new Faker&amp;lt;Order&amp;gt;()&#xA;    .RuleFor(o =&amp;gt; o.OrderId, f =&amp;gt; orderIds++)&#xA;    .RuleFor(o =&amp;gt; o.Item, f =&amp;gt; f.Commerce.Product())&#xA;    .RuleFor(o =&amp;gt; o.Quantity, f =&amp;gt; f.Random.Number(1, 5))&#xA;    .RuleFor(o =&amp;gt; o.Description, f =&amp;gt; f.Commerce.ProductAdjective()); //New Rule&#xA;    &#xA;Order MakeOrder(int seed){&#xA;   return orderFaker.UseSeed(seed).Generate();&#xA;}&#xA;&#xA;var orders = Enumerable.Range(1,5)&#xA;   .Select(MakeOrder)&#xA;   .ToList();&#xA;&#xA;orders.Dump();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OrderId&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Item&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Quantity&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bike&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Practical&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cheese&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Rustic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Gloves&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Refined&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Bacon&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Awesome&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Pants&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Gorgeous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Much success! &lt;span&gt;💯&lt;/span&gt; &lt;span&gt;🎉&lt;/span&gt; The &lt;code&gt;Item&lt;/code&gt; and &lt;code&gt;Quantity&lt;/code&gt; values remain unchanged! The new &lt;code&gt;Description&lt;/code&gt; property is added to the POCO object without any impact to other deterministic data values.&lt;/p&gt; &#xA;&lt;p&gt;As a best practice, to achieve maximum deterministic behavior and unit test robustness with &lt;strong&gt;Bogus&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Add new &lt;code&gt;RuleFor&lt;/code&gt; rules last in &lt;code&gt;Faker&amp;lt;T&amp;gt;&lt;/code&gt; declarations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Avoid changing existing rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; Always use &lt;code&gt;Faker&amp;lt;T&amp;gt;.UseSeed(int)&lt;/code&gt; to avoid using the global static seed as a source for randomness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; When possible assert that a value exists, not the literal value itself. In other words, &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Don&#39;t do this:&#xA;firstOrder.Item.Should().Be(&#34;Bike&#34;);&#xA;&#xA;// Instead, do this:&#xA;firstOrder.Item.Should().NotBeNullOrWhiteSpace();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;Faker&lt;/code&gt; facade and individual &lt;strong&gt;DataSets&lt;/strong&gt; can also be prepared to use &lt;strong&gt;local seeds&lt;/strong&gt; as well. The following shows how to set up the &lt;code&gt;Faker&lt;/code&gt; facade and &lt;strong&gt;DataSets&lt;/strong&gt; to use local seeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var faker = new Faker(&#34;en&#34;)&#xA;                {&#xA;                   Random = new Randomizer(1338)&#xA;                };&#xA;var lorem = new Bogus.DataSets.Lorem(&#34;en&#34;){&#xA;                   Random = new Randomizer(1338)&#xA;                };&#xA;faker.Lorem.Word().Dump();&#xA;lorem.Word().Dump();&#xA;&#xA;//OUTPUT:&#xA;minus&#xA;minus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;.Random&lt;/code&gt; property can be set multiple times without any ill effects.&lt;/p&gt; &#xA;&lt;h4&gt;Versioning can effect determinism&lt;/h4&gt; &#xA;&lt;p&gt;Updating to new versions of &lt;strong&gt;Bogus&lt;/strong&gt; on NuGet can effect determinism too. For example, when &lt;strong&gt;Bogus&lt;/strong&gt; updates locales from &lt;strong&gt;faker.js&lt;/strong&gt; or issues bug fixes, sometimes deterministic sequences can change. Changes to deterministic outputs are usually highlighted in the &lt;a href=&#34;https://github.com/bchavez/Bogus/raw/master/HISTORY.md&#34;&gt;release notes&lt;/a&gt;. Changes to deterministic outputs is also considered a breaking change. &lt;strong&gt;Bogus&lt;/strong&gt; generally follows semantic versioning rules. For example:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bogus&lt;/strong&gt; v25.0.&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Initial version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bogus&lt;/strong&gt; v25.0.&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No change to deterministic outputs or breaking changes. Possible bug fixes &amp;amp; improvements.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bogus&lt;/strong&gt; v&lt;strong&gt;26&lt;/strong&gt;.0.1&lt;/td&gt; &#xA;   &lt;td&gt;Deterministic outputs may have changed or may include other breaking changes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;As a general rule of thumb,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; For maximum stability for unit tests, stay within the same major versions of &lt;strong&gt;Bogus&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;✔&lt;/span&gt; For those wanting to stay up to date, assert that a value exists, not a literal value itself. In other words, &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Don&#39;t do this:&#xA;firstOrder.Item.Should().Be(&#34;Bike&#34;);&#xA;&#xA;// Instead, do this:&#xA;firstOrder.Item.Should().NotBeNullOrWhiteSpace();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Deterministic Dates and Times&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bogus&lt;/strong&gt; can generate deterministic dates and times. However, generating deterministic dates and times requires the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setting up a &lt;a href=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/#determinism&#34;&gt;local or global&lt;/a&gt; seed value.&lt;/li&gt; &#xA; &lt;li&gt;Setting up a global anchor source of time in &lt;code&gt;Bogus.DataSets.Date.SystemClock&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The following code shows how to setup deterministic dates and times:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Setup some kind of seed, global or local. Here, we use a global seed.&#xA;Randomizer.Seed = new Random(1338);&#xA;&#xA;// Setup a static source of time.&#xA;Bogus.DataSets.Date.SystemClock = () =&amp;gt; DateTime.Parse(&#34;8/8/2019 2:00 PM&#34;);&#xA;&#xA;// Now use Bogus as you normally would. All dates and times &#xA;// generated by Bogus should now be deterministic.&#xA;var p = new Person();&#xA;p.DateOfBirth;       // 1996-06-09T15:38:11&#xA;&#xA;var f = new Faker();&#xA;f.Date.Past();       // 2018-09-29T07:42:26&#xA;f.Date.Future();     // 2020-02-13T08:10:27&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the &lt;code&gt;Bogus.DataSets.Date.SystemClock&lt;/code&gt; set and a &lt;a href=&#34;https://raw.githubusercontent.com/bchavez/Bogus/master/#determinism&#34;&gt;local or global&lt;/a&gt; seed, dates and times should be deterministic across multiple runs of a program.&lt;/p&gt; &#xA;&lt;h2&gt;F# and VB.NET Examples&lt;/h2&gt; &#xA;&lt;h4&gt;The Fabulous F# Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;Faker&lt;/code&gt; facade with immutable &lt;strong&gt;F#&lt;/strong&gt; record types:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Customer = { FirstName : string&#xA;                  LastName : string&#xA;                  Age : int&#xA;                  Title : string }&#xA;&#xA;//The faker facade&#xA;let f = Faker();&#xA;&#xA;let generator() = &#xA;   { FirstName = f.Name.FirstName()&#xA;     LastName  = f.Name.LastName()&#xA;     Age       = f.Random.Number(18,60)&#xA;     Title     = f.Name.JobTitle() }&#xA;     &#xA;generator() |&amp;gt; Dump |&amp;gt; ignore&#xA;&#xA;(* OUTPUT:&#xA;  FirstName = &#34;Russell&#34;&#xA;  LastName = &#34;Nader&#34;&#xA;  Age = 34&#xA;  Title = &#34;Senior Web Officer&#34;&#xA;*)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;Faker&amp;lt;T&amp;gt;&lt;/code&gt; class with immutable &lt;strong&gt;F#&lt;/strong&gt; record types:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Customer = { FirstName : string&#xA;                  LastName : string&#xA;                  Age : int&#xA;                  Title : string }&#xA;&#xA;let customerFaker =&#xA;    Bogus&#xA;        .Faker&amp;lt;Customer&amp;gt;()&#xA;        .CustomInstantiator(fun f -&amp;gt;&#xA;             { FirstName = f.Name.FirstName()&#xA;               LastName  = f.Name.LastName()&#xA;               Age       = f.Random.Number(18,60)&#xA;               Title     = f.Name.JobTitle() })&#xA;&#xA;customerFaker.Generate() |&amp;gt; Dump |&amp;gt; ignore&#xA;&#xA;(* OUTPUT:&#xA;  FirstName = &#34;Sasha&#34;&#xA;  LastName = &#34;Roberts&#34;&#xA;  Age = 20;&#xA;  Title = &#34;Internal Security Specialist&#34;&#xA;*)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the &lt;code&gt;Faker&amp;lt;T&amp;gt;&lt;/code&gt; class with mutable classes in &lt;strong&gt;F#&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open Bogus&#xA;type Customer() =&#xA;  member val FirstName = &#34;&#34; with get, set&#xA;  member val LastName = &#34;&#34; with get, set&#xA;  member val Age = 0 with get, set&#xA;  member val Title = &#34;&#34; with get, set&#xA;&#xA;let faker = &#xA;        Faker&amp;lt;Customer&amp;gt;()&#xA;          //Make a rule for each property&#xA;          .RuleFor( (fun c -&amp;gt; c.FirstName), fun (f:Faker) -&amp;gt; f.Name.FirstName() )&#xA;          .RuleFor( (fun c -&amp;gt; c.LastName), fun (f:Faker) -&amp;gt; f.Name.LastName() )&#xA;&#xA;          //Or, alternatively, in bulk with .Rules()&#xA;          .Rules( fun f c -&amp;gt; &#xA;                    c.Age &amp;lt;- f.Random.Int(18,35) &#xA;                    c.Title &amp;lt;- f.Name.JobTitle() )&#xA;  &#xA;faker.Generate() |&amp;gt; Dump |&amp;gt; ignore&#xA;&#xA;(* OUTPUT:&#xA;  FirstName: Jarrell&#xA;  LastName: Tremblay&#xA;  Age: 32&#xA;  Title: Senior Web Designer&#xA;*)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;The Very Basic VB.NET Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vb&#34;&gt;Imports Bogus&#xA;&#xA;Public Class Customer&#xA;    Public Property FirstName() As String&#xA;    Public Property LastName() As String&#xA;    Public Property Age() As Integer&#xA;    Public Property Title() As String&#xA;End Class&#xA;&#xA;Sub Main&#xA;    Dim faker As New Faker(Of Customer)&#xA;    &#xA;    &#39;-- Make a rule for each property&#xA;    faker.RuleFor( Function(c) c.FirstName, Function(f) f.Name.FirstName) _&#xA;         .RuleFor( Function(c) c.LastName, Function(f) f.Name.LastName) _&#xA;         _&#xA;         .Rules( Sub(f, c)   &#39;-- Or, alternatively, in bulk with .Rules() &#xA;                   c.Age = f.Random.Int(18,35) &#xA;                   c.Title = f.Name.JobTitle()&#xA;                 End Sub )&#xA;            &#xA;    faker.Generate.Dump&#xA;End Sub&#xA;&#xA;&#39; OUTPUT:&#xA;&#39; FirstName: Jeremie &#xA;&#39; LastName: Mills &#xA;&#39; Age: 32 &#xA;&#39; Title: Quality Supervisor &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;The following section is only useful for people looking to contribute to &lt;strong&gt;Bogus&lt;/strong&gt; or make custom modifications to &lt;strong&gt;Bogus&lt;/strong&gt;. This section includes information about building &lt;strong&gt;Bogus&lt;/strong&gt; from source code and is not required to operate or run &lt;strong&gt;Bogus&lt;/strong&gt; in &lt;strong&gt;.NET&lt;/strong&gt; applications.&lt;/p&gt; &#xA;&lt;p&gt;The minimum requirements to build &lt;strong&gt;Bogus&lt;/strong&gt; from source code are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows 7&lt;/strong&gt; or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;&lt;strong&gt;Git for Windows&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;v2.33.0&lt;/code&gt; or later.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-framework&#34;&gt;&lt;strong&gt;.NET Framework&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;v4.7.1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;&lt;strong&gt;.NET Core SDK&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;SDK v6.0.100&lt;/code&gt; or later.&lt;/li&gt; &#xA; &lt;li&gt;Optional: IDE with C# 10 support. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visual Studio 2022 or later.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build Instructions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the source code.&lt;/li&gt; &#xA; &lt;li&gt;Open command prompt and run &lt;code&gt;build.cmd&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;build clean&lt;/code&gt; - cleans sources and files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build restore&lt;/code&gt; - restores all project references.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build dnx&lt;/code&gt; - the main dotnet build task.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build zip&lt;/code&gt; - creates a nice zip file with debug and release binaries.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build nuget&lt;/code&gt; - builds &lt;strong&gt;NuGet&lt;/strong&gt; packages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build test&lt;/code&gt; - runs all unit tests.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following folders will be created depending on the build task executed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;\__compile&lt;/code&gt; - binary output folder for the compiler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;\__package&lt;/code&gt; - output folder for zip and &lt;strong&gt;NuGet&lt;/strong&gt; packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;\__test&lt;/code&gt; - test results folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build Environment Variables&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set FORCE_VERSION=1.2.3&lt;/code&gt;&lt;br&gt; If &lt;code&gt;FORCE_VERSION&lt;/code&gt; environment variable is set with a semantic version number (eg: &lt;code&gt;x.y.z&lt;/code&gt;), the build tasks will use the &lt;code&gt;FORCE_VERSION&lt;/code&gt; to produce builds with the exact version number. Useful for testing out-of-band custom builds. However, it is not possible to reproduce exact binary equivalents of released &lt;strong&gt;NuGet&lt;/strong&gt; packages because packages release on &lt;strong&gt;NuGet&lt;/strong&gt; contain assemblies that are digitally signed with assembly signing enabled. The public does not have access to the signing key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rebundling Locales&lt;/h4&gt; &#xA;&lt;p&gt;Re-bundling the latest locale data from &lt;strong&gt;faker.js&lt;/strong&gt; requires the following software installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;&lt;strong&gt;NodeJS&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;v12.18.1&lt;/code&gt; or higher.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gulpjs.com/&#34;&gt;&lt;strong&gt;gulp&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;v4&lt;/code&gt; or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Steps to re-bundle locale data from &lt;strong&gt;faker.js&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/bchavez/Bogus.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Bogus&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git submodule init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git submodule update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;strong&gt;NodeJS&lt;/strong&gt; and &lt;code&gt;gulp&lt;/code&gt; are properly installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd Source\Builder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; to install required dev dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npx gulp importLocales&lt;/code&gt; to regenerate locales in &lt;code&gt;Source\Bogus\data&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Finally, run &lt;code&gt;build.cmd&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bchavez/Bogus/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;https://bchavez.bitarmory.com&#34;&gt;Brian Chavez&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A big thanks to GitHub and all contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antongeorgiev&#34;&gt;Anton Georgiev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mpdreamz&#34;&gt;Martijn Laarman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/salixzs&#34;&gt;Anrijs Vitolins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quantumplation&#34;&gt;Pi Lanningham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JvanderStad&#34;&gt;JvanderStad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gdimauro&#34;&gt;Giuseppe Dimauro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>