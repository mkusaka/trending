<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-28T01:24:59Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AnnulusGames/LitMotion</title>
    <updated>2023-12-28T01:24:59Z</updated>
    <id>tag:github.com,2023-12-28:/AnnulusGames/LitMotion</id>
    <link href="https://github.com/AnnulusGames/LitMotion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightning-fast and Zero Allocation Tween Library for Unity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LitMotion&lt;/h1&gt; &#xA;&lt;p&gt;Lightning-fast and Zero Allocation Tween Library for Unity.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/LitMotion/raw/main/docs/images/header.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/LitMotion/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LICENSE-MIT-green.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/LitMotion/main/README_JA.md&#34;&gt;日本語版READMEはこちら&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;LitMotion is a high-performance tweening library for Unity. It encompasses a rich set of features to animate components like Transform, along with custom fields and properties, allowing for easy creation of animations.&lt;/p&gt; &#xA;&lt;p&gt;Following my creation of &lt;a href=&#34;https://github.com/AnnulusGames/MagicTween&#34;&gt;Magic Tween&lt;/a&gt;, LitMotion stands as my second tweening library. Leveraging the experience gained from implementing Magic Tween, LitMotion has been designed prioritizing essential features while ensuring it operates at the highest speed possible. It outperforms other tweening libraries by a staggering 2 to 20 times in various situations such as tween creation and execution. Naturally, there are no allocations during tween creation.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full version of documentation can be found &lt;a href=&#34;https://annulusgames.github.io/LitMotion/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Animate anything in one line of code.&lt;/li&gt; &#xA; &lt;li&gt;Achieves zero allocations due to its struct-based design.&lt;/li&gt; &#xA; &lt;li&gt;Highly optimized using DOTS (Data-Oriented Technology Stack).&lt;/li&gt; &#xA; &lt;li&gt;Works in both runtime and editor.&lt;/li&gt; &#xA; &lt;li&gt;Apply complex settings like easing and looping.&lt;/li&gt; &#xA; &lt;li&gt;Wait for completion via callbacks/coroutines.&lt;/li&gt; &#xA; &lt;li&gt;Convert to Observables using UniRx.&lt;/li&gt; &#xA; &lt;li&gt;Supports async/await via UniTask.&lt;/li&gt; &#xA; &lt;li&gt;Extend types using &lt;code&gt;IMotionOptions&lt;/code&gt; and &lt;code&gt;IMotionAdapter&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unity 2021.3 or later&lt;/li&gt; &#xA; &lt;li&gt;Burst 1.6.0 or later&lt;/li&gt; &#xA; &lt;li&gt;Collection 1.5.1 or later&lt;/li&gt; &#xA; &lt;li&gt;Mathematics 1.0.0 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Package Manager from Window &amp;gt; Package Manager.&lt;/li&gt; &#xA; &lt;li&gt;Click the &#34;+&#34; button &amp;gt; Add package from git URL.&lt;/li&gt; &#xA; &lt;li&gt;Enter the following URL:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/AnnulusGames/LitMotion.git?path=src/LitMotion/Assets/LitMotion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, open Packages/manifest.json and add the following to the dependencies block:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;dependencies&#34;: {&#xA;        &#34;com.annulusgames.lit-motion&#34;: &#34;https://github.com/AnnulusGames/LitMotion.git?path=src/LitMotion/Assets/LitMotion&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Here are the benchmark results. The benchmark source code can be found in &lt;a href=&#34;https://github.com/AnnulusGames/TweenPerformance&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tween 64,000 float properties&lt;/h3&gt; &#xA;&lt;h4&gt;Startup&lt;/h4&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/LitMotion/raw/main/docs/images/benchmark_startup_64000_float.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/LitMotion/raw/main/docs/images/benchmark_update_64000_float.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h3&gt;Tween 50,000 transform.position&lt;/h3&gt; &#xA;&lt;h4&gt;Startup&lt;/h4&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/LitMotion/raw/main/docs/images/benchmark_startup_50000_position.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/LitMotion/raw/main/docs/images/benchmark_update_50000_position.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h3&gt;GC Allocation (per position tween creation)&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/AnnulusGames/LitMotion/raw/main/docs/images/benchmark_gc_position.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Untiy forum: &lt;a href=&#34;https://forum.unity.com/threads/litmotion-lightning-fast-and-zero-allocation-tween-library.1530427/&#34;&gt;https://forum.unity.com/threads/litmotion-lightning-fast-and-zero-allocation-tween-library.1530427/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AnnulusGames/LitMotion/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sim0n00ps/OF-DL</title>
    <updated>2023-12-28T01:24:59Z</updated>
    <id>tag:github.com,2023-12-28:/sim0n00ps/OF-DL</id>
    <link href="https://github.com/sim0n00ps/OF-DL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# console app to download all of the media from Onlyfans accounts with DRM video downloading support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OF-DL&lt;/h1&gt; &#xA;&lt;p&gt;Scrape all the media from an OnlyFans account&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://of-dl.gitbook.io/of-dl/&#34;&gt;https://of-dl.gitbook.io/of-dl/&lt;/a&gt; for instuctions on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirements&lt;/li&gt; &#xA; &lt;li&gt;Installing the Program&lt;/li&gt; &#xA; &lt;li&gt;Running the Program&lt;/li&gt; &#xA; &lt;li&gt;Config options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Issues&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions or issues please raise them on here, all I ask is that you please look back through previous issues to see if your issue or question has been fixed/answered already, it gets annoying when people create issues without checking previous issues which usually leads to me or others repeating themselves, thank you.&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimers&lt;/h1&gt; &#xA;&lt;p&gt;This tool is not associated or involved with Onlyfans in any way. I am not responsible for anything that happens to you or your account when using the tool.&lt;/p&gt; &#xA;&lt;h1&gt;Donations&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to donate then here is a link to my ko-fi page &lt;a href=&#34;https://ko-fi.com/sim0n00ps&#34;&gt;https://ko-fi.com/sim0n00ps&lt;/a&gt;. Donations are not required but are very much appreciated :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ks233/ja-learner</title>
    <updated>2023-12-28T01:24:59Z</updated>
    <id>tag:github.com,2023-12-28:/ks233/ja-learner</id>
    <link href="https://github.com/ks233/ja-learner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📖简易日语学习 / 视觉小说阅读辅助工具&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;KS的日语学习工具 v0.2&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;strong&gt;📖 简易日语学习 / 视觉小说阅读辅助工具&lt;/strong&gt; &#xA; &lt;br&gt; &#xA; &lt;span&gt;句子拆解 • 汉字注音 • 一键查词 • 参考翻译 • 外来语标注 • AI讲解&lt;/span&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ks233/ja-learner/releases&#34;&gt;下载&lt;/a&gt;&lt;span&gt; • &lt;/span&gt;&lt;a href=&#34;https://github.com/ks233/ja-learner/issues&#34;&gt;Bug 反馈&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/ks233/ja-learner&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ks233/ja-learner/main/README/title.png&#34; alt=&#34;Title&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;功能介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;语句分析&lt;/strong&gt;：用不同样式区分句子成分，为句子中的汉字注音&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;单词查询&lt;/strong&gt;：点击单词一键查询 MOJi 辞書，哪里不会点哪里&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;参考翻译&lt;/strong&gt;：支持谷歌翻译与 ChatGPT 翻译，把握句子整体含义&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;片假不留&lt;/strong&gt;：在片假名上方显示英语翻译，满屏片假名也不怕&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;游戏文本分析&lt;/strong&gt;：吸附并跟随游戏窗口，配合文本提取工具，实时分析游戏文本&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI 讲解&lt;/strong&gt;：调用 ChatGPT 讲解句子中的单词和语法成分&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;h3&gt;基本的句子分析&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;读取剪贴板或手动输入句子&lt;/li&gt; &#xA; &lt;li&gt;勾选“片假不留”可以把片假名单词翻译成英文 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;点击片假名单词上方的英文可以隐藏该单词的翻译，再点一下恢复显示，用于屏蔽错误的翻译结果&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;可以用 Ctrl + 滚轮调整分析界面的显示大小 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;本质浏览器套壳，你甚至可以按 F12 打开控制台（&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;在语句分析界面点击单词快速查词 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;左键点击单词会在词典窗口中显示 MOJi 辞書的搜索结果&lt;/li&gt; &#xA;   &lt;li&gt;中键点击单词会在浏览器中打开单词在 MOJi 辞書的搜索页面&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;窗口吸附&lt;/h3&gt; &#xA;&lt;p&gt;在主窗口的“系统设置”面板中，首先点击“选择窗口”按钮，然后把鼠标移到想要吸附的窗口，点一下左键。此时右边选框中的文字会变成“与 xxx 对齐”，把选框勾上，窗口就吸附到游戏窗口边上了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ks233/ja-learner/main/README/attach.gif&#34; alt=&#34;attach&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;游戏文本提取&lt;/h3&gt; &#xA;&lt;p&gt;本项目&lt;strong&gt;并没有&lt;/strong&gt;内置游戏文本提取的功能，但是可以实时读取剪贴板。建议使用 &lt;a href=&#34;https://github.com/Artikash/Textractor&#34;&gt;Textractor&lt;/a&gt;、&lt;a href=&#34;https://github.com/kha-white/manga-ocr&#34;&gt;manga-ocr&lt;/a&gt; 等文本提取工具将游戏文本提取至剪贴板，然后在本软件中勾选“读取剪贴板”，即可实时同步游戏文本。配合 Textractor 的使用效果如图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ks233/ja-learner/main/README/text-extraction.gif&#34; alt=&#34;text-extraction&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;参考翻译&lt;/h3&gt; &#xA;&lt;p&gt;目前支持了谷歌翻译和 GPT 翻译。其中谷歌翻译无需配置，可以免费无限制使用，而 GPT 需要配置 API Key，消耗 API 余额。&lt;/p&gt; &#xA;&lt;h4&gt;谷歌翻译 &amp;amp; 谷歌生草机&lt;/h4&gt; &#xA;&lt;p&gt;这是两个不同的接口，“谷歌翻译”会得到与网页版谷歌翻译相同的翻译结果，“谷歌生草机”的翻译结果与网页版不同，质量普遍低于网页版。&lt;/p&gt; &#xA;&lt;h4&gt;使用 GPT（需要 API Key）&lt;/h4&gt; &#xA;&lt;p&gt;首先要配置 api key，在 &lt;code&gt;config.txt&lt;/code&gt; 的第一行输入 api key，第二行输入 api url：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sk-xxxxxxxxx&#xA;https://api.openai.com/{0}/{1}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你使用官方 API，第二行就不用修改，如果使用第三方反代，就要修改为相应的域名。&lt;/p&gt; &#xA;&lt;p&gt;配置好 api key 就可以使用 GPT 翻译和解说文本了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ks233/ja-learner/main/README/gpt.gif&#34; alt=&#34;gpt&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;h3&gt;分析与翻译仅供参考&lt;/h3&gt; &#xA;&lt;p&gt;本项目的分词与注音功能基于 MeCab，有时会犯一些低级错误，比如把「&lt;ruby&gt;身体&lt;rt&gt;からだ&lt;/rt&gt;&lt;/ruby&gt;」注音为 しんたい、把「&lt;ruby&gt;二人&lt;rt&gt;ふたり&lt;/rt&gt;&lt;/ruby&gt;」注音为 ににん，用词汇更丰富的 &lt;a href=&#34;https://clrd.ninjal.ac.jp/unidic/&#34;&gt;UniDic&lt;/a&gt; 词典替换 &lt;code&gt;dic&lt;/code&gt; 文件夹中默认的 IPADIC 效果会稍好一些。&lt;/p&gt; &#xA;&lt;p&gt;翻译毕竟都是机翻，出错也很正常。谷歌翻译遇到复杂的句式和不规范的表达就容易翻车，ChatGPT 比谷歌懂更多俗语、流行语，但偶尔也会发癫，比如使用简体中文以外的语言回复、唐突的&lt;a href=&#34;https://zh.moegirl.org.cn/zh-hans/%E5%A1%9E%E6%B0%8F%E7%BF%BB%E8%AF%91%E6%B3%95&#34;&gt;塞氏翻译法&lt;/a&gt;等等。建议把本软件当做一个精读工具而不是翻译器，把注意力放在日语原文上，只在不确定的时候使用翻译作为参考。&lt;/p&gt; &#xA;&lt;p&gt;外来语标注功能使用谷歌翻译将片假名单词翻译为英语，但不是所有片假名单词都是外来语，外来语也不一定来源于英语，还有像 supplies 和 surprise 这样的“同音词”也不好区分，因此也会出现标记错误的情况。&lt;/p&gt; &#xA;&lt;p&gt;根据我个人的使用体验，整体准确率还可以接受，但还是不建议完全初学者使用，以免被误导。如果遇到可疑的注音或翻译，建议点击单词查看 MOJi 辞書的解释和注音，并对照不同引擎的翻译结果，或者使用 ChatGPT 的解说功能。&lt;/p&gt; &#xA;&lt;h3&gt;相关项目&lt;/h3&gt; &#xA;&lt;p&gt;本项目的前端页面：&lt;a href=&#34;https://github.com/ks233/ja-learner-webview&#34;&gt;ks233/ja-learner-webview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;开坑的想法主要来源于 &lt;a href=&#34;https://github.com/project-yuki/YUKI&#34;&gt;YUKI 翻译器&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/Translation-Aggregator/Translation-Aggregator&#34;&gt;Translation-Aggregator&lt;/a&gt;，前者支持了丰富的翻译接口，内置了文本提取功能，但使用起来比较复杂，且缺少快速查词的功能；后者虽然可以鼠标悬停查词，但只有日英词典、界面比较古老，而且翻译接口几乎炸完了，于是我决定搓一个更简单、更符合自己需求的工具。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taishi-i/awesome-japanese-nlp-resources&#34;&gt;taishi-i/awesome-japanese-nlp-resources&lt;/a&gt; 有非常多日语相关的工具和资源，对我开发这个项目帮助很大。&lt;/p&gt; &#xA;&lt;h3&gt;使用的第三方库与框架&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;形态分析：&lt;a href=&#34;https://github.com/taku910/mecab&#34;&gt;taku910/mecab&lt;/a&gt; 的 .Net 移植版本 &lt;a href=&#34;https://github.com/kekyo/MeCab.DotNet&#34;&gt;kekyo/MeCab.DotNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;调用 ChatGPT：&lt;a href=&#34;https://github.com/OkGoDoIt/OpenAI-API-dotnet&#34;&gt;OkGoDoIt/OpenAI-API-dotnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;谷歌翻译：参考了 &lt;a href=&#34;https://github.com/FilipePS/Traduzir-paginas-web&#34;&gt;FilipePS/Traduzir-paginas-web&lt;/a&gt; 的 API 调用方式&lt;/li&gt; &#xA; &lt;li&gt;单词搜索：&lt;a href=&#34;https://www.mojidict.com/&#34;&gt;MOJi 辞書&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Webview 页面：Vite + Vue&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>