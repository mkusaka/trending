<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:34:44Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MicrosoftLearning/AZ500-AzureSecurityTechnologies</title>
    <updated>2022-07-20T01:34:44Z</updated>
    <id>tag:github.com,2022-07-20:/MicrosoftLearning/AZ500-AzureSecurityTechnologies</id>
    <link href="https://github.com/MicrosoftLearning/AZ500-AzureSecurityTechnologies" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Azure Security Technologies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AZ-500: Microsoft Azure Security Technologies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://microsoftlearning.github.io/AZ500-AzureSecurityTechnologies/&#34;&gt;Link to labs (HTML format)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Are you a MCT?&lt;/strong&gt; - Have a look at our &lt;a href=&#34;https://microsoftlearning.github.io/MCT-User-Guide/&#34;&gt;GitHub User Guide for MCTs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What are we doing?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To support this course, we will need to make frequent updates to the course content to keep it current with the Azure services used in the course. We are publishing the lab instructions and lab files on GitHub to allow for open contributions between the course authors and MCTs to keep the content current with changes in the Azure platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We hope that this brings a sense of collaboration to the labs like we&#39;ve never had before - when Azure changes and you find it first during a live delivery, go ahead and make an enhancement right in the lab source. Help your fellow MCTs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How should I use these files relative to the released MOC files?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The instructor handbook and PowerPoints are still going to be your primary source for teaching the course content.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;These files on GitHub are designed to be used in conjunction with the student handbook, but are in GitHub as a central repository so MCTs and course authors can have a shared source for the latest lab files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It will be recommended that for every delivery, trainers check GitHub for any changes that may have been made to support the latest Azure services, and get the latest files for their delivery.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What about changes to the student handbook?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We will review the student handbook on a quarterly basis and update through the normal MOC release channels as needed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I contribute?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Any MCT can submit a pull request to the code or content in the GitHub repo. Microsoft and the course author will triage and include content and lab code changes as needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can submit bugs, changes, improvement and ideas. Find a new Azure feature before we have? Submit a new demo!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;h3&gt;Classroom Materials&lt;/h3&gt; &#xA;&lt;p&gt;It is strongly recommended that MCTs and Partners access these materials and in turn, provide them separately to students. Pointing students directly to GitHub to access Lab steps as part of an ongoing class will require them to access yet another UI as part of the course, contributing to a confusing experience for the student. An explanation to the student regarding why they are receiving separate Lab instructions can highlight the nature of an always-changing cloud-based interface and platform. Microsoft Learning support for accessing files on GitHub and support for navigation of the GitHub site is limited to MCTs teaching this course only.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aspnetrun/run-aspnetcore-microservices</title>
    <updated>2022-07-20T01:34:44Z</updated>
    <id>tag:github.com,2022-07-20:/aspnetrun/run-aspnetcore-microservices</id>
    <link href="https://github.com/aspnetrun/run-aspnetcore-microservices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microservices on .Net platforms which used Asp.Net Web API, Docker, RabbitMQ, MassTransit, Grpc, Ocelot API Gateway, MongoDB, Redis, PostgreSQL, SqlServer, Dapper, Entity Framework Core, CQRS and Clean Architecture implementation. Also includes Cross-Cutting concerns like Implementing Centralized Distributed Logging with Elasticsearch, Kibana anâ€¦&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;UDEMY COURSE WITH DISCOUNTED - Step by Step Development of this Repository -&amp;gt; &lt;a href=&#34;https://www.udemy.com/course/microservices-architecture-and-implementation-on-dotnet/?couponCode=JULY22&#34;&gt;https://www.udemy.com/course/microservices-architecture-and-implementation-on-dotnet/?couponCode=JULY22&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the overall picture of &lt;strong&gt;implementations on microservices with .net tools&lt;/strong&gt; on real-world &lt;strong&gt;e-commerce microservices&lt;/strong&gt; project;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1147445/110304529-c5b70180-800c-11eb-832b-a2751b5bda76.png&#34; alt=&#34;microservices_remastered&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is a couple of microservices which implemented &lt;strong&gt;e-commerce&lt;/strong&gt; modules over &lt;strong&gt;Catalog, Basket, Discount&lt;/strong&gt; and &lt;strong&gt;Ordering&lt;/strong&gt; microservices with &lt;strong&gt;NoSQL (MongoDB, Redis)&lt;/strong&gt; and &lt;strong&gt;Relational databases (PostgreSQL, Sql Server)&lt;/strong&gt; with communicating over &lt;strong&gt;RabbitMQ Event Driven Communication&lt;/strong&gt; and using &lt;strong&gt;Ocelot API Gateway&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And here continuation of the main course -&amp;gt; &lt;a href=&#34;https://www.udemy.com/course/microservices-observability-resilience-monitoring-on-net/?referralCode=D162C050483C75452136&#34;&gt;Microservices Observability with Distributed Logging, Health Monitoring, Resilient and Fault Tolerance with using Polly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Check Explanation of this Repository on Medium&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/aspnetrun/microservices-architecture-on-net-3b4865eea03f&#34;&gt;Microservices Architecture on .NET with applying CQRS, Clean Architecture and Event-Driven Communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/aspnetrun/microservices-observability-resilience-monitoring-on-net-a5dfbdbb0fbd&#34;&gt;Microservices Observability, Resilience, Monitoring on .Net&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Whats Including In This Repository&lt;/h2&gt; &#xA;&lt;p&gt;We have implemented below &lt;strong&gt;features over the run-aspnetcore-microservices repository&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Catalog microservice which includes;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ASP.NET Core Web API application&lt;/li&gt; &#xA; &lt;li&gt;REST API principles, CRUD operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MongoDB database&lt;/strong&gt; connection and containerization&lt;/li&gt; &#xA; &lt;li&gt;Repository Pattern Implementation&lt;/li&gt; &#xA; &lt;li&gt;Swagger Open API implementation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Basket microservice which includes;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ASP.NET Web API application&lt;/li&gt; &#xA; &lt;li&gt;REST API principles, CRUD operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Redis database&lt;/strong&gt; connection and containerization&lt;/li&gt; &#xA; &lt;li&gt;Consume Discount &lt;strong&gt;Grpc Service&lt;/strong&gt; for inter-service sync communication to calculate product final price&lt;/li&gt; &#xA; &lt;li&gt;Publish BasketCheckout Queue with using &lt;strong&gt;MassTransit and RabbitMQ&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Discount microservice which includes;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ASP.NET &lt;strong&gt;Grpc Server&lt;/strong&gt; application&lt;/li&gt; &#xA; &lt;li&gt;Build a Highly Performant &lt;strong&gt;inter-service gRPC Communication&lt;/strong&gt; with Basket Microservice&lt;/li&gt; &#xA; &lt;li&gt;Exposing Grpc Services with creating &lt;strong&gt;Protobuf messages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;Dapper for micro-orm implementation&lt;/strong&gt; to simplify data access and ensure high performance&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL database&lt;/strong&gt; connection and containerization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Microservices Communication&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sync inter-service &lt;strong&gt;gRPC Communication&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Async Microservices Communication with &lt;strong&gt;RabbitMQ Message-Broker Service&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;RabbitMQ Publish/Subscribe Topic&lt;/strong&gt; Exchange Model&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;MassTransit&lt;/strong&gt; for abstraction over RabbitMQ Message-Broker system&lt;/li&gt; &#xA; &lt;li&gt;Publishing BasketCheckout event queue from Basket microservices and Subscribing this event from Ordering microservices&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;strong&gt;RabbitMQ EventBus.Messages library&lt;/strong&gt; and add references Microservices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ordering Microservice&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementing &lt;strong&gt;DDD, CQRS, and Clean Architecture&lt;/strong&gt; with using Best Practices&lt;/li&gt; &#xA; &lt;li&gt;Developing &lt;strong&gt;CQRS with using MediatR, FluentValidation and AutoMapper packages&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Consuming &lt;strong&gt;RabbitMQ&lt;/strong&gt; BasketCheckout event queue with using &lt;strong&gt;MassTransit-RabbitMQ&lt;/strong&gt; Configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SqlServer database&lt;/strong&gt; connection and containerization&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;Entity Framework Core ORM&lt;/strong&gt; and auto migrate to SqlServer when application startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;API Gateway Ocelot Microservice&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement &lt;strong&gt;API Gateways with Ocelot&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sample microservices/containers to reroute through the API Gateways&lt;/li&gt; &#xA; &lt;li&gt;Run multiple different &lt;strong&gt;API Gateway/BFF&lt;/strong&gt; container types&lt;/li&gt; &#xA; &lt;li&gt;The Gateway aggregation pattern in Shopping.Aggregator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WebUI ShoppingApp Microservice&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ASP.NET Core Web Application with Bootstrap 4 and Razor template&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;strong&gt;Ocelot APIs with HttpClientFactory&lt;/strong&gt; and &lt;strong&gt;Polly&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Microservices Cross-Cutting Implementations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementing &lt;strong&gt;Centralized Distributed Logging with Elastic Stack (ELK); Elasticsearch, Logstash, Kibana and SeriLog&lt;/strong&gt; for Microservices&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;strong&gt;HealthChecks&lt;/strong&gt; feature in back-end ASP.NET microservices&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;strong&gt;Watchdog&lt;/strong&gt; in separate service that can watch health and load across services, and report health about the microservices by querying with the HealthChecks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Microservices Resilience Implementations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Making Microservices more &lt;strong&gt;resilient Use IHttpClientFactory&lt;/strong&gt; to implement resilient HTTP requests&lt;/li&gt; &#xA; &lt;li&gt;Implement &lt;strong&gt;Retry and Circuit Breaker patterns&lt;/strong&gt; with exponential backoff with IHttpClientFactory and &lt;strong&gt;Polly policies&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Ancillary Containers&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;strong&gt;Portainer&lt;/strong&gt; for Container lightweight management UI which allows you to easily manage your different Docker environments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pgAdmin PostgreSQL Tools&lt;/strong&gt; feature rich Open Source administration and development platform for PostgreSQL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Docker Compose establishment with all microservices on docker;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Containerization of microservices&lt;/li&gt; &#xA; &lt;li&gt;Containerization of databases&lt;/li&gt; &#xA; &lt;li&gt;Override Environment variables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Run The Project&lt;/h2&gt; &#xA;&lt;p&gt;You will need the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-core/5&#34;&gt;.Net Core 5 or later&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;Follow these steps to get your development environment set up: (Before Run Start the Docker Desktop)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Once Docker for Windows is installed, go to the &lt;strong&gt;Settings &amp;gt; Advanced option&lt;/strong&gt;, from the Docker icon in the system tray, to configure the minimum amount of memory and CPU like so:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory: 4 GB&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;CPU: 2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;At the root directory which include &lt;strong&gt;docker-compose.yml&lt;/strong&gt; files, run below command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you get connection timeout error Docker for Mac please &lt;a href=&#34;https://github.com/aspnetrun/run-aspnetcore-microservices/issues/33&#34;&gt;Turn Off Docker&#39;s &#34;Experimental Features&#34;.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Wait for docker compose all microservices. Thatâ€™s it! (some microservices need extra time to work so please wait if not worked in first shut)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can &lt;strong&gt;launch microservices&lt;/strong&gt; as below urls:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Catalog API -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8000/swagger/index.html&#34;&gt;http://host.docker.internal:8000/swagger/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Basket API -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8001/swagger/index.html&#34;&gt;http://host.docker.internal:8001/swagger/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Discount API -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8002/swagger/index.html&#34;&gt;http://host.docker.internal:8002/swagger/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ordering API -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8004/swagger/index.html&#34;&gt;http://host.docker.internal:8004/swagger/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Shopping.Aggregator -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8005/swagger/index.html&#34;&gt;http://host.docker.internal:8005/swagger/index.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;API Gateway -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8010/Catalog&#34;&gt;http://host.docker.internal:8010/Catalog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rabbit Management Dashboard -&amp;gt; &lt;a href=&#34;http://host.docker.internal:15672&#34;&gt;http://host.docker.internal:15672&lt;/a&gt;&lt;/strong&gt; -- guest/guest&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Portainer -&amp;gt; &lt;a href=&#34;http://host.docker.internal:9000&#34;&gt;http://host.docker.internal:9000&lt;/a&gt;&lt;/strong&gt; -- admin/admin1234&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgAdmin PostgreSQL -&amp;gt; &lt;a href=&#34;http://host.docker.internal:5050&#34;&gt;http://host.docker.internal:5050&lt;/a&gt;&lt;/strong&gt; -- &lt;a href=&#34;mailto:admin@aspnetrun.com&#34;&gt;admin@aspnetrun.com&lt;/a&gt;/admin1234&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Elasticsearch -&amp;gt; &lt;a href=&#34;http://host.docker.internal:9200&#34;&gt;http://host.docker.internal:9200&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Kibana -&amp;gt; &lt;a href=&#34;http://host.docker.internal:5601&#34;&gt;http://host.docker.internal:5601&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Web Status -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8007&#34;&gt;http://host.docker.internal:8007&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Web UI -&amp;gt; &lt;a href=&#34;http://host.docker.internal:8006&#34;&gt;http://host.docker.internal:8006&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Launch &lt;a href=&#34;http://host.docker.internal:8007&#34;&gt;http://host.docker.internal:8007&lt;/a&gt; in your browser to view the Web Status. Make sure that every microservices are healthy.&lt;/li&gt; &#xA; &lt;li&gt;Launch &lt;a href=&#34;http://host.docker.internal:8006&#34;&gt;http://host.docker.internal:8006&lt;/a&gt; in your browser to view the Web UI. You can use Web project in order to &lt;strong&gt;call microservices over API Gateway&lt;/strong&gt;. When you &lt;strong&gt;checkout the basket&lt;/strong&gt; you can follow &lt;strong&gt;queue record on RabbitMQ dashboard&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1147445/81381837-08226000-9116-11ea-9489-82645b8dbfc4.png&#34; alt=&#34;mainscreen2&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are running this application in macOS then use &lt;code&gt;docker.for.mac.localhost&lt;/code&gt; as DNS name in &lt;code&gt;.env&lt;/code&gt; file and the above URLs instead of &lt;code&gt;host.docker.internal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mehmet Ozkaya&lt;/strong&gt; - &lt;em&gt;Initial work&lt;/em&gt; - &lt;a href=&#34;https://github.com/mehmetozkaya&#34;&gt;mehmetozkaya&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/aspnetrun/run-core/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project. Check also &lt;a href=&#34;https://aspnetrun.github.io/run-aspnetcore-angular-realworld/&#34;&gt;gihtub page of repository.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/azure-cosmos-dotnet-v3</title>
    <updated>2022-07-20T01:34:44Z</updated>
    <id>tag:github.com,2022-07-20:/Azure/azure-cosmos-dotnet-v3</id>
    <link href="https://github.com/Azure/azure-cosmos-dotnet-v3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET SDK for Azure Cosmos DB for the core SQL API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Azure.Cosmos&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.Azure.Cosmos.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Azure.Cosmos&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Microsoft.Azure.Cosmos.svg?sanitize=true&#34; alt=&#34;NuGet Prerelease&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Microsoft Azure Cosmos DB .NET SDK Version 3&lt;/h1&gt; &#xA;&lt;p&gt;This client library enables client applications to connect to Azure Cosmos via the SQL API. Azure Cosmos is a globally distributed, multi-model database service. For more information, refer to &lt;a href=&#34;https://azure.microsoft.com/services/cosmos-db/&#34;&gt;https://azure.microsoft.com/services/cosmos-db/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CosmosClient client = new CosmosClient(&#34;https://mycosmosaccount.documents.azure.com:443/&#34;, &#34;mysupersecretkey&#34;);&#xA;Database database = await client.CreateDatabaseIfNotExistsAsync(&#34;MyDatabaseName&#34;);&#xA;Container container = await database.CreateContainerIfNotExistsAsync(&#xA;    &#34;MyContainerName&#34;,&#xA;    &#34;/partitionKeyPath&#34;,&#xA;    400);&#xA;&#xA;// Create an item&#xA;dynamic testItem = new { id = &#34;MyTestItemId&#34;, partitionKeyPath = &#34;MyTestPkValue&#34;, details = &#34;it&#39;s working&#34;, status = &#34;done&#34; };&#xA;ItemResponse&amp;lt;dynamic&amp;gt; createResponse = await container.CreateItemAsync(testItem);&#xA;&#xA;// Query for an item&#xA;using (FeedIterator&amp;lt;dynamic&amp;gt; feedIterator = await container.GetItemQueryIterator&amp;lt;dynamic&amp;gt;(&#xA;    &#34;select * from T where T.status = &#39;done&#39;&#34;))&#xA;{&#xA;    while (feedIterator.HasMoreResults)&#xA;    {&#xA;        FeedResponse&amp;lt;dynamic&amp;gt; response = await feedIterator.ReadNextAsync();&#xA;        foreach (var item in response)&#xA;        {&#xA;            Console.WriteLine(item);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install via &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Azure.Cosmos/&#34;&gt;Nuget.org&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Install-Package Microsoft.Azure.Cosmos&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/sql-api-get-started&#34;&gt;Get Started APP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/azure-cosmos-dotnet-v3/tree/master/Microsoft.Azure.Cosmos.Samples&#34;&gt;GitHub samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/sql/best-practice-dotnet&#34;&gt;SDK Best practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/markjbrown/azure-cosmosdb-dotnet/tree/master/samples/MultiMaster&#34;&gt;MultiMaster samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/sql-api-resources&#34;&gt;Resource Model of Azure Cosmos DB Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/rest/api/documentdb/documentdb-resource-uri-syntax-for-rest&#34;&gt;Cosmos DB Resource URI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/partition-data&#34;&gt;Partitioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/sql-api-sql-query&#34;&gt;Introduction to SQL API of Azure Cosmos DB Service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/api/microsoft.azure.cosmos?view=azure-dotnet&#34;&gt;SDK API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/azure-documentdb-dotnet/raw/master/docs/documentdb-nosql-local-emulator.md&#34;&gt;Using emulator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/azure-documentdb-dotnet/raw/master/docs/documentdb-sdk_capture_etl.md&#34;&gt;Capture traces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/azure-cosmos-dotnet-v3/raw/master/changelog.md&#34;&gt;Release notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/azure/cosmos-db/troubleshoot-dot-net-sdk&#34;&gt;Diagnose and troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Microsoft Open Source Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Microsoft Code of Conduct FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with questions or concerns&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
</feed>