<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-19T01:25:36Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ProtonVPN/win-app</title>
    <updated>2023-09-19T01:25:36Z</updated>
    <id>tag:github.com,2023-09-19:/ProtonVPN/win-app</id>
    <link href="https://github.com/ProtonVPN/win-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official ProtonVPN Windows app&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Proton VPN Windows app&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2023 Proton AG&lt;/p&gt; &#xA;&lt;p&gt;This repository holds the Proton VPN Windows app. For a detailed build information see &lt;a href=&#34;https://raw.githubusercontent.com/ProtonVPN/win-app/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt;. For licensing information see &lt;a href=&#34;https://raw.githubusercontent.com/ProtonVPN/win-app/master/COPYING.md&#34;&gt;COPYING&lt;/a&gt;. For contribution policy see &lt;a href=&#34;https://raw.githubusercontent.com/ProtonVPN/win-app/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://protonvpn.com&#34;&gt;Proton VPN&lt;/a&gt; Windows app is intended for every Proton VPN service user, paid or free and supports all functionalities available to authenticated users (user signup instead happens on the web site).&lt;/p&gt; &#xA;&lt;p&gt;You can download the latest stable release, either on &lt;a href=&#34;https://protonvpn.com/download&#34;&gt;Proton VPN official website&lt;/a&gt; or directly on the &lt;a href=&#34;https://github.com/ProtonVPN/win-app/releases/latest&#34;&gt;official GitHub repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The application&lt;/h3&gt; &#xA;&lt;p&gt;The app consists of these interacting parts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Proton VPN GUI application&lt;/li&gt; &#xA; &lt;li&gt;Proton VPN Service&lt;/li&gt; &#xA; &lt;li&gt;OpenVPN&lt;/li&gt; &#xA; &lt;li&gt;TAP adapter&lt;/li&gt; &#xA; &lt;li&gt;Split Tunnel driver&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;GUI application&lt;/h4&gt; &#xA;&lt;p&gt;The Proton VPN GUI app is installed into &#34;C:\Program Files\Proton\VPN&amp;lt;version&amp;gt;&#34; directory by default. The main executable is &#34;ProtonVPN.exe&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Proton VPN GUI app starts Proton VPN Service when launched and stops the service when closed.&lt;/p&gt; &#xA;&lt;p&gt;App logs are saved to &#34;%LOCALAPPDATA%\ProtonVPN\Logs&#34; directory.&lt;/p&gt; &#xA;&lt;p&gt;The Proton VPN build using Debug configuration optionally loads its configuration from file &#34;ProtonVPN.config&#34; in the app directory. This file is not deployed during install. If the configuration file doesn&#39;t exist or contains not valid values the app tries to save default configuration used in the app.&lt;/p&gt; &#xA;&lt;p&gt;To monitor Http traffic of Proton VPN GUI app using Fiddler or another tool, you might need to disable TLS certificate pinning. To disable TLS certificate pinning the configuration file with empty &#34;TlsPinningConfig&#34; value should be provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    ...&#xA;    &#34;TlsPinningConfig&#34;: {}&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Proton VPN Service&lt;/h4&gt; &#xA;&lt;p&gt;The Windows service &#34;ProtonVPN Service&#34; is installed into &#34;C:\Program Files\Proton\VPN&amp;lt;version&amp;gt;&#34; directory by default. Service executable is &#34;ProtonVPNService.exe&#34;. The service is started and stopped by the Proton VPN GUI app.&lt;/p&gt; &#xA;&lt;p&gt;During installation, the service is configured to be started and stopped by the unprivileged interactive users.&lt;/p&gt; &#xA;&lt;p&gt;Service executable supports installation and uninstallation of service. Passing &#34;install&#34; on command line to &#34;ProtonVPNService.exe&#34; installs the service, passing &#34;uninstall&#34; - uninstalls. This installation method doesn&#39;t configure service security settings.&lt;/p&gt; &#xA;&lt;p&gt;Service is responsible for interaction with OpenVPN, managing Windows firewall and Split Tunnel driver.&lt;/p&gt; &#xA;&lt;p&gt;Service logs are saved to &#34;%ALLUSERSPROFILE%\ProtonVPN\Logs&#34; directory.&lt;/p&gt; &#xA;&lt;h4&gt;OpenVPN&lt;/h4&gt; &#xA;&lt;p&gt;The Proton VPN uses OpenVPN for maintaining a VPN tunnel. The new OpenVPN process is started on each connect to a VPN and closed on disconnect. Communication with the OpenVPN process is maintained through TCP management interface.&lt;/p&gt; &#xA;&lt;p&gt;OpenVPN is installed into &#34;C:\Program Files\Proton\VPN&amp;lt;version&amp;gt;\Resources&#34; directory by default. The OpenVPN config file is static, it doesn&#39;t change for each VPN server.&lt;/p&gt; &#xA;&lt;p&gt;The OpenVPN is built from official source by applying a patch to support Proton VPN specific TAP adapter. See &lt;a href=&#34;https://github.com/ProtonVPN/win-openvpn&#34;&gt;win-openvpn&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h4&gt;TAP adapter&lt;/h4&gt; &#xA;&lt;p&gt;TAP adapter &#34;TAP-ProtonVPN Windows Adapter V9&#34; is used by the OpenVPN.&lt;/p&gt; &#xA;&lt;p&gt;The TAP adapter is built from official source by applying a patch to have Proton VPN specific name and identification. See &lt;a href=&#34;https://github.com/ProtonVPN/win-tap-adapter&#34;&gt;win-tap-adapter&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h4&gt;Callout driver&lt;/h4&gt; &#xA;&lt;p&gt;The kernel-mode driver &#34;ProtonVPN Callout Driver&#34; is used for redirecting socket bindings when Split Tunnel is enabled and preventing DNS leak by sending SERVFAIL response packet for DNS requests which were made from other interfaces than Proton VPN uses.&lt;/p&gt; &#xA;&lt;p&gt;The driver is installed as a system service. It is started when connecting to VPN and stopped when disconnecting by Proton VPN Service.&lt;/p&gt; &#xA;&lt;h2&gt;Folder structure&lt;/h2&gt; &#xA;&lt;p&gt;The main repository folder contains the .NET Visual Studio solution of the Proton VPN Windows app named ProtonVPN.&lt;/p&gt; &#xA;&lt;h3&gt;Folder &#34;ci&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Contains continuous integration scripts.&lt;/p&gt; &#xA;&lt;h3&gt;Folder &#34;packages&#34;&lt;/h3&gt; &#xA;&lt;p&gt;It contains NuGet packages of the ProtonVPN solution.&lt;/p&gt; &#xA;&lt;h3&gt;Folder &#34;Setup&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This folder contains Advanced Installer setup project files, resources included in the installer, and built installer files. Subfolders contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Images&#34; - images for inclusion into the installer.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Installers&#34; - built Proton VPN installer files.&lt;/li&gt; &#xA; &lt;li&gt;&#34;ProtonVPNTap-SetupFiles&#34; - built TAP adapter installer files. The latest successfully built TAP adapter installer file is required to build the Proton VPN installer.&lt;/li&gt; &#xA; &lt;li&gt;&#34;SplitTunnel&#34; - SplitTunnel Callout driver for inclusion into the installer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Folder &#34;src&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This folder contains Visual Studio solution projects.&lt;/p&gt; &#xA;&lt;h3&gt;Folder &#34;src\bin&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This folder contains Visual Studio project build output. This folder can be safely deleted as it&#39;s content is recreated by building the solution.&lt;/p&gt; &#xA;&lt;h3&gt;Folder &#34;src\srp&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This folder contains GIT submodule of &lt;a href=&#34;https://github.com/ProtonMail/go-srp&#34;&gt;ProtonMail SRP library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Folder &#34;test&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This folder contains test projects of the ProtonVPN solution.&lt;/p&gt; &#xA;&lt;h2&gt;Solution&lt;/h2&gt; &#xA;&lt;p&gt;Proton VPN Windows app is created using C# and C++ programming languages, WPF and MVVM technologies. The Visual Studio solution consists of a series of projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.App&lt;/strong&gt; - the main project which builds to Proton VPN GUI app executable. It contains startup logic and GUI (view models and views).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.CalloutDriver&lt;/strong&gt; - the callout driver written in C++ used for split tunneling and DNS leak protection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Common&lt;/strong&gt; - the classes shared between projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Core&lt;/strong&gt; - the business logic of the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.ErrorMessage&lt;/strong&gt; - displays an error message when the application cannot be run. Builds to an executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.InstallActions&lt;/strong&gt; - the C++ actions used by the app installer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.IpFilter&lt;/strong&gt; - the C++ library for configuring Windows firewall filters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Native&lt;/strong&gt; - the C# wrapper around Windows system libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.NetworkFilter&lt;/strong&gt; - the C# wrapper around C++ library for configuring Windows firewall.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.NetworkUtil&lt;/strong&gt; - the C++ library for changing network configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Resource&lt;/strong&gt; - contains resources shared between projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Service&lt;/strong&gt; - the Windows service which handles VPN, Windows firewall and Split Tunneling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Service.Contract&lt;/strong&gt; - contains the service contract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.TapInstaller&lt;/strong&gt; - the TAP install action used in the app installer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.TlsVerify&lt;/strong&gt; - the command line utility which verifies the VPN server certificate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Update&lt;/strong&gt; - the application update module used in the update service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.UpdateService&lt;/strong&gt; - the Windows service which handles the app updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.UpdateServiceContract&lt;/strong&gt; - contains the update service contract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ProtonVPN.Vpn&lt;/strong&gt; - the OpenVPN management module used in the service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Solution folder &#34;Test&#34; contains test projects.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>malcomvetter/Periscope</title>
    <updated>2023-09-19T01:25:36Z</updated>
    <id>tag:github.com,2023-09-19:/malcomvetter/Periscope</id>
    <link href="https://github.com/malcomvetter/Periscope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully Integrated Adversarial Operations Toolkit (C2, stagers, agents, ephemeral infrastructure, phishing engine, and automation)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/malcomvetter/Periscope/main/images/periscope-logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: This is a &lt;em&gt;responsibly disclosed&lt;/em&gt; public version of a privately developed, complex, and fairly comprehensive offensive security C2 (command and control) toolset with its own phishing engine and remnants of a fully automated CI/CD deployment methodology. It is intentionally published in such a way that it may be used for &lt;em&gt;educational purposes&lt;/em&gt; but will require considerable engineering expertise to make it fully functional.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For example, the agent projects are published incompletely and will not result in ready to use malware.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/malcomvetter/Periscope/main/wiki/index.md&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; READ THE WIKI &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chunliu/AzureDesignStudio</title>
    <updated>2023-09-19T01:25:36Z</updated>
    <id>tag:github.com,2023-09-19:/chunliu/AzureDesignStudio</id>
    <link href="https://github.com/chunliu/AzureDesignStudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web app that helps you create the architecture design diagram for your Azure solutions and automatically generate IaC code from it.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure Design Studio&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chunliu/AzureDesignStudio/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/chunliu/AzureDesignStudio/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Azure Design Studio is a web application designed to simplify and streamline the process of creating solution architectures for Azure. With a focus on ease of use, efficiency, and consistency, it offers several key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual design&lt;/strong&gt;: Create solution architecture for Azure using a visually appealing and consistent styling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt;: Ensure your design adheres to the rules and constraints of Azure resources to reduce errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Export&lt;/strong&gt;: Export your design as images for easy integration into your documents and presentations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cloud storage&lt;/strong&gt;: Save your design in the cloud for convenient access from any location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Infrastructure as Code (IaC) generation&lt;/strong&gt;: Automatically generate IaC for your design, with support for both ARM templates and Bicep.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The primary goal of Azure Design Studio is to help users create high-quality solution architectures for Azure while reducing the learning curve associated with ARM and Bicep. By improving the overall user experience, Azure Design Studio enables more efficient design and deployment of solutions on Azure.&lt;/p&gt; &#xA;&lt;p&gt;As an award winning project, Azure Design Studio won the &lt;a href=&#34;https://www.credly.com/badges/08684d43-a00e-418c-8cf3-4b5eb48f601f/linked_in_profile&#34;&gt;3rd Place Winner award&lt;/a&gt; of &lt;strong&gt;Microsoft Global Hackathon 2022&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chunliu/AzureDesignStudio/main/assets/AzureDesignStudio.gif&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;All feedback and suggestions are welcome. Please feel free to create an issue if you have any.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build and debug the code locally, please follow the instruction below. All PRs are welcome too.&lt;/p&gt; &#xA;&lt;h3&gt;Build it locally&lt;/h3&gt; &#xA;&lt;p&gt;To build and test the code locally, you will need the following tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022 (latest version)&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Azure CLI, if you want to debug and test the code locally.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Docker Desktop, if you want to build the docker image locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build the code, clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/chunliu/AzureDesignStudio.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then open the solution in Visual Studio 2022.&lt;/p&gt; &#xA;&lt;p&gt;To launch and debug the code locally, set &lt;code&gt;AzureDesignStudio.Server&lt;/code&gt; as the startup project in Visual Studio 2022.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks and Libraries&lt;/h2&gt; &#xA;&lt;p&gt;Azure Design Studio is built on top of the following frameworks and libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://antblazor.com/en-US/&#34;&gt;Ant Design Blazor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Blazor-Diagrams/Blazor.Diagrams&#34;&gt;Blazor.Diagrams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://automapper.org/&#34;&gt;AutoMapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IvanJosipovic/BlazorApplicationInsights&#34;&gt;BlazorApplicationInsights&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Azure Design Studio is a personal project without any warranty. It is neither an official product from Microsoft nor supported by Microsoft. Use it at your own risk.&lt;/p&gt;</summary>
  </entry>
</feed>