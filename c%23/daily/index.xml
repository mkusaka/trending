<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-18T01:23:24Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/semantic-memory</title>
    <updated>2023-08-18T01:23:24Z</updated>
    <id>tag:github.com,2023-08-18:/microsoft/semantic-memory</id>
    <link href="https://github.com/microsoft/semantic-memory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Index and query any data using LLM and natural language, tracking sources and showing citations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Semantic Memory&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Semantic Memory&lt;/strong&gt; is an open-source library and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/dotnet/Service&#34;&gt;service&lt;/a&gt; specialized in the efficient indexing of datasets through custom continuous data pipelines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/semantic-memory/assets/371009/31894afa-d19e-4e9b-8d0f-cb889bf5c77f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Utilizing advanced embeddings and LLMs, the system enables Natural Language querying for obtaining answers from the indexed data, complete with citations and links to the original sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/semantic-memory/assets/371009/c5f0f6c3-814f-45bf-b055-063f23ed80ea&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Designed for seamless integration with &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;, Semantic Memory enhances data-driven features in applications built using SK.&lt;/p&gt; &#xA;&lt;h3&gt;Supported backends&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ÜóÔ∏è Vector storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Cognitive Search&lt;/li&gt; &#xA;   &lt;li&gt;Qdrant&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üìÄ Content storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Blobs&lt;/li&gt; &#xA;   &lt;li&gt;Local file system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚è≥ Asynchronous ingestion queues &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Queues&lt;/li&gt; &#xA;   &lt;li&gt;RabbitMQ&lt;/li&gt; &#xA;   &lt;li&gt;Local file based queue&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;NOTE&lt;/strong&gt;: the documentation below is work in progress, will evolve quickly as is not fully functional yet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Semantic Memory in serverless mode&lt;/h1&gt; &#xA;&lt;p&gt;Semantic Memory works and scales at best when running as a service, allowing to ingest thousands of documents and information without blocking your app.&lt;/p&gt; &#xA;&lt;p&gt;However, you can use Semantic Memory also serverless, embedding the &lt;code&gt;MemoryServerlessClient&lt;/code&gt; in your app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Importing documents into your Semantic Memory can be as simple as this:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Use .NET Host.CreateDefaultBuilder() or WebApplication.CreateBuilder() to prepare your service provider&#xA;var memory = new Memory(serviceProvider);&#xA;&#xA;// Import a file&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;, tags: new() { { &#34;user&#34;, &#34;Blake&#34; } });&#xA;&#xA;// Import multiple files and apply multiple tags&#xA;await memory.ImportDocumentAsync(new Document(&#34;file001&#34;)&#xA;    .AddFile(&#34;business-plan.docx&#34;)&#xA;    .AddFile(&#34;project-timeline.pdf&#34;)&#xA;    .AddTag(&#34;user&#34;, &#34;Blake&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;    .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Asking questions:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var answer1 = await memory.AskAsync(&#34;How many people attended the meeting?&#34;);&#xA;&#xA;var answer2 = await memory.AskAsync(&#34;what&#39;s the project timeline?&#34;, filter: new MemoryFilter().ByTag(&#34;user&#34;, &#34;Blake&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The code leverages the default documents ingestion pipeline:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Extract text: recognize the file format and extract the information&lt;/li&gt; &#xA; &lt;li&gt;Partition the text in small chunks, to optimize search&lt;/li&gt; &#xA; &lt;li&gt;Extract embedding using an LLM embedding generator&lt;/li&gt; &#xA; &lt;li&gt;Save embedding into a vector index such as &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/search/vector-search-overview&#34;&gt;Azure Cognitive Search&lt;/a&gt;, &lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt; or other DBs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Documents are organized by users, safeguarding their private information. Furthermore, memories can be categorized and structured using &lt;strong&gt;tags&lt;/strong&gt;, enabling efficient search and retrieval through faceted navigation.&lt;/p&gt; &#xA;&lt;h1&gt;Data lineage, citations&lt;/h1&gt; &#xA;&lt;p&gt;All memories and answers are fully correlated to the data provided. When producing an answer, Semantic Memory includes all the information needed to verify its accuracy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await memory.ImportFileAsync(&#34;NASA-news.pdf&#34;);&#xA;&#xA;var answer = await memory.AskAsync(&#34;Any news from NASA about Orion?&#34;);&#xA;&#xA;Console.WriteLine(answer.Result + &#34;/n&#34;);&#xA;&#xA;foreach (var x in answer.RelevantSources)&#xA;{&#xA;    Console.WriteLine($&#34;  * {x.SourceName} -- {x.Partitions.First().LastUpdate:D}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on Wednesday, August 2, at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;NASA-news.pdf -- Tuesday, August 1, 2023&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using Semantic Memory Service&lt;/h2&gt; &#xA;&lt;p&gt;Depending on your scenarios, you might want to run all the code &lt;strong&gt;locally inside your process, or remotely through an asynchronous service.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re importing small files, and need only C# or only Python, and can block the process during the import, local-in-process execution can be fine, using the &lt;strong&gt;MemoryServerlessClient&lt;/strong&gt; seen above.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are in one of these scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;d just like a web service to import data and send queries to answer&lt;/li&gt; &#xA; &lt;li&gt;My app is written in &lt;strong&gt;TypeScript, Java, Rust, or some other language&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want to define &lt;strong&gt;custom pipelines mixing multiple languages&lt;/strong&gt; like Python, TypeScript, etc&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m importing &lt;strong&gt;big documents that can require minutes to process&lt;/strong&gt;, and I don&#39;t want to block the user interface&lt;/li&gt; &#xA; &lt;li&gt;I need memory import to &lt;strong&gt;run independently, supporting failures and retry logic&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;then you can deploy Semantic Memory as a service, plugging in the default handlers or your custom Python/TypeScript/Java/etc. handlers, and leveraging the asynchronous non-blocking memory encoding process, sending documents and asking questions using the &lt;strong&gt;MemoryWebClient&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/dotnet/Service/README.md&#34;&gt;Here&lt;/a&gt; you can find a complete set of instruction about &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/dotnet/Service/README.md&#34;&gt;how to run the Semantic Memory service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to give the service a quick test, use the following command to &lt;strong&gt;start the Semantic Memory Service&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On WSL / Linux / MacOS:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet/Service&#xA;./setup.sh&#xA;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On Windows:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet/Service&#xA;setup.cmd&#xA;run.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;To import files using Semantic Memory &lt;strong&gt;web service&lt;/strong&gt;, use &lt;code&gt;MemoryWebClient&lt;/code&gt;:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;#reference dotnet/ClientLib/ClientLib.csproj&#xA;&#xA;var memory = new MemoryWebClient(&#34;http://127.0.0.1:9001&#34;); // &amp;lt;== URL where the web service is running&#xA;&#xA;// Import a file (default user)&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;);&#xA;&#xA;// Import a file specifying a Document ID, User and Tags&#xA;await memory.ImportDocumentAsync(&#34;business-plan.docx&#34;,&#xA;    new DocumentDetails(&#34;user@some.email&#34;, &#34;file001&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;        .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Getting answers via the web service&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl http://127.0.0.1:9001/ask -d&#39;{&#34;query&#34;:&#34;Any news from NASA about Orion?&#34;}&#39; -H &#39;Content-Type: application/json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Query&#34;: &#34;Any news from NASA about Orion?&#34;,&#xA;  &#34;Text&#34;: &#34;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on August 2nd at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&#34;,&#xA;  &#34;RelevantSources&#34;: [&#xA;    {&#xA;      &#34;Link&#34;: &#34;...&#34;,&#xA;      &#34;SourceContentType&#34;: &#34;application/pdf&#34;,&#xA;      &#34;SourceName&#34;: &#34;file5-NASA-news.pdf&#34;,&#xA;      &#34;Partitions&#34;: [&#xA;        {&#xA;          &#34;Text&#34;: &#34;Skip to main content\nJul 28, 2023\nMEDIA ADVISORY M23-095\nNASA Invites Media to See Recovery Craft for\nArtemis Moon Mission\n(/sites/default/Ô¨Åles/thumbnails/image/ksc-20230725-ph-fmx01_0003orig.jpg)\nAboard the USS John P. Murtha, NASA and Department of Defense personnel practice recovery operations for Artemis II in July. A\ncrew module test article is used to help verify the recovery team will be ready to recovery the Artemis II crew and the Orion spacecraft.\nCredits: NASA/Frank Michaux\nMedia are invited to see the new test version of NASA‚Äôs Orion spacecraft and the hardware teams will use\nto recover the capsule and astronauts upon their return from space during the Artemis II\n(http://www.nasa.gov/artemis-ii) mission. The event will take place at 11 a.m. PDT on Wednesday, Aug. 2,\nat Naval Base San Diego.\nPersonnel involved in recovery operations from NASA, the U.S. Navy, and the U.S. Air Force will be\navailable to speak with media.\nU.S. media interested in attending must RSVP by 4&amp;nbsp;p.m., Monday, July 31, to the Naval Base San Diego\nPublic AÔ¨Äairs (mailto:nbsd.pao@us.navy.mil) or 619-556-7359.\nOrion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n1 of 3 7/28/23, 4:51 PMTeams are currently conducting the Ô¨Årst in a series of tests in the PaciÔ¨Åc Ocean to demonstrate and\nevaluate the processes, procedures, and hardware for recovery operations (https://www.nasa.gov\n/exploration/systems/ground/index.html) for crewed Artemis missions. The tests will help prepare the\nteam for Artemis II, NASA‚Äôs Ô¨Årst crewed mission under Artemis that will send four astronauts in Orion\naround the Moon to checkout systems ahead of future lunar missions.\nThe Artemis II crew ‚Äì NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and CSA\n(Canadian Space Agency) astronaut Jeremy Hansen ‚Äì will participate in recovery testing at sea next year.\nFor more information about Artemis, visit:\nhttps://www.nasa.gov/artemis (https://www.nasa.gov/artemis)\n-end-\nRachel Kraft\nHeadquarters, Washington\n202-358-1100\nrachel.h.kraft@nasa.gov (mailto:rachel.h.kraft@nasa.gov)\nMadison Tuttle\nKennedy Space Center, Florida\n321-298-5868\nmadison.e.tuttle@nasa.gov (mailto:madison.e.tuttle@nasa.gov)\nLast Updated: Jul 28, 2023\nEditor: Claire O‚ÄôShea\nTags:&amp;nbsp; Artemis (/artemisprogram),Ground Systems (http://www.nasa.gov/exploration/systems/ground\n/index.html),Kennedy Space Center (/centers/kennedy/home/index.html),Moon to Mars (/topics/moon-to-\nmars/),Orion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n2 of 3 7/28/23, 4:51 PM&#34;,&#xA;          &#34;Relevance&#34;: 0.8430657,&#xA;          &#34;SizeInTokens&#34;: 863,&#xA;          &#34;LastUpdate&#34;: &#34;2023-08-01T08:15:02-07:00&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can find a &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/dotnet-WebClient/&#34;&gt;full example here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom memory ingestion pipelines&lt;/h2&gt; &#xA;&lt;p&gt;On the other hand, if you need a custom data pipeline, you can also customize the steps, which will be handled by your custom business logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = AppBuilder.Build();&#xA;var storage = app.Services.GetService&amp;lt;IContentStorage&amp;gt;();&#xA;&#xA;// Use a local, synchronous, orchestrator&#xA;var orchestrator = new InProcessPipelineOrchestrator(storage, app.Services);&#xA;&#xA;// Define custom .NET handlers&#xA;var step1 = new MyHandler1(&#34;step1&#34;, orchestrator);&#xA;var step2 = new MyHandler2(&#34;step2&#34;, orchestrator);&#xA;var step3 = new MyHandler3(&#34;step3&#34;, orchestrator);&#xA;await orchestrator.AddHandlerAsync(step1);&#xA;await orchestrator.AddHandlerAsync(step2);&#xA;await orchestrator.AddHandlerAsync(step3);&#xA;&#xA;// Instantiate a custom pipeline&#xA;var pipeline = orchestrator&#xA;    .PrepareNewFileUploadPipeline(&#34;user-id-1&#34;, &#34;mytest&#34;, new[] { &#34;memory-collection&#34; })&#xA;    .AddUploadFile(&#34;file1&#34;, &#34;file1.docx&#34;, &#34;file1.docx&#34;)&#xA;    .AddUploadFile(&#34;file2&#34;, &#34;file2.pdf&#34;, &#34;file2.pdf&#34;)&#xA;    .Then(&#34;step1&#34;)&#xA;    .Then(&#34;step2&#34;)&#xA;    .Then(&#34;step3&#34;)&#xA;    .Build();&#xA;&#xA;// Execute in process, process all files with all the handlers&#xA;await orchestrator.RunPipelineAsync(pipeline);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Web API specs&lt;/h1&gt; &#xA;&lt;p&gt;The API schema is available at &lt;a href=&#34;http://127.0.0.1:9001/swagger/index.html&#34;&gt;http://127.0.0.1:9001/swagger/index.html&lt;/a&gt; when running the service locally with OpenAPI enabled.&lt;/p&gt; &#xA;&lt;h1&gt;Examples and Tools&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/dotnet-WebClient&#34;&gt;Using the web service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/dotnet-Serverless&#34;&gt;Importing files without the service (serverless ingestion)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/curl&#34;&gt;Upload files and get answers from command line with curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/dotnet-CustomHandler&#34;&gt;Writing a custom pipeline handler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/dotnet-ServerlessCustomPipeline&#34;&gt;Importing files with custom steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/samples/dotnet-ExtractTextFromDocs&#34;&gt;Extracting text from documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/upload-file.sh&#34;&gt;Curl script to upload files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/run-rabbitmq.sh&#34;&gt;Script to start RabbitMQ for development tasks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>nuke-build/nuke</title>
    <updated>2023-08-18T01:23:24Z</updated>
    <id>tag:github.com,2023-08-18:/nuke-build/nuke</id>
    <link href="https://github.com/nuke-build/nuke" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèó The AKEless Build System for C#/.NET&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;400px&#34; src=&#34;https://github.com/nuke-build/nuke/raw/develop/images/logo-black.png#gh-light-mode-only&#34;&gt; &#xA;&lt;img width=&#34;400px&#34; src=&#34;https://github.com/nuke-build/nuke/raw/develop/images/logo-white.png#gh-dark-mode-only&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The AKEless Build System for C#/.NET&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/nuke.common&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/nuke.common?logo=nuget&amp;amp;label=release&amp;amp;style=for-the-badge&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/nuke.common/absoluteLatest&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/nuke.common?logo=nuget&amp;amp;color=yellow&amp;amp;label=pre-release&amp;amp;style=for-the-badge&#34; alt=&#34;Latest Pre-Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Nuke.Common/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/nuke.common.svg?style=for-the-badge&amp;amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAHYcAAB2HAY%2Fl8WUAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTnU1rJkAAABrUlEQVR4XuXQQW7DMAxE0Rw1R%2BtN3XAjBOpPaptfsgkN8DazIDB8bNu2NCxXguVKsFwJlrJs6KYGS1k2dFODpSwbuqnBUpYN3dRgKcuGbmqwlGVDNzVYyrKhmxosZdnQTQ2WsmzopgZLWTZ0U4OlLBu6qcFSlg3d1GApy4ZuarCUZUM3NVjKsqGbGixl2dBNDZaybOimBktZNnRTg6UsG7qpwVKWDd3UYPnB86VKfl5owx9YflHhCbvHByz%2FcecnHBofsNzhjk84PD5gudOdnnBqfMDygDs84fT4gOVBVz4hNT5gecIVT0iPD1ieNPMJyviAZcKMJ2jjA5ZJI5%2Bgjg9YCkY8QR8fsJSYTxgyPmApMp4wbHzAUpZ5wtDxAcsBzjxh%2BPiA5SBHnjBlfMByoD1PmDY%2BYDnYtydMHR%2BwnICeMH18wHKS9ydcMj5gOVE84bLxAcuVYLkSLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLDvVQ5saLFeC5UqwXAmW69gev7WIMc4gs9idAAAAAElFTkSuQmCC&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge&amp;amp;logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAHYcAAB2HAY%2Fl8WUAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTCtCgrAAAADB0lEQVR4XtWagXETMRREUwIlUAIlUAodQAl0AJ1AB9BB6AA6gA6MduKbkX%2BevKecNk525jHO3l%2Fp686xlJC70%2Bl0C942vjV%2Bn9FreVQbBc0wWujfRpW8Z78JaIb53hhJ1ygTA80w9PQ36duBMjHQHPCuoQZfutSjeqU1PAJN4E3j2pN7aVKv6pnWcgGawNfGa5N6prVcgGZBn8yvVXZXQbOgPXokXaPMNZwoc41D%2FaHZ8b7hpBrKjnCizIjD%2FaHZ8aPR6%2BeZXqqh7Agnyow43B%2BaZz40qnQ36a6rlsYgnChDLOkPzTN1z%2B9PafU0N3OAcaIMsaQ%2FNBufG1X9JyrtDMr0Y4xwokxlWX%2BPjAYdemhPrWeDvYcPJ8r0LO3v4oszNfivQQuTp2u9qJGKE2V6lvZ38UVj9q3t3oqEE2U2lvfXF4t6qPjTqDUV1fRyhw8nymws768vfOr2NtqOqFY4UUZE%2BusL6VDRX7%2FGzOHDiTIi0t9WMPsUKzNPx4kysf62gmuHir3sPXw4USbWny485ZOc2PsJ7VTro%2F3pwp5DxV7qHq2xa41TrY%2F2J7PfJkaHir3UwwdtU061PtqfTP0CUaYm2v3LxCtoDI2lMWk8p1of7Y8K0jhRJgaaYZwoE0P%2FpFUndZqtP6T4BE2zC5qtP6T4BE2zC5qtPyRN8OvhZUQae3ZBtT7anyb49PA6Ivp5wKnWR%2FvbJkncZXr6wokysf62CXRCWjmJxhqd2JwoE%2BuvTqS37JGJlB39GLzhRJmN5f31gz8XTpSJgWYYJ8rEQDOME2VioBnGiTIx0AzjRJkYaIZxokwMNMM4USYGmmGcKBMDzTBOlImBZhgnysRAM4wTZWKgGcaJMjHQDONEmRhohnGiTAw0wzhRJgaaYZwoEwPNME6UiYFmGCfKxEAzjBNlYqAZxokyMdAMoL%2FO%2BNi4bzjpT1e%2BNFb8V7gFzUXMLHqk%2BM1A8wArFj1S5GagOUly0SMtuxloTnJrUU%2B7QXOSW4t62g2ak9xa1NNu0Jzk1qKednK6%2Bw9roIB8keT%2F3QAAAABJRU5ErkJggg%3D%3D&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/#elevator-pitch&#34;&gt;Elevator Pitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/#build-status&#34;&gt;Build Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/#in-action&#34;&gt;In Action&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/#technology-sponsors&#34;&gt;Technology Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Elevator Pitch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nuke.build/&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;130px&#34; src=&#34;https://github.com/nuke-build/nuke/raw/develop/images/icon.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Solid and scalable CI/CD pipelines are an essential pillar for being competitive and creating a great product. But why are most of us a little afraid of touching YAML files and don&#39;t even dare to look at build scripts? Much of this is because C# developers are spoiled with a great language and smart IDEs, and they don&#39;t like missing their buddy for code-completion, ease of debugging, refactorings, and code formatting.&lt;/p&gt; &#xA;&lt;p&gt;NUKE brings your build automation to an even level with every other .NET project. How? It&#39;s a regular console application allowing all the OOP goodness! Besides, it solves many common problems in build automation, like parameter injection, path separator abstraction, access to solution and project models, and build step sharing across repositories. NUKE can also generate CI/CD configurations (YAML, etc.) that automatically parallelize build steps on multiple agents to optimize throughput!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more information check out our &lt;a href=&#34;https://nuke.build/docs/introduction/&#34;&gt;documentation&lt;/a&gt; or visit our community ...&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nuke.build/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-nukebuildnet-red.svg?style=for-the-badge&amp;amp;colorB=F5015F&amp;amp;logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuke.build/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-nuke-blue.svg?style=for-the-badge&amp;amp;colorB=5B65EA&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuke.build/twitter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-%40nukebuildnet-blue.svg?style=for-the-badge&amp;amp;logo=twitter&amp;amp;logoColor=white&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dotnet.social/@nuke&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mastodon-%40nuke%40dotnet.social-blue.svg?style=for-the-badge&amp;amp;logo=mastodon&amp;amp;logoColor=white&amp;amp;colorB=6364FF&#34; alt=&#34;Mastodon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;800px&#34; src=&#34;https://github.com/nuke-build/nuke/raw/develop/images/example-1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;p&gt;NUKE builds and tests itself on several CI/CD services, which helps to ensure a working integration with those systems. At the same time, the individual configuration files serve as examples for the &lt;a href=&#34;https://www.nuke.build/docs/authoring-builds/ci-integration.html#configuration-generation&#34;&gt;generation experience&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build Server&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Configuration&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TeamCity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuke.beta.teamcity.com/project/Nuke?mode=trends&#34;&gt;&lt;img src=&#34;https://img.shields.io/teamcity/build/s/Nuke_Test?server=https%3A%2F%2Fnuke.teamcity.com&amp;amp;label=build&amp;amp;style=flat-square&amp;amp;logo=teamcity&#34; alt=&#34;TeamCity&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nuke-build/nuke/raw/develop/.teamcity/settings.kts&#34;&gt;settings.kts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitHub Actions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nuke-build/nuke/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/nuke-build/nuke/ubuntu-latest.yml?branch=develop&amp;amp;label=build&amp;amp;style=flat-square&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win / Ubuntu / macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nuke-build/nuke/raw/develop/.github/workflows/continuous.yml&#34;&gt;continuous.yml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitLab CI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.com/matkoch/nuke/-/pipelines&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitlab/pipeline/matkoch/nuke/develop?label=build&amp;amp;style=flat-square&amp;amp;logo=gitlab&amp;amp;logoColor=white&#34; alt=&#34;GitLab CI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nuke-build/nuke/raw/develop/.gitlab-ci.yml&#34;&gt;.gitlab-ci.yml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure Pipelines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/nuke-build/NUKE/_build?definitionId=7&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/nuke-build/db5bcee5-db3e-430e-980b-96372b5b7941/7.svg?style=flat-square&amp;amp;label=build&amp;amp;logo=azure-pipelines&amp;amp;logoColor=white&#34; alt=&#34;Azure Pipelines&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win / Linux / macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nuke-build/nuke/raw/develop/azure-pipelines.yml&#34;&gt;azure-pipelines.yml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AppVeyor&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/matkoch/nuke-continuous&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/matkoch/nuke-continuous/develop.svg?style=flat-square&amp;amp;label=build&amp;amp;logo=appveyor&amp;amp;logoColor=white&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Win / Ubuntu&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nuke-build/nuke/raw/develop/appveyor.continuous.yml&#34;&gt;appveyor.yml&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;In Action&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/&#34;&gt;ASP.NET Boilerplate&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/aspnetboilerplate/aspnetboilerplate&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avaloniaui.net/&#34;&gt;AvaloniaUI&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/AvaloniaUI/Avalonia&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.avivasolutions.nl/&#34;&gt;Aviva Solutions B.V.&lt;/a&gt;&lt;/strong&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/avivasolutionsnl/sitecore-commerce-docker&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://github.com/avivasolutionsnl/sitecore-docker&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chillicream.com/&#34;&gt;ChilliCream&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/ChilliCream/hotchocolate&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://joshclose.github.io/CsvHelper/&#34;&gt;CsvHelper&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/JoshClose/CsvHelper&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dnncommunity.org/&#34;&gt;DNN Community&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/DNNCommunity/Dnn.ModuleCreator&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluentassertions.com/&#34;&gt;FluentAssertions&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/fluentassertions/fluentassertions&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains s.r.o.&lt;/a&gt;&lt;/strong&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/JetBrains/space-dotnet-sdk&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://github.com/JetBrains/YouTrackSharp&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/&#34;&gt;NSwag&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/RicoSuter/NSwag/&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.octopus.com/&#34;&gt;Octopus Deploy Pty. Ltd.&lt;/a&gt;&lt;/strong&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/OctopusDeploy/OctopusTentacle&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://github.com/OctopusDeploy/OctopusClients&#34;&gt;2&lt;/a&gt; &lt;a href=&#34;https://github.com/OctopusDeploy/Octodiff&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.omnisharp.net/&#34;&gt;OmniSharp&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/OmniSharp/csharp-language-server-protocol&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quartznet/quartznet&#34;&gt;Quartz.NET&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/quartznet/quartznet/&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://virtocommerce.com/&#34;&gt;VirtoCommerce&lt;/a&gt;&lt;/strong&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/VirtoCommerce/vc-build/&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all companies, organizations, and individuals who are sponsoring the further development of this project. Your support means a lot! üíô&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://octopus.com&#34;&gt;&#xA;  &lt;picture&gt;&#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/images/octopusdeploy-dark.svg&#34;&gt;&#xA;   &lt;img alt=&#34;Octopus Deploy&#34; height=&#34;170px&#34; src=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/images/octopusdeploy-light.svg?sanitize=true&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/&#34;&gt;&#xA;  &lt;picture&gt;&#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/images/aws-dark.png&#34;&gt;&#xA;   &lt;img alt=&#34;Amazon Web Services&#34; height=&#34;160px&#34; src=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/images/aws-light.png&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.dangl-it.com/&#34;&gt;&lt;img height=&#34;60px&#34; src=&#34;https://www.dangl-it.de/media/1195/logo-en-rectangular.png&#34; alt=&#34;Dangl-IT GmbH&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ron-myers&#34;&gt;&lt;img height=&#34;60px&#34; src=&#34;https://peiitalliance.com/logos/LevelingUp-Logo.svg?sanitize=true&#34; alt=&#34;Leveling Up&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RLittlesII&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/RLittlesII?s=60&amp;amp;v=4&#34; alt=&#34;Rodney Littles II&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/onelioubov&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/onelioubov?s=60&amp;amp;v=4&#34; alt=&#34;Olga Nelioubov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/valadas&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/valadas?s=60&amp;amp;v=4&#34; alt=&#34;Daniel Valadas&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/T0shik&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/T0shik?s=60&amp;amp;v=4&#34; alt=&#34;Anton Wieslander&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/BusinessActs&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/BusinessActs?s=60&amp;amp;v=4&#34; alt=&#34;business//acts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/petabridge&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/petabridge?s=60&amp;amp;v=4&#34; alt=&#34;Petabridge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stevenkuhn&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/stevenkuhn?s=60&amp;amp;v=4&#34; alt=&#34;Steven Kuhn&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chaquotay&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/chaquotay?s=45&amp;amp;v=4&#34; alt=&#34;Stephan M√ºller&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/david-driscoll&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/david-driscoll?s=45&amp;amp;v=4&#34; alt=&#34;David Driscoll&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Actipro&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/Actipro?s=45&amp;amp;v=4&#34; alt=&#34;Actipro Software&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/llaughlin&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/llaughlin?s=45&amp;amp;v=4&#34; alt=&#34;Logan Laughlin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hardcoded2&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/hardcoded2?s=45&amp;amp;v=4&#34; alt=&#34;Alex Sink&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MartinSGill&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/MartinSGill?s=45&amp;amp;v=4&#34; alt=&#34;Martin Gill&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/totollygeek&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/totollygeek?s=45&amp;amp;v=4&#34; alt=&#34;Todor Todorov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dbeattie71&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/dbeattie71?s=45&amp;amp;v=4&#34; alt=&#34;Derek Beattie&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Razenpok&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/Razenpok?s=45&amp;amp;v=4&#34; alt=&#34;Andrei Andreev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/patrik53&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/patrik53?s=45&amp;amp;v=4&#34; alt=&#34;patrik53&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cesare-Caoduro_aecom&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/Cesare-Caoduro_aecom?s=45&amp;amp;v=4&#34; alt=&#34;Cesare Caoduro&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KirillOsenkov&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/KirillOsenkov?s=45&amp;amp;v=4&#34; alt=&#34;Kirill Osenkov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/archon-systems-inc/&#34;&gt;&lt;img height=&#34;45px&#34; src=&#34;https://images.opencollective.com/archon-systems-inc/85fa9b1/logo/256.png&#34; alt=&#34;Archon Systems Inc.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bitzer-electronics-as&#34;&gt;&lt;img height=&#34;45px&#34; src=&#34;https://images.opencollective.com/bitzer-electronics-as/39862ac/logo/256.png&#34; alt=&#34;BITZER Electronics A/S&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technology Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://jetbrains.com&#34;&gt;JetBrains&lt;/a&gt; for providing licenses for &lt;a href=&#34;https://jetbrains.com/rider&#34;&gt;Rider&lt;/a&gt; and access to a &lt;a href=&#34;https://jetbrains.com/teamcity&#34;&gt;TeamCity Cloud&lt;/a&gt; instance, which both make open-source development a real pleasure!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jetbrains.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nuke-build/nuke/develop/images/jetbrains.png&#34; width=&#34;450&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>