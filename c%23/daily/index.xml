<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-22T01:30:54Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>malyawka/URP-ScreenSpaceCavity</title>
    <updated>2023-01-22T01:30:54Z</updated>
    <id>tag:github.com,2023-01-22:/malyawka/URP-ScreenSpaceCavity</id>
    <link href="https://github.com/malyawka/URP-ScreenSpaceCavity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blender Cavity Effect for Unity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;URP-ScreenSpaceCavity&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/malyawka/URP-ScreenSpaceCavity/pics/pics/g-preview.gif&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to preview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.render-pipelines.universal@latest/&#34;&gt;Universal Render Pipeline&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download and import the &lt;a href=&#34;https://github.com/malyawka/URP-ScreenSpaceCavity/releases/tag/Unity&#34;&gt;Unity package&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open scene from &lt;b&gt;Assets/PolygonStarter/Scenes/Demo.unity&lt;/b&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;b&gt;Tested with&lt;/b&gt; Unity version - 2020.3 URP version - 10.7&lt;/p&gt; &#xA;&lt;h2&gt;Configurable parameters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/malyawka/URP-ScreenSpaceCavity/pics/pics/params.jpg&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;Type&lt;/b&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;Curvature&lt;/b&gt; - highlights only the edges of objects.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Cavity&lt;/b&gt; - highlights the edges with the Ambient Occlusion effect.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Both&lt;/b&gt; - well, it&#39;s understandable &lt;span&gt;ðŸ¤·â™‚&lt;/span&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Curvature&lt;/b&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;Scale&lt;/b&gt; - effect width.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Ridge&lt;/b&gt; - effect ntensivity for ridge (white).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Valley&lt;/b&gt; - effect ntensivity for valley (black).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;Cavity&lt;/b&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;b&gt;Distance&lt;/b&gt; - distance of effect from edge.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Attenuation&lt;/b&gt; - fading out the effect relative to the camera (relevant for nearby objects).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Ridge&lt;/b&gt; - effect ntensivity for ridge (white).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Valley&lt;/b&gt; - effect ntensivity for valley (black).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;b&gt;Samples&lt;/b&gt; - number of passes to calculate the effect.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shader setup&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example of parts of the code for the shader to work with Cavity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#if defined (_SCREEN_SPACE_CAVITY)&#xA;  #include &#34;CavityInput.hlsl&#34;&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#pragma multi_compile_fragment _ _SCREEN_SPACE_CAVITY&#xA;#pragma multi_compile _ _CAVITY_DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#if defined (_SCREEN_SPACE_CAVITY)&#xA;  if (_CavityEnabled)&#xA;  {&#xA;    float2 normalizedUV = GetNormalizedScreenSpaceUV(input.positionCS);&#xA;    half cavity = SampleCavity(normalizedUV);&#xA;    #ifdef _CAVITY_DEBUG&#xA;      albedo.rgb = cavity * 2.0;&#xA;    #else&#xA;      bakedGI *= cavity * 4.0;&#xA;      lightColor *= cavity * 4.0;&#xA;    #endif&#xA;  }&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;The main thing is to get the cavity value and use it to apply the color:&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hlsl&#34;&gt;#include &#34;CavityInput.hlsl&#34;&#xA;float2 normalizedUV = GetNormalizedScreenSpaceUV(input.positionCS);&#xA;half cavity = SampleCavity(normalizedUV);&#xA;color *= cavity * 4.0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attention! A custom shader must have passes for normals and depths.&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As an example, use the free &lt;a href=&#34;https://assetstore.unity.com/packages/3d/props/polygon-starter-pack-low-poly-3d-art-by-synty-156819&#34;&gt;POLYGON Starter Pack&lt;/a&gt; asset from reputable &lt;a href=&#34;https://assetstore.unity.com/publishers/5217&#34;&gt;Synty Studios&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you are not familiar with the Universal Render Pipeline, you can find the &lt;a href=&#34;https://learn.unity.com/tutorial/introduction-to-urp#&#34;&gt;official tutorial here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.unity3d.com/Manual/ShadersOverview.html&#34;&gt;Writing Shaders&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Good to everyone!&lt;span&gt;âœŒ&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>abishekaditya/DesignPatterns</title>
    <updated>2023-01-22T01:30:54Z</updated>
    <id>tag:github.com,2023-01-22:/abishekaditya/DesignPatterns</id>
    <link href="https://github.com/abishekaditya/DesignPatterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project : Design Patterns Examples in C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Design Patterns&lt;/h1&gt; &#xA;&lt;p&gt;Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems. I have included implementations of some design patterns in C# to help beginners like me get their feet wet. There are better alternatives available for some of them in the .NET Framework, so this is by no means a comprehensive tutorial.&lt;/p&gt; &#xA;&lt;p&gt;Any comments and suggestions are welcome. If you want to add a new design pattern implementation, just follow the naming convention, fork my repo and submit a pull request. Same goes for any improvements and modifications.&lt;/p&gt; &#xA;&lt;p&gt;This was created as a C# alternative to Java while reading &lt;a href=&#34;https://www.oreilly.com/library/view/head-first-design/0596007124/&#34;&gt;https://www.oreilly.com/library/view/head-first-design/0596007124/&lt;/a&gt; &amp;lt;- take a look at it if anything confuses you.&lt;/p&gt; &#xA;&lt;h2&gt;Types of Design Patterns&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;There are three kinds of Design Patterns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creational&lt;/li&gt; &#xA; &lt;li&gt;Structural&lt;/li&gt; &#xA; &lt;li&gt;Behavioral&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;List of Design Pattern Implementations&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/AdapterPattern&#34;&gt;Adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/BridgePattern&#34;&gt;Bridge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/CommandPattern&#34;&gt;Command&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/CompositePattern&#34;&gt;Composite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/DecoratorPattern&#34;&gt;Decorator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/FacadePattern&#34;&gt;Facade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/FactoryPattern&#34;&gt;Factory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/FlyweightPattern&#34;&gt;Flyweight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/IteratorPattern&#34;&gt;Iterator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/ObserverPattern&#34;&gt;Observer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/SingletonPattern&#34;&gt;Singleton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/StatePattern&#34;&gt;State&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/StrategyPattern&#34;&gt;Strategy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/TemplatePattern&#34;&gt;Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/VisitorPattern&#34;&gt;Visitor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/MediatorPattern&#34;&gt;Mediator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/abishekaditya/DesignPatterns/master/ProxyPattern&#34;&gt;Proxy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>