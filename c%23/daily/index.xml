<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T01:35:34Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Perfare/Il2CppDumper</title>
    <updated>2022-06-12T01:35:34Z</updated>
    <id>tag:github.com,2022-06-12:/Perfare/Il2CppDumper</id>
    <link href="https://github.com/Perfare/Il2CppDumper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unity il2cpp reverse engineer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Il2CppDumper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/Perfare/il2cppdumper/branch/master/artifacts&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/anhqw33vcpmp8ofa?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文说明请戳&lt;a href=&#34;https://raw.githubusercontent.com/Perfare/Il2CppDumper/master/README.zh-CN.md&#34;&gt;这里&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unity il2cpp reverse engineer&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete DLL restore (except code), can be used to extract &lt;code&gt;MonoBehaviour&lt;/code&gt; and &lt;code&gt;MonoScript&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports ELF, ELF64, Mach-O, PE, NSO and WASM format&lt;/li&gt; &#xA; &lt;li&gt;Supports Unity 5.3 - 2021.3&lt;/li&gt; &#xA; &lt;li&gt;Supports generate IDA, Ghidra and Binary Ninja scripts to help them better analyze il2cpp files&lt;/li&gt; &#xA; &lt;li&gt;Supports generate structures header file&lt;/li&gt; &#xA; &lt;li&gt;Supports Android memory dumped &lt;code&gt;libil2cpp.so&lt;/code&gt; file to bypass protection&lt;/li&gt; &#xA; &lt;li&gt;Support bypassing simple PE protection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;Il2CppDumper.exe&lt;/code&gt; and choose the il2cpp executable file and &lt;code&gt;global-metadata.dat&lt;/code&gt; file, then enter the information as prompted&lt;/p&gt; &#xA;&lt;p&gt;The program will then generate all the output files in current working directory&lt;/p&gt; &#xA;&lt;h3&gt;Command-line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Il2CppDumper.exe &amp;lt;executable-file&amp;gt; &amp;lt;global-metadata&amp;gt; &amp;lt;output-directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Outputs&lt;/h3&gt; &#xA;&lt;h4&gt;DummyDll&lt;/h4&gt; &#xA;&lt;p&gt;Folder, containing all restored dll files&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/0xd4d/dnSpy&#34;&gt;dnSpy&lt;/a&gt;, &lt;a href=&#34;https://github.com/icsharpcode/ILSpy&#34;&gt;ILSpy&lt;/a&gt; or other .Net decompiler tools to view&lt;/p&gt; &#xA;&lt;p&gt;Can be used to extract Unity &lt;code&gt;MonoBehaviour&lt;/code&gt; and &lt;code&gt;MonoScript&lt;/code&gt;, for &lt;a href=&#34;https://github.com/mafaca/UtinyRipper&#34;&gt;UtinyRipper&lt;/a&gt;, &lt;a href=&#34;https://7daystodie.com/forums/showthread.php?22675-Unity-Assets-Bundle-Extractor&#34;&gt;UABE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;ida.py&lt;/h4&gt; &#xA;&lt;p&gt;For IDA&lt;/p&gt; &#xA;&lt;h4&gt;ida_with_struct.py&lt;/h4&gt; &#xA;&lt;p&gt;For IDA, read il2cpp.h file and apply structure information in IDA&lt;/p&gt; &#xA;&lt;h4&gt;il2cpp.h&lt;/h4&gt; &#xA;&lt;p&gt;structure information header file&lt;/p&gt; &#xA;&lt;h4&gt;ghidra.py&lt;/h4&gt; &#xA;&lt;p&gt;For Ghidra&lt;/p&gt; &#xA;&lt;h4&gt;Il2CppBinaryNinja&lt;/h4&gt; &#xA;&lt;p&gt;For BinaryNinja&lt;/p&gt; &#xA;&lt;h4&gt;ghidra_wasm.py&lt;/h4&gt; &#xA;&lt;p&gt;For Ghidra, work with &lt;a href=&#34;https://github.com/nneonneo/ghidra-wasm-plugin&#34;&gt;ghidra-wasm-plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;script.json&lt;/h4&gt; &#xA;&lt;p&gt;For ida.py, ghidra.py and Il2CppBinaryNinja&lt;/p&gt; &#xA;&lt;h4&gt;stringliteral.json&lt;/h4&gt; &#xA;&lt;p&gt;Contains all stringLiteral information&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;All the configuration options are located in &lt;code&gt;config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DumpMethod&lt;/code&gt;, &lt;code&gt;DumpField&lt;/code&gt;, &lt;code&gt;DumpProperty&lt;/code&gt;, &lt;code&gt;DumpAttribute&lt;/code&gt;, &lt;code&gt;DumpFieldOffset&lt;/code&gt;, &lt;code&gt;DumpMethodOffset&lt;/code&gt;, &lt;code&gt;DumpTypeDefIndex&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whether to output these information to dump.cs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;GenerateDummyDll&lt;/code&gt;, &lt;code&gt;GenerateScript&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whether to generate these things&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DummyDllAddToken&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whether to add token in DummyDll&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequireAnyKey&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whether to press any key to exit at the end&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ForceIl2CppVersion&lt;/code&gt;, &lt;code&gt;ForceVersion&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If &lt;code&gt;ForceIl2CppVersion&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the program will use the version number specified in &lt;code&gt;ForceVersion&lt;/code&gt; to choose parser for il2cpp binaries (does not affect the choice of metadata parser). This may be useful on some older il2cpp version (e.g. the program may need to use v16 parser on il2cpp v20 (Android) binaries in order to work properly)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ForceDump&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Force files to be treated as dumped&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NoRedirectedPointer&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Treat pointers in dumped files as unredirected, This option needs to be &lt;code&gt;true&lt;/code&gt; for files dumped from some devices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common errors&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;ERROR: Metadata file supplied is not valid metadata file.&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Make sure you choose the correct file. Sometimes games may obfuscate this file for content protection purposes and so on. Deobfuscating of such files is beyond the scope of this program, so please &lt;strong&gt;DO NOT&lt;/strong&gt; file an issue regarding to deobfuscating.&lt;/p&gt; &#xA;&lt;p&gt;If your file is &lt;code&gt;libil2cpp.so&lt;/code&gt; and you have a rooted Android phone, you can try my other project &lt;a href=&#34;https://github.com/Perfare/Zygisk-Il2CppDumper&#34;&gt;Zygisk-Il2CppDumper&lt;/a&gt;, it can bypass this protection.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ERROR: Can&#39;t use auto mode to process file, try manual mode.&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Please note that the executable file for the PC platform is &lt;code&gt;GameAssembly.dll&lt;/code&gt; or &lt;code&gt;*Assembly.dll&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can open a new issue and upload the file, I will try to solve.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ERROR: This file may be protected.&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Il2CppDumper detected that the executable file has been protected, use &lt;code&gt;GameGuardian&lt;/code&gt; to dump &lt;code&gt;libil2cpp.so&lt;/code&gt; from the game memory, then use Il2CppDumper to load and follow the prompts, can bypass most protections.&lt;/p&gt; &#xA;&lt;p&gt;If you have a rooted Android phone, you can try my other project &lt;a href=&#34;https://github.com/Perfare/Zygisk-Il2CppDumper&#34;&gt;Zygisk-Il2CppDumper&lt;/a&gt;, it can bypass almost all protections.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jumboperson - &lt;a href=&#34;https://github.com/Jumboperson/Il2CppDumper&#34;&gt;Il2CppDumper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>blazorhero/CleanArchitecture</title>
    <updated>2022-06-12T01:35:34Z</updated>
    <id>tag:github.com,2022-06-12:/blazorhero/CleanArchitecture</id>
    <link href="https://github.com/blazorhero/CleanArchitecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture Template for Blazor WebAssembly Built with MudBlazor Components.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/blazorhero/CleanArchitecture.svg?style=flat-square&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/blazorhero/CleanArchitecture?style=flat-square&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/stars/blazorhero/CleanArchitecture?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/blazorhero/CleanArchitecture.svg?style=flat-square&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/blazorhero/CleanArchitecture?style=flat-square&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/blazorhero/CleanArchitecture?style=flat-square&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/iammukeshm/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-LinkedIn-black.svg?style=flat-square&amp;amp;logo=linkedin&amp;amp;colorB=555&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- PROJECT LOGO --&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture&#34;&gt; &lt;img src=&#34;https://codewithmukesh.com/wp-content/uploads/2021/03/BlazorHeroBanner-1.png&#34; alt=&#34;Blazor Hero&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;BlazorHero - Clean Architecture Template&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Open Sourced Solution Template For Blazor Web-Assembly 5.0 built with MudBlazor Components &lt;br&gt; &lt;a href=&#34;https://codewithmukesh.com/blog/blazor-hero-quick-start-guide/&#34;&gt;&lt;strong&gt;Read the Documentation »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/issues&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/issues&#34;&gt;Request Feature&lt;/a&gt; . &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/issues&#34;&gt;Request Documentation&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About The Project &lt;span&gt;⚡&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;BlazorHero is a Clean Architecture Solution Template for Blazor Webassembly 5.0 built with MudBlazor Components.&lt;/p&gt; &#xA;&lt;h2&gt;Complete Overview - Youtube Video 🆕 📈&lt;/h2&gt; &#xA;&lt;p&gt;So, here is an in-depth video that takes you through the BlazorHero Project! Do Like &amp;amp; Subscribe to my Youtube channel! It would be great if you could leave behind your valuable feedback in the comments section of the Video. This helps me reach a much wider audience with time :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=j7BxKN7HYjk&amp;amp;lc=Ugy1SjDcmP0pboRxJe94AaABAg&#34;&gt;Watch it here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=j7BxKN7HYjk&#34; title=&#34;Blazor Hero - Clean Architecture Solution Template for Blazor WebAssembly&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/j7BxKN7HYjk/0.jpg&#34; alt=&#34;Blazor Hero - Clean Architecture Solution Template for Blazor WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tech Stack &lt;span&gt;💪&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blazor WebAssembly 5.0 - ASP.NET Core Hosted Model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/ef/core/&#34;&gt;Entity Framework Core 5.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;BlazorHero v2.2&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI Improvements&lt;/li&gt; &#xA; &lt;li&gt;Docker Support&lt;/li&gt; &#xA; &lt;li&gt;Better Permissions Management&lt;/li&gt; &#xA; &lt;li&gt;Code Cleanups&lt;/li&gt; &#xA; &lt;li&gt;RTL Support&lt;/li&gt; &#xA; &lt;li&gt;Minor Bug Fixes&lt;/li&gt; &#xA; &lt;li&gt;Better Project Structure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What to Expect in BlazorHero 3.0?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modular Architecture&lt;/li&gt; &#xA; &lt;li&gt;Cleaner Separation Of Code&lt;/li&gt; &#xA; &lt;li&gt;Dedicated Documentation Website - &lt;a href=&#34;https://blazorhero.github.io/docs/&#34;&gt;Here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tutorials to add new entities, controllers&lt;/li&gt; &#xA; &lt;li&gt;UI Updates&lt;/li&gt; &#xA; &lt;li&gt;Support for PostgreSQL / MySQL - Easy DB Switching&lt;/li&gt; &#xA; &lt;li&gt;Theme Manager Integration to change UI Color Palletes / Fonts on the go.&lt;/li&gt; &#xA; &lt;li&gt;You can suggest your requirements as well!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Down the Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Migration to .NET 6&lt;/li&gt; &#xA; &lt;li&gt;Multi Tenancy&lt;/li&gt; &#xA; &lt;li&gt;Better Localization - JSON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started 🦸&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; If you are already using Blazor Hero v1.x, make sure that you drop your existing database and re-update your database using the CLI as there are a couple of new migrations added that might clash with your existing schema. Also, install the latest version of BlazorHero.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The easiest way to get started with Blazor Hero is to install the &lt;a href=&#34;https://www.nuget.org/packages/BlazorHero.CleanArchitecture/&#34;&gt;NuGet package&lt;/a&gt; and run &lt;code&gt;dotnet new BlazorHero.CleanArchitecture&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the latest &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/5.0&#34;&gt;.NET 5 SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the latest DOTNET &amp;amp; EF CLI Tools by using this command &lt;code&gt;dotnet tool install --global dotnet-ef&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the latest version of Visual Studio IDE 2019 (v16.8 and above) 🚀&lt;/li&gt; &#xA; &lt;li&gt;Open up Command Prompt and run &lt;code&gt;dotnet new --install BlazorHero.CleanArchitecture&lt;/code&gt; to install the project template&lt;/li&gt; &#xA; &lt;li&gt;Create a folder for your solution and cd into it (the template will use it as project name)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dotnet new BlazorHero.CleanArchitecture&lt;/code&gt; to create a new Solution with all the Awesomeness 🕶️ of BlazorHero 🦸&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;What to do next? Read the &lt;a href=&#34;https://codewithmukesh.com/blog/blazor-hero-quick-start-guide/&#34;&gt;entire guide on my blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Docker in Windows &lt;span&gt;🚀&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Docker on Windows via &lt;code&gt;https://docs.docker.com/docker-for-windows/install/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open up Powershell on Windows and run the following &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd c:\&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dotnet dev-certs https -ep $env:USERPROFILE\.aspnet\https\aspnetapp.pfx -p securePassword123&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;dotnet dev-certs https --trust&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Note - Make sure that you use the same password that has been configured in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file. By default, &lt;code&gt;securePassword123&lt;/code&gt; is configured.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;5005 &amp;amp; 5006 are the ports setup to run blazorHero on Docker, so make sure that these ports are free. You could also change the ports in the &lt;code&gt;docker-compose.yml&lt;/code&gt; and &lt;code&gt;Server\Dockerfile&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;Now navigate back to the root of the BlazorHero Project on your local machine and run the following via terminal - &lt;code&gt;docker-compose -f &#39;docker-compose.yml&#39; up --build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;This will start pulling MSSQL Server Image from Docker Hub if you don&#39;t already have this image. It&#39;s around 500+ Mbs of download.&lt;/li&gt; &#xA; &lt;li&gt;Once that is done, dotnet SDKs and runtimes are downloaded, if not present already. That&#39;s almost 200+ more Mbs of download.&lt;/li&gt; &#xA; &lt;li&gt;PS If you find any issues while Docker installs the nuget packages, it is most likely that your ssl certificates are not installed properly. Apart from that I also added the &lt;code&gt;--disable-parallel&lt;/code&gt; in the &lt;code&gt;Server\Dockerfile&lt;/code&gt;to ensure network issues don&#39;t pop-up. You can remove this option to speed up the build process.&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s almost everything. Once the containers are available, migrations are updated in the MSSQL DB, default data is seeded.&lt;/li&gt; &#xA; &lt;li&gt;Browse to &lt;a href=&#34;https://localhost:5005/&#34;&gt;https://localhost:5005/&lt;/a&gt; to use your version of BlazorHero !&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Complete Documentation &lt;span&gt;🚀&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Getting started with Blazor Hero – A Clean Architecture Template built for Blazor WebAssembly using MudBlazor Components. This project will make your Blazor Learning Process much easier than you anticipate. Blazor Hero is meant to be an Enterprise Level Boilerplate, which comes free of cost, completely open sourced.&lt;/p&gt; &#xA;&lt;p&gt;The provided documentation / guide will get you started with BlazorHero in no time. It provides a complete walkthrough for the project with to-the-point guides and notes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codewithmukesh.com/blog/blazor-hero-quick-start-guide/&#34;&gt;&lt;strong&gt;Read the Quick Start Guide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;All the completed and the upcoming features are mentioned in the &lt;a href=&#34;https://github.com/blazorhero/CleanArchitecture/raw/master/Features.md&#34;&gt;Features.MD File&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open-source community such an amazing place to be, learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here are the few contributions that I would highly appreciate ;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need someone to add in the API Documentation for Swagger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need someone to implement localization throughout every Razor Component of the solution under the WASM(Client) Project. You can take the Pages/Authentication/Login.razor as the point of reference. It is as simple as adding &lt;code&gt;@inject Microsoft.Extensions.Localization.IStringLocalizer&amp;lt;Login&amp;gt; localizer&lt;/code&gt; to every page, changing the texts to &lt;code&gt;@localizer[&#34;Text Here&#34;]&lt;/code&gt; and finally adding resx files to the Resources Folder as per the folder structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need few contributors to add in various language translations as per the implemented Location. I got time to only add a few translations for French as of now.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need a UI contributor to look at the UX/UI of the entire project&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Need someone to buildup a cool Material Logo for BlazorHero (BH):D Do contact me on LinkedIn (&lt;a href=&#34;https://www.linkedin.com/in/iammukeshm/&#34;&gt;https://www.linkedin.com/in/iammukeshm/&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; And finally, Stars from everyone! :D&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;h3&gt;Mukesh Murugan&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blogs at &lt;a href=&#34;https://www.codewithmukesh.com&#34;&gt;codewithmukesh.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook - &lt;a href=&#34;https://www.facebook.com/codewithmukesh&#34;&gt;codewithmukesh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter - &lt;a href=&#34;https://www.twitter.com/iammukeshm&#34;&gt;Mukesh Murugan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter - &lt;a href=&#34;https://www.twitter.com/codewithmukesh&#34;&gt;codewithmukesh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linkedin - &lt;a href=&#34;https://www.linkedin.com/in/iammukeshm/&#34;&gt;Mukesh Murugan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &lt;span&gt;⭐&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Has this Project helped you learn something New? or Helped you at work? Do Consider Supporting. Here are a few ways by which you can support.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leave a star! &lt;span&gt;⭐&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recommend this awesome project to your colleagues. 🥇&lt;/li&gt; &#xA; &lt;li&gt;Leave your feedback / comments regarding this project in the comments section on my blog &lt;a href=&#34;https://codewithmukesh.com/blog/blazor-hero-quick-start-guide/&#34;&gt;Blazor Hero Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Do consider endorsing me on LinkedIn for ASP.NET Core - &lt;a href=&#34;https://codewithmukesh.com/linkedin&#34;&gt;Connect via LinkedIn&lt;/a&gt; 🦸&lt;/li&gt; &#xA; &lt;li&gt;Or, If you want to support this project on the long run, &lt;a href=&#34;https://www.buymeacoffee.com/codewithmukesh&#34;&gt;consider buying me a coffee&lt;/a&gt;! ☕&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/codewithmukesh&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://codewithmukesh.com/wp-content/uploads/2021/04/bmclogo.jpg&#34; alt=&#34;Buy Me A Coffee&#34; width=&#34;200&#34; style=&#34;height: 60px !important;width: 200px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>andrewlock/NetEscapades.EnumGenerators</title>
    <updated>2022-06-12T01:35:34Z</updated>
    <id>tag:github.com,2022-06-12:/andrewlock/NetEscapades.EnumGenerators</id>
    <link href="https://github.com/andrewlock/NetEscapades.EnumGenerators" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A source generator for generating fast &#34;reflection&#34; methods for enums&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NetEscapades.EnumGenerators&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/andrewlock/NetEscapades.EnumGenerators/actions/workflows/BuildAndPack.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/NetEscapades.EnumGenerators/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/NetEscapades.EnumGenerators.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Source Generator package that generates extension methods for enums, to allow fast &#34;reflection&#34;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This source generator requires the .NET 6 SDK. You can target earlier frameworks like .NET Core 3.1 etc, but the &lt;em&gt;SDK&lt;/em&gt; must be at least 6.0.100&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add the package to your application using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package NetEscapades.EnumGenerators&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds a &lt;code&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; to your project. You can additionally mark the package as &lt;code&gt;PrivateAssets=&#34;all&#34;&lt;/code&gt; and &lt;code&gt;ExcludeAssets=&#34;runtime&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Setting &lt;code&gt;PrivateAssets=&#34;all&#34;&lt;/code&gt; means any projects referencing this one won&#39;t get a reference to the &lt;em&gt;NetEscapades.EnumGenerators&lt;/em&gt; package. Setting &lt;code&gt;ExcludeAssets=&#34;runtime&#34;&lt;/code&gt; ensures the &lt;em&gt;NetEscapades.EnumGenerators.Attributes.dll&lt;/em&gt; file is not copied to your build output (it is not required at runtime).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&#34;Microsoft.NET.Sdk&#34;&amp;gt;&#xA;&#xA;  &amp;lt;PropertyGroup&amp;gt;&#xA;    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;&#xA;    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;&#xA;  &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;  &amp;lt;!-- Add the package --&amp;gt;&#xA;  &amp;lt;PackageReference Include=&#34;NetEscapades.EnumGenerators&#34; Version=&#34;1.0.0-beta04&#34; &#xA;    PrivateAssets=&#34;all&#34; ExcludeAssets=&#34;runtime&#34; /&amp;gt;&#xA;  &amp;lt;!-- --&amp;gt;&#xA;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding the package will automatically add a marker attribute, &lt;code&gt;[EnumExtensions]&lt;/code&gt;, to your project.&lt;/p&gt; &#xA;&lt;p&gt;To use the generator, add the &lt;code&gt;[EnumExtensions]&lt;/code&gt; attribute to an enum. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[EnumExtensions]&#xA;public enum MyEnum&#xA;{&#xA;    First,&#xA;&#xA;    [Display(Name = &#34;2nd&#34;)]&#xA;    Second,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a class called &lt;code&gt;MyEnumExtensions&lt;/code&gt; (by default), which contains a number of helper methods. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static partial class MyEnumExtensions&#xA;{&#xA;    public const int Length = 2;&#xA;&#xA;    public static string ToStringFast(this MyEnum value)&#xA;        =&amp;gt; value switch&#xA;        {&#xA;            MyEnum.First =&amp;gt; nameof(MyEnum.First),&#xA;            MyEnum.Second =&amp;gt; &#34;2nd&#34;,&#xA;            _ =&amp;gt; value.ToString(),&#xA;        };&#xA;&#xA;   public static bool IsDefined(MyEnum value)&#xA;        =&amp;gt; value switch&#xA;        {&#xA;            MyEnum.First =&amp;gt; true,&#xA;            MyEnum.Second =&amp;gt; true,&#xA;            _ =&amp;gt; false,&#xA;        };&#xA;&#xA;    public static bool IsDefined(string name)&#xA;        =&amp;gt; name switch&#xA;        {&#xA;            nameof(MyEnum.First) =&amp;gt; true,&#xA;            nameof(MyEnum.Second) =&amp;gt; true,&#xA;            _ =&amp;gt; false,&#xA;        };&#xA;&#xA;    public static bool TryParse(&#xA;        [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? name, &#xA;        bool ignoreCase, &#xA;        out MyEnum value)&#xA;        =&amp;gt; ignoreCase ? TryParseIgnoreCase(name, out value) : TryParse(name, out value);&#xA;&#xA;    private static bool TryParseIgnoreCase(&#xA;        [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? name, &#xA;        out MyEnum value)&#xA;    {&#xA;        switch (name)&#xA;        {&#xA;            case { } s when s.Equals(nameof(MyEnum.First), System.StringComparison.OrdinalIgnoreCase):&#xA;                value = MyEnum.First;&#xA;                return true;&#xA;            case { } s when s.Equals(nameof(MyEnum.Second), System.StringComparison.OrdinalIgnoreCase):&#xA;                value = MyEnum.Second;&#xA;                return true;&#xA;            case { } s when int.TryParse(name, out var val):&#xA;                value = (MyEnum)val;&#xA;                return true;&#xA;            default:&#xA;                value = default;&#xA;                return false;&#xA;        }&#xA;    }&#xA;&#xA;    public static bool TryParse(&#xA;        [System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? name, &#xA;        out MyEnum value)&#xA;    {&#xA;        switch (name)&#xA;        {&#xA;            case nameof(MyEnum.First):&#xA;                value = MyEnum.First;&#xA;                return true;&#xA;            case nameof(MyEnum.Second):&#xA;                value = MyEnum.Second;&#xA;                return true;&#xA;            case { } s when int.TryParse(name, out var val):&#xA;                value = (MyEnum)val;&#xA;                return true;&#xA;            default:&#xA;                value = default;&#xA;                return false;&#xA;        }&#xA;    }&#xA;&#xA;    public static MyEnum[] GetValues()&#xA;    {&#xA;        return new[]&#xA;        {&#xA;            MyEnum.First,&#xA;            MyEnum.Second,&#xA;        };&#xA;    }&#xA;&#xA;    public static string[] GetNames()&#xA;    {&#xA;        return new[]&#xA;        {&#xA;            nameof(MyEnum.First),&#xA;            nameof(MyEnum.Second),&#xA;        };&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the name of the extension class by setting &lt;code&gt;ExtensionClassName&lt;/code&gt; in the attribute and/or the namespace of the class by setting &lt;code&gt;ExtensionClassNamespace&lt;/code&gt;. By default, the class will be public if the enum is public, otherwise it will be internal.&lt;/p&gt; &#xA;&lt;h2&gt;Embedding the attributes in your project&lt;/h2&gt; &#xA;&lt;p&gt;By default, the &lt;code&gt;[EnumExtensions]&lt;/code&gt; attributes referenced in your application are contained in an external dll. It is also possible to embed the attributes directly in your project, so they appear in the dll when your project is built. If you wish to do this, you must do two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Define the MSBuild constant &lt;code&gt;NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES&lt;/code&gt;. This ensures the attributes are embedded in your project&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;compile&lt;/code&gt; to the list of excluded assets in your &lt;code&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; element. This ensures the attributes in your project are referenced, instead of the &lt;em&gt;NetEscapades.EnumGenerators.Attributes.dll&lt;/em&gt; library.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Your project file should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&#34;Microsoft.NET.Sdk&#34;&amp;gt;&#xA;&#xA;  &amp;lt;PropertyGroup&amp;gt;&#xA;    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;&#xA;    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;&#xA;    &amp;lt;!--  Define the MSBuild constant    --&amp;gt;&#xA;    &amp;lt;DefineConstants&amp;gt;NETESCAPADES_ENUMGENERATORS_EMBED_ATTRIBUTES&amp;lt;/DefineConstants&amp;gt;&#xA;  &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;  &amp;lt;!-- Add the package --&amp;gt;&#xA;  &amp;lt;PackageReference Include=&#34;NetEscapades.EnumGenerators&#34; Version=&#34;1.0.0-beta04&#34; &#xA;                    PrivateAssets=&#34;all&#34;&#xA;                    ExcludeAssets=&#34;compile;runtime&#34; /&amp;gt;&#xA;&amp;lt;!--                               ☝ Add compile to the list of excluded assets. --&amp;gt;&#xA;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preserving usages of the &lt;code&gt;[EnumExtensions]&lt;/code&gt; attribute&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;[EnumExtensions]&lt;/code&gt; attribute is decorated with the &lt;code&gt;[Conditional]&lt;/code&gt; attribute, &lt;a href=&#34;https://andrewlock.net/conditional-compilation-for-ignoring-method-calls-with-the-conditionalattribute/#applying-the-conditional-attribute-to-classes&#34;&gt;so their usage will not appear in the build output of your project&lt;/a&gt;. If you use reflection at runtime on one of your &lt;code&gt;enum&lt;/code&gt;s, you will not find &lt;code&gt;[EnumExtensions]&lt;/code&gt; in the list of custom attributes.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to preserve these attributes in the build output, you can define the &lt;code&gt;NETESCAPADES_ENUMGENERATORS_USAGES&lt;/code&gt; MSBuild variable. Note that this means your project will have a runtime-dependency on &lt;em&gt;NetEscapades.EnumGenerators.Attributes.dll&lt;/em&gt; so you need to ensure this is included in your build output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&#34;Microsoft.NET.Sdk&#34;&amp;gt;&#xA;&#xA;  &amp;lt;PropertyGroup&amp;gt;&#xA;    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;&#xA;    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;&#xA;    &amp;lt;!--  Define the MSBuild constant to preserve usages   --&amp;gt;&#xA;    &amp;lt;DefineConstants&amp;gt;NETESCAPADES_ENUMGENERATORS_USAGES&amp;lt;/DefineConstants&amp;gt;&#xA;  &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;  &amp;lt;!-- Add the package --&amp;gt;&#xA;  &amp;lt;PackageReference Include=&#34;NetEscapades.EnumGenerators&#34; Version=&#34;1.0.0-beta05&#34; PrivateAssets=&#34;all&#34; /&amp;gt;&#xA;  &amp;lt;!--              ☝ You must not exclude the runtime assets in this case --&amp;gt;&#xA;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error CS0436 and [InternalsVisibleTo]&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In the latest version of &lt;em&gt;NetEscapades.EnumGenerators&lt;/em&gt;, you should not experience error CS0436 by default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In previous versions of the &lt;em&gt;NetEscapades.EnumGenerators&lt;/em&gt; generator, the &lt;code&gt;[EnumExtensions]&lt;/code&gt; attributes were added to your compilation as &lt;code&gt;internal&lt;/code&gt; attributes by default. If you added the source generator package to multiple projects, and used the &lt;code&gt;[InternalsVisibleTo]&lt;/code&gt; attribute, you could experience errors when you build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;warning CS0436: The type &#39;EnumExtensionsAttribute&#39; in &#39;NetEscapades.EnumGenerators\NetEscapades.EnumGenerators\EnumExtensionsAttribute.cs&#39; conflicts with the imported type &#39;EnumExtensionsAttribute&#39; in &#39;MyProject, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the latest version of &lt;em&gt;StronglyTypedId&lt;/em&gt;, the attributes are not embedded by default, so you should not experience this problem. If you see this error, compare your installation to the examples in the installation guide.&lt;/p&gt;</summary>
  </entry>
</feed>