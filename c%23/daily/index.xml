<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-31T01:28:42Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ElectronNET/Electron.NET</title>
    <updated>2024-08-31T01:28:42Z</updated>
    <id>tag:github.com,2024-08-31:/ElectronNET/Electron.NET</id>
    <link href="https://github.com/ElectronNET/Electron.NET" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build cross platform desktop apps with ASP.NET Core (Razor Pages, MVC, Blazor).&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/ElectronNET/Electron.NET&#34;&gt;&lt;img src=&#34;https://github.com/ElectronNET/Electron.NET/raw/main/assets/images/electron.net-logo.png&#34; alt=&#34;Electron.NET Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://donorbox.org/electron-net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Donorbox-green.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/ElectronNET/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ElectronNET/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ElectronNET/Electron.NET/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Build cross platform desktop apps with .NET 8 and Blazor, ASP.NET Core (Razor Pages, MVC).&lt;/p&gt; &#xA;&lt;p&gt;Electron.NET is a &lt;strong&gt;wrapper&lt;/strong&gt; around a native Electron application with an embedded ASP.NET Core application. Via our Electron.NET IPC bridge we can invoke Electron APIs from .NET.&lt;/p&gt; &#xA;&lt;p&gt;The CLI extensions hosts our toolset to build and start Electron.NET applications.&lt;/p&gt; &#xA;&lt;h2&gt;Wait - you host a .NET Core app inside Electron? Why?&lt;/h2&gt; &#xA;&lt;p&gt;Well... there are lots of different approaches how to get a X-plat desktop app running. We thought it would be nice for .NET devs to use the ASP.NET Core environment and just embed it inside a pretty robust X-plat enviroment called Electron. Porting Electron to .NET is not a goal of this project, at least we don&#39;t have any clue how to do it. We just combine ASP.NET Core &amp;amp; Electron.&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ NuGet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/ElectronNET.API/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ElectronNET.API.svg?style=flat-square&#34; alt=&#34;NuGet&#34;&gt; ElectronNET.API &lt;/a&gt; | &lt;a href=&#34;https://www.nuget.org/packages/ElectronNET.CLI/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ElectronNET.CLI.svg?style=flat-square&#34; alt=&#34;NuGet&#34;&gt; ElectronNET.CLI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üõ† Requirements to Run&lt;/h2&gt; &#xA;&lt;p&gt;The current Electron.NET CLI builds Windows/macOS/Linux binaries. Our API uses .NET 8, so our minimum base OS is the same as &lt;a href=&#34;https://github.com/dotnet/core/raw/main/release-notes/8.0/supported-os.md&#34;&gt;.NET 8&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also you should have installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;npm &lt;a href=&#34;https://nodejs.org&#34;&gt;contained in nodejs (at least Version 16.17.1)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí¨ Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/ElectronNET/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ElectronNET/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Besides the chat on Gitter and the issues &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET/issues&#34;&gt;discussed here&lt;/a&gt; you can also use &lt;a href=&#34;https://stackoverflow.com/questions/tagged/electron.net&#34;&gt;StackOverflow&lt;/a&gt; with the tag &lt;code&gt;electron.net&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to sponsor the further maintenance and development of this project &lt;a href=&#34;https://raw.githubusercontent.com/ElectronNET/Electron.NET/main/#%F0%9F%99%8F-donate&#34;&gt;see the donate section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üë©‚Äçüè´ Usage&lt;/h2&gt; &#xA;&lt;p&gt;To activate and communicate with the &#34;native&#34; (sort of native...) Electron API include the &lt;a href=&#34;https://www.nuget.org/packages/ElectronNET.API/&#34;&gt;ElectronNET.API NuGet package&lt;/a&gt; in your ASP.NET Core app.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;PM&amp;gt; Install-Package ElectronNET.API&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Using Minimal-API&lt;/h2&gt; &#xA;&lt;p&gt;You start Electron.NET up with an &lt;code&gt;UseElectron&lt;/code&gt; WebHostBuilder-Extension and open the Electron Window:&lt;/p&gt; &#xA;&lt;h3&gt;Program.cs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using ElectronNET.API;&#xA;using ElectronNET.API.Entities;&#xA;&#xA;var builder = WebApplication.CreateBuilder(args);&#xA;builder.WebHost.UseElectron(args);&#xA;&#xA;// Is optional, but you can use the Electron.NET API-Classes directly with DI (relevant if you want more encoupled code)&#xA;builder.Services.AddElectron();&#xA;&#xA;var app = builder.Build();&#xA;&#xA;...&#xA;&#xA;await app.StartAsync();&#xA;&#xA;// Open the Electron-Window here&#xA;await Electron.WindowManager.CreateWindowAsync();&#xA;&#xA;app.WaitForShutdown();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup using Normal-API&lt;/h2&gt; &#xA;&lt;h3&gt;Program.cs&lt;/h3&gt; &#xA;&lt;p&gt;You start Electron.NET up with an &lt;code&gt;UseElectron&lt;/code&gt; WebHostBuilder-Extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;&#xA;    Host.CreateDefaultBuilder(args)&#xA;        .ConfigureWebHostDefaults(webBuilder =&amp;gt;&#xA;        {&#xA;            webBuilder.UseElectron(args);&#xA;            webBuilder.UseStartup&amp;lt;Startup&amp;gt;();&#xA;        });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Startup.cs&lt;/h3&gt; &#xA;&lt;p&gt;Open the Electron Window in the &lt;em&gt;Startup.cs&lt;/em&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#xA;{&#xA;    //...&#xA;&#xA;    Electron.WindowManager.CreateWindowAsync();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Starting the Application&lt;/h2&gt; &#xA;&lt;p&gt;To start the application make sure you have installed the &#34;&lt;a href=&#34;https://www.nuget.org/packages/ElectronNET.CLI/&#34;&gt;ElectronNET.CLI&lt;/a&gt;&#34; packages as global tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet tool install ElectronNET.CLI -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the first time, you need an Electron.NET project initialization. Type the following command in your ASP.NET Core folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Now a electronnet.manifest.json should appear in your ASP.NET Core project&lt;/li&gt; &#xA; &lt;li&gt;Now run the following:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Only the first &lt;code&gt;electronize start&lt;/code&gt; is slow. The next will go on faster.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üî≠ Develop Electron.NET apps using a file watcher&lt;/h2&gt; &#xA;&lt;p&gt;The file watcher is included with version 8.31.1 of Electron.NET. For example, a file change can trigger compilation, test execution, or deployment. The Electron.NET window will automatically refresh and new code changes will be visible more quickly. The following Electron.NET CLI command is required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize start /watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Only the first &lt;code&gt;electronize start&lt;/code&gt; is slow. The next will go on faster.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üêû Debugging the Application&lt;/h2&gt; &#xA;&lt;p&gt;Start your Electron.NET application with the Electron.NET CLI command. In Visual Studio attach to your running application instance. Go in the &lt;strong&gt;Debug&lt;/strong&gt; Menu and click on &lt;strong&gt;Attach to Process...&lt;/strong&gt;. Sort by your projectname on the right and select it on the list.&lt;/p&gt; &#xA;&lt;h2&gt;üìî Usage of the Electron API&lt;/h2&gt; &#xA;&lt;p&gt;A complete documentation will follow. Until then take a look in the source code of the sample application:&lt;br&gt; &lt;a href=&#34;https://github.com/ElectronNET/electron.net-api-demos&#34;&gt;Electron.NET API Demos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this YouTube video, we show you how you can create a new project, use the Electron.NET API, debug a application and build an executable desktop app for Windows: &lt;a href=&#34;https://www.youtube.com/watch?v=nuM6AojRFHk&#34;&gt;Electron.NET - Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚õè Building Release Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;Here you need the Electron.NET CLI as well. Type the following command in your ASP.NET Core folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize build /target win&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are additional platforms available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize build /target win&#xA;electronize build /target osx&#xA;electronize build /target linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those three &#34;default&#34; targets will produce x64 packages for those platforms.&lt;/p&gt; &#xA;&lt;p&gt;For certain NuGet packages or certain scenarios you may want to build a pure x86 application. To support those things you can define the desired &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog&#34;&gt;.NET Core runtime&lt;/a&gt;, the &lt;a href=&#34;https://github.com/electron-userland/electron-packager/raw/master/docs/api.md#platform&#34;&gt;electron platform&lt;/a&gt; and &lt;a href=&#34;https://github.com/electron-userland/electron-packager/raw/master/docs/api.md#arch&#34;&gt;electron architecture&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize build /target custom &#34;win7-x86;win32&#34; /electron-arch ia32 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The end result should be an electron app under your &lt;strong&gt;/bin/desktop&lt;/strong&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;macOS builds can&#39;t be created on Windows machines because they require symlinks that aren&#39;t supported on Windows (per &lt;a href=&#34;https://github.com/electron-userland/electron-packager/issues/71&#34;&gt;this Electron issue&lt;/a&gt;). macOS builds can be produced on either Linux or macOS machines.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üîÑ Update&lt;/h2&gt; &#xA;&lt;p&gt;After an update to the latest Electron.API package, an update to the latest Electron.CLI is always required. In addition, always update the CLI via NuGet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet tool update ElectronNET.CLI -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/GregorBiswanger&#34;&gt;Gregor Biswanger&lt;/a&gt;&lt;/strong&gt; - (Microsoft MVP, Intel Black Belt and Intel Software Innovator) is a freelance lecturer, consultant, trainer, author and speaker. He is a consultant for large and medium-sized companies, organizations and agencies for software architecture, web- and cross-platform development. You can find Gregor often on the road attending or speaking at international conferences. - &lt;a href=&#34;http://www.cross-platform-blog.com&#34;&gt;Cross-Platform-Blog&lt;/a&gt; - Twitter &lt;a href=&#34;https://www.twitter.com/BFreakout&#34;&gt;@BFreakout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/FlorianRappl&#34;&gt;Dr. Florian Rappl&lt;/a&gt;&lt;/strong&gt; - Software Developer - from Munich, Germany. Microsoft MVP &amp;amp; Web Geek. - &lt;a href=&#34;https://microfrontends.art&#34;&gt;The Art of Micro Frontends&lt;/a&gt; - &lt;a href=&#34;https://florian-rappl.de&#34;&gt;Homepage&lt;/a&gt; - Twitter &lt;a href=&#34;https://twitter.com/florianrappl&#34;&gt;@florianrappl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/robertmuehsig&#34;&gt;Robert Muehsig&lt;/a&gt;&lt;/strong&gt; - Software Developer - from Dresden, Germany, now living &amp;amp; working in Switzerland. Microsoft MVP &amp;amp; Web Geek. - &lt;a href=&#34;https://blog.codeinside.eu&#34;&gt;codeinside Blog&lt;/a&gt; - Twitter &lt;a href=&#34;https://twitter.com/robert0muehsig&#34;&gt;@robert0muehsig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the list of &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who participated in this project.&lt;/p&gt; &#xA;&lt;h2&gt;üôã‚Äç‚ôÄÔ∏èüôã‚Äç‚ôÇ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to submit a pull request if you find any bugs (to see a list of active issues, visit the &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET/issues&#34;&gt;Issues section&lt;/a&gt;. Please make sure all commits are properly documented.&lt;/p&gt; &#xA;&lt;h2&gt;üß™ Working with this Repo&lt;/h2&gt; &#xA;&lt;p&gt;This video provides an introduction to development for Electron.NET: &lt;a href=&#34;https://youtu.be/Po-saU_Z6Ws&#34;&gt;Electron.NET - Contributing Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository consists of the main parts (API &amp;amp; CLI) and it&#39;s own &#34;playground&#34; ASP.NET Core application. Both main parts produce local NuGet packages, that are versioned with 99.0.0. The first thing you will need is to run one of the build scripts (.cmd or .ps1 for Windows, the .sh for macOS/Linux).&lt;/p&gt; &#xA;&lt;p&gt;If you look for pure &lt;strong&gt;&lt;a href=&#34;https://github.com/ElectronNET&#34;&gt;demo projects&lt;/a&gt;&lt;/strong&gt; checkout the other repositories.&lt;/p&gt; &#xA;&lt;p&gt;The problem working with this repository is, that NuGet has a pretty aggressive cache, see &lt;a href=&#34;https://github.com/ElectronNET/Electron.NET/wiki&#34;&gt;here for further information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üôè Donate&lt;/h2&gt; &#xA;&lt;p&gt;We do this open source work in our free time. If you&#39;d like us to invest more time on it, please &lt;a href=&#34;https://donorbox.org/electron-net&#34;&gt;donate&lt;/a&gt;. Donation can be used to increase some issue priority. Thank you!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://donorbox.org/electron-net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Donorbox-green.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, consider using a GitHub sponsorship for the core maintainers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/GregorBiswanger&#34;&gt;Gregor Biswanger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/FlorianRappl&#34;&gt;Florian Rappl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any support appreciated! üçª&lt;/p&gt; &#xA;&lt;h2&gt;üéâ License&lt;/h2&gt; &#xA;&lt;p&gt;MIT-licensed. See &lt;a href=&#34;https://raw.githubusercontent.com/ElectronNET/Electron.NET/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìù Important notes&lt;/h2&gt; &#xA;&lt;h3&gt;ElectronNET.API &amp;amp; ElectronNET.CLI Version 9.31.2&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you also have the new Electron.NET API &amp;amp; CLI 9.31.2 version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet tool update ElectronNET.CLI -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This now uses &lt;a href=&#34;https://www.electron.build/configuration/configuration&#34;&gt;electron-builder&lt;/a&gt; and the necessary configuration to build is made in the &lt;strong&gt;electron.manifest.json&lt;/strong&gt; file (on the build part). In addition, own Electron.NET configurations are stored (on the root).&lt;/p&gt; &#xA;&lt;p&gt;Please make sure that your &lt;strong&gt;electron.manifest.json&lt;/strong&gt; file has the following new structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;executable&#34;: &#34;{{executable}}&#34;,&#xA;  &#34;splashscreen&#34;: {&#xA;    &#34;imageFile&#34;: &#34;&#34;&#xA;  },&#xA;  &#34;name&#34;: &#34;{{executable}}&#34;,&#xA;  &#34;author&#34;: &#34;&#34;,&#xA;  &#34;singleInstance&#34;: false,&#xA;  &#34;build&#34;: {&#xA;    &#34;appId&#34;: &#34;com.{{executable}}.app&#34;,&#xA;    &#34;productName&#34;: &#34;{{executable}}&#34;,&#xA;    &#34;copyright&#34;: &#34;Copyright ¬© 2020&#34;,&#xA;    &#34;buildVersion&#34;: &#34;1.0.0&#34;,&#xA;    &#34;compression&#34;: &#34;maximum&#34;,&#xA;    &#34;directories&#34;: {&#xA;      &#34;output&#34;: &#34;../../../bin/Desktop&#34;&#xA;    },&#xA;    &#34;extraResources&#34;: [&#xA;      {&#xA;        &#34;from&#34;: &#34;./bin&#34;,&#xA;        &#34;to&#34;: &#34;bin&#34;,&#xA;        &#34;filter&#34;: [&#34;**/*&#34;]&#xA;      }&#xA;    ],&#xA;    &#34;files&#34;: [&#xA;      {&#xA;        &#34;from&#34;: &#34;./ElectronHostHook/node_modules&#34;,&#xA;        &#34;to&#34;: &#34;ElectronHostHook/node_modules&#34;,&#xA;        &#34;filter&#34;: [&#34;**/*&#34;]&#xA;      },&#xA;      &#34;**/*&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ElectronNET.CLI Version 0.0.9&lt;/h3&gt; &#xA;&lt;p&gt;In the Version 0.0.9 the CLI was not a global tool and needed to be registered like this in the &lt;em&gt;.csproj&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;ItemGroup&amp;gt;&#xA;  &amp;lt;DotNetCliToolReference Include=&#34;ElectronNET.CLI&#34; Version=&#34;0.0.9&#34; /&amp;gt;&#xA;&amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you edited the &lt;em&gt;.csproj&lt;/em&gt; file, you need to restore your NuGet packages within your Project. Run the following command in your ASP.NET Core folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you still use this version you will need to invoke it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;electronize ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Node.js Integration&lt;/h3&gt; &#xA;&lt;p&gt;Electron.NET requires Node.js integration to be enabled for IPC to function. If you are not using the IPC functionality you can disable Node.js integration like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;WebPreferences wp = new WebPreferences();&#xA;wp.NodeIntegration = false;&#xA;BrowserWindowOptions browserWindowOptions = new BrowserWindowOptions&#xA;{&#xA;    WebPreferences = wp&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependency Injection&lt;/h3&gt; &#xA;&lt;p&gt;ElectronNET.API can be added to your DI container within the &lt;code&gt;Startup&lt;/code&gt; class. All of the modules available in Electron will be added as Singletons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using ElectronNET.API;&#xA;&#xA;public void ConfigureServices(IServiceCollection services)&#xA;{&#xA;    services.AddElectron();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>