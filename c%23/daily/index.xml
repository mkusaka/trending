<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-31T01:25:13Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rasta-mouse/CsWhispers</title>
    <updated>2024-01-31T01:25:13Z</updated>
    <id>tag:github.com,2024-01-31:/rasta-mouse/CsWhispers</id>
    <link href="https://github.com/rasta-mouse/CsWhispers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source generator to add D/Invoke and indirect syscall methods to a C# project.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CsWhispers&lt;/h1&gt; &#xA;&lt;p&gt;Source generator to add D/Invoke and indirect syscall methods to a C# project.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Add the latest NuGet package to your project and allow unsafe code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&#34;Microsoft.NET.Sdk&#34;&amp;gt;&#xA;&#xA;    &amp;lt;PropertyGroup&amp;gt;&#xA;        &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;&#xA;        &amp;lt;TargetFramework&amp;gt;net481&amp;lt;/TargetFramework&amp;gt;&#xA;        &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;&#xA;        &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;&#xA;        &amp;lt;LangVersion&amp;gt;12&amp;lt;/LangVersion&amp;gt;&#xA;    &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;    &amp;lt;!-- CsWhispers package --&amp;gt;&#xA;    &amp;lt;ItemGroup&amp;gt;&#xA;      &amp;lt;PackageReference Include=&#34;CsWhispers&#34; Version=&#34;0.0.2&#34; /&amp;gt;&#xA;    &amp;lt;/ItemGroup&amp;gt;&#xA;&#xA;    &amp;lt;!-- Allow unsafe code --&amp;gt;&#xA;    &amp;lt;PropertyGroup Condition=&#34; &#39;$(Configuration)&#39; == &#39;Debug&#39; &#34;&amp;gt;&#xA;      &amp;lt;AllowUnsafeBlocks&amp;gt;true&amp;lt;/AllowUnsafeBlocks&amp;gt;&#xA;    &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;    &amp;lt;PropertyGroup Condition=&#34; &#39;$(Configuration)&#39; == &#39;Release&#39; &#34;&amp;gt;&#xA;      &amp;lt;AllowUnsafeBlocks&amp;gt;true&amp;lt;/AllowUnsafeBlocks&amp;gt;&#xA;    &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a file in your project called &lt;code&gt;CsWhispers.txt&lt;/code&gt; and set its build action properties to &lt;code&gt;AdditionalFiles&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;ItemGroup&amp;gt;&#xA;  &amp;lt;None Remove=&#34;CsWhispers.txt&#34; /&amp;gt;&#xA;  &amp;lt;AdditionalFiles Include=&#34;CsWhispers.txt&#34; /&amp;gt;&#xA;&amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add each NT API and any supporting structs/enums that you want to be included in your project. Each must be on its own line, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;NtOpenProcess&#xA;&#xA;HANDLE&#xA;NTSTATUS&#xA;CLIENT_ID&#xA;UNICODE_STRING&#xA;OBJECT_ATTRIBUTES&#xA;&#xA;PWSTR&#xA;PCWSTR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;See the project Wiki for a full list of supported APIs.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Global namespaces are automatically added to allow for clean code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public static unsafe void Main()&#xA;{&#xA;    // use self as example&#xA;    using var self = Process.GetCurrentProcess();&#xA;        &#xA;    HANDLE hProcess;&#xA;    OBJECT_ATTRIBUTES oa;&#xA;    CLIENT_ID cid = new()&#xA;    {&#xA;        UniqueProcess = new HANDLE((IntPtr)self.Id)&#xA;    };&#xA;&#xA;    var status = NtOpenProcess(&#xA;        &amp;amp;hProcess,&#xA;        PROCESS_ALL_ACCESS,&#xA;        &amp;amp;oa,&#xA;        &amp;amp;cid);&#xA;&#xA;    Console.WriteLine(&#34;Status: {0}&#34;, status.SeverityCode);&#xA;    Console.WriteLine(&#34;HANDLE: 0x{0:X}&#34;, hProcess.Value.ToInt64());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;D/Invoke&lt;/h2&gt; &#xA;&lt;p&gt;CsWhispers includes a minimalised version of D/Invoke, so you may also call &lt;code&gt;Generic.GetLibraryAddress&lt;/code&gt;, &lt;code&gt;Generic.DynamicFunctionInvoke&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Extending&lt;/h2&gt; &#xA;&lt;p&gt;All of the generated code goes into a partial &lt;code&gt;CsWhispers.Syscalls&lt;/code&gt; class, which you can extend to add your own APIs. For example, create &lt;code&gt;MyAPIs.cs&lt;/code&gt; and add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;namespace CsWhispers;&#xA;&#xA;public static partial class Syscalls&#xA;{&#xA;    public static NTSTATUS NtCreateThreadEx()&#xA;    {&#xA;        // whatever&#xA;        return new NTSTATUS(0);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can then be called in your main code without having to add any additional using statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;namespace ConsoleApp1;&#xA;&#xA;internal static class Program&#xA;{&#xA;    public static void Main()&#xA;    {&#xA;        var status = NtCreateThreadEx();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add 32-bit support.&lt;/li&gt; &#xA; &lt;li&gt;Randomise API hashes on each build.&lt;/li&gt; &#xA; &lt;li&gt;Add additional configuration options to choose between direct and indirect syscalls.&lt;/li&gt; &#xA; &lt;li&gt;Implicitly add structs/enums for APIs without having to declare them in &lt;code&gt;CsWhispers.txt&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project was inspired by the previous versions of SysWhipsers and SharpWhispers in particular. So hat&#39;s off to &lt;a href=&#34;https://twitter.com/Jackson_T&#34;&gt;@Jackson_T&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/KlezVirus&#34;&gt;@KlezVirus&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/d_glenx&#34;&gt;@d_glenx&lt;/a&gt;, and everyone else that has contribured code and/or ideas.&lt;/p&gt;</summary>
  </entry>
</feed>