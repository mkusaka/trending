<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T01:27:41Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VeritasSoftware/AspNetCore.ApiGateway</title>
    <updated>2024-03-01T01:27:41Z</updated>
    <id>tag:github.com,2024-03-01:/VeritasSoftware/AspNetCore.ApiGateway</id>
    <link href="https://github.com/VeritasSoftware/AspNetCore.ApiGateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Asp Net Core Api Gateway Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AspNetCore.ApiGateway&lt;/h1&gt; &#xA;&lt;h2&gt;Asp Net Core Api Gateway package.&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/VeritasSoftware/AspNetCore.ApiGateway&#34;&gt;&lt;img src=&#34;https://travis-ci.com/VeritasSoftware/AspNetCore.ApiGateway.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Packages&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version &amp;amp; Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;AspNetCore.ApiGateway&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.ApiGateway&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/AspNetCore.ApiGateway&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;AspNetCore.ApiGateway.Client&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.ApiGateway.Client&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/AspNetCore.ApiGateway.Client&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;ts-aspnetcore-apigateway-client&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.npmjs.com/package/ts-aspnetcore-apigateway-client&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/ts-aspnetcore-apigateway-client&#34; alt=&#34;NPM Downloads count&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;+ This project has been on-boarded by the .NET Foundation, in the Seed category.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://github.com/dotnet-foundation/projects/issues/255&#34;&gt;more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;More of my open-source projects&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Live Health Checks&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Real-Time Api Health Check Monitoring system&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/VeritasSoftware/LiveHealthChecks&#34;&gt;Browse&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;The microservices architecture uses an Api Gateway as shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/Architecture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The package:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes creating an Api Gateway a breeze!!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Swagger&lt;/li&gt; &#xA; &lt;li&gt;Authorization&lt;/li&gt; &#xA; &lt;li&gt;Filters &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Action&lt;/li&gt; &#xA;   &lt;li&gt;Exception&lt;/li&gt; &#xA;   &lt;li&gt;Result&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Load balancing&lt;/li&gt; &#xA; &lt;li&gt;Response caching&lt;/li&gt; &#xA; &lt;li&gt;Web sockets&lt;/li&gt; &#xA; &lt;li&gt;Event sourcing&lt;/li&gt; &#xA; &lt;li&gt;Request aggregation&lt;/li&gt; &#xA; &lt;li&gt;Middleware service&lt;/li&gt; &#xA; &lt;li&gt;Logging&lt;/li&gt; &#xA; &lt;li&gt;Clients available in &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.NET&lt;/li&gt; &#xA;   &lt;li&gt;Typescript&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gateway as a RESTful Microservice Facade&lt;/h2&gt; &#xA;&lt;h3&gt;Your &lt;strong&gt;Gateway API&lt;/strong&gt; is a microservice which exposes endpoints that are a &lt;strong&gt;facade&lt;/strong&gt; over your backend API endpoints.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GET&lt;/li&gt; &#xA; &lt;li&gt;HEAD&lt;/li&gt; &#xA; &lt;li&gt;POST&lt;/li&gt; &#xA; &lt;li&gt;PUT&lt;/li&gt; &#xA; &lt;li&gt;PATCH&lt;/li&gt; &#xA; &lt;li&gt;DELETE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div&gt; &#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/FacadeDesignPattern.PNG&#34; style=&#34;width:60%;height:auto;max-width:500px;&#34; alt=&#34;API Gateway Facade&#34;&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;In the solution, there are 2 &lt;strong&gt;back end APIs&lt;/strong&gt; : &lt;strong&gt;Weather API&lt;/strong&gt; and &lt;strong&gt;Stock API&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For eg. To make a GET call to the backend API, you would set up an Api and a GET Route in your Gateway API&#39;s &lt;strong&gt;Api Orchestrator&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, the client app would make a GET call to the Gateway API which would make a GET call to the backend API using HttpClient.&lt;/p&gt; &#xA;&lt;h2&gt;In your Backend API project&lt;/h2&gt; &#xA;&lt;p&gt;Let us say you have a GET endpoint like this.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP GET - /weatherforecast/forecast&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;In your Gateway API project&lt;/h2&gt; &#xA;&lt;p&gt;You add a Route for the backend GET call in the &lt;strong&gt;Api Orchrestrator&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add a reference to the package and...&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an &lt;strong&gt;Api Orchestration&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;You create an Api (weatherservice) and add a Route (forecast).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;    public static class ApiOrchestration&#xA;    {&#xA;        public static void Create(IApiOrchestrator orchestrator, IApplicationBuilder app)&#xA;        {&#xA;            var serviceProvider = app.ApplicationServices;&#xA;&#xA;            var weatherService = serviceProvider.GetService&amp;lt;IWeatherService&amp;gt;();&#xA;&#xA;            var weatherApiClientConfig = weatherService.GetClientConfig();&#xA;&#xA;            orchestrator.StartGatewayHub = true;&#xA;            orchestrator.GatewayHubUrl = &#34;https://localhost:44360/GatewayHub&#34;;&#xA;&#xA;            orchestrator.AddApi(&#34;weatherservice&#34;, &#34;http://localhost:63969/&#34;)&#xA;                                //Get&#xA;                                .AddRoute(&#34;forecast&#34;, GatewayVerb.GET, new RouteInfo { Path = &#34;weatherforecast/forecast&#34;, ResponseType = typeof(IEnumerable&amp;lt;WeatherForecast&amp;gt;) })&#xA;                                //Head&#xA;                                .AddRoute(&#34;forecasthead&#34;, GatewayVerb.HEAD, new RouteInfo { Path = &#34;weatherforecast/forecast&#34; })&#xA;                                //Get with params&#xA;                                .AddRoute(&#34;typewithparams&#34;, GatewayVerb.GET, new RouteInfo {  Path = &#34;weatherforecast/types/{index}&#34;})&#xA;                                //Get using custom HttpClient&#xA;                                .AddRoute(&#34;types&#34;, GatewayVerb.GET, new RouteInfo { Path = &#34;weatherforecast/types&#34;, ResponseType = typeof(string[]), HttpClientConfig = weatherApiClientConfig })&#xA;                                //Get with param using custom HttpClient&#xA;                                .AddRoute(&#34;type&#34;, GatewayVerb.GET, new RouteInfo { Path = &#34;weatherforecast/types/&#34;, ResponseType = typeof(WeatherTypeResponse), HttpClientConfig = weatherApiClientConfig })&#xA;                                //Get using custom implementation&#xA;                                .AddRoute(&#34;forecast-custom&#34;, GatewayVerb.GET, weatherService.GetForecast)&#xA;                                //Post&#xA;                                .AddRoute(&#34;add&#34;, GatewayVerb.POST, new RouteInfo { Path = &#34;weatherforecast/types/add&#34;, RequestType = typeof(AddWeatherTypeRequest), ResponseType = typeof(string[])})&#xA;                                //Put&#xA;                                .AddRoute(&#34;update&#34;, GatewayVerb.PUT, new RouteInfo { Path = &#34;weatherforecast/types/update&#34;, RequestType = typeof(UpdateWeatherTypeRequest), ResponseType = typeof(string[]) })&#xA;                                //Patch&#xA;                                .AddRoute(&#34;patch&#34;, GatewayVerb.PATCH, new RouteInfo { Path = &#34;weatherforecast/forecast/patch&#34;, ResponseType = typeof(WeatherForecast) })&#xA;                                //Delete&#xA;                                .AddRoute(&#34;remove&#34;, GatewayVerb.DELETE, new RouteInfo { Path = &#34;weatherforecast/types/remove/&#34;, ResponseType = typeof(string[]) })&#xA;                        .AddApi(&#34;stockservice&#34;, &#34;http://localhost:63967/&#34;)&#xA;                                .AddRoute(&#34;stocks&#34;, GatewayVerb.GET, new RouteInfo { Path = &#34;stock&#34;, ResponseType = typeof(IEnumerable&amp;lt;StockQuote&amp;gt;) })&#xA;                                .AddRoute(&#34;stock&#34;, GatewayVerb.GET, new RouteInfo { Path = &#34;stock/&#34;, ResponseType = typeof(StockQuote) })                                &#xA;                        .AddHub(&#34;chatservice&#34;, ConnectionHelpers.BuildHubConnection, &#34;2f85e3c6-66d2-48a3-8ff7-31a65073558b&#34;)&#xA;                                .AddRoute(&#34;room&#34;, new HubRouteInfo { InvokeMethod = &#34;SendMessage&#34;, ReceiveMethod = &#34;ReceiveMessage&#34;, ReceiveParameterTypes = new Type[] { typeof(string), typeof(string) } })&#xA;                        .AddEventSource(&#34;eventsourceservice&#34;, ConnectionHelpers.BuildEventSourceConnection, &#34;281802b8-6f19-4b9d-820c-9ed29ee127f3&#34;)&#xA;                                .AddRoute(&#34;mystream&#34;, new EventSourceRouteInfo { ReceiveMethod = &#34;ReceiveMyStreamEvent&#34;, Type = EventSourcingType.EventStore, OperationType = EventSourcingOperationType.PublishSubscribe, StreamName = &#34;my-stream&#34;, GroupName = &#34;my-group&#34; });&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hook up in Startup.cs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;        public void ConfigureServices(IServiceCollection services)&#xA;        {&#xA;            services.AddTransient&amp;lt;IWeatherService, WeatherService&amp;gt;();&#xA;&#xA;            //Api gateway&#xA;            services.AddApiGateway();&#xA;&#xA;            services.AddControllers();&#xA;&#xA;            services.AddSwaggerGen(c =&amp;gt;&#xA;            {&#xA;                c.SwaggerDoc(&#34;v1&#34;, new OpenApiInfo { Title = &#34;My Api Gateway&#34;, Version = &#34;v1&#34; });&#xA;            });&#xA;        }&#xA;&#xA;        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)&#xA;        {&#xA;            if (env.IsDevelopment())&#xA;            {&#xA;                app.UseDeveloperExceptionPage();&#xA;            }&#xA;&#xA;            app.UseSwagger();&#xA;&#xA;            app.UseSwaggerUI(c =&amp;gt;&#xA;            {&#xA;                c.SwaggerEndpoint(&#34;/swagger/v1/swagger.json&#34;, &#34;My Api Gateway&#34;);&#xA;            });&#xA;&#xA;            //Api gateway&#xA;            app.UseApiGateway(orchestrator =&amp;gt; ApiOrchestration.Create(orchestrator, app));&#xA;&#xA;            app.UseHttpsRedirection();&#xA;&#xA;            app.UseRouting();&#xA;&#xA;            app.UseAuthorization();&#xA;&#xA;            app.UseEndpoints(endpoints =&amp;gt;&#xA;            {&#xA;                //GatewayHub endpoint&#xA;                endpoints.MapHub&amp;lt;GatewayHub&amp;gt;(&#34;/gatewayhub&#34;);&#xA;                endpoints.MapControllers();&#xA;            });&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gateway Swagger appears as shown below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/ApiGateway.PNG&#34; alt=&#34;API Gateway Swagger&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To call the &lt;strong&gt;forecast&lt;/strong&gt; Route on the &lt;strong&gt;weather service&lt;/strong&gt; Api,&lt;/p&gt; &#xA;&lt;p&gt;you can enter the &lt;strong&gt;Api key&lt;/strong&gt; and &lt;strong&gt;Route key&lt;/strong&gt; into Swagger as below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/ApiGatewayCall.PNG&#34; alt=&#34;API Gateway Swagger&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will hit the &lt;strong&gt;weatherforecast/forecast&lt;/strong&gt; endpoint on the backend Weather API.&lt;/p&gt; &#xA;&lt;p&gt;You can check out how the Api Gateway supported Verbs are used below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_VERBS.md&#34;&gt;Verbs Usage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can check out how the Api Gateway&#39;s endpoint Authorization support below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_Authorization.md&#34;&gt;Authorization&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Customizations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Customize the default &lt;strong&gt;HttpClient&lt;/strong&gt; used by all the routes, to hit the backend Api.&lt;/li&gt; &#xA; &lt;li&gt;Customize the default HttpClient which each route uses to hit the backend Api.&lt;/li&gt; &#xA; &lt;li&gt;Use your own &lt;strong&gt;HttpClient&lt;/strong&gt; for each route.&lt;/li&gt; &#xA; &lt;li&gt;Use your own custom implementation to hit the backend Api.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Request aggregation&lt;/strong&gt;, see this section.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_Customizations.md&#34;&gt;Customizations&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Load Balancing&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_LoadBalancing.md&#34;&gt;Load Balancing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Response Caching&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_ResponseCaching.md&#34;&gt;Response Caching&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Web Sockets&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_WebSockets.md&#34;&gt;Web Sockets&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Event Sourcing&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_EventSourcing.md&#34;&gt;Event Sourcing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Filters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_ActionFilters.md&#34;&gt;Action Filters&lt;/a&gt;&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_ExceptionFilters.md&#34;&gt;Exception Filters&lt;/a&gt;&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_ResultFilters.md&#34;&gt;Result Filters&lt;/a&gt;&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Middleware Service&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_Middleware_Service.md&#34;&gt;Middleware Service&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Viewing your Gateway&#39;s Api Orchestration&lt;/h3&gt; &#xA;&lt;p&gt;Your Gateway&#39;s Api Orchestration is published by &lt;strong&gt;GET /api/Gateway/orchestration&lt;/strong&gt; endpoint.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_Orchestration.md&#34;&gt;Viewing Api Orchestration&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The Api Gateway uses &lt;strong&gt;ILogger&amp;lt;ApiGatewayLog&amp;gt;&lt;/strong&gt; to create logs.&lt;/p&gt; &#xA;&lt;p&gt;In your Gateway API project, this can be used to tap into these logs.&lt;/p&gt; &#xA;&lt;h2&gt;Clients&lt;/h2&gt; &#xA;&lt;p&gt;The Api Gateway supports a fixed set of endpoints.&lt;/p&gt; &#xA;&lt;p&gt;All routes go through these endpoints.&lt;/p&gt; &#xA;&lt;p&gt;The Client application has to talk to these endpoints of the Api Gateway.&lt;/p&gt; &#xA;&lt;p&gt;A Client library is provided for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_Net_Client.md&#34;&gt;&lt;strong&gt;.Net&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/VeritasSoftware/AspNetCore.ApiGateway/master/Docs/README_Typescript_Client.md&#34;&gt;&lt;strong&gt;Typescript&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dotnet-outdated/dotnet-outdated</title>
    <updated>2024-03-01T01:27:41Z</updated>
    <id>tag:github.com,2024-03-01:/dotnet-outdated/dotnet-outdated</id>
    <link href="https://github.com/dotnet-outdated/dotnet-outdated" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET Core global tool to display and update outdated NuGet packages in a project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet-outdated/dotnet-outdated/actions?workflow=Release&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-outdated/dotnet-outdated/workflows/Release/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/dotnet-outdated-tool/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/dotnet-outdated-tool.svg?sanitize=true&#34; alt=&#34;NuGet Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/dotnet-outdated-tool.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;dotnet-outdated&lt;/h1&gt; &#xA;&lt;p&gt;This is a continuation of the original &lt;code&gt;dotnet-outdated&lt;/code&gt; tool created by Jerrie Pelser.&lt;/p&gt; &#xA;&lt;p&gt;If you already have the original &lt;code&gt;dotnet-outdated&lt;/code&gt; tool installed you need to run &lt;code&gt;dotnet tool uninstall --global dotnet-outdated&lt;/code&gt; before installing this version.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;When using an IDE such as Visual Studio, it is easy to find out whether newer versions of the NuGet packages used by your project is available, by using the NuGet Package Manager. However, the .NET Core command-line tools do not provide a built-in way for you to report on outdated NuGet packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; is a .NET Core Global tool that allows you to quickly report on any outdated NuGet packages in your .NET Core and .NET Standard projects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#dotnet-outdated&#34;&gt;dotnet-outdated&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#specifying-the-path&#34;&gt;Specifying the path&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#upgrading-packages&#34;&gt;Upgrading packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#working-with-secure-feeds&#34;&gt;Working with secure feeds&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#issues-on-macos&#34;&gt;Issues on macOS&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#handling-pre-release-versions&#34;&gt;Handling pre-release versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#locking-to-the-current-major-or-minor-release&#34;&gt;Locking to the current major or minor release&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#reporting-on-transitive-dependencies&#34;&gt;Reporting on transitive dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#failing-when-updates-are-available&#34;&gt;Failing when updates are available&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#auto-references&#34;&gt;Auto-references&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#saving-results-to-a-file&#34;&gt;Saving results to a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#including-and-excluding-packages&#34;&gt;Including and excluding packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#only-listing-new-version-of-packages-older-than-a-specified-the-number-of-days&#34;&gt;Only listing new version of packages older than a specified the number of days&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#why-are-unrelated-changes-made-to-csproj-files-when-running-with--u&#34;&gt;Why are unrelated changes made to .csproj files when running with &lt;code&gt;-u&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/#why-i-am-getting-an-error-about-required-library-hostfxrdlllibhostfxrsolibhostfxrdylib-not-found&#34;&gt;Why I am getting an error about required library hostfxr.dll/libhostfxr.so/libhostfxr.dylib not found?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download and install the one of the currently supported &lt;a href=&#34;https://www.microsoft.com/net/download&#34;&gt;.NET SDKs&lt;/a&gt;. Once installed, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet tool install --global dotnet-outdated-tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have a previous version of &lt;strong&gt;dotnet-outdated&lt;/strong&gt; installed, you can upgrade to the latest version using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet tool update --global dotnet-outdated-tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Usage: dotnet outdated [options] &amp;lt;Path&amp;gt;&#xA;&#xA;Arguments:&#xA;  Path                                       The path to a .sln, .slnf, .csproj or .fsproj file, or to a directory containing a .NET Core solution/project. If none is specified, the current directory will be used.&#xA;&#xA;Options:&#xA;  --version                                  Show version information.&#xA;  -?|-h|--help                               Show help information.&#xA;  -i|--include-auto-references               Specifies whether to include auto-referenced packages.&#xA;  -pre|--pre-release &amp;lt;PRERELEASE&amp;gt;            Specifies whether to look for pre-release versions of packages. Possible values: Auto (default), Always or Never.&#xA;                                             Allowed values are: Auto, Always, Never.&#xA;                                             Default value is: Auto.&#xA;  -vl|--version-lock &amp;lt;VERSION_LOCK&amp;gt;          Specifies whether the package should be locked to the current Major or Minor version. Possible values: None (default), Major or Minor.&#xA;                                             Allowed values are: None, Major, Minor.&#xA;                                             Default value is: None.&#xA;  -t|--transitive                            Specifies whether it should detect transitive dependencies.&#xA;  -td|--transitive-depth &amp;lt;TRANSITIVE_DEPTH&amp;gt;  Defines how many levels deep transitive dependencies should be analyzed. Integer value (default = 1)&#xA;                                             Default value is: 1.&#xA;  -u|--upgrade[:&amp;lt;TYPE&amp;gt;]                      Specifies whether outdated packages should be upgraded. Possible values for &amp;lt;TYPE&amp;gt; is Auto (default) or Prompt.&#xA;                                             Allowed values are: Auto, Prompt.&#xA;  -f|--fail-on-updates                       Specifies whether it should return a non-zero exit code when updates are found.&#xA;  -inc|--include &amp;lt;FILTER_INCLUDE&amp;gt;            Specifies to only look at packages where the name contains the provided string. Culture and case insensitive. If provided multiple times, a single match is enough to include a package.&#xA;  -exc|--exclude &amp;lt;FILTER_EXCLUDE&amp;gt;            Specifies to only look at packages where the name does not contain the provided string. Culture and case insensitive. If provided multiple times, a single match is enough to exclude a package.&#xA;  -o|--output &amp;lt;OUTPUT_FILENAME&amp;gt;              Specifies the filename for a generated report. (Use the -of|--output-format option to specify the format. JSON by default.)&#xA;  -of|--output-format &amp;lt;OUTPUT_FILE_FORMAT&amp;gt;   Specifies the output format for the generated report. Possible values: json (default) or csv.&#xA;                                             Allowed values are: Json, Csv, Markdown.&#xA;                                             Default value is: Json.&#xA;  -ot|--older-than &amp;lt;OLDER_THAN_DAYS&amp;gt;         Only include package versions that are older than the specified number of days.&#xA;                                             Default value is: 0.&#xA;  -n|--no-restore                            Add the reference without performing restore preview and compatibility check.&#xA;  -r|--recursive                             Recursively search for all projects within the provided directory.&#xA;  -ifs|--ignore-failed-sources               Treat package source failures as warnings.&#xA;  -utd|--include-up-to-date                  Include all dependencies in the report even the ones not outdated.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/screenshot.png&#34; alt=&#34;Screenshot of dotnet-outdated&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Specifying the path&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;strong&gt;dotnet-outdated&lt;/strong&gt; without specifying the &lt;code&gt;Path&lt;/code&gt; argument. In this case, it will look in the current directory for a solution (&lt;code&gt;.sln&lt;/code&gt;) and if one is found it will analyze that solution. If no solution is found it will look for a project (&lt;code&gt;.csproj&lt;/code&gt; or &lt;code&gt;.fsproj&lt;/code&gt;) and if one is found it will analyze that project. If more than one solution or project is found in the current folder, &lt;strong&gt;dotnet-outdated&lt;/strong&gt; will report an error.&lt;/p&gt; &#xA;&lt;p&gt;You can also pass a directory in the &lt;code&gt;Path&lt;/code&gt; argument, in which case the same logic described above will be used, but in the directory specified.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, you can specify the path to a solution (&lt;code&gt;.sln&lt;/code&gt;) or project (&lt;code&gt;.csproj&lt;/code&gt; or &lt;code&gt;.fsproj&lt;/code&gt;) which &lt;strong&gt;dotnet-outdated&lt;/strong&gt; must analyze.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading packages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; can automatically attempt to upgrade any outdated packages to the latest version by passing the &lt;code&gt;-u|--upgrade&lt;/code&gt; option. You can let &lt;strong&gt;dotnet-outdated&lt;/strong&gt; prompt you for each outdated package by using the &lt;code&gt;-u:prompt&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Working with secure feeds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; supports secure NuGet feeds, such as &lt;a href=&#34;https://www.myget.org&#34;&gt;MyGet&lt;/a&gt;. It is suggested that you add these to your sources using the &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/tools/cli-ref-sources&#34;&gt;source command of the NuGet CLI&lt;/a&gt;. For secure feeds, you can do one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add a pre-authenticated URL.&lt;/li&gt; &#xA; &lt;li&gt;Specify the username and password for the feed using the &lt;code&gt;-UserName&lt;/code&gt; and &lt;code&gt;-Password&lt;/code&gt; options of the &lt;code&gt;nuget sources&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;li&gt;Use a credential provider like &lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider&#34;&gt;the Azure Artifacts credential provider&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; supports computer-level, user-level and project-level configuration files.&lt;/p&gt; &#xA;&lt;p&gt;Using credential providers requires an environment variable &lt;code&gt;DOTNET_HOST_PATH&lt;/code&gt; that is set to the path to the &lt;code&gt;dotnet&lt;/code&gt; executable (e.g., &lt;code&gt;/usr/local/share/dotnet/dotnet&lt;/code&gt;). Some versions of the .NET Core SDK do this for you at runtime, some do not. You will get an error message explaining this if the process finds it missing.&lt;/p&gt; &#xA;&lt;h3&gt;Issues on macOS&lt;/h3&gt; &#xA;&lt;p&gt;In my testing, I ran into issues on macOS where the location of the user-level configuration file was not detected correctly. If you run into problems where &lt;strong&gt;dotnet-outdated&lt;/strong&gt; does not appear to pick up your feeds correctly, please add the source to a project-level configuration file.&lt;/p&gt; &#xA;&lt;p&gt;Also, on macOS and Linux, the password needs to be stored in clear text. You can do this by passing the &lt;code&gt;-StorePasswordInClearText&lt;/code&gt; option to the &lt;code&gt;nuget sources&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Handling pre-release versions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; allows you to specify whether to use pre-release versions of packages or not by passing the &lt;code&gt;-pre|--pre-release&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;Auto&lt;/code&gt; will determine whether to use pre-release versions of a package based on whether the referenced version itself is a pre-release version. If the referenced version is a pre-release version, &lt;strong&gt;dotnet-outdated&lt;/strong&gt; will include newer pre-release versions of the package. If the referenced version is not a pre-release version, &lt;strong&gt;dotnet-outdated&lt;/strong&gt; will ignore pre-release versions.&lt;/p&gt; &#xA;&lt;p&gt;You can also tell &lt;strong&gt;dotnet-outdated&lt;/strong&gt; to always include pre-release versions by passing the &lt;code&gt;Always&lt;/code&gt; value for this option. Conversely, you can tell it to never include pre-release versions by passing the &lt;code&gt;Never&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;h2&gt;Locking to the current major or minor release&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; allows you to lock the version to the current major or minor version by passing the &lt;code&gt;-vl|--version-lock&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The default value of &lt;code&gt;None&lt;/code&gt; will return the absolute latest package, regardless of whether it is a major or minor version upgrade.&lt;/p&gt; &#xA;&lt;p&gt;Passing a value of &lt;code&gt;Major&lt;/code&gt; will only report on later packages in the current major version range. For example, if the current version for a package is &lt;code&gt;4.1.0&lt;/code&gt;, &lt;strong&gt;dotnet-outdated&lt;/strong&gt; will only report on later packages in the &lt;code&gt;4.x&lt;/code&gt; version range.&lt;/p&gt; &#xA;&lt;p&gt;Passing a value of &lt;code&gt;Minor&lt;/code&gt; will only report on later packages in the current minor version range. For example, if the current version for a package is &lt;code&gt;4.1.0&lt;/code&gt;, &lt;strong&gt;dotnet-outdated&lt;/strong&gt; will only report on later packages in the &lt;code&gt;4.1.x&lt;/code&gt; version range.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting on transitive dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; supports reporting on transitive dependencies as well. These are NuGet packages on which the NuGet packages directly referenced by your application depends. To enable reporting on transitive dependencies, you can pass the &lt;code&gt;-t|--transitive&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet-outdated/dotnet-outdated/master/transitive-screenshot.png&#34; alt=&#34;Screenshot of analysing transitive-dependencies&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also specify how many levels deep it should analyze transitive dependencies with the &lt;code&gt;-td|--transitive-depth&lt;/code&gt; option. You can pass an integer value for this option (the default value is &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Be careful with these options!&lt;/strong&gt;. If you try and analyze dependencies too many levels deep, the analysis can take a very long time.&lt;/p&gt; &#xA;&lt;h2&gt;Failing when updates are available&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotnet-outdated&lt;/strong&gt; can be easily incorporated into your build process. You can optionally enable a non-zero return code when updates are found to make failing a build easy to configure. To enable this option you can pass the &lt;code&gt;-f|--fail-on-updates&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Auto-references&lt;/h2&gt; &#xA;&lt;p&gt;Before version 1.2 of &lt;strong&gt;dotnet-outdated&lt;/strong&gt;, it used to include automatically referenced packages in the output. The automatically referenced packages are typically your framework packages, such as &lt;code&gt;Microsoft.NETCore.App&lt;/code&gt; or &lt;code&gt;NETStandard.Library&lt;/code&gt;. It does not make sense reporting on these as outdated since you should target a new framework to have these updated.&lt;/p&gt; &#xA;&lt;p&gt;From version 1.2, if you want these packages reported, you can pass the &lt;code&gt;-i|--include-auto-references&lt;/code&gt; option. These packages will also be denoted with the text &lt;strong&gt;[A]&lt;/strong&gt; appearing in the output after the package name.&lt;/p&gt; &#xA;&lt;h2&gt;Saving results to a file&lt;/h2&gt; &#xA;&lt;p&gt;You can save the results of &lt;strong&gt;dotnet-outdated&lt;/strong&gt; to a file by specifying the name of an output file using the &lt;code&gt;-o|--output&lt;/code&gt; option. By default, the results will be saved in JSON format. You can specify an alternate format using the &lt;code&gt;-of|--output-format&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Including and excluding packages&lt;/h2&gt; &#xA;&lt;p&gt;You can choose to include only specific packages by using the &lt;code&gt;-inc|--include&lt;/code&gt; option. Only packages whose name contain the specified value will be included. For example, if you only want to analyze packages containing the value &#34;microsoft&#34;, you can use the command &lt;code&gt;dotnet outdated --include microsoft&lt;/code&gt;. This option can be passed in multiple times: each package will be evaluated against all the filters. One single match is enough to include that package.&lt;/p&gt; &#xA;&lt;p&gt;Conversely, you can exclude specific packages by using the &lt;code&gt;-exc|--exclude&lt;/code&gt; option. In this case all packages will be analyzed except packages whose name contain the specified value. For example, if you want to exclude packages containing the value &#34;microsoft&#34;, you can use the command &lt;code&gt;dotnet outdated --exclude microsoft&lt;/code&gt;. This option can be passed in multiple times: each package will be evaluated against all filters. One single match is enough to exclude that package.&lt;/p&gt; &#xA;&lt;p&gt;Please note that for both include and exclude, the comparison is culture and case insensitive.&lt;/p&gt; &#xA;&lt;h2&gt;Only listing new version of packages older than a specified the number of days&lt;/h2&gt; &#xA;&lt;p&gt;There are some packages that have new updates almost on daily basis, and it might slow down development and will break all CI builds if dotnet-outdated is integrated into the CI - so the development team needs to urgently react on every single update.&lt;/p&gt; &#xA;&lt;p&gt;This command will let the developers finish their job and update the packages on their own pace.&lt;/p&gt; &#xA;&lt;p&gt;For failing CI builds, a proposed protocol is to have another CI build which will be scheduled weekly to inform developers of new packages, and they will react accordingly.&lt;/p&gt; &#xA;&lt;p&gt;Also, some companies/users do not feel comfortable jumping directly on the newest versions, as they might contain some bugs, and might want to wait for some time before updating to the newest package.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Why are unrelated changes made to .csproj files when running with &lt;code&gt;-u&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;dotnet-outdated&lt;/code&gt; does not make any changes to .csproj files directly. Instead, it runs &lt;code&gt;dotnet add package&lt;/code&gt; to update packages, so that command is responsible for all changes made. To track issues related to this command, head over to the &lt;a href=&#34;https://github.com/dotnet/cli&#34;&gt;.NET CLI repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Why I am getting an error about required library hostfxr.dll/libhostfxr.so/libhostfxr.dylib not found?&lt;/h3&gt; &#xA;&lt;p&gt;If you download the .NET Core CLI as a .zip/.tar.gz and extract it to a non default location, then you may encounter this error after installing and launching &lt;strong&gt;dotnet-outdated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can fix this error by setting the &lt;code&gt;DOTNET_ROOT&lt;/code&gt; environment variable to point to the location of your .NET Core CLI installation. For more information, please refer to &lt;a href=&#34;https://natemcmaster.com/blog/2018/05/12/dotnet-global-tools/#installing-the-net-core-cli-into-a-non-default-location&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>moom825/xeno-rat</title>
    <updated>2024-03-01T01:27:41Z</updated>
    <id>tag:github.com,2024-03-01:/moom825/xeno-rat</id>
    <link href="https://github.com/moom825/xeno-rat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xeno-RAT is an open-source remote access tool (RAT) developed in C#, providing a comprehensive set of features for remote system management. Has features such as HVNC, live microphone, reverse proxy, and much much more!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xeno Rat&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/moom825/xeno-rat/main/logo.png&#34; width=&#34;200&#34; alt=&#34;Xeno-RAT Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Xeno Rat is a remote access tool (RAT) that is used to control a computer remotely. It is written in C# and is compatible with Windows 10, 11. It is meant to stable, completely open source, easy to use and has a lot of features.&lt;/p&gt;  &#xA;&lt;h2&gt;What Sets Xeno Rat Apart&lt;/h2&gt; &#xA;&lt;p&gt;Xeno Rat stands out from the crowd for several reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HVNC (Hidden Virtual Network Computing)&lt;/strong&gt;: Xeno Rat offers HVNC, which is typically a paid feature in other RATs, but here, it&#39;s freely available to enhance your remote access experience.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Live Microphone&lt;/strong&gt;: Enjoy real-time audio surveillance with Xeno Rat, which provides a live microphone feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Socks5 Reverse Proxy&lt;/strong&gt;: Xeno Rat includes a Socks5 reverse proxy, allowing you to bypass network restrictions and access remote systems with ease.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Regular Updates and Much More&lt;/strong&gt;: We are committed to keeping Xeno Rat up to date and continually improving its features and functionality to better meet your needs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Built Completely from Scratch&lt;/strong&gt;: Xeno Rat is developed entirely from scratch, ensuring a unique and tailored approach to remote access tools.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Xeno Rat Builder&lt;/h2&gt; &#xA;&lt;p&gt;Inside the Xeno-Rat Server, head over to the &#34;Builder&#34; tab, select your custom settings and click &#34;Build&#34;. Then select a name and a location to save the file. The file will be saved as a .exe file and will be ready to use.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Fun&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat&lt;/li&gt; &#xA; &lt;li&gt;Bluescreen&lt;/li&gt; &#xA; &lt;li&gt;Message Box&lt;/li&gt; &#xA; &lt;li&gt;Fun menu (monitor on/off, cd tray open/close, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Surveillance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HVNC (Hidden Virtual Network Computing)&lt;/li&gt; &#xA; &lt;li&gt;WebCam&lt;/li&gt; &#xA; &lt;li&gt;Live Microphone&lt;/li&gt; &#xA; &lt;li&gt;Key Logger&lt;/li&gt; &#xA; &lt;li&gt;Offline Key Logger&lt;/li&gt; &#xA; &lt;li&gt;Screen Control&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reverse Proxy&lt;/li&gt; &#xA; &lt;li&gt;Process Manager&lt;/li&gt; &#xA; &lt;li&gt;File Manager&lt;/li&gt; &#xA; &lt;li&gt;Registry Manager&lt;/li&gt; &#xA; &lt;li&gt;Shell&lt;/li&gt; &#xA; &lt;li&gt;InfoGrab (cookies, Passwords, etc)&lt;/li&gt; &#xA; &lt;li&gt;Startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Uac Bypass&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cmstp&lt;/li&gt; &#xA; &lt;li&gt;Windir + Disk Cleanup&lt;/li&gt; &#xA; &lt;li&gt;Fodhelper&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Uac Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Request admin&lt;/li&gt; &#xA; &lt;li&gt;De-escalate to user&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Close&lt;/li&gt; &#xA; &lt;li&gt;Relaunch&lt;/li&gt; &#xA; &lt;li&gt;Uninstall&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Power&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shutdown&lt;/li&gt; &#xA; &lt;li&gt;Restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Misc Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logs&lt;/li&gt; &#xA; &lt;li&gt;Listen on multiple ports&lt;/li&gt; &#xA; &lt;li&gt;password secured&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues, Bugs and Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you find any issues or bugs, please report them &lt;a href=&#34;https://github.com/moom825/xeno-rat/issues&#34;&gt;here&lt;/a&gt;. If you would like to contribute to the project, please fork the repository and submit a pull request. All contributions are welcome. If you don&#39;t know how to build the malware, or use it, then please don&#39;t open an issue as it will be closed as completed immediately. If you like the project, please leave a star!&lt;/p&gt; &#xA;&lt;h2&gt;Legal Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is for educational purposes only. I am not responsible for any damage done by this tool. Please always stay within legal and ethical boundaries.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/moom825/xeno-rat/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How do I use this tool?&lt;/h3&gt; &#xA;&lt;p&gt;To get started with Xeno-RAT, follow these simple steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Go to the Releases Tab&lt;/strong&gt;: Navigate to the &#34;Releases&#34; tab of this GitHub repository to find the latest release. You can find it &lt;a href=&#34;https://github.com/moom825/xeno-rat/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download the Latest Release&lt;/strong&gt;: Select the latest release from the list of releases and download the zip file containing the application files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unzip the Downloaded File&lt;/strong&gt;: After downloading, unzip the downloaded zip file to extract the contents. You can use your operating system&#39;s built-in tools or a third-party archive utility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run the Executable&lt;/strong&gt;: Inside the extracted folder, you will find the executable file. Double-click on this file to run Xeno-RAT.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contact the Developer:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Telegram:&lt;/strong&gt; &lt;a href=&#34;https://t.me/moom825&#34;&gt;moom825&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Discord:&lt;/strong&gt; moom825&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;h3&gt;Buy me a coffee!&lt;/h3&gt; &#xA;&lt;p&gt;BTC: bc1qg4zy8w5swc66k9xg29c2x6ennn5cyv2ytlp0a6&lt;/p&gt;</summary>
  </entry>
</feed>