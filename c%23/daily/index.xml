<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-20T01:34:23Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Davidobot/BetterJoy</title>
    <updated>2022-06-20T01:34:23Z</updated>
    <id>tag:github.com,2022-06-20:/Davidobot/BetterJoy</id>
    <link href="https://github.com/Davidobot/BetterJoy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Allows the Nintendo Switch Pro Controller, Joycons and SNES controller to be used with CEMU, Citra, Dolphin, Yuzu and as generic XInput&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Davidobot/BetterJoy/master/title.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;BetterJoy v7.0&lt;/h1&gt; &#xA;&lt;p&gt;Allows the Nintendo Switch Pro Controller, Joycons, and Switch SNES controller to be used with &lt;a href=&#34;http://cemu.info/&#34;&gt;Cemu&lt;/a&gt; using &lt;a href=&#34;https://sshnuke.net/cemuhook/&#34;&gt;Cemuhook&lt;/a&gt;, &lt;a href=&#34;https://citra-emu.org/&#34;&gt;Citra&lt;/a&gt;, &lt;a href=&#34;https://dolphin-emu.org/&#34;&gt;Dolphin&lt;/a&gt;, &lt;a href=&#34;https://yuzu-emu.org/&#34;&gt;Yuzu&lt;/a&gt;, and system-wide with generic XInput support.&lt;/p&gt; &#xA;&lt;p&gt;It also allows using the gyro to control your mouse and remap the special buttons (SL, SR, Capture) to key bindings of your choice.&lt;/p&gt; &#xA;&lt;p&gt;If anyone would like to donate (for whatever reason), &lt;a href=&#34;https://www.paypal.me/DavidKhachaturov/5&#34;&gt;you can do so here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Personal note&lt;/h4&gt; &#xA;&lt;p&gt;Thank you for using my software and all the constructive feedback I&#39;ve been getting about it. I started writing this project a while back and have since then learnt a lot more about programming and software development in general. I don&#39;t have too much time to work on this project, but I will try to fix bugs when and if they arise. Thank you for your patience in that regard too!&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s been quite a wild ride, with nearly &lt;strong&gt;590k&lt;/strong&gt; (!!) official download on GitHub and probably many more through the nightlies. I think this project was responsible for both software jobs I landed so far, so I am quite proud of it.&lt;/p&gt; &#xA;&lt;h3&gt;Screenshot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16619943/67919451-bf8e5680-fb76-11e9-995e-7193b87548e1.png&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/Davidobot/BetterJoy/releases/&#34;&gt;Releases tab&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install drivers &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Read the READMEs (they&#39;re there for a reason!)&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;em&gt;Drivers/ViGEmBus_Setup_1.16.116.exe&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Restart your computer&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;em&gt;BetterJoyForCemu.exe&lt;/em&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run as Administrator if your keyboard/mouse button mappings don&#39;t work&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Connect your controllers.&lt;/li&gt; &#xA; &lt;li&gt;Start Cemu and ensure CemuHook has the controller selected. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If using Joycons, CemuHook will detect two controllers - each will give all buttons, but choosing one over the other just chooses preference for which hand to use for gyro controls.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go into &lt;em&gt;Input Settings&lt;/em&gt;, choose XInput as a source and assign buttons normally. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If you don&#39;t want to do this for some reason, just have one input profile set up with &lt;em&gt;Wii U Gamepad&lt;/em&gt; as the controller and enable &#34;Also use for buttons/axes&#34; under &lt;em&gt;GamePad motion source&lt;/em&gt;. &lt;strong&gt;This is no longer required as of version 3&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Turn rumble up to 70-80% if you want rumble.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As of version 3, you can use the pro controller and Joycons as normal xbox controllers on your PC - try it with Steam!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;More Info&lt;/h1&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/Davidobot/BetterJoy/wiki&#34;&gt;wiki&lt;/a&gt;! There, you&#39;ll find all sorts of goodness such as the changelog, description of app settings, the FAQ and Problems page, and info on how to make BetterJoy work with Steam &lt;em&gt;better&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Connecting and Disconnecting the Controller&lt;/h1&gt; &#xA;&lt;h2&gt;Bluetooth Mode&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hold down the small button (sync) on the top of the controller for 5 seconds - this puts the controller into broadcasting mode.&lt;/li&gt; &#xA; &lt;li&gt;Search for it in your bluetooth settings and pair normally.&lt;/li&gt; &#xA; &lt;li&gt;To disconnect the controller - hold the home button (or capture button) down for 2 seconds (or press the sync button). To reconnect - press any button on your controller.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;USB Mode&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plug the controller into your computer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disconnecting [Windows 10]&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go into &#34;Bluetooth and other devices settings&#34;&lt;/li&gt; &#xA; &lt;li&gt;Under the first category &#34;Mouse, keyboard, &amp;amp; pen&#34;, there should be the pro controller.&lt;/li&gt; &#xA; &lt;li&gt;Click on it and a &#34;Remove&#34; button will be revealed.&lt;/li&gt; &#xA; &lt;li&gt;Press the &#34;Remove&#34; button&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Visual Studio (IDE)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If you didn&#39;t already, install &lt;strong&gt;Visual Studio Community 2019&lt;/strong&gt; via &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2019&#34;&gt;the official guide&lt;/a&gt;. When asked about the workloads, select &lt;strong&gt;.NET Desktop Development&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Get the code project via Git or by using the &lt;em&gt;Download ZIP&lt;/em&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Open Visual Studio Community and open the solution file (&lt;em&gt;BetterJoy.sln&lt;/em&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Open the NuGet manager via &lt;em&gt;Tools &amp;gt; NuGet Package Manager &amp;gt; Package Manager Settings&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You should have a warning mentioning &lt;em&gt;restoring your packages&lt;/em&gt;. Click on the &lt;strong&gt;Restore&lt;/strong&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;You can now run and build BetterJoy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Visual Studio Build Tools (CLI)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;strong&gt;Visual Studio Build Tools&lt;/strong&gt; via &lt;a href=&#34;https://visualstudio.microsoft.com/it/downloads/#build-tools-for-visual-studio-2019&#34;&gt;the official link&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;strong&gt;NuGet&lt;/strong&gt; by following &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#nugetexe-cli&#34;&gt;the official guide&lt;/a&gt;. You should follow the section for &lt;em&gt;&lt;strong&gt;nuget.exe&lt;/strong&gt;&lt;/em&gt;. Verify that you can run &lt;code&gt;nuget&lt;/code&gt; from your favourite terminal.&lt;/li&gt; &#xA; &lt;li&gt;Get the code project via Git or by using the &lt;em&gt;Download ZIP&lt;/em&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal (&lt;em&gt;cmd&lt;/em&gt;, &lt;em&gt;PowerShell&lt;/em&gt;, ...) and enter the folder with the source code.&lt;/li&gt; &#xA; &lt;li&gt;Restore the NuGet dependencies by running: &lt;code&gt;nuget restore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now build the app with MSBuild: &lt;pre&gt;&lt;code&gt;msbuild .\BetterJoy.sln -p:Configuration=CONFIGURATION -p:Platform=PLATFORM -t:Rebuild&#xA;&lt;/code&gt;&lt;/pre&gt; The available values for &lt;strong&gt;CONFIGURATION&lt;/strong&gt; are &lt;em&gt;Release&lt;/em&gt; and &lt;em&gt;Debug&lt;/em&gt;. The available values for &lt;strong&gt;PLATFORM&lt;/strong&gt; are &lt;em&gt;x86&lt;/em&gt; and &lt;em&gt;x64&lt;/em&gt; (you want the latter 99.99% of the time).&lt;/li&gt; &#xA; &lt;li&gt;You have now built the app. See the next section for locating the binaries.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Binaries location&lt;/h2&gt; &#xA;&lt;p&gt;The built binaries are located under&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;BetterJoyForCemu\bin\PLATFORM\CONFIGURATION&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;code&gt;PLATFORM&lt;/code&gt; and &lt;code&gt;CONFIGURATION&lt;/code&gt; are the one provided at build time.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;A massive thanks goes out to &lt;a href=&#34;https://github.com/rajkosto/&#34;&gt;rajkosto&lt;/a&gt; for putting up with 17 emails and replying very quickly to my silly queries. The UDP server is also mostly taken from his &lt;a href=&#34;https://github.com/rajkosto/ScpToolkit&#34;&gt;ScpToolkit&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;p&gt;Also I am very grateful to &lt;a href=&#34;https://github.com/mfosse/JoyCon-Driver&#34;&gt;mfosse&lt;/a&gt; for pointing me in the right direction and to &lt;a href=&#34;https://github.com/Looking-Glass/JoyconLib&#34;&gt;Looking-Glass&lt;/a&gt; without whom I would not be able to figure anything out. (being honest here - the joycon code is his)&lt;/p&gt; &#xA;&lt;p&gt;Many thanks to &lt;a href=&#34;https://github.com/ViGEm/ViGEmBus&#34;&gt;nefarius&lt;/a&gt; for his ViGEm project! Apologies and appreciation go out to &lt;a href=&#34;https://github.com/epigramx&#34;&gt;epigramx&lt;/a&gt;, creator of &lt;em&gt;WiimoteHook&lt;/em&gt;, for giving me the driver idea and for letting me keep using his installation batch script even though I took it without permission. Thanks go out to &lt;a href=&#34;https://github.com/MTCKC/ProconXInput&#34;&gt;MTCKC&lt;/a&gt; for inspiration and batch files.&lt;/p&gt; &#xA;&lt;p&gt;A last thanks goes out to &lt;a href=&#34;https://github.com/dekuNukem/Nintendo_Switch_Reverse_Engineering&#34;&gt;dekuNukem&lt;/a&gt; for his documentation, especially on the SPI calibration data and the IMU sensor notes!&lt;/p&gt; &#xA;&lt;p&gt;Massive &lt;em&gt;thank you&lt;/em&gt; to &lt;strong&gt;all&lt;/strong&gt; code contributors!&lt;/p&gt; &#xA;&lt;p&gt;Icons (modified): &#34;&lt;a href=&#34;https://thenounproject.com/term/nintendo-switch/930119/&#34;&gt;Switch Pro Controller&lt;/a&gt;&#34;, &#34;&lt;a href=&#34;https://thenounproject.com/remsing/uploads/?i=930115&#34;&gt; Switch Detachable Controller Left&lt;/a&gt;&#34;, &#34;&lt;a href=&#34;https://thenounproject.com/remsing/uploads/?i=930121&#34;&gt;Switch Detachable Controller Right&lt;/a&gt;&#34; icons by Chad Remsing from &lt;a href=&#34;http://thenounproject.com/&#34;&gt;the Noun Project&lt;/a&gt;. &lt;a href=&#34;https://thenounproject.com/themizarkshow/collection/vectogram/?i=193592&#34;&gt;Super Nintendo Controller&lt;/a&gt; icon by Mark Davis from the &lt;a href=&#34;http://thenounproject.com/&#34;&gt;the Noun Project&lt;/a&gt;; icon modified by &lt;a href=&#34;https://www.linkedin.com/in/-amy-alexander/&#34;&gt;Amy Alexander&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dnSpy/dnSpy</title>
    <updated>2022-06-20T01:34:23Z</updated>
    <id>tag:github.com,2022-06-20:/dnSpy/dnSpy</id>
    <link href="https://github.com/dnSpy/dnSpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET debugger and assembly editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dnSpy - &lt;a href=&#34;https://github.com/dnSpy/dnSpy/releases&#34;&gt;Latest release&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;dnSpy is a debugger and .NET assembly editor. You can use it to edit and debug assemblies even if you don&#39;t have any source code available. Main features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debug .NET and Unity assemblies&lt;/li&gt; &#xA; &lt;li&gt;Edit .NET and Unity assemblies&lt;/li&gt; &#xA; &lt;li&gt;Light and dark themes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See below for more features&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/images/debug-animated.gif&#34; alt=&#34;debug-animated&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/images/edit-code-animated.gif&#34; alt=&#34;edit-code-animated&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Binaries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dnSpy/dnSpy/releases&#34;&gt;https://github.com/dnSpy/dnSpy/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PS&#34;&gt;git clone --recursive https://github.com/dnSpy/dnSpy.git&#xA;cd dnSpy&#xA;# or dotnet build&#xA;./build.ps1 -NoMsbuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug Unity games, you need this repo too: &lt;a href=&#34;https://github.com/dnSpy/dnSpy-Unity-mono&#34;&gt;https://github.com/dnSpy/dnSpy-Unity-mono&lt;/a&gt; (or get the binaries from &lt;a href=&#34;https://github.com/dnSpy/dnSpy/releases/unity&#34;&gt;https://github.com/dnSpy/dnSpy/releases/unity&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Debugger&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debug .NET Framework, .NET and Unity game assemblies, no source code required&lt;/li&gt; &#xA; &lt;li&gt;Set breakpoints and step into any assembly&lt;/li&gt; &#xA; &lt;li&gt;Locals, watch, autos windows&lt;/li&gt; &#xA; &lt;li&gt;Variables windows support saving variables (eg. decrypted byte arrays) to disk or view them in the hex editor (memory window)&lt;/li&gt; &#xA; &lt;li&gt;Object IDs&lt;/li&gt; &#xA; &lt;li&gt;Multiple processes can be debugged at the same time&lt;/li&gt; &#xA; &lt;li&gt;Break on module load&lt;/li&gt; &#xA; &lt;li&gt;Tracepoints and conditional breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Export/import breakpoints and tracepoints&lt;/li&gt; &#xA; &lt;li&gt;Call stack, threads, modules, processes windows&lt;/li&gt; &#xA; &lt;li&gt;Break on thrown exceptions (1st chance)&lt;/li&gt; &#xA; &lt;li&gt;Variables windows support evaluating C# / Visual Basic expressions&lt;/li&gt; &#xA; &lt;li&gt;Dynamic modules can be debugged (but not dynamic methods due to CLR limitations)&lt;/li&gt; &#xA; &lt;li&gt;Output window logs various debugging events, and it shows timestamps by default :)&lt;/li&gt; &#xA; &lt;li&gt;Assemblies that decrypt themselves at runtime can be debugged, dnSpy will use the in-memory image. You can also force dnSpy to always use in-memory images instead of disk files.&lt;/li&gt; &#xA; &lt;li&gt;Public API, you can write an extension or use the C# Interactive window to control the debugger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Assembly Editor&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All metadata can be edited&lt;/li&gt; &#xA; &lt;li&gt;Edit methods and classes in C# or Visual Basic with IntelliSense, no source code required&lt;/li&gt; &#xA; &lt;li&gt;Add new methods, classes or members in C# or Visual Basic&lt;/li&gt; &#xA; &lt;li&gt;IL editor for low-level IL method body editing&lt;/li&gt; &#xA; &lt;li&gt;Low-level metadata tables can be edited. This uses the hex editor internally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hex Editor&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on an address in the decompiled code to go to its IL code in the hex editor&lt;/li&gt; &#xA; &lt;li&gt;The reverse of the above, press F12 in an IL body in the hex editor to go to the decompiled code or other high-level representation of the bits. It&#39;s great to find out which statement a patch modified.&lt;/li&gt; &#xA; &lt;li&gt;Highlights .NET metadata structures and PE structures&lt;/li&gt; &#xA; &lt;li&gt;Tooltips show more info about the selected .NET metadata / PE field&lt;/li&gt; &#xA; &lt;li&gt;Go to position, file, RVA&lt;/li&gt; &#xA; &lt;li&gt;Go to .NET metadata token, method body, #Blob / #Strings / #US heap offset or #GUID heap index&lt;/li&gt; &#xA; &lt;li&gt;Follow references (Ctrl+F12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BAML decompiler&lt;/li&gt; &#xA; &lt;li&gt;Blue, light and dark themes (and a dark high contrast theme)&lt;/li&gt; &#xA; &lt;li&gt;Bookmarks&lt;/li&gt; &#xA; &lt;li&gt;C# Interactive window can be used to script dnSpy&lt;/li&gt; &#xA; &lt;li&gt;Search assemblies for classes, methods, strings, etc&lt;/li&gt; &#xA; &lt;li&gt;Analyze class and method usage, find callers, etc&lt;/li&gt; &#xA; &lt;li&gt;Multiple tabs and tab groups&lt;/li&gt; &#xA; &lt;li&gt;References are highlighted, use Tab / Shift+Tab to move to the next reference&lt;/li&gt; &#xA; &lt;li&gt;Go to the entry point and module initializer commands&lt;/li&gt; &#xA; &lt;li&gt;Go to metadata token or metadata row commands&lt;/li&gt; &#xA; &lt;li&gt;Code tooltips (C# and Visual Basic)&lt;/li&gt; &#xA; &lt;li&gt;Export to project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;List of other open source libraries used by dnSpy&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/icsharpcode/ILSpy&#34;&gt;ILSpy decompiler engine&lt;/a&gt; (C# and Visual Basic decompilers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; (C# and Visual Basic compilers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xd4d/dnlib&#34;&gt;dnlib&lt;/a&gt; (.NET metadata reader/writer which can also read obfuscated assemblies)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vs-mef&#34;&gt;VS MEF&lt;/a&gt; (Faster MEF equals faster startup)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/clrmd&#34;&gt;ClrMD&lt;/a&gt; (Access to lower level debugging info not provided by the CorDebug API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xd4d/iced&#34;&gt;Iced&lt;/a&gt; (x86/x64 disassembler)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Translating dnSpy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crowdin.com/project/dnspy&#34;&gt;Click here&lt;/a&gt; if you want to help with translating dnSpy to your native language.&lt;/p&gt; &#xA;&lt;h1&gt;Wiki&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/dnSpy/dnSpy/wiki&#34;&gt;Wiki&lt;/a&gt; for build instructions and other documentation.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;dnSpy is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/dnSpy/dnSpy/LicenseInfo/GPLv3.txt&#34;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/dnSpy/dnSpy/LicenseInfo/CREDITS.txt&#34;&gt;Credits&lt;/a&gt;&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>Timotheeee/btd6_mods</title>
    <updated>2022-06-20T01:34:23Z</updated>
    <id>tag:github.com,2022-06-20:/Timotheeee/btd6_mods</id>
    <link href="https://github.com/Timotheeee/btd6_mods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mods for Bloons Tower Defence 6 (btd6)&lt;/h1&gt; &#xA;&lt;p&gt;installation guide: &lt;a href=&#34;https://hemisemidemipresent.github.io/btd6-modding-tutorial/&#34;&gt;https://hemisemidemipresent.github.io/btd6-modding-tutorial/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>