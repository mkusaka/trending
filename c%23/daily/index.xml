<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-20T01:32:56Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>blizzless/blizzless-diiis</title>
    <updated>2022-08-20T01:32:56Z</updated>
    <id>tag:github.com,2022-08-20:/blizzless/blizzless-diiis</id>
    <link href="https://github.com/blizzless/blizzless-diiis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fully-functional open-source server implementation for Diablo 3&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/pictures/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DiIiS Project&lt;/h1&gt; &#xA;&lt;p&gt;DiIiS is a fully-functional open-source local server for &lt;a href=&#34;https://eu.diablo3.blizzard.com&#34;&gt;Diablo III: Reaper of Souls&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implemented account creation system, authorization and lobby.&lt;/li&gt; &#xA; &lt;li&gt;Fully implemented chat system.&lt;/li&gt; &#xA; &lt;li&gt;Fully implemented clan system.&lt;/li&gt; &#xA; &lt;li&gt;Opened all cosmetics in the in-game store.&lt;/li&gt; &#xA; &lt;li&gt;Implemented basic DRLG.&lt;/li&gt; &#xA; &lt;li&gt;Implemented item generator with in-game affixes.&lt;/li&gt; &#xA; &lt;li&gt;Implemented the basic mechanics of almost all active abilities for all classes.&lt;/li&gt; &#xA; &lt;li&gt;Implemented a system of set items.&lt;/li&gt; &#xA; &lt;li&gt;Implemented all main scripts for all story quests 5 acts.&lt;/li&gt; &#xA; &lt;li&gt;Implemented basic scripts and generator for &#34;Adventure Mode&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Created the basis for the &#34;Challenge Nephalem Rifts&#34; mode.&lt;/li&gt; &#xA; &lt;li&gt;Implemented artificial intelligence for 80% of minions.&lt;/li&gt; &#xA; &lt;li&gt;Implemented personal artificial intelligence for 40% of all monsters.&lt;/li&gt; &#xA; &lt;li&gt;Implemented personal artificial intelligence for half of the Bosses.&lt;/li&gt; &#xA; &lt;li&gt;Implemented LAN&lt;/li&gt; &#xA; &lt;li&gt;NAT support is hidden, but possible ;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.enterprisedb.com/downloads/postgres-postgresql-downloads&#34;&gt;PostgreSQL 9.5.25&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create databases in PostgreSQL: &lt;code&gt;diiis&lt;/code&gt; and &lt;code&gt;worlds&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change you account and password in &lt;code&gt;database.Account.config&lt;/code&gt; and &lt;code&gt;database.Worlds.conifg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Restore &lt;code&gt;worlds.backup&lt;/code&gt; to &lt;code&gt;worlds&lt;/code&gt; database&lt;/li&gt; &#xA; &lt;li&gt;Compile by &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;VS 2019/2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch wait until server start, it creates a hierarchy.&lt;/li&gt; &#xA; &lt;li&gt;Create account using console: &lt;code&gt;!account add Login Password Tag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install certificate &lt;code&gt;bnetserver.p12&lt;/code&gt;, password - &lt;code&gt;123&lt;/code&gt; (the game verifies the CA root certificates).&lt;/li&gt; &#xA; &lt;li&gt;Use Client Diablo 3 &lt;code&gt;2.7.3.82785&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add redirects to the &lt;code&gt;hosts&lt;/code&gt; file (&lt;code&gt;%WinDir%\System32\drivers\etc\hosts&lt;/code&gt;): &lt;code&gt;127.0.0.1 us.actual.battle.net&lt;/code&gt; &lt;code&gt;127.0.0.1 eu.actual.battle.net&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch client (&lt;code&gt;x64&lt;/code&gt; or &lt;code&gt;x86&lt;/code&gt;) with arguments &lt;code&gt;&#34;Diablo III64.exe&#34; -launch -uid diablo3_engb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Login to the game using your credentials =)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Playing with friends&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create new accounts using the console command: &lt;code&gt;!account add Login Password Tag&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/configs/config.ini&#34;&gt;config.ini&lt;/a&gt; file to the server folder (It overwrites the default settings)&lt;/li&gt; &#xA; &lt;li&gt;In the IP fields - write your IP within the network. Update the parameter entries: &lt;code&gt;BindIP&lt;/code&gt; and &lt;code&gt;PublicIP&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Other players must specify your IP address in the &lt;code&gt;hosts&lt;/code&gt; file (&lt;code&gt;%WinDir%\System32\drivers\etc\hosts&lt;/code&gt;). &lt;code&gt;192.168.1.1 us.actual.battle.net&lt;/code&gt; &lt;code&gt;192.168.1.1 eu.actual.battle.net&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Launch client (&lt;code&gt;x64&lt;/code&gt; or &lt;code&gt;x86&lt;/code&gt;) with arguments &lt;code&gt;&#34;Diablo III64.exe&#34; -launch -uid diablo3_engb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Login to the game using your credentials&lt;/li&gt; &#xA; &lt;li&gt;After that, when creating a game (in client), indicate the creation of a public game.&lt;/li&gt; &#xA; &lt;li&gt;Other players, when connecting, must also indicate a public game, and at the start they will connect to you.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Flexible configuration&lt;/h2&gt; &#xA;&lt;p&gt;Using the configuration file you can easily override the &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/docs/game-world-settings.md&#34;&gt;global world parameters&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Minimum system requirements&lt;/h2&gt; &#xA;&lt;p&gt;Minimum system requirements for server&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU: Xeon E5-2620V3 (2.40 GHz and 6 cores)&lt;/li&gt; &#xA; &lt;li&gt;RAM: 4GB&lt;/li&gt; &#xA; &lt;li&gt;HDD/SSD: 500MB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;You can see more screenshots &lt;a href=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/SCREENSHOTS.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blizzless/blizzless-diiis/master/pictures/ingame-screen-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shimat/opencvsharp</title>
    <updated>2022-08-20T01:32:56Z</updated>
    <id>tag:github.com,2022-08-20:/shimat/opencvsharp</id>
    <link href="https://github.com/shimat/opencvsharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenCV wrapper for .NET&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/shimat/opencvsharp/image?description=1&amp;amp;forks=1&amp;amp;language=1&amp;amp;owner=1&amp;amp;pattern=Plus&amp;amp;stargazers=1&amp;amp;theme=Light&#34; alt=&#34;opencvsharp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp/actions&#34;&gt;&lt;img src=&#34;https://github.com/shimat/opencvsharp/workflows/Windows%20Server%202022/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Windows Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shimat/opencvsharp/actions&#34;&gt;&lt;img src=&#34;https://github.com/shimat/opencvsharp/workflows/Ubuntu%2018.04/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Ubuntu Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shimat/opencvsharp/actions&#34;&gt;&lt;img src=&#34;https://github.com/shimat/opencvsharp/workflows/macOS%2010.15/badge.svg?sanitize=true&#34; alt=&#34;Github Actions MacOS Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shimat/opencvsharp/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/shimat/opencvsharp.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Old versions of OpenCvSharp are stored in &lt;a href=&#34;https://github.com/shimat/opencvsharp_2410&#34;&gt;opencvsharp_2410&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NuGet&lt;/h2&gt; &#xA;&lt;h3&gt;Managed libraries&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenCvSharp core libraries&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.Extensions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GDI+ Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.Extensions&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.Extensions.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.WpfExtensions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WPF Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.WpfExtensions&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.WpfExtensions.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All-in-one package for Windows (except UWP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.Windows&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.Windows.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Native bindings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.win&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for Windows x64/x86 (except UWP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.win&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.win.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.uwp&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for UWP (Universal Windows Platform) x64/x86/ARM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.uwp&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.uwp.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.ubuntu.18.04-x64&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for Ubuntu 18.04 x64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.ubuntu.18.04-x64&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.ubuntu.18.04-x64.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.osx.10.15-x64&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for macOS 10.15 x64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp4.runtime.osx.10.15-x64/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.osx.10.15-x64.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.linux-arm&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for Linux Arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp4.runtime.linux-arm/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.linux-arm.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.wasm&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for WebAssembly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp4.runtime.wasm/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.wasm.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Native binding (OpenCvSharpExtern.dll / libOpenCvSharpExtern.so) is required to work OpenCvSharp. To use OpenCvSharp, you should add both &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.*&lt;/code&gt; packages to your project. Currently, native bindings for Windows, UWP, Ubuntu 18.04 and macOS are released.&lt;/p&gt; &#xA;&lt;p&gt;Packages named OpenCvSharp3-* and OpenCvSharp-* are deprecated.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp3-AnyCPU/&#34;&gt;OpenCvSharp3-AnyCPU&lt;/a&gt; / &lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp3-WithoutDll/&#34;&gt;OpenCvSharp3-WithoutDll&lt;/a&gt; / &lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp-AnyCPU/&#34;&gt;OpenCvSharp-AnyCPU&lt;/a&gt; / &lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp-WithoutDll/&#34;&gt;OpenCvSharp-WithoutDll&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docker images&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/u/shimat&#34;&gt;https://hub.docker.com/u/shimat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 18.04 (.NET Core 3.1): &lt;a href=&#34;https://hub.docker.com/r/shimat/ubuntu18-dotnetcore3.1-opencv4.5.0&#34;&gt;shimat/ubuntu18-dotnetcore3.1-opencv4.5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Google App Engine Flexible (.NET Core 3.1): &lt;a href=&#34;https://hub.docker.com/r/shimat/appengine-aspnetcore3.1-opencv4.5.0&#34;&gt;shimat/appengine-aspnetcore3.1-opencv4.5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For AWS Lambda (.NET 5): &lt;a href=&#34;https://hub.docker.com/r/shimat/al2-dotnet5-opencv4.5.0&#34;&gt;shimat/al2-dotnet5-opencv4.5.0&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Code sample: &lt;a href=&#34;https://github.com/shimat/opencvsharp_AWSLambdaSample&#34;&gt;https://github.com/shimat/opencvsharp_AWSLambdaSample&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Windows (except UWP)&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.win&lt;/code&gt; NuGet packages to your project. You can use &lt;code&gt;OpenCvSharp4.Windows&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;UWP&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.uwp&lt;/code&gt; NuGet packages to your project. Note that &lt;code&gt;OpenCvSharp4.runtime.win&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.Windows&lt;/code&gt; don&#39;t work for UWP.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu 18.04&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.ubuntu.18.04.x64&lt;/code&gt; NuGet packages to your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new console -n ConsoleApp01&#xA;cd ConsoleApp01&#xA;dotnet add package OpenCvSharp4&#xA;dotnet add package OpenCvSharp4.runtime.ubuntu.18.04-x64&#xA;# -- edit Program.cs --- # &#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Google AppEngine Flexible (Ubuntu 16.04)&lt;/h3&gt; &#xA;&lt;p&gt;Some Docker images are provided to use OpenCvSharp with AppEngine Flexible. The native binding (libOpenCvSharpExtern) is already built in the docker image and you don&#39;t need to worry about it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM shimat/appengine-aspnetcore3.1-opencv4.5.0:20201030&#xA;&#xA;ADD ./ /app &#xA;ENV ASPNETCORE_URLS=http://*:${PORT} &#xA;&#xA;WORKDIR /app &#xA;ENTRYPOINT [ &#34;dotnet&#34;, &#34;YourAspNetCoreProject.dll&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu 18.04 Docker image&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;shimat/ubuntu18-dotnetcore3.1-opencv4.5.0&lt;/code&gt; docker image. This issue may be helpful: &lt;a href=&#34;https://github.com/shimat/opencvsharp/issues/920&#34;&gt;https://github.com/shimat/opencvsharp/issues/920&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Downloads&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use NuGet, get DLL files from the &lt;a href=&#34;https://github.com/shimat/opencvsharp/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Target OpenCV&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV 4.5.&lt;/a&gt; with &lt;a href=&#34;https://github.com/opencv/opencv_contrib&#34;&gt;opencv_contrib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/ja-jp/download/details.aspx?id=1639&#34;&gt;.NET Framework 4.6.1&lt;/a&gt; / &lt;a href=&#34;https://www.microsoft.com/net/download&#34;&gt;.NET Core 2.0&lt;/a&gt; / &lt;a href=&#34;http://www.mono-project.com/Main_Page&#34;&gt;Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Windows) &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Visual C++ 2019 Redistributable Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Windows Server) Media Foundation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS1&amp;gt; Install-WindowsFeature Server-Media-Foundation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Ubuntu, Mac) You must pre-install all the dependency packages needed to build OpenCV. Many packages such as libjpeg must be installed in order to work OpenCV. &lt;a href=&#34;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&#34;&gt;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenCvSharp won&#39;t work on Unity and Xamarin platform.&lt;/strong&gt; For Unity, please consider using &lt;a href=&#34;https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088&#34;&gt;OpenCV for Unity&lt;/a&gt; or some other solutions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenCvSharp does not support CUDA.&lt;/strong&gt; If you want to use the CUDA features, you need to customize the native bindings yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For more details, see &lt;strong&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp_samples/&#34;&gt;samples&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/strong&gt; pages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Always remember to release Mat instances! The &lt;code&gt;using&lt;/code&gt; syntax is useful.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;// C# 8&#xA;// Edge detection by Canny algorithm&#xA;using OpenCvSharp;&#xA;&#xA;class Program &#xA;{&#xA;    static void Main() &#xA;    {&#xA;        using var src = new Mat(&#34;lenna.png&#34;, ImreadModes.Grayscale);&#xA; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;using var dst = new Mat();&#xA;        &#xA;        Cv2.Canny(src, dst, 50, 200);&#xA;        using (new Window(&#34;src image&#34;, src)) &#xA;        using (new Window(&#34;dst image&#34;, dst)) &#xA;        {&#xA;            Cv2.WaitKey();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As mentioned above, objects of classes, such as Mat and MatExpr, have unmanaged resources and need to be manually released by calling the Dispose() method. Worst of all, the +, -, *, and other operators create new objects each time, and these objects need to be disposed, or there will be memory leaks. Despite having the using syntax, the code still looks very verbose.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, a ResourcesTracker class is provided. The ResourcesTracker implements the IDisposable interface, and when the Dispose() method is called, all resources tracked by the ResourcesTracker are disposed. The T() method of ResourcesTracker can trace an object or an array of objects, and the method NewMat() is like T(new Mat(...). All the objects that need to be released can be wrapped with T().For example: t.T(255 - t.T(picMat * 0.8)) . Example code is as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var t = new ResourcesTracker())&#xA;{&#xA;    Mat mat1 = t.NewMat(new Size(100, 100), MatType.CV_8UC3, new Scalar(0));&#xA;    Mat mat3 = t.T(255-t.T(mat1*0.8));&#xA;    Mat[] mats1 = t.T(mat3.Split());&#xA;    Mat mat4 = t.NewMat();&#xA;    Cv2.Merge(new Mat[] { mats1[0], mats1[1], mats1[2] }, mat4);&#xA;}&#xA;&#xA;using (var t = new ResourcesTracker())&#xA;{&#xA;    var src = t.T(new Mat(@&#34;lenna.png&#34;, ImreadModes.Grayscale));&#xA;    var dst = t.NewMat();&#xA;    Cv2.Canny(src, dst, 50, 200);&#xA;    var blurredDst = t.T(dst.Blur(new Size(3, 3)));&#xA;    t.T(new Window(&#34;src image&#34;, src));&#xA;    t.T(new Window(&#34;dst image&#34;, blurredDst));&#xA;    Cv2.WaitKey();&#xA;}      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenCvSharp is modeled on the native OpenCV C/C++ API style as much as possible.&lt;/li&gt; &#xA; &lt;li&gt;Many classes of OpenCvSharp implement IDisposable. There is no need to manage unsafe resources.&lt;/li&gt; &#xA; &lt;li&gt;OpenCvSharp does not force object-oriented programming style on you. You can also call native-style OpenCV functions.&lt;/li&gt; &#xA; &lt;li&gt;OpenCvSharp provides functions for converting from &lt;code&gt;Mat&lt;/code&gt; into &lt;code&gt;Bitmap&lt;/code&gt;(GDI+) or &lt;code&gt;WriteableBitmap&lt;/code&gt;(WPF).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code samples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp_samples/&#34;&gt;https://github.com/shimat/opencvsharp_samples/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://shimat.github.io/opencvsharp/api/OpenCvSharp.html&#34;&gt;http://shimat.github.io/opencvsharp/api/OpenCvSharp.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenCvSharp Build Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Visual Studio 2019 or later &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VC++ features are required.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;download_opencv_windows.ps1&lt;/code&gt; to download OpenCV libs and headers from &lt;a href=&#34;https://github.com/shimat/opencv_files&#34;&gt;https://github.com/shimat/opencv_files&lt;/a&gt;. Those lib files are precompiled by the owner of OpenCvSharp using AppVeyor CI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\download_opencv_windows.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build OpenCvSharp &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;OpenCvSharp.sln&lt;/code&gt; and build&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How to customize OpenCV binaries yourself&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use some OpenCV features that are not provided by default in OpenCvSharp (e.g. GPU), you will have to build OpenCV yourself. The binary files of OpenCV for OpenCvSharp for Windows are created in the &lt;a href=&#34;https://github.com/shimat/opencv_files&#34;&gt;opencv_files&lt;/a&gt; repository. See the README.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone --recursive https://github.com/shimat/opencv_files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;build_windows.ps1&lt;/code&gt; or &lt;code&gt;build_uwp.ps1&lt;/code&gt; to customize the CMake parameters .&lt;/li&gt; &#xA; &lt;li&gt;Run the PowerShell script.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu 18.04&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build OpenCV with opencv_contrib. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&#34;&gt;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install .NET Core SDK. &lt;a href=&#34;https://docs.microsoft.com/ja-jp/dotnet/core/install/linux-package-manager-ubuntu-1804&#34;&gt;https://docs.microsoft.com/ja-jp/dotnet/core/install/linux-package-manager-ubuntu-1804&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get OpenCvSharp source files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/shimat/opencvsharp.git&#xA;cd opencvsharp&#xA;git fetch --all --tags --prune &amp;amp;&amp;amp; git checkout ${OPENCVSHARP_VERSION}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build native wrapper &lt;code&gt;OpenCvSharpExtern&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd opencvsharp/src&#xA;mkdir build&#xA;cd build&#xA;cmake -D CMAKE_INSTALL_PREFIX=${YOUR_OPENCV_INSTALL_PATH} ..&#xA;make -j &#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should add reference to &lt;code&gt;opencvsharp/src/build/OpenCvSharpExtern/libOpenCvSharpExtern.so&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export LD_LIBRARY_PATH=&#34;${LD_LIBRARY_PATH}:/home/shimat/opencvsharp/src/build/OpenCvSharpExtern&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; NuGet package to your project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new console -n ConsoleApp01&#xA;cd ConsoleApp01&#xA;dotnet add package OpenCvSharp4&#xA;# -- edit Program.cs --- # &#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Older Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/shimat/opencvsharp/raw/master/docker/google-appengine-ubuntu.16.04-x64/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; and &lt;a href=&#34;https://github.com/shimat/opencvsharp/wiki&#34;&gt;Wiki pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;If you find the OpenCvSharp library useful and would like to show your gratitude by donating, here are some donation options. Thank you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/shimat&#34;&gt;https://github.com/sponsors/shimat&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MishaTY/Rectify11Installer</title>
    <updated>2022-08-20T01:32:56Z</updated>
    <id>tag:github.com,2022-08-20:/MishaTY/Rectify11Installer</id>
    <link href="https://github.com/MishaTY/Rectify11Installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Rectify11 installer source code. Note: not completed&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rectify11Installer&lt;/h1&gt; &#xA;&lt;p&gt;Official Rectify11 installer source code. Note: not completed&lt;/p&gt; &#xA;&lt;h1&gt;Projects used&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.angusj.com/resourcehacker/&#34;&gt;Resource Hacker&lt;/a&gt; for replacing resources in files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nptr/msstyleEditor&#34;&gt;Libmsstyle&lt;/a&gt; for rendering controls from rectify msstyles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mhoefs.eu/software_uxtheme.php&#34;&gt;UltraUXThemePatcher&lt;/a&gt; for uxtheme patching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MicaForEveryone/MicaForEveryone&#34;&gt;MicaForEveryone&lt;/a&gt; for applying mica backdrop to apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nilesoft.org/&#34;&gt;Nilesoft Shell&lt;/a&gt; for alternative lightweight Windows 11 context menu replacement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rounk-ctrl/Winver&#34;&gt;Winver&lt;/a&gt; for modern winver.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krlvm/AccentColorizer&#34;&gt;AccentColorizer&lt;/a&gt; for colorizing win32 controls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://7-zip.org/&#34;&gt;7-zip&lt;/a&gt; for efficient compression and decompression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinet/ExplorerPatcher&#34;&gt;ExplorerPatcher&lt;/a&gt; for various shell improvements.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>