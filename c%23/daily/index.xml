<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-11T01:31:16Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mcintyre321/OneOf</title>
    <updated>2023-03-11T01:31:16Z</updated>
    <id>tag:github.com,2023-03-11:/mcintyre321/OneOf</id>
    <link href="https://github.com/mcintyre321/OneOf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to use F#-like ~discriminated~ unions for C# with exhaustive compile time matching&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneOf&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Ah! It&#39;s like a compile time checked switch statement!&#34; - Mike Giorgaras&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;install-package OneOf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library provides F# style &lt;del&gt;discriminated&lt;/del&gt; unions for C#, using a custom type &lt;code&gt;OneOf&amp;lt;T0, ... Tn&amp;gt;&lt;/code&gt;. An instance of this type holds a single value, which is one of the types in its generic argument list.&lt;/p&gt; &#xA;&lt;p&gt;I can&#39;t encourage you enough to give it a try! Due to exhaustive matching DUs provide an alternative to polymorphism when you want to have a method with guaranteed behaviour-per-type (i.e. adding an abstract method on a base type, and then implementing that method in each type). It&#39;s a really powerful tool, ask any f#/Scala dev! :)&lt;/p&gt; &#xA;&lt;p&gt;PS If you like OneOf, you might want to check out &lt;a href=&#34;https://github.com/mcintyre321/valueof&#34;&gt;ValueOf&lt;/a&gt;, for one-line Value Object Type definitions.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;h3&gt;As a method return value&lt;/h3&gt; &#xA;&lt;p&gt;The most frequent use case is as a return value, when you need to return different results from a method. Here&#39;s how you might use it in an MVC controller action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public OneOf&amp;lt;User, InvalidName, NameTaken&amp;gt; CreateUser(string username)&#xA;{&#xA;    if (!IsValid(username)) return new InvalidName();&#xA;    var user = _repo.FindByUsername(username);&#xA;    if(user != null) return new NameTaken();&#xA;    var user = new User(username);&#xA;    _repo.Save(user);&#xA;    return user;&#xA;}&#xA;&#xA;[HttpPost]&#xA;public IActionResult Register(string username)&#xA;{&#xA;    OneOf&amp;lt;User, InvalidName, NameTaken&amp;gt; createUserResult = CreateUser(username);&#xA;    return createUserResult.Match(&#xA;        user =&amp;gt; new RedirectResult(&#34;/dashboard&#34;),&#xA;        invalidName =&amp;gt; {&#xA;            ModelState.AddModelError(nameof(username), $&#34;Sorry, that is not a valid username.&#34;);&#xA;            return View(&#34;Register&#34;);&#xA;        },&#xA;        nameTaken =&amp;gt; {&#xA;            ModelState.AddModelError(nameof(username), &#34;Sorry, that name is already in use.&#34;);&#xA;            return View(&#34;Register&#34;);&#xA;        }&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;As an &#39;Option&#39; Type&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s simple to use OneOf as an &lt;code&gt;Option&lt;/code&gt; type - just declare a &lt;code&gt;OneOf&amp;lt;Something, None&amp;gt;&lt;/code&gt;. OneOf comes with a variety of useful Types in the &lt;code&gt;OneOf.Types&lt;/code&gt; namespace, including &lt;code&gt;Yes&lt;/code&gt;, &lt;code&gt;No&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Unknown&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;All&lt;/code&gt;, &lt;code&gt;Some&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Benefits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;True strongly typed method signature &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No need to return a custom result base type e.g &lt;code&gt;IActionResult&lt;/code&gt;, or even worse, a non-descriptive type (e.g. object)&lt;/li&gt; &#xA;   &lt;li&gt;The method signature accurately describes all the potential outcomes, making it easier for consumers to understand the code&lt;/li&gt; &#xA;   &lt;li&gt;Method consumer HAS to handle all cases (see &#39;Matching&#39;, below)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can avoid using &lt;a href=&#34;http://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why&#34;&gt;&#34;Exceptions for control flow&#34;&lt;/a&gt; antipattern by returning custom Typed error objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;As a method parameter value&lt;/h3&gt; &#xA;&lt;p&gt;You can use also use &lt;code&gt;OneOf&lt;/code&gt; as a parameter type, allowing a caller to pass different types without requiring additional overloads. This might not seem that useful for a single parameter, but if you have multiple parameters, the number of overloads required increases rapidly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void SetBackground(OneOf&amp;lt;string, ColorName, Color&amp;gt; backgroundColor) { ... }&#xA;&#xA;//The method above can be called with either a string, a ColorName enum value or a Color instance.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Matching&lt;/h2&gt; &#xA;&lt;p&gt;You use the &lt;code&gt;TOut Match(Func&amp;lt;T0, TOut&amp;gt; f0, ... Func&amp;lt;Tn,TOut&amp;gt; fn)&lt;/code&gt; method to get a value out. Note how the number of handlers matches the number of generic arguments.&lt;/p&gt; &#xA;&lt;h3&gt;Advantages over &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;exception&lt;/code&gt; based control flow:&lt;/h3&gt; &#xA;&lt;p&gt;This has a major advantage over a switch statement, as it&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;requires every parameter to be handled&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No fallback - if you add another generic parameter, you HAVE to update all the calling code to handle your changes.&lt;/p&gt; &lt;p&gt;In brown-field code-bases this is incredibly useful, as the default handler is often a runtime &lt;code&gt;throw NotImplementedException&lt;/code&gt;, or behaviour that wouldn&#39;t suit the new result type.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OneOf&amp;lt;string, ColorName, Color&amp;gt; backgroundColor = ...;&#xA;Color c = backgroundColor.Match(&#xA;    str =&amp;gt; CssHelper.GetColorFromString(str),&#xA;    name =&amp;gt; new Color(name),&#xA;    col =&amp;gt; col&#xA;);&#xA;_window.BackgroundColor = c;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a .Switch method, for when you aren&#39;t returning a value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OneOf&amp;lt;string, DateTime&amp;gt; dateValue = ...;&#xA;dateValue.Switch(&#xA;    str =&amp;gt; AddEntry(DateTime.Parse(str), foo),&#xA;    int =&amp;gt; AddEntry(int, foo)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TryPick𝑥 method&lt;/h3&gt; &#xA;&lt;p&gt;As an alternative to &lt;code&gt;.Switch&lt;/code&gt; or &lt;code&gt;.Match&lt;/code&gt; you can use the &lt;code&gt;.TryPick𝑥&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//TryPick𝑥 methods for OneOf&amp;lt;T0, T1, T2&amp;gt;&#xA;public bool TryPickT0(out T0 value, out OneOf&amp;lt;T1, T2&amp;gt; remainder) { ... }&#xA;public bool TryPickT1(out T1 value, out OneOf&amp;lt;T0, T2&amp;gt; remainder) { ... }&#xA;public bool TryPickT2(out T2 value, out OneOf&amp;lt;T0, T1&amp;gt; remainder) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The return value indicates if the OneOf contains a T𝑥 or not. If so, then &lt;code&gt;value&lt;/code&gt; will be set to the inner value from the OneOf. If not, then the remainder will be a OneOf of the remaining generic types. You can use them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IActionResult Get(string id)&#xA;{&#xA;    OneOf&amp;lt;Thing, NotFound, Error&amp;gt; thingOrNotFoundOrError = GetThingFromDb(string id);&#xA;&#xA;    if (thingOrNotFoundOrError.TryPickT1(out NotFound notFound, out var thingOrError)) //thingOrError is a OneOf&amp;lt;Thing, Error&amp;gt;&#xA;      return StatusCode(404);&#xA;&#xA;    if (thingOrError.TryPickT1(out var error, out var thing)) //note that thing is a Thing rather than a OneOf&amp;lt;Thing&amp;gt;&#xA;    {&#xA;      _logger.LogError(error.Message);&#xA;      return StatusCode(500);&#xA;    }&#xA;&#xA;    return Ok(thing);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reusable OneOf Types using OneOfBase&lt;/h3&gt; &#xA;&lt;p&gt;You can declare a OneOf as a type, either for reuse of the type, or to provide additional members, by inheriting from &lt;code&gt;OneOfBase&lt;/code&gt;. The derived class will inherit the &lt;code&gt;.Match&lt;/code&gt;, &lt;code&gt;.Switch&lt;/code&gt;, and &lt;code&gt;.TryPick𝑥&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class StringOrNumber : OneOfBase&amp;lt;string, int&amp;gt;&#xA;{&#xA;    StringOrNumber(OneOf&amp;lt;string, int&amp;gt; _) : base(_) { }&#xA;&#xA;    // optionally, define implicit conversions&#xA;    // you could also make the constructor public&#xA;    public static implicit operator StringOrNumber(string _) =&amp;gt; new StringOrNumber(_);&#xA;    public static implicit operator StringOrNumber(int _) =&amp;gt; new StringOrNumber(_);&#xA;&#xA;    public (bool isNumber, int number) TryGetNumber() =&amp;gt;&#xA;        Match(&#xA;            s =&amp;gt; (int.TryParse(s, out var n), n),&#xA;            i =&amp;gt; (true, i)&#xA;        );&#xA;}&#xA;&#xA;StringOrNumber x = 5;&#xA;Console.WriteLine(x.TryGetNumber().number);&#xA;// prints 5&#xA;&#xA;x = &#34;5&#34;;&#xA;Console.WriteLine(x.TryGetNumber().number);&#xA;// prints 5&#xA;&#xA;x = &#34;abcd&#34;;&#xA;Console.WriteLine(x.TryGetNumber().isNumber);&#xA;// prints False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OneOfBase Source Generation&lt;/h3&gt; &#xA;&lt;p&gt;You can automatically generate &lt;code&gt;OneOfBase&lt;/code&gt; hierarchies using &lt;code&gt;GenerateOneOfAttribute&lt;/code&gt; and partial class that extends &lt;code&gt;OneOfBase&lt;/code&gt; using a Source Generator (thanks to @romfir for the contribution :D). Install it via&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Install-Package OneOf.SourceGenerator&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;and then define a stub like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[GenerateOneOf]&#xA;public partial class StringOrNumber : OneOfBase&amp;lt;string, int&amp;gt; { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During compilation the source generator will produce a class implementing the OneOfBase boiler plate code for you. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public partial class StringOrNumber&#xA;{&#xA;&#x9;public StringOrNumber(OneOf.OneOf&amp;lt;System.String, System.Int32&amp;gt; _) : base(_) { }&#xA;&#xA;&#x9;public static implicit operator StringOrNumber(System.String _) =&amp;gt; new StringOrNumber(_);&#xA;&#x9;public static explicit operator System.String(StringOrNumber _) =&amp;gt; _.AsT0;&#xA;&#xA;&#x9;public static implicit operator StringOrNumber(System.Int32 _) =&amp;gt; new StringOrNumber(_);&#xA;&#x9;public static explicit operator System.Int32(StringOrNumber _) =&amp;gt; _.AsT1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>RadekVyM/MarvelousMAUI</title>
    <updated>2023-03-11T01:31:16Z</updated>
    <id>tag:github.com,2023-03-11:/RadekVyM/MarvelousMAUI</id>
    <link href="https://github.com/RadekVyM/MarvelousMAUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET MAUI clone of the Wonderous app - a visual showcase of eight wonders of the world.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/app_logo.png&#34; width=&#34;50&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt; Marvelous .NET MAUI &lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;.NET MAUI clone&lt;/strong&gt; of the &lt;a href=&#34;https://flutter.gskinner.com/wonderous/&#34;&gt;Wonderous app&lt;/a&gt; - a visual showcase of &lt;strong&gt;eight wonders of the world&lt;/strong&gt; made with &lt;a href=&#34;https://github.com/flutter/flutter&#34;&gt;Flutter&lt;/a&gt; by the team at &lt;a href=&#34;https://gskinner.com/&#34;&gt;gskinner&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/65116078/221362876-a51bf65e-8b8e-416c-8ef9-c56f57e792ea.mp4&#34;&gt;https://user-images.githubusercontent.com/65116078/221362876-a51bf65e-8b8e-416c-8ef9-c56f57e792ea.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project demonstrates how to develop &lt;strong&gt;tailored UI&lt;/strong&gt; using .NET MAUI. However, Marvelous .NET MAUI is not just a demonstration, it is a &lt;strong&gt;fully functional app&lt;/strong&gt; that allows users to navigate the intersection of history, art, and culture by exploring the Wonders of the World.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the original version of the app, you can also find out how well .NET MAUI competes against Flutter, for example in terms of app performance.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, make sure you have your Visual Studio and .NET 7 environment set up for .NET MAUI development. If not, follow the &lt;a href=&#34;https://learn.microsoft.com/dotnet/maui/get-started/installation&#34;&gt;setup instructions&lt;/a&gt;. Then make sure you have your &lt;a href=&#34;https://learn.microsoft.com/dotnet/maui/get-started/first-app?pivots=devices-android&#34;&gt;Android&lt;/a&gt; or &lt;a href=&#34;https://learn.microsoft.com/dotnet/maui/get-started/first-app?pivots=devices-ios&#34;&gt;iOS&lt;/a&gt; platform set up for deployment of the application.&lt;/p&gt; &#xA;&lt;p&gt;Once everything is set up, you can clone the repo and run the application via Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Here are some resources to learn more about .NET MAUI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/apps/maui&#34;&gt;Official website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/dotnet/maui/what-is-maui&#34;&gt;Microsoft Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/maui&#34;&gt;.NET MAUI GitHub repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Original app&lt;/h2&gt; &#xA;&lt;p&gt;The original Wonderous app is a reference app that shows how to develop tailored UI using Flutter.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/736973/187334170-d05271e9-d016-4498-8065-662c6f1124fa.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Here are some resources to learn more about the app and the amazing team that created it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flutter.gskinner.com/wonderous/&#34;&gt;Official Wonderous website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gskinnerTeam/flutter-wonderous-app&#34;&gt;Wonderous GitHub repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/flutter/wonderous-explore-the-world-with-flutter-f43cce052e1&#34;&gt;Blog post about the goals of the app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6Hb3QiH_yps&#34;&gt;YouTube video showcasing Wonderous&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6IKhXXFFOuw&#34;&gt;YouTube video about Wonderous by Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gskinner.com/&#34;&gt;gskinner website&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Marvelous .NET MAUI has highly expressive user interface, tailored to the mobile form factor, and does not conform to a stock design system. Only .NET MAUI APIs and a few community libraries are used to achieve this level of expressiveness:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CommunityToolkit/Maui&#34;&gt;.NET MAUI Community Toolkit&lt;/a&gt; - collection of common elements for development with .NET MAUI that developers tend to replicate across multiple apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RadekVyM/SimpleToolkit&#34;&gt;SimpleToolkit&lt;/a&gt; - library of helpers and simple, easily customizable controls&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RadekVyM/Draggable-Grid-JS&#34;&gt;Draggable Grid&lt;/a&gt; - JavaScript control that allows you to arrange items of an unordered list into a grid and to move between them by dragging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Remarkable carousel view&lt;/h3&gt; &#xA;&lt;p&gt;Unique, custom-built carousel view which lets you to switch between all eight wonders of the world.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/android_illustrations_20.gif&#34; width=&#34;220&#34;&gt; &amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/iphone_illustrations_20.gif&#34; width=&#34;229&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Unique scroll patterns&lt;/h3&gt; &#xA;&lt;p&gt;Unique scroll patterns and effects as you move through various pages.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/android_main_wonder_page_20.gif&#34; width=&#34;220&#34;&gt; &amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/iphone_history_page_20.gif&#34; width=&#34;229&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Custom controls&lt;/h3&gt; &#xA;&lt;p&gt;Tailored buttons, icons and other controls that match the Wonderous design system. Some of them are just compositions of existing .NET MAUI controls, and some are (almost completely) drawn using .NET MAUI cross-platform drawing APIs, such as a slider to select the period of the currently displayed artifacts.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/android_artifacts_slider_20.gif&#34; width=&#34;220&#34;&gt; &amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/iphone_timeline_20.gif&#34; width=&#34;229&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Animations everywhere&lt;/h3&gt; &#xA;&lt;p&gt;The application is full of animations.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/android_discovering_artifact_20.gif&#34; width=&#34;220&#34;&gt; &amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/iphone_wonders_transitions_20.gif&#34; width=&#34;229&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Blazor/JavaScript component&lt;/h3&gt; &#xA;&lt;p&gt;The wonder photo gallery is created using the &lt;a href=&#34;https://github.com/RadekVyM/Draggable-Grid-JS&#34;&gt;Draggable Grid&lt;/a&gt; JavaScript control which is embedded via &lt;code&gt;BlazorWebView&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/RadekVyM/MarvelousMAUI/main/images/android_wonder_photo_gallery_12.gif&#34; width=&#34;220&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;As with the original app (&lt;a href=&#34;https://github.com/gskinnerTeam/flutter-wonderous-app/raw/main/LICENSE&#34;&gt;license&lt;/a&gt;), source code of this app is released under the MIT license. You can use the code for any purpose, including commercial projects.&lt;/p&gt; &#xA;&lt;p&gt;However, &lt;strong&gt;visual assets are copyrighted&lt;/strong&gt; and &lt;strong&gt;used with permission&lt;/strong&gt;. Please visit the &lt;a href=&#34;https://github.com/gskinnerTeam/flutter-wonderous-app&#34;&gt;Wonderous GitHub repository&lt;/a&gt; for original version of the assets.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/Mission-Critical-Online</title>
    <updated>2023-03-11T01:31:16Z</updated>
    <id>tag:github.com,2023-03-11:/Azure/Mission-Critical-Online</id>
    <link href="https://github.com/Azure/Mission-Critical-Online" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is part of the Azure Mission-Critical open source project that provides a prescriptive architectural approach to building highly-reliable cloud-native applications on Microsoft Azure for mission-critical workloads. This repository contains the online reference implementation a fully functional production-grade reference Implement…&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/icon-light.png#gh-light-mode-only&#34; alt=&#34;Azure Mission-Critical Application&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/icon-dark.png#gh-dark-mode-only&#34; alt=&#34;Azure Mission-Critical Application&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Welcome to Azure Mission-Critical Online Reference Implementation&lt;/h2&gt; &#xA;&lt;p&gt;Azure Mission-Critical is an open source project that provides a &lt;strong&gt;prescriptive architectural approach to building highly-reliable cloud-native applications on Microsoft Azure for mission-critical workloads&lt;/strong&gt;. This repository contains a &lt;strong&gt;Fully Functional Production-Ready Mission-Critical Reference Implementation&lt;/strong&gt;, intended to provide a solution oriented basis to showcase mission-critical application development on Microsoft Azure, leveraging Azure-native platform capabilities to maximize reliability and operational effectiveness. More specifically, the reference implementation consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Design and implementation guidance to help readers understand and use the Azure Mission-Critical design methodology in the context of a particular industry scenario.&lt;/li&gt; &#xA; &lt;li&gt;Production-ready technical artifacts including Infrastructure-as-Code (IaC) resources and Continuous-Integration/Continuous-Deployment (CI/CD) pipelines (GitHub and Azure DevOps) to deploy an Mission-Critical application with mature end-to-end operational wrappers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains the technical artifacts and in-depth documentation of the reference implementation for an Mission-Critical &#34;online&#34; scenario, i.e. a workload which does not require direct connectivity to other company resources (such as via a hub-and-spoke model). The pipeline deploys the application Azure Subscription security and compliance guardrails and has no network connectivity requirements. It will be used if the Mission-Critical application is access over a public endpoint without additional dependencies to other company resources.&lt;/p&gt; &#xA;&lt;h2&gt;Azure Mission-Critical overview&lt;/h2&gt; &#xA;&lt;p&gt;The following articles provide more information about the Azure Mission-Critical design guidelines and design areas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/architecture/framework/mission-critical/mission-critical-overview&#34;&gt;What is Azure Mission-Critical?&lt;/a&gt; (➡️ &lt;code&gt;learn.microsoft.com&lt;/code&gt;) - Detailed introduction into Mission-Critical, the problem it is intended to solve and the value it can provide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/architecture/framework/mission-critical/mission-critical-design-methodology&#34;&gt;Design Methodology&lt;/a&gt; (➡️ &lt;code&gt;learn.microsoft.com&lt;/code&gt;) - The design methodology strives to provide an easy to follow design path to help to produce an optimal target architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/architecture/framework/mission-critical/mission-critical-overview#what-are-the-key-design-areas&#34;&gt;Design Areas&lt;/a&gt; (➡️ &lt;code&gt;learn.microsoft.com&lt;/code&gt;) - Prescriptive guidance aligned to 8 critical design areas guides users to design and build an Mission-Critical application, outlining a recommended decision process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference implementation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/architecture/reference-architectures/containers/aks-mission-critical/mission-critical-intro&#34;&gt;Mission-critical baseline architecture on Azure&lt;/a&gt; (➡️ &lt;code&gt;learn.microsoft.com&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/docs/reference-implementation/Getting-Started.md&#34;&gt;Getting Started Guide&lt;/a&gt; outlines the process and required steps to deploy Azure Mission-Critical in your environment, including preparing the Azure DevOps pipelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/docs/README.md&#34;&gt;Reference Implementation Documentation&lt;/a&gt; contains everything required to understand and build a copy of the reference implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/src/infra/README.md&#34;&gt;Reference Implementation Build Artifacts&lt;/a&gt; contains the Infrastructure-as-Code artifacts, CI/CD pipelines, and application code required to deploy the reference implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/docs/media/mission-critical-architecture-online.svg?sanitize=true&#34; alt=&#34;Architecture overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Helpful Information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/docs/reference-implementation/FAQ.md&#34;&gt;Frequently Asked Questions&lt;/a&gt; captures responses to common issues and challenges associated with leveraging Mission-Critical.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/docs/reference-implementation/Troubleshooting.md&#34;&gt;Troubleshooting Guide&lt;/a&gt; contains a list of known issues and problems that can happen in the reference implementation and instructions how to address them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/docs/README.md&#34;&gt;Full List of Documentation&lt;/a&gt; contains a complete breakdown of the Mission-Critical repository to help navigate the contained guidance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Azure Mission-Critical is a community driven open source project that welcomes contributions as well as suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit the &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;CLA portal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g. status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;p&gt;For more details, please read &lt;a href=&#34;https://raw.githubusercontent.com/Azure/Mission-Critical-Online/main/CONTRIBUTE.md&#34;&gt;how to contribute&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;The Azure Mission-Critical project was created by the &lt;strong&gt;Microsoft Customer Architecture Team (CAT)&lt;/strong&gt; who continue to actively sponsor the sustained evolution of the Azure Mission-Critical project through the creation of additional reference implementations for common industry scenarios.&lt;/p&gt;</summary>
  </entry>
</feed>