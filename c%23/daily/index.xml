<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-09T01:32:19Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sqlkata/querybuilder</title>
    <updated>2022-10-09T01:32:19Z</updated>
    <id>tag:github.com,2022-10-09:/sqlkata/querybuilder</id>
    <link href="https://github.com/sqlkata/querybuilder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQL query builder, written in c#, helps you build complex queries easily, supports SqlServer, MySql, PostgreSql, Oracle, Sqlite and Firebird&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;SqlKata Query Builder&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/sqlkata/querybuilder/actions/workflows/build.yml/badge.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/SqlKata&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/SqlKata.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sqlkata/querybuilder/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/sqlkata/querybuilder&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sqlkata/querybuilder/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/sqlkata/querybuilder&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?text=Wow:&amp;amp;url=https%3A%2F%2Fgithub.com%2Fsqlkata%2Fquerybuilder&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/url?label=Tweet%20about%20SqlKata&amp;amp;style=social&amp;amp;url=https%3A%2F%2Fgithub.com%2Fsqlkata%2Fquerybuilder&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Follow and Upvote SqlKata on Product Hunt to encourage the development of this project&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.producthunt.com/products/sqlkata?utm_source=badge-follow&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-sqlkata&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/follow.svg?post_id=398417&amp;amp;theme=light&#34; alt=&#34;SqlKata - Dynamic Sql query builder for dotnet | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jOWD4vk.gif&#34; alt=&#34;Quick Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SqlKata Query Builder is a powerful Sql Query Builder written in C#.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s secure and framework agnostic. Inspired by the top Query Builders available, like Laravel Query Builder, and Knex.&lt;/p&gt; &#xA;&lt;p&gt;SqlKata has an expressive API. it follows a clean naming convention, which is very similar to the SQL syntax.&lt;/p&gt; &#xA;&lt;p&gt;By providing a level of abstraction over the supported database engines, that allows you to work with multiple databases with the same unified API.&lt;/p&gt; &#xA;&lt;p&gt;SqlKata supports complex queries, such as nested conditions, selection from SubQuery, filtering over SubQueries, Conditional Statements and others. Currently it has built-in compilers for SqlServer, MySql, PostgreSql and Firebird.&lt;/p&gt; &#xA;&lt;p&gt;The SqlKata.Execution package provides the ability to submit the queries to the database, using &lt;a href=&#34;https://github.com/StackExchange/Dapper&#34;&gt;Dapper&lt;/a&gt; under the covers.&lt;/p&gt; &#xA;&lt;p&gt;Checkout the full documentation on &lt;a href=&#34;https://sqlkata.com&#34;&gt;https://sqlkata.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotnet add package SqlKata&#xA;$ dotnet add package SqlKata.Execution # (optional) If you want the execution support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Setup Connection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var connection = new SqlConnection(&#34;...&#34;);&#xA;var compiler = new SqlCompiler();&#xA;&#xA;var db = new QueryFactory(connection, compiler)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;QueryFactory&lt;/code&gt; is provided by the SqlKata.Execution package.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Retrieve all records&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var books = db.Query(&#34;Books&#34;).Get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieve published books only&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var books = db.Query(&#34;Books&#34;).WhereTrue(&#34;IsPublished&#34;).Get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieve one book&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var introToSql = db.Query(&#34;Books&#34;).Where(&#34;Id&#34;, 145).Where(&#34;Lang&#34;, &#34;en&#34;).First();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retrieve recent books: last 10&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var recent = db.Query(&#34;Books&#34;).OrderByDesc(&#34;PublishedAt&#34;).Limit(10).Get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Include Author information&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var books = db.Query(&#34;Books&#34;)&#xA;    .Include(db.Query(&#34;Authors&#34;)) // Assumes that the Books table have a `AuthorId` column&#xA;    .Get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will include the property &#34;Author&#34; on each &#34;Book&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;[{&#xA;    &#34;Id&#34;: 1,&#xA;    &#34;PublishedAt&#34;: &#34;2019-01-01&#34;,&#xA;    &#34;AuthorId&#34;: 2,&#xA;    &#34;Author&#34;: { // &amp;lt;-- included property&#xA;        &#34;Id&#34;: 2,&#xA;        &#34;...&#34;: &#34;&#34;&#xA;    }&#xA;}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Join with authors table&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var books = db.Query(&#34;Books&#34;)&#xA;    .Join(&#34;Authors&#34;, &#34;Authors.Id&#34;, &#34;Books.AuthorId&#34;)&#xA;    .Select(&#34;Books.*&#34;, &#34;Authors.Name as AuthorName&#34;)&#xA;    .Get();&#xA;&#xA;foreach(var book in books)&#xA;{&#xA;    Console.WriteLine($&#34;{book.Title}: {book.AuthorName}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional queries&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var isFriday = DateTime.Today.DayOfWeek == DayOfWeek.Friday;&#xA;&#xA;var books = db.Query(&#34;Books&#34;)&#xA;    .When(isFriday, q =&amp;gt; q.WhereIn(&#34;Category&#34;, new [] {&#34;OpenSource&#34;, &#34;MachineLearning&#34;}))&#xA;    .Get();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pagination&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var page1 = db.Query(&#34;Books&#34;).Paginate(10);&#xA;&#xA;foreach(var book in page1.List)&#xA;{&#xA;    Console.WriteLine(book.Name);&#xA;}&#xA;&#xA;...&#xA;&#xA;var page2 = page1.Next();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;int affected = db.Query(&#34;Users&#34;).Insert(new {&#xA;    Name = &#34;Jane&#34;,&#xA;    CountryId = 1&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;int affected = db.Query(&#34;Users&#34;).Where(&#34;Id&#34;, 1).Update(new {&#xA;    Name = &#34;Jane&#34;,&#xA;    CountryId = 1&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;int affected = db.Query(&#34;Users&#34;).Where(&#34;Id&#34;, 1).Delete();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How to know when a new release or a feature is available?&lt;/h3&gt; &#xA;&lt;p&gt;I announce updates on My &lt;a href=&#34;https://twitter.com/ahmadmuzavi&#34;&gt;Twitter Account&lt;/a&gt;, and you can subscribe to our news letters from the website &lt;a href=&#34;https://sqlkata.com&#34;&gt;https://sqlkata.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The database that I want is not supported why?&lt;/h3&gt; &#xA;&lt;p&gt;Usually it&#39;s impossible to support all available database vendors, this why we focus on the major ones, and we are encourage you to create your own compiler for your database&lt;/p&gt; &#xA;&lt;h3&gt;Do you accept new compilers?&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunetly no, the reason is this will add overhead for the project contributors, we prefer to improve the quality of the existing compilers instead&lt;/p&gt; &#xA;&lt;h3&gt;How can I support the project?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Star the project here in Github, and share it with your friends&lt;/li&gt; &#xA; &lt;li&gt;Follow and upvote it on Product Hunt &lt;a href=&#34;https://www.producthunt.com/products/sqlkata?utm_source=badge-follow&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-sqlkata&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/follow.svg?post_id=398417&amp;amp;theme=light&amp;amp;size=small&#34; alt=&#34;SqlKata - Dynamic Sql query builder for dotnet | Product Hunt&#34; style=&#34;width: 86px; height: 32px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can also donate to support the project financily on open collection.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hasantarhan/LeafPhysics</title>
    <updated>2022-10-09T01:32:19Z</updated>
    <id>tag:github.com,2022-10-09:/hasantarhan/LeafPhysics</id>
    <link href="https://github.com/hasantarhan/LeafPhysics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/HfvpnkBWUdGejf2Ku0/giphy.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/interactive</title>
    <updated>2022-10-09T01:32:19Z</updated>
    <id>tag:github.com,2022-10-09:/dotnet/interactive</id>
    <link href="https://github.com/dotnet/interactive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET Interactive combines the power of .NET with many other languages to create notebooks, REPLs, and embedded coding experiences. Share code, explore data, write, and learn across your apps in ways you couldn&#39;t before.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Interactive &lt;img src=&#34;https://user-images.githubusercontent.com/2546640/56708992-deee8780-66ec-11e9-9991-eb85abb1d10a.png&#34; width=&#34;80px&#34; alt=&#34;dotnet bot in space&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/3pvut9YujN&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/732297728826277939?label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/dnceng-public/public/_build?definitionId=71&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng-public/public/_apis/build/status/dotnet/interactive/interactive-ci?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/dotnet/interactive/main?urlpath=lab&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.NET Interactive takes the power of .NET and embeds it into various interactive experiences. Share code, explore data, write, and learn across your apps in ways you couldn&#39;t before.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/#notebooks-with-net&#34;&gt;Notebooks&lt;/a&gt;: Jupyter, nteract, and Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CodeConversations/CodeConversations&#34;&gt;Code bots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Devices like &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Embeddable script engines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jonsequitur/dotnet-repl&#34;&gt;REPLs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;.NET Interactive IS .NET UNLEASHED&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Notebooks with .NET&lt;/h1&gt; &#xA;&lt;h2&gt;Visual Studio Code&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode&#34;&gt;.NET Interactive Notebooks&lt;/a&gt; extension for Visual Studio Code brings support for polyglot notebooks to Visual Studio Code, powered by .NET Interactive. We encourage you to &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode&#34;&gt;try it out&lt;/a&gt;. If you&#39;d like to contribute, you can start &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2546640/130660742-deb5c33b-020d-4d03-8034-7f11532c3201.gif&#34; alt=&#34;newnotebook&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Polyglot notebooks&lt;/h3&gt; &#xA;&lt;p&gt;.NET Interactive enables users to mix languages in a single notebook or cell without a wrapper. The multi-language experience enables users to use the best language for the task at hand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Languages supported&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C# and F#&lt;/li&gt; &#xA; &lt;li&gt;PowerShell, built in collaboration with the PowerShell team 💙&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;HTML&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mermaid-js.github.io/mermaid/#/&#34;&gt;Mermaid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SQL and KQL (Kusto), built in collaboration with the Azure Data / SQL team 💙&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;What languages are we exploring?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python, Julia, and R&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variable Sharing&lt;/h3&gt; &#xA;&lt;p&gt;.NET Interactive enables you to write code in multiple languages within a single notebook and in order to take advantage of those languages&#39; different strengths, you might find it useful to share data between them. Read more &lt;a href=&#34;https://github.com/dotnet/interactive/raw/main/docs/variable-sharing.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2546640/130664292-1cdfb806-a6f6-4874-bcad-a5eb4517a925.gif&#34; alt=&#34;Notebooks-variable-sharing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The gif above showcases the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Variable sharing across C#, HTML and JavaScript cells.&lt;/li&gt; &#xA; &lt;li&gt;Multi-language cells.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more examples on multi-language notebooks and variable sharing check out our &lt;a href=&#34;https://github.com/dotnet/interactive/tree/main/samples/notebooks/polyglot&#34;&gt;polyglot samples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visualization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Low code visualization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In just a single line of code easily visualize data with Microsoft SandDance and &lt;a href=&#34;https://data-explorer.nteract.io/&#34;&gt;nteract DataExplorer&lt;/a&gt;. For example the code snippet below will render an interactive &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/sanddance/&#34;&gt;Microsoft SandDance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;housingData.ExploreWithSandDance().Display();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2546640/130510820-6a5b5f9d-a0cc-4fef-8a3d-ea741a30d7f8.gif&#34; alt=&#34;low-code-visualization&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more &lt;a href=&#34;https://github.com/dotnet/interactive/tree/main/samples/ExtensionLab&#34;&gt;low code visualization&lt;/a&gt; examples, check out our samples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Works with your favorite visualization libraries&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2546640/130669124-09f11de8-e324-4c2e-bdbc-c49fd85511c2.gif&#34; alt=&#34;d3js&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The image below showcases the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C#&lt;/code&gt; cell: Define a variable in C#&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JavaScript&lt;/code&gt; cell: Use RequireJS to import d3.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HTML cell&lt;/code&gt;: Visualize the data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full example &lt;a href=&#34;https://github.com/dotnet/interactive/raw/main/samples/notebooks/polyglot/d3js.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Jupyter and nteract&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jupyter.org/&#34;&gt;Project Jupyter&lt;/a&gt; is a popular platform for creating interactive notebooks that can be used for data science, documentation, DevOps, and much more.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/547415/78056370-ddd0cc00-7339-11ea-9379-c40f8b5c1ae5.png&#34; width=&#34;70%&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/2546640/67912370-1b99b080-fb60-11e9-9839-0058d02488cf.png&#34; width=&#34;70%&#34;&gt; &#xA;&lt;p&gt;There are several ways to get started using .NET with Jupyter, including Jupyter Notebook, JupyterLab, and nteract.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/docs/NotebooksOnBinder.md&#34;&gt;Try sample .NET notebooks online using Binder&lt;/a&gt;. This also allows you try out our daily builds, including preview features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/docs/NotebookswithJupyter.md&#34;&gt;Install .NET Interactive&lt;/a&gt; to create and run .NET notebooks on your machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/docs/CreateBinder.md&#34;&gt;Share your own .NET notebooks with others online using Binder&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nteract.io/kernels/dotnet&#34;&gt;Use .NET Interactive with nteract&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/docs/small-factor-devices.md&#34;&gt;Use .NET Interactive on Raspberry Pi and pi-top&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find additional documentation &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/docs/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;We provide a number of packages that can be used to write custom &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/docs/extending-dotnet-interactive.md&#34;&gt;extensions&lt;/a&gt; for .NET Interactive or to build your own interactive experiences.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Microsoft.dotnet-interactive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.dotnet-interactive&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.dotnet-interactive.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The &lt;code&gt;dotnet-interactive&lt;/code&gt; global tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Microsoft.DotNet.Interactive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.DotNet.Interactive&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.DotNet.Interactive.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Core types for building applications providing interactive programming for .NET.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Microsoft.DotNet.Interactive.Formatting&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.DotNet.Interactive.Formatting&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.DotNet.Interactive.Formatting.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Convention-based and highly configurable .NET object formatting for interactive programming, including support for mime types suitable for building visualizations for Jupyter Notebooks and web browsers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Microsoft.DotNet.Interactive.FSharp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.DotNet.Interactive.FSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.DotNet.Interactive.FSharp.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Microsoft.DotNet.Interactive.Kernel implementation for F#&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Microsoft.DotNet.Interactive.CSharp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.DotNet.Interactive.CSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.DotNet.Interactive.CSharp.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Microsoft.DotNet.Interactive.Kernel implementation for C#&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;Microsoft.DotNet.Interactive.PowerShell&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.DotNet.Interactive.PowerShell&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.DotNet.Interactive.PowerShell.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Microsoft.DotNet.Interactive.Kernel implementation for PowerShell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;You can contribute to .NET Interactive with issues and pull requests. Simply filing issues for problems you encounter is a great way to contribute. Contributing code improvements is greatly appreciated. You can read more about our contribution guidelines &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/interactive/main/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customers &amp;amp; Partners&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/services/synapse-analytics/&#34;&gt;Azure Synapse Analytics &lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Azure HDInsight (HDI)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure Synapse Analytics uses the .NET kernel to write and run quick ad-hoc queries in addition to developing complete, end-to-end big data scenarios, such as reading in data, transforming it, and visualizing it&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;You can launch Jupyter notebooks from your HDInsight cluster to run big data queries against the compute resources in that cluster.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>