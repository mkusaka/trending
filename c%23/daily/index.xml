<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-06T01:27:11Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ephilipz/1brc.net</title>
    <updated>2024-05-06T01:27:11Z</updated>
    <id>tag:github.com,2024-05-06:/Ephilipz/1brc.net</id>
    <link href="https://github.com/Ephilipz/1brc.net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The 1 billion row challenge in .NET&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Results were run on a 16 core machine with 64 gb of ram @ 2.44 GHz&lt;/li&gt; &#xA; &lt;li&gt;To view the original .NET repo for the challenge can be found &lt;a href=&#34;https://github.com/nietras/1brc.cs&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data can be found &lt;a href=&#34;https://huggingface.co/datasets/nietras/1brc.data&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For comparison, the best c# solution runs in 1.5s on the same machine&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>paternostrox/Minecraft4Unity</title>
    <updated>2024-05-06T01:27:11Z</updated>
    <id>tag:github.com,2024-05-06:/paternostrox/Minecraft4Unity</id>
    <link href="https://github.com/paternostrox/Minecraft4Unity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal and very optimized version of Minecraft made in Unity, virtually endless in all three axis.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;ðŸ”®&lt;/span&gt; Minecraft4Unity&lt;/h1&gt; &#xA;&lt;p&gt;A minimal and very optimized version of Minecraft made in Unity, virtually endless in all three axis. It features procedural world generation with greedy meshing, data persistence and an inventory system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/paternostrox/Minecraft4Unity/assets/19597048/40c69361-4ced-4745-8e24-b096923101d0&#34; alt=&#34;minecraft4unity-title&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;ðŸ”¥&lt;/span&gt; Basic setup:&lt;/h2&gt; &#xA;&lt;p&gt;Just clone the project and open it in Unity version 2022.3.7f1 LTS or newer, it should also run in any 2020+ version with no issues. All the packages needed for the project will import automatically when opening it for the first time.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;ðŸ–¥&lt;/span&gt; Code description&lt;/h2&gt; &#xA;&lt;h3&gt;Procedural generation&lt;/h3&gt; &#xA;&lt;p&gt;While exploring the world, the game generates land and objects around the player position. For performance reasons, the game world is divided in chunks, like in the original game. Each chunk goes through the following process:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;3D Simplex Noise -&amp;gt; Block Data Generation -&amp;gt; Mesh &amp;amp; Collider Generation (Greedy Meshing) -&amp;gt; Object Spawning&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The basis for the procedural generation is a simplex noise function that is interpreted by the system. The system attributes different voxel types (e.g. air, stone, brick) for different value ranges. The block data is then used to generate the chunk meshes and colliders. The collider data is then used to spawn non-voxel objects (e.g. characters, items) in the chunk, which are placed randomly on top of ground voxels. An atlas shader takes care of texturing the chunk according to the UV data built by the mesh generation. The Unity job system is used in the most compute-intensive tasks, like in mesh and collider generation.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to bbtarzan12 for creating a good basis for procedural voxel terrain generation, which this project is built upon. His project can be found in &lt;a href=&#34;https://github.com/bbtarzan12/Unity-Procedural-Voxel-Terrain&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Data persistence&lt;/h3&gt; &#xA;&lt;p&gt;The system supports saving and loading any progress made. The state of the game can be represented as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Player Data: All player data is stored in a single file. It includes player positional data, stats data (health, mana stamina and skills) and inventory data (items and their organization in the UI).&lt;/li&gt; &#xA; &lt;li&gt;World Data: There is two files for each chunk of land (one for terrain data and one for object data). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The terrain data file is a very long byte array, where each byte represents a single terrain voxel.&lt;/li&gt; &#xA;   &lt;li&gt;The object data file describes all non-voxel objects placed by the player in the world. Each object type has it&#39;s own way of serializing itself, but all objects must have at least positional data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An autosave system is also provided, saving the state of the game whenever new chunks of land are generated (and old ones are destroyed).&lt;/p&gt; &#xA;&lt;h3&gt;Inventory system&lt;/h3&gt; &#xA;&lt;p&gt;The inventory system is similar to what you would see in the original game.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/paternostrox/Minecraft4Unity/assets/19597048/9ec1320f-ea05-4198-b65d-ce23ea2af9c4&#34; alt=&#34;inventory2&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows the player to stack items until a certain limit predefined by the item type.&lt;/li&gt; &#xA; &lt;li&gt;Has a hotbar &amp;amp; backpack UI, so the player can manage which items will be used or kept.&lt;/li&gt; &#xA; &lt;li&gt;It has pretty much the same organizational features as the original, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Item swap: Picking an item from a slot (LMB) and placing it in an occupied slot will automatically pick the item occupying it.&lt;/li&gt; &#xA;   &lt;li&gt;Take half: The player can pick half the amount of a stack (RMB) in any stack with more than one items.&lt;/li&gt; &#xA;   &lt;li&gt;Eyedropper: When an item stack is being held, the player can drop items one by one in other slots.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;ðŸŒ±&lt;/span&gt; How to contribute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this &lt;a href=&#34;https://github.com/paternostrox/Minecraft4Unity&#34;&gt;repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your feature or bug fix.&lt;/li&gt; &#xA; &lt;li&gt;Make your changes and test them thoroughly.&lt;/li&gt; &#xA; &lt;li&gt;Submit a &lt;a href=&#34;https://github.com/paternostrox/Minecraft4Unity/pulls&#34;&gt;pull request&lt;/a&gt; with a clear description of your changes.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>project-fika/Fika-Plugin</title>
    <updated>2024-05-06T01:27:11Z</updated>
    <id>tag:github.com,2024-05-06:/project-fika/Fika-Plugin</id>
    <link href="https://github.com/project-fika/Fika-Plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client-side changes to make multiplayer work&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fika - Bepinex plugin&lt;/h1&gt; &#xA;&lt;p&gt;Client-side changes to make multiplayer work.&lt;/p&gt; &#xA;&lt;h2&gt;/!\ &lt;strong&gt;NOTICE&lt;/strong&gt; /!\&lt;/h2&gt; &#xA;&lt;p&gt;If you somehow ended up here while you just want to play a stable release, please download the release from the discord &lt;a href=&#34;https://discord.gg/project-fika&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested to contribute, then you&#39;re at the right place!&lt;/p&gt; &#xA;&lt;h2&gt;State of the project&lt;/h2&gt; &#xA;&lt;p&gt;There are few bugs left. The goal now is to look back and refactor old code to make it better, as a lot of it is not efficient or easy to read.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You are free to fork, improve and send PRs to improve the project. Please try to make your code coherent for the other developers.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/8.0&#34;&gt;.NET SDK 8.0.x&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fika developer: &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Collaborator: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Copy-paste the contents of &lt;code&gt;EscapeFromTarkov_Data/Managed/&lt;/code&gt; into &lt;code&gt;References/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Copy-paste from Aki.Modules &lt;code&gt;project/Shared/Hollowed/hollowed.dll&lt;/code&gt; into &lt;code&gt;References/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;Debug / Release&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Tool&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PowerShell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet build&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VSCode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Terminal &amp;gt; Run Build Task...&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You have to create a &lt;code&gt;References&lt;/code&gt; folder and populate it with the required dependencies from your game installation for the project to build.&lt;/p&gt; &#xA;&lt;h3&gt;GoldMaster&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Have no certificates yet? &amp;gt; &lt;code&gt;Properties/signing/generate.bat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet build --configuration GoldMaster&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;img src=&#34;https://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png&#34; alt=&#34;cc by-nc-sa&#34; width=&#34;196&#34; height=&#34;62&#34; style=&#34;float:right&#34;&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode.en&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Aki.Modules&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.sp-tarkov.com/SPT-AKI/Modules/src/branch/master/LICENSE.md&#34;&gt;NCSA&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/project-fika/Fika-Plugin/main/LICENSE-SIT.md&#34;&gt;NCSA&lt;/a&gt; (&lt;code&gt;Forked from SIT.Client master:9de30d8&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open.NAT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lontivero/Open.NAT/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt; (for UPnP implementation)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LiteNetLib&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/RevenantX/LiteNetLib/raw/master/LICENSE.txt&#34;&gt;MIT&lt;/a&gt; (for P2P UDP implementation)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>