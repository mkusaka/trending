<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:31:58Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uezo/ChatdollKit</title>
    <updated>2023-03-08T01:31:58Z</updated>
    <id>tag:github.com,2023-03-08:/uezo/ChatdollKit</id>
    <link href="https://github.com/uezo/ChatdollKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatdollKit enables you to make your 3D model into a chatbot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatdollKit&lt;/h1&gt; &#xA;&lt;p&gt;ChatdollKit enables you to make your 3D model into a voice-enabled chatbot. &lt;a href=&#34;https://github.com/uezo/ChatdollKit/raw/master/README.ja.md&#34;&gt;🇯🇵日本語のREADMEはこちら&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uezo.blob.core.windows.net/github/chatdollkit/demo_en/index.html&#34;&gt;🇬🇧 Live demo English&lt;/a&gt; Say &#34;Hello&#34; to start conversation. This demo just returns what you say (echo).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uezo.blob.core.windows.net/github/chatdollkit/demo_ja/index.html&#34;&gt;🇯🇵 Live demo in Japanese&lt;/a&gt;「こんにちは」と話しかけると会話がスタートします。会話がスタートしたら、雑談に加えて「東京の天気は？」などと聞くと天気予報を教えてくれます。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://uezo.blob.core.windows.net/github/chatdoll/chatdollkit-overview.png&#34; width=&#34;720&#34;&gt; &#xA;&lt;h1&gt;✨ Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Model&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Speech and motion synchronization&lt;/li&gt; &#xA;   &lt;li&gt;Face expression control&lt;/li&gt; &#xA;   &lt;li&gt;Blink and lipsync&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dialog&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Speech-to-Text (Azure, Google, Watson etc)&lt;/li&gt; &#xA;   &lt;li&gt;Text-to-Speech (Azure, Google, Watson, VOICEROID, VOICEVOX etc)&lt;/li&gt; &#xA;   &lt;li&gt;Dialog state management&lt;/li&gt; &#xA;   &lt;li&gt;Intent extraction and topic routing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I/O&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Wakeword&lt;/li&gt; &#xA;   &lt;li&gt;Camera and QR Code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and more! See &lt;a href=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/manual.md&#34;&gt;ChatdollKit Documentation&lt;/a&gt; to learn details.&lt;/p&gt; &#xA;&lt;h1&gt;🚀 Quick start&lt;/h1&gt; &#xA;&lt;p&gt;You can learn how to setup ChatdollKit by watching this 2 minutes video: &lt;a href=&#34;https://www.youtube.com/watch?v=aJ0iDZ0o4Es&#34;&gt;https://www.youtube.com/watch?v=aJ0iDZ0o4Es&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📦 Import packages&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version of &lt;a href=&#34;https://github.com/uezo/ChatdollKit/releases&#34;&gt;ChatdollKit.unitypackage&lt;/a&gt; and import it into your Unity project after import dependencies;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cysharp/UniTask&#34;&gt;UniTask&lt;/a&gt;(Ver.2.3.1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.oculus.com/downloads/package/oculus-lipsync-unity/&#34;&gt;Oculus LipSync Unity&lt;/a&gt;(v29)&lt;/li&gt; &#xA; &lt;li&gt;Only for Unity 2019 or ealier: &lt;a href=&#34;https://assetstore.unity.com/packages/tools/input-management/json-net-for-unity-11347&#34;&gt;JSON .NET For Unity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want to create &lt;a href=&#34;https://www.gatebox.ai/en/&#34;&gt;Gatebox&lt;/a&gt; application also import &lt;a href=&#34;https://github.com/uezo/ChatdollKit/releases&#34;&gt;ChatdollKit Gatebox Extension&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🐟 Resource preparation&lt;/h2&gt; &#xA;&lt;p&gt;Add 3D model to the scene and adjust as you like. Also install required resources for the 3D model like shaders, Dynamic Bone etc. In this README, I use Cygnet-chan that we can perchase at Booth. &lt;a href=&#34;https://booth.pm/ja/items/1870320&#34;&gt;https://booth.pm/ja/items/1870320&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/01_resource_preparation.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;p&gt;And, create &lt;code&gt;/Animations&lt;/code&gt; folder and put animation clips. In this README, I use &lt;a href=&#34;https://assetstore.unity.com/packages/3d/animations/anime-girl-idle-animations-free-150406&#34;&gt;Anime Girls Idle Animations Free&lt;/a&gt;. I believe it is worth for you to purchase the pro edition.&lt;/p&gt; &#xA;&lt;h2&gt;🍣 ChatdollKit configuration&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;ChatdollKit/Prefabs/ChatdollKit&lt;/code&gt; to the scene.&lt;/p&gt; &#xA;&lt;p&gt;Then, select the speech service (Azure/Google/Watson) you use and set API key and some properties like Region and BaseUrl on inspector of ChatdollKit.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/02_01_chatdollkit.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;h3&gt;DialogController&lt;/h3&gt; &#xA;&lt;p&gt;On the inspector of &lt;code&gt;DialogController&lt;/code&gt;, set &lt;code&gt;Wake Word&lt;/code&gt; to start conversation, &lt;code&gt;Cancel Word&lt;/code&gt; to stop comversation, &lt;code&gt;Prompt Voice&lt;/code&gt; to require voice request from user.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/02_02_dialogcontroller_en.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;h3&gt;ModelController&lt;/h3&gt; &#xA;&lt;p&gt;Select &lt;code&gt;Setup ModelController&lt;/code&gt; in the context menu of ModelController and set the name of shapekey for blink to &lt;code&gt;Blink Blend Shape Name&lt;/code&gt; if it is not set after setup. If you want to setup manually, see &lt;a href=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/appendix.md#appendix-1-setup-modelcontroller-manually&#34;&gt;Appendix1. Setup ModelController manually&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/02_03_modelcontroller.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;h3&gt;Animator&lt;/h3&gt; &#xA;&lt;p&gt;Select &lt;code&gt;Setup Animator&lt;/code&gt; in the context menu of ModelController and select the folder that contains animation clips. If subfolders are included, layers with the same name as the subfolders are created in the AnimatorController, and clips in each subfolders are put on each layers.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/03_01_add_animations.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;p&gt;In this case you can select to put clips on &lt;code&gt;Base Layer&lt;/code&gt; or create layers named &lt;code&gt;01_Idles&lt;/code&gt;, &lt;code&gt;02_Layers&lt;/code&gt; and &lt;code&gt;03_Others&lt;/code&gt; and put on them.&lt;/p&gt; &#xA;&lt;p&gt;After creating Animator Controller you can select default idle animation by editing &lt;code&gt;Default&lt;/code&gt; status if you want to change.&lt;/p&gt; &#xA;&lt;p&gt;If you want to setup manually, see &lt;a href=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/appendix.md#appendix-2-setup-animator-manually&#34;&gt;Appendix2. Setup Animator manually&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/03_02_animator.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;h3&gt;Add skill&lt;/h3&gt; &#xA;&lt;p&gt;Attach &lt;code&gt;Examples/Echo/Skills/EchoSkill&lt;/code&gt; to &lt;code&gt;ChatdollKit&lt;/code&gt;. This is a skill for echo.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/04_add_echo_skill.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;h2&gt;🥳 Run&lt;/h2&gt; &#xA;&lt;p&gt;Press Play button of Unity editor. You can see the model starts with idling animation and blinking.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Say the word you set to &lt;code&gt;Wake Word&lt;/code&gt; on inspector (e.g. hello)&lt;/li&gt; &#xA; &lt;li&gt;Your model will reply the word you set to &lt;code&gt;Prompt Voice&lt;/code&gt; on inspector (e.g. what&#39;s up?)&lt;/li&gt; &#xA; &lt;li&gt;Say something you want to echo like &#34;Hello world!&#34;&lt;/li&gt; &#xA; &lt;li&gt;Your model will reply &#34;Hello world&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/uezo/ChatdollKit/master/Documents/Images/05_run_voicelistening.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;h1&gt;👷‍♀️ Build your own app&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;code&gt;MultiSkills&lt;/code&gt; example. That is more rich application including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dialog Routing: &lt;code&gt;Router&lt;/code&gt; is an example of how to decide the topic user want to talk&lt;/li&gt; &#xA; &lt;li&gt;Processing dialog: &lt;code&gt;TranslateDialog&lt;/code&gt; is an example that shows how to process dialog&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are now preparing contents to create more rich virtual assistant using ChatdollKit.&lt;/p&gt; &#xA;&lt;h1&gt;🌐 Run on WebGL&lt;/h1&gt; &#xA;&lt;p&gt;Refer to the following tips for now. We are preparing demo for WebGL.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It takes 5-10 minutes to build. (It depends on machine spec)&lt;/li&gt; &#xA; &lt;li&gt;Very hard to debug. Error message doesn&#39;t show the stacktrace: &lt;code&gt;To use dlopen, you need to use Emscripten’s linking support, see https://github.com/kripken/emscripten/wiki/Linking&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built-in Async/Await doesn&#39;t work (app stops at &lt;code&gt;await&lt;/code&gt;) because JavaScript doesn&#39;t support threading. Use &lt;a href=&#34;https://github.com/Cysharp/UniTask&#34;&gt;UniTask&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;CORS required for HTTP requests.&lt;/li&gt; &#xA; &lt;li&gt;Microphone is not supported. Use &lt;code&gt;ChatdollMicrophone&lt;/code&gt; that is compatible with WebGL.&lt;/li&gt; &#xA; &lt;li&gt;Compressed audio formats like MP3 are not supported. Use WAV in TTS Loaders.&lt;/li&gt; &#xA; &lt;li&gt;OVRLipSync is not supported. Use &lt;a href=&#34;https://github.com/hecomi/uLipSync&#34;&gt;uLipSync&lt;/a&gt; and &lt;a href=&#34;https://github.com/uezo/uLipSyncWebGL&#34;&gt;uLipSyncWebGL&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;If you want to show multibyte characters in message window put the font that includes multibyte characters to your project and set it to message windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;❤️ Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tyc.rei-yumesaki.net/&#34;&gt;Tsukuyomi-chan 3D model&lt;/a&gt; (3D model for demo) (c)&lt;a href=&#34;https://twitter.com/TYC_Project&#34;&gt;Rei Yumesaki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hecomi/uLipSync&#34;&gt;uLipSync&lt;/a&gt; (LipSync) (c)&lt;a href=&#34;https://twitter.com/hecomi&#34;&gt;hecomi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://voicevox.hiroshiba.jp&#34;&gt;VOICEVOX&lt;/a&gt; (Text-to-Speech service for demo) (c)&lt;a href=&#34;https://twitter.com/hiho_karuta&#34;&gt;Hiroshiba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zunko.jp/con_voice.html&#34;&gt;Shikoku Metan and Zundamon&lt;/a&gt; (Voice for demo, used in VOICEVOX TTS loader)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Strictly follow the &lt;a href=&#34;https://zunko.jp/con_ongen_kiyaku.html&#34;&gt;Term of Use of Shikoku Metan and Zundamon&lt;/a&gt;. And, if you distribute the voice generated with VOICEVOX let the users follow that rules.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MapsterMapper/Mapster</title>
    <updated>2023-03-08T01:31:58Z</updated>
    <id>tag:github.com,2023-03-08:/MapsterMapper/Mapster</id>
    <link href="https://github.com/MapsterMapper/Mapster" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, fun and stimulating object to object Mapper&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/5763993/26522718/d16f3e42-4330-11e7-9b78-f8c7402624e7.png&#34; alt=&#34;Mapster Icon&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mapster - The Mapper of Your Domain&lt;/h2&gt; &#xA;&lt;p&gt;Writing mapping methods is a machine job. Do not waste your time, let Mapster do it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Mapster&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Mapster.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install Mapster with the NuGet CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Mapster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the .NET core CLI to install Mapster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Mapster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;h4&gt;Mapping to a new object&lt;/h4&gt; &#xA;&lt;p&gt;Mapster creates the destination object and maps values to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var destObject = sourceObject.Adapt&amp;lt;Destination&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mapping to an existing object&lt;/h4&gt; &#xA;&lt;p&gt;You create the object, Mapster maps to the object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;sourceObject.Adapt(destObject);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;You can get IMapper instance via dependency injection so you do not have to change code when migrating to mapster from automapper&lt;/h4&gt; &#xA;&lt;p&gt;Add Mapster to service collection&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddMapster();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And use it with DI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Test&#xA;{&#xA;    public Test(IMapper mapper)&#xA;    {&#xA;        var sourceObject = mapper.Adapt&amp;lt;Destination&amp;gt;();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Queryable Extensions&lt;/h4&gt; &#xA;&lt;p&gt;Mapster also provides extensions to map queryables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (MyDbContext context = new MyDbContext())&#xA;{&#xA;    // Build a Select Expression from DTO&#xA;    var destinations = context.Sources.ProjectToType&amp;lt;Destination&amp;gt;().ToList();&#xA;&#xA;    // Versus creating by hand:&#xA;    var destinations = context.Sources.Select(c =&amp;gt; new Destination {&#xA;        Id = c.Id,&#xA;        Name = c.Name,&#xA;        Surname = c.Surname,&#xA;        ....&#xA;    })&#xA;    .ToList();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generating models &amp;amp; mappers&lt;/h4&gt; &#xA;&lt;p&gt;No need to write your own DTO classes. Mapster provides &lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Mapster.Tool&#34;&gt;Mapster.Tool&lt;/a&gt; to help you generating models. And if you would like to have explicit mapping, Mapster also generates mapper class for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[AdaptTo(&#34;[name]Dto&#34;), GenerateMapper]&#xA;public class Student {&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then Mapster will generate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class StudentDto {&#xA;    ...&#xA;}&#xA;public static class StudentMapper {&#xA;    public static StudentDto AdaptToDto(this Student poco) { ... }&#xA;    public static StudentDto AdaptTo(this Student poco, StudentDto dto) { ... }&#xA;    public static Expression&amp;lt;Func&amp;lt;Student, StudentDto&amp;gt;&amp;gt; ProjectToDto =&amp;gt; ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s new&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Fluent-API-Code-generation&#34;&gt;Fluent API for code generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Mapster.Tool&#34;&gt;Automatically generate mapping code on build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Config-for-nested-mapping&#34;&gt;Define setting to nested mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Data-types#collections&#34;&gt;&lt;code&gt;ISet&lt;/code&gt;, &lt;code&gt;IDictionary&lt;/code&gt;, &lt;code&gt;IReadOnlyDictionary&lt;/code&gt; support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Setting-values#transform-value&#34;&gt;&lt;code&gt;EmptyCollectionIfNull&lt;/code&gt;, &lt;code&gt;CreateNewIfNull&lt;/code&gt; DestinationTransform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/releases/&#34;&gt;Several fixes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;New plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Immutable&#34;&gt;Immutable collection support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why Mapster?&lt;/h3&gt; &#xA;&lt;h4&gt;Performance &amp;amp; Memory efficient&lt;/h4&gt; &#xA;&lt;p&gt;Mapster was designed to be efficient on both speed and memory. You could gain a 4x performance improvement whilst using only 1/3 of memory. And you could gain up to 12x faster performance with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Debugging&#34;&gt;Roslyn Compiler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/FastExpressionCompiler&#34;&gt;FEC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code generation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;StdDev&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;Mapster 6.0.0&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;108.59 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.198 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.811 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;31000.0000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;124.36 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;Mapster 6.0.0 (Roslyn)&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38.45 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.494 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.830 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;31142.8571&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;124.36 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;Mapster 6.0.0 (FEC)&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;37.03 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.281 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.472 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;29642.8571&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;118.26 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;Mapster 6.0.0 (Codegen)&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;34.16 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.209 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.316 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;31133.3333&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;124.36 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;ExpressMapper 1.9.1&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;205.78 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.357 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8.098 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;59000.0000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;236.51 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#39;AutoMapper 10.0.0&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;420.97 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;23.266 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;35.174 ms&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;87000.0000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;350.95 MB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Step into debugging&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Debugging&#34;&gt;Step-into debugging&lt;/a&gt; lets you debug your mapping and inspect values just like your code. &lt;img src=&#34;https://cloud.githubusercontent.com/assets/5763993/26521773/180427b6-431b-11e7-9188-10c01fa5ba5c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Code Generation&lt;/h4&gt; &#xA;&lt;p&gt;Code generation allows you to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Validate mapping at compile time&lt;/li&gt; &#xA; &lt;li&gt;Getting raw performance&lt;/li&gt; &#xA; &lt;li&gt;Seeing your mapping code &amp;amp; debugging&lt;/li&gt; &#xA; &lt;li&gt;Finding usage of your models&#39; properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are currently two tools which you can choose based on your preferences.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/Mapster.Tool&#34;&gt;Mapster.Tool&lt;/a&gt; NEW!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki/TextTemplate&#34;&gt;TextTemplate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Change logs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/releases&#34;&gt;https://github.com/MapsterMapper/Mapster/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MapsterMapper/Mapster/wiki&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rivenfx/Mapster-docs&#34;&gt;中文文档&lt;/a&gt; (sp thx to &lt;a href=&#34;https://github.com/staneee&#34;&gt;@staneee&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Acknowledgements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=Mapster&#34;&gt;JetBrains&lt;/a&gt; kindly provides Mapster with a free open-source licence for their Resharper and Rider.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resharper&lt;/strong&gt; makes Visual Studio a much better IDE&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rider&lt;/strong&gt; is fast &amp;amp; powerful cross platform .NET IDE&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/JetBrains_Logo_2016.svg/121px-JetBrains_Logo_2016.svg.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnetcore/CAP</title>
    <updated>2023-03-08T01:31:58Z</updated>
    <id>tag:github.com,2023-03-08:/dotnetcore/CAP</id>
    <link href="https://github.com/dotnetcore/CAP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distributed transaction solution in micro-service base on eventually consistency, also an eventbus with Outbox pattern&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;140&#34; src=&#34;https://cap.dotnetcore.xyz/img/logo.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;CAP 　　　　　　　　　　　　　　　　　　　　&lt;a href=&#34;https://github.com/dotnetcore/CAP/raw/master/README.zh-cn.md&#34;&gt;中文&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dotnetcore/CAP&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/dotnetcore/CAP/master.svg?label=travis-ci&#34; alt=&#34;Travis branch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/yang-xiaodong/cap/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/v8gfh6pe2u2laqoa/branch/master?svg=true&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/DotNetCore.CAP/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/DotNetCore.CAP.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/DotNetCore.CAP/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/DotNetCore.CAP.svg?label=nuget-pre&#34; alt=&#34;NuGet Preview&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnetcore&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/member%20project%20of-NCC-9e20c9.svg?sanitize=true&#34; alt=&#34;Member project of .NET Core Community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/dotnetcore/CAP/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CAP is a library based on .Net standard, which is a solution to deal with distributed transactions, has the function of EventBus, it is lightweight, easy to use, and efficient.&lt;/p&gt; &#xA;&lt;p&gt;In the process of building an SOA or MicroService system, we usually need to use the event to integrate each service. In the process, simple use of message queue does not guarantee reliability. CAP adopts local message table program integrated with the current database to solve exceptions that may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case.&lt;/p&gt; &#xA;&lt;p&gt;You can also use CAP as an EventBus. CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during subscription and sending process.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cap.dotnetcore.xyz/img/architecture-new.png&#34; alt=&#34;cap.png&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CAP implements the Outbox Pattern described in the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/multi-container-microservice-net-applications/subscribe-events#designing-atomicity-and-resiliency-when-publishing-to-the-event-bus&#34;&gt;eShop ebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;NuGet&lt;/h3&gt; &#xA;&lt;p&gt;CAP can be installed in your project with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package DotNetCore.CAP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CAP supports most popular message queue as transport, following packages are available to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package DotNetCore.CAP.Kafka&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.RabbitMQ&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.AzureServiceBus&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.AmazonSQS&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.NATS&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.RedisStreams&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.Pulsar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CAP supports most popular database as event storage, following packages are available to install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// select a database provider you are using, event log table will integrate into.&#xA;&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.SqlServer&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.MySql&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.PostgreSql&#xA;PM&amp;gt; Install-Package DotNetCore.CAP.MongoDB     //need MongoDB 4.0+ cluster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to configure CAP in your Startup.cs：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public void ConfigureServices(IServiceCollection services)&#xA;{&#xA;    //......&#xA;&#xA;    services.AddDbContext&amp;lt;AppDbContext&amp;gt;(); //Options, If you are using EF as the ORM&#xA;    services.AddSingleton&amp;lt;IMongoClient&amp;gt;(new MongoClient(&#34;&#34;)); //Options, If you are using MongoDB&#xA;&#xA;    services.AddCap(x =&amp;gt;&#xA;    {&#xA;        // If you are using EF, you need to add the configuration：&#xA;        x.UseEntityFramework&amp;lt;AppDbContext&amp;gt;(); //Options, Notice: You don&#39;t need to config x.UseSqlServer(&#34;&#34;&#34;) again! CAP can autodiscovery.&#xA;&#xA;        // If you are using ADO.NET, choose to add configuration you needed：&#xA;        x.UseSqlServer(&#34;Your ConnectionStrings&#34;);&#xA;        x.UseMySql(&#34;Your ConnectionStrings&#34;);&#xA;        x.UsePostgreSql(&#34;Your ConnectionStrings&#34;);&#xA;&#xA;        // If you are using MongoDB, you need to add the configuration：&#xA;        x.UseMongoDB(&#34;Your ConnectionStrings&#34;);  //MongoDB 4.0+ cluster&#xA;&#xA;        // CAP support RabbitMQ,Kafka,AzureService as the MQ, choose to add configuration you needed：&#xA;        x.UseRabbitMQ(&#34;HostName&#34;);&#xA;        x.UseKafka(&#34;ConnectionString&#34;);&#xA;        x.UseAzureServiceBus(&#34;ConnectionString&#34;);&#xA;        x.UseAmazonSQS();&#xA;    });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Publish&lt;/h3&gt; &#xA;&lt;p&gt;Inject &lt;code&gt;ICapPublisher&lt;/code&gt; in your Controller, then use the &lt;code&gt;ICapPublisher&lt;/code&gt; to send messages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The version 7.0+ supports publish delay messages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class PublishController : Controller&#xA;{&#xA;    private readonly ICapPublisher _capBus;&#xA;&#xA;    public PublishController(ICapPublisher capPublisher)&#xA;    {&#xA;        _capBus = capPublisher;&#xA;    }&#xA;&#xA;    [Route(&#34;~/adonet/transaction&#34;)]&#xA;    public IActionResult AdonetWithTransaction()&#xA;    {&#xA;        using (var connection = new MySqlConnection(ConnectionString))&#xA;        {&#xA;            using (var transaction = connection.BeginTransaction(_capBus, autoCommit: true))&#xA;            {&#xA;                //your business logic code&#xA;&#xA;                _capBus.Publish(&#34;xxx.services.show.time&#34;, DateTime.Now);&#xA;&#xA;                // Publish delay message&#xA;                _capBus.PublishDelayAsync(TimeSpan.FromSeconds(delaySeconds), &#34;xxx.services.show.time&#34;, DateTime.Now);&#xA;            }&#xA;        }&#xA;&#xA;        return Ok();&#xA;    }&#xA;&#xA;    [Route(&#34;~/ef/transaction&#34;)]&#xA;    public IActionResult EntityFrameworkWithTransaction([FromServices]AppDbContext dbContext)&#xA;    {&#xA;        using (var trans = dbContext.Database.BeginTransaction(_capBus, autoCommit: true))&#xA;        {&#xA;            //your business logic code&#xA;&#xA;            _capBus.Publish(&#34;xxx.services.show.time&#34;, DateTime.Now);&#xA;        }&#xA;&#xA;        return Ok();&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Subscribe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;In Controller Action&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the Attribute &lt;code&gt;[CapSubscribe()]&lt;/code&gt; on Action to subscribe to messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class PublishController : Controller&#xA;{&#xA;    [CapSubscribe(&#34;xxx.services.show.time&#34;)]&#xA;    public void CheckReceivedMessage(DateTime datetime)&#xA;    {&#xA;        Console.WriteLine(datetime);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;In Business Logic Service&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your subscription method is not in the Controller, then your subscribe class needs to implement &lt;code&gt;ICapSubscribe&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;&#xA;namespace BusinessCode.Service&#xA;{&#xA;    public interface ISubscriberService&#xA;    {&#xA;        void CheckReceivedMessage(DateTime datetime);&#xA;    }&#xA;&#xA;    public class SubscriberService: ISubscriberService, ICapSubscribe&#xA;    {&#xA;        [CapSubscribe(&#34;xxx.services.show.time&#34;)]&#xA;        public void CheckReceivedMessage(DateTime datetime)&#xA;        {&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then register your class that implements &lt;code&gt;ISubscriberService&lt;/code&gt; in Startup.cs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public void ConfigureServices(IServiceCollection services)&#xA;{&#xA;    services.AddTransient&amp;lt;ISubscriberService,SubscriberService&amp;gt;();&#xA;&#xA;    services.AddCap(x=&amp;gt;&#xA;    {&#xA;        //...&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Async subscription&lt;/h4&gt; &#xA;&lt;p&gt;You are able to implement async subscription. Subscription&#39;s method should return Task and receive CancellationToken as parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class AsyncSubscriber : ICapSubscribe&#xA;{&#xA;    [CapSubscribe(&#34;name&#34;)]&#xA;    public async Task ProcessAsync(Message message, CancellationToken cancellationToken)&#xA;    {&#xA;        await SomeOperationAsync(message, cancellationToken);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use partials for topic subscriptions&lt;/h4&gt; &#xA;&lt;p&gt;To group topic subscriptions on class level you&#39;re able to define a subscription on a method as a partial. Subscriptions on the message queue will then be a combination of the topic defined on the class and the topic defined on the method. In the following example the &lt;code&gt;Create(..)&lt;/code&gt; function will be invoked when receiving a message on &lt;code&gt;customers.create&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[CapSubscribe(&#34;customers&#34;)]&#xA;public class CustomersSubscriberService : ICapSubscribe&#xA;{&#xA;    [CapSubscribe(&#34;create&#34;, isPartial: true)]&#xA;    public void Create(Customer customer)&#xA;    {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Subscribe Group&lt;/h4&gt; &#xA;&lt;p&gt;The concept of a subscription group is similar to that of a consumer group in Kafka. it is the same as the broadcast mode in the message queue, which is used to process the same message between multiple different microservice instances.&lt;/p&gt; &#xA;&lt;p&gt;When CAP startups, it will use the current assembly name as the default group name, if multiple same group subscribers subscribe to the same topic name, there is only one subscriber that can receive the message. Conversely, if subscribers are in different groups, they will all receive messages.&lt;/p&gt; &#xA;&lt;p&gt;In the same application, you can specify &lt;code&gt;Group&lt;/code&gt; property to keep subscriptions in different subscribe groups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;&#xA;[CapSubscribe(&#34;xxx.services.show.time&#34;, Group = &#34;group1&#34; )]&#xA;public void ShowTime1(DateTime datetime)&#xA;{&#xA;}&#xA;&#xA;[CapSubscribe(&#34;xxx.services.show.time&#34;, Group = &#34;group2&#34;)]&#xA;public void ShowTime2(DateTime datetime)&#xA;{&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ShowTime1&lt;/code&gt; and &lt;code&gt;ShowTime2&lt;/code&gt; will be called one after another because all received messages are processed linear. You can change that behaviour to set &lt;code&gt;UseDispatchingPerGroup&lt;/code&gt; true.&lt;/p&gt; &#xA;&lt;p&gt;BTW, You can specify the default group name in the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;services.AddCap(x =&amp;gt;&#xA;{&#xA;    x.DefaultGroup = &#34;default-group-name&#34;;  &#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;CAP also provides dashboard pages, you can easily view messages that were sent and received. In addition, you can also view the message status in real time in the dashboard. Use the following command to install the Dashboard in your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package DotNetCore.CAP.Dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the distributed environment, the dashboard built-in integrates &lt;a href=&#34;http://consul.io&#34;&gt;Consul&lt;/a&gt; as a node discovery, while the realization of the gateway agent function, you can also easily view the node or other node data, It&#39;s like you are visiting local resources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;services.AddCap(x =&amp;gt;&#xA;{&#xA;    //...&#xA;&#xA;    // Register Dashboard&#xA;    x.UseDashboard();&#xA;&#xA;    // Register to Consul&#xA;    x.UseDiscovery(d =&amp;gt;&#xA;    {&#xA;        d.DiscoveryServerHostName = &#34;localhost&#34;;&#xA;        d.DiscoveryServerPort = 8500;&#xA;        d.CurrentNodeHostName = &#34;localhost&#34;;&#xA;        d.CurrentNodePort = 5800;&#xA;        d.NodeId = 1;&#xA;        d.NodeName = &#34;CAP No.1 Node&#34;;&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default dashboard address is :&lt;a href=&#34;http://localhost:xxx/cap&#34;&gt;http://localhost:xxx/cap&lt;/a&gt;, you can configure relative path &lt;code&gt;/cap&lt;/code&gt; with &lt;code&gt;x.UseDashboard(opt =&amp;gt;{ opt.MatchPath=&#34;/mycap&#34;; })&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnetcore/CAP/raw/master/LICENSE.txt&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>