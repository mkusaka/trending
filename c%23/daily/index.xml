<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-09T01:34:17Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>knela96/Dynamic-Parkour-System</title>
    <updated>2022-06-09T01:34:17Z</updated>
    <id>tag:github.com,2022-06-09:/knela96/Dynamic-Parkour-System</id>
    <link href="https://github.com/knela96/Dynamic-Parkour-System" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dynamic Parkour System is a FREE plugin for Unity that allows anyone to import any model and have an already working controller with parkour capabilities like in Assassin&#39;s Creed games.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Dynamic Parkour System&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/knela96/Dynamic-Parkour-System/raw/Git-Pages/docs/Resources/Card.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dynamic Parkour System is a FREE plugin for Unity that allows anyone to import any model and have an already working controller with parkour capabilities like in Assassin&#39;s Creed and Uncharted games. This package is fully customizable with its own Character Controller, being really easy to configure and fast to use. It has the possibility to choose between some already build-in Parkour Actions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Actions&lt;/th&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vault Fence&lt;/td&gt; &#xA;   &lt;td&gt;Custom Character Controller&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vault Box&lt;/td&gt; &#xA;   &lt;td&gt;IK System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vault Down&lt;/td&gt; &#xA;   &lt;td&gt;Vaulting System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slide&lt;/td&gt; &#xA;   &lt;td&gt;Climbing System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auto Step&lt;/td&gt; &#xA;   &lt;td&gt;Jump Prediction System&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Climb Obstacles&lt;/td&gt; &#xA;   &lt;td&gt;Motion Warping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jump to Poles&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Climb Ledges&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jump Ledge to Ledge&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drop to Ledges&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Braced and Hang Climbing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To make the Dynamic Parkour System work, it requires the importation of Cinemachine and Input System Packets located in Unity Packet Manager.&lt;/p&gt; &#xA;&lt;h2&gt;Gameplay Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/mw6ozapAuYY&#34;&gt;Youtube Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Keyboard &amp;amp; Mouse&lt;/th&gt; &#xA;   &lt;th&gt;GamePad&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Movement&lt;/td&gt; &#xA;   &lt;td&gt;W, A, S, D&lt;/td&gt; &#xA;   &lt;td&gt;Left Joystick&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Look Around&lt;/td&gt; &#xA;   &lt;td&gt;Move Mouse&lt;/td&gt; &#xA;   &lt;td&gt;Right Joystick&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Run (Hold)&lt;/td&gt; &#xA;   &lt;td&gt;Left Shift&lt;/td&gt; &#xA;   &lt;td&gt;Right Trigger&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jump and Climb&lt;/td&gt; &#xA;   &lt;td&gt;Space Bar&lt;/td&gt; &#xA;   &lt;td&gt;X(Playstation) or A(Xbox) button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drop and Slide&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;O(PlayStation) or B(Xbox) button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/knela96/Dynamic-Parkour-System&#34;&gt;Dynamic Parkour System Github Repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/knela96/Dynamic-Parkour-System/releases/latest&#34;&gt;Unity Package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/knela96/Dynamic-Parkour-System/releases/tag/v1.0-beta&#34;&gt;Unity Build Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/knela96/Dynamic-Parkour-System/raw/Git-Pages/docs/Downloads/DynamicParkourSystem_Documentation.pdf&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any problem or find any bug report it in the Official Repository inside &lt;a href=&#34;https://github.com/knela96/Dynamic-Parkour-System/issues&#34;&gt;Issues&lt;/a&gt; section&lt;/p&gt; &#xA;&lt;h2&gt;Contact Me&lt;/h2&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;https://ericcanela.com&#34;&gt;ericcanela.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/knela96&#34;&gt;@Knela96&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;External Sources&lt;/h2&gt; &#xA;&lt;p&gt;Animations and Model from &lt;a href=&#34;https://www.mixamo.com/&#34;&gt;Mixamo&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sql-bi/Contoso-Data-Generator</title>
    <updated>2022-06-09T01:34:17Z</updated>
    <id>tag:github.com,2022-06-09:/sql-bi/Contoso-Data-Generator</id>
    <link href="https://github.com/sql-bi/Contoso-Data-Generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom Contoso database generator and ready-to-use Contoso sample databases for SQL Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Contoso Data Generator&lt;/h1&gt; &#xA;&lt;p&gt;A custom Contoso sample database generator&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DatabaseGenerator project&lt;/li&gt; &#xA; &lt;li&gt;Scripts to build the custom Contoso database importing constant and generated files&lt;/li&gt; &#xA; &lt;li&gt;CSV Files with the constant data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DatabaseGenerator&lt;/h2&gt; &#xA;&lt;p&gt;This project generates the orders tables as csv files to be imported into the custom Contoso database.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a C# project for .NET Core 3.1, included into the DatabaseGenerator.sln Visual Studio solution.&lt;/p&gt; &#xA;&lt;h3&gt;DatabaseGenerator C# project Folders&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DatabaseGenerator&lt;/strong&gt;: the project folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;data_folder&lt;/strong&gt;: the folder with simple configuration files for debugging purpose&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Powershell scripts that&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;runs the DatabaseGenerator&lt;/li&gt; &#xA; &lt;li&gt;creates the new custom contoso databse&lt;/li&gt; &#xA; &lt;li&gt;import the constant and generated data into the new databae&lt;/li&gt; &#xA; &lt;li&gt;exports the generated database to a compressed file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scripts folders&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scripts&lt;/strong&gt; and subfolders: the PowerShell scripts and SQL scripts run by it&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contoso Main&lt;/strong&gt; and subfolders: the CSV containing the constant data as csv files&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DataseteSqlbi&lt;/strong&gt;: configuration files used to run DatabaseGenerator&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Run&lt;/h2&gt; &#xA;&lt;p&gt;To quickly test the tool, verify the pre-requisites and run the QuickRun.ps1 script in the script folder&lt;/p&gt; &#xA;&lt;h3&gt;Pre-requisite to run the tool&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;7-Zip &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;https://www.7-zip.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Microsoft SQL Server must be installed on the same PC, reachable through the Alias &lt;strong&gt;Demo&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;The user running Microsoft SQL Server service must have access to the &lt;strong&gt;SqlDataFiles&lt;/strong&gt; folder (default C:\TEMP) used by the PowerShell script (see following section)&lt;/li&gt; &#xA; &lt;li&gt;.Net Core 3.1 &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/3.1&#34;&gt;https://dotnet.microsoft.com/en-us/download/dotnet/3.1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running QuickRun.ps1&lt;/h3&gt; &#xA;&lt;p&gt;QuickRun.ps1 takes one optional parameter&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;SqlDataFilesFolder&lt;/strong&gt; (default C:\TEMP): the folder to contain the generated files. The user of the SQL Server service must have access to this folder with the rights to read, write and create files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;QuickRun.ps1 runs GenerateDatabases.ps1 script. For further details, please refert to the documentation into the Scripts folder&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jbogard/MediatR</title>
    <updated>2022-06-09T01:34:17Z</updated>
    <id>tag:github.com,2022-06-09:/jbogard/MediatR</id>
    <link href="https://github.com/jbogard/MediatR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, unambitious mediator implementation in .NET&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MediatR&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jbogard/MediatR/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/mediatr&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/mediatr.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/mediatr&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/mediatr.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://myget.org/gallery/mediatr-ci&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/mediatr-ci/v/MediatR.svg?sanitize=true&#34; alt=&#34;MyGet (dev)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple mediator implementation in .NET&lt;/p&gt; &#xA;&lt;p&gt;In-process messaging with no dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Supports request/response, commands, queries, notifications and events, synchronous and async with intelligent dispatching via C# generic variance.&lt;/p&gt; &#xA;&lt;p&gt;Examples in the &lt;a href=&#34;https://github.com/jbogard/MediatR/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing MediatR&lt;/h3&gt; &#xA;&lt;p&gt;You should install &lt;a href=&#34;https://www.nuget.org/packages/MediatR&#34;&gt;MediatR with NuGet&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package MediatR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via the .NET Core command line interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package MediatR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either commands, from Package Manager Console or .NET Core CLI, will download and install MediatR and all required dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Using Contracts-Only Package&lt;/h3&gt; &#xA;&lt;p&gt;To reference only the contracts for MediatR, which includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IRequest&lt;/code&gt; (including generic variants and &lt;code&gt;Unit&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INotification&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamRequest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add a package reference to &lt;a href=&#34;https://www.nuget.org/packages/MediatR.Contracts&#34;&gt;MediatR.Contracts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package is useful in scenarios where your MediatR contracts are in a separate assembly/project from handlers. Example scenarios include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API contracts&lt;/li&gt; &#xA; &lt;li&gt;GRPC contracts&lt;/li&gt; &#xA; &lt;li&gt;Blazor&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>