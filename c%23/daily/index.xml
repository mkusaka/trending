<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:32:03Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>justcoding121/advanced-algorithms</title>
    <updated>2022-11-01T01:32:03Z</updated>
    <id>tag:github.com,2022-11-01:/justcoding121/advanced-algorithms</id>
    <link href="https://github.com/justcoding121/advanced-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;100+ algorithms &amp; data structures generically implemented in C#.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Note:&lt;/h3&gt; &#xA;&lt;p&gt;Please don&#39;t take effort to create pull requests for new algorithms or data structures. This is just a curiosity-driven personal hobby and &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/issues/2&#34;&gt;was originally not intended to be a library&lt;/a&gt;. Feel free fork and modify to fit your need if that&#39;s what you are looking for. You can however open issues or fix bugs with pull requests, I would be happy to take a look when I get time&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;Various important computer science algorithms generically implemented in C#.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/justcoding121/advanced-algorithms/actions/workflows/dotnetcore.yml&#34;&gt;&lt;img src=&#34;https://github.com/justcoding121/advanced-algorithms/actions/workflows/dotnetcore.yml/badge.svg?branch=develop&#34; alt=&#34;.NET Core&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install by &lt;a href=&#34;https://www.nuget.org/packages/Advanced.Algorithms&#34;&gt;nuget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For beta releases on &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/tree/beta&#34;&gt;beta branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Advanced.Algorithms -Pre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For stable releases on &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/tree/stable&#34;&gt;stable branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Advanced.Algorithms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://justcoding121.github.io/advanced-algorithms/docs/api/Advanced.Algorithms.DataStructures.html&#34;&gt;API documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supports&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.Net Standard 1.0 or above&lt;/li&gt; &#xA; &lt;li&gt;.Net Framework 4.0 or above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development environment&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio Code as IDE for .NET core&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2017 as IDE for .NET framework/.NET core&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mac OS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio Code as IDE for .NET core&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2017 as IDE for Mono&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio Code as IDE for .NET core&lt;/li&gt; &#xA; &lt;li&gt;Mono develop as IDE for Mono&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data structures&lt;/h2&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Array list (dynamic array) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/List/ArrayList.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Lists/ArrayList_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Skip list (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/List/SkipList.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Lists/SkipList_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;HashSets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HashSet (using &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/HashSet/SeparateChainingHashSet.cs&#34;&gt;separate chaining&lt;/a&gt; optionally with &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/HashSet/OpenAddressHashSet.cs&#34;&gt;open address linear probing&lt;/a&gt;) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/HashSet/HashSet.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/HashSet/HashSet_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ordered HashSet (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/HashSet/OrderedHashSet.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/HashSet/OrderedHashSet_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dictionaries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dictionary (using &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Dictionary/SeparateChainingDictionary.cs&#34;&gt;separate chaining&lt;/a&gt; optionally with &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Dictionary/OpenAddressDictionary.cs&#34;&gt;open address linear probing&lt;/a&gt;) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Dictionary/Dictionary.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Dictionary/Dictionary_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ordered Dictionary (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Dictionary/OrderedDictionary.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Dictionary/OrderedDictionary_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stack&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stack (using &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Stack/ArrayStack.cs&#34;&gt;dynamic array&lt;/a&gt; and optionally using &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Stack/LinkedListStack.cs&#34;&gt;singly linked list&lt;/a&gt;) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Stack/Stack.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Stack_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Queue&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Queue (using &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Queues/ArrayQueue.cs&#34;&gt;dynamic array&lt;/a&gt; and optionally using &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Queues/LinkedListQueue.cs&#34;&gt;doubly linked list&lt;/a&gt;) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Queues/Queue.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Queues/Queue_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Priority queue (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Queues/PriorityQueue.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Queues/PriorityQueue_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linked list&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Singly linked list (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/LinkedList/SinglyLinkedList.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/LinkedList/SinglyLinkedList_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Doubly linked list (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/LinkedList/DoublyLinkedList.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/LinkedList/DoublyLinkedList_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Circular linked list (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/LinkedList/CircularLinkedList.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/LinkedList/CircularLinkedList_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Heap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary heap (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Heap/BHeap.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Heap/BHeap_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; d-ary heap (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Heap/d-aryHeap.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Heap/D-aryHeap_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binomial heap (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Heap/BinomialHeap.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Heap/BinomialHeap_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fibonacci heap (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Heap/FibonacciHeap.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Heap/FibonacciHeap_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pairing heap (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Heap/PairingHeap.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Heap/PairingHeap_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: It is observed that among the implementations here, in practice, with the exclusion of UpdateKey (decrement/increment) operation, regular Binary Heap &amp;amp; d-ary Heap outperforms other in theory superiors. Likely because it doesn&#39;t have pointer juggling overhead and hey arrays are faster!&lt;/p&gt; &#xA;&lt;h3&gt;Tree&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/Tree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/Tree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/BinaryTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/BinaryTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Binary search trees&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary search tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/BST.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/BST_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AVL tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/AvlTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/AVLTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Red black tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/RedBlackTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/RedBlackTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Splay tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/SplayTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/SplayTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Treap tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/TreapTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/TreapTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;B trees (database trees)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; B-tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/BTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/BTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; B+ tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/B%2BTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/B%2BTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Queryable trees&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Segment tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/SegmentTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/SegmentTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary indexed tree (Fenwick tree) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/FenwickTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/FenwickTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-dimensional interval tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/IntervalTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/IntervalTree_Tests.cs&#34;&gt;tests&lt;/a&gt;) using nested red-black tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-dimensional k-d tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/K_DTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/KdTree_Tests.cs&#34;&gt;tests&lt;/a&gt;) for range and nearest neigbour queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-dimensional range tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/RangeTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/RangeTreetests.cs&#34;&gt;tests&lt;/a&gt;) using nested red-black tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; R-tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/RTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/RTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Quadtree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/QuadTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/QuadTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO: Support multi-dimentional segment tree &amp;amp; binary indexed tree.&lt;/p&gt; &#xA;&lt;h4&gt;Lookup trees&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prefix tree (Trie) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/Trie.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/Trie_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Suffix tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/SuffixTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/SuffixTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ternary search tree (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Tree/TernarySearchTree.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Tree/TernarySearchTree_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO: implement trie compression.&lt;/p&gt; &#xA;&lt;h4&gt;Set&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Disjoint set (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Set/DisJointSet.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Set/DisJointSet_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sparse set (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Set/SparseSet.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Set/SparseSet_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bloom filter (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Set/BloomFilter.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Set/BloomFilter_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Graph&lt;/h3&gt; &#xA;&lt;h4&gt;Adjacency list&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Graph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyList/Graph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyList/Graph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Weighted Graph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyList/WeightedGraph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyList/WeightedGraph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DiGraph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyList/DiGraph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyList/DiGraph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Weighted DiGraph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyList/WeightedDiGraph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyList/WeightedDiGraph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Adjacency matrix&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Graph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyMatrix/Graph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyMatrix/Graph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Weighted Graph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyMatrix/WeightedGraph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyMatrix/WeightedGraph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DiGraph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyMatrix/DiGraph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyMatrix/DiGraph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Weighted DiGraph (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/DataStructures/Graph/AdjacencyMatrix/WeightedDiGraph.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/DataStructures/Graph/AdjacencyMatrix/WeightedDiGraph_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;h3&gt;Graph algorithms&lt;/h3&gt; &#xA;&lt;h4&gt;Articulation points&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tarjan&#39;s articulation points finder (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ArticulationPoint/TarjansArticulationFinder.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ArticulationPoints/TarjansArticulation_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bridges&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tarjan&#39;s bridge finder (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Bridge/TarjansBridgeFinder.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Bridge/TarjansBridge_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Connectivity&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kosaraju&#39;s strongly connected component finder (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Connectivity/KosarajuStronglyConnected.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Connectivity/KosarajuStronglyConnected_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tarjan&#39;s strongly connected component finder (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Connectivity/TarjansStronglyConnected.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Connectivity/TarjansStronglyConnected_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tarjan&#39;s bi-connected graph tester (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Connectivity/TarjansBiConnected.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Connectivity/TarjansBiConnected_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Coloring&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; M-coloring (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Coloring/MColorer.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Coloring/MColoring_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cover&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Min vertex cover (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Cover/MinVertexCover.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Cover/MinVertexCover.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Maximum flow&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ford-Fulkerson algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Flow/FordFulkerson.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Flow/FordFulkerson_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edmonds Karp&#39;s improvement (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Flow/EdmondsKarp.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Flow/EdmondsKarp_Tests.cs&#34;&gt;tests&lt;/a&gt;) on Ford-Fulkerson algorithm&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Push relabel algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Flow/PushRelabel.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Flow/PushRelabel_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Shortest path&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bellman-Ford algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ShortestPath/Bellman-Ford.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ShortestPath/BellmanFord_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dijikstra&#39;s algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ShortestPath/Dijikstra.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ShortestPath/Dijikstras_Tests.cs&#34;&gt;tests&lt;/a&gt;) using Fibonacci heap.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Floyd-Warshall algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ShortestPath/Floyd-Warshall.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ShortestPath/FloydWarshall_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Johnson&#39;s algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ShortestPath/Johnsons.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ShortestPath/Johnson_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Travelling salesman path (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ShortestPath/TravellingSalesman.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ShortestPath/TravellingSalesman_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; A* search algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/ShortestPath/AStar.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/ShortestPath/AStar_Tests.cs&#34;&gt;tests&lt;/a&gt;) using Fibonacci heap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Matching&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Max bipartite matching (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Matching/BiPartiteMatching.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Matching/BiPartiteMatching_Tests.cs&#34;&gt;tests&lt;/a&gt;) using Edmonds Karp&#39;s improved Ford Fulkerson max flow algorithm&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Max bipartite matching (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Matching/HopcroftKarp.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Matching/HopcroftKarp_Tests.cs&#34;&gt;tests&lt;/a&gt;) using Hopcroft Karp algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cut&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Minimum cut (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Cut/MinimumCut.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Cut/MinCut_Tests.cs&#34;&gt;tests&lt;/a&gt;) using Edmonds Karp&#39;s improved Ford Fulkerson max flow algorithm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cycle&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cycle detection (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Cycle/CycleDetection.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Cycle/CycleDetection_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Search&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Depth first (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Search/DepthFirst.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Search/DepthFirst_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Breadth first (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Search/BreadthFirst.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Search/BreadthFirst_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bi-directional (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Search/BiDirectional.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Search/BiDirectional_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Topological sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Depth first method (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Sort/DepthFirstTopSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Sort/DepthFirstTopSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kahn&#39;s algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/Sort/KahnTopSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/Sort/KahnTopSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Minimum spanning tree&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Kruskal&#39;s algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/MinimumSpanningTree/Kruskals.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/MinimumSpanningTree/Kruskals_Test.cs&#34;&gt;tests&lt;/a&gt;) using merge sort and disjoint set&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prim&#39;s algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Graph/MinimumSpanningTree/Prims.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Graph/MinimumSpanningTree/Prims_Test.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;String&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manacher&#39;s algorithm for linear time longest palindrome (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/String/ManachersPalindrome.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/String/Manachers_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pattern matching&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rabin-Karp string search (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/String/Search/RabinKarp.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/String/Search/RabinKarp_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Knuth–Morris–Pratt (KMP) string search (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/String/Search/KMP.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/String/Search/KMP_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Z algorithm for string search (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/String/Search/ZAlgorithm.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/String/Search/Z_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compression&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Huffman coding (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Compression/HuffmanCoding.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Compression/HuffmanCoding_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sorting and searching&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Binary search (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Search/BinarySearch.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Search/BinarySearch_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Quick select for kth smallest/largest in unordered collection using median of medians (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Search/QuickSelect.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Search/QuickSelect_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Majority element using Boyer-Moore voting algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Search/BoyerMoore.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Search/BoyerMoore_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sorting algorithms&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bubble sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/BubbleSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/BubbleSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Insertion sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/InsertionSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/InsertionSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Selection sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/SelectionSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/SelectionSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shell sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/ShellSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/ShellSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tree sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/TreeSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/TreeSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Quick sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/QuickSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/QuickSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Heap sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/HeapSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/HeapSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Merge sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/MergeSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/MergeSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bucket sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/BucketSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/BucketSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Radix sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/RadixSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/RadixSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Counting sort (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Sorting/CountingSort.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Sorting/CountingSort_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: On a decent desktop, in given implementations here for +ive random input integers, the clear winner is counting sort (~0.1 seconds to sort 1 million integers) followed by Radix Sort (~0.4 seconds). Merge Sort, Heap Sort, Quick Sort &amp;amp; Bucket Sort are all winners for +ive &amp;amp; -ive random integer inputs. Tree sort has pointer juggling overhead on backing Red-Black Tree, so performs 8 times slower than Merge Sort in practice. Bubble Sort, Insertion Sort, Selection Sort &amp;amp; Shell Sort are among the worst for random input as observed from results.&lt;/p&gt; &#xA;&lt;h3&gt;Combinatorics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Permutations (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Combinatorics/Permutation.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Combinatorics/Permutation_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Combinations (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Combinatorics/Combination.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Combinatorics/Combination_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Subsets (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Combinatorics/Subset.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Combinatorics/Subset_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Distributed Systems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Circular queue (ring buffer) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Distributed/CircularQueue.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Distributed/CircularQueue_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Consistant hash (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Distributed/ConsistentHash.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Distributed/ConsistentHash_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; LRU cache (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Distributed/LRUCache.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Distributed/LRUCache_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Asynchronous producer–consumer queue (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Distributed/AsyncQueue.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Distributed/AsyncQueue_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Numerical methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Check primality (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Numerical/PrimeTester.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Numerical/Primality_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate primes using sieve of Eratosthenes (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Numerical/PrimeGenerator.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Numerical/PrimeGenerator_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fast exponentiation (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Numerical/Exponentiation.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Numerical/Exponentiation_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Geometry (in 2D)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Convex hull using gift wrapping algorithm (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/ConvexHull.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/ConvexHull_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Line intersection (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/LineIntersection.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/LineIntersection_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Closest point pair (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/ClosestPointPair.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/ClosestPointPair_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Check if given point inside polygon (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/PointInsidePolygon.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/PointInsidePolygon_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rectangle intersection (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/RectangleIntersection.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/RectangleIntersection_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Point rotation (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/PointRotation.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/PointRotation_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Line interesections with Bentley-Ottmann sweep line algorithm using red-black tree and binary minimum heap (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Geometry/BentleyOttmann.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Geometry/BentleyOttmann_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bit manipulation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Base conversion (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Binary/BaseConversion.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Binary/BaseConversion_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Calculate logarithm (base 2 &amp;amp; 10) (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Binary/Logarithm.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Binary/Logarithm_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GCD (&lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/src/Advanced.Algorithms/Binary/GCD.cs&#34;&gt;implementation&lt;/a&gt; | &lt;a href=&#34;https://github.com/justcoding121/Advanced-Algorithms/raw/master/tests/Advanced.Algorithms.Tests/Binary/GCD_Tests.cs&#34;&gt;tests&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>UnigramDev/Unigram</title>
    <updated>2022-11-01T01:32:03Z</updated>
    <id>tag:github.com,2022-11-01:/UnigramDev/Unigram</id>
    <link href="https://github.com/UnigramDev/Unigram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram for Windows&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.microsoft.com/store/apps/9n97zckpd60q&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/Unigram/Unigram/Assets/Logos/StoreLogo.scale-200.png&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;Unigram&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Telegram for Windows &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://www.microsoft.com/store/apps/9n97zckpd60q&#34;&gt;Microsoft Store&lt;/a&gt; · &lt;a href=&#34;https://unigramdev.github.io&#34;&gt;Direct Download&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://t.me/unigraminsiders&#34;&gt;Insiders Group&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#alternativedownload&#34;&gt;Download without Microsoft Store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#windows10n&#34;&gt;Windows 10 N&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#doc&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/#privacy&#34;&gt;Privacy policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;features&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on &lt;a href=&#34;https://github.com/tdlib/td&#34;&gt;TDLib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Secret chats&lt;/li&gt; &#xA; &lt;li&gt;Folders synced with other Telegram clients&lt;/li&gt; &#xA; &lt;li&gt;Instant view (now updated with the most recent 2.0)&lt;/li&gt; &#xA; &lt;li&gt;Multi-account&lt;/li&gt; &#xA; &lt;li&gt;Full featured private and group calls and videocalls (videosharing, raise the hand etc.)&lt;/li&gt; &#xA; &lt;li&gt;Videos and photos editor (easily crop photos, rotate, flip, draw on images before sending them)&lt;/li&gt; &#xA; &lt;li&gt;Drag&amp;amp;drop files to chats to send them quickly or use Windows 10 Share&lt;/li&gt; &#xA; &lt;li&gt;Open chats in separated windows&lt;/li&gt; &#xA; &lt;li&gt;Replace sent media content&lt;/li&gt; &#xA; &lt;li&gt;Polls 2.0 and Quizzes&lt;/li&gt; &#xA; &lt;li&gt;Backgrounds 2.0 (blurred and motion options available)&lt;/li&gt; &#xA; &lt;li&gt;Built-in app lock with support for Windows Hello authentication (fingerprint, face and iris recognition)&lt;/li&gt; &#xA; &lt;li&gt;Advanced markdown editor for messages&lt;/li&gt; &#xA; &lt;li&gt;In-app music player&lt;/li&gt; &#xA; &lt;li&gt;Animated stickers and emojis, video stickers&lt;/li&gt; &#xA; &lt;li&gt;Scheduled and silent messages&lt;/li&gt; &#xA; &lt;li&gt;Advanced formatting of the messages (markdown support and spoiler feature)&lt;/li&gt; &#xA; &lt;li&gt;Channel statistics for big channels&lt;/li&gt; &#xA; &lt;li&gt;Full support of Windows notifications and Action Centre (reply to a message or mark it as read without opening the app)&lt;/li&gt; &#xA; &lt;li&gt;Accessibility for visually impaired people&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before reporting bugs, doing features requests or embarking pull requests, be sure you have already read our &lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;. Build instructions can be found &lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/Documentation/Build-instructions.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;changelog&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Changelogs are provided both in &lt;a href=&#34;https://github.com/UnigramDev/Unigram/releases&#34;&gt;Releases section of our GitHub project&lt;/a&gt; and &lt;a href=&#34;https://t.me/unigram&#34;&gt;Unigram News channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;screenshots&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/Screenshots/Screen1.PNG&#34; alt=&#34;1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/Screenshots/Screen3.PNG&#34; alt=&#34;2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;alternativedownload&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download without the store&lt;/h2&gt; &#xA;&lt;p&gt;We release beta versions outside of the Microsoft Store. To install them just download the latest &lt;code&gt;.appxbundle&lt;/code&gt; file from &lt;a href=&#34;https://t.me/unigramappx&#34;&gt;this channel&lt;/a&gt;. Remember to follow the instructions in the first message.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;windows10n&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows 10 N&lt;/h2&gt; &#xA;&lt;p&gt;To work with Windows 10 N you will need Media Feature pack. To install it properly go to &lt;code&gt;Settings &amp;gt; Apps and Features &amp;gt; Add a feature.&lt;/code&gt; At this point, select Media Feature pack, install it and reboot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;translations&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;Unigram has 18 built-in languages, but has access to unlimited packs using Telegram translations platform. If you are wishing to translate it to your language, you can do that &lt;a href=&#34;https://translations.telegram.org/en/android/&#34;&gt;here&lt;/a&gt;, since Unigram uses the same translations as the official Telegram app for Android.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find &lt;a href=&#34;https://raw.githubusercontent.com/UnigramDev/Unigram/develop/Documentation&#34;&gt;here&lt;/a&gt; some documentation on how to build Unigram, grab TDLib logs and a list of all built-in keyboard shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;privacy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Privacy policy&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s our &lt;a href=&#34;https://telegram.org/privacy&#34;&gt;privacy policy&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aalhour/C-Sharp-Algorithms</title>
    <updated>2022-11-01T01:32:03Z</updated>
    <id>tag:github.com,2022-11-01:/aalhour/C-Sharp-Algorithms</id>
    <link href="https://github.com/aalhour/C-Sharp-Algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📚 📈 Plug-and-play class-library project of standard Data Structures and Algorithms in C#&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#xA;                                          o---o    |   |                                 &#xA;                                         /       --O---O--                               &#xA;                                        O          |   |                                 &#xA;                                         \       --O---O--                               &#xA;                                          o---o    |   |                                 &#xA;&#xA;&#xA;              O    o       o--o    o--o   o---o   o-O-o  o--O--o  o   o  o     o   o--o &#xA;             / \   |      o       o    o  |   |     |       |     |   |  |\   /|  |     &#xA;            o---o  |      |  o-o  |    |  O--Oo     |       |     O---O  | \o/ |   o--o &#xA;            |   |  |      o    |  o    o  |  \      |       |     |   |  |     |      | &#xA;            o   o  O---o   o--o    o--o   o   \o  o-O-o     o     o   o  o     o  o---o &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/LICENSE&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/aalhour/C-Sharp-Algorithms?style=flat-square&amp;amp;color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/aalhour/C-Sharp-Algorithms&#34; alt=&#34;Build&#34;&gt; &lt;img src=&#34;https://img.shields.io/travis/aalhour/C-Sharp-Algorithms?style=flat-square&amp;amp;color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/aalhour/C-Sharp-Algorithms/graphs/contributors&#34; alt=&#34;Contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/aalhour/C-Sharp-Algorithms?style=flat-square&amp;amp;color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/aalhour/C-Sharp-Algorithms/pulse&#34; alt=&#34;Activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/aalhour/C-Sharp-Algorithms?style=flat-square&amp;amp;color=blue&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;WHAT IS C# ALGORITHMS?&lt;/h3&gt; &#xA;&lt;p&gt;A plug-and-play class-library project of standard Data Structures and Algorithms, written in C#. It contains &lt;strong&gt;75+&lt;/strong&gt; Data Structures and Algorithms, designed as Object-Oriented isolated components. Even though this project started for educational purposes, the implemented Data Structures and Algorithms are standard, efficient, stable and tested.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;BACK STORY&lt;/h3&gt; &#xA;&lt;p&gt;This project originally started out as an interview preparation project. However, after receiving a great amount of positive responses on &lt;a href=&#34;https://redd.it/3etf9f&#34;&gt;reddit&lt;/a&gt;, and noticing excitement from a few &lt;a href=&#34;https://github.com/aalhour/C-Sharp-Algorithms#contributors&#34;&gt;GitHubers&lt;/a&gt; to contribute furthermore to it, the project took on a different meaning. So, I decided to keep maintaining it as a reference for data structures and algorithm implementations in C# as well as my own research side-project under these topics.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;DESCRIPTION&lt;/h3&gt; &#xA;&lt;h4&gt;Solution Hierarchy:&lt;/h4&gt; &#xA;&lt;p&gt;This is a C#.NET solution-project, and it contains three subprojects:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms&#34;&gt;Algorithms&lt;/a&gt;: A class library project. Contains the Algorithms implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures&#34;&gt;Data Structures&lt;/a&gt;: A class library project. Contains the Data Structures implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/UnitTest&#34;&gt;UnitTest&lt;/a&gt;: Unit-testing project for the Algorithms and Data Structures&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Requirements:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;.NET Core &amp;gt;= 2.0&lt;/li&gt; &#xA; &lt;li&gt;XUnit&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;A Note to Contributors:&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to contribute to C# ALGORITHMS, then please make sure you check out the &lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/.github/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;DATA STRUCTURES&lt;/h3&gt; &#xA;&lt;h4&gt;Linear:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/SkipList.cs&#34;&gt;Skip List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/ArrayList.cs&#34;&gt;Array List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/Stack.cs&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/Queue.cs&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/SLinkedList.cs&#34;&gt;Single-Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/DLinkedList.cs&#34;&gt;Double-Linked List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Circular:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Lists/CircularBuffer.cs&#34;&gt;Circular Buffer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Heaps:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Heaps/BinaryMinHeap.cs&#34;&gt;Binary-Min Heap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Heaps/BinaryMaxHeap.cs&#34;&gt;Binary-Max Heap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Heaps/BinomialMinHeap.cs&#34;&gt;Binomial-Min Heap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Priority Queues:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Heaps/MinPriorityQueue.cs&#34;&gt;Min-Priority Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Heaps/KeyedPriorityQueue.cs&#34;&gt;Key-value Priority Queue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Hashing Functions:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Hashing/PrimeHashingFamily.cs&#34;&gt;Prime Hashing Family&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Hashing/UniversalHashingFamily.cs&#34;&gt;Universal Hashing Family&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Hash Tables:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Dictionaries/ChainedHashTable.cs&#34;&gt;Chained Hash Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Dictionaries/CuckooHashTable.cs&#34;&gt;Cuckoo Hash Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Dictionaries/OpenAddressingHashTable.cs&#34;&gt;Open-Addressing Hash Table&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sorted Collections (Tree-based):&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/SortedCollections/SortedList.cs&#34;&gt;Sorted List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/SortedCollections/SortedDictionary.cs&#34;&gt;Sorted Dictionary&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Trees:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic Search Trees: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/BinarySearchTree.cs&#34;&gt;Binary Search Tree&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/BinarySearchTreeMap.cs&#34;&gt;Map version&lt;/a&gt; &lt;em&gt;(supports key-value pairing; nodes indexed by keys)&lt;/em&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/AugmentedBinarySearchTree.cs&#34;&gt;(Augmented) Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/TernarySearchTree.cs&#34;&gt;Ternary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Self-Balancing Trees: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/AVLTree.cs&#34;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/BTree.cs&#34;&gt;B-Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/RedBlackTree.cs&#34;&gt;Red-Black Tree&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/RedBlackTreeMap.cs&#34;&gt;Map version&lt;/a&gt; &lt;em&gt;(supports key-value pairing; nodes indexed by keys)&lt;/em&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Prefix Trees: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/Trie.cs&#34;&gt;Trie&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/TrieMap.cs&#34;&gt;Trie Map&lt;/a&gt; &lt;em&gt;(associative prefix tree; complete words are keys to records)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Graphs:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Undirected Graphs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/CliqueGraph.cs&#34;&gt;Clique Graphs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/UndirectedSparseGraph.cs&#34;&gt;Undirected Sparse Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/UndirectedDenseGraph.cs&#34;&gt;Undirected Dense Graph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Undirected Weighted Graphs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/UndirectedWeightedSparseGraph.cs&#34;&gt;Undirected Weighted Sparse Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/UndirectedWeightedDenseGraph.cs&#34;&gt;Undirected Weighted Dense Graph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Directed Graphs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/DirectedSparseGraph.cs&#34;&gt;Directed Sparse Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/DirectedDenseGraph.cs&#34;&gt;Directed Dense Graph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Directed Weighted Graphs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/DirectedWeightedSparseGraph.cs&#34;&gt;Directed Weighted Sparse Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Graphs/DirectedWeightedDenseGraph.cs&#34;&gt;Directed Weighted Dense Graph&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;ALGORITHMS&lt;/h3&gt; &#xA;&lt;h4&gt;Sorting:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/BubbleSorter.cs&#34;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/BucketSorter.cs&#34;&gt;Bucket Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/BinarySearchTreeSorter.cs&#34;&gt;BST Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/CombSorter.cs&#34;&gt;Comb Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/CountingSorter.cs&#34;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/CycleSorter.cs&#34;&gt;Cycle Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/GnomeSorter.cs&#34;&gt;Gnome Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/HeapSorter.cs&#34;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/InsertionSorter.cs&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/LSDRadixSorter.cs&#34;&gt;LSD Radix Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/MergeSorter.cs&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/SelectionSorter.cs&#34;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/ShellSorter.cs&#34;&gt;Shell Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/OddEvenSorter.cs&#34;&gt;OddEven Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/PigeonHoleSorter.cs&#34;&gt;PigeonHole Sort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Sorting/QuickSorter.cs&#34;&gt;Quick Sort&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Searching:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Search/BinarySearcher.cs&#34;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Graphs:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Graph Search: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/DepthFirstSearcher.cs&#34;&gt;Depth-First Searcher&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/BreadthFirstSearcher.cs&#34;&gt;Breadth-First Searcher&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Shortest Paths: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/BreadthFirstShortestPaths.cs&#34;&gt;Breadth-First SPs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/BellmanFordShortestPaths.cs&#34;&gt;Bellman-Ford SPs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/DijkstraShortestPaths.cs&#34;&gt;Dijkstra SPs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/DijkstraAllPairsShortestPaths.cs&#34;&gt;Dijkstra All-Pairs SPs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;DFS Applications: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/CyclesDetector.cs&#34;&gt;Cycles Detector&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/TopologicalSorter.cs&#34;&gt;Topological Sorter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;BFS Applications: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/ConnectedComponents.cs&#34;&gt;Connected Components&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Graphs/BipartiteColoring.cs&#34;&gt;Bipartite Graphs Coloring&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Trees:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Trees/BinaryTreeRecursiveWalker.cs&#34;&gt;Recursive Binary Tree Walker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Methods: PrintAll, ForEach, Contains and BinarySearch. Traversal Modes: Preorder, Inorder &amp;amp; Postorder&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Strings:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Strings/Permutations.cs&#34;&gt;Permutations and Anagrams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Strings/EditDistance.cs&#34;&gt;Edit Distance&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses a generic custom class for passing costs: &lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Strings/EditDistanceCostsMap.cs&#34;&gt;EditDistanceCostsMap&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Numeric:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Numeric/BinomialCoefficients.cs&#34;&gt;Binomial Coefficients&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Numeric/CatalanNumbers.cs&#34;&gt;Catalan Numbers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/Algorithms/Numeric/GreatestCommonDivisor.cs&#34;&gt;Greatest Common Divisor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Visualization:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/DataStructures/Trees/TreeDrawer.cs&#34;&gt;Tree Drawer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;CONTRIBUTORS&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/aalhour/C-Sharp-Algorithms/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.firebaseapp.com/image?repo=aalhour/C-Sharp-Algorithms&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- Made with [contributors-img](https://contributors-img.firebaseapp.com). --&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/aalhour/C-Sharp-Algorithms/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>