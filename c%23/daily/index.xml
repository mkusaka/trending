<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-27T01:32:40Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sipsorcery-org/sipsorcery</title>
    <updated>2022-08-27T01:32:40Z</updated>
    <id>tag:github.com,2022-08-27:/sipsorcery-org/sipsorcery</id>
    <link href="https://github.com/sipsorcery-org/sipsorcery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A WebRTC, SIP and VoIP library for C# and .NET. Designed for real-time communications apps.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CI&lt;/th&gt; &#xA;   &lt;th&gt;win-x64&lt;/th&gt; &#xA;   &lt;th&gt;linux-x64&lt;/th&gt; &#xA;   &lt;th&gt;osx-x64&lt;/th&gt; &#xA;   &lt;th&gt;Examples &lt;br&gt; (win-x64)&lt;/th&gt; &#xA;   &lt;th&gt;Softphone &lt;br&gt; (win-x64)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;sup&gt;AppVeyor&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sipsorcery/sipsorcery/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/1prvhq7jyw0s5fb1/branch/master?svg=true&amp;amp;passingText=ok&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sipsorcery/sipsorcery-5aavr/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/cark9l28ovb8o886/branch/master?svg=true&amp;amp;passingText=ok&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sipsorcery/sipsorcery-jyl3x/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/7mrg69mtolwceplg/branch/master?svg=true&amp;amp;passingText=ok&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sipsorcery/sipsorcery-mre1o/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/4myf11mda0p69ysm/branch/master?svg=true&amp;amp;passingText=ok&#34; alt=&#34;Examples build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sipsorcery/sipsorcery-0p6s4/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/xx1bcttkk4gbrd3y/branch/master?svg=true&amp;amp;passingText=ok&#34; alt=&#34;Softphone build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;sup&gt;GitHub Actions&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/sipsorcery-org/sipsorcery/workflows/win-x64/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/sipsorcery-org/sipsorcery/workflows/linux-x64/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/sipsorcery-org/sipsorcery/workflows/osx-x64/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/sipsorcery-org/sipsorcery/workflows/egs-win-x64/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;sup&gt;Azure DevOps&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/aaronrc/SIPSorcery/_build/latest?definitionId=3&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/aaronrc/SIPSorcery/_apis/build/status/sipsorcery.sipsorcery?branchName=master&amp;amp;jobName=Job&amp;amp;configuration=Job%20windows&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/aaronrc/SIPSorcery/_build/latest?definitionId=3&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/aaronrc/SIPSorcery/_apis/build/status/sipsorcery.sipsorcery?branchName=master&amp;amp;jobName=Job&amp;amp;configuration=Job%20linux&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/aaronrc/SIPSorcery/_build/latest?definitionId=3&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/aaronrc/SIPSorcery/_apis/build/status/sipsorcery.sipsorcery?branchName=master&amp;amp;jobName=Job&amp;amp;configuration=Job%20mac&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;What Is It?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This fully C# library can be used to add Real-time Communications, typically audio and video calls, to .NET applications.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The diagram below is a high level overview of a Real-time audio and video call between Alice and Bob. It illustrates where the &lt;code&gt;SIPSorcery&lt;/code&gt; and associated libraries can help.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sipsorcery-org/sipsorcery/master/img/sipsorcery_realtime_overview.png&#34; alt=&#34;Real-time Communications Overview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supports both VoIP (&lt;a href=&#34;https://raw.githubusercontent.com/sipsorcery-org/sipsorcery/master/#getting-started-voip&#34;&gt;get started&lt;/a&gt;) and WebRTC (&lt;a href=&#34;https://raw.githubusercontent.com/sipsorcery-org/sipsorcery/master/#getting-started-webrtc&#34;&gt;get started&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some of the protocols supported:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Session Initiation Protocol &lt;a href=&#34;https://tools.ietf.org/html/rfc3261&#34;&gt;(SIP)&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Real-time Transport Protocol &lt;a href=&#34;https://tools.ietf.org/html/rfc3550&#34;&gt;(RTP)&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Web Real-time Communications &lt;a href=&#34;https://www.w3.org/TR/webrtc/&#34;&gt;(WebRTC)&lt;/a&gt;, &lt;strong&gt;as of 26 Jan 2021 now an official IETF and W3C specification&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Interactive Connectivity Establishment &lt;a href=&#34;https://tools.ietf.org/html/rfc8445&#34;&gt;(ICE)&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;SCTP, SDP, STUN and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Media End Points - Audio/Video Sinks and Sources:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The main &lt;code&gt;SIPSorcery&lt;/code&gt; library does not provide access to audio and video devices or native codecs. Providing cross platform access to to these features on top of .NET is a large undertaking. A number of separate demonstration libraries show some different approaches to accessing audio/video devices and wrapping codecs with .NET.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sipsorcery-org/SIPSorceryMedia.Windows&#34;&gt;SIPSorceryMedia.Windows&lt;/a&gt;: An example of a Windows specific library that provides audio capture and playback.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sipsorcery-org/SIPSorceryMedia.Encoders&#34;&gt;SIPSorceryMedia.Encoders&lt;/a&gt;: An example of a Windows specific wrapper for the &lt;a href=&#34;https://www.webmproject.org/&#34;&gt;VP8&lt;/a&gt; video codec.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/sipsorcery-org/SIPSorceryMedia.FFmpeg&#34;&gt;SIPSorceryMedia.FFmpeg&lt;/a&gt;: An example of a cross platform library that features audio and video codecs using PInvoke and &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Others: &lt;strong&gt;Contributions welcome&lt;/strong&gt;. Frequently requested are Xamarin Forms on Android/iOS and Unix (Linux and/or Mac). New implementations need to implement one or more of the Audio Sink/Source and/or Video Sink/Source interfaces from &lt;a href=&#34;https://github.com/sipsorcery-org/SIPSorceryMedia.Abstractions/raw/master/src/MediaEndPoints.cs&#34;&gt;SIPSorceryMedia.Abstractions&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This library provides only a small number of audio and video codecs (G711 and G722). Additional codecs, particularly video ones, require C or C++ libraries. An effort is underway to port the &lt;a href=&#34;https://www.webmproject.org/&#34;&gt;VP8&lt;/a&gt; video codec to C# see &lt;a href=&#34;https://github.com/sipsorcery-org/VP8.Net&#34;&gt;VP8.Net&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The library is compliant with .NET Standard 2.0 (encompassing .NET Core 2.0+), .NET Framework 4.6.1 (theoretically also encompassed by &lt;code&gt;netstandard2.0&lt;/code&gt; but set as an explicit target due to compatibility issues between the two), .NET 5 and .NET 6. The demo applications mainly target .NET Core 3.1 with newer ones targeting .NET 5 or 6. The library is available via NuGet.&lt;/p&gt; &#xA;&lt;p&gt;For .NET Core and .NET 5 &amp;amp; 6:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package SIPSorcery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With Visual Studio Package Manager Console (or search for &lt;a href=&#34;https://www.nuget.org/packages/SIPSorcery/&#34;&gt;SIPSorcery on NuGet&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;Install-Package SIPSorcery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Class reference documentation and articles explaining common usage are available at &lt;a href=&#34;https://sipsorcery-org.github.io/sipsorcery/&#34;&gt;https://sipsorcery-org.github.io/sipsorcery/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;A free SIP account for GitHub users that can be used for SIP and WebRTC testing is available at &lt;a href=&#34;https://sipsorcery.cloud&#34;&gt;sipsorcery.cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For WebRTC testing the &lt;a href=&#34;https://github.com/sipsorcery/webrtc-echoes&#34;&gt;webrtc-echoes&lt;/a&gt; project has a number of basic WebRTC implementations in different libraries. It includes a set of &lt;a href=&#34;https://github.com/sipsorcery?tab=packages&#34;&gt;docker images&lt;/a&gt; which can be useful for testing during WebRTC application development.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started VoIP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note, the examples below have been updated for .NET 6. They can be made to work with .NET 5 and .NET Core but will require some adjustments to the instructions below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The simplest possible example to place an audio-only SIP call is shown below. This example relies on the Windows specific &lt;code&gt;SIPSorceryMedia.Windows&lt;/code&gt; library to play the received audio and only works on Windows (due to lack of .NET audio device support on non-Windows platforms).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet new console --name SIPGetStarted --framework net6.0 --target-framework-override net6.0-windows10.0.22000&#xA;cd SIPGetStarted&#xA;dotnet add package SIPSorcery&#xA;dotnet add package SIPSorceryMedia.Windows --prerelease&#xA;# Paste the code below into Program.cs.&#xA;dotnet run&#xA;# If successful you will hear a &#34;Hello World&#34; announcement.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string DESTINATION = &#34;helloworld@sipsorcery.cloud&#34;;&#xA;        &#xA;Console.WriteLine(&#34;SIP Get Started&#34;);&#xA;&#xA;var userAgent = new SIPSorcery.SIP.App.SIPUserAgent();&#xA;var winAudio = new SIPSorceryMedia.Windows.WindowsAudioEndPoint(new SIPSorcery.Media.AudioEncoder());&#xA;var voipMediaSession = new SIPSorcery.Media.VoIPMediaSession(winAudio.ToMediaEndPoints());&#xA;&#xA;// Place the call and wait for the result.&#xA;bool callResult = await userAgent.Call(DESTINATION, null, null, voipMediaSession);&#xA;Console.WriteLine($&#34;Call result {(callResult ? &#34;success&#34; : &#34;failure&#34;)}.&#34;);&#xA;&#xA;Console.WriteLine(&#34;Press any key to hangup and exit.&#34;);&#xA;Console.ReadLine();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/SIPExamples/GetStarted&#34;&gt;GetStarted&lt;/a&gt; example contains the full source and project file for the example above.&lt;/p&gt; &#xA;&lt;p&gt;The three key classes in the above example are described in dedicated articles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sipsorcery-org.github.io/sipsorcery/articles/transport.html&#34;&gt;SIPTransport&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sipsorcery-org.github.io/sipsorcery/articles/sipuseragent.html&#34;&gt;SIPUserAgent&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sipsorcery-org.github.io/sipsorcery/articles/rtpsession.html&#34;&gt;RTPSession&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/SIPExamples&#34;&gt;examples folder&lt;/a&gt; contains sample code to demonstrate other common SIP/VoIP cases.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started WebRTC&lt;/h2&gt; &#xA;&lt;p&gt;The WebRTC specifications do not include directions about how signaling should be done (for VoIP the signaling protocol is SIP; WebRTC has no equivalent). The example below uses a simple JSON message exchange over web sockets for signaling. Part of the reason the &lt;code&gt;Getting Started WebRTC&lt;/code&gt; is longer than the &lt;code&gt;Getting Started VoIP&lt;/code&gt; example is the need for custom signaling.&lt;/p&gt; &#xA;&lt;p&gt;The example requires two steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;dotnet&lt;/code&gt; console application,&lt;/li&gt; &#xA; &lt;li&gt;Open an HTML page in a browser on the same machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The full project file and code are available at &lt;a href=&#34;https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/WebRTCExamples/WebRTCGetStarted&#34;&gt;WebRTC Get Started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The example relies on the Windows specific &lt;code&gt;SIPSorceryMedia.Encoders&lt;/code&gt; package, which is mainly a wrapper around &lt;a href=&#34;https://chromium.googlesource.com/webm/libvpx&#34;&gt;libvpx&lt;/a&gt;. Hopefully in the future there will be equivalent packages for other platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet new console --name WebRTCGetStarted&#xA;cd WebRTCGetStarted&#xA;dotnet add package SIPSorcery&#xA;dotnet add package SIPSorceryMedia.Encoders --prerelease&#xA;# Paste the code below into Program.cs.&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;using System.Linq;&#xA;using System.Net;&#xA;using System.Threading.Tasks;&#xA;using SIPSorcery.Media;&#xA;using SIPSorcery.Net;&#xA;using SIPSorceryMedia.Encoders;&#xA;using WebSocketSharp.Server;&#xA;&#xA;namespace demo&#xA;{&#xA;    class Program&#xA;    {&#xA;        private const int WEBSOCKET_PORT = 8081;&#xA;&#xA;        static void Main()&#xA;        {&#xA;            Console.WriteLine(&#34;WebRTC Get Started&#34;);&#xA;&#xA;            // Start web socket.&#xA;            Console.WriteLine(&#34;Starting web socket server...&#34;);&#xA;            var webSocketServer = new WebSocketServer(IPAddress.Any, WEBSOCKET_PORT);&#xA;            webSocketServer.AddWebSocketService&amp;lt;WebRTCWebSocketPeer&amp;gt;(&#34;/&#34;, (peer) =&amp;gt; peer.CreatePeerConnection = () =&amp;gt; CreatePeerConnection());&#xA;            webSocketServer.Start();&#xA;&#xA;            Console.WriteLine($&#34;Waiting for web socket connections on {webSocketServer.Address}:{webSocketServer.Port}...&#34;);&#xA;            &#xA;            Console.WriteLine(&#34;Press any key exit.&#34;);&#xA;            Console.ReadLine();&#xA;        }&#xA;&#xA;        private static Task&amp;lt;RTCPeerConnection&amp;gt; CreatePeerConnection()&#xA;        {&#xA;            var pc = new RTCPeerConnection(null);&#xA;&#xA;            var testPatternSource = new VideoTestPatternSource(new VpxVideoEncoder());&#xA;&#xA;            MediaStreamTrack videoTrack = new MediaStreamTrack(testPatternSource.GetVideoSourceFormats(), MediaStreamStatusEnum.SendOnly);&#xA;            pc.addTrack(videoTrack);&#xA;&#xA;            testPatternSource.OnVideoSourceEncodedSample += pc.SendVideo;&#xA;            pc.OnVideoFormatsNegotiated += (formats) =&amp;gt; testPatternSource.SetVideoSourceFormat(formats.First());&#xA;&#xA;            pc.onconnectionstatechange += async (state) =&amp;gt;&#xA;            {&#xA;                Console.WriteLine($&#34;Peer connection state change to {state}.&#34;);&#xA;&#xA;                switch(state)&#xA;                {&#xA;                    case RTCPeerConnectionState.connected:&#xA;                        await testPatternSource.StartVideo();&#xA;                        break;&#xA;                    case RTCPeerConnectionState.failed:&#xA;                        pc.Close(&#34;ice disconnection&#34;);&#xA;                        break;&#xA;                    case RTCPeerConnectionState.closed:&#xA;                        await testPatternSource.CloseVideo();&#xA;                        testPatternSource.Dispose();&#xA;                        break;&#xA;                }&#xA;            };&#xA;&#xA;            return Task.FromResult(pc);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create an HTML file, paste the contents below into it, open it in a browser that supports WebRTC and finally press the &lt;code&gt;start&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;script type=&#34;text/javascript&#34;&amp;gt;&#xA;        const WEBSOCKET_URL = &#34;ws://127.0.0.1:8081/&#34;&#xA;&#xA;        var pc, ws;&#xA;&#xA;        async function start() {&#xA;            pc = new RTCPeerConnection();&#xA;&#xA;            pc.ontrack = evt =&amp;gt; document.querySelector(&#39;#videoCtl&#39;).srcObject = evt.streams[0];&#xA;            pc.onicecandidate = evt =&amp;gt; evt.candidate &amp;amp;&amp;amp; ws.send(JSON.stringify(evt.candidate));&#xA;&#xA;            ws = new WebSocket(document.querySelector(&#39;#websockurl&#39;).value, []);&#xA;            ws.onmessage = async function (evt) {&#xA;                var obj = JSON.parse(evt.data);&#xA;                if (obj?.candidate) {&#xA;                    pc.addIceCandidate(obj);&#xA;                }&#xA;                else if (obj?.sdp) {&#xA;                    await pc.setRemoteDescription(new RTCSessionDescription(obj));&#xA;                    pc.createAnswer()&#xA;                        .then((answer) =&amp;gt; pc.setLocalDescription(answer))&#xA;                        .then(() =&amp;gt; ws.send(JSON.stringify(pc.localDescription)));&#xA;                }&#xA;            };&#xA;        };&#xA;&#xA;        async function closePeer() {&#xA;            await pc?.close();&#xA;            await ws?.close();&#xA;        };&#xA;&#xA;    &amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&#xA;    &amp;lt;video controls autoplay=&#34;autoplay&#34; id=&#34;videoCtl&#34; width=&#34;640&#34; height=&#34;480&#34;&amp;gt;&amp;lt;/video&amp;gt;&#xA;&#xA;    &amp;lt;div&amp;gt;&#xA;        &amp;lt;input type=&#34;text&#34; id=&#34;websockurl&#34; size=&#34;40&#34; /&amp;gt;&#xA;        &amp;lt;button type=&#34;button&#34; class=&#34;btn btn-success&#34; onclick=&#34;start();&#34;&amp;gt;Start&amp;lt;/button&amp;gt;&#xA;        &amp;lt;button type=&#34;button&#34; class=&#34;btn btn-success&#34; onclick=&#34;closePeer();&#34;&amp;gt;Close&amp;lt;/button&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;/body&amp;gt;&#xA;&#xA;&amp;lt;script&amp;gt;&#xA;    document.querySelector(&#39;#websockurl&#39;).value = WEBSOCKET_URL;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If successful the browser should display a test pattern image.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/sipsorcery-org/sipsorcery/tree/master/examples/WebRTCExamples&#34;&gt;examples folder&lt;/a&gt; contains sample code to demonstrate other common WebRTC cases.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FastEndpoints/Library</title>
    <updated>2022-08-27T01:32:40Z</updated>
    <id>tag:github.com,2022-08-27:/FastEndpoints/Library</id>
    <link href="https://github.com/FastEndpoints/Library" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light-weight REST API development framework for ASP.Net 6 and newer.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dj-nitehawk/FastEndpoints/raw/master/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dj-nitehawk/FastEndpoints?color=blue&amp;amp;label=license&amp;amp;logo=Github&amp;amp;style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FastEndpoints&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/FastEndpoints?label=version&amp;amp;logo=NuGet&amp;amp;style=flat-square&#34; alt=&#34;nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/RyanGunner/FastEndpoints/_build/latest?definitionId=6&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/tests/RyanGunner/FastEndpoints/6?color=blue&amp;amp;label=tests&amp;amp;logo=Azure%20DevOps&amp;amp;style=flat-square&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FastEndpoints&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/FastEndpoints?color=blue&amp;amp;label=downloads&amp;amp;logo=NuGet&amp;amp;style=flat-square&#34; alt=&#34;nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/yQZ4uvfF2E&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/933662816458645504?color=blue&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;em&gt;ASP.NET Minimal APIs Made Easy...&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;FastEndpoints&lt;/strong&gt; is a developer friendly alternative to Minimal APIs &amp;amp; MVC&lt;/h2&gt; &#xA;&lt;p&gt;It nudges you towards the &lt;strong&gt;&lt;a href=&#34;https://deviq.com/design-patterns/repr-design-pattern&#34;&gt;REPR Design Pattern (Request-Endpoint-Response)&lt;/a&gt;&lt;/strong&gt; for convenient &amp;amp; maintainable endpoint creation with virtually no boilerplate.&lt;/p&gt; &#xA;&lt;p&gt;Performance is on par with Minimal APIs. It&#39;s faster, uses less memory and does around &lt;strong&gt;&lt;a href=&#34;https://fast-endpoints.com/benchmarks&#34;&gt;45k more requests per second&lt;/a&gt;&lt;/strong&gt; than a MVC Controller in our benchmarks.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation: &lt;a href=&#34;https://fast-endpoints.com&#34;&gt;https://fast-endpoints.com&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Please visit the official website for detailed documentation...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>focus-creative-games/hybridclr_trial</title>
    <updated>2022-08-27T01:32:40Z</updated>
    <id>tag:github.com,2022-08-27:/focus-creative-games/hybridclr_trial</id>
    <link href="https://github.com/focus-creative-games/hybridclr_trial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HybridCLR 示例项目&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HybridCLR 体验项目&lt;/h1&gt; &#xA;&lt;p&gt;一个示例热更新项目。&lt;/p&gt; &#xA;&lt;p&gt;想了解更多，请加 QQ群:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HybridCLR c#热更新 开发交流群：651188171&lt;/li&gt; &#xA; &lt;li&gt;HybridCLR 新手群：428404198&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你可以使用发布的包来体验HybridCLR热更新功能。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;示例项目使用 Unity 2020.3.33(任意后缀子版本如f1、f1c1、f1c2都可以) 版本&lt;/strong&gt;，2020.3.x系列都可以，但为了避免新手无谓的出错，尽量使用对应版本。&lt;/p&gt; &#xA;&lt;h2&gt;目录介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assets Unity项目目录 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Main AOT主包模块&lt;/li&gt; &#xA;   &lt;li&gt;Hotfix 热更新模块&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HybridCLRData 包含HybridCLR的il2cpp本地安装目录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用介绍&lt;/h2&gt; &#xA;&lt;p&gt;HybridCLR为c++实现，只有打包后才可使用。日常开发在编辑器下，无需打包。&lt;/p&gt; &#xA;&lt;p&gt;如何打包出一个可热更新的包，请先参阅 &lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/start_up/&#34;&gt;快速开始&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;运行流程&lt;/h3&gt; &#xA;&lt;p&gt;本示例演示了如下几部分内容&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;将dll和资源打包成ab&lt;/li&gt; &#xA; &lt;li&gt;多热更新dll，并且按依赖顺序加载它们&lt;/li&gt; &#xA; &lt;li&gt;热更新脚本挂载到热更新资源中，并且正常运行&lt;/li&gt; &#xA; &lt;li&gt;直接反射运行普通热更新函数App::Main&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;进入场景后，Main场景中的LoadDll会按顺序加载StreamingAssets目录下common AssetBundle里的HotFix.dll和HotFix2.dll，其中HotFix2.dll依赖HotFix.dll。 接着运行HotFix2.dll里的App::Main函数。&lt;/p&gt; &#xA;&lt;p&gt;注意！多热更新dll不是必须的！大多数项目完全可以只有HotFix.dll这一个热更新模块。纯粹出于演示才故意设计了两个热更新模块。&lt;/p&gt; &#xA;&lt;h3&gt;体验热更新&lt;/h3&gt; &#xA;&lt;h4&gt;预备工作&lt;/h4&gt; &#xA;&lt;p&gt;根据你所使用的Unity年度版本，&lt;strong&gt;还需要额外&lt;/strong&gt;安装2020.3.33或者2021.3.1版本，不限 f1、f1c1之类后缀。&lt;/p&gt; &#xA;&lt;p&gt;**注意！**对于需要打iOS版本的开发者，由于HybridCLR需要裁减后的AOT dll，但Unity Editor未提供公开接口可以复制出target为iOS 时的AOT dll，故必须使用修改后的UnityEditor.CoreModule.dll覆盖Unity自带的相应文件。&lt;/p&gt; &#xA;&lt;p&gt;具体操作为将 &lt;code&gt;HybridCLRData/ModifiedUnityAssemblies/2021.3.1/UnityEditor.CoreModule-{Win,Mac}.dll&lt;/code&gt; 覆盖 &lt;code&gt;{Editor安装目录}/Editor/Data/Managed/UnityEngine/UnityEditor.CoreModule&lt;/code&gt;，具体覆盖目录有可能因为操作系统或者Unity版本而有不同。&lt;/p&gt; &#xA;&lt;p&gt;这个 UnityEditor.CoreModule.dll 每个Unity小版本都不相同，我们目前暂时只提供了2021.3.1版本，如需其他版本请自己手动制作，详情请见 &lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/modify_unity_dll/&#34;&gt;修改UnityEditor.CoreModule.dll&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;以Win64为例，其他平台同理。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装HybridCLR （安装HybridCLR的原理请看 &lt;a href=&#34;https://focus-creative-games.github.io/hybridclr/start_up/&#34;&gt;快速上手&lt;/a&gt;） &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;需要已经安装 2020.3.33或2021.3.1（根据你的Unity大版本），不限 f1、f1c1之类后缀&lt;/li&gt; &#xA;   &lt;li&gt;点击菜单 &lt;code&gt;HybridCLR/Install&lt;/code&gt;，弹出安装界面&lt;/li&gt; &#xA;   &lt;li&gt;如果安装界面没有错误或者警告，则说明il2cpp路径设置正常，否则需要你手动选择正确的il2cpp目录&lt;/li&gt; &#xA;   &lt;li&gt;点击 install 按钮完成安装&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;打包主工程 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;请确保你已经掌握了常规的il2cpp为backend的打包过程&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;请确保你已经在你电脑上对于一个未使用HybrildCLR的项目成功打包出il2cpp为backend的相应包&lt;/strong&gt;，也就是打包环境是正常的！&lt;/li&gt; &#xA;   &lt;li&gt;菜单 HybridCLR/Build/Win64 ，运行完成后，会在Release_Win64目录下生成程序&lt;/li&gt; &#xA;   &lt;li&gt;运行Release_Win64/HybridCLRTrial.exe，会看到打出 hello, HybridCLR.prefab&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;更新ab包 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;修改HotFix项目的PrintHello代码，比如改成打印 &#34;hello,world&#34;。&lt;/li&gt; &#xA;   &lt;li&gt;运行菜单 HybridCLR/BuildBundles/Win64，重新生成ab&lt;/li&gt; &#xA;   &lt;li&gt;将StreamingAssets下的ab包复制到Release_Win64\HybridCLRTrial_Data\StreamingAssets。&lt;/li&gt; &#xA;   &lt;li&gt;再将运行，屏幕上会打印&#34;hello,world&#34;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;剩下的体验之旅，比如各种c#特性，自己体验吧。&lt;/p&gt;</summary>
  </entry>
</feed>