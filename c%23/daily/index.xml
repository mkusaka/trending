<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-29T01:27:21Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ph4nt0mbyt3/Darkside</title>
    <updated>2023-11-29T01:27:21Z</updated>
    <id>tag:github.com,2023-11-29:/ph4nt0mbyt3/Darkside</id>
    <link href="https://github.com/ph4nt0mbyt3/Darkside" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# AV/EDR Killer using less-known driver (BYOVD)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Darkside&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ph4nt0mbyt3/Darkside/assets/137841478/afb2bed5-0cf2-427a-9002-f88ff01eecf0&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a C# AV/EDR Killer using Rogue Anti-Malware Driver 3.3. This driver is not present in the loldrivers or Windows blocklist at the time of this writing. The only reason I&#39;m making this public is because the company has already published a fix in version 3.4, and Microsoft will likely block this driver soon. This driver can be used in Windows 23H2 with HVCI enabled, loldrivers blocklist, or WDAC enabled. HVCI is designed to ensure the integrity of code executed in the kernel, but it cannot protect against all possible vulnerabilities or actions that can be performed through drivers or system interfaces.&lt;/p&gt; &#xA;&lt;h1&gt;Steps&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load and start the driver:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sc create TrueSight binPath=&#34;c:\path\to\truesight.sys&#34; type= kernel start= demand&#xA;sc start TrueSight&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start Darkside&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Darkside.exe -p PID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Recommendations&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Block this driver through WDAC or wait till Microsoft do it (at your own risk)&lt;/li&gt; &#xA; &lt;li&gt;Limit local privileges, audit and prevent privesc attacks.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>emberstack/kubernetes-reflector</title>
    <updated>2023-11-29T01:27:21Z</updated>
    <id>tag:github.com,2023-11-29:/emberstack/kubernetes-reflector</id>
    <link href="https://github.com/emberstack/kubernetes-reflector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom Kubernetes controller that can be used to replicate secrets, configmaps and certificates.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reflector&lt;/h1&gt; &#xA;&lt;p&gt;Reflector is a Kubernetes addon designed to monitor changes to resources (secrets and configmaps) and reflect changes to mirror resources in the same or other namespaces.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emberstack/kubernetes-reflector/actions/workflows/pipeline.yaml&#34;&gt;&lt;img src=&#34;https://github.com/emberstack/kubernetes-reflector/actions/workflows/pipeline.yaml/badge.svg?sanitize=true&#34; alt=&#34;Pipeline&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emberstack/kubernetes-reflector/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/emberstack/kubernetes-reflector.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/emberstack/kubernetes-reflector&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/emberstack/kubernetes-reflector/latest?style=flat-square&#34; alt=&#34;Docker Image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/emberstack/kubernetes-reflector&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/emberstack/kubernetes-reflector?style=flat-square&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/emberstack/kubernetes-reflector/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/emberstack/kubernetes-reflector.svg?style=flat-square&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Supports &lt;code&gt;amd64&lt;/code&gt;, &lt;code&gt;arm&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need help or found a bug, please feel free to open an Issue on GitHub (&lt;a href=&#34;https://github.com/emberstack/kubernetes-reflector/issues&#34;&gt;https://github.com/emberstack/kubernetes-reflector/issues&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;Reflector can be deployed either manually or using Helm (recommended).&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kubernetes 1.14+&lt;/li&gt; &#xA; &lt;li&gt;Helm 3 (if deployed using Helm)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Deployment using Helm&lt;/h4&gt; &#xA;&lt;p&gt;Use Helm to install the latest released chart:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ helm repo add emberstack https://emberstack.github.io/helm-charts&#xA;$ helm repo update&#xA;$ helm upgrade --install reflector emberstack/reflector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the values of the helm deployment by using the following Values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nameOverride&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Overrides release name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fullnameOverride&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Overrides release fullname&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image.repository&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Container image repository&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emberstack/kubernetes-reflector&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image.tag&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Container image tag&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Same as chart version&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image.pullPolicy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Container image pull policy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IfNotPresent&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;configuration.logging.minimumLevel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logging minimum level&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Information&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;configuration.watcher.timeout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maximum watcher lifetime in seconds&lt;/td&gt; &#xA;   &lt;td&gt;``&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;configuration.kubernetes.skipTlsVerify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skip TLS verify when connecting the the cluster&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rbac.enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create and use RBAC resources&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;serviceAccount.create&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create ServiceAccount&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;serviceAccount.name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ServiceAccount name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;release name&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;livenessProbe.initialDelaySeconds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;livenessProbe&lt;/code&gt; initial delay&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;livenessProbe.periodSeconds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;livenessProbe&lt;/code&gt; period&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;readinessProbe.initialDelaySeconds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;readinessProbe&lt;/code&gt; initial delay&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;readinessProbe.periodSeconds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;readinessProbe&lt;/code&gt; period&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;startupProbe.failureThreshold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;startupProbe&lt;/code&gt; failure threshold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;startupProbe.periodSeconds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;startupProbe&lt;/code&gt; period&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resource limits&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nodeSelector&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Node labels for pod assignment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tolerations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toleration labels for pod assignment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;affinity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Node affinity for pod assignment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;priorityClassName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;priorityClassName&lt;/code&gt; for pods&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Find us on &lt;a href=&#34;https://artifacthub.io/packages/helm/emberstack/reflector&#34;&gt;Artifact Hub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Manual deployment&lt;/h4&gt; &#xA;&lt;p&gt;Each release (found on the &lt;a href=&#34;https://github.com/emberstack/kubernetes-reflector/releases&#34;&gt;Releases&lt;/a&gt; GitHub page) contains the manual deployment file (&lt;code&gt;reflector.yaml&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shellsession&#34;&gt;$ kubectl -n kube-system apply -f https://github.com/emberstack/kubernetes-reflector/releases/latest/download/reflector.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Annotate the source &lt;code&gt;secret&lt;/code&gt; or &lt;code&gt;configmap&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;reflector.v1.k8s.emberstack.com/reflection-allowed: &#34;true&#34;&lt;/code&gt; to the resource annotations to permit reflection to mirrors.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: &#34;&amp;lt;list&amp;gt;&#34;&lt;/code&gt; to the resource annotations to permit reflection from only the list of comma separated namespaces or regular expressions. Note: If this annotation is omitted or is empty, all namespaces are allowed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Automatic mirror creation:&lt;/h4&gt; &#xA;&lt;p&gt;Reflector can create mirrors with the same name in other namespaces automatically. The following annotations control if and how the mirrors are created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;reflector.v1.k8s.emberstack.com/reflection-auto-enabled: &#34;true&#34;&lt;/code&gt; to the resource annotations to automatically create mirrors in other namespaces. Note: Requires &lt;code&gt;reflector.v1.k8s.emberstack.com/reflection-allowed&lt;/code&gt; to be &lt;code&gt;true&lt;/code&gt; since mirrors need to able to reflect the source.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: &#34;&amp;lt;list&amp;gt;&#34;&lt;/code&gt; to the resource annotations specify in which namespaces to automatically create mirrors. Note: If this annotation is omitted or is empty, all namespaces are allowed. Namespaces in this list will also be checked by &lt;code&gt;reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces&lt;/code&gt; since mirrors need to be in namespaces from where reflection is permitted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: If the &lt;code&gt;source&lt;/code&gt; is deleted, automatic mirrors are deleted. Also if either reflection or automirroring is turned off or the automatic mirror&#39;s namespace is no longer a valid match for the allowed namespaces, the automatic mirror is deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: Reflector will skip any conflicting resource when creating auto-mirrors. If there is already a resource with the source&#39;s name in a namespace where an automatic mirror is to be created, that namespace is skipped and logged as a warning.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Example source secret:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1&#xA;kind: Secret&#xA;metadata:&#xA; name: source-secret&#xA; annotations:&#xA;   reflector.v1.k8s.emberstack.com/reflection-allowed: &#34;true&#34;&#xA;   reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: &#34;namespace-1,namespace-2,namespace-[0-9]*&#34;&#xA;data:&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example source configmap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1&#xA;kind: ConfigMap&#xA;metadata:&#xA; name: source-config-map&#xA; annotations:&#xA;   reflector.v1.k8s.emberstack.com/reflection-allowed: &#34;true&#34;&#xA;   reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: &#34;namespace-1,namespace-2,namespace-[0-9]*&#34;&#xA;data:&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Annotate the mirror secret or configmap&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;reflector.v1.k8s.emberstack.com/reflects: &#34;&amp;lt;source namespace&amp;gt;/&amp;lt;source name&amp;gt;&#34;&lt;/code&gt; to the mirror object. The value of the annotation is the full name of the source object in &lt;code&gt;namespace/name&lt;/code&gt; format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Add &lt;code&gt;reflector.v1.k8s.emberstack.com/reflected-version: &#34;&#34;&lt;/code&gt; to the resource annotations when doing any manual changes to the mirror (for example when deploying with &lt;code&gt;helm&lt;/code&gt; or re-applying the deployment script). This will reset the reflected version of the mirror.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Example mirror secret:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1&#xA;kind: Secret&#xA;metadata:&#xA; name: mirror-secret&#xA; annotations:&#xA;   reflector.v1.k8s.emberstack.com/reflects: &#34;default/source-secret&#34;&#xA;data:&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example mirror configmap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1&#xA;kind: ConfigMap&#xA;metadata:&#xA; name: mirror-config-map&#xA; annotations:&#xA;   reflector.v1.k8s.emberstack.com/reflects: &#34;default/source-config-map&#34;&#xA;data:&#xA; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Done!&lt;/h3&gt; &#xA;&lt;p&gt;Reflector will monitor any changes done to the source objects and copy the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; for secrets&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; and &lt;code&gt;binaryData&lt;/code&gt; for configmaps Reflector keeps track of what was copied by annotating mirrors with the source object version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;code&gt;cert-manager&lt;/code&gt; support&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Since version 1.5 of cert-manager you can annotate secrets created from certificates for mirroring using &lt;code&gt;secretTemplate&lt;/code&gt; (see &lt;a href=&#34;https://cert-manager.io/docs/usage/certificate/&#34;&gt;https://cert-manager.io/docs/usage/certificate/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;apiVersion: cert-manager.io/v1&#xA;kind: Certificate&#xA;...&#xA;spec:&#xA;  secretTemplate:&#xA;    annotations:&#xA;      reflector.v1.k8s.emberstack.com/reflection-allowed: &#34;true&#34;&#xA;      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: &#34;&#34;&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>AutoFixture/AutoFixture</title>
    <updated>2023-11-29T01:27:21Z</updated>
    <id>tag:github.com,2023-11-29:/AutoFixture/AutoFixture</id>
    <link href="https://github.com/AutoFixture/AutoFixture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AutoFixture is an open source library for .NET designed to minimize the &#39;Arrange&#39; phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AutoFixture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/LICENCE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/AutoFixture/autofixture/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/qlmobf6rt05pmt7e/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/AutoFixture&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.myget.org/gallery/autofixture&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/autofixture?label=myget&#34; alt=&#34;MyGet (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/AutoFixture&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/AutoFixture?label=%40AutoFixture&#34; alt=&#34;AutoFixture&#34; align=&#34;right&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Write maintainable unit tests, faster.&lt;/p&gt; &#xA;&lt;p&gt;AutoFixture makes it easier for developers to do Test-Driven Development by automating non-relevant Test Fixture Setup, allowing the Test Developer to focus on the essentials of each test case.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/AutoFixture/AutoFixture/wiki/Who-uses-AutoFixture&#34;&gt;testimonials&lt;/a&gt; to see what other people have to say about AutoFixture.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/#downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/#feedback--questions&#34;&gt;Feedback &amp;amp; Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;(Jump straight to the &lt;a href=&#34;https://github.com/AutoFixture/AutoFixture/wiki/Cheat-Sheet&#34;&gt;CheatSheet&lt;/a&gt; if you just want to see some code samples right away.)&lt;/p&gt; &#xA;&lt;p&gt;AutoFixture is designed to make Test-Driven Development more productive and unit tests more refactoring-safe. It does so by removing the need for hand-coding anonymous variables as part of a test&#39;s Fixture Setup phase. Among other features, it offers a generic implementation of the &lt;a href=&#34;http://www.natpryce.com/articles/000714.html&#34;&gt;Test Data Builder&lt;/a&gt; pattern.&lt;/p&gt; &#xA;&lt;p&gt;When writing unit tests, you typically need to create some objects that represent the initial state of the test. Often, an API will force you to specify much more data than you really care about, so you frequently end up creating objects that has no influence on the test, simply to make the code compile.&lt;/p&gt; &#xA;&lt;p&gt;AutoFixture can help by creating such &lt;a href=&#34;https://docs.microsoft.com/en-us/archive/blogs/ploeh/anonymous-variables&#34;&gt;Anonymous Variables&lt;/a&gt; for you. Here&#39;s a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[Fact]&#xA;public void IntroductoryTest()&#xA;{&#xA;    // Arrange&#xA;    Fixture fixture = new Fixture();&#xA;&#xA;    int expectedNumber = fixture.Create&amp;lt;int&amp;gt;();&#xA;    MyClass sut = fixture.Create&amp;lt;MyClass&amp;gt;();&#xA;    // Act&#xA;    int result = sut.Echo(expectedNumber);&#xA;    // Assert&#xA;    Assert.Equal(expectedNumber, result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example illustrates the basic principle of AutoFixture: It can create values of virtually any type without the need for you to explicitly define which values should be used. The number &lt;em&gt;expectedNumber&lt;/em&gt; is created by a call to &lt;code&gt;Create&amp;lt;T&amp;gt;&lt;/code&gt; - this will create a &#39;nice&#39;, regular integer value, saving you the effort of explicitly coming up with one.&lt;/p&gt; &#xA;&lt;p&gt;The example also illustrates how AutoFixture can be used as a &lt;a href=&#34;http://blog.ploeh.dk/2009/02/13/SUTFactory.aspx&#34;&gt;SUT Factory&lt;/a&gt; that creates the actual System Under Test (the MyClass instance).&lt;/p&gt; &#xA;&lt;p&gt;Given the right combination of unit testing framework and extensions for AutoFixture, we can further reduce the above test to be even more declarative:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://blog.ploeh.dk/2010/10/08/AutoDataTheoriesWithAutoFixture.aspx&#34;&gt;xUnit&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[Theory, AutoData]&#xA;public void IntroductoryTest(int expectedNumber, MyClass sut)&#xA;{&#xA;    int result = sut.Echo(expectedNumber);&#xA;    Assert.Equal(expectedNumber, result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://gertjvr.wordpress.com/2013/09/25/howto-autofixture-nunit2&#34;&gt;NUnit&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[Test, AutoData]&#xA;public void IntroductoryTest(int expectedNumber, MyClass sut)&#xA;{&#xA;    int result = sut.Echo(expectedNumber);&#xA;    Assert.Equal(expectedNumber, result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how we can reduce unit tests to state only the relevant parts of the test. The rest (variables, Fixture object) is relegated to attributes and parameter values that are supplied automatically by AutoFixture. The test is now only two lines of code.&lt;/p&gt; &#xA;&lt;p&gt;Using AutoFixture is as easy as referencing the library and creating a new instance of the Fixture class!&lt;/p&gt; &#xA;&lt;h2&gt;Downloads&lt;/h2&gt; &#xA;&lt;p&gt;AutoFixture packages are distributed via NuGet.&lt;br&gt; To install the packages you can use the integrated package manager of your IDE, the .NET CLI, or reference the package directly in your project file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;dotnet add package AutoFixture --version 4.18.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PackageReference Include=&#34;AutoFixture&#34; Version=&#34;4.18.0&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AutoFixture offers a variety of utility packages and integrations with most of the major mocking libraries and testing frameworks.&lt;/p&gt; &#xA;&lt;h3&gt;Core packages&lt;/h3&gt; &#xA;&lt;p&gt;The core packages offer the full set of AutoFixture&#39;s features without requring any testing framework or third party integration.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Product&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Latest stable&lt;/th&gt; &#xA;   &lt;th&gt;Latest preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;The core package&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture&#34;&gt;AutoFixture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/autofixture?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assertion idioms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.Idioms&#34;&gt;AutoFixture.Idioms&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.Idioms&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.Idioms.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.Idioms&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.Idioms?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Seed extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.SeedExtensions&#34;&gt;AutoFixture.SeedExtensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.SeedExtensions&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.SeedExtensions.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.SeedExtensions&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.SeedExtensions?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Mocking libraries&lt;/h3&gt; &#xA;&lt;p&gt;AutoFixture offers integations with most major .NET mocking libraries.&lt;br&gt; These integrations enable such features as configuring mocks, auto-injecting mocks, etc.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Product&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Latest stable&lt;/th&gt; &#xA;   &lt;th&gt;Latest preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Moq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.AutoMoq&#34;&gt;AutoFixture.AutoMoq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.AutoMoq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.AutoMoq.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.AutoMoq&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.AutoMoq?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NSubstitute&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.AutoNSubstitute&#34;&gt;AutoFixture.AutoNSubstitute&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.AutoNSubstitute&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.AutoNSubstitute.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.AutoNSubstitute&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.AutoNSubstitute?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FakeItEasy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.AutoFakeItEasy&#34;&gt;AutoFixture.AutoFakeItEasy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.AutoFakeItEasy&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.AutoFakeItEasy.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.AutoFakeItEasy&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.AutoFakeItEasy?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rhino Mocks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.AutoRhinoMocks&#34;&gt;AutoFixture.AutoRhinoMocks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.AutoRhinoMocks&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.AutoRhinoMocks.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.AutoRhinoMocks&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.AutoRhinoMocks?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Since AutoFixture tries maintain compatibility with a large number of package versions, the packages bundled with AutoFixture might not contain the latest features of your mocking library.&lt;br&gt; Make sure to install the latest version of the mocking library package, alongside the AutoFixture package.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Testing frameworks&lt;/h3&gt; &#xA;&lt;p&gt;AutoFixture offers integrations with most major .NET testing frameworks.&lt;br&gt; These integrations enable auto-generation of test cases, combining auto-generated data with inline arguments, etc.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Product&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Latest stable&lt;/th&gt; &#xA;   &lt;th&gt;Latest preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.nuget.org/packages/AutoFixture.AutoFoq&#34;&gt;AutoFixture.AutoFoq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.AutoFoq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.AutoFoq.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.AutoFoq&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.AutoFoq?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xUnit v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.Xunit&#34;&gt;AutoFixture.Xunit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.Xunit&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.Xunit.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.Xunit&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.Xunit?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xUnit v2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.Xunit2&#34;&gt;AutoFixture.Xunit2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.Xunit2&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.Xunit2.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.Xunit2&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.Xunit2?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUnit v2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.NUnit2&#34;&gt;AutoFixture.NUnit2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.NUnit2&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.NUnit2.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.NUnit2&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.NUnit2?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUnit v3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuget.org/packages/AutoFixture.NUnit3&#34;&gt;AutoFixture.NUnit3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AutoFixture.NUnit3&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/AutoFixture.NUnit3.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/autofixture/package/nuget/AutoFixture.NUnit3&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/autofixture/vpre/AutoFixture.NUnit3?label=myget&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can check the compatibility with your target framework version on the &lt;a href=&#34;https://github.com/AutoFixture/AutoFixture/wiki#net-platforms-compatibility-table&#34;&gt;wiki&lt;/a&gt; or on the &lt;a href=&#34;https://www.nuget.org/profiles/AutoFixture&#34;&gt;NuGet&lt;/a&gt; website.&lt;/p&gt; &#xA;&lt;h3&gt;vNext feed&lt;/h3&gt; &#xA;&lt;p&gt;The artifacts of the next major version are published to &lt;a href=&#34;https://www.myget.org/gallery/autofixture&#34;&gt;the MyGet feed&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;https://www.myget.org/F/autofixture/api/v3/index.json&lt;/code&gt; (Visual Studio 2015+)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;https://www.myget.org/F/autofixture/api/v2&lt;/code&gt; (Visual Studio 2012+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use this feed to early access and test the next major version of the AutoFixture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;, this feed exists for the &lt;em&gt;preview purpose&lt;/em&gt; only, so use it with caution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;new versions of packages might contain breaking changes and API could change drastically from package to package. By other words, we don&#39;t follow the SemVer policy for the packages in this feed;&lt;/li&gt; &#xA; &lt;li&gt;packages might be cleaned up over time (MyGet has storage limits), so don&#39;t consider this feed for the permanent usage (or at least ensure to make a copy of the used packages somewhere else).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AutoFixture/AutoFixture/wiki/Cheat-Sheet&#34;&gt;CheatSheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AutoFixture/AutoFixture/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/unit-testing-autofixture-dot-net&#34;&gt;Pluralsight course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.ploeh.dk/tags/#AutoFixture-ref&#34;&gt;ploeh blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.nikosbaxevanis.com&#34;&gt;Nikos Baxevanis&#39; blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://megakemp.com/tag/autofixture&#34;&gt;Enrico Campidoglio&#39;s blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gertjvr.wordpress.com/category/autofixture&#34;&gt;Gert Jansen van Rensburg&#39;s blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/autofixture&#34;&gt;Questions on Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback &amp;amp; Questions&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions, feel free to ask. The best places to ask are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/autofixture&#34;&gt;Stack Overflow - use the &lt;em&gt;autofixture&lt;/em&gt; tag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AutoFixture/AutoFixture/discussions/categories/q-a&#34;&gt;GitHub Q&amp;amp;A Discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AutoFixture is Open Source software and is released under the &lt;a href=&#34;https://raw.githubusercontent.com/AutoFixture/AutoFixture/master/LICENCE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;br&gt; The licenses allows the use of AutoFixture libraries in free and commercial applications and libraries without restrictions.&lt;/p&gt; &#xA;&lt;h3&gt;.NET Foundation&lt;/h3&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;https://dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>