<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-17T01:28:56Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shouldly/shouldly</title>
    <updated>2025-01-17T01:28:56Z</updated>
    <id>tag:github.com,2025-01-17:/shouldly/shouldly</id>
    <link href="https://github.com/shouldly/shouldly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Should testing for .NETâ€”the way assertions should be!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shouldly/shouldly/master/assets/logo_350x84.png&#34; alt=&#34;Shouldly Logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shouldly/shouldly/actions/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://github.com/shouldly/shouldly/actions/workflows/CI.yml/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Shouldly&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/shouldly.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Shouldly&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/shouldly.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/shouldly/shouldly?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/shouldly/shouldly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shouldly is an assertion framework which focuses on giving great error messages when the assertion fails while being simple and terse.&lt;/p&gt; &#xA;&lt;p&gt;This is the old &lt;em&gt;Assert&lt;/em&gt; way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Assert.That(contestant.Points, Is.EqualTo(1337));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For your troubles, you get this message, when it fails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expected 1337 but was 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How it &lt;strong&gt;Should&lt;/strong&gt; be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;contestant.Points.ShouldBe(1337);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is just syntax, so far, but check out the message when it fails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;contestant.Points should be 1337 but was 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It might be easy to underestimate how useful this is. Another example, side by side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Assert.That(map.IndexOfValue(&#34;boo&#34;), Is.EqualTo(2));    // -&amp;gt; Expected 2 but was -1&#xA;map.IndexOfValue(&#34;boo&#34;).ShouldBe(2);                    // -&amp;gt; map.IndexOfValue(&#34;boo&#34;) should be 2 but was -1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shouldly&lt;/strong&gt; uses the code before the &lt;em&gt;ShouldBe&lt;/em&gt; statement to report on errors, which makes diagnosing easier.&lt;/p&gt; &#xA;&lt;p&gt;Read more about Shouldly and its features at &lt;a href=&#34;https://docs.shouldly.org/&#34;&gt;https://docs.shouldly.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Shouldly can be &lt;a href=&#34;https://www.nuget.org/packages/Shouldly/&#34;&gt;found here on NuGet&lt;/a&gt; and can be installed by copying and pasting the following command into your Package Manager Console within Visual Studio (Tools &amp;gt; NuGet Package Manager &amp;gt; Package Manager Console).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Install-Package Shouldly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively if you&#39;re using .NET Core then you can install Shouldly via the command line interface with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package Shouldly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Shouldly are very welcome. For guidance, please see &lt;a href=&#34;https://raw.githubusercontent.com/shouldly/shouldly/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pre-requisites for running on build server&lt;/h2&gt; &#xA;&lt;p&gt;Shouldly uses the source code to make its error messages better. Hence, on the build server you will need to have the &#34;full&#34; pdb files available where the tests are being run.&lt;/p&gt; &#xA;&lt;p&gt;What is meant by &#34;full&#34; is that when you set up your &#34;release&#34; configuration in Visual Studio and you go to Project Properties &amp;gt; Build &amp;gt; Advanced &amp;gt; Debug, you should set it to &#34;full&#34; rather than &#34;pdb-only&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>googlesamples/unity-jar-resolver</title>
    <updated>2025-01-17T01:28:56Z</updated>
    <id>tag:github.com,2025-01-17:/googlesamples/unity-jar-resolver</id>
    <link href="https://github.com/googlesamples/unity-jar-resolver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unity plugin which resolves Android &amp; iOS dependencies and performs version management&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;External Dependency Manager for Unity&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openupm.com/packages/com.google.external-dependency-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/com.google.external-dependency-manager?label=openupm&amp;amp;registry_uri=https://package.openupm.com&#34; alt=&#34;openupm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openupm.com/packages/com.google.external-dependency-manager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=brightgreen&amp;amp;label=downloads&amp;amp;query=%24.downloads&amp;amp;suffix=%2Fmonth&amp;amp;url=https%3A%2F%2Fpackage.openupm.com%2Fdownloads%2Fpoint%2Flast-month%2Fcom.google.external-dependency-manager&#34; alt=&#34;openupm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The External Dependency Manager for Unity (EDM4U) (formerly Play Services Resolver/Jar Resolver) is intended to be used by any Unity package or user that requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Android specific libraries (e.g &lt;a href=&#34;https://developer.android.com/studio/projects/android-library.html&#34;&gt;AARs&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;iOS &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Version management of transitive dependencies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Management of Package Manager (PM) Registries&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to add and use iOS/Android dependencies directly in your project, then you should to install EDM4U in your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are a package user and the plugin you are using depends on EDM4U, &lt;em&gt;and&lt;/em&gt; the package does not include EDM4U as a package dependency already, then you should to install EDM4U in your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are a UPM package maintainer and your package requires EDM4U, then you should add EDM4U as a &lt;a href=&#34;https://docs.unity3d.com/2019.3/Documentation/Manual/upm-dependencies.html&#34;&gt;package dependency&lt;/a&gt; in your package manifest (&lt;code&gt;package.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;dependencies&#34;: {&#xA;    &#34;com.google.external-dependency-manager&#34;: &#34;1.2.178&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should still install EDM4U to test out the package during development.&lt;/p&gt; &#xA;&lt;p&gt;If you are a legacy &lt;code&gt;.unitypackage&lt;/code&gt; package maintainer and your package requires EDM4U, please ask the user to install EDM4U separately. You should install EDM4U to test out the package during development.&lt;/p&gt; &#xA;&lt;p&gt;Updated releases are available on &lt;a href=&#34;https://github.com/googlesamples/unity-jar-resolver&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;Android Resolver&lt;/em&gt; and &lt;em&gt;iOS Resolver&lt;/em&gt; components of the plugin only work with Unity version 4.6.8 or higher.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;Version Handler&lt;/em&gt; component only works with Unity 5.x or higher as it depends upon the &lt;code&gt;PluginImporter&lt;/code&gt; UnityEditor API.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;Package Manager Resolver&lt;/em&gt; component only works with Unity 2018.4 or above, when &lt;a href=&#34;https://docs.unity3d.com/Manual/upm-scoped.html&#34;&gt;scoped registry&lt;/a&gt; support was added to the Package Manager.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/googlesamples/unity-jar-resolver/master/troubleshooting-faq.md&#34;&gt;troubleshooting&lt;/a&gt; if you need help.&lt;/p&gt; &#xA;&lt;h3&gt;Install via OpenUPM&lt;/h3&gt; &#xA;&lt;p&gt;EDM4U is available on &lt;a href=&#34;https://openupm.com/packages/com.google.external-dependency-manager/&#34;&gt;OpenUPM&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;openupm add com.google.external-dependency-manager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install via git URL&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open Package Manager&lt;/li&gt; &#xA; &lt;li&gt;Click on the + icon on the top left corner of the &#34;Package Manager&#34; screen&lt;/li&gt; &#xA; &lt;li&gt;Click on &#34;Install package from git url...&#34;&lt;/li&gt; &#xA; &lt;li&gt;Paste: &lt;a href=&#34;https://github.com/googlesamples/unity-jar-resolver.git?path=upm&#34;&gt;https://github.com/googlesamples/unity-jar-resolver.git?path=upm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install via Google APIs for Unity&lt;/h3&gt; &#xA;&lt;p&gt;EDM4U is available both in UPM and legacy &lt;code&gt;.unitypackage&lt;/code&gt; formats on &lt;a href=&#34;https://developers.google.com/unity/archive#external_dependency_manager_for_unity&#34;&gt;Google APIs for Unity&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You may install the UPM version (.tgz) as a &lt;a href=&#34;https://docs.unity3d.com/Manual/upm-ui-local.html&#34;&gt;local UPM package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install EDM4U in your project as a &lt;code&gt;.unitypackage&lt;/code&gt;. This is not recommended due to potential conflicts.&lt;/p&gt; &#xA;&lt;h3&gt;Conflict Resolution&lt;/h3&gt; &#xA;&lt;p&gt;For historical reasons, a package maintainer may choose to embed EDM4U in their package for ease of installation. This will create a conflict when you try to install EDM4U with the steps above, or with another package with embedded EDM4U. If your project imported a &lt;code&gt;.unitypackage&lt;/code&gt; that has a copy of EDM4U embedded in it, you may safely delete it from your Assets folder. If your project depends on another UPM package with EDM4U, please reach out to the package maintainer and ask them to replace it with a dependency to this package. In the meantime, you can workaround the issue by copying the package to your Packages folder (to create an &lt;a href=&#34;https://docs.unity3d.com/Manual/upm-concepts.html#Embedded&#34;&gt;embedded package&lt;/a&gt;) and perform the steps yourself to avoid a dependency conflict.&lt;/p&gt; &#xA;&lt;h3&gt;Config file&lt;/h3&gt; &#xA;&lt;p&gt;To start adding dependencies to your project, copy and rename the &lt;a href=&#34;https://github.com/googlesamples/unity-jar-resolver/raw/master/sample/Assets/ExternalDependencyManager/Editor/SampleDependencies.xml&#34;&gt;SampleDependencies.xml&lt;/a&gt; file into your plugin and add the dependencies your project requires.&lt;/p&gt; &#xA;&lt;p&gt;The XML file needs to be under an &lt;code&gt;Editor&lt;/code&gt; directory and match the name &lt;code&gt;*Dependencies.xml&lt;/code&gt;. For example, &lt;code&gt;MyPlugin/Editor/MyPluginDependencies.xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usages&lt;/h2&gt; &#xA;&lt;h3&gt;Android Resolver&lt;/h3&gt; &#xA;&lt;p&gt;The Android Resolver copies specified dependencies from local or remote Maven repositories into the Unity project when a user selects Android as the build target in the Unity editor.&lt;/p&gt; &#xA;&lt;p&gt;For example, to add the Google Play Games library (&lt;code&gt;com.google.android.gms:play-services-games&lt;/code&gt; package) at version &lt;code&gt;9.8.0&lt;/code&gt; to the set of a plugin&#39;s Android dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;  &amp;lt;androidPackages&amp;gt;&#xA;    &amp;lt;androidPackage spec=&#34;com.google.android.gms:play-services-games:9.8.0&#34;&amp;gt;&#xA;      &amp;lt;androidSdkPackageIds&amp;gt;&#xA;        &amp;lt;androidSdkPackageId&amp;gt;extra-google-m2repository&amp;lt;/androidSdkPackageId&amp;gt;&#xA;      &amp;lt;/androidSdkPackageIds&amp;gt;&#xA;    &amp;lt;/androidPackage&amp;gt;&#xA;  &amp;lt;/androidPackages&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The version specification (last component) supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Specific versions e.g &lt;code&gt;9.8.0&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Partial matches e.g &lt;code&gt;9.8.+&lt;/code&gt; would match 9.8.0, 9.8.1 etc. choosing the most recent version&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Latest version using &lt;code&gt;LATEST&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. We do &lt;em&gt;not&lt;/em&gt; recommend using this unless you&#39;re 100% sure the library you depend upon will not break your Unity plugin in future&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The above example specifies the dependency as a component of the Android SDK manager such that the Android SDK manager will be executed to install the package if it&#39;s not found. If your Android dependency is located on Maven central it&#39;s possible to specify the package simply using the &lt;code&gt;androidPackage&lt;/code&gt; element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;  &amp;lt;androidPackages&amp;gt;&#xA;    &amp;lt;androidPackage spec=&#34;com.google.api-client:google-api-client-android:1.22.0&#34; /&amp;gt;&#xA;  &amp;lt;/androidPackages&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Auto-resolution&lt;/h4&gt; &#xA;&lt;p&gt;By default the Android Resolver automatically monitors the dependencies you have specified and the &lt;code&gt;Plugins/Android&lt;/code&gt; folder of your Unity project. The resolution process runs when the specified dependencies are not present in your project.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;auto-resolution&lt;/em&gt; process can be disabled via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Settings&lt;/code&gt; menu.&lt;/p&gt; &#xA;&lt;p&gt;Manual resolution can be performed using the following menu options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Resolve&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Force Resolve&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Deleting libraries&lt;/h4&gt; &#xA;&lt;p&gt;Resolved packages are tracked via asset labels by the Android Resolver. They can easily be deleted using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Delete Resolved Libraries&lt;/code&gt; menu item.&lt;/p&gt; &#xA;&lt;h4&gt;Android Manifest Variable Processing&lt;/h4&gt; &#xA;&lt;p&gt;Some AAR files (for example play-services-measurement) contain variables that are processed by the Android Gradle plugin. Unfortunately, Unity does not perform the same processing when using Unity&#39;s Internal Build System, so the Android Resolver plugin handles known cases of this variable substitution by exploding the AAR into a folder and replacing &lt;code&gt;${applicationId}&lt;/code&gt; with the &lt;code&gt;bundleID&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Disabling AAR explosion and therefore Android manifest processing can be done via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Settings&lt;/code&gt; menu. You may want to disable explosion of AARs if you&#39;re exporting a project to be built with Gradle/Android Studio.&lt;/p&gt; &#xA;&lt;h4&gt;ABI Stripping&lt;/h4&gt; &#xA;&lt;p&gt;Some AAR files contain native libraries (.so files) for each ABI supported by Android. Unfortunately, when targeting a single ABI (e.g x86), Unity does not strip native libraries for unused ABIs. To strip unused ABIs, the Android Resolver plugin explodes an AAR into a folder and removes unused ABIs to reduce the built APK size. Furthermore, if native libraries are not stripped from an APK (e.g you have a mix of Unity&#39;s x86 library and some armeabi-v7a libraries) Android may attempt to load the wrong library for the current runtime ABI completely breaking your plugin when targeting some architectures.&lt;/p&gt; &#xA;&lt;p&gt;AAR explosion and therefore ABI stripping can be disabled via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Settings&lt;/code&gt; menu. You may want to disable explosion of AARs if you&#39;re exporting a project to be built with Gradle/Android Studio.&lt;/p&gt; &#xA;&lt;h4&gt;Resolution Strategies&lt;/h4&gt; &#xA;&lt;p&gt;By default the Android Resolver will use Gradle to download dependencies prior to integrating them into a Unity project. This works with Unity&#39;s internal build system and Gradle/Android Studio project export.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to change the resolution strategy via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Settings&lt;/code&gt; menu.&lt;/p&gt; &#xA;&lt;h5&gt;Download Artifacts with Gradle&lt;/h5&gt; &#xA;&lt;p&gt;Using the default resolution strategy, the Android resolver executes the following operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove the result of previous Android resolutions. E.g Delete all files and directories labeled with &#34;gpsr&#34; under &lt;code&gt;Plugins/Android&lt;/code&gt; from the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Collect the set of Android dependencies (libraries) specified by a project&#39;s &lt;code&gt;*Dependencies.xml&lt;/code&gt; files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;download_artifacts.gradle&lt;/code&gt; with Gradle to resolve conflicts and, if successful, download the set of resolved Android libraries (AARs, JARs).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Process each AAR/JAR so that it can be used with the currently selected Unity build system (e.g Internal vs. Gradle, Export vs. No Export). This involves patching each reference to &lt;code&gt;applicationId&lt;/code&gt; in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; with the project&#39;s bundle ID. This means resolution must be run again if the bundle ID has changed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move the processed AARs to &lt;code&gt;Plugins/Android&lt;/code&gt; so they will be included when Unity invokes the Android build.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Integrate into mainTemplate.gradle&lt;/h5&gt; &#xA;&lt;p&gt;Unity 5.6 introduced support for customizing the &lt;code&gt;build.gradle&lt;/code&gt; used to build Unity projects with Gradle. When the &lt;em&gt;Patch mainTemplate.gradle&lt;/em&gt; setting is enabled, rather than downloading artifacts before the build, Android resolution results in the execution of the following operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove the result of previous Android resolutions. E.g Delete all files and directories labeled with &#34;gpsr&#34; under &lt;code&gt;Plugins/Android&lt;/code&gt; from the project and remove sections delimited with &lt;code&gt;// Android Resolver * Start&lt;/code&gt; and &lt;code&gt;// Android Resolver * End&lt;/code&gt; lines.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Collect the set of Android dependencies (libraries) specified by a project&#39;s &lt;code&gt;*Dependencies.xml&lt;/code&gt; files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rename any &lt;code&gt;.srcaar&lt;/code&gt; files in the build to &lt;code&gt;.aar&lt;/code&gt; and exclude them from being included directly by Unity in the Android build as &lt;code&gt;mainTemplate.gradle&lt;/code&gt; will be patched to include them instead from their local maven repositories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject the required Gradle repositories into &lt;code&gt;mainTemplate.gradle&lt;/code&gt; at the line matching the pattern &lt;code&gt;.*apply plugin: &#39;com\.android\.(application|library)&#39;.*&lt;/code&gt; or the section starting at the line &lt;code&gt;// Android Resolver Repos Start&lt;/code&gt;. If you want to control the injection point in the file, the section delimited by the lines &lt;code&gt;// Android Resolver Repos Start&lt;/code&gt; and &lt;code&gt;// Android Resolver Repos End&lt;/code&gt; should be placed in the global scope before the &lt;code&gt;dependencies&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject the required Android dependencies (libraries) into &lt;code&gt;mainTemplate.gradle&lt;/code&gt; at the line matching the pattern &lt;code&gt;***DEPS***&lt;/code&gt; or the section starting at the line &lt;code&gt;// Android Resolver Dependencies Start&lt;/code&gt;. If you want to control the injection point in the file, the section delimited by the lines &lt;code&gt;// Android Resolver Dependencies Start&lt;/code&gt; and &lt;code&gt;// Android Resolver Dependencies End&lt;/code&gt; should be placed in the &lt;code&gt;dependencies&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inject the packaging options logic, which excludes architecture specific libraries based upon the selected build target, into &lt;code&gt;mainTemplate.gradle&lt;/code&gt; at the line matching the pattern &lt;code&gt;android +{&lt;/code&gt; or the section starting at the line &lt;code&gt;// Android Resolver Exclusions Start&lt;/code&gt;. If you want to control the injection point in the file, the section delimited by the lines &lt;code&gt;// Android Resolver Exclusions Start&lt;/code&gt; and &lt;code&gt;// Android Resolver Exclusions End&lt;/code&gt; should be placed in the global scope before the &lt;code&gt;android&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dependency Tracking&lt;/h4&gt; &#xA;&lt;p&gt;The Android Resolver creates the &lt;code&gt;ProjectSettings/AndroidResolverDependencies.xml&lt;/code&gt; to quickly determine the set of resolved dependencies in a project. This is used by the auto-resolution process to only run the expensive resolution process when necessary.&lt;/p&gt; &#xA;&lt;h4&gt;Displaying Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s possible to display the set of dependencies the Android Resolver would download and process in your project via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Android Resolver &amp;gt; Display Libraries&lt;/code&gt; menu item.&lt;/p&gt; &#xA;&lt;h3&gt;iOS Resolver&lt;/h3&gt; &#xA;&lt;p&gt;The iOS resolver component of this plugin manages &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt;. A CocoaPods &lt;code&gt;Podfile&lt;/code&gt; is generated and the &lt;code&gt;pod&lt;/code&gt; tool is executed as a post build process step to add dependencies to the Xcode project exported by Unity.&lt;/p&gt; &#xA;&lt;p&gt;Dependencies for iOS are added by referring to CocoaPods.&lt;/p&gt; &#xA;&lt;p&gt;For example, to add the AdMob pod, version 7.0 or greater with bitcode enabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;  &amp;lt;iosPods&amp;gt;&#xA;    &amp;lt;iosPod name=&#34;Google-Mobile-Ads-SDK&#34; version=&#34;~&amp;gt; 7.0&#34; bitcodeEnabled=&#34;true&#34;&#xA;            minTargetSdk=&#34;6.0&#34; addToAllTargets=&#34;false&#34; /&amp;gt;&#xA;  &amp;lt;/iosPods&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Integration Strategies&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;CocoaPods&lt;/code&gt; are either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Downloaded and injected into the Xcode project file directly, rather than creating a separate xcworkspace. We call this &lt;code&gt;Xcode project&lt;/code&gt; integration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the Unity version supports opening a xcworkspace file, the &lt;code&gt;pod&lt;/code&gt; tool is used as intended to generate a xcworkspace which references the CocoaPods. We call this &lt;code&gt;Xcode workspace&lt;/code&gt; integration.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The resolution strategy can be changed via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; iOS Resolver &amp;gt; Settings&lt;/code&gt; menu.&lt;/p&gt; &#xA;&lt;h5&gt;Appending text to generated Podfile&lt;/h5&gt; &#xA;&lt;p&gt;In order to modify the generated Podfile you can create a script like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.IO;&#xA;&#xA;using UnityEditor;&#xA;using UnityEditor.Callbacks;&#xA;using UnityEngine;&#xA;&#xA;public class PostProcessIOS : MonoBehaviour&#xA;{&#xA;    // Must be between 40 and 50 to ensure that it&#39;s not overriden by Podfile generation (40) and&#xA;    // that it&#39;s added before &#34;pod install&#34; (50).&#xA;    [PostProcessBuildAttribute(45)]&#xA;    private static void PostProcessBuild_iOS(BuildTarget target, string buildPath)&#xA;    {&#xA;        if (target == BuildTarget.iOS)&#xA;        {&#xA;            using (StreamWriter sw = File.AppendText(buildPath + &#34;/Podfile&#34;))&#xA;            {&#xA;                // E.g. add an app extension&#xA;                sw.WriteLine(&#34;\ntarget &#39;NSExtension&#39; do\n  pod &#39;Firebase/Messaging&#39;, &#39;6.6.0&#39;\nend&#34;);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Package Manager Resolver&lt;/h3&gt; &#xA;&lt;p&gt;Adding registries to the &lt;a href=&#34;https://docs.unity3d.com/Manual/Packages.html&#34;&gt;Package Manager&lt;/a&gt; (PM) is a manual process. The Package Manager Resolver (PMR) component of this plugin makes it easy for plugin maintainers to distribute new PM registry servers and easy for plugin users to manage PM registry servers.&lt;/p&gt; &#xA;&lt;h4&gt;Adding Registries&lt;/h4&gt; &#xA;&lt;p&gt;For example, to add a registry for plugins in the scope &lt;code&gt;com.coolstuff&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;registries&amp;gt;&#xA;  &amp;lt;registry name=&#34;Cool Stuff&#34;&#xA;            url=&#34;https://unityregistry.coolstuff.com&#34;&#xA;            termsOfService=&#34;https://coolstuff.com/unityregistry/terms&#34;&#xA;            privacyPolicy=&#34;https://coolstuff.com/unityregistry/privacy&#34;&amp;gt;&#xA;    &amp;lt;scopes&amp;gt;&#xA;      &amp;lt;scope&amp;gt;com.coolstuff&amp;lt;/scope&amp;gt;&#xA;    &amp;lt;/scopes&amp;gt;&#xA;  &amp;lt;/registry&amp;gt;&#xA;&amp;lt;/registries&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When PMR is loaded it will prompt the developer to add the registry to their project if it isn&#39;t already present in the &lt;code&gt;Packages/manifest.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see Unity&#39;s documentation on &lt;a href=&#34;https://docs.unity3d.com/Manual/upm-scoped.html&#34;&gt;scoped package registries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Managing Registries&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s possible to add and remove registries that are specified via PMR XML configuration files via the following menu options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Package Manager Resolver &amp;gt; Add Registries&lt;/code&gt; will prompt the user with a window which allows them to add registries discovered in the project to the Package Manager.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Package Manager Resolver &amp;gt; Remove Registries&lt;/code&gt; will prompt the user with a window which allows them to remove registries discovered in the project from the Package Manager.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Package Manager Resolver &amp;gt; Modify Registries&lt;/code&gt; will prompt the user with a window which allows them to add or remove registries discovered in the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Migration&lt;/h4&gt; &#xA;&lt;p&gt;PMR can migrate Version Handler packages installed in the &lt;code&gt;Assets&lt;/code&gt; folder to PM packages. This requires the plugins to implement the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.unitypackage&lt;/code&gt; must include a Version Handler manifests that describes the components of the plugin. If the plugin has no dependencies the manifest would just include the files in the plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The PM package JSON provided by the registry must include a keyword (in the &lt;code&gt;versions.VERSION.keyword&lt;/code&gt; list) that maps the PM package to a Version Handler package using the format &lt;code&gt;vh-name:VERSION_HANDLER_MANIFEST_NAME&lt;/code&gt; where &lt;code&gt;VERSION_HANDLER_MANIFEST_NAME&lt;/code&gt; is the name of the manifest defined in the &lt;code&gt;.unitypackage&lt;/code&gt;. For more information see the description of the &lt;code&gt;gvhp_manifestname&lt;/code&gt; asset label in the &lt;a href=&#34;https://raw.githubusercontent.com/googlesamples/unity-jar-resolver/master/#version-handler&#34;&gt;Version Handler&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Package Manager Resolver &amp;gt; Migrate Packages&lt;/code&gt; menu option, PMR then will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;List all Version Handler manager packages in the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search all available packages in the PM registries and fetch keywords associated with each package parsing the Version Handler manifest names for each package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Map each installed Version Handler package to a PM package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Prompt the user to migrate the discovered packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Perform package migration for all selected packages if the user clicks the &lt;code&gt;Apply&lt;/code&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;PMR can be configured via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Package Manager Resolver &amp;gt; Settings&lt;/code&gt; menu option:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Add package registries&lt;/code&gt; when enabled, when the plugin loads or registry configuration files change, this will prompt the user to add registries that are not present in the Package Manager.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Prompt to add package registries&lt;/code&gt; will cause a developer to be prompted with a window that will ask for confirmation before adding registries. When this is disabled registries are added silently to the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Prompt to migrate packages&lt;/code&gt; will cause a developer to be prompted with a window that will ask for confirmation before migrating packages installed in the &lt;code&gt;Assets&lt;/code&gt; directory to PM packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Enable Analytics Reporting&lt;/code&gt; when enabled, reports the use of the plugin to the developers so they can make imrpovements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Verbose logging&lt;/code&gt; when enabled prints debug information to the console which can be useful when filing bug reports.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version Handler&lt;/h3&gt; &#xA;&lt;p&gt;The Version Handler component of this plugin manages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Shared Unity plugin dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Upgrading Unity plugins by cleaning up old files from previous versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uninstallation of plugins that are distributed with manifest files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restoration of plugin assets to their original install locations if assets are tagged with the &lt;code&gt;exportpath&lt;/code&gt; label.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since the Version Handler needs to modify Unity asset metadata (&lt;code&gt;.meta&lt;/code&gt; files), to enable/disable components, rename and delete asset files it does not work with Package Manager installed packages. It&#39;s still possible to include EDM4U in Package Manager packages, the Version Handler component simply won&#39;t do anything to PM plugins in this case.&lt;/p&gt; &#xA;&lt;h4&gt;Using Version Handler Managed Plugins&lt;/h4&gt; &#xA;&lt;p&gt;If a plugin is imported at multiple different versions into a project, if the Version Handler is enabled, it will automatically check all managed assets to determine the set of assets that are out of date and assets that should be removed. To disable automatic checking managed assets disable the &lt;code&gt;Enable version management&lt;/code&gt; option in the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Settings&lt;/code&gt; menu.&lt;/p&gt; &#xA;&lt;p&gt;If version management is disabled, it&#39;s possible to check managed assets manually using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Update&lt;/code&gt; menu option.&lt;/p&gt; &#xA;&lt;h5&gt;Listing Managed Plugins&lt;/h5&gt; &#xA;&lt;p&gt;Plugins managed by the Version Handler, those that ship with manifest files, can displayed using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Display Managed Packages&lt;/code&gt; menu option. The list of plugins are written to the console window along with the set of files used by each plugin.&lt;/p&gt; &#xA;&lt;h5&gt;Uninstalling Managed Plugins&lt;/h5&gt; &#xA;&lt;p&gt;Plugins managed by the Version Handler, those that ship with manifest files, can be removed using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Uninstall Managed Packages&lt;/code&gt; menu option. This operation will display a window that allows a developer to select a set of plugins to remove which will remove all files owned by each plugin excluding those that are in use by other installed plugins.&lt;/p&gt; &#xA;&lt;p&gt;Files managed by the Version Handler, those labeled with the &lt;code&gt;gvh&lt;/code&gt; asset label, can be checked to see whether anything needs to be upgraded, disabled or removed using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Update&lt;/code&gt; menu option.&lt;/p&gt; &#xA;&lt;h5&gt;Restore Install Paths&lt;/h5&gt; &#xA;&lt;p&gt;Some developers move assets around in their project which can make it harder for plugin maintainers to debug issues if this breaks Unity&#39;s &lt;a href=&#34;https://docs.unity3d.com/Manual/SpecialFolders.html&#34;&gt;special folders&lt;/a&gt; rules. If assets are labeled with their original install/export path (see &lt;code&gt;gvhp_exportpath&lt;/code&gt; below), Version Handler can restore assets to their original locations when using the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Move Files To Install Locations&lt;/code&gt; menu option.&lt;/p&gt; &#xA;&lt;h5&gt;Settings&lt;/h5&gt; &#xA;&lt;p&gt;Some behavior of the Version Handler can be configured via the &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Settings&lt;/code&gt; menu option.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Enable version management&lt;/code&gt; controls whether the plugin should automatically check asset versions and apply changes. If this is disabled the process should be run manually when installing or upgrading managed plugins using &lt;code&gt;Assets &amp;gt; External Dependency Manager &amp;gt; Version Handler &amp;gt; Update&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Rename to canonical filenames&lt;/code&gt; is a legacy option that will rename files to remove version numbers and other labels from filenames.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Prompt for obsolete file deletion&lt;/code&gt; enables the display of a window when obsolete files are deleted allowing the developer to select which files to delete and those to keep.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Allow disabling files via renaming&lt;/code&gt; controls whether obsolete or disabled files should be disabled by renaming them to &lt;code&gt;myfilename_DISABLED&lt;/code&gt;. Renaming to disable files is required in some scenarios where Unity doesn&#39;t support removing files from the build via the PluginImporter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Enable Analytics Reporting&lt;/code&gt; enables/disables usage reporting to plugin developers to improve the product.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Verbose logging&lt;/code&gt; enables &lt;em&gt;very&lt;/em&gt; noisy log output that is useful for debugging while filing a bug report or building a new managed plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Use project settings&lt;/code&gt; saves settings for the plugin in the project rather than system-wide.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Redistributing a Managed Plugin&lt;/h4&gt; &#xA;&lt;p&gt;The Version Handler employs a couple of methods for managing version selection, upgrade and removal of plugins.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each plugin can ship with a manifest file that lists the files it includes. This makes it possible for Version Handler to calculate the difference in assets between the most recent release of a plugin and the previous release installed in a project. If a files are removed the Version Handler will prompt the user to clean up obsolete files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins can ship using assets with unique names, unique GUIDs and version number labels. Version numbers can be attached to assets using labels or added to the filename (e.g &lt;code&gt;myfile.txt&lt;/code&gt; would be `myfile_version-x.y.z.txt). This allows the Version Handler to determine which set of files are the same file at different versions, select the most recent version and prompt the developer to clean up old versions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unity plugins can be managed by the Version Handler using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;gvh&lt;/code&gt; asset label to each asset (file) you want Version Handler to manage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;gvh_version-VERSION&lt;/code&gt; label to each asset where &lt;code&gt;VERSION&lt;/code&gt; is the version of the plugin you&#39;re releasing (e.g 1.2.3).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the &lt;code&gt;gvhp_exportpath-PATH&lt;/code&gt; label to each asset where &lt;code&gt;PATH&lt;/code&gt; is the export path of the file when the &lt;code&gt;.unitypackage&lt;/code&gt; is created. This is used to track files if they&#39;re moved around in a project by developers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Add &lt;code&gt;gvh_targets-editor&lt;/code&gt; label to each editor DLL in your plugin and disable &lt;code&gt;editor&lt;/code&gt; as a target platform for the DLL. The Version Handler will enable the most recent version of this DLL when the plugin is imported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: If your plugin is included in other Unity plugins, you should add the version number to each filename and change the GUID of each asset. This allows multiple versions of your plugin to be imported into a Unity project, with the Version Handler component activating only the most recent version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a manifest text file named &lt;code&gt;MY_UNIQUE_PLUGIN_NAME_VERSION.txt&lt;/code&gt; that lists all the files in your plugin relative to the project root. Then add the &lt;code&gt;gvh_manifest&lt;/code&gt; label to the asset to indicate this file is a plugin manifest.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Add a &lt;code&gt;gvhp_manifestname-NAME&lt;/code&gt; label to your manifest file to provide a human readable name for your package. If this isn&#39;t provided the name of the manifest file will be used as the package name. NAME can match the pattern &lt;code&gt;[0-9]+[a-zA-Z -]&lt;/code&gt; where a leading integer will set the priority of the name where &lt;code&gt;0&lt;/code&gt; is the highest priority and preferably used as the display name. The lowest value (i.e highest priority name) will be used as the display name and all other specified names will be aliases of the display name. Aliases can refer to previous names of the package allowing renaming across published versions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistribute EDM4U Unity plugin with your plugin. See the &lt;a href=&#34;https://raw.githubusercontent.com/googlesamples/unity-jar-resolver/master/#plugin-redistribution&#34;&gt;Plugin Redistribution&lt;/a&gt; section for details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When users import a newer version of your plugin, files referenced by the older version&#39;s manifest are cleaned up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The latest version of the plugin will be selected when users import multiple packages that include your plugin, assuming the steps in &lt;a href=&#34;https://raw.githubusercontent.com/googlesamples/unity-jar-resolver/master/#plugin-redistribution&#34;&gt;Plugin Redistribution&lt;/a&gt; are followed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Many Unity plugins have dependencies upon Android specific libraries, iOS CocoaPods, and sometimes have transitive dependencies upon other Unity plugins. This causes the following problems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrating platform specific (e.g Android and iOS) libraries within a Unity project can be complex and a burden on a Unity plugin maintainer.&lt;/li&gt; &#xA; &lt;li&gt;The process of resolving conflicting dependencies on platform specific libraries is pushed to the developer attempting to use a Unity plugin. The developer trying to use your plugin is very likely to give up when faced with Android or iOS specific build errors.&lt;/li&gt; &#xA; &lt;li&gt;The process of resolving conflicting Unity plugins (due to shared Unity plugin components) is pushed to the developer attempting to use your Unity plugin. In an effort to resolve conflicts, the developer will very likely attempt to resolve problems by deleting random files in your plugin, report bugs when that doesn&#39;t work and finally give up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;EDM4U provides solutions for each of these problems.&lt;/p&gt; &#xA;&lt;h3&gt;Android Dependency Management&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;Android Resolver&lt;/em&gt; component of this plugin will download and integrate Android library dependencies and handle any conflicts between plugins that share the same dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Without the Android Resolver, typically Unity plugins bundle their AAR and JAR dependencies, e.g. a Unity plugin &lt;code&gt;SomePlugin&lt;/code&gt; that requires the Google Play Games Android library would redistribute the library and its transitive dependencies in the folder &lt;code&gt;SomePlugin/Android/&lt;/code&gt;. When a user imports &lt;code&gt;SomeOtherPlugin&lt;/code&gt; that includes the same libraries (potentially at different versions) in &lt;code&gt;SomeOtherPlugin/Android/&lt;/code&gt;, the developer using &lt;code&gt;SomePlugin&lt;/code&gt; and &lt;code&gt;SomeOtherPlugin&lt;/code&gt; will see an error when building for Android that can be hard to interpret.&lt;/p&gt; &#xA;&lt;p&gt;Using the Android Resolver to manage Android library dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solves Android library conflicts between plugins.&lt;/li&gt; &#xA; &lt;li&gt;Handles all of the various processing steps required to use Android libraries (AARs, JARs) in Unity 4.x and above projects. Almost all versions of Unity have - at best - partial support for AARs.&lt;/li&gt; &#xA; &lt;li&gt;(Experimental) Supports minification of included Java components without exporting a project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iOS Dependency Management&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;iOS Resolver&lt;/em&gt; component of this plugin integrates with &lt;a href=&#34;https://cocoapods.org/&#34;&gt;CocoaPods&lt;/a&gt; to download and integrate iOS libraries and frameworks into the Xcode project Unity generates when building for iOS. Using CocoaPods allows multiple plugins to utilize shared components without forcing developers to fix either duplicate or incompatible versions of libraries included through multiple Unity plugins in their project.&lt;/p&gt; &#xA;&lt;h3&gt;Package Manager Registry Setup&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.unity3d.com/Manual/Packages.html&#34;&gt;Package Manager&lt;/a&gt; (PM) makes use of &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; registry servers for package hosting and provides ways to discover, install, upgrade and uninstall packages. This makes it easier for developers to manage plugins within their projects.&lt;/p&gt; &#xA;&lt;p&gt;However, installing additional package registries requires a few manual steps that can potentially be error prone. The &lt;em&gt;Package Manager Resolver&lt;/em&gt; component of this plugin integrates with &lt;a href=&#34;https://docs.unity3d.com/Manual/Packages.html&#34;&gt;PM&lt;/a&gt; to provide a way to auto-install PM package registries when a &lt;code&gt;.unitypackage&lt;/code&gt; is installed which allows plugin maintainers to ship a &lt;code&gt;.unitypackage&lt;/code&gt; that can provide access to their own PM registry server to make it easier for developers to manage their plugins.&lt;/p&gt; &#xA;&lt;h3&gt;Unity Plugin Version Management&lt;/h3&gt; &#xA;&lt;p&gt;Finally, the &lt;em&gt;Version Handler&lt;/em&gt; component of this plugin simplifies the process of managing transitive dependencies of Unity plugins and each plugin&#39;s upgrade process.&lt;/p&gt; &#xA;&lt;p&gt;For example, without the Version Handler plugin, if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unity plugin &lt;code&gt;SomePlugin&lt;/code&gt; includes &lt;code&gt;EDM4U&lt;/code&gt; plugin at version 1.1.&lt;/li&gt; &#xA; &lt;li&gt;Unity plugin &lt;code&gt;SomeOtherPlugin&lt;/code&gt; includes &lt;code&gt;EDM4U&lt;/code&gt; plugin at version 1.2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The version of &lt;code&gt;EDM4U&lt;/code&gt; included in the developer&#39;s project depends upon the order the developer imports &lt;code&gt;SomePlugin&lt;/code&gt; or &lt;code&gt;SomeOtherPlugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This results in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;EDM4U&lt;/code&gt; at version 1.2, if &lt;code&gt;SomePlugin&lt;/code&gt; is imported then &lt;code&gt;SomeOtherPlugin&lt;/code&gt; is imported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EDM4U&lt;/code&gt; at version 1.1, if &lt;code&gt;SomeOtherPlugin&lt;/code&gt; is imported then &lt;code&gt;SomePlugin&lt;/code&gt; is imported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Version Handler solves the problem of managing transitive dependencies by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specifying a set of packaging requirements that enable a plugin at different versions to be imported into a Unity project.&lt;/li&gt; &#xA; &lt;li&gt;Providing activation logic that selects the latest version of a plugin within a project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When using the Version Handler to manage &lt;code&gt;EDM4U&lt;/code&gt; included in &lt;code&gt;SomePlugin&lt;/code&gt; and &lt;code&gt;SomeOtherPlugin&lt;/code&gt;, from the prior example, version 1.2 will always be the version activated in a developer&#39;s Unity project.&lt;/p&gt; &#xA;&lt;p&gt;Plugin creators are encouraged to adopt this library to ease integration for their customers. For more information about integrating EDM4U into your own plugin, see the &lt;a href=&#34;https://raw.githubusercontent.com/googlesamples/unity-jar-resolver/master/#plugin-redistribution&#34;&gt;Plugin Redistribution&lt;/a&gt; section of this document.&lt;/p&gt; &#xA;&lt;h2&gt;Analytics&lt;/h2&gt; &#xA;&lt;p&gt;The External Dependency Manager for Unity plugin by default logs usage to Google Analytics. The purpose of the logging is to quantitatively measure the usage of functionality, to gather reports on integration failures and to inform future improvements to the developer experience of the External Dependency Manager plugin. Note that the analytics collected are limited to the scope of the EDM4U pluginâ€™s usage.&lt;/p&gt; &#xA;&lt;p&gt;For details of what is logged, please refer to the usage of &lt;code&gt;EditorMeasurement.Report()&lt;/code&gt; in the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Plugin Redistribution&lt;/h2&gt; &#xA;&lt;p&gt;If you are a package maintainer and your package depends on EDM4U, it is highly recommended to use the UPM format and add EDM4U as a dependency. If you must include it in your &lt;code&gt;.unitypackage&lt;/code&gt;, redistributing &lt;code&gt;EDM4U&lt;/code&gt; inside your own plugin might ease the integration process for your users.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to redistribute &lt;code&gt;EDM4U&lt;/code&gt; inside your plugin, you &lt;strong&gt;must&lt;/strong&gt; follow these steps when importing the &lt;code&gt;external-dependency-manager-*.unitypackage&lt;/code&gt;, and when exporting your own plugin package:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Import the &lt;code&gt;external-dependency-manager-*.unitypackage&lt;/code&gt; into your plugin project by &lt;a href=&#34;https://docs.unity3d.com/Manual/CommandLineArguments.html&#34;&gt;running Unity from the command line&lt;/a&gt;, ensuring that you add the &lt;code&gt;-gvh_disable&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;Export your plugin by &lt;a href=&#34;https://docs.unity3d.com/Manual/CommandLineArguments.html&#34;&gt;running Unity from the command line&lt;/a&gt;, ensuring that you: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Include the contents of the &lt;code&gt;Assets/PlayServicesResolver&lt;/code&gt; and &lt;code&gt;Assets/ExternalDependencyManager&lt;/code&gt; directory.&lt;/li&gt; &#xA;   &lt;li&gt;Add the &lt;code&gt;-gvh_disable&lt;/code&gt; option.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You &lt;strong&gt;must&lt;/strong&gt; specify the &lt;code&gt;-gvh_disable&lt;/code&gt; option in order for the Version Handler to work correctly!&lt;/p&gt; &#xA;&lt;p&gt;For example, the following command will import the &lt;code&gt;external-dependency-manager-1.2.46.0.unitypackage&lt;/code&gt; into the project &lt;code&gt;MyPluginProject&lt;/code&gt; and export the entire Assets folder to &lt;code&gt;MyPlugin.unitypackage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Unity -gvh_disable \&#xA;      -batchmode \&#xA;      -importPackage external-dependency-manager-1.2.46.0.unitypackage \&#xA;      -projectPath MyPluginProject \&#xA;      -exportPackage Assets MyPlugin.unitypackage \&#xA;      -quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Background&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;Version Handler&lt;/em&gt; component relies upon deferring the load of editor DLLs so that it can run first and determine the latest version of a plugin component to activate. The build of &lt;code&gt;EDM4U&lt;/code&gt; plugin has Unity asset metadata that is configured so that the editor components are not initially enabled when it&#39;s imported into a Unity project. To maintain this configuration when importing the &lt;code&gt;external-dependency-manager.unitypackage&lt;/code&gt; into a Unity plugin project, you &lt;em&gt;must&lt;/em&gt; specify the command line option &lt;code&gt;-gvh_disable&lt;/code&gt; which will prevent the Version Handler component from running and changing the Unity asset metadata.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;To build this plugin from source you need the following tools installed: * Unity 2021 and below (with iOS and Android modules installed) * Java 11&lt;/p&gt; &#xA;&lt;p&gt;You can build the plugin by running the following from your shell (Linux / OSX):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew build&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew.bat build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Java 11 is not your default Java command, add &lt;code&gt;-Dorg.gradle.java.home=&amp;lt;PATH_TO_JAVA_HOME&amp;gt;&lt;/code&gt; to the command above.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;You can run the tests by running the following from your shell (Linux / OSX):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew.bat test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following properties can be set to narrow down the tests to run or change the test run behavior.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;INTERACTIVE_MODE_TESTS_ENABLED&lt;/code&gt; - Default to &lt;code&gt;1&lt;/code&gt;. Set to &lt;code&gt;1&lt;/code&gt; to enable interactive mode tests, which requires GPU on the machine. Otherwise, only run tests in the batch mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INCLUDE_TEST_TYPES&lt;/code&gt; - Default to empty string, which means to include every type of the test. To narrow down the types of test to run, set this properties with a list of case-insensitive type strings separated by comma. For instance, &lt;code&gt;-PINCLUDE_TEST_TYPES=&#34;Python,NUnit&#34;&lt;/code&gt; means to include only Python tests and NUnit tests. See &lt;code&gt;TestTypeEnum&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; for available options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXCLUDE_TEST_TYPES&lt;/code&gt; - Default to empty string, which means to exclude none. To add types of tests to exclude, set this properties with a list of case-insensitive type strings separated by comma. For instance, &lt;code&gt;-PEXCLUDE_TEST_TYPES=&#34;Python,NUnit&#34;&lt;/code&gt; means to exclude Python tests and NUnit tests. See &lt;code&gt;TestTypeEnum&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; for available options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INCLUDE_TEST_MODULES&lt;/code&gt; - Default to empty string, which means to include the tests for every modules. To narrow down modules to test, set this properties with a list of case-insensitive module strings separated by comma. For instance, &lt;code&gt;-PINCLUDE_TEST_MODULES=&#34;Tool,AndroidResolver&#34;&lt;/code&gt; means to run tests for tools and Android Resolver only. See &lt;code&gt;TestModuleEnum&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; for available options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXCLUDE_TEST_MODULES&lt;/code&gt; - Default to empty string, which means to exclude none. To add modules to exclude, set this properties with a list of case-insensitive module strings separated by comma. For instance, &lt;code&gt;-PEXCLUDE_TEST_MODULES=&#34;Tool,AndroidResolver&#34;&lt;/code&gt; means to run tests for any modules other than tools and Android Resolver. See &lt;code&gt;TestModuleEnum&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt; for available options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXCLUDE_TESTS&lt;/code&gt; - Default to empty string, which means to exclude none. To add tests to exclude, set this properties with a list of case-insensitive test names separated by comma. For instance, &lt;code&gt;-PEXCLUDE_TESTS=&#34;testGenGuids,testDownloadArtifacts&#34;&lt;/code&gt; means to run tests except the tests with name of &lt;code&gt;testGenGuids&lt;/code&gt; and &lt;code&gt;testDownloadArtifacts&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONTINUE_ON_FAIL_FOR_TESTS_ENABLED&lt;/code&gt; - Default to &lt;code&gt;1&lt;/code&gt;. Set to &lt;code&gt;1&lt;/code&gt; to continue running the next test when the current one fails. Otherwise, the build script stops whenever any test fails.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, by running the following command, it only runs the Unity integration tests that does not requires GPU, but exclude tests for Android Resolver module and iOS Resolver module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./gradlew test \&#xA;  -PINTERACTIVE_MODE_TESTS_ENABLED=0 \&#xA;  -PINCLUDE_TEST_TYPES=&#34;Integration&#34; \&#xA;  -PEXCLUDE_TEST_MODULES=&#34;AndroidResolver,iOSResolver&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;p&gt;Each time a new build of this plugin is checked into the source tree you need to do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bump the plugin version variable &lt;code&gt;pluginVersion&lt;/code&gt; in &lt;code&gt;build.gradle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;CHANGELOG.md&lt;/code&gt; with the new version number and changes included in the release.&lt;/li&gt; &#xA; &lt;li&gt;Build the release using &lt;code&gt;./gradlew release&lt;/code&gt; which performs the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Updates &lt;code&gt;external-dependency-manager-*.unitypackage&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Copies the unpacked plugin to the &lt;code&gt;exploded&lt;/code&gt; directory.&lt;/li&gt; &#xA;   &lt;li&gt;Updates template metadata files in the &lt;code&gt;plugin&lt;/code&gt; directory. The GUIDs of all asset metadata is modified due to the version number change. Each file within the plugin is versioned to allow multiple versions of the plugin to be imported into a Unity project which allows the most recent version to be activated by the Version Handler component.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create release commit using &lt;code&gt;./gradlew gitCreateReleaseCommit&lt;/code&gt; which performs &lt;code&gt;git commit -a -m &#34;description from CHANGELOG.md&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once the release commit is merge, tag the release using &lt;code&gt;./gradlew gitTagRelease&lt;/code&gt; which performs the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git tag -a pluginVersion -m &#34;version RELEASE&#34;&lt;/code&gt; to tag the release.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update tags on remote branch using &lt;code&gt;git push --tag REMOTE HEAD:master&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>