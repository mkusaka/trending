<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:35:27Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PrismLibrary/Prism</title>
    <updated>2022-09-18T01:35:27Z</updated>
    <id>tag:github.com,2022-09-18:/PrismLibrary/Prism</id>
    <link href="https://github.com/PrismLibrary/Prism" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Xamarin Forms, and Uno / Win UI Applications..&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prism&lt;/h1&gt; &#xA;&lt;p&gt;Prism is a framework for building loosely coupled, maintainable, and testable XAML applications in WPF, Xamarin Forms, Uno Platform and WinUI. Separate releases are available for each platform and those will be developed on independent timelines. Prism provides an implementation of a collection of design patterns that are helpful in writing well-structured and maintainable XAML applications, including MVVM, dependency injection, commands, EventAggregator, and others. Prism&#39;s core functionality is a shared code base supported in .NET Standard 2.0, .NET Framework 4.5 / 4.7. Those things that need to be platform specific are implemented in the respective libraries for the target platform. Prism also provides great integration of these patterns with the target platform. For example, Prism for Xamarin Forms allows you to use an abstraction for navigation that is unit testable, but that layers on top of the platform concepts and APIs for navigation so that you can fully leverage what the platform itself has to offer, but done in the MVVM way.&lt;/p&gt; &#xA;&lt;h2&gt;Help Support Prism&lt;/h2&gt; &#xA;&lt;p&gt;As most of you know, it takes a lot of time and effort for our small team to manage and maintain Prism in our spare time. Even though Prism is open source and hosted on GitHub, there are a number of costs associated with maintaining a project such as Prism. Please be sure to Star the Prism repo and help sponsor Dan and Brian on GitHub. As a bonus GitHub sponsors get access to Sponsor Connect where you can access exclusive training content, all Prism CI builds, and a Sponsor Only Discord with Brian and Dan!&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget both Brian and Dan have content on YouTube and stream there from time to time. Be sure to subscribe to their channels and turn on notifications so you know when they do a Live Stream!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Sponsor&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Twitter&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;YouTube&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Brian Lagunas&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://xam.dev/sponsor-prism-brian&#34;&gt;&lt;img src=&#34;https://dansiegelgithubsponsors.blob.core.windows.net/images/octosponsor.png&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/brianlagunas&#34;&gt;&lt;img src=&#34;https://dansiegelgithubsponsors.blob.core.windows.net/images/twitter.png&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;span style=&#34;font-size:9px&#34;&gt;Follow&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtube.com/brianlagunas&#34;&gt;&lt;img src=&#34;https://dansiegelgithubsponsors.blob.core.windows.net/images/youtube.png&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;span style=&#34;font-size:9px&#34;&gt;Subcribe &amp;amp; Ring the Bell&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dan Siegel&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://xam.dev/sponsor-prism-dan&#34;&gt;&lt;img src=&#34;https://dansiegelgithubsponsors.blob.core.windows.net/images/octosponsor.png&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://twitter.com/DanJSiegel&#34;&gt;&lt;img src=&#34;https://dansiegelgithubsponsors.blob.core.windows.net/images/twitter.png&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;span style=&#34;font-size:9px&#34;&gt;Follow&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://youtube.com/dansiegel&#34;&gt;&lt;img src=&#34;https://dansiegelgithubsponsors.blob.core.windows.net/images/youtube.png&#34; alt=&#34;YouTube&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;span style=&#34;font-size:9px&#34;&gt;Subscribe &amp;amp; Ring the Bell&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Full Build&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/prismlibrary/Prism/_build/latest?definitionId=9&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/prismlibrary/Prism/_apis/build/status/Prism-CI?branchName=master&amp;amp;stageName=Build%20Prism%20Library&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prism.Core&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/prismlibrary/Prism/_build/latest?definitionId=9&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/prismlibrary/Prism/_apis/build/status/Prism-CI?branchName=master&amp;amp;stageName=Build%20%26%20Test&amp;amp;jobName=Prism.Core&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prism.Wpf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/prismlibrary/Prism/_build/latest?definitionId=9&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/prismlibrary/Prism/_apis/build/status/Prism-CI?branchName=master&amp;amp;stageName=Build%20%26%20Test&amp;amp;jobName=Prism.Wpf&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prism.Forms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/prismlibrary/Prism/_build/latest?definitionId=9&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/prismlibrary/Prism/_apis/build/status/Prism-CI?branchName=master&amp;amp;stageName=Build%20%26%20Test&amp;amp;jobName=Prism.Forms&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prism.Uno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/prismlibrary/Prism/_build/latest?definitionId=9&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/prismlibrary/Prism/_apis/build/status/Prism-CI?branchName=master&amp;amp;stageName=Build%20%26%20Test&amp;amp;jobName=Prism.Uno&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation is maintained in &lt;a href=&#34;https://github.com/PrismLibrary/Prism-Documentation&#34;&gt;the Prism-Documentation repo&lt;/a&gt; under /docs and can be found in a readable format on &lt;a href=&#34;http://prismlibrary.com/docs/&#34;&gt;the website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For general questions and support, post your questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/prism&#34;&gt;StackOverflow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can enter bugs and feature requests in our &lt;a href=&#34;https://github.com/PrismLibrary/Prism/issues/new/choose&#34;&gt;Issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://avantipoint.com/contact?utm_source=github&amp;amp;utm_medium=prism-readme&#34;&gt;Enterprise Support&lt;/a&gt; is available exclusively from AvantiPoint, and helps to support this project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Videos &amp;amp; Training&lt;/h2&gt; &#xA;&lt;p&gt;By watching our courses, not only do you help support the project financially, but you might also learn something along the way. We believe this is a win-win for everyone.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/bE3rB&#34;&gt;Introduction to Prism for WPF (NEW)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/W1Dz3&#34;&gt;Introduction to Prism (Legacy)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/z7avm&#34;&gt;What&#39;s New in Prism 5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/XVxR5&#34;&gt;Prism Problems &amp;amp; Solutions: Showing Multiple Shells&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/B6X99&#34;&gt;Prism Problems &amp;amp; Solutions: Mastering TabControl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/GvjkE&#34;&gt;Prism Problems &amp;amp; Solutions: Loading Modules Based on User Roles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pluralsight.pxf.io/a01zj&#34;&gt;Prism Problems &amp;amp; Solutions: Loading Dependent Views&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We appreciate your support.&lt;/p&gt; &#xA;&lt;h2&gt;NuGet Packages&lt;/h2&gt; &#xA;&lt;p&gt;Official Prism releases are available on NuGet. Prism packages are also available on the SponsorConnect feed which will be updated with each merged PR. If you want to take advantage of a new feature as soon as it&#39;s merged into the code base, or if there is a critical bug you need fixed we invite you to try the packages on this feed. The SponsorConnect package feed is available to Sponsors only.&lt;/p&gt; &#xA;&lt;h3&gt;Core Packages&lt;/h3&gt; &#xA;&lt;p&gt;These are the base packages for each platform, together with the Prism&#39;s Core assembly as a cross-platform PCL.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;NuGet&lt;/th&gt; &#xA;   &lt;th&gt;SponsorConnect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cross Platform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Core/&#34;&gt;Prism.Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Core/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Core.svg?sanitize=true&#34; alt=&#34;CoreNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Core%2Fvpre&#34; alt=&#34;CoreSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WPF&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Wpf/&#34;&gt;Prism.Wpf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Wpf/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Wpf.svg?sanitize=true&#34; alt=&#34;WpfNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Wpf&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Wpf%2Fvpre&#34; alt=&#34;WpfSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xamarin.Forms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Forms/&#34;&gt;Prism.Forms&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Forms/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Forms.svg?sanitize=true&#34; alt=&#34;FormsNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Forms&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Forms%2Fvpre&#34; alt=&#34;FormsSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Uno Platform and WinUI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Uno/&#34;&gt;Prism.Uno&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Uno/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Uno.svg?sanitize=true&#34; alt=&#34;UnoNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Uno&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Uno%2Fvpre&#34; alt=&#34;UnoSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Container-specific packages&lt;/h3&gt; &#xA;&lt;p&gt;Each supported IoC container has its own package assisting in the setup and usage of that container together with Prism. The assembly is named using this convention: Prism.&lt;em&gt;Container.Platform&lt;/em&gt;.dll, e.g. &lt;strong&gt;Prism.Unity.Wpf.dll&lt;/strong&gt;. Starting with version 7.0, Prism is moving to separate packages for each platform. Be sure to install the package for the Container and the Platform of your choice.&lt;/p&gt; &#xA;&lt;h4&gt;WPF&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;NuGet&lt;/th&gt; &#xA;   &lt;th&gt;SponsorConnect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.DryIoc/&#34;&gt;Prism.DryIoc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.DryIoc/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.DryIoc.svg?sanitize=true&#34; alt=&#34;DryIocWpfNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.DryIoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.DryIoc%2Fvpre&#34; alt=&#34;DryIocWpfSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Unity/&#34;&gt;Prism.Unity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Unity/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Unity.svg?sanitize=true&#34; alt=&#34;UnityWpfNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Unity&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Unity%2Fvpre&#34; alt=&#34;UnityWpfSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Xamarin Forms&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;NuGet&lt;/th&gt; &#xA;   &lt;th&gt;SponsorConnect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.DryIoc.Forms/&#34;&gt;Prism.DryIoc.Forms&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.DryIoc.Forms/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.DryIoc.Forms.svg?sanitize=true&#34; alt=&#34;DryIocFormsNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.DryIoc.Forms&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.DryIoc.Forms%2Fvpre&#34; alt=&#34;DryIocFormsSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Unity.Forms/&#34;&gt;Prism.Unity.Forms&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Unity.Forms/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Unity.Forms.svg?sanitize=true&#34; alt=&#34;UnityFormsNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Unity.Forms&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Unity.Forms%2Fvpre&#34; alt=&#34;UnityFormsSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Forms.Regions/&#34;&gt;Prism.Forms.Regions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Forms.Regions/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Forms.Regions.svg?sanitize=true&#34; alt=&#34;PrismFormsRegionsNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Forms.Regions&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Forms.Regions%2Fvpre&#34; alt=&#34;PrismFormsRegionsSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Uno Platform&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;NuGet&lt;/th&gt; &#xA;   &lt;th&gt;SponsorConnect&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.DryIoc.Uno/&#34;&gt;Prism.DryIoc.Uno&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.DryIoc.Uno/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.DryIoc.Uno.svg?sanitize=true&#34; alt=&#34;DryIocUnoPlatformNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.DryIoc.Uno&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.DryIoc.Uno%2Fvpre&#34; alt=&#34;DryIocUnoPlatformSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Unity.Uno/&#34;&gt;Prism.Unity.Uno&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Prism.Unity.Uno/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Prism.Unity.Uno.svg?sanitize=true&#34; alt=&#34;UnityUnoPlatformNuGetShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/Prism.Unity.Uno&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https%3A%2F%2Fsponsorconnect.dev%2Fshield%2FPrism.Unity.Uno%2Fvpre&#34; alt=&#34;UnityUnoPlatformSponsorConnectShield&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PrismLibrary/Prism/master/images/NuGetPackageTree.png&#34; alt=&#34;NuGet package tree&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A detailed overview of each assembly per package is available &lt;a href=&#34;http://prismlibrary.github.io/docs/getting-started/NuGet-Packages.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prism Template Pack&lt;/h2&gt; &#xA;&lt;p&gt;Prism integrates with Visual Studio to enable a highly productive developer workflow for creating WPF, and native iOS and Android applications using Xamarin.Forms. Jump start your Prism apps with code snippets, item templates, and project templates for your IDE of choice.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The Prism Templates are open source and available at&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/PrismLibrary/Prism.Templates&#34;&gt;https://github.com/PrismLibrary/Prism.Templates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Visual Studio Gallery&lt;/h3&gt; &#xA;&lt;p&gt;The Prism Template Pack is available on the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=BrianLagunas.PrismTemplatePack&#34;&gt;Visual Studio Gallery&lt;/a&gt;. To install, just go to Visual Studio -&amp;gt; Tools -&amp;gt; Extensions and Updates... then search for &lt;strong&gt;Prism&lt;/strong&gt; in the online gallery:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PrismLibrary/Prism/master/images/prism-visual-studio-gallery.jpg&#34; alt=&#34;Visual Studio Gallery&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;There are certain things that cannot be added directly into Prism for various reasons. To handle these common tasks such as supporting PopupPage&#39;s in Xamarin Forms, there are Prism Plugins. You can find a number of Plugins available on NuGet from our maintainer &lt;a href=&#34;https://twitter.com/DanJSiegel&#34;&gt;@DanJSiegel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dansiegel/Prism.Plugin.Popups&#34;&gt;Prism.Plugin.Popups&lt;/a&gt; (Forms Only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FileOnQ/Prism.Popups.XCT&#34;&gt;Prism.Popups.XCT&lt;/a&gt; (Forms Only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds support for native popups using Xamarin Community Toolkits Popup API&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dansiegel/Prism.Plugin.Logging&#34;&gt;Prism.Plugin.Logging&lt;/a&gt; (Works on all Platforms) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds support for Syslog, Loggly, Graylog, Application Insights, &amp;amp; App Center&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dansiegel/Prism.Container.Extensions&#34;&gt;Prism.Container.Extensions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds advanced Container Registration abstractions&lt;/li&gt; &#xA;   &lt;li&gt;Adds DryIoc &amp;amp; Unity ContainerExtension with support for Microsoft.DependencyInjection.Extensions. Uses a singleton pattern to allow initialization from a native platform&lt;/li&gt; &#xA;   &lt;li&gt;Provides an extended PrismApplication with additional error handling and platform specifics support for Prism.Forms&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sponsorconnect.dev/nuget/package/prism.magician&#34;&gt;Prism.Magician&lt;/a&gt; (Works with ALL Platforms) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Magician works to reduce the amount of code you need to write with a collection of intelligent code generators that evaluate your codebase and references&lt;/li&gt; &#xA;   &lt;li&gt;It additionally provides a series of Roslyn Analyzers to help prevent you from making common mistakes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This package is only available to Dan&#39;s &lt;a href=&#34;https://xam.dev/sponsor-prism-dan&#34;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&#34;https://avantipoint.com/contact&#34;&gt;Enterprise Support&lt;/a&gt; customers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;For stable samples be sure to check out the samples repo for the platform you are most interested in.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PrismLibrary/Prism-Samples-Wpf&#34;&gt;Prism for WPF Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PrismLibrary/Prism-Samples-Forms&#34;&gt;Prism for Xamarim.Forms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PrismLibrary/Prism/master/#&#34;&gt;Prism for Uno Platform&lt;/a&gt; (Coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We strongly encourage you to get involved and help us evolve the code base.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can see what our expectations are for pull requests &lt;a href=&#34;https://github.com/PrismLibrary/Prism/raw/master/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jstedfast/MailKit</title>
    <updated>2022-09-18T01:35:27Z</updated>
    <id>tag:github.com,2022-09-18:/jstedfast/MailKit</id>
    <link href="https://github.com/jstedfast/MailKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform .NET library for IMAP, POP3, and SMTP.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MailKit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/jstedfast/MailKit?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/jstedfast/MailKit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Latest Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Latest Build&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;MimeKit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/MimeKit&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/MimeKit&#34; alt=&#34;NuGet Badge MimeKit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.myget.org/feed/mimekit/package/nuget/MimeKit&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/mimekit/MimeKit&#34; alt=&#34;MyGet Badge MimeKit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;MailKit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/MailKit&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/MailKit&#34; alt=&#34;NuGet Badge MailKit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.myget.org/feed/mimekit/package/nuget/MailKit&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/mimekit/MailKit&#34; alt=&#34;MyGet Badge MailKit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Build Status&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code Coverage&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Static Analysis&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Linux/Mac&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jstedfast/MailKit/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/jstedfast/MailKit/actions/workflows/main.yml/badge.svg?event=push&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://coveralls.io/r/jstedfast/MailKit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/jstedfast/MailKit/badge.svg?branch=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/3202&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/3202/badge.svg?sanitize=true&#34; alt=&#34;Static Analysis&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jstedfast/MailKit/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/jstedfast/MailKit/actions/workflows/main.yml/badge.svg?event=push&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://coveralls.io/r/jstedfast/MailKit?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/jstedfast/MailKit/badge.svg?branch=master&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/3202&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/3202/badge.svg?sanitize=true&#34; alt=&#34;Static Analysis&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;What is MailKit?&lt;/h2&gt; &#xA;&lt;p&gt;MailKit is a cross-platform mail client library built on top of &lt;a href=&#34;https://github.com/jstedfast/MimeKit&#34;&gt;MimeKit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;MailKit is a personal open source project that I have put thousands of hours into perfecting with the goal of making it the very best email framework for .NET. I need your help to achieve this.&lt;/p&gt; &#xA;&lt;p&gt;Donating helps pay for things such as web hosting, domain registration and licenses for developer tools such as a performance profiler, memory profiler, a static code analysis tool, and more. It also helps motivate me to continue working on the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/jstedfast&#34; _target=&#34;blank&#34;&gt;&lt;img alt=&#34;Click here to lend your support to MailKit by making a donation!&#34; src=&#34;https://www.paypal.com/en_US/i/btn/x-click-but21.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SASL Authentication &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2195&#34;&gt;CRAM-MD5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2831&#34;&gt;DIGEST-MD5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/draft-murchison-sasl-login-00&#34;&gt;LOGIN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://davenport.sourceforge.net/ntlm.html&#34;&gt;NTLM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2595&#34;&gt;PLAIN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5802&#34;&gt;SCRAM-SHA-1[-PLUS]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5802&#34;&gt;SCRAM-SHA-256[-PLUS]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/draft-melnikov-scram-sha-512-01&#34;&gt;SCRAM-SHA-512[-PLUS]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7628&#34;&gt;OAUTHBEARER&lt;/a&gt; (partial support - you need to fetch the auth tokens yourself)&lt;/li&gt; &#xA;   &lt;li&gt;XOAUTH2 (partial support - you need to fetch the auth tokens yourself)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Proxy Support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://www.openssh.com/txt/socks4.protocol&#34;&gt;SOCKS4/4a&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1928&#34;&gt;SOCKS5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2616&#34;&gt;HTTP/S&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SMTP Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports all of the SASL mechanisms listed above.&lt;/li&gt; &#xA;   &lt;li&gt;Supports SSL-wrapped connections via the &#34;smtps&#34; protocol.&lt;/li&gt; &#xA;   &lt;li&gt;Supports client SSL/TLS certificates.&lt;/li&gt; &#xA;   &lt;li&gt;Supports the following extensions: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1870&#34;&gt;SIZE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1891&#34;&gt;DSN&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2554&#34;&gt;AUTH&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2821&#34;&gt;8BITMIME&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2920&#34;&gt;PIPELINING&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3030&#34;&gt;BINARYMIME&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3030&#34;&gt;CHUNKING&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3207&#34;&gt;STARTTLS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6531&#34;&gt;SMTPUTF8&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;All APIs are cancellable.&lt;/li&gt; &#xA;   &lt;li&gt;Async APIs are available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;POP3 Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports all of the SASL mechanisms listed above.&lt;/li&gt; &#xA;   &lt;li&gt;Also supports authentication via &lt;a href=&#34;https://tools.ietf.org/html/rfc1939#page-15&#34;&gt;APOP&lt;/a&gt; and &lt;code&gt;USER&lt;/code&gt;/&lt;code&gt;PASS&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Supports SSL-wrapped connections via the &#34;pops&#34; protocol.&lt;/li&gt; &#xA;   &lt;li&gt;Supports client SSL/TLS certificates.&lt;/li&gt; &#xA;   &lt;li&gt;Supports the following extensions: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1939#page-11&#34;&gt;TOP&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc1939#page-12&#34;&gt;UIDL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2449&#34;&gt;EXPIRE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2449&#34;&gt;LOGIN-DELAY&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2449&#34;&gt;PIPELINING&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2449&#34;&gt;SASL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2595&#34;&gt;STLS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6856&#34;&gt;UTF8&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6856&#34;&gt;UTF8=USER&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6856&#34;&gt;LANG&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;All APIs are cancellable.&lt;/li&gt; &#xA;   &lt;li&gt;Async APIs are available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;IMAP4 Client &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports all of the SASL mechanisms listed above.&lt;/li&gt; &#xA;   &lt;li&gt;Supports SSL-wrapped connections via the &#34;imaps&#34; protocol.&lt;/li&gt; &#xA;   &lt;li&gt;Supports client SSL/TLS certificates.&lt;/li&gt; &#xA;   &lt;li&gt;Supports the following extensions: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4314&#34;&gt;ACL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2087&#34;&gt;QUOTA&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2088&#34;&gt;LITERAL+&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2177&#34;&gt;IDLE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2342&#34;&gt;NAMESPACE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc2971&#34;&gt;ID&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3348&#34;&gt;CHILDREN&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3501&#34;&gt;LOGINDISABLED&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3501&#34;&gt;STARTTLS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3502&#34;&gt;MULTIAPPEND&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc3691&#34;&gt;UNSELECT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4315&#34;&gt;UIDPLUS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4551&#34;&gt;CONDSTORE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4731&#34;&gt;ESEARCH&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4959&#34;&gt;SASL-IR&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4978&#34;&gt;COMPRESS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5032&#34;&gt;WITHIN&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5161&#34;&gt;ENABLE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5162&#34;&gt;QRESYNC&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5256&#34;&gt;SORT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5256&#34;&gt;THREAD&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5257&#34;&gt;ANNOTATE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5258&#34;&gt;LIST-EXTENDED&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5267&#34;&gt;ESORT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5464&#34;&gt;METADATA / METADATA-SERVER&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5465&#34;&gt;NOTIFY&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5466&#34;&gt;FILTERS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5819&#34;&gt;LIST-STATUS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5957&#34;&gt;SORT=DISPLAY&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6154&#34;&gt;SPECIAL-USE / CREATE-SPECIAL-USE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6203&#34;&gt;SEARCH=FUZZY&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6851&#34;&gt;MOVE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc6855&#34;&gt;UTF8=ACCEPT / UTF8=ONLY&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7888&#34;&gt;LITERAL-&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc7889&#34;&gt;APPENDLIMIT&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc8438&#34;&gt;STATUS=SIZE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc8474&#34;&gt;OBJECTID&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc8508&#34;&gt;REPLACE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc8514&#34;&gt;SAVEDATE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developers.google.com/gmail/imap_extensions&#34;&gt;XLIST&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developers.google.com/gmail/imap_extensions&#34;&gt;X-GM-EXT1&lt;/a&gt; (X-GM-MSGID, X-GM-THRID, X-GM-RAW and X-GM-LABELS)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;All APIs are cancellable.&lt;/li&gt; &#xA;   &lt;li&gt;Async APIs are available.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Client-side sorting and threading of messages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;The main goal of this project is to provide the .NET world with robust, fully featured and RFC-compliant SMTP, POP3, and IMAP client implementations.&lt;/p&gt; &#xA;&lt;p&gt;All of the other .NET IMAP client implementations that I could find suffer from major architectural problems such as ignoring unexpected untagged responses, assuming that literal string tokens will never be used for anything other than message bodies (when in fact they could be used for pretty much any string token in a response), assuming that the way to find the end of a message body in a FETCH response is by scanning for &lt;code&gt;&#34;) UID&#34;&lt;/code&gt;, and not properly handling mailbox names with international characters to simply name a few.&lt;/p&gt; &#xA;&lt;p&gt;IMAP requires a LOT of time spent laboriously reading and re-reading the IMAP specifications (as well as the MIME specifications) to understand all of the subtleties of the protocol and most (all?) of the other Open Source .NET IMAP libraries, at least, were written by developers that only cared enough that it worked for their simple needs. There&#39;s nothing necessarily wrong with doing that, but the web is full of half-working, non-RFC-compliant IMAP implementations out there that it was finally time for a carefully designed and implemented IMAP client library to be written.&lt;/p&gt; &#xA;&lt;p&gt;For POP3, libraries such as OpenPOP.NET are actually fairly decent, although the MIME parser is far too strict - throwing exceptions any time it encounters a Content-Type or Content-Disposition parameter that it doesn&#39;t already know about, which, if you read over the mailing-list, is a problem that OpenPOP.NET users are constantly running into. MailKit&#39;s Pop3Client, of course, doesn&#39;t have this problem. It also parses messages directly from the socket instead of downloading the message into a large string buffer before parsing it, so you&#39;ll probably find that not only is MailKit faster (MailKit&#39;s MIME parser, &lt;a href=&#34;https://github.com/jstedfast/MimeKit&#34;&gt;MimeKit&lt;/a&gt;, parses messages from disk 25x faster than OpenPOP.NET&#39;s parser), but also uses far less memory.&lt;/p&gt; &#xA;&lt;p&gt;For SMTP, most developers use System.Net.Mail.SmtpClient which suits their needs more-or-less satisfactorily and so is probably not high on their list of needs. However, the SmtpClient implementation included with MailKit is a much better option if cross-platform support is needed or if the developer wants to be able to save and re-load MIME messages before sending them via SMTP. MailKit&#39;s SmtpClient also supports PIPELINING which should improve performance of sending messages (although might not be very noticeable).&lt;/p&gt; &#xA;&lt;h2&gt;License Information&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;MIT License&#xA;&#xA;Copyright (C) 2013-2022 .NET Foundation and Contributors&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in&#xA;all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xA;THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing via NuGet&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install MailKit is via &lt;a href=&#34;https://www.nuget.org/packages/MailKit/&#34;&gt;NuGet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In Visual Studio&#39;s &lt;a href=&#34;http://docs.nuget.org/docs/start-here/using-the-package-manager-console&#34;&gt;Package Manager Console&lt;/a&gt;, enter the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package MailKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting the Source Code&lt;/h2&gt; &#xA;&lt;p&gt;First, you&#39;ll need to clone MailKit from my GitHub repository. To do this using the command-line version of Git, you&#39;ll need to issue the following command in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/jstedfast/MailKit.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://tortoisegit.org&#34;&gt;TortoiseGit&lt;/a&gt; on Windows, you&#39;ll need to right-click in the directory where you&#39;d like to clone MailKit and select &lt;strong&gt;Git Clone...&lt;/strong&gt; in the menu. Once you do that, you&#39;ll get the following dialog:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jstedfast/MailKit/raw/master/Documentation/media/clone.png&#34; alt=&#34;Download the source code using TortoiseGit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fill in the areas outlined in red and then click &lt;strong&gt;OK&lt;/strong&gt;. This will recursively clone MailKit onto your local machine.&lt;/p&gt; &#xA;&lt;h2&gt;Updating the Source Code&lt;/h2&gt; &#xA;&lt;p&gt;Occasionally you might want to update your local copy of the source code if I have made changes to MailKit since you downloaded the source code in the step above. To do this using the command-line version of Git, you&#39;ll need to issue the following commands in your terminal within the MailKit directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://tortoisegit.org&#34;&gt;TortoiseGit&lt;/a&gt; on Windows, you&#39;ll need to right-click on the MailKit directory and select &lt;strong&gt;Git Sync...&lt;/strong&gt; in the menu. Once you do that, you&#39;ll need to click the &lt;strong&gt;Pull&lt;/strong&gt; and &lt;strong&gt;Submodule Update&lt;/strong&gt; buttons in the following dialog:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jstedfast/MailKit/raw/master/Documentation/media/update.png&#34; alt=&#34;Update the source code using TortoiseGit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;In the top-level MailKit directory, there are a number of solution files; they are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MailKit.sln&lt;/strong&gt; - includes the projects for .NET 4.5/4.6/4.7/4.8, .NETStandard 1.3/1.6/2.0 as well as the unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MailKit.Coverity.sln&lt;/strong&gt; - this is used to generate Coverity static analysis builds and is not generally useful.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MailKit.Documentation.sln&lt;/strong&gt; - this is used to generate the documentation found at &lt;a href=&#34;https://mimekit.net/docs&#34;&gt;https://mimekit.net/docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you&#39;ve opened the appropriate MailKit solution file in &lt;a href=&#34;https://www.visualstudio.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt;, you can choose the &lt;strong&gt;Debug&lt;/strong&gt; or &lt;strong&gt;Release&lt;/strong&gt; build configuration and then build.&lt;/p&gt; &#xA;&lt;p&gt;Both Visual Studio 2017 and Visual Studio 2019 should be able to build MailKit without any issues, but older versions such as Visual Studio 2015 will require modifications to the projects in order to build correctly. It has been reported that adding NuGet package references to &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Net.Compilers/&#34;&gt;Microsoft.Net.Compilers&lt;/a&gt; &amp;gt;= 3.6.0 and &lt;a href=&#34;https://www.nuget.org/packages/System.ValueTuple/&#34;&gt;System.ValueTuple&lt;/a&gt; &amp;gt;= 4.5.0 to the MimeKit and MailKit projects will allow them to build successfully.&lt;/p&gt; &#xA;&lt;p&gt;Note: The &lt;strong&gt;Release&lt;/strong&gt; build will generate the xml API documentation, but the &lt;strong&gt;Debug&lt;/strong&gt; build will not.&lt;/p&gt; &#xA;&lt;h2&gt;Using MailKit&lt;/h2&gt; &#xA;&lt;h3&gt;Sending Messages&lt;/h3&gt; &#xA;&lt;p&gt;One of the more common operations that MailKit is meant for is sending email messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;&#xA;using MailKit.Net.Smtp;&#xA;using MailKit;&#xA;using MimeKit;&#xA;&#xA;namespace TestClient {&#xA;    class Program&#xA;    {&#xA;        public static void Main (string[] args)&#xA;        {&#xA;            var message = new MimeMessage ();&#xA;            message.From.Add (new MailboxAddress (&#34;Joey Tribbiani&#34;, &#34;joey@friends.com&#34;));&#xA;            message.To.Add (new MailboxAddress (&#34;Mrs. Chanandler Bong&#34;, &#34;chandler@friends.com&#34;));&#xA;            message.Subject = &#34;How you doin&#39;?&#34;;&#xA;&#xA;            message.Body = new TextPart (&#34;plain&#34;) {&#xA;                Text = @&#34;Hey Chandler,&#xA;&#xA;I just wanted to let you know that Monica and I were going to go play some paintball, you in?&#xA;&#xA;-- Joey&#34;&#xA;            };&#xA;&#xA;            using (var client = new SmtpClient ()) {&#xA;                client.Connect (&#34;smtp.friends.com&#34;, 587, false);&#xA;&#xA;                // Note: only needed if the SMTP server requires authentication&#xA;                client.Authenticate (&#34;joey&#34;, &#34;password&#34;);&#xA;&#xA;                client.Send (message);&#xA;                client.Disconnect (true);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retrieving Messages (via Pop3)&lt;/h2&gt; &#xA;&lt;p&gt;One of the other main uses of MailKit is retrieving messages from pop3 servers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;&#xA;using MailKit.Net.Pop3;&#xA;using MailKit;&#xA;using MimeKit;&#xA;&#xA;namespace TestClient {&#xA;    class Program&#xA;    {&#xA;        public static void Main (string[] args)&#xA;        {&#xA;            using (var client = new Pop3Client ()) {&#xA;                client.Connect (&#34;pop.friends.com&#34;, 110, false);&#xA;&#xA;                client.Authenticate (&#34;joey&#34;, &#34;password&#34;);&#xA;&#xA;                for (int i = 0; i &amp;lt; client.Count; i++) {&#xA;                    var message = client.GetMessage (i);&#xA;                    Console.WriteLine (&#34;Subject: {0}&#34;, message.Subject);&#xA;                }&#xA;&#xA;                client.Disconnect (true);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using IMAP&lt;/h2&gt; &#xA;&lt;p&gt;More important than POP3 support is the IMAP support. Here&#39;s a simple use-case of retrieving messages from an IMAP server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;&#xA;using MimeKit;&#xA;using MailKit;&#xA;using MailKit.Search;&#xA;using MailKit.Net.Imap;&#xA;&#xA;namespace TestClient {&#xA;    class Program&#xA;    {&#xA;        public static void Main (string[] args)&#xA;        {&#xA;            using (var client = new ImapClient ()) {&#xA;                client.Connect (&#34;imap.friends.com&#34;, 993, true);&#xA;&#xA;                client.Authenticate (&#34;joey&#34;, &#34;password&#34;);&#xA;&#xA;                // The Inbox folder is always available on all IMAP servers...&#xA;                var inbox = client.Inbox;&#xA;                inbox.Open (FolderAccess.ReadOnly);&#xA;&#xA;                Console.WriteLine (&#34;Total messages: {0}&#34;, inbox.Count);&#xA;                Console.WriteLine (&#34;Recent messages: {0}&#34;, inbox.Recent);&#xA;&#xA;                for (int i = 0; i &amp;lt; inbox.Count; i++) {&#xA;                    var message = inbox.GetMessage (i);&#xA;                    Console.WriteLine (&#34;Subject: {0}&#34;, message.Subject);&#xA;                }&#xA;&#xA;                client.Disconnect (true);&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetching Information About the Messages in an IMAP Folder&lt;/h3&gt; &#xA;&lt;p&gt;One of the advantages of IMAP over POP3 is that the IMAP protocol allows clients to retrieve information about the messages in a folder without having to first download all of them.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;http://www.mimekit.net/docs/html/Overload_MailKit_Net_Imap_ImapFolder_Fetch.htm&#34;&gt;Fetch&lt;/a&gt; and &lt;a href=&#34;http://www.mimekit.net/docs/html/Overload_MailKit_Net_Imap_ImapFolder_FetchAsync.htm&#34;&gt;FetchAsync&lt;/a&gt; method overloads (or the convenient &lt;a href=&#34;http://www.mimekit.net/docs/html/Overload_MailKit_IMailFolderExtensions_Fetch.htm&#34;&gt;extension methods&lt;/a&gt;), it&#39;s possible to obtain any subset of summary information for any range of messages in a given folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.Envelope)) {&#xA;    Console.WriteLine (&#34;[summary] {0:D2}: {1}&#34;, summary.Index, summary.Envelope.Subject);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to use Fetch/FetchAsync APIs that take an &lt;a href=&#34;http://www.mimekit.net/docs/html/T_MailKit_IFetchRequest.htm&#34;&gt;IFetchRequest&lt;/a&gt; argument to get even more control over what to fetch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Let&#39;s Fetch non-Received headers:&#xA;var request = new FetchRequest {&#xA;    Headers = new HeaderSet (new HeaderId[] { HeaderId.Received }) {&#xA;        Exclude = true&#xA;    }&#xA;};&#xA;&#xA;foreach (var summary in inbox.Fetch (0, -1, request)) {&#xA;    Console.WriteLine (&#34;[summary] {0:D2}: {1}&#34;, summary.Index, summary.Headers[HeaderId.Subject]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The results of a Fetch method can also be used to download individual MIME parts rather than downloading the entire message. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (var summary in inbox.Fetch (0, -1, MessageSummaryItems.UniqueId | MessageSummaryItems.BodyStructure)) {&#xA;    if (summary.TextBody != null) {&#xA;        // this will download *just* the text/plain part&#xA;        var text = inbox.GetBodyPart (summary.UniqueId, summary.TextBody);&#xA;    }&#xA;&#xA;    if (summary.HtmlBody != null) {&#xA;        // this will download *just* the text/html part&#xA;        var html = inbox.GetBodyPart (summary.UniqueId, summary.HtmlBody);&#xA;    }&#xA;&#xA;    // if you&#39;d rather grab, say, an image attachment... it might look something like this:&#xA;    if (summary.Body is BodyPartMultipart) {&#xA;        var multipart = (BodyPartMultipart) summary.Body;&#xA;&#xA;        var attachment = multipart.BodyParts.OfType&amp;lt;BodyPartBasic&amp;gt; ().FirstOrDefault (x =&amp;gt; x.FileName == &#34;logo.jpg&#34;);&#xA;        if (attachment != null) {&#xA;            // this will download *just* the attachment&#xA;            var part = inbox.GetBodyPart (summary.UniqueId, attachment);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Message Flags in IMAP&lt;/h3&gt; &#xA;&lt;p&gt;In order to set or update the flags on a particular message, what is actually needed is the UID or index of the message and the folder that it belongs to.&lt;/p&gt; &#xA;&lt;p&gt;An obvious reason to want to update message flags is to mark a message as &#34;read&#34; (aka &#34;seen&#34;) after a user has opened a message and read it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;folder.Store (uid, new StoreFlagsRequest (StoreAction.Add, MessageFlags.Seen) { Silent = true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deleting Messages in IMAP&lt;/h3&gt; &#xA;&lt;p&gt;Deleting messages in IMAP involves setting a &lt;code&gt;\Deleted&lt;/code&gt; flag on a message and, optionally, expunging it from the folder.&lt;/p&gt; &#xA;&lt;p&gt;The way to mark a message as &lt;code&gt;\Deleted&lt;/code&gt; works the same way as marking a message as &lt;code&gt;\Seen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;folder.Store (uid, new StoreFlagsRequest (StoreAction.Add, MessageFlags.Deleted) { Silent = true });&#xA;folder.Expunge ();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching an IMAP Folder&lt;/h3&gt; &#xA;&lt;p&gt;You may also be interested in sorting and searching...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// let&#39;s search for all messages received after Jan 12, 2013 with &#34;MailKit&#34; in the subject...&#xA;var query = SearchQuery.DeliveredAfter (DateTime.Parse (&#34;2013-01-12&#34;))&#xA;    .And (SearchQuery.SubjectContains (&#34;MailKit&#34;)).And (SearchQuery.Seen);&#xA;&#xA;foreach (var uid in inbox.Search (query)) {&#xA;    var message = inbox.GetMessage (uid);&#xA;    Console.WriteLine (&#34;[match] {0}: {1}&#34;, uid, message.Subject);&#xA;}&#xA;&#xA;// let&#39;s do the same search, but this time sort them in reverse arrival order&#xA;var orderBy = new [] { OrderBy.ReverseArrival };&#xA;foreach (var uid in inbox.Sort (query, orderBy)) {&#xA;    var message = inbox.GetMessage (uid);&#xA;    Console.WriteLine (&#34;[match] {0}: {1}&#34;, uid, message.Subject);&#xA;}&#xA;&#xA;// you&#39;ll notice that the orderBy argument is an array... this is because you&#xA;// can actually sort the search results based on multiple columns:&#xA;orderBy = new [] { OrderBy.ReverseArrival, OrderBy.Subject };&#xA;foreach (var uid in inbox.Sort (query, orderBy)) {&#xA;    var message = inbox.GetMessage (uid);&#xA;    Console.WriteLine (&#34;[match] {0}: {1}&#34;, uid, message.Subject);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, instead of downloading the message, you could also fetch the summary information for the matching messages or do any of a number of other things with the UIDs that are returned.&lt;/p&gt; &#xA;&lt;h3&gt;Navigating Folders in IMAP&lt;/h3&gt; &#xA;&lt;p&gt;How about navigating folders? MailKit can do that, too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Get the first personal namespace and list the toplevel folders under it.&#xA;var personal = client.GetFolder (client.PersonalNamespaces[0]);&#xA;foreach (var folder in personal.GetSubfolders (false))&#xA;    Console.WriteLine (&#34;[folder] {0}&#34;, folder.Name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the IMAP server supports the SPECIAL-USE or the XLIST (GMail) extension, you can get ahold of the pre-defined All, Drafts, Flagged (aka Important), Junk, Sent, Trash, etc folders like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if ((client.Capabilities &amp;amp; (ImapCapabilities.SpecialUse | ImapCapabilities.XList)) != 0) {&#xA;    var drafts = client.GetFolder (SpecialFolder.Drafts);&#xA;} else {&#xA;    // maybe check the user&#39;s preferences for the Drafts folder?&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In cases where the IMAP server does &lt;em&gt;not&lt;/em&gt; support the SPECIAL-USE or XLIST extensions, you&#39;ll have to come up with your own heuristics for getting the Sent, Drafts, Trash, etc folders. For example, you might use logic similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static string[] CommonSentFolderNames = { &#34;Sent Items&#34;, &#34;Sent Mail&#34;, &#34;Sent Messages&#34;, /* maybe add some translated names */ };&#xA;&#xA;static IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken)&#xA;{&#xA;    var personal = client.GetFolder (client.PersonalNamespaces[0]);&#xA;&#xA;    foreach (var folder in personal.GetSubfolders (false, cancellationToken)) {&#xA;        foreach (var name in CommonSentFolderNames) {&#xA;            if (folder.Name == name)&#xA;                return folder;&#xA;        }&#xA;    }&#xA;&#xA;    return null;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using LINQ, you could simplify this down to something more like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static string[] CommonSentFolderNames = { &#34;Sent Items&#34;, &#34;Sent Mail&#34;, &#34;Sent Messages&#34;, /* maybe add some translated names */ };&#xA;&#xA;static IFolder GetSentFolder (ImapClient client, CancellationToken cancellationToken)&#xA;{&#xA;    var personal = client.GetFolder (client.PersonalNamespaces[0]);&#xA;&#xA;    return personal.GetSubfolders (false, cancellationToken).FirstOrDefault (x =&amp;gt; CommonSentFolderNames.Contains (x.Name));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option might be to allow the user of your application to configure which folder he or she wants to use as their Sent folder, Drafts folder, Trash folder, etc.&lt;/p&gt; &#xA;&lt;p&gt;How you handle this is up to you.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The first thing you&#39;ll need to do is fork MailKit to your own GitHub repository. For instructions on how to do that, see the section titled &lt;strong&gt;Getting the Source Code&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://visualstudio.microsoft.com/vs/mac/&#34;&gt;Visual Studio for Mac&lt;/a&gt; or &lt;a href=&#34;http://monodevelop.com&#34;&gt;MonoDevelop&lt;/a&gt;, all of the solution files are configured with the coding style used by MailKit. If you use Visual Studio on Windows or some other editor, please try to maintain the existing coding style as best as you can.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve got some changes that you&#39;d like to submit upstream to the official MailKit repository, send me a &lt;strong&gt;Pull Request&lt;/strong&gt; and I will try to review your changes in a timely manner.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute but don&#39;t have any particular features in mind to work on, check out the issue tracker and look for something that might pique your interest!&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Have a bug or a feature request? Please open a new &lt;a href=&#34;https://github.com/jstedfast/MailKit/issues/new?template=bug_report.md&#34;&gt;bug report&lt;/a&gt; or &lt;a href=&#34;https://github.com/jstedfast/MailKit/issues/new?template=feature_request.md&#34;&gt;feature request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before opening a new issue, please search through any &lt;a href=&#34;https://github.com/jstedfast/MailKit/issues&#34;&gt;existing issues&lt;/a&gt; to avoid submitting duplicates. It may also be worth checking the &lt;a href=&#34;https://github.com/jstedfast/MailKit/raw/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; for common questions that other developers have had.&lt;/p&gt; &#xA;&lt;p&gt;If MailKit does not work with your mail server, please include a &lt;a href=&#34;https://github.com/jstedfast/MailKit/raw/master/FAQ.md#ProtocolLog&#34;&gt;protocol log&lt;/a&gt; in your bug report, otherwise there is nothing I can do to fix the problem.&lt;/p&gt; &#xA;&lt;p&gt;If you are getting an exception from somewhere within MailKit, don&#39;t just provide the &lt;code&gt;Exception.Message&lt;/code&gt; string. Please include the &lt;code&gt;Exception.StackTrace&lt;/code&gt; as well. The &lt;code&gt;Message&lt;/code&gt;, by itself, is often useless.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation can be found at &lt;a href=&#34;http://www.mimekit.net/docs&#34;&gt;http://www.mimekit.net/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A copy of the XML-formatted API reference documentation is also included in the NuGet package.&lt;/p&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;MailKit is a &lt;a href=&#34;https://www.dotnetfoundation.org/projects&#34;&gt;.NET Foundation&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;http://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;http://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;General .NET OSS discussions: &lt;a href=&#34;https://forums.dotnetfoundation.org&#34;&gt;.NET Foundation forums&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>