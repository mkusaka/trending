<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-18T01:24:51Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glazerdesktop/GlazeWM</title>
    <updated>2023-09-18T01:24:51Z</updated>
    <id>tag:github.com,2023-09-18:/glazerdesktop/GlazeWM</id>
    <link href="https://github.com/glazerdesktop/GlazeWM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GlazeWM · &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/lars-berger/GlazeWM&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ud6z3qjRvM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1041662798196908052&#34; alt=&#34;Discord invite&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt; &#xA;&lt;p&gt;Why use a tiling window manager? A tiling WM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple YAML configuration&lt;/li&gt; &#xA; &lt;li&gt;Multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;Customizable bar window&lt;/li&gt; &#xA; &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; &#xA; &lt;li&gt;Easy one-click installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/142960922-fb3abd0d-082c-4f92-8613-865c68006bd8.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, GlazeWM adds functionality to the built-in window manager and uses the Windows API via P/Invoke to position windows.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;h2&gt;Direct download&lt;/h2&gt; &#xA;&lt;p&gt;The latest runnable executable can be downloaded via &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/releases&#34;&gt;releases&lt;/a&gt;. No installation necessary, simply run the &lt;code&gt;.exe&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Winget&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be downloaded via Winget package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install lars-berger.GlazeWM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Winget installs portable packages in &lt;code&gt;%LOCALAPPDATA%\Microsoft\Winget\Packages\&lt;/code&gt; by default. This can be overrided with the flag &lt;code&gt;--location \path\to\folder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scoop&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be download via Scoop in the &lt;a href=&#34;https://github.com/ScoopInstaller/Extras&#34;&gt;Extras&lt;/a&gt; bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras # Ensure bucket is added first&#xA;scoop install glazewm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, to build from source, use the following .NET CLI command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet publish ./GlazeWM.App/GlazeWM.App.csproj --configuration=Release --runtime=win-x64 --output=. --self-contained -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build for other runtimes than Windows x64, see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#windows-rids&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve handling of fullscreen and maximized windows.&lt;/li&gt; &#xA; &lt;li&gt;More bar components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/lars-berger/projects/2/views/1&#34;&gt;📋 Full roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;The configuration file for GlazeWM can be found at &lt;code&gt;C:\Users\&amp;lt;YOUR_USER&amp;gt;\.glaze-wm\config.yaml&lt;/code&gt;. If this file doesn&#39;t exist, the &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/raw/master/GlazeWM.App/Resources/sample-config.yaml&#34;&gt;default config&lt;/a&gt; can optionally be generated on launch.&lt;/p&gt; &#xA;&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config=&#34;...&#34;&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./GlazeWM.exe --config=&#34;C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;general:&#xA;  show_floating_on_top: false&#xA;  floating_window_move_amount: &#34;5%&#34;&#xA;  # When enabled, switching to the current workspace activates the previously focused workspace&#xA;  toggle_workspace_on_refocus: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;The available keybindings can be customized via the &lt;code&gt;keybindings&lt;/code&gt; property in the config file. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; &#xA;&lt;p&gt;A full list of keys that can be used for keybindings can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=windowsdesktop-5.0#fields&#34;&gt;here&lt;/a&gt;. Numbers can be used in keybindings with and without a &lt;code&gt;D&lt;/code&gt; prefix (eg. either &lt;code&gt;D1&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; works).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to use the alt key for keybindings. The windows key is unfortunately a pain to remap, since certain keybindings (eg. &lt;code&gt;LWin+L&lt;/code&gt;) are reserved by the OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;keybindings:&#xA;  # Command to run.&#xA;  - command: &#34;focus workspace 1&#34;&#xA;&#xA;    # Key combination to trigger the keybinding.&#xA;    binding: &#34;Alt+1&#34;&#xA;&#xA;  # To run multiple commands in a sequence, use the `commands` property (eg. to move a window to a&#xA;  # workspace + focus workspace).&#xA;  - commands: [&#34;move to workspace 1&#34;, &#34;focus workspace 1&#34;]&#xA;    binding: &#34;Alt+Shift+1&#34;&#xA;&#xA;  - command: &#34;focus left&#34;&#xA;    # To have multiple key combinations that can trigger a command, use the `bindings` property.&#xA;    bindings: [&#34;Alt+H&#34;, &#34;Alt+Left&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635035-152ed4a6-e5a1-4878-8863-f62391e7d703.png&#34; alt=&#34;Alt key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635089-d5ed152b-1527-43e8-a69c-4e154b97a207.png&#34; alt=&#34;Alt+shift key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apart from the &lt;code&gt;Alt+Shift+E&lt;/code&gt; binding for exiting GlazeWM, it&#39;s also possibly to safely exit via the system tray icon.&lt;/p&gt; &#xA;&lt;h2&gt;Focus Window Border configuration&lt;/h2&gt; &#xA;&lt;p&gt;The focused and unfocused window border color can be configured via the &lt;code&gt;focus_borders&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires minimum of Windows 11 Build 22000.51.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;focus_borders:&#xA;  active:&#xA;    enabled: true&#xA;    color: &#34;#ff0000&#34;&#xA;  inactive:&#xA;    enabled: false&#xA;    color: &#34;#0000ff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gap configuration&lt;/h2&gt; &#xA;&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gaps:&#xA;  # Gap between adjacent windows.&#xA;  inner_gap: &#34;20px&#34;&#xA;&#xA;  # Gap between windows and the screen edge. See &#34;Shorthand properties&#34; for more info.&#xA;  outer_gap: &#34;20px 0 20px 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workspaces configuration&lt;/h2&gt; &#xA;&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;workspaces:&#xA;  # Uniquely identifies the workspace and is used as the label for the workspace in the bar if&#xA;  # `display_name` is not provided.&#xA;  - name: &#34;1&#34;&#xA;&#xA;    # Optional override for the workspace label in the bar. Does not need to be unique.&#xA;    display_name: &#34;Work&#34;&#xA;&#xA;    # Optionally force the workspace on a specific monitor if it exists. Use the monitor&#39;s number&#xA;    # as shown in the Windows display settings (eg. 1, 2, 3...).&#xA;    bind_to_monitor: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bar configuration&lt;/h2&gt; &#xA;&lt;p&gt;The appearance of the bar can be changed via the &lt;code&gt;bar&lt;/code&gt; property in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  # The option to enable/disable the bar.&#xA;  enabled: true&#xA;&#xA;  # Height of the bar in pixels.&#xA;  height: &#34;30px&#34;&#xA;&#xA;  # The position of the bar on the screen. Can be either &#34;top&#34; or &#34;bottom&#34;.&#xA;  position: &#34;top&#34;&#xA;&#xA;  # Whether to show the bar above other windows&#xA;  always_on_top: false&#xA;&#xA;  # Opacity value between 0.0 and 1.0.&#xA;  opacity: 1.0&#xA;&#xA;  # Background color of the bar.&#xA;  background: &#34;#101010&#34;&#xA;&#xA;  # Default font color. Can be overriden by setting `foreground` in a component&#39;s config.&#xA;  foreground: &#34;white&#34;&#xA;&#xA;  # Default font family. Can be overriden by setting `font_family` in a component&#39;s config.&#xA;  font_family: &#34;Segoe UI&#34;&#xA;&#xA;  # Default font size. Can be overriden by setting `font_size` in a component&#39;s config.&#xA;  font_size: &#34;13px&#34;&#xA;&#xA;  # Default font weight. Typically ranges from 100 to 950, where a higher value is thicker. Can&#xA;  # be overriden by setting `font_weight` in a component&#39;s config.&#xA;  font_weight: &#34;400&#34;&#xA;&#xA;  # Horizontal and vertical borders in pixels. Borders are inside the dimensions of the bar and do&#xA;  # not affect bar height. See &#34;Shorthand properties&#34; for more info.&#xA;  border_width: &#34;0&#34;&#xA;&#xA;  # Color of the border.&#xA;  border_color: &#34;blue&#34;&#xA;&#xA;  # Horizontal and vertical spacing between components within the bar and the edges of the bar. See&#xA;  # &#34;Shorthand properties&#34; for more info.&#xA;  padding: &#34;4px 6px 4px 6px&#34;&#xA;&#xA;  # Separator between components within the bar. `label` is used for each section&#xA;  # of the bar unless `label_{left,center,right}` is explictly set, in which case&#xA;  # they are preferred over default.&#xA;  component_separator:&#xA;    label: &#34; | &#34;&#xA;&#xA;  # Components to display on the left side of the bar.&#xA;  components_left:&#xA;    - type: &#34;workspaces&#34;&#xA;&#xA;  # Components to display on the right side of the bar.&#xA;  components_right:&#xA;    - type: &#34;clock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar component configuration&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of bar components can also be customized. The following properties can change the styling of a component, regardless of the component type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Type of component to display. Currently 7 component types exist: &#34;workspaces&#34;, &#34;clock&#34;, &#34;text&#34;, &#34;battery&#34;, &#34;window title&#34;, &#34;binding mode&#34; and &#34;tiling direction&#34;.&#xA;type: &amp;lt;COMPONENT_TYPE&amp;gt;&#xA;&#xA;# Horizontal and vertical margins. See &#34;Shorthand properties&#34; for more info.&#xA;margin: &#34;0 10px 0 0&#34;&#xA;&#xA;# Horizontal and vertical padding. See &#34;Shorthand properties&#34; for more info.&#xA;padding: &#34;0&#34;&#xA;&#xA;# Opacity value between 0.0 and 1.0.&#xA;opacity: 1.0&#xA;&#xA;# Background color of the component.&#xA;background: &#34;#101010&#34;&#xA;&#xA;# Font color used within the component.&#xA;foreground: &#34;white&#34;&#xA;&#xA;# Font family used within the component.&#xA;font_family: &#34;Segoe UI&#34;&#xA;&#xA;# Font size used within the component.&#xA;font_size: &#34;13px&#34;&#xA;&#xA;# Font weight used within the component. Typically ranges from 100 to 950, where a higher value is&#xA;# thicker.&#xA;font_weight: &#34;400&#34;&#xA;&#xA;# Horizontal and vertical borders in pixels. Borders are inside the dimensions of the component.&#xA;# See &#34;Shorthand properties&#34; for more info.&#xA;border_width: &#34;0&#34;&#xA;&#xA;# Color of the border.&#xA;border_color: &#34;blue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shorthand properties&lt;/h3&gt; &#xA;&lt;p&gt;Properties related to the edges of the bar or a component, like &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, and &lt;code&gt;border_width&lt;/code&gt;, use a 1-to-4 value syntax. This is the same convention that&#39;s common in CSS.&lt;/p&gt; &#xA;&lt;p&gt;Using the example of padding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When one value is specified, it applies the same padding to all four sides.&lt;/li&gt; &#xA; &lt;li&gt;When two values are specified, the first padding applies to the top and bottom, the second to the left and right.&lt;/li&gt; &#xA; &lt;li&gt;When three values are specified, the first padding applies to the top, the second to the right and left, the third to the bottom.&lt;/li&gt; &#xA; &lt;li&gt;When four values are specified, the paddings apply to the top, right, bottom, and left in that order (clockwise).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bar component: Clock&lt;/h3&gt; &#xA;&lt;p&gt;The text shown in the clock component is specified via &lt;code&gt;time_formatting&lt;/code&gt;. The supported time format specifiers are defined by &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings&#34;&gt;.NET&#39;s time/date string formatting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally supported format specifiers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Specifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;w&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year: 1..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 21.12.2022 (51)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;ww&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year 01..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 02.01.2022 (02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;clock&#34;&#xA;  time_formatting: &#34;hh:mm tt  ddd MMM d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Battery&lt;/h3&gt; &#xA;&lt;p&gt;The battery component displays the system&#39;s battery level in percent. There are three labels available that can be customized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label_draining&lt;/code&gt;: used when the system is draining battery power(i.e. not charging).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_power_saver&lt;/code&gt;: used when the system is on power saving mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_charging&lt;/code&gt;: used when the system is connected to power.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;{battery_level}&lt;/code&gt; is a variable which is replaced by the actual battery level when the label is displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;battery&#34;&#xA;  label_draining: &#34;{battery_level}% remaining&#34;&#xA;  label_power_saver: &#34;{battery_level}% (power saver)&#34;&#xA;  label_charging: &#34;{battery_level}% (charging)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: CPU Usage&lt;/h3&gt; &#xA;&lt;p&gt;Displays the current CPU usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;cpu&#34;&#xA;  label: &#34;CPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: GPU Usage&lt;/h3&gt; &#xA;&lt;p&gt;This component has high CPU requirement (compared to others); due to no efficient way to pull data from Windows API. Avoid using low refresh intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;gpu&#34;&#xA;  label: &#34;GPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Memory Usage&lt;/h3&gt; &#xA;&lt;p&gt;Displays the current Memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;memory&#34;&#xA;  label: &#34;RAM: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Network&lt;/h3&gt; &#xA;&lt;p&gt;Displays the type and signal strength of the active network connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;network&#34;&#xA;  label_no_internet: &#34;NC&#34;&#xA;  label_ethernet: &#34;Eth&#34;&#xA;  label_wifi_strength_0: &#34;WiFi: 0%&#34;&#xA;  label_wifi_strength_25: &#34;WiFi: 25%&#34;&#xA;  label_wifi_strength_50: &#34;WiFi: 50%&#34;&#xA;  label_wifi_strength_75: &#34;WiFi: 75%&#34;&#xA;  label_wifi_strength_100: &#34;WiFi: 100%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Volume&lt;/h3&gt; &#xA;&lt;p&gt;Displays volume level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;volume&#34;&#xA;  label_low: &#34;🔊{volume_level}%&#34;&#xA;  label_medium: &#34;🔊{volume_level}%&#34;&#xA;  label_high: &#34;🔊{volume_level}%&#34;&#xA;  label_mute: &#34;🔊{volume_level}%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Text File&lt;/h3&gt; &#xA;&lt;p&gt;For displaying any content without a native integrated widget; updates in real time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;text file&#34;&#xA;  # Path to file.&#xA;  file_path: &#34;PATH_HERE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Weather&lt;/h3&gt; &#xA;&lt;p&gt;Uses Open-Meteo API, refreshes every hour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;weather&#34;&#xA;  latitude: 40.6892&#xA;  longitude: 74.0445&#xA;  label: &#34;{temperature_celsius}°C&#34;&#xA;  label_sun: &#34;☀️ {temperature_celsius}°C&#34;&#xA;  label_moon: &#34;🌙 {temperature_celsius}°C&#34;&#xA;  label_cloud_moon: &#34;🌙☁️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun: &#34;⛅ {temperature_celsius}°C&#34;&#xA;  label_cloud_moon_rain: &#34;🌙🌧️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun_rain: &#34;🌦️ {temperature_celsius}°C&#34;&#xA;  label_cloud_rain: &#34;🌧️ {temperature_celsius}°C&#34;&#xA;  label_snow_flake: &#34;❄️ {temperature_celsius}°C&#34;&#xA;  label_thunderstorm: &#34;⚡ {temperature_celsius}°C&#34;&#xA;  label_cloud: &#34;☁️ {temperature_celsius}°C&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Image&lt;/h3&gt; &#xA;&lt;p&gt;Supports &lt;code&gt;.png&lt;/code&gt; and &lt;code&gt;.jpg&lt;/code&gt; formats.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;image&#34;&#xA;  source: &#34;C:\\Folder\\AnotherFolder\\image.png&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: System Tray&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Ctrl+Click&lt;/code&gt; to pin and un-pin an icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;system tray&#34;&#xA;  label_expand_text: &#34;&amp;lt;&#34;&#xA;  label_collapse_text: &#34;&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Custom Bar Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glazerdesktop/GlazeWM/develop/docs/contributing-new-components.md&#34;&gt;Guide Available Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Icons in Bar Components&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s common to use icons as the &lt;code&gt;label&lt;/code&gt; in bar components by assigning a &lt;code&gt;font_family&lt;/code&gt; that contains glyphs. A popular option is &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Font&lt;/a&gt; which comes with a &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;cheat sheet&lt;/a&gt; for easily finding a desired glyph.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;font_family&lt;/code&gt; or &lt;code&gt;label&lt;/code&gt; properties are left unspecified, the default &lt;code&gt;Material Icons&lt;/code&gt; font that is packaged with the app is used.&lt;/p&gt; &#xA;&lt;h2&gt;Window rules&lt;/h2&gt; &#xA;&lt;p&gt;Commands can be run when a window is initially launched. This can be used to assign an app to a specific workspace or to always start an app in floating mode.&lt;/p&gt; &#xA;&lt;p&gt;Multiple matching criteria can be used together to target a window more precisely. Regex syntax can also be used by wrapping the pattern with &lt;code&gt;/&lt;/code&gt; (eg. &lt;code&gt;/notepad|chrome/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_rules:&#xA;  # Command to run. Use `commands` to specify an array of commands to run in sequence.&#xA;  - command: &#34;move to workspace 2&#34;&#xA;&#xA;    # Process name to match exactly.&#xA;    match_process_name: &#34;chrome&#34;&#xA;&#xA;    # Window title to match exactly.&#xA;    match_title: &#34;/.*/&#34;&#xA;&#xA;    # Class name to match exactly.&#xA;    match_class_name: &#34;Chrome_WidgetWin_1&#34;&#xA;&#xA;  # To prevent the WM from managing an app, use the &#34;ignore&#34; command.&#xA;  - command: &#34;ignore&#34;&#xA;    match_process_name: &#34;notepad&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;focus &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;prev | next | recent&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move to workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;resize &amp;lt;height | width&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;resize height 3%&lt;/code&gt; or &lt;code&gt;resize width 20px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;resize borders &lt;a href=&#34;https://raw.githubusercontent.com/glazerdesktop/GlazeWM/develop/#shorthand-properties&#34;&gt;&amp;lt;shorthand property&amp;gt;&lt;/a&gt; (eg. &lt;code&gt;resize borders 0px -7px -7px -7px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;floating | tiling | minimized | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;width | height&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;set height 30%&lt;/code&gt; or &lt;code&gt;set width 200px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;toggle &amp;lt;floating | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus mode toggle&lt;/li&gt; &#xA; &lt;li&gt;tiling direction &amp;lt;vertical | horizontal | toggle&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;exit wm&lt;/li&gt; &#xA; &lt;li&gt;reload config&lt;/li&gt; &#xA; &lt;li&gt;close&lt;/li&gt; &#xA; &lt;li&gt;exec &amp;lt;process name | path to executable&amp;gt; (eg. &lt;code&gt;exec chrome&lt;/code&gt; or &lt;code&gt;exec &#39;C:/Program Files/Google/Chrome/Application/chrome&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ignore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;h2&gt;Blurry buttons in bar window&lt;/h2&gt; &#xA;&lt;p&gt;An app called &#34;Sonic Studio&#34;, which is installed by default on ASUS ROG machines can cause rendering issues with WPF apps. This can be resolved by disabling &lt;code&gt;NahimicService&lt;/code&gt; in Windows Services Manager.&lt;/p&gt; &#xA;&lt;h2&gt;Binding the right-side Alt key &lt;code&gt;RMenu&lt;/code&gt; on certain keyboard layouts&lt;/h2&gt; &#xA;&lt;p&gt;Most keyboard layouts treat the right-side &lt;kbd&gt;Alt&lt;/kbd&gt; key the same as the left, while others (eg. US International and German) treat it as &lt;kbd&gt;AltGr&lt;/kbd&gt; and generate both &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt; when it is pressed. For these keyboard layouts, keybindings with the &lt;kbd&gt;AltGr&lt;/kbd&gt; key need to specify both &lt;code&gt;RMenu&lt;/code&gt; and &lt;code&gt;Control&lt;/code&gt; (eg. &lt;code&gt;RMenu+Control+A&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
</feed>