<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-29T01:32:32Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>keijiro/UnityMLStableDiffusion</title>
    <updated>2023-03-29T01:32:32Z</updated>
    <id>tag:github.com,2023-03-29:/keijiro/UnityMLStableDiffusion</id>
    <link href="https://github.com/keijiro/UnityMLStableDiffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Core ML Stable Diffusion on Unity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity Core ML Stable Diffusion Plugin&lt;/h1&gt; &#xA;&lt;p&gt;Stable Diffusion plugin for Unity, based on &lt;a href=&#34;https://github.com/apple/ml-stable-diffusion&#34;&gt;Apple&#39;s Core ML port&lt;/a&gt;. You can run the model on-editor and at-runtime without needing any extra components.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unity 2023.1 or later&lt;/li&gt; &#xA; &lt;li&gt;Apple Silicon Mac (editor/runtime support) with macOS 13.1 or later&lt;/li&gt; &#xA; &lt;li&gt;iPad Pro with Apple silicon (runtime support) with iOS 16.2 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Although the plugin supports iOS, it requires huge amount of memory to run the model, so it only supports memory-rich iPad models.&lt;/p&gt; &#xA;&lt;h2&gt;How To Try&lt;/h2&gt; &#xA;&lt;p&gt;Before running the sample project, you must put the model files in the &lt;code&gt;Assets/StreamingAssets&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone or download the &lt;a href=&#34;https://huggingface.co/apple/coreml-stable-diffusion-2-base&#34;&gt;pre-converted Stable Diffusion 2 model repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;split_einsum/compiled&lt;/code&gt; directory into &lt;code&gt;Assets/StreamingAssets&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Rename the directory to &lt;code&gt;StableDiffusion&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It takes a long time (a few minutes) for the first run. After this initialization step, it only takes a few tens of seconds to generate an image.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>micahmo/WgServerforWindows</title>
    <updated>2023-03-29T01:32:32Z</updated>
    <id>tag:github.com,2023-03-29:/micahmo/WgServerforWindows</id>
    <link href="https://github.com/micahmo/WgServerforWindows" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wg Server for Windows (WS4W) is a desktop application that allows running and managing a WireGuard server endpoint on Windows&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/170061921-fee5feb8-b348-40a8-9cd4-8db46d1aceec.png&#34;&gt; &#xA;&lt;h1&gt;Wg Server for Windows&lt;/h1&gt; &#xA;&lt;p&gt;WS4W is a desktop application that allows running and managing a WireGuard server endpoint on Windows.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by Henry Chang&#39;s post, &lt;a href=&#34;https://www.henrychang.ca/how-to-setup-wireguard-vpn-server-on-windows/&#34;&gt;How to Setup Wireguard VPN Server On Windows&lt;/a&gt;, my goal was to create an application that automated and simplified many of the complex steps. While still not quite a plug-and-play solution, the idea is to be able to perform each of the prerequisite steps, one-by-one, without running any scripts, modifying the Registry, or entering the Control Panel.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;The latest release is available &lt;a href=&#34;https://github.com/micahmo/WgServerforWindows/releases/latest&#34;&gt;here&lt;/a&gt;. Download the installer and run.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The application will request to run as Administrator. Due to all the finagling of the registry, Windows services, wg.exe calls, etc., it is easier to run the whole application elevated.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Upgrade from 1.5.2&lt;/h4&gt; &#xA;&lt;p&gt;Before introducing an installer, WS4W was distributed as a portable application. The portable versions (1.5.2 and earlier) have no automatic upgrade path to the installer version. To upgrade, simply delete the downloaded portable version and download the installer. No configuration settings will be lost.&lt;/p&gt; &#xA;&lt;h1&gt;What Does It Do?&lt;/h1&gt; &#xA;&lt;p&gt;Below are the tasks that can be performed automatically using this application.&lt;/p&gt; &#xA;&lt;h2&gt;Before&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/219172904-ff6d90d8-79a2-40c9-a038-3a5ad3386089.png&#34; alt=&#34;BeforeScreenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;WireGuard.exe&lt;/h3&gt; &#xA;&lt;p&gt;This step downloads and runs the latest version of WireGuard for Windows from &lt;a href=&#34;https://download.wireguard.com/windows-client/wireguard-installer.exe&#34;&gt;https://download.wireguard.com/windows-client/wireguard-installer.exe&lt;/a&gt;. Once installed, it can be uninstalled directly from WS4W, too.&lt;/p&gt; &#xA;&lt;h3&gt;Server Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/170072344-598a8b9c-bec8-4f34-9a85-ee95765520e3.png&#34; alt=&#34;ServerConfiguration&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here you can configure the server endpoint. See the WireGuard documentation for the meaning of each of these fields. The Private Key and Public Key are generated by calling &lt;code&gt;wg genkey&lt;/code&gt; and &lt;code&gt;wg pubkey [private key]&lt;/code&gt; respectively. (You can optionally supply your own Private Key.)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It is important that the server&#39;s network range not conflict with the host system&#39;s IP address or LAN network range.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In addition to creating/udpating the configuration file for the server endpoint, editing the server configuration will also update the &lt;code&gt;ScopeAddress&lt;/code&gt; registry value (under &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters&lt;/code&gt;). This is the IP address that is used for the WireGuard adapter when using the Internet Sharing feature (explained &lt;a href=&#34;https://raw.githubusercontent.com/micahmo/WgServerforWindows/main/#internet-sharing&#34;&gt;here&lt;/a&gt;). Thus, the Address property of the server configuration serves to determine the allowable addresses for clients, as well as the IP that Windows will assign to the WireGuard adapter when performing Internet Sharing. Note the IP address is grabbed from the &lt;code&gt;ScopeAddress&lt;/code&gt; at the time when Internet Sharing is first performed. That means that if the server&#39;s IP address is changed in the configuration (and thus the &lt;code&gt;ScopeAddress&lt;/code&gt; registry value is updated), the WireGuard interface will no longer accurately reflect the desired server IP. Therefore, WS4W will prompt to re-share internet. If canceled, Internet Sharing will be disabled and will have to be re-enabled manually.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must configure port forwarding on your router. Forward all UDP traffic that is destined for your server endpoint port (default &lt;code&gt;51820&lt;/code&gt;) to the LAN IP of your server. Every router is different, so it is difficult to give specific guidance here. As an example, here is what the port forwarding rule would look like on a Verizon Quantum Gateway router.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/127727564-0d666c41-4998-4c5d-8d2a-e7b730e545c8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You should set the Endpoint property to your public IPv4, IPv6, or domain address, followed by whatever port you have forwarded. The &lt;code&gt;Detect Public IP Address&lt;/code&gt; button will attempt to detect your public address automatically using the &lt;a href=&#34;https://ipify.org&#34;&gt;ipify.org&lt;/a&gt; API. However, if possible, it is recommended that you use a domain name with DDNS. That way, if your public IP address changes, your clients will be able to find your server endpoint without reconfiguration.&lt;/p&gt; &#xA;&lt;h3&gt;Client Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/218290866-f36b8bda-208f-4dfd-a66f-40e5b960b0af.png&#34; alt=&#34;ClientConfiguration&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here you can configure the client(s). The Address can be entered manually or calculated based on the server&#39;s network range. For example, if the server&#39;s network is &lt;code&gt;10.253.0.0/24&lt;/code&gt;, the client config can determine that &lt;code&gt;10.253.0.2&lt;/code&gt; is a valid address. Note that the first address in the range (in this example, &lt;code&gt;10.253.0.1&lt;/code&gt;) is reserved for the server. DNS is optional, but recommended. You may add DNS Search Domains (also known as DNS Suffixes, &lt;a href=&#34;https://en.wikipedia.org/wiki/Search_domain&#34;&gt;read more&lt;/a&gt;). Lastly, the Private Key, Public Key, and Preshared Key are generated using &lt;code&gt;wg genkey&lt;/code&gt;, &lt;code&gt;wg pubkey [private key]&lt;/code&gt;, and &lt;code&gt;wg genpsk&lt;/code&gt;. (You may specify your own Private Key. Preshared Keys are optional, generated uniquely per-client, and shared with the server&#39;s configuration. See &lt;a href=&#34;https://github.com/micahmo/WgServerforWindows/issues/34&#34;&gt;#34&lt;/a&gt; for more info.)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Due to a bit of a quirk in WireGuard, if you were to remove a client Preshared Key and sync the server configuration, WireGuard would still expect the client to connect with a PSK. Therefore, WS4W does not allow you to clear the Preshared Key field from clients. Instead, delete and recreate a client to remove the PSK.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Once configured, it&#39;s easy to import the configuration into your client app of choice via QR code or by exporting the &lt;code&gt;.conf&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/170073360-628712b3-90e2-4ea5-a759-2dd6c9d5dc4a.png&#34; alt=&#34;ClientQrCode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For security, you may not want to keep the clients&#39; private keys on the server. In that case, you may clear the private key field before saving a client configuration. However, there are two things to keep in mind.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You should export the client config (via QR code or file) before removing the private key and saving.&lt;/li&gt; &#xA; &lt;li&gt;If you ever need to import the config to your client again, you will have to re-generate both the private and public keys.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Tunnnel Service&lt;/h3&gt; &#xA;&lt;p&gt;Once the server and client(s) are configured, you may install the tunnel service, which creates a new network interface for WireGuard using the &lt;code&gt;wireguard /installtunnelservice&lt;/code&gt; command. After installation, the tunnel may be also removed directly within WS4W. This uses the &lt;code&gt;wireguard /uninstalltunnelservice&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;After completing this step, WireGuard clients should be able to get as far as performing a successful handshake with the server.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the server configuration is edited after the tunnel service is installed, the tunnel service will automatically be updated via the &lt;code&gt;wg syncconf&lt;/code&gt; command (if the newly saved server configuration is valid). This is also true of the client configurations, updates to which often cause the server configuration to be updated (e.g., if a new client is added, the server configuration must be aware of this new peer).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Private Network&lt;/h3&gt; &#xA;&lt;p&gt;Even after the tunnel service is installed, some protocols may be blocked. It is recommended to change the network profile to &lt;code&gt;Private&lt;/code&gt;, which eases Windows restrictions on the network.&lt;/p&gt; &#xA;&lt;p&gt;This step also creates a Windows Task to make the network Private automatically on boot. You may disable the Task via the dropdown.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On a system where the shared internet connection originates from a domain network, this step is not necessary, as the WireGuard interfaces picks up the profile of the shared domain network.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Routing&lt;/h3&gt; &#xA;&lt;p&gt;The last step is to allow requests made over the WireGuard interface to be routed to your private network or the Internet. To do so, the connection of the &#34;real&#34; network adapter on the Windows machine must be shared with the virtual WireGuard adapter. This can be done in one of two ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NAT Routing&lt;/li&gt; &#xA; &lt;li&gt;Internet Sharing + Persistent Internet Sharing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The first option is only available on some systems (see more below). The second options may be used as necessary, but have some caveats (such as, if the Internet Connection is shared with the WireGuard adapter, it cannot be shared with any other adapter; see &lt;a href=&#34;https://github.com/micahmo/WgServerforWindows/issues/18&#34;&gt;#18&lt;/a&gt;). There have also been multiple issues reported with Internet Sharing, so NAT Routing should be used if available.&lt;/p&gt; &#xA;&lt;p&gt;These options are mutually exclusive.&lt;/p&gt; &#xA;&lt;h4&gt;NAT Routing&lt;/h4&gt; &#xA;&lt;p&gt;Here you can create a NAT routing rule on the WireGuard interface to allow it to interact with your private/public network. Specifically, the following commands are invoked.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;New-NetIPAddress&lt;/code&gt; is called on the WireGuard adapter to assign a static IP in the range of the Server Configuration&#39;s Address property.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;New-NetNat&lt;/code&gt; is called to create a new NAT rule on the WireGuard adapter.&lt;/li&gt; &#xA; &lt;li&gt;A Windows Task is created to call &lt;code&gt;New-NetIPAddress&lt;/code&gt; on boot. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you do not wish to have the Windows Task automatically configure the WireGuard interface on boot, you can press the dropdown and choose &#34;Disable Automatic NAT Routing&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NAT Routing requires at least Windows 10, and the option to enable it will not even appear in the application on older versions of Windows. However, even with Windows 10, NAT Routing does not always work. Sometimes it requires Hyper-V to be enabled, which the application will prompt for, but that also requires a Pro or higher (i.e., not Home) version of Windows. Ultimately, if the application is unable to enable NAT Routing, it will recommend using Internet Connection Sharing instead (below). See &lt;a href=&#34;https://github.com/micahmo/WgServerforWindows/issues/30&#34;&gt;#30&lt;/a&gt; for a full discussion about NAT Routing support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Internet Sharing&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/170073850-fde3a685-79d5-4ea9-a2b6-acb9b08c58d0.png&#34; alt=&#34;InternetSharing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If NAT Routing is not available, you can use internet sharing to provide network connection to the WireGuard interface. When configuring this option, you may select any of your network adapters to share. Note that it will likely only work for adapters whose status is &lt;code&gt;Connected&lt;/code&gt;, and it will only be useful for adapters which provide internet or LAN access. When choosing the adapter to share, hover over the menu item to get more details, including the adapter&#39;s assigned IP address, to determine if it&#39;s the one you want to share.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When performing internet sharing, the WireGuard adapter is assigned an IP from the &lt;code&gt;ScopeAddress&lt;/code&gt; registry value (under &lt;code&gt;HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters&lt;/code&gt;). This value is automatically set when updating the Address property of the server configuration. See more &lt;a href=&#34;https://raw.githubusercontent.com/micahmo/WgServerforWindows/main/#server-configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Persistent Internet Sharing&lt;/h4&gt; &#xA;&lt;p&gt;There are issues in Windows that cause Internet Sharing to become disabled after a reboot. If the WireGuard server is intended to be left unattended, it is recommended to enable Persistent Internet Sharing so that no interaction is required after rebooting.&lt;/p&gt; &#xA;&lt;p&gt;When enabling this feature, two actions are performed in Windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;Internet Connection Sharing&lt;/code&gt; service startup mode is changed from &lt;code&gt;Manual&lt;/code&gt; to &lt;code&gt;Automatic&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The value of the &lt;code&gt;EnableRebootPersistConnection&lt;/code&gt; regstry value in &lt;code&gt;HKLM\Software\Microsoft\Windows\CurrentVersion\SharedAccess&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; (it is created if not found).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Even with these workarounds, Internet Sharing can become disabled after a reboot. Therefore, one more action is performed. A Scheduled Task is created that disables and re-enables Internet Sharing using the WS4W CLI upon system boot. This should be sufficient to guarantee that sharing remains enabled.&lt;/p&gt; &#xA;&lt;h3&gt;View Server Status&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/170075139-0647c35d-ac30-4296-93c1-985f1310c051.png&#34; alt=&#34;ServerStatus&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once the tunnel is installed, the status of the WireGuard interface may be viewed. This is accomplished via the &lt;code&gt;wg show&lt;/code&gt; command. It will be continually updated as long as &lt;code&gt;Update Live&lt;/code&gt; is checked.&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set Boot Task Delay&lt;/p&gt; &lt;p&gt;This setting allows configuring a delay for boot tasks. This can be useful for tasks that depend on adapters which are slow to load. Note that tasks must be disabled and re-enabled after changing this value.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;After&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/219172736-083417e2-1952-4e55-8988-06e75b44e33d.png&#34; alt=&#34;AfterScreenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;There is also a CLI bundled in the portable download called &lt;code&gt;ws4w.exe&lt;/code&gt; which can be invoked from a terminal or called from a script. In addition to messages written to standard out, the CLI will also set the exit code based on the success of executing the given command. In PowerShell, for example, the exit code can be printed with &lt;code&gt;echo $lastexitcode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The CLI must also be run as an Administrator for the same reasons as above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;The CLI uses verbs, or top-level commands, each of which has its own set of options. You can run &lt;code&gt;ws4w.exe --help&lt;/code&gt; for a list of all verbs or &lt;code&gt;ws4w.exe verb --help&lt;/code&gt; to see the list of options for a particular verb.&lt;/p&gt; &#xA;&lt;h4&gt;List of Supported Verbs&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ws4w.exe restartinternetsharing [--network &amp;lt;NETWORK_TO_SHARE&amp;gt;]&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will tell WS4W to attempt to restart the Internet Sharing feature.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;--network&lt;/code&gt; option may be passed to specify which network WS4W should share.&lt;/li&gt; &#xA;   &lt;li&gt;If Internet Sharing is already enabled, WS4W will attempt to reshare the same network (unless &lt;code&gt;--network&lt;/code&gt; is passed).&lt;/li&gt; &#xA;   &lt;li&gt;If multiple networks are already shared, it is not possible to tell which one is shared with the WireGuard network, so the &lt;code&gt;--network&lt;/code&gt; option must be passed to specify.&lt;/li&gt; &#xA;   &lt;li&gt;If Internet Sharing is not already enabled, the &lt;code&gt;--network&lt;/code&gt; option must be passed, otherwise there is no way to know which network to share.&lt;/li&gt; &#xA;   &lt;li&gt;The exit code will be 0 if the requested or previously shared network was successfully reshared. &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;This command is used by the Scheduled Task that is created when Persistent Internet Sharing is enabled.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ws4w.exe setpath&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will tell WS4W to add the current executing directory to the system&#39;s &lt;code&gt;PATH&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;   &lt;li&gt;This verb has no options. &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;This command is used by the installer when the &#34;Add CLI to PATH&#34; option is selected.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ws4w.exe setnetipaddress --serverdatapath &amp;lt;PATH_TO_SERVER_CONFIG&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will tell WS4W to call &lt;code&gt;Set-NetIPAddress&lt;/code&gt; on the WireGuard interface, using the network Address as defined in the given WireGuard server configuration file. &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;This command is used by the Scheduled Task that is created when NAT Routing is enabled.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ws4w.exe privatenetwork&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will set the category of the WireGuard network interface to Private.&lt;/li&gt; &#xA;   &lt;li&gt;This verb has no options. &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;This command is used by the Windows Task that is created when Private Network is enabled.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known Issues&lt;/h1&gt; &#xA;&lt;h3&gt;Inability to Enable Internet Sharing&lt;/h3&gt; &#xA;&lt;p&gt;First, it is recommended to use NAT Routing if available.&lt;/p&gt; &#xA;&lt;p&gt;However, if you experience the following error message when enabling Internet Sharing, please perform the following manual steps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7417301/170076429-d08685ef-3eae-4433-978f-1adc722763c0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open Network Connections in the Control Panel.&lt;/li&gt; &#xA; &lt;li&gt;Right-click &amp;gt; Properties on the network interface that you want to share. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to the Sharing tab and check &#34;Allow other network users to connect through this computer&#39;s Internet connection&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;From the &#34;Home networking connection&#34; dropdown, choose &lt;code&gt;wg_server&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Press OK.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Close and reopen WS4W. It should now show Internet Sharing enabled, and subsequent attempts to disable/re-enable should be sucessful going forward.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This issue is often triggered after creating a new virtual switch for a VM. The manual workaround should only be needed once after that and does not affect the virtual switch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;WS4W has been tested and is known to work on Windows Server (2012 R2 and newer) and Windows Desktop (10 and newer).&lt;/p&gt; &#xA;&lt;h1&gt;Attribution&lt;/h1&gt; &#xA;&lt;p&gt;WireGuard is a registered trademark of Jason A. Donenfeld.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.flaticon.com/free-icon/sign_28310&#34;&gt;Icon&lt;/a&gt; made by &lt;a href=&#34;https://www.flaticon.com/authors/freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;www.flaticon.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CarterCommunity/Carter</title>
    <updated>2023-03-29T01:32:32Z</updated>
    <id>tag:github.com,2023-03-29:/CarterCommunity/Carter</id>
    <link href="https://github.com/CarterCommunity/Carter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Carter is framework that is a thin layer of extension methods and functionality over ASP.NET Core allowing code to be more explicit and most importantly more enjoyable.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Carter&lt;/h1&gt; &#xA;&lt;p&gt;Carter is a framework that is a thin layer of extension methods and functionality over ASP.NET Core allowing the code to be more explicit and most importantly more enjoyable.&lt;/p&gt; &#xA;&lt;p&gt;For a better understanding, take a good look at the &lt;a href=&#34;https://github.com/CarterCommunity/Carter/tree/master/samples&#34;&gt;samples&lt;/a&gt; inside this repo. The samples demonstrate usages of elegant extensions around common ASP.NET Core types as shown below.&lt;/p&gt; &#xA;&lt;p&gt;Other extensions include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Validate&amp;lt;T&amp;gt;&lt;/code&gt; - &lt;a href=&#34;https://github.com/JeremySkinner/FluentValidation&#34;&gt;FluentValidation&lt;/a&gt; extensions to validate incoming HTTP requests which is not available with ASP.NET Core Minimal APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BindFile/BindFiles/BindFileAndSave/BindFilesAndSave&lt;/code&gt; - Allows you to easily get access to a file/files that has been uploaded. Alternatively you can call &lt;code&gt;BindFilesAndSave&lt;/code&gt; and this will save it to a path you specify.&lt;/li&gt; &#xA; &lt;li&gt;Routes to use in common ASP.NET Core middleware e.g., &lt;code&gt;app.UseExceptionHandler(&#34;/errorhandler&#34;);&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IResponseNegotiator&lt;/code&gt;s allow you to define how the response should look on a certain Accept header(content negotiation). Handling JSON is built in the default response but implementing an interface allows the user to choose how they want to represent resources.&lt;/li&gt; &#xA; &lt;li&gt;All interface implementations for Carter components are registered into ASP.NET Core DI automatically. Implement the interface and off you go.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Releases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latest NuGet Release &lt;a href=&#34;https://www.nuget.org/packages/carter&#34;&gt;&lt;img src=&#34;http://img.shields.io/nuget/v/Carter.svg?style=flat&#34; alt=&#34;NuGet Version&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Latest NuGet Pre-Release &lt;a href=&#34;https://www.nuget.org/packages/carter&#34;&gt;&lt;img src=&#34;http://img.shields.io/nuget/vpre/Carter.svg?style=flat&#34; alt=&#34;NuGet Version&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lateset CI Release &lt;a href=&#34;https://f.feedz.io/carter/carter/packages/Carter/latest/download&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/endpoint.svg?url=https%3A%2F%2Ff.feedz.io%2Fcarter%2Fcarter%2Fshield%2FCarter%2Flatest&#34; alt=&#34;feedz.io&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build Status &lt;a href=&#34;https://actions-badge.atrox.dev/CarterCommunity/Carter/goto?ref=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2FCarterCommunity%2FCarter%2Fbadge%3Fref%3Dmain&amp;amp;style=flat&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Join our Slack Channel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/cartercommunity/shared_invite/enQtMzY2Nzc0NjU2MTgyLWY3M2Y2Yjk3NzViN2Y3YTQ4ZDA5NWFlMTYxMTIwNDFkMTc5YWEwMDFiOWUyM2Q4ZmY5YmRkODYyYTllZDViMmE&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CarterCommunity/Carter/main/slack.svg?sanitize=true&#34; width=&#34;140px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Routing&lt;/h4&gt; &#xA;&lt;p&gt;Carter uses &lt;code&gt;IEndpointRouteBuilder&lt;/code&gt; routing and all the extensions &lt;code&gt;IEndpointConventionBuilder&lt;/code&gt; offers also known as Minimal APIs. For example you can define a route with authorization required like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.MapGet(&#34;/&#34;, () =&amp;gt; &#34;There&#39;s no place like 127.0.0.1&#34;).RequireAuthorization();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where does the name &#34;Carter&#34; come from?&lt;/h3&gt; &#xA;&lt;p&gt;I have been a huge fan of, and core contributor to &lt;a href=&#34;http://nancyfx.org&#34;&gt;Nancy&lt;/a&gt;, the best .NET web framework, for many years, and the name &#34;Nancy&#34; came about due to it being inspired from Sinatra the Ruby web framework. Frank Sinatra had a daughter called Nancy and so that&#39;s where it came from.&lt;/p&gt; &#xA;&lt;p&gt;I was also trying to think of a derivative name, and I had recently listened to the song Empire State of Mind where Jay-Z declares he is the new Sinatra. His real name is Shaun Carter so I took Carter and here we are!&lt;/p&gt; &#xA;&lt;h3&gt;CI Builds&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to try the latest builds from the master branch add &lt;code&gt;https://f.feedz.io/carter/carter/nuget/index.json&lt;/code&gt; to your NuGet.config and pick up the latest and greatest version of Carter.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;You can get started using either the template or by adding the package manually to a new or existing application.&lt;/p&gt; &#xA;&lt;h4&gt;Template&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/CarterTemplate/&#34;&gt;https://www.nuget.org/packages/CarterTemplate/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the template - &lt;code&gt;dotnet new install CarterTemplate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new application using template - &lt;code&gt;dotnet new carter -n MyCarterApp -o MyCarterApp&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go into the new directory created for the application &lt;code&gt;cd MyCarterApp&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the application - &lt;code&gt;dotnet run&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Package&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Carter&#34;&gt;https://www.nuget.org/packages/Carter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new empty ASP.NET Core application - &lt;code&gt;dotnet new web -n MyCarterApp&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change into the new project location - &lt;code&gt;cd ./MyCarterApp&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Carter package - &lt;code&gt;dotnet add package carter&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modify your Program.cs to use Carter&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = WebApplication.CreateBuilder(args);&#xA;builder.Services.AddCarter();&#xA;&#xA;var app = builder.Build();&#xA;&#xA;app.MapCarter();&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Create a new Module&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class HomeModule : ICarterModule&#xA;    {&#xA;        public void AddRoutes(IEndpointRouteBuilder app)&#xA;        {&#xA;            app.MapGet(&#34;/&#34;, () =&amp;gt; &#34;Hello from Carter!&#34;);&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run the application - &lt;code&gt;dotnet run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Sample&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = WebApplication.CreateBuilder(args);&#xA;builder.Services.AddSingleton&amp;lt;IActorProvider, ActorProvider&amp;gt;();&#xA;builder.Services.AddCarter();&#xA;&#xA;var app = builder.Build();&#xA;&#xA;app.MapCarter();&#xA;app.Run();&#xA;&#xA;public class HomeModule : ICarterModule&#xA;{&#xA;    public void AddRoutes(IEndpointRouteBuilder app)&#xA;    {&#xA;        app.MapGet(&#34;/&#34;, () =&amp;gt; &#34;Hello from Carter!&#34;);&#xA;        app.MapGet(&#34;/qs&#34;, (HttpRequest req) =&amp;gt;&#xA;        {&#xA;            var ids = req.Query.AsMultiple&amp;lt;int&amp;gt;(&#34;ids&#34;);&#xA;            return $&#34;It&#39;s {string.Join(&#34;,&#34;, ids)}&#34;;&#xA;        });&#xA;        app.MapGet(&#34;/conneg&#34;, (HttpResponse res) =&amp;gt; res.Negotiate(new { Name = &#34;Dave&#34; }));&#xA;        app.MapPost(&#34;/validation&#34;, HandlePost);&#xA;    }&#xA;&#xA;    private IResult HandlePost(HttpContext ctx, Person person, IDatabase database)&#xA;    {&#xA;        var result = ctx.Request.Validate(person);&#xA;&#xA;        if (!result.IsValid)&#xA;        {&#xA;            return Results.UnprocessableEntity(result.GetFormattedErrors());&#xA;        }&#xA;&#xA;        var id = database.StorePerson(person);&#xA;&#xA;        ctx.Response.Headers.Location = $&#34;/{id}&#34;;&#xA;        return Results.StatusCode(201);&#xA;    }&#xA;}&#xA;&#xA;public record Person(string Name);&#xA;&#xA;public interface IDatabase&#xA;{&#xA;    int StorePerson(Person person);&#xA;}&#xA;&#xA;public class Database : IDatabase&#xA;{&#xA;    public int StorePerson(Person person)&#xA;    {&#xA;        //db stuff&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CarterCommunity/Carter/tree/master/samples&#34;&gt;More samples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned earlier Carter will scan for implementations in your app and register them for DI. However, if you want a more controlled app, Carter comes with a &lt;code&gt;CarterConfigurator&lt;/code&gt; that allows you to register modules, validators and response negotiators manually.&lt;/p&gt; &#xA;&lt;p&gt;Carter will use a response negotiator based on &lt;code&gt;System.Text.Json&lt;/code&gt;, though it provides for custom implementations via the &lt;code&gt;IResponseNegotiator&lt;/code&gt; interface. To use your own implementation of &lt;code&gt;IResponseNegotiator&lt;/code&gt; (say, &lt;code&gt;CustomResponseNegotiator&lt;/code&gt;), add the following line to the initial Carter configuration, in this case as part of &lt;code&gt;Program.cs&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;    builder.Services.AddCarter(configurator: c =&amp;gt;&#xA;    {&#xA;        c.WithResponseNegotiator&amp;lt;CustomResponseNegotiator&amp;gt;();&#xA;        c.WithModule&amp;lt;MyModule&amp;gt;();&#xA;        c.WithValidator&amp;lt;TestModelValidator&amp;gt;()&#xA;    });&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here again, Carter already ships with a response negotiator using &lt;code&gt;Newtonsoft.Json&lt;/code&gt;, so you can wire up the Newtonsoft implementation with the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    builder.Services.AddCarter(configurator: c =&amp;gt;&#xA;    {&#xA;        c.WithResponseNegotiator&amp;lt;NewtonsoftJsonResponseNegotiator&amp;gt;();&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>