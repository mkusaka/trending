<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-04T01:30:58Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pdevito3/QueryKit</title>
    <updated>2023-05-04T01:30:58Z</updated>
    <id>tag:github.com,2023-05-04:/pdevito3/QueryKit</id>
    <link href="https://github.com/pdevito3/QueryKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üéõÔ∏è QueryKit is a .NET library that makes it easier to query your data by providing a fluent and intuitive syntax for filtering and sorting.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;QueryKit üéõÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;QueryKit is a .NET library that makes it easier to query your data by providing a fluent and intuitive syntax for filtering and sorting. The main use case is a lighter weight subset of OData or GraphQL for parsing external filtering and sorting inputs to provide more granular consumption (e.g. a React UI provides filtering controls to filter a worklist). It&#39;s inspired by &lt;a href=&#34;https://github.com/Biarity/Sieve&#34;&gt;Sieve&lt;/a&gt;, but with some differences.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package QueryKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wanted to apply a filter to a &lt;code&gt;DbSet&lt;/code&gt; called &lt;code&gt;People&lt;/code&gt;, we just have to do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var filterInput = &#34;&#34;&#34;FirstName == &#34;Jane&#34; &amp;amp;&amp;amp; Age &amp;gt; 10&#34;&#34;&#34;;&#xA;var people = _dbContext.People&#xA;  &#x9;.ApplyQueryKitFilter(filterInput)&#xA;  &#x9;.ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;QueryKit will automatically translate this into an expression for you. You can even customize your property names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var filterInput = &#34;&#34;&#34;first == &#34;Jane&#34; &amp;amp;&amp;amp; Age &amp;gt; 10&#34;&#34;&#34;;&#xA;var config = new QueryKitConfiguration(config =&amp;gt;&#xA;{&#xA;    config.Property&amp;lt;Person&amp;gt;(x =&amp;gt; x.FirstName).HasQueryName(&#34;first&#34;);&#xA;});&#xA;var people = _dbContext.People&#xA;  &#x9;.ApplyQueryKitFilter(filterInput, config)&#xA;  &#x9;.ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sorting works too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var filterInput = &#34;&#34;&#34;first == &#34;Jane&#34; &amp;amp;&amp;amp; Age &amp;gt; 10&#34;&#34;&#34;;&#xA;var config = new QueryKitConfiguration(config =&amp;gt;&#xA;{&#xA;    config.Property&amp;lt;Person&amp;gt;(x =&amp;gt; x.FirstName).HasQueryName(&#34;first&#34;);&#xA;});&#xA;var people = _dbContext.People&#xA;  &#x9;.ApplyQueryKitFilter(filterInput, config)&#xA;  &#x9;.ApplyQueryKitSort(&#34;first, Age desc&#34;, config)&#xA;  &#x9;.ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s the basics! There&#39;s no services to inject or global set up to worry about, just apply what you want and call it a day. For a full list of capables, see below.&lt;/p&gt; &#xA;&lt;h2&gt;Filtering&lt;/h2&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;To apply filters to your queryable, you just need to pass an input string with your filtering input to &lt;code&gt;ApplyQueryKitFilter&lt;/code&gt; off of a queryable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var people = _dbContext.People.ApplyQueryKitFilter(&#34;Age &amp;lt; 10&#34;).ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a configuration like this. More on configuration options below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var config = new QueryKitConfiguration(config =&amp;gt;&#xA;{&#xA;    config.Property&amp;lt;SpecialPerson&amp;gt;(x =&amp;gt; x.FirstName)&#xA;     &#x9; &#x9;&#x9;.HasQueryName(&#34;first&#34;)&#xA;      &#x9;&#x9;.PreventSort();&#xA;});&#xA;var people = _dbContext.People&#xA;  &#x9;&#x9;.ApplyQueryKitFilter(&#34;first == &#34;Jane&#34; &amp;amp;&amp;amp; Age &amp;lt; 10&#34;, config)&#xA;  &#x9;&#x9;.ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logical Operators&lt;/h3&gt; &#xA;&lt;p&gt;When filtering, you can use logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; for &lt;code&gt;and&lt;/code&gt; as well as &lt;code&gt;||&lt;/code&gt; for &lt;code&gt;or&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = &#34;&#34;&#34;FirstName == &#34;Jane&#34; &amp;amp;&amp;amp; Age &amp;lt; 10&#34;&#34;&#34;;&#xA;var input = &#34;&#34;&#34;FirstName == &#34;Jane&#34; || FirstName == &#34;John&#34; &#34;&#34;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can use &lt;code&gt;^^&lt;/code&gt; for an &lt;code&gt;in&lt;/code&gt; operator. You can add an &lt;code&gt;*&lt;/code&gt; and use &lt;code&gt;^^*&lt;/code&gt; for case-insensitivity as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = &#34;&#34;&#34;(Age ^^ [20, 30, 40]) &amp;amp;&amp;amp; (BirthMonth ^^* [&#34;January&#34;, &#34;February&#34;, &#34;March&#34;]) || (Id ^^ [&#34;6d623e92-d2cf-4496-a2df-f49fa77328ee&#34;])&#34;&#34;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Order of Operations&lt;/h3&gt; &#xA;&lt;p&gt;You can use order of operation with parentheses like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = &#34;&#34;&#34;(FirstName == &#34;Jane&#34; &amp;amp;&amp;amp; Age &amp;lt; 10) || FirstName == &#34;John&#34; &#34;&#34;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparison Operators&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;s a wide variety of comparison operators that use the same base syntax as &lt;a href=&#34;https://github.com/Biarity/Sieve&#34;&gt;Sieve&lt;/a&gt;&#39;s operators. To do a case-insensitive operation, just append a &lt;code&gt; *&lt;/code&gt; at the end of the operator.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Case Insensitive Operator&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Equals&lt;/td&gt; &#xA;   &lt;td&gt;==&lt;/td&gt; &#xA;   &lt;td&gt;==*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Not Equals&lt;/td&gt; &#xA;   &lt;td&gt;!=&lt;/td&gt; &#xA;   &lt;td&gt;!=&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greater Than&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Less Than&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greater Than Or Equal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;gt;=&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Less Than Or Equal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;=&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Starts With&lt;/td&gt; &#xA;   &lt;td&gt;_=&lt;/td&gt; &#xA;   &lt;td&gt;_=*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Does Not Start With&lt;/td&gt; &#xA;   &lt;td&gt;!_=&lt;/td&gt; &#xA;   &lt;td&gt;!_=*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ends With&lt;/td&gt; &#xA;   &lt;td&gt;_-=&lt;/td&gt; &#xA;   &lt;td&gt;_-=*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Does Not End With&lt;/td&gt; &#xA;   &lt;td&gt;!_-=&lt;/td&gt; &#xA;   &lt;td&gt;!_-=*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;@=&lt;/td&gt; &#xA;   &lt;td&gt;@=*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Does Not Contain&lt;/td&gt; &#xA;   &lt;td&gt;!@=&lt;/td&gt; &#xA;   &lt;td&gt;!@=*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Filtering Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;string&lt;/code&gt; and &lt;code&gt;guid&lt;/code&gt; properties should be wrapped in double quotes&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;null&lt;/code&gt; doesn&#39;t need quotes: &lt;code&gt;var input = &#34;Title == null&#34;;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Double quotes can be escaped by using a similar syntax to raw-string literals introduced in C#11:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = &#34;&#34;&#34;&#34;&#34;Title == &#34;&#34;&#34;lamb is great on a &#34;gee-ro&#34; not a &#34;gy-ro&#34; sandwich&#34;&#34;&#34; &#34;&#34;&#34;&#34;&#34;;&#xA;// OR &#xA;var input = &#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;Title == &#34;&#34;&#34;&#34;lamb is great on a &#34;gee-ro&#34; not a &#34;gy-ro&#34; sandwich&#34;&#34;&#34;&#34; &#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dates and times use ISO format:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;DateOnly&lt;/code&gt;: &lt;code&gt;var filterInput = &#34;Birthday == 2022-07-01&#34;;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;DateTimeOffset&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;var filterInput = &#34;Birthday == 2022-07-01T00:00:03Z&#34;;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;DateTime&lt;/code&gt;: &lt;code&gt;var filterInput = &#34;Birthday == 2022-07-01&#34;;&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;var filterInput = &#34;Birthday == 2022-07-01T00:00:03&#34;;&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;var filterInput = &#34;Birthday == 2022-07-01T00:00:03+01:00&#34;;&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;TimeOnly&lt;/code&gt;: &lt;code&gt;var filterInput = &#34;Time == 12:30:00&#34;;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bool&lt;/code&gt; properties need to use &lt;code&gt;== true&lt;/code&gt;, &lt;code&gt;== false&lt;/code&gt;, or the same using the &lt;code&gt;!=&lt;/code&gt; operator. they can not be standalone properies:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;‚ùå &lt;code&gt;var input = &#34;&#34;&#34;Title == &#34;chicken &amp;amp; waffles&#34; &amp;amp;&amp;amp; Favorite&#34;&#34;&#34;;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;‚úÖ &lt;code&gt;var input = &#34;&#34;&#34;Title == &#34;chicken &amp;amp; waffles&#34; &amp;amp;&amp;amp; Favorite == true&#34;&#34;&#34;;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Complex Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = &#34;&#34;&#34;(Title == &#34;lamb&#34; &amp;amp;&amp;amp; ((Age &amp;gt;= 25 &amp;amp;&amp;amp; Rating &amp;lt; 4.5) || (SpecificDate &amp;lt;= 2022-07-01T00:00:03Z &amp;amp;&amp;amp; Time == 00:00:03)) &amp;amp;&amp;amp; (Favorite == true || Email.Value _= &#34;hello@gmail.com&#34;))&#34;&#34;&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Property Settings&lt;/h3&gt; &#xA;&lt;p&gt;Filtering is set up to create an expression using the property names you have on your entity, but you can pass in a config to customize things a bit when needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HasQueryName()&lt;/code&gt; to create a custom alias for a property. For exmaple, we can make &lt;code&gt;FirstName&lt;/code&gt; aliased to &lt;code&gt;first&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PreventFilter()&lt;/code&gt; to prevent filtering on a given property&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = $&#34;&#34;&#34;first == &#34;Jane&#34; || Age &amp;gt; 10&#34;&#34;&#34;;&#xA;var config = new QueryKitConfiguration(config =&amp;gt;&#xA;{&#xA;    config.Property&amp;lt;SpecialPerson&amp;gt;(x =&amp;gt; x.FirstName)&#xA;     &#x9; &#x9;&#x9;.HasQueryName(&#34;first&#34;);&#xA;    config.Property&amp;lt;SpecialPerson&amp;gt;(x =&amp;gt; x.Age)&#xA;      &#x9;&#x9;.PreventFilter();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nested Objects&lt;/h3&gt; &#xA;&lt;p&gt;Say we have a nested object like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;&#xA;public class SpecialPerson&#xA;{&#xA;    public Guid Id { get; set; } = Guid.NewGuid();&#xA;    public EmailAddress Email { get; set; }&#xA;}&#xA;&#xA;public class EmailAddress : ValueObject&#xA;{&#xA;    public EmailAddress(string? value)&#xA;    {&#xA;        Value = value;&#xA;    }&#xA;    &#xA;    public string? Value { get; private set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To actually use the nested properties, you can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = $&#34;&#34;&#34;Email.Value == &#34;{value}&#34; &#34;&#34;&#34;;&#xA;&#xA;// or with an alias...&#xA;var input = $&#34;&#34;&#34;email == &#34;hello@gmail.com&#34; &#34;&#34;&#34;;&#xA;var config = new QueryKitConfiguration(config =&amp;gt;&#xA;{&#xA;    config.Property&amp;lt;SpecialPerson&amp;gt;(x =&amp;gt; x.Email.Value).HasQueryName(&#34;email&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, with EF core, your config might look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public sealed class PersonConfiguration : IEntityTypeConfiguration&amp;lt;SpecialPerson&amp;gt;&#xA;{&#xA;    public void Configure(EntityTypeBuilder&amp;lt;SpecialPerson&amp;gt; builder)&#xA;    {&#xA;        builder.HasKey(x =&amp;gt; x.Id);&#xA;        &#xA;      // Option 1&#xA;        builder.Property(x =&amp;gt; x.Email)&#xA;            .HasConversion(x =&amp;gt; x.Value, x =&amp;gt; new EmailAddress(x))&#xA;            .HasColumnName(&#34;email&#34;);      &#xA;      &#xA;        // Option 2      &#xA;        builder.OwnsOne(x =&amp;gt; x.Email, opts =&amp;gt;&#xA;        {&#xA;            opts.Property(x =&amp;gt; x.Value).HasColumnName(&#34;email&#34;);&#xA;        }).Navigation(x =&amp;gt; x.Email)&#xA;            .IsRequired();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; EF properties configured with &lt;code&gt;HasConversion&lt;/code&gt; are not supported at this time -- if this is a blocker for you, i&#39;d love to hear your use case&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sorting&lt;/h2&gt; &#xA;&lt;p&gt;Sorting is a more simplistic flow. It&#39;s just an input with a comma delimited list of properties to sort by.&lt;/p&gt; &#xA;&lt;h3&gt;Rules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use &lt;code&gt;asc&lt;/code&gt; or &lt;code&gt;desc&lt;/code&gt; to designate if you want it to be ascending or descending. If neither is used, QueryKit will assume &lt;code&gt;asc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can use Sieve syntax as well by prefixing a property with &lt;code&gt;-&lt;/code&gt; to designate it as &lt;code&gt;desc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Spaces after commas are optional&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So all of these are valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = &#34;Title&#34;;&#xA;var input = &#34;Title, Age desc&#34;;&#xA;var input = &#34;Title desc, Age desc&#34;;&#xA;var input = &#34;Title, Age&#34;;&#xA;var input = &#34;Title asc, -Age&#34;;&#xA;var input = &#34;Title, -Age&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Property Settings&lt;/h3&gt; &#xA;&lt;p&gt;Sorting is set up to create an expression using the property names you have on your entity, but you can pass in a config to customize things a bit when needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Just as with filtering, &lt;code&gt;HasQueryName()&lt;/code&gt; to create a custom alias for a property. For exmaple, we can make &lt;code&gt;FirstName&lt;/code&gt; aliased to &lt;code&gt;first&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PreventSort()&lt;/code&gt; to prevent filtering on a given property&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var input = $&#34;&#34;&#34;Age desc, first&#34;&#34;;&#xA;var config = new QueryKitConfiguration(config =&amp;gt;&#xA;{&#xA;    config.Property&amp;lt;SpecialPerson&amp;gt;(x =&amp;gt; x.FirstName)&#xA;          .HasQueryName(&#34;first&#34;)&#xA;          .PreventSort();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>project-sbc/Power-Control-Panel-v2</title>
    <updated>2023-05-04T01:30:58Z</updated>
    <id>tag:github.com,2023-05-04:/project-sbc/Power-Control-Panel-v2</id>
    <link href="https://github.com/project-sbc/Power-Control-Panel-v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Power-Control-Panel-v2&lt;/h1&gt; &#xA;&lt;p&gt;Hello everyone! This is the long awaited version 2 of my power control panel. This is a WORK IN PROGRESS!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LsCFg_GVnc0&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/LsCFg_GVnc0/0.jpg&#34; alt=&#34;IMAGE ALT TEXT HERE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PLEASE READ THIS:&lt;/h1&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. MISUSE OF THIS SOFTWARE COULD CAUSE SYSTEM INSTABILITY OR MALFUNCTION.&lt;/p&gt; &#xA;&lt;h1&gt;Fix Error on Intel Devices Running Windows 11 22H2&lt;/h1&gt; &#xA;&lt;p&gt;Go to RegEdit to the following address: Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\CI\Config change the DWORD value to 0 like the screenshot below. Restart the computer&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/project-sbc/Power-Control-Panel-v2/raw/master/Intel%2022H2%20driver%20fix.jpg?raw=true&#34; alt=&#34;Intel22H2&#34; title=&#34;Intel 22H2 fix&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements:&lt;/h1&gt; &#xA;&lt;p&gt;You need .net 6.0 desktop to run this software OR download the self contained zip in the releases (newer versions only).&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;You can find it in the releases tab here &lt;a href=&#34;https://github.com/project-sbc/Power-Control-Panel-v2/releases&#34;&gt;https://github.com/project-sbc/Power-Control-Panel-v2/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compatible Devices (Windows only)&lt;/h1&gt; &#xA;&lt;h2&gt;Aya&lt;/h2&gt; &#xA;&lt;p&gt;-Aya Neo/Pro/Retro/Next/Air/Air Pro&lt;/p&gt; &#xA;&lt;h2&gt;One Netbook&lt;/h2&gt; &#xA;&lt;p&gt;-One Mix 4, T1, OneGx/Pro -One X Player AMD 4800U/5700U/5800U/6800U mini and big; Intel 1165G7/1195G7/1260p mini and big&lt;/p&gt; &#xA;&lt;h2&gt;GPD&lt;/h2&gt; &#xA;&lt;p&gt;-Win 2, Win 3, Win max 2020, Win Max 2021 Intel/AMD, Win Max 2 1260p, Win Max 2 6800U Pocket 2, Pocket 3&lt;/p&gt; &#xA;&lt;h2&gt;Anbernic&lt;/h2&gt; &#xA;&lt;p&gt;-Win600&lt;/p&gt; &#xA;&lt;h2&gt;Intel Laptops&lt;/h2&gt; &#xA;&lt;p&gt;-4th generation or newer laptops or mini PCs&lt;/p&gt; &#xA;&lt;h2&gt;AMD Laptops&lt;/h2&gt; &#xA;&lt;p&gt;-Most ryzen laptops or mini PCs&lt;/p&gt; &#xA;&lt;h1&gt;Controller Shortcuts:&lt;/h1&gt; &#xA;&lt;p&gt;QUICK ACCESS MENU: LB+RB+DPAD RIGHT Hold for 1 second KEYBOARD: LB+RB+DPAD DOWN Hold for 1 second&lt;/p&gt; &#xA;&lt;h1&gt;Configure RTSS Frame Limit Feature&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/project-sbc/Power-Control-Panel-v2/raw/master/RTSS%20PCP%20Setup.jpg?raw=true&#34; alt=&#34;RTSS&#34; title=&#34;RTSS Setup&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features that are working:&lt;/h1&gt; &#xA;&lt;p&gt;-TDP changing for both AMD and Intel, including 12th gen alder lake -TDP MSR changing for those intel devices that are problematic going above a certain TDP -Volume and brightness (does not auto adjust, working on re-implementing that) -Changing resolution, refresh rate, and windows scaling -Quick Access Menu -Customizable theme -Auto start -Minimize to tray&lt;/p&gt; &#xA;&lt;h1&gt;Donate&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to donate you can at: &lt;a href=&#34;https://ko-fi.com/project_sbc&#34;&gt;https://ko-fi.com/project_sbc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?business=NQFQSSJBTTYY4&amp;amp;currency_code=USD&#34;&gt;https://www.paypal.com/donate?business=NQFQSSJBTTYY4&amp;amp;currency_code=USD&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Unity-Technologies/Unity-Robotics-Hub</title>
    <updated>2023-05-04T01:30:58Z</updated>
    <id>tag:github.com,2023-05-04:/Unity-Technologies/Unity-Robotics-Hub</id>
    <link href="https://github.com/Unity-Technologies/Unity-Robotics-Hub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Central repository for tools, tutorials, resources, and documentation for robotics simulation in Unity.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/images/warehouse.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Unity Robotics Hub&lt;/h1&gt; &#xA;&lt;!-- [![Version](https://img.shields.io/github/v/tag/Unity-Technologies/Unity-Robotics-Hub)](https://github.com/Unity-Technologies/Unity-Robotics-Hub/releases) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache--2.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/ros-melodic-brightgreen&#34; alt=&#34;ROS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/ros-noetic-brightgreen&#34; alt=&#34;ROS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/ros2-foxy-brightgreen&#34; alt=&#34;ROS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/unity-2020.2+-brightgreen&#34; alt=&#34;Unity&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a central repository for tools, tutorials, resources, and documentation for robotic simulation in Unity.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The contents of this repository are in active development. Its features and API are subject to significant change as development progresses.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We&#39;re currently working on lots of things! Please take a short moment fill out our &lt;a href=&#34;https://unitysoftware.co1.qualtrics.com/jfe/form/SV_0ojVkDVW0nNrHkW&#34;&gt;survey&lt;/a&gt; to help us identify what products and packages to build next.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Simulation plays an important role in robotics development, and we‚Äôre here to ensure that roboticists can use Unity for these simulations. We&#39;re starting off with a set of tools to make it easier to use Unity with existing ROS-based workflows. Try out some of our samples below to get started quickly.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/tutorials/quick_setup.md&#34;&gt;Quick Installation Instructions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Brief steps on installing the Unity Robotics packages.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/tutorials/pick_and_place/README.md&#34;&gt;Pick-and-Place Tutorial&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A complete end-to-end demonstration, including how to set up the Unity environment, how to import a robot from URDF, and how to set up two-way communication with ROS for control.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/Robotics-Object-Pose-Estimation&#34;&gt;Object Pose Estimation Tutorial&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A complete end-to-end demonstration in which we collect training data in Unity and use that data to train a deep neural network to predict the pose of a cube. This model is then deployed in a simulated robotic pick-and-place task.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/articulations-robot-demo&#34;&gt;Articulations Robot Demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A robot simulation demonstrating Unity&#39;s new physics solver (no ROS dependency).&lt;/p&gt; &#xA;&lt;h3&gt;[&lt;strong&gt;New!&lt;/strong&gt;] &lt;a href=&#34;https://github.com/Unity-Technologies/Robotics-Nav2-SLAM-Example&#34;&gt;Navigation 2 SLAM Example&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An example simulation environment, integrated with ROS 2 and &lt;strong&gt;[New!] Visualizations&lt;/strong&gt;, which enables the exercise of ROS 2&#39;s Navigation 2 and slam_toolbox packages using a simulated Turtlebot 3.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tutorial&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/tutorials/ros_unity_integration/README.md&#34;&gt;ROS‚ÄìUnity Integration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A set of component-level tutorials showing how to set up communication between ROS and Unity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/tutorials/urdf_importer/urdf_tutorial.md&#34;&gt;URDF Importer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Steps on using the Unity package for loading &lt;a href=&#34;http://wiki.ros.org/urdf&#34;&gt;URDF&lt;/a&gt; files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;strong&gt;New!&lt;/strong&gt;] &lt;a href=&#34;https://github.com/Unity-Technologies/ROS-TCP-Connector/raw/main/com.unity.robotics.visualizations/Documentation~/README.md&#34;&gt;Visualizations&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Usage instructions for adding visualizations for incoming and outgoing ROS messages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Component Repos&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repo&lt;/th&gt; &#xA;   &lt;th&gt;Functionality&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ROS-TCP-Endpoint&#34;&gt;ROS TCP Endpoint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ROS node for sending/receiving messages from Unity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ROS-TCP-Connector&#34;&gt;ROS TCP Connector&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unity package for sending, receiving, and visualizing messages from ROS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/URDF-Importer&#34;&gt;URDF Importer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unity package for loading &lt;a href=&#34;http://wiki.ros.org/urdf&#34;&gt;URDF&lt;/a&gt; files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Blog Posts and Talks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[&lt;strong&gt;New!&lt;/strong&gt;] (October 4, 2021) Introducing: Unity Robotics Visualizations Package &lt;a href=&#34;https://blog.unity.com/manufacturing/Introducing-Unity-Robotics-Visualizations-Package&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(August 13, 2021) Advance your robot autonomy with ROS 2 and Unity &lt;a href=&#34;https://blog.unity.com/manufacturing/advance-your-robot-autonomy-with-ros-2-and-unity&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(March 2, 2021) Teaching robots to see with Unity &lt;a href=&#34;https://blogs.unity3d.com/2021/03/02/teaching-robots-to-see-with-unity/&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(November 19, 2020) Robotics simulation in Unity is as easy as 1, 2, 3! &lt;a href=&#34;https://blogs.unity3d.com/2020/11/19/robotics-simulation-in-unity-is-as-easy-as-1-2-3/&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(November 12, 2020) Unite Now 2020: Simulating Robots with ROS and Unity &lt;a href=&#34;https://resources.unity.com/unitenow/onlinesessions/simulating-robots-with-ros-and-unity&#34;&gt;video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(August 26, 2020) Announcing Unity Robotic Simulation &lt;a href=&#34;https://unity.com/solutions/automotive-transportation-manufacturing/robotics&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(May 20, 2020) Use articulation bodies to easily prototype industrial designs with realistic motion and behavior &lt;a href=&#34;https://blogs.unity3d.com/2020/05/20/use-articulation-bodies-to-easily-prototype-industrial-designs-with-realistic-motion-and-behavior/&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More from Unity&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unity.com/products/unity-simulation&#34;&gt;Unity Industrial Simulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unity.com/computer-vision&#34;&gt;Unity Computer Vision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents&#34;&gt;Unity ML-Agents Toolkit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;New Physics Features in Unity&lt;/h2&gt; &#xA;&lt;h3&gt;New Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contact Modification API&lt;/strong&gt; This API will allow users to define custom contact reactions, such as ignoring subsets of contact points, in order to help simulate holes, slippery surfaces, soft contacts, and more. It is available in Unity versions &lt;strong&gt;2021.2a12+&lt;/strong&gt;. &lt;a href=&#34;https://forum.unity.com/threads/experimental-contacts-modification-api.924809/&#34;&gt;Read more about the new Contact Modification API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Collision detection modes exposed for ArticulationBody: discrete, sweep-based CCD, and speculative CCD&lt;/strong&gt;. New continuous collision detection (CCD) modes will ensure that fast-moving objects collide with objects, instead of tunneling or passing through those objects, which can happen in the default ‚Äúdiscrete‚Äù mode. This API is available in Unity versions &lt;strong&gt;2020.3.5f1+&lt;/strong&gt;. &lt;a href=&#34;https://docs.unity3d.com/2020.3/Documentation/ScriptReference/ArticulationBody-collisionDetectionMode.html&#34;&gt;Read more about continuous collision detection&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Coming Soon&lt;/h3&gt; &#xA;&lt;p&gt;Here‚Äôs a peek into what our Physics Team is hard at work on‚Ä¶&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wheel Collider shapes&lt;/strong&gt;. This feature will allow the user to specify the shape of the collider to be used for collision detection. Currently the collider shape is fixed to a cylinder, and collision detection is performed by casting a ray from the center of the cylinder. Custom shapes will improve the accuracy of simulating wheels over rough terrains, holes, etc. &lt;a href=&#34;https://docs.unity3d.com/Manual/class-WheelCollider.html&#34;&gt;Read more about Wheel Collider&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Force/Torque Sensor API&lt;/strong&gt;. This API will allow users to get the force and torque acting on an articulation body (useful for simulating a force/torque sensor!), as well as to get the motor torque applied by an articulation drive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Query primitives&lt;/strong&gt;. These simple, GameObject-less shapes allow for collision detection without requiring simulation (i.e., without calling Physics.Simulate). This feature will allow users to initialize objects in feasible locations, and can also be used for motion planning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ROS 2&lt;/h2&gt; &#xA;&lt;p&gt;ROS2 support is now available! You can get started by following &lt;a href=&#34;https://github.com/Unity-Technologies/Unity-Robotics-Hub/raw/main/tutorials/ros_unity_integration/publisher.md&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;The Unity Robotics projects are open-source and we encourage and welcome contributions. If you wish to contribute, be sure to review our &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For questions or discussions about Unity Robotics package installations or how to best set up and integrate your robotics projects, please create a new thread on the &lt;a href=&#34;https://forum.unity.com/forums/robotics.623/&#34;&gt;Unity Robotics forum&lt;/a&gt; and make sure to include as much detail as possible.&lt;/p&gt; &#xA;&lt;p&gt;For feature requests, bugs, or other issues, please file a &lt;a href=&#34;https://github.com/Unity-Technologies/Unity-Robotics-Hub/issues&#34;&gt;GitHub issue&lt;/a&gt; using the provided templates and the Robotics team will investigate as soon as possible.&lt;/p&gt; &#xA;&lt;p&gt;For any other questions or feedback, connect directly with the Robotics team at &lt;a href=&#34;mailto:unity-robotics@unity3d.com&#34;&gt;unity-robotics@unity3d.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Newsletter&lt;/h2&gt; &#xA;&lt;p&gt;To get notified about new updates and features, &lt;a href=&#34;https://create.unity3d.com/robotics-simulation-newsletter-sign-up&#34;&gt;sign up for our newsletter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/faq.md&#34;&gt;FAQs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/Unity-Robotics-Hub/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>