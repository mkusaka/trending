<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-02T01:30:00Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Arcenox-co/TickerQ</title>
    <updated>2025-08-02T01:30:00Z</updated>
    <id>tag:github.com,2025-08-02:/Arcenox-co/TickerQ</id>
    <link href="https://github.com/Arcenox-co/TickerQ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TickerQ is a fast, reflection-free background task scheduler for .NET ‚Äî built with source generators, EF Core integration, cron + time-based execution, and a real-time dashboard.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TickerQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ZJemWvp9MK&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-TickerQ-5865F2?logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Discord Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/tickerq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/tickerq.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/tickerq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/tickerq.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Arcenox-co/TickerQ/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Arcenox-co/TickerQ/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build NuGet Packages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tickerq.arcenox.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs%20-official%20web-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Robust. Adaptive. Precise.&lt;/strong&gt;&lt;br&gt; TickerQ is a fast, reflection-free background task scheduler for .NET ‚Äî built with source generators, EF Core integration, cron + time-based execution, and a real-time dashboard.&lt;/p&gt; &#xA;&lt;h3&gt;üìö Full Docs: &lt;a href=&#34;https://tickerq.arcenox.com&#34;&gt;https://tickerq.arcenox.com&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of v2.2.0, all TickerQ packages are versioned together ‚Äî even if a package has no changes ‚Äî to keep the ecosystem in sync. Always update all packages to the same version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time and Cron Scheduling&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stateless Core&lt;/strong&gt; with source generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EF Core Persistence&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Live Dashboard UI&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Retry Policies &amp;amp; Throttling&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency Injection support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-node distributed coordination&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Core (required)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package TickerQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Entity Framework Integration (optional)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package TickerQ.EntityFrameworkCore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dashboard UI (optional)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package TickerQ.Dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Basic Setup&lt;/h2&gt; &#xA;&lt;h3&gt;In &lt;code&gt;Program.cs&lt;/code&gt; or &lt;code&gt;Startup.cs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;builder.Services.AddTickerQ(options =&amp;gt;&#xA;{&#xA;    options.SetMaxConcurrency(4); // Optional&#xA;    options.SetExceptionHandler&amp;lt;MyExceptionHandler&amp;gt;(); // Optional&#xA;    options.AddOperationalStore&amp;lt;MyDbContext&amp;gt;(efOpt =&amp;gt; &#xA;    {&#xA;        efOpt.UseModelCustomizerForMigrations(); // Applies custom model customization only during EF Core migrations&#xA;        efOpt.CancelMissedTickersOnApplicationRestart(); // Useful in distributed mode&#xA;    }); // Enables EF-backed storage&#xA;    options.AddDashboard(basePath: &#34;/tickerq-dashboard&#34;); // Dashboard path&#xA;    options.AddDashboardBasicAuth(); // Enables simple auth&#xA;});&#xA;&#xA;app.UseTickerQ(); // Activates job processor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ùóÔ∏èIf Not Using &lt;code&gt;UseModelCustomizerForMigrations()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;You must apply TickerQ configurations manually in your &lt;code&gt;DbContext&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyDbContext : DbContext&#xA;{&#xA;    public MyDbContext(DbContextOptions&amp;lt;MyDbContext&amp;gt; options)&#xA;        : base(options) { }&#xA;&#xA;    protected override void OnModelCreating(ModelBuilder builder)&#xA;    {&#xA;        base.OnModelCreating(builder);&#xA;&#xA;        // Apply TickerQ entity configurations explicitly&#xA;        builder.ApplyConfiguration(new TimeTickerConfigurations());&#xA;        builder.ApplyConfiguration(new CronTickerConfigurations());&#xA;        builder.ApplyConfiguration(new CronTickerOccurrenceConfigurations());&#xA;&#xA;        // Alternatively, apply all configurations from assembly:&#xA;        // builder.ApplyConfigurationsFromAssembly(typeof(TimeTickerConfigurations).Assembly);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° &lt;strong&gt;Recommendation:&lt;/strong&gt;&lt;br&gt; Use &lt;code&gt;UseModelCustomizerForMigrations()&lt;/code&gt; to cleanly separate infrastructure concerns from your core domain model, especially during design-time operations like migrations.&lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re using third-party libraries (e.g., OpenIddict) that also override &lt;code&gt;IModelCustomizer&lt;/code&gt;, you must either merge customizations or fall back to manual configuration inside &lt;code&gt;OnModelCreating()&lt;/code&gt; to avoid conflicts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Job Definition&lt;/h2&gt; &#xA;&lt;h3&gt;1. &lt;strong&gt;Cron Job (Recurring)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class CleanupJobs&#xA;{&#xA;    [TickerFunction(functionName: &#34;CleanupLogs&#34;, cronExpression: &#34;0 0 * * *&#34; )]&#xA;    public void CleanupLogs()&#xA;    {&#xA;        // Runs every midnight&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This uses a cron expression to run daily at midnight.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;2. &lt;strong&gt;One-Time Job (TimeTicker)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NotificationJobs&#xA;{&#xA;    [TickerFunction(functionName: &#34;SendWelcome&#34;)]&#xA;    public Task SendWelcome(TickerFunctionContext&amp;lt;string&amp;gt; tickerContext ,CancellationToken ct)&#xA;    {&#xA;        Console.WriteLine(tickerContext.Request); // Output: User123&#xA;        return Task.CompletedTask;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then schedule it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await _timeTickerManager.AddAsync(new TimeTicker&#xA;{&#xA;    Function = &#34;SendWelcome&#34;,&#xA;    ExecutionTime = DateTime.UtcNow.AddMinutes(1),&#xA;    Request = TickerHelper.CreateTickerRequest&amp;lt;string&amp;gt;(&#34;User123&#34;),&#xA;    Retries = 3,&#xA;    RetryIntervals = new[] { 30, 60, 120 }, // Retry after 30s, 60s, then 2min&#xA;&#xA;    // Optional batching&#xA;    BatchParent = Guid.Parse(&#34;....&#34;),&#xA;    BatchRunCondition = BatchRunCondition.OnSuccess&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;3. &lt;strong&gt;Injecting Services in Jobs (Fully DI Support)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ReportJobs&#xA;{&#xA;    private readonly IReportService _reportService;&#xA;&#xA;    public ReportJobs(IReportService reportService)&#xA;    {&#xA;        _reportService = reportService;&#xA;    }&#xA;&#xA;    [TickerFunction(functionName: &#34;GenerateDailyReport&#34;, cronExpression: &#34;0 6 * * *&#34;)]&#xA;    public async Task GenerateDailyReport()&#xA;    {&#xA;        await _reportService.GenerateAsync();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dashboard UI&lt;/h2&gt; &#xA;&lt;h3&gt;Check out Dashboard Overview: &lt;a href=&#34;https://tickerq.arcenox.com/intro/dashboard-overview.html&#34;&gt;TickerQ-Dashboard-Examples&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Enabled by adding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;options.AddDashboard(basePath: &#34;/tickerq-dashboard&#34;);&#xA;options.AddDashboardBasicAuth(); // Optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessible at &lt;code&gt;/tickerq-dashboard&lt;/code&gt;, it shows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System status&lt;/li&gt; &#xA; &lt;li&gt;Active tickers&lt;/li&gt; &#xA; &lt;li&gt;Job queue state&lt;/li&gt; &#xA; &lt;li&gt;Cron ticker stats&lt;/li&gt; &#xA; &lt;li&gt;Execution history&lt;/li&gt; &#xA; &lt;li&gt;Trigger/cancel/edit jobs live&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Auth config (optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;TickerQBasicAuth&#34;: {&#xA;  &#34;Username&#34;: &#34;admin&#34;,&#xA;  &#34;Password&#34;: &#34;admin&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üîê Retry &amp;amp; Locking&lt;/h2&gt; &#xA;&lt;p&gt;TickerQ supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retries per job&lt;/li&gt; &#xA; &lt;li&gt;Retry intervals (&lt;code&gt;RetryIntervals&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Distributed locking (EF mode only)&lt;/li&gt; &#xA; &lt;li&gt;Job ownership tracking across instances&lt;/li&gt; &#xA; &lt;li&gt;Cooldown on job failure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üß™ Advanced: Manual CronTicker Scheduling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await _cronTickerManager.AddAsync(new CronTicker&#xA;{&#xA;    Function = &#34;CleanupLogs&#34;,&#xA;    CronExpression = &#34;0 */6 * * *&#34;, // Every 6 hours&#xA;    Retries = 2,&#xA;    RetryIntervals = new[] { 60, 300 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Developer Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;[TickerFunction]&lt;/code&gt; to register jobs&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;FunctionName&lt;/code&gt; consistently across schedule and handler&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;CancellationToken&lt;/code&gt; for graceful cancellation&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Request&lt;/code&gt; to pass dynamic data to jobs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ü§ù Contribution&lt;/h2&gt; &#xA;&lt;p&gt;PRs, ideas, and issues are welcome!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork &amp;amp; branch&lt;/li&gt; &#xA; &lt;li&gt;Code your change&lt;/li&gt; &#xA; &lt;li&gt;Submit a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MIT OR Apache 2.0&lt;/strong&gt; ¬© &lt;a href=&#34;https://arcenox.com&#34;&gt;Arcenox&lt;/a&gt;&lt;br&gt; You may choose either license to use this software.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PixiEditor/PixiEditor</title>
    <updated>2025-08-02T01:30:00Z</updated>
    <id>tag:github.com,2025-08-02:/PixiEditor/PixiEditor</id>
    <link href="https://github.com/PixiEditor/PixiEditor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PixiEditor is a Universal Editor for all your 2D needs&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/flabbet/PixiEditor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/flabbet/PixiEditor&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/flabbet/PixiEditor/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/PixiEditor/PixiEditor/total&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/qSRMYmq&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/discord/join%20chat/7289DA?icon=discord&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reddit.com/r/PixiEditor&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/PixiEditor?label=%20r%2FPixiEditor&amp;amp;logoColor=%23e3002d&#34; alt=&#34;Subreddit subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.pixieditor.net/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PixiEditor-Forum-red?link=https%3A%2F%2Fforum.pixieditor.net%2F&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img width=&#34;50%&#34; align=&#34;center&#34; src=&#34;https://github.com/user-attachments/assets/bd08c8bd-f610-449d-b1e2-6a990e562518&#34;&gt; &#xA; &lt;h2&gt;The only 2D Graphics Editor you&#39;ll ever need&lt;/h2&gt; &#xA; &lt;p&gt;&lt;strong&gt;PixiEditor&lt;/strong&gt; is a universal 2D editor that was made to provide you with tools and features for all your 2D needs. Create beautiful sprites for your games, animations, edit images, create logos. All packed up in an intuitive and familiar interface.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pixieditor.net/download&#34;&gt;&lt;img src=&#34;https://github.com/nnakocaj/supreme-train/raw/main/download1.png&#34; width=&#34;250&#34; alt=&#34;Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nnakocaj/supreme-train/raw/main/interface.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Toolsets for any scenario&lt;/h3&gt; &#xA;&lt;p&gt;PixiEditor 2.0 comes by default with 3 toolsets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pixel art&lt;/strong&gt; - it contains tool suited for pixel-perfect scenarios&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Painting&lt;/strong&gt; - basic painting tools, soft brushes, anti aliased shapes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vector&lt;/strong&gt; - shapes and paths for creating vectors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All &lt;strong&gt;toolsets can be used on one canvas&lt;/strong&gt;. Mix vector with raster. Export to png, jpg, svg, gif, mp4 and more!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nnakocaj/supreme-train/raw/main/toolsets.gif?raw=true&#34; width=&#34;70%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Animations&lt;/h3&gt; &#xA;&lt;p&gt;Version 2.0 comes with a timeline and animation capabilities. You can create frame by frame animations or use nodes to animate your custom shaders. Key frame animations with vectors are on our roadmap.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nnakocaj/supreme-train/raw/main/timeline1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nodes&lt;/h3&gt; &#xA;&lt;p&gt;Node render system is what powers such extensive capabilities. All layers, effects and the layer structure are nodes or a result of its connections. PixiEditor exposes node graph for every document, so you are free to customize your image however you want and create procedural art/animations!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nnakocaj/supreme-train/raw/main/node.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://pixieditor.net/docs/contribution/compileguide/&#34;&gt;Compile Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For a seamless collaboration &lt;a href=&#34;https://pixieditor.net/docs/contribution/starthere//&#34;&gt;Start Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Got stuck? We are here to &lt;a href=&#34;https://pixieditor.net/help&#34;&gt;Help&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://discord.gg/DwaXAuXVzv&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://newsletter.pixieditor.net/uploads/discord.png&#34; alt=&#34;discord&#34; width=&#34;50/&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://store.steampowered.com/app/2218560/PixiEditor__Pixel_Art_Editor/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://newsletter.pixieditor.net/uploads/steam.png&#34; alt=&#34;steam&#34; width=&#34;50/&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.youtube.com/@PixiEditor&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://newsletter.pixieditor.net/uploads/youtube.png&#34; alt=&#34;youtube&#34; width=&#34;50/&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://twitter.com/PixiEditor&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://newsletter.pixieditor.net/uploads/twitter.png&#34; alt=&#34;twitter&#34; width=&#34;50/&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.reddit.com/r/PixiEditor&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://newsletter.pixieditor.net/uploads/reddit.png&#34; alt=&#34;reddit&#34; width=&#34;50/&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.linkedin.com/company/pixieditor&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://newsletter.pixieditor.net/uploads/linkedin.png&#34; alt=&#34;linkedin&#34; width=&#34;50/&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>