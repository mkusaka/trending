<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-26T01:23:32Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>S1lkys/SharpKiller</title>
    <updated>2023-10-26T01:23:32Z</updated>
    <id>tag:github.com,2023-10-26:/S1lkys/SharpKiller</id>
    <link href="https://github.com/S1lkys/SharpKiller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lifetime AMSI bypass by @ZeroMemoryEx ported to .NET Framework 4.8&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SharpKiller&lt;/h1&gt; &#xA;&lt;p&gt;Lifetime AMSI bypass AMSI-Killer by @ZeroMemoryEx ported to .NET Framework 4.8.&lt;/p&gt; &#xA;&lt;p&gt;Newly integrated features:&lt;/p&gt; &#xA;&lt;p&gt;[ x ] - Live scan for new powershell processes every 0.5 seconds -&amp;gt; Automatically patches new powershell instances&lt;/p&gt; &#xA;&lt;h2&gt;Opcode Scan&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;we get the exact address of the jump instruction by searching for the first byte of each instruction this technique is effective even in the face of updates or modifications to the target data set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;for example :&lt;/p&gt; &lt;p&gt;&lt;code&gt; | 48:85D2 | test rdx, rdx |&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt; | 74 3F | je amsi.7FFAE957C694 |&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt; | 48 : 85C9 | test rcx, rcx |&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt; | 74 3A | je amsi.7FFAE957C694 |&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt; | 48 : 8379 08 00 | cmp qword ptr ds : [rcx + 8] , 0 |&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt; | 74 33 | je amsi.7FFAE957C694 |&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;the search pattern will be like this :&lt;/p&gt; &lt;p&gt;&lt;code&gt;{ 0x48,&#39;?&#39;,&#39;?&#39;, 0x74,&#39;?&#39;,0x48,&#39;?&#39; ,&#39;?&#39; ,0x74,&#39;?&#39; ,0x48,&#39;?&#39; ,&#39;?&#39; ,&#39;?&#39; ,&#39;?&#39;,0x74,0x33}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/221431685-60fb2012-db0f-41aa-bd7b-3a19f07c91c4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Patch&lt;/h1&gt; &#xA;&lt;h2&gt;Before Patch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The program tests the value of RDX against itself. If the comparison evaluates to 0, the program executes a jump to return. Otherwise, the program proceeds to evaluate the next instruction&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/221431975-73c78c9c-5358-44c2-b0de-41d68024e2bb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;we cant execute &#34;Invoke-Mimikatz&#34;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/221432132-20993ccf-c53e-493d-8b22-feaea86fb6bf.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;After Patch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;we patch the first byte and change it from JE to JMP so it return directly&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/221444031-5b8c365f-cb38-4ce4-89b5-153ecc12208d.png&#34; alt=&#34;Screenshot 2023-02-26 195848&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/60795188/221432418-841db688-879c-4915-8d6e-926236a3732c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;now we can execute &#34;Invoke-Mimikatz&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/S1lkys/SharpKiller/main/media/demo_.jpg&#34; height=&#34;450&#34;&gt; &#xA;&lt;h2&gt;Newly created processes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sharp-Killer will patch any newly created Powershell processes in near real time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/S1lkys/SharpKiller/main/media/demo.jpg&#34; height=&#34;450&#34;&gt; &#xA;&lt;h3&gt;Video demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/S1lkys/SharpKiller/main/media/demo.gif&#34; alt=&#34;video&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;References:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZeroMemoryEx/Amsi-Killer&#34;&gt;https://github.com/ZeroMemoryEx/Amsi-Killer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>leooneone/aibpm.plus</title>
    <updated>2023-10-26T01:23:32Z</updated>
    <id>tag:github.com,2023-10-26:/leooneone/aibpm.plus</id>
    <link href="https://github.com/leooneone/aibpm.plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AIBPM是一个开源的工作流引擎。本项目是后端服务，前端请移步aibpm.ui.plus。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;一个基于.Net开发的工作流/工单系统，自己实现的顺序流引擎。&lt;/p&gt; &#xA;&lt;h3&gt;主要功能&lt;/h3&gt; &#xA;&lt;h4&gt;流程引擎：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- 支持开始、审批、人工和结束等节点&#xA;- 支持排他和并行网关&#xA;- 支持串签、并签和或签审批&#xA;- 支持多种参与人选择方式&#xA;    指定人员&#xA;    指定角色&#xA;    发起人自己&#xA;    表单内联系人 &#xA;    组织负责人 &#xA;    上级主管   &#xA;    发起人自选  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;其他特性&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;- 零SQL语句，支持10余种数据库&#xA;- 灵活的权限控制&#xA;- 动态API&#xA;- 模块化框架&#xA;- 文档、前端API自动生成&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;前端强大&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;全图形操作，零代码 请参考我的另一个开源项目admin.ui.plus&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;在线体验&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;演示地址：&lt;a href=&#34;https://demo.aibpm.ailicloud.com&#34; target=&#34;_blank&#34;&gt;demo.bpm.ailicloud.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;查看文档：&lt;a href=&#34;https://doc.aibpm.ailicloud.com&#34; target=&#34;_blank&#34;&gt;doc.bpm.ailicloud.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;项目下载后，直接编译运行项目&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ctrl + F5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tips：&lt;/h4&gt;</summary>
  </entry>
</feed>