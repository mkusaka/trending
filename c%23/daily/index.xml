<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-19T01:27:14Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NebulaModTeam/nebula</title>
    <updated>2023-12-19T01:27:14Z</updated>
    <id>tag:github.com,2023-12-19:/NebulaModTeam/nebula</id>
    <link href="https://github.com/NebulaModTeam/nebula" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multiplayer mod for the game Dyson Sphere Program&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nebula Multiplayer Mod&lt;/h1&gt; &#xA;&lt;p&gt;An open-source, multiplayer mod for the game &lt;a href=&#34;https://store.steampowered.com/app/1366540/Dyson_Sphere_Program/&#34;&gt;Dyson Sphere Program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Where can I get mod support?&lt;/h2&gt; &#xA;&lt;p&gt;Please join our &lt;a href=&#34;https://discord.gg/UHeB2QvgDa&#34;&gt;Discord Server&lt;/a&gt; and ask your question in the &lt;code&gt;General&lt;/code&gt; channel. We have a really nice community that will be able to answer your questions.&lt;/p&gt; &#xA;&lt;h2&gt;How can I play this mod?&lt;/h2&gt; &#xA;&lt;p&gt;Please do keep in mind that this mod is still in heavy development, it may still contains bugs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stable version of the mod can be downloaded from &lt;a href=&#34;https://dsp.thunderstore.io/package/nebula/NebulaMultiplayerMod/&#34;&gt;Thunderstore&lt;/a&gt; (Recommended).&lt;/li&gt; &#xA; &lt;li&gt;If you want to install the latest version of the mod, you can install pre-release versions be following the &lt;a href=&#34;https://github.com/hubastard/nebula/wiki/Installing-a-pre-release-version&#34;&gt;installation guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To connect, check &lt;a href=&#34;https://github.com/hubastard/nebula/wiki/Hosting-and-Joining&#34;&gt;hosting and joining guide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This mod has an API, that makes it easier for other mod developers to make their mods compatible with Nebula. If you are a mod developer and you want your mods to be compatible, follow the instructions &lt;a href=&#34;https://github.com/hubastard/nebula/wiki/Nebula-mod-API&#34;&gt;here&lt;/a&gt;. Also you can always join our &lt;a href=&#34;https://discord.gg/UHeB2QvgDa&#34;&gt;Discord Server&lt;/a&gt; for help with using the API.&lt;/p&gt; &#xA;&lt;h2&gt;Chat&lt;/h2&gt; &#xA;&lt;p&gt;The chat window can opened/closed using Alt + Backtick (configurable in game settings under Control). Also in settings (under Multiplayer) is an option to disable the chat window from automatically opening when a message is received.&lt;/p&gt; &#xA;&lt;h2&gt;What is the current status?&lt;/h2&gt; &#xA;&lt;p&gt;Major refactors will happen while the project grows. Join the &lt;a href=&#34;https://discord.gg/UHeB2QvgDa&#34;&gt;Discord Server&lt;/a&gt; if you want to see to latest state of our development.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Here is a short list of what is currently implemented&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Server / Client communication&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom Multiplayer menu in-game&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Player Movement syncing on Planet&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Player Movement syncing in Space&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Player VFX syncing (jetpack, torch, ...)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Player SFX syncing (footsteps sound, torch sound, ...)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Players have different colors&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Game Time syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Universe settings syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Client planet loading from server&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Planet vegetation mining syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Planet resources syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Build preview syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entity creation syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entity desctruction syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Entity upgrade syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dyson spheres syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Researches syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Factories statistics syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Containers inventory syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Building Interaction syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Belts syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dropped items syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interstellar Station syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Drones position syncing&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Foundation syncing (terrain deformation)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Server state persistence&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Power network syncing&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;How can I contribute?&lt;/h2&gt; &#xA;&lt;p&gt;Please join our &lt;a href=&#34;https://discord.gg/UHeB2QvgDa&#34;&gt;Discord Server&lt;/a&gt; to ask if someone is already working on the task that you want to do. Once, you are done with your modification, simply submit a pull request. Contribution documentation can be found here: &lt;a href=&#34;https://github.com/hubastard/nebula/wiki/Setting-up-a-development-environment&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How can I support the team?&lt;/h2&gt; &#xA;&lt;p&gt;If you like what we do and would like to support us, you can donate through our &lt;a href=&#34;https://www.patreon.com/nebula_mod_team&#34;&gt;Patreon&lt;/a&gt;. Thanks for the support &amp;lt;3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>amantinband/clean-architecture</title>
    <updated>2023-12-19T01:27:14Z</updated>
    <id>tag:github.com,2023-12-19:/amantinband/clean-architecture</id>
    <link href="https://github.com/amantinband/clean-architecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ultimate clean architecture template for .NET applications üßπ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/amantinband/clean-architecture/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/amantinband/clean-architecture/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amantinband/clean-architecture/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/amantinband/clean-architecture/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish template to NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://GitHub.com/amantinband/clean-architecture/graphs/contributors/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/amantinband/clean-architecture&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amantinband/clean-architecture/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/amantinband/clean-architecture.svg?sanitize=true&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amantinband/clean-architecture/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/amantinband/clean-architecture&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/amantinband/clean-architecture&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/amantinband/clean-architecture/branch/main/graph/badge.svg?token=DR2EBIWK7B&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Title.png&#34; alt=&#34;Clean Architecture Template Title&#34;&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet new install Amantinband.CleanArchitecture.Template&#xA;&#xA;dotnet new clean-arch -o CleanArchitecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#%EF%B8%8Fimportant-notice-%EF%B8%8F&#34;&gt;Ô∏èImportant notice ‚ö†Ô∏è&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#give-it-a-star-&#34;&gt;Give it a star ‚≠ê&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#domain-overview-&#34;&gt;Domain Overview üåç&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#basic-subscription&#34;&gt;Basic Subscription&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#pro-subscription&#34;&gt;Pro Subscription&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#use-cases--features-&#34;&gt;Use Cases / Features ü§ì&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#subscriptions&#34;&gt;Subscriptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#reminders&#34;&gt;Reminders&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#getting-started-&#34;&gt;Getting Started üèÉ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#folder-structure-&#34;&gt;Folder Structure üìÅ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#authorization-&#34;&gt;Authorization üîê&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#authorization-types&#34;&gt;Authorization Types&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#role-based-authorization&#34;&gt;Role-Based Authorization&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#permission-based-authorization&#34;&gt;Permission-Based Authorization&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#policy-based-authorization&#34;&gt;Policy-Based Authorization&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#mixing-authorization-types&#34;&gt;Mixing Authorization Types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#testing-&#34;&gt;Testing üìù&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#test-types&#34;&gt;Test Types&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#domain-layer-unit-tests&#34;&gt;Domain Layer Unit Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#application-layer-unit-tests&#34;&gt;Application Layer Unit Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#application-layer-subcutaneous-tests&#34;&gt;Application Layer Subcutaneous Tests&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#presentation-layer-integration-tests&#34;&gt;Presentation Layer Integration Tests&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#fun-features-&#34;&gt;Fun features üíÉüï∫&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#domain-events--eventual-consistency&#34;&gt;Domain Events &amp;amp; Eventual Consistency&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#eventual-consistency-mechanism&#34;&gt;Eventual Consistency Mechanism&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#background-service-for-sending-email-reminders&#34;&gt;Background service for sending email reminders&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#configure-email-settings&#34;&gt;Configure Email Settings&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#configure-email-settings-manually&#34;&gt;Configure Email Settings Manually&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#configure-email-settings-via-user-secrets&#34;&gt;Configure Email Settings via User Secrets&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#contribution-&#34;&gt;Contribution ü§≤&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#credits-&#34;&gt;Credits üôè&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/#license-&#34;&gt;License ü™™&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Ô∏èImportant notice ‚ö†Ô∏è&lt;/h1&gt; &#xA;&lt;p&gt;This template is still under construction üë∑.&lt;/p&gt; &#xA;&lt;p&gt;Check out my comprehensive &lt;a href=&#34;https://dometrain.com/bundle/from-zero-to-hero-clean-architecture/?coupon_code=GITHUB&#34;&gt;course&lt;/a&gt; on Dometrain where I cover everything you need to know when building production applications structured following clean architecture. Use the exclusive coupon code &lt;code&gt;GITHUB&lt;/code&gt; to get 5% off (btw this is the only promo code for a discount on the bundle, which is already 20% off).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Promo%20Code.png&#34; height=&#34;30px&#34;&gt; &#xA;&lt;h1&gt;Give it a star ‚≠ê&lt;/h1&gt; &#xA;&lt;p&gt;Loving it? Show your support by giving this project a star!&lt;/p&gt; &#xA;&lt;h1&gt;Domain Overview üåç&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple reminder application. It allows users to create and manage their reminders.&lt;/p&gt; &#xA;&lt;p&gt;To create reminders, a user must have an active subscription.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Subscription&lt;/h2&gt; &#xA;&lt;p&gt;Users with a basic subscription can create up to 3 daily reminders.&lt;/p&gt; &#xA;&lt;h2&gt;Pro Subscription&lt;/h2&gt; &#xA;&lt;p&gt;Users with a pro subscription do not have a daily limit on the number of reminders.&lt;/p&gt; &#xA;&lt;h1&gt;Use Cases / Features ü§ì&lt;/h1&gt; &#xA;&lt;h2&gt;Subscriptions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create Subscription&lt;/li&gt; &#xA; &lt;li&gt;Get Subscription&lt;/li&gt; &#xA; &lt;li&gt;Cancel Subscription&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Reminders&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set Reminder&lt;/li&gt; &#xA; &lt;li&gt;Get Reminder&lt;/li&gt; &#xA; &lt;li&gt;Delete Reminder&lt;/li&gt; &#xA; &lt;li&gt;Dismiss Reminder&lt;/li&gt; &#xA; &lt;li&gt;List Reminders&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Getting Started üèÉ&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the project &lt;code&gt;dotnet run --project src/CleanArchitecture.Api&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to &lt;code&gt;requests/Tokens/GenerateToken.http&lt;/code&gt; and generate a token.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;POST {{host}}/tokens/generate&#xA;Content-Type: application/json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;{&#xA;    &#34;Id&#34;: &#34;bae93bf5-9e3c-47b3-aace-3034653b6bb2&#34;,&#xA;    &#34;FirstName&#34;: &#34;Amichai&#34;,&#xA;    &#34;LastName&#34;: &#34;Mantinband&#34;,&#xA;    &#34;Email&#34;: &#34;amichai@mantinband.com&#34;,&#xA;    &#34;Permissions&#34;: [&#xA;        &#34;set:reminder&#34;,&#xA;        &#34;get:reminder&#34;,&#xA;        &#34;dismiss:reminder&#34;,&#xA;        &#34;delete:reminder&#34;,&#xA;        &#34;create:subscription&#34;,&#xA;        &#34;delete:subscription&#34;,&#xA;        &#34;get:subscription&#34;&#xA;    ],&#xA;    &#34;Roles&#34;: [&#xA;        &#34;Admin&#34;&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note: Since most systems use an external identity provider, this project uses a simple token generator endpoint that generates a token based on the details you provide. This is a simple way to generate a token for testing purposes and is closer to how your system will likely be designed when using an external identity provider.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a subscription&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;POST {{host}}/users/{{userId}}/subscriptions&#xA;Content-Type: application/json&#xA;Authorization: Bearer {{token}}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;{&#xA;    &#34;SubscriptionType&#34;: &#34;Basic&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Note: To replace http file variables &lt;code&gt;{{variableName}}&lt;/code&gt;, you can either:&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;Use the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=humao.rest-client&#34;&gt;REST Client&lt;/a&gt; extension for VS Code + update the values under &#34;.vscode/settings.json&#34;. This will update the value for all http files.&lt;/li&gt; &#xA;    &lt;li&gt;Define the variables in the http file itself: &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;@host = http://localhost:5001&#xA;@userId = bae93bf5-9e3c-47b3-aace-3034653b6bb2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Replace the variables manually.&lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a reminder&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;POST {{host}}/users/{{userId}}/subscriptions/{{subscriptionId}}/reminders&#xA;Content-Type: application/json&#xA;Authorization: Bearer {{token}}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;{&#xA;    &#34;text&#34;: &#34;let&#39;s do it&#34;,&#xA;    &#34;dateTime&#34;: &#34;2025-2-26&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Folder Structure üìÅ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template.png&#34; alt=&#34;Folder structure&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Authorization üîê&lt;/h1&gt; &#xA;&lt;p&gt;This project puts an emphasis on complex authorization scenarios and supports &lt;em&gt;role-based&lt;/em&gt;, &lt;em&gt;permission-based&lt;/em&gt; and &lt;em&gt;policy-based&lt;/em&gt; authorization.&lt;/p&gt; &#xA;&lt;h2&gt;Authorization Types&lt;/h2&gt; &#xA;&lt;h3&gt;Role-Based Authorization&lt;/h3&gt; &#xA;&lt;p&gt;To apply role based authorization, use the &lt;code&gt;Authorize&lt;/code&gt; attribute with the &lt;code&gt;Roles&lt;/code&gt; parameter and implement the &lt;code&gt;IAuthorizeableRequest&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Authorize(Roles = &#34;Admin&#34;)]&#xA;public record CancelSubscriptionCommand(Guid UserId, Guid SubscriptionId) : IAuthorizeableRequest&amp;lt;ErrorOr&amp;lt;Success&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will only allow users with the &lt;code&gt;Admin&lt;/code&gt; role to cancel subscriptions.&lt;/p&gt; &#xA;&lt;h3&gt;Permission-Based Authorization&lt;/h3&gt; &#xA;&lt;p&gt;To apply permission based authorization, use the &lt;code&gt;Authorize&lt;/code&gt; attribute with the &lt;code&gt;Permissions&lt;/code&gt; parameter and implement the &lt;code&gt;IAuthorizeableRequest&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Authorize(Permissions = &#34;get:reminder&#34;)]&#xA;public record GetReminderQuery(Guid UserId, Guid SubscriptionId, Guid ReminderId) : IAuthorizeableRequest&amp;lt;ErrorOr&amp;lt;Reminder&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will only allow users with the &lt;code&gt;get:reminder&lt;/code&gt; permission to get a subscription.&lt;/p&gt; &#xA;&lt;h3&gt;Policy-Based Authorization&lt;/h3&gt; &#xA;&lt;p&gt;To apply policy based authorization, use the &lt;code&gt;Authorize&lt;/code&gt; attribute with the &lt;code&gt;Policy&lt;/code&gt; parameter and implement the &lt;code&gt;IAuthorizeableRequest&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Authorize(Policies = &#34;SelfOrAdmin&#34;)]&#xA;public record GetReminderQuery(Guid UserId, Guid SubscriptionId, Guid ReminderId) : IAuthorizeableRequest&amp;lt;ErrorOr&amp;lt;Reminder&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will only allow users who pass the &lt;code&gt;SelfOrAdmin&lt;/code&gt; policy to get a subscription.&lt;/p&gt; &#xA;&lt;p&gt;Each policy is implemented as a simple method in the &lt;code&gt;PolicyEnforcer&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;The policy &#34;SelfOrAdmin&#34; for example, can be implemented as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class PolicyEnforcer : IPolicyEnforcer&#xA;{&#xA;    public ErrorOr&amp;lt;Success&amp;gt; Authorize&amp;lt;T&amp;gt;(&#xA;        IAuthorizeableRequest&amp;lt;T&amp;gt; request,&#xA;        CurrentUser currentUser,&#xA;        string policy)&#xA;    {&#xA;        return policy switch&#xA;        {&#xA;            &#34;SelfOrAdmin&#34; =&amp;gt; SelfOrAdminPolicy(request, currentUser),&#xA;            _ =&amp;gt; Error.Unexpected(description: &#34;Unknown policy name&#34;),&#xA;        };&#xA;    }&#xA;&#xA;    private static ErrorOr&amp;lt;Success&amp;gt; SelfOrAdminPolicy&amp;lt;T&amp;gt;(IAuthorizeableRequest&amp;lt;T&amp;gt; request, CurrentUser currentUser) =&amp;gt;&#xA;        request.UserId == currentUser.Id || currentUser.Roles.Contains(Role.Admin)&#xA;            ? Result.Success&#xA;            : Error.Unauthorized(description: &#34;Requesting user failed policy requirement&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mixing Authorization Types&lt;/h2&gt; &#xA;&lt;p&gt;You can mix and match authorization types to create complex authorization scenarios.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Authorize(Permissions = &#34;get:reminder,list:reminder&#34;, Policies = &#34;SelfOrAdmin&#34;, Roles = &#34;ReminderManager&#34;)]&#xA;public record ListRemindersQuery(Guid UserId, Guid SubscriptionId, Guid ReminderId) : IAuthorizeableRequest&amp;lt;ErrorOr&amp;lt;Reminder&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will only allow users with the &lt;code&gt;get:reminder&lt;/code&gt; and &lt;code&gt;list:reminder&lt;/code&gt; permission, and who pass the &lt;code&gt;SelfOrAdmin&lt;/code&gt; policy, and who have the &lt;code&gt;ReminderManager&lt;/code&gt; role to list reminders.&lt;/p&gt; &#xA;&lt;p&gt;Another option, is specifying the &lt;code&gt;Authorize&lt;/code&gt; attribute multiple times:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Authorize(Permissions = &#34;get:reminder&#34;)]&#xA;[Authorize(Permissions = &#34;list:reminder&#34;)]&#xA;[Authorize(Policies = &#34;SelfOrAdmin&#34;)]&#xA;[Authorize(Roles = &#34;ReminderManager&#34;)]&#xA;public record ListRemindersQuery(Guid UserId, Guid SubscriptionId, Guid ReminderId) : IAuthorizeableRequest&amp;lt;ErrorOr&amp;lt;Reminder&amp;gt;&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Testing üìù&lt;/h1&gt; &#xA;&lt;p&gt;This project puts an emphasis on testability and comes with a comprehensive test suite.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Testing%20Suite.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Test Types&lt;/h2&gt; &#xA;&lt;h3&gt;Domain Layer Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;The domain layer is tested using unit tests. By the bare minimum, each domain entity should have a test that verifies its invariants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Domain%20Layer%20Unit%20Tests.png&#34; alt=&#34;Domain Layer unit tests&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Application Layer Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;The application layer is tested using both unit tests and subcutaneous tests.&lt;/p&gt; &#xA;&lt;p&gt;Since each one of the application layer use cases has its corresponding subcutaneous tests, the unit tests are used to test the application layer standalone components, such as the &lt;code&gt;ValidationBehavior&lt;/code&gt; and the &lt;code&gt;AuthorizationBehavior&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Application%20Layer%20Unit%20Tests.png&#34; alt=&#34;Application Layer unit tests&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Application Layer Subcutaneous Tests&lt;/h3&gt; &#xA;&lt;p&gt;Subcutaneous tests are tests that operate right under the presentation layer. These tests are responsible for testing the core logic of our application, which is the application layer and the domain layer.&lt;/p&gt; &#xA;&lt;p&gt;The reason there are so many of these tests, is because each one of the application layer use cases has its corresponding subcutaneous tests.&lt;/p&gt; &#xA;&lt;p&gt;This allows us to test the application layer and the domain layer based on the actual expected usage, giving us the confidence that our application works as expected and that the system cannot be manipulated in a way we don&#39;t allow.&lt;/p&gt; &#xA;&lt;p&gt;I recommend spending more effort on these tests than the other tests, since they aren&#39;t too expensive to write, and the value they provide is huge.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Subcutaneous%20Tests.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presentation Layer Integration Tests&lt;/h3&gt; &#xA;&lt;p&gt;The api layer is tested using integration tests. This is where we want to cover the entire system, including the database, external dependencies and the presentation layer.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the subcutaneous tests, the focus of these tests is to ensure the integration between the various components of our system and other systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/assets/Clean%20Architecture%20Template%20Integration%20Tests.png&#34; alt=&#34;Integration Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Fun features üíÉüï∫&lt;/h1&gt; &#xA;&lt;h2&gt;Domain Events &amp;amp; Eventual Consistency&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Eventual consistency and the domain events pattern add a layer of complexity. If you don&#39;t need it, don&#39;t use it. If you need it, make sure your system is designed properly and that you have the right tools to manage failures.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The domain is designed so each use case which manipulates data, updates a single domain object in a single transaction.&lt;/p&gt; &#xA;&lt;p&gt;For example, when a user cancels a subscription, the only change that happens atomically is the subscription is marked as canceled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public ErrorOr&amp;lt;Success&amp;gt; CancelSubscription(Guid subscriptionId)&#xA;{&#xA;    if (subscriptionId != Subscription.Id)&#xA;    {&#xA;        return Error.NotFound(&#34;Subscription not found&#34;);&#xA;    }&#xA;&#xA;    Subscription = Subscription.Canceled;&#xA;&#xA;    _domainEvents.Add(new SubscriptionCanceledEvent(this, subscriptionId));&#xA;&#xA;    return Result.Success;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in an eventual consistency manner, the system will update all the relevant data. Which includes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Deleting the subscription from the database and marking all reminders as deleted (&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/src/CleanArchitecture.Application/Subscriptions/Events/SubscriptionCanceledEventHandler.cs&#34;&gt;Subscriptions/Events/SubscriptionDeletedEventHandler.cs&lt;/a&gt;])&lt;/li&gt; &#xA; &lt;li&gt;Deleting all the reminders marked as deleted from the database (&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/src/CleanArchitecture.Application/Reminders/Events/ReminderDeletedEventHandler.cs&#34;&gt;Reminders/Events/ReminderDeletedEventHandler.cs&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Alongside the performance benefits, this allows to reuse reactive behavior. For example, the &lt;code&gt;ReminderDeletedEventHandler&lt;/code&gt; is invoked both when a subscription is deleted and when a reminder is deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Eventual Consistency Mechanism&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Each invariant is encapsulated in a single domain object. This allows performing changes by updating a single domain object in a single transaction.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;domain object B&lt;/code&gt; needs to react to changes in &lt;code&gt;domain object A&lt;/code&gt;, a &lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/src/CleanArchitecture.Domain/Common/IDomainEvent.cs&#34;&gt;Domain Event&lt;/a&gt; is added to &lt;code&gt;domain object A&lt;/code&gt; alongside the changes.&lt;/li&gt; &#xA; &lt;li&gt;Upon persisting &lt;code&gt;domain object A&lt;/code&gt; changes to the database, the domain events are &lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/src/CleanArchitecture.Infrastructure/Common/Persistence/AppDbContext.cs&#34;&gt;extracted and added to a queue&lt;/a&gt; for offline processing: &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void AddDomainEventsToOfflineProcessingQueue(List&amp;lt;IDomainEvent&amp;gt; domainEvents)&#xA;{&#xA;    Queue&amp;lt;IDomainEvent&amp;gt; domainEventsQueue = new();&#xA;    domainEvents.ForEach(domainEventsQueue.Enqueue);&#xA;&#xA;    _httpContextAccessor.HttpContext.Items[&#34;DomainEvents&#34;] = domainEventsQueue;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;After the user receives a response, the &lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/src/CleanArchitecture.Infrastructure/Common/Middleware/EventualConsistencyMiddleware.cs&#34;&gt;EventualConsistencyMiddleware&lt;/a&gt; is invoked and processes the domain events: &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async Task InvokeAsync(HttpContext context, IEventualConsistencyProcessor eventualConsistencyProcessor)&#xA;{&#xA;    context.Response.OnCompleted(async () =&amp;gt;&#xA;    {&#xA;        if (context.Items.TryGetValue(&#34;DomainEvents&#34;, out var value) ||&#xA;            value is not Queue&amp;lt;IDomainEvent&amp;gt; domainEvents)&#xA;        {&#xA;            return;&#xA;        }&#xA;&#xA;        while (domainEvents.TryDequeue(out var nextEvent))&#xA;        {&#xA;            await publisher.Publish(nextEvent);&#xA;        }&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: the code snippets above are a simplified version of the actual implementation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Background service for sending email reminders&lt;/h2&gt; &#xA;&lt;p&gt;There is a simple background service that runs every minute and sends email reminders for all reminders that are due (&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/clean-architecture/main/src/CleanArchitecture.Infrastructure/Reminders/BackgroundServices/ReminderEmailBackgroundService.cs&#34;&gt;ReminderEmailBackgroundService&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void SendEmailNotifications(object? state)&#xA;{&#xA;    await _fluentEmail&#xA;        .To(user.Email)&#xA;        .Subject($&#34;{dueReminders.Count} reminders due!&#34;)&#xA;        .Body($&#34;&#34;&#34;&#xA;              Dear {user.FirstName} {user.LastName} from the present.&#xA;&#xA;              I hope this email finds you well.&#xA;&#xA;              I&#39;m writing you this email to remind you about the following reminders:&#xA;              {string.Join(&#39;\n&#39;, dueReminders.Select((reminder, i) =&amp;gt; $&#34;{i + 1}. {reminder.Text}&#34;))}&#xA;&#xA;              Best,&#xA;              {user.FirstName} from the past.&#xA;              &#34;&#34;&#34;)&#xA;        .SendAsync();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure Email Settings&lt;/h3&gt; &#xA;&lt;p&gt;To configure the service to send emails, make sure to update the email settings under the &lt;code&gt;appsettings.json&lt;/code&gt;/&lt;code&gt;appsettings.Development.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;p&gt;You can use your own SMTP server or use a service like &lt;a href=&#34;https://brevo.co/&#34;&gt;Brevo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configure Email Settings Manually&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;EmailSettings&#34;: {&#xA;    &#34;EnableEmailNotifications&#34;: false,&#xA;    &#34;DefaultFromEmail&#34;: &#34;your-email@gmail.com (also, change EnableEmailNotifications to true üëÜ)&#34;,&#xA;    &#34;SmtpSettings&#34;: {&#xA;      &#34;Server&#34;: &#34;smtp.gmail.com&#34;,&#xA;      &#34;Port&#34;: 587,&#xA;      &#34;Username&#34;: &#34;your-email@gmail.com&#34;,&#xA;      &#34;Password&#34;: &#34;your-password&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;note: you may need to allow less secure apps to access your email account.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configure Email Settings via User Secrets&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet user-secrets --project src/CleanArchitecture.Api set EmailSettings:EnableEmailNotifications true&#xA;dotnet user-secrets --project src/CleanArchitecture.Api set EmailSettings:DefaultFromEmail amantinband@gmail.com&#xA;dotnet user-secrets --project src/CleanArchitecture.Api set EmailSettings:SmtpSettings:Server smtp-relay.brevo.com&#xA;dotnet user-secrets --project src/CleanArchitecture.Api set EmailSettings:SmtpSettings:Port 587&#xA;dotnet user-secrets --project src/CleanArchitecture.Api set EmailSettings:SmtpSettings:Username amantinband@gmail.com&#xA;dotnet user-secrets --project src/CleanArchitecture.Api set EmailSettings:SmtpSettings:Password your-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contribution ü§≤&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions, comments, or suggestions, please open an issue or create a pull request üôÇ&lt;/p&gt; &#xA;&lt;h1&gt;Credits üôè&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasontaylordev/CleanArchitecture&#34;&gt;CleanArchitecture&lt;/a&gt; - An awesome clean architecture solution template by Jason Taylor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License ü™™&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the &lt;a href=&#34;https://github.com/mantinband/clean-architecture/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
</feed>