<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-01T01:31:05Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Luca3317/TMPEffects</title>
    <updated>2025-08-01T01:31:05Z</updated>
    <id>tag:github.com,2025-08-01:/Luca3317/TMPEffects</id>
    <link href="https://github.com/Luca3317/TMPEffects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily animate Unity text and apply other effects with custom tags&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TMPEffects &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/introduction.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view-Documentation-blue?style=for-the-badge&#34; alt=&#34;view - Documentation&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to open issues for any questions you have that are not answered by the docs!&lt;br&gt; Also, please share any cool stuff you made with TMPEffects -- I want to get a little example section going ‚ò∫Ô∏è&lt;br&gt; If you want to, please support me / TMPEffects on &lt;a href=&#34;https://ko-fi.com/lweist3317&#34;&gt;Ko-fi&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openupm.com/packages/com.luca3317.tmpeffects/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/com.luca3317.tmpeffects?label=openupm&amp;amp;registry_uri=https://package.openupm.com&#34; alt=&#34;openupm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Luca3317/TMPEffects/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Luca3317/TMPEffects&#34; alt=&#34;issues - TMPEffects&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Luca3317/TMPEffects/actions/workflows/main.yml/badge.svg?branch=main&#34; alt=&#34;test-status&#34;&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/luca3317/tmpeffects&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/luca3317/tmpeffects/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;TMPEffects allows you to easily apply all kinds of effects to your TextMeshPro texts using (custom) tags&lt;/p&gt; &#xA;&lt;table style=&#34;border-collapse: collapse; border: none;&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td valign=&#34;middle&#34; style=&#34;border: none;&#34; align=&#34;center&#34;&gt;&lt;b&gt;‚Ä¢ Animate text blocks continuously&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/tmpeffects-git.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;middle&#34; style=&#34;border: none;&#34; align=&#34;center&#34;&gt;&lt;b&gt;‚Ä¢ Show and hide text over time&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/tmpeffectwrite-git.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td valign=&#34;middle&#34; style=&#34;border: none;&#34; align=&#34;center&#34;&gt;&lt;b&gt;‚Ä¢ Animate the show / hide sequence&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/tmpeffectsshowhide-git.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;middle&#34; style=&#34;border: none;&#34; align=&#34;center&#34;&gt;&lt;b&gt;‚Ä¢ Raise commands at any given index&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/tmpeffectscommands-git.gif&#34; width=&#34;100%&#34; height=&#34;auto&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Raise events at any given index&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;API to create your own animations / commands / tags&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If you don&#39;t like to code: create animations right in the inspector and / or in Unity&#39;s Timeline&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Many other features (timeline integration, keyword databases, ...)&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt; The rest of this README gives just a quick overview of TMPEffects, you definitely should refer to &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/introduction.html&#34;&gt;the manual&lt;/a&gt; when questions come up!&lt;/p&gt; &#xA;&lt;h2&gt;üåü Built-in animations (+ commands)&lt;/h2&gt; &#xA;&lt;p&gt;TMPEffects comes with a lot of built-in animations (most of which are really versatile when using tag parameters):&lt;/p&gt; &#xA;&lt;div style=&#34;display:flex;justify-content:center;align-items:center;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/basic-overview.gif&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;There are also various built-in show/hide animations (which are just as versatile):&lt;/p&gt; &#xA;&lt;div style=&#34;display:flex;justify-content:center;align-items:center;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/showhide-overview.gif&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;For a full preview of built-in &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/tmpanimator_builtinbasicanimations.html&#34;&gt;animations&lt;/a&gt;, &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/tmpanimator_builtinshowhideanimations.html&#34;&gt;show / hide animations&lt;/a&gt;, and &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/tmpwriter_builtincommands.html&#34;&gt;commands&lt;/a&gt;, as well as each of their parameters, see the respective documentation.&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Creating your own effects&lt;/h2&gt; &#xA;&lt;p&gt;You can easily create your own animations and commands through custom scripts (&lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/animatingacharacter.html&#34;&gt;animations&lt;/a&gt;, &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/tmpwriter_creatingcommands.html&#34;&gt;commands&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you prefer not to code, you can create animations in the inspector using &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/genericanimations.html&#34;&gt;GenericAnimations&lt;/a&gt; or through Unity&#39;s timeline window, if you have it installed:&lt;/p&gt; &#xA;&lt;div style=&#34;display:flex;justify-content:center;align-items:center;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Luca3317/TMPEffects/main/gifs/timeline.gif&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üè∑Ô∏è Parameters&lt;/h2&gt; &#xA;&lt;p&gt;TMPEffects comes with very strong support for tag parameters; when creating an animation or command from script adding a parameter to your animation is as easy as decorating it with the [AutoParameter] attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[AutoParameter(&#34;ampltiude&#34;, &#34;amp&#34;), SerializeField]&#xA;private float amplitude;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now set amplitude from the tag (e.g. &amp;lt;wave amp=12&amp;gt;) and use the value in your animation / command logic!&lt;/p&gt; &#xA;&lt;p&gt;On top of that, TMPEffects has many types that are supported out of the box (float, Vector3, AnimationCurve...) as well as giving you the ability to easily create your own (which are also compatible with the AutoParameter attribute). You can also define custom keywords using Keyword databases.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Integrations&lt;/h2&gt; &#xA;&lt;p&gt;These are the external packages TMPEffects is integrated and confirmed to work with.&lt;br&gt; If there is some other package/tool you&#39;d like to see TMPEffects integrated with, feel free to open an issue (or, even better, a pull request!)&lt;/p&gt; &#xA;&lt;h3&gt;Timeline&lt;/h3&gt; &#xA;&lt;p&gt;TMPEffects is fully integrated with &lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.timeline@1.2/manual/index.html&#34;&gt;Unity&#39;s Timeline package&lt;/a&gt;, providing custom tracks, clips and markers.&lt;/p&gt; &#xA;&lt;h3&gt;YarnSpinner&lt;/h3&gt; &#xA;&lt;p&gt;TMPEffects works out of the box with &lt;a href=&#34;https://www.yarnspinner.dev/&#34;&gt;YarnSpinner&lt;/a&gt;, you only have to disable YarnSpinner&#39;s built-in typewriter effects (see &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/yarnspinner.html&#34;&gt;the docs&lt;/a&gt; on that).&lt;br&gt; You can even use variables defined in YarnSpinner scripts as tag parameters!&lt;/p&gt; &#xA;&lt;h2&gt;üß© Dependencies and compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TMPEffects is compatible with Unity 2021.3 and up &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Tested in 2021.3, 2022.3 and 2023.2; if you have compatibility issues in another version (&amp;gt;= 2021.3), please open an issue for it!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Only dependency: Unity&#39;s TextMeshPro package (automatically included in Unity 2018.3 and up)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üöÄ Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;TMPEffects is available on the &lt;a href=&#34;https://openupm.com/packages/com.luca3317.tmpeffects/&#34;&gt;OpenUPM registry&lt;/a&gt;.&lt;br&gt; Alternatively, you can install TMPEffects through the Unity Package Manager, using the git url:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;https://github.com/Luca3317/TMPEffects.git?path=/Package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t know how to install packages using git urls, see the &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/installation.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you instead want to simply clone the repository,&lt;br&gt; you will have to manually import the required resources located under Assets &amp;gt; TMPEffects &amp;gt; Resources.&lt;/p&gt; &#xA;&lt;h3&gt;Set up&lt;/h3&gt; &#xA;&lt;p&gt;Add the TMPAnimator and/or TMPWriter component to a GameObject with a TextMeshPro(UI) component, and select &#34;use default database&#34; in both their inspectors.&lt;br&gt; You will get a prompt to import the required resources. Hit the button and you&#39;re done setting up TMPEffects!&lt;/p&gt; &#xA;&lt;h2&gt;üìö Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full documentation can be found &lt;a href=&#34;https://tmpeffects.luca3317.dev/manual/introduction.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CoplayDev/unity-mcp</title>
    <updated>2025-08-01T01:31:05Z</updated>
    <id>tag:github.com,2025-08-01:/CoplayDev/unity-mcp</id>
    <link href="https://github.com/CoplayDev/unity-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Unity MCP server that allows MCP clients like Claude Desktop or Cursor to perform Unity Editor actions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity MCP ‚ú®&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unity.com/releases/editor/archive&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Unity-000000?style=flat&amp;amp;logo=unity&amp;amp;logoColor=blue&#34; alt=&#34;&#34; title=&#34;Unity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3.12-3776AB.svg?style=flat&amp;amp;logo=python&amp;amp;logoColor=white&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;&lt;img src=&#34;https://badge.mcpx.dev?status=on&#34; alt=&#34;&#34; title=&#34;MCP Enabled&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/w/justinpbarnett/unity-mcp&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/justinpbarnett/unity-mcp&#34; alt=&#34;GitHub Issues or Pull Requests&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-red.svg?sanitize=true&#34; alt=&#34;&#34; title=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create your Unity apps with LLMs!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unity MCP acts as a bridge, allowing AI assistants (like Claude, Cursor) to interact directly with your Unity Editor via a local &lt;strong&gt;MCP (Model Context Protocol) Client&lt;/strong&gt;. Give your LLM tools to manage assets, control scenes, edit scripts, and automate tasks within Unity.&lt;/p&gt; &#xA;&lt;h2&gt;üí¨ Join Our Community&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://discord.gg/vhTUxXaqYr&#34;&gt;Discord&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get help, share ideas, and collaborate with other Unity MCP developers!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Key Features üöÄ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;üó£Ô∏è Natural Language Control:&lt;/strong&gt; Instruct your LLM to perform Unity tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;üõ†Ô∏è Powerful Tools:&lt;/strong&gt; Manage assets, scenes, materials, scripts, and editor functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ü§ñ Automation:&lt;/strong&gt; Automate repetitive Unity workflows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;üß© Extensible:&lt;/strong&gt; Designed to work with various MCP Clients.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;strong&gt; Available Tools &lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Your LLM can use functions like:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;read_console&lt;/code&gt;: Gets messages from or clears the console.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;manage_script&lt;/code&gt;: Manages C# scripts (create, read, update, delete).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;manage_editor&lt;/code&gt;: Controls and queries the editor&#39;s state and settings.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;manage_scene&lt;/code&gt;: Manages scenes (load, save, create, get hierarchy, etc.).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;manage_asset&lt;/code&gt;: Performs asset operations (import, create, modify, delete, etc.).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;manage_shader&lt;/code&gt;: Performs shader CRUD operations (create, read, modify, delete).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;manage_gameobject&lt;/code&gt;: Manages GameObjects: create, modify, delete, find, and component operations.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;execute_menu_item&lt;/code&gt;: Executes a menu item via its path (e.g., &#34;File/Save Project&#34;).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How It Works ü§î&lt;/h2&gt; &#xA;&lt;p&gt;Unity MCP connects your tools using two components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unity MCP Bridge:&lt;/strong&gt; A Unity package running inside the Editor. (Installed via Package Manager).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unity MCP Server:&lt;/strong&gt; A Python server that runs locally, communicating between the Unity Bridge and your MCP Client. (Installed manually).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flow:&lt;/strong&gt; &lt;code&gt;[Your LLM via MCP Client] &amp;lt;-&amp;gt; [Unity MCP Server (Python)] &amp;lt;-&amp;gt; [Unity MCP Bridge (Unity Editor)]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation ‚öôÔ∏è&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The setup is constantly improving as we update the package. Check back if you randomly start to run into issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git CLI:&lt;/strong&gt; For cloning the server code. &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Download Git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt; Version 3.12 or newer. &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Download Python&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unity Hub &amp;amp; Editor:&lt;/strong&gt; Version 2020.3 LTS or newer. &lt;a href=&#34;https://unity.com/download&#34;&gt;Download Unity&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;uv (Python package manager):&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install uv&#xA;# Or see: https://docs.astral.sh/uv/getting-started/installation/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;An MCP Client:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/anthropics/claude-code&#34;&gt;Claude Code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.cursor.com/en/downloads&#34;&gt;Cursor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/copilot/overview&#34;&gt;Visual Studio Code Copilot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;(Others may work with manual config)&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;&lt;strong&gt;[Optional] Roslyn for Advanced Script Validation&lt;/strong&gt;&lt;/summary&gt; &#xA;   &lt;p&gt;For &lt;strong&gt;Strict&lt;/strong&gt; validation level that catches undefined namespaces, types, and methods:&lt;/p&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Method 1: NuGet for Unity (Recommended)&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;Install &lt;a href=&#34;https://github.com/GlitchEnzo/NuGetForUnity&#34;&gt;NuGetForUnity&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Go to &lt;code&gt;Window &amp;gt; NuGet Package Manager&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Search for &lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt; and install the package&lt;/li&gt; &#xA;    &lt;li&gt;Go to &lt;code&gt;Player Settings &amp;gt; Scripting Define Symbols&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;USE_ROSLYN&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Restart Unity&lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Method 2: Manual DLL Installation&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;Download Microsoft.CodeAnalysis.CSharp.dll and dependencies from &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp/&#34;&gt;NuGet&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Place DLLs in &lt;code&gt;Assets/Plugins/&lt;/code&gt; folder&lt;/li&gt; &#xA;    &lt;li&gt;Ensure .NET compatibility settings are correct&lt;/li&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;USE_ROSLYN&lt;/code&gt; to Scripting Define Symbols&lt;/li&gt; &#xA;    &lt;li&gt;Restart Unity&lt;/li&gt; &#xA;   &lt;/ol&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Without Roslyn, script validation falls back to basic structural checks. Roslyn enables full C# compiler diagnostics with precise error reporting.&lt;/p&gt;&#xA;  &lt;/details&gt;&lt;p&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Step 1: Install the Unity Package (Bridge)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your Unity project.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Window &amp;gt; Package Manager&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;+&lt;/code&gt; -&amp;gt; &lt;code&gt;Add package from git URL...&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enter: &lt;pre&gt;&lt;code&gt;https://github.com/justinpbarnett/unity-mcp.git?path=/UnityMcpBridge&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Add&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The MCP Server should automatically be installed onto your machine as a result of this process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Step 2: Configure Your MCP Client&lt;/h3&gt; &#xA;&lt;p&gt;Connect your MCP Client (Claude, Cursor, etc.) to the Python server you installed in Step 1.&lt;/p&gt; &#xA;&lt;img width=&#34;609&#34; alt=&#34;image&#34; src=&#34;https://github.com/user-attachments/assets/cef3a639-4677-4fd8-84e7-2d82a04d55bb&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Option A: Auto-Configure (Recommended for Claude/Cursor/VSC Copilot)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Unity, go to &lt;code&gt;Window &amp;gt; Unity MCP&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Auto Configure&lt;/code&gt; on the IDE you uses.&lt;/li&gt; &#xA; &lt;li&gt;Look for a green status indicator üü¢ and &#34;Connected&#34;. &lt;em&gt;(This attempts to modify the MCP Client&#39;s config file automatically)&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Option B: Manual Configuration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If Auto-Configure fails or you use a different client:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Find your MCP Client&#39;s configuration file.&lt;/strong&gt; (Check client documentation). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Claude Example (macOS):&lt;/em&gt; &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Claude Example (Windows):&lt;/em&gt; &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Edit the file&lt;/strong&gt; to add/update the &lt;code&gt;mcpServers&lt;/code&gt; section, using the &lt;em&gt;exact&lt;/em&gt; paths from Step 1.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Click for OS-Specific JSON Configuration Snippets...&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;UnityMCP&#34;: {&#xA;      &#34;command&#34;: &#34;uv&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;--directory&#34;,&#xA;        &#34;C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Programs\\UnityMCP\\UnityMcpServer\\src&#34;,&#xA;        &#34;server.py&#34;&#xA;      ]&#xA;    }&#xA;    // ... other servers might be here ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Remember to replace YOUR_USERNAME and use double backslashes \)&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;UnityMCP&#34;: {&#xA;      &#34;command&#34;: &#34;uv&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;--directory&#34;,&#xA;        &#34;/usr/local/bin/UnityMCP/UnityMcpServer/src&#34;,&#xA;        &#34;server.py&#34;&#xA;      ]&#xA;    }&#xA;    // ... other servers might be here ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Replace YOUR_USERNAME if using ~/bin)&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Linux:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;UnityMCP&#34;: {&#xA;      &#34;command&#34;: &#34;uv&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;--directory&#34;,&#xA;        &#34;/home/YOUR_USERNAME/bin/UnityMCP/UnityMcpServer/src&#34;,&#xA;        &#34;server.py&#34;&#xA;      ]&#xA;    }&#xA;    // ... other servers might be here ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Replace YOUR_USERNAME)&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;For Claude Code&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you&#39;re using Claude Code, you can register the MCP server using these commands:&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add UnityMCP -- uv --directory /[PATH_TO]/UnityMCP/UnityMcpServer/src run server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add UnityMCP -- &#34;C:/Users/USERNAME/AppData/Roaming/Python/Python313/Scripts/uv.exe&#34; --directory &#34;C:/Users/USERNAME/AppData/Local/Programs/UnityMCP/UnityMcpServer/src&#34; run server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage ‚ñ∂Ô∏è&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open your Unity Project.&lt;/strong&gt; The Unity MCP Bridge (package) should connect automatically. Check status via Window &amp;gt; Unity MCP.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start your MCP Client&lt;/strong&gt; (Claude, Cursor, etc.). It should automatically launch the Unity MCP Server (Python) using the configuration from Installation Step 3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interact!&lt;/strong&gt; Unity tools should now be available in your MCP Client.&lt;/p&gt; &lt;p&gt;Example Prompt: &lt;code&gt;Create a 3D player controller&lt;/code&gt;, &lt;code&gt;Create a yellow and bridge sun&lt;/code&gt;, &lt;code&gt;Create a cool shader and apply it on a cube&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Future Dev Plans (Besides PR) üìù&lt;/h2&gt; &#xA;&lt;h3&gt;üî¥ High Priority&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Asset Generation Improvements&lt;/strong&gt; - Enhanced server request handling and asset pipeline optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Code Generation Enhancements&lt;/strong&gt; - Improved generated code quality and error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Robust Error Handling&lt;/strong&gt; - Comprehensive error messages, recovery mechanisms, and graceful degradation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Remote Connection Support&lt;/strong&gt; - Enable seamless remote connection between Unity host and MCP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Documentation Expansion&lt;/strong&gt; - Complete tutorials for custom tool creation and API reference&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üü° Medium Priority&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Custom Tool Creation GUI&lt;/strong&gt; - Visual interface for users to create and configure their own MCP tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Advanced Logging System&lt;/strong&gt; - Logging with filtering, export, and debugging capabilities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üü¢ Low Priority&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Mobile Platform Support&lt;/strong&gt; - Extended toolset for mobile development workflows and platform-specific features&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Easier Tool Setup&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Plugin Marketplace&lt;/strong&gt; - Community-driven tool sharing and distribution platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;&lt;strong&gt;‚úÖ Completed Features&lt;strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/summary&gt;&#xA; &lt;strong&gt;&lt;strong&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Shader Generation&lt;/strong&gt; - Generate shaders using CGProgram template&lt;/li&gt; &#xA;    &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Advanced Script Validation&lt;/strong&gt; - Multi-level validation with semantic analysis, namespace/type checking, and Unity best practices (Will need Roslyn Installed, see &lt;a href=&#34;https://raw.githubusercontent.com/CoplayDev/unity-mcp/master/#prerequisites&#34;&gt;Prerequisite&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/strong&gt;&lt;/strong&gt;&#xA;&lt;/details&gt;&#xA;&lt;strong&gt;&lt;strong&gt; &lt;h3&gt;üî¨ Research &amp;amp; Exploration&lt;/h3&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;AI-Powered Asset Generation&lt;/strong&gt; - Integration with AI tools for automatic 3D models, textures, and animations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Real-time Collaboration&lt;/strong&gt; - Live editing sessions between multiple developers &lt;em&gt;(Currently in progress)&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Analytics Dashboard&lt;/strong&gt; - Usage analytics, project insights, and performance metrics&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;Voice Commands&lt;/strong&gt; - Voice-controlled Unity operations for accessibility&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;strong&gt;AR/VR Tool Integration&lt;/strong&gt; - Extended support for immersive development workflows&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;hr&gt; &lt;h2&gt;For Developers üõ†Ô∏è&lt;/h2&gt; &lt;h3&gt;Development Tools&lt;/h3&gt; &lt;p&gt;If you&#39;re contributing to Unity MCP or want to test core changes, we have development tools to streamline your workflow:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Development Deployment Scripts&lt;/strong&gt;: Quickly deploy and test your changes to Unity MCP Bridge and Python Server&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Automatic Backup System&lt;/strong&gt;: Safe testing with easy rollback capabilities&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hot Reload Workflow&lt;/strong&gt;: Fast iteration cycle for core development&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;More coming!&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;üìñ &lt;strong&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/CoplayDev/unity-mcp/master/README-DEV.md&#34;&gt;README-DEV.md&lt;/a&gt;&lt;/strong&gt; for complete development setup and workflow documentation.&lt;/p&gt; &lt;h3&gt;Contributing ü§ù&lt;/h3&gt; &lt;p&gt;Help make Unity MCP better!&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fork&lt;/strong&gt; the main repository.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a branch&lt;/strong&gt; (&lt;code&gt;feature/your-idea&lt;/code&gt; or &lt;code&gt;bugfix/your-fix&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Make changes.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; (feat: Add cool new feature).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Push&lt;/strong&gt; your branch.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open a Pull Request&lt;/strong&gt; against the master branch.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;hr&gt; &lt;h2&gt;Troubleshooting ‚ùì&lt;/h2&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;&lt;strong&gt;Click to view common issues and fixes...&lt;/strong&gt;&lt;/summary&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unity Bridge Not Running/Connecting:&lt;/strong&gt;&lt;/p&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;Ensure Unity Editor is open.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Check the status window: Window &amp;gt; Unity MCP.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;Restart Unity.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;MCP Client Not Connecting / Server Not Starting:&lt;/strong&gt;&lt;/p&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;strong&gt;Verify Server Path:&lt;/strong&gt; Double-check the --directory path in your MCP Client&#39;s JSON config. It must exactly match the location where you cloned the UnityMCP repository in Installation Step 1 (e.g., .../Programs/UnityMCP/UnityMcpServer/src).&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;strong&gt;Verify uv:&lt;/strong&gt; Make sure uv is installed and working (pip show uv).&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run Manually:&lt;/strong&gt; Try running the server directly from the terminal to see errors: &lt;code&gt;# Navigate to the src directory first! cd /path/to/your/UnityMCP/UnityMcpServer/src uv run server.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;&lt;strong&gt;Permissions (macOS/Linux):&lt;/strong&gt; If you installed the server in a system location like /usr/local/bin, ensure the user running the MCP client has permission to execute uv and access files there. Installing in ~/bin might be easier.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;strong&gt;Auto-Configure Failed:&lt;/strong&gt;&lt;/p&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Use the Manual Configuration steps. Auto-configure might lack permissions to write to the MCP client&#39;s config file.&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/details&gt; &lt;p&gt;Still stuck? &lt;a href=&#34;https://www.google.com/url?sa=E&amp;amp;q=https%3A%2F%2Fgithub.com%2Fjustinpbarnett%2Funity-mcp%2Fissues&#34;&gt;Open an Issue&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/vhTUxXaqYr&#34;&gt;Join the Discord&lt;/a&gt;!&lt;/p&gt; &#xA;  &lt;hr&gt; &lt;h2&gt;Contact üëã&lt;/h2&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;justinpbarnett:&lt;/strong&gt; &lt;a href=&#34;https://www.google.com/url?sa=E&amp;amp;q=https%3A%2F%2Fx.com%2Fjustinpbarnett&#34;&gt;X/Twitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;scriptwonder&lt;/strong&gt;: &lt;a href=&#34;mailto:swu85@ur.rochester.edu&#34;&gt;Email&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/shutong-wu-214043172/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;hr&gt; &lt;h2&gt;License üìú&lt;/h2&gt; &lt;p&gt;MIT License. See &lt;a href=&#34;https://www.google.com/url?sa=E&amp;amp;q=https%3A%2F%2Fgithub.com%2Fjustinpbarnett%2Funity-mcp%2Fblob%2Fmaster%2FLICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;  &lt;hr&gt; &lt;h2&gt;Acknowledgments üôè&lt;/h2&gt; &lt;p&gt;Thanks to the contributors and the Unity team.&lt;/p&gt; &lt;h2&gt;Star History&lt;/h2&gt; &lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#justinpbarnett/unity-mcp&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=justinpbarnett/unity-mcp&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/strong&gt;&lt;/strong&gt;</summary>
  </entry>
</feed>