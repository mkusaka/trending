<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-11T01:23:57Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MzHmO/Parasite-Invoke</title>
    <updated>2024-03-11T01:23:57Z</updated>
    <id>tag:github.com,2024-03-11:/MzHmO/Parasite-Invoke</id>
    <link href="https://github.com/MzHmO/Parasite-Invoke" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hide your P/Invoke signatures through other people&#39;s signed assemblies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Parasite-Invoke&lt;/h1&gt; &#xA;&lt;p&gt;Hide your P/Invoke signatures through other people&#39;s signed assemblies!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MzHmO/Parasite-Invoke/assets/92790655/7932c49f-232e-4184-8059-d107f3470f2e&#34; alt=&#34;изображение&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[PARAMETER MANDATORY]&#xA; &#34;--path &amp;lt;PATH&amp;gt;&#34;, &#34;The start directory to list .NET assemblies from.&#34;&#xA;&#xA;[OPTIONAL PARAMS]&#xA; &#34;-r|--recurse&#34;, &#34;Recursively discover assemblies&#34;&#xA;&#34;--method &amp;lt;METHOD&amp;gt;&#34;, &#34;Name of the PInvoke method to find&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool accepts one mandatory parameter, it is path. If you simply specify a &lt;code&gt;--path&lt;/code&gt; (For ex, &lt;code&gt;--path C:\&lt;/code&gt;), the tool will find all .NET assemblies on that path and output the P/Invoke signatures used in them, which you can use in your code to hide the use of P/Invoke (see &lt;code&gt;Example&lt;/code&gt; below). To perform a recursive search for assemblies, add the &lt;code&gt;-r&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\ParasiteInvoke.exe --path C:\ -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MzHmO/Parasite-Invoke/assets/92790655/74bc4b69-cc38-493a-8ac2-1132f597e9b1&#34; alt=&#34;изображение&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;But most likely you will be interested in hiding a particular PInvoke method. That&#39;s why I created the &lt;code&gt;--method&lt;/code&gt; argument. You can use it to find .NET builds that have this method signature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\ParasiteInvoke.exe --path C:\ -r --method VirtualAlloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MzHmO/Parasite-Invoke/assets/92790655/0a44ddda-790e-4686-b39b-598cf101201f&#34; alt=&#34;изображение&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s go to an example&lt;/p&gt; &#xA;&lt;h2&gt;Example (u should go here)&lt;/h2&gt; &#xA;&lt;p&gt;Suppose you want to hide the use of the &lt;code&gt;VirtualAlloc()&lt;/code&gt; function. You run my tool and receive the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\ParasiteInvoke.exe --path C:\ -r --method VirtualAlloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MzHmO/Parasite-Invoke/assets/92790655/09264552-c58b-4fee-a4d6-ee6ecb7f8b46&#34; alt=&#34;изображение&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You should just copy the signature into your code, then add arguments to call the method and quietly PARASITE on the PInvoke signature from someone else&#39;s (often signed) .NET assembly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using System;&#xA;using System.Reflection;&#xA;using System.Runtime.InteropServices;&#xA;&#xA;namespace Template&#xA;{&#xA;    class Program&#xA;    {&#xA;        static void Main()&#xA;        {&#xA;            Assembly asm = Assembly.LoadFrom(@&#34;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\WPF\UIAutomationClientsideProviders.dll&#34;);&#xA;            Type t = asm.GetType(&#34;MS.Win32.UnsafeNativeMethods&#34;, true);&#xA;            var methodInfo = t.GetMethod(&#34;VirtualAlloc&#34;, System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);&#xA;            IntPtr result = (System.IntPtr)methodInfo.Invoke(null, new object[] { IntPtr.Zero, new UIntPtr(10), 0x3000, 0x40 } );&#xA;            Marshal.Copy(new byte[] { 1, 2, 3 }, 0, result, 3);&#xA;            Console.WriteLine(result);&#xA;            return;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MzHmO/Parasite-Invoke/assets/92790655/9c9b2cca-0b35-4df2-821f-f12aa7d68163&#34; alt=&#34;изображение&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Successfully invoke the function: &lt;img src=&#34;https://github.com/MzHmO/Parasite-Invoke/assets/92790655/7a8c04c2-3239-464f-9f62-17507fc8fe7d&#34; alt=&#34;изображение&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example output&lt;/h2&gt; &#xA;&lt;h3&gt;Discover all .NET assemblies from C:\Windows\System32 directory with PInvoke Signatures&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pastebin.com/9JyjcMAH&#34;&gt;https://pastebin.com/9JyjcMAH&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Discover all .NET assemblies from C:\ with PInvoke signature of VirtualAlloc Method&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pastebin.com/iBeTbXCw&#34;&gt;https://pastebin.com/iBeTbXCw&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Reloaded-Project/Reloaded-II</title>
    <updated>2024-03-11T01:23:57Z</updated>
    <id>tag:github.com,2024-03-11:/Reloaded-Project/Reloaded-II</id>
    <link href="https://github.com/Reloaded-Project/Reloaded-II" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next Generation Universal .NET Core Powered Mod Loader compatible with anything X86, X64.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Reloaded II&lt;/h1&gt; &#xA; &lt;img src=&#34;./docs/Images/Reloaded/Reloaded Logo.png&#34; width=&#34;150&#34; align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;strong&gt;Nothing else matters.&lt;/strong&gt; &#xA; &lt;br&gt; Universal, C# based mod loader. &#xA; &lt;br&gt; Works with anything X86, X64. &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;[Reloaded II]&lt;/strong&gt; is a universal DLL injection based Mod Loader and Mod Management Framework.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Reloaded-Project/Reloaded-II/master/docs/Images/Header.png&#34; width=&#34;550&#34; align=&#34;center&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It&#39;s a fully free and open source swiss army knife for modding native games.&lt;br&gt; Made from the ground up &lt;strong&gt;proudly&lt;/strong&gt; using the C# programming language.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please visit &lt;a href=&#34;https://reloaded-project.github.io/Reloaded-II/&#34;&gt;the Reloaded-II website.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this project are &lt;strong&gt;highly encouraged&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to implement new features, make bug fixes or suggestions so long as they are accompanied by an issue with a clear description of the pull request.&lt;/p&gt; &#xA;&lt;p&gt;Documentation is just as welcome as code changes!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Exitium-DEV/HD2-Cheat-Launcher</title>
    <updated>2024-03-11T01:23:57Z</updated>
    <id>tag:github.com,2024-03-11:/Exitium-DEV/HD2-Cheat-Launcher</id>
    <link href="https://github.com/Exitium-DEV/HD2-Cheat-Launcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HELLDIVERS 2 (emoisback DLL) Launcher&lt;/h1&gt; &#xA;&lt;p&gt;Custom launch binary for Helldivers 2, with the objective of reducing detection rate of &#39;version.dll&#39; hacks&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;DELETE ANY EXISTING &#39;version.dll&#39; FROM YOUR GAME FILES&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download latest &#34;version.dll&#34; from &lt;a href=&#34;https://github.com/emoisback/Helldivers-2-Internal-Hack-Dll-Proxy-PoC/actions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I STRONGLY SUGGEST YOU COMPILE YOUR OWN DLL, AND MODIFY THE STRINGS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download latest &#34;Helldivers 2&#34; executable from the &#39;releases&#39; tab -----&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;Place both files in the same folder, use EXE to start the game!&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT: DO NOT PLACE THESE IN YOUR HELLDIVERS &#39;bin&#39;&lt;/p&gt; &#xA;&lt;p&gt;Continue to use the EXE to start the game as it will continue to re-hash the original .dll (this is to avoid the anti-cheat)&lt;/p&gt; &#xA;&lt;p&gt;When the &#34;version.dll&#34; gets an update, just swap out the DLL (which is in the same folder as the EXE), to the new one, and run the EXE, simple! :)&lt;/p&gt; &#xA;&lt;p&gt;Happy cheating!&lt;/p&gt; &#xA;&lt;h1&gt;NEED HELP?&lt;/h1&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/FfG5Fx4sa8&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>