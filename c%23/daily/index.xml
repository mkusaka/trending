<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-18T01:30:36Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sicos1977/MsgKit</title>
    <updated>2023-03-18T01:30:36Z</updated>
    <id>tag:github.com,2023-03-18:/Sicos1977/MsgKit</id>
    <link href="https://github.com/Sicos1977/MsgKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET library to make MSG files without the need for Outlook&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is MsgKit?&lt;/h2&gt; &#xA;&lt;p&gt;MsgKit is a 100% managed C# .NET library that supports C# .NET 4.6.2 and Standard 2.0 (no PINVOKE or whatsoever) which may be used for the creation of messages (E-Mail, Appointments, Journals and Stickey Notes) that are Outlook compatible&lt;/p&gt; &#xA;&lt;h2&gt;License Information&lt;/h2&gt; &#xA;&lt;p&gt;MsgKit is Copyright (C) 2015-2023 Magic-Sessions and is licensed under the MIT license:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in&#xA;all copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN&#xA;THE SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing via NuGet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/MSGKit&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/MSGKit.svg?style=flat-square&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install MsgKit is via NuGet.&lt;/p&gt; &#xA;&lt;p&gt;In Visual Studio&#39;s Package Manager Console, simply enter the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package MsgKit &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating an e-mail&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var email = new Email(&#xA;        new Sender(&#34;peterpan@neverland.com&#34;, &#34;Peter Pan&#34;),&#xA;        new Representing(&#34;tinkerbell@neverland.com&#34;, &#34;Tinkerbell&#34;),&#xA;        &#34;Hello Neverland subject&#34;))&#xA;{&#xA;    email.Recipients.AddTo(&#34;captainhook@neverland.com&#34;, &#34;Captain Hook&#34;);&#xA;    email.Recipients.AddCc(&#34;crocodile@neverland.com&#34;, &#34;The evil ticking crocodile&#34;);&#xA;    email.Subject = &#34;This is the subject&#34;;&#xA;    email.BodyText = &#34;Hello Neverland text&#34;;&#xA;    email.BodyHtml = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;b&amp;gt;Hello Neverland html&amp;lt;/b&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;;&#xA;    email.Importance = MessageImportance.IMPORTANCE_HIGH;&#xA;    email.IconIndex = MessageIconIndex.ReadMail;&#xA;    email.Attachments.Add(@&#34;d:\crocodile.jpg&#34;);&#xA;    email.Save(@&#34;c:\email.msg&#34;);&#xA;&#xA;    // Show the E-mail&#xA;    System.Diagnostics.Process.Start(@&#34;c:\email.msg&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating an Appointment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var appointment = new Appointment(&#xA;    new Sender(&#34;peterpan@neverland.com&#34;, &#34;Peter Pan&#34;),&#xA;    new Representing(&#34;tinkerbell@neverland.com&#34;, &#34;Tinkerbell&#34;),&#xA;    &#34;Hello Neverland subject&#34;)) &#xA;{&#xA;    appointment.Recipients.AddTo(&#34;captainhook@neverland.com&#34;, &#34;Captain Hook&#34;);&#xA;    appointment.Recipients.AddCc(&#34;crocodile@neverland.com&#34;, &#34;The evil ticking crocodile&#34;);&#xA;    appointment.Subject = &#34;This is the subject&#34;;&#xA;    appointment.Location = &#34;Neverland&#34;;&#xA;    appointment.MeetingStart = DateTime.Now.Date;&#xA;    appointment.MeetingEnd = DateTime.Now.Date.AddDays(1).Date;&#xA;    appointment.AllDay = true;&#xA;    appointment.BodyText = &#34;Hello Neverland text&#34;;&#xA;    appointment.BodyHtml = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;b&amp;gt;Hello Neverland html&amp;lt;/b&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;;&#xA;    appointment.SentOn = DateTime.UtcNow;&#xA;    appointment.Importance = MessageImportance.IMPORTANCE_NORMAL;&#xA;    appointment.IconIndex = MessageIconIndex.UnsentMail;&#xA;    appointment.Attachments.Add(@&#34;d:\crocodile.jpg&#34;);&#xA;    appointment.Save(@&#34;c:\appointment.msg&#34;);&#xA;&#xA;    // Show the Appointment&#xA;    System.Diagnostics.Process.Start(@&#34;c:\appointment.msg&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a contact card&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var contact = new Contact(&#xA;    new Sender(SenderTextBox.Text, string.Empty),&#xA;    SubjectTextBox.Text,&#xA;    DraftMessageCheckBox.Checked,&#xA;    ReadReceiptCheckBox.Checked))&#xA;{&#xA;    contact.Recipients.AddTo(&#34;captainhook@neverland.com&#34;, &#34;Captain Hook&#34;);&#xA;    contact.Recipients.AddCc(&#34;crocodile@neverland.com&#34;, &#34;The evil ticking crocodile&#34;);&#xA;    contact.Subject = &#34;This is the subject&#34;;&#xA;    contact.BodyText = &#34;Hello Neverland text&#34;;&#xA;    contact.BodyHtml = &#34;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;b&amp;gt;Hello Neverland html&amp;lt;/b&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;    contact.Importance = MessageImportance.IMPORTANCE_NORMAL;&#xA;    contact.FileUnder = &#34;File under&#34;;&#xA;    contact.InstantMessagingAddress = &#34;Instant messaging address&#34;;&#xA;    contact.Private = false;&#xA;    contact.BirthDay = DateTime.Now;&#xA;    contact.WeddingAnniversary = DateTime.Now;&#xA;    contact.Assistant = new ContactAssistant {Name = &#34;Assistant name&#34;, TelephoneNumber = &#34;Assistant telephone number&#34;};&#xA;    contact.CallBackTelePhoneNumber = &#34;callback telephone number&#34;;&#xA;    contact.CarTelePhoneNumber = &#34;car telephone number&#34;;&#xA;    contact.ChildrensNames = new List&amp;lt;string&amp;gt; {&#34;First child name&#34;, &#34;Second child name&#34;, &#34;Third child name&#34;};&#xA;    contact.CompanyMain = new ContactCompanyMain { Name = &#34;Company main name&#34;, TelephoneNumber = &#34;Company main telephone number&#34;};&#xA;    contact.DepartmentName = &#34;Department name&#34;;&#xA;    contact.Generation = &#34;Generation&#34;;&#xA;    contact.GivenName = &#34;GivenName&#34;;&#xA;    contact.Initials = &#34;Initials&#34;;&#xA;    contact.ISDNNumber = &#34;ISDN number&#34;;&#xA;    contact.Language = &#34;Language&#34;;&#xA;    contact.Location = &#34;Location&#34;;&#xA;    contact.ManagerName = &#34;Manager name&#34;;&#xA;    contact.MiddleName = &#34;Middle name&#34;;&#xA;    contact.MobileTelephoneNumber = &#34;Mobile telephone number&#34;;&#xA;    contact.NickName = &#34;Nick name&#34;;&#xA;    contact.OfficeLocation = &#34;Office location&#34;;&#xA;    contact.PersonalHomePage = &#34;Personal home-page&#34;;&#xA;    contact.PostalAddress = &#34;Postal address&#34;;&#xA;    contact.PrimaryFaxNumber = &#34;Primary fax number&#34;;&#xA;    contact.PrimaryTelephoneNumber = &#34;Primary telephone number&#34;;&#xA;    contact.Profession = &#34;Profession&#34;;&#xA;    contact.RadioTelephoneNumber = &#34;Radio telephone number&#34;;&#xA;    contact.SpouseName = &#34;Spouse name&#34;;&#xA;    contact.SurName = &#34;Sur name&#34;;&#xA;    contact.TelexNumber = &#34;Telex number&#34;;&#xA;    contact.Title = &#34;Title&#34;;&#xA;    contact.TTYTDDPhoneNumber = &#34;TTYTDD phone number&#34;;&#xA;    contact.Email1 = new Address(&#34;email1@neverland.com&#34;, &#34;email1&#34;);&#xA;    contact.Email2 = new Address(&#34;email2@neverland.com&#34;, &#34;email2&#34;);&#xA;    contact.Email3 = new Address(&#34;email3@neverland.com&#34;, &#34;email3&#34;);&#xA;    //contact.Fax1 = &#34;fax1@1234567890&#34;;&#xA;    //contact.Fax2 = &#34;fax2@1234567890&#34;;&#xA;    //contact.Fax3 = &#34;fax3@1234567890&#34;;&#xA;    contact.OfficeTelephoneNumber = &#34;Office telephone number&#34;;&#xA;    contact.InstantMessagingAddress = &#34;Instant messaging address&#34;;&#xA;    contact.Yomi = new ContactYomi { CompanyName = &#34;Yomi company name&#34;, FirstName = &#34;Yomi first name&#34;, LastName = &#34;Yomi last name&#34;};&#xA;&#xA;    contact.Work = new ContactWork&#xA;    {&#xA;        TelephoneNumber = &#34;Contact telephone number&#34;,&#xA;        City = &#34;Contact city&#34;,&#xA;        Country = &#34;Contact country&#34;,&#xA;        CountryCode = &#34;Contact country code&#34;,&#xA;        PostOfficeBox = &#34;Contact post office box&#34;,&#xA;        PostalCode = &#34;Contact postal code&#34;,&#xA;        Street = &#34;Contact street&#34;,&#xA;        Address = &#34;Contact\nBla bla\nBla die bla\nBLa die bla die bla&#34;&#xA;    };&#xA;&#xA;    contact.Business = new ContactBusiness&#xA;    {&#xA;        TelephoneNumber = &#34;Business telephone number&#34;,&#xA;        FaxNumber = &#34;Business fax number&#34;,&#xA;        HomePage = &#34;Business home-page&#34;,&#xA;        City = &#34;Business city&#34;,&#xA;        Country = &#34;Business country&#34;,&#xA;        PostalCode = &#34;Business postal code&#34;,&#xA;        State = &#34;Business state&#34;,&#xA;        Street = &#34;Business street&#34;,&#xA;        Address = &#34;Business\nBla bla\nBla die bla\nBLa die bla die bla&#34;&#xA;    };&#xA;&#xA;    contact.Home = new ContactHome&#xA;    {&#xA;        TelephoneNumber = &#34;Home telephone number&#34;,&#xA;        TelephoneNumber2 = &#34;Home telephone number 2&#34;,&#xA;        FaxNumber = &#34;Home faxnumber&#34;,&#xA;        City = &#34;Home city&#34;,&#xA;        Country = &#34;Home country&#34;,&#xA;        PostalCode = &#34;Home postal code&#34;,&#xA;        State = &#34;Home state&#34;,&#xA;        Street = &#34;Home street&#34;,&#xA;        Address = &#34;Home\nBla bla\nBla die bla\nBLa die bla die bla&#34;&#xA;    };&#xA;&#xA;    contact.Other = new ContactOther&#xA;    {&#xA;        TelephoneNumber = &#34;Other telephone number&#34;,&#xA;        City = &#34;Other city&#34;,&#xA;        Country = &#34;Other country&#34;,&#xA;        PostalCode = &#34;Other postal code&#34;,&#xA;        State = &#34;Other state&#34;,&#xA;        Street = &#34;Other street&#34;,&#xA;        Address = &#34;Other\nBla bla\nBla die bla\nBLa die bla die bla&#34;&#xA;    };&#xA;&#xA;    contact.PagerTelephoneNumber = &#34;Pager telephone number&#34;;&#xA;    contact.PostalAddressId = PostalAddressId.HOME_ADDRESS;&#xA;&#xA;    contact.ContactPicture = File.ReadAllBytes(&#34;Images\\tinkerbell.jpg&#34;);&#xA;    contact.IconIndex = MessageIconIndex.UnsentMail;&#xA;    contact.Save(&#34;c:\\contact.msg&#34;);&#xA;    &#xA;    System.Diagnostics.Process.Start(&#34;c:\\contact.msg&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Core Team&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sicos1977 (Kees van Spelde)&#xA;Seeker25 (Travis Semple) - Implemented Appointment support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;If you like my work then please consider a donation as a thank you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=NS92EXB2RDPYA&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Have a bug or a feature request? &lt;a href=&#34;https://github.com/Sicos1977/MsgKit/issues&#34;&gt;Please open a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before opening a new issue, please search for existing issues to avoid submitting duplicates.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/data-api-builder</title>
    <updated>2023-03-18T01:30:36Z</updated>
    <id>tag:github.com,2023-03-18:/Azure/data-api-builder</id>
    <link href="https://github.com/Azure/data-api-builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data API builder for Azure Databases provides modern REST and GraphQL endpoints to your Azure Databases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data API builder for Azure Databases&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.DataApiBuilder&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/microsoft.dataapibuilder.svg?color=success&#34; alt=&#34;NuGet Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest version of Data API builder is &lt;strong&gt;0.5.34&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/docs/whats-new.md#version-0534&#34;&gt;What&#39;s new?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data API builder for Azure Databases provides modern REST and GraphQL endpoints to your Azure Databases.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;With data API builder, database objects can be exposed via REST or GraphQL endpoints so that your data can be accessed using modern techniques on any platform, any language, and any device. With an integrated and flexible policy engine, native support for common behavior like pagination, filtering, projection and sorting, the creation of CRUD backend services can be done in minutes instead of hours or days, giving developers an efficiency boost like never seen before.&lt;/p&gt; &#xA;&lt;p&gt;Data API builder is Open Source and works on any platform. It can be executed on-premises, in a container or as a Managed Service in Azure, via the new &lt;a href=&#34;https://learn.microsoft.com/azure/static-web-apps/database-overview&#34;&gt;Database Connection&lt;/a&gt; feature available in Azure Static Web Apps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/docs/media/dab-architecture-overview.png&#34; alt=&#34;Data API builder Architecture Overview Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow collections, tables, views and stored procedures to be accessed via REST and GraphQL&lt;/li&gt; &#xA; &lt;li&gt;Support authentication via OAuth2/JWT&lt;/li&gt; &#xA; &lt;li&gt;Support for EasyAuth when running in Azure&lt;/li&gt; &#xA; &lt;li&gt;Role-based authorization using received claims&lt;/li&gt; &#xA; &lt;li&gt;Item-level security via policy expressions&lt;/li&gt; &#xA; &lt;li&gt;REST &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CRUD operations via POST, GET, PUT, PATCH, DELETE&lt;/li&gt; &#xA;   &lt;li&gt;Filtering, sorting and pagination&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GraphQL &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Queries and mutations&lt;/li&gt; &#xA;   &lt;li&gt;Filtering, sorting and pagination&lt;/li&gt; &#xA;   &lt;li&gt;Relationship navigation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Easy development via dedicated CLI&lt;/li&gt; &#xA; &lt;li&gt;Full integration with Static Web Apps via Database Connection feature when running in Azure&lt;/li&gt; &#xA; &lt;li&gt;Open Source&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started quickly with Data API builder for Azure Databases, you can use the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/docs/getting-started/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; tutorial, that will help to get familiar with some basic tools and concepts while giving you a good experience on how much Data API builder for Azure Databases can make you more efficient, but removing the need to write a lot of plumbing code.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is available in the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;Several samples are available already. To follow the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/docs/getting-started/getting-started.md&#34;&gt;Getting Started&lt;/a&gt; tutorial you&#39;ll find the associated code in the &lt;code&gt;./samples&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;More samples, including end-to-end samples using the most common frontend frameworks, are available in the [https://github.com/Azure-Samples/data-api-builder] repository.&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;List of known issues and possible workarounds, where applicable and possible, is available here: &lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/docs/known-issues.md&#34;&gt;Known Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this project are more than welcome. Make sure you check out the following documents, to successfully contribute to the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/CODE_OF_CONDUCT.md&#34;&gt;Code Of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/SECURITY.md&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to propose a completely new feature, please create an RFC item. Good examples of how to create RFC can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rfcs/raw/master/0000-template.md&#34;&gt;Rust RFC Template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0001/#what-belongs-in-a-successful-pep&#34;&gt;Python PEP Guidance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/api-guidelines/raw/vNext/Guidelines.md&#34;&gt;Microsoft REST API Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/api-guidelines/raw/vNext/azure/Guidelines.md&#34;&gt;Microsoft Azure REST API Guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data API builder for Azure Databases&lt;/strong&gt; is licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/data-api-builder/main/LICENSE.txt&#34;&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft&#39;s Trademark &amp;amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hassanhabib/OpenAI.NET</title>
    <updated>2023-03-18T01:30:36Z</updated>
    <id>tag:github.com,2023-03-18:/hassanhabib/OpenAI.NET</id>
    <link href="https://github.com/hassanhabib/OpenAI.NET" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standard-Compliant .NET library for Open AI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI.NET&lt;/h1&gt; &#xA;&lt;p&gt;Standard-Compliant .NET library for Open AI. OpenAI is a research organization that focuses on developing artificial intelligence (AI) in a safe and beneficial way for humanity. It was founded in 2015 by a group of prominent individuals in the tech industry, including Elon Musk, Sam Altman, and Greg Brockman. OpenAI&#39;s mission is to create AI systems that can reason, learn, and interact with the world in a way that benefits humans. They work on a wide range of projects, from natural language processing to robotics, and collaborate with researchers and experts from around the world. OpenAI also provides free access to some of its AI tools and technologies, and publishes research papers and findings to promote transparency and accountability in the field of AI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer nofollow&#34; href=&#34;https://camo.githubusercontent.com/3d319610708f36a324d601b85d0d29c4e90344a8768f45c05136b92a877fd755/68747470733a2f2f7777772e7365617263686d61726b6574696e676175737472616c69612e636f6d2e61752f77702d636f6e74656e742f75706c6f6164732f323031372f31302f6f726967696e616c5f696d616765735f596f75547562652e706e67&#34;&gt;&lt;img width=&#34;20&#34; src=&#34;https://camo.githubusercontent.com/3d319610708f36a324d601b85d0d29c4e90344a8768f45c05136b92a877fd755/68747470733a2f2f7777772e7365617263686d61726b6574696e676175737472616c69612e636f6d2e61752f77702d636f6e74656e742f75706c6f6164732f323031372f31302f6f726967696e616c5f696d616765735f596f75547562652e706e67&#34; data-canonical-src=&#34;https://www.searchmarketingaustralia.com.au/wp-content/uploads/2017/10/original_images_YouTube.png&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=JQnTpGV-7YA&#34; rel=&#34;nofollow&#34;&gt;OPENAI000: Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; rel=&#34;noopener noreferrer nofollow&#34; href=&#34;https://camo.githubusercontent.com/3d319610708f36a324d601b85d0d29c4e90344a8768f45c05136b92a877fd755/68747470733a2f2f7777772e7365617263686d61726b6574696e676175737472616c69612e636f6d2e61752f77702d636f6e74656e742f75706c6f6164732f323031372f31302f6f726967696e616c5f696d616765735f596f75547562652e706e67&#34;&gt;&lt;img width=&#34;20&#34; src=&#34;https://camo.githubusercontent.com/3d319610708f36a324d601b85d0d29c4e90344a8768f45c05136b92a877fd755/68747470733a2f2f7777772e7365617263686d61726b6574696e676175737472616c69612e636f6d2e61752f77702d636f6e74656e742f75706c6f6164732f323031372f31302f6f726967696e616c5f696d616765735f596f75547562652e706e67&#34; data-canonical-src=&#34;https://www.searchmarketingaustralia.com.au/wp-content/uploads/2017/10/original_images_YouTube.png&#34; style=&#34;max-width: 100%;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=2eN4ht2uESo&#34; rel=&#34;nofollow&#34;&gt;OPENAI001: API Integrations&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>