<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-24T01:30:55Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pizzaboxer/bloxstrap</title>
    <updated>2023-04-24T01:30:55Z</updated>
    <id>tag:github.com,2023-04-24:/pizzaboxer/bloxstrap</id>
    <link href="https://github.com/pizzaboxer/bloxstrap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source, feature-packed alternative bootstrapper for Roblox.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/pizzaboxer/bloxstrap/raw/main/Images/Bloxstrap.png&#34; width=&#34;48&#34;&gt; Bloxstrap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pizzaboxer/bloxstrap&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/pizzaboxer/bloxstrap/ci.yml?branch=main&amp;amp;label=builds&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/pizzaboxer/bloxstrap/total&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/pizzaboxer/bloxstrap?color=4d3dff&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://media.tenor.com/FIkSGbGycmAAAAAd/manly-roblox.gif&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mom%20made-pizza%20rolls-orange&#34; alt=&#34;lol&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/pizzaboxer/bloxstrap?style=social&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open-source, feature-packed alternative bootstrapper for Roblox.&lt;/p&gt; &#xA;&lt;p&gt;This a drop-in replacement for the stock Roblox bootstrapper, working more or less how you&#39;d expect it to, while providing additional useful features. This does not touch or modify the game client itself, it&#39;s just a launcher!&lt;/p&gt; &#xA;&lt;p&gt;If you encounter a bug, or would like to suggest a feature, please &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/issues&#34;&gt;submit an issue&lt;/a&gt;. If you&#39;re looking for help on how to use Bloxstrap, please see the &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/wiki&#34;&gt;help topics&lt;/a&gt;, or open an issue.&lt;/p&gt; &#xA;&lt;p&gt;Bloxstrap is only supported for PCs running Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/releases/latest&#34;&gt;latest release of Bloxstrap&lt;/a&gt;, and run it. Configure your preferences if needed, and install. That&#39;s about it!&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can install Bloxstrap via &lt;a href=&#34;https://winstall.app/apps/pizzaboxer.Bloxstrap&#34;&gt;Winget&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; winget install bloxstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need the &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-desktop-6.0.16-windows-x64-installer&#34;&gt;.NET 6 Desktop Runtime&lt;/a&gt;. If you don&#39;t already have it installed, you&#39;ll be prompted to install it anyway. Be sure to install Bloxstrap after you&#39;ve installed this.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not unlikely that Windows Smartscreen will show a popup when you run Bloxstrap for the first time. This happens because it&#39;s an unknown program, not because it&#39;s actually detected as being malicious. To dismiss it, just click on &#34;More info&#34; and then &#34;Run anyway&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, Bloxstrap is added to your Start Menu, where you can access the menu and reconfigure your preferences if needed.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build Bloxstrap&#39;s source code, see the &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/wiki/Building-Bloxstrap-from-source&#34;&gt;guide for building from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s some of the features that Bloxstrap provides over the stock Roblox bootstrapper:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Persistent file modifications - re-adds the old death sound!&lt;/li&gt; &#xA; &lt;li&gt;Support for shaders with &lt;a href=&#34;https://reshade.me&#34;&gt;ReShade&lt;/a&gt; and &lt;a href=&#34;https://bloxshade.com/&#34;&gt;Extravi&#39;s ReShade Presets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Painless support for Discord Rich Presence - no auth cookie needed!&lt;/li&gt; &#xA; &lt;li&gt;Built-in FPS unlocking&lt;/li&gt; &#xA; &lt;li&gt;A customizable launcher look - includes dark theme!&lt;/li&gt; &#xA; &lt;li&gt;Lets you disable the Roblox desktop app&lt;/li&gt; &#xA; &lt;li&gt;Lets you opt into non-production Roblox release channels&lt;/li&gt; &#xA; &lt;li&gt;Lets you see what region your current server is located in&lt;/li&gt; &#xA; &lt;li&gt;Lets you have multiple Roblox game instances open simultaneously&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the available features are browsable through the Bloxstrap menu. There&#39;s not too many, but it&#39;s recommended to look through all of them.&lt;/p&gt; &#xA;&lt;p&gt;Bloxstrap also has inherent benefits over some other Roblox mods, as ReShade does not break whenever Roblox updates and thus require a reinstall, and is completely free, forever. It also only runs whenever necessary, so it doesn&#39;t stay running in the background when you&#39;re not playing.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41478239/219782012-11581578-c80b-419b-b027-733561e3e493.png&#34; width=&#34;620&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41478239/219783594-976a3442-2ca2-4940-81db-948528375551.png&#34; width=&#34;205&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41478239/224803230-c51551d3-f08d-4abc-80d4-92e4f3114848.png&#34; width=&#34;419&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/41478239/224809793-9a42c9bf-fdfc-435c-819a-0827b8136ae8.png&#34; width=&#34;406&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.roblox.com/users/2485612194/profile&#34;&gt;Multako&lt;/a&gt; - Designing the Bloxstrap logo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/1011025m&#34;&gt;@1011025m&lt;/a&gt; - Providing a method for disabling the Roblox desktop app.&lt;/li&gt; &#xA; &lt;li&gt;taskmanager (&lt;a href=&#34;https://github.com/Mantaraix&#34;&gt;@Mantaraix&lt;/a&gt;) - Helping with designing the new menu look and layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Extravi&#34;&gt;@Extravi&lt;/a&gt; - Offering to make his presets a part of Bloxstrap, and helping with improving UX.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>daohainam/solid-bad-designs</title>
    <updated>2023-04-24T01:30:55Z</updated>
    <id>tag:github.com,2023-04-24:/daohainam/solid-bad-designs</id>
    <link href="https://github.com/daohainam/solid-bad-designs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SOLID-Bad-Designs&lt;/h1&gt; &#xA;&lt;p&gt;Đây là các ví dụ mẫu về năm nguyên tắc có tên SOLID, được dùng khi thiết kế các lớp trong lập trình hướng đối tượng (OOP). Để dịch và chạy, bạn xem thêm trong phần &#34;Dịch và chạy chương trình&#34; phía dưới. Năm nguyên tắc này gồm (bạn tham khảo các ví dụ trong từng thư mục tương ứng):&lt;/p&gt; &#xA;&lt;h2&gt;Single Responsibility&lt;/h2&gt; &#xA;&lt;p&gt;Mỗi lớp chỉ phục vụ cho một mục đích duy nhất. Lớp ShoppingCart vi phạm nguyên tắc này khi nó vừa là nơi chứa nội dung giỏ hàng, vừa có các chức năng để Load/Save, đồng thời có cả chức năng liên quan đến in nội dung giỏ hàng.&lt;/p&gt; &#xA;&lt;p&gt;Nếu bạn muốn cho phép in ra theo dạng HTML thì sao? Bạn sẽ cần thêm vào một hàm PrintHTML()? Nếu bạn muốn lưu giỏ hàng theo một cách khác thay vì chuyển thành JSON và lưu vào file? Bạn sẽ cần thêm các hàm để thực hiện việc này. Nếu phát hiện một lỗi trong Print, bạn cũng sẽ phải dịch và triển khai lại cả các tính năng liên quan đến Load/Save.&lt;/p&gt; &#xA;&lt;p&gt;Rõ ràng các tính năng Print và Load/Save chẳng liên quan đến nhau về mặt logic, nhưng lại được thiết kế dính chùm. Nếu nhóm của bạn có hai người riêng biệt phụ trách hai nhóm chức năng trên, họ sẽ phải liên tục merge code của nhau, điều đáng ra hoàn toàn có thể tránh được.&lt;/p&gt; &#xA;&lt;p&gt;Sẽ đơn giản hơn rất nhiều khi bạn thêm các interface như: ICartStorage với các hàm void Save(ShoppingCart)/ShoppingCart Load()... ICartPrinter với void Print(ShoppingCart) và chuyển các hàm tương ứng sang các lớp con của các interface trên. Vì sao ta tạo ra các interface/abstract class rồi implement mà không làm trực tiếp luôn thì bạn có thể xem phần Dependency-Inversion trong bài này.&lt;/p&gt; &#xA;&lt;h2&gt;Open-Closed&lt;/h2&gt; &#xA;&lt;p&gt;Các lớp phải cho phép mở rộng, nhưng không cho phép thay đổi lại các tính năng đã có.&lt;/p&gt; &#xA;&lt;p&gt;Trong ví dụ này, ta thiết kế lớp Greeting để hiển thị lời chào theo một ngôn ngữ nào đó. Thiết kế này không cho phép ta mở rộng, bởi không có cách nào thêm một ngôn ngữ mới ngoài việc sửa lại mã nguồn của lớp Greeting cả. Giả sử bạn tạo một lớp con có tên GreetingEx thừa kế từ Greeting, thì bạn lại phải sửa enum Languages để thêm một ngôn ngữ mới, và như vậy lại xảy ra vấn đề khác, đó là khi bạn gọi Greeting.SayHi (không phải GreetingEx.SayHi) với ngôn ngữ mới, Greeting.SayHi sẽ hoạt động sai.&lt;/p&gt; &#xA;&lt;p&gt;Đó chỉ là giả sử thôi, thực ra khi thay đổi enum Languages, bạn cũng đã thay đổi Greeting, bởi Greeting nhận vào Languages như tham số.&lt;/p&gt; &#xA;&lt;p&gt;Sẽ là hợp lý hơn khi bạn tạo một interface IGreeting như sau:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IGreeting&#xA;{&#xA;    void SayHi();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Và có các lớp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class GreetingEn : IGreeting&#xA;{&#xA;    public void SayHi() {&#xA;      Console.WriteLine(&#34;Hi!&#34;);&#xA;    }&#xA;}&#xA;&#xA;public class GreetingVi : IGreeting&#xA;{&#xA;    public void SayHi() {&#xA;      Console.WriteLine(&#34;Xin chào!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bạn có thể mở rộng ra bao nhiêu ngôn ngữ cũng được mà không cần phải sửa lại mã nguồn của IGreeting.&lt;/p&gt; &#xA;&lt;h2&gt;Liskov Substitution&lt;/h2&gt; &#xA;&lt;p&gt;Nếu bạn có một con trỏ thuộc lớp cha, thì nó phải hoạt động hoàn toàn đúng đắn khi bạn trỏ nó đến bất kỳ lớp con nào.&lt;/p&gt; &#xA;&lt;p&gt;Vì một hình vuông vốn cũng là một hình chữ nhật với các cạnh bằng nhau, nên trong lớp Square ta override lại các thuộc tính Width để khi thay đổi giá trị chúng sẽ tự động cập nhật lại Height. Điều này không có vấn đề gì nếu bạn có một biến&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Square sqr = new Square(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nhưng nếu bạn khai báo là:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Rectangle rect = new Square(10);&#xA;rect.Width = 20;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sau đó bạn mong muốn hình chữ nhật đó có diện tích bao nhiêu? Vì biến rect có kiểu Rectangle nên chắc chắn những người khác (và có thể cả bạn sau này) sẽ mặc nhiên coi nó trả về giá trị 200, nhưng thực chất nó sẽ trả về 400.&lt;/p&gt; &#xA;&lt;h2&gt;Interface Segregation&lt;/h2&gt; &#xA;&lt;p&gt;Khi thiết kế các interface, mỗi interface sẽ phục vụ cho một mục đích nào đó, đừng tạo các interface kiểu &#34;tất cả trong một&#34;.&lt;/p&gt; &#xA;&lt;p&gt;IOnlineStore chứa định nghĩa các function, vốn phục vụ cho 2 mục đích hoàn toàn khác nhau: quản lý giỏ hàng và tạo đơn hàng. Bởi chúng được định nghĩa cùng nhau nên các lớp thừa kế bạn cũng phải viết cùng nhau, không thể tách riêng được (hãy xem lại phần Single Responsibility). Sẽ hợp lý hơn nếu bạn chia ra:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public interface IOnlineStore&#xA;    {&#xA;        Order Checkout(ICart cart, CheckoutInfo checkoutInfo);&#xA;    }&#xA;    &#xA;    public interface ICart {&#xA;        void AddProduct(int productId, int quantity);&#xA;        void RemoveProduct(int productId, int quantity);&#xA;        IEnumerable&amp;lt;CartItem&amp;gt; GetItems();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependency-Inversion&lt;/h2&gt; &#xA;&lt;p&gt;Các lớp chỉ nên phụ thuộc vào các interface, không nên phụ thuộc vào các lớp cụ thể.&lt;/p&gt; &#xA;&lt;p&gt;Trong lớp OnlineStore, bạn sử dụng ConsolePrinter và FileStorage. Điều đó có nghĩa bạn luôn phải gắn liền với một ConsolePrinter, dù có lúc bạn sẽ muốn in ra một máy in kiểu khác, hoặc dùng một cơ chế lưu trữ khác. Ta hay mắc lỗi này khi thiết kế các lớp làm việc với database, hoặc API... kiểu như:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public OnlineStore(AzureAPIBackend backend) {&#xA;        this.backend = backend;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kiểu thiết kế này khiến ta bị dính chặt với AzureAPIBackend, sẽ rất khó nếu muốn test riêng lớp OnlineStore mà không thiết lập một API backend phía sau. Bạn có thể thiết kế lại để tránh phụ thuộc vào AzureAPIBackEnd:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public OnlineStore(IAPIBackend backend) {&#xA;        this.backend = backend;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Khi đó bạn có thể có:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class AzureAPIBackend: IAPIBackend &#xA;{&#xA;}&#xA;&#xA;public class FakeMemoryAPIBackend: IAPIBackend &#xA;{&#xA;// lớp này chỉ lưu dữ liệu trong memory, được dùng để test&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Vậy thì bạn có thể dễ dàng truyền vào một đối tượng FakeMemoryAPIBackend phù hợp để test lớp OnlineStore mà không cần phải setup cả một hệ thống backend trên Azure.&lt;/p&gt;</summary>
  </entry>
</feed>