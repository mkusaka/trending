<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-15T01:35:52Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reactiveui/refit</title>
    <updated>2022-07-15T01:35:52Z</updated>
    <id>tag:github.com,2022-07-15:/reactiveui/refit</id>
    <link href="https://github.com/reactiveui/refit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The automatic type-safe REST library for .NET Core, Xamarin and .NET. Heavily inspired by Square&#39;s Retrofit library, Refit turns your REST API into a live interface.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/refit_logo.png&#34; alt=&#34;Refit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Refit: The automatic type-safe REST library for .NET Core, Xamarin and .NET&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/dotnet/ReactiveUI/_build/latest?definitionId=17&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dotnet/ReactiveUI/_apis/build/status/Refit-CI?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Refit&lt;/th&gt; &#xA;   &lt;th&gt;Refit.HttpClientFactory&lt;/th&gt; &#xA;   &lt;th&gt;Refit.Newtonsoft.Json&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;NuGet&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Refit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Refit.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Refit.HttpClientFactory/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Refit.HttpClientFactory.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Refit.Newtonsoft.Json/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Refit.Newtonsoft.Json.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Azure&lt;br&gt;Artifacts&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/dotnet/ReactiveUI/_packaging?_a=package&amp;amp;feed=6368ad76-9653-4c2f-a6c6-da8c790ae826&amp;amp;package=2f65cb3b-df09-4050-a84e-b868ed95fd28&amp;amp;preferRelease=true&#34;&gt;&lt;img src=&#34;https://azpkgsshield.azurevoodoo.net/dotnet/ReactiveUI/Refit/Refit&#34; alt=&#34;Refit package in Refit feed in Azure Artifacts&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/dotnet/ReactiveUI/_packaging?_a=package&amp;amp;feed=6368ad76-9653-4c2f-a6c6-da8c790ae826&amp;amp;package=d87934cb-2f7b-44b7-83b8-3872ac965ef2&amp;amp;preferRelease=true&#34;&gt;&lt;img src=&#34;https://azpkgsshield.azurevoodoo.net/dotnet/ReactiveUI/Refit/Refit.HttpClientFactory&#34; alt=&#34;Refit.HttpClientFactory package in Refit feed in Azure Artifacts&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/dotnet/ReactiveUI/_packaging?_a=package&amp;amp;feed=6368ad76-9653-4c2f-a6c6-da8c790ae826&amp;amp;package=d87934cb-2f7b-44b7-83b8-3872ac965ef2&amp;amp;preferRelease=true&#34;&gt;&lt;img src=&#34;https://azpkgsshield.azurevoodoo.net/dotnet/ReactiveUI/Refit/Refit.Newtonsoft.Json&#34; alt=&#34;Refit.Newtonsoft.Json package in Refit feed in Azure Artifacts&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;CI Feed: &lt;code&gt;https://pkgs.dev.azure.com/dotnet/ReactiveUI/_packaging/Refit/nuget/v3/index.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refit is a library heavily inspired by Square&#39;s &lt;a href=&#34;http://square.github.io/retrofit&#34;&gt;Retrofit&lt;/a&gt; library, and it turns your REST API into a live interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IGitHubApi&#xA;{&#xA;    [Get(&#34;/users/{user}&#34;)]&#xA;    Task&amp;lt;User&amp;gt; GetUser(string user);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;RestService&lt;/code&gt; class generates an implementation of &lt;code&gt;IGitHubApi&lt;/code&gt; that uses &lt;code&gt;HttpClient&lt;/code&gt; to make its calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var gitHubApi = RestService.For&amp;lt;IGitHubApi&amp;gt;(&#34;https://api.github.com&#34;);&#xA;var octocat = await gitHubApi.GetUser(&#34;octocat&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.NET Core supports registering via HttpClientFactory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddRefitClient&amp;lt;IGitHubApi&amp;gt;()&#xA;    .ConfigureHttpClient(c =&amp;gt; c.BaseAddress = new Uri(&#34;https://api.github.com&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#where-does-this-work&#34;&gt;Where does this work?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#breaking-changes-in-6x&#34;&gt;Breaking changes in 6.x&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#api-attributes&#34;&gt;API Attributes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#dynamic-querystring-parameters&#34;&gt;Dynamic Querystring Parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#collections-as-querystring-parameters&#34;&gt;Collections as Querystring parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#unescape-querystring-parameters&#34;&gt;Unescape Querystring parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#body-content&#34;&gt;Body content&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#buffering-and-the-content-length-header&#34;&gt;Buffering and the Content-Length header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#json-content&#34;&gt;JSON content&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#xml-content&#34;&gt;XML Content&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#form-posts&#34;&gt;Form posts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#setting-request-headers&#34;&gt;Setting request headers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#static-headers&#34;&gt;Static headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#dynamic-headers&#34;&gt;Dynamic headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#bearer-authentication&#34;&gt;Bearer Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#reducing-header-boilerplate-with-delegatinghandlers-authorization-headers-worked-example&#34;&gt;Reducing header boilerplate with DelegatingHandlers (Authorization headers worked example)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#redefining-headers&#34;&gt;Redefining headers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#removing-headers&#34;&gt;Removing headers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#passing-state-into-delegatinghandlers&#34;&gt;Passing state into DelegatingHandlers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#support-for-polly-and-pollycontext&#34;&gt;Support for Polly and Polly.Context&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#target-interface-type&#34;&gt;Target Interface type&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#multipart-uploads&#34;&gt;Multipart uploads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#retrieving-the-response&#34;&gt;Retrieving the response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#using-generic-interfaces&#34;&gt;Using generic interfaces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#interface-inheritance&#34;&gt;Interface inheritance&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#headers-inheritance&#34;&gt;Headers inheritance&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#default-interface-methods&#34;&gt;Default Interface Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#using-httpclientfactory&#34;&gt;Using HttpClientFactory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#handling-exceptions&#34;&gt;Handling exceptions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#when-returning-taskiapiresponse-taskiapiresponset-or-taskapiresponset&#34;&gt;When returning Task&amp;lt;IApiResponse&amp;gt;, Task&amp;lt;IApiResponse&amp;lt;T&amp;gt;&amp;gt;, or Task&amp;lt;ApiResponse&amp;lt;T&amp;gt;&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#when-returning-taskt&#34;&gt;When returning Task&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#providing-a-custom-exceptionfactory&#34;&gt;Providing a custom ExceptionFactory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#apiexception-deconstruction-with-serilog&#34;&gt;ApiException deconstruction with Serilog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where does this work?&lt;/h3&gt; &#xA;&lt;p&gt;Refit currently supports the following platforms and any .NET Standard 2.0 target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UWP&lt;/li&gt; &#xA; &lt;li&gt;Xamarin.Android&lt;/li&gt; &#xA; &lt;li&gt;Xamarin.Mac&lt;/li&gt; &#xA; &lt;li&gt;Xamarin.iOS&lt;/li&gt; &#xA; &lt;li&gt;Desktop .NET 4.6.1&lt;/li&gt; &#xA; &lt;li&gt;.NET 5 / .NET Core&lt;/li&gt; &#xA; &lt;li&gt;Blazor&lt;/li&gt; &#xA; &lt;li&gt;Uno Platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SDK Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Refit 6 requires Visual Studio 16.8 or higher, or the .NET SDK 5.0.100 or higher. It can target any .NET Standard 2.0 platform.&lt;/p&gt; &#xA;&lt;p&gt;Refit 6 does not support the old &lt;code&gt;packages.config&lt;/code&gt; format for NuGet references (as they do not support analyzers/source generators). You must &lt;a href=&#34;https://devblogs.microsoft.com/nuget/migrate-packages-config-to-package-reference/&#34;&gt;migrate to PackageReference&lt;/a&gt; to use Refit v6 and later.&lt;/p&gt; &#xA;&lt;h4&gt;Breaking changes in 6.x&lt;/h4&gt; &#xA;&lt;p&gt;Refit 6 makes &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-overview&#34;&gt;System.Text.Json&lt;/a&gt; the default JSON serializer. If you&#39;d like to continue to use &lt;code&gt;Newtonsoft.Json&lt;/code&gt;, add the &lt;code&gt;Refit.Newtonsoft.Json&lt;/code&gt; NuGet package and set your &lt;code&gt;ContentSerializer&lt;/code&gt; to &lt;code&gt;NewtonsoftJsonContentSerializer&lt;/code&gt; on your &lt;code&gt;RefitSettings&lt;/code&gt; instance. &lt;code&gt;System.Text.Json&lt;/code&gt; is faster and uses less memory, though not all features are supported. The &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to?pivots=dotnet-5-0&#34;&gt;migration guide&lt;/a&gt; contains more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;IContentSerializer&lt;/code&gt; was renamed to &lt;code&gt;IHttpContentSerializer&lt;/code&gt; to better reflect its purpose. Additionally, two of its methods were renamed, &lt;code&gt;SerializeAsync&amp;lt;T&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;ToHttpContent&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;DeserializeAsync&amp;lt;T&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;FromHttpContentAsync&amp;lt;T&amp;gt;&lt;/code&gt;. Any existing implementations of these will need to be updated, though the changes should be minor.&lt;/p&gt; &#xA;&lt;h5&gt;Updates in 6.3&lt;/h5&gt; &#xA;&lt;p&gt;Refit 6.3 splits out the XML serialization via &lt;code&gt;XmlContentSerializer&lt;/code&gt; into a separate package, &lt;code&gt;Refit.Xml&lt;/code&gt;. This is to reduce the dependency size when using Refit with Web Assembly (WASM) applications. If you require XML, add a reference to &lt;code&gt;Refit.Xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;API Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Every method must have an HTTP attribute that provides the request method and relative URL. There are six built-in annotations: Get, Post, Put, Delete, Patch and Head. The relative URL of the resource is specified in the annotation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/users/list&#34;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify query parameters in the URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/users/list?sort=desc&#34;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }.&lt;/p&gt; &#xA;&lt;p&gt;If the name of your parameter doesn&#39;t match the name in the URL path, use the &lt;code&gt;AliasAs&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/group/{id}/users&#34;)]&#xA;Task&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; GroupList([AliasAs(&#34;id&#34;)] int groupId);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A request url can also bind replacement blocks to a custom object&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/group/{request.groupId}/users/{request.userId}&#34;)]&#xA;Task&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; GroupList(UserGroupRequest request);&#xA;&#xA;class UserGroupRequest{&#xA;    int groupId { get;set; }&#xA;    int userId { get;set; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Parameters that are not specified as a URL substitution will automatically be used as query parameters. This is different than Retrofit, where all parameters must be explicitly specified.&lt;/p&gt; &#xA;&lt;p&gt;The comparison between parameter name and URL parameter is &lt;em&gt;not&lt;/em&gt; case-sensitive, so it will work correctly if you name your parameter &lt;code&gt;groupId&lt;/code&gt; in the path &lt;code&gt;/group/{groupid}/show&lt;/code&gt; for example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/group/{id}/users&#34;)]&#xA;Task&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; GroupList([AliasAs(&#34;id&#34;)] int groupId, [AliasAs(&#34;sort&#34;)] string sortOrder);&#xA;&#xA;GroupList(4, &#34;desc&#34;);&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/group/4/users?sort=desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Round-tripping route parameter syntax: Forward slashes aren&#39;t encoded when using a double-asterisk (**) catch-all parameter syntax.&lt;/p&gt; &#xA;&lt;p&gt;During link generation, the routing system encodes the value captured in a double-asterisk (**) catch-all parameter (for example, {**myparametername}) except the forward slashes.&lt;/p&gt; &#xA;&lt;p&gt;The type of round-tripping route parameter must be string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/search/{**page}&#34;)]&#xA;Task&amp;lt;List&amp;lt;Page&amp;gt;&amp;gt; Search(string page);&#xA;&#xA;Search(&#34;admin/products&#34;);&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/search/admin/products&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic Querystring Parameters&lt;/h3&gt; &#xA;&lt;p&gt;If you specify an &lt;code&gt;object&lt;/code&gt; as a query parameter, all public properties which are not null are used as query parameters. This previously only applied to GET requests, but has now been expanded to all HTTP request methods, partly thanks to Twitter&#39;s hybrid API that insists on non-GET requests with querystring parameters. Use the &lt;code&gt;Query&lt;/code&gt; attribute the change the behavior to &#39;flatten&#39; your query parameter object. If using this Attribute you can specify values for the Delimiter and the Prefix which are used to &#39;flatten&#39; the object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyQueryParams&#xA;{&#xA;    [AliasAs(&#34;order&#34;)]&#xA;    public string SortOrder { get; set; }&#xA;&#xA;    public int Limit { get; set; }&#xA;&#xA;    public KindOptions Kind { get; set; }&#xA;}&#xA;&#xA;public enum KindOptions&#xA;{&#xA;    Foo,&#xA;&#xA;    [EnumMember(Value = &#34;bar&#34;)]&#xA;    Bar&#xA;}&#xA;&#xA;&#xA;[Get(&#34;/group/{id}/users&#34;)]&#xA;Task&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; GroupList([AliasAs(&#34;id&#34;)] int groupId, MyQueryParams params);&#xA;&#xA;[Get(&#34;/group/{id}/users&#34;)]&#xA;Task&amp;lt;List&amp;lt;User&amp;gt;&amp;gt; GroupListWithAttribute([AliasAs(&#34;id&#34;)] int groupId, [Query(&#34;.&#34;,&#34;search&#34;)] MyQueryParams params);&#xA;&#xA;&#xA;params.SortOrder = &#34;desc&#34;;&#xA;params.Limit = 10;&#xA;params.Kind = KindOptions.Bar;&#xA;&#xA;GroupList(4, params)&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/group/4/users?order=desc&amp;amp;Limit=10&amp;amp;Kind=bar&#34;&#xA;&#xA;GroupListWithAttribute(4, params)&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/group/4/users?search.order=desc&amp;amp;search.Limit=10&amp;amp;search.Kind=bar&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A similar behavior exists if using a Dictionary, but without the advantages of the &lt;code&gt;AliasAs&lt;/code&gt; attributes and of course no intellisense and/or type safety.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify querystring parameters with [Query] and have them flattened in non-GET requests, similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Post(&#34;/statuses/update.json&#34;)]&#xA;Task&amp;lt;Tweet&amp;gt; PostTweet([Query]TweetParams params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;TweetParams&lt;/code&gt; is a POCO, and properties will also support &lt;code&gt;[AliasAs]&lt;/code&gt; attributes.&lt;/p&gt; &#xA;&lt;h3&gt;Collections as Querystring parameters&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Query&lt;/code&gt; attribute to specify format in which collections should be formatted in query string&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/users/list&#34;)]&#xA;Task Search([Query(CollectionFormat.Multi)]int[] ages);&#xA;&#xA;Search(new [] {10, 20, 30})&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/users/list?ages=10&amp;amp;ages=20&amp;amp;ages=30&#34;&#xA;&#xA;[Get(&#34;/users/list&#34;)]&#xA;Task Search([Query(CollectionFormat.Csv)]int[] ages);&#xA;&#xA;Search(new [] {10, 20, 30})&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/users/list?ages=10%2C20%2C30&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify collection format in &lt;code&gt;RefitSettings&lt;/code&gt;, that will be used by default, unless explicitly defined in &lt;code&gt;Query&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var gitHubApi = RestService.For&amp;lt;IGitHubApi&amp;gt;(&#34;https://api.github.com&#34;,&#xA;    new RefitSettings {&#xA;        CollectionFormat = CollectionFormat.Multi&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unescape Querystring parameters&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;QueryUriFormat&lt;/code&gt; attribute to specify if the query parameters should be url escaped&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/query&#34;)]&#xA;[QueryUriFormat(UriFormat.Unescaped)]&#xA;Task Query(string q);&#xA;&#xA;Query(&#34;Select+Id,Name+From+Account&#34;)&#xA;&amp;gt;&amp;gt;&amp;gt; &#34;/query?q=Select+Id,Name+From+Account&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Body content&lt;/h3&gt; &#xA;&lt;p&gt;One of the parameters in your method can be used as the body, by using the Body attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Post(&#34;/users/new&#34;)]&#xA;Task CreateUser([Body] User user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are four possibilities for supplying the body data, depending on the type of the parameter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the type is &lt;code&gt;Stream&lt;/code&gt;, the content will be streamed via &lt;code&gt;StreamContent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If the type is &lt;code&gt;string&lt;/code&gt;, the string will be used directly as the content unless &lt;code&gt;[Body(BodySerializationMethod.Json)]&lt;/code&gt; is set which will send it as a &lt;code&gt;StringContent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If the parameter has the attribute &lt;code&gt;[Body(BodySerializationMethod.UrlEncoded)]&lt;/code&gt;, the content will be URL-encoded (see &lt;a href=&#34;https://raw.githubusercontent.com/reactiveui/refit/main/#form-posts&#34;&gt;form posts&lt;/a&gt; below)&lt;/li&gt; &#xA; &lt;li&gt;For all other types, the object will be serialized using the content serializer specified in RefitSettings (JSON is the default).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Buffering and the &lt;code&gt;Content-Length&lt;/code&gt; header&lt;/h4&gt; &#xA;&lt;p&gt;By default, Refit streams the body content without buffering it. This means you can stream a file from disk, for example, without incurring the overhead of loading the whole file into memory. The downside of this is that no &lt;code&gt;Content-Length&lt;/code&gt; header is set &lt;em&gt;on the request&lt;/em&gt;. If your API needs you to send a &lt;code&gt;Content-Length&lt;/code&gt; header with the request, you can disable this streaming behavior by setting the &lt;code&gt;buffered&lt;/code&gt; argument of the &lt;code&gt;[Body]&lt;/code&gt; attribute to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Task CreateUser([Body(buffered: true)] User user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;JSON content&lt;/h4&gt; &#xA;&lt;p&gt;JSON requests and responses are serialized/deserialized using an instance of the &lt;code&gt;IHttpContentSerializer&lt;/code&gt; interface. Refit provides two implementations out of the box: &lt;code&gt;SystemTextJsonContentSerializer&lt;/code&gt; (which is the default JSON serializer) and &lt;code&gt;NewtonsoftJsonContentSerializer&lt;/code&gt;. The first uses &lt;code&gt;System.Text.Json&lt;/code&gt; APIs and is focused on high performance and low memory usage, while the latter uses the known &lt;code&gt;Newtonsoft.Json&lt;/code&gt; library and is more versatile and customizable. You can read more about the two serializers and the main differences between the two &lt;a href=&#34;https://docs.microsoft.com/dotnet/standard/serialization/system-text-json-migrate-from-newtonsoft-how-to&#34;&gt;at this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For instance, here is how to create a new &lt;code&gt;RefitSettings&lt;/code&gt; instance using the &lt;code&gt;Newtonsoft.Json&lt;/code&gt;-based serializer (you&#39;ll also need to add a &lt;code&gt;PackageReference&lt;/code&gt; to &lt;code&gt;Refit.Newtonsoft.Json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var settings = new RefitSettings(new NewtonsoftJsonContentSerializer());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;Newtonsoft.Json&lt;/code&gt; APIs, you can customize their behavior by setting the &lt;code&gt;Newtonsoft.Json.JsonConvert.DefaultSettings&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;JsonConvert.DefaultSettings =&#xA;    () =&amp;gt; new JsonSerializerSettings() {&#xA;        ContractResolver = new CamelCasePropertyNamesContractResolver(),&#xA;        Converters = {new StringEnumConverter()}&#xA;    };&#xA;&#xA;// Serialized as: {&#34;day&#34;:&#34;Saturday&#34;}&#xA;await PostSomeStuff(new { Day = DayOfWeek.Saturday });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As these are global settings they will affect your entire application. It might be beneficial to isolate the settings for calls to a particular API. When creating a Refit generated live interface, you may optionally pass a &lt;code&gt;RefitSettings&lt;/code&gt; that will allow you to specify what serializer settings you would like. This allows you to have different serializer settings for separate APIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var gitHubApi = RestService.For&amp;lt;IGitHubApi&amp;gt;(&#34;https://api.github.com&#34;,&#xA;    new RefitSettings {&#xA;        ContentSerializer = new NewtonsoftJsonContentSerializer(&#xA;            new JsonSerializerSettings {&#xA;                ContractResolver = new SnakeCasePropertyNamesContractResolver()&#xA;        }&#xA;    )});&#xA;&#xA;var otherApi = RestService.For&amp;lt;IOtherApi&amp;gt;(&#34;https://api.example.com&#34;,&#xA;    new RefitSettings {&#xA;        ContentSerializer = new NewtonsoftJsonContentSerializer(&#xA;            new JsonSerializerSettings {&#xA;                ContractResolver = new CamelCasePropertyNamesContractResolver()&#xA;        }&#xA;    )});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Property serialization/deserialization can be customised using Json.NET&#39;s JsonProperty attribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Foo&#xA;{&#xA;    // Works like [AliasAs(&#34;b&#34;)] would in form posts (see below)&#xA;    [JsonProperty(PropertyName=&#34;b&#34;)]&#xA;    public string Bar { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;JSON source generator&lt;/h5&gt; &#xA;&lt;p&gt;To apply the benefits of the new &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-source-generator/&#34;&gt;JSON source generator&lt;/a&gt; for System.Text.Json added in .NET 6, you can use &lt;code&gt;SystemTextJsonContentSerializer&lt;/code&gt; with a custom instance of &lt;code&gt;RefitSettings&lt;/code&gt; and &lt;code&gt;JsonSerializerOptions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var options = new JsonSerializerOptions();&#xA;options.AddContext&amp;lt;MyJsonSerializerContext&amp;gt;();&#xA;&#xA;var gitHubApi = RestService.For&amp;lt;IGitHubApi&amp;gt;(&#34;https://api.github.com&#34;,&#xA;    new RefitSettings {&#xA;        ContentSerializer = new SystemTextJsonContentSerializer(options)&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;XML Content&lt;/h4&gt; &#xA;&lt;p&gt;XML requests and responses are serialized/deserialized using &lt;em&gt;System.Xml.Serialization.XmlSerializer&lt;/em&gt;. By default, Refit will use JSON content serialization, to use XML content configure the ContentSerializer to use the &lt;code&gt;XmlContentSerializer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var gitHubApi = RestService.For&amp;lt;IXmlApi&amp;gt;(&#34;https://www.w3.org/XML&#34;,&#xA;    new RefitSettings {&#xA;        ContentSerializer = new XmlContentSerializer()&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Property serialization/deserialization can be customised using attributes found in the &lt;em&gt;System.Xml.Serialization&lt;/em&gt; namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class Foo&#xA;    {&#xA;        [XmlElement(Namespace = &#34;https://www.w3.org/XML&#34;)]&#xA;        public string Bar { get; set; }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;System.Xml.Serialization.XmlSerializer&lt;/em&gt; provides many options for serializing, those options can be set by providing an &lt;code&gt;XmlContentSerializerSettings&lt;/code&gt; to the &lt;code&gt;XmlContentSerializer&lt;/code&gt; constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var gitHubApi = RestService.For&amp;lt;IXmlApi&amp;gt;(&#34;https://www.w3.org/XML&#34;,&#xA;    new RefitSettings {&#xA;        ContentSerializer = new XmlContentSerializer(&#xA;            new XmlContentSerializerSettings&#xA;            {&#xA;                XmlReaderWriterSettings = new XmlReaderWriterSettings()&#xA;                {&#xA;                    ReaderSettings = new XmlReaderSettings&#xA;                    {&#xA;                        IgnoreWhitespace = true&#xA;                    }&#xA;                }&#xA;            }&#xA;        )&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;form-posts&#34;&gt;&lt;/a&gt;Form posts&lt;/h4&gt; &#xA;&lt;p&gt;For APIs that take form posts (i.e. serialized as &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;), initialize the Body attribute with &lt;code&gt;BodySerializationMethod.UrlEncoded&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The parameter can be an &lt;code&gt;IDictionary&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IMeasurementProtocolApi&#xA;{&#xA;    [Post(&#34;/collect&#34;)]&#xA;    Task Collect([Body(BodySerializationMethod.UrlEncoded)] Dictionary&amp;lt;string, object&amp;gt; data);&#xA;}&#xA;&#xA;var data = new Dictionary&amp;lt;string, object&amp;gt; {&#xA;    {&#34;v&#34;, 1},&#xA;    {&#34;tid&#34;, &#34;UA-1234-5&#34;},&#xA;    {&#34;cid&#34;, new Guid(&#34;d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&#34;)},&#xA;    {&#34;t&#34;, &#34;event&#34;},&#xA;};&#xA;&#xA;// Serialized as: v=1&amp;amp;tid=UA-1234-5&amp;amp;cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&amp;amp;t=event&#xA;await api.Collect(data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can just pass any object and all &lt;em&gt;public, readable&lt;/em&gt; properties will be serialized as form fields in the request. This approach allows you to alias property names using &lt;code&gt;[AliasAs(&#34;whatever&#34;)]&lt;/code&gt; which can help if the API has cryptic field names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IMeasurementProtocolApi&#xA;{&#xA;    [Post(&#34;/collect&#34;)]&#xA;    Task Collect([Body(BodySerializationMethod.UrlEncoded)] Measurement measurement);&#xA;}&#xA;&#xA;public class Measurement&#xA;{&#xA;    // Properties can be read-only and [AliasAs] isn&#39;t required&#xA;    public int v { get { return 1; } }&#xA;&#xA;    [AliasAs(&#34;tid&#34;)]&#xA;    public string WebPropertyId { get; set; }&#xA;&#xA;    [AliasAs(&#34;cid&#34;)]&#xA;    public Guid ClientId { get; set; }&#xA;&#xA;    [AliasAs(&#34;t&#34;)]&#xA;    public string Type { get; set; }&#xA;&#xA;    public object IgnoreMe { private get; set; }&#xA;}&#xA;&#xA;var measurement = new Measurement {&#xA;    WebPropertyId = &#34;UA-1234-5&#34;,&#xA;    ClientId = new Guid(&#34;d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&#34;),&#xA;    Type = &#34;event&#34;&#xA;};&#xA;&#xA;// Serialized as: v=1&amp;amp;tid=UA-1234-5&amp;amp;cid=d1e9ea6b-2e8b-4699-93e0-0bcbd26c206c&amp;amp;t=event&#xA;await api.Collect(measurement);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a type that has &lt;code&gt;[JsonProperty(PropertyName)]&lt;/code&gt; attributes setting property aliases, Refit will use those too (&lt;code&gt;[AliasAs]&lt;/code&gt; will take precedence where you have both). This means that the following type will serialize as &lt;code&gt;one=value1&amp;amp;two=value2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;public class SomeObject&#xA;{&#xA;    [JsonProperty(PropertyName = &#34;one&#34;)]&#xA;    public string FirstProperty { get; set; }&#xA;&#xA;    [JsonProperty(PropertyName = &#34;notTwo&#34;)]&#xA;    [AliasAs(&#34;two&#34;)]&#xA;    public string SecondProperty { get; set; }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This use of &lt;code&gt;AliasAs&lt;/code&gt; applies to querystring parameters and form body posts, but not to response objects; for aliasing fields on response objects, you&#39;ll still need to use &lt;code&gt;[JsonProperty(&#34;full-property-name&#34;)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Setting request headers&lt;/h3&gt; &#xA;&lt;h4&gt;Static headers&lt;/h4&gt; &#xA;&lt;p&gt;You can set one or more static request headers for a request applying a &lt;code&gt;Headers&lt;/code&gt; attribute to the method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Headers(&#34;User-Agent: Awesome Octocat App&#34;)]&#xA;[Get(&#34;/users/{user}&#34;)]&#xA;Task&amp;lt;User&amp;gt; GetUser(string user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Static headers can also be added to &lt;em&gt;every request in the API&lt;/em&gt; by applying the &lt;code&gt;Headers&lt;/code&gt; attribute to the interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Headers(&#34;User-Agent: Awesome Octocat App&#34;)]&#xA;public interface IGitHubApi&#xA;{&#xA;    [Get(&#34;/users/{user}&#34;)]&#xA;    Task&amp;lt;User&amp;gt; GetUser(string user);&#xA;&#xA;    [Post(&#34;/users/new&#34;)]&#xA;    Task CreateUser([Body] User user);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dynamic headers&lt;/h4&gt; &#xA;&lt;p&gt;If the content of the header needs to be set at runtime, you can add a header with a dynamic value to a request by applying a &lt;code&gt;Header&lt;/code&gt; attribute to a parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/users/{user}&#34;)]&#xA;Task&amp;lt;User&amp;gt; GetUser(string user, [Header(&#34;Authorization&#34;)] string authorization);&#xA;&#xA;// Will add the header &#34;Authorization: token OAUTH-TOKEN&#34; to the request&#xA;var user = await GetUser(&#34;octocat&#34;, &#34;token OAUTH-TOKEN&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding an &lt;code&gt;Authorization&lt;/code&gt; header is such a common use case that you can add an access token to a request by applying an &lt;code&gt;Authorize&lt;/code&gt; attribute to a parameter and optionally specifying the scheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Get(&#34;/users/{user}&#34;)]&#xA;Task&amp;lt;User&amp;gt; GetUser(string user, [Authorize(&#34;Bearer&#34;)] string token);&#xA;&#xA;// Will add the header &#34;Authorization: Bearer OAUTH-TOKEN}&#34; to the request&#xA;var user = await GetUser(&#34;octocat&#34;, &#34;OAUTH-TOKEN&#34;);&#xA;&#xA;//note: the scheme defaults to Bearer if none provided&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to set multiple headers at runtime, you can add a &lt;code&gt;IDictionary&amp;lt;string, string&amp;gt;&lt;/code&gt; and apply a &lt;code&gt;HeaderCollection&lt;/code&gt; attribute to the parameter and it will inject the headers into the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;[Get(&#34;/users/{user}&#34;)]&#xA;Task&amp;lt;User&amp;gt; GetUser(string user, [HeaderCollection] IDictionary&amp;lt;string, string&amp;gt; headers);&#xA;&#xA;var headers = new Dictionary&amp;lt;string, string&amp;gt; {{&#34;Authorization&#34;,&#34;Bearer tokenGoesHere&#34;}, {&#34;X-Tenant-Id&#34;,&#34;123&#34;}};&#xA;var user = await GetUser(&#34;octocat&#34;, headers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bearer Authentication&lt;/h4&gt; &#xA;&lt;p&gt;Most APIs need some sort of Authentication. The most common is OAuth Bearer authentication. A header is added to each request of the form: &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;. Refit makes it easy to insert your logic to get the token however your app needs, so you don&#39;t have to pass a token into each method.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add &lt;code&gt;[Headers(&#34;Authorization: Bearer&#34;)]&lt;/code&gt; to the interface or methods which need the token.&lt;/li&gt; &#xA; &lt;li&gt;Set either &lt;code&gt;AuthorizationHeaderValueGetter&lt;/code&gt; or &lt;code&gt;AuthorizationHeaderValueWithParamGetter&lt;/code&gt; in the &lt;code&gt;RefitSettings&lt;/code&gt; instance. The difference is that the latter one passes the &lt;code&gt;HttpRequestMessage&lt;/code&gt; into the function in case you need to take action based on the specific request. Refit will call your delegate each time it needs to obtain the token, so it&#39;s a good idea for your mechanism to cache the token value for some period within the token lifetime.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Reducing header boilerplate with DelegatingHandlers (Authorization headers worked example)&lt;/h4&gt; &#xA;&lt;p&gt;Although we make provisions for adding dynamic headers at runtime directly in Refit, most use-cases would likely benefit from registering a custom &lt;code&gt;DelegatingHandler&lt;/code&gt; in order to inject the headers as part of the &lt;code&gt;HttpClient&lt;/code&gt; middleware pipeline thus removing the need to add lots of &lt;code&gt;[Header]&lt;/code&gt; or &lt;code&gt;[HeaderCollection]&lt;/code&gt; attributes.&lt;/p&gt; &#xA;&lt;p&gt;In the example above we are leveraging a &lt;code&gt;[HeaderCollection]&lt;/code&gt; parameter to inject an &lt;code&gt;Authorization&lt;/code&gt; and &lt;code&gt;X-Tenant-Id&lt;/code&gt; header. This is quite a common scenario if you are integrating with a 3rd party that uses OAuth2. While it&#39;s ok for the occasional endpoint, it would be quite cumbersome if we had to add that boilerplate to every method in our interface.&lt;/p&gt; &#xA;&lt;p&gt;In this example we will assume our application is a multi-tenant application that is able to pull information about a tenant through some interface &lt;code&gt;ITenantProvider&lt;/code&gt; and has a data store &lt;code&gt;IAuthTokenStore&lt;/code&gt; that can be used to retrieve an auth token to attach to the outbound request.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA; //Custom delegating handler for adding Auth headers to outbound requests&#xA; class AuthHeaderHandler : DelegatingHandler&#xA; {&#xA;     private readonly ITenantProvider tenantProvider;&#xA;     private readonly IAuthTokenStore authTokenStore;&#xA;&#xA;    public AuthHeaderHandler(ITenantProvider tenantProvider, IAuthTokenStore authTokenStore)&#xA;    {&#xA;         this.tenantProvider = tenantProvider ?? throw new ArgumentNullException(nameof(tenantProvider));&#xA;         this.authTokenStore = authTokenStore ?? throw new ArgumentNullException(nameof(authTokenStore));&#xA;         InnerHandler = new HttpClientHandler();&#xA;    }&#xA;&#xA;    protected override async Task&amp;lt;HttpResponseMessage&amp;gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)&#xA;    {&#xA;        var token = await authTokenStore.GetToken();&#xA;&#xA;        //potentially refresh token here if it has expired etc.&#xA;&#xA;        request.Headers.Authorization = new AuthenticationHeaderValue(&#34;Bearer&#34;, token);&#xA;        request.Headers.Add(&#34;X-Tenant-Id&#34;, tenantProvider.GetTenantId());&#xA;&#xA;        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);&#xA;    }&#xA;}&#xA;&#xA;//Startup.cs&#xA;public void ConfigureServices(IServiceCollection services)&#xA;{&#xA;    services.AddTransient&amp;lt;ITenantProvider, TenantProvider&amp;gt;();&#xA;    services.AddTransient&amp;lt;IAuthTokenStore, AuthTokenStore&amp;gt;();&#xA;    services.AddTransient&amp;lt;AuthHeaderHandler&amp;gt;();&#xA;&#xA;    //this will add our refit api implementation with an HttpClient&#xA;    //that is configured to add auth headers to all requests&#xA;&#xA;    //note: AddRefitClient&amp;lt;T&amp;gt; requires a reference to Refit.HttpClientFactory&#xA;    //note: the order of delegating handlers is important and they run in the order they are added!&#xA;&#xA;    services.AddRefitClient&amp;lt;ISomeThirdPartyApi&amp;gt;()&#xA;        .ConfigureHttpClient(c =&amp;gt; c.BaseAddress = new Uri(&#34;https://api.example.com&#34;))&#xA;        .AddHttpMessageHandler&amp;lt;AuthHeaderHandler&amp;gt;();&#xA;        //you could add Polly here to handle HTTP 429 / HTTP 503 etc&#xA;}&#xA;&#xA;//Your application code&#xA;public class SomeImportantBusinessLogic&#xA;{&#xA;    private ISomeThirdPartyApi thirdPartyApi;&#xA;&#xA;    public SomeImportantBusinessLogic(ISomeThirdPartyApi thirdPartyApi)&#xA;    {&#xA;        this.thirdPartyApi = thirdPartyApi;&#xA;    }&#xA;&#xA;    public async Task DoStuffWithUser(string username)&#xA;    {&#xA;        var user = await thirdPartyApi.GetUser(username);&#xA;        //do your thing&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you aren&#39;t using dependency injection then you could achieve the same thing by doing something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var api = RestService.For&amp;lt;ISomeThirdPartyApi&amp;gt;(new HttpClient(new AuthHeaderHandler(tenantProvider, authTokenStore))&#xA;    {&#xA;        BaseAddress = new Uri(&#34;https://api.example.com&#34;)&#xA;    }&#xA;);&#xA;&#xA;var user = await thirdPartyApi.GetUser(username);&#xA;//do your thing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redefining headers&lt;/h4&gt; &#xA;&lt;p&gt;Unlike Retrofit, where headers do not overwrite each other and are all added to the request regardless of how many times the same header is defined, Refit takes a similar approach to the approach ASP.NET MVC takes with action filters — &lt;strong&gt;redefining a header will replace it&lt;/strong&gt;, in the following order of precedence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Headers&lt;/code&gt; attribute on the interface &lt;em&gt;(lowest priority)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Headers&lt;/code&gt; attribute on the method&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Header&lt;/code&gt; attribute or &lt;code&gt;HeaderCollection&lt;/code&gt; attribute on a method parameter &lt;em&gt;(highest priority)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Headers(&#34;X-Emoji: &lt;span&gt;🚀&lt;/span&gt;&#34;)]&#xA;public interface IGitHubApi&#xA;{&#xA;    [Get(&#34;/users/list&#34;)]&#xA;    Task&amp;lt;List&amp;gt; GetUsers();&#xA;&#xA;    [Get(&#34;/users/{user}&#34;)]&#xA;    [Headers(&#34;X-Emoji: &lt;span&gt;😸&lt;/span&gt;&#34;)]&#xA;    Task&amp;lt;User&amp;gt; GetUser(string user);&#xA;&#xA;    [Post(&#34;/users/new&#34;)]&#xA;    [Headers(&#34;X-Emoji: &lt;span&gt;🤘&lt;/span&gt;&#34;)]&#xA;    Task CreateUser([Body] User user, [Header(&#34;X-Emoji&#34;)] string emoji);&#xA;}&#xA;&#xA;// X-Emoji: &lt;span&gt;🚀&lt;/span&gt;&#xA;var users = await GetUsers();&#xA;&#xA;// X-Emoji: &lt;span&gt;😸&lt;/span&gt;&#xA;var user = await GetUser(&#34;octocat&#34;);&#xA;&#xA;// X-Emoji: &lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;)&#xA;await CreateUser(user, &#34;&lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;)&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This redefining behavior only applies to headers &lt;em&gt;with the same name&lt;/em&gt;. Headers with different names are not replaced. The following code will result in all headers being included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Headers(&#34;Header-A: 1&#34;)]&#xA;public interface ISomeApi&#xA;{&#xA;    [Headers(&#34;Header-B: 2&#34;)]&#xA;    [Post(&#34;/post&#34;)]&#xA;    Task PostTheThing([Header(&#34;Header-C&#34;)] int c);&#xA;}&#xA;&#xA;// Header-A: 1&#xA;// Header-B: 2&#xA;// Header-C: 3&#xA;var user = await api.PostTheThing(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Removing headers&lt;/h4&gt; &#xA;&lt;p&gt;Headers defined on an interface or method can be removed by redefining a static header without a value (i.e. without &lt;code&gt;: &amp;lt;value&amp;gt;&lt;/code&gt;) or passing &lt;code&gt;null&lt;/code&gt; for a dynamic header. &lt;em&gt;Empty strings will be included as empty headers.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Headers(&#34;X-Emoji: &lt;span&gt;🚀&lt;/span&gt;&#34;)]&#xA;public interface IGitHubApi&#xA;{&#xA;    [Get(&#34;/users/list&#34;)]&#xA;    [Headers(&#34;X-Emoji&#34;)] // Remove the X-Emoji header&#xA;    Task&amp;lt;List&amp;gt; GetUsers();&#xA;&#xA;    [Get(&#34;/users/{user}&#34;)]&#xA;    [Headers(&#34;X-Emoji:&#34;)] // Redefine the X-Emoji header as empty&#xA;    Task&amp;lt;User&amp;gt; GetUser(string user);&#xA;&#xA;    [Post(&#34;/users/new&#34;)]&#xA;    Task CreateUser([Body] User user, [Header(&#34;X-Emoji&#34;)] string emoji);&#xA;}&#xA;&#xA;// No X-Emoji header&#xA;var users = await GetUsers();&#xA;&#xA;// X-Emoji:&#xA;var user = await GetUser(&#34;octocat&#34;);&#xA;&#xA;// No X-Emoji header&#xA;await CreateUser(user, null);&#xA;&#xA;// X-Emoji:&#xA;await CreateUser(user, &#34;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing state into DelegatingHandlers&lt;/h3&gt; &#xA;&lt;p&gt;If there is runtime state that you need to pass to a &lt;code&gt;DelegatingHandler&lt;/code&gt; you can add a property with a dynamic value to the underlying &lt;code&gt;HttpRequestMessage.Properties&lt;/code&gt; by applying a &lt;code&gt;Property&lt;/code&gt; attribute to a parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IGitHubApi&#xA;{&#xA;    [Post(&#34;/users/new&#34;)]&#xA;    Task CreateUser([Body] User user, [Property(&#34;SomeKey&#34;)] string someValue);&#xA;&#xA;    [Post(&#34;/users/new&#34;)]&#xA;    Task CreateUser([Body] User user, [Property] string someOtherKey);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The attribute constructor optionally takes a string which becomes the key in the &lt;code&gt;HttpRequestMessage.Properties&lt;/code&gt; dictionary. If no key is explicitly defined then the name of the parameter becomes the key. If a key is defined multiple times the value in &lt;code&gt;HttpRequestMessage.Properties&lt;/code&gt; will be overwritten. The parameter itself can be any &lt;code&gt;object&lt;/code&gt;. Properties can be accessed inside a &lt;code&gt;DelegatingHandler&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class RequestPropertyHandler : DelegatingHandler&#xA;{&#xA;    public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {}&#xA;&#xA;    protected override async Task&amp;lt;HttpResponseMessage&amp;gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)&#xA;    {&#xA;        // See if the request has a the property&#xA;        if(request.Properties.ContainsKey(&#34;SomeKey&#34;))&#xA;        {&#xA;            var someProperty = request.Properties[&#34;SomeKey&#34;];&#xA;            //do stuff&#xA;        }&#xA;&#xA;        if(request.Properties.ContainsKey(&#34;someOtherKey&#34;))&#xA;        {&#xA;            var someOtherProperty = request.Properties[&#34;someOtherKey&#34;];&#xA;            //do stuff&#xA;        }&#xA;&#xA;        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: in .NET 5 &lt;code&gt;HttpRequestMessage.Properties&lt;/code&gt; has been marked &lt;code&gt;Obsolete&lt;/code&gt; and Refit will instead populate the value into the new &lt;code&gt;HttpRequestMessage.Options&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Support for Polly and Polly.Context&lt;/h4&gt; &#xA;&lt;p&gt;Because Refit supports &lt;code&gt;HttpClientFactory&lt;/code&gt; it is possible to configure Polly policies on your HttpClient. If your policy makes use of &lt;code&gt;Polly.Context&lt;/code&gt; this can be passed via Refit by adding &lt;code&gt;[Property(&#34;PollyExecutionContext&#34;)] Polly.Context context&lt;/code&gt; as behind the scenes &lt;code&gt;Polly.Context&lt;/code&gt; is simply stored in &lt;code&gt;HttpRequestMessage.Properties&lt;/code&gt; under the key &lt;code&gt;PollyExecutionContext&lt;/code&gt; and is of type &lt;code&gt;Polly.Context&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Target Interface Type&lt;/h4&gt; &#xA;&lt;p&gt;There may be times when you want to know what the target interface type is of the Refit instance. An example is where you have a derived interface that implements a common base like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IGetAPI&amp;lt;TEntity&amp;gt;&#xA;{&#xA;    [Get(&#34;/{key}&#34;)]&#xA;    Task&amp;lt;TEntity&amp;gt; Get(long key);&#xA;}&#xA;&#xA;public interface IUsersAPI : IGetAPI&amp;lt;User&amp;gt;&#xA;{&#xA;}&#xA;&#xA;public interface IOrdersAPI : IGetAPI&amp;lt;Order&amp;gt;&#xA;{&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can access the concrete type of the interface for use in a handler, such as to alter the URL of the request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class RequestPropertyHandler : DelegatingHandler&#xA;{&#xA;    public RequestPropertyHandler(HttpMessageHandler innerHandler = null) : base(innerHandler ?? new HttpClientHandler()) {}&#xA;&#xA;    protected override async Task&amp;lt;HttpResponseMessage&amp;gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)&#xA;    {&#xA;        // Get the type of the target interface&#xA;        Type interfaceType = (Type)request.Properties[HttpMessageRequestOptions.InterfaceType];&#xA;&#xA;        var builder = new UriBuilder(request.RequestUri);&#xA;        // Alter the Path in some way based on the interface or an attribute on it&#xA;        builder.Path = $&#34;/{interfaceType.Name}{builder.Path}&#34;;&#xA;        // Set the new Uri on the outgoing message&#xA;        request.RequestUri = builder.Uri;&#xA;&#xA;        return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: in .NET 5 &lt;code&gt;HttpRequestMessage.Properties&lt;/code&gt; has been marked &lt;code&gt;Obsolete&lt;/code&gt; and Refit will instead populate the value into the new &lt;code&gt;HttpRequestMessage.Options&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multipart uploads&lt;/h3&gt; &#xA;&lt;p&gt;Methods decorated with &lt;code&gt;Multipart&lt;/code&gt; attribute will be submitted with multipart content type. At this time, multipart methods support the following parameter types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;string (parameter name will be used as name and string value as value)&lt;/li&gt; &#xA; &lt;li&gt;byte array&lt;/li&gt; &#xA; &lt;li&gt;Stream&lt;/li&gt; &#xA; &lt;li&gt;FileInfo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Name of the field in the multipart data priority precedence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;multipartItem.Name if specified and not null (optional); dynamic, allows naming form data part at execution time.&lt;/li&gt; &#xA; &lt;li&gt;[AliasAs] attribute (optional) that decorate the streamPart parameter in the method signature (see below); static, defined in code.&lt;/li&gt; &#xA; &lt;li&gt;MultipartItem parameter name (default) as defined in the method signature; static, defined in code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A custom boundary can be specified with an optional string parameter to the &lt;code&gt;Multipart&lt;/code&gt; attribute. If left empty, this defaults to &lt;code&gt;----MyGreatBoundary&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To specify the file name and content type for byte array (&lt;code&gt;byte[]&lt;/code&gt;), &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;FileInfo&lt;/code&gt; parameters, use of a wrapper class is required. The wrapper classes for these types are &lt;code&gt;ByteArrayPart&lt;/code&gt;, &lt;code&gt;StreamPart&lt;/code&gt; and &lt;code&gt;FileInfoPart&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface ISomeApi&#xA;{&#xA;    [Multipart]&#xA;    [Post(&#34;/users/{id}/photo&#34;)]&#xA;    Task UploadPhoto(int id, [AliasAs(&#34;myPhoto&#34;)] StreamPart stream);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass a Stream to this method, construct a StreamPart object like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;someApiInstance.UploadPhoto(id, new StreamPart(myPhotoStream, &#34;photo.jpg&#34;, &#34;image/jpeg&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The AttachmentName attribute that was previously described in this section has been deprecated and its use is not recommended.&lt;/p&gt; &#xA;&lt;h3&gt;Retrieving the response&lt;/h3&gt; &#xA;&lt;p&gt;Note that in Refit unlike in Retrofit, there is no option for a synchronous network request - all requests must be async, either via &lt;code&gt;Task&lt;/code&gt; or via &lt;code&gt;IObservable&lt;/code&gt;. There is also no option to create an async method via a Callback parameter unlike Retrofit, because we live in the async/await future.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to how body content changes via the parameter type, the return type will determine the content returned.&lt;/p&gt; &#xA;&lt;p&gt;Returning Task without a type parameter will discard the content and solely tell you whether or not the call succeeded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Post(&#34;/users/new&#34;)]&#xA;Task CreateUser([Body] User user);&#xA;&#xA;// This will throw if the network call fails&#xA;await CreateUser(someUser);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the type parameter is &#39;HttpResponseMessage&#39; or &#39;string&#39;, the raw response message or the content as a string will be returned respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Returns the content as a string (i.e. the JSON data)&#xA;[Get(&#34;/users/{user}&#34;)]&#xA;Task&amp;lt;string&amp;gt; GetUser(string user);&#xA;&#xA;// Returns the raw response, as an IObservable that can be used with the&#xA;// Reactive Extensions&#xA;[Get(&#34;/users/{user}&#34;)]&#xA;IObservable&amp;lt;HttpResponseMessage&amp;gt; GetUser(string user);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a generic wrapper class called &lt;code&gt;ApiResponse&amp;lt;T&amp;gt;&lt;/code&gt; that can be used as a return type. Using this class as a return type allows you to retrieve not just the content as an object, but also any metadata associated with the request/response. This includes information such as response headers, the http status code and reason phrase (e.g. 404 Not Found), the response version, the original request message that was sent and in the case of an error, an &lt;code&gt;ApiException&lt;/code&gt; object containing details of the error. Following are some examples of how you can retrieve the response metadata.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//Returns the content within a wrapper class containing metadata about the request/response&#xA;[Get(&#34;/users/{user}&#34;)]&#xA;Task&amp;lt;ApiResponse&amp;lt;User&amp;gt;&amp;gt; GetUser(string user);&#xA;&#xA;//Calling the API&#xA;var response = await gitHubApi.GetUser(&#34;octocat&#34;);&#xA;&#xA;//Getting the status code (returns a value from the System.Net.HttpStatusCode enumeration)&#xA;var httpStatus = response.StatusCode;&#xA;&#xA;//Determining if a success status code was received&#xA;if(response.IsSuccessStatusCode)&#xA;{&#xA;    //YAY! Do the thing...&#xA;}&#xA;&#xA;//Retrieving a well-known header value (e.g. &#34;Server&#34; header)&#xA;var serverHeaderValue = response.Headers.Server != null ? response.Headers.Server.ToString() : string.Empty;&#xA;&#xA;//Retrieving a custom header value&#xA;var customHeaderValue = string.Join(&#39;,&#39;, response.Headers.GetValues(&#34;A-Custom-Header&#34;));&#xA;&#xA;//Looping through all the headers&#xA;foreach(var header in response.Headers)&#xA;{&#xA;    var headerName = header.Key;&#xA;    var headerValue = string.Join(&#39;,&#39;, header.Value);&#xA;}&#xA;&#xA;//Finally, retrieving the content in the response body as a strongly-typed object&#xA;var user = response.Content;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using generic interfaces&lt;/h3&gt; &#xA;&lt;p&gt;When using something like ASP.NET Web API, it&#39;s a fairly common pattern to have a whole stack of CRUD REST services. Refit now supports these, allowing you to define a single API interface with a generic type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IReallyExcitingCrudApi&amp;lt;T, in TKey&amp;gt; where T : class&#xA;{&#xA;    [Post(&#34;&#34;)]&#xA;    Task&amp;lt;T&amp;gt; Create([Body] T payload);&#xA;&#xA;    [Get(&#34;&#34;)]&#xA;    Task&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; ReadAll();&#xA;&#xA;    [Get(&#34;/{key}&#34;)]&#xA;    Task&amp;lt;T&amp;gt; ReadOne(TKey key);&#xA;&#xA;    [Put(&#34;/{key}&#34;)]&#xA;    Task Update(TKey key, [Body]T payload);&#xA;&#xA;    [Delete(&#34;/{key}&#34;)]&#xA;    Task Delete(TKey key);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which can be used like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// The &#34;/users&#34; part here is kind of important if you want it to work for more&#xA;// than one type (unless you have a different domain for each type)&#xA;var api = RestService.For&amp;lt;IReallyExcitingCrudApi&amp;lt;User, string&amp;gt;&amp;gt;(&#34;http://api.example.com/users&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interface inheritance&lt;/h3&gt; &#xA;&lt;p&gt;When multiple services that need to be kept separate share a number of APIs, it is possible to leverage interface inheritance to avoid having to define the same Refit methods multiple times in different services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IBaseService&#xA;{&#xA;    [Get(&#34;/resources&#34;)]&#xA;    Task&amp;lt;Resource&amp;gt; GetResource(string id);&#xA;}&#xA;&#xA;public interface IDerivedServiceA : IBaseService&#xA;{&#xA;    [Delete(&#34;/resources&#34;)]&#xA;    Task DeleteResource(string id);&#xA;}&#xA;&#xA;public interface IDerivedServiceB : IBaseService&#xA;{&#xA;    [Post(&#34;/resources&#34;)]&#xA;    Task&amp;lt;string&amp;gt; AddResource([Body] Resource resource);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the &lt;code&gt;IDerivedServiceA&lt;/code&gt; interface will expose both the &lt;code&gt;GetResource&lt;/code&gt; and &lt;code&gt;DeleteResource&lt;/code&gt; APIs, while &lt;code&gt;IDerivedServiceB&lt;/code&gt; will expose &lt;code&gt;GetResource&lt;/code&gt; and &lt;code&gt;AddResource&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Headers inheritance&lt;/h4&gt; &#xA;&lt;p&gt;When using inheritance, existing header attributes will be passed along as well, and the inner-most ones will have precedence:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Headers(&#34;User-Agent: AAA&#34;)]&#xA;public interface IAmInterfaceA&#xA;{&#xA;    [Get(&#34;/get?result=Ping&#34;)]&#xA;    Task&amp;lt;string&amp;gt; Ping();&#xA;}&#xA;&#xA;[Headers(&#34;User-Agent: BBB&#34;)]&#xA;public interface IAmInterfaceB : IAmInterfaceA&#xA;{&#xA;    [Get(&#34;/get?result=Pang&#34;)]&#xA;    [Headers(&#34;User-Agent: PANG&#34;)]&#xA;    Task&amp;lt;string&amp;gt; Pang();&#xA;&#xA;    [Get(&#34;/get?result=Foo&#34;)]&#xA;    Task&amp;lt;string&amp;gt; Foo();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;IAmInterfaceB.Pang()&lt;/code&gt; will use &lt;code&gt;PANG&lt;/code&gt; as its user agent, while &lt;code&gt;IAmInterfaceB.Foo&lt;/code&gt; and &lt;code&gt;IAmInterfaceB.Ping&lt;/code&gt; will use &lt;code&gt;BBB&lt;/code&gt;. Note that if &lt;code&gt;IAmInterfaceB&lt;/code&gt; didn&#39;t have a header attribute, &lt;code&gt;Foo&lt;/code&gt; would then use the &lt;code&gt;AAA&lt;/code&gt; value inherited from &lt;code&gt;IAmInterfaceA&lt;/code&gt;. If an interface is inheriting more than one interface, the order of precedence is the same as the one in which the inherited interfaces are declared:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IAmInterfaceC : IAmInterfaceA, IAmInterfaceB&#xA;{&#xA;    [Get(&#34;/get?result=Foo&#34;)]&#xA;    Task&amp;lt;string&amp;gt; Foo();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;code&gt;IAmInterfaceC.Foo&lt;/code&gt; would use the header attribute inherited from &lt;code&gt;IAmInterfaceA&lt;/code&gt;, if present, or the one inherited from &lt;code&gt;IAmInterfaceB&lt;/code&gt;, and so on for all the declared interfaces.&lt;/p&gt; &#xA;&lt;h3&gt;Default Interface Methods&lt;/h3&gt; &#xA;&lt;p&gt;Starting with C# 8.0, default interface methods (a.k.a. DIMs) can be defined on interfaces. Refit interfaces can provide additional logic using DIMs, optionally combined with private and/or static helper methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IApiClient&#xA;{&#xA;    // implemented by Refit but not exposed publicly&#xA;    [Get(&#34;/get&#34;)]&#xA;    internal Task&amp;lt;string&amp;gt; GetInternal();&#xA;    // Publicly available with added logic applied to the result from the API call&#xA;    public async Task&amp;lt;string&amp;gt; Get()&#xA;        =&amp;gt; FormatResponse(await GetInternal());&#xA;    private static String FormatResponse(string response)&#xA;        =&amp;gt; $&#34;The response is: {response}&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The type generated by Refit will implement the method &lt;code&gt;IApiClient.GetInternal&lt;/code&gt;. If additional logic is required immediately before or after its invocation, it shouldn&#39;t be exposed directly and can thus be hidden from consumers by being marked as &lt;code&gt;internal&lt;/code&gt;. The default interface method &lt;code&gt;IApiClient.Get&lt;/code&gt; will be inherited by all types implementing &lt;code&gt;IApiClient&lt;/code&gt;, including - of course - the type generated by Refit. Consumers of the &lt;code&gt;IApiClient&lt;/code&gt; will call the public &lt;code&gt;Get&lt;/code&gt; method and profit from the additional logic provided in its implementation (optionally, in this case, with the help of the private static helper &lt;code&gt;FormatResponse&lt;/code&gt;). To support runtimes without DIM-support (.NET Core 2.x and below or .NET Standard 2.0 and below), two additional types would be required for the same solution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal interface IApiClientInternal&#xA;{&#xA;    [Get(&#34;/get&#34;)]&#xA;    Task&amp;lt;string&amp;gt; Get();&#xA;}&#xA;public interface IApiClient&#xA;{&#xA;    public Task&amp;lt;string&amp;gt; Get();&#xA;}&#xA;internal class ApiClient : IApiClient&#xA;{&#xA;    private readonly IApiClientInternal client;&#xA;    public ApiClient(IApiClientInternal client) =&amp;gt; this.client = client;&#xA;    public async Task&amp;lt;string&amp;gt; Get()&#xA;        =&amp;gt; FormatResponse(await client.Get());&#xA;    private static String FormatResponse(string response)&#xA;        =&amp;gt; $&#34;The response is: {response}&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using HttpClientFactory&lt;/h3&gt; &#xA;&lt;p&gt;Refit has first class support for the ASP.Net Core 2.1 HttpClientFactory. Add a reference to &lt;code&gt;Refit.HttpClientFactory&lt;/code&gt; and call the provided extension method in your &lt;code&gt;ConfigureServices&lt;/code&gt; method to configure your Refit interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddRefitClient&amp;lt;IWebApi&amp;gt;()&#xA;        .ConfigureHttpClient(c =&amp;gt; c.BaseAddress = new Uri(&#34;https://api.example.com&#34;));&#xA;        // Add additional IHttpClientBuilder chained methods as required here:&#xA;        // .AddHttpMessageHandler&amp;lt;MyHandler&amp;gt;()&#xA;        // .SetHandlerLifetime(TimeSpan.FromMinutes(2));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, a &lt;code&gt;RefitSettings&lt;/code&gt; object can be included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var settings = new RefitSettings();&#xA;// Configure refit settings here&#xA;&#xA;services.AddRefitClient&amp;lt;IWebApi&amp;gt;(settings)&#xA;        .ConfigureHttpClient(c =&amp;gt; c.BaseAddress = new Uri(&#34;https://api.example.com&#34;));&#xA;        // Add additional IHttpClientBuilder chained methods as required here:&#xA;        // .AddHttpMessageHandler&amp;lt;MyHandler&amp;gt;()&#xA;        // .SetHandlerLifetime(TimeSpan.FromMinutes(2));&#xA;&#xA;// or injected from the container&#xA;services.AddRefitClient&amp;lt;IWebApi&amp;gt;(provider =&amp;gt; new RefitSettings() { /* configure settings */ })&#xA;        .ConfigureHttpClient(c =&amp;gt; c.BaseAddress = new Uri(&#34;https://api.example.com&#34;));&#xA;        // Add additional IHttpClientBuilder chained methods as required here:&#xA;        // .AddHttpMessageHandler&amp;lt;MyHandler&amp;gt;()&#xA;        // .SetHandlerLifetime(TimeSpan.FromMinutes(2));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that some of the properties of &lt;code&gt;RefitSettings&lt;/code&gt; will be ignored because the &lt;code&gt;HttpClient&lt;/code&gt; and &lt;code&gt;HttpClientHandlers&lt;/code&gt; will be managed by the &lt;code&gt;HttpClientFactory&lt;/code&gt; instead of Refit.&lt;/p&gt; &#xA;&lt;p&gt;You can then get the api interface using constructor injection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class HomeController : Controller&#xA;{&#xA;    public HomeController(IWebApi webApi)&#xA;    {&#xA;        _webApi = webApi;&#xA;    }&#xA;&#xA;    private readonly IWebApi _webApi;&#xA;&#xA;    public async Task&amp;lt;IActionResult&amp;gt; Index(CancellationToken cancellationToken)&#xA;    {&#xA;        var thing = await _webApi.GetSomethingWeNeed(cancellationToken);&#xA;        return View(thing);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling exceptions&lt;/h3&gt; &#xA;&lt;p&gt;Refit has different exception handling behavior depending on if your Refit interface methods return &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; or if they return &lt;code&gt;Task&amp;lt;IApiResponse&amp;gt;&lt;/code&gt;, &lt;code&gt;Task&amp;lt;IApiResponse&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;Task&amp;lt;ApiResponse&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a id=&#34;when-returning-taskapiresponset&#34;&gt;&lt;/a&gt;When returning &lt;code&gt;Task&amp;lt;IApiResponse&amp;gt;&lt;/code&gt;, &lt;code&gt;Task&amp;lt;IApiResponse&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, or &lt;code&gt;Task&amp;lt;ApiResponse&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Refit traps any &lt;code&gt;ApiException&lt;/code&gt; raised by the &lt;code&gt;ExceptionFactory&lt;/code&gt; when processing the response, and any errors that occur when attempting to deserialize the response to &lt;code&gt;ApiResponse&amp;lt;T&amp;gt;&lt;/code&gt;, and populates the exception into the &lt;code&gt;Error&lt;/code&gt; property on &lt;code&gt;ApiResponse&amp;lt;T&amp;gt;&lt;/code&gt; without throwing the exception.&lt;/p&gt; &#xA;&lt;p&gt;You can then decide what to do like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var response = await _myRefitClient.GetSomeStuff();&#xA;if(response.IsSuccessStatusCode)&#xA;{&#xA;   //do your thing&#xA;}&#xA;else&#xA;{&#xA;   _logger.LogError(response.Error, response.Error.Content);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;When returning &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Refit throws any &lt;code&gt;ApiException&lt;/code&gt; raised by the &lt;code&gt;ExceptionFactory&lt;/code&gt; when processing the response and any errors that occur when attempting to deserialize the response to &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ...&#xA;try&#xA;{&#xA;   var result = await awesomeApi.GetFooAsync(&#34;bar&#34;);&#xA;}&#xA;catch (ApiException exception)&#xA;{&#xA;   //exception handling&#xA;}&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refit can also throw &lt;code&gt;ValidationApiException&lt;/code&gt; instead which in addition to the information present on &lt;code&gt;ApiException&lt;/code&gt; also contains &lt;code&gt;ProblemDetails&lt;/code&gt; when the service implements the &lt;a href=&#34;https://tools.ietf.org/html/rfc7807&#34;&gt;RFC 7807&lt;/a&gt; specification for problem details and the response content type is &lt;code&gt;application/problem+json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For specific information on the problem details of the validation exception, simply catch &lt;code&gt;ValidationApiException&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ...&#xA;try&#xA;{&#xA;   var result = await awesomeApi.GetFooAsync(&#34;bar&#34;);&#xA;}&#xA;catch (ValidationApiException validationException)&#xA;{&#xA;   // handle validation here by using validationException.Content,&#xA;   // which is type of ProblemDetails according to RFC 7807&#xA;&#xA;   // If the response contains additional properties on the problem details,&#xA;   // they will be added to the validationException.Content.Extensions collection.&#xA;}&#xA;catch (ApiException exception)&#xA;{&#xA;   // other exception handling&#xA;}&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Providing a custom &lt;code&gt;ExceptionFactory&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can also override default exceptions behavior that are raised by the &lt;code&gt;ExceptionFactory&lt;/code&gt; when processing the result by providing a custom exception factory in &lt;code&gt;RefitSettings&lt;/code&gt;. For example, you can suppress all exceptions with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var nullTask = Task.FromResult&amp;lt;Exception&amp;gt;(null);&#xA;&#xA;var gitHubApi = RestService.For&amp;lt;IGitHubApi&amp;gt;(&#34;https://api.github.com&#34;,&#xA;    new RefitSettings {&#xA;        ExceptionFactory = httpResponse =&amp;gt; nullTask;&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that exceptions raised when attempting to deserialize the response are not affected by this.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ApiException&lt;/code&gt; deconstruction with Serilog&lt;/h4&gt; &#xA;&lt;p&gt;For users of &lt;a href=&#34;https://serilog.net&#34;&gt;Serilog&lt;/a&gt;, you can enrich the logging of &lt;code&gt;ApiException&lt;/code&gt; using the &lt;a href=&#34;https://www.nuget.org/packages/Serilog.Exceptions.Refit&#34;&gt;Serilog.Exceptions.Refit&lt;/a&gt; NuGet package. Details of how to integrate this package into your applications can be found &lt;a href=&#34;https://github.com/RehanSaeed/Serilog.Exceptions#serilogexceptionsrefit&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huiyadanli/RevokeMsgPatcher</title>
    <updated>2022-07-15T01:35:52Z</updated>
    <id>tag:github.com,2022-07-15:/huiyadanli/RevokeMsgPatcher</id>
    <link href="https://github.com/huiyadanli/RevokeMsgPatcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A hex editor for WeChat/QQ/TIM - PC版微信/QQ/TIM防撤回补丁（我已经看到了，撤回也没用了）&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a&gt;&lt;img width=&#34;100px&#34; src=&#34;https://raw.githubusercontent.com/huiyadanli/RevokeMsgPatcher/master/Images/logo.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.microsoft.com/download/details.aspx?id=30653&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-windows-lightgrey.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/huiyadanli/RevokeMsgPatcher/total.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/huiyadanli/RevokeMsgPatcher&#34;&gt; &lt;img src=&#34;https://img.shields.io/appveyor/ci/huiyadanli/RevokeMsgPatcher.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;👀微信/QQ/TIM防撤回补丁&lt;/h1&gt; &#xA;&lt;p&gt;适用于 Windows 下 PC 版微信/QQ/TIM的防撤回补丁。&lt;strong&gt;支持最新版微信/QQ/TIM&lt;/strong&gt;，其中微信能够选择安装多开功能。&lt;/p&gt; &#xA;&lt;img width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/huiyadanli/RevokeMsgPatcher/master/Images/revoke.jpg&#34;&gt; &#xA;&lt;p&gt;下载地址： &lt;strong&gt;&lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/releases/download/1.5/RevokeMsgPatcher.v1.5.fix1.zip&#34;&gt;⚡️点我下载最新版本&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&#34;https://wwn.lanzouf.com/b00ppm2pa&#34;&gt;☁备用下载-蓝奏云&lt;/a&gt; 密码:4ho8 | &lt;a href=&#34;https://pan.baidu.com/s/15ilr78t8F1-VW8eUZSkr_Q?pwd=3rrj&#34;&gt;☁备用下载-百度云&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;相关文档： &lt;strong&gt;&lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/wiki/%E7%89%88%E6%9C%AC%E6%94%AF%E6%8C%81&#34;&gt;✔支持哪些版本&lt;/a&gt;&lt;/strong&gt; | &lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/wiki#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;❓常见问题&lt;/a&gt; | &lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/wiki&#34;&gt;📖查看完整文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;原理与方法： &lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/wiki/%E5%BE%AE%E4%BF%A1%E9%98%B2%E6%92%A4%E5%9B%9E%E4%B8%8E%E5%A4%9A%E5%BC%80%E6%95%99%E7%A8%8B&#34;&gt;📗微信&lt;/a&gt; | &lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/wiki/QQ%E6%88%96TIM%E9%98%B2%E6%92%A4%E5%9B%9E%E6%95%99%E7%A8%8B&#34;&gt;📕QQ&lt;/a&gt; | &lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/wiki/QQ%E6%88%96TIM%E9%98%B2%E6%92%A4%E5%9B%9E%E6%95%99%E7%A8%8B&#34;&gt;📘TIM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;附带产物：&lt;a href=&#34;https://github.com/huiyadanli/RevokeMsgPatcher/tree/master/RevokeMsgPatcher.MultiInstance&#34;&gt;一个通用的微信多开工具&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📷截图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huiyadanli/RevokeMsgPatcher/master/Images/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔨使用方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;首先，你的系统需要满足以下条件：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 7 或更高版本，&lt;strong&gt;不支持XP&lt;/strong&gt;。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=42642&#34;&gt;.NET Framework 4.5.2&lt;/a&gt; 或更高版本。&lt;strong&gt;低于此版本在打开程序时可能无反应，或者直接报错&lt;/strong&gt;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用本程序前，先关闭微信/QQ/TIM。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;以管理员身份运行本程序&lt;/strong&gt;，等待右下角获取最新的补丁信息。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;选择微信/QQ/TIM的安装路径。如果你用的安装版的微信/QQ/TIM，正常情况下本程序会自动从注册表中获取安装路径，绿色版需要手动选择路径。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;点击防撤回。界面可能会出现一段时间的无响应，请耐心等待。&lt;strong&gt;由于修改了微信的 WeChatWin.dll 文件、QQ/TIM的 IM.dll 文件，杀毒软件可能会弹出警告，放行即可。&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;注意：微信/QQ/TIM更新之后要重新安装补丁！&lt;/p&gt; &#xA;&lt;h2&gt;❤Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/36huo/wechat_anti_revoke&#34;&gt;wechat_anti_revoke&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📄License&lt;/h2&gt; &#xA;&lt;p&gt;GPLv3&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huiyadanli/RevokeMsgPatcher/master/Images/give_a_star.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Unity-Technologies/ml-agents</title>
    <updated>2022-07-15T01:35:52Z</updated>
    <id>tag:github.com,2022-07-15:/Unity-Technologies/ml-agents</id>
    <link href="https://github.com/Unity-Technologies/ml-agents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Unity Machine Learning Agents Toolkit (ML-Agents) is an open-source project that enables games and simulations to serve as environments for training intelligent agents using deep reinforcement learning and imitation learning.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/images/image-banner.png&#34; align=&#34;middle&#34; width=&#34;3000&#34;&gt; &#xA;&lt;h1&gt;Unity ML-Agents Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/release_19_docs/docs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-reference-blue.svg?sanitize=true&#34; alt=&#34;docs badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache--2.0-green.svg?sanitize=true&#34; alt=&#34;license badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/releases/tag/latest_release&#34;&gt;latest release&lt;/a&gt;) (&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/releases&#34;&gt;all releases&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The Unity Machine Learning Agents Toolkit&lt;/strong&gt; (ML-Agents) is an open-source project that enables games and simulations to serve as environments for training intelligent agents. We provide implementations (based on PyTorch) of state-of-the-art algorithms to enable game developers and hobbyists to easily train intelligent agents for 2D, 3D and VR/AR games. Researchers can also use the provided simple-to-use Python API to train Agents using reinforcement learning, imitation learning, neuroevolution, or any other methods. These trained agents can be used for multiple purposes, including controlling NPC behavior (in a variety of settings such as multi-agent and adversarial), automated testing of game builds and evaluating different game design decisions pre-release. The ML-Agents Toolkit is mutually beneficial for both game developers and AI researchers as it provides a central platform where advances in AI can be evaluated on Unity’s rich environments and then made accessible to the wider research and game developer communities.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;18+ &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/Learning-Environment-Examples.md&#34;&gt;example Unity environments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple environment configurations and training scenarios&lt;/li&gt; &#xA; &lt;li&gt;Flexible Unity SDK that can be integrated into your game or custom Unity scene&lt;/li&gt; &#xA; &lt;li&gt;Support for training single-agent, multi-agent cooperative, and multi-agent competitive scenarios via several Deep Reinforcement Learning algorithms (PPO, SAC, MA-POCA, self-play).&lt;/li&gt; &#xA; &lt;li&gt;Support for learning from demonstrations through two Imitation Learning algorithms (BC and GAIL).&lt;/li&gt; &#xA; &lt;li&gt;Easily definable Curriculum Learning scenarios for complex tasks&lt;/li&gt; &#xA; &lt;li&gt;Train robust agents using environment randomization&lt;/li&gt; &#xA; &lt;li&gt;Flexible agent control with On Demand Decision Making&lt;/li&gt; &#xA; &lt;li&gt;Train using multiple concurrent Unity environment instances&lt;/li&gt; &#xA; &lt;li&gt;Utilizes the &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/Unity-Inference-Engine.md&#34;&gt;Unity Inference Engine&lt;/a&gt; to provide native cross-platform support&lt;/li&gt; &#xA; &lt;li&gt;Unity environment &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/Python-API.md&#34;&gt;control from Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wrap Unity learning environments as a &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/gym-unity/README.md&#34;&gt;gym&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/ML-Agents-Overview.md&#34;&gt;ML-Agents Overview&lt;/a&gt; page for detailed descriptions of all these features.&lt;/p&gt; &#xA;&lt;h2&gt;Releases &amp;amp; Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Our latest, stable release is &lt;code&gt;Release 19&lt;/code&gt;. Click &lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/release_19_docs/docs/Readme.md&#34;&gt;here&lt;/a&gt; to get started with the latest release of ML-Agents.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The table below lists all our releases, including our &lt;code&gt;main&lt;/code&gt; branch which is under active development and may be unstable. A few helpful guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/Versioning.md&#34;&gt;Versioning page&lt;/a&gt; overviews how we manage our GitHub releases and the versioning process for each of the ML-Agents components.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/releases&#34;&gt;Releases page&lt;/a&gt; contains details of the changes between releases.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/docs/Migrating.md&#34;&gt;Migration page&lt;/a&gt; contains details on how to upgrade from earlier releases of the ML-Agents Toolkit.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;Documentation&lt;/strong&gt; links in the table below include installation and usage instructions specific to each release. Remember to always use the documentation that corresponds to the release version you&#39;re using.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;com.unity.ml-agents&lt;/code&gt; package is &lt;a href=&#34;https://docs.unity3d.com/2020.1/Documentation/Manual/pack-safe.html&#34;&gt;verified&lt;/a&gt; for Unity 2020.1 and later. Verified packages releases are numbered 1.0.x.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Release Date&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Python Package&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Unity Package&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;main (unstable)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/main&#34;&gt;source&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/main/docs/Readme.md&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/archive/main.zip&#34;&gt;download&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Release 19&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;January 14, 2022&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/release_19&#34;&gt;source&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/release_19_docs/docs/Readme.md&#34;&gt;docs&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/archive/release_19.zip&#34;&gt;download&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://pypi.org/project/mlagents/0.28.0/&#34;&gt;0.28.0&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.ml-agents@2.2/manual/index.html&#34;&gt;2.2.1&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Verified Package 1.0.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;May 26, 2021&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/tree/com.unity.ml-agents_1.0.8&#34;&gt;source&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/raw/release_2_verified_docs/docs/Readme.md&#34;&gt;docs&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/archive/com.unity.ml-agents_1.0.8.zip&#34;&gt;download&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://pypi.org/project/mlagents/0.16.1/&#34;&gt;0.16.1&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.ml-agents@1.0/manual/index.html&#34;&gt;1.0.8&lt;/a&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you are a researcher interested in a discussion of Unity as an AI platform, see a pre-print of our &lt;a href=&#34;https://arxiv.org/abs/1809.02627&#34;&gt;reference paper on Unity and the ML-Agents Toolkit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use Unity or the ML-Agents Toolkit to conduct research, we ask that you cite the following paper as a reference:&lt;/p&gt; &#xA;&lt;p&gt;Juliani, A., Berges, V., Teng, E., Cohen, A., Harper, J., Elion, C., Goy, C., Gao, Y., Henry, H., Mattar, M., Lange, D. (2020). Unity: A General Platform for Intelligent Agents. &lt;em&gt;arXiv preprint &lt;a href=&#34;https://arxiv.org/abs/1809.02627&#34;&gt;arXiv:1809.02627&lt;/a&gt;.&lt;/em&gt; &lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents&#34;&gt;https://github.com/Unity-Technologies/ml-agents&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;We have a Unity Learn course, &lt;a href=&#34;https://learn.unity.com/course/ml-agents-hummingbirds&#34;&gt;ML-Agents: Hummingbirds&lt;/a&gt;, that provides a gentle introduction to Unity and the ML-Agents Toolkit.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve also partnered with &lt;a href=&#34;https://www.youtube.com/c/CodeMonkeyUnity&#34;&gt;CodeMonkeyUnity&lt;/a&gt; to create a &lt;a href=&#34;https://www.youtube.com/playlist?list=PLzDRvYVwl53vehwiN_odYJkPBzcqFw110&#34;&gt;series of tutorial videos&lt;/a&gt; on how to implement and use the ML-Agents Toolkit.&lt;/p&gt; &#xA;&lt;p&gt;We have also published a series of blog posts that are relevant for ML-Agents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(July 12, 2021) &lt;a href=&#34;https://blog.unity.com/technology/ml-agents-plays-dodgeball&#34;&gt;ML-Agents plays Dodgeball&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(May 5, 2021) &lt;a href=&#34;https://blogs.unity3d.com/2021/05/05/ml-agents-v2-0-release-now-supports-training-complex-cooperative-behaviors/&#34;&gt;ML-Agents v2.0 release: Now supports training complex cooperative behaviors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(December 28, 2020) &lt;a href=&#34;https://blogs.unity3d.com/2020/12/28/happy-holidays-from-the-unity-ml-agents-team/&#34;&gt;Happy holidays from the Unity ML-Agents team!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(November 20, 2020) &lt;a href=&#34;https://blogs.unity3d.com/2020/11/20/how-eidos-montreal-created-grid-sensors-to-improve-observations-for-training-agents/&#34;&gt;How Eidos-Montréal created Grid Sensors to improve observations for training agents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(November 11, 2020) &lt;a href=&#34;https://blogs.unity3d.com/2020/11/11/2020-aiunity-interns-shoutout/&#34;&gt;2020 AI@Unity interns shoutout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(May 12, 2020) &lt;a href=&#34;https://blogs.unity3d.com/2020/05/12/announcing-ml-agents-unity-package-v1-0/&#34;&gt;Announcing ML-Agents Unity Package v1.0!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(February 28, 2020) &lt;a href=&#34;https://blogs.unity3d.com/2020/02/28/training-intelligent-adversaries-using-self-play-with-ml-agents/&#34;&gt;Training intelligent adversaries using self-play with ML-Agents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(November 11, 2019) &lt;a href=&#34;https://blogs.unity3d.com/2019/11/11/training-your-agents-7-times-faster-with-ml-agents/&#34;&gt;Training your agents 7 times faster with ML-Agents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(October 21, 2019) &lt;a href=&#34;https://blogs.unity3d.com/2019/10/21/the-aiunity-interns-help-shape-the-world/&#34;&gt;The AI@Unity interns help shape the world&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(April 15, 2019) &lt;a href=&#34;https://blogs.unity3d.com/2019/04/15/unity-ml-agents-toolkit-v0-8-faster-training-on-real-games/&#34;&gt;Unity ML-Agents Toolkit v0.8: Faster training on real games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(March 1, 2019) &lt;a href=&#34;https://blogs.unity3d.com/2019/03/01/unity-ml-agents-toolkit-v0-7-a-leap-towards-cross-platform-inference/&#34;&gt;Unity ML-Agents Toolkit v0.7: A leap towards cross-platform inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(December 17, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/12/17/ml-agents-toolkit-v0-6-improved-usability-of-brains-and-imitation-learning/&#34;&gt;ML-Agents Toolkit v0.6: Improved usability of Brains and Imitation Learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(October 2, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/10/02/puppo-the-corgi-cuteness-overload-with-the-unity-ml-agents-toolkit/&#34;&gt;Puppo, The Corgi: Cuteness Overload with the Unity ML-Agents Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(September 11, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/09/11/ml-agents-toolkit-v0-5-new-resources-for-ai-researchers-available-now/&#34;&gt;ML-Agents Toolkit v0.5, new resources for AI researchers available now&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(June 26, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/06/26/solving-sparse-reward-tasks-with-curiosity/&#34;&gt;Solving sparse-reward tasks with Curiosity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(June 19, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/06/19/unity-ml-agents-toolkit-v0-4-and-udacity-deep-reinforcement-learning-nanodegree/&#34;&gt;Unity ML-Agents Toolkit v0.4 and Udacity Deep Reinforcement Learning Nanodegree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(May 24, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/05/24/imitation-learning-in-unity-the-workflow/&#34;&gt;Imitation Learning in Unity: The Workflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(March 15, 2018) &lt;a href=&#34;https://blogs.unity3d.com/2018/03/15/ml-agents-v0-3-beta-released-imitation-learning-feedback-driven-features-and-more/&#34;&gt;ML-Agents Toolkit v0.3 Beta released: Imitation Learning, feedback-driven features, and more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(December 11, 2017) &lt;a href=&#34;https://blogs.unity3d.com/2017/12/11/using-machine-learning-agents-in-a-real-game-a-beginners-guide/&#34;&gt;Using Machine Learning Agents in a real game: a beginner’s guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(December 8, 2017) &lt;a href=&#34;https://blogs.unity3d.com/2017/12/08/introducing-ml-agents-v0-2-curriculum-learning-new-environments-and-more/&#34;&gt;Introducing ML-Agents Toolkit v0.2: Curriculum Learning, new environments, and more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(September 19, 2017) &lt;a href=&#34;https://blogs.unity3d.com/2017/09/19/introducing-unity-machine-learning-agents/&#34;&gt;Introducing: Unity Machine Learning Agents Toolkit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Overviewing reinforcement learning concepts (&lt;a href=&#34;https://blogs.unity3d.com/2017/06/26/unity-ai-themed-blog-entries/&#34;&gt;multi-armed bandit&lt;/a&gt; and &lt;a href=&#34;https://blogs.unity3d.com/2017/08/22/unity-ai-reinforcement-learning-with-q-learning/&#34;&gt;Q-learning&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More from Unity&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/Unity-Robotics-Hub&#34;&gt;Unity Robotics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unity.com/computer-vision&#34;&gt;Unity Computer Vision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unity.com/products/game-simulation&#34;&gt;Unity Game Simulation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community and Feedback&lt;/h2&gt; &#xA;&lt;p&gt;The ML-Agents Toolkit is an open-source project and we encourage and welcome contributions. If you wish to contribute, be sure to review our &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/com.unity.ml-agents/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For problems with the installation and setup of the ML-Agents Toolkit, or discussions about how to best setup or train your agents, please create a new thread on the &lt;a href=&#34;https://forum.unity.com/forums/ml-agents.453/&#34;&gt;Unity ML-Agents forum&lt;/a&gt; and make sure to include as much detail as possible. If you run into any other problems using the ML-Agents Toolkit or have a specific feature request, please &lt;a href=&#34;https://github.com/Unity-Technologies/ml-agents/issues&#34;&gt;submit a GitHub issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please tell us which samples you would like to see shipped with the ML-Agents Unity package by replying to &lt;a href=&#34;https://forum.unity.com/threads/feedback-wanted-shipping-sample-s-with-the-ml-agents-package.1073468/&#34;&gt;this forum thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Your opinion matters a great deal to us. Only by hearing your thoughts on the Unity ML-Agents Toolkit can we continue to improve and grow. Please take a few minutes to &lt;a href=&#34;https://unitysoftware.co1.qualtrics.com/jfe/form/SV_55pQKCZ578t0kbc&#34;&gt;let us know about it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For any other questions or feedback, connect directly with the ML-Agents team at &lt;a href=&#34;mailto:ml-agents@unity3d.com&#34;&gt;ml-agents@unity3d.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy&lt;/h2&gt; &#xA;&lt;p&gt;In order to improve the developer experience for Unity ML-Agents Toolkit, we have added in-editor analytics. Please refer to &#34;Information that is passively collected by Unity&#34; in the &lt;a href=&#34;https://unity3d.com/legal/privacy-policy&#34;&gt;Unity Privacy Policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/ml-agents/main/LICENSE.md&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>