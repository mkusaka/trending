<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-13T01:31:32Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IvanMurzak/Unity-MCP</title>
    <updated>2025-08-13T01:31:32Z</updated>
    <id>tag:github.com,2025-08-13:/IvanMurzak/Unity-MCP</id>
    <link href="https://github.com/IvanMurzak/Unity-MCP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Server + Plugin for Unity Editor and Unity game. The Plugin allows to connect to MCP clients like Claude Desktop or others.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Unity MCP (AI Connector)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openupm.com/packages/com.ivanmurzak.unity.mcp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/com.ivanmurzak.unity.mcp?label=openupm&amp;amp;registry_uri=https://package.openupm.com&#34; alt=&#34;openupm&#34; /&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/IvanMurzak/Unity-MCP&#34; alt=&#34;License&#34; /&gt; &lt;a href=&#34;https://stand-with-ukraine.pp.ua&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg?sanitize=true&#34; alt=&#34;Stand With Ukraine&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/8f595879-a578-421a-a06d-8c194af874f7&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Unity Version&lt;/th&gt; &#xA;   &lt;th&gt;Editmode&lt;/th&gt; &#xA;   &lt;th&gt;Playmode&lt;/th&gt; &#xA;   &lt;th&gt;Standalone&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2022.3.61f1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/2022.3.61f1_editmode.yml?label=2022.3.61f1-editmode&amp;amp;branch=main&#34; alt=&#34;2022.3.61f1&#34; /&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/2022.3.61f1_playmode.yml?label=2022.3.61f1-playmode&amp;amp;branch=main&#34; alt=&#34;2022.3.61f1&#34; /&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/2022.3.61f1_standalone.yml?label=2022.3.61f1-standalone&amp;amp;branch=main&#34; alt=&#34;2022.3.61f1&#34; /&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2023.2.20f1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/2023.2.20f1_editmode.yml?label=2023.2.20f1-editmode&amp;amp;branch=main&#34; alt=&#34;2023.2.20f1&#34; /&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/2023.2.20f1_playmode.yml?label=2023.2.20f1-playmode&amp;amp;branch=main&#34; alt=&#34;2023.2.20f1&#34; /&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/2023.2.20f1_standalone.yml?label=2023.2.20f1-standalone&amp;amp;branch=main&#34; alt=&#34;2023.2.20f1&#34; /&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6000.0.46f1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/6000.0.46f1_editmode.yml?label=6000.0.46f1-editmode&amp;amp;branch=main&#34; alt=&#34;6000.0.46f1&#34; /&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/6000.0.46f1_playmode.yml?label=6000.0.46f1-playmode&amp;amp;branch=main&#34; alt=&#34;6000.0.46f1&#34; /&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/IvanMurzak/Unity-MCP/6000.0.46f1_standalone.yml?label=6000.0.46f1-standalone&amp;amp;branch=main&#34; alt=&#34;6000.0.46f1&#34; /&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/IvanMurzak/Unity-MCP&#34;&gt;Unity-MCP&lt;/a&gt;&lt;/strong&gt; is a bridge between LLM and Unity. It exposes and explains to LLM Unity&#39;s tools. LLM understands the interface and utilizes the tools in the way a user asks.&lt;/p&gt; &#xA;&lt;p&gt;Connect &lt;strong&gt;&lt;a href=&#34;https://github.com/IvanMurzak/Unity-MCP&#34;&gt;Unity-MCP&lt;/a&gt;&lt;/strong&gt; to LLM client such as &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude&lt;/a&gt; or &lt;a href=&#34;https://www.cursor.com/&#34;&gt;Cursor&lt;/a&gt; using integrated &lt;code&gt;AI Connector&lt;/code&gt; window. Custom clients are supported as well.&lt;/p&gt; &#xA;&lt;p&gt;The project is designed to let developers to add custom tools soon. After that the next goal is to enable the same features in player&#39;s build. For not it works only in Unity Editor.&lt;/p&gt; &#xA;&lt;p&gt;The system is extensible: you can define custom &lt;code&gt;tool&lt;/code&gt;s directly in your Unity project codebase, exposing new capabilities to the AI or automation clients. This makes Unity-MCP a flexible foundation for building advanced workflows, rapid prototyping, or integrating AI-driven features into your development process.&lt;/p&gt; &#xA;&lt;h2&gt;AI Tools&lt;/h2&gt; &#xA;&lt;p&gt;Unity-MCP supports a wide range of tools. Each tool is a small connector between LLM and Unity Engine. You may create your own &lt;code&gt;tools&lt;/code&gt; by using API, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/IvanMurzak/Unity-MCP/main/#add-custom-tool&#34;&gt;add custom tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is the list of default AI tools. All of them are available after installation Unity-MCP into your project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Legend:&lt;/strong&gt; ✅ = Implemented &amp;amp; available, 🔲 = Planned / Not yet implemented&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td valign=&#34;top&#34;&gt; &lt;h3&gt;GameObject&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Destroy&lt;/li&gt; &#xA;     &lt;li&gt;✅ Find&lt;/li&gt; &#xA;     &lt;li&gt;✅ Modify (tag, layer, name, static)&lt;/li&gt; &#xA;     &lt;li&gt;✅ Set parent&lt;/li&gt; &#xA;     &lt;li&gt;✅ Duplicate&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h5&gt;GameObject.Components&lt;/h5&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Add Component&lt;/li&gt; &#xA;     &lt;li&gt;✅ Get Components&lt;/li&gt; &#xA;     &lt;li&gt;✅ Modify Component&lt;/li&gt; &#xA;     &lt;li&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;✅ &lt;code&gt;Field&lt;/code&gt; set value&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;✅ &lt;code&gt;Property&lt;/code&gt; set value&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;✅ &lt;code&gt;Reference&lt;/code&gt; link set&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;✅ Destroy Component&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Remove missing components&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Editor&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ State (Playmode) &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;✅ Get&lt;/li&gt; &#xA;       &lt;li&gt;✅ Set&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;✅ Get Windows&lt;/li&gt; &#xA;     &lt;li&gt;✅ Layer &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;✅ Get All&lt;/li&gt; &#xA;       &lt;li&gt;✅ Add&lt;/li&gt; &#xA;       &lt;li&gt;✅ Remove&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;✅ Tag &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;✅ Get All&lt;/li&gt; &#xA;       &lt;li&gt;✅ Add&lt;/li&gt; &#xA;       &lt;li&gt;✅ Remove&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;✅ Execute &lt;code&gt;MenuItem&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;✅ Run Tests (see note in &lt;a href=&#34;https://raw.githubusercontent.com/IvanMurzak/Unity-MCP/main/#running-playmode-tests&#34;&gt;running play mode tests&lt;/a&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h4&gt;Editor.Selection&lt;/h4&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Get selection&lt;/li&gt; &#xA;     &lt;li&gt;✅ Set selection&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Prefabs&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Instantiate&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Open&lt;/li&gt; &#xA;     &lt;li&gt;✅ Modify (GameObject.Modify)&lt;/li&gt; &#xA;     &lt;li&gt;✅ Save&lt;/li&gt; &#xA;     &lt;li&gt;✅ Close&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Package&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;🔲 Get installed&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Install&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Remove&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Update&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;top&#34;&gt; &lt;h3&gt;Assets&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Find&lt;/li&gt; &#xA;     &lt;li&gt;✅ Refresh&lt;/li&gt; &#xA;     &lt;li&gt;✅ Read&lt;/li&gt; &#xA;     &lt;li&gt;✅ Modify&lt;/li&gt; &#xA;     &lt;li&gt;✅ Rename&lt;/li&gt; &#xA;     &lt;li&gt;✅ Delete&lt;/li&gt; &#xA;     &lt;li&gt;✅ Move&lt;/li&gt; &#xA;     &lt;li&gt;✅ Create folder&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Scene&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Save&lt;/li&gt; &#xA;     &lt;li&gt;✅ Load&lt;/li&gt; &#xA;     &lt;li&gt;✅ Unload&lt;/li&gt; &#xA;     &lt;li&gt;✅ Get Loaded&lt;/li&gt; &#xA;     &lt;li&gt;✅ Get hierarchy&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Search (editor)&lt;/li&gt; &#xA;     &lt;li&gt;🔲 Raycast (understand volume)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Materials&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Modify (Assets.Modify)&lt;/li&gt; &#xA;     &lt;li&gt;✅ Read (Assets.Read)&lt;/li&gt; &#xA;     &lt;li&gt;✅ Assign to a Component on a GameObject&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Shader&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ List All&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Scripts&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Read&lt;/li&gt; &#xA;     &lt;li&gt;✅ Update or Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Delete&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Scriptable Object&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Create&lt;/li&gt; &#xA;     &lt;li&gt;✅ Read&lt;/li&gt; &#xA;     &lt;li&gt;✅ Modify&lt;/li&gt; &#xA;     &lt;li&gt;✅ Remove&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Debug&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Read logs (console)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;h3&gt;Component&lt;/h3&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;✅ Get All&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openupm/openupm-cli#installation&#34;&gt;Install OpenUPM-CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open command line in Unity project folder&lt;/li&gt; &#xA; &lt;li&gt;Run the command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openupm add com.ivanmurzak.unity.mcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure your project path doesn&#39;t have a space symbol &#34; &#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;✅ &lt;code&gt;C:/MyProjects/Project&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;❌ &lt;code&gt;C:/My Projects/Project&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Open Unity project, go 👉 &lt;code&gt;Window/AI Connector (Unity-MCP)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/e8049620-6614-45f1-92d7-cc5d00a6b074&#34; alt=&#34;Unity_AI&#34; /&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install MCP client&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://www.cursor.com/&#34;&gt;Install Cursor&lt;/a&gt; (recommended)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://claude.ai/download&#34;&gt;Install Claude&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Sign-in into MCP client&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Configure&lt;/code&gt; at your MCP client.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/19f80179-c5b3-4e9c-bdf6-07edfb773018&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Restart your MCP client.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;code&gt;AI Connector&lt;/code&gt; is &#34;Connected&#34; or &#34;Connecting...&#34; after restart.&lt;/li&gt; &#xA; &lt;li&gt;Test AI connection in your Client (Cursor, Claude Desktop). Type any question or task into the chat. Something like:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Explain my scene hierarchy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Add custom &lt;code&gt;tool&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ It only works with MCP client that supports dynamic tool list update.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Unity-MCP is designed to support custom &lt;code&gt;tool&lt;/code&gt; development by project owner. MCP server takes data from Unity plugin and exposes it to a Client. So anyone in the MCP communication chain would receive the information about a new &lt;code&gt;tool&lt;/code&gt;. Which LLM may decide to call at some point.&lt;/p&gt; &#xA;&lt;p&gt;To add a custom &lt;code&gt;tool&lt;/code&gt; you need:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To have a class with attribute &lt;code&gt;McpPluginToolType&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To have a method in the class with attribute &lt;code&gt;McpPluginTool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[optional] Add &lt;code&gt;Description&lt;/code&gt; attribute to each method argument to let LLM to understand it.&lt;/li&gt; &#xA; &lt;li&gt;[optional] Use &lt;code&gt;string? optional = null&lt;/code&gt; properties with &lt;code&gt;?&lt;/code&gt; and default value to mark them as &lt;code&gt;optional&lt;/code&gt; for LLM.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Take a look that the line &lt;code&gt;MainThread.Instance.Run(() =&amp;gt;&lt;/code&gt; it allows to run the code in Main thread which is needed to interact with Unity API. If you don&#39;t need it and running the tool in background thread is fine for the tool, don&#39;t use Main thread for efficiency purpose.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[McpPluginToolType]&#xA;public class Tool_GameObject&#xA;{&#xA;    [McpPluginTool&#xA;    (&#xA;        &#34;MyCustomTask&#34;,&#xA;        Title = &#34;Create a new GameObject&#34;&#xA;    )]&#xA;    [Description(&#34;Explain here to LLM what is this, when it should be called.&#34;)]&#xA;    public string CustomTask&#xA;    (&#xA;        [Description(&#34;Explain to LLM what is this.&#34;)]&#xA;        string inputData&#xA;    )&#xA;    {&#xA;        // do anything in background thread&#xA;&#xA;        return MainThread.Instance.Run(() =&amp;gt;&#xA;        {&#xA;            // do something in main thread if needed&#xA;&#xA;            return $&#34;[Success] Operation completed.&#34;;&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Add custom in-game &lt;code&gt;tool&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ Not yet supported. The work is in progress&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Running PlayMode tests&lt;/h1&gt; &#xA;&lt;p&gt;To be able to run Play Mode tests via the TestRunner MCP tool, you should consider configuring Unity to &lt;strong&gt;not&lt;/strong&gt; perform a domain reload when entering Play Mode (&lt;code&gt;Edit -&amp;gt; Project Settings -&amp;gt; Editor -&amp;gt; Enter Play Mode Settings&lt;/code&gt; - set to &lt;code&gt;Reload Scene only&lt;/code&gt; or &lt;code&gt;Do not reload Domain or Scene&lt;/code&gt;). Otherwise, starting the Play Mode tests will interrupt the TestRunner MCP tool, leading to a cycle of tests restarting.&lt;/p&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to add a new &lt;code&gt;tool&lt;/code&gt; into the project.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the project.&lt;/li&gt; &#xA; &lt;li&gt;Clone the fork and open the resulting folder in Unity.&lt;/li&gt; &#xA; &lt;li&gt;Implement the new &lt;code&gt;tool&lt;/code&gt; in your forked repository.&lt;/li&gt; &#xA; &lt;li&gt;Create Pull Request into original &lt;a href=&#34;https://github.com/IvanMurzak/Unity-MCP&#34;&gt;Unity-MCP&lt;/a&gt; repository.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>