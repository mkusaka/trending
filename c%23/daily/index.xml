<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-23T01:32:42Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mpvnet-player/mpv.net</title>
    <updated>2023-05-23T01:32:42Z</updated>
    <id>tag:github.com,2023-05-23:/mpvnet-player/mpv.net</id>
    <link href="https://github.com/mpvnet-player/mpv.net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎞 mpv.net is a modern media player for Windows that works just like mpv.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/mpvnet.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr-closed/stax76/mpv.net&#34; alt=&#34;GitHub closed pull requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed/stax76/mpv.net&#34; alt=&#34;GitHub closed issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/stax76/mpv.net/total&#34; alt=&#34;GitHub All Releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/tag-date/stax76/mpv.net&#34; alt=&#34;GitHub tag (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/stax76/mpv.net&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🎞 mpv.net&lt;/h1&gt; &#xA;&lt;p&gt;mpv.net is a modern desktop media player for Windows based on the popular &lt;a href=&#34;https://mpv.io&#34;&gt;mpv&lt;/a&gt; player.&lt;/p&gt; &#xA;&lt;p&gt;mpv.net is designed to be mpv compatible, almost all mpv features are available because they are all contained in libmpv, this means the official &lt;a href=&#34;https://mpv.io/manual/master/&#34;&gt;mpv manual&lt;/a&gt; applies to mpv.net.&lt;/p&gt; &#xA;&lt;p&gt;mpv focuses on the usage of the command line and the terminal, mpv.net retains the ability to be used from the command line and the terminal and adds a modern Windows GUI on top of it.&lt;/p&gt; &#xA;&lt;h4&gt;Graphical User Interface&lt;/h4&gt; &#xA;&lt;p&gt;Modern GUI with customizable color themes.&lt;/p&gt; &#xA;&lt;h4&gt;Command Line Interface&lt;/h4&gt; &#xA;&lt;p&gt;mpv.net supports mpvs command line interface.&lt;/p&gt; &#xA;&lt;h4&gt;High quality video output&lt;/h4&gt; &#xA;&lt;p&gt;Video output that is capable of many features loved by videophiles, such as video scaling with popular high quality algorithms, color management, frame timing, interpolation, HDR, and more.&lt;/p&gt; &#xA;&lt;h4&gt;On Screen Controller&lt;/h4&gt; &#xA;&lt;p&gt;Play controls with a modern flat design.&lt;/p&gt; &#xA;&lt;h4&gt;GPU video decoding&lt;/h4&gt; &#xA;&lt;p&gt;Leverages the FFmpeg hwaccel APIs to support DXVA2 video decoding acceleration.&lt;/p&gt; &#xA;&lt;h4&gt;Active development&lt;/h4&gt; &#xA;&lt;p&gt;mpv.net is under active development.&lt;/p&gt; &#xA;&lt;h4&gt;Based on libmpv&lt;/h4&gt; &#xA;&lt;p&gt;mpv.net is based on libmpv which offers a straightforward C API that was designed from the ground up to make mpv usable as a library and facilitate easy integration into other applications. mpv is like VLC not based on DirectShow or Media Foundation.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/#features-that-mpv-and-mpvnet-have-in-common&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features that mpv and mpv.net have in common&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Lua and JavaScript Scripting&lt;/li&gt; &#xA; &lt;li&gt;Hundreds available user scripts make mpv the most feature rich desktop video player&lt;/li&gt; &#xA; &lt;li&gt;Simple config files that are easy to read and edit&lt;/li&gt; &#xA; &lt;li&gt;JSON IPC to control the player with a external programs&lt;/li&gt; &#xA; &lt;li&gt;On Screen Controler (OSC, play control buttons) with modern flat design&lt;/li&gt; &#xA; &lt;li&gt;Command Line Interface&lt;/li&gt; &#xA; &lt;li&gt;Started from a terminal status, error and debug output is printed on the terminal&lt;/li&gt; &#xA; &lt;li&gt;DXVA2 video decoding acceleration&lt;/li&gt; &#xA; &lt;li&gt;Video output capable of features loved by videophiles, such as video scaling with popular high quality algorithms, color management, frame timing, interpolation, HDR, and more&lt;/li&gt; &#xA; &lt;li&gt;Browser extensions to start mpv.net from the browser&lt;/li&gt; &#xA; &lt;li&gt;Fast seek performance&lt;/li&gt; &#xA; &lt;li&gt;Fast startup performance&lt;/li&gt; &#xA; &lt;li&gt;Usable as video player, audio player and image viewer with a wide range of supported formats&lt;/li&gt; &#xA; &lt;li&gt;Built-in decoders, no external codecs have to be installed&lt;/li&gt; &#xA; &lt;li&gt;Build-in media streaming (requires yt-dlp being installed)&lt;/li&gt; &#xA; &lt;li&gt;External audio and subtitle files can be loaded manually or automatically&lt;/li&gt; &#xA; &lt;li&gt;Screenshot feature&lt;/li&gt; &#xA; &lt;li&gt;Watch later feature to save the video position&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features exclusiv to mpv.net&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very high degree of mpv compatibility, almost all mpv features are available&lt;/li&gt; &#xA; &lt;li&gt;Modern graphical user interface with customizable color themes&lt;/li&gt; &#xA; &lt;li&gt;Customizable context menu defined in the same file as the key bindings&lt;/li&gt; &#xA; &lt;li&gt;Searchable config editor&lt;/li&gt; &#xA; &lt;li&gt;Searchable input (shorcut keys) editor&lt;/li&gt; &#xA; &lt;li&gt;C# and PowerShell Scripting&lt;/li&gt; &#xA; &lt;li&gt;Global keyboard shortcuts&lt;/li&gt; &#xA; &lt;li&gt;Command palette to quickly and easily find commands and keys&lt;/li&gt; &#xA; &lt;li&gt;Extension API for .NET languages (C#, VB.NET and F#)&lt;/li&gt; &#xA; &lt;li&gt;Portable, MS Store or WinGet download and installation&lt;/li&gt; &#xA; &lt;li&gt;File history feature to log time and filename&lt;/li&gt; &#xA; &lt;li&gt;Files can be enqueued from File Explorer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/Manual.md#support&#34;&gt;Support&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/Manual.md#support&#34;&gt;Support section of the manual.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/Manual.md#download&#34;&gt;Download&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/Manual.md#download&#34;&gt;Download section of the manual.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/Manual.md&#34;&gt;Manual&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/Manual.md&#34;&gt;The mpv.net documentation.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h4&gt;Main Window&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/Main.webp&#34; alt=&#34;Main Window&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Context Menu&lt;/h4&gt; &#xA;&lt;p&gt;Context menu using dark mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/Menu.jpg&#34; alt=&#34;Context Menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Config Editor&lt;/h4&gt; &#xA;&lt;p&gt;Searchable config editor as alternative to edit the conf file manually.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/ConfEditor.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Terminal&lt;/h4&gt; &#xA;&lt;p&gt;OSD console and status printed on the terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/Terminal.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Input Editor&lt;/h4&gt; &#xA;&lt;p&gt;Searchable key and mouse binding editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/InputEditor.webp&#34; alt=&#34;Input Editor&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Command Palette&lt;/h4&gt; &#xA;&lt;p&gt;Command Palette to easily find commands and shortcut keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/CommandPalette.webp&#34; alt=&#34;Command Palette&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Playlist&lt;/h4&gt; &#xA;&lt;p&gt;The command palette based playlist showing my favorite artist of the stax record label.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mpvnet-player/mpv.net/master/docs/img/Playlist.png&#34; alt=&#34;Playlist&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;List of my apps&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stax76.github.io/frankskare&#34;&gt;https://stax76.github.io/frankskare&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/roslyn-analyzers</title>
    <updated>2023-05-23T01:32:42Z</updated>
    <id>tag:github.com,2023-05-23:/dotnet/roslyn-analyzers</id>
    <link href="https://github.com/dotnet/roslyn-analyzers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Roslyn Analyzers&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows Debug&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows Release&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Ubuntu Debug&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Ubuntu Release&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;main&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=457&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/roslyn-analyzers/roslyn-analyzers-CI?branchName=main&amp;amp;jobName=Windows&amp;amp;configuration=Windows%20Debug&amp;amp;label=build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/dotnet/roslyn-analyzers&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/dotnet/roslyn-analyzers/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=457&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/roslyn-analyzers/roslyn-analyzers-CI?branchName=main&amp;amp;jobName=Windows&amp;amp;configuration=Windows%20Release&amp;amp;label=build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=457&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/roslyn-analyzers/roslyn-analyzers-CI?branchName=main&amp;amp;jobName=Ubuntu&amp;amp;configuration=Ubuntu%20Debug&amp;amp;label=build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=457&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/roslyn-analyzers/roslyn-analyzers-CI?branchName=main&amp;amp;jobName=Ubuntu&amp;amp;configuration=Ubuntu%20Release&amp;amp;label=build&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;What is Roslyn?&lt;/h2&gt; &#xA;&lt;p&gt;Roslyn is the compiler platform for .NET. It consists of the compiler itself and a powerful set of APIs to interact with the compiler. The Roslyn platform is hosted at &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;github.com/dotnet/roslyn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What are Roslyn Analyzers?&lt;/h2&gt; &#xA;&lt;p&gt;Roslyn analyzers analyze your code for style, quality and maintainability, design and other issues. The documentation for Roslyn Analyzers can be found at &lt;a href=&#34;https://learn.microsoft.com/dotnet/fundamentals/code-analysis/overview&#34;&gt;learn.microsoft.com/dotnet/fundamentals/code-analysis/overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft created a set of analyzers called &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers&#34;&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/a&gt; that contains the most important &#34;FxCop&#34; rules from static code analysis, converted to Roslyn analyzers, in addition to more analyzers. These analyzers check your code for security, performance, and design issues, among others. The documentation for .NET analyzers can be found &lt;a href=&#34;https://learn.microsoft.com/dotnet/fundamentals/code-analysis/overview#code-quality-analysis&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Main analyzers&lt;/h2&gt; &#xA;&lt;p&gt;Recently the set of analyzer packages produced by this repository have been consolidated. The following table summarizes this information:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NuGet Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Summary&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.NetAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔️ Primary analyzer package for this repo. Included default for .NET 5+. For earlier targets &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftcodeanalysisnetanalyzers&#34;&gt;read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.BannedApiAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.BannedApiAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔️ Allows banning use of arbitrary code. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftcodeanalysisbannedapianalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.CodeAnalysis.PublicApiAnalyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.PublicApiAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.PublicApiAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔️ Helps library authors monitor changes to their public APIs. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftcodeanalysispublicapianalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.CodeAnalysis.Analyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⚠️ Intended projects providing analyzers and code fixes. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftcodeanalysisanalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Roslyn.Diagnostics.Analyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Roslyn.Diagnostics.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⚠️ Rules specific to the Roslyn project, not intended for general consumption. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#roslyndiagnosticsanalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.FxCopAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⛔ Use &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt; instead. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftcodeanalysisfxcopanalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.CodeQuality.Analyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeQuality.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeQuality.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⛔ Use &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt; instead. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftcodequalityanalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.NetCore.Analyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.NetCore.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.NetCore.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⛔ Use &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt; instead. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftnetcoreanalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microsoft.NetFramework.Analyzers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.NetFramework.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.NetFramework.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⛔ Use &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt; instead. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/#microsoftnetcoreanalyzers&#34;&gt;Read more&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.NetAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest pre-release version (.NET8 analyzers):&lt;/em&gt; &lt;a href=&#34;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet8/NuGet/Microsoft.CodeAnalysis.NetAnalyzers/versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the &lt;strong&gt;primary analyzer package&lt;/strong&gt; for this repo that contains all &lt;strong&gt;the .NET code analysis rules (CAxxxx)&lt;/strong&gt; that are built into the .NET SDK starting .NET5 release. The documentation for CA rules can be found at &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/code-analysis-for-managed-code-warnings&#34;&gt;learn.microsoft.com/visualstudio/code-quality/code-analysis-for-managed-code-warnings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You do not need to manually install this NuGet package to your project if you are using .NET5 SDK or later. These analyzers are enabled by default for projects targeting .NET5 or later. For projects targeting earlier .NET frameworks, you can enable them in your MSBuild project file by setting one of the following properties:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;EnableNETAnalyzers&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&#xA;  &amp;lt;EnableNETAnalyzers&amp;gt;true&amp;lt;/EnableNETAnalyzers&amp;gt;&#xA;&amp;lt;/PropertyGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;AnalysisLevel&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&#xA;  &amp;lt;AnalysisLevel&amp;gt;latest&amp;lt;/AnalysisLevel&amp;gt;&#xA;&amp;lt;/PropertyGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Starting version &lt;code&gt;3.3.2&lt;/code&gt;, &lt;code&gt;Microsoft.CodeAnalysis.FxCopAnalyzers&lt;/code&gt; has been &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt;. Documentation to migrate from FxCopAnalyzers to NetAnalyzers is available &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.FxCopAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a migration analyzer package for existing binary FxCop users. It contains all &lt;strong&gt;the ported FxCop code analysis rules (CAxxxx)&lt;/strong&gt;. It&#39;s recommended to use Microsoft.CodeAnalysis.NetAnalyzers instead. The documentation for that can be found at &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/install-net-analyzers&#34;&gt;learn.microsoft.com/visualstudio/code-quality/install-net-analyzers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The documentation for all the ported and unported FxCop rules can be found at &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/fxcop-rule-port-status&#34;&gt;learn.microsoft.com/visualstudio/code-quality/fxcop-rule-port-status&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This analyzer package contains all the ported FxCop rules that are applicable for both &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; and &lt;em&gt;Desktop .NetFramework&lt;/em&gt; projects. You &lt;strong&gt;do not need to install any separate analyzer package from this repo to get target-framework specific FxCop rules&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;The following are subpackages or NuGet dependencies that are automatically installed when you install the Microsoft.CodeAnalysis.FxCopAnalyzers package:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Starting version &lt;code&gt;3.3.2&lt;/code&gt;, &lt;code&gt;Microsoft.CodeQuality.Analyzers&lt;/code&gt;, &lt;code&gt;Microsoft.NetCore.Analyzers&lt;/code&gt; and &lt;code&gt;Microsoft.NetFramework.Analyzers&lt;/code&gt; have also been &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt;. Documentation to migrate to NetAnalyzers is available &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Microsoft.CodeQuality.Analyzers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeQuality.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeQuality.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains common code quality improvement rules that are not specific to usage of any particular API. For example, &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/ca1801-review-unused-parameters&#34;&gt;CA1801&lt;/a&gt; (ReviewUnusedParameters) flags parameters that are unused and is part of this package.&lt;/p&gt; &#xA;&lt;h4&gt;Microsoft.NetCore.Analyzers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.NetCore.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.NetCore.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains rules for correct usage of APIs that are present in &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; framework libraries. For example, &lt;a href=&#34;https://learn.microsoft.com/visualstudio/code-quality/ca1309-use-ordinal-stringcomparison&#34;&gt;CA1309&lt;/a&gt; (UseOrdinalStringComparison) flags usages of string compare APIs that don&#39;t specify a &lt;code&gt;StringComparison&lt;/code&gt; argument. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/docs/NetCore_GettingStarted.md&#34;&gt;Getting started with NetCore Analyzers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This analyzer package is applicable for both &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; and &lt;em&gt;Desktop .NetFramework&lt;/em&gt; projects. If the API whose usage is being checked exists only in &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; libraries, then the analyzer will bail out silently for &lt;em&gt;Desktop .NetFramework&lt;/em&gt; projects. Otherwise, if the API exists in both &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; and &lt;em&gt;Desktop .NetFramework&lt;/em&gt; libraries, the analyzer will run correctly for both &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; and &lt;em&gt;Desktop .NetFramework&lt;/em&gt; projects.&lt;/p&gt; &#xA;&lt;h4&gt;Microsoft.NetFramework.Analyzers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.NetFramework.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.NetFramework.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains rules for correct usage of APIs that are present only in &lt;em&gt;Desktop .NetFramework&lt;/em&gt; libraries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The analyzers in this package will silently bail out if installed on a &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; project that do not have the underlying API whose usage is being checked. If future versions of &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; libraries include these APIs, the analyzers will automatically light up on &lt;em&gt;.NetCore/.NetStandard&lt;/em&gt; projects that target these libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Other Analyzer Packages&lt;/h2&gt; &#xA;&lt;h3&gt;Microsoft.CodeAnalysis.Analyzers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest pre-release version:&lt;/em&gt; &lt;a href=&#34;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet7/NuGet/Microsoft.CodeAnalysis.Analyzers/versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains rules for correct usage of APIs from the &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis&#34;&gt;Microsoft.CodeAnalysis&lt;/a&gt; NuGet package, i.e. .NET Compiler Platform (&#34;Roslyn&#34;) APIs. These are primarily aimed towards helping authors of diagnostic analyzers and code fix providers to invoke the Microsoft.CodeAnalysis APIs in a recommended manner. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/src/Microsoft.CodeAnalysis.Analyzers/Microsoft.CodeAnalysis.Analyzers.md&#34;&gt;More info about rules in this package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Roslyn.Diagnostics.Analyzers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Roslyn.Diagnostics.Analyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest pre-release version:&lt;/em&gt; &lt;a href=&#34;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet7/NuGet/Roslyn.Diagnostics.Analyzers/versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains rules that are very specific to the .NET Compiler Platform (&#34;Roslyn&#34;) project, i.e. &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;dotnet/roslyn&lt;/a&gt; repo. This analyzer package is &lt;em&gt;not intended for general consumption&lt;/em&gt; outside the Roslyn repo. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/src/Roslyn.Diagnostics.Analyzers/Roslyn.Diagnostics.Analyzers.md&#34;&gt;More info about rules in this package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.BannedApiAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.BannedApiAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest pre-release version:&lt;/em&gt; &lt;a href=&#34;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet7/NuGet/Microsoft.CodeAnalysis.BannedApiAnalyzers/versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains customizable rules for identifying references to banned APIs. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/Microsoft.CodeAnalysis.BannedApiAnalyzers.md&#34;&gt;More info about rules in this package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instructions on using this analyzer, see &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md&#34;&gt;Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft.CodeAnalysis.PublicApiAnalyzers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest stable version:&lt;/em&gt; &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.PublicApiAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.PublicApiAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest pre-release version:&lt;/em&gt; &lt;a href=&#34;https://dev.azure.com/dnceng/public/_artifacts/feed/dotnet7/NuGet/Microsoft.CodeAnalysis.PublicApiAnalyzers/versions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package contains rules to help library authors monitoring change to their public APIs. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/src/PublicApiAnalyzers/Microsoft.CodeAnalysis.PublicApiAnalyzers.md&#34;&gt;More info about rules in this package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For instructions on using this analyzer, see &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md&#34;&gt;Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MetaCompilation (prototype)&lt;/h3&gt; &#xA;&lt;p&gt;Created by summer 2015 interns &lt;a href=&#34;https://github.com/zoepetard&#34;&gt;Zoë Petard&lt;/a&gt;, &lt;a href=&#34;https://github.com/jepetty&#34;&gt;Jessica Petty&lt;/a&gt;, and &lt;a href=&#34;https://github.com/daking2014&#34;&gt;Daniel King&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The MetaCompilation Analyzer is an analyzer that functions as a tutorial to teach users how to write an analyzer. It uses diagnostics and code fixes to guide the user through the various steps required to create a simple analyzer. It is designed for novice analyzer developers who have some previous programming experience.&lt;/p&gt; &#xA;&lt;p&gt;For instructions on using this tutorial, see &lt;a href=&#34;https://github.com/dotnet/roslyn-analyzers/raw/main/src/MetaCompilation.Analyzers/Core/ReadMe.md#instructions&#34;&gt;Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 or later, with at least the following workloads: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;.NET desktop development&lt;/li&gt; &#xA;   &lt;li&gt;.NET Core cross-platform development&lt;/li&gt; &#xA;   &lt;li&gt;Visual Studio extension development&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Install .NET SDK version specified in &lt;code&gt;.\global.json&lt;/code&gt; with &lt;code&gt;&#34;dotnet&#34;:&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently, the repository requires the .NET 8 SDK, for which the installer isn&#39;t yet published in &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-core&#34;&gt;dotnet.microsoft.com&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;To install the .NET 8 SDK, see &lt;a href=&#34;https://github.com/dotnet/installer#table&#34;&gt;dotnet/installer&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a command prompt and go to the directory of the Roslyn Analyzer Repo&lt;/li&gt; &#xA; &lt;li&gt;Run the restore and build command: &lt;code&gt;build.cmd&lt;/code&gt;(in the command prompt) or &lt;code&gt;.\build.cmd&lt;/code&gt;(in PowerShell).&lt;/li&gt; &#xA; &lt;li&gt;Execute tests: &lt;code&gt;test.cmd&lt;/code&gt; (in the command prompt) or &lt;code&gt;.\test.cmd&lt;/code&gt; (in PowerShell).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Submitting Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Prior to submitting a pull request, ensure the build and all tests pass using using steps 4 and 5 above.&lt;/p&gt; &#xA;&lt;h2&gt;Guidelines for contributing a new Code Analysis (CA) rule to the repo&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main//GuidelinesForNewRules.md&#34;&gt;GuidelinesForNewRules.md&lt;/a&gt; for contributing a new Code Analysis rule to the repo.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning Scheme for Analyzer Packages&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/roslyn-analyzers/main//VERSIONING.md&#34;&gt;VERSIONING.md&lt;/a&gt; for the versioning scheme for all analyzer packages built out of this repo.&lt;/p&gt; &#xA;&lt;h2&gt;Recommended version of Analyzer Packages&lt;/h2&gt; &#xA;&lt;p&gt;Recommended Analyzer Package Version: &lt;sub&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Microsoft.CodeAnalysis.NetAnalyzers.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Required Visual Studio Version: &lt;strong&gt;Visual Studio 2019 16.9 RTW or later&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Required .NET SDK Version: &lt;strong&gt;.NET 5.0 SDK or later&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The documentation for .NET SDK Analyzers can be found &lt;a href=&#34;https://learn.microsoft.com/dotnet/fundamentals/code-analysis/overview#code-quality-analysis&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>builtbybel/JunkCtrl</title>
    <updated>2023-05-23T01:32:42Z</updated>
    <id>tag:github.com,2023-05-23:/builtbybel/JunkCtrl</id>
    <link href="https://github.com/builtbybel/JunkCtrl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Declutter Windows 11&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JunkCtrl&lt;/h1&gt; &#xA;&lt;p&gt;Take ctrl (Catarl or Control) over the junk that ends up on your Windows 11 system.&lt;/p&gt; &#xA;&lt;h2&gt;About JunkCtrl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Its&#39; here.&lt;/strong&gt; &lt;strong&gt;Its mission: removing junk, and it&#39;s really good at it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This app can greatly help declutter beautiful Windows 11. Windows 11 stock apps eat a lot of your disk space. Some are helpful, others feel as bloatware. This app can automatically scan your system for junk apps and remove it in the same step. You can also take the manual route and use an assistant. Before removal, the apps are moved to the recycle bin.&lt;/p&gt; &#xA;&lt;p&gt;This should be one of the safest methods to remove the correct bloatware and avoid accidentally deleting the wrong app. (Please use this one ONLY for Windows 11. For Windows 10, &lt;a href=&#34;https://github.com/builtbybel/bloatbox&#34;&gt;BloatBox&lt;/a&gt; is still available. This is also the replacement app for Bloatbox)&lt;/p&gt; &#xA;&lt;p&gt;You might think it&#39;s redundant since we have &lt;a href=&#34;https://github.com/builtbybel/BloatyNosy&#34;&gt;BloatyNosy&lt;/a&gt; on W11 which features also an &#34;Debloater&#34;. It&#39;s not entirely true. This one goes further and could potentially take on more in the future.&lt;/p&gt; &#xA;&lt;p&gt;Perhaps a part of &lt;a href=&#34;https://github.com/builtbybel/CleanmgrPlus&#34;&gt;Cleanmgr+&lt;/a&gt; could be brought into Junkctrl. I never managed to fully migrate Cleanmgr+ to .Net_&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The only thing missing for Junkctrl now is an app icon. If you have any suggestions, please let me know.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;If you know potentially dangerous apps (fake, spyware, stolen and resold code) in MS Store please feel free to share them &lt;a href=&#34;https://github.com/builtbybel/JunkCtrl/issues/7&#34;&gt;here&lt;/a&gt; Attempting to provide a small signature file that exposes this junk. It is definitely there.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Get it &lt;a href=&#34;https://github.com/builtbybel/JunkCtrl/releases&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>