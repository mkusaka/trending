<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-26T01:30:55Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/chat-copilot</title>
    <updated>2023-07-26T01:30:55Z</updated>
    <id>tag:github.com,2023-07-26:/microsoft/chat-copilot</id>
    <link href="https://github.com/microsoft/chat-copilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Copilot Chat Sample Application&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This sample is for educational purposes only and is not recommended for production deployments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;About Chat Copilot&lt;/h1&gt; &#xA;&lt;p&gt;This sample allows you to build your own integrated large language model chat copilot that is powered by &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;. This is an enriched intelligence app, with multiple dynamic components including command messages, user intent, and memories.&lt;/p&gt; &#xA;&lt;p&gt;The chat prompt and response will evolve as the conversation between the user and the application proceeds. This chat experience is orchestrated with Semantic Kernel and a Copilot Chat skill containing numerous functions that work together to construct each response.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/images/UI-Sample.png&#34; alt=&#34;UI Sample&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Automated Setup and Local Deployment&lt;/h1&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/scripts/README.md&#34;&gt;./scripts/README.md&lt;/a&gt; for local configuration and deployment.&lt;/p&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/deploy/README.md&#34;&gt;./deploy/README.md&lt;/a&gt; for Azure configuration and deployment.&lt;/p&gt; &#xA;&lt;h1&gt;Manual Setup and Local Deployment&lt;/h1&gt; &#xA;&lt;h2&gt;Configure your environment&lt;/h2&gt; &#xA;&lt;p&gt;Before you get started, make sure you have the following requirements in place:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET 6.0 SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/lang/en/docs/install&#34;&gt;Yarn&lt;/a&gt; - After installation, run &lt;code&gt;yarn --version&lt;/code&gt; in a terminal window to ensure you are running v1.22.19.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/oai/access&#34;&gt;Azure OpenAI&lt;/a&gt; resource or an account with &lt;a href=&#34;https://platform.openai.com&#34;&gt;OpenAI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/Download&#34;&gt;Visual Studio Code&lt;/a&gt; &lt;strong&gt;(Optional)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Start the WebApi Backend Server&lt;/h2&gt; &#xA;&lt;p&gt;The sample uses two applications, a front-end web UI, and a back-end API server. First, letâ€™s set up and verify the back-end API server is running.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate and trust a localhost developer certificate. Open a terminal and run:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For Windows and Mac run &lt;code&gt;dotnet dev-certs https --trust&lt;/code&gt; and select &lt;code&gt;Yes&lt;/code&gt; when asked if you want to install this certificate.&lt;/li&gt; &#xA;   &lt;li&gt;For Linux run &lt;code&gt;dotnet dev-certs https&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended you close all instances of your web browser after installing the developer certificates.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to &lt;code&gt;webapi/&lt;/code&gt; and open &lt;code&gt;appsettings.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Update the &lt;code&gt;AIService&lt;/code&gt; configuration section:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Update &lt;code&gt;Type&lt;/code&gt; to the AI service you will be using (i.e., &lt;code&gt;AzureOpenAI&lt;/code&gt; or &lt;code&gt;OpenAI&lt;/code&gt;).&lt;/li&gt; &#xA;     &lt;li&gt;If your are using Azure OpenAI, update &lt;code&gt;Endpoint&lt;/code&gt; to your Azure OpenAI resource Endpoint address (e.g., &lt;code&gt;http://contoso.openai.azure.com&lt;/code&gt;). &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;If you are using OpenAI, this property will be ignored.&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Set your Azure OpenAI or OpenAI key by opening a terminal in the webapi project directory and using &lt;code&gt;dotnet user-secrets&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd webapi&#xA;dotnet user-secrets set &#34;AIService:Key&#34; &#34;MY_AZUREOPENAI_OR_OPENAI_KEY&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; Update &lt;code&gt;Models&lt;/code&gt; to the Azure OpenAI deployment or OpenAI models you want to use. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;For &lt;code&gt;Completion&lt;/code&gt; and &lt;code&gt;Planner&lt;/code&gt;, CopilotChat is optimized for Chat completion models, such as gpt-3.5-turbo and gpt-4. &#xA;        &lt;blockquote&gt; &#xA;         &lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; gpt-3.5-turbo is normally labelled as &#34;&lt;code&gt;gpt-35-turbo&lt;/code&gt;&#34; (no period) in Azure OpenAI and &#34;&lt;code&gt;gpt-3.5-turbo&lt;/code&gt;&#34; (with a period) in OpenAI.&lt;/p&gt; &#xA;        &lt;/blockquote&gt; &lt;/li&gt; &#xA;       &lt;li&gt;For &lt;code&gt;Embedding&lt;/code&gt;, &lt;code&gt;text-embedding-ada-002&lt;/code&gt; is sufficient and cost-effective for generating embeddings.&lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; If you are using Azure OpenAI, please use &lt;a href=&#34;https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource&#34;&gt;deployment names&lt;/a&gt;. If you are using OpenAI, please use &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;model names&lt;/a&gt;.&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;(Optional)&lt;/strong&gt; To enable speech-to-text for chat input, update the &lt;code&gt;AzureSpeech&lt;/code&gt; configuration section:&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;If you have not already, you will need to &lt;a href=&#34;https://ms.portal.azure.com/#create/Microsoft.CognitiveServicesSpeechServices&#34;&gt;create an Azure Speech resource&lt;/a&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/webapi/appsettings.json&#34;&gt;./webapi/appsettings.json&lt;/a&gt; for more details).&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Update &lt;code&gt;Region&lt;/code&gt; to whichever region is appropriate for your speech sdk instance.&lt;/li&gt; &#xA;     &lt;li&gt;Set your Azure speech key by opening a terminal in the webapi project directory and setting a dotnet user-secrets value for &lt;code&gt;AzureSpeech:Key&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet user-secrets set &#34;AzureSpeech:Key&#34; &#34;MY_AZURE_SPEECH_KEY&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and run the back-end API server&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Open a terminal and navigate to &lt;code&gt;webapi/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run &lt;code&gt;dotnet build&lt;/code&gt; to build the project.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run &lt;code&gt;dotnet run&lt;/code&gt; to start the server.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Verify the back-end server is responding, open a web browser and navigate to &lt;code&gt;https://localhost:40443/healthz&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;The first time accessing the probe you may get a warning saying that there is a problem with website&#39;s certificate. Select the option to accept/continue - this is expected when running a service on &lt;code&gt;localhost&lt;/code&gt; It is important to do this, as your browser may need to accept the certificate before allowing the frontend to communicate with the backend.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You may also need to acknowledge the Windows Defender Firewall, and allow the app to communicate over private or public networks as appropriate.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Start the WebApp FrontEnd application&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build and start the front-end application&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;You will need an Azure Active Directory (AAD) application registration.&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;For more details on creating an application registration, go &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Select &lt;code&gt;Single-page application (SPA)&lt;/code&gt; as platform type, and set the Web redirect URI to &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Select &lt;code&gt;Accounts in any organizational directory and personal Microsoft Accounts&lt;/code&gt; as supported account types for this sample.&lt;/li&gt; &#xA;     &lt;li&gt;Make a note of the &lt;code&gt;Application (client) ID&lt;/code&gt; from the Azure Portal, we will use of it later.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Open a terminal and navigate to &lt;code&gt;webapp/&lt;/code&gt; Copy &lt;code&gt;.env.example&lt;/code&gt; into a new file &lt;code&gt;.env&lt;/code&gt; and update the &lt;code&gt;REACT_APP_AAD_CLIENT_ID&lt;/code&gt; with the AAD application (Client) ID created above. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REACT_APP_BACKEND_URI=https://localhost:40443/&#xA;REACT_APP_AAD_CLIENT_ID={Your Application (client) ID}&#xA;REACT_APP_AAD_AUTHORITY=https://login.microsoftonline.com/common&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;For more detail on AAD authorities, see &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/develop/msal-client-application-configuration#authority&#34;&gt;Client Application Configuration Authorities&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;code&gt;REACT_APP_SK_API_KEY&lt;/code&gt; is only required if you&#39;re using an Semantic Kernel service deployed to Azure. See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/deploy/README.md#authorization&#34;&gt;Authorization section of Deploying Semantic Kernel to Azure in a web app service&lt;/a&gt; for more details and instruction on how to find your API key.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REACT_APP_SK_API_KEY={Your API Key, should be the same as Authorization:ApiKey from appsettings.json}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;To build and run the front-end application, open a terminal and navigate to &lt;code&gt;webapp/&lt;/code&gt; if not already, then run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;To run the WebApp with HTTPs, see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/webapp/README.md#how-to-use-https-for-local-development&#34;&gt;How to use HTTPS for local development&lt;/a&gt;.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;With the back end and front end running, your web browser should automatically launch and navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;The first time running the front-end application may take a minute or so to start.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Sign in with a Microsoft personal account or a &#34;Work or School&#34; account.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Consent permission for the application to read your profile information (i.e., your name).&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;If you you experience any errors or issues, consult the troubleshooting section below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have fun!&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each chat interaction will call Azure OpenAI/OpenAI which will use tokens that you may be billed for.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;h2&gt;1. Unable to load chats. Details: interaction_in_progress: Interaction is currently in progress.&lt;/h2&gt; &#xA;&lt;p&gt;The WebApp can display this error when the application is configured for an active directory tenant, (e.g., personal/MSA accounts) and the browser attempts to use single sign-on with an account from another tenant (e.g., work or school account). Either user a private/incognito browser tab or clear your browser credentials/cookies.&lt;/p&gt; &#xA;&lt;h2&gt;2. Issues using text completion models, such as &lt;code&gt;text-davinci-003&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;CopilotChat supports chat completion models, such as &lt;code&gt;gpt-3.5-*&lt;/code&gt; and &lt;code&gt;gpt-4-*&lt;/code&gt;. See &lt;a href=&#34;https://platform.openai.com/docs/models/model-endpoint-compatibility&#34;&gt;OpenAI&#39;s model compatibility&lt;/a&gt; for the complete list of current models supporting chat completions.&lt;/p&gt; &#xA;&lt;h2&gt;3. Localhost SSL certificate errors / CORS errors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/images/Cert-Issue.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are stopped at an error message similar to the one above, your browser may be blocking the front-end access to the back end while waiting for your permission to connect. To resolve this, try the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Confirm the backend service is running by opening a web browser, and navigating to &lt;code&gt;https://localhost:40443/healthz&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should see a confirmation message: &lt;code&gt;Healthy&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If your browser asks you to acknowledge the risks of visiting an insecure website, you must acknowledge the message before the front end will be allowed to connect to the back-end server. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Acknowledge, continue, and navigate until you see the message &lt;code&gt;Healthy&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; or refresh the page to use the Chat Copilot application.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;4. Have Yarn version 2.x or 3.x&lt;/h2&gt; &#xA;&lt;p&gt;The webapp uses packages that are only supported by classic Yarn (v1.x). If you have Yarn v2.x+, run the following commands in your preferred shell to flip Yarn to the classic version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g yarn&#xA;yarn set version classic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can confirm the active Yarn version by running &lt;code&gt;yarn --version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Additional resources&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/importdocument/README.md&#34;&gt;Import Document Application&lt;/a&gt;: Import a document to the memory store.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>