<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:29:25Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mayuki/Cocona</title>
    <updated>2024-12-31T01:29:25Z</updated>
    <id>tag:github.com,2024-12-31:/mayuki/Cocona</id>
    <link href="https://github.com/mayuki/Cocona" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Micro-framework for .NET console application. Cocona makes it easy and fast to build console applications on .NET.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/docs/assets/logo.svg?sanitize=true&#34; alt=&#34;Cocona&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Micro-framework for .NET &lt;strong&gt;Co&lt;/strong&gt;re &lt;strong&gt;con&lt;/strong&gt;sole &lt;strong&gt;a&lt;/strong&gt;pplication. Cocona makes it easy and fast to build console applications on .NET.üöÄ&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/misuzilla/Cocona/_build/latest?definitionId=18&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/misuzilla/Cocona/_apis/build/status/Cocona?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Cocona&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Cocona?label=NuGet%3A%20Cocona&#34; alt=&#34;NuGet Package: Cocona&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Cocona.Lite&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Cocona.Lite?label=NuGet%3A%20Cocona.Lite&#34; alt=&#34;NuGet Package: Cocona.Lite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;‚è± Create a console application with Cocona in seconds.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CoconaApp.Run((string? name, bool hey) =&amp;gt;&#xA;    Console.WriteLine($&#34;{(hey ? &#34;Hey&#34; :&#34;Hello&#34;)} {(name ?? &#34;Guest&#34;)}!&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/docs/assets/intro-in-seconds.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üöÄ &lt;strong&gt;Make it easy to build console applications on .NET.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ASP.NET Core-like Minimal API&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;public&lt;/code&gt; method as a command&lt;/li&gt; &#xA;   &lt;li&gt;Provides ASP.NET Core MVC-like development experience to console application development.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚ú® &lt;strong&gt;Command-line option semantics like UNIX tools standard. (&lt;code&gt;getopt&lt;/code&gt;/&lt;code&gt;getopt_long&lt;/code&gt; like options)&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your app can handle both &lt;code&gt;-rf /&lt;/code&gt; and &lt;code&gt;-r -f /&lt;/code&gt; :-)&lt;/li&gt; &#xA;   &lt;li&gt;Support single command and multiple commands style &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;myapp --foo --bar -n arg0 &#34;arg1&#34;&lt;/code&gt; (e.g. &lt;code&gt;dir&lt;/code&gt;, &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt; ...)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;myapp server -m &#34;Hello world!&#34;&lt;/code&gt; (e.g. &lt;code&gt;dotnet&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;kubectl&lt;/code&gt; ...)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚ùì &lt;strong&gt;Built-in help documentation support.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You want to see a help message; you type &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Built-in similar commands suggestion&lt;/li&gt; &#xA;   &lt;li&gt;Shell command-line completion support for &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üõ† &lt;strong&gt;Highly modulable/customizable CLI framework.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cocona built on top of &lt;code&gt;Microsoft.Extensions.*&lt;/code&gt; framework. Cocona natively supports Logging, DI, Configuration and ConsoleLifetime.&lt;/li&gt; &#xA;   &lt;li&gt;Don&#39;t you need &lt;code&gt;Microsoft.Extensions.*&lt;/code&gt;? &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#performance--coconalite&#34;&gt;then you can use a lightweight version of Cocona (named Cocona.Lite)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples&#34;&gt;You can find sample code for various features.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#command-line-handling-basics&#34;&gt;Command-line handling basics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#command&#34;&gt;Command&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#arguments&#34;&gt;Arguments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#sub-commands&#34;&gt;Sub-commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#option-like-commands&#34;&gt;Option-like commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#cocona-in-action&#34;&gt;Cocona in action&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#parameter-set&#34;&gt;Parameter set&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#exit-code&#34;&gt;Exit code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#validation&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#shutdown-event-handling&#34;&gt;Shutdown event handling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#command-filter&#34;&gt;Command filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#dependency-injection&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#shell-command-line-completion&#34;&gt;Shell command-line completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#performance--coconalite&#34;&gt;Performance &amp;amp; Cocona.Lite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#advanced&#34;&gt;Advanced&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#localization&#34;&gt;Localization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#hide-command-from-help&#34;&gt;Hide command from help&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#help-customization&#34;&gt;Help customization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#commandmethodforwardedto-attribute&#34;&gt;CommandMethodForwardedTo attribute&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#ignoreunknownoptions-attribute&#34;&gt;IgnoreUnknownOptions attribute&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#generichost-integration&#34;&gt;GenericHost integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#related-projects&#34;&gt;Related projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install NuGet package from NuGet.org&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotnet add package Cocona&#xA;&#xA;# A lightweight version is also available if you prefer less dependency.&#xA;$ dotnet add package Cocona.Lite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET 6 (Required to use Minimal API)&lt;/li&gt; &#xA; &lt;li&gt;.NET 5&lt;/li&gt; &#xA; &lt;li&gt;.NET Standard 2.0, 2.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Cocona;&#xA;CoconaApp.Run((string name) =&amp;gt;&#xA;{&#xA;    Console.WriteLine($&#34;Hello {name}&#34;);&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Cocona;&#xA;class Program&#xA;{&#xA;    static void Main(string[] args)&#xA;    {&#xA;        // Cocona parses command-line and executes a command.&#xA;        CoconaApp.Run&amp;lt;Program&amp;gt;(args);&#xA;    }&#xA;&#xA;    // public method as a command ‚Ñ¢&#xA;    public void Hello(string name)&#xA;    {&#xA;        Console.WriteLine($&#34;Hello {name}&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Try to run!&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotnet run&#xA;Usage: ConsoleAppSample [--name &amp;lt;String&amp;gt;]&#xA;&#xA;Options:&#xA;  --name &amp;lt;String&amp;gt;    (Required)&#xA;  -h, --help         Show help message&#xA;  --version          Show version&#xA;&#xA;$ dotnet run -- --name Cocona&#xA;Hello Cocona&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extra: Publish the application as a single-file executable&lt;/h3&gt; &#xA;&lt;p&gt;If your application runs on .NET Core 3.0 or later, you can publish the app as a single-file executable. (see. &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#single-file-executables&#34;&gt;What&#39;s new in .NET Core 3.0&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS&amp;gt; dotnet publish -r win-x64 -p:PublishSingleFile=true&#xA;PS&amp;gt; app.exe --name Cocona&#xA;&#xA;$ dotnet publish -r linux-x64 -p:PublishSingleFile=true&#xA;$ ./app --name Cocona&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command-line handling basics&lt;/h2&gt; &#xA;&lt;h3&gt;Command&lt;/h3&gt; &#xA;&lt;h4&gt;Minimal API style&lt;/h4&gt; &#xA;&lt;p&gt;If your application has a single command, you can easily define and run it with &lt;code&gt;CoconaApp.Run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CoconaApp.Run((string name, int age) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is equivalent to the following code using the Minimal API Builder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = CoconaApp.CreateBuilder();&#xA;var app = builder.Build();&#xA;&#xA;app.AddCommand((string name, int age) =&amp;gt; { ... });&#xA;&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want your application to have more than one command, you can add named commands. See &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#sub-commands&#34;&gt;Sub commands&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create(); // is a shorthand for `CoconaApp.CreateBuilder().Build()`&#xA;&#xA;app.AddCommand(&#34;list&#34;, () =&amp;gt; { ... });&#xA;app.AddCommand(&#34;add&#34;, () =&amp;gt; { ... });&#xA;app.AddCommand(&#34;delete&#34;, () =&amp;gt; { ... });&#xA;&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add (classic) Class-based style commands with the &lt;code&gt;AddCommands&amp;lt;T&amp;gt;&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.AddCommands&amp;lt;MyCommand&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Public method as a command (Class-based style)&lt;/h4&gt; &#xA;&lt;p&gt;By default, Cocona treats &lt;code&gt;public&lt;/code&gt; methods as commands.&lt;/p&gt; &#xA;&lt;p&gt;If an application has one public method, Cocona calls it on startup. If there are more than one, they are treated as sub-commands. (see also &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/#sub-commands&#34;&gt;Sub commands&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Treats a method name as a command name. (Below method is named `command`)&#xA;public void Command() { ... }&#xA;&#xA;// Specify a command name using CommandAttribute.&#xA;[Command(&#34;commandname&#34;)]&#xA;public void Command() { ... }&#xA;&#xA;// Cocona will ignore this method.&#xA;[Ignore]&#xA;public void Ignored() { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to specify a method as a command manually, set &lt;code&gt;false&lt;/code&gt; to &lt;code&gt;TreatPublicMethodsAsCommands&lt;/code&gt; option at startup. All command methods require &lt;code&gt;CommandAttribute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CoconaApp.Run&amp;lt;Program&amp;gt;(args, options =&amp;gt;&#xA;{&#xA;    // If the option value is `false`, All command methods require `CommandAttribute`.&#xA;    options.TreatPublicMethodsAsCommands = false;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Cocona exposes method parameters as command-line options (also known as flags).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// This command accepts `--name &amp;lt;string&amp;gt;` and `--hey` options.&#xA;app.AddCommand((string name, bool hey) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// This command accepts `--name &amp;lt;string&amp;gt;` and `--hey` options.&#xA;public void Hello(string name, bool hey) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If the parameter of a method is defined as nullable, Cocona will treat them as non-mandatory option for a command. (That is, the parameters are treated as &lt;strong&gt;required option&lt;/strong&gt; by default excepts boolean). If a parameter is boolean, it&#39;s assumed that &lt;code&gt;false&lt;/code&gt; default value is specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// `--name` is non-mandatory option.&#xA;// If the user runs the application without this option, the parameter will be `null`.&#xA;app.AddCommand((string? name) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Optional with default value (Class-based style)&lt;/summary&gt; &#xA; &lt;p&gt;If method parameters are &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments#optional-arguments&#34;&gt;optional argument&lt;/a&gt;, Cocona treats those as optional command options. (That is, the parameters are treated as &lt;strong&gt;required option&lt;/strong&gt; by default excepts boolean). If a parameter is boolean, it&#39;s assumed that &lt;code&gt;false&lt;/code&gt; default value is specified.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// `--name &#34;default user&#34;` is specified implicity.&#xA;public void Hello(string name = &#34;default user&#34;) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Do you want to use short-name option &lt;code&gt;-f&lt;/code&gt; instead of &lt;code&gt;--force&lt;/code&gt;? You can specify short-name to an option using &lt;code&gt;OptionAttribute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// The command accepts `-f` or `--force` option.&#xA;// Cocona&#39;s command-line parser accepts getopt-like styles. See below.&#xA;// $ remove --force --recursive&#xA;// $ remove -r -f&#xA;// $ remove -rf&#xA;app.AddCommand(([Option(&#39;f&#39;)]bool force, [Option(&#39;r&#39;)]bool recursive) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5))&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// The command accepts `-f` or `--force` option.&#xA;// Cocona&#39;s command-line parser accepts getopt-like styles. See below.&#xA;// $ remove --force --recursive&#xA;// $ remove -r -f&#xA;// $ remove -rf&#xA;public void Remove([Option(&#39;f&#39;)]bool force, [Option(&#39;r&#39;)]bool recursive) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If a parameter is &lt;code&gt;T[]&lt;/code&gt; or &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, a command accepts one or more options by the same name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// $ compile -I../path/to/foo.h -I/usr/include/bar.h -I/usr/include/baz.h nantoka.c&#xA;// include = new [] { &#34;../path/to/foo.h&#34;, &#34;/usr/include/bar.h&#34;, &#34;/usr/include/baz.h&#34; };&#xA;app.AddCommand(([Option(&#39;I&#39;)]string[] include, [Argument]string file) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5))&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// $ compile -I../path/to/foo.h -I/usr/include/bar.h -I/usr/include/baz.h nantoka.c&#xA;// include = new [] { &#34;../path/to/foo.h&#34;, &#34;/usr/include/bar.h&#34;, &#34;/usr/include/baz.h&#34; };&#xA;public void Compile([Option(&#39;I&#39;)]string[] include, [Argument]string file) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can also specify a description for options that appear in the help.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.AddCommand((&#xA;    [Option(Description = &#34;Description of the option&#34;)] int value,&#xA;    [Argument(Description = &#34;Description of the argument&#34;)]string arg&#xA;) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5))&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void HasDescription([Option(Description = &#34;Description of the option&#34;)] int value, [Argument(Description = &#34;Description of the argument&#34;)]string arg) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: CoconaSample.InAction.CommandOptions has-description [--value &amp;lt;Int32&amp;gt;] [--help] arg&#xA;&#xA;Arguments:&#xA;  0: arg    Description of the argument (Required)&#xA;&#xA;Options:&#xA;  --value &amp;lt;Int32&amp;gt;    Description of the option (Required)&#xA;  -h, --help         Show help message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.CommandOptions&#34;&gt;CoconaSample.InAction.CommandOptions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Command-line arguments are defined as method parameters as same as options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ./app alice karen&#xA;app.AddCommand(([Argument]string from, [Argument]string to) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ./app alice karen&#xA;public void Hello([Argument]string from, [Argument]string to) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;You can define a parameter as &lt;code&gt;T[]&lt;/code&gt;. It allows defining &lt;code&gt;cp&lt;/code&gt;-like command which accepts many file paths and one destination path (&lt;code&gt;cp file1 file2 file3 dest&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ./copy file1 file2 file3 dest&#xA;app.AddCommand(([Argument]string[] src, [Argument]string dest) =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ./copy file1 file2 file3 dest&#xA;public void Copy([Argument]string[] src, [Argument]string dest) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.ManyArguments&#34;&gt;CoconaSample.InAction.ManyArguments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sub-commands&lt;/h3&gt; &#xA;&lt;p&gt;You can add multiple commands with names and expose them as sub-commands. You can implement an application that has sub-commands similar to &lt;code&gt;dotnet&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;kubectl&lt;/code&gt; etc...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create();&#xA;app.AddCommand(&#34;hello&#34;, ([Argument]string name) =&amp;gt; Console.WriteLine($&#34;Hello {name}!&#34;))&#xA;    .WithDescription(&#34;Say hello&#34;);&#xA;app.AddCommand(&#34;bye&#34;, ([Argument]string name) =&amp;gt; Console.WriteLine($&#34;Goodbye {name}!&#34;))&#xA;    .WithDescription(&#34;Say goodbye&#34;);&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;p&gt;If a command type has more than one public method or &lt;code&gt;[Command]&lt;/code&gt;, those commands are exposed as sub-commands. You can implement an application that has sub-commands similar to &lt;code&gt;dotnet&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;kubectl&lt;/code&gt; etc...&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)&#xA;{&#xA;    CoconaApp.Run&amp;lt;Program&amp;gt;(args);&#xA;}&#xA;&#xA;[Command(Description = &#34;Say hello&#34;)]&#xA;public void Hello([Argument]string name)&#xA;{&#xA;    Console.WriteLine($&#34;Hello {name}!&#34;);&#xA;}&#xA;&#xA;[Command(Description = &#34;Say goodbye&#34;)]&#xA;public void Bye([Argument]string name)&#xA;{&#xA;    Console.WriteLine($&#34;Goodbye {name}!&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./SubCommandApp&#xA;Usage: SubCommandApp [command]&#xA;Usage: SubCommandApp [--help] [--version]&#xA;&#xA;SubCommandApp&#xA;&#xA;Commands:&#xA;  hello    Say hello&#xA;  bye      Say goodbye&#xA;&#xA;Options:&#xA;  -h, --help    Show help message&#xA;  --version     Show version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a user mistypes a command, Cocona prints command autogenerated suggestions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./SubCommandApp hell&#xA;Error: &#39;hell&#39; is not a command. See &#39;--help&#39; for usage.&#xA;&#xA;Similar commands:&#xA;  hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/GettingStarted.SubCommandApp&#34;&gt;CoconaSample.GettingStarted.SubCommandApp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Nested sub-commands&lt;/h5&gt; &#xA;&lt;p&gt;Cocona also supports nested sub-commands. Specify the class that has nested sub-commands using &lt;code&gt;AddSubCommand&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create();&#xA;// ./myapp info&#xA;app.AddCommand(&#34;info&#34;, () =&amp;gt; Console.WriteLine(&#34;Show information&#34;));&#xA;&#xA;// ./myapp server [command]&#xA;app.AddSubCommand(&#34;server&#34;, x =&amp;gt;&#xA;{&#xA;    x.AddCommand(&#34;start&#34;, () =&amp;gt; Console.WriteLine(&#34;Start&#34;));&#xA;    x.AddCommand(&#34;stop&#34;, () =&amp;gt; Console.WriteLine(&#34;Stop&#34;));&#xA;})&#xA;.WithDescription(&#34;Server commands&#34;);&#xA;&#xA;// ./myapp client [command]&#xA;app.AddSubCommand(&#34;client&#34;, x =&amp;gt;&#xA;{&#xA;    x.AddCommand(&#34;connect&#34;, () =&amp;gt; Console.WriteLine(&#34;Connect&#34;));&#xA;    x.AddCommand(&#34;disconnect&#34;, () =&amp;gt; Console.WriteLine(&#34;Disconnect&#34;));&#xA;})&#xA;.WithDescription(&#34;Client commands&#34;);&#xA;&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;p&gt;Cocona also supports nested sub-commands. Specify the class that has nested sub-commands using &lt;code&gt;HasSubCommands&lt;/code&gt; attribute.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[HasSubCommands(typeof(Server), Description = &#34;Server commands&#34;)]&#xA;[HasSubCommands(typeof(Client), Description = &#34;Client commands&#34;)]&#xA;class Program&#xA;{&#xA;    static void Main(string[] args) =&amp;gt; CoconaApp.Run&amp;lt;Program&amp;gt;(args);&#xA;&#xA;    // ./myapp info&#xA;    public void Info() =&amp;gt; Console.WriteLine(&#34;Show information&#34;);&#xA;}&#xA;&#xA;// ./myapp server [command]&#xA;class Server&#xA;{&#xA;    public void Start() =&amp;gt; Console.WriteLine(&#34;Start&#34;);&#xA;    public void Stop() =&amp;gt; Console.WriteLine(&#34;Stop&#34;);&#xA;}&#xA;&#xA;// ./myapp client [command]&#xA;class Client&#xA;{&#xA;    public void Connect() =&amp;gt; Console.WriteLine(&#34;Connect&#34;);&#xA;    public void Disconnect() =&amp;gt; Console.WriteLine(&#34;Disconnect&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./SubCommandApp&#xA;Usage: SubCommandApp [command]&#xA;Usage: SubCommandApp [--help] [--version]&#xA;&#xA;SubCommandApp&#xA;&#xA;Commands:&#xA;  info&#xA;  server    Server commands&#xA;  client    Client commands&#xA;&#xA;Options:&#xA;  -h, --help    Show help message&#xA;  --version     Show version&#xA;&#xA;$ ./SubCommandApp server&#xA;Usage: SubCommandApp server [command]&#xA;Usage: SubCommandApp server [--help]&#xA;&#xA;SubCommandApp&#xA;&#xA;Commands:&#xA;  start&#xA;  stop&#xA;&#xA;Options:&#xA;  -h, --help    Show help message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PrimaryCommand&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create();&#xA;app.AddCommand((bool foo, string bar) =&amp;gt; { ... }); // Primary command&#xA;&#xA;app.AddCommand(&#34;hello&#34;, () =&amp;gt; { ... });&#xA;app.AddCommand(&#34;goodbye&#34;, () =&amp;gt; { ... });&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[PrimaryCommand]&#xA;public void Primary(bool foo, string bar) { ... }&#xA;&#xA;[Command]&#xA;public void Hello() { ... }&#xA;&#xA;[Command]&#xA;public void Goodbye() { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Option-like commands&lt;/h3&gt; &#xA;&lt;p&gt;The option-like command is a way to achieve an independent command that at first glance, looks like an option in a command.&lt;/p&gt; &#xA;&lt;p&gt;For example, easy to understand examples like &lt;code&gt;--version&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt;. These are the options of a command, but they behave as a command when specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create();&#xA;app.AddCommand(() =&amp;gt; Console.WriteLine(&#34;Execute&#34;))&#xA;    .OptionLikeCommand(x =&amp;gt;&#xA;    {&#xA;        x.AddCommand(&#34;hello&#34;, ([Argument]string name) =&amp;gt; Console.WriteLine($&#34;Hello {name}!&#34;))&#xA;            .WithAliases(&#39;f&#39;);&#xA;    });&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[OptionLikeCommand(&#34;hello&#34;, new[] {&#39;f&#39;}, typeof(Program), nameof(Hello))]&#xA;public void Execute()&#xA;    =&amp;gt; Console.WriteLine(&#34;Execute&#34;);&#xA;&#xA;private void Hello([Argument]string name)&#xA;    =&amp;gt; Console.WriteLine($&#34;Hello {name}!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./myapp&#xA;Execute&#xA;&#xA;$ ./myapp --hello Alice&#xA;Hello Alice!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/Advanced.OptionLikeCommand&#34;&gt;samples/Advanced.OptionLikeCommand&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Limitations&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any previous options or arguments specified by OptionLikeCommand will be ignored. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Example: If &lt;code&gt;--foo --bar --optionlikecommand --baz arg0&lt;/code&gt; and &lt;code&gt;--optionlikecommand&lt;/code&gt; is an Option-like command, the command will be passed &lt;code&gt;--baz arg0&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Arguments are not displayed in help.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cocona in action&lt;/h2&gt; &#xA;&lt;h3&gt;Parameter set&lt;/h3&gt; &#xA;&lt;p&gt;Cocona has a mechanism called Parameter set that defines common parameters for multiple commands. For example, if every command receives a user name, host name, etc., it would be annoying to define them in a method for each command.&lt;/p&gt; &#xA;&lt;p&gt;A class or &lt;code&gt;record&lt;/code&gt; implements the &lt;code&gt;ICommandParameterSet&lt;/code&gt; interface and treats it as a Parameter set.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.ParameterSet&#34;&gt;samples/InAction.ParameterSet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;By parameterized constructor (includes record class)&lt;/h4&gt; &#xA;&lt;p&gt;If a class (or record class) has a parameterized constructor, it is treated as part of the definition of a command method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public record CommonParameters(&#xA;    [Option(&#39;t&#39;, Description = &#34;Specifies the remote host to connect.&#34;)]&#xA;    string Host,&#xA;    [Option(&#39;p&#39;, Description = &#34;Port to connect to on the remote host.&#34;)]&#xA;    int Port,&#xA;    [Option(&#39;u&#39;, Description = &#34;Specifies the user to log in as on the remote host.&#34;)]&#xA;    string User = &#34;root&#34;,&#xA;    [Option(&#39;f&#39;, Description = &#34;Perform without user confirmation.&#34;)]&#xA;    bool Force = false&#xA;) : ICommandParameterSet;&#xA;&#xA;public void Add(CommonParameters commonParams, [Argument] string from, [Argument] string to)&#xA;    =&amp;gt; Console.WriteLine($&#34;Add: {commonParams.User}@{commonParams.Host}:{commonParams.Port} {(commonParams.Force ? &#34; (Force)&#34; : &#34;&#34;)}&#34;);&#xA;&#xA;public void Update(CommonParameters commonParams, [Option(&#39;r&#39;, Description = &#34;Traverse recursively to perform.&#34;)] bool recursive, [Argument] string path)&#xA;    =&amp;gt; Console.WriteLine($&#34;Update: {commonParams.User}@{commonParams.Host}:{commonParams.Port} {(commonParams.Force ? &#34; (Force)&#34; : &#34;&#34;)}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;By properties (parameter-less constructor)&lt;/h4&gt; &#xA;&lt;p&gt;If a class has a parameter-less constructor, you can mark the public property as &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Argument&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Option defined as a property is treated as required by default. If you want a non-required Option to have a default value, mark it with &lt;code&gt;HasDefaultValue&lt;/code&gt; attribute.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class CommonParameters : ICommandParameterSet&#xA;{&#xA;    [Option(&#39;t&#39;, Description = &#34;Specifies the remote host to connect.&#34;)]&#xA;    public string Host { get; set; }&#xA;&#xA;    [Option(&#39;p&#39;, Description = &#34;Port to connect to on the remote host.&#34;)]&#xA;    public int Port { get; set; }&#xA;&#xA;    [Option(&#39;u&#39;, Description = &#34;Specifies the user to log in as on the remote host.&#34;)]&#xA;    [HasDefaultValue]&#xA;    public string User  { get; set; } = &#34;root&#34;;&#xA;&#xA;    [Option(&#39;f&#39;, Description = &#34;Perform without user confirmation.&#34;)]&#xA;    public bool Force  { get; set; } = false;&#xA;}&#xA;&#xA;public void Add(CommonParameters commonParams, [Argument] string from, [Argument] string to)&#xA;    =&amp;gt; Console.WriteLine($&#34;Add: {commonParams.User}@{commonParams.Host}:{commonParams.Port} {(commonParams.Force ? &#34; (Force)&#34; : &#34;&#34;)}&#34;);&#xA;&#xA;public void Update(CommonParameters commonParams, [Option(&#39;r&#39;, Description = &#34;Traverse recursively to perform.&#34;)] bool recursive, [Argument] string path)&#xA;    =&amp;gt; Console.WriteLine($&#34;Update: {commonParams.User}@{commonParams.Host}:{commonParams.Port} {(commonParams.Force ? &#34; (Force)&#34; : &#34;&#34;)}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exit code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Exit Code: 0&#xA;public void NoReturn() { }&#xA;&#xA;// Exit Code: 123&#xA;public int Return() { return 123; }&#xA;&#xA;// Exit Code: 255&#xA;public async Task&amp;lt;int&amp;gt; ReturnAsync() { return 255; }&#xA;&#xA;// Exit Code: -1&#xA;public async ValueTask&amp;lt;int&amp;gt; ReturnValueTaskAsync() { return -1; }&#xA;&#xA;// Exit Code: 128&#xA;public void Throw() { throw new CommandExitedException(128); }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.ExitCode&#34;&gt;CoconaSample.InAction.ExitCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Validation&lt;/h3&gt; &#xA;&lt;p&gt;Cocona can use attributes to validate options and arguments. It is similar to ASP.NET Core MVC.&lt;/p&gt; &#xA;&lt;p&gt;.NET BCL (&lt;code&gt;System.ComponentModel.DataAnnotations&lt;/code&gt;) has some pre-defined attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RangeAttribute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MaxLangeAttribute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MinLengthAttribute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to implement custom validation attribute, it should inherit &lt;code&gt;System.ComponentModel.DataAnnotations.ValidationAttribute&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Program&#xA;{&#xA;    static void Main(string[] args)&#xA;    {&#xA;        CoconaApp.Run&amp;lt;Program&amp;gt;(args);&#xA;    }&#xA;&#xA;    public void Run([Range(1, 128)]int width, [Range(1, 128)]int height, [Argument][PathExists]string filePath)&#xA;    {&#xA;        Console.WriteLine($&#34;Size: {width}x{height}&#34;);&#xA;        Console.WriteLine($&#34;Path: {filePath}&#34;);&#xA;    }&#xA;}&#xA;&#xA;class PathExistsAttribute : ValidationAttribute&#xA;{&#xA;    protected override ValidationResult IsValid(object value, ValidationContext validationContext)&#xA;    {&#xA;        if (value is string path &amp;amp;&amp;amp; (Directory.Exists(path) || Directory.Exists(path)))&#xA;        {&#xA;            return ValidationResult.Success;&#xA;        }&#xA;        return new ValidationResult($&#34;The path &#39;{value}&#39; is not found.&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.Validation&#34;&gt;CoconaSample.InAction.Validation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shutdown event handling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app.AddCommand(async (CoconaAppContext ctx) =&amp;gt;&#xA;{&#xA;    while (!ctx.CancellationToken.IsCancellationRequested)&#xA;    {&#xA;        await Task.Delay(100);&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Program : CoconaConsoleAppBase&#xA;{&#xA;    ...&#xA;    public async Task RunAsync()&#xA;    {&#xA;        while (!Context.CancellationToken.IsCancellationRequested)&#xA;        {&#xA;            await Task.Delay(100);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Alternatively, you can use &lt;code&gt;ICoconaAppContextAccessor&lt;/code&gt; and &lt;code&gt;CoconaAppContext&lt;/code&gt; to access &lt;code&gt;CancellationToken&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async Task RunAsync([FromService]ICoconaAppContextAccessor contextAccessor)&#xA;{&#xA;    var ctx = contextAccessor.Current ?? throw new InvalidOperationException();&#xA;    while (!ctx.CancellationToken.IsCancellationRequested)&#xA;    {&#xA;        await Task.Delay(100);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.HandleShutdownSignal&#34;&gt;CoconaSample.InAction.HandleShutdownSignal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Command filter&lt;/h3&gt; &#xA;&lt;p&gt;Cocona has filter mechanism like ASP.NET Core&#39;s action filter. Filters allow custom processing before or after you run a command.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ICommandFilter&lt;/code&gt; interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CommandFilterAttribute&lt;/code&gt; attribute&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IFilterProvider&lt;/code&gt; interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IFilterMetadata&lt;/code&gt; interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create();&#xA;&#xA;// Add a command with command filters.&#xA;app.AddCommand(() =&amp;gt;&#xA;    {&#xA;        Console.WriteLine($&#34;Hello Konnichiwa&#34;);&#xA;    })&#xA;    .WithFilter(new SampleCommandFilter())&#xA;    .WithFilter(async (ctx, next) =&amp;gt;&#xA;    {&#xA;        // You can declare and apply a filter using a delegate.&#xA;        return await next(ctx);&#xA;    });&#xA;&#xA;// Add a command filter and apply it to commands after this call.&#xA;app.UseFilter(new MyFilter());&#xA;&#xA;class SampleCommandFilterAttribute : CommandFilterAttribute&#xA;{&#xA;    public override async ValueTask&amp;lt;int&amp;gt; OnCommandExecutionAsync(CoconaCommandExecutingContext ctx, CommandExecutionDelegate next)&#xA;    {&#xA;        Console.WriteLine($&#34;Before Command: {ctx.Command.Name}&#34;);&#xA;        try&#xA;        {&#xA;            return await next(ctx);&#xA;        }&#xA;        finally&#xA;        {&#xA;            Console.WriteLine($&#34;End Command: {ctx.Command.Name}&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Program&#xA;{&#xA;    static void Main(string[] args)&#xA;    {&#xA;        CoconaApp.Run&amp;lt;Program&amp;gt;(args);&#xA;    }&#xA;&#xA;    [SampleCommandFilter]&#xA;    public void Hello()&#xA;    {&#xA;        Console.WriteLine($&#34;Hello Konnichiwa&#34;);&#xA;    }&#xA;}&#xA;&#xA;class SampleCommandFilterAttribute : CommandFilterAttribute&#xA;{&#xA;    public override async ValueTask&amp;lt;int&amp;gt; OnCommandExecutionAsync(CoconaCommandExecutingContext ctx, CommandExecutionDelegate next)&#xA;    {&#xA;        Console.WriteLine($&#34;Before Command: {ctx.Command.Name}&#34;);&#xA;        try&#xA;        {&#xA;            return await next(ctx);&#xA;        }&#xA;        finally&#xA;        {&#xA;            Console.WriteLine($&#34;End Command: {ctx.Command.Name}&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.CommandFilter&#34;&gt;CoconaSample.InAction.CommandFilter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dependency Injection&lt;/h3&gt; &#xA;&lt;p&gt;If a constructor has parameters, Cocona injects an instance obtained from IServiceProvider into the parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = CoconaApp.CreateBuilder();&#xA;builder.Services.AddTransient&amp;lt;MyService&amp;gt;();&#xA;&#xA;var app = builder.Build();&#xA;app.AddCommand((MyService myService) =&amp;gt;&#xA;{&#xA;    myService.Hello(&#34;Hello Konnichiwa!&#34;);&#xA;});&#xA;app.Run();&#xA;&#xA;class MyService&#xA;{&#xA;    private readonly ILogger _logger;&#xA;&#xA;    public MyService(ILogger&amp;lt;MyService&amp;gt; logger)&#xA;    {&#xA;        _logger = logger;&#xA;    }&#xA;&#xA;    public void Hello(string message)&#xA;    {&#xA;        _logger.LogInformation(message);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;p&gt;If a constructor has parameters, Cocona injects an instance obtained from IServiceProvider into the parameter. Cocona will also inject an instance into the parameter if a command method parameter is marked as &lt;code&gt;[FromService]&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Program&#xA;{&#xA;    public Program(ILogger&amp;lt;Program&amp;gt; logger)&#xA;    {&#xA;        logger.LogInformation(&#34;Create Instance&#34;);&#xA;    }&#xA;&#xA;    static void Main(string[] args)&#xA;    {&#xA;        CoconaApp.Create()&#xA;            .ConfigureServices(services =&amp;gt;&#xA;            {&#xA;                services.AddTransient&amp;lt;MyService&amp;gt;();&#xA;            })&#xA;            .Run&amp;lt;Program&amp;gt;(args);&#xA;    }&#xA;&#xA;    public void Hello([FromService]MyService myService)&#xA;    {&#xA;        myService.Hello(&#34;Hello Konnichiwa!&#34;);&#xA;    }&#xA;}&#xA;&#xA;class MyService&#xA;{&#xA;    private readonly ILogger _logger;&#xA;&#xA;    public MyService(ILogger&amp;lt;MyService&amp;gt; logger)&#xA;    {&#xA;        _logger = logger;&#xA;    }&#xA;&#xA;    public void Hello(string message)&#xA;    {&#xA;        _logger.LogInformation(message);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.DependencyInjection&#34;&gt;CoconaSample.InAction.DependencyInjection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/InAction.AppConfiguration&#34;&gt;CoconaSample.InAction.AppConfiguration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var builder = CoconaApp.CreateBuilder();&#xA;builder.Logging.AddDebug();&#xA;&#xA;app.AddCommand((ILogger&amp;lt;Program&amp;gt; logger) =&amp;gt; logger.LogInformation(&#34;Hello Konnichiwa!&#34;)));&#xA;&#xA;var app = builder.Build();&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Class-based style (for .NET Standard / .NET 5)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Program : CoconaConsoleAppBase&#xA;{&#xA;    static void Main(string[] args)&#xA;    {&#xA;        CoconaApp.Create()&#xA;            .ConfigureLogging(logging =&amp;gt;&#xA;            {&#xA;                logging.AddDebug();&#xA;            })&#xA;            .Run&amp;lt;Program&amp;gt;(args);&#xA;    }&#xA;&#xA;    public async Task RunAsync()&#xA;    {&#xA;        Context.Logger.LogInformation(&#34;Hello Konnichiwa!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Shell command-line completion&lt;/h3&gt; &#xA;&lt;p&gt;Cocona provides support for shell command-line completion (also known as tab completion).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9012/83354785-effcd400-a395-11ea-8226-c21e114c746f.gif&#34; alt=&#34;Tab shell completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cocona generates a shell script for command-line completion from a command definition and allows users to use command-line completion by loading it. The &lt;code&gt;--completion&lt;/code&gt; built-in option is used to specify the name of a shell to generate a script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source &amp;lt;(./myapp --completion bash)&#xA;or&#xA;% ./myapp --completion zsh &amp;gt; ~/.zsh/functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, The supported shells are &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature is &lt;strong&gt;disabled&lt;/strong&gt; by default, or you can set the &lt;code&gt;EnableShellCompletionSupport&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; if you need it.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to dynamically generate command-line completion candidates and to prepare candidates at script generation time. Please see the sample below for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/Advanced.ShellCompletionCandidates&#34;&gt;samples/Advanced.ShellCompletionCandidates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance &amp;amp; Cocona.Lite&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Microsoft.Extensions.*&lt;/code&gt; are powerful but little heavy libraries. If you don&#39;t need&lt;code&gt;Microsoft.Extensions.*&lt;/code&gt;, you can use a lightweight version of Cocona. (named &lt;a href=&#34;https://www.nuget.org/packages/Cocona.Lite/&#34;&gt;Cocona.Lite&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Feature &amp;amp; Limitation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Almost the same features and APIs as Cocona (command-line, help, etc.)&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;Microsoft.Extensions.*&lt;/code&gt; dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No Logging, DI, Configuration are provided&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fewer overheads&lt;/li&gt; &#xA; &lt;li&gt;The minimal Dependency Injection function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing &amp;amp; How to use&lt;/h3&gt; &#xA;&lt;p&gt;Just install NuGet package &lt;code&gt;Cocona.Lite&lt;/code&gt; instead of &lt;code&gt;Cocona&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotnet add package Cocona.Lite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your source code, use &lt;code&gt;CoconaLiteApp&lt;/code&gt; class instead of &lt;code&gt;CoconaApp&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CoconaLiteApp.Run(() =&amp;gt; { ... });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaLiteApp.Create();&#xA;app.AddCommand(() =&amp;gt; { ... });&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static void Main(string[] args)&#xA;{&#xA;    CoconaLiteApp.Run&amp;lt;Program&amp;gt;(args);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft.Extensions.Localization can be used to localize your application. Please refer to the sample code for details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Register Microsoft.Extensions.Localization and ICoconaLocalizer services&#xA;// Cocona uses `ICoconaLocalizer` to localize command descriptions.&#xA;var builder = CoconaApp.CreateBuilder();&#xA;builder.Services.AddLocalization(options =&amp;gt;&#xA;{&#xA;    options.ResourcesPath = &#34;Resources&#34;;&#xA;});&#xA;&#xA;// `MicrosoftExtensionLocalizationCoconaLocalizer` is not included in Cocona core library.&#xA;builder.Services.TryAddTransient&amp;lt;ICoconaLocalizer, MicrosoftExtensionLocalizationCoconaLocalizer&amp;gt;();&#xA;&#xA;var app = builder.Build();&#xA;app.AddCommand(&#34;hello&#34;, ([Argument(Description = &#34;Name&#34;)]string name, IStringLocalizer&amp;lt;Program&amp;gt; localizer) =&amp;gt;&#xA;    {&#xA;        // Get a localized text from Microsoft.Extensions.Localization.IStringLocalizer (same as ASP.NET Core)&#xA;        Console.WriteLine(localizer.GetString(&#34;Hello {0}!&#34;, name));&#xA;    })&#xA;    .WithDescription(&#34;Say Hello&#34;);&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/Advanced.Localization&#34;&gt;CoconaSample.Advanced.Localization&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hide command from help&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var app = CoconaApp.Create();&#xA;app.AddCommand(&#34;hello&#34;, (string name) =&amp;gt;&#xA;    {&#xA;        Console.WriteLine(&#34;Hello {0}!&#34;, name);&#xA;    });&#xA;app.AddCommand(&#34;secret-command&#34;, (string name) =&amp;gt;&#xA;    {&#xA;        Console.WriteLine(&#34;üôä&#34;);&#xA;    })&#xA;    .WithMetadata(new HiddenAttribute());&#xA;app.Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Help customization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See also: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/Advanced.HelpTransformer&#34;&gt;CoconaSample.Advanced.HelpTransformer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CommandMethodForwardedTo attribute&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;CommandMethodForwardedTo&lt;/code&gt; attribute allows you to specify that the substance of the specified command method is a different method and that the operation should be forwarded. If this attribute is given to a command method, the destination&#39;s attribute and its implementation are used. Excepts for the &lt;code&gt;Command&lt;/code&gt; and &lt;code&gt;Hidden&lt;/code&gt; attributes specified by the method.&lt;/p&gt; &#xA;&lt;p&gt;For example, it can be used if the command implementation is defined in an external assembly or to call a built-in command (such as help) or compatibility purposes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[CommandMethodForwardedTo(typeof(BuiltInOptionLikeCommands), nameof(BuiltInOptionLikeCommands.ShowHelp))]&#xA;public void MyHelp()&#xA;    =&amp;gt; throw new NotSupportedException(); // NOTE: The method body and parameters used is BuiltInOptionLikeCommands.ShowHelp.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/Advanced.CommandMethodForwarding&#34;&gt;samples/Advanced.CommandMethodForwarding&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IgnoreUnknownOptions attribute&lt;/h3&gt; &#xA;&lt;p&gt;Cocona treats unknown options as errors by default. Now, you can set the IgnoreUnknownOptions attribute to ignore unknown options.&lt;/p&gt; &#xA;&lt;h3&gt;GenericHost integration&lt;/h3&gt; &#xA;&lt;p&gt;Cocona can be integrated with GenericHost of Microsoft.Extensions.Hosting. You can register the services with &lt;code&gt;UseCocona&lt;/code&gt; extension method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Program&#xA;{&#xA;    static async Task Main(string[] args)&#xA;    {&#xA;        await Host.CreateDefaultBuilder()&#xA;            .ConfigureCocona(args, new[] { typeof(Program) })&#xA;            .Build()&#xA;            .RunAsync();&#xA;    }&#xA;&#xA;    public void Hello()&#xA;    {&#xA;        Console.WriteLine($&#34;Hello Konnichiwa!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/mayuki/Cocona/master/samples/Advanced.GenericHost&#34;&gt;samples/Advanced.GenericHost&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cysharp/ConsoleAppFramework&#34;&gt;Cysharp/ConsoleAppFramework&lt;/a&gt;: ConsoleAppFramework heavily inspired Cocona.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright ¬© 2020-present Mayuki Sawatari &amp;lt;mayuki@misuzilla.org&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sunnamed434/BitMono</title>
    <updated>2024-12-31T01:29:25Z</updated>
    <id>tag:github.com,2024-12-31:/sunnamed434/BitMono</id>
    <link href="https://github.com/sunnamed434/BitMono" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unlock new level of security with BitMono. Advanced code obfuscation that protects your intellectual property like never before. Try now!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sunnamed434/BitMono/main/resources/logo/BitMonoLogo.png&#34; alt=&#34;BitMono logo&#34; width=&#34;180&#34;&gt;&lt;br&gt; Free open-source obfuscator that targetting Mono, and maybe whole .NET&lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;BitMono&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sunnamed434/bitmono/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/8jh35hfno6riq25j/branch/main?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/sunnamed434/bitmono/branch/main/tests&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/tests/sunnamed434/bitmono/main&#34; alt=&#34;Test status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/sunnamed434/bitmono/overview/main&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/sunnamed434/bitmono/badge/main&#34; alt=&#34;Codefactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepsource.io/gh/sunnamed434/BitMono/?ref=repository-badge&#34;&gt;&lt;img src=&#34;https://deepsource.io/gh/sunnamed434/BitMono.svg/?label=active+issues&amp;amp;show_trend=true&amp;amp;token=_FJf25YbtCpPyX7SRveXCaGd&#34; alt=&#34;DeepSource&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/BitMonoSpeech/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/BitMonoSpeech/community.svg?style=plastic&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sunnamed434/BitMono/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/sunnamed434/bitmono&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/sFDHd47St4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1086240163321106523?label=discord&amp;amp;logo=discord&#34; alt=&#34;BitMono Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;BitMono is a free open-source C# obfuscator that in most cases works &lt;strong&gt;only&lt;/strong&gt; with Mono - well known as a fork of .NET framework (which runs popular platforms such as Unity, etc), you can still use this for a whole .NET, but be careful that something working not as intentional, because the main target of the this project is Mono (actually some protections don&#39;t work with Mono but work with .NET Core). Which uses &lt;strong&gt;&lt;a href=&#34;https://github.com/Washi1337/AsmResolver&#34;&gt;AsmResolver&lt;/a&gt;&lt;/strong&gt; for assembly manipulation (not a dnlib as you might already think). If you have any questions/issues please let me know &lt;strong&gt;&lt;a href=&#34;https://github.com/sunnamed434/BitMono/issues&#34;&gt;there&lt;/a&gt;&lt;/strong&gt;. You can install the latest version of BitMono &lt;strong&gt;&lt;a href=&#34;https://github.com/sunnamed434/BitMono/releases&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sunnamed434/BitMono/main/resources/images/preview/before-after.png&#34; alt=&#34;Before and after obfuscation preview by BitMono&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sunnamed434/BitMono/main/resources/images/preview/before-after-2.png&#34; alt=&#34;Before and after obfuscation preview by BitMono 2&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sunnamed434/BitMono/main/resources/images/preview/CLI.png&#34; alt=&#34;CLI&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sunnamed434/BitMono/main/resources/images/preview/configuration.png&#34; alt=&#34;Configuration&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usability&lt;/h2&gt; &#xA;&lt;p&gt;BitMono breaks the most popular tools using just one packer, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dnSpy;&lt;/li&gt; &#xA; &lt;li&gt;dnlib;&lt;/li&gt; &#xA; &lt;li&gt;AsmResolver;&lt;/li&gt; &#xA; &lt;li&gt;MonoCecil;&lt;/li&gt; &#xA; &lt;li&gt;ILSpy;&lt;/li&gt; &#xA; &lt;li&gt;PEBear;&lt;/li&gt; &#xA; &lt;li&gt;DetectItEasy;&lt;/li&gt; &#xA; &lt;li&gt;CFF Explorer&lt;/li&gt; &#xA; &lt;li&gt;Perhaps, some dumpers?&lt;/li&gt; &#xA; &lt;li&gt;and many, many more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, if you will add more protection to the file, I think it would seem like total magic. :D&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;strong&gt;&lt;a href=&#34;https://bitmono.readthedocs.io/en/latest/&#34;&gt;docs&lt;/a&gt;&lt;/strong&gt; to read protection, functionality, and more.&lt;/p&gt; &#xA;&lt;h2&gt;How your app will look since BitMono obfuscation - just in a few words&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Looks like C++ application but is an actual C# application;&lt;/li&gt; &#xA; &lt;li&gt;Crash of decompilers when analyzing types;&lt;/li&gt; &#xA; &lt;li&gt;Broken decompilers;&lt;/li&gt; &#xA; &lt;li&gt;Broken IL Code;&lt;/li&gt; &#xA; &lt;li&gt;Invisible types;&lt;/li&gt; &#xA; &lt;li&gt;No code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;StringsEncryption&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MrakDev/UnmanagedString&#34;&gt;UnmanagedString&lt;/a&gt;&lt;/strong&gt; (based on existing protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/0x59R11/BitDotNet&#34;&gt;BitDotNet&lt;/a&gt;&lt;/strong&gt; (based and improved on existing protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sunnamed434/BitMethodDotnet&#34;&gt;BitMethodDotnet&lt;/a&gt;&lt;/strong&gt; (based and improved on existing protection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Elliesaur/DotNetHook&#34;&gt;DotNetHook&lt;/a&gt;&lt;/strong&gt; (based on existing protection)&lt;/li&gt; &#xA; &lt;li&gt;CallToCalli&lt;/li&gt; &#xA; &lt;li&gt;ObjectReturnType&lt;/li&gt; &#xA; &lt;li&gt;NoNamespaces&lt;/li&gt; &#xA; &lt;li&gt;FullRenamer&lt;/li&gt; &#xA; &lt;li&gt;AntiDebugBreakpoints&lt;/li&gt; &#xA; &lt;li&gt;AntiDecompiler&lt;/li&gt; &#xA; &lt;li&gt;BitDateTimeStamp&lt;/li&gt; &#xA; &lt;li&gt;BitMono&lt;/li&gt; &#xA; &lt;li&gt;BillionNops&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Using CLI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;BitMono.CLI &amp;lt;path to file&amp;gt;/drag-and-drop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Always drop dependencies in &lt;code&gt;libs&lt;/code&gt; directory in the same path where &lt;code&gt;file&lt;/code&gt; for obfuscation is located&lt;/p&gt; &#xA;&lt;p&gt;Your obfuscation directory structure will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;specially_created_folder_for_obfuscation/&#xA;‚îú‚îÄ your_app.exe&#xA;‚îî‚îÄ libs/&#xA;  ‚îú‚îÄ ImportantLibrary.dll&#xA;  ‚îú‚îÄ SuperImportantLibrary.dll&#xA;  ‚îî‚îÄ ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy all libraries (.dll) from the building application folder and paste them into the &lt;code&gt;libs&lt;/code&gt; directory (if it doesn&#39;t exist yet create it), or even create the libs directory yourself with a custom name for example - &lt;code&gt;myLibs&lt;/code&gt;, and then specify it in BitMono, however, if you will use &lt;code&gt;libs&lt;/code&gt; then by default BitMono looking for a &lt;code&gt;libs&lt;/code&gt; directory, so it will save your time.&lt;/p&gt; &#xA;&lt;h3&gt;Using CLI Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;  -f, --file         Required. Set file path.&#xA;&#xA;  -l, --libraries    Set libraries path.&#xA;&#xA;  -o, --output       Set output path.&#xA;&#xA;  --help             Display this help screen.&#xA;&#xA;  --version          Display version information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basic example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BitMono.CLI -f C:\specially_created_folder_for_obfuscation/your_app.exe -l specially_created_folder_for_obfuscation/libs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case when you already have a directory with the name &lt;code&gt;libs&lt;/code&gt; (specially_created_folder_for_obfuscation\libs) BitMono will catch it automatically, so, you don&#39;t need to specify it anymore, but you can in case if you made another directory with &lt;code&gt;libs&lt;/code&gt; somewhere on the disk or even just for &#34;visibility&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BitMono.CLI -f C:\specially_created_folder_for_obfuscation/your_app.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify custom &lt;code&gt;libs&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BitMono.CLI -f C:\specially_created_folder_for_obfuscation/your_app.exe -l C:\mythings\obfuscation\superLibsDirectory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify file, libs and output. If output directory doesn&#39;t exist BitMono will create it automatically and even open it on the top of the screen, if you want you can disable opening of the directory on the of top of the screen in &lt;code&gt;obfuscation.json&lt;/code&gt; - and set &lt;code&gt;OpenFileDestinationInFileExplorer&lt;/code&gt; to false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ BitMono.CLI -f C:\specially_created_folder_for_obfuscation/your_app.exe -l C:\mythings\obfuscation\superLibsDirectory -o C:\specially_created_folder_for_obfuscation/output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want more? Simply read the &lt;strong&gt;&lt;a href=&#34;https://bitmono.readthedocs.io/en/latest/&#34;&gt;docs&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Detailed build status&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build the BitMono by your own - &lt;a href=&#34;https://github.com/sunnamed434/BitMono/raw/main/build.md&#34;&gt;click here for detailed info&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;AppVeyor&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;main&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sunnamed434/bitmono/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/8jh35hfno6riq25j/branch/main?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dev&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ci.appveyor.com/project/sunnamed434/bitmono/branch/dev&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/b9rm3l7kduryjgcj/branch/dev?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Supported Frameworks&lt;/h3&gt; &#xA;&lt;p&gt;Mono is supported obviously (some protections don&#39;t support Mono), however if you use BitMono for .NET (Core) or higher versions be careful because some protections won&#39;t work - you will be notified about that by BitMono when using not supported protections for yours running target framework.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Framework&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.NET (Core)&lt;/td&gt; &#xA;   &lt;td&gt;6.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.NET Framework&lt;/td&gt; &#xA;   &lt;td&gt;462&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;netstandard&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;netstandard&lt;/td&gt; &#xA;   &lt;td&gt;2.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/0x59R11&#34;&gt;0x59R11&lt;/a&gt;&lt;/strong&gt; for his acquaintance in big part of &lt;strong&gt;&lt;a href=&#34;https://github.com/0x59R11/BitDotNet&#34;&gt;BitDotNet&lt;/a&gt;&lt;/strong&gt; that breaks files for mono executables!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/GazziFX&#34;&gt;Gazzi&lt;/a&gt;&lt;/strong&gt; for his help that &lt;a href=&#34;https://github.com/sunnamed434&#34;&gt;me&lt;/a&gt; asked a lot!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Elliesaur&#34;&gt;Elliesaur&lt;/a&gt;&lt;/strong&gt; for her acquaintance in &lt;strong&gt;&lt;a href=&#34;https://github.com/Elliesaur/DotNetHook&#34;&gt;DotNetHook&lt;/a&gt;&lt;/strong&gt; that hooks methods.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/naweka&#34;&gt;Weka&lt;/a&gt;&lt;/strong&gt; for his advices, help and motivation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MrakDev&#34;&gt;MrakDev&lt;/a&gt;&lt;/strong&gt; for the acquaintance in &lt;strong&gt;&lt;a href=&#34;https://github.com/MrakDev/UnmanagedString&#34;&gt;UnmanagedString&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/yck1509/ConfuserEx&#34;&gt;ConfuserEx and their Forks&lt;/a&gt;&lt;/strong&gt; for most things that I watched for the architecture of BitMono and the obfuscator engine as an application and solving plenty of User solutions which I would be knew in the very long future after much fail usage of BitMono and reports by other Users. Day-by-day I&#39;m looking for something interesting there to improve myself in knowledge and BitMono also.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/openmod/openmod&#34;&gt;OpenMod&lt;/a&gt;&lt;/strong&gt; Definitely, openmod inspired this project a lot with services and clean code, extensive similar things to openmod.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://lifeinhex.com/&#34;&gt;Kao and his blogs&lt;/a&gt;&lt;/strong&gt; thanks a lot of these blogs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dr4k0nia&#34;&gt;drakonia&lt;/a&gt;&lt;/strong&gt; for her &lt;strong&gt;&lt;a href=&#34;https://github.com/dr4k0nia/Simple-Costura-Decompressor&#34;&gt;costura decompressor&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>phongnguyend/Practical.CleanArchitecture</title>
    <updated>2024-12-31T01:29:25Z</updated>
    <id>tag:github.com,2024-12-31:/phongnguyend/Practical.CleanArchitecture</id>
    <link href="https://github.com/phongnguyend/Practical.CleanArchitecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full-stack .Net 8 Clean Architecture (Microservices, Modular Monolith, Monolith), Blazor, Angular 17, React 18, Vue 3, BFF with YARP, Domain-Driven Design, CQRS, SOLID, Asp.Net Core Identity Custom Storage, OpenID Connect, Entity Framework Core, Selenium, SignalR, Hosted Services, Health Checks, Rate Limiting, Cloud Services (Azure, AWS, Google)...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; &lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The code samples contain multiple ways and patterns to do things and not always be considered best practices or recommended for all situations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Database Centric vs Domain Centric Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/database-centrics-vs-domain-centric-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fdatabase-centrics-vs-domain-centric-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Hexagonal Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/hexagonal-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fhexagonal-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Onion Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/onion-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fonion-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The Clean Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/the-clean-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fthe-clean-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Classic Three-layer Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/classic-three-layer-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fclassic-three-layer-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Modern Four-layer Architecture&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/modern-four-layer-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fmodern-four-layer-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Layer Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/layer-dependencies.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Flayer-dependencies.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Layer Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/layer-examples.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Flayer-examples.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Testing Pyramid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/testing-pyramid.png&#34; alt=&#34;alt text&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/testing-pyramid-unit-tests.png&#34; alt=&#34;alt text&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/testing-pyramid-integration-e2e-tests.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Ftesting-pyramid.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Vertical Slice Architecture (Modular Monolith)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/vertical-slice-architecture.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.draw.io/#Uhttps%3A%2F%2Fraw.githubusercontent.com%2Fphongnguyend%2FPractical.CleanArchitecture%2Fmaster%2Fdocs%2Fimgs%2Fvertical-slice-architecture.drawio&#34;&gt;&lt;em&gt;(open on draw.io)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Solution Structure&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/code-solution-structure.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/code-solution-structure-modular-monolith.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/code-solution-structure-microservices.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to Run:&lt;/h1&gt; &#xA;&lt;h2&gt;Update Configuration&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Database&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Update Connection Strings:&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;Project&lt;/th&gt; &#xA;      &lt;th&gt;Configuration File&lt;/th&gt; &#xA;      &lt;th&gt;Configuration Key&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;ClassifiedAds.Migrator&lt;/td&gt; &#xA;      &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.Migrator/appsettings.json&#34;&gt;appsettings.json&lt;/a&gt;&lt;/td&gt; &#xA;      &lt;td&gt;ConnectionStrings:ClassifiedAds&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;ClassifiedAds.BackgroundServer&lt;/td&gt; &#xA;      &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.BackgroundServer/appsettings.json&#34;&gt;appsettings.json&lt;/a&gt;&lt;/td&gt; &#xA;      &lt;td&gt;ConnectionStrings:ClassifiedAds&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;ClassifiedAds.IdentityServer&lt;/td&gt; &#xA;      &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;appsettings.json&lt;/a&gt;&lt;/td&gt; &#xA;      &lt;td&gt;ConnectionStrings:ClassifiedAds&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;ClassifiedAds.WebAPI&lt;/td&gt; &#xA;      &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;appsettings.json&lt;/a&gt;&lt;/td&gt; &#xA;      &lt;td&gt;ConnectionStrings:ClassifiedAds&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;ClassifiedAds.WebMVC&lt;/td&gt; &#xA;      &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;appsettings.json&lt;/a&gt;&lt;/td&gt; &#xA;      &lt;td&gt;ConnectionStrings:ClassifiedAds&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run Migration:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Option 1: Using dotnet cli: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Install &lt;strong&gt;dotnet-ef&lt;/strong&gt; cli: &lt;pre&gt;&lt;code&gt;dotnet tool install --global dotnet-ef --version=&#34;5.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;      &lt;li&gt;Navigate to &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.Migrator/&#34;&gt;ClassifiedAds.Migrator&lt;/a&gt; and run these commands: &lt;pre&gt;&lt;code&gt;dotnet ef migrations add Init --context AdsDbContext -o Migrations/AdsDb&#xA;dotnet ef migrations add Init --context ConfigurationDbContext -o Migrations/ConfigurationDb&#xA;dotnet ef migrations add Init --context PersistedGrantDbContext -o Migrations/PersistedGrantDb&#xA;dotnet ef database update --context AdsDbContext&#xA;dotnet ef database update --context ConfigurationDbContext&#xA;dotnet ef database update --context PersistedGrantDbContext&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;Option 2: Using Package Manager Console: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Set &lt;strong&gt;ClassifiedAds.Migrator&lt;/strong&gt; as StartUp Project&lt;/li&gt; &#xA;      &lt;li&gt;Open Package Manager Console, select &lt;strong&gt;ClassifiedAds.Migrator&lt;/strong&gt; as Default Project&lt;/li&gt; &#xA;      &lt;li&gt;Run these commands: &lt;pre&gt;&lt;code&gt;Add-Migration -Context AdsDbContext Init -OutputDir Migrations/AdsDb&#xA;Add-Migration -Context ConfigurationDbContext Init -OutputDir Migrations/ConfigurationDb&#xA;Add-Migration -Context PersistedGrantDbContext Init -OutputDir Migrations/PersistedGrantDb&#xA;Update-Database -Context AdsDbContext&#xA;Update-Database -Context ConfigurationDbContext&#xA;Update-Database -Context PersistedGrantDbContext&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Additional Configuration Sources&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;ConfigurationSources&lt;/strong&gt; section.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;ConfigurationSources&#34;: {&#xA;  &#34;SqlServer&#34;: {&#xA;    &#34;IsEnabled&#34;: false,&#xA;    &#34;ConnectionString&#34;: &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#&#34;,&#xA;    &#34;SqlQuery&#34;: &#34;select [Key], [Value] from ConfigurationEntries&#34;&#xA;  },&#xA;  &#34;AzureKeyVault&#34;: {&#xA;    &#34;IsEnabled&#34;: false,&#xA;    &#34;VaultName&#34;: &#34;https://xxx.vault.azure.net/&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Get from Sql Server database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;ConfigurationSources&#34;: {&#xA;  &#34;SqlServer&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;ConnectionString&#34;: &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#&#34;,&#xA;    &#34;SqlQuery&#34;: &#34;select [Key], [Value] from ConfigurationEntries&#34;&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Get from Azure Key Vault:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;ConfigurationSources&#34;: {&#xA;  &#34;AzureKeyVault&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;VaultName&#34;: &#34;https://xxx.vault.azure.net/&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Both:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;ConfigurationSources&#34;: {&#xA;  &#34;SqlServer&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;ConnectionString&#34;: &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#&#34;,&#xA;    &#34;SqlQuery&#34;: &#34;select [Key], [Value] from ConfigurationEntries&#34;&#xA;  },&#xA;  &#34;AzureKeyVault&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;VaultName&#34;: &#34;https://xxx.vault.azure.net/&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Storage&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;Storage&lt;/strong&gt; section.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Storage&#34;: {&#xA;  &#34;Provider&#34;: &#34;Local&#34;,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Local Files:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Storage&#34;: {&#xA;  &#34;Provider&#34;: &#34;Local&#34;,&#xA;  &#34;Local&#34;: {&#xA;    &#34;Path&#34;: &#34;E:\\files&#34;&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Azure Blob:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Storage&#34;: {&#xA;  &#34;Provider&#34;: &#34;Azure&#34;,&#xA;  &#34;Azure&#34;: {&#xA;    &#34;ConnectionString&#34;: &#34;xxx&#34;,&#xA;    &#34;Container&#34;: &#34;classifiedadds&#34;&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Amazon S3:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Storage&#34;: {&#xA;  &#34;Provider&#34;: &#34;Amazon&#34;,&#xA;  &#34;Amazon&#34;: {&#xA;    &#34;AccessKeyID&#34;: &#34;xxx&#34;,&#xA;    &#34;SecretAccessKey&#34;: &#34;xxx&#34;,&#xA;    &#34;BucketName&#34;: &#34;classifiedadds&#34;,&#xA;    &#34;RegionEndpoint&#34;: &#34;ap-southeast-1&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Message Broker&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Open below files and jump to &lt;strong&gt;MessageBroker&lt;/strong&gt; section:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;ClassifiedAds.IdentityServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.BackgroundServer/appsettings.json&#34;&gt;ClassifiedAds.BackgroundServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;RabbitMQ&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use RabbitMQ&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;RabbitMQ&#34;,&#xA;  &#34;RabbitMQ&#34;: {&#xA;    &#34;HostName&#34;: &#34;localhost&#34;,&#xA;    &#34;UserName&#34;: &#34;guest&#34;,&#xA;    &#34;Password&#34;: &#34;guest&#34;,&#xA;    &#34;ExchangeName&#34;: &#34;amq.direct&#34;,&#xA;    &#34;RoutingKeys&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds_fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds_filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds_emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds_smscreated&#34;&#xA;    },&#xA;    &#34;QueueNames&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds_fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds_filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds_emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds_smscreated&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Kafka:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;Kafka&#34;,&#xA;  &#34;Kafka&#34;: {&#xA;    &#34;BootstrapServers&#34;: &#34;localhost:9092&#34;,&#xA;    &#34;Topics&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds_fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds_filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds_emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds_smscreated&#34;&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Azure Queue Storage:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;AzureQueue&#34;,&#xA;  &#34;AzureQueue&#34;: {&#xA;    &#34;ConnectionString&#34;: &#34;xxx&#34;,&#xA;    &#34;QueueNames&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds-fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds-filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds-emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds-smscreated&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Azure Service Bus:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;AzureServiceBus&#34;,&#xA;  &#34;AzureServiceBus&#34;: {&#xA;    &#34;ConnectionString&#34;: &#34;xxx&#34;,&#xA;    &#34;QueueNames&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds_fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds_filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds_emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds_smscreated&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Azure Event Grid:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;AzureEventGrid&#34;,&#xA;  &#34;AzureEventGrid&#34;: {&#xA;    &#34;DomainEndpoint&#34;: &#34;https://xxx.xxx-1.eventgrid.azure.net/api/events&#34;,&#xA;    &#34;DomainKey&#34;: &#34;xxxx&#34;,&#xA;    &#34;Topics&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds_fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds_filedeleted&#34;&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds_emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds_smscreated&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Use Azure Event Hubs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;MessageBroker&#34;: {&#xA;  &#34;Provider&#34;: &#34;AzureEventHub&#34;,&#xA;  &#34;AzureEventHub&#34;: {&#xA;    &#34;ConnectionString&#34;: &#34;Endpoint=sb://xxx.servicebus.windows.net/;SharedAccessKeyName=xxx;SharedAccessKey=xxx&#34;,&#xA;    &#34;Hubs&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;classifiedadds_fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;classifiedadds_filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;classifiedadds_emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;classifiedadds_smscreated&#34;&#xA;    },&#xA;    &#34;StorageConnectionString&#34;: &#34;DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx;EndpointSuffix=core.windows.net&#34;,&#xA;    &#34;StorageContainerNames&#34;: {&#xA;      &#34;FileUploadedEvent&#34;: &#34;eventhub-fileuploaded&#34;,&#xA;      &#34;FileDeletedEvent&#34;: &#34;eventhub-filedeleted&#34;,&#xA;      &#34;EmailMessageCreatedEvent&#34;: &#34;eventhub-emailcreated&#34;,&#xA;      &#34;SmsMessageCreatedEvent&#34;: &#34;eventhub-smscreated&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Logging&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open and jump to &lt;strong&gt;Logging&lt;/strong&gt; section of below files: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;ClassifiedAds.IdentityServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.BackgroundServer/appsettings.json&#34;&gt;ClassifiedAds.BackgroundServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Logging&#34;: {&#xA;  &#34;LogLevel&#34;: {&#xA;    &#34;Default&#34;: &#34;Warning&#34;&#xA;  },&#xA;  &#34;File&#34;: {&#xA;    &#34;MinimumLogEventLevel&#34;: &#34;Information&#34;&#xA;  },&#xA;  &#34;Elasticsearch&#34;: {&#xA;    &#34;IsEnabled&#34;: false,&#xA;    &#34;Host&#34;: &#34;http://localhost:9200&#34;,&#xA;    &#34;IndexFormat&#34;: &#34;classifiedads&#34;,&#xA;    &#34;MinimumLogEventLevel&#34;: &#34;Information&#34;&#xA;  },&#xA;  &#34;EventLog&#34;: {&#xA;    &#34;IsEnabled&#34;: false,&#xA;    &#34;LogName&#34;: &#34;Application&#34;,&#xA;    &#34;SourceName&#34;: &#34;ClassifiedAds.WebAPI&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Write to Local file (./logs/log.txt). Always enabled. &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Logging&#34;: {&#xA;  &#34;File&#34;: {&#xA;    &#34;MinimumLogEventLevel&#34;: &#34;Information&#34;&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Write to Elasticsearch: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Logging&#34;: {&#xA;  &#34;Elasticsearch&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;Host&#34;: &#34;http://localhost:9200&#34;,&#xA;    &#34;IndexFormat&#34;: &#34;classifiedads&#34;,&#xA;    &#34;MinimumLogEventLevel&#34;: &#34;Information&#34;&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Write to Windows Event Log (Windows only): &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Logging&#34;: {&#xA;  &#34;EventLog&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;LogName&#34;: &#34;Application&#34;,&#xA;    &#34;SourceName&#34;: &#34;ClassifiedAds.WebAPI&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Enable all options: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Logging&#34;: {&#xA;  &#34;LogLevel&#34;: {&#xA;    &#34;Default&#34;: &#34;Warning&#34;&#xA;  },&#x9;&#xA;  &#34;File&#34;: {&#xA;    &#34;MinimumLogEventLevel&#34;: &#34;Information&#34;&#xA;  },&#xA;  &#34;Elasticsearch&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;Host&#34;: &#34;http://localhost:9200&#34;,&#xA;    &#34;IndexFormat&#34;: &#34;classifiedads&#34;,&#xA;    &#34;MinimumLogEventLevel&#34;: &#34;Information&#34;&#xA;  },&#xA;  &#34;EventLog&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;LogName&#34;: &#34;Application&#34;,&#xA;    &#34;SourceName&#34;: &#34;ClassifiedAds.WebAPI&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Caching&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open and jump to &lt;strong&gt;Caching&lt;/strong&gt; section of below files: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;ClassifiedAds.IdentityServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Caching&#34;: {&#xA;  &#34;InMemory&#34;: {&#xA;&#xA;  },&#xA;  &#34;Distributed&#34;: {&#xA;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Configure options for In Memory Cache: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Caching&#34;: {&#xA;  &#34;InMemory&#34;: {&#xA;    &#34;SizeLimit&#34;: null&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use In Memory Distributed Cache (For Local Testing): &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Caching&#34;: {&#xA;  &#34;Distributed&#34;: {&#xA;    &#34;Provider&#34;: &#34;InMemory&#34;,&#xA;    &#34;InMemory&#34;: {&#xA;      &#34;SizeLimit&#34;: null&#xA;    }&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use Redis Distributed Cache: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Caching&#34;: {&#xA;  &#34;Distributed&#34;: {&#xA;    &#34;Provider&#34;: &#34;Redis&#34;,&#xA;    &#34;Redis&#34;: {&#xA;      &#34;Configuration&#34;: &#34;xxx.redis.cache.windows.net:6380,password=xxx,ssl=True,abortConnect=False&#34;,&#xA;      &#34;InstanceName&#34;: &#34;&#34;&#xA;    }&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use Sql Server Distributed Cache: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;dotnet tool install --global dotnet-sql-cache --version=&#34;5.0&#34;&#xA;dotnet sql-cache create &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#&#34; dbo CacheEntries&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Caching&#34;: {&#xA;  &#34;Distributed&#34;: {&#xA;    &#34;Provider&#34;: &#34;SqlServer&#34;,&#xA;    &#34;SqlServer&#34;: {&#xA;      &#34;ConnectionString&#34;: &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#&#34;,&#xA;      &#34;SchemaName&#34;: &#34;dbo&#34;,&#xA;      &#34;TableName&#34;: &#34;CacheEntries&#34;&#xA;    }&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Monitoring&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open and jump to &lt;strong&gt;Monitoring&lt;/strong&gt; section of below files: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;ClassifiedAds.IdentityServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Monitoring&#34;: {&#xA;  &#34;MiniProfiler&#34;: {&#xA;    &#xA;  },&#xA;  &#34;AzureApplicationInsights&#34;: {&#xA;    &#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use MiniProfiler: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Monitoring&#34;: {&#xA;  &#34;MiniProfiler&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;SqlServerStorage&#34;: {&#xA;      &#34;ConectionString&#34;: &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False&#34;,&#xA;      &#34;ProfilersTable&#34;: &#34;MiniProfilers&#34;,&#xA;      &#34;TimingsTable&#34;: &#34;MiniProfilerTimings&#34;,&#xA;      &#34;ClientTimingsTable&#34;: &#34;MiniProfilerClientTimings&#34;&#xA;    }&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use Azure Application Insights: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Monitoring&#34;: {&#xA;  &#34;AzureApplicationInsights&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;&#x9;&#34;InstrumentationKey&#34;: &#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;,&#xA;&#x9;&#34;EnableSqlCommandTextInstrumentation&#34;: true&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use AppMetrics: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Monitoring&#34;: {&#xA;  &#34;AppMetrics&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;MetricsOptions&#34;: {&#xA;      &#34;DefaultContextLabel&#34;: &#34;ClassifiedAds.WebAPI&#34;,&#xA;      &#34;Enabled&#34;: true,&#xA;      &#34;ReportingEnabled&#34;: true&#xA;    },&#xA;    &#34;MetricsWebTrackingOptions&#34;: {&#xA;      &#34;ApdexTrackingEnabled&#34;: true,&#xA;      &#34;ApdexTSeconds&#34;: 0.1,&#xA;      &#34;IgnoredHttpStatusCodes&#34;: [ 404 ],&#xA;      &#34;IgnoredRoutesRegexPatterns&#34;: [],&#xA;      &#34;OAuth2TrackingEnabled&#34;: true&#xA;    },&#xA;    &#34;MetricEndpointsOptions&#34;: {&#xA;      &#34;MetricsEndpointEnabled&#34;: true,&#xA;      &#34;MetricsTextEndpointEnabled&#34;: true,&#xA;      &#34;EnvironmentInfoEndpointEnabled&#34;: true&#xA;    }&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use Both: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Monitoring&#34;: {&#xA;  &#34;MiniProfiler&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;SqlServerStorage&#34;: {&#xA;      &#34;ConectionString&#34;: &#34;Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False&#34;,&#xA;      &#34;ProfilersTable&#34;: &#34;MiniProfilers&#34;,&#xA;      &#34;TimingsTable&#34;: &#34;MiniProfilerTimings&#34;,&#xA;      &#34;ClientTimingsTable&#34;: &#34;MiniProfilerClientTimings&#34;&#xA;    }&#xA;  },&#xA;  &#34;AzureApplicationInsights&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;InstrumentationKey&#34;: &#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#34;,&#xA;    &#34;EnableSqlCommandTextInstrumentation&#34;: true&#xA;  },&#xA;  &#34;AppMetrics&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;MetricsOptions&#34;: {&#xA;      &#34;DefaultContextLabel&#34;: &#34;ClassifiedAds.WebAPI&#34;,&#xA;      &#34;Enabled&#34;: true,&#xA;      &#34;ReportingEnabled&#34;: true&#xA;    },&#xA;    &#34;MetricsWebTrackingOptions&#34;: {&#xA;      &#34;ApdexTrackingEnabled&#34;: true,&#xA;      &#34;ApdexTSeconds&#34;: 0.1,&#xA;      &#34;IgnoredHttpStatusCodes&#34;: [ 404 ],&#xA;      &#34;IgnoredRoutesRegexPatterns&#34;: [],&#xA;      &#34;OAuth2TrackingEnabled&#34;: true&#xA;    },&#xA;    &#34;MetricEndpointsOptions&#34;: {&#xA;      &#34;MetricsEndpointEnabled&#34;: true,&#xA;      &#34;MetricsTextEndpointEnabled&#34;: true,&#xA;      &#34;EnvironmentInfoEndpointEnabled&#34;: true&#xA;    }&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Interceptors&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open and jump to &lt;strong&gt;Interceptors&lt;/strong&gt; section of below files: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;ClassifiedAds.IdentityServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.BackgroundServer/appsettings.json&#34;&gt;ClassifiedAds.BackgroundServer/appsettings.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Interceptors&#34;: {&#xA;  &#34;LoggingInterceptor&#34;: true,&#xA;  &#34;ErrorCatchingInterceptor&#34;: false&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Security Headers&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;SecurityHeaders&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;SecurityHeaders&#34;: {&#xA;  &#34;Cache-Control&#34;: &#34;no-cache, no-store, must-revalidate&#34;,&#xA;  &#34;Pragma&#34;: &#34;no-cache&#34;,&#xA;  &#34;Expires&#34;: &#34;0&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebMVC/appsettings.json&#34;&gt;ClassifiedAds.WebMVC/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;SecurityHeaders&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;SecurityHeaders&#34;: {&#xA;  &#34;Content-Security-Policy&#34;: &#34;form-action &#39;self&#39;; frame-ancestors &#39;none&#39;&#34;,&#xA;  &#34;Feature-Policy&#34;: &#34;camera &#39;none&#39;&#34;,&#xA;  &#34;Referrer-Policy&#34;: &#34;strict-origin-when-cross-origin&#34;,&#xA;  &#34;X-Content-Type-Options&#34;: &#34;nosniff&#34;,&#xA;  &#34;X-Frame-Options&#34;: &#34;DENY&#34;,&#xA;  &#34;X-XSS-Protection&#34;: &#34;1; mode=block&#34;,&#xA;  &#34;Cache-Control&#34;: &#34;no-cache, no-store, must-revalidate&#34;,&#xA;  &#34;Pragma&#34;: &#34;no-cache&#34;,&#xA;  &#34;Expires&#34;: &#34;0&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Cross-Origin Resource Sharing (CORS)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.WebAPI/appsettings.json&#34;&gt;ClassifiedAds.WebAPI/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;CORS&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;CORS&#34;: {&#xA;  &#34;AllowAnyOrigin&#34;: false,&#xA;  &#34;AllowedOrigins&#34;: [ &#34;http://localhost:4200&#34;, &#34;http://localhost:3000&#34;, &#34;http://localhost:8080&#34; ]&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.NotificationServer/appsettings.json&#34;&gt;ClassifiedAds.NotificationServer/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;CORS&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;CORS&#34;: {&#xA;  &#34;AllowedOrigins&#34;: [ &#34;https://localhost:44364&#34;, &#34;http://host.docker.internal:9003&#34; ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;External Login&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IdentityServer/appsettings.json&#34;&gt;ClassifiedAds.IdentityServer/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;ExternalLogin&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;ExternalLogin&#34;: {&#xA;  &#34;AzureActiveDirectory&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;Authority&#34;: &#34;https://login.microsoftonline.com/&amp;lt;Directory (tenant) ID&amp;gt;&#34;,&#xA;    &#34;ClientId&#34;: &#34;&amp;lt;Application (client) ID&#34;,&#xA;    &#34;ClientSecret&#34;: &#34;xxx&#34;&#xA;  },&#xA;  &#34;Microsoft&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;ClientId&#34;: &#34;&amp;lt;Application (client) ID&#34;,&#xA;    &#34;ClientSecret&#34;: &#34;xxx&#34;&#xA;  },&#xA;  &#34;Google&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;ClientId&#34;: &#34;xxx&#34;,&#xA;    &#34;ClientSecret&#34;: &#34;xxx&#34;&#xA;  },&#xA;  &#34;Facebook&#34;: {&#xA;    &#34;IsEnabled&#34;: true,&#xA;    &#34;AppId&#34;: &#34;xxx&#34;,&#xA;    &#34;AppSecret&#34;: &#34;xxx&#34;&#xA;  }&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Sending Email&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.BackgroundServer/appsettings.json&#34;&gt;ClassifiedAds.BackgroundServer/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;Notification -&amp;gt; Email&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Notification&#34;: {&#xA;  &#34;Email&#34;: {&#xA;    &#34;Provider&#34;: &#34;Fake&#34;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use SmtpClient: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Notification&#34;: {&#xA;  &#34;Email&#34;: {&#xA;    &#34;Provider&#34;: &#34;SmtpClient&#34;,&#xA;    &#34;SmtpClient&#34;: {&#xA;      &#34;Host&#34;: &#34;localhost&#34;,&#xA;      &#34;Port&#34;: &#34;&#34;,&#xA;      &#34;UserName&#34;: &#34;&#34;,&#xA;      &#34;Password&#34;: &#34;&#34;,&#xA;      &#34;EnableSsl&#34;: &#34;&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Sending SMS&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.BackgroundServer/appsettings.json&#34;&gt;ClassifiedAds.BackgroundServer/appsettings.json&lt;/a&gt; and jump to &lt;strong&gt;Notification -&amp;gt; Sms&lt;/strong&gt; section: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Notification&#34;: {&#xA;  &#34;Sms&#34;: {&#xA;    &#34;Provider&#34;: &#34;Fake&#34;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Use Twilio &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;Notification&#34;: {&#xA;  &#34;Sms&#34;: {&#xA;    &#34;Provider&#34;: &#34;Twilio&#34;,&#xA;    &#34;Twilio&#34;: {&#xA;      &#34;AccountSId&#34;: &#34;&#34;,&#xA;      &#34;AuthToken&#34;: &#34;&#34;,&#xA;      &#34;FromNumber&#34;: &#34;&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Set Startup Projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/startup-projects.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run or Debug the Solution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Web MVC Home Page: &lt;a href=&#34;https://localhost:44364/&#34;&gt;https://localhost:44364/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/web-mvc-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to Health Checks UI &lt;a href=&#34;https://localhost:44364/healthchecks-ui#/healthchecks&#34;&gt;https://localhost:44364/healthchecks-ui#/healthchecks&lt;/a&gt; and make sure everything is green.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/health-checks-ui.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login on Identity Server:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Option 1: Use default created account: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;User Name: &lt;a href=&#34;mailto:phong@gmail.com&#34;&gt;phong@gmail.com&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Password: v*7Un8b4rcN@&amp;lt;-RN&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Option 2: Register new account at &lt;a href=&#34;https://localhost:44367/Account/Register&#34;&gt;https://localhost:44367/Account/Register&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/identity-server-login-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Blazor Home Page at: &lt;a href=&#34;https://localhost:44331&#34;&gt;https://localhost:44331&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/blazor-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Build and Run Single Page Applications:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Angular:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Navigate to folder: &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/angular/&#34;&gt;UIs/angular/&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm install&#xA;ng serve&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/angular/src/environments/environment.ts&#34;&gt;environment.ts&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/angular/src/environments/environment.prod.ts&#34;&gt;environment.prod.ts&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export const environment = {&#xA;  OpenIdConnect: {&#xA;    Authority: &#34;https://localhost:44367&#34;,&#xA;    ClientId: &#34;ClassifiedAds.Angular&#34;&#xA;  },&#xA;  ResourceServer: {&#xA;    Endpoint: &#34;https://localhost:44312/api/&#34;&#xA;  },&#xA;  CurrentUrl: &#34;http://localhost:4200/&#34;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;http://localhost:4200/&#34;&gt;http://localhost:4200/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/angular-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;React:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Navigate to folder: &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/reactjs/&#34;&gt;UIs/reactjs/&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm install&#xA;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/reactjs/src/environments/environment.dev.js&#34;&gt;environment.dev.js&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/reactjs/src/environments/environment.js&#34;&gt;environment.js&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const environment = {&#xA;    OpenIdConnect: {&#xA;        Authority: &#34;https://localhost:44367&#34;,&#xA;        ClientId: &#34;ClassifiedAds.React&#34;&#xA;    },&#xA;    ResourceServer: {&#xA;        Endpoint: &#34;https://localhost:44312/api/&#34;&#xA;    },&#xA;    CurrentUrl: &#34;http://localhost:3000/&#34;&#xA;};&#xA;export default environment;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/react-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vue:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate to folder: &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/vuejs/&#34;&gt;UIs/vuejs/&lt;/a&gt; &lt;pre&gt;&lt;code&gt;npm install&#xA;npm run serve&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/vuejs/environments/environment.dev.js&#34;&gt;environment.dev.js&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/UIs/vuejs/environments/environment.js&#34;&gt;environment.dev.js&lt;/a&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const environment = {&#xA;    OpenIdConnect: {&#xA;        Authority: &#34;https://localhost:44367&#34;,&#xA;        ClientId: &#34;ClassifiedAds.Vue&#34;&#xA;    },&#xA;    ResourceServer: {&#xA;        Endpoint: &#34;https://localhost:44312/api/&#34;&#xA;    },&#xA;    CurrentUrl: &#34;http://localhost:8080/&#34;&#xA;};&#xA;export default environment;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/vue-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Before Login, go to Identity Server &lt;a href=&#34;https://localhost:44367/Client&#34;&gt;https://localhost:44367/Client&lt;/a&gt; to make sure application clients have been registered:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/identity-server-clients-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Run on Docker Containers:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add Migrations if you haven&#39;t done on previous steps:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install &lt;strong&gt;dotnet-ef&lt;/strong&gt; cli: &lt;pre&gt;&lt;code&gt;dotnet tool install --global dotnet-ef --version=&#34;5.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Navigate to &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.Migrator/&#34;&gt;ClassifiedAds.Migrator&lt;/a&gt; and run these commands: &lt;pre&gt;&lt;code&gt;dotnet ef migrations add Init --context AdsDbContext -o Migrations/AdsDb&#xA;dotnet ef migrations add Init --context ConfigurationDbContext -o Migrations/ConfigurationDb&#xA;dotnet ef migrations add Init --context PersistedGrantDbContext -o Migrations/PersistedGrantDb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/&#34;&gt;Monolith&lt;/a&gt; and run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;docker-compose build&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Web MVC Home Page at: &lt;a href=&#34;http://host.docker.internal:9003&#34;&gt;http://host.docker.internal:9003&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/web-mvc-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to Health Checks UI &lt;a href=&#34;http://host.docker.internal:9003/healthchecks-ui#/healthchecks&#34;&gt;http://host.docker.internal:9003/healthchecks-ui#/healthchecks&lt;/a&gt; and make sure everything is green.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/health-checks-ui-container.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Login on Identity Server:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use default created account: &lt;a href=&#34;mailto:phong@gmail.com&#34;&gt;phong@gmail.com&lt;/a&gt; / v*7Un8b4rcN@&amp;lt;-RN&lt;/li&gt; &#xA;   &lt;li&gt;Register new account at &lt;a href=&#34;http://host.docker.internal:9000/Account/Register&#34;&gt;http://host.docker.internal:9000/Account/Register&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Blazor Home Page at: &lt;a href=&#34;http://host.docker.internal:9008&#34;&gt;http://host.docker.internal:9008&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/blazor-home-page.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Run Integration &amp;amp; End to End Tests:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.IntegrationTests/appsettings.json&#34;&gt;ClassifiedAds.IntegrationTests/appsettings.json&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;OpenIdConnect&#34;: {&#xA;    &#34;Authority&#34;: &#34;https://localhost:44367&#34;,&#xA;    &#34;ClientId&#34;: &#34;ClassifiedAds.WebMVC&#34;,&#xA;    &#34;ClientSecret&#34;: &#34;secret&#34;,&#xA;    &#34;RequireHttpsMetadata&#34;: &#34;true&#34;&#xA;  },&#xA;  &#34;WebAPI&#34;: {&#xA;    &#34;Endpoint&#34;: &#34;https://localhost:44312&#34;&#xA;  },&#xA;  &#34;GraphQL&#34;: {&#xA;    &#34;Endpoint&#34;: &#34;https://localhost:44392/graphql&#34;&#xA;  },&#xA;  &#34;Login&#34;: {&#xA;    &#34;UserName&#34;: &#34;phong@gmail.com&#34;,&#xA;    &#34;Password&#34;: &#34;v*7Un8b4rcN@&amp;lt;-RN&#34;,&#xA;    &#34;Scope&#34;: &#34;ClassifiedAds.WebAPI&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://chromedriver.chromium.org/downloads&#34;&gt;Chrome Driver&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/chrome_driver_path.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/Monolith/ClassifiedAds.EndToEndTests/appsettings.json&#34;&gt;ClassifiedAds.EndToEndTests/appsettings.json&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;ChromeDriverPath&#34;: &#34;D:\\Downloads\\chromedriver_win32\\72&#34;,&#xA;  &#34;Login&#34;: {&#xA;    &#34;Url&#34;: &#34;https://localhost:44364/Home/Login&#34;,&#xA;    &#34;UserName&#34;: &#34;phong@gmail.com&#34;,&#xA;    &#34;Password&#34;: &#34;v*7Un8b4rcN@&amp;lt;-RN&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/docs/imgs/run_e2e_tests.gif&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Application URLs:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phongnguyend/Practical.CleanArchitecture/wiki/Application-URLs&#34;&gt;https://github.com/phongnguyend/Practical.CleanArchitecture/wiki/Application-URLs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phongnguyend/Practical.CleanArchitecture/wiki/Roadmap&#34;&gt;https://github.com/phongnguyend/Practical.CleanArchitecture/wiki/Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Licence üîë&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h3&gt;Duende.IdentityServer License üîë&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Duende.IdentityServer&lt;/strong&gt; is available under both a &lt;strong&gt;FOSS (RPL) and a commercial&lt;/strong&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;For the production environment, it is necessary to get a specific license, if you would like more information about the licensing of &lt;strong&gt;Duende.IdentityServer&lt;/strong&gt; - please check &lt;a href=&#34;https://duendesoftware.com/products/identityserver#pricing&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The source code under &lt;a href=&#34;https://raw.githubusercontent.com/phongnguyend/Practical.CleanArchitecture/master/src/IdentityServer/Duende&#34;&gt;/src/IdentityServer/Duende&lt;/a&gt; folder uses the source code from &lt;a href=&#34;https://github.com/DuendeSoftware/IdentityServer.Quickstart.UI&#34;&gt;https://github.com/DuendeSoftware/IdentityServer.Quickstart.UI&lt;/a&gt; which is under the terms of the following &lt;a href=&#34;https://github.com/DuendeSoftware/IdentityServer.Quickstart.UI/raw/main/LICENSE&#34;&gt;&lt;strong&gt;license&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;EPPLus License üîë&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;EPPlus 5&lt;/strong&gt; can be used under Polyform Noncommercial license or a commercial license.&lt;/p&gt; &#xA;&lt;p&gt;For the production environment, it is necessary to get a specific license, if you would like more information about the licensing of &lt;strong&gt;EPPlus 5&lt;/strong&gt; - please check &lt;a href=&#34;https://www.epplussoftware.com/en/LicenseOverview&#34;&gt;this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>