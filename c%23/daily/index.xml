<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-29T01:24:13Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mertdas/RedPersist</title>
    <updated>2023-09-29T01:24:13Z</updated>
    <id>tag:github.com,2023-09-29:/mertdas/RedPersist</id>
    <link href="https://github.com/mertdas/RedPersist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RedPersist&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48562581/201777510-1f868f4d-a273-403d-8270-6f8b0cb865d5.png&#34; alt=&#34;redpersist&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;RedPersist is a Windows Persistence tool written in C#&lt;/p&gt; &#xA;&lt;h2&gt;Compiling Project&lt;/h2&gt; &#xA;&lt;p&gt;Below 3rd party libraries are used in this project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;TaskScheduler&lt;/b&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/dahall/TaskScheduler&#34;&gt;https://github.com/dahall/TaskScheduler&lt;/a&gt;&lt;br&gt; &lt;b&gt;Fody&lt;/b&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/Fody/Fody&#34;&gt;https://github.com/Fody/Fody&lt;/a&gt;&lt;br&gt;&lt;br&gt; Load the Visual Studio project up and go to &#34;Tools&#34; &amp;gt; &#34;NuGet Package Manager&#34; &amp;gt; &#34;Package Manager Settings&#34;&lt;br&gt; Open &#34;NuGet Package Manager&#34; &amp;gt; &#34;Package Sources&#34;&lt;br&gt;&lt;br&gt; &lt;b&gt;Install the Fody&lt;/b&gt;&lt;br&gt;&lt;code&gt;Install-Package Costura.Fody -Version 3.3.3&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;Install the Taskscheduler&lt;/b&gt;&lt;br&gt;&lt;code&gt;Install-Package TaskScheduler -Version 2.8.11&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mertdas/RedPersist/assets/48562581/d7a4b3e9-9ef3-4bd4-86b6-cb162975c2c6&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use it with execute-assembly or standalone executable&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;RedPersist.exe --method C:\Path\to\executable.exe&lt;/code&gt;&lt;br&gt; &lt;code&gt;RedPersist.exe --help&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Available Methods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;b&gt;--help/-h&lt;/b&gt; : Help Menu&lt;br&gt; &lt;code&gt;RedPersist.exe --help&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--eventviewer&lt;/b&gt; : Persistence via Eventviewer Helper&lt;br&gt; &lt;code&gt;RedPersist.exe --eventviewer C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--startup&lt;/b&gt; : Persistence via Startup&lt;br&gt; &lt;code&gt;RedPersist.exe --startup C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--autologon&lt;/b&gt; : Persistence via Autologon&lt;br&gt; &lt;code&gt;RedPersist.exe --startup C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--screensaver&lt;/b&gt; : Persistence via Screensaver&lt;br&gt; &lt;code&gt;RedPersist.exe --screensaver C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--wmi&lt;/b&gt; : Persistence via Wmi Event Subscription(To Notepad.exe)&lt;br&gt; &lt;code&gt;RedPersist.exe --wmi C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--schedule&lt;/b&gt; : Persistence via Scheduled Tasks&lt;br&gt; &lt;code&gt;RedPersist.exe --schedule TaskName C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--extension&lt;/b&gt; : Persistence via Extension Hijacking(TXT)&lt;br&gt; &lt;code&gt;RedPersist.exe --extension C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--winlogon&lt;/b&gt; : Persistence via UserInitMprLogonScript&lt;br&gt; &lt;code&gt;RedPersist.exe --winlogon TaskName C:\Users\User\exe.exe&lt;/code&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;--powershell&lt;/b&gt; : Persistence via Powershell Profile&lt;br&gt; &lt;code&gt;RedPersist.exe--pwsh C:\Users\User\Documents\windowspowershell C:\Users\User\Documents\windowspowershell\profile.ps1 C:\Users\User\Desktop\exe.exe&lt;/code&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48562581/201770794-8518b92b-6315-4924-817a-71cefd975c41.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ONLYOFFICE/CommunityServer</title>
    <updated>2023-09-29T01:24:13Z</updated>
    <id>tag:github.com,2023-09-29:/ONLYOFFICE/CommunityServer</id>
    <link href="https://github.com/ONLYOFFICE/CommunityServer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free open source office suite with business productivity tools: document and project management, CRM, mail aggregator.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.onlyoffice.com/&#34;&gt;&lt;img alt=&#34;https://www.onlyoffice.com/&#34; width=&#34;500px&#34; src=&#34;https://static-www.onlyoffice.com/images/logo_small.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.onlyoffice.com/&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://www.onlyoffice.com/server-solutions.aspx&#34;&gt;Products&lt;/a&gt; | &lt;a href=&#34;https://helpcenter.onlyoffice.com/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://api.onlyoffice.com/&#34;&gt;API&lt;/a&gt; | &lt;a href=&#34;https://www.onlyoffice.com/about.aspx&#34;&gt;About&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.facebook.com/ONLYOFFICE-833032526736775/&#34;&gt;&lt;img alt=&#34;https://www.facebook.com/ONLYOFFICE-833032526736775/&#34; src=&#34;https://download.onlyoffice.com/assets/logo/opensource/fb.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ONLY_OFFICE&#34;&gt;&lt;img alt=&#34;https://twitter.com/ONLY_OFFICE&#34; src=&#34;https://download.onlyoffice.com/assets/logo/opensource/tw.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/user/onlyofficeTV&#34;&gt;&lt;img alt=&#34;https://www.youtube.com/user/onlyofficeTV&#34; src=&#34;https://download.onlyoffice.com/assets/logo/opensource/yt.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.instagram.com/the_onlyoffice/&#34;&gt;&lt;img alt=&#34;https://www.instagram.com/the_onlyoffice/&#34; src=&#34;https://download.onlyoffice.com/assets/logo/opensource/in.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img alt=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34; src=&#34;https://img.shields.io/badge/License-Apache%20v2.0-green.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ONLYOFFICE/portals/releases&#34;&gt;&lt;img alt=&#34;https://github.com/ONLYOFFICE/portals/releases&#34; src=&#34;https://img.shields.io/badge/release-11.5.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ONLYOFFICE Community Server is a free open-source collaborative system developed to manage documents, projects, customer relationship and email correspondence, all in one place.&lt;/p&gt; &#xA;&lt;p&gt;Starting from version 11.0, Community Server is distributed as ONLYOFFICE Groups on terms of Apache License.&lt;/p&gt; &#xA;&lt;h2&gt;Functionality&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross platform solution: Linux, Windows&lt;/li&gt; &#xA; &lt;li&gt;Document management&lt;/li&gt; &#xA; &lt;li&gt;Integration with Google Drive, Box, Dropbox, OneDrive, OwnCloud&lt;/li&gt; &#xA; &lt;li&gt;File sharing&lt;/li&gt; &#xA; &lt;li&gt;Document embedding&lt;/li&gt; &#xA; &lt;li&gt;Access rights management&lt;/li&gt; &#xA; &lt;li&gt;Customizable CRM&lt;/li&gt; &#xA; &lt;li&gt;Web-to-lead form&lt;/li&gt; &#xA; &lt;li&gt;Invoicing system&lt;/li&gt; &#xA; &lt;li&gt;Project Management&lt;/li&gt; &#xA; &lt;li&gt;Gantt Chart&lt;/li&gt; &#xA; &lt;li&gt;Milestones, task dependencies and subtasks&lt;/li&gt; &#xA; &lt;li&gt;Time tracking&lt;/li&gt; &#xA; &lt;li&gt;Automated reports&lt;/li&gt; &#xA; &lt;li&gt;Blogs, forums, polls, wiki&lt;/li&gt; &#xA; &lt;li&gt;Calendar&lt;/li&gt; &#xA; &lt;li&gt;Email Aggregator&lt;/li&gt; &#xA; &lt;li&gt;People module (employee database)&lt;/li&gt; &#xA; &lt;li&gt;Support of more than 20 languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Community Server (distributed as ONLYOFFICE Groups) is a part of &lt;strong&gt;ONLYOFFICE Workspace&lt;/strong&gt; that also includes &lt;a href=&#34;https://github.com/ONLYOFFICE/DocumentServer&#34;&gt;Document Server (distributed as ONLYOFFICE Docs)&lt;/a&gt;, &lt;a href=&#34;https://github.com/ONLYOFFICE/Docker-MailServer&#34;&gt;Mail Server&lt;/a&gt;, &lt;a href=&#34;https://github.com/ONLYOFFICE/XMPPServer&#34;&gt;Talk (instant messaging app)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Control Panel for administrating &lt;strong&gt;ONLYOFFICE Workspace&lt;/strong&gt; can be found in &lt;a href=&#34;https://github.com/ONLYOFFICE/ControlPanel&#34;&gt;this repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;To compile the source code, follow this &lt;a href=&#34;https://helpcenter.onlyoffice.com/server/windows/community/compile-source-code.aspx&#34;&gt;instruction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting your own modules&lt;/h2&gt; &#xA;&lt;p&gt;You can now create your own modules and connect them to ONLYOFFICE Groups (packaged as Community Server). See &lt;a href=&#34;https://helpcenter.onlyoffice.com/server/community/community-server-custom-modules.aspx&#34; title=&#34;https://helpcenter.onlyoffice.com/server/community/community-server-custom-modules.aspx&#34;&gt;this instruction&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Project information&lt;/h2&gt; &#xA;&lt;p&gt;Official website: &lt;a href=&#34;https://www.onlyoffice.com?utm_source=github&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=GitHubCS&#34; title=&#34;http://www.onlyoffice.com?utm_source=github&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=GitHubCS&#34;&gt;https://www.onlyoffice.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code repository: &lt;a href=&#34;https://github.com/ONLYOFFICE/CommunityServer&#34; title=&#34;https://github.com/ONLYOFFICE/CommunityServer&#34;&gt;https://github.com/ONLYOFFICE/CommunityServer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker Image: &lt;a href=&#34;https://github.com/ONLYOFFICE/Docker-CommunityServer&#34; title=&#34;https://github.com/ONLYOFFICE/Docker-CommunityServer&#34;&gt;https://github.com/ONLYOFFICE/Docker-CommunityServer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;License: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ONLYOFFICE Workspace: &lt;a href=&#34;https://www.onlyoffice.com/workspace.aspx?utm_source=github&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=GitHubCS&#34;&gt;https://www.onlyoffice.com/workspace.aspx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User feedback and support&lt;/h2&gt; &#xA;&lt;p&gt;If you have any problems with or questions about &lt;a href=&#34;https://github.com/ONLYOFFICE&#34;&gt;ONLYOFFICE&lt;/a&gt;, please visit our official forum to find answers to your questions: &lt;a href=&#34;http://dev.onlyoffice.org&#34;&gt;dev.onlyoffice.org&lt;/a&gt; or you can ask and answer ONLYOFFICE development questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/onlyoffice&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>maliming/Abp.GeneralTree</title>
    <updated>2023-09-29T01:24:13Z</updated>
    <id>tag:github.com,2023-09-29:/maliming/Abp.GeneralTree</id>
    <link href="https://github.com/maliming/Abp.GeneralTree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For Abp vNext&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/maliming/Abp.GeneralTree/master/GeneralTree.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &#xA;&lt;h1&gt;Abp GeneralTree&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/maliming/Abp.GeneralTree/workflows/.NET%20Core/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/Abp.GeneralTree&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/abp.GeneralTree.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/maliming/Abp.GeneralTree/raw/master/README.CN.md&#34;&gt;GeneralTree中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Based on Abp module system, perfect integration Abp framework.&lt;/li&gt; &#xA; &lt;li&gt;Support for custom primary key (value type, reference type).&lt;/li&gt; &#xA; &lt;li&gt;Automating the assignment of Code,Level,FullName extends other attributes of the entity.&lt;/li&gt; &#xA; &lt;li&gt;Efficient management of entities based on Code, Level features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Suitable for managing a variety of tree structure entities, such as: region, organization, category, industry and other entities with parent-child Entity.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Install-Package Abp.GeneralTree&#xA;dotnet add package Abp.GeneralTree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First you need to add the dependency to your module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[DependsOn(typeof(GeneralTreeModule))]&#xA;public class YourProjectModule : AbpModule&#xA;{&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GeneralTree provides a generic &lt;code&gt;IGeneralTree&lt;/code&gt; interface, which inherits this interface, passing in generic parameter entities and primary keys (primary keys can be value types and reference types)&lt;/p&gt; &#xA;&lt;p&gt;Value type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public interface IGeneralTree&amp;lt;TTree, TPrimaryKey&amp;gt; : IEntity&amp;lt;TPrimaryKey&amp;gt;&#xA;    where TPrimaryKey : struct&#xA;{&#xA;      string Name { get; set; }&#xA;&#xA;      string FullName { get; set; }&#xA;&#xA;      string Code { get; set; }&#xA;&#xA;      int Level { get; set; }&#xA;&#xA;      TTree Parent { get; set; }&#xA;&#xA;      TPrimaryKey? ParentId { get; set; }&#xA;&#xA;      ICollection&amp;lt;TTree&amp;gt; Children { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reference type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public interface IGeneralTreeWithReferenceType&amp;lt;TTree, TPrimaryKey&amp;gt; : IEntity&amp;lt;TPrimaryKey&amp;gt;&#xA;    where TPrimaryKey : class&#xA;{&#xA;      string Name { get; set; }&#xA;&#xA;      string FullName { get; set; }&#xA;&#xA;      string Code { get; set; }&#xA;&#xA;      int Level { get; set; }&#xA;&#xA;      TTree Parent { get; set; }&#xA;&#xA;      TPrimaryKey ParentId { get; set; }&#xA;&#xA;      ICollection&amp;lt;TTree&amp;gt; Children { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take the Region entity as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class Region : Entity&amp;lt;long&amp;gt;, IGeneralTree&amp;lt;Region, long&amp;gt;&#xA;{&#xA;      public virtual string Name { get; set; }&#xA;&#xA;      public virtual string FullName { get; set; }&#xA;&#xA;      public virtual string Code { get; set; }&#xA;&#xA;      public virtual int Level { get; set; }&#xA;&#xA;      public virtual Region Parent { get; set; }&#xA;&#xA;      public virtual long? ParentId { get; set; }&#xA;&#xA;      public virtual ICollection&amp;lt;Region&amp;gt; Children { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entities implement properties under generic interfaces, and GeneralTree automatically maintains these properties (FullName, Code, Level, ParentId...)&lt;/p&gt; &#xA;&lt;p&gt;To create, update, move, delete, etc., use &lt;code&gt;IGeneralTreeManager&amp;lt;TTree, TPrimaryKey&amp;gt;&lt;/code&gt;, and the generic parameters of the interface are the same as above.&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;We first initialize some regional information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var beijing = new Region&#xA;{&#xA;      Name = &#34;beijing&#34;&#xA;};&#xA;await _generalRegionTreeManager.CreateAsync(beijing);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this time, the entity information of beijing is as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Id&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FullName&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Level&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ParentId&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;beijing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;beijing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00001&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;NULL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;GeneralTree automatically maintains the modified properties. It provides the basis for efficient management later.&lt;/p&gt; &#xA;&lt;p&gt;Add some areas again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var beijing = new Region&#xA;{&#xA;      Name = &#34;beijing&#34;&#xA;};&#xA;await _generalRegionTreeManager.CreateAsync(beijing);&#xA;await CurrentUnitOfWork.SaveChangesAsync();&#xA;&#xA;var dongcheng = new Region&#xA;{&#xA;      Name = &#34;dongcheng&#34;,&#xA;      ParentId = beijing.Id&#xA;};&#xA;&#xA;var xicheng = new Region&#xA;{&#xA;      Name = &#34;xicheng&#34;,&#xA;      ParentId = beijing.Id&#xA;};&#xA;await _generalRegionTreeManager.CreateAsync(dongcheng);&#xA;await _generalRegionTreeManager.CreateAsync(xicheng);&#xA;&#xA;var hebei = new Region&#xA;{&#xA;      Name = &#34;hebei&#34;&#xA;};&#xA;await _generalRegionTreeManager.CreateAsync(hebei);&#xA;await CurrentUnitOfWork.SaveChangesAsync();&#xA;&#xA;var shijianzhuang = new Region&#xA;{&#xA;      Name = &#34;shijianzhuang&#34;,&#xA;      ParentId = hebei.Id&#xA;};&#xA;await _generalRegionTreeManager.CreateAsync(shijianzhuang);&#xA;await CurrentUnitOfWork.SaveChangesAsync();&#xA;&#xA;var changanqu = new Region&#xA;{&#xA;      Name = &#34;changanqu&#34;,&#xA;      ParentId = shijianzhuang.Id&#xA;};&#xA;var qiaoxiqu = new Region&#xA;{&#xA;      Name = &#34;qiaoxiqu&#34;,&#xA;      ParentId = shijianzhuang.Id&#xA;};&#xA;await _generalRegionTreeManager.CreateAsync(changanqu);&#xA;await _generalRegionTreeManager.CreateAsync(qiaoxiqu);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The results are as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Id&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;FullName&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Level&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ParentId&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;beijing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;beijing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00001&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;NULL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;dongcheng&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;beijing-dongcheng&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00001.00001&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;xicheng&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;beijing-xicheng&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00001.00002&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hebei&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hebei&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00002&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;NULL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;shijianzhuang&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hebei-shijianzhuang&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00002.00001&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;changanqu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hebei-shijianzhuang-changanqu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00002.00001.00001&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;qiaoxiqu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;hebei-shijianzhuang-qiaoxiqu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00002.00001.00002&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The above operation has a batch method &lt;code&gt;BulkCreateAsync&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var beijing = new Region&#xA;{&#xA;      Name = &#34;beijing&#34;,&#xA;      Children = new List&amp;lt;Region&amp;gt;&#xA;      {&#xA;            new Region&#xA;            {&#xA;                  Name = &#34;dongcheng&#34;&#xA;            },&#xA;            new Region&#xA;            {&#xA;                  Name = &#34;dongcheng&#34;&#xA;            }&#xA;      }&#xA;};&#xA;await _generalRegionTreeManager.BulkCreateAsync(beijing);&#xA;await CurrentUnitOfWork.SaveChangesAsync();&#xA;&#xA;var hebei = new Region&#xA;{&#xA;      Name = &#34;hebei&#34;,&#xA;      Children = new List&amp;lt;Region&amp;gt;&#xA;      {&#xA;            new Region&#xA;            {&#xA;                  Name = &#34;shijiazhuang&#34;,&#xA;                  Children = new List&amp;lt;Region&amp;gt;&#xA;                  {&#xA;                        new Region&#xA;                        {&#xA;                              Name = &#34;changanqu&#34;&#xA;                        },&#xA;                        new Region&#xA;                        {&#xA;                              Name = &#34;qiaodongqu&#34;&#xA;                        }&#xA;                  }&#xA;            }&#xA;      }&#xA;};&#xA;await _generalRegionTreeManager.BulkCreateAsync(hebei);&#xA;await CurrentUnitOfWork.SaveChangesAsync();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Some operations of the tree entity&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Query all areas below Beijing does not include Beijing)&#xA;var beijing = await _regionRepository.FirstOrDefaultAsync(x =&amp;gt; x.Name == &#34;beijing&#34;);&#xA;var beijingChildren = _regionRepository.GetAll().Where(x =&amp;gt; x.Id != beijing.Id &amp;amp;&amp;amp; x.Code.StartsWith(beijing.Code));&#xA;&#xA;// Query the area below Beijing (all districts)&#xA;var beijing = await _regionRepository.FirstOrDefaultAsync(x =&amp;gt; x.Name == &#34;beijing&#34;);&#xA;var beijingChildren = _regionRepository.GetAll().Where(x =&amp;gt; x.Level == beijing.Level - 1 &amp;amp;&amp;amp; x.Code.StartsWith(beijing.Code));&#xA;&#xA;// Query Changan and all the parent above&#xA;var changanqu = await _regionRepository.FirstOrDefaultAsync(x =&amp;gt; x.Name == &#34;changanqu&#34;);&#xA;var parents = await _regionRepository.GetAllListAsync(x =&amp;gt; changanqu.Code.StartsWith(x.Code));&#xA;&#xA;// Query Changan top parent.&#xA;var changanqu = await _regionRepository.FirstOrDefaultAsync(x =&amp;gt; x.Name == &#34;changanqu&#34;);&#xA;var hebei =  await _regionRepository.FirstOrDefaultAsync(x =&amp;gt; x.Level == 1 &amp;amp;&amp;amp; changanqu.Code.Contains(x.Code));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public interface IGeneralTreeManager&amp;lt;TTree, TPrimaryKey&amp;gt;&#xA;      where TPrimaryKey : struct&#xA;      where TTree : class, IGeneralTree&amp;lt;TTree, TPrimaryKey&amp;gt;&#xA;{&#xA;      Task CreateAsync(TTree tree);&#xA;&#xA;      Task BulkCreateAsync(TTree tree, Action&amp;lt;TTree&amp;gt; childrenAction = null);&#xA;&#xA;      Task CreateChildrenAsync(TTree parent, ICollection&amp;lt;TTree&amp;gt; children, Action&amp;lt;TTree&amp;gt; childrenAction = null);&#xA;&#xA;      Task FillUpAsync(TTree tree, Action&amp;lt;TTree&amp;gt; childrenAction = null);&#xA;&#xA;      Task UpdateAsync(TTree tree, Action&amp;lt;TTree&amp;gt; childrenAction = null);&#xA;&#xA;      Task MoveAsync(TPrimaryKey id, TPrimaryKey? parentId, Action&amp;lt;TTree&amp;gt; childrenAction = null);&#xA;&#xA;      Task DeleteAsync(TPrimaryKey id);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public override void PreInitialize()&#xA;{&#xA;      // Custom error message&#xA;      Configuration.Modules.GeneralTree&amp;lt;Region, long&amp;gt;().ExceptionMessageFactory = tree =&amp;gt; $&#34;{tree.Name} already exists!.&#34;;&#xA;&#xA;      // Custom node with the same name additional judgment logic&#xA;      Configuration.Modules.GeneralTree&amp;lt;Region, long&amp;gt;().CheckSameNameExpression = (regionThis, regionCheck) =&amp;gt; regionThis.SomeForeignKey == regionCheck.SomeForeignKey&#xA;&#xA;      // Custom FullName separator&#xA;      Configuration.Modules.GeneralTree&amp;lt;Region, long&amp;gt;().Hyphen = &#34;=&amp;gt;&#34;;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code is for the entity&#39;s primary key as the value type. If it is a reference type, please use &lt;code&gt;IGeneralTreeWithReferenceType&lt;/code&gt; and &lt;code&gt;IGeneralTreeManagerWithReferenceType&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;GeneralTreeCodeGenerate&lt;/code&gt;Code length (default is 5 digits)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[Fact]&#xA;public void Test_CreateCode_With_Length()&#xA;{&#xA;      var generate = new GeneralTreeCodeGenerate(new GeneralTreeCodeGenerateConfiguration()&#xA;      {&#xA;            CodeLength = 3&#xA;      });&#xA;&#xA;      generate.CreateCode().ShouldBe(null);&#xA;      generate.CreateCode(42).ShouldBe(&#34;042&#34;);&#xA;      generate.CreateCode(1, 2).ShouldBe(&#34;001.002&#34;);&#xA;      generate.CreateCode(1, 2, 3).ShouldBe(&#34;001.002.003&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;GeneralTreeExtensions&lt;/code&gt; &lt;code&gt;ToTree&lt;/code&gt; converts the Tree collection to TreeDto (has a hierarchical relationship, sortable)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;[Fact]&#xA;public void ToTreeOrderBy_Test()&#xA;{&#xA;      var regions = new List&amp;lt;Regin&amp;gt;&#xA;      {&#xA;            new Regin&#xA;            {&#xA;                  Id = 1,&#xA;                  Name = &#34;beijing&#34;&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 2,&#xA;                  Name = &#34;bdongcheng&#34;,&#xA;                  ParentId = 1&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 3,&#xA;                  Name = &#34;axicheng&#34;,&#xA;                  ParentId = 1&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 4,&#xA;                  Name = &#34;aHebei&#34;&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 5,&#xA;                  Name = &#34;bShijianzhuang&#34;,&#xA;                  ParentId = 4&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 6,&#xA;                  Name = &#34;aChengde&#34;,&#xA;                  ParentId = 4&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 7,&#xA;                  Name = &#34;bShuangqiao&#34;,&#xA;                  ParentId = 6&#xA;            },&#xA;            new Regin&#xA;            {&#xA;                  Id = 8,&#xA;                  Name = &#34;aShuangluan&#34;,&#xA;                  ParentId = 6&#xA;            }&#xA;      };&#xA;&#xA;      var tree = regions.ToTreeOrderBy&amp;lt;Regin, long, string&amp;gt;(x =&amp;gt; x.Name).ToList();&#xA;&#xA;      tree.First().Name.ShouldBe(&#34;aHebei&#34;);&#xA;      tree.First().Children.First().Name.ShouldBe(&#34;aChengde&#34;);&#xA;      tree.First().Children.First().Children.First().Name.ShouldBe(&#34;aShuangluan&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>