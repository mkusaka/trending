<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-21T01:32:21Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/handy</title>
    <updated>2023-01-21T01:32:21Z</updated>
    <id>tag:github.com,2023-01-21:/Shopify/handy</id>
    <link href="https://github.com/Shopify/handy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easiest way to mocap your hands!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;handy&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/logo.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;The easiest way to mocap your hands!&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/animated_hands.gif&#34; width=&#34;600&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;No artists had to suffer to make this Blender animation. It was all mocapped using a Meta Quest Pro!&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;We developed this tool in order to streamline the process of capturing hand movements from Meta Quest headsets and bringing them into Blender for use in animations.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of What You Can Do With This Tool&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The hands in &lt;a href=&#34;https://twitter.com/StrangeNative/status/1613218237969494017?s=20&#34;&gt;this&lt;/a&gt; concept video were mocapped using handy!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/StrangeNative/status/1613218237969494017?s=20&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/concept_video.PNG&#34; href=&#34;https://twitter.com/StrangeNative/status/1613218237969494017?s=20&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The hands and face in &lt;a href=&#34;https://diegomacario.github.io/Hands-In-The-Web&#34;&gt;this&lt;/a&gt; live demo were also mocapped using handy!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://diegomacario.github.io/Hands-In-The-Web&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/geisha.png&#34; href=&#34;https://diegomacario.github.io/Hands-In-The-Web&#34; width=&#34;600&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The code behind that live demo is available &lt;a href=&#34;https://github.com/diegomacario/Hands-In-The-Web&#34;&gt;here&lt;/a&gt;, in case you are interested in how mocap data can be played in the browser.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unity 2022.1.23 or later&lt;/li&gt; &#xA; &lt;li&gt;Meta Quest (1, 2, or Pro)&lt;/li&gt; &#xA; &lt;li&gt;Windows or macOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;ve never built and installed a Unity project on a Meta Quest headset, start by reading the &lt;a href=&#34;https://github.com/Shopify/handy/raw/main/BEGINNERS_GUIDE.md&#34;&gt;beginner&#39;s guide&lt;/a&gt;. It will walk you through everything you need to do!&lt;/p&gt; &#xA;&lt;p&gt;We wrote it so that people that don&#39;t have a technical background can run this project too.&lt;/p&gt; &#xA;&lt;h2&gt;Workflows&lt;/h2&gt; &#xA;&lt;p&gt;We developed two workflows for this project. The &lt;code&gt;Optimized Workflow&lt;/code&gt; is fast, but it requires an internet connection so that the &lt;code&gt;Handy&lt;/code&gt; app can send mocap recordings from the headset to the Unity editor to automatically generate Alembic files. The &lt;code&gt;Manual Workflow&lt;/code&gt; is slow, but it doesn&#39;t require an internet connection.&lt;/p&gt; &#xA;&lt;h3&gt;Optimized Workflow&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;First, build the &lt;code&gt;ClientScene&lt;/code&gt; and install it to the headset. You can find it here:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/client_scene.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;To build and install it you can simply go to &lt;code&gt;File -&amp;gt; Build And Run&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Now, switch over to the &lt;code&gt;ServerScene&lt;/code&gt; - double-click it to open it, then hit play in the editor. You can find the scene here:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/server_scene.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;Play in the editor looks like this:&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/editor_play_button.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;Handy&lt;/code&gt; app on the headset.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Start and stop recording by pinching your left thumb and index finger together and holding the pinch until the red recording indicator appears or disappears at your left wrist.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/begin_and_end_recording.gif&#34; width=&#34;600&#34;&gt; &lt;/p&gt;&#xA; &lt;p align=&#34;center&#34;&gt; &lt;em&gt;The red sphere at the left wrist indicates whether you are recording or not.&lt;/em&gt; &lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;5&#34;&gt; &#xA;  &lt;li&gt;Every time you stop recording, the client (the &lt;code&gt;Handy&lt;/code&gt; app) will send a &lt;code&gt;.jsonlines&lt;/code&gt; file to the server (the Unity editor). The server will then immediately start playing back the recording (you will see your hands moving in Unity&#39;s viewport). Once it finishes playing the recording (you will see your hands freeze in Unity&#39;s viewport), it will output a finished &lt;code&gt;.abc&lt;/code&gt; filename in Unity&#39;s console.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/final_abc.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;.abc&lt;/code&gt; files will always be placed in a folder called &lt;code&gt;data_output&lt;/code&gt; which is located at the root of your clone of this repository.&lt;/p&gt; &#xA; &lt;ol start=&#34;6&#34;&gt; &#xA;  &lt;li&gt; &lt;p&gt;If you start and stop recording multiple times in a row, a queue will form in the server, so you will have to wait for it to process all your recordings.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Load your exported &lt;code&gt;.abc&lt;/code&gt; files in Blender. You will see two hands and a cube that acts as a placeholder for the headset, which we also record!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/hands_and_head.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Manual Workflow&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;First, build the &lt;code&gt;CaptureScene&lt;/code&gt; and install it to the headset. You can find it here:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/capture_scene.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;Double-click it to open it, and then go to &lt;code&gt;File -&amp;gt; Build Settings...&lt;/code&gt;, select any scenes that are in the &lt;code&gt;Scenes In Build&lt;/code&gt; box, right click them and select &lt;code&gt;Remove Selection&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/remove_selection.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;After that simply click the &lt;code&gt;Add Open Scenes&lt;/code&gt; button and the &lt;code&gt;CaptureScene&lt;/code&gt; should be added to the list. You are now ready to press the &lt;code&gt;Build And Run&lt;/code&gt; button.&lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/add_open_scenes.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Run the &lt;code&gt;Handy&lt;/code&gt; app on the headset.&lt;/li&gt; &#xA;  &lt;li&gt;Start and stop recording by pinching your left thumb and index finger together and holding the pinch until the red recording indicator appears or disappears at your left wrist.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/begin_and_end_recording.gif&#34; width=&#34;600&#34;&gt; &lt;/p&gt;&#xA; &lt;p align=&#34;center&#34;&gt; &lt;em&gt;The red sphere at the left wrist indicates whether you are recording or not.&lt;/em&gt; &lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;Connect the headset to your computer and download the &lt;code&gt;.jsonlines&lt;/code&gt; files that were recorded. You can find them here:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/jsonlines_folder.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;ol start=&#34;5&#34;&gt; &#xA;  &lt;li&gt;Open the &lt;code&gt;PlaybackScene&lt;/code&gt; in the Unity editor by double-clicking it. You can find it here:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/playback_scene.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;ol start=&#34;6&#34;&gt; &#xA;  &lt;li&gt;Click on the &lt;code&gt;PlaybackManager&lt;/code&gt; object in the scene hierarchy. In the &lt;code&gt;PlaybackManager&lt;/code&gt; component of that object, input the path of the &lt;code&gt;.jsonlines&lt;/code&gt; file that you want to export as an Alembic file. In the &lt;code&gt;AlembicExporter&lt;/code&gt; component of the same object, specify the location where you want the Alembic file to be generated and its name.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/playback_steps.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;ol start=&#34;7&#34;&gt; &#xA;  &lt;li&gt;Hit play in the editor and wait for the animation to complete. Play in the editor looks like this:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/editor_play_button.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA; &lt;ol start=&#34;8&#34;&gt; &#xA;  &lt;li&gt;Load your exported &lt;code&gt;.abc&lt;/code&gt; file in Blender. You will see two hands and a cube that acts as a placeholder for the headset, which we also record!&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Shopify/handy/raw/main/readme_images/hands_and_head.PNG&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ArduPilot/MissionPlanner</title>
    <updated>2023-01-21T01:32:21Z</updated>
    <id>tag:github.com,2023-01-21:/ArduPilot/MissionPlanner</id>
    <link href="https://github.com/ArduPilot/MissionPlanner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mission Planner Ground Control Station for ArduPilot (c# .net)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MissionPlanner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ardupilot/missionplanner/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Dot Net&#34;&gt; &lt;img src=&#34;https://github.com/ardupilot/missionplanner/actions/workflows/android.yml/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt; &lt;img src=&#34;https://github.com/ardupilot/missionplanner/actions/workflows/mac.yml/badge.svg?sanitize=true&#34; alt=&#34;OSX/IOS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Website : &lt;a href=&#34;http://ardupilot.org/planner/&#34;&gt;http://ardupilot.org/planner/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Forum : &lt;a href=&#34;http://discuss.ardupilot.org/c/ground-control-software/mission-planner&#34;&gt;http://discuss.ardupilot.org/c/ground-control-software/mission-planner&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download latest stable version : &lt;a href=&#34;http://firmware.ardupilot.org/Tools/MissionPlanner/MissionPlanner-latest.msi&#34;&gt;http://firmware.ardupilot.org/Tools/MissionPlanner/MissionPlanner-latest.msi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Changelog : &lt;a href=&#34;https://github.com/ArduPilot/MissionPlanner/raw/master/ChangeLog.txt&#34;&gt;https://github.com/ArduPilot/MissionPlanner/blob/master/ChangeLog.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;License : &lt;a href=&#34;https://github.com/ArduPilot/MissionPlanner/raw/master/COPYING.txt&#34;&gt;https://github.com/ArduPilot/MissionPlanner/blob/master/COPYING.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to compile&lt;/h2&gt; &#xA;&lt;h3&gt;On Windows (Recommended)&lt;/h3&gt; &#xA;&lt;h4&gt;1. Install software&lt;/h4&gt; &#xA;&lt;h5&gt;Main requirements&lt;/h5&gt; &#xA;&lt;p&gt;Currently, Mission Planner needs:&lt;/p&gt; &#xA;&lt;p&gt;Visual Studio 2022&lt;/p&gt; &#xA;&lt;h5&gt;IDE&lt;/h5&gt; &#xA;&lt;h6&gt;Visual Studio Community&lt;/h6&gt; &#xA;&lt;p&gt;The recommended way to compile Mission Planner is through Visual Studio. You could do it with Visual Studio Community &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34; title=&#34;Visual Studio Download page&#34;&gt;Visual Studio Download page&lt;/a&gt;. Visual Studio suite is quite complex and comes with Git support. During the Selection phase, please goto More &amp;gt; import configuration, and use the file (&lt;a href=&#34;https://raw.githubusercontent.com/ArduPilot/MissionPlanner/master/vs2022.vsconfig&#34;&gt;https://raw.githubusercontent.com/ArduPilot/MissionPlanner/master/vs2022.vsconfig&lt;/a&gt; &#34;vs2022.vsconfig&#34;)&lt;/p&gt; &#xA;&lt;h6&gt;VSCode&lt;/h6&gt; &#xA;&lt;p&gt;Currently VSCode with C# plugin is able to parse the code but cannot build.&lt;/p&gt; &#xA;&lt;h4&gt;2. Get the code&lt;/h4&gt; &#xA;&lt;p&gt;If you get Visual Studio Community, you should be able to use Git from the IDE. Clone &lt;code&gt;https://github.com/ArduPilot/MissionPlanner.git&lt;/code&gt; to get the full code.&lt;/p&gt; &#xA;&lt;p&gt;In case you didn&#39;t install an IDE, you will need to manually install Git. Please follow instruction in &lt;a href=&#34;https://ardupilot.org/dev/docs/where-to-get-the-code.html#downloading-the-code-using-git&#34;&gt;https://ardupilot.org/dev/docs/where-to-get-the-code.html#downloading-the-code-using-git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open a git bash terminal in the MissionPlanner directory and type, &#34;git submodule update --init&#34; to download all submodules&lt;/p&gt; &#xA;&lt;h4&gt;3. Build&lt;/h4&gt; &#xA;&lt;p&gt;To build the code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open MissionPlanner.sln with Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;From the Build menu, select &#34;Build MissionPlanner&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;On other systems&lt;/h3&gt; &#xA;&lt;p&gt;Building Mission Planner on other systems isn&#39;t support currently.&lt;/p&gt; &#xA;&lt;h2&gt;Launching Mission Planner on other system&lt;/h2&gt; &#xA;&lt;p&gt;Mission Planner is available for Android via the Play Store. &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.michaeloborne.MissionPlanner&#34;&gt;https://play.google.com/store/apps/details?id=com.michaeloborne.MissionPlanner&lt;/a&gt; Mission Planner can be used with Mono on Linux systems. Be aware that not all functions are available on Linux. Native MacOS and iOS support is experimental and not recommended for inexperienced users. &lt;a href=&#34;https://github.com/ArduPilot/MissionPlanner/releases/tag/osxlatest&#34;&gt;https://github.com/ArduPilot/MissionPlanner/releases/tag/osxlatest&lt;/a&gt; For MacOS users it is recommended to use Mission Planner for Windows via Boot Camp or Parallels (or equivalent).&lt;/p&gt; &#xA;&lt;h3&gt;On Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;p&gt;Those instructions were tested on Ubuntu 20.04. Please install Mono, either :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo apt install mono-complete mono-runtime libmono-system-windows-forms4.0-cil libmono-system-core4.0-cil libmono-winforms4.0-cil libmono-corlib4.0-cil libmono-system-management4.0-cil libmono-system-xml-linq4.0-cil&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Launching&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get the lastest zipped version of Mission Planner here : &lt;a href=&#34;https://firmware.ardupilot.org/Tools/MissionPlanner/MissionPlanner-latest.zip&#34;&gt;https://firmware.ardupilot.org/Tools/MissionPlanner/MissionPlanner-latest.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unzip in the directory you want&lt;/li&gt; &#xA; &lt;li&gt;Go into the directory&lt;/li&gt; &#xA; &lt;li&gt;run with &lt;code&gt;mono MissionPlanner.exe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can debug Mission Planner on Mono with &lt;code&gt;MONO_LOG_LEVEL=debug mono MissionPlanner.exe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;External Services Used&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Use&lt;/th&gt; &#xA;   &lt;th&gt;How to disable&lt;/th&gt; &#xA;   &lt;th&gt;Custodian&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://firmware.oborne.me&#34;&gt;https://firmware.oborne.me&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used as a global cdn for checking for MP update check - checked once per day at startup&lt;/td&gt; &#xA;   &lt;td&gt;edit missionplanner.exe.config&lt;/td&gt; &#xA;   &lt;td&gt;Michael Oborne&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://firmware.ardupilot.org&#34;&gt;https://firmware.ardupilot.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for updates to stable, firmware metadata, firmware, user alerts, gstreamer, SRTM, SITL&lt;/td&gt; &#xA;   &lt;td&gt;updates to stable (edit missionplanner.exe.config) - all others Not possible&lt;/td&gt; &#xA;   &lt;td&gt;Ardupilot Team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for updates to beta&lt;/td&gt; &#xA;   &lt;td&gt;edit missionplanner.exe.config&lt;/td&gt; &#xA;   &lt;td&gt;Michael Oborne&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com&#34;&gt;https://raw.githubusercontent.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;old param metadata, sitl config files&lt;/td&gt; &#xA;   &lt;td&gt;Not possible&lt;/td&gt; &#xA;   &lt;td&gt;Ardupilot Team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.github.com/&#34;&gt;https://api.github.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ardupilot preload param files&lt;/td&gt; &#xA;   &lt;td&gt;Not possible&lt;/td&gt; &#xA;   &lt;td&gt;Ardupilot Team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.oborne.me/&#34;&gt;https://raw.oborne.me/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used as glocal cdn for parameter metadata generator, no longer primary source&lt;/td&gt; &#xA;   &lt;td&gt;only used at user request to regenerate, edit missionplanner.exe.config&lt;/td&gt; &#xA;   &lt;td&gt;Michael Oborne&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maps.google.com&#34;&gt;https://maps.google.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for elevation api - removed due to abuse&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://discuss.cubepilot.org/&#34;&gt;https://discuss.cubepilot.org/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;use for SB2 reporting - only on affected boards when user enters details&lt;/td&gt; &#xA;   &lt;td&gt;only used at user request&lt;/td&gt; &#xA;   &lt;td&gt;CubePilot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://altitudeangel.com&#34;&gt;https://altitudeangel.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;utm data - user enabled&lt;/td&gt; &#xA;   &lt;td&gt;only used at user request&lt;/td&gt; &#xA;   &lt;td&gt;Altitude Angel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://autotest.ardupilot.org&#34;&gt;https://autotest.ardupilot.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;dataflash log meta data, parameter metadata&lt;/td&gt; &#xA;   &lt;td&gt;Not Possible&lt;/td&gt; &#xA;   &lt;td&gt;Ardupilot Team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Many&lt;/td&gt; &#xA;   &lt;td&gt;your choice of map provider google/bing/openstreetmap/etc&lt;/td&gt; &#xA;   &lt;td&gt;User selectable&lt;/td&gt; &#xA;   &lt;td&gt;User/Many&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cloudflare.com&#34;&gt;https://www.cloudflare.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;geo location provider - for NFZ selection&lt;/td&gt; &#xA;   &lt;td&gt;Not Possible&lt;/td&gt; &#xA;   &lt;td&gt;Michael Oborne&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://esua.cad.gov.hk&#34;&gt;https://esua.cad.gov.hk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HK no fly zones - user enabled&lt;/td&gt; &#xA;   &lt;td&gt;User selectable&lt;/td&gt; &#xA;   &lt;td&gt;HK Gov&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ssl.google-analytics.com&#34;&gt;https://ssl.google-analytics.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Google Analytics Anonymous Stats - Screen Loads, Exceptions/Crashs, Events (Connect), Startup Timing, FW upload (FW Type and Board Type)&lt;/td&gt; &#xA;   &lt;td&gt;disable in Config &amp;gt; Planner &amp;gt; OptOut Anon Stats&lt;/td&gt; &#xA;   &lt;td&gt;Michael Oborne&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.dronelogbook.com&#34;&gt;https://api.dronelogbook.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;logging - disabled&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ardupilot.org&#34;&gt;https://ardupilot.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;help urls on many pages&lt;/td&gt; &#xA;   &lt;td&gt;User Initiated&lt;/td&gt; &#xA;   &lt;td&gt;ArduPilot Team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com&#34;&gt;https://www.youtube.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;help videos on many pages&lt;/td&gt; &#xA;   &lt;td&gt;User Initiated&lt;/td&gt; &#xA;   &lt;td&gt;ArduPilot Team&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://files.rfdesign.com.au&#34;&gt;https://files.rfdesign.com.au&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RFD firmwares&lt;/td&gt; &#xA;   &lt;td&gt;User Initiated&lt;/td&gt; &#xA;   &lt;td&gt;RFDesign&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://teck.airmarket.io&#34;&gt;https://teck.airmarket.io&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;airmarket - disabled&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Offline Use - No Internet&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Use&lt;/th&gt; &#xA;   &lt;th&gt;Transferable between pcs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C:\ProgramData\Mission Planner\gmapcache&lt;/td&gt; &#xA;   &lt;td&gt;Map cache&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C:\ProgramData\Mission Planner\srtm&lt;/td&gt; &#xA;   &lt;td&gt;Elevation data cache&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C:\ProgramData\Mission Planner\*.pdef.xml&lt;/td&gt; &#xA;   &lt;td&gt;Parameter cache&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C:\ProgramData\Mission Planner\LogMessages*.xml&lt;/td&gt; &#xA;   &lt;td&gt;DF Log metadata cache&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;on linux this is in /home/&#xA; &lt;user&gt;&#xA;  /.local/share/Mission Planner/&#xA; &lt;/user&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Offline Data Supported&lt;/h3&gt; &#xA;&lt;h4&gt;Elevation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SRTM Cache&lt;/li&gt; &#xA; &lt;li&gt;GeoTiff&#39;s in WGS84/EGM96&lt;/li&gt; &#xA; &lt;li&gt;DTED&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Images&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Map Cache&lt;/li&gt; &#xA; &lt;li&gt;WMS&lt;/li&gt; &#xA; &lt;li&gt;WMTS&lt;/li&gt; &#xA; &lt;li&gt;GDAL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Paths used - Default&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Use&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C:\ProgramData\Mission Planner&lt;/td&gt; &#xA;   &lt;td&gt;All cross user content&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C:\Users\USERNAME\Documents\Mission Planner&lt;/td&gt; &#xA;   &lt;td&gt;All per user content&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;on linux this is in /home/&#xA; &lt;user&gt;&#xA;  /.local/share/Mission Planner/&#xA; &lt;/user&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CA Cert&lt;/h3&gt; &#xA;&lt;p&gt;A CA cert is installed to the root store and used to sign the windows serial port drivers, and is installed as part of the MSI install.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://info.flagcounter.com/A4bA&#34;&gt;&lt;img src=&#34;https://s01.flagcounter.com/count2/A4bA/bg_FFFFFF/txt_000000/border_CCCCCC/columns_8/maxflags_40/viewers_0/labels_1/pageviews_0/flags_0/percent_0/&#34; alt=&#34;FlagCounter&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trailofbits/RpcInvestigator</title>
    <updated>2023-01-21T01:32:21Z</updated>
    <id>tag:github.com,2023-01-21:/trailofbits/RpcInvestigator</id>
    <link href="https://github.com/trailofbits/RpcInvestigator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploring RPC interfaces on Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RPC Investigator&lt;/h1&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://blog.trailofbits.com/2023/01/17/rpc-investigator-microsoft-windows-remote-procedure-call/&#34;&gt;blog post announcement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;RPC Investigator (RPCI) is a .NET/C# Windows Forms UI application that provides an advanced discovery and analysis interface to Windows RPC endpoints. The tool provides a visual interface around the existing core RPC capabilities of the &lt;a href=&#34;https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/tree/main/NtApiDotNet&#34;&gt;NtApiDotNet&lt;/a&gt; platform, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enumerating all active ALPC RPC servers&lt;/li&gt; &#xA; &lt;li&gt;Parsing RPC servers from any PE file&lt;/li&gt; &#xA; &lt;li&gt;Parsing RPC servers from processes and their loaded modules, including services&lt;/li&gt; &#xA; &lt;li&gt;Pulling symbol information from a Symbol Server&lt;/li&gt; &#xA; &lt;li&gt;Exporting RPC server definitions as serialized .NET objects for your own scripting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Beyond these core features, RPCI provides additional capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Client Workbench allows you to create and execute an RPC client binary on-the-fly by right-clicking on an RPC server of interest. The workbench has a C# code editor pane that allows you to edit the client in real time and observe results from RPC procedures executed in your code.&lt;/li&gt; &#xA; &lt;li&gt;Discovered RPC servers are organized into a searchable library, allowing you to pivot RPC server data in useful ways, such as searching all RPC procedures for all servers for interesting routines through a customizable search interface.&lt;/li&gt; &#xA; &lt;li&gt;The RPC Sniffer tool adds visibility into RPC-related ETW data to provide a near real-time view of active RPC calls. By combining ETW data with RPC server data from NtApiDotNet, we can build a more complete picture of ongoing RPC activity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Workflows&lt;/h2&gt; &#xA;&lt;p&gt;There are several workflows that the RPC Investigator supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auditing&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enumerating all active ALPC RPC servers across all processes that are communicating with an ALPC endpoint&lt;/li&gt; &#xA;   &lt;li&gt;Enumerating all RPC servers running in a Windows service&lt;/li&gt; &#xA;   &lt;li&gt;Loading offline RPC servers defined in a PE file (such as an EXE or DLL)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Client Workbench: Automatically generate RPC client code that can be customized and used to call into any RPC service.&lt;/li&gt; &#xA;   &lt;li&gt;RPC Sniffer: Realtime monitor of RPC-related Event Tracing for Windows (ETW) data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Workflow: Analyzing the Task Scheduler RPC&lt;/h2&gt; &#xA;&lt;p&gt;In this example, we&#39;ll be inspecting the Windows Task Scheduler RPC service, which is used to manage and execute scheduled tasks. We&#39;ll find the service, generate client code, and then customize the client to interact with one of the exposed procedures.&lt;/p&gt; &#xA;&lt;p&gt;First, load the Windows services list by clicking &lt;strong&gt;File -&amp;gt; Load From Service&lt;/strong&gt;. This opens a new service list window:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trailofbits/RpcInvestigator/master/docs/img/ServiceListWindow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find the &lt;strong&gt;Schedule&lt;/strong&gt; service, which is the Windows Task Scheduler, select the service and click &lt;strong&gt;Go&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trailofbits/RpcInvestigator/master/docs/img/ScheduleService.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will be prompted prior to RPCI loading all associated RPC DLLs. Click &lt;strong&gt;Yes&lt;/strong&gt; to continue. Once loaded, you will see a list of all RPC servers discovered across all modules loaded in the service process. The Windows Task Scheduler RPC server has an Interface ID of &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-tsch/fbab083e-f79f-4216-af4c-d5104a913d40&#34;&gt;&lt;code&gt;86D35949-83C9-4044-B424-DB363231FD0C&lt;/code&gt;&lt;/a&gt;. Find the row within the list that has this Interface ID, which should have a running service named &lt;strong&gt;Task Scheduler&lt;/strong&gt;, right-click on the row and select &lt;strong&gt;New Client&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trailofbits/RpcInvestigator/master/docs/img/TaskSchedulerClient.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The left portion of the client window shows RPC server metadata and command line output from the client code. The right side shows two tabs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Client Code&lt;/strong&gt; - Auto generated C# client code that can be customized to interact with one or more procedures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Procedures&lt;/strong&gt; - List of exposed RPC procedures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In this example we&#39;ll be calling the &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-tsch/b266c231-52db-4244-88da-725cf2a9557a&#34;&gt;&lt;code&gt;SchRpcHighestVersion&lt;/code&gt;&lt;/a&gt; procedure. This method accepts a single argument, &lt;code&gt;out int version&lt;/code&gt;, which, after calling the procedure, will contain the highest Task Scheduler protocol version supported by the RPC interface. The high 16-bits are the major version and the low 16-bits are the minor version.&lt;/p&gt; &#xA;&lt;p&gt;To call this procedure:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;strong&gt;Client Code&lt;/strong&gt; window, find the &lt;strong&gt;&lt;code&gt;Run&lt;/code&gt;&lt;/strong&gt; method, which is the main entry point for the RPC client.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the &lt;strong&gt;&lt;code&gt;Run&lt;/code&gt;&lt;/strong&gt; method body to call the procedure:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public async Task&amp;lt;bool&amp;gt; Run()&#xA;{&#xA;    int version;&#xA;    int status = SchRpcHighestVersion(out version);&#xA;    if (status == 0) {&#xA;        long major = (version &amp;amp; 0xffff0000) &amp;gt;&amp;gt; 16;&#xA;        long minor = version &amp;amp; 0x0000ffff;&#xA;        Console.WriteLine(&#34;highest supported RPC version: {0}.{1}&#34;, major, minor);&#xA;    } else {&#xA;        Console.WriteLine(&#34;call to SchRpcHighestVersion failed with error: {0:X}&#34;, status);&#xA;    }&#xA;    return true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After adding this code, run the client by clicking the &lt;strong&gt;Run&lt;/strong&gt; button. This will compile the C# code and then execute the &lt;strong&gt;&lt;code&gt;Run&lt;/code&gt;&lt;/strong&gt; method.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You will see a popup box with any compilation errors if the client code could not be compiled.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If compilation is successful, you will see something similar to the following in the &lt;strong&gt;Output&lt;/strong&gt; box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; Run() output:&#xA;highest supported RPC version: 1.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trailofbits/RpcInvestigator/master/docs/img/TaskSchedulerClient-Version.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The Rpc Investigator has several configuration settings.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dbghelp.dll&lt;/td&gt; &#xA;   &lt;td&gt;File location of the &lt;code&gt;dbghelp.dll&lt;/code&gt; module&lt;/td&gt; &#xA;   &lt;td&gt;Find latest version within installed Windows Kits.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Symbol Path&lt;/td&gt; &#xA;   &lt;td&gt;Path to Windows symbols, which can be a symbol server or local directory&lt;/td&gt; &#xA;   &lt;td&gt;Default public Windows Server: &lt;code&gt;srv*c:\symbols*https://msdl.microsoft.com/download/symbols&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trace Level&lt;/td&gt; &#xA;   &lt;td&gt;The logging trace level&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The configuration settings can be modified within the application through the &lt;strong&gt;Edit -&amp;gt; Settings&lt;/strong&gt; menu.&lt;/p&gt; &#xA;&lt;h2&gt;Development Environment&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://visualstudio.microsoft.com/vs/community/&#34;&gt;Visual Studio Community 2022&lt;/a&gt;, make sure to select the &lt;strong&gt;.NET Desktop Development&lt;/strong&gt; workflow.&lt;/li&gt; &#xA; &lt;li&gt;Download and install the latest &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/&#34;&gt;Windows 10 SDK&lt;/a&gt;. Perform a full installation so that .NET 4.8.1 and Debugging Tools are installed.&lt;/li&gt; &#xA; &lt;li&gt;Open the Solution and verify that the projects loaded correctly. If there is an error about missing .NET 4.8.1 Targeting Pack, download and install &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet-framework/net481&#34;&gt;.NET Framework 4.8.1 Developer Pack&lt;/a&gt; and then restart Visual Studio.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;Because Windows RPC has been a popular research topic for well over a decade, there are too many related resources and research efforts to name here. We&#39;ve listed a few below that we encountered while building this tool:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clearbluejar.github.io/posts/surveying-windows-rpc-discovery-tools/&#34;&gt;https://clearbluejar.github.io/posts/surveying-windows-rpc-discovery-tools/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.powerofcommunity.net/poc2019/James.pdf&#34;&gt;https://www.powerofcommunity.net/poc2019/James.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.tiraniddo.dev/2022/06/finding-running-rpc-server-information.html&#34;&gt;https://www.tiraniddo.dev/2022/06/finding-running-rpc-server-information.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://clearbluejar.github.io/posts/from-ntobjectmanager-to-petitpotam/&#34;&gt;https://clearbluejar.github.io/posts/from-ntobjectmanager-to-petitpotam/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itm4n.github.io/from-rpcview-to-petitpotam/&#34;&gt;https://itm4n.github.io/from-rpcview-to-petitpotam/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/rpc/rpc-security-essentials&#34;&gt;https://learn.microsoft.com/en-us/windows/win32/rpc/rpc-security-essentials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cyberark.com/resources/threat-research-blog/understanding-windows-containers-communication&#34;&gt;https://www.cyberark.com/resources/threat-research-blog/understanding-windows-containers-communication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/silverf0x/RpcView&#34;&gt;https://github.com/silverf0x/RpcView&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xpn/RpcEnum&#34;&gt;https://github.com/xpn/RpcEnum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyberark/RPCMon&#34;&gt;https://github.com/cyberark/RPCMon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tyranid/WindowsRpcClients&#34;&gt;https://github.com/tyranid/WindowsRpcClients&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re unfamiliar with RPC internals or need a technical refresher, we would recommend one of the authoritative sources on the topic - Alex Ionescu&#39;s 2014 SyScan talk in Singapore, &lt;a href=&#34;https://www.youtube.com/watch?v=UNpL5csYC1E&#34;&gt;All about the RPC, LRPC, ALPC, and LPC in your PC&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>