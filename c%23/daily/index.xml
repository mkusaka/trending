<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-05T01:25:22Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DeSinc/SallyBot</title>
    <updated>2023-04-05T01:25:22Z</updated>
    <id>tag:github.com,2023-04-05:/DeSinc/SallyBot</id>
    <link href="https://github.com/DeSinc/SallyBot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI Chatbot coded in Discord.net C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SallyBot&lt;/h1&gt; &#xA;&lt;p&gt;AI Chatbot coded in Discord.net C#&lt;/p&gt; &#xA;&lt;h2&gt;USAGE&lt;/h2&gt; &#xA;&lt;p&gt;Download all files and put them in a folder ideally called SallyBot or something, you can try rename it if you dare risk the visual studio glitches&lt;/p&gt; &#xA;&lt;p&gt;Double click sallybot.csproj and open with Visual Studio&lt;/p&gt; &#xA;&lt;p&gt;It should open up the whole project and make a .sln file etc.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have a bot already:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new Discord bot on their developer portal and make an API key (takes about 2 mins) &lt;a href=&#34;https://discord.com/developers/applications&#34;&gt;https://discord.com/developers/applications&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you enable message intents and other intents for this bot or you won&#39;t see any message content etc. Use this guide: &lt;a href=&#34;https://autocode.com/discord/threads/what-are-discord-privileged-intents-and-how-do-i-enable-them-tutorial-0c3f9977/&#34;&gt;https://autocode.com/discord/threads/what-are-discord-privileged-intents-and-how-do-i-enable-them-tutorial-0c3f9977/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Join the bot to your server, follow this guide if you don&#39;t know how: &lt;a href=&#34;https://discordjs.guide/preparations/adding-your-bot-to-servers.html#bot-invite-links&#34;&gt;https://discordjs.guide/preparations/adding-your-bot-to-servers.html#bot-invite-links&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Put your bot API key in the MainGlobal.cs file&lt;/p&gt; &#xA;&lt;p&gt;Press F5 to build it and run and see what happens (it should work first try)&lt;/p&gt; &#xA;&lt;p&gt;It has a line of code to reply to any message it sees, feel free to remove this after testing the bot is up and running&lt;/p&gt; &#xA;&lt;p&gt;If it doesn&#39;t idk lmao. Google will be your greatest ally in this battle. have fun&lt;/p&gt; &#xA;&lt;h2&gt;AI text generator&lt;/h2&gt; &#xA;&lt;p&gt;This bot doesn&#39;t generate the AI text but just sends requests off to a language learning model of your choice. At the moment I made the requests send out in the format for Dalai Alpaca 7B because that&#39;s easy to set up, but you can change the format to other LLMs in the bot code.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var request = new&#xA;{&#xA;    seed = -1,&#xA;    threads = 4,   &amp;lt;--(btw, change this to your thread count minus 2 for more speed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;etc..&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using another AI text generator, check its github page for instructions on how to format the data and change the format of the request to what it needs. You might also need to change the way it sends the request in, which could be a lot of code changes depending. This bot sends via SocketIO to Dalai Alpaca which is the easiest to set up imo and runs on anything with very good speed. I mean anything. It runs on a raspberry pi 4B.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WireMock-Net/WireMock.Net</title>
    <updated>2023-04-05T01:25:22Z</updated>
    <id>tag:github.com,2023-04-05:/WireMock-Net/WireMock.Net</id>
    <link href="https://github.com/WireMock-Net/WireMock.Net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WireMock.Net is a flexible product for stubbing and mocking web HTTP responses using advanced request matching and response templating. Based on the functionality from http://WireMock.org, but extended with more functionality.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WireMock.Net&lt;/h1&gt; &#xA;&lt;p&gt;A C# .NET version based on &lt;a href=&#34;https://github.com/alexvictoor/mock4net&#34;&gt;mock4net&lt;/a&gt; which mimics the functionality from the JAVA based &lt;a href=&#34;http://WireMock.org&#34;&gt;WireMock.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more info, see also this WIKI page: &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/What-Is-WireMock.Net&#34;&gt;What is WireMock.Net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP response stubbing, matchable on URL/Path, headers, cookies and body content patterns&lt;/li&gt; &#xA; &lt;li&gt;Library can be used in unit tests and integration tests&lt;/li&gt; &#xA; &lt;li&gt;Runs as a standalone process, as windows service, as Azure/IIS or as docker&lt;/li&gt; &#xA; &lt;li&gt;Configurable via a fluent DotNet API, JSON files and JSON over HTTP&lt;/li&gt; &#xA; &lt;li&gt;Record/playback of stubs (proxying)&lt;/li&gt; &#xA; &lt;li&gt;Per-request conditional proxying&lt;/li&gt; &#xA; &lt;li&gt;Stateful behaviour simulation&lt;/li&gt; &#xA; &lt;li&gt;Response templating / transformation using Handlebars and extensions&lt;/li&gt; &#xA; &lt;li&gt;Can be used locally or in CI/CD scenarios&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blogs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mstack.nl/blog/20230201-wiremock.net-tocode/&#34;&gt;mStack.nl : Generate C# Code from Mapping(s)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Info&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Chat&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitter.im/wiremock_dotnet/Lobby&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/wiremock_dotnet/Lobby.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Issues&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/WireMock-Net/WireMock.Net.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;&lt;strong&gt;Quality&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Build Azure&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://stef.visualstudio.com/WireMock.Net/_build/latest?definitionId=7&#34;&gt;&lt;img src=&#34;https://stef.visualstudio.com/WireMock.Net/_apis/build/status/WireMock.Net&#34; alt=&#34;Build Status Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Quality&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sonarcloud.io/project/issues?id=WireMock-Net_WireMock.Net&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=WireMock-Net_WireMock.Net&amp;amp;metric=alert_status&#34; alt=&#34;Sonar Quality Gate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/wiremock-net/wiremock.net&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/wiremock-net/wiremock.net/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Sonar Bugs&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sonarcloud.io/project/issues?id=WireMock-Net_WireMock.Net&amp;amp;resolved=false&amp;amp;types=BUG&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=WireMock-Net_WireMock.Net&amp;amp;metric=bugs&#34; alt=&#34;Sonar Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/project/issues?id=WireMock-Net_WireMock.Net&amp;amp;resolved=false&amp;amp;types=CODE_SMELL&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=WireMock-Net_WireMock.Net&amp;amp;metric=code_smells&#34; alt=&#34;Sonar Code Smells&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Coverage&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sonarcloud.io/component_measures?id=WireMock-Net_WireMock.Net&amp;amp;metric=coverage&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=WireMock-Net_WireMock.Net&amp;amp;metric=coverage&#34; alt=&#34;Sonar Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/WireMock-Net/WireMock.Net&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/WireMock-Net/WireMock.Net/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;NuGet packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Official&lt;/th&gt; &#xA;   &lt;th&gt;Preview &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/MyGet-preview-versions&#34;&gt;&lt;span&gt;ℹ&lt;/span&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net&#34; alt=&#34;NuGet Badge WireMock.Net&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net.StandAlone&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net.StandAlone&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net.StandAlone&#34; alt=&#34;NuGet Badge WireMock.Net&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net.StandAlone&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net.StandAlone?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net.StandAlone&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net.FluentAssertions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net.FluentAssertions&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net.FluentAssertions&#34; alt=&#34;NuGet Badge WireMock.Net.FluentAssertions&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net.FluentAssertions&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net.FluentAssertions?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net.FluentAssertions&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net.Matchers.CSharpCode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net.Matchers.CSharpCode&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net.Matchers.CSharpCode&#34; alt=&#34;NuGet Badge WireMock.Net.Matchers.CSharpCode&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net.Matchers.CSharpCode&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net.Matchers.CSharpCode?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net.Matchers.CSharpCode&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net.OpenApiParser&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net.OpenApiParser&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net.OpenApiParser&#34; alt=&#34;NuGet Badge WireMock.Net.OpenApiParser&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net.OpenApiParser&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net.OpenApiParser?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net.OpenApiParser&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net.RestClient&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net.RestClient&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net.RestClient&#34; alt=&#34;NuGet Badge WireMock.Net.RestClient&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net.RestClient&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net.RestClient?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net.RestClient&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Net.xUnit&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Net.xUnit&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Net.xUnit&#34; alt=&#34;NuGet Badge WireMock.Net.xUnit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Net.xUnit&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Net.xUnit?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Net.xUnit&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;nbsp;&amp;nbsp;&lt;strong&gt;WireMock.Org.RestClient&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/WireMock.Org.RestClient&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/WireMock.Org.RestClient&#34; alt=&#34;NuGet Badge WireMock.Org.RestClient&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/wiremock-net/package/nuget/WireMock.Org.RestClient&#34;&gt;&lt;img src=&#34;https://buildstats.info/myget/wiremock-net/WireMock.Org.RestClient?includePreReleases=true&#34; alt=&#34;MyGet Badge WireMock.Org.RestClient&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;For the supported frameworks and build information, see &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/Development-Information&#34;&gt;this&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Stubbing&lt;/h2&gt; &#xA;&lt;p&gt;A core feature of WireMock.Net is the ability to return predefined HTTP responses for requests matching criteria. See &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/Stubbing&#34;&gt;Wiki : Stubbing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Request Matching&lt;/h2&gt; &#xA;&lt;p&gt;WireMock.Net support advanced request-matching logic, see &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/Request-Matching&#34;&gt;Wiki : Request Matching&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Response Templating&lt;/h2&gt; &#xA;&lt;p&gt;The response which is returned WireMock.Net can be changed using templating. This is described here &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/Response-Templating&#34;&gt;Wiki : Response Templating&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Admin API Reference&lt;/h2&gt; &#xA;&lt;p&gt;The WireMock admin API provides functionality to define the mappings via a http interface see &lt;a href=&#34;https://github.com/StefH/WireMock.Net/wiki/Admin-API-Reference&#34;&gt;Wiki : Admin API Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;p&gt;WireMock.Net can be used in several ways:&lt;/p&gt; &#xA;&lt;h3&gt;UnitTesting&lt;/h3&gt; &#xA;&lt;p&gt;You can use your favorite test framework and use WireMock within your tests, see &lt;a href=&#34;https://github.com/StefH/WireMock.Net/wiki/Using-WireMock-in-UnitTests&#34;&gt;Wiki : UnitTesting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As a dotnet tool&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s simple to install WireMock.Net as (global) dotnet tool, see &lt;a href=&#34;https://github.com/StefH/WireMock.Net/wiki/WireMock-as-dotnet-tool&#34;&gt;Wiki : dotnet tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As standalone process / console application&lt;/h3&gt; &#xA;&lt;p&gt;This is quite straight forward to launch a mock server within a console application, see &lt;a href=&#34;https://github.com/StefH/WireMock.Net/wiki/WireMock-as-a-standalone-process&#34;&gt;Wiki : Standalone Process&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As a Windows Service&lt;/h3&gt; &#xA;&lt;p&gt;You can also run WireMock.Net as a Windows Service, follow this &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/WireMock-as-a-Windows-Service&#34;&gt;WireMock-as-a-Windows-Service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As a Web Job in Azure or application in IIS&lt;/h3&gt; &#xA;&lt;p&gt;See this link &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/WireMock-as-a-(Azure)-Web-App&#34;&gt;WireMock-as-a-(Azure)-Web-App&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;In a docker container&lt;/h3&gt; &#xA;&lt;p&gt;There is also a Linux and Windows-Nano container available at &lt;a href=&#34;https://hub.docker.com/r/sheyenrath&#34;&gt;hub.docker.com&lt;/a&gt;. For more details see also &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net-docker&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;HTTPS / SSL&lt;/h4&gt; &#xA;&lt;p&gt;More details on using HTTPS (SSL) can be found here &lt;a href=&#34;https://github.com/WireMock-Net/WireMock.Net/wiki/Using-HTTPS-(SSL)&#34;&gt;Wiki : HTTPS&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Unity-Technologies/XR-Interaction-Toolkit-Examples</title>
    <updated>2023-04-05T01:25:22Z</updated>
    <id>tag:github.com,2023-04-05:/Unity-Technologies/XR-Interaction-Toolkit-Examples</id>
    <link href="https://github.com/Unity-Technologies/XR-Interaction-Toolkit-Examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains various examples to use with the XR Interaction Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XR Interaction Toolkit Examples - Version 2.3.0&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project provides examples that use Unity&#39;s &lt;a href=&#34;https://docs.unity3d.com/Manual/com.unity.xr.interaction.toolkit.html&#34;&gt;XR Interaction Toolkit&lt;/a&gt; (XRI) to demonstrate its functionality with example assets and behaviors. The intention of this project is to provide a means for getting started with the features in the XR Interaction Toolkit package.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you are looking for the original XRI Examples project, that has been archived into two separate branches &lt;a href=&#34;https://github.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/tree/1.0/classic&#34;&gt;Classic 1.0&lt;/a&gt; and &lt;a href=&#34;https://github.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/tree/classic/2.2&#34;&gt;Classic 2.2&lt;/a&gt;. Both of these branches still have both the &lt;code&gt;AR&lt;/code&gt; and &lt;code&gt;VR&lt;/code&gt; projects available.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;The current version of the XRI Examples is compatible with the following versions of the Unity Editor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2020.3 and later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Downloading the project&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone or download this repository to a workspace on your drive &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Click the &lt;strong&gt;⤓ Code&lt;/strong&gt; button on this page to get the URL to clone with Git or click &lt;strong&gt;Download ZIP&lt;/strong&gt; to get a copy of this repository that you can extract&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a project in Unity &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Download, install, and run &lt;a href=&#34;https://unity3d.com/get-unity/download&#34;&gt;Unity Hub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In the &lt;strong&gt;Installs&lt;/strong&gt; tab, select &lt;strong&gt;Locate&lt;/strong&gt; or &lt;strong&gt;Add&lt;/strong&gt; to find or install Unity 2020.3 LTS or later. Include the &lt;strong&gt;Windows Build Support (IL2CPP)&lt;/strong&gt; module if building for PC, and the &lt;strong&gt;Android Build Support&lt;/strong&gt; if building for Android (for example, Meta Quest).&lt;/li&gt; &#xA;   &lt;li&gt;In the &lt;strong&gt;Projects&lt;/strong&gt; tab, click &lt;strong&gt;Add&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Browse to folder where you downloaded a copy of this repository and click &lt;strong&gt;Select Folder&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Verify the project has been added as &lt;strong&gt;XR-Interaction-Toolkit-Examples&lt;/strong&gt;, and click on it to open the project&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;General setup&lt;/h2&gt; &#xA;&lt;p&gt;The main example scene is located at &lt;code&gt;Assets/XRI_Examples/Scenes/XRI_Examples_Main&lt;/code&gt;. This example scene is laid out as a ring with different stations along it. The first examples you will encounter are the simplest use-cases of XRI features. Behind each example is a doorway leading to advanced uses of each feature.&lt;/p&gt; &#xA;&lt;p&gt;Use the simple examples when you need objects you can copy-and-paste, while leveraging the advanced examples when needing to achieve complex outcomes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;XR Origin&lt;/strong&gt; is located within the &lt;strong&gt;Complete Set Up&lt;/strong&gt; prefab. This prefab contains everything needed for a fully functional user interaction with XRI. This includes the components needed for general input, interaction, and UI interaction.&lt;/p&gt; &#xA;&lt;p&gt;Scripts, assets, and prefabs related to each feature or use case are located in the associated folder in &lt;code&gt;Assets/XRI_Examples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following stations are available in the XRI Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/LocomotionSetup.md&#34;&gt;Station 1: Locomotion Setup&lt;/a&gt; - Overview of the built-in locomotion options and how to configure them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/GrabInteractables.md&#34;&gt;Station 2: Grab Interactables&lt;/a&gt; - Basic object manipulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/ActivateInteractables.md&#34;&gt;Station 3: Activate Interactables&lt;/a&gt; - Manipulation of objects that can be triggered by the user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/SocketInteractors.md&#34;&gt;Station 4: Socket Interactors&lt;/a&gt; - Manipulation of objects that can snap to specific positions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/UI-2D.md&#34;&gt;Station 5: 2D UI&lt;/a&gt; - Creation and interaction with &lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.ugui@1.0/manual/UICanvas.html#world-space&#34;&gt;world space&lt;/a&gt; 2D UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/UI-3D.md&#34;&gt;Station 6: 3D UI&lt;/a&gt; - Creation and interaction with 3D constrained controls.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/PhysicsInteractables.md&#34;&gt;Station 7: Physics Interactables&lt;/a&gt; - Best practices for combining physics and XR input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a list of new features and deprecations, see &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/CHANGELOG.md&#34;&gt;XRI Examples Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For an overview of how the &lt;a href=&#34;https://docs.unity3d.com/Manual/com.unity.inputsystem.html&#34;&gt;Input System&lt;/a&gt; is used in this example, see &lt;a href=&#34;https://raw.githubusercontent.com/Unity-Technologies/XR-Interaction-Toolkit-Examples/main/Documentation/Input.md&#34;&gt;Input&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sharing feedback&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://forum.unity.com/forums/xr-interaction-toolkit-and-input.519/&#34;&gt;XR Interaction Toolkit and Input forum&lt;/a&gt; is the best place to open discussions and ask questions. Please use the &lt;a href=&#34;https://portal.productboard.com/brs5gbymuktquzeomnargn2u&#34;&gt;public roadmap&lt;/a&gt; to submit feature requests. If you encounter a bug, please use the Unity Bug Reporter in the Unity Editor, accessible via &lt;strong&gt;Help &amp;gt; Report a Bug&lt;/strong&gt;. Include “XR Interaction Toolkit” in the title to help our team triage things appropriately!&lt;/p&gt; &#xA;&lt;h2&gt;Contributions and pull requests&lt;/h2&gt; &#xA;&lt;p&gt;We are not accepting pull requests at this time.&lt;/p&gt;</summary>
  </entry>
</feed>