<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:30:36Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quasar/Quasar</title>
    <updated>2022-12-06T01:30:36Z</updated>
    <id>tag:github.com,2022-12-06:/quasar/Quasar</id>
    <link href="https://github.com/quasar/Quasar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remote Administration Tool for Windows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quasar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/MaxXor/quasar&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/5857hfy6r1ltb5f2?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/quasar/Quasar/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/quasar/Quasar/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/quasar/Quasar.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Free, Open-Source Remote Administration Tool for Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quasar is a fast and light-weight remote administration tool coded in C#. The usage ranges from user support through day-to-day administrative work to employee monitoring. Providing high stability and an easy-to-use user interface, Quasar is the perfect remote administration solution for you.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/Images/remote-shell.png&#34; alt=&#34;remote-shell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/Images/remote-desktop.png&#34; alt=&#34;remote-desktop&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/Images/remote-files.png&#34; alt=&#34;remote-files&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TCP network stream (IPv4 &amp;amp; IPv6 support)&lt;/li&gt; &#xA; &lt;li&gt;Fast network serialization (Protocol Buffers)&lt;/li&gt; &#xA; &lt;li&gt;Compressed (QuickLZ) &amp;amp; Encrypted (TLS) communication&lt;/li&gt; &#xA; &lt;li&gt;UPnP Support&lt;/li&gt; &#xA; &lt;li&gt;Task Manager&lt;/li&gt; &#xA; &lt;li&gt;File Manager&lt;/li&gt; &#xA; &lt;li&gt;Startup Manager&lt;/li&gt; &#xA; &lt;li&gt;Remote Desktop&lt;/li&gt; &#xA; &lt;li&gt;Remote Shell&lt;/li&gt; &#xA; &lt;li&gt;Remote Execution&lt;/li&gt; &#xA; &lt;li&gt;System Information&lt;/li&gt; &#xA; &lt;li&gt;Registry Editor&lt;/li&gt; &#xA; &lt;li&gt;System Power Commands (Restart, Shutdown, Standby)&lt;/li&gt; &#xA; &lt;li&gt;Keylogger (Unicode Support)&lt;/li&gt; &#xA; &lt;li&gt;Reverse Proxy (SOCKS5)&lt;/li&gt; &#xA; &lt;li&gt;Password Recovery (Common Browsers and FTP Clients)&lt;/li&gt; &#xA; &lt;li&gt;... and many more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quasar/Quasar/releases&#34;&gt;Latest stable release&lt;/a&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ci.appveyor.com/project/MaxXor/quasar&#34;&gt;Latest development snapshot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported runtimes and operating systems&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Framework 4.5.2 or higher&lt;/li&gt; &#xA; &lt;li&gt;Supported operating systems (32- and 64-bit) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 10&lt;/li&gt; &#xA;   &lt;li&gt;Windows Server 2019&lt;/li&gt; &#xA;   &lt;li&gt;Windows Server 2016&lt;/li&gt; &#xA;   &lt;li&gt;Windows 8/8.1&lt;/li&gt; &#xA;   &lt;li&gt;Windows Server 2012&lt;/li&gt; &#xA;   &lt;li&gt;Windows 7&lt;/li&gt; &#xA;   &lt;li&gt;Windows Server 2008&lt;/li&gt; &#xA;   &lt;li&gt;Windows Vista&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For older systems please use &lt;a href=&#34;https://github.com/quasar/Quasar/releases/tag/v1.3.0.0&#34;&gt;Quasar version 1.3.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Open the project &lt;code&gt;Quasar.sln&lt;/code&gt; in Visual Studio 2019+ with installed .NET desktop development features and &lt;a href=&#34;https://docs.microsoft.com/en-us/nuget/consume-packages/package-restore&#34;&gt;restore the NuGET packages&lt;/a&gt;. Once all packages are installed the project can be compiled as usual by clicking &lt;code&gt;Build&lt;/code&gt; at the top or by pressing &lt;code&gt;F6&lt;/code&gt;. The resulting executables can be found in the &lt;code&gt;Bin&lt;/code&gt; directory. See below which build configuration to choose from.&lt;/p&gt; &#xA;&lt;h2&gt;Building a client&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build configuration&lt;/th&gt; &#xA;   &lt;th&gt;Usage scenario&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debug configuration&lt;/td&gt; &#xA;   &lt;td&gt;Testing&lt;/td&gt; &#xA;   &lt;td&gt;The pre-defined &lt;a href=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/Quasar.Client/Config/Settings.cs&#34;&gt;Settings.cs&lt;/a&gt; will be used, so edit this file before compiling the client. You can execute the client directly with the specified settings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release configuration&lt;/td&gt; &#xA;   &lt;td&gt;Production&lt;/td&gt; &#xA;   &lt;td&gt;Start &lt;code&gt;Quasar.exe&lt;/code&gt; and use the client builder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/ROADMAP.md&#34;&gt;ROADMAP.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/quasar/Quasar/wiki&#34;&gt;wiki&lt;/a&gt; for usage instructions and other documentation.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Quasar is distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;br&gt; Third-party licenses are located &lt;a href=&#34;https://raw.githubusercontent.com/quasar/Quasar/master/Licenses&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Thank you!&lt;/h2&gt; &#xA;&lt;p&gt;I really appreciate all kinds of feedback and contributions. Thanks for using and supporting Quasar!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JosefNemec/Playnite</title>
    <updated>2022-12-06T01:30:36Z</updated>
    <id>tag:github.com,2022-12-06:/JosefNemec/Playnite</id>
    <link href="https://github.com/JosefNemec/Playnite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Video game library manager with support for wide range of 3rd party libraries and game emulation support, providing one unified interface for your games.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://playnite.link/applogo.png&#34; width=&#34;32&#34;&gt; Playnite &lt;a href=&#34;https://crowdin.com/project/playnite&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/playnite/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;An open source video game library manager and launcher with support for 3rd party libraries like Steam, GOG, Origin, Battle.net and Uplay. Includes game emulation support, providing one unified interface for your games.&lt;/p&gt; &#xA;&lt;p&gt;Screenshots are available at the &lt;a href=&#34;http://playnite.link/&#34;&gt;Homepage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If you find Playnite useful please consider supporting the lead developer &lt;a href=&#34;https://github.com/JosefNemec&#34;&gt;Josef Nemec&lt;/a&gt; on &lt;a href=&#34;https://www.patreon.com/playnite&#34;&gt;Patreon&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://playnite.link/&#34;&gt;Homepage&lt;/a&gt; for the list of features.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Grab the latest installer or portable package from the &lt;a href=&#34;https://playnite.link/download.html&#34;&gt;download&lt;/a&gt; page. Playnite will automatically notify you about a new version upon release.&lt;/p&gt; &#xA;&lt;p&gt;Requirements: Windows 7, 8 or 10 and &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=53344&#34;&gt;.NET Framework 4.6.2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Playnite can be extended with plugins (written in .NET languages) or by scripts (PowerShell and IronPython are currently supported).&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://playnite.link/docs/&#34;&gt;extensions portal&lt;/a&gt; for tutorials and the full API documentation.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Can be found &lt;a href=&#34;https://github.com/JosefNemec/Playnite/wiki/Frequently-Asked-Questions&#34;&gt;on the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;The list of known issues and solutions can be found &lt;a href=&#34;https://github.com/JosefNemec/Playnite/wiki/Known-Issues&#34;&gt;on the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy Statement&lt;/h2&gt; &#xA;&lt;p&gt;Playnite doesn&#39;t store any user information and you don&#39;t need to provide any information to import installed games. Account connection process is usually done via official login web forms and only the web session cookies or tokens are stored, the same way when you login to those services via the web browser.&lt;/p&gt; &#xA;&lt;p&gt;All information about your library is stored locally on your PC.&lt;/p&gt; &#xA;&lt;h2&gt;Questions, issues etc.&lt;/h2&gt; &#xA;&lt;p&gt;If you find a bug please file an &lt;a href=&#34;https://github.com/JosefNemec/Playnite/issues&#34;&gt;issue&lt;/a&gt; and if relevant (crashes, broken features) please attach a diagnostics package, which can be created from inside the &#34;About Playnite...&#34; submenu.&lt;/p&gt; &#xA;&lt;p&gt;Biggest community around Playnite currently gathers on our &lt;a href=&#34;https://discord.gg/hSFvmN6&#34;&gt;Discord server&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/playnite/&#34;&gt;Reddit&lt;/a&gt;. You can also follow &lt;a href=&#34;https://twitter.com/AppPlaynite&#34;&gt;@AppPlaynite&lt;/a&gt; for general updates.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;h3&gt;Translations&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/JosefNemec/Playnite/wiki/How-to:-Translations&#34;&gt;How to: Translations&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/JosefNemec/Playnite/wiki/How-to%3A-Themes&#34;&gt;How to: Themes&lt;/a&gt; wiki page.&lt;/p&gt; &#xA;&lt;h3&gt;Code Contributions&lt;/h3&gt; &#xA;&lt;p&gt;Please ask in the related issue first before starting implementing something to make sure that nobody else is already working on it. If an issue doesn&#39;t exist for your feature/bug fix, create one first.&lt;/p&gt; &#xA;&lt;p&gt;Regarding code styling, there are only a few major rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;private fields and properties should use camelCase (without underscore)&lt;/li&gt; &#xA; &lt;li&gt;all methods (private and public) should use PascalCase&lt;/li&gt; &#xA; &lt;li&gt;use spaces instead of tabs with 4 spaces width&lt;/li&gt; &#xA; &lt;li&gt;add empty line between code block end &lt;code&gt;}&lt;/code&gt; and additional expression&lt;/li&gt; &#xA; &lt;li&gt;always encapsulate the code body after &lt;em&gt;if, for, foreach, while&lt;/em&gt; etc. with curly braces:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if (true)&#xA;{&#xA;    DoSomething();&#xA;}&#xA;&#xA;DoSomethingElse();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;instead of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if (true)&#xA;    DoSomething();&#xA;DoSomethingElse();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt; - default branch representing state of currently released build.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;devel&lt;/code&gt; - development branch containing latest changes. All pull requests should be made against &lt;code&gt;devel&lt;/code&gt; branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;devel*&lt;/code&gt; - development branches for specific features/versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can see the planned versions with their features in the &lt;a href=&#34;https://github.com/JosefNemec/Playnite/milestones&#34;&gt;milestones overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/JosefNemec/Playnite/wiki/Building&#34;&gt;wiki&lt;/a&gt; for info about building and setting up the development environment.&lt;/p&gt; &#xA;&lt;h2&gt;Others&lt;/h2&gt; &#xA;&lt;p&gt;.NET development tools courtesy of &lt;a href=&#34;https://www.jetbrains.com/?from=Playnite&#34;&gt;JetBrains&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=Playnite&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3874087/128503701-884cdae4-3283-4d67-8ad1-6103e777a660.png&#34; alt=&#34;jetbrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code signing courtesy of &lt;a href=&#34;https://about.signpath.io&#34;&gt;SignPath&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://about.signpath.io&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3874087/128503363-9c39f8cd-9900-4a8b-83f2-81359d4fc731.PNG&#34; alt=&#34;Capture&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Tyrrrz/YoutubeExplode</title>
    <updated>2022-12-06T01:30:36Z</updated>
    <id>tag:github.com,2022-12-06:/Tyrrrz/YoutubeExplode</id>
    <link href="https://github.com/Tyrrrz/YoutubeExplode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Library for exploiting YouTube&#39;s internal API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YoutubeExplode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vshymanskyy.github.io/StandWithUkraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made_in-ukraine-ffd700.svg?labelColor=0057b7&#34; alt=&#34;Made in Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tyrrrz/YoutubeExplode/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/Tyrrrz/YoutubeExplode/CI/master&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Tyrrrz/YoutubeExplode&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/Tyrrrz/YoutubeExplode/master&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuget.org/packages/YoutubeExplode&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/YoutubeExplode.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuget.org/packages/YoutubeExplode&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/YoutubeExplode.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/2SUWKFnHSm&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/869237470565392384?label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tyrrrz.me/donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-$$$-8a2be2.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/tyrrrz/status/1495972128977571848&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/fuck-russia-e4181c.svg?labelColor=000000&#34; alt=&#34;Fuck Russia&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🟡 &lt;strong&gt;Project status&lt;/strong&gt;: maintenance mode&lt;sup&gt;&lt;a href=&#34;https://github.com/Tyrrrz/.github/raw/master/docs/project-status.md&#34;&gt;[?]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;YoutubeExplode&lt;/strong&gt; is a library that provides an interface to query metadata of YouTube videos, playlists and channels, as well as to resolve and download video streams and closed caption tracks. Behind a layer of abstraction, this library works by scraping raw page data and exploiting reverse-engineered internal endpoints.&lt;/p&gt; &#xA;&lt;h2&gt;Terms of use&lt;sup&gt;&lt;a href=&#34;https://github.com/Tyrrrz/.github/raw/master/docs/why-so-political.md&#34;&gt;[?]&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt; &#xA;&lt;p&gt;By using this project or its source code, for any purpose and in any shape or form, you grant your &lt;strong&gt;implicit agreement&lt;/strong&gt; to all the following statements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You &lt;strong&gt;condemn Russia and its military aggression against Ukraine&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;recognize that Russia is an occupant that unlawfully invaded a sovereign state&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;support Ukraine&#39;s territorial integrity, including its claims over temporarily occupied territories of Crimea and Donbas&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;reject false narratives perpetuated by Russian state propaganda&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about the war and how you can help, &lt;a href=&#34;https://tyrrrz.me&#34;&gt;click here&lt;/a&gt;. Glory to Ukraine! 🇺🇦&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📦 &lt;a href=&#34;https://nuget.org/packages/YoutubeExplode&#34;&gt;NuGet&lt;/a&gt;: &lt;code&gt;dotnet add package YoutubeExplode&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Tyrrrz/YoutubeExplode/master/.assets/demo.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;YoutubeExplode&lt;/strong&gt; exposes its functionality through a single entry point — the &lt;code&gt;YoutubeClient&lt;/code&gt; class. Create an instance of this class and use the provided operations on &lt;code&gt;Videos&lt;/code&gt;, &lt;code&gt;Playlists&lt;/code&gt;, &lt;code&gt;Channels&lt;/code&gt;, and &lt;code&gt;Search&lt;/code&gt; properties to send requests.&lt;/p&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;h4&gt;Retrieving video metadata&lt;/h4&gt; &#xA;&lt;p&gt;To retrieve the metadata associated with a YouTube video, call &lt;code&gt;Videos.GetAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;// You can specify either video ID or URL&#xA;var video = await youtube.Videos.GetAsync(&#34;https://youtube.com/watch?v=u_yIGGhubZs&#34;);&#xA;&#xA;var title = video.Title; // &#34;Collections - Blender 2.80 Fundamentals&#34;&#xA;var author = video.Author.ChannelTitle; // &#34;Blender&#34;&#xA;var duration = video.Duration; // 00:07:20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Downloading video streams&lt;/h4&gt; &#xA;&lt;p&gt;Every YouTube video has a number of streams available, differing in containers, video quality, bit rate, frame rate, and other properties. Additionally, depending on the content of the stream, the streams are further divided into 3 categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Muxed streams — contain both video and audio&lt;/li&gt; &#xA; &lt;li&gt;Audio-only streams — contain only audio&lt;/li&gt; &#xA; &lt;li&gt;Video-only streams — contain only video&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Muxed streams contain both audio and video, but these streams are very limited in quality (up to 720p30). To download video in the highest available quality, you will need to resolve the best audio-only and video-only streams separately and then mux them together. This can be accomplished by using FFmpeg together with the &lt;a href=&#34;https://raw.githubusercontent.com/Tyrrrz/YoutubeExplode/master/YoutubeExplode.Converter&#34;&gt;&lt;strong&gt;YoutubeExplode.Converter&lt;/strong&gt;&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can request the manifest that lists all available streams for a particular video by calling &lt;code&gt;Videos.Streams.GetManifestAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var streamManifest = await youtube.Videos.Streams.GetManifestAsync(&#xA;    &#34;https://youtube.com/watch?v=u_yIGGhubZs&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you get the manifest, you can filter through the streams and select the ones you&#39;re interested in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;using YoutubeExplode.Videos.Streams;&#xA;&#xA;// ...&#xA;&#xA;// Get highest quality muxed stream&#xA;var streamInfo = streamManifest.GetMuxedStreams().GetWithHighestVideoQuality();&#xA;&#xA;// ...or highest bitrate audio-only stream&#xA;var streamInfo = streamManifest.GetAudioOnlyStreams().GetWithHighestBitrate();&#xA;&#xA;// ...or highest quality MP4 video-only stream&#xA;var streamInfo = streamManifest&#xA;    .GetVideoOnlyStreams()&#xA;    .Where(s =&amp;gt; s.Container == Container.Mp4)&#xA;    .GetWithHighestVideoQuality()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can resolve the actual stream represented by the specified metadata using &lt;code&gt;Videos.Streams.GetAsync(...)&lt;/code&gt; or download it directly to a file with &lt;code&gt;Videos.Streams.DownloadAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ...&#xA;&#xA;// Get the actual stream&#xA;var stream = await youtube.Videos.Streams.GetAsync(streamInfo);&#xA;&#xA;// Download the stream to a file&#xA;await youtube.Videos.Streams.DownloadAsync(streamInfo, $&#34;video.{streamInfo.Container}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Downloading closed captions&lt;/h4&gt; &#xA;&lt;p&gt;Closed captions can be downloaded in a similar way to media streams. To get the list of available closed caption tracks, call &lt;code&gt;Videos.ClosedCaptions.GetManifestAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var trackManifest = await youtube.Videos.ClosedCaptions.GetManifestAsync(&#xA;    &#34;https://youtube.com/watch?v=u_yIGGhubZs&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then retrieve the metadata for a particular track:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ...&#xA;&#xA;// Find closed caption track in English&#xA;var trackInfo = trackManifest.GetByLanguage(&#34;en&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, use &lt;code&gt;Videos.ClosedCaptions.GetAsync(...)&lt;/code&gt; to get the actual content of the track:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ...&#xA;&#xA;var track = await youtube.Videos.ClosedCaptions.GetAsync(trackInfo);&#xA;&#xA;// Get the caption displayed at 0:35&#xA;var caption = track.GetByTime(TimeSpan.FromSeconds(35));&#xA;var text = caption.Text; // &#34;collection acts as the parent collection&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download the closed caption track in SRT file format with &lt;code&gt;Videos.ClosedCaptions.DownloadAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ...&#xA;&#xA;await youtube.Videos.ClosedCaptions.DownloadAsync(trackInfo, &#34;cc_track.srt&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Playlists&lt;/h3&gt; &#xA;&lt;h4&gt;Retrieving playlist metadata&lt;/h4&gt; &#xA;&lt;p&gt;You can get the metadata associated with a YouTube playlist by calling &lt;code&gt;Playlists.GetAsync(...)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var playlist = await youtube.Playlists.GetAsync(&#xA;    &#34;https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6&#34;&#xA;);&#xA;&#xA;var title = playlist.Title; // &#34;First Steps - Blender 2.80 Fundamentals&#34;&#xA;var author = playlist.Author.ChannelTitle; // &#34;Blender&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Getting videos included in a playlist&lt;/h4&gt; &#xA;&lt;p&gt;To get the videos included in a playlist, call &lt;code&gt;Playlists.GetVideosAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;using YoutubeExplode.Common;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;// Get all playlist videos&#xA;var videos = await youtube.Playlists.GetVideosAsync(&#xA;    &#34;https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6&#34;&#xA;);&#xA;&#xA;// Get only the first 20 playlist videos&#xA;var videosSubset = await youtube.Playlists&#xA;    .GetVideosAsync(playlist.Id)&#xA;    .CollectAsync(20);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enumerate the videos iteratively without waiting for the whole list to load:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;await foreach (var video in youtube.Playlists.GetVideosAsync(&#xA;    &#34;https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6&#34;&#xA;))&#xA;{&#xA;    var title = video.Title;&#xA;    var author = video.Author;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need precise control over how many requests you send to YouTube, use &lt;code&gt;Playlists.GetVideoBatchesAsync(...)&lt;/code&gt; which returns videos wrapped in batches:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;// Each batch corresponds to one request&#xA;await foreach (var batch in youtube.Playlists.GetVideoBatchesAsync(&#xA;    &#34;https://youtube.com/playlist?list=PLa1F2ddGya_-UvuAqHAksYnB0qL9yWDO6&#34;&#xA;))&#xA;{&#xA;    foreach (var video in batch.Items)&#xA;    {&#xA;        var title = video.Title;&#xA;        var author = video.Author;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Channels&lt;/h3&gt; &#xA;&lt;h4&gt;Retrieving channel metadata&lt;/h4&gt; &#xA;&lt;p&gt;You can get the metadata associated with a YouTube channel by calling &lt;code&gt;Channels.GetAsync(...)&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var channel = await youtube.Channels.GetAsync(&#xA;    &#34;https://youtube.com/channel/UCSMOQeBJ2RAnuFungnQOxLg&#34;&#xA;);&#xA;&#xA;var title = channel.Title; // &#34;Blender&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also get the channel metadata by username with &lt;code&gt;Channels.GetByUserAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var channel = await youtube.Channels.GetByUserAsync(&#34;https://youtube.com/user/BlenderFoundation&#34;);&#xA;&#xA;var id = channel.Id; // &#34;UCSMOQeBJ2RAnuFungnQOxLg&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the channel metadata by slug or custom URL, use &lt;code&gt;Channels.GetBySlugAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var channel = await youtube.Channels.GetBySlugAsync(&#34;https://youtube.com/c/BlenderFoundation&#34;);&#xA;&#xA;var id = channel.Id; // &#34;UCSMOQeBJ2RAnuFungnQOxLg&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the channel metadata by handle or handle URL, use &lt;code&gt;Channels.GetByHandleAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var channel = await youtube.Channels.GetByHandleAsync(&#34;https://youtube.com/@BeauMiles&#34;);&#xA;&#xA;var id = channel.Id; // &#34;UCm325cMiw9B15xl22_gr6Dw&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Getting channel uploads&lt;/h4&gt; &#xA;&lt;p&gt;To get a list of videos uploaded by a channel, call &lt;code&gt;Channels.GetUploadsAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;using YoutubeExplode.Common;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var videos = await youtube.Channels.GetUploadsAsync(&#xA;    &#34;https://youtube.com/channel/UCSMOQeBJ2RAnuFungnQOxLg&#34;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Searching&lt;/h3&gt; &#xA;&lt;p&gt;You can execute a search query and get its results by calling &lt;code&gt;Search.GetResultsAsync(...)&lt;/code&gt;. Each result may represent either a video, a playlist, or a channel, so you need to apply pattern matching to handle the corresponding cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;await foreach (var result in youtube.Search.GetResultsAsync(&#34;blender tutorials&#34;))&#xA;{&#xA;    // Use pattern matching to handle different results (videos, playlists, channels)&#xA;    switch (result)&#xA;    {&#xA;        case VideoSearchResult video:&#xA;        {&#xA;            var id = video.Id;&#xA;            var title = video.Title;&#xA;            var duration = video.Duration;&#xA;            break;&#xA;        }&#xA;        case PlaylistSearchResult playlist:&#xA;        {&#xA;            var id = playlist.Id;&#xA;            var title = playlist.Title;&#xA;            break;&#xA;        }&#xA;        case ChannelSearchResult channel:&#xA;        {&#xA;            var id = channel.Id;&#xA;            var title = channel.Title;&#xA;            break;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To limit results to a specific type, use &lt;code&gt;Search.GetVideosAsync(...)&lt;/code&gt;, &lt;code&gt;Search.GetPlaylistsAsync(...)&lt;/code&gt;, or &lt;code&gt;Search.GetChannelsAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;using YoutubeExplode.Common;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;var videos = await youtube.Search.GetVideosAsync(&#34;blender tutorials&#34;);&#xA;var playlists = await youtube.Search.GetPlaylistsAsync(&#34;blender tutorials&#34;);&#xA;var channels = await youtube.Search.GetChannelsAsync(&#34;blender tutorials&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly to playlists, you can also enumerate results in batches by calling &lt;code&gt;Search.GetResultBatchesAsync(...)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using YoutubeExplode;&#xA;&#xA;var youtube = new YoutubeClient();&#xA;&#xA;// Each batch corresponds to one request&#xA;await foreach (var batch in youtube.Search.GetResultBatchesAsync(&#34;blender tutorials&#34;))&#xA;{&#xA;    foreach (var result in batch.Items)&#xA;    {&#xA;        switch (result)&#xA;        {&#xA;            case VideoSearchResult videoResult:&#xA;            {&#xA;                // ...&#xA;            }&#xA;            case PlaylistSearchResult playlistResult:&#xA;            {&#xA;                // ...&#xA;            }&#xA;            case ChannelSearchResult channelResult:&#xA;            {&#xA;                // ...&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Etymology&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;Explode&#34; in &lt;strong&gt;YoutubeExplode&lt;/strong&gt; comes from the name of a PHP function that splits up strings, &lt;a href=&#34;https://www.php.net/manual/en/function.explode.php&#34;&gt;&lt;code&gt;explode(...)&lt;/code&gt;&lt;/a&gt;. When I was starting the development of this library, most of the reference source code I read was written in PHP, hence the inspiration for the name.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tyrrrz/YoutubeExplode/master/YoutubeExplode.Converter&#34;&gt;&lt;strong&gt;YoutubeExplode.Converter&lt;/strong&gt;&lt;/a&gt; — provides capabilities for downloading YouTube videos with conversion to other formats, using FFmpeg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tyrrrz/YoutubeDownloader&#34;&gt;&lt;strong&gt;YoutubeDownloader&lt;/strong&gt;&lt;/a&gt; — desktop application for downloading YouTube videos, based on &lt;strong&gt;YoutubeExplode&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>