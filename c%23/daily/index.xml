<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-17T01:32:26Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dvf/blockchain</title>
    <updated>2022-11-17T01:32:26Z</updated>
    <id>tag:github.com,2022-11-17:/dvf/blockchain</id>
    <link href="https://github.com/dvf/blockchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple Blockchain in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Are you looking for the source code for my book?&lt;/h1&gt; &#xA;&lt;p&gt;Please find it here: &lt;a href=&#34;https://github.com/dvf/blockchain-book&#34;&gt;https://github.com/dvf/blockchain-book&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The book is available on Amazon: &lt;a href=&#34;https://www.amazon.com/Learn-Blockchain-Building-Understanding-Cryptocurrencies/dp/1484251709&#34;&gt;https://www.amazon.com/Learn-Blockchain-Building-Understanding-Cryptocurrencies/dp/1484251709&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Learn Blockchains by Building&amp;nbsp;One&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dvf/blockchain&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dvf/blockchain.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the source code for my post on &lt;a href=&#34;https://medium.com/p/117428612f46&#34;&gt;Building a Blockchain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3.6+&lt;/a&gt; is installed.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/kennethreitz/pipenv&#34;&gt;pipenv&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install pipenv &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install requirements&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the server: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;$ pipenv run python blockchain.py&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$ pipenv run python blockchain.py -p 5001&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$ pipenv run python blockchain.py --port 5002&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Another option for running this blockchain program is to use Docker. Follow the instructions below to create a local Docker container:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Build the docker container&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker build -t blockchain .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the container&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm -p 80:5000 blockchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To add more instances, vary the public port number before the colon:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --rm -p 81:5000 blockchain&#xA;$ docker run --rm -p 82:5000 blockchain&#xA;$ docker run --rm -p 83:5000 blockchain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation (C# Implementation)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a free copy of Visual Studio IDE (Community Edition): &lt;a href=&#34;https://www.visualstudio.com/vs/&#34;&gt;https://www.visualstudio.com/vs/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once installed, open the solution file (BlockChain.sln) using the File &amp;gt; Open &amp;gt; Project/Solution menu options within Visual Studio.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;From within the &#34;Solution Explorer&#34;, right click the BlockChain.Console project and select the &#34;Set As Startup Project&#34; option.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &#34;Start&#34; button, or hit F5 to run. The program executes in a console window, and is controlled via HTTP with the same commands as the Python version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>heathbm/BatchPool</title>
    <updated>2022-11-17T01:32:26Z</updated>
    <id>tag:github.com,2022-11-17:/heathbm/BatchPool</id>
    <link href="https://github.com/heathbm/BatchPool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The one-stop generic task batching and management library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BatchPool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/heathbm/BatchPool/actions/workflows/dotnet.yml&#34;&gt;&lt;img src=&#34;https://github.com/heathbm/BatchPool/actions/workflows/dotnet.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Tests&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/BatchPool&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/BatchPool&#34; alt=&#34;NuGet Version&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/BatchPool&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/BatchPool?label=nuget%20downloads&#34; alt=&#34;NuGet Downlaods&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/heathbm/BatchPool/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/heathbm/batchpool&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The one-stop generic task batching and management library.&lt;br&gt; Contributions are welcome to add features, flexibility, performance test coverage...&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very low overhead, flexible, high test coverage, generic...&lt;/li&gt; &#xA; &lt;li&gt;Tasks are executed in the order in which they are received&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#supports-task--func-and-action&#34;&gt;Supports Task, Func and Action&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#batchpoolcontainer-states--enabled---paused&#34;&gt;BatchPoolContainer states: Enabled / Paused&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#dynamic-batch-size--update-the-size-of-the-batchpool&#34;&gt;Dynamic batch size: update the size of the BatchPool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#callbacks--supports-task--func-and-action&#34;&gt;Callbacks: supports Task, Func and Action&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#check-the-state-of-a-task&#34;&gt;Check the state of a task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#task-cancellation&#34;&gt;Task Cancellation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#batchpoolcontainer-cancellation&#34;&gt;batchPoolContainer Cancellation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#adding-tasks-in-batch&#34;&gt;Adding tasks in batch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#waiting-for-tasks-to-finish&#34;&gt;Waiting for tasks to finish&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#batchpoolcontainermanager&#34;&gt;BatchPoolContainerManager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/heathbm/BatchPool/main/#batchpoolcontainermanager-with-di&#34;&gt;BatchPoolContainerManager with DI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supports Task, Func and Action&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;// Set batchSize to configure the maximum number of tasks that can be run concurrently&#xA;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true);&#xA;&#xA;// Task&#xA;Task aTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;BatchPoolTask task = batchPoolContainer.Add(aTask);&#xA;await task.WaitForTaskAsync();&#xA;&#xA;// Func&#xA;Func&amp;lt;Task&amp;gt; aFunc = async () =&amp;gt; Console.WriteLine(&#34;Hello&#34;);&#xA;BatchPoolTask func = batchPoolContainer.Add(aFunc);&#xA;await func.WaitForTaskAsync();&#xA;&#xA;// Action&#xA;Action anAction = () =&amp;gt; Console.WriteLine(&#34;Hello&#34;);&#xA;BatchPoolTask action = batchPoolContainer.Add(anAction);&#xA;await action.WaitForTaskAsync();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BatchPoolContainer states: Enabled / Paused&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;// Set isEnabled to configure the state of the batchPoolContainer at initialization&#xA;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: false);&#xA;&#xA;Task aTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;BatchPoolTask task = batchPoolContainer.Add(aTask);&#xA;await task.WaitForTaskAsync();&#xA;&#xA;// Resume and forget&#xA;batchPoolContainer.ResumeAndForget();&#xA;// Or resume and wait for all task to finish&#xA;await batchPoolContainer.ResumeAndWaitForAllAsync();&#xA;&#xA;// Then pause again to prevent new pending tasks to run&#xA;batchPoolContainer.Pause();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dynamic batch size: update the size of the BatchPool&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: false);&#xA;&#xA;// Increase or reduce the capacity and wait for it to finish updating. (The batchPoolContainer will need to wait if a reduction is requested while it is currently processing)&#xA;await batchPoolContainer.UpdateCapacityAsync(10);&#xA;// Perform the same operation in the background&#xA;batchPoolContainer.UpdateCapacityAndForget(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Callbacks: supports Task, Func and Action&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true);&#xA;&#xA;Task aTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;// The callback will run as soon as the main task completes&#xA;Task aCallbackTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;&#xA;BatchPoolTask task = batchPoolContainer.Add(aTask, aCallbackTask);&#xA;await task.WaitForTaskAsync();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check the state of a task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true);&#xA;&#xA;Task aTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;BatchPoolTask task = batchPoolContainer.Add(aTask);&#xA;&#xA;bool isCancelled = task.IsCancelled;&#xA;bool isCompleted = task.IsCompleted;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Task Cancellation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true);&#xA;&#xA;Task aTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;BatchPoolTask task = batchPoolContainer.Add(aTask);&#xA;&#xA;// Attempt to cancel&#xA;bool didCancel = task.Cancel();&#xA;// Attempt to cancel all pending tasks (pending = tasks that have not yet started processing due to the batch size, or the paused state of the BatchPool)&#xA;batchPoolContainer.RemoveAndCancelPendingTasks();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;batchPoolContainer Cancellation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();&#xA;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true, cancellationToken: cancellationTokenSource.Token);&#xA;// All pending tasks will be cancelled&#xA;cancellationTokenSource.Cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding tasks in batch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true);&#xA;&#xA;Task aTask1 = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;Task aTask2 = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;List&amp;lt;Task&amp;gt; listOfTasks = new List&amp;lt;Task&amp;gt;() { aTask1, aTask2 };&#xA;&#xA;ICollection&amp;lt;BatchPoolTask&amp;gt; tasks = batchPoolContainer.Add(listOfTasks);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Waiting for tasks to finish&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainer batchPoolContainer = new BatchPoolContainer(batchSize: 5, isEnabled: true);&#xA;&#xA;Task aTask1 = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;Task aTask2 = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;List&amp;lt;Task&amp;gt; listOfTasks = new List&amp;lt;Task&amp;gt;() { aTask1, aTask2 };&#xA;&#xA;List&amp;lt;BatchPoolTask&amp;gt; tasks = batchPoolContainer.Add(listOfTasks);&#xA;&#xA;// Wait for each task individually&#xA;await tasks[0].WaitForTaskAsync();&#xA;await tasks[1].WaitForTaskAsync();&#xA;&#xA;// Wait for all tasks to finish&#xA;await batchPoolContainer.WaitForAllAsync();&#xA;// With timeoutInMilliseconds&#xA;await batchPoolContainer.WaitForAllAsync(timeoutInMilliseconds: 100);&#xA;// With timeout&#xA;await batchPoolContainer.WaitForAllAsync(timeout: TimeSpan.FromMilliseconds(100));&#xA;// With cancellationToken&#xA;CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();&#xA;await batchPoolContainer.WaitForAllAsync(cancellationToken: cancellationTokenSource.Token);&#xA;&#xA;// With cancellationToken and timeoutInMilliseconds/cancellationToken&#xA;await batchPoolContainer.WaitForAllAsync(timeoutInMilliseconds: 100, cancellationTokenSource.Token);&#xA;await batchPoolContainer.WaitForAllAsync(timeout: TimeSpan.FromMilliseconds(100), cancellationTokenSource.Token);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BatchPoolContainerManager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;BatchPoolContainerManager batchPoolContainerManager = new BatchPoolContainerManager();&#xA;&#xA;// Create and register a BatchPool&#xA;batchPoolContainer batchPool = batchPoolContainerManager.CreateAndRegisterBatch(&#34;UniqueBatchPoolName&#34;, batchSize: 5, isEnabled: true);&#xA;&#xA;// Retrieve the BatchPool&#xA;bool isFound = batchPoolContainerManager.TryGetBatchPool(&#34;UniqueBatchPoolName&#34;, out batchPoolContainer retrievedBatchPool);&#xA;&#xA;Task aTask = new Task(() =&amp;gt; Console.WriteLine(&#34;Hello&#34;));&#xA;BatchPoolTask task = batchPoolContainer.Add(aTask);&#xA;&#xA;// Wait for all tasks in all BatchPools to finish&#xA;await batchPoolContainerManager.WaitForAllBatchPools();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BatchPoolContainerManager with DI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;IHost hostBuilder = Host.CreateDefaultBuilder()&#xA;    .ConfigureServices((_, services) =&amp;gt; services.AddSingleton&amp;lt;BatchPoolContainerManager&amp;gt;())&#xA;    .Build();&#xA;&#xA;using IServiceScope serviceScope = hostBuilder.Services.CreateScope();&#xA;IServiceProvider serviceProvider = serviceScope.ServiceProvider;&#xA;&#xA;BatchPoolContainerManager batchPoolContainerManager = serviceProvider.GetRequiredService&amp;lt;BatchPoolContainerManager&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>