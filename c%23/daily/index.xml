<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-25T01:33:30Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liukuo362573/YiShaAdmin</title>
    <updated>2023-02-25T01:33:30Z</updated>
    <id>tag:github.com,2023-02-25:/liukuo362573/YiShaAdmin</id>
    <link href="https://github.com/liukuo362573/YiShaAdmin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于 .NET Core MVC 的权限管理系统，代码易读易懂、界面简洁美观&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;YiShaAdmin&lt;/h2&gt; &#xA;&lt;p&gt;YiShaAdmin 基于.NET Core Web开发，借鉴了很多开源项目的优点，让你开发Web管理系统和移动端Api更简单，所以我也把她开源了。 她可以用于所有的Web应用程序，例如网站管理后台、CMS、CRM、ERP、OA这类的系统和移动端Api。&lt;br&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;YiShaAdmin 版本&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET Core 版本&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;是否支持&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;链接&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Developer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;支持(开发中，不建议商用)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/liukuo362573/YiShaAdmin/tree/YiShaAdmin-Net6&#34;&gt;YiShaAdmin-Net6.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/zgcwkj&#34;&gt;zgcwkj&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;支持&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/liukuo362573/YiShaAdmin/tree/master&#34;&gt;YiShaAdmin-Net3.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;支持&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/liukuo362573/YiShaAdmin/releases/tag/v2.2&#34;&gt;YiShaAdmin-Net2.2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;内置功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;员工管理：员工是系统操作者，该功能主要完成系统用户配置&lt;/li&gt; &#xA; &lt;li&gt;部门管理：配置系统组织机构（公司、部门、小组）&lt;/li&gt; &#xA; &lt;li&gt;职位管理：配置系统用户所担任职务&lt;/li&gt; &#xA; &lt;li&gt;文章中心：管理新闻及公司案例&lt;/li&gt; &#xA; &lt;li&gt;角色管理：角色菜单权限分配，角色对应权限，员工属于某个角色&lt;/li&gt; &#xA; &lt;li&gt;菜单管理：配置系统菜单，操作权限，按钮权限标识&lt;/li&gt; &#xA; &lt;li&gt;通用字典：系统里动态改变的数据，像文章类型，用字典进行维护，不变的数据，可以用枚举&lt;/li&gt; &#xA; &lt;li&gt;行政区划：全国的省市县三级数据，展示树形数据的使用&lt;/li&gt; &#xA; &lt;li&gt;系统日志（登录日志、操作日志、Api日志）：查看系统的登录、操作、Api调用日志&lt;/li&gt; &#xA; &lt;li&gt;定时任务：在线（添加、修改、删除）任务调度，包含执行结果日志&lt;/li&gt; &#xA; &lt;li&gt;系统Api：Api文档与测试工具&lt;/li&gt; &#xA; &lt;li&gt;数据表管理：查看当前数据库所有表、字段及记录总数&lt;/li&gt; &#xA; &lt;li&gt;代码生成：快速生成对单表的增删改查&lt;/li&gt; &#xA; &lt;li&gt;服务器信息：查看服务器的基本信息&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开发文档&lt;/h2&gt; &#xA;&lt;p&gt;文档地址：&lt;a href=&#34;http://www.toolhelper.cn/doc&#34;&gt;https://www.toolhelper.cn/doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;QQ 交流群&lt;/h2&gt; &#xA;&lt;p&gt;851661600&lt;/p&gt; &#xA;&lt;h2&gt;演示图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liukuo362573/YiShaAdmin/master/YiSha.Web/YiSha.Admin.Web/wwwroot/image/demo_1.jpg&#34; alt=&#34;登录页面&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/liukuo362573/YiShaAdmin/master/YiSha.Web/YiSha.Admin.Web/wwwroot/image/demo_2.png&#34; alt=&#34;登录进去首页&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/liukuo362573/YiShaAdmin/master/YiSha.Web/YiSha.Admin.Web/wwwroot/image/demo_3.png&#34; alt=&#34;用户列表&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/liukuo362573/YiShaAdmin/master/YiSha.Web/YiSha.Admin.Web/wwwroot/image/demo_4.png&#34; alt=&#34;用户列表修改&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;如何参与开源项目&lt;/h2&gt; &#xA;&lt;p&gt;贡献使开源社区成为一个学习、激励和创造的绝佳场所。你所作的任何贡献都是&lt;strong&gt;非常感谢&lt;/strong&gt;的。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork本项目&lt;/li&gt; &#xA; &lt;li&gt;创建开发分支 (&lt;code&gt;git checkout -b dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;提交更改 (&lt;code&gt;git commit -m &#39;Add something&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;推送到分支 (&lt;code&gt;git push origin dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;提&lt;a href=&#34;https://github.com/liukuo362573/YiShaAdmin/compare&#34;&gt;Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/liukuo362573/yishaadmin/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/artifacts-credprovider</title>
    <updated>2023-02-25T01:33:30Z</updated>
    <id>tag:github.com,2023-02-25:/microsoft/artifacts-credprovider</id>
    <link href="https://github.com/microsoft/artifacts-credprovider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Azure Artifacts Credential Provider enables dotnet, NuGet.exe, and MSBuild to interactively acquire credentials for Azure Artifacts feeds.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure Artifacts Credential Provider&lt;/h1&gt; &#xA;&lt;p&gt;The Azure Artifacts Credential Provider automates the acquisition of credentials needed to restore NuGet packages as part of your .NET development workflow. It integrates with MSBuild, dotnet, and NuGet(.exe) and works on Windows, Mac, and Linux. Any time you want to use packages from an&amp;nbsp;Azure Artifacts feed, the Credential Provider will automatically acquire and securely store a token on behalf of the NuGet client you&#39;re using.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=13881&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/mseng/PipelineTools/_apis/build/status/artifacts-credprovider/microsoft.artifacts-credprovider.CI?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#use&#34;&gt;Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#session-token-cache-locations&#34;&gt;Session Token Cache Locations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#release-version-1.0.0&#34;&gt;Release version 1.0.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#help&#34;&gt;Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;MSBuild on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://visualstudio.microsoft.com/vs/preview/&#34;&gt;Visual Studio version 15.9-preview1 or later&lt;/a&gt; to get the required version of MSBuild (&lt;code&gt;15.8.166.59604&lt;/code&gt; or later). Alternatively, you can download MSBuild directly by downloading the &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/?q=build+tools&#34;&gt;Build Tools for Visual Studio&lt;/a&gt;. MSBuild is also installed as a part of the &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;.NET Core SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;NuGet&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/downloads&#34;&gt;NuGet(.exe)&lt;/a&gt; on the command line version &lt;code&gt;4.8.0.5385&lt;/code&gt; or later is required. The recommended NuGet version is &lt;code&gt;5.5.x&lt;/code&gt; or later as it has some important bug fixes related to cancellations and timeouts.&lt;/p&gt; &#xA;&lt;h3&gt;dotnet&lt;/h3&gt; &#xA;&lt;p&gt;The default installation requires &lt;a href=&#34;https://www.microsoft.com/net/download&#34;&gt;dotnet SDK&lt;/a&gt; version &lt;code&gt;3.1.x&lt;/code&gt;. The recommended dotnet version is &lt;code&gt;3.1.200&lt;/code&gt; or later as it has some important bug fixes related to cancellations and timeouts.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;dotnet&lt;/code&gt; or &lt;code&gt;nuget&lt;/code&gt;, you can use the Azure Artifact Credential Provider by adding it to &lt;a href=&#34;https://github.com/NuGet/Home/wiki/NuGet-cross-plat-authentication-plugin#plugin-installation-and-discovery&#34;&gt;NuGet&#39;s plugin search path&lt;/a&gt;. This section contains both manual and scripted instructions for doing so.&lt;/p&gt; &#xA;&lt;p&gt;Dotnet needs the &lt;code&gt;netcore&lt;/code&gt; version to be installed. NuGet and MSBuild need the &lt;code&gt;netfx&lt;/code&gt; version to be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Installation on Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Automatic PowerShell script&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/helpers/installcredprovider.ps1&#34;&gt;PowerShell helper script&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To install netcore, run &lt;code&gt;installcredprovider.ps1&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;iex &#34;&amp;amp; { $(irm https://aka.ms/install-artifacts-credprovider.ps1) }&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To install both netfx and netcore, run &lt;code&gt;installcredprovider.ps1 -AddNetfx&lt;/code&gt;. The netfx version is needed for nuget.exe. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;iex &#34;&amp;amp; { $(irm https://aka.ms/install-artifacts-credprovider.ps1) } -AddNetfx&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Manual installation on Windows&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest release of &lt;a href=&#34;https://github.com/Microsoft/artifacts-credprovider/releases&#34;&gt;Microsoft.NuGet.CredentialProvider.zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unzip the file&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;netcore&lt;/code&gt; (and &lt;code&gt;netfx&lt;/code&gt; for nuget.exe) directory from the extracted archive to &lt;code&gt;$env:UserProfile\.nuget\plugins&lt;/code&gt; (%UserProfile%/.nuget/plugins/)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Using the above is recommended, but as per &lt;a href=&#34;https://github.com/NuGet/Home/wiki/NuGet-cross-plat-authentication-plugin#plugin-installation-and-discovery&#34;&gt;NuGet&#39;s plugin discovery rules&lt;/a&gt;, alternatively you can install the credential provider to a location you prefer, and then set the environment variable NUGET_PLUGIN_PATHS to the .exe of the credential provider found in plugins\netfx\CredentialProvider.Microsoft\CredentialProvider.Microsoft.exe. For example, $env:NUGET_PLUGIN_PATHS=&#34;my-alternative-location\CredentialProvider.Microsoft.exe&#34;. Note that if you are using both nuget and dotnet, this environment variable is not recommended due to this issue: &lt;a href=&#34;https://github.com/NuGet/Home/issues/8151&#34;&gt;https://github.com/NuGet/Home/issues/8151&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation on Linux and Mac&lt;/h3&gt; &#xA;&lt;h4&gt;Automatic bash script&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/helpers/installcredprovider.sh&#34;&gt;Linux or Mac helper script&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;wget -qO- https://aka.ms/install-artifacts-credprovider.sh | bash&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sh -c &#34;$(curl -fsSL https://aka.ms/install-artifacts-credprovider.sh)&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: this script only installs the netcore version of the plugin. If you need to have it working with mono msbuild, you will need to download the version with both netcore and netfx binaries following the steps in &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#installation-on-linux-and-mac&#34;&gt;Manual installation on Linux and Mac&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Manual installation on Linux and Mac&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest release of &lt;a href=&#34;https://github.com/Microsoft/artifacts-credprovider/releases&#34;&gt;Microsoft.NuGet.CredentialProvider.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Untar the file&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;netcore&lt;/code&gt; (and &#39;netfx&#39; for msbuild /t:restore command) directory from the extracted archive to &lt;code&gt;$HOME/.nuget/plugins&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Using the above is recommended, but as per &lt;a href=&#34;https://github.com/NuGet/Home/wiki/NuGet-cross-plat-authentication-plugin#plugin-installation-and-discovery&#34;&gt;NuGet&#39;s plugin discovery rules&lt;/a&gt;, alternatively you can install the credential provider to a location you prefer, and then set the environment variable NUGET_PLUGIN_PATHS to the .dll of the credential provider found in plugins\netcore\CredentialProvider.Microsoft\CredentialProvider.Microsoft.dll. For example, $env:NUGET_PLUGIN_PATHS=&#34;my-alternative-location\CredentialProvider.Microsoft.dll&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Users requiring .NET 6, such as ARM64 users, can manually download the .NET 6 version &lt;code&gt;Microsoft.Net6.NuGet.CredentialProvider&lt;/code&gt; of the &lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider/releases/tag/v1.0.0&#34;&gt;1.0.0 release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MSBuild in Visual Studio Developer Command Prompt with Visual Studio 15.9+&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps Pipelines NuGetAuthenticate task&lt;/li&gt; &#xA; &lt;li&gt;Azure DevOps Pipelines NuGet task, NuGetCommandV2 version 2.145.3+ (Azure DevOps Server 2019 Update 1+)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;Because the Credential Provider is a NuGet plugin, it is most commonly used indirectly, by performing a NuGet operation that requires authentication using &lt;code&gt;dotnet&lt;/code&gt;, &lt;code&gt;nuget&lt;/code&gt;, or &lt;code&gt;msbuild&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;dotnet&lt;/h3&gt; &#xA;&lt;p&gt;The first time you perform an operation that requires authentication using &lt;code&gt;dotnet&lt;/code&gt;, you must either use the &lt;code&gt;--interactive&lt;/code&gt; flag to allow &lt;code&gt;dotnet&lt;/code&gt; to prompt you for credentials, or provide them via an environment variable.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running interactively navigate to your project directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet restore --interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve successfully acquired a token, you can run authenticated commands without the &lt;code&gt;--interactive&lt;/code&gt; flag for the lifespan of the token which is saved in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#session-token-cache-locations&#34;&gt;session token cache location&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;nuget&lt;/h3&gt; &#xA;&lt;p&gt;The nuget client will prompt for authentication when you run a &lt;code&gt;restore&lt;/code&gt; and it does not find credential in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#session-token-cache-locations&#34;&gt;session token cache location&lt;/a&gt;. By default, it will attempt to open a dialog for authentication and will fall back to console input if that fails.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nuget restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Windows and you are already signed in to Azure DevOps, Windows Integrated Authentication may be used to get automatically authenticated as the signed in user.&lt;/p&gt; &#xA;&lt;h3&gt;msbuild&lt;/h3&gt; &#xA;&lt;p&gt;The first time you perform an operation that requires authentication using &lt;code&gt;msbuild&lt;/code&gt;, you must use the &lt;code&gt;/p:nugetInteractive=true&lt;/code&gt; switch to allow &lt;code&gt;msbuild&lt;/code&gt; to prompt you for credentials. For example, to restore packages, navigate to your project or solution directory and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;msbuild /t:restore /p:nugetInteractive=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve successfully acquired a token, you can run authenticated commands without the &lt;code&gt;/p:nugetInteractive=true&lt;/code&gt; switch.&lt;/p&gt; &#xA;&lt;h3&gt;Unattended build agents&lt;/h3&gt; &#xA;&lt;h4&gt;Azure DevOps Pipelines&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget-authenticate?view=azure-devops&#34;&gt;NuGet Authenticate&lt;/a&gt; task before running NuGet, dotnet or MSBuild commands that need authentication.&lt;/p&gt; &#xA;&lt;h4&gt;Other automated build scenarios&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re running the command as part of an automated build on an unattended build agent outside of Azure DevOps Pipelines, you can supply an access token directly using the &lt;code&gt;VSS_NUGET_EXTERNAL_FEED_ENDPOINTS&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#environment-variables&#34;&gt;environment variable&lt;/a&gt;. The use of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&#34;&gt;Personal Access Tokens&lt;/a&gt; is recommended. You may need to restart the agent service or the computer before the environment variables are available to the agent.&lt;/p&gt; &#xA;&lt;h3&gt;Docker containers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-docker/raw/master/documentation/scenarios/nuget-credentials.md#using-the-azure-artifact-credential-provider&#34;&gt;Managing NuGet credentials in Docker scenarios&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Azure DevOps Server&lt;/h3&gt; &#xA;&lt;p&gt;The Azure Artifacts Credential Provider may not be necessary for an on-premises Azure DevOps Server on Windows. If the credential provider is needed, it cannot acquire credentials interactively, therefore, the VSS_NUGET_EXTERNAL_FEED_ENDPOINTS environment variable must be used as an alternative. Supply a &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops&#34;&gt;Personal Access Token&lt;/a&gt; directly using the &lt;code&gt;VSS_NUGET_EXTERNAL_FEED_ENDPOINTS&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/#environment-variables&#34;&gt;environment variable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From Azure DevOps Server 2020 RC1 forward, the NuGet Authenticate task can be used in Pipelines.&lt;/p&gt; &#xA;&lt;h2&gt;Session Token Cache Locations&lt;/h2&gt; &#xA;&lt;p&gt;The Credential Provider will save session tokens in the following locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;code&gt;$env:UserProfile\AppData\Local\MicrosoftCredentialProvider&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux/MAC: &lt;code&gt;$HOME/.local/share/MicrosoftCredentialProvider/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The Credential Provider accepts a set of environment variables. Not all of them we recommend using in production, but these two are considered safe.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED&lt;/code&gt;: Controls whether or not the session token is saved to disk. If false, the Credential Provider will prompt for auth every time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VSS_NUGET_EXTERNAL_FEED_ENDPOINTS&lt;/code&gt;: Json that contains an array of service endpoints, usernames and access tokens to authenticate endpoints in nuget.config. Example:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; {&#34;endpointCredentials&#34;: [{&#34;endpoint&#34;:&#34;http://example.index.json&#34;, &#34;username&#34;:&#34;optional&#34;, &#34;password&#34;:&#34;accesstoken&#34;}]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Release version 1.0.0&lt;/h2&gt; &#xA;&lt;p&gt;Release version &lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider/releases/tag/v1.0.0&#34;&gt;1.0.0&lt;/a&gt; was released in March 2022. Netcore version 1.0.0 of the Artifacts Credential Provider requires .NET Core 3.1. Older versions than 1.0.0 required .NET Core 2.1. &lt;code&gt;Microsoft.NetCore2.NuGet.CredentialProvider&lt;/code&gt; asset is no longer available. Use &lt;code&gt;Microsoft.NetCore3.NuGet.CredentialProvider.zip&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider/releases/tag/v1.0.0&#34;&gt;1.0.0 release&lt;/a&gt; also publishes the credential provider for .NET 6 users as &lt;code&gt;Microsoft.Net6.NuGet.CredentialProvider&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;The windows plugin, delivered in the &lt;code&gt;netfx&lt;/code&gt; folder of &lt;code&gt;Microsoft.NuGet.CredentialProvider.zip&lt;/code&gt;, ships a stand-alone executable that will acquire credentials. This program will place the credentials in the same location that the .dll would if it were called by nuget.exe, dotnet.exe, or msbuild.exe. The stand-alone executable will also print the available command options, environment variables, and credential storage locations. This information is reproduced here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; .\CredentialProvider.Microsoft.exe -h&#xA;Command-line v0.1.17: .\CredentialProvider.Microsoft.exe  -h&#xA;&#xA;The Azure Artifacts credential provider can be used to aquire credentials for Azure Artifacts.&#xA;&#xA;Note: The Azure Artifacts Credential Provider is mainly intended for use via integrations with development tools such as .NET Core and nuget.exe.&#xA;While it can be used via this CLI in &#34;stand-alone mode&#34;, please pay special attention to certain options such as -IsRetry below.&#xA;Failing to do so may result in obtaining invalid credentials.&#xA;&#xA;Usage - CredentialProvider.Microsoft -options&#xA;&#xA;GlobalOption          Description&#xA;Plugin (-P)           Used by nuget to run the credential helper in plugin mode&#xA;Uri (-U)              The package source URI for which credentials will be filled&#xA;NonInteractive (-N)   If present and true, providers will not issue interactive prompts&#xA;IsRetry (-I)          If false / unset, INVALID CREDENTIALS MAY BE RETURNED. The caller is required to validate returned credentials themselves, and if invalid, should call the credential provider again with -IsRetry set. If true, the&#xA;                      credential provider will obtain new credentials instead of returning potentially invalid credentials from the cache.&#xA;Verbosity (-V)        Display this amount of detail in the output [Default=&#39;Information&#39;]&#xA;                      Debug&#xA;                      Verbose&#xA;                      Information&#xA;                      Minimal&#xA;                      Warning&#xA;                      Error&#xA;RedactPassword (-R)   Prevents writing the password to standard output (for troubleshooting purposes)&#xA;Help (-?, -h)         Prints this help message&#xA;CanShowDialog (-C)    If true, user can be prompted with credentials through UI, if false, device flow must be used&#xA;OutputFormat (-F)     In standalone mode, format the results for human readability or as JSON. If JSON is selected, then logging (which may include Device Code instructions) will be logged to standard error instead of standard output.&#xA;                      HumanReadable&#xA;                      Json&#xA;&#xA;List of Environment Variables&#xA;    The following is a list of environment variables that can be used to modify the&#xA;    behavior of the credential provider. They may be used for workarounds but their&#xA;    use is not supported. Use at your own risk.&#xA;&#xA;Log Path&#xA;    NUGET_CREDENTIALPROVIDER_LOG_PATH&#xA;        Absolute path to a log file where the provider will write log messages.&#xA;&#xA;Session Token Cache Enabled&#xA;    NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED&#xA;        Boolean to enable/disable the Session Token cache.&#xA;&#xA;ADAL Authority&#xA;    NUGET_CREDENTIALPROVIDER_ADAL_AUTHORITY&#xA;        Set to override the authority used when fetching an ADAL token.&#xA;        e.g. https://login.microsoftonline.com&#xA;&#xA;ADAL Token File Cache Enabled&#xA;    NUGET_CREDENTIALPROVIDER_ADAL_FILECACHE_ENABLED&#xA;        Boolean to enable/disable the ADAL token cache. Disabled by default.&#xA;&#xA;PPE ADAL Hosts&#xA;    NUGET_CREDENTIALPROVIDER_ADAL_PPEHOSTS&#xA;        Semi-colon separated list of hosts that should use the PPE environment&#xA;        when fetching ADAL tokens. Should only be used for testing/development&#xA;        environments such as DevFabric.&#xA;&#xA;Supported Hosts&#xA;    NUGET_CREDENTIALPROVIDER_VSTS_HOSTS&#xA;        Semi-colon separated list of hosts that the ADAL provider supports.&#xA;&#xA;Session Token Time Validity&#xA;    NUGET_CREDENTIALPROVIDER_VSTS_SESSIONTIMEMINUTES&#xA;        Time in minutes the generated Session Tokens will be valid for.&#xA;        The default for Personal Access Tokens is 90 days.&#xA;        The default for JWT (self-describing) tokens is 4 hours.&#xA;        The maximum allowed validity period for JWT tokens is 24 hours.&#xA;&#xA;Token Type&#xA;    NUGET_CREDENTIALPROVIDER_VSTS_TOKENTYPE&#xA;        Specify &#39;Compact&#39; to generate a Personal Access Token, which may&#xA;        have a long validity period as it can easily be revoked from the UI,&#xA;        and sends a notification mail on creation.&#xA;        Specify &#39;SelfDescribing&#39; to generate a shorter-lived JWT token,&#xA;        which does not appear in any UI or notifications&#xA;        and is more difficult to revoke.&#xA;        By default PATs are generated rather than JWTs,&#xA;        unless authentication can be performed non-interactively.&#xA;&#xA;Build Provider URI Prefixes&#xA;    VSS_NUGET_URI_PREFIXES&#xA;        Semi-colon separated list of hosts the build provider supports.&#xA;&#xA;Build Provider Access Token&#xA;    VSS_NUGET_ACCESSTOKEN&#xA;        The Personal Access Token that will be returned as credentials by&#xA;        the build provider.&#xA;&#xA;Build Provider Service Endpoint Json&#xA;    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS&#xA;        Json that contains an array of service endpoints, usernames and&#xA;        access tokens to authenticate endpoints in nuget.config.&#xA;        Example: {&#34;endpointCredentials&#34;: [{&#34;endpoint&#34;:&#34;http://example.index.json&#34;,&#xA;        &#34;username&#34;:&#34;optional&#34;, &#34;password&#34;:&#34;accesstoken&#34;}]}&#xA;&#xA;Cache Location&#xA;    The Credential Provider uses the following paths to cache credentials. If&#xA;    deleted, the credential provider will re-create them but any credentials&#xA;    will need to be provided again.&#xA;&#xA;    ADAL Token Cache&#xA;    C:\Users\someuser\AppData\Local\MicrosoftCredentialProvider\ADALTokenCache.dat&#xA;&#xA;    Session Token Cache&#xA;    C:\Users\someuser\AppData\Local\MicrosoftCredentialProvider\SessionTokenCache.dat&#xA;&#xA;    MSAL Token Cache&#xA;    C:\Users\someuser\AppData\Local\.IdentityService\msal.cache&#xA;&#xA;Windows Integrated Authentication&#xA;    NUGET_CREDENTIALPROVIDER_WINDOWSINTEGRATEDAUTHENTICATION_ENABLED&#xA;        Boolean to enable/disable using silent Windows Integrated Authentication&#xA;        to authenticate as the logged-in user. Enabled by default.&#xA;&#xA;Device Flow Authentication Timeout&#xA;    NUGET_CREDENTIALPROVIDER_VSTS_DEVICEFLOWTIMEOUTSECONDS&#xA;        Device Flow authentication timeout in seconds. Default is 90 seconds.&#xA;&#xA;NuGet workarounds&#xA;    NUGET_CREDENTIALPROVIDER_FORCE_CANSHOWDIALOG_TO&#xA;        Set to &#34;true&#34; or &#34;false&#34; to override any other sources of the&#xA;        CanShowDialog parameter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;h4&gt;How do I know the cred provider is installed correctly? / I&#39;m still getting username/password prompt after installing&lt;/h4&gt; &#xA;&lt;p&gt;This means that either nuget/dotnet was unable to find the cred provider from &lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider#setup&#34;&gt;NuGet&#39;s plugin search path&lt;/a&gt;, or the cred provider failed to authenticate so the client defaulted to the username/password prompt. Verify the cred provider is correctly installed by checking it exists in the nuget/plugins folder in your user profile (Refer to the &lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider#setup&#34;&gt;setup docs&lt;/a&gt;). If using nuget.exe and used the &lt;a href=&#34;https://github.com/microsoft/artifacts-credprovider#automatic-powershell-script&#34;&gt;install script&lt;/a&gt; to install the cred provider, please make sure you ran it with -AddNetfx.&lt;/p&gt; &#xA;&lt;h4&gt;How do I get better error logs from the cred provider?&lt;/h4&gt; &#xA;&lt;p&gt;Run the nuget.exe/dotnet command with detailed verbosity to see more cred provider logs that may help debugging (&lt;code&gt;nuget.exe -verbosity detailed&lt;/code&gt;, &lt;code&gt;dotnet --verbosity detailed&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;How do I find out if my issue is a real 401?&lt;/h4&gt; &#xA;&lt;p&gt;Run the credential provider directly with the following command: &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\.nuget\plugins\netfx\CredentialProvider.Microsoft\CredentialProvider.Microsoft.exe -I -V Verbose -U &#34;https://pkgs.dev.azure.com/{organization}/{project-if-feed-is-project-scoped}/_packaging/{feed}/nuget/v3/index.json&#34;&lt;/code&gt;. Check you have the right permissions from the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/artifacts/feeds/feed-permissions?view=azure-devops&#34;&gt;feed permissions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In an Azure DevOps Pipeline, verify you have set the right permissions for the pipeline by following the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/artifacts/feeds/feed-permissions?view=azure-devops#package-permissions-in-azure-pipelines&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Cred provider used to work but now it asks me to update to .NET Core 3.1.&lt;/h4&gt; &#xA;&lt;p&gt;Because .NET Core 2 is &lt;a href=&#34;https://dotnet.microsoft.com/platform/support/policy/dotnet-core#lifecycle&#34;&gt;out of support&lt;/a&gt;, you should update to .NET Core 3.1 or greater to keep using the latest versions of the credential provider.&lt;/p&gt; &#xA;&lt;p&gt;If you keep using the unsupported .NET Core 2.1 you must use Artifacts Credential Provider version 0.1.28 or lower.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions; see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/artifacts-credprovider/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;When submitting a pull request, please include a description of the problem your PR is trying to solve, details about the changes, and how the change was tested.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sdcb/PaddleSharp</title>
    <updated>2023-02-25T01:33:30Z</updated>
    <id>tag:github.com,2023-02-25:/sdcb/PaddleSharp</id>
    <link href="https://github.com/sdcb/PaddleSharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET/C# binding for Baidu paddle inference library and PaddleOCR&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PaddleSharp &lt;a href=&#34;https://github.com/sdcb/PaddleSharp/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/sdcb/PaddleSharp/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;main&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=K4fBqpyQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ_Group-579060605-52B6EF?style=social&amp;amp;logo=tencent-qq&amp;amp;logoColor=000&amp;amp;logoWidth=20&#34; alt=&#34;QQ&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;💗.NET Wrapper for &lt;code&gt;PaddleInference&lt;/code&gt; C API, include &lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/ocr.md&#34;&gt;PaddleOCR&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/detection.md&#34;&gt;PaddleDetection&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/rotation-detection.md&#34;&gt;Rotation Detector&lt;/a&gt; support &lt;strong&gt;Windows&lt;/strong&gt;(x64), NVIDIA GPU and &lt;strong&gt;Linux&lt;/strong&gt;(Ubuntu-20.04 x64).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/ocr.md&#34;&gt;PaddleOCR&lt;/a&gt; support 14 OCR languages model download on-demand, allow rotated text angle detection, 180 degree text detection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/detection.md&#34;&gt;PaddleDetection&lt;/a&gt; support PPYolo detection model and PicoDet model.&lt;/p&gt; &#xA;&lt;h2&gt;NuGet Packages/Docker Images&lt;/h2&gt; &#xA;&lt;h3&gt;Infrastructure packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleInference&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paddle Inference C API .NET binding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleInference.runtime.win64.openblas&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.openblas&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.openblas.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paddle Inference native windows-x64-openblas binding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleInference.runtime.win64.mkl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.mkl&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.mkl.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paddle Inference native windows-x64-mkldnn binding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Linux does not need a native binding &lt;code&gt;NuGet&lt;/code&gt; package like windows(&lt;code&gt;Sdcb.PaddleInference.runtime.win64.mkl&lt;/code&gt;), instead, you can/should based from a &lt;a href=&#34;https://hub.docker.com/r/sdflysha/dotnet6-focal-paddle2.2.2&#34;&gt;Dockerfile&lt;/a&gt; to development:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Docker Images&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sdflysha/dotnet6-paddle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/sdflysha/dotnet6-paddle&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/sdflysha/dotnet6-paddle&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PaddleInference 2.4.0, OpenCV 4.6.0, based on official Ubuntu 20.04 .NET 6 Runtime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sdflysha/dotnet6sdk-paddle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/sdflysha/dotnet6sdk-paddle&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/sdflysha/dotnet6sdk-paddle&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PaddleInference 2.4.0, OpenCV 4.6.0, based on official Ubuntu 20.04 .NET 6 SDK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Paddle Inference GPU package&lt;/h3&gt; &#xA;&lt;p&gt;Since GPU package are too large(&amp;gt;1.5GB), I cannot publish a NuGet package to nuget.org, there is a limitation of 250MB when upload to Github, there is some related issues to this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PaddlePaddle/Paddle/issues/43874&#34;&gt;https://github.com/PaddlePaddle/Paddle/issues/43874&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NuGet/Home/issues/11706#issuecomment-1167305006&#34;&gt;https://github.com/NuGet/Home/issues/11706#issuecomment-1167305006&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However you&#39;re good to build your own GPU nuget package using &lt;code&gt;01-build-native.linq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is 2 old version GPU package here, might unable to use(not very large at that time):&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;    &lt;th&gt;Version&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Sdcb.PaddleInference.runtime.win64.cuda10_cudnn7&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.cuda10_cudnn7.mkl&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.cuda10_cudnn7.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Paddle Inference native windows-x64(CUDA 10/cuDNN 7.x) binding&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Sdcb.PaddleInference.runtime.win64.cuda11_cudnn8_tr7&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.cuda11_cudnn8_tr7.mkl&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.cuda11_cudnn8_tr7.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Paddle Inference native windows-x64(CUDA 11/cuDNN 8.0/TensorRT 7) binding&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Here is the GPU package that I compiled(not from baidu):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cuda117_cudnn84_tr84_sm86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.cuda117_cudnn84_tr84_sm86&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.cuda117_cudnn84_tr84_sm86.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;win64/CUDA 11.7/cuDNN 8.4/TensorRT 8.4/sm86 binding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cuda102_cudnn76_sm61_75&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.cuda102_cudnn76_sm61_75&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.cuda102_cudnn76_sm61_75.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;win64/CUDA 10.2/cuDNN 7.6/sm61+sm75 binding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cuda116_cudnn84_sm86_onnx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleInference.runtime.win64.cuda116_cudnn84_sm86_onnx&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleInference.runtime.win64.cuda116_cudnn84_sm86_onnx.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;win64/CUDA 11.6/cuDNN 8.4/sm86/onnx binding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;PaddleOCR packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleOCR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleOCR&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleOCR.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PaddleOCR library(based on Sdcb.PaddleInference)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleOCR.Models.Online&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleOCR.Models.Online&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleOCR.Models.Online.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Online PaddleOCR models, will download when first using&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleOCR.Models.LocalV3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleOCR.Models.LocalV3&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleOCR.Models.LocalV3.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Full local v3 models, include multiple language(~130MB)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.PaddleOCR.KnownModels&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleOCR.KnownModels&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleOCR.KnownModels.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Old online model download helper, &lt;em&gt;deprecated&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Rotation Detection packages(part of PaddleClass)&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sdcb.RotationDetector&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.RotationDetector&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.RotationDetector.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RotationDetector library(based on Sdcb.PaddleInference)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;PaddleDetection packages&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;NuGet Package&lt;/th&gt; &#xA;    &lt;th&gt;Version&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Sdcb.PaddleDetection&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://nuget.org/packages/Sdcb.PaddleDetection&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Sdcb.PaddleDetection.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PaddleDetection library(based on Sdcb.PaddleInference)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PaddleOCR: &lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/ocr.md&#34;&gt;PaddleOCR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PaddleDetection: &lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/docs/detection.md&#34;&gt;PaddleDetection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Why my code runs good in my windows machine, but DllNotFoundException in other machine:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Please ensure the &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;latest Visual C++ Redistributable&lt;/a&gt; was installed in &lt;code&gt;Windows&lt;/code&gt;(typically it should automatically installed if you have &lt;code&gt;Visual Studio&lt;/code&gt; installed) Otherwise, it will failed with following error(Windows only):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;DllNotFoundException: Unable to load DLL &#39;paddle_inference_c&#39; or one of its dependencies (0x8007007E)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If it&#39;s Unable to load DLL OpenCvSharpExtern.dll or one of its dependencies, then most likely the Media Foundation is not installed in windows server 2012 R2 machine: &lt;img width=&#34;830&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1317141/193706883-6a71ea83-65d9-448b-afee-2d25660430a1.png&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Many old CPUs does not support AVX instructions, please ensure your CPU supports AVX, or download the x64-noavx-openblas dlls and disable Mkldnn: &lt;code&gt;PaddleConfig.Defaults.UseMkldnn = false;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using &lt;strong&gt;Win7-x64&lt;/strong&gt;, and your CPU do support AVX2, then you might also need to extract following 3 dlls into &lt;code&gt;C:\Windows\System32&lt;/code&gt; folder to make it run:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;api-ms-win-core-libraryloader-l1-2-0.dll&lt;/li&gt; &#xA;   &lt;li&gt;api-ms-win-core-processtopology-obsolete-l1-1-0.dll&lt;/li&gt; &#xA;   &lt;li&gt;API-MS-Win-Eventing-Provider-L1-1-0.dll&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You can download these 3 dlls here: &lt;a href=&#34;https://github.com/sdcb/PaddleSharp/files/10110622/win7-x64-onnxruntime-missing-dlls.zip&#34;&gt;win7-x64-onnxruntime-missing-dlls.zip&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to enable GPU?&lt;/h2&gt; &#xA;&lt;p&gt;Enable GPU support can significantly improve the throughput and lower the CPU usage.&lt;/p&gt; &#xA;&lt;p&gt;Steps to use GPU in windows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;(for windows) Install the package: &lt;code&gt;Sdcb.PaddleInference.runtime.win64.cuda*&lt;/code&gt; instead of &lt;code&gt;Sdcb.PaddleInference.runtime.win64.mkl&lt;/code&gt;, &lt;strong&gt;do not&lt;/strong&gt; install both.&lt;/li&gt; &#xA; &lt;li&gt;Install CUDA from NVIDIA, and configure environment variables to &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;(linux)&lt;/li&gt; &#xA; &lt;li&gt;Install cuDNN from NVIDIA, and configure environment variables to &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;(linux)&lt;/li&gt; &#xA; &lt;li&gt;Install TensorRT from NVIDIA, and configure environment variables to &lt;code&gt;PATH&lt;/code&gt; or &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;(linux)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can refer this blog page for GPU in Windows: &lt;a href=&#34;https://www.cnblogs.com/cuichaohui/p/15766519.html&#34;&gt;关于PaddleSharp GPU使用 常见问题记录&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Linux, you need to compile your own OpenCvSharp4 environment following the &lt;a href=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/build/docker/dotnet6sdk-paddle/Dockerfile&#34;&gt;docker build scripts&lt;/a&gt; follow the CUDA/cuDNN/TensorRT configuration tasks.&lt;/p&gt; &#xA;&lt;p&gt;After these steps completed, you can try specify &lt;code&gt;PaddleDevice.Gpu()&lt;/code&gt; in paddle device configure parameter then enjoy🚀.&lt;/p&gt; &#xA;&lt;h3&gt;TensorRT&lt;/h3&gt; &#xA;&lt;p&gt;To use TensorRT, just specify &lt;code&gt;PaddleDevice.Gpu().And(PaddleDevice.TensorRt(&#34;shape-info.txt&#34;))&lt;/code&gt; instead of &lt;code&gt;PaddleDevice.Gpu()&lt;/code&gt; to make it work.&lt;/p&gt; &#xA;&lt;h1&gt;Thanks &amp;amp; Sponsors&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;深圳-钱文松&lt;/li&gt; &#xA; &lt;li&gt;iNeuOS工业互联网操作系统：&lt;a href=&#34;http://www.ineuos.net&#34;&gt;http://www.ineuos.net&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;QQ group of C#/.NET computer vision technical communicate(C#/.NET计算机视觉技术交流群): &lt;strong&gt;579060605&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sdcb/PaddleSharp/master/assets/qq.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>