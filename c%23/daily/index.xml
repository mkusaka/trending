<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-16T01:28:50Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glzr-io/glazewm</title>
    <updated>2024-01-16T01:28:50Z</updated>
    <id>tag:github.com,2024-01-16:/glzr-io/glazewm</id>
    <link href="https://github.com/glzr-io/glazewm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GlazeWM · &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/lars-berger/GlazeWM&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ud6z3qjRvM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA&#34; alt=&#34;Discord invite&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt; &#xA;&lt;p&gt;Why use a tiling window manager? A tiling WM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple YAML configuration&lt;/li&gt; &#xA; &lt;li&gt;Multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;Customizable bar window&lt;/li&gt; &#xA; &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; &#xA; &lt;li&gt;Easy one-click installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/glazerdesktop/GlazeWM/assets/34844898/58167ca8-3064-4c5f-a82e-51bd3cd8830b&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Showcase GIF by &lt;a href=&#34;https://github.com/HolbyFPV&#34;&gt;@HolbyFPV&lt;/a&gt;&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, GlazeWM adds functionality to the built-in window manager and uses the Windows API via P/Invoke to position windows.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;h2&gt;Direct download&lt;/h2&gt; &#xA;&lt;p&gt;The latest runnable executable can be downloaded via &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/releases&#34;&gt;releases&lt;/a&gt;. No installation necessary, simply run the &lt;code&gt;.exe&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Winget&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be downloaded via Winget package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install GlazeWM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Winget installs portable packages in &lt;code&gt;%LOCALAPPDATA%\Microsoft\Winget\Packages\&lt;/code&gt; by default. This can be overrided with the flag &lt;code&gt;--location \path\to\folder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scoop&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be download via Scoop in the &lt;a href=&#34;https://github.com/ScoopInstaller/Extras&#34;&gt;Extras&lt;/a&gt; bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras # Ensure bucket is added first&#xA;scoop install glazewm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, to build from source, use the following .NET CLI command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet publish ./GlazeWM.App/GlazeWM.App.csproj --configuration=Release --runtime=win-x64 --output=. --self-contained -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build for other runtimes than Windows x64, see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#windows-rids&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve handling of fullscreen and maximized windows.&lt;/li&gt; &#xA; &lt;li&gt;More bar components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/lars-berger/projects/2/views/1&#34;&gt;📋 Full roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;The configuration file for GlazeWM can be found at &lt;code&gt;C:\Users\&amp;lt;YOUR_USER&amp;gt;\.glaze-wm\config.yaml&lt;/code&gt;. If this file doesn&#39;t exist, the &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/raw/master/GlazeWM.App/Resources/sample-config.yaml&#34;&gt;default config&lt;/a&gt; can optionally be generated on launch.&lt;/p&gt; &#xA;&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config=&#34;...&#34;&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./GlazeWM.exe --config=&#34;C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;general:&#xA;  # Whether to automatically focus windows underneath the cursor.&#xA;  focus_follows_cursor: false&#xA;&#xA;  # Whether to jump the cursor between windows focused by the WM.&#xA;  cursor_follows_focus: false&#xA;&#xA;  # Whether to switch back and forth between the previously focused workspace&#xA;  # when focusing the current workspace.&#xA;  toggle_workspace_on_refocus: true&#xA;&#xA;  # Whether to show floating windows as always on top.&#xA;  show_floating_on_top: false&#xA;&#xA;  # Amount to move floating windows by (eg. when using `alt+&amp;lt;hjkl&amp;gt;` on a floating window)&#xA;  floating_window_move_amount: &#34;5%&#34;&#xA;&#xA;  # Whether to globally enable/disable window transition animations (on minimize, close,&#xA;  # etc). Set to &#39;unchanged&#39; to make no setting changes.&#xA;  window_animations: &#34;unchanged&#34;&#xA;&#xA;  # Whether to center new floating windows (default is true)&#xA;  center_new_floating_windows: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;The available keybindings can be customized via the &lt;code&gt;keybindings&lt;/code&gt; property in the config file. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; &#xA;&lt;p&gt;A full list of keys that can be used for keybindings can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=windowsdesktop-5.0#fields&#34;&gt;here&lt;/a&gt;. Numbers can be used in keybindings with and without a &lt;code&gt;D&lt;/code&gt; prefix (eg. either &lt;code&gt;D1&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; works).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to use the alt key for keybindings. The windows key is unfortunately a pain to remap, since certain keybindings (eg. &lt;code&gt;LWin+L&lt;/code&gt;) are reserved by the OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;keybindings:&#xA;  # Command to run.&#xA;  - command: &#34;focus workspace 1&#34;&#xA;&#xA;    # Key combination to trigger the keybinding.&#xA;    binding: &#34;Alt+1&#34;&#xA;&#xA;  # To run multiple commands in a sequence, use the `commands` property (eg. to move a window to a&#xA;  # workspace + focus workspace).&#xA;  - commands: [&#34;move to workspace 1&#34;, &#34;focus workspace 1&#34;]&#xA;    binding: &#34;Alt+Shift+1&#34;&#xA;&#xA;  - command: &#34;focus left&#34;&#xA;    # To have multiple key combinations that can trigger a command, use the `bindings` property.&#xA;    bindings: [&#34;Alt+H&#34;, &#34;Alt+Left&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635035-152ed4a6-e5a1-4878-8863-f62391e7d703.png&#34; alt=&#34;Alt key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635089-d5ed152b-1527-43e8-a69c-4e154b97a207.png&#34; alt=&#34;Alt+shift key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apart from the &lt;code&gt;Alt+Shift+E&lt;/code&gt; binding for exiting GlazeWM, it&#39;s also possibly to safely exit via the system tray icon.&lt;/p&gt; &#xA;&lt;h2&gt;Focus Window Border configuration&lt;/h2&gt; &#xA;&lt;p&gt;The focused and unfocused window border color can be configured via the &lt;code&gt;focus_borders&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires minimum of Windows 11 Build 22000.51.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;focus_borders:&#xA;  active:&#xA;    enabled: true&#xA;    color: &#34;#ff0000&#34;&#xA;  inactive:&#xA;    enabled: false&#xA;    color: &#34;#0000ff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gap configuration&lt;/h2&gt; &#xA;&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gaps:&#xA;  # Gap between adjacent windows.&#xA;  inner_gap: &#34;20px&#34;&#xA;&#xA;  # Gap between windows and the screen edge. See &#34;Shorthand properties&#34; for more info.&#xA;  outer_gap: &#34;20px 0 20px 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workspaces configuration&lt;/h2&gt; &#xA;&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;workspaces:&#xA;  # Uniquely identifies the workspace and is used as the label for the workspace in the bar if&#xA;  # `display_name` is not provided.&#xA;  - name: &#34;1&#34;&#xA;&#xA;    # Optional override for the workspace label in the bar. Does not need to be unique.&#xA;    display_name: &#34;Work&#34;&#xA;&#xA;    # Optionally force the workspace on a specific monitor if it exists. Use the monitor&#39;s number&#xA;    # as shown in the Windows display settings (eg. 1, 2, 3...).&#xA;    bind_to_monitor: 1&#xA;&#xA;    # Optionally prevent workspace from being deactivated when empty.&#xA;    keep_alive: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bar configuration&lt;/h2&gt; &#xA;&lt;p&gt;The appearance of the bar can be changed via the &lt;code&gt;bar&lt;/code&gt; property in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  # The option to enable/disable the bar.&#xA;  enabled: true&#xA;&#xA;  # Height of the bar in pixels.&#xA;  height: &#34;30px&#34;&#xA;&#xA;  # The position of the bar on the screen. Can be either &#34;top&#34; or &#34;bottom&#34;.&#xA;  position: &#34;top&#34;&#xA;&#xA;  # Whether to show the bar above other windows&#xA;  always_on_top: false&#xA;&#xA;  # Opacity value between 0.0 and 1.0.&#xA;  opacity: 1.0&#xA;&#xA;  # Background color of the bar.&#xA;  background: &#34;#101010&#34;&#xA;&#xA;  # Default font color. Can be overriden by setting `foreground` in a component&#39;s config.&#xA;  foreground: &#34;white&#34;&#xA;&#xA;  # Default font family. Can be overriden by setting `font_family` in a component&#39;s config.&#xA;  font_family: &#34;Segoe UI&#34;&#xA;&#xA;  # Default font size. Can be overriden by setting `font_size` in a component&#39;s config.&#xA;  font_size: &#34;13px&#34;&#xA;&#xA;  # Default font weight. Typically ranges from 100 to 950, where a higher value is thicker. Can&#xA;  # be overriden by setting `font_weight` in a component&#39;s config.&#xA;  font_weight: &#34;400&#34;&#xA;&#xA;  # Horizontal and vertical borders in pixels. Borders are inside the dimensions of the bar and do&#xA;  # not affect bar height. See &#34;Shorthand properties&#34; for more info.&#xA;  border_width: &#34;0&#34;&#xA;&#xA;  # Color of the border.&#xA;  border_color: &#34;blue&#34;&#xA;&#xA;  # Horizontal and vertical spacing between components within the bar and the edges of the bar. See&#xA;  # &#34;Shorthand properties&#34; for more info.&#xA;  padding: &#34;4px 6px 4px 6px&#34;&#xA;&#xA;  # Separator between components within the bar. `label` is used for each section&#xA;  # of the bar unless `label_{left,center,right}` is explictly set, in which case&#xA;  # they are preferred over default.&#xA;  component_separator:&#xA;    label: &#34; | &#34;&#xA;&#xA;  # Components to display on the left side of the bar.&#xA;  components_left:&#xA;    - type: &#34;workspaces&#34;&#xA;&#xA;  # Components to display on the right side of the bar.&#xA;  components_right:&#xA;    - type: &#34;clock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar component configuration&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of bar components can also be customized. The following properties can change the styling of a component, regardless of the component type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Type of component to display. Currently 7 component types exist: &#34;workspaces&#34;, &#34;clock&#34;, &#34;text&#34;, &#34;battery&#34;, &#34;window title&#34;, &#34;binding mode&#34; and &#34;tiling direction&#34;.&#xA;type: &amp;lt;COMPONENT_TYPE&amp;gt;&#xA;&#xA;# Horizontal and vertical margins. See &#34;Shorthand properties&#34; for more info.&#xA;margin: &#34;0 10px 0 0&#34;&#xA;&#xA;# Horizontal and vertical padding. See &#34;Shorthand properties&#34; for more info.&#xA;padding: &#34;0&#34;&#xA;&#xA;# Opacity value between 0.0 and 1.0.&#xA;opacity: 1.0&#xA;&#xA;# Background color of the component.&#xA;background: &#34;#101010&#34;&#xA;&#xA;# Font color used within the component.&#xA;foreground: &#34;white&#34;&#xA;&#xA;# Font family used within the component.&#xA;font_family: &#34;Segoe UI&#34;&#xA;&#xA;# Font size used within the component.&#xA;font_size: &#34;13px&#34;&#xA;&#xA;# Font weight used within the component. Typically ranges from 100 to 950, where a higher value is&#xA;# thicker.&#xA;font_weight: &#34;400&#34;&#xA;&#xA;# Horizontal and vertical borders in pixels. Borders are inside the dimensions of the component.&#xA;# See &#34;Shorthand properties&#34; for more info.&#xA;border_width: &#34;0&#34;&#xA;&#xA;# Color of the border.&#xA;border_color: &#34;blue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shorthand properties&lt;/h3&gt; &#xA;&lt;p&gt;Properties related to the edges of the bar or a component, like &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, and &lt;code&gt;border_width&lt;/code&gt;, use a 1-to-4 value syntax. This is the same convention that&#39;s common in CSS.&lt;/p&gt; &#xA;&lt;p&gt;Using the example of padding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When one value is specified, it applies the same padding to all four sides.&lt;/li&gt; &#xA; &lt;li&gt;When two values are specified, the first padding applies to the top and bottom, the second to the left and right.&lt;/li&gt; &#xA; &lt;li&gt;When three values are specified, the first padding applies to the top, the second to the right and left, the third to the bottom.&lt;/li&gt; &#xA; &lt;li&gt;When four values are specified, the paddings apply to the top, right, bottom, and left in that order (clockwise).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bar component: Clock&lt;/h3&gt; &#xA;&lt;p&gt;The text shown in the clock component is specified via &lt;code&gt;time_formatting&lt;/code&gt;. The supported time format specifiers are defined by &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings&#34;&gt;.NET&#39;s time/date string formatting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally supported format specifiers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Specifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;w&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year: 1..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 21.12.2022 (51)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;ww&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year 01..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 02.01.2022 (02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;clock&#34;&#xA;  time_formatting: &#34;hh:mm tt  ddd MMM d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Battery&lt;/h3&gt; &#xA;&lt;p&gt;The battery component displays the system&#39;s battery level in percent. There are three labels available that can be customized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label_draining&lt;/code&gt;: used when the system is draining battery power(i.e. not charging).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_power_saver&lt;/code&gt;: used when the system is on power saving mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_charging&lt;/code&gt;: used when the system is connected to power.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;{battery_level}&lt;/code&gt; is a variable which is replaced by the actual battery level when the label is displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;battery&#34;&#xA;  label_draining: &#34;{battery_level}% remaining&#34;&#xA;  label_power_saver: &#34;{battery_level}% (power saver)&#34;&#xA;  label_charging: &#34;{battery_level}% (charging)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: CPU Usage&lt;/h3&gt; &#xA;&lt;p&gt;Displays the current CPU usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;cpu&#34;&#xA;  label: &#34;CPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: GPU Usage&lt;/h3&gt; &#xA;&lt;p&gt;This component has high CPU requirement (compared to others); due to no efficient way to pull data from Windows API. Avoid using low refresh intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;gpu&#34;&#xA;  label: &#34;GPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Memory Usage&lt;/h3&gt; &#xA;&lt;p&gt;Displays the current Memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;memory&#34;&#xA;  label: &#34;RAM: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Network&lt;/h3&gt; &#xA;&lt;p&gt;Displays the type and signal strength of the active network connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;network&#34;&#xA;  label_no_internet: &#34;NC&#34;&#xA;  label_ethernet: &#34;Eth&#34;&#xA;  label_wifi_strength_0: &#34;WiFi: 0%&#34;&#xA;  label_wifi_strength_25: &#34;WiFi: 25%&#34;&#xA;  label_wifi_strength_50: &#34;WiFi: 50%&#34;&#xA;  label_wifi_strength_75: &#34;WiFi: 75%&#34;&#xA;  label_wifi_strength_100: &#34;WiFi: 100%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Volume&lt;/h3&gt; &#xA;&lt;p&gt;Displays volume level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;volume&#34;&#xA;  label_low: &#34;🔊{volume_level}%&#34;&#xA;  label_medium: &#34;🔊{volume_level}%&#34;&#xA;  label_high: &#34;🔊{volume_level}%&#34;&#xA;  label_mute: &#34;🔊{volume_level}%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Text File&lt;/h3&gt; &#xA;&lt;p&gt;For displaying any content without a native integrated widget; updates in real time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;text file&#34;&#xA;  # Path to file.&#xA;  file_path: &#34;PATH_HERE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Weather&lt;/h3&gt; &#xA;&lt;p&gt;Uses Open-Meteo API, refreshes every hour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;weather&#34;&#xA;  latitude: 40.6892&#xA;  longitude: 74.0445&#xA;  label: &#34;{temperature_celsius}°C&#34;&#xA;  label_sun: &#34;☀️ {temperature_celsius}°C&#34;&#xA;  label_moon: &#34;🌙 {temperature_celsius}°C&#34;&#xA;  label_cloud_moon: &#34;🌙☁️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun: &#34;⛅ {temperature_celsius}°C&#34;&#xA;  label_cloud_moon_rain: &#34;🌙🌧️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun_rain: &#34;🌦️ {temperature_celsius}°C&#34;&#xA;  label_cloud_rain: &#34;🌧️ {temperature_celsius}°C&#34;&#xA;  label_snow_flake: &#34;❄️ {temperature_celsius}°C&#34;&#xA;  label_thunderstorm: &#34;⚡ {temperature_celsius}°C&#34;&#xA;  label_cloud: &#34;☁️ {temperature_celsius}°C&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Image&lt;/h3&gt; &#xA;&lt;p&gt;Supports &lt;code&gt;.png&lt;/code&gt; and &lt;code&gt;.jpg&lt;/code&gt; formats.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;image&#34;&#xA;  source: &#34;C:\\Folder\\AnotherFolder\\image.png&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: System Tray&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Alt+Click&lt;/code&gt; to pin and un-pin an icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;system tray&#34;&#xA;  label_expand_text: &#34;&amp;lt;&#34;&#xA;  label_collapse_text: &#34;&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Music&lt;/h3&gt; &#xA;&lt;p&gt;Displays currently playing music.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;music&#34;&#xA;  label_not_playing: &#34;&#34;&#xA;  label_paused: &#34;{song_title} - {artist_name}&#34;&#xA;  label_playing: &#34;{song_title} - {artist_name} ▶&#34;&#xA;  max_title_length: 20&#xA;  max_artist_length: 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mixing font properties within a label&lt;/h2&gt; &#xA;&lt;p&gt;Font family, font weight, font size, and foreground color can be changed within parts of a label. This means that icons and text fonts can be used together in a label. To customize a part of the label, wrap it in an &#xA; &lt;attr&gt;&#xA;   tag:&#xA; &lt;/attr&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  components_left:&#xA;    - type: &#34;cpu&#34;&#xA;      # Change font family (ie. ff) to Comic Sans for part of the label:&#xA;      label: &#34;&amp;lt;attr ff=&#39;Comic Sans&#39;&amp;gt;CPU:&amp;lt;/attr&amp;gt; {percent_usage}%&#34;&#xA;&#xA;    - type: &#34;battery&#34;&#xA;      # Show an icon by using an icon font:&#xA;      label_draining: &#34;&amp;lt;attr ff=&#39;Material Icons&#39;&amp;gt;&amp;lt;/attr&amp;gt; {battery_level}%&#34;&#xA;      # Multiple attributes can be changed at once:&#xA;      label_charging: &#34;{battery_level}% &amp;lt;attr ff=&#39;Arial&#39; fg=&#39;#228B22&#39; fw=&#39;400&#39; fs=&#39;13px&#39;&amp;gt;(charging)&amp;lt;/attr&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Icons in Bar Components&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s common to use icons as the &lt;code&gt;label&lt;/code&gt; in bar components by assigning a font family that contains glyphs. A popular option is &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Font&lt;/a&gt; which comes with a &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;cheat sheet&lt;/a&gt; for easily finding a desired glyph.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing New Bar Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/docs/contributing-new-components.md&#34;&gt;Guide Available Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Window rules&lt;/h2&gt; &#xA;&lt;p&gt;Commands can be run when a window is initially launched. This can be used to assign an app to a specific workspace or to always start an app in floating mode.&lt;/p&gt; &#xA;&lt;p&gt;Multiple matching criteria can be used together to target a window more precisely. Regex syntax can also be used by wrapping the pattern with &lt;code&gt;/&lt;/code&gt; (eg. &lt;code&gt;/notepad|chrome/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_rules:&#xA;  # Command to run. Use `commands` to specify an array of commands to run in sequence.&#xA;  - command: &#34;move to workspace 2&#34;&#xA;&#xA;    # Process name to match exactly.&#xA;    match_process_name: &#34;chrome&#34;&#xA;&#xA;    # Window title to match exactly.&#xA;    match_title: &#34;/.*/&#34;&#xA;&#xA;    # Class name to match exactly.&#xA;    match_class_name: &#34;Chrome_WidgetWin_1&#34;&#xA;&#xA;  # To prevent the WM from managing an app, use the &#34;ignore&#34; command.&#xA;  - command: &#34;ignore&#34;&#xA;    match_process_name: &#34;notepad&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;focus &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;prev | next | recent&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move to workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;resize &amp;lt;height | width&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;resize height 3%&lt;/code&gt; or &lt;code&gt;resize width 20px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;resize borders &lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#shorthand-properties&#34;&gt;&amp;lt;shorthand property&amp;gt;&lt;/a&gt; (eg. &lt;code&gt;resize borders 0px -7px -7px -7px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;floating | tiling | minimized | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;width | height&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;set height 30%&lt;/code&gt; or &lt;code&gt;set width 200px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;toggle &amp;lt;floating | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus mode toggle&lt;/li&gt; &#xA; &lt;li&gt;tiling direction &amp;lt;vertical | horizontal | toggle&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;exit wm&lt;/li&gt; &#xA; &lt;li&gt;reload config&lt;/li&gt; &#xA; &lt;li&gt;close&lt;/li&gt; &#xA; &lt;li&gt;exec &amp;lt;process name | path to executable&amp;gt; (eg. &lt;code&gt;exec chrome&lt;/code&gt; or &lt;code&gt;exec &#39;C:/Program Files/Google/Chrome/Application/chrome&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ignore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;h2&gt;Blurry buttons in bar window&lt;/h2&gt; &#xA;&lt;p&gt;An app called &#34;Sonic Studio&#34;, which is installed by default on ASUS ROG machines can cause rendering issues with WPF apps. This can be resolved by disabling &lt;code&gt;NahimicService&lt;/code&gt; in Windows Services Manager.&lt;/p&gt; &#xA;&lt;h2&gt;Binding the right-side Alt key &lt;code&gt;RMenu&lt;/code&gt; on certain keyboard layouts&lt;/h2&gt; &#xA;&lt;p&gt;Most keyboard layouts treat the right-side &lt;kbd&gt;Alt&lt;/kbd&gt; key the same as the left, while others (eg. US International and German) treat it as &lt;kbd&gt;AltGr&lt;/kbd&gt; and generate both &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt; when it is pressed. For these keyboard layouts, keybindings with the &lt;kbd&gt;AltGr&lt;/kbd&gt; key need to specify both &lt;code&gt;RMenu&lt;/code&gt; and &lt;code&gt;Control&lt;/code&gt; (eg. &lt;code&gt;RMenu+Control+A&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;How to remap &lt;code&gt;LWin&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Run the following autohotkey v1 script as administrator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;; https://superuser.com/a/1819950/881662&#xA;&#xA;&#xA;#InstallKeybdHook&#xA;&#xA;&#xA;; Disable win + l key locking (This line must come before any hotkey assignments in the .ahk file)&#xA;&#xA;&#xA;RegWrite, REG_DWORD, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\System, DisableLockWorkstation, 1&#xA;&#xA;&#xA;; Optional: Remap winKey + &amp;lt;someKey&amp;gt; here: &#xA;&#xA;&#xA;#space::return&#xA;#s::return&#xA;&#xA;#h::&#xA;Send, ^{F9}       ; It&#39;s important to chose some random intermediary hotkey, I choose ctrl + F9&#xA;return&#xA;&#xA;#j::&#xA;Send, ^{F10}&#xA;return&#xA;&#xA;#k::&#xA;Send, ^{F11}&#xA;return&#xA;&#xA;#l::&#xA;Send, ^{F12}&#xA;return&#xA;&#xA;&#xA;;CTRL+WIN+L&#xA;^F12::&#xA;RegWrite, REG_DWORD, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\System, DisableLockWorkstation, 0&#xA;DllCall(&#34;LockWorkStation&#34;)&#xA;;after locking workstation force a reload of this script which effectively disables Win + L locking the computer again&#xA;Reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, amend the keybindings section in config.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;keybindings:&#xA;  # Shift focus in a given direction.&#xA;  - command: &#34;focus left&#34;&#xA;    bindings: [&#34;Ctrl+F9&#34;]      ; Notice I am using the intermediary hotkeys here&#xA;  - command: &#34;focus right&#34;&#xA;    bindings: [&#34;Ctrl+F12&#34;]&#xA;  - command: &#34;focus up&#34;&#xA;    bindings: [&#34;Ctrl+F11&#34;]&#xA;  - command: &#34;focus down&#34;&#xA;    bindings: [&#34;Ctrl+F10&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, now you can use &lt;code&gt;LWin + l&lt;/code&gt; to focus right and &lt;code&gt;LWin + h&lt;/code&gt; to focus left, etc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>undreamai/LLMUnity</title>
    <updated>2024-01-16T01:28:50Z</updated>
    <id>tag:github.com,2024-01-16:/undreamai/LLMUnity</id>
    <link href="https://github.com/undreamai/LLMUnity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Integrate LLM models in Unity!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/.github/logo_transparent_cropped.png&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Integrate LLM models in Unity!&lt;/h3&gt; &#xA;&lt;br&gt; LLMUnity allows to integrate, run and deploy LLMs (Large Language Models) in the Unity engine.&#xA;&lt;br&gt; &#xA;&lt;p&gt;LLMUnity is built on top of the awesome &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; and &lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile&#34;&gt;llamafile&lt;/a&gt; libraries.&lt;/p&gt; &#xA;&lt;h2&gt;At a glance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;💻&lt;/span&gt; Cross-platform! Supports Windows, Linux and macOS (&lt;a href=&#34;https://github.com/Mozilla-Ocho/llamafile?tab=readme-ov-file#supported-oses-and-cpus&#34;&gt;supported versions&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🏠&lt;/span&gt; Runs locally without internet access but also supports remote servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;⚡&lt;/span&gt; Fast inference on CPU and GPU&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🤗&lt;/span&gt; Support of the major LLM models (&lt;a href=&#34;https://github.com/ggerganov/llama.cpp?tab=readme-ov-file#description&#34;&gt;supported models&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🔧&lt;/span&gt; Easy to setup, call with a single line code&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💰&lt;/span&gt; Free to use for both personal and commercial purposes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orgs/undreamai/projects/2/views/10&#34;&gt;&lt;span&gt;🚦&lt;/span&gt; Upcoming Releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To install the package you can follow the typical asset / package process in Unity:&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Method 1: Install the asset using the asset store&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the &lt;a href=&#34;https://assetstore.unity.com/packages/slug/273604&#34;&gt;LLMUnity&lt;/a&gt; asset page and click &lt;code&gt;Add to My Assets&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the Package Manager: &lt;code&gt;Window &amp;gt; Package Manager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;Packages: My Assets&lt;/code&gt; option from the drop-down&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;LLMUnity&lt;/code&gt; package, click &lt;code&gt;Download&lt;/code&gt; and then &lt;code&gt;Import&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Method 2: Install the asset using the GitHub repo:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the Package Manager: &lt;code&gt;Window &amp;gt; Package Manager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;code&gt;+&lt;/code&gt; button and select &lt;code&gt;Add package from git URL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use the repository URL &lt;code&gt;https://github.com/undreamai/LLMUnity.git&lt;/code&gt; and click &lt;code&gt;Add&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;For a step-by-step tutorial you can have a look at our guide:&lt;/p&gt; &#xA;&lt;a href=&#34;https://towardsdatascience.com/how-to-use-llms-in-unity-308c9c0f637c&#34;&gt; &lt;img width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/.github/life_is_strange_dialogue.png&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/how-to-use-llms-in-unity-308c9c0f637c&#34;&gt;How to Use LLMs in Unity&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a GameObject for the LLM &lt;span&gt;♟&lt;/span&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an empty GameObject. In the GameObject Inspector click &lt;code&gt;Add Component&lt;/code&gt; and select the LLM script (&lt;code&gt;Scripts&amp;gt;LLM&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Download the default model with the &lt;code&gt;Download Model&lt;/code&gt; button (this will take a while as it is ~4GB).&lt;br&gt;You can also load your own model in .gguf format with the &lt;code&gt;Load model&lt;/code&gt; button (see &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/#use-your-own-model&#34;&gt;Use your own model&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Define the role of your AI in the &lt;code&gt;Prompt&lt;/code&gt;. You can also define the name of the AI (&lt;code&gt;AI Mame&lt;/code&gt;) and the player (&lt;code&gt;Player Name&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;(Optional) By default the LLM script is set up to receive the reply from the model as is it is produced in real-time (recommended). If you prefer to receive the full reply in one go, you can deselect the &lt;code&gt;Stream&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Adjust the server or model settings to your preference (see &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/#options&#34;&gt;Options&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;In your script you can then use it as follows &lt;span&gt;🦄&lt;/span&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public class MyScript {&#xA;  public LLM llm;&#xA;  &#xA;  void HandleReply(string reply){&#xA;    // do something with the reply from the model&#xA;    Debug.Log(reply);&#xA;  }&#xA;  &#xA;  void Game(){&#xA;    // your game function&#xA;    ...&#xA;    string message = &#34;Hello bot!&#34;&#xA;    _ = llm.Chat(message, HandleReply);&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify a function to call when the model reply has been completed.&lt;br&gt; This is useful if the &lt;code&gt;Stream&lt;/code&gt; option is selected for continuous output from the model (default behaviour):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;  void ReplyCompleted(){&#xA;    // do something when the reply from the model is complete&#xA;    Debug.Log(&#34;The AI replied&#34;);&#xA;  }&#xA;  &#xA;  void Game(){&#xA;    // your game function&#xA;    ...&#xA;    string message = &#34;Hello bot!&#34;&#xA;    _ = llm.Chat(message, HandleReply, ReplyCompleted);&#xA;    ...&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Finally, in the Inspector of the GameObject of your script, select the LLM GameObject created above as the llm property.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That&#39;s all &lt;span&gt;✨&lt;/span&gt;! &lt;br&gt;&lt;br&gt; You can also:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Wait for the reply before proceeding to the next lines of code&lt;/summary&gt; &#xA; &lt;p&gt;For this you can use the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; functionality:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;  async void Game(){&#xA;    // your game function&#xA;    ...&#xA;    string message = &#34;Hello bot!&#34;&#xA;    await llm.Chat(message, HandleReply, ReplyCompleted);&#xA;    ...&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Process the prompt at the beginning of your app for faster initial processing time&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;  void WarmupCompleted(){&#xA;    // do something when the warmup is complete&#xA;    Debug.Log(&#34;The AI is warm&#34;);&#xA;  }&#xA;&#xA;  void Game(){&#xA;    // your game function&#xA;    ...&#xA;    _ = llm.Warmup(WarmupCompleted);&#xA;    ...&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/Samples~&#34;&gt;Samples~&lt;/a&gt; folder contains several examples of interaction &lt;span&gt;🤖&lt;/span&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/Samples~/SimpleInteraction&#34;&gt;SimpleInteraction&lt;/a&gt;: Demonstrates simple interaction between a player and a AI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/Samples~/ServerClient&#34;&gt;ServerClient&lt;/a&gt;: Demonstrates simple interaction between a player and multiple AIs using a &lt;code&gt;LLM&lt;/code&gt; and a &lt;code&gt;LLMClient&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/Samples~/ChatBot&#34;&gt;ChatBot&lt;/a&gt;: Demonstrates interaction between a player and a AI with a UI similar to a messaging app (see image below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/.github/demo.gif&#34;&gt; &#xA;&lt;p&gt;If you install the package as an asset, the samples will already be in the &lt;code&gt;Assets/Samples&lt;/code&gt; folder.&lt;br&gt; Otherwise if you install it with the GitHub URL, to install a sample:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the Package Manager: &lt;code&gt;Window &amp;gt; Package Manager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;LLMUnity&lt;/code&gt; Package. From the &lt;code&gt;Samples&lt;/code&gt; Tab, click &lt;code&gt;Import&lt;/code&gt; next to the sample you want to install.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The samples can be run with the &lt;code&gt;Scene.unity&lt;/code&gt; scene they contain inside their folder.&lt;br&gt; In the scene, select the &lt;code&gt;LLM&lt;/code&gt; GameObject and click the &lt;code&gt;Download Model&lt;/code&gt; button to download the default model.&lt;br&gt; You can also load your own model in .gguf format with the &lt;code&gt;Load model&lt;/code&gt; button (see &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/#use-your-own-model&#34;&gt;Use your own model&lt;/a&gt;).&lt;br&gt; Save the scene, run and enjoy!&lt;/p&gt; &#xA;&lt;h2&gt;Use your own model&lt;/h2&gt; &#xA;&lt;p&gt;Alternative models can be downloaded from &lt;a href=&#34;https://huggingface.co/models&#34;&gt;HuggingFace&lt;/a&gt;.&lt;br&gt; The required model format is .gguf as defined by the llama.cpp.&lt;br&gt; The easiest way is to download gguf models directly by &lt;a href=&#34;https://huggingface.co/TheBloke&#34;&gt;TheBloke&lt;/a&gt; who has converted an astonishing number of models &lt;span&gt;🌈&lt;/span&gt;!&lt;br&gt; Otherwise other model formats can be converted to gguf with the &lt;code&gt;convert.py&lt;/code&gt; script of the llama.cpp as described &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/tree/master?tab=readme-ov-file#prepare-data--run&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❕&lt;/span&gt; Before using any model make sure you &lt;strong&gt;check their license&lt;/strong&gt; &lt;span&gt;❕&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Multiple client / Remote server setup&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;LLM&lt;/code&gt; server functionality, LLMUnity defines the &lt;code&gt;LLMClient&lt;/code&gt; client class that handles the client functionality.&lt;br&gt; The &lt;code&gt;LLMClient&lt;/code&gt; contains a subset of options of the &lt;code&gt;LLM&lt;/code&gt; class described in the &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/#options&#34;&gt;Options&lt;/a&gt;.&lt;br&gt; It can be used to have multiple clients with different options e.g. different prompts that use the same server.&lt;br&gt; This is important as multiple server instances would require additional compute resources.&lt;br&gt; To use multiple instances, you can define one &lt;code&gt;LLM&lt;/code&gt; GameObject (as described in &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/#how-to-use&#34;&gt;How to use&lt;/a&gt;) and then multiple &lt;code&gt;LLMClient&lt;/code&gt; objects. See the &lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/Samples~/ServerClient&#34;&gt;ServerClient&lt;/a&gt; sample for a server-client example.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;LLMClient&lt;/code&gt; can be configured to connect to a remote instance by providing the IP address of the server in the &lt;code&gt;host&lt;/code&gt; property.&lt;br&gt; The server can be either a LLMUnity server or a standard &lt;a href=&#34;https://github.com/ggerganov/llama.cpp/raw/master/examples/server&#34;&gt;llama.cpp server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Show/Hide Advanced Options&lt;/code&gt; Toggle to show/hide advanced options from below&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;span&gt;💻&lt;/span&gt; Server Settings&lt;/h4&gt; &#xA;&lt;div&gt; &#xA; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/.github/GameObject.png&#34; align=&#34;right&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Num Threads&lt;/code&gt; number of threads to use (default: -1 = all)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Num GPU Layers&lt;/code&gt; number of model layers to offload to the GPU. If set to 0 the GPU is not used. Use a large number i.e. &amp;gt;30 to utilise the GPU as much as possible.&lt;br&gt; If the user&#39;s GPU is not supported, the LLM will fall back to the CPU&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Stream&lt;/code&gt; select to receive the reply from the model as it is produced (recommended!).&lt;br&gt; If it is not selected, the full reply from the model is received in one go&lt;/li&gt; &#xA; &lt;li&gt;Advanced options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Parallel Prompts&lt;/code&gt; number of prompts that can happen in parallel (default: -1 = number of LLM/LLMClient objects)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt; select to log the output of the model in the Unity Editor&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Port&lt;/code&gt; port to run the server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;span&gt;🤗&lt;/span&gt; Model Settings&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Download model&lt;/code&gt; click to download the default model (Mistral 7B Instruct)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Load model&lt;/code&gt; click to load your own model in .gguf format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Load lora&lt;/code&gt; click to load a LORA model in .bin format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Model&lt;/code&gt; the model being used (inside the Assets/StreamingAssets folder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Lora&lt;/code&gt; the LORA model being used (inside the Assets/StreamingAssets folder)&lt;/li&gt; &#xA; &lt;li&gt;Advanced options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Context Size&lt;/code&gt; Size of the prompt context (0 = context size of the model)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Batch Size&lt;/code&gt; Batch size for prompt processing (default: 512)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Seed&lt;/code&gt; seed for reproducibility. For random results every time select -1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Temperature&lt;/code&gt; LLM temperature, lower values give more deterministic answers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Top K&lt;/code&gt; top-k sampling (default: 40, 0 = disabled)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Top P&lt;/code&gt; top-p sampling (default: 0.9, 1.0 = disabled)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Num Predict&lt;/code&gt; number of tokens to predict (default: 256, -1 = infinity, -2 = until context filled)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;span&gt;🗨&lt;/span&gt; Chat Settings&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Player Name&lt;/code&gt; the name of the player&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AI Name&lt;/code&gt; the name of the AI&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Prompt&lt;/code&gt; a description of the AI role&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The license of LLMUnity is MIT (&lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;) and uses third-party software with MIT and Apache licenses (&lt;a href=&#34;https://raw.githubusercontent.com/undreamai/LLMUnity/main/Third%20Party%20Notices.md&#34;&gt;Third Party Notices.md&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0xthirteen/SharpRDP</title>
    <updated>2024-01-16T01:28:50Z</updated>
    <id>tag:github.com,2024-01-16:/0xthirteen/SharpRDP</id>
    <link href="https://github.com/0xthirteen/SharpRDP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remote Desktop Protocol .NET Console Application for Authenticated Command Execution&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;SharpRDP - Remote Desktop Protocol Console Application for Authenticated Command Execution&lt;/h3&gt; &#xA;&lt;h4&gt;Building&lt;/h4&gt; &#xA;&lt;p&gt;To compile open the project in Visual Studio and build for release. Two DLLs will be output to the Release directory, you do not need those because the DLLs are in the assembly. If you do not want to use the provided DLLs you will need to .NET SDK to create the AxMSTSCLib.dll DLL. To create it you&#39;ll need to run aximp from the SDK on mstscax.dll. &lt;code&gt;%&amp;lt;SDK dir&amp;gt;%\aximp.exe %windir%\system32\mstscax.dll&lt;/code&gt;. Those DLLs will need to be referenced by the project to get the Interop DLLs created. You will also need to compress the DLLs with Deflate and name them AxInterop.MSTSCLib.dll.bin and Interop.MSTSCLib.dll.bin&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Regular RDP connection and execution&#xA;  SharpRDP.exe computername=target.domain command=&#34;C:\Temp\file.exe&#34; username=domain\user password=password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Exec program as child process of cmd or powershell&#xA;  SharpRDP.exe computername=target.domain command=&#34;C:\Temp\file.exe&#34; username=domain\user password=password exec=cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Use restricted admin mode&#xA;  SharpRDP.exe computername=target.domain command=&#34;C:\Temp\file.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Connect first host drives&#xA;  SharpRDP.exe computername=domain.target command=&#34;\\tsclient\C\Temp\file.exe&#34; username=domain\user password=password connectdrive=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Execute command elevated through Run Dialog - CURRENTLY BUGGED&#xA;  SharpRDP.exe computername=domain.target command=&#34;C:\Temp\file.exe&#34; username=domain\user password=password elevated=winr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Execute command elevated through task manager&#xA;  SharpRDP.exe computername=domain.target command=&#34;C:\Temp\file.exe\&#34; username=domain\user password=password elevated=taskmgr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Add Network Level Authentication&#xA;  SharpRDP.exe computername=domain.target command=&#34;C:\Temp\file.exe\&#34; username=domain\user password=password nla=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ask to take over logon session&#xA;  SharpRDP.exe computername=domain.target command=&#34;C:\Temp\file.exe\&#34; username=domain\user password=password takeover=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If restricted admin mode is enabled on the target do not specify any credentials and it will use the current user context. Can &lt;code&gt;PTH&lt;/code&gt; or &lt;code&gt;make_token&lt;/code&gt; in beacon or &lt;code&gt;runas /netonly&lt;/code&gt; on a Windows system.&lt;/p&gt; &#xA;&lt;p&gt;All execution starts with the Windows run dialog (Win+R). There will be a registry key created at &lt;code&gt;HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU&lt;/code&gt; with the command that you executed. If you want to remove this you can use: &lt;a href=&#34;https://github.com/0xthirteen/CleanRunMRU&#34;&gt;CleanRunMRU: Get or clear RunMRU values&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind if you execute a program like msbuild (I&#39;m sure there are others) a cmd window will pop up while the process is running. If you do it would probably be best to migrate the process and kill the original.&lt;/p&gt; &#xA;&lt;p&gt;The required DLLs are compiled into the assembly and app domain assembly resolve event is used. Because of the size of the DLLs they are compressed and decompressed at runtime (so they could meet beacon&#39;s 1MB size limit).&lt;/p&gt; &#xA;&lt;p&gt;Blog about it found here &lt;a href=&#34;https://0xthirteen.com/2020/01/21/revisiting-remote-desktop-lateral-movement/&#34;&gt;SharpRDP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also part of &lt;a href=&#34;https://github.com/0xthirteen/MoveKit&#34;&gt;MoveKit&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>