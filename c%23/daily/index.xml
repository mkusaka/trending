<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:28:30Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/kernel-memory</title>
    <updated>2023-10-22T01:28:30Z</updated>
    <id>tag:github.com,2023-10-22:/microsoft/kernel-memory</id>
    <link href="https://github.com/microsoft/kernel-memory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Index and query any data using LLM and natural language, tracking sources and showing citations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kernel Memory&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kernel Memory&lt;/strong&gt; (KM) is an open-source &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/dotnet/Service/README.md&#34;&gt;service&lt;/a&gt; and &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365/blog/2023/05/23/empowering-every-developer-with-plugins-for-microsoft-365-copilot/&#34;&gt;plugin&lt;/a&gt; specialized in the efficient indexing of datasets through custom continuous data hybrid pipelines. For some scenarios KM is also available as a library, and soon as a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/kernel-memory/assets/371009/31894afa-d19e-4e9b-8d0f-cb889bf5c77f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Utilizing advanced embeddings and LLMs, the system enables Natural Language querying for obtaining answers from the indexed data, complete with citations and links to the original sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/kernel-memory/assets/371009/c5f0f6c3-814f-45bf-b055-063f23ed80ea&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Designed for seamless integration as a Plugin with &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;, Microsoft Copilot and ChatGPT, Kernel Memory enhances data-driven features in applications built for most popular AI platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Supported backends&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ÜóÔ∏è Vector storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Cognitive Search&lt;/li&gt; &#xA;   &lt;li&gt;Qdrant&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üìÄ Content storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Blobs&lt;/li&gt; &#xA;   &lt;li&gt;Local file system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚è≥ Asynchronous ingestion queues &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Queues&lt;/li&gt; &#xA;   &lt;li&gt;RabbitMQ&lt;/li&gt; &#xA;   &lt;li&gt;Local file based queue&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;NOTE&lt;/strong&gt;: the documentation below is work in progress, will evolve quickly as is not fully functional yet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Kernel Memory in serverless mode&lt;/h1&gt; &#xA;&lt;p&gt;Kernel Memory works and scales at best when running as a service, allowing to ingest thousands of documents and information without blocking your app.&lt;/p&gt; &#xA;&lt;p&gt;However, you can use Kernel Memory also serverless, embedding the &lt;code&gt;MemoryServerlessClient&lt;/code&gt; in your app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Importing documents into your Kernel Memory can be as simple as this:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var memory = new MemoryClientBuilder()&#xA;    .WithOpenAIDefaults(Env.Var(&#34;OPENAI_API_KEY&#34;))&#xA;    .Build();&#xA;&#xA;// Import a file&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;, tags: new() { { &#34;user&#34;, &#34;Blake&#34; } });&#xA;&#xA;// Import multiple files and apply multiple tags&#xA;await memory.ImportDocumentAsync(new Document(&#34;file001&#34;)&#xA;    .AddFile(&#34;business-plan.docx&#34;)&#xA;    .AddFile(&#34;project-timeline.pdf&#34;)&#xA;    .AddTag(&#34;user&#34;, &#34;Blake&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;    .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Asking questions:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var answer1 = await memory.AskAsync(&#34;How many people attended the meeting?&#34;);&#xA;&#xA;var answer2 = await memory.AskAsync(&#34;what&#39;s the project timeline?&#34;, filter: new MemoryFilter().ByTag(&#34;user&#34;, &#34;Blake&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The code leverages the default documents ingestion pipeline:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Extract text: recognize the file format and extract the information&lt;/li&gt; &#xA; &lt;li&gt;Partition the text in small chunks, to optimize search&lt;/li&gt; &#xA; &lt;li&gt;Extract embedding using an LLM embedding generator&lt;/li&gt; &#xA; &lt;li&gt;Save embedding into a vector index such as &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/search/vector-search-overview&#34;&gt;Azure Cognitive Search&lt;/a&gt;, &lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt; or other DBs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Documents are organized by users, safeguarding their private information. Furthermore, memories can be categorized and structured using &lt;strong&gt;tags&lt;/strong&gt;, enabling efficient search and retrieval through faceted navigation.&lt;/p&gt; &#xA;&lt;h1&gt;Data lineage, citations&lt;/h1&gt; &#xA;&lt;p&gt;All memories and answers are fully correlated to the data provided. When producing an answer, Kernel Memory includes all the information needed to verify its accuracy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await memory.ImportFileAsync(&#34;NASA-news.pdf&#34;);&#xA;&#xA;var answer = await memory.AskAsync(&#34;Any news from NASA about Orion?&#34;);&#xA;&#xA;Console.WriteLine(answer.Result + &#34;/n&#34;);&#xA;&#xA;foreach (var x in answer.RelevantSources)&#xA;{&#xA;    Console.WriteLine($&#34;  * {x.SourceName} -- {x.Partitions.First().LastUpdate:D}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on Wednesday, August 2, at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;NASA-news.pdf -- Tuesday, August 1, 2023&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using Kernel Memory Service&lt;/h2&gt; &#xA;&lt;p&gt;Depending on your scenarios, you might want to run all the code &lt;strong&gt;locally inside your process, or remotely through an asynchronous service.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re importing small files, and need only C# or only Python, and can block the process during the import, local-in-process execution can be fine, using the &lt;strong&gt;MemoryServerlessClient&lt;/strong&gt; seen above.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are in one of these scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;d just like a web service to import data and send queries to answer&lt;/li&gt; &#xA; &lt;li&gt;My app is written in &lt;strong&gt;TypeScript, Java, Rust, or some other language&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want to define &lt;strong&gt;custom pipelines mixing multiple languages&lt;/strong&gt; like Python, TypeScript, etc&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m importing &lt;strong&gt;big documents that can require minutes to process&lt;/strong&gt;, and I don&#39;t want to block the user interface&lt;/li&gt; &#xA; &lt;li&gt;I need memory import to &lt;strong&gt;run independently, supporting failures and retry logic&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;then you can deploy Kernel Memory as a service, plugging in the default handlers or your custom Python/TypeScript/Java/etc. handlers, and leveraging the asynchronous non-blocking memory encoding process, sending documents and asking questions using the &lt;strong&gt;MemoryWebClient&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/dotnet/Service/README.md&#34;&gt;Here&lt;/a&gt; you can find a complete set of instruction about &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/dotnet/Service/README.md&#34;&gt;how to run the Kernel Memory service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to give the service a quick test, use the following command to &lt;strong&gt;start the Kernel Memory Service&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On WSL / Linux / MacOS:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet/Service&#xA;./setup.sh&#xA;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On Windows:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet\Service&#xA;setup.cmd&#xA;run.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;To import files using Kernel Memory &lt;strong&gt;web service&lt;/strong&gt;, use &lt;code&gt;MemoryWebClient&lt;/code&gt;:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;#reference dotnet/ClientLib/ClientLib.csproj&#xA;&#xA;var memory = new MemoryWebClient(&#34;http://127.0.0.1:9001&#34;); // &amp;lt;== URL where the web service is running&#xA;&#xA;// Import a file (default user)&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;);&#xA;&#xA;// Import a file specifying a Document ID, User and Tags&#xA;await memory.ImportDocumentAsync(&#34;business-plan.docx&#34;,&#xA;    new DocumentDetails(&#34;user@some.email&#34;, &#34;file001&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;        .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Getting answers via the web service&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl http://127.0.0.1:9001/ask -d&#39;{&#34;query&#34;:&#34;Any news from NASA about Orion?&#34;}&#39; -H &#39;Content-Type: application/json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Query&#34;: &#34;Any news from NASA about Orion?&#34;,&#xA;  &#34;Text&#34;: &#34;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on August 2nd at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&#34;,&#xA;  &#34;RelevantSources&#34;: [&#xA;    {&#xA;      &#34;Link&#34;: &#34;...&#34;,&#xA;      &#34;SourceContentType&#34;: &#34;application/pdf&#34;,&#xA;      &#34;SourceName&#34;: &#34;file5-NASA-news.pdf&#34;,&#xA;      &#34;Partitions&#34;: [&#xA;        {&#xA;          &#34;Text&#34;: &#34;Skip to main content\nJul 28, 2023\nMEDIA ADVISORY M23-095\nNASA Invites Media to See Recovery Craft for\nArtemis Moon Mission\n(/sites/default/Ô¨Åles/thumbnails/image/ksc-20230725-ph-fmx01_0003orig.jpg)\nAboard the USS John P. Murtha, NASA and Department of Defense personnel practice recovery operations for Artemis II in July. A\ncrew module test article is used to help verify the recovery team will be ready to recovery the Artemis II crew and the Orion spacecraft.\nCredits: NASA/Frank Michaux\nMedia are invited to see the new test version of NASA‚Äôs Orion spacecraft and the hardware teams will use\nto recover the capsule and astronauts upon their return from space during the Artemis II\n(http://www.nasa.gov/artemis-ii) mission. The event will take place at 11 a.m. PDT on Wednesday, Aug. 2,\nat Naval Base San Diego.\nPersonnel involved in recovery operations from NASA, the U.S. Navy, and the U.S. Air Force will be\navailable to speak with media.\nU.S. media interested in attending must RSVP by 4&amp;nbsp;p.m., Monday, July 31, to the Naval Base San Diego\nPublic AÔ¨Äairs (mailto:nbsd.pao@us.navy.mil) or 619-556-7359.\nOrion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n1 of 3 7/28/23, 4:51 PMTeams are currently conducting the Ô¨Årst in a series of tests in the PaciÔ¨Åc Ocean to demonstrate and\nevaluate the processes, procedures, and hardware for recovery operations (https://www.nasa.gov\n/exploration/systems/ground/index.html) for crewed Artemis missions. The tests will help prepare the\nteam for Artemis II, NASA‚Äôs Ô¨Årst crewed mission under Artemis that will send four astronauts in Orion\naround the Moon to checkout systems ahead of future lunar missions.\nThe Artemis II crew ‚Äì NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and CSA\n(Canadian Space Agency) astronaut Jeremy Hansen ‚Äì will participate in recovery testing at sea next year.\nFor more information about Artemis, visit:\nhttps://www.nasa.gov/artemis (https://www.nasa.gov/artemis)\n-end-\nRachel Kraft\nHeadquarters, Washington\n202-358-1100\nrachel.h.kraft@nasa.gov (mailto:rachel.h.kraft@nasa.gov)\nMadison Tuttle\nKennedy Space Center, Florida\n321-298-5868\nmadison.e.tuttle@nasa.gov (mailto:madison.e.tuttle@nasa.gov)\nLast Updated: Jul 28, 2023\nEditor: Claire O‚ÄôShea\nTags:&amp;nbsp; Artemis (/artemisprogram),Ground Systems (http://www.nasa.gov/exploration/systems/ground\n/index.html),Kennedy Space Center (/centers/kennedy/home/index.html),Moon to Mars (/topics/moon-to-\nmars/),Orion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n2 of 3 7/28/23, 4:51 PM&#34;,&#xA;          &#34;Relevance&#34;: 0.8430657,&#xA;          &#34;SizeInTokens&#34;: 863,&#xA;          &#34;LastUpdate&#34;: &#34;2023-08-01T08:15:02-07:00&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can find a &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/002-dotnet-WebClient/README.md&#34;&gt;full example here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom memory ingestion pipelines&lt;/h2&gt; &#xA;&lt;p&gt;On the other hand, if you need a custom data pipeline, you can also customize the steps, which will be handled by your custom business logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Memory setup, e.g. how to calculate and where to store embeddings&#xA;var memoryBuilder = new MemoryClientBuilder().WithOpenAIDefaults(Env.Var(&#34;OPENAI_API_KEY&#34;));&#xA;memoryBuilder.Build();&#xA;var orchestrator = memoryBuilder.GetOrchestrator();&#xA;&#xA;// Define custom .NET handlers&#xA;var step1 = new MyHandler1(&#34;step1&#34;, orchestrator);&#xA;var step2 = new MyHandler2(&#34;step2&#34;, orchestrator);&#xA;var step3 = new MyHandler3(&#34;step3&#34;, orchestrator);&#xA;await orchestrator.AddHandlerAsync(step1);&#xA;await orchestrator.AddHandlerAsync(step2);&#xA;await orchestrator.AddHandlerAsync(step3);&#xA;&#xA;// Instantiate a custom pipeline&#xA;var pipeline = orchestrator&#xA;    .PrepareNewFileUploadPipeline(&#34;user-id-1&#34;, &#34;mytest&#34;, new[] { &#34;memory-collection&#34; })&#xA;    .AddUploadFile(&#34;file1&#34;, &#34;file1.docx&#34;, &#34;file1.docx&#34;)&#xA;    .AddUploadFile(&#34;file2&#34;, &#34;file2.pdf&#34;, &#34;file2.pdf&#34;)&#xA;    .Then(&#34;step1&#34;)&#xA;    .Then(&#34;step2&#34;)&#xA;    .Then(&#34;step3&#34;)&#xA;    .Build();&#xA;&#xA;// Execute in process, process all files with all the handlers&#xA;await orchestrator.RunPipelineAsync(pipeline);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Web API specs&lt;/h1&gt; &#xA;&lt;p&gt;The API schema is available at &lt;a href=&#34;http://127.0.0.1:9001/swagger/index.html&#34;&gt;http://127.0.0.1:9001/swagger/index.html&lt;/a&gt; when running the service locally with OpenAPI enabled.&lt;/p&gt; &#xA;&lt;h1&gt;Examples and Tools&lt;/h1&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/000-notebooks&#34;&gt;Collection of Jupyter notebooks with various tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/001-dotnet-Serverless&#34;&gt;Importing files and asking question without running the service (serverless mode)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/002-dotnet-WebClient&#34;&gt;Using the Kernel Memory web service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/003-curl-calling-webservice&#34;&gt;How to upload files from command line with curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/004-dotnet-ServerlessCustomPipeline&#34;&gt;Processing files with custom steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/005-dotnet-InProcessMemoryWithCustomHandler&#34;&gt;Using a custom pipeline handler with serverless memory class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/006-dotnet-CustomHandlerAsAService&#34;&gt;Writing a custom async pipeline handler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/007-aspnet-mvc-integration&#34;&gt;Integrating Memory with ASP.NET applications and controllers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/008-dotnet-custom-partitioning-options&#34;&gt;Partioning/Chunking documents with custom settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/009-dotnet-custom-LLM&#34;&gt;Using Llama and other custom LLMs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/upload-file.sh&#34;&gt;Curl script to upload files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/ask.sh&#34;&gt;Curl script to ask questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/search.sh&#34;&gt;Curl script to search documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/run-qdrant.sh&#34;&gt;Script to start Qdrant for development tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/run-rabbitmq.sh&#34;&gt;Script to start RabbitMQ for development tasks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>cobbr/Covenant</title>
    <updated>2023-10-22T01:28:30Z</updated>
    <id>tag:github.com,2023-10-22:/cobbr/Covenant</id>
    <link href="https://github.com/cobbr/Covenant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Covenant is a collaborative .NET C2 framework for red teamers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wiki/cobbr/Covenant/covenant.png&#34; alt=&#34;Covenant&#34;&gt; &lt;a href=&#34;https://github.com/cobbr/Covenant/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/cobbr/Covenant&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cobbr/Covenant/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/w/cobbr/covenant&#34; alt=&#34;Commit Activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cobbr/Covenant/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/cobbr/Covenant&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cobbr/Covenant/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/cobbr/Covenant&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bloodhoundgang.herokuapp.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-%23covenant-red&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Covenant is a .NET command and control framework that aims to highlight the attack surface of .NET, make the use of offensive .NET tradecraft easier, and serve as a collaborative command and control platform for red teamers.&lt;/p&gt; &#xA;&lt;p&gt;Covenant is an ASP.NET Core, cross-platform application that includes a web-based interface that allows for multi-user collaboration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cobbr/Covenant/wiki/images/covenant-gui-dashboard.png&#34; alt=&#34;Covenant Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick-Start Guide&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/cobbr/Covenant/wiki/Installation-And-Startup&#34;&gt;Installation and Startup&lt;/a&gt; guide to get started with Covenant!&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/cobbr/Covenant/wiki&#34;&gt;Wiki&lt;/a&gt; documents most of Covenant&#39;s core features and how to use them.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Covenant has several key features that make it useful and differentiate it from other command and control frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive Interface&lt;/strong&gt; - Covenant provides an intuitive web application to easily run a collaborative red team operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Platform&lt;/strong&gt; - Covenant targets .NET Core, which is multi-platform. This allows Covenant to run natively on Linux, MacOS, and Windows platforms. Additionally, Covenant has docker support, allowing it to run within a container on any system that has docker installed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-User&lt;/strong&gt; - Covenant supports multi-user collaboration. The ability to collaborate has become crucial for effective red team operations. Many users can interact with the same Covenant server and operate independently or collaboratively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API Driven&lt;/strong&gt; - Covenant is driven by an API that enables multi-user collaboration and is easily extendible. Additionally, Covenant includes a Swagger UI that makes development and debugging easier and more convenient.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Listener Profiles&lt;/strong&gt; - Covenant supports listener ‚Äúprofiles‚Äù that control how the network communication between Grunt implants and Covenant listeners look on the wire.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Encrypted Key Exchange&lt;/strong&gt; - Covenant implements an encrypted key exchange between Grunt implants and Covenant listeners that is largely based on a similar exchange in the Empire project, in addition to optional SSL encryption. This achieves the cryptographic property of forward secrecy between Grunt implants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Compilation&lt;/strong&gt; - Covenant uses the Roslyn API for dynamic C# compilation. Every time a new Grunt is generated or a new task is assigned, the relevant code is recompiled and obfuscated with ConfuserEx, avoiding totally static payloads. Covenant reuses much of the compilation code from the SharpGen project, which I described in much more detail in a previous post.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Inline C# Execution&lt;/strong&gt; - Covenant borrows code and ideas from both the SharpGen and SharpShell projects to allow operators to execute C# one-liners on Grunt implants. This allows for similar functionality to that described in the SharpShell post, but allows the one-liners to be executed on remote implants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tracking Indicators&lt;/strong&gt; - Covenant tracks ‚Äúindicators‚Äù throughout an operation, and summarizes them in the Indicators menu. This allows an operator to conduct actions that are tracked throughout an operation and easily summarize those actions to the blue team during or at the end of an assessment for deconfliction and educational purposes. This feature is still in it‚Äôs infancy and still has room for improvement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developed in C#&lt;/strong&gt; - Personally, I enjoy developing in C#, which may not be a surprise for anyone that has read my latest blogs or tools. Not everyone might agree that development in C# is ideal, but hopefully everyone agrees that it is nice to have all components of the framework written in the same language. I‚Äôve found it very convenient to write the server, client, and implant all in the same language. This may not be a true ‚Äúfeature‚Äù, but hopefully it allows others to contribute to the project fairly easily.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Questions and Discussion&lt;/h3&gt; &#xA;&lt;p&gt;Have questions or want to chat more about Covenant? Join the #Covenant channel in the &lt;a href=&#34;https://bloodhoundgang.herokuapp.com/&#34;&gt;BloodHound Gang Slack&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>