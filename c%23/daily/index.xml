<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-06T01:30:45Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lostindark/DriverStoreExplorer</title>
    <updated>2023-01-06T01:30:45Z</updated>
    <id>tag:github.com,2023-01-06:/lostindark/DriverStoreExplorer</id>
    <link href="https://github.com/lostindark/DriverStoreExplorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Driver Store Explorer [RAPR]&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Driver Store Explorer [RAPR]&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/lostindark/driverstoreexplorer/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/kqtvhfq23am2gq26/branch/master?svg=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Driver Store Explorer [RAPR] makes it easier to deal with Windows &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff544868(VS.85).aspx&#34;&gt;driver store&lt;/a&gt;. Supported operations include list/add/install/delete third-party driver packages.&lt;/p&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support online (local machine) and offline driver store.&lt;/li&gt; &#xA; &lt;li&gt;Enumerate / list all third-party driver packages in the driver store. Showing device associated with drivers. Export the driver package list as CSV.&lt;/li&gt; &#xA; &lt;li&gt;Add a driver package to the driver store.&lt;/li&gt; &#xA; &lt;li&gt;Delete one or multiple driver packages from the store.&lt;/li&gt; &#xA; &lt;li&gt;Detect old and not used driver packages (best effort).&lt;/li&gt; &#xA; &lt;li&gt;Full-fledged GUI Supports grouping / sorting on any column. Supports re-arranging of / selecting specific columns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Screenshots:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lostindark/DriverStoreExplorer/raw/master/Screenshots/Screenshot.png&#34; alt=&#34;Screenshot of DriverStoreExplorer&#34; title=&#34;Screenshot of Driver Store Explorer&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements:&lt;/h3&gt; &#xA;&lt;p&gt;This tool requires:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Framework 4.5.2 or newer&lt;/li&gt; &#xA; &lt;li&gt;Windows 7 or newer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build the code yourself, open Rapr.sln in Visual Studio 2019. Visual Studio 2017 may also work but it is not guaranteed.&lt;/p&gt; &#xA;&lt;h3&gt;Releases:&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest version here: &lt;a href=&#34;https://github.com/lostindark/DriverStoreExplorer/releases/latest&#34;&gt;https://github.com/lostindark/DriverStoreExplorer/releases/latest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;History:&lt;/h3&gt; &#xA;&lt;p&gt;The project was originally hosted on &lt;a href=&#34;https://driverstoreexplorer.codeplex.com/&#34;&gt;https://driverstoreexplorer.codeplex.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Credits:&lt;/h3&gt; &#xA;&lt;p&gt;This tool uses the excellent &lt;a href=&#34;http://objectlistview.sourceforge.net/cs/index.html&#34;&gt;ObjectListView&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>waf/CSharpRepl</title>
    <updated>2023-01-06T01:30:45Z</updated>
    <id>tag:github.com,2023-01-06:/waf/CSharpRepl</id>
    <link href="https://github.com/waf/CSharpRepl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A command line C# REPL with syntax highlighting â€“ explore the language, libraries and nuget packages interactively.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C# REPL&lt;/h1&gt; &#xA;&lt;p&gt;A cross-platform command line &lt;a href=&#34;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&#34; target=&#34;_blank&#34;&gt;&lt;abbr title=&#34;Read Eval Print Loop&#34;&gt;REPL&lt;/abbr&gt;&lt;/a&gt; for the rapid experimentation and exploration of C#. It supports intellisense, installing NuGet packages, and referencing local .NET projects and assemblies.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/csharprepl.mp4&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/csharprepl.png&#34; alt=&#34;C# REPL screenshot&#34; style=&#34;max-width:80%;&#34;&gt; &lt;/a&gt; &#xA; &lt;p align=&#34;center&#34;&gt;&lt;i&gt;(click to view animation)&lt;/i&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;C# REPL provides the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syntax highlighting via ANSI escape sequences&lt;/li&gt; &#xA; &lt;li&gt;Intellisense with documentation and overload navigation&lt;/li&gt; &#xA; &lt;li&gt;Automatic formatting of typed input&lt;/li&gt; &#xA; &lt;li&gt;Nuget package installation&lt;/li&gt; &#xA; &lt;li&gt;Reference local assemblies, solutions, and projects&lt;/li&gt; &#xA; &lt;li&gt;Navigate to source via Source Link&lt;/li&gt; &#xA; &lt;li&gt;IL disassembly (both Debug and Release mode)&lt;/li&gt; &#xA; &lt;li&gt;Fast and flicker-free rendering. A &#34;diff&#34; algorithm is used to only render what&#39;s changed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;C# REPL is a .NET 7 global tool, and runs on Windows 10, Mac OS, and Linux. It can be installed via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;dotnet tool install -g csharprepl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re running on Mac OS Catalina (10.15) or later, make sure you follow any additional directions printed to the screen. You may need to update your PATH variable in order to use .NET global tools.&lt;/p&gt; &#xA;&lt;p&gt;After installation is complete, run &lt;code&gt;csharprepl&lt;/code&gt; to begin. C# REPL can be updated via &lt;code&gt;dotnet tool update -g csharprepl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Themes and Colors&lt;/h2&gt; &#xA;&lt;p&gt;The default theme uses the same colors as Visual Studio dark mode, and custom themes can be created using a &lt;a href=&#34;https://github.com/waf/CSharpRepl/raw/main/CSharpRepl/themes/dracula.json&#34;&gt;&lt;code&gt;theme.json&lt;/code&gt;&lt;/a&gt; file. Additionally, your terminal&#39;s colors can be used by supplying the &lt;code&gt;--useTerminalPaletteTheme&lt;/code&gt; command line option. To completely disable colors, set the NO_COLOR environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Type some C# into the prompt and press &lt;kbd&gt;Enter&lt;/kbd&gt; to run it. The result, if any, will be printed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&amp;gt; Console.WriteLine(&#34;Hello World&#34;)&#xA;Hello World&#xA;&#xA;&amp;gt; DateTime.Now.AddDays(8)&#xA;[6/7/2021 5:13:00 PM]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To evaluate multiple lines of code, use &lt;kbd&gt;Shift+Enter&lt;/kbd&gt; to insert a newline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&amp;gt; var x = 5;&#xA;  var y = 8;&#xA;  x * y&#xA;40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, if the statement is not a &#34;complete statement&#34; a newline will automatically be inserted when &lt;kbd&gt;Enter&lt;/kbd&gt; is pressed. For example, in the below code, the first line is not a syntactically complete statement, so when we press enter we&#39;ll go down to a new line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&amp;gt; if (x == 5)&#xA;  | // caret position, after we press Enter on Line 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, pressing &lt;kbd&gt;Ctrl+Enter&lt;/kbd&gt; will show a &#34;detailed view&#34; of the result. For example, for the &lt;code&gt;DateTime.Now&lt;/code&gt; expression below, on the first line we pressed &lt;kbd&gt;Enter&lt;/kbd&gt;, and on the second line we pressed &lt;kbd&gt;Ctrl+Enter&lt;/kbd&gt; to view more detailed output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&amp;gt; DateTime.Now // Pressing Enter shows a reasonable representation&#xA;[5/30/2021 5:13:00 PM]&#xA;&#xA;&amp;gt; DateTime.Now // Pressing Ctrl+Enter shows a detailed representation&#xA;[5/30/2021 5:13:00 PM] {&#xA;  Date: [5/30/2021 12:00:00 AM],&#xA;  Day: 30,&#xA;  DayOfWeek: Sunday,&#xA;  DayOfYear: 150,&#xA;  Hour: 17,&#xA;  InternalKind: 9223372036854775808,&#xA;  InternalTicks: 637579915804530992,&#xA;  Kind: Local,&#xA;  Millisecond: 453,&#xA;  Minute: 13,&#xA;  Month: 5,&#xA;  Second: 0,&#xA;  Ticks: 637579915804530992,&#xA;  TimeOfDay: [17:13:00.4530992],&#xA;  Year: 2021,&#xA;  _dateData: 9860951952659306800&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;A note on semicolons&lt;/strong&gt;: C# expressions do not require semicolons, but &lt;a href=&#34;https://stackoverflow.com/questions/19132/expression-versus-statement&#34;&gt;statements&lt;/a&gt; do. If a statement is missing a required semicolon, a newline will be added instead of trying to run the syntatically incomplete statement; simply type the semicolon to complete the statement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&amp;gt; var now = DateTime.Now; // assignment statement, semicolon required&#xA;&#xA;&amp;gt; DateTime.Now.AddDays(8) // expression, we don&#39;t need a semicolon&#xA;[6/7/2021 5:03:05 PM]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re done with your session, you can type &lt;code&gt;exit&lt;/code&gt; or press &lt;kbd&gt;Ctrl+D&lt;/kbd&gt; to exit.&lt;/p&gt; &#xA;&lt;h2&gt;Adding References&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;#r&lt;/code&gt; command to add assembly or nuget references.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For assembly references, run &lt;code&gt;#r &#34;AssemblyName&#34;&lt;/code&gt; or &lt;code&gt;#r &#34;path/to/assembly.dll&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For project references, run &lt;code&gt;#r &#34;path/to/project.csproj&#34;&lt;/code&gt;. Solution files (.sln) can also be referenced.&lt;/li&gt; &#xA; &lt;li&gt;For nuget references, run &lt;code&gt;#r &#34;nuget: PackageName&#34;&lt;/code&gt; to install the latest version of a package, or &lt;code&gt;#r &#34;nuget: PackageName, 13.0.5&#34;&lt;/code&gt; to install a specific version (13.0.5 in this case).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/nuget.png&#34; alt=&#34;Installing nuget packages&#34; style=&#34;max-width:80%;&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;To run ASP.NET applications inside the REPL, start the &lt;code&gt;csharprepl &lt;/code&gt; application with the &lt;code&gt;--framework&lt;/code&gt; parameter, specifying the &lt;code&gt;Microsoft.AspNetCore.App&lt;/code&gt; shared framework. Then, use the above &lt;code&gt;#r&lt;/code&gt; command to reference the application DLL. See &lt;a href=&#34;https://github.com/waf/CSharpRepl/wiki/Configuring-CSharpRepl&#34;&gt;Configuring CSharpRepl&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;csharprepl --framework  Microsoft.AspNetCore.App&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;CSharpRepl aims for a similar editing experience as Visual Studio (e.g. for text navigation, selection and keyboard shortcuts).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Usage&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+C&lt;/kbd&gt; - Cancel current line&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+D&lt;/kbd&gt; or type &lt;code&gt;exit&lt;/code&gt; - Exit the REPL&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+L&lt;/kbd&gt; - Clear screen&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt; - Evaluate the current line if it&#39;s a syntactically complete statement; otherwise add a newline&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Control+Enter&lt;/kbd&gt; - Evaluate the current line, and return a more detailed representation of the result&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Shift+Enter&lt;/kbd&gt; - Insert a new line (this does not currently work on Linux or Mac OS; Hopefully this will work in .NET 7)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+Shift+C&lt;/kbd&gt; - Copy current line to clipboard&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+V&lt;/kbd&gt;, &lt;kbd&gt;Shift+Insert&lt;/kbd&gt;, and &lt;kbd&gt;Ctrl+Shift+V&lt;/kbd&gt; - Paste text to prompt. Automatically trims leading indent&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Actions&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;F1&lt;/kbd&gt; - Opens the MSDN documentation for the class/method under the caret (&lt;a href=&#34;https://docs.microsoft.com/en-US/dotnet/api/System.DateTime.AddDays?view=net-5.0&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;F9&lt;/kbd&gt; - Shows the IL (intermediate language) for the current statement in Debug mode.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+F9&lt;/kbd&gt; - Shows the IL for the current statement with Release mode optimizations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;F12&lt;/kbd&gt; - Opens the source code in the browser for the class/method under the caret, if the assembly supports &lt;a href=&#34;https://github.com/dotnet/sourcelink&#34;&gt;Source Link&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autocompletion&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Ctrl+Space&lt;/kbd&gt; - Open the autocomplete menu.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;, &lt;kbd&gt;Tab&lt;/kbd&gt; - Select the active autocompletion option&lt;/li&gt; &#xA;   &lt;li&gt;&lt;kbd&gt;Escape&lt;/kbd&gt; - Closes the autocomplete menu&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Command Line Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The C# REPL supports both command line options as well as a configuration file. See the &lt;a href=&#34;https://github.com/waf/CSharpRepl/wiki/Configuring-CSharpRepl&#34;&gt;Configuring CSharpRepl&lt;/a&gt; wiki page for more information.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;csharprepl --help&lt;/code&gt; to see the available command line configuration options, and run &lt;code&gt;csharprepl --configure&lt;/code&gt; to get started with the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/dotnet/command-line-api/raw/main/docs/dotnet-suggest.md&#34;&gt;&lt;code&gt;dotnet-suggest&lt;/code&gt;&lt;/a&gt; enabled, all options can be tab-completed, including values provided to &lt;code&gt;--framework&lt;/code&gt; and .NET namespaces provided to &lt;code&gt;--using&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integrating with other software&lt;/h2&gt; &#xA;&lt;p&gt;C# REPL is a standalone software application, but it can be useful to integrate it with other developer tools:&lt;/p&gt; &#xA;&lt;h3&gt;Windows Terminal&lt;/h3&gt; &#xA;&lt;p&gt;To add C# REPL as a menu entry in Windows Terminal, add the following profile to Windows Terminal&#39;s &lt;code&gt;settings.json&lt;/code&gt; configuration file (under the JSON property &lt;code&gt;profiles.list&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;C# REPL&#34;,&#xA;    &#34;commandline&#34;: &#34;csharprepl&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the exact colors shown in the screenshots in this README, install the &lt;a href=&#34;https://github.com/dracula/windows-terminal&#34;&gt;Windows Terminal Dracula theme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;To use the C# REPL with Visual Studio Code, simply run the &lt;code&gt;csharprepl&lt;/code&gt; command in the Visual Studio Code terminal. To send commands to the REPL, use the built-in &lt;code&gt;Terminal: Run Selected Text In Active Terminal&lt;/code&gt; command from the Command Palette (&lt;code&gt;workbench.action.terminal.runSelectedText&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/waf/CSharpRepl/main/.github/readme_assets/vscode.png&#34; alt=&#34;Visual Studio Code screenshot&#34; style=&#34;max-width:90%;&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Windows OS&lt;/h3&gt; &#xA;&lt;p&gt;To add the C# REPL to the Windows Start Menu for quick access, you can run the following PowerShell command, which will start C# REPL in Windows Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$shell = New-Object -ComObject WScript.Shell&#xA;$shortcut = $shell.CreateShortcut(&#34;$env:appdata\Microsoft\Windows\Start Menu\Programs\csharprepl.lnk&#34;)&#xA;$shortcut.TargetPath = &#34;wt.exe&#34;&#xA;$shortcut.Arguments = &#34;-w 0 nt csharprepl.exe&#34;&#xA;$shortcut.Save()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also wish to add a shorter alias for C# REPL, which can be done by creating a &lt;code&gt;.cmd&lt;/code&gt; file somewhere on your path. For example, put the following contents in &lt;code&gt;C:\Users\username\.dotnet\tools\csr.cmd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wt -w 0 nt csharprepl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow you to launch C# REPL by running &lt;code&gt;csr&lt;/code&gt; from anywhere that accepts Windows commands, like the Window Run dialog.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with other REPLs&lt;/h2&gt; &#xA;&lt;p&gt;This project is far from being the first REPL for C#. Here are some other projects; if this project doesn&#39;t suit you, another one might!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Visual Studio&#39;s C# Interactive pane&lt;/strong&gt; is full-featured (it has syntax highlighting and intellisense) and is part of Visual Studio. This deep integration with Visual Studio is both a benefit from a workflow perspective, and a drawback as it&#39;s not cross-platform. The C# Interactive pane supports navigating to source code (default F12), which will open that source in the containing Visual Studio window, yet no NuGet packages. It starts in .NET Framework mode but also supports .NET Core via &lt;code&gt;#reset core&lt;/code&gt;. Subjectively, it does not follow typical command line keybindings, so can feel a bit foreign.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;csi.exe&lt;/strong&gt; ships with C# and is a command line REPL. It&#39;s great because it&#39;s a cross platform REPL that comes out of the box, but it doesn&#39;t support syntax highlighting, autocompletion, or .NET Core.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dotnet-script/dotnet-script&#34;&gt;dotnet script&lt;/a&gt;&lt;/strong&gt; allows you to run C# scripts from the command line. It has a REPL built-in, but the predominant focus seems to be as a script runner. It&#39;s a great tool, though, and has a strong community following.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/dotnet/interactive&#34;&gt;dotnet interactive&lt;/a&gt;&lt;/strong&gt; is a tool from Microsoft that creates a Jupyter notebook for C#, runnable through Visual Studio Code. It also provides a general framework useful for running REPLs.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for the interest! Check out &lt;a href=&#34;https://github.com/waf/CSharpRepl/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Unity-Technologies/BoatAttack</title>
    <updated>2023-01-06T01:30:45Z</updated>
    <id>tag:github.com,2023-01-06:/Unity-Technologies/BoatAttack</id>
    <link href="https://github.com/Unity-Technologies/BoatAttack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Demo Project using the Universal RP from Unity3D&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:This repository uses GitLFS, to use this repo you need to pull via Git and make sure GitLFS is installed locally&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Boat Attack&lt;/h1&gt; &#xA;&lt;h6&gt;Demo Project using the Universal RP from Unity3D&lt;/h6&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1PTNdhnqbhzSWUCfAinIefP5cfr6Dezuw/view&#34;&gt;&lt;img src=&#34;https://media.githubusercontent.com/media/Verasl/BoatAttack/release/2019.3/Assets/Textures/UI/welcome-title.png&#34; alt=&#34;Click for Youtube Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Unity project has been created to aid the testing and development of Universal RP. The project is a small vertical slice of a boat racing game, complete with race-able boats and island environment.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to post any issues, but know this is a &#39;as is&#39; repo, it&#39;s meant more for discovery of how some of the Universal RP features work and a learning resource for some tricks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Project Features&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses Universal RP from Unity&lt;/li&gt; &#xA; &lt;li&gt;Mobile optimized, low poly, LODs, no compute&lt;/li&gt; &#xA; &lt;li&gt;C# Jobs buoyancy system&lt;/li&gt; &#xA; &lt;li&gt;Cinemachine camera setups&lt;/li&gt; &#xA; &lt;li&gt;Shader Graph usage&lt;/li&gt; &#xA; &lt;li&gt;Post-processing v3 with Volume blending&lt;/li&gt; &#xA; &lt;li&gt;Addressables asset management package&lt;/li&gt; &#xA; &lt;li&gt;Custom Universal RP rendering for planar reflections via &lt;a href=&#34;https://docs.unity3d.com/ScriptReference/Rendering.RenderPipelineManager.html&#34;&gt;SRP callbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom SciptableRenderPass usage for WaterFX and Caustics&lt;/li&gt; &#xA; &lt;li&gt;Gerstner based water system in local package(WIP)&lt;/li&gt; &#xA; &lt;li&gt;Much more..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1PTNdhnqbhzSWUCfAinIefP5cfr6Dezuw/view&#34;&gt;Demo Footage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h4&gt;Getting the project&lt;/h4&gt; &#xA;&lt;p&gt;via Git:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have GitLFS installed, check &lt;a href=&#34;https://git-lfs.github.com&#34;&gt;here&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo as usual via cmd/terminal or in your favourite Git GUI software.&lt;/li&gt; &#xA; &lt;li&gt;Checkout the branch that matches the Unity verison you are using, eg &lt;code&gt;release/2019.3&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Downloadable zips:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1vXpbVC36GHnyC-Eitl1WpLay9l_YqJGQ/view?usp=sharing&#34;&gt;2019.3 Project (Unity 2019.3f5)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Load the project:&lt;/h4&gt; &#xA;&lt;p&gt;Once you have the project files locally you can load the project, ideally in the Unity version that is noted in the &lt;code&gt;ProjectSettings/ProjectVersion.txt&lt;/code&gt; for the best experience. Upon loading the project will display a small welcome screen with some buttons to load starting scenes.&lt;/p&gt; &#xA;&lt;p&gt;Scenes worth noting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scenes/main_menu.unity&lt;/code&gt; - Starting menu scene if you want to have a full play-through of the demo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scenes/demo_island.unity&lt;/code&gt; - Setup to play in the editor and go straight into an AI based race.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scenes/_levels/level_Island.unity&lt;/code&gt; - The scene loaded when entering from the main menu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scenes/Testing/***.unity&lt;/code&gt; - Assorted test scenes, these are in need of updating and come as is.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build the project:&lt;/h4&gt; &#xA;&lt;p&gt;One thing to make sure you do before building is make sure to build the addressable assets, this can be done via the addressables window, for more information please checkout the addressables &lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.addressables@latest&#34;&gt;package documentation&lt;/a&gt;. Once the addressable assets are built you can continue to build a player as usual.&lt;/p&gt; &#xA;&lt;p&gt;One thing to mention is not all controls and platforms have been tested, especially for the menu work. if you want to just see the project running on a device you can add the &lt;code&gt;scenes/demo_island.unity&lt;/code&gt; scene to the build list and disable/remove the others.&lt;/p&gt; &#xA;&lt;h1&gt;Todo&lt;/h1&gt; &#xA;&lt;p&gt;As this project is on going there is a lot more left that needs to be worked on, so I repeat this is not a resource for production ready workflow ideas or systems and lots of it was put together very quickly.&lt;/p&gt; &#xA;&lt;p&gt;Some of the things left to do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make water system more modular and improve UX&lt;/li&gt; &#xA; &lt;li&gt;Improve boat AI&lt;/li&gt; &#xA; &lt;li&gt;Add imposter rendering for vegetation&lt;/li&gt; &#xA; &lt;li&gt;Cleanup menu system to switch between Demoing/Playing/Benchmarking&lt;/li&gt; &#xA; &lt;li&gt;Implement Unity Physics&lt;/li&gt; &#xA; &lt;li&gt;Optimize cross platform performance and stability&lt;/li&gt; &#xA; &lt;li&gt;Continue code cleanup&lt;/li&gt; &#xA; &lt;li&gt;Wiki explaining features/systems in more depth&lt;/li&gt; &#xA; &lt;li&gt;Add more sizzle....&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gdurl.com/STO1&#34; alt=&#34;Sunny Island&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.andremcgrail.com&#34;&gt;Andre McGrail&lt;/a&gt; - Design, Programming, Modeling, Textures, SFX&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://big_ally.artstation.com&#34;&gt;Alex Best&lt;/a&gt; - Modeling, Textures&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://soundcloud.com/stintah&#34;&gt;Stintah&lt;/a&gt; - Soundtrack&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/phi-lira&#34;&gt;Felipe Lira&lt;/a&gt; - For Making Universal RP &amp;amp; LWRP&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stramit&#34;&gt;Tim Cooper&lt;/a&gt; - Assorted SRP code help&lt;/p&gt; &#xA;&lt;p&gt;And thanks to many more who have helped with suggestions and feedback!&lt;/p&gt; &#xA;&lt;h1&gt;Notes&lt;/h1&gt; &#xA;&lt;p&gt;*Make sure you clone the repo as downloading the zip will not contain the GitLFS files(all textures/meshes etc)&lt;/p&gt;</summary>
  </entry>
</feed>