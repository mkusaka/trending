<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:34:28Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>amantinband/throw</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/amantinband/throw</id>
    <link href="https://github.com/amantinband/throw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, fluent, extensible, and fully customizable library for throwing exceptions for projects using .NET 6+&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/amantinband/throw/main/assets/icon.png&#34; alt=&#34;drawing&#34; width=&#34;700px&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Throw&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Throw.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mantinband/throw/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/mantinband/throw/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mantinband/throw/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/mantinband/throw/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;publish Throw to nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mantinband/throw&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mantinband/throw/branch/main/graph/badge.svg?token=PA879VKK6M&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://GitHub.com/mantinband/throw/graphs/contributors/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/mantinband/throw&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mantinband/throw/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/mantinband/throw.svg?sanitize=true&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mantinband/throw/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mantinband/throw&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;h3&gt;A simple, fluent, extensible, and fully customizable library for throwing exceptions using .NET 6+&lt;/h3&gt; &#xA; &lt;p&gt;&lt;code&gt;dotnet add package throw&lt;/code&gt;&lt;/p&gt; &#xA; &lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amantinband/throw/main/assets/getting-started.png&#34; alt=&#34;Getting started png&#34;&gt;&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#give-it-a-star-&#34;&gt;Give it a star ⭐!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#nullable-vs-non-nullable-types&#34;&gt;Nullable vs non-nullable types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#customize-everything&#34;&gt;Customize everything&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#how-customizing-the-exception-affects-the-chained-rules&#34;&gt;How customizing the exception affects the chained rules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#exception-customizations&#34;&gt;Exception customizations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#1-throw&#34;&gt;1. &lt;code&gt;Throw()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#2-throwmy-custom-message&#34;&gt;2. &lt;code&gt;Throw(&#34;My custom message&#34;)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#3-throw--new-myexception&#34;&gt;3. &lt;code&gt;Throw(() =&amp;gt; new MyException())&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#4-throwparamname--new-myexceptionparam-paramname&#34;&gt;4. &lt;code&gt;Throw(paramName =&amp;gt; new MyException($&#34;Param: {paramName}&#34;)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#common-types&#34;&gt;Common types&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#booleans&#34;&gt;Booleans&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#nullable-value-types-bool-int-double-datetime-etc&#34;&gt;Nullable value types (&lt;code&gt;bool?&lt;/code&gt;, &lt;code&gt;int?&lt;/code&gt;, &lt;code&gt;double?&lt;/code&gt;, &lt;code&gt;DateTime?&lt;/code&gt; etc.)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#strings&#34;&gt;Strings&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#collections-ienumerable-ienumerablet-icollection-icollectiont-ilist-etc&#34;&gt;Collections (&lt;code&gt;IEnumerable&lt;/code&gt;, &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ICollection&lt;/code&gt;, &lt;code&gt;ICollection&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;IList&lt;/code&gt;, etc.)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#datetime&#34;&gt;DateTime&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#enums&#34;&gt;Enums&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#equalities-non-nullables&#34;&gt;Equalities (non-nullables)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#uris&#34;&gt;Uris&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#comparable-int-double-decimal-long-float-short-datetime-dateonly-timeonly-etc&#34;&gt;Comparable (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;DateOnly&lt;/code&gt;, &lt;code&gt;TimeOnly&lt;/code&gt; etc.)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#nested-properties&#34;&gt;Nested properties&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#boolean-properties&#34;&gt;Boolean properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#string-properties&#34;&gt;String properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#collection-properties&#34;&gt;Collection properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#datetime-properties&#34;&gt;DateTime properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#enum-properties&#34;&gt;Enum properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#property-equalities&#34;&gt;property equalities&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#uri-properties&#34;&gt;Uri properties&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#comparable-properties&#34;&gt;Comparable properties&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#extensibility&#34;&gt;Extensibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#conditional-compilation&#34;&gt;Conditional compilation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#upcoming-features&#34;&gt;Upcoming features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#contribution&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amantinband/throw/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Give it a star ⭐!&lt;/h1&gt; &#xA;&lt;p&gt;Loving it? Show your support by giving this project a star!&lt;/p&gt; &#xA;&lt;h1&gt;Nullable vs non-nullable types&lt;/h1&gt; &#xA;&lt;p&gt;This library is designed to work best with &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references&#34;&gt;nullable reference types feature&lt;/a&gt; enabled.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Throw()&lt;/code&gt; method is the entry method for all non-nullable types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string name = &#34;hello&#34;;&#xA;name.Throw().IfLongerThan(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And &lt;code&gt;ThrowIfNull()&lt;/code&gt; for any nullable type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string? name = &#34;hello&#34;;&#xA;name.ThrowIfNull();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Trying to use &lt;code&gt;Throw()&lt;/code&gt; on a nullable type will give a warning&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string? name = null;&#xA;name.Throw() // warning CS8714: The type &#39;string?&#39; cannot be used as type parameter &#39;TValue&#39; in the generic type or method &#39;ValidatableCreationExtensions.Throw&amp;lt;TValue&amp;gt;(TValue, ExceptionCustomizations?, string?)&#39;. Nullability of type argument &#39;string?&#39; doesn&#39;t match &#39;notnull&#39; constraint.&#xA;    .IfEmpty();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After validating the nullable type isn&#39;t null, all the regular non-nullable rules can be used&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;name.ThrowIfNull()&#xA;    .IfEmpty()&#xA;    .IfLongerThan(3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The expression can be implicitly cast to the non-nullable type of the original nullable type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string? name = &#34;Amichai&#34;;&#xA;string nonNullableName = name.ThrowIfNull()&#xA;    .IfEmpty()&#xA;    .IfLongerThan(10);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int? a = 5;&#xA;int b = a.ThrowIfNull();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Customize everything&lt;/h1&gt; &#xA;&lt;h2&gt;How customizing the exception affects the chained rules&lt;/h2&gt; &#xA;&lt;p&gt;If you have customized the exception, any rule that throws an exception will use the customization. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Default behavior:&#xA;name.Throw()&#xA;    .IfEmpty() // System.ArgumentException: String should not be empty. (Parameter &#39;name&#39;)&#xA;    .IfWhiteSpace() // System.ArgumentException: String should not be white space only. (Parameter &#39;name&#39;)&#xA;    .IfLongerThan(3) // System.ArgumentException: String should not be longer than 3 characters. (Parameter &#39;name&#39;)&#xA;    .IfShorterThan(10); // System.ArgumentException: String should not be shorter than 10 characters. (Parameter &#39;name&#39;)&#xA;&#xA;// Customized behavior:&#xA;name.Throw(paramName =&amp;gt; throw new MyCustomException($&#34;Param name: {paramName}.&#34;))&#xA;    .IfEmpty() // MyCustomException: Param name: name.&#xA;    .IfWhiteSpace() // MyCustomException: Param name: name.&#xA;    .IfLongerThan(3) // MyCustomException: Param name: name.&#xA;    .IfShorterThan(10); // MyCustomException: Param name: name.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At any point, you can change the exception customization, and it will apply for all the rules that follow. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;name.Throw(&#34;String should not be empty or white space only.&#34;)&#xA;        .IfEmpty() // System.ArgumentException: String should not be empty or white space only. (Parameter &#39;name&#39;)&#xA;        .IfWhiteSpace() // System.ArgumentException: String should not be empty or white space only. (Parameter &#39;name&#39;)&#xA;    .Throw(&#34;String should not be between 3 and 10 characters long.&#34;)&#xA;        .IfLongerThan(3) // System.ArgumentException: String should not be between 3 and 10 characters long. (Parameter &#39;name&#39;)&#xA;        .IfShorterThan(10); // System.ArgumentException: String should not be between 3 and 10 characters long. (Parameter &#39;name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To go back to the default exception, simply use the &lt;code&gt;Throw()&lt;/code&gt; method. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;name.Throw(&#34;String should not be empty or white space only.&#34;)&#xA;        .IfEmpty() // System.ArgumentException: String should not be empty or white space only. (Parameter &#39;name&#39;)&#xA;        .IfWhiteSpace() // System.ArgumentException: String should not be empty or white space only. (Parameter &#39;name&#39;)&#xA;    .Throw()&#xA;        .IfLongerThan(3) // System.ArgumentException: String should not be longer than 3 characters. (Parameter &#39;name&#39;)&#xA;        .IfShorterThan(10); // System.ArgumentException: String should not be shorter than 10 characters. (Parameter &#39;name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exception customizations&lt;/h2&gt; &#xA;&lt;h3&gt;1. &lt;code&gt;Throw()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Each rule has a default behavior. If you don&#39;t customize the exception, the default behavior will be used.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Throw()&lt;/code&gt; or &lt;code&gt;ThrowIfNull()&lt;/code&gt; method to throw the default exception&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// ArgumentNullException: Value cannot be null. (Parameter &#39;nullableValue&#39;)&#xA;nullableValue.ThrowIfNull();&#xA;&#xA;// System.ArgumentOutOfRangeException: Value should not be less than 2/28/2042 4:41:46 PM. (Parameter &#39;dateTime&#39;)\n Actual value was 2/28/2022 4:41:46 PM.&#xA;dateTime.Throw().IfLessThan(DateTime.Now.AddYears(20));&#xA;&#xA;// ArgumentException: Value should not be true (Parameter &#39;isGood&#39;)&#xA;isGood.Throw().IfTrue();&#xA;&#xA;// System.ArgumentException: String should not be empty. (Parameter &#39;name&#39;)&#xA;name.Throw().IfEmpty();&#xA;&#xA;// System.ArgumentOutOfRangeException: Value should not be greater than 0. (Parameter &#39;number&#39;)\n Actual value was 5.&#xA;number.Throw().IfPositive();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. &lt;code&gt;Throw(&#34;My custom message&#34;)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Pass a custom exception message to the &lt;code&gt;Throw()&lt;/code&gt; or &lt;code&gt;ThrowIfNull()&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// System.ArgumentNullException: My custom message (Parameter &#39;nullableValue&#39;)&#xA;nullableValue.ThrowIfNull(&#34;My custom message&#34;);&#xA;&#xA;// System.ArgumentOutOfRangeException: My custom message (Parameter &#39;dateTime&#39;)\n Actual value was 3/1/2022 10:47:15 AM.&#xA;dateTime.Throw(&#34;My custom message&#34;).IfLessThan(DateTime.Now.AddYears(20));&#xA;&#xA;// System.ArgumentException: My custom message (Parameter &#39;isGood&#39;)&#xA;isGood.Throw(&#34;My custom message&#34;).IfTrue();&#xA;&#xA;// System.ArgumentException: My custom message (Parameter &#39;name&#39;)&#xA;name.Throw(&#34;My custom message&#34;).IfEmpty();&#xA;&#xA;// System.ArgumentOutOfRangeException: My custom message (Parameter &#39;number&#39;)\n Actual value was 5.&#xA;number.Throw(&#34;My custom message&#34;).IfPositive();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. &lt;code&gt;Throw(() =&amp;gt; new MyException())&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Pass a custom exception thrower to the &lt;code&gt;Throw()&lt;/code&gt; or &lt;code&gt;ThrowIfNull()&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// MyCustomException: Exception of type &#39;MyCustomException&#39; was thrown.&#xA;nullableValue.ThrowIfNull(() =&amp;gt; throw new MyCustomException());&#xA;&#xA;// MyCustomException: Exception of type &#39;MyCustomException&#39; was thrown.&#xA;dateTime.Throw(() =&amp;gt; throw new MyCustomException()).IfLessThan(DateTime.Now.AddYears(20));&#xA;&#xA;// MyCustomException: Exception of type &#39;MyCustomException&#39; was thrown.&#xA;isGood.Throw(() =&amp;gt; throw new MyCustomException()).IfTrue();&#xA;&#xA;// MyCustomException: Exception of type &#39;MyCustomException&#39; was thrown.&#xA;name.Throw(() =&amp;gt; throw new MyCustomException()).IfEmpty();&#xA;&#xA;// MyCustomException: Exception of type &#39;MyCustomException&#39; was thrown.&#xA;number.Throw(() =&amp;gt; throw new MyCustomException()).IfPositive();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. &lt;code&gt;Throw(paramName =&amp;gt; new MyException($&#34;Param: {paramName}&#34;)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Pass a custom exception thrower to the &lt;code&gt;Throw()&lt;/code&gt; or &lt;code&gt;ThrowIfNull()&lt;/code&gt; method, that takes the parameter name as a parameter&lt;/p&gt; &#xA;&lt;p&gt;This comes in handy in scenarios like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void SendEmail(User user)&#xA;{&#xA;    user.Throw(paramName =&amp;gt; new UserException(message: &#34;Cannot send email since user details are invalid.&#34;, paramName: paramName))&#xA;        .IfWhiteSpace(user =&amp;gt; user.FirstName) // UserException: Cannot send email since user details are invalid. (Parameter &#39;user: user =&amp;gt; user.FirstName&#39;)&#xA;        .IfWhiteSpace(user =&amp;gt; user.LastName) // UserException: Cannot send email since user details are invalid. (Parameter &#39;user: user =&amp;gt; user.LastName&#39;)&#xA;        .IfNull(user =&amp;gt; user.Email) // UserException: Cannot send email since user details are invalid. (Parameter &#39;user: user =&amp;gt; user.Email&#39;)&#xA;        .IfLongerThan(user =&amp;gt; user.Email!, 100); // UserException: Cannot send email since user details are invalid. (Parameter &#39;user: user =&amp;gt; user.Email!&#39;)&#xA;&#xA;    emailService.TrySendEmail(user)&#xA;        .Throw(() =&amp;gt; new EmailException(&#34;Email could not be sent.&#34;))&#xA;        .IfFalse();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// MyCustomException: Param name: nullableValue.&#xA;nullableValue.ThrowIfNull(paramName =&amp;gt; throw new MyCustomException($&#34;Param name: {paramName}.&#34;));&#xA;&#xA;// MyCustomException: Param name: dateTime.&#xA;dateTime.Throw(paramName =&amp;gt; throw new MyCustomException($&#34;Param name: {paramName}.&#34;)).IfLessThan(DateTime.Now.AddYears(20));&#xA;&#xA;// MyCustomException: Param name: isGood.&#xA;isGood.Throw(paramName =&amp;gt; throw new MyCustomException($&#34;Param name: {paramName}.&#34;)).IfTrue();&#xA;&#xA;// MyCustomException: Param name: name.&#xA;name.Throw(paramName =&amp;gt; throw new MyCustomException($&#34;Param name: {paramName}.&#34;)).IfEmpty();&#xA;&#xA;// MyCustomException: Param name: number.&#xA;number.Throw(paramName =&amp;gt; throw new MyCustomException($&#34;Param name: {paramName}.&#34;)).IfPositive();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Common types&lt;/h2&gt; &#xA;&lt;h3&gt;Booleans&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;value.Throw().IfTrue(); // ArgumentException: Value should not be true (Parameter &#39;value&#39;)&#xA;value.Throw().IfFalse(); // ArgumentException: Value should be true (Parameter &#39;value&#39;)&#xA;&#xA;// Any method which returns bool can inline it&#39;s exception throwing logic.&#xA;Enum.TryParse(&#34;Unexpected value&#34;, out EmployeeType value)&#xA;    .Throw()&#xA;    .IfFalse(); // System.ArgumentException: Value should be true. (Parameter &#39;Enum.TryParse(&#34;Unexpected value&#34;, out EmployeeType value)&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nullable value types (&lt;code&gt;bool?&lt;/code&gt;, &lt;code&gt;int?&lt;/code&gt;, &lt;code&gt;double?&lt;/code&gt;, &lt;code&gt;DateTime?&lt;/code&gt; etc.)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;bool? value = null;&#xA;&#xA;value.ThrowIfNull(); // ArgumentNullException: Value cannot be null. (Parameter &#39;value&#39;)&#xA;&#xA;// After validating `ThrowIfNull`, any of the regular value type extensions can be used.&#xA;value.ThrowIfNull() // ArgumentNullException: Value cannot be null. (Parameter &#39;value&#39;)&#xA;    .IfTrue(); // ArgumentException: Value should not be true (Parameter &#39;value&#39;)&#xA;&#xA;// The returned value from `ThrowIfNull` can be implicitly cast to the original non-nullable type.&#xA;bool nonNullableValue = value.ThrowIfNull(); // ArgumentNullException: Value cannot be null. (Parameter &#39;value&#39;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Strings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;name.Throw().IfEmpty(); // System.ArgumentException: String should not be empty. (Parameter &#39;name&#39;)&#xA;name.Throw().IfWhiteSpace(); // System.ArgumentException: String should not be white space only. (Parameter &#39;name&#39;)&#xA;name.Throw().IfLengthEquals(7); // System.ArgumentException: String length should not be equal to 7. (Parameter &#39;name&#39;)&#xA;name.Throw().IfLengthNotEquals(10); // System.ArgumentException: String length should be equal to 10. (Parameter &#39;name&#39;)&#xA;name.Throw().IfShorterThan(10); // System.ArgumentException: String should not be shorter than 10 characters. (Parameter &#39;name&#39;)&#xA;name.Throw().IfLongerThan(3); // System.ArgumentException: String should not be longer than 3 characters. (Parameter &#39;name&#39;)&#xA;name.Throw().IfEquals(&#34;Amichai&#34;); // System.ArgumentException: String should not be equal to &#39;Amichai&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfEquals(&#34;Amichai&#34;, StringComparison.InvariantCulture); // System.ArgumentException: String should not be equal to &#39;Amichai&#39; (comparison type: &#39;InvariantCulture&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfEqualsIgnoreCase(&#34;AMICHAI&#34;); // System.ArgumentException: String should not be equal to &#39;AMICHAI&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotEquals(&#34;Dan&#34;); // System.ArgumentException: String should be equal to &#39;Dan&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotEquals(&#34;Dan&#34;, StringComparison.InvariantCultureIgnoreCase); // System.ArgumentException: String should be equal to &#39;Dan&#39; (comparison type: &#39;InvariantCultureIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotEqualsIgnoreCase(&#34;Dan&#34;); // System.ArgumentException: String should be equal to &#39;Dan&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfContains(&#34;substring&#34;); // System.ArgumentException: String should not contain &#39;substring&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfContains(&#34;substring&#34;, ComparisonType.InvariantCulture); // System.ArgumentException: String should contain &#39;substring&#39; (comparison type: &#39;InvariantCulture&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotContains(&#34;substring&#34;); // System.ArgumentException: String should contain &#39;substring&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotContains(&#34;substring&#34;, ComparisonType.InvariantCultureIgnoreCase); // System.ArgumentException: String should contain &#39;substring&#39; (comparison type: &#39;InvariantCultureIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfStartsWith(&#34;Jer&#34;); // System.ArgumentException: String should not start with &#39;Jer&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfStartsWith(&#34;JER&#34;, StringComparison.OrdinalIgnoreCase); // System.ArgumentException: String should not start with &#39;JER&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotStartsWith(&#34;dan&#34;); // System.ArgumentException: String should start with &#39;dan&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotStartsWith(&#34;dan&#34;, StringComparison.InvariantCultureIgnoreCase); // System.ArgumentException: String should start with &#39;dan&#39; (comparison type: &#39;InvariantCultureIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfEndsWith(&#34;emy&#34;); // System.ArgumentException: String should not end with &#39;emy&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfEndsWith(&#34;EMY&#34;, StringComparison.OrdinalIgnoreCase); // System.ArgumentException: String should not end with &#39;EMY&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotEndsWith(&#34;dan&#34;); // System.ArgumentException: String should end with &#39;dan&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotEndsWith(&#34;dan&#34;, StringComparison.OrdinalIgnoreCase); // System.ArgumentException: String should end with &#39;dan&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;name&#39;)&#xA;name.Throw().IfMatches(&#34;J.*y&#34;); // System.ArgumentException: String should not match RegEx pattern &#39;J.*y&#39; (Parameter &#39;name&#39;)&#xA;name.Throw().IfMatches(&#34;[a-z]{0,10}&#34;, RegexOptions.IgnoreCase); // System.ArgumentException: String should not match RegEx pattern &#39;[a-z]{0,10}&#39; (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotMatches(&#34;^[0-9]+$&#34;); // System.ArgumentException: String should match RegEx pattern &#39;^[0-9]+$&#39; (Parameter &#39;name&#39;)&#xA;name.Throw().IfNotMatches(&#34;abc &#34;, RegexOptions.IgnorePatternWhitespace); // System.ArgumentException: String should match RegEx pattern &#39;^[0-9]+$&#39; (Parameter &#39;name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collections (&lt;code&gt;IEnumerable&lt;/code&gt;, &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ICollection&lt;/code&gt;, &lt;code&gt;ICollection&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;IList&lt;/code&gt;, etc.)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Important note: if the collection is a non-evaluated expression, the expression will be evaluated.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;collection.Throw().IfHasNullElements(); // System.ArgumentException: Collection should not have null elements. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfEmpty(); // System.ArgumentException: Collection should not be empty. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfNotEmpty(); // System.ArgumentException: Collection should be empty. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfCountLessThan(5); // System.ArgumentException: Collection count should not be less than 5. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfCountGreaterThan(1); // System.ArgumentException: Collection count should not be greater than 1. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfCountEquals(0); // System.ArgumentException: Collection count should not be equal to 0. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfCountNotEquals(0); // System.ArgumentException: Collection count should be equal to 0. (Parameter &#39;collection&#39;)&#xA;collection.Throw().IfContains(&#34;value&#34;); // System.ArgumentException: Collection should not contain element. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;collection.Throw().IfNotContains(&#34;value&#34;); // System.ArgumentException: Collection should contain element. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DateTime&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;dateTime.Throw().IfUtc(); // System.ArgumentException: Value should not be Utc. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfNotUtc(); // System.ArgumentException: Value should be Utc. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfDateTimeKind(DateTimeKind.Unspecified); // System.ArgumentException: Value should not be Unspecified. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfDateTimeKindNot(DateTimeKind.Local); // System.ArgumentException: Value should be Local. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfGreaterThan(DateTime.Now.AddYears(-20)); // System.ArgumentOutOfRangeException: Value should not be greater than 2/28/2002 4:41:19 PM. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfLessThan(DateTime.Now.AddYears(20)); // System.ArgumentOutOfRangeException: Value should not be less than 2/28/2042 4:41:46 PM. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfEquals(other); // System.ArgumentException: Value should not be equal to 2/28/2022 4:44:39 PM. (Parameter &#39;dateTime&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enums&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;employeeType.Throw().IfOutOfRange(); // System.ArgumentOutOfRangeException: Value should be defined in enum. (Parameter &#39;employeeType&#39;)&#xA;employeeType.Throw().IfEquals(EmployeeType.FullTime); // System.ArgumentException: Value should not be equal to FullTime. (Parameter &#39;employeeType&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Equalities (non-nullables)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;dateTime.Throw().IfDefault(); // System.ArgumentException: Value should not be default. (Parameter &#39;dateTime&#39;)&#xA;dateTime.Throw().IfNotDefault(); // System.ArgumentException: Value should be default. (Parameter &#39;dateTime&#39;)&#xA;number.Throw().IfEquals(5); // System.ArgumentException: Value should not be not be equal to 5. (Parameter &#39;number&#39;)&#xA;number.Throw().IfNotEquals(3); // System.ArgumentException: Value should be equal to 3. (Parameter &#39;number&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uris&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;uri.Throw().IfHttps(); // System.ArgumentException: Uri scheme should not be https. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfNotHttps(); // System.ArgumentException: Uri scheme should be https. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfHttp(); // System.ArgumentException: Uri scheme should not be http. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfNotHttp(); // System.ArgumentException: Uri scheme should be http. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfScheme(Uri.UriSchemeHttp); // System.ArgumentException: Uri scheme should not be http. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfSchemeNot(Uri.UriSchemeFtp); // System.ArgumentException: Uri scheme should be ftp. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfPort(800); // System.ArgumentException: Uri port should not be 80. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfPortNot(8080); // System.ArgumentException: Uri port should be 8080. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfAbsolute(); // System.ArgumentException: Uri should be relative. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfRelative(); // System.ArgumentException: Uri should be absolute. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfNotAbsolute(); // System.ArgumentException: Uri should be absolute. (Parameter &#39;uri&#39;)&#xA;uri.Throw().IfNotRelative(); // System.ArgumentException: Uri should be relative. (Parameter &#39;uri&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparable (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;DateOnly&lt;/code&gt;, &lt;code&gt;TimeOnly&lt;/code&gt; etc.)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;number.Throw().IfPositive(); // System.ArgumentOutOfRangeException: Value should not be greater than 0. (Parameter &#39;number&#39;)\n Actual value was 5.&#xA;number.Throw().IfNegative(); // System.ArgumentOutOfRangeException: Value should not be less than 0. (Parameter &#39;number&#39;)\n Actual value was -5.&#xA;number.Throw().IfLessThan(10); // System.ArgumentOutOfRangeException: Value should not be less than 10. (Parameter &#39;number&#39;)\n Actual value was 5.&#xA;number.Throw().IfGreaterThan(3); // System.ArgumentOutOfRangeException: Value should not be greater than 3. (Parameter &#39;number&#39;)\n Actual value was 5.&#xA;number.Throw().IfOutOfRange(0, 5); // System.ArgumentOutOfRangeException: Value should be between 0 and 5. (Parameter &#39;number&#39;)\n Actual value was -5.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nested properties&lt;/h2&gt; &#xA;&lt;h3&gt;Boolean properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfTrue(p =&amp;gt; p.IsFunny); // System.ArgumentException: Value should not meet condition (condition: &#39;person =&amp;gt; person.IsFunny&#39;). (Parameter &#39;person&#39;)&#xA;person.Throw().IfFalse(p =&amp;gt; p.IsFunny); // System.ArgumentException: Value should meet condition (condition: &#39;person =&amp;gt; person.IsFunny&#39;). (Parameter &#39;person&#39;)&#xA;&#xA;// We can inline the exception throwing logic with the method call.&#xA;Person person = GetPerson().Throw().IfTrue(person =&amp;gt; person.Age &amp;lt; 18); // System.ArgumentException: Value should not meet condition (condition: &#39;person =&amp;gt; person.Age &amp;lt; 18&#39;). (Parameter &#39;GetPerson()&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfEmpty(p =&amp;gt; p.Name); // System.ArgumentException: String should not be empty. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfWhiteSpace(p =&amp;gt; p.Name); // System.ArgumentException: String should not be white space only. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNullOrWhiteSpace(p =&amp;gt; p.Name); // System.ArgumentException: String should not be null or whitespace. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNullOrEmpty(p =&amp;gt; p.Name); // System.ArgumentException: String should not be null or empty. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfLengthEquals(p =&amp;gt; p.Name, 7); // System.ArgumentException: String length should not be equal to 7. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfLengthNotEquals(p =&amp;gt; p.Name, 10); // System.ArgumentException: String length should be equal to 10. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfShorterThan(p =&amp;gt; p.Name, 10); // System.ArgumentException: String should not be shorter than 10 characters. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfLongerThan(p =&amp;gt; p.Name, 3); // System.ArgumentException: String should not be longer than 3 characters. (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfEquals(p =&amp;gt; p.Name, &#34;Amichai&#34;); // System.ArgumentException: String should not be equal to &#39;Amichai&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfEquals(p =&amp;gt; p.Name, &#34;Amichai&#34;, StringComparison.InvariantCulture); // System.ArgumentException: String should not be equal to &#39;Amichai&#39; (comparison type: &#39;InvariantCulture&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfEqualsIgnoreCase(p =&amp;gt; p.Name, &#34;AMICHAI&#34;); // System.ArgumentException: String should not be equal to &#39;AMICHAI&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotEquals(p =&amp;gt; p.Name, &#34;Dan&#34;); // System.ArgumentException: String should be equal to &#39;Dan&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotEquals(p =&amp;gt; p.Name, &#34;Dan&#34;, StringComparison.InvariantCultureIgnoreCase); // System.ArgumentException: String should be equal to &#39;Dan&#39; (comparison type: &#39;InvariantCultureIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotEqualsIgnoreCase(p =&amp;gt; p.Name, &#34;Dan&#34;); // System.ArgumentException: String should be equal to &#39;Dan&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfContains(p =&amp;gt; p.Name, &#34;substring&#34;); // System.ArgumentException: String should not contain &#39;substring&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfContains(p =&amp;gt; p.Name, &#34;substring&#34;, ComparisonType.InvariantCulture); // System.ArgumentException: String should contain &#39;substring&#39; (comparison type: &#39;InvariantCulture&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotContains(p =&amp;gt; p.Name, &#34;substring&#34;); // System.ArgumentException: String should contain &#39;substring&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotContains(p =&amp;gt; p.Name, &#34;substring&#34;, ComparisonType.InvariantCultureIgnoreCase); // System.ArgumentException: String should contain &#39;substring&#39; (comparison type: &#39;InvariantCultureIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfStartsWith(p =&amp;gt; p.Name, &#34;Jer&#34;); // System.ArgumentException: String should not start with &#39;Jer&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfStartsWith(p =&amp;gt; p.Name, &#34;JER&#34;, StringComparison.OrdinalIgnoreCase); // System.ArgumentException: String should not start with &#39;JER&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotStartsWith(p =&amp;gt; p.Name, &#34;dan&#34;); // System.ArgumentException: String should start with &#39;dan&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotStartsWith(p =&amp;gt; p.Name, &#34;dan&#34;, StringComparison.InvariantCultureIgnoreCase); // System.ArgumentException: String should start with &#39;dan&#39; (comparison type: &#39;InvariantCultureIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfEndsWith(p =&amp;gt; p.Name, &#34;emy&#34;); // System.ArgumentException: String should not end with &#39;emy&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfEndsWith(p =&amp;gt; p.Name, &#34;EMY&#34;, StringComparison.OrdinalIgnoreCase); // System.ArgumentException: String should not end with &#39;EMY&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotEndsWith(p =&amp;gt; p.Name, &#34;dan&#34;); // System.ArgumentException: String should end with &#39;dan&#39; (comparison type: &#39;Ordinal&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotEndsWith(p =&amp;gt; p.Name, &#34;dan&#34;, StringComparison.OrdinalIgnoreCase); // System.ArgumentException: String should end with &#39;dan&#39; (comparison type: &#39;OrdinalIgnoreCase&#39;). (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfMatches(p =&amp;gt; p.Name, &#34;J.*y&#34;); // System.ArgumentException: String should not match RegEx pattern &#39;J.*y&#39; (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfMatches(p =&amp;gt; p.Name, &#34;[a-z]{0,10}&#34;, RegexOptions.IgnoreCase); // System.ArgumentException: String should not match RegEx pattern &#39;[a-z]{0,10}&#39; (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotMatches(p =&amp;gt; p.Name, &#34;^[0-9]+$&#34;); // System.ArgumentException: String should match RegEx pattern &#39;^[0-9]+$&#39; (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;person.Throw().IfNotMatches(p =&amp;gt; p.Name, &#34;abc &#34;, RegexOptions.IgnorePatternWhitespace); // System.ArgumentException: String should match RegEx pattern &#39;^[0-9]+$&#39; (Parameter &#39;person: p =&amp;gt; p.Name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collection properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfHasNullElements(p =&amp;gt; p.Friends); // System.ArgumentException: Collection should not have null elements. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfEmpty(p =&amp;gt; p.Friends); // System.ArgumentException: Collection should not be empty. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfNotEmpty(p =&amp;gt; p.Friends); // System.ArgumentException: Collection should be empty. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfCountLessThan(p =&amp;gt; p.Friends, 5); // System.ArgumentException: Collection count should not be less than 5. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfCountGreaterThan(p =&amp;gt; p.Friends, 1); // System.ArgumentException: Collection count should not be greater than 1. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfCountEquals(p =&amp;gt; p.Friends, 0); // System.ArgumentException: Collection count should not be equal to 0. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfCountNotEquals(p =&amp;gt; p.Friends, 0); // System.ArgumentException: Collection count should be equal to 0. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfContains(p =&amp;gt; p.Friends, &#34;Amichai&#34;); // System.ArgumentException: Collection should not contain element. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;person.Throw().IfNotContains(p =&amp;gt; p.Friends, &#34;Amichai&#34;); // System.ArgumentException: Collection should contain element. (Parameter &#39;person: p =&amp;gt; p.Friends&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DateTime properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfUtc(p =&amp;gt; p.DateOfBirth); // System.ArgumentException: Value should not be Utc. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfNotUtc(p =&amp;gt; p.DateOfBirth); // System.ArgumentException: Value should be Utc. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfDateTimeKind(p =&amp;gt; p.DateOfBirth, DateTimeKind.Unspecified); // System.ArgumentException: Value should not be Unspecified. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfDateTimeKindNot(p =&amp;gt; p.DateOfBirth, DateTimeKind.Local); // System.ArgumentException: Value should be Local. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfGreaterThan(p =&amp;gt; p.DateOfBirth, DateTime.Now.AddYears(-20)); // System.ArgumentOutOfRangeException: Value should not be greater than 2/28/2002 4:41:19 PM. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfLessThan(p =&amp;gt; p.DateOfBirth, DateTime.Now.AddYears(20)); // System.ArgumentOutOfRangeException: Value should not be less than 2/28/2042 4:41:46 PM. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfEquals(p =&amp;gt; p.DateOfBirth, other); // System.ArgumentException: Value should not be equal to 2/28/2022 4:45:12 PM. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enum properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfOutOfRange(p =&amp;gt; p.EmployeeType); // System.ArgumentOutOfRangeException: Value should be defined in enum. (Parameter &#39;person: p =&amp;gt; p.EmployeeType&#39;)&#xA;person.Throw().IfEquals(p =&amp;gt; p.EmployeeType, EmployeeType.FullTime); // System.ArgumentException: Value should not be equal to FullTime. (Parameter &#39;person: p =&amp;gt; p.EmployeeType&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;property equalities&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfDefault(p =&amp;gt; p.DateOfBirth); // System.ArgumentException: Value should not be default. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfNotDefault(p =&amp;gt; p.DateOfBirth); // System.ArgumentException: Value should be default. (Parameter &#39;person: p =&amp;gt; p.DateOfBirth&#39;)&#xA;person.Throw().IfNull(p =&amp;gt; p.MiddleName); // System.ArgumentNullException: Value cannot be null. (Parameter &#39;person: p =&amp;gt; p.MiddleName&#39;)&#xA;person.Throw().IfNotNull(p =&amp;gt; p.MiddleName); // System.ArgumentException: Value should be null. (Parameter &#39;person: p =&amp;gt; p.MiddleName&#39;)&#xA;person.Throw().IfEquals(p =&amp;gt; p.Age, 5); // System.ArgumentException: Value should not be not be equal to 5. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)&#xA;person.Throw().IfNotEquals(p =&amp;gt; p.Age, 3); // System.ArgumentException: Value should be equal to 3. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uri properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfHttps(p =&amp;gt; p.Website); // System.ArgumentException: Uri scheme should not be https. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfNotHttps(p =&amp;gt; p.Website); // System.ArgumentException: Uri scheme should be https. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfHttp(p =&amp;gt; p.Website); // System.ArgumentException: Uri scheme should not be http. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfNotHttp(p =&amp;gt; p.Website); // System.ArgumentException: Uri scheme should be http. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfScheme(p =&amp;gt; p.Website, Uri.UriSchemeHttp); // System.ArgumentException: Uri scheme should not be http. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfSchemeNot(p =&amp;gt; p.Website, Uri.UriSchemeFtp); // System.ArgumentException: Uri scheme should be ftp. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfPort(p =&amp;gt; p.Website, 800); // System.ArgumentException: Uri port should not be 80. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfPortNot(p =&amp;gt; p.Website, 8080); // System.ArgumentException: Uri port should be 8080. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfAbsolute(p =&amp;gt; p.Website); // System.ArgumentException: Uri should be relative. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfRelative(p =&amp;gt; p.Website); // System.ArgumentException: Uri should be absolute. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfNotAbsolute(p =&amp;gt; p.Website); // System.ArgumentException: Uri should be absolute. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;person.Throw().IfNotRelative(p =&amp;gt; p.Website); // System.ArgumentException: Uri should be relative. (Parameter &#39;person: p =&amp;gt; p.Website&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Comparable properties&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;person.Throw().IfPositive(p =&amp;gt; p.Age); // System.ArgumentOutOfRangeException: Value should not be greater than 0. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)\n Actual value was 5.&#xA;person.Throw().IfNegative(p =&amp;gt; p.Age); // System.ArgumentOutOfRangeException: Value should not be less than 0. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)\n Actual value was -5.&#xA;person.Throw().IfLessThan(p =&amp;gt; p.Age, 10); // System.ArgumentOutOfRangeException: Value should not be less than 10. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)\n Actual value was 5.&#xA;person.Throw().IfGreaterThan(p =&amp;gt; p.Age, 3); // System.ArgumentOutOfRangeException: Value should not be greater than 3. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)\n Actual value was 5.&#xA;person.Throw().IfOutOfRange(p =&amp;gt; p.Age, 0, 5); // System.ArgumentOutOfRangeException: Value should be between 0 and 5. (Parameter &#39;person: p =&amp;gt; p.Age&#39;)\n Actual value was -5.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Extensibility&lt;/h1&gt; &#xA;&lt;p&gt;You can easily extend the library by adding your own rules.&lt;/p&gt; &#xA;&lt;p&gt;Here is a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#34;foo&#34;.Throw().IfFoo(); // System.ArgumentException: String shouldn&#39;t equal &#39;foo&#39; (Parameter &#39;&#34;foo&#34;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;namespace Throw&#xA;{&#xA;    public static class ValidatableExtensions&#xA;    {&#xA;        public static ref readonly Validatable&amp;lt;string&amp;gt; IfFoo(this in Validatable&amp;lt;string&amp;gt; validatable)&#xA;        {&#xA;            if (string.Equals(validatable.Value, &#34;foo&#34;, StringComparison.OrdinalIgnoreCase))&#xA;            {&#xA;                throw new ArgumentException(&#34;String shouldn&#39;t equal &#39;foo&#39;&#34;, validatable.ParamName);&#xA;            }&#xA;&#xA;            return ref validatable;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;user.Throw().IfUsesFacebookOnChrome();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;namespace Throw&#xA;{&#xA;    public static class ValidatableExtensions&#xA;    {&#xA;        public static ref readonly Validatable&amp;lt;User&amp;gt; IfUsesFacebookOnChrome(this in Validatable&amp;lt;User&amp;gt; validatable)&#xA;        {&#xA;            if (validatable.Value.FavoriteBrowser == Browser.Chrome &amp;amp;&amp;amp; validatable.Value.FavoriteWebsite == new Uri(&#34;https://facebook.com&#34;))&#xA;            {&#xA;                throw new UserException(&#34;User shouldn&#39;t use Facebook on Chrome!&#34;);&#xA;            }&#xA;&#xA;            return ref validatable;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the exception customizations in your extension. You can use the &lt;code&gt;ExceptionThrower&lt;/code&gt; class which knows how to create the appropriate exception based on the customizations. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;namespace Throw&#xA;{&#xA;    public static class ValidatableExtensions&#xA;    {&#xA;        public static ref readonly Validatable&amp;lt;User&amp;gt; IfUsesFacebookOnChrome(this in Validatable&amp;lt;User&amp;gt; validatable)&#xA;        {&#xA;            if (validatable.Value.FavoriteBrowser == Browser.Chrome &amp;amp;&amp;amp; validatable.Value.FavoriteWebsite == new Uri(&#34;https://facebook.com&#34;))&#xA;            {&#xA;                ExceptionThrower.Throw(validatable.ParamName, validatable.ExceptionCustomizations, &#34;User shouldn&#39;t be using Facebook on Chrome.&#34;);&#xA;            }&#xA;&#xA;            return ref validatable;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will behave as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;user.Throw()&#xA;    .IfUsesFacebookOnChrome(); // System.ArgumentException: User shouldn&#39;t be using Facebook on Chrome. (Parameter &#39;user&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;user.Throw(&#34;A different message.&#34;)&#xA;    .IfUsesFacebookOnChrome(); // System.ArgumentException: A different message. (Parameter &#39;user&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;user.Throw(() =&amp;gt; new Exception(&#34;A different exception.&#34;))&#xA;    .IfUsesFacebookOnChrome(); // System.Exception: A different exception.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;user.Throw(paramName =&amp;gt; new Exception($&#34;A different exception. Param name: &#39;{paramName}&#39;&#34;))&#xA;    .IfUsesFacebookOnChrome(); // System.Exception: A different exception. Param name: &#39;user&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Conditional compilation&lt;/h1&gt; &#xA;&lt;p&gt;Have a &lt;code&gt;Throw()&lt;/code&gt; rule that you want to exclude from your release build? Simply add &lt;code&gt;OnlyInDebug()&lt;/code&gt; to the rule and it will be excluded from non-debug builds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#34;foo&#34;.Throw().IfEquals(&#34;foo&#34;).OnlyInDebug();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet run -c Debug # will throw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet run -c Release # won&#39;t throw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Upcoming features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More extension methods: Many more rules to come! Please contribute!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are super welcome! Take a look at the open issues, there are multiple features waiting to be implemented! Please go ahead and open an issue with any idea, bug, or feature request.&lt;/p&gt; &#xA;&lt;p&gt;We are trying to be the fastest validation library, so if you have any suggestions on how to improve the runtime speed, share them with us.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/safakgur/guard&#34;&gt;Dawn.Guard&lt;/a&gt; - An awesome, fast, and intuitive guard clause library for C#. Was a great inspiration for this library.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the &lt;a href=&#34;https://github.com/mantinband/github-contribution-art/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MudBlazor/MudBlazor</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/MudBlazor/MudBlazor</id>
    <link href="https://github.com/MudBlazor/MudBlazor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazor Component Library based on Material design. The goal is to do more with Blazor, utilizing CSS and keeping Javascript to a bare minimum.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MudBlazor/MudBlazor/dev/content/MudBlazor-GitHub-NoBg.png&#34; alt=&#34;MudBlazor&#34;&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;Material Design components for Blazor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/mudblazor/mudblazor/dev-ci?event=push&amp;amp;label=dev-ci&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub Workflow Status (event)&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/MudBlazor/MudBlazor?logo=codecov&amp;amp;logoColor=white&amp;amp;style=flat-square&amp;amp;token=4BBNQPPATD&#34; alt=&#34;Codecov&#34;&gt; &lt;a href=&#34;https://github.com/mudblazor/MudBlazor/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mudblazor/mudblazor?color=594ae2&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mudblazor/MudBlazor/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/mudblazor/mudblazor?color=594ae2&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mudblazor/mudblazor&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/mudblazor/mudblazor?color=594ae2&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mudblazor/mudblazor/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/mudblazor/mudblazor?color=594ae2&amp;amp;style=flat-square&amp;amp;logo=github&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mudblazor/mudblazor/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/mudblazor/mudblazor?color=594ae2&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/mudblazor&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/786656789310865418?color=%237289da&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=%237289da&amp;amp;style=flat-square&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/MudBlazor&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/MudBlazor?color=1DA1F2&amp;amp;label=Twitter&amp;amp;logo=Twitter&amp;amp;style=flat-square&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/MudBlazor/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/MudBlazor?color=ff4081&amp;amp;label=nuget%20version&amp;amp;logo=nuget&amp;amp;style=flat-square&#34; alt=&#34;Nuget version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/MudBlazor/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/MudBlazor?color=ff4081&amp;amp;label=nuget%20downloads&amp;amp;logo=nuget&amp;amp;style=flat-square&#34; alt=&#34;Nuget downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MudBlazor is an ambitious Material Design component framework for Blazor with an emphasis on ease of use and clear structure. It is perfect for .NET developers who want to rapidly build web applications without having to struggle with CSS and Javascript. MudBlazor, being written entirely in C#, empowers you to adapt, fix or extend the framework. There are plenty of examples in the documentation, which makes understanding and learning MudBlazor very easy.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mudblazor.com&#34;&gt;MudBlazor.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://try.mudblazor.com/&#34;&gt;Try.MudBlazor.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why is MudBlazor so successful?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean and aesthetic graphic design based on Material Design.&lt;/li&gt; &#xA; &lt;li&gt;Clear and easy to understand structure.&lt;/li&gt; &#xA; &lt;li&gt;Good documentation with many examples and source snippets.&lt;/li&gt; &#xA; &lt;li&gt;All components are written entirely in C#, no JavaScript allowed (except where absolutely necessary).&lt;/li&gt; &#xA; &lt;li&gt;Users can make beautiful apps without needing CSS (but they can of course use CSS too).&lt;/li&gt; &#xA; &lt;li&gt;No dependencies on other component libraries, 100% control over components and features.&lt;/li&gt; &#xA; &lt;li&gt;Stability! We strive for a complete test coverage.&lt;/li&gt; &#xA; &lt;li&gt;Releasing often so developers can get their PRs and fixes in a timely fashion.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET 6.0&lt;/a&gt; for v6.x.x or &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/5.0&#34;&gt;.NET 5.0&lt;/a&gt; for v5.x.x (legacy)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/db53a44092e88fc34a4c0f37db12773b6787ec7e.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/MudBlazor/MudBlazor/dev/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; if you want to help improve MudBlazor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full installation instructions can be found at &lt;a href=&#34;https://mudblazor.com/getting-started/installation&#34;&gt;mudblazor.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alternatively use one of our templates from the &lt;a href=&#34;https://github.com/mudblazor/Templates&#34;&gt;MudBlazor.Templates&lt;/a&gt; repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Installation Guide&lt;/h3&gt; &#xA;&lt;p&gt;Install Package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package MudBlazor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;_Imports.razor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-razor&#34;&gt;@using MudBlazor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to the &lt;code&gt;MainLayout.razor&lt;/code&gt; or &lt;code&gt;App.razor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-razor&#34;&gt;&amp;lt;MudThemeProvider/&amp;gt;&#xA;&amp;lt;MudDialogProvider/&amp;gt;&#xA;&amp;lt;MudSnackbarProvider/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;index.html&lt;/code&gt; (client-side) or &lt;code&gt;_Host.cshtml&lt;/code&gt; (server-side) in the &lt;code&gt;head&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-razor&#34;&gt;&amp;lt;link href=&#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap&#34; rel=&#34;stylesheet&#34; /&amp;gt;&#xA;&amp;lt;link href=&#34;_content/MudBlazor/MudBlazor.min.css&#34; rel=&#34;stylesheet&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to &lt;code&gt;index.html&lt;/code&gt; or &lt;code&gt;_Host.cshtml&lt;/code&gt; in the &lt;code&gt;body&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-razor&#34;&gt;&amp;lt;script src=&#34;_content/MudBlazor/MudBlazor.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following to the relevant sections of &lt;code&gt;Program.cs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using MudBlazor.Services;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;builder.Services.AddMudServices();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-razor&#34;&gt;&amp;lt;MudText Typo=&#34;Typo.h6&#34;&amp;gt;MudBlazor is @Text&amp;lt;/MudText&amp;gt;&#xA;&amp;lt;MudButton Variant=&#34;Variant.Filled&#34; Color=&#34;Color.Primary&#34; OnClick=&#34;ButtonOnClick&#34;&amp;gt;@ButtonText&amp;lt;/MudButton&amp;gt;&#xA;&#xA;@code {&#xA;  public string Text { get; set; } = &#34;????&#34;;&#xA;  public string ButtonText { get; set; } = &#34;Click Me&#34;;&#xA;  public int ButtonClicked { get; set; }&#xA;&#xA;  void ButtonOnClick()&#xA;  {&#xA;      ButtonClicked += 1;&#xA;      Text = $&#34;Awesome x {ButtonClicked}&#34;;&#xA;      ButtonText = &#34;Click Me Again&#34;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mxgmn/WaveFunctionCollapse</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/mxgmn/WaveFunctionCollapse</id>
    <link href="https://github.com/mxgmn/WaveFunctionCollapse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bitmap &amp; tilemap generation from a single example with the help of ideas from quantum mechanics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WaveFunctionCollapse&lt;/h1&gt; &#xA;&lt;p&gt;This program generates bitmaps that are locally similar to the input bitmap.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;main collage&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/wfc.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;main gif&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/wfc.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Local similarity means that&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(C1) The output should contain only those NxN patterns of pixels that are present in the input.&lt;/li&gt; &#xA; &lt;li&gt;(Weak C2) Distribution of NxN patterns in the input should be similar to the distribution of NxN patterns over a sufficiently large number of outputs. In other words, probability to meet a particular pattern in the output should be close to the density of such patterns in the input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the examples a typical value of N is 3.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;local similarity&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/patterns.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;WFC initializes output bitmap in a completely unobserved state, where each pixel value is in superposition of colors of the input bitmap (so if the input was black &amp;amp; white then the unobserved states are shown in different shades of grey). The coefficients in these superpositions are real numbers, not complex numbers, so it doesn&#39;t do the actual quantum mechanics, but it was inspired by QM. Then the program goes into the observation-propagation cycle:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On each observation step an NxN region is chosen among the unobserved which has the lowest Shannon entropy. This region&#39;s state then collapses into a definite state according to its coefficients and the distribution of NxN patterns in the input.&lt;/li&gt; &#xA; &lt;li&gt;On each propagation step new information gained from the collapse on the previous step propagates through the output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On each step the number of non-zero coefficients decreases and in the end we have a completely observed state, the wave function has collapsed.&lt;/p&gt; &#xA;&lt;p&gt;It may happen that during propagation all the coefficients for a certain pixel become zero. That means that the algorithm has run into a contradiction and can not continue. The problem of determining whether a certain bitmap allows other nontrivial bitmaps satisfying condition (C1) is NP-hard, so it&#39;s impossible to create a fast solution that always finishes. In practice, however, the algorithm runs into contradictions surprisingly rarely.&lt;/p&gt; &#xA;&lt;p&gt;Wave Function Collapse algorithm has been implemented in &lt;a href=&#34;https://github.com/math-fehr/fast-wfc&#34;&gt;C++&lt;/a&gt;, &lt;a href=&#34;https://github.com/ikarth/wfc_2019f&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/j-roskopf/WFC&#34;&gt;Kotlin&lt;/a&gt;, &lt;a href=&#34;https://github.com/sdleffler/collapse&#34;&gt;Rust&lt;/a&gt;, &lt;a href=&#34;https://github.com/roberthoenig/WaveFunctionCollapse.jl&#34;&gt;Julia&lt;/a&gt;, &lt;a href=&#34;https://github.com/shawnridgeway/wfc&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://github.com/Mitim-84/WFC-Gen&#34;&gt;Haxe&lt;/a&gt;, &lt;a href=&#34;https://github.com/sjcasey21/wavefunctioncollapse&#34;&gt;Java&lt;/a&gt;, &lt;a href=&#34;https://github.com/sjcasey21/wavefunctioncollapse-clj&#34;&gt;Clojure&lt;/a&gt;, &lt;a href=&#34;https://github.com/kchapelier/wavefunctioncollapse&#34;&gt;JavaScript&lt;/a&gt; and adapted to &lt;a href=&#34;https://selfsame.itch.io/unitywfc&#34;&gt;Unity&lt;/a&gt;, &lt;a href=&#34;https://docs.unrealengine.com/5.0/en-US/BlueprintAPI/WaveFunctionCollapse/&#34;&gt;Unreal Engine 5&lt;/a&gt; and &lt;a href=&#34;https://www.sidefx.com/tutorials/wfc-dungeon-generator/&#34;&gt;Houdini&lt;/a&gt;. You can download official executables from &lt;a href=&#34;https://exutumno.itch.io/wavefunctioncollapse&#34;&gt;itch.io&lt;/a&gt; or &lt;a href=&#34;http://www.kchapelier.com/wfc-example/overlapping-model.html&#34;&gt;run it in the browser&lt;/a&gt;. WFC generates levels in &lt;a href=&#34;https://www.badnorth.com/&#34;&gt;Bad North&lt;/a&gt;, &lt;a href=&#34;https://store.steampowered.com/app/333640/Caves_of_Qud/&#34;&gt;Caves of Qud&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/deadstaticdrive&#34;&gt;Dead Static Drive&lt;/a&gt;, &lt;a href=&#34;https://store.steampowered.com/app/1291340/Townscaper/&#34;&gt;Townscaper&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=usJrcwN6T4I&#34;&gt;Matrix Awakens&lt;/a&gt;, &lt;a href=&#34;https://arcadia-clojure.itch.io/proc-skater-2016&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://arcadia-clojure.itch.io/swapland&#34;&gt;smaller&lt;/a&gt; &lt;a href=&#34;https://marian42.itch.io/wfc&#34;&gt;games&lt;/a&gt; and many prototypes. It led to &lt;a href=&#34;https://escholarship.org/uc/item/3rm1w0mn&#34;&gt;new&lt;/a&gt; &lt;a href=&#34;https://hal.inria.fr/hal-01706539v3/document&#34;&gt;research&lt;/a&gt;. For &lt;a href=&#34;https://twitter.com/OskSta/status/784847588893814785&#34;&gt;more&lt;/a&gt; &lt;a href=&#34;https://twitter.com/dwtw/status/810166761270243328&#34;&gt;related&lt;/a&gt; &lt;a href=&#34;https://github.com/mewo2/oisin&#34;&gt;work&lt;/a&gt;, &lt;a href=&#34;https://trasevol.dog/2017/09/01/di19/&#34;&gt;explanations&lt;/a&gt;, &lt;a href=&#34;http://oskarstalberg.com/game/wave/wave.html&#34;&gt;interactive demos&lt;/a&gt;, &lt;a href=&#34;https://www.dropbox.com/s/zeiat1w8zre9ro8/Knots%20breakdown.png?dl=0&#34;&gt;guides&lt;/a&gt;, &lt;a href=&#34;http://www.procjam.com/tutorials/wfc/&#34;&gt;tutorials&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/ExUtumno/status/895684431477747715&#34;&gt;examples&lt;/a&gt; see the &lt;a href=&#34;https://github.com/mxgmn/WaveFunctionCollapse#notable-ports-forks-and-spinoffs&#34;&gt;ports, forks and spinoffs section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Watch a video demonstration of WFC algorithm on YouTube: &lt;a href=&#34;https://youtu.be/DOQTr2Xmlz0&#34;&gt;https://youtu.be/DOQTr2Xmlz0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Algorithm&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read the input bitmap and count NxN patterns. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;(optional) Augment pattern data with rotations and reflections.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create an array with the dimensions of the output (called &#34;wave&#34; in the source). Each element of this array represents a state of an NxN region in the output. A state of an NxN region is a superposition of NxN patterns of the input with boolean coefficients (so a state of a pixel in the output is a superposition of input colors with real coefficients). False coefficient means that the corresponding pattern is forbidden, true coefficient means that the corresponding pattern is not yet forbidden.&lt;/li&gt; &#xA; &lt;li&gt;Initialize the wave in the completely unobserved state, i.e. with all the boolean coefficients being true.&lt;/li&gt; &#xA; &lt;li&gt;Repeat the following steps: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Observation: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Find a wave element with the minimal nonzero entropy. If there is no such elements (if all elements have zero or undefined entropy) then break the cycle (4) and go to step (5).&lt;/li&gt; &#xA;     &lt;li&gt;Collapse this element into a definite state according to its coefficients and the distribution of NxN patterns in the input.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Propagation: propagate information gained on the previous observation step.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;By now all the wave elements are either in a completely observed state (all the coefficients except one being zero) or in the contradictory state (all the coefficients being zero). In the first case return the output. In the second case finish the work without returning anything.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tilemap generation&lt;/h2&gt; &#xA;&lt;p&gt;The simplest nontrivial case of the algorithm is when NxN=1x2 (well, NxM). If we simplify it even further by storing not the probabilities of pairs of colors but the probabilities of colors themselves, we get what we call a &#34;simple tiled model&#34;. The propagation phase in this model is just adjacency constraint propagation. It&#39;s convenient to initialize the simple tiled model with a list of tiles and their adjacency data (adjacency data can be viewed as a large set of very small samples) rather than a sample bitmap.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/tile.gif&#34;&gt;GIF&lt;/a&gt; | &lt;a href=&#34;http://i.imgur.com/jIctSoT.gifv&#34;&gt;GIFV&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Lists of all the possible pairs of adjacent tiles in practical tilesets can be quite long, so I implemented a symmetry system for tiles to shorten the enumeration. In this system each tile should be assigned with its symmetry type.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;symmetries&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/symmetry-system.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the tiles have the same symmetry type as their assigned letters (or, in other words, actions of the dihedral group D4 are isomorphic for tiles and their corresponding letters). With this system it&#39;s enough to enumerate pairs of adjacent tiles only up to symmetry, which makes lists of adjacencies for tilesets with many symmetrical tiles (even the summer tileset, despite drawings not being symmetrical the system considers such tiles to be symmetrical) several times shorter.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;knots&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/knots.png&#34;&gt; &lt;img alt=&#34;tiled rooms&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/rooms.png&#34;&gt; &lt;img alt=&#34;circuit 1&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/circuit-1.png&#34;&gt; &lt;img alt=&#34;circuit 2&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/circuit-2.png&#34;&gt; &lt;img alt=&#34;circles&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/circles.png&#34;&gt; &lt;img alt=&#34;castle&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/castle.png&#34;&gt; &lt;img alt=&#34;summer 1&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/summer-1.png&#34;&gt; &lt;img alt=&#34;summer 2&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/summer-2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Note that the unrestrained knot tileset (with all 5 tiles being allowed) is not interesting for WFC, because you can&#39;t run into a situation where you can&#39;t place a tile. We call tilesets with this property &#34;easy&#34;. Without special heuristics easy tilesets don&#39;t produce interesting global arrangements, because correlations of tiles in easy tilesets quickly fall off with a distance. Many easy tilesets can be found on &lt;a href=&#34;http://cr31.co.uk/stagecast/wang/tiles_e.html&#34;&gt;Guy Walker&#39;s website&lt;/a&gt;. Consider the &#34;Dual&#34; 2-edge tileset there. How can it generate knots (without t-junctions, not easy) while being easy? The answer is, it can only generate a narrow class of knots, it can&#39;t produce an arbitrary knot.&lt;/p&gt; &#xA;&lt;p&gt;Note also that Circuit, Summer and Rooms tilesets are non-Wang. That is, their adjacency data cannot be induced from edge labels. For example, in Circuit two Corners cannot be adjacent, yet they can be connected with a Connection tile, and diagonal tracks cannot change direction.&lt;/p&gt; &#xA;&lt;h2&gt;Higher dimensions&lt;/h2&gt; &#xA;&lt;p&gt;WFC algorithm in higher dimensions works completely the same way as in dimension 2, though performance becomes an issue. These voxel models were generated with N=2 overlapping tiled model using 5x5x5 and 5x5x2 blocks and additional heuristics (height, density, curvature, ...).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;voxels&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/castles-3d.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Higher resolution screenshots: &lt;a href=&#34;http://i.imgur.com/0bsjlBY.png&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://i.imgur.com/GduN0Vr.png&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;http://i.imgur.com/IEOsbIy.png&#34;&gt;3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Voxel models generated with WFC and other algorithms will be in a separate repo.&lt;/p&gt; &#xA;&lt;h2&gt;Constrained synthesis&lt;/h2&gt; &#xA;&lt;p&gt;WFC algorithm supports constraints. Therefore, it can be easily combined with other generative algorithms or with manual creation.&lt;/p&gt; &#xA;&lt;p&gt;Here is WFC autocompleting a level started by a human:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/constrained.gif&#34;&gt;GIF&lt;/a&gt; | &lt;a href=&#34;http://i.imgur.com/X3aNDUv.gifv&#34;&gt;GIFV&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mxgmn/ConvChain&#34;&gt;ConvChain&lt;/a&gt; algorithm satisfies the strong version of the condition (C2): the limit distribution of NxN patterns in the outputs it is producing is exactly the same as the distributions of patterns in the input. However, ConvChain doesn&#39;t satisfy (C1): it often produces noticeable defects. It makes sense to run ConvChain first to get a well-sampled configuration and then run WFC to correct local defects. This is similar to a common strategy in optimization: first run a Monte-Carlo method to find a point close to a global optimum and then run a gradient descent from that point for greater accuracy.&lt;/p&gt; &#xA;&lt;p&gt;P. F. Harrison&#39;s &lt;a href=&#34;https://github.com/mxgmn/TextureSynthesis&#34;&gt;texture synthesis&lt;/a&gt; algorithm is significantly faster than WFC, but it has trouble with long correlations (for example, it&#39;s difficult for this algorithm to synthesize brick wall textures with correctly aligned bricks). But this is exactly where WFC shines, and Harrison&#39;s algorithm supports constraints. It makes sense first to generate a perfect brick wall blueprint with WFC and then run a constrained texture synthesis algorithm on that blueprint.&lt;/p&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;p&gt;Why the minimal entropy heuristic? I noticed that when humans draw something they often follow the &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/lowest-entropy-heuristic.gif&#34;&gt;minimal entropy heuristic&lt;/a&gt; themselves. That&#39;s why the algorithm is so enjoyable to watch.&lt;/p&gt; &#xA;&lt;p&gt;The overlapping model relates to the simple tiled model the same way higher order Markov chains relate to order one Markov chains.&lt;/p&gt; &#xA;&lt;p&gt;WFC&#39;s propagation phase is very similar to the loopy belief propagation algorithm. In fact, I first programmed belief propagation, but then switched to constraint propagation with a saved stationary distribution, because BP is significantly slower without a massive parallelization (on a CPU) and didn&#39;t produce significantly better results in my problems.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &#34;Simple Knot&#34; and &#34;Trick Knot&#34; samples have 3 colors, not 2.&lt;/p&gt; &#xA;&lt;p&gt;One of the dimensions can be time. In particular, d-dimensional WFC captures the behaviour of any (d-1)-dimensional cellular automata.&lt;/p&gt; &#xA;&lt;h2&gt;Used work&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Alexei A. Efros and Thomas K. Leung, &lt;a href=&#34;https://www2.eecs.berkeley.edu/Research/Projects/CS/vision/papers/efros-iccv99.pdf&#34;&gt;Texture Synthesis by Non-parametric Sampling&lt;/a&gt;, 1999. WaveFunctionCollapse is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Texture_synthesis&#34;&gt;texture synthesis&lt;/a&gt; algorithm. Compared to the earlier texture synthesis algorithms, WFC guarantees that the output contains only those NxN patterns that are present in the input. This makes WFC perfect for level generation in games and pixel art, and less suited for large full-color textures.&lt;/li&gt; &#xA; &lt;li&gt;Paul C. Merrell, &lt;a href=&#34;http://graphics.stanford.edu/~pmerrell/thesis.pdf&#34;&gt;Model Synthesis&lt;/a&gt;, 2009. Merrell derives adjacency constraints between tiles from an example model and generates a new larger model with the AC-3 algorithm. We generalize his approach to work with NxN overlapping patterns of tiles instead of individual tiles. This allows to use a single image as the input to the algorithm. By varying N, we can make the output look more like the input or less. We introduce the &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/lowest-entropy-heuristic.gif&#34;&gt;lowest entropy heuristic&lt;/a&gt; that removes the &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/directional-bias.png&#34;&gt;directional bias&lt;/a&gt; in generated results, is defined for irregular grids and is better suited for &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/constrained.gif&#34;&gt;pre-constrained problems&lt;/a&gt;. We implement a tile symmetry system to reduce the sizes of inputs. We visualize partially observed states, either with &lt;a href=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/wfc.gif&#34;&gt;color averaging&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/ExUtumno/status/900395635412787202&#34;&gt;per-voxel voting&lt;/a&gt;. Merrell also introduced a method of incrementally modifying the model in parts to reduce the failure rate (which we don&#39;t use here). Recently the author created a &lt;a href=&#34;https://paulmerrell.org/model-synthesis/&#34;&gt;page&lt;/a&gt; for model synthesis and published &lt;a href=&#34;https://github.com/merrell42/model-synthesis&#34;&gt;code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Alan K. Mackworth, &lt;a href=&#34;https://www.cs.ubc.ca/~mack/Publications/AI77.pdf&#34;&gt;Consistency in Networks of Relations&lt;/a&gt;, 1977. WFC translates a texture synthesis problem into a constraint satisfaction problem. Currently it uses the &lt;a href=&#34;http://www.cs.utah.edu/~tch/CS4300/resources/AC4.pdf&#34;&gt;AC-4 algorithm&lt;/a&gt; by Roger Mohr and Thomas C. Henderson, 1986.&lt;/li&gt; &#xA; &lt;li&gt;Paul F. Harrison, &lt;a href=&#34;http://logarithmic.net/pfh-files/thesis/dissertation.pdf&#34;&gt;Image Texture Tools&lt;/a&gt;, 2005. WFC was also influenced by the declarative texture synthesis chapter of Paul Harrison&#39;s dissertation. The author defines adjacency data of tiles by labeling their borders and uses backtracking search to fill the tilemap. A &lt;a href=&#34;https://logarithmic.net/ghost.xhtml&#34;&gt;demonstration of the algorithm&lt;/a&gt; is available on the web.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;WFC is a console application that depends only on the standard library. Get &lt;a href=&#34;https://www.microsoft.com/net/download&#34;&gt;.NET Core&lt;/a&gt; for Windows, Linux or macOS and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet run --configuration Release WaveFunctionCollapse.csproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, use build instructions from the community for various platforms from the &lt;a href=&#34;https://github.com/mxgmn/WaveFunctionCollapse/issues/3&#34;&gt;relevant issue&lt;/a&gt;. Casey Marshall made a &lt;a href=&#34;https://github.com/mxgmn/WaveFunctionCollapse/pull/18&#34;&gt;pull request&lt;/a&gt; that makes using the program with the command line more convenient and includes snap packaging.&lt;/p&gt; &#xA;&lt;h2&gt;Notable ports, forks and spinoffs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emil Ernerfeldt made a &lt;a href=&#34;https://github.com/emilk/wfc&#34;&gt;C++ port&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanodeath&#34;&gt;Max Aller&lt;/a&gt; made a Kotlin (JVM) library, &lt;a href=&#34;https://gitlab.com/nanodeath/kollapse&#34;&gt;Kollapse&lt;/a&gt;. Joseph Roskopf made a line by line Kotlin &lt;a href=&#34;https://github.com/j-roskopf/WFC&#34;&gt;port&lt;/a&gt; of the optimized 2018 version. Edwin Jakobs made a &lt;a href=&#34;https://github.com/edwinRNDR/wfc&#34;&gt;Kotlin library&lt;/a&gt; that supports &lt;a href=&#34;https://www.youtube.com/watch?v=g4Ih8wxBh1E&#34;&gt;3d examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kchapelier&#34;&gt;Kevin Chapelier&lt;/a&gt; made a &lt;a href=&#34;http://www.kchapelier.com/wfc-example/overlapping-model.html&#34;&gt;JavaScript port&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Oskar Stålberg programmed a 3d tiled model, a 2d tiled model for irregular grids on a sphere and is building beautiful 3d tilesets for them: &lt;a href=&#34;https://twitter.com/OskSta/status/787319655648100352&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/784847588893814785&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/784847933686575104&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/784848286272327680&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/793545297376972801&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/793806535898136576&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/802496920790777856&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/804291629561577472&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/806856212260278272&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/806904557502464000&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/818857408848130048&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/832633189277409280&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/851170356530475008&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/858301207936458752&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/863019585162932224&#34;&gt;15&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/selfsame&#34;&gt;Joseph Parker&lt;/a&gt; adapted &lt;a href=&#34;https://selfsame.itch.io/unitywfc&#34;&gt;WFC to Unity&lt;/a&gt; and used it generate skateparks in the &lt;a href=&#34;https://arcadia-clojure.itch.io/proc-skater-2016&#34;&gt;Proc Skater 2016&lt;/a&gt; game, &lt;a href=&#34;https://twitter.com/jplur_/status/929482200034226176&#34;&gt;fantastic plateaus&lt;/a&gt; in the 2017 game &lt;a href=&#34;https://arcadia-clojure.itch.io/swapland&#34;&gt;Swapland&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jplur_/status/1053458654454865921&#34;&gt;platform levels&lt;/a&gt; in the 2018 game &lt;a href=&#34;https://selfsame.itch.io/bug-with-a-gun&#34;&gt;Bug with a Gun&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mewo2&#34;&gt;Martin O&#39;Leary&lt;/a&gt; applied a &lt;a href=&#34;https://github.com/mewo2/oisin&#34;&gt;WFC-like algorithm&lt;/a&gt; to poetry generation: &lt;a href=&#34;https://twitter.com/mewo2/status/789167437518217216&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mewo2/status/789177702620114945&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mewo2/status/789187174683987968&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mewo2/status/789897712372183041&#34;&gt;4&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NNNenov&#34;&gt;Nick Nenov&lt;/a&gt; made a &lt;a href=&#34;https://twitter.com/NNNenov/status/789903180226301953&#34;&gt;3d voxel tileset&lt;/a&gt; based on my Castle tileset. Nick uses text output option in the tiled model to reconstruct 3d models in Cinema 4D.&lt;/li&gt; &#xA; &lt;li&gt;Sean Leffler implemented the &lt;a href=&#34;https://github.com/sdleffler/collapse&#34;&gt;overlapping model in Rust&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;rid5x is making an &lt;a href=&#34;https://twitter.com/rid5x/status/782442620459114496&#34;&gt;OCaml version of WFC&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I published a very basic &lt;a href=&#34;https://bitbucket.org/mxgmn/basic3dwfc/overview&#34;&gt;3d tiled model&lt;/a&gt; so people could make their own 3d tilesets without waiting for the full 3d repository.&lt;/li&gt; &#xA; &lt;li&gt;I made an &lt;a href=&#34;https://twitter.com/ExUtumno/status/798571284342837249&#34;&gt;interactive version&lt;/a&gt; of the overlapping model, you can download the GUI executable from the &lt;a href=&#34;https://exutumno.itch.io/wavefunctioncollapse&#34;&gt;WFC itch.io page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/unormal&#34;&gt;Brian Bucklew&lt;/a&gt; built a level generation pipeline that applies WFC in multiple passes for the &lt;a href=&#34;http://store.steampowered.com/app/333640&#34;&gt;Caves of Qud&lt;/a&gt; game: &lt;a href=&#34;https://twitter.com/unormal/status/805987523596091392&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808566029387448320&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808523056259993601&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808523493994364928&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808519575264497666&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808519216185876480&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808795396508123136&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/808860105093632001&#34;&gt;8&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/809637856432033792&#34;&gt;9&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/810239794433425408&#34;&gt;10&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/811034574973243393&#34;&gt;11&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/811720423419314176&#34;&gt;12&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/811034037259276290&#34;&gt;13&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/810971337309224960&#34;&gt;14&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/811405368777723909&#34;&gt;15&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/ptychomancer/status/812053801544757248&#34;&gt;16&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/812159308263788544&#34;&gt;17&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/812158749838340096&#34;&gt;18&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/814569437181476864&#34;&gt;19&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/814570383189876738&#34;&gt;20&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/819725864623603712&#34;&gt;21&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/unormal/status/984719207156862976&#34;&gt;22&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dannywynne&#34;&gt;Danny Wynne&lt;/a&gt; implemented a &lt;a href=&#34;https://twitter.com/dwtw/status/810166761270243328&#34;&gt;3d tiled model&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Arvi Teikari programmed a &lt;a href=&#34;http://www.hempuli.com/blogblog/archives/1598&#34;&gt;texture synthesis algorithm with the entropy heuristic&lt;/a&gt; in Lua. Headchant &lt;a href=&#34;https://github.com/headchant/iga&#34;&gt;ported&lt;/a&gt; it to work with LÖVE.&lt;/li&gt; &#xA; &lt;li&gt;Isaac Karth made a &lt;a href=&#34;https://github.com/ikarth/wfc_python&#34;&gt;Python port&lt;/a&gt; of the overlapping model.&lt;/li&gt; &#xA; &lt;li&gt;Oskar Stålberg made an &lt;a href=&#34;http://oskarstalberg.com/game/wave/wave.html&#34;&gt;interactive version&lt;/a&gt; of the tiled model that runs in the browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MattRix&#34;&gt;Matt Rix&lt;/a&gt; implemented a 3d tiled model (&lt;a href=&#34;https://twitter.com/MattRix/status/869403586664570880&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/870999185167962113&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/871054734018453505&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/871056805761359872&#34;&gt;4&lt;/a&gt;) and made a 3-dimensional tiled model where one of the dimensions is time (&lt;a href=&#34;https://twitter.com/MattRix/status/872674537799913472&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/872648369625325568&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/872645716660891648&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/872641331956518914&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MattRix/status/979020989181890560&#34;&gt;5&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NNNenov&#34;&gt;Nick Nenov&lt;/a&gt; made a &lt;a href=&#34;https://www.dropbox.com/s/zeiat1w8zre9ro8/Knots%20breakdown.png?dl=0&#34;&gt;visual guide&lt;/a&gt; to the tile symmetry system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ikarth&#34;&gt;Isaac Karth&lt;/a&gt; and &lt;a href=&#34;https://github.com/rndmcnlly&#34;&gt;Adam M. Smith&lt;/a&gt; wrote a &lt;a href=&#34;https://ieeexplore.ieee.org/document/9421370&#34;&gt;paper&lt;/a&gt; (&lt;a href=&#34;https://escholarship.org/uc/item/3rm1w0mn&#34;&gt;open access link&lt;/a&gt;) in which they examine the role of backtracking and different possible heuristics in WFC, experiment with global constraints and combine WFC with VQ-VAE. Earlier in 2017, the authors wrote a &lt;a href=&#34;https://adamsmith.as/papers/wfc_is_constraint_solving_in_the_wild.pdf&#34;&gt;workshop paper&lt;/a&gt; where they formulate WFC as an ASP problem, use general constraint solver &lt;a href=&#34;https://github.com/potassco/clingo&#34;&gt;clingo&lt;/a&gt; to generate bitmaps, trace WFC&#39;s history and give a detailed explanation of the algorithm.&lt;/li&gt; &#xA; &lt;li&gt;Sylvain Lefebvre made a &lt;a href=&#34;https://github.com/sylefeb/VoxModSynth&#34;&gt;C++ implementation&lt;/a&gt; of 3d model synthesis, described the thought process of designing a sample and provided an example where adjacency constraints ensure that the output is connected (walkable).&lt;/li&gt; &#xA; &lt;li&gt;I generalized 3d WFC to work with cube symmetry group and made a tileset that generates &lt;a href=&#34;https://twitter.com/ExUtumno/status/895684431477747715&#34;&gt;Escheresque scenes&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There are many ways to visualize partially observed wave states. In the code, color values of possible options are averaged to produce the resulting color. Oskar Stålberg &lt;a href=&#34;https://twitter.com/OskSta/status/863019585162932224&#34;&gt;shows&lt;/a&gt; partially observed states as semi-transparent boxes, where the box is bigger for a state with more options. In the voxel setting I &lt;a href=&#34;https://twitter.com/ExUtumno/status/900395635412787202&#34;&gt;visualize&lt;/a&gt; wave states with per-voxel voting.&lt;/li&gt; &#xA; &lt;li&gt;Remy Devaux implemented the tiled model in PICO-8 and wrote an &lt;a href=&#34;https://trasevol.dog/2017/09/01/di19/&#34;&gt;article&lt;/a&gt; about generation of coherent data with an explanation of WFC.&lt;/li&gt; &#xA; &lt;li&gt;For the upcoming game &lt;a href=&#34;https://www.badnorth.com/&#34;&gt;Bad North&lt;/a&gt; Oskar Stålberg &lt;a href=&#34;https://twitter.com/OskSta/status/917405214638006273&#34;&gt;uses&lt;/a&gt; a heuristic that tries to select such tiles that the resulting observed zone is navigable at each step.&lt;/li&gt; &#xA; &lt;li&gt;William Manning &lt;a href=&#34;https://github.com/heyx3/easywfc&#34;&gt;implemented&lt;/a&gt; the overlapping model in C# with the primary goal of making code readable, and provided it with WPF GUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/selfsame&#34;&gt;Joseph Parker&lt;/a&gt; wrote a WFC &lt;a href=&#34;http://www.procjam.com/tutorials/wfc/&#34;&gt;tutorial&lt;/a&gt; for Procjam 2017.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aman-tiwari&#34;&gt;Aman Tiwari&lt;/a&gt; formulated the connectivity constraint as an &lt;a href=&#34;https://gist.github.com/aman-tiwari/8a7b874cb1fd1270adc203b2af293f4c&#34;&gt;ASP problem&lt;/a&gt; for clingo.&lt;/li&gt; &#xA; &lt;li&gt;Matvey Khokhlov programmed a &lt;a href=&#34;https://github.com/MatveyK/Kazimir&#34;&gt;3d overlapping model&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sylefeb&#34;&gt;Sylvain Lefebvre&lt;/a&gt;, &lt;a href=&#34;https://github.com/1iyiwei&#34;&gt;Li-Yi Wei&lt;/a&gt; and &lt;a href=&#34;https://github.com/connellybarnes&#34;&gt;Connelly Barnes&lt;/a&gt; are &lt;a href=&#34;https://hal.archives-ouvertes.fr/hal-01706539/&#34;&gt;investigating&lt;/a&gt; the possibility of hiding information inside textures. They made a &lt;a href=&#34;https://members.loria.fr/Sylvain.Lefebvre/infotexsyn/&#34;&gt;tool&lt;/a&gt; that can encode text messages as WFC tilings and decode them back. This technique allows to use WFC tilings as QR codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/math-fehr&#34;&gt;Mathieu Fehr&lt;/a&gt; and &lt;a href=&#34;https://github.com/Ekdohibs&#34;&gt;Nathanael Courant&lt;/a&gt; significantly &lt;a href=&#34;https://github.com/math-fehr/fast-wfc&#34;&gt;improved&lt;/a&gt; the running time of WFC, by an order of magnitude for the overlapping model. I &lt;a href=&#34;https://github.com/mxgmn/WaveFunctionCollapse/commit/fad1066b5000f7e9fbda0ef81bbea56799686670&#34;&gt;integrated&lt;/a&gt; their improvements into the code.&lt;/li&gt; &#xA; &lt;li&gt;Vasu Mahesh &lt;a href=&#34;https://github.com/vasumahesh1/WFC_WebGL&#34;&gt;ported&lt;/a&gt; 3d tiled model to TypeScript, made a new tileset and &lt;a href=&#34;https://vasumahesh1.github.io/WFC_WebGL&#34;&gt;visualised&lt;/a&gt; the generation process in WebGL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greentec&#34;&gt;Hwanhee Kim&lt;/a&gt; experimented with 3d WFC and created/adapted many voxel tilesets: &lt;a href=&#34;https://twitter.com/greentecq/status/1025348928634408960&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1004068394553913344&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1005835830802305024&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1022851327041265664&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1011351814216736769&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1008210550944387077&#34;&gt;6&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1006390606875070464&#34;&gt;7&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/greentecq/status/1015182718810841088&#34;&gt;8&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Oskar Stålberg gave a &lt;a href=&#34;https://www.youtube.com/watch?v=0bcZb-SsnrA&#34;&gt;talk&lt;/a&gt; about level generation in Bad North at the Everything Procedural Conference 2018.&lt;/li&gt; &#xA; &lt;li&gt;I &lt;a href=&#34;https://twitter.com/ExUtumno/status/1024314661951467521&#34;&gt;wrote&lt;/a&gt; about how to generate (approximately) unbiased paths between 2 points with WFC and other algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ikarth&#34;&gt;Isaac Karth&lt;/a&gt; and &lt;a href=&#34;https://github.com/rndmcnlly&#34;&gt;Adam M. Smith&lt;/a&gt; published a &lt;a href=&#34;https://arxiv.org/abs/1809.04432&#34;&gt;preprint&lt;/a&gt; where they describe a system based on WFC that learns from both positive and negative examples, and discuss it in a general context of dialogs with example-driven generators.&lt;/li&gt; &#xA; &lt;li&gt;Brendan Anthony &lt;a href=&#34;https://steamcommunity.com/games/314230/announcements/detail/3369147113795750369&#34;&gt;uses&lt;/a&gt; WFC to generate wall decorations in the game &lt;a href=&#34;https://store.steampowered.com/app/314230/Rodina/&#34;&gt;Rodina&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tim Kong implemented the &lt;a href=&#34;https://github.com/Mitim-84/WFC-Gen&#34;&gt;overlapping model in Haxe&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In order to generate connected structures, Boris the Brave applied the &lt;a href=&#34;https://www.boristhebrave.com/2018/04/28/random-paths-via-chiseling&#34;&gt;chiseling method&lt;/a&gt; to WFC. He published a &lt;a href=&#34;https://boristhebrave.github.io/DeBroglie&#34;&gt;library&lt;/a&gt; that supports hex grids, additional constraints and backtracking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marian42&#34;&gt;Marian Kleineberg&lt;/a&gt; &lt;a href=&#34;https://twitter.com/marian42_/status/1061785383057440768&#34;&gt;created&lt;/a&gt; an &lt;a href=&#34;https://marian42.itch.io/wfc&#34;&gt;infinite city generator&lt;/a&gt; based on the tiled model for Procjam 2018. He wrote an &lt;a href=&#34;https://marian42.de/article/wfc&#34;&gt;article&lt;/a&gt; describing his approaches to setting adjacencies, backtracking and the online variation of WFC.&lt;/li&gt; &#xA; &lt;li&gt;Sol Bekic &lt;a href=&#34;https://github.com/s-ol/gpWFC&#34;&gt;programmed&lt;/a&gt; the tiled model that runs on GPU using PyOpenCL. Instead of keeping a queue of nodes to propagate from, it propagates from every node on the grid in parallel.&lt;/li&gt; &#xA; &lt;li&gt;Wouter van Oortmerssen &lt;a href=&#34;https://github.com/aardappel/lobster/commit/703f67472bfd80c26bb626e1d5c22ec91047da98&#34;&gt;implemented&lt;/a&gt; the tiled model in a single C++ function, with a structure similar to a priority queue for faster observation.&lt;/li&gt; &#xA; &lt;li&gt;Robert Hoenig &lt;a href=&#34;https://github.com/roberthoenig/WaveFunctionCollapse.jl&#34;&gt;implemented&lt;/a&gt; the overlapping model in Julia, with an option to propagate constraints only locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edwinRNDR&#34;&gt;Edwin Jakobs&lt;/a&gt; applied WFC to &lt;a href=&#34;https://twitter.com/voorbeeld/status/1073874337248239616&#34;&gt;style transfer&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/voorbeeld/status/1073875725499985926&#34;&gt;dithering&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Breanna Baltaxe-Admony &lt;a href=&#34;https://github.com/bbaltaxe/wfc-piano-roll&#34;&gt;applied&lt;/a&gt; WFC to music generation.&lt;/li&gt; &#xA; &lt;li&gt;Shawn Ridgeway made a &lt;a href=&#34;https://github.com/shawnridgeway/wfc&#34;&gt;Go port&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For the Global Game Jam 2019, &lt;a href=&#34;https://github.com/andymasteroffish&#34;&gt;Andy Wallace&lt;/a&gt; made a &lt;a href=&#34;http://andymakesgames.tumblr.com/post/182363131350/global-game-jam-2019-maureens-chaotic-dungeon&#34;&gt;game&lt;/a&gt; in which the player can interact with WFC-based level generator by resetting portions of the level with various weapons.&lt;/li&gt; &#xA; &lt;li&gt;Stephen Sherratt wrote a &lt;a href=&#34;https://gridbugs.org/wave-function-collapse/&#34;&gt;detailed explanation&lt;/a&gt; of the overlapping model and made a &lt;a href=&#34;https://github.com/stevebob/wfc&#34;&gt;Rust library&lt;/a&gt;. For the 7DRL Challenge 2019 he made a roguelike &lt;a href=&#34;https://gridbugs.org/get-well-soon/&#34;&gt;Get Well Soon&lt;/a&gt; that &lt;a href=&#34;https://gridbugs.org/7drl2019-day1/&#34;&gt;uses&lt;/a&gt; WFC to generate levels.&lt;/li&gt; &#xA; &lt;li&gt;Florian Drux created a &lt;a href=&#34;https://github.com/lamelizard/GraphWaveFunctionCollapse/raw/master/thesis.pdf&#34;&gt;generalization&lt;/a&gt; that works on graphs with arbitrary local structure and &lt;a href=&#34;https://github.com/lamelizard/GraphWaveFunctionCollapse&#34;&gt;implemented&lt;/a&gt; it in Python.&lt;/li&gt; &#xA; &lt;li&gt;Bob Burrough &lt;a href=&#34;https://twitter.com/ExUtumno/status/1119996185199116289&#34;&gt;discovered&lt;/a&gt; a percolation-like phase transition in one of the tilesets that manifests in spiking contradiction rate.&lt;/li&gt; &#xA; &lt;li&gt;Oskar Stålberg combined WFC with marching cubes on irregular grids and made a town building toy &lt;a href=&#34;https://store.steampowered.com/app/1291340/Townscaper/&#34;&gt;Townscaper&lt;/a&gt; based on it: &lt;a href=&#34;https://twitter.com/OskSta/status/1164926304640229376&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/1168168400155267072&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/1181464374839521280&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/1189109278361165825&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/OskSta/status/1189902695303458816&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=1hqt8JkYRdI&#34;&gt;6&lt;/a&gt;. Oskar gave a number of talks and interviews about the mixed initiative town generation in Townscaper: &lt;a href=&#34;https://www.youtube.com/watch?v=NOJYZYqY6_M&#34;&gt;EPC2021&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=Uxeo9c-PX-w&#34;&gt;SGC21&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=5xrRTOikBBg&#34;&gt;Konsoll 2021&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=_1fvJ5sHh6A&#34;&gt;AI and Games&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In his Rust roguelike tutorial, &lt;a href=&#34;https://github.com/thebracket&#34;&gt;Herbert Wolverson&lt;/a&gt; wrote a &lt;a href=&#34;http://bfnightly.bracketproductions.com/rustbook/chapter_33.html&#34;&gt;chapter&lt;/a&gt; about implementing the WFC algorithm from scratch.&lt;/li&gt; &#xA; &lt;li&gt;At the &lt;a href=&#34;https://www.youtube.com/watch?v=AdCgi9E90jw&#34;&gt;Game Developers Conference 2019&lt;/a&gt; and the &lt;a href=&#34;https://www.youtube.com/watch?v=fnFj3dOKcIQ&#34;&gt;Roguelike Celebration 2019&lt;/a&gt;, &lt;a href=&#34;https://github.com/unormal&#34;&gt;Brian Bucklew&lt;/a&gt; gave talks about WFC and how Freehold Games uses it to generate levels in &lt;a href=&#34;https://store.steampowered.com/app/333640/Caves_of_Qud/&#34;&gt;Caves of Qud&lt;/a&gt;. The talks discuss problems with overfitting and homogeny, level connectedness and combining WFC with constructive procgen methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boristhebrave&#34;&gt;Boris the Brave&lt;/a&gt; published a &lt;a href=&#34;https://assetstore.unity.com/packages/tools/modeling/tessera-procedural-tile-based-generator-155425&#34;&gt;commercial Unity asset&lt;/a&gt; based on the tiled model.&lt;/li&gt; &#xA; &lt;li&gt;Steven Casey ported WFC to &lt;a href=&#34;https://github.com/sjcasey21/wavefunctioncollapse&#34;&gt;Java&lt;/a&gt; and &lt;a href=&#34;https://github.com/sjcasey21/wavefunctioncollapse-clj&#34;&gt;Clojure&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Nuño de la Serna implemented the 3d tiled model in an &lt;a href=&#34;https://github.com/action-script/ofxWFC3D&#34;&gt;openFrameworks addon&lt;/a&gt; that supports tiles with no symmetries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ambrosiussen&#34;&gt;Paul Ambrosiussen&lt;/a&gt; &lt;a href=&#34;https://github.com/sideeffects/SideFXLabs&#34;&gt;integrated&lt;/a&gt; the overlapping model into Houdini and gave a &lt;a href=&#34;https://vimeo.com/400993662&#34;&gt;talk&lt;/a&gt; about the algorithm and his implementation at Houdini HIVE 2020.&lt;/li&gt; &#xA; &lt;li&gt;Keijiro Takahashi &lt;a href=&#34;https://github.com/keijiro/WfcMaze&#34;&gt;implemented&lt;/a&gt; a 3d tiled model and generated Escheresque scenes with it: &lt;a href=&#34;https://twitter.com/_kzr/status/1248993799960838144&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_kzr/status/1248990065327345664&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_kzr/status/1248884103274827777&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_kzr/status/1248268624495689728&#34;&gt;4&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_kzr/status/1249348597549682689&#34;&gt;5&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Simon Verstraete published a &lt;a href=&#34;https://www.sidefx.com/tutorials/wfc-dungeon-generator/&#34;&gt;tutorial&lt;/a&gt; about generating game levels for Unreal Engine 4 using the Houdini WFC tool: &lt;a href=&#34;https://www.youtube.com/watch?v=-5_FIqTDuzc&#34;&gt;0&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=c06bSBYsFT8&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=u4NCs1F6zf8&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=YDpVUl213yo&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=ldcsvGuoW24&#34;&gt;4&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eliemichel&#34;&gt;Élie Michel&lt;/a&gt; posted a &lt;a href=&#34;https://twitter.com/exppad/status/1267045322116734977&#34;&gt;twitter thread&lt;/a&gt; that explains the relationship between the overlapping and the tiled models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MAKIO135&#34;&gt;Lionel Radisson&lt;/a&gt; published an interactive &lt;a href=&#34;https://observablehq.com/@makio135/super-mario-wfc&#34;&gt;Observable notebook&lt;/a&gt; that generates Mario and Zelda-like levels with the overlapping model: &lt;a href=&#34;https://twitter.com/MAKIO135/status/1271187284424040449&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MAKIO135/status/1268308728782045184&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MAKIO135/status/1271015222321561600&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MAKIO135/status/1271113760472694784&#34;&gt;4&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Łukasz Jakubowski, Maciej Kaszlewicz, Paweł Kroll and Stefan Radziuk &lt;a href=&#34;https://github.com/ic-pcg/waveFunctionCollapse&#34;&gt;implemented&lt;/a&gt; the tiled model in C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yvvan&#34;&gt;Ivan Donchevskii&lt;/a&gt; published a &lt;a href=&#34;https://www.unrealengine.com/marketplace/en-US/product/procedural-environment-generator-wfc&#34;&gt;commercial Unreal Engine plugin&lt;/a&gt; based on the tiled model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janper&#34;&gt;Ján Pernecký&lt;/a&gt; and &lt;a href=&#34;https://github.com/yanchith&#34;&gt;Ján Tóth&lt;/a&gt; published a &lt;a href=&#34;https://github.com/subdgtl/Monoceros&#34;&gt;Grasshopper plugin&lt;/a&gt; that extends the tiled model.&lt;/li&gt; &#xA; &lt;li&gt;Krystian Samp made a &lt;a href=&#34;https://github.com/krychu/wfc&#34;&gt;single-file overlapping WFC library in C&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amarcolina&#34;&gt;Gerald Krystian&lt;/a&gt; made an &lt;a href=&#34;https://amarcolina.github.io/WFC-Explorer/&#34;&gt;interactive tool&lt;/a&gt; that explores the tiled model where tile adjacencies are induced from edge labels.&lt;/li&gt; &#xA; &lt;li&gt;DeepMind open-ended learning team &lt;a href=&#34;https://storage.googleapis.com/deepmind-media/papers/Open-Ended%20Learning%20Leads%20to%20Generally%20Capable%20Agents/open-ended-learning-paper.pdf&#34;&gt;used&lt;/a&gt; WFC to generate arenas for reinforcement learning agents.&lt;/li&gt; &#xA; &lt;li&gt;Oskar Stålberg &lt;a href=&#34;https://twitter.com/OskSta/status/1447483550257799171&#34;&gt;made&lt;/a&gt; an island generator that combines triangle and quad tiles and uses a custom observation heuristic that doesn&#39;t produce local minimums.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boristhebrave&#34;&gt;Boris the Brave&lt;/a&gt; &lt;a href=&#34;https://www.boristhebrave.com/2021/11/08/infinite-modifying-in-blocks/&#34;&gt;applied&lt;/a&gt; &lt;a href=&#34;https://github.com/merrell42&#34;&gt;Paul Merrell&#39;s&lt;/a&gt; modifying in blocks technique to the lazy generation of unbounded tile configurations. Marian Kleineberg has &lt;a href=&#34;https://twitter.com/marian42_/status/1490060483944140804&#34;&gt;implemented&lt;/a&gt; this method into his &lt;a href=&#34;https://github.com/marian42/wavefunctioncollapse&#34;&gt;infinite city generator&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Circles tileset is taken from &lt;a href=&#34;https://twitter.com/quasimondo/status/778196128957403136&#34;&gt;Mario Klingemann&lt;/a&gt;. FloorPlan tileset is taken from &lt;a href=&#34;https://github.com/LingDong-/ndwfc&#34;&gt;Lingdong Huang&lt;/a&gt;. Summer tiles were drawn by Hermann Hillmann. Cat overlapping sample is taken from the Nyan Cat video, Water + Forest + Mountains samples are taken from Ultima IV, 3Bricks sample is taken from Dungeon Crawl Stone Soup, Qud sample was made by Brian Bucklew, MagicOffice + Spirals samples - by rid5x, ColoredCity + Link + Link 2 + Mazelike + RedDot + SmileCity samples - by Arvi Teikari, Wall sample - by Arcaniax, NotKnot + Sand + Wrinkles samples - by Krystian Samp, Circle sample - by Noah Buddy. The rest of the examples and tilesets were made by me. Idea of generating integrated circuits was suggested to me by &lt;a href=&#34;https://twitter.com/Moonasaur/status/759890746350731264&#34;&gt;Moonasaur&lt;/a&gt; and their style was taken from Zachtronics&#39; &lt;a href=&#34;http://www.zachtronics.com/ruckingenur-ii/&#34;&gt;Ruckingenur II&lt;/a&gt;. Voxel models were rendered in &lt;a href=&#34;http://ephtracy.github.io/&#34;&gt;MagicaVoxel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;second collage&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/wfc-2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;voxel perspective&#34; src=&#34;https://raw.githubusercontent.com/mxgmn/WaveFunctionCollapse/master/images/castle-3d.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elsa-workflows/elsa-core</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/elsa-workflows/elsa-core</id>
    <link href="https://github.com/elsa-workflows/elsa-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET Standard 2.0 Workflows Library&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/github-social-preview-banner-for-elsa.png&#34; alt=&#34;Elsa Workflows&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Elsa Workflows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elsa/2.0.0-rc1-0&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Elsa&#34; alt=&#34;Nuget (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.myget.org/gallery/elsa-2&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/elsa-2/vpre/Elsa?label=myget&#34; alt=&#34;MyGet (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/sfmskywalker/elsa&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/elsa-workflows/elsa-core?svg=true&amp;amp;branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-dashboard-and-server-docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-dashboard-and-server-docker.yml/badge.svg?sanitize=true&#34; alt=&#34;Build elsa-dashboard:latest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/elsaworkflows/elsa-dashboard-and-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/elsaworkflows/elsa-dashboard-and-server?label=docker&amp;amp;logo=docker&#34; alt=&#34;Docker Image Version (latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/hhChk5H472&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/814605913783795763?label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/tagged/elsa-workflows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-elsa_workflows-orange.svg?sanitize=true&#34; alt=&#34;Stack Overflow questions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/elsaworkflows/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/elsaworkflows?style=social&#34; alt=&#34;Subreddit subscribers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elsa Core is a workflows library that enables workflow execution in any .NET Core application. Workflows can be defined using code and using the visual workflow designer.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/elsa-2-hello-world-http.gif&#34; alt=&#34;Elsa 2 Preview&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found &lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/docs/next/quickstarts/quickstarts-console-hello-world&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet new console -n &#34;MyConsoleApp&#34;&#xA;&#xA;cd MyConsoleApp&#xA;&#xA;dotnet add package Elsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new file called &lt;code&gt;HelloWorldWorkflow.cs&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Elsa.Activities.Console;&#xA;using Elsa.Builders;&#xA;&#xA;namespace MyConsoleApp&#xA;{&#xA;    public class HelloWorld : IWorkflow&#xA;    {&#xA;        public void Build(IWorkflowBuilder builder) =&amp;gt; builder.WriteLine(&#34;Hello World!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;Program.cs&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;&#xA;using Elsa.Services;&#xA;using Microsoft.Extensions.DependencyInjection;&#xA;&#xA;namespace MyConsoleApp&#xA;{&#xA;    class Program&#xA;    {&#xA;        private static async Task Main()&#xA;        {&#xA;            var services = new ServiceCollection()&#xA;                .AddElsa(options =&amp;gt; options&#xA;                    .AddConsoleActivities()&#xA;                    .AddWorkflow&amp;lt;HelloWorld&amp;gt;())&#xA;                .BuildServiceProvider();&#xA;            &#xA;            var workflowRunner = services.GetRequiredService&amp;lt;IBuildsAndStartsWorkflow&amp;gt;();&#xA;            await workflowRunner.BuildAndStartWorkflowAsync&amp;lt;HelloWorld&amp;gt;();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/docs/next/quickstarts/quickstarts-console-hello-world&#34;&gt;Quickstart guides&lt;/a&gt; for more examples, including how to setup the Elsa Dashboard to create and manage visual workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;A quick and easy way to give Elsa a spin is to run the following Docker command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t -i -e ELSA__SERVER__BASEURL=&#39;http://localhost:13000&#39; -p 13000:80 elsaworkflows/elsa-dashboard-and-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then navigate to &lt;a href=&#34;http://localhost:13000&#34;&gt;http://localhost:13000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;When you clone the repo, the solution file to open is &lt;code&gt;Elsa.sln&lt;/code&gt; which should build with no issues.&lt;/p&gt; &#xA;&lt;h3&gt;Elsa Dashboard &amp;amp; Client Assets&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run the sample project &lt;code&gt;ElsaDashboard.Samples.AspNetCore.Monolith.csproj&lt;/code&gt;, you should build the client assets first.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to do that is by running the &lt;code&gt;.\build-assets.ps1&lt;/code&gt; file in the root of the repo (where this README.md is as well). Alternatively, you might run &lt;code&gt;.\build-assets-and-run-dashboard-monolith.ps1&lt;/code&gt; that will first build the client assets and then run the dashboard application to give Elsa a quick whirl.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Another quick way to try out Elsa is to run &lt;code&gt;build-and-run-dashboard-monolith-with-docker.ps1&lt;/code&gt;, which will use Docker Compose to build an image and start a container. When the container starts, you can reach the Elsa Dashboard at &lt;a href=&#34;http://localhost:14000&#34;&gt;http://localhost:14000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Invoker&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Long-running Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflows as code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflows as data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Correlation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistence: CosmosDB, Entity Framework Core, MongoDB, YesSQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTML5 Workflow Designer Web Component&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ASP.NET Core Workflow Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JavaScript Expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liquid Expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Primitive Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Control Flow Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Timer Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Email Activities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 2.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Composite Activities API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Service Bus Messaging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Host REST API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Distributed Hosting Support (support for multi-node environments)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistence: MongoDB, YesSQL, Entity Framework Core (SQL Server, SQLLite, PostgreSql)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; New Workflow Designer + Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generic Command &amp;amp; Event Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; State Machines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test Workflows from Designer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Debug Workflows from Designer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Localization Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lucene Indexing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 3.0 (engine + designer redesign)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programming model similar to WF&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sequential Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flowchart Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; State Machine Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Sagas&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; BPMN Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Actor Model for Distributed Workflows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional goals for Elsa 3 (separate from core library)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modular workflow server application framework: unobtrusively add new capabilities to the workflow engine. Requires a common ORM in order to extend persistence layer in a modular fashion. EF Core has the potential to abstract away any &amp;amp; all DB providers, including MongoDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modular &amp;amp; themeable dashboard application framework: unobtrusively add UI (screens &amp;amp; widgets) to the dashboard (could be Blazor). The dashboard would be a SPA, invoking API endpoints by the modular workflow server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Module: ability for users to visually define API endpoints and implement their logic using workflows (&#34;code behind&#34; concept of VB and WinForms). With Swagger integration for Open API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Module: ability to define logical forms (form name and fields) and implement their submission logic visually using workflows (also &#34;code behind&#34; concept).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The secondary goals for Elsa 3 aim to bring about a low-code framework &amp;amp; platform for rapid application development. This shoud apply to the full spectrum of application development, ranging from embedded software (e.g Raspberry PI) to microservices &amp;amp; serverless architectures. Where one would normally write C# code to handle UI events or implement API endpoints, one can now visually design their logic using workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow Designer&lt;/h2&gt; &#xA;&lt;p&gt;Workflows can be visually designed using the Elsa Designer, a reusable &amp;amp; extensible HTML5 web component built with &lt;a href=&#34;https://stenciljs.com/&#34;&gt;StencilJS&lt;/a&gt;. To manage workflow definitions and instances, Elsa comes with an NPM package providing a set of HTML web components and a reusable Razor Class Library that wraps this package. The NPM package can be used in any type of web application, while the RCL provides Razor Components to embed the Elsa Dashboard SPA component as well as individual components in your ASP.NET Core application.&lt;/p&gt; &#xA;&lt;h2&gt;Programmatic Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Workflows can be created programmatically and then executed using one of the various APIs, which vary from low-level control to high-level ease of use.&lt;/p&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;p&gt;The following code snippet demonstrates creating a workflow with two WriteLine activities from code and then invoking it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;&#xA;// Define a strongly-typed workflow.&#xA;public class HelloWorldWorkflow : IWorkflow&#xA;{&#xA;    public void Build(IWorkflowBuilder builder)&#xA;    {&#xA;        builder&#xA;            .WriteLine(&#34;Hello World!&#34;)&#xA;            .WriteLine(&#34;Goodbye cruel world...&#34;);&#xA;    }&#xA;}&#xA;&#xA;// Setup a service collection.&#xA;var services = new ServiceCollection()&#xA;    .AddElsa()&#xA;    .AddConsoleActivities()&#xA;    .AddWorkflows&amp;lt;HelloWorldWorkflow&amp;gt;()&#xA;    .BuildServiceProvider();&#xA;&#xA;// Get a workflow runner.&#xA;var workflowRunner = services.GetService&amp;lt;IBuildsAndStartsWorkflow&amp;gt;();&#xA;&#xA;// Run the workflow.&#xA;await workflowRunner.BuildAndStartWorkflowAsync&amp;lt;HelloWorld&amp;gt;();&#xA;&#xA;// Output:&#xA;// /&amp;gt; Hello World!&#xA;// /&amp;gt; Goodbye cruel world...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Persistence&lt;/h2&gt; &#xA;&lt;p&gt;Elsa abstracts away data access, which means you can use any persistence provider you prefer.&lt;/p&gt; &#xA;&lt;h2&gt;Long Running Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Elsa has native support for long-running workflows. As soon as a workflow is halted because of some blocking activity, the workflow is persisted. When the appropriate event occurs, the workflow is loaded from the store and resumed.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create workflows using the &lt;strong&gt;Workflow Builder API&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create &amp;amp; manage workflows &lt;strong&gt;visually&lt;/strong&gt; using the Elsa Dashboard SPA.&lt;/li&gt; &#xA; &lt;li&gt;Design &lt;strong&gt;long-running&lt;/strong&gt; workflows.&lt;/li&gt; &#xA; &lt;li&gt;REST &lt;strong&gt;API Endpoints&lt;/strong&gt; to manage and integrate with Elsa from external applications.&lt;/li&gt; &#xA; &lt;li&gt;Create higher-level activities using the &lt;strong&gt;Composite Activity API&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich set of activities&lt;/strong&gt; such as SetVariable, For, ForEach, ParallelForEach, Fork, Join, HttpEndpoint, SendHttpRequest, SendEmail, MessageReceived and much more.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;strong&gt;custom activities&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workflow Expressions&lt;/strong&gt; allow you to configure activity properties with expressions that are evaluated at runtime. Supported syntaxes are JavaScript ans Liquid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Elsa Workflows?&lt;/h2&gt; &#xA;&lt;p&gt;One of the main goals of Elsa is to &lt;strong&gt;enable workflows in any .NET application&lt;/strong&gt; with &lt;strong&gt;minimum effort&lt;/strong&gt; and &lt;strong&gt;maximum extensibility&lt;/strong&gt;. This means that it should be easy to integrate workflow capabilities into your own application.&lt;/p&gt; &#xA;&lt;h3&gt;What about Azure Logic Apps?&lt;/h3&gt; &#xA;&lt;p&gt;As powerful and as complete Azure Logic Apps is, it&#39;s available only as a managed service in Azure. Elsa on the other hand allows you to host it not only on Azure, but on any cloud provider that supports .NET Core. And of course you can host it on-premise.&lt;/p&gt; &#xA;&lt;p&gt;Although you can implement long-running workflows with Logic Apps, you would typically do so with splitting your workflow with multiple Logic Apps where one workflow invokes the other. This can make the logic flow a bit hard to follow. with Elsa, you simply add triggers anywhere in the workflow, making it easier to have a complete view of your application logic. And if you want, you can still invoke other workflows form one workflow.&lt;/p&gt; &#xA;&lt;h3&gt;What about Windows Workflow Foundation?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve always liked Windows Workflow Foundation, but unfortunately &lt;a href=&#34;https://forums.dotnetfoundation.org/t/what-is-the-roadmap-of-workflow-foundation/3066&#34;&gt;development appears to have halted&lt;/a&gt;. Although there&#39;s an effort being made to &lt;a href=&#34;https://github.com/dmetzgar/corewf&#34;&gt;port WF to .NET Standard&lt;/a&gt;, there are a few reasons I prefer Elsa:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elsa intrinsically supports triggering events that starts new workflows and resumes halted workflow instances in an easy to use manner. E.g. &lt;code&gt;workflowHost.TriggerWorkflowAsync(&#34;HttpRequestTrigger&#34;);&#34;&lt;/code&gt; will start and resume all workflows that either start with or are halted on the &lt;code&gt;HttpRequestTrigger&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Elsa has a web-based workflow designer. I once worked on a project for a customer that was building a huge SaaS platform. One of the requirements was to provide a workflow engine and a web-based editor. Although there are commercial workflow libraries and editors out there, the business model required open-source software. We used WF and the re-hosted Workflow Designer. It worked, but it wasn&#39;t great.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What about Orchard Workflows?&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;a href=&#34;http://docs.orchardproject.net/en/latest/Documentation/Workflows/&#34;&gt;Orchard&lt;/a&gt; and &lt;a href=&#34;https://orchardcore.readthedocs.io/en/dev/docs/reference/modules/Workflows/&#34;&gt;Orchard Core&lt;/a&gt; ship with a powerful workflows module, and both are awesome. In fact, Elsa Workflows is taken &amp;amp; adapted from Orchard Core&#39;s Workflows module. Elsa uses a similar model, but there are some differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elsa Workflows is completely decoupled from web, whereas Orchard Core Workflows is coupled to not only the web, but also the Orchard Core Framework itself.&lt;/li&gt; &#xA; &lt;li&gt;Elsa Workflows can execute in any .NET Core application without taking a dependency on any Orchard Core packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;.NET Foundation&lt;/h3&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;https://dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.interfirst.com/&#34;&gt;Interfirst&lt;/a&gt;, a Residential Mortgage Licensee&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.interfirst.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/sponsors/interfirst.svg?sanitize=true&#34; alt=&#34;Interfirst&#34; width=&#34;600&#34; height=&#34;120&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nexxbiz.io/&#34;&gt;nexxbiz&lt;/a&gt;, accelerating delivery&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nexxbiz.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/sponsors/nexxbiz.svg?sanitize=true&#34; width=&#34;300&#34; height=&#34;300&#34; alt=&#34;nexxbiz&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ClosedXML/ClosedXML</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/ClosedXML/ClosedXML</id>
    <link href="https://github.com/ClosedXML/ClosedXML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ClosedXML is a .NET library for reading, manipulating and writing Excel 2007+ (.xlsx, .xlsm) files. It aims to provide an intuitive and user-friendly interface to dealing with the underlying OpenXML API.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/ClosedXML/ClosedXML/raw/develop/resources/logo/readme.png&#34; alt=&#34;ClosedXML&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-0.95.4-blue.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/ClosedXML/&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/ClosedXML&#34; alt=&#34;NuGet Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ClosedXML/ClosedXML/develop/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/.NET%20Framework-%3E%3D%204.0-red.svg?sanitize=true&#34; alt=&#34;.NET Framework&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ClosedXML/ClosedXML/develop/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/.NET%20Standard-%3E%3D%202.0-red.svg?sanitize=true&#34; alt=&#34;.NET Standard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/ClosedXML/ClosedXML/branch/develop/artifacts&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/wobbmnlbukxejjgb?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/closedxml/closedxml&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/closedxml/closedxml/badges/users.svg?sanitize=true&#34; alt=&#34;Open Source Helpers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/ClosedXML/ClosedXML/branch/develop/artifacts&#34;&gt;💾 Download unstable CI build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;ClosedXML is a .NET library for reading, manipulating and writing Excel 2007+ (.xlsx, .xlsm) files. It aims to provide an intuitive and user-friendly interface to dealing with the underlying &lt;a href=&#34;https://github.com/OfficeDev/Open-XML-SDK&#34;&gt;OpenXML&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/closedxml/closedxml/wiki&#34;&gt;For more information see the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install ClosedXML via NuGet&lt;/h3&gt; &#xA;&lt;p&gt;If you want to include ClosedXML in your project, you can &lt;a href=&#34;https://www.nuget.org/packages/ClosedXML&#34;&gt;install it directly from NuGet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install ClosedXML, run the following command in the Package Manager Console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package ClosedXML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What can you do with this?&lt;/h3&gt; &#xA;&lt;p&gt;ClosedXML allows you to create Excel files without the Excel application. The typical example is creating Excel reports on a web server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;using (var workbook = new XLWorkbook())&#xA;{&#xA;    var worksheet = workbook.Worksheets.Add(&#34;Sample Sheet&#34;);&#xA;    worksheet.Cell(&#34;A1&#34;).Value = &#34;Hello World!&#34;;&#xA;    worksheet.Cell(&#34;A2&#34;).FormulaA1 = &#34;=MID(A1, 7, 5)&#34;;&#xA;    workbook.SaveAs(&#34;HelloWorld.xlsx&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequent answers&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ClosedXML is not thread-safe. There is no guarantee that &lt;a href=&#34;https://github.com/ClosedXML/ClosedXML/issues/1662&#34;&gt;parallel operations&lt;/a&gt; will work. The underlying OpenXML library is also not thread-safe.&lt;/li&gt; &#xA; &lt;li&gt;If you get an exception &lt;code&gt;The type initializer for &#39;Gdip&#39; threw an exception.&lt;/code&gt; on Linux, try &lt;a href=&#34;https://stackoverflow.com/a/67092403/179494&#34;&gt;these&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/runtime/issues/27200#issuecomment-415327256&#34;&gt;solutions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Be sure to check out our &lt;code&gt;ClosedXML&lt;/code&gt; extension projects&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML.Report&#34;&gt;https://github.com/ClosedXML/ClosedXML.Report&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML.Extensions.AspNet&#34;&gt;https://github.com/ClosedXML/ClosedXML.Extensions.AspNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML.Extensions.Mvc&#34;&gt;https://github.com/ClosedXML/ClosedXML.Extensions.Mvc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML.Extensions.WebApi&#34;&gt;https://github.com/ClosedXML/ClosedXML.Extensions.WebApi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer guidelines&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.ecma-international.org/publications/standards/Ecma-376.htm&#34;&gt;OpenXML specification&lt;/a&gt; is a large and complicated beast. In order for ClosedXML, the wrapper around OpenXML, to support all the features, we rely on community contributions. Before opening an issue to request a new feature, we&#39;d like to urge you to try to implement it yourself and log a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/ClosedXML/ClosedXML/develop/CONTRIBUTING.md&#34;&gt;full developer guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project originally created by Manuel de Leon&lt;/li&gt; &#xA; &lt;li&gt;Current maintainer: &lt;a href=&#34;https://github.com/igitur&#34;&gt;Francois Botha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Master of Computing Patterns: &lt;a href=&#34;https://github.com/Pankraty&#34;&gt;Aleksei Pankratev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logo design by &lt;a href=&#34;https://github.com/Tobaloidee&#34;&gt;@Tobaloidee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/AspNetCore.Docs</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/dotnet/AspNetCore.Docs</id>
    <link href="https://github.com/dotnet/AspNetCore.Docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation for ASP.NET Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ASP.NET Core Docs&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the conceptual ASP.NET Core documentation hosted at &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/getting-started&#34;&gt;docs.microsoft.com/aspnet/core&lt;/a&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/AspNetCore.Docs/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; and the &lt;a href=&#34;https://github.com/dotnet/AspNetCore.Docs/issues&#34;&gt;issues list&lt;/a&gt; if you would like to help.&lt;/p&gt; &#xA;&lt;p&gt;API documentation changes are made in the &lt;a href=&#34;https://github.com/dotnet/AspNetApiDocs&#34;&gt;AspNetApiDocs repository&lt;/a&gt; against the triple slash &lt;code&gt;///&lt;/code&gt; comments.&lt;/p&gt; &#xA;&lt;p&gt;ASP.NET 4.x documentation changes are made in the &lt;a href=&#34;https://github.com/dotnet/AspNetDocs&#34;&gt;dotnet/AspNetDocs repository&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/runtime</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/dotnet/runtime</id>
    <link href="https://github.com/dotnet/runtime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Runtime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dnceng.visualstudio.com/public/_build/latest?definitionId=686&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dnceng.visualstudio.com/public/_apis/build/status/dotnet/runtime/runtime?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/runtime/issues?q=is%3Aissue+is%3Aopen+label%3A%22up-for-grabs%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dotnet/runtime/up-for-grabs?style=flat-square&amp;amp;color=%232EA043&amp;amp;label=help%20wanted&#34; alt=&#34;Help Wanted&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dotnet/runtime&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/732297728826277939?style=flat-square&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=7289DA&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the code to build the .NET runtime, libraries and shared host (&lt;code&gt;dotnet&lt;/code&gt;) installers for all supported platforms, as well as the sources to .NET runtime and libraries.&lt;/p&gt; &#xA;&lt;h2&gt;What is .NET?&lt;/h2&gt; &#xA;&lt;p&gt;Official Starting Page: &lt;a href=&#34;https://dotnet.microsoft.com&#34;&gt;https://dotnet.microsoft.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/get-started&#34;&gt;How to use .NET&lt;/a&gt; (with VS, VS Code, command-line CLI) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;Install official releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/docs/project/dogfooding.md&#34;&gt;Install daily builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core&#34;&gt;Documentation&lt;/a&gt; (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/deploying&#34;&gt;Deploying apps&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/raw/main/os-lifecycle-policy.md&#34;&gt;Supported OS versions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/raw/main/roadmap.md&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/tree/main/release-notes&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How can I contribute?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Many people all over the world have helped make this project better.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; explains what kinds of contributions we welcome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/docs/workflow/README.md&#34;&gt;Workflow Instructions&lt;/a&gt; explains how to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/docs/project/dogfooding.md&#34;&gt;Get Up and Running on .NET Core&lt;/a&gt; explains how to get nightly builds of the runtime and its libraries to test them in your own projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting security issues and security bugs&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href=&#34;https://www.microsoft.com/msrc/faqs-report-an-issue&#34;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see info about related &lt;a href=&#34;https://www.microsoft.com/msrc/bounty-dot-net-core&#34;&gt;Microsoft .NET Core and ASP.NET Core Bug Bounty Program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Filing issues&lt;/h2&gt; &#xA;&lt;p&gt;This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the &lt;code&gt;dotnet&lt;/code&gt; binary (sometimes known as the &lt;code&gt;muxer&lt;/code&gt;) and installation of the .NET runtime and libraries.&lt;/p&gt; &#xA;&lt;p&gt;For other issues, please use the following repos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For overall .NET SDK issues, file in the &lt;a href=&#34;https://github.com/dotnet/sdk&#34;&gt;dotnet/sdk&lt;/a&gt; repo&lt;/li&gt; &#xA; &lt;li&gt;For ASP.NET issues, file in the &lt;a href=&#34;https://github.com/dotnet/aspnetcore&#34;&gt;dotnet/aspnetcore&lt;/a&gt; repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://source.dot.net&#34;&gt;.NET Core source index&lt;/a&gt; / &lt;a href=&#34;https://referencesource.microsoft.com&#34;&gt;.NET Framework source index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/api&#34;&gt;API Reference docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apisof.net&#34;&gt;.NET API Catalog&lt;/a&gt; (incl. APIs from daily builds and API usage info)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-api-docs/wiki&#34;&gt;API docs writing guidelines&lt;/a&gt; - useful when writing /// comments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;.NET Discord Server&lt;/a&gt; - a place to talk and hang out with .NET community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;.NET Runtime is a &lt;a href=&#34;https://www.dotnetfoundation.org/projects&#34;&gt;.NET Foundation&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dotnet&#34;&gt;.NET home repo&lt;/a&gt;&amp;nbsp;- links to 100s of .NET projects, from Microsoft and the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/aspnet/core&#34;&gt;ASP.NET Core home&lt;/a&gt; - the best place to start learning about ASP.NET Core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;https://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;https://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;General .NET OSS discussions: &lt;a href=&#34;https://github.com/dotnet-foundation/Home/discussions&#34;&gt;.NET Foundation Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;.NET (including the runtime repo) is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/LICENSE.TXT&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SeppPenner/awesome-german-piracy</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/SeppPenner/awesome-german-piracy</id>
    <link href="https://github.com/SeppPenner/awesome-german-piracy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of (not only) German piracy sites.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome German piracy &lt;a href=&#34;https://awesome.re&#34;&gt;&lt;img src=&#34;https://awesome.re/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A curated list of (not only) German piracy sites!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Hint: Some of the websites that are marked as offline seem just to block the queries from &lt;a href=&#34;https://shields.io/&#34;&gt;shields.io&lt;/a&gt;. Sorry for that.&lt;/p&gt; &#xA;&lt;p&gt;Hint 2: Most of the links are taken from the researches the blog &lt;a href=&#34;https://tarnkappe.info&#34;&gt;tarnkappe.info&lt;/a&gt; does from time to time. Many thanks to the blog, please support them ;) A report on my Github page from &lt;a href=&#34;https://tarnkappe.info&#34;&gt;tarnkappe.info&lt;/a&gt; (in German) can be found &lt;a href=&#34;https://tarnkappe.info/lesetipps/lesetipps-piraten-links-voraus-und-richtig-fieses-user-tracking-213504.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;German piracy links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/AndroidApps.md&#34;&gt;Android apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/AudioBooks.md&#34;&gt;Audio books&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Documentations.md&#34;&gt;Documentations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/eBooks.md&#34;&gt;eBooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Games.md&#34;&gt;Games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/iOSApps.md&#34;&gt;iOS apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Keygens.md&#34;&gt;Keygens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Lists.md&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/macOsSoftware.md&#34;&gt;macOS software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/MangaAnime.md&#34;&gt;Manga / Anime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Misc.md&#34;&gt;Misc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Movies.md&#34;&gt;Movies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Movies_English.md&#34;&gt;Movies (English)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Movies_Other.md&#34;&gt;Movies (Other)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Music.md&#34;&gt;Music&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/NavigationSoftware.md&#34;&gt;Navigation software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Nfo.md&#34;&gt;Nfo sites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/NulledScripts.md&#34;&gt;Nulled scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/PortableApps.md&#34;&gt;Portable apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/ScienceLibaries.md&#34;&gt;Science libaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/SearchEngines.md&#34;&gt;Search engines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Series.md&#34;&gt;Series&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Series_English.md&#34;&gt;Series (English)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Series_Other.md&#34;&gt;Series (Other)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/SportStreams.md&#34;&gt;Sport streams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Torrents.md&#34;&gt;Torrents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/TvSenders.md&#34;&gt;TV senders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/UsenetForums.md&#34;&gt;Usenet forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/UsenetSearchEngines.md&#34;&gt;Usenet search engines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/Warez.md&#34;&gt;Warez / Different stuff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SeppPenner/awesome-german-piracy/master/Pages/WindowsSoftware.md&#34;&gt;Windows software&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;We do not encourage users to use these websites nor do we support them. This is just an informational resource. If you&#39;re using one of the links above, you will most of the time commit a copyright infringement.&lt;/p&gt; &#xA;&lt;h2&gt;Change history&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/SeppPenner/awesome-german-piracy/raw/master/Changelog.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further links&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/SeppPenner/awesome-german-piracy/raw/master/Links.md&#34;&gt;Links&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>umbraco/Umbraco-CMS</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/umbraco/Umbraco-CMS</id>
    <link href="https://github.com/umbraco/Umbraco-CMS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The simple, flexible and friendly ASP.NET CMS used by more than 730.000 websites&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://umbraco.com&#34;&gt;Umbraco CMS&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://umbraco.visualstudio.com/Umbraco%20Cms/_build?definitionId=75&#34;&gt;&lt;img src=&#34;https://umbraco.visualstudio.com/Umbraco%20Cms/_apis/build/status/Cms%208%20Continuous?branchName=v8/contrib&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=umbraco&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/umbraco.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/umbraco&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/869656431308189746&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Umbraco is the friendliest, most flexible and fastest growing ASP.NET CMS, and used by more than 500,000 websites worldwide. Our mission is to help you deliver delightful digital experiences by making Umbraco friendly, simpler and social.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://umbraco.com&#34;&gt;umbraco.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/img/logo.png&#34; alt=&#34;Umbraco Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;See the official &lt;a href=&#34;https://umbraco.com&#34;&gt;Umbraco website&lt;/a&gt; for an introduction, core mission and values of the product and team behind it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/#join-the-umbraco-community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please also see our &lt;a href=&#34;https://github.com/umbraco/.github/raw/main/.github/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://umbraco.com/cloud&#34;&gt;Umbraco Cloud&lt;/a&gt; is the easiest and fastest way to use Umbraco yet, with full support for all your custom .NET code and integrations. You&#39;re up and running in less than a minute, and your life will be made easier with automated upgrades and a built-in deployment engine. We offer a free 14-day trial, no credit card needed.&lt;/p&gt; &#xA;&lt;p&gt;If you want to DIY, then you can &lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/(https://our.umbraco.com/download)&#34;&gt;download Umbraco&lt;/a&gt; either as a ZIP file or via NuGet. It&#39;s the same version of Umbraco CMS that powers Umbraco Cloud, but you&#39;ll need to find a place to host it yourself, and handling deployments and upgrades will be all up to you.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for Umbraco CMS can be found &lt;a href=&#34;https://our.umbraco.com/documentation/&#34;&gt;on Our Umbraco&lt;/a&gt;. The source for the Umbraco docs is &lt;a href=&#34;https://github.com/umbraco/UmbracoDocs&#34;&gt;open source as well&lt;/a&gt; and we&#39;re happy to look at your documentation contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Join the Umbraco community&lt;/h2&gt; &#xA;&lt;p&gt;Our friendly community is available 24/7 at the community hub, we call &lt;a href=&#34;https://our.umbraco.com/&#34;&gt;&#34;Our Umbraco&#34;&lt;/a&gt;. Our Umbraco features forums for questions and answers, documentation, downloadable plugins for Umbraco, and a rich collection of community resources.&lt;/p&gt; &#xA;&lt;p&gt;Besides &#34;Our&#34;, we all support each other also via Twitter: &lt;a href=&#34;https://twitter.com/umbraco&#34;&gt;Umbraco HQ&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/umbracoproject&#34;&gt;Release Updates&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hashtag/umbraco&#34;&gt;#umbraco&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Umbraco is contribution-focused and community-driven. If you want to contribute back to the Umbraco source code, please check out our &lt;a href=&#34;https://raw.githubusercontent.com/umbraco/Umbraco-CMS/v10/contrib/CONTRIBUTING.md&#34;&gt;guide to contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dbrizov/NaughtyAttributes</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/dbrizov/NaughtyAttributes</id>
    <link href="https://github.com/dbrizov/NaughtyAttributes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Attribute Extensions for Unity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NaughtyAttributes&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unity3d.com/get-unity/download&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/unity-2019.4%2B-blue.svg?sanitize=true&#34; alt=&#34;Unity 2019.4+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openupm.com/packages/com.dbrizov.naughtyattributes/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/com.dbrizov.naughtyattributes?label=openupm&amp;amp;registry_uri=https://package.openupm.com&#34; alt=&#34;openupm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NaughtyAttributes is an extension for the Unity Inspector.&lt;/p&gt; &#xA;&lt;p&gt;It expands the range of attributes that Unity provides so that you can create powerful inspectors without the need of custom editors or property drawers. It also provides attributes that can be applied to non-serialized fields or functions.&lt;/p&gt; &#xA;&lt;p&gt;Most of the attributes are implemented using Unity&#39;s &lt;code&gt;CustomPropertyDrawer&lt;/code&gt;, so they will work in your custom editors. The attributes that won&#39;t work in your custom editors are the meta attributes and some drawer attributes such as &lt;code&gt;ReorderableList&lt;/code&gt;, &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;ShowNonSerializedField&lt;/code&gt; and &lt;code&gt;ShowNativeProperty&lt;/code&gt;.&lt;br&gt; If you want all of the attributes to work in your custom editors, however, you must inherit from &lt;code&gt;NaughtyInspector&lt;/code&gt; and use the &lt;code&gt;NaughtyEditorGUI.PropertyField_Layout&lt;/code&gt; function instead of &lt;code&gt;EditorGUILayout.PropertyField&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Unity &lt;strong&gt;2019.4&lt;/strong&gt; or later versions. Don&#39;t forget to include the NaughtyAttributes namespace.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The package is available on the &lt;a href=&#34;https://openupm.com&#34;&gt;openupm registry&lt;/a&gt;. You can install it via &lt;a href=&#34;https://github.com/openupm/openupm-cli&#34;&gt;openupm-cli&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;openupm add com.dbrizov.naughtyattributes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;You can also install via git url by adding this entry in your &lt;strong&gt;manifest.json&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;com.dbrizov.naughtyattributes&#34;: &#34;https://github.com/dbrizov/NaughtyAttributes.git#upm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;You can also download it from the &lt;a href=&#34;https://assetstore.unity.com/packages/tools/utilities/naughtyattributes-129996&#34;&gt;Asset Store&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dbrizov.github.io/na-docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dbrizov/na-docs&#34;&gt;Documentation Repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;NaughtyAttributes is an open-source project that I am developing in my free time. If you like it you can support me by donating.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/dbrizov&#34;&gt;PayPal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buymeacoffee.com/dbrizov&#34;&gt;Buy Me A Coffee&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;h2&gt;Special Attributes&lt;/h2&gt; &#xA;&lt;h3&gt;AllowNesting&lt;/h3&gt; &#xA;&lt;p&gt;This attribute must be used in some cases when you want meta attributes to work inside serializable nested structs or classes. You can check in which cases you need to use it &lt;a href=&#34;https://dbrizov.github.io/na-docs/attributes/special_attributes/allow_nesting.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;    public MyStruct myStruct;&#xA;}&#xA;&#xA;[System.Serializable]&#xA;public struct MyStruct&#xA;{&#xA;    public bool enableFlag;&#xA;&#xA;    [EnableIf(&#34;enableFlag&#34;)]&#xA;    [AllowNesting] // Because it&#39;s nested we need to explicitly allow nesting&#xA;    public int integer;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Drawer Attributes&lt;/h2&gt; &#xA;&lt;p&gt;Provide special draw options to serialized fields. A field can have only one DrawerAttribute. If a field has more than one, only the bottom one will be used.&lt;/p&gt; &#xA;&lt;h3&gt;AnimatorParam&lt;/h3&gt; &#xA;&lt;p&gt;Select an Animator paramater via dropdown interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;public Animator someAnimator;&#xA;&#xA;&#x9;[AnimatorParam(&#34;someAnimator&#34;)]&#xA;&#x9;public int paramHash;&#xA;&#xA;&#x9;[AnimatorParam(&#34;someAnimator&#34;)]&#xA;&#x9;public string paramName;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/AnimatorParam_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Button&lt;/h3&gt; &#xA;&lt;p&gt;A method can be marked as a button. A button appears in the inspector and executes the method if clicked. Works both with instance and static methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Button]&#xA;&#x9;private void MethodOne() { }&#xA;&#xA;&#x9;[Button(&#34;Button Text&#34;)]&#xA;&#x9;private void MethodTwo() { }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Button_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CurveRange&lt;/h3&gt; &#xA;&lt;p&gt;Set bounds and modify curve color for AnimationCurves&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[CurveRange(-1, -1, 1, 1)]&#xA;&#x9;public AnimationCurve curve;&#xA;&#x9;&#xA;&#x9;[CurveRange(EColor.Orange)]&#xA;&#x9;public AnimationCurve curve1;&#xA;&#x9;&#xA;&#x9;[CurveRange(0, 0, 5, 5, EColor.Red)]&#xA;&#x9;public AnimationCurve curve2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/CurveRange_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dropdown&lt;/h3&gt; &#xA;&lt;p&gt;Provides an interface for dropdown value selection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Dropdown(&#34;intValues&#34;)]&#xA;&#x9;public int intValue;&#xA;&#xA;&#x9;[Dropdown(&#34;StringValues&#34;)]&#xA;&#x9;public string stringValue;&#xA;&#xA;&#x9;[Dropdown(&#34;GetVectorValues&#34;)]&#xA;&#x9;public Vector3 vectorValue;&#xA;&#xA;&#x9;private int[] intValues = new int[] { 1, 2, 3, 4, 5 };&#xA;&#xA;&#x9;private List&amp;lt;string&amp;gt; StringValues { get { return new List&amp;lt;string&amp;gt;() { &#34;A&#34;, &#34;B&#34;, &#34;C&#34;, &#34;D&#34;, &#34;E&#34; }; } }&#xA;&#xA;&#x9;private DropdownList&amp;lt;Vector3&amp;gt; GetVectorValues()&#xA;&#x9;{&#xA;&#x9;&#x9;return new DropdownList&amp;lt;Vector3&amp;gt;()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;{ &#34;Right&#34;,   Vector3.right },&#xA;&#x9;&#x9;&#x9;{ &#34;Left&#34;,    Vector3.left },&#xA;&#x9;&#x9;&#x9;{ &#34;Up&#34;,      Vector3.up },&#xA;&#x9;&#x9;&#x9;{ &#34;Down&#34;,    Vector3.down },&#xA;&#x9;&#x9;&#x9;{ &#34;Forward&#34;, Vector3.forward },&#xA;&#x9;&#x9;&#x9;{ &#34;Back&#34;,    Vector3.back }&#xA;&#x9;&#x9;};&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Dropdown_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;EnumFlags&lt;/h3&gt; &#xA;&lt;p&gt;Provides dropdown interface for setting enum flags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public enum Direction&#xA;{&#xA;&#x9;None = 0,&#xA;&#x9;Right = 1 &amp;lt;&amp;lt; 0,&#xA;&#x9;Left = 1 &amp;lt;&amp;lt; 1,&#xA;&#x9;Up = 1 &amp;lt;&amp;lt; 2,&#xA;&#x9;Down = 1 &amp;lt;&amp;lt; 3&#xA;}&#xA;&#xA;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[EnumFlags]&#xA;&#x9;public Direction flags;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/EnumFlags_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Expandable&lt;/h3&gt; &#xA;&lt;p&gt;Make scriptable objects expandable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Expandable]&#xA;&#x9;public ScriptableObject scriptableObject;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Expandable_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;HorizontalLine&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[HorizontalLine(color: EColor.Red)]&#xA;&#x9;public int red;&#xA;&#xA;&#x9;[HorizontalLine(color: EColor.Green)]&#xA;&#x9;public int green;&#xA;&#xA;&#x9;[HorizontalLine(color: EColor.Blue)]&#xA;&#x9;public int blue;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/HorizontalLine_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;InfoBox&lt;/h3&gt; &#xA;&lt;p&gt;Used for providing additional information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[InfoBox(&#34;This is my int&#34;, EInfoBoxType.Normal)]&#xA;&#x9;public int myInt;&#xA;&#xA;&#x9;[InfoBox(&#34;This is my float&#34;, EInfoBoxType.Warning)]&#xA;&#x9;public float myFloat;&#xA;&#xA;&#x9;[InfoBox(&#34;This is my vector&#34;, EInfoBoxType.Error)]&#xA;&#x9;public Vector3 myVector;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/InfoBox_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;InputAxis&lt;/h3&gt; &#xA;&lt;p&gt;Select an input axis via dropdown interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[InputAxis]&#xA;&#x9;public string inputAxis;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/InputAxis_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Layer&lt;/h3&gt; &#xA;&lt;p&gt;Select a layer via dropdown interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Layer]&#xA;&#x9;public string layerName;&#xA;&#xA;&#x9;[Layer]&#xA;&#x9;public int layerIndex;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Layer_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;MinMaxSlider&lt;/h3&gt; &#xA;&lt;p&gt;A double slider. The &lt;strong&gt;min value&lt;/strong&gt; is saved to the &lt;strong&gt;X&lt;/strong&gt; property, and the &lt;strong&gt;max value&lt;/strong&gt; is saved to the &lt;strong&gt;Y&lt;/strong&gt; property of a &lt;strong&gt;Vector2&lt;/strong&gt; field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[MinMaxSlider(0.0f, 100.0f)]&#xA;&#x9;public Vector2 minMaxSlider;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/MinMaxSlider_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ProgressBar&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ProgressBar(&#34;Health&#34;, 300, EColor.Red)]&#xA;&#x9;public int health = 250;&#xA;&#xA;&#x9;[ProgressBar(&#34;Mana&#34;, 100, EColor.Blue)]&#xA;&#x9;public int mana = 25;&#xA;&#xA;&#x9;[ProgressBar(&#34;Stamina&#34;, 200, EColor.Green)]&#xA;&#x9;public int stamina = 150;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ProgressBar_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ReorderableList&lt;/h3&gt; &#xA;&lt;p&gt;Provides array type fields with an interface for easy reordering of elements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ReorderableList]&#xA;&#x9;public int[] intArray;&#xA;&#xA;&#x9;[ReorderableList]&#xA;&#x9;public List&amp;lt;float&amp;gt; floatArray;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ReorderableList_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ResizableTextArea&lt;/h3&gt; &#xA;&lt;p&gt;A resizable text area where you can see the whole text. Unlike Unity&#39;s &lt;strong&gt;Multiline&lt;/strong&gt; and &lt;strong&gt;TextArea&lt;/strong&gt; attributes where you can see only 3 rows of a given text, and in order to see it or modify it you have to manually scroll down to the desired row.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ResizableTextArea]&#xA;&#x9;public string resizableTextArea;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ResizableTextArea_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Scene&lt;/h3&gt; &#xA;&lt;p&gt;Select a scene from the build settings via dropdown interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Scene]&#xA;&#x9;public string bootScene; // scene name&#xA;&#xA;&#x9;[Scene]&#xA;&#x9;public int tutorialScene; // scene index&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Scene_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ShowAssetPreview&lt;/h3&gt; &#xA;&lt;p&gt;Shows the texture preview of a given asset (Sprite, Prefab...).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ShowAssetPreview]&#xA;&#x9;public Sprite sprite;&#xA;&#xA;&#x9;[ShowAssetPreview(128, 128)]&#xA;&#x9;public GameObject prefab;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ShowAssetPreview_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ShowNativeProperty&lt;/h3&gt; &#xA;&lt;p&gt;Shows native C# properties in the inspector. All native properties are displayed at the bottom of the inspector after the non-serialized fields and before the method buttons. It supports only certain types &lt;strong&gt;(bool, int, long, float, double, string, Vector2, Vector3, Vector4, Color, Bounds, Rect, UnityEngine.Object)&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;public List&amp;lt;Transform&amp;gt; transforms;&#xA;&#xA;&#x9;[ShowNativeProperty]&#xA;&#x9;public int TransformsCount =&amp;gt; transforms.Count;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ShowNativeProperty_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ShowNonSerializedField&lt;/h3&gt; &#xA;&lt;p&gt;Shows non-serialized fields in the inspector. All non-serialized fields are displayed at the bottom of the inspector before the method buttons. Keep in mind that if you change a non-static non-serialized field in the code - the value in the inspector will be updated after you press &lt;strong&gt;Play&lt;/strong&gt; in the editor. There is no such issue with static non-serialized fields because their values are updated at compile time. It supports only certain types &lt;strong&gt;(bool, int, long, float, double, string, Vector2, Vector3, Vector4, Color, Bounds, Rect, UnityEngine.Object)&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ShowNonSerializedField]&#xA;&#x9;private int myInt = 10;&#xA;&#xA;&#x9;[ShowNonSerializedField]&#xA;&#x9;private const float PI = 3.14159f;&#xA;&#xA;&#x9;[ShowNonSerializedField]&#xA;&#x9;private static readonly Vector3 CONST_VECTOR = Vector3.one;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ShowNonSerializedField_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SortingLayer&lt;/h3&gt; &#xA;&lt;p&gt;Select a sorting layer via dropdown interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[SortingLayer]&#xA;&#x9;public string layerName;&#xA;&#xA;&#x9;[SortingLayer]&#xA;&#x9;public int layerId;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/SortingLayer_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tag&lt;/h3&gt; &#xA;&lt;p&gt;Select a tag via dropdown interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Tag]&#xA;&#x9;public string tagField;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Tag_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Meta Attributes&lt;/h2&gt; &#xA;&lt;p&gt;Give the fields meta data. A field can have more than one meta attributes.&lt;/p&gt; &#xA;&lt;h3&gt;BoxGroup&lt;/h3&gt; &#xA;&lt;p&gt;Surrounds grouped fields with a box.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[BoxGroup(&#34;Integers&#34;)]&#xA;&#x9;public int firstInt;&#xA;&#x9;[BoxGroup(&#34;Integers&#34;)]&#xA;&#x9;public int secondInt;&#xA;&#xA;&#x9;[BoxGroup(&#34;Floats&#34;)]&#xA;&#x9;public float firstFloat;&#xA;&#x9;[BoxGroup(&#34;Floats&#34;)]&#xA;&#x9;public float secondFloat;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/BoxGroup_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Foldout&lt;/h3&gt; &#xA;&lt;p&gt;Makes a foldout group.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Foldout(&#34;Integers&#34;)]&#xA;&#x9;public int firstInt;&#xA;&#x9;[Foldout(&#34;Integers&#34;)]&#xA;&#x9;public int secondInt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Foldout_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;EnableIf / DisableIf&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;public bool enableMyInt;&#xA;&#xA;&#x9;[EnableIf(&#34;enableMyInt&#34;)]&#xA;&#x9;public int myInt;&#xA;&#xA;&#x9;[EnableIf(&#34;Enabled&#34;)]&#xA;&#x9;public float myFloat;&#xA;&#xA;&#x9;[EnableIf(&#34;NotEnabled&#34;)]&#xA;&#x9;public Vector3 myVector;&#xA;&#xA;&#x9;public bool Enabled() { return true; }&#xA;&#xA;&#x9;public bool NotEnabled =&amp;gt; false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/EnableIf_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can have more than one condition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;public bool flag0;&#xA;&#x9;public bool flag1;&#xA;&#xA;&#x9;[EnableIf(EConditionOperator.And, &#34;flag0&#34;, &#34;flag1&#34;)]&#xA;&#x9;public int enabledIfAll;&#xA;&#xA;&#x9;[EnableIf(EConditionOperator.Or, &#34;flag0&#34;, &#34;flag1&#34;)]&#xA;&#x9;public int enabledIfAny;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ShowIf / HideIf&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;public bool showInt;&#xA;&#xA;&#x9;[ShowIf(&#34;showInt&#34;)]&#xA;&#x9;public int myInt;&#xA;&#xA;&#x9;[ShowIf(&#34;AlwaysShow&#34;)]&#xA;&#x9;public float myFloat;&#xA;&#xA;&#x9;[ShowIf(&#34;NeverShow&#34;)]&#xA;&#x9;public Vector3 myVector;&#xA;&#xA;&#x9;public bool AlwaysShow() { return true; }&#xA;&#xA;&#x9;public bool NeverShow =&amp;gt; false;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ShowIf_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can have more than one condition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;public bool flag0;&#xA;&#x9;public bool flag1;&#xA;&#xA;&#x9;[ShowIf(EConditionOperator.And, &#34;flag0&#34;, &#34;flag1&#34;)]&#xA;&#x9;public int showIfAll;&#xA;&#xA;&#x9;[ShowIf(EConditionOperator.Or, &#34;flag0&#34;, &#34;flag1&#34;)]&#xA;&#x9;public int showIfAny;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Label&lt;/h3&gt; &#xA;&lt;p&gt;Override default field label.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Label(&#34;Short Name&#34;)]&#xA;&#x9;public string veryVeryLongName;&#xA;&#xA;&#x9;[Label(&#34;RGB&#34;)]&#xA;&#x9;public Vector3 vectorXYZ;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Label_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OnValueChanged&lt;/h3&gt; &#xA;&lt;p&gt;Detects a value change and executes a callback. Keep in mind that the event is detected only when the value is changed from the inspector. If you want a runtime event, you should probably use an event/delegate and subscribe to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[OnValueChanged(&#34;OnValueChangedCallback&#34;)]&#xA;&#x9;public int myInt;&#xA;&#xA;&#x9;private void OnValueChangedCallback()&#xA;&#x9;{&#xA;&#x9;&#x9;Debug.Log(myInt);&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ReadOnly&lt;/h3&gt; &#xA;&lt;p&gt;Make a field read only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ReadOnly]&#xA;&#x9;public Vector3 forwardVector = Vector3.forward;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ReadOnly_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validator Attributes&lt;/h2&gt; &#xA;&lt;p&gt;Used for validating the fields. A field can have infinite number of validator attributes.&lt;/p&gt; &#xA;&lt;h3&gt;MinValue / MaxValue&lt;/h3&gt; &#xA;&lt;p&gt;Clamps integer and float fields.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[MinValue(0), MaxValue(10)]&#xA;&#x9;public int myInt;&#xA;&#xA;&#x9;[MinValue(0.0f)]&#xA;&#x9;public float myFloat;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/MinValueMaxValue_Inspector.gif&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Required&lt;/h3&gt; &#xA;&lt;p&gt;Used to remind the developer that a given reference type field is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[Required]&#xA;&#x9;public Transform myTransform;&#xA;&#xA;&#x9;[Required(&#34;Custom required text&#34;)]&#xA;&#x9;public GameObject myGameObject;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/Required_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ValidateInput&lt;/h3&gt; &#xA;&lt;p&gt;The most powerful ValidatorAttribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class _NaughtyComponent : MonoBehaviour&#xA;{&#xA;&#x9;[ValidateInput(&#34;IsNotNull&#34;)]&#xA;&#x9;public Transform myTransform;&#xA;&#xA;&#x9;[ValidateInput(&#34;IsGreaterThanZero&#34;, &#34;myInteger must be greater than zero&#34;)]&#xA;&#x9;public int myInt;&#xA;&#xA;&#x9;private bool IsNotNull(Transform tr)&#xA;&#x9;{&#xA;&#x9;&#x9;return tr != null;&#xA;&#x9;}&#xA;&#xA;&#x9;private bool IsGreaterThanZero(int value)&#xA;&#x9;{&#xA;&#x9;&#x9;return value &amp;gt; 0;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbrizov/NaughtyAttributes/raw/master/Assets/NaughtyAttributes/Documentation~/ValidateInput_Inspector.png&#34; alt=&#34;inspector&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Raicuparta/two-forks-vr</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/Raicuparta/two-forks-vr</id>
    <link href="https://github.com/Raicuparta/two-forks-vr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Firewatch VR Mod&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3955124/167098096-e4894ce8-b2d0-4dda-90a0-0c236db72d76.png&#34; alt=&#34;Two Forks VR&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Two Forks VR is a VR mod for &lt;a href=&#34;https://store.steampowered.com/app/383870/Firewatch/&#34;&gt;Firewatch&lt;/a&gt;, with full motion control support and comfort options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/c/Raicuparta&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?color=f00&amp;amp;label=Youtube&amp;amp;logoColor=f00&amp;amp;style=flat-square&amp;amp;url=https%3A%2F%2Fyoutube-channel-badge-orpin.vercel.app%2Fapi%2Fsubscriber&#34; alt=&#34;Raicuparta&#39;s Youtube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/raivr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?style=flat-square&amp;amp;color=ff424d&amp;amp;label=Patreon&amp;amp;query=data.attributes.patron_count&amp;amp;suffix=%20patrons&amp;amp;url=https%3A%2F%2Fwww.patreon.com%2Fapi%2Fcampaigns%2F7004713&amp;amp;logo=patreon&#34; alt=&#34;Support on Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/raicuparta/5usd&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-Donate-blue?style=flat-square&amp;amp;color=blue&amp;amp;logo=paypal&#34; alt=&#34;Donate with PayPal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Raicuparta/two-forks-vr/releases/latest&#34;&gt;Download the latest release zip&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract it anywhere (doesn&#39;t have to be in the game directory).&lt;/li&gt; &#xA; &lt;li&gt;Drag &lt;code&gt;Firewatch.exe&lt;/code&gt; and drop it on top of &lt;code&gt;TwoForksVrInstaller.exe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the game as usual.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A compatible version of Firewatch. Currently that&#39;s version 1.1.2. This version is available in these stores: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://store.steampowered.com/app/383870/Firewatch/&#34;&gt;Steam&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.gog.com/en/game/firewatch&#34;&gt;GOG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.xbox.com/es-ES/games/store/firewatch/bqqkg9h2stc0&#34;&gt;Xbox PC (Game Pass)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A PC ready for PCVR. Two Forks VR doesn&#39;t work on standalone VR platforms.&lt;/li&gt; &#xA; &lt;li&gt;An OpenVR-compatible VR headset. Examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Quest 2 connected to the PC via Link Cable, Air Link, Virtual Desktop, ALVR, etc&lt;/li&gt; &#xA;   &lt;li&gt;Any Oculus Rift&lt;/li&gt; &#xA;   &lt;li&gt;Valve Index&lt;/li&gt; &#xA;   &lt;li&gt;Any Vive&lt;/li&gt; &#xA;   &lt;li&gt;Any Windows Mixed Reality device (probably?)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;VR controllers. This isn&#39;t playable with a normal game controller, motion controls are required.&lt;/li&gt; &#xA; &lt;li&gt;Steam and SteamVR installed (even if you&#39;re playing from GOG or Game Pass).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Xbox app / Game Pass version&lt;/h2&gt; &#xA;&lt;p&gt;If you got the game from the PC Xbox app, or from your PC Xbox Game Pass Subscription, you&#39;ll need to follow some steps to make the game moddable. &lt;strong&gt;You need to do this before installing Firewatch. If you&#39;ve already installed Firewatch on the Xbox PC app, uninstall it before following these steps&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Important&lt;/strong&gt;! Be sure to have the most recent version of the Xbox app and the GamingServices installed.&lt;/li&gt; &#xA; &lt;li&gt;Close the Xbox app (close it in the system tray too, to make sure it&#39;s gone completely).&lt;/li&gt; &#xA; &lt;li&gt;Get the &lt;a href=&#34;https://www.microsoft.com/en-us/p/xbox-insider-hub/9pldpg46g47z&#34;&gt;Xbox Insider Hub app&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start the Xbox Insider Hub app.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Previews&#34;, and then &#34;Windows Gaming&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Join&#34; and wait for the process to finish.&lt;/li&gt; &#xA; &lt;li&gt;At this point, you might need to let the Xbox app install some updates. Open Windows App Store and let it install all pending updates just to be sure.&lt;/li&gt; &#xA; &lt;li&gt;Open the Xbox app.&lt;/li&gt; &#xA; &lt;li&gt;Click on your user name on the top left, select &#34;Settings&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Under the &#34;General&#34; tab, in the &#34;Game install options&#34; section, confirm that it is showing you a folder where games will be installed. Change it if you want. &lt;a href=&#34;https://user-images.githubusercontent.com/3955124/171329511-aa344df6-df1a-4c2e-a8cf-1a0e2427602c.png&#34;&gt;Screenshot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t see this input field, then you probably don&#39;t have the insider version of the Xbox app (or they changed how this works again). Make sure the Xbox app is updated to the insider version and try again.&lt;/li&gt; &#xA; &lt;li&gt;Install Firewatch.&lt;/li&gt; &#xA; &lt;li&gt;Find Firewatch.exe in the folder specified in the Xbox app settings (in my case &lt;code&gt;C:/XboxGames/Firewatch/Content/Firewatch.exe&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Right click the &lt;code&gt;TwoForksVR.exe&lt;/code&gt; file you downloaded from the &lt;a href=&#34;https://github.com/Raicuparta/two-forks-vr/releases/latest&#34;&gt;release zip&lt;/a&gt;, and select &#34;Properties&#34;.&lt;/li&gt; &#xA; &lt;li&gt;In the &#34;Compatibility&#34; tab, enable &#34;Run this program as an administrator&#34;. &lt;a href=&#34;https://user-images.githubusercontent.com/3955124/171334868-1a185df4-1068-4faf-b99c-0e5a147beeca.png&#34;&gt;Screenshot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Drag Firewatch.exe and drop it on top of TwoForksVR.exe to install the mod.&lt;/li&gt; &#xA; &lt;li&gt;Run the game from the Xbox app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Graphics and Performance&lt;/h2&gt; &#xA;&lt;p&gt;As usual, the game isn&#39;t optimized for VR, so it&#39;s not always easy to get good performance. I have set sensible defaults for graphics settings that run well on my setup (RTX 2070 Super, tested with a Rift S and Quest 2), while still looking decent.&lt;/p&gt; &#xA;&lt;p&gt;For reference, here are the defaults I set:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3955124/167103353-097946eb-52e7-48ae-9215-920016fe0bb9.png&#34; alt=&#34;Two Forks VR Graphics Settings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SSAO, Light Shafts, and Bloom, are all disabled by default, because the way these are implemented just looks a bit broken in VR, and they have a big effect on performance. I recommend keeping them off. You can lower shadow and world quality for further performance improvements.&lt;/p&gt; &#xA;&lt;p&gt;Avoid running the game in very high refresh rates (if you can change it in your headset, I&#39;d recommend using the lower settings in the 72-90Hz range).&lt;/p&gt; &#xA;&lt;p&gt;Two Forks VR ships with &lt;a href=&#34;https://github.com/fholger/openvr_fsr&#34;&gt;openvr_fsr&lt;/a&gt;. To enable FSR for a performance boost, edit &lt;code&gt;Firewatch\Firewatch_Data\Plugins\openvr_mod.cfg&lt;/code&gt;. Check the &lt;a href=&#34;https://github.com/fholger/openvr_fsr#readme&#34;&gt;openvr_fsr readme&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;How to Uninstall&lt;/h2&gt; &#xA;&lt;p&gt;Easiest way to uninstall is to use the &#34;verify game files&#34; option in whatever launcher&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you find bugs or are otherwise facing problems with the mod, please &lt;a href=&#34;https://github.com/Raicuparta/two-forks-vr/issues/new/choose&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also find me on the &lt;a href=&#34;https://discord.gg/gEEqTVFzvD&#34;&gt;Flatscreen to VR Discord&lt;/a&gt;. After you pick the Firewatch role, you&#39;ll find my channels there.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aspnetboilerplate/aspnetboilerplate</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/aspnetboilerplate/aspnetboilerplate</id>
    <link href="https://github.com/aspnetboilerplate/aspnetboilerplate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ASP.NET Boilerplate - Web Application Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ASP.NET Boilerplate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://ejenkins.dynu.net:5480/blue/organizations/jenkins/aspnet-boilerplate-nightly/activity&#34;&gt;&lt;img src=&#34;http://ejenkins.dynu.net:5480/job/aspnet-boilerplate-nightly/badge/icon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Abp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Abp.svg?style=flat-square&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Nightly-Builds&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/abp-nightly/vpre/Abp.svg?style=flat-square&#34; alt=&#34;MyGet (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Abp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Abp.svg?style=flat-square&#34; alt=&#34;NuGet Download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is ABP?&lt;/h2&gt; &#xA;&lt;p&gt;ASP.NET Boilerplate is a general purpose &lt;strong&gt;application framework&lt;/strong&gt; specially designed for new modern web applications. It uses already &lt;strong&gt;familiar tools&lt;/strong&gt; and implements &lt;strong&gt;best practices&lt;/strong&gt; around them to provide you a &lt;strong&gt;SOLID development experience&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ASP.NET Boilerplate works with the latest &lt;strong&gt;ASP.NET Core&lt;/strong&gt; &amp;amp; &lt;strong&gt;EF Core&lt;/strong&gt; but also supports ASP.NET MVC 5.x &amp;amp; EF 6.x as well.&lt;/p&gt; &#xA;&lt;h6&gt;Modular Design&lt;/h6&gt; &#xA;&lt;p&gt;Designed to be &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Module-System&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;modular&lt;/strong&gt;&lt;/a&gt; and &lt;strong&gt;extensible&lt;/strong&gt;, ABP provides the infrastructure to build your own modules, too.&lt;/p&gt; &#xA;&lt;h6&gt;Multi-Tenancy&lt;/h6&gt; &#xA;&lt;p&gt;&lt;strong&gt;SaaS&lt;/strong&gt; applications made easy! Integrated &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Multi-Tenancy&#34; target=&#34;_blank&#34;&gt;multi-tenancy&lt;/a&gt; from database to UI.&lt;/p&gt; &#xA;&lt;h6&gt;Well-Documented&lt;/h6&gt; &#xA;&lt;p&gt;Comprehensive &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt; and quick start tutorials.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t Repeat Yourself! ASP.NET Boilerplate automates common software development tasks by convention. You focus on your business code!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aspnetboilerplate/aspnetboilerplate/dev/doc/img/abp-concerns.png&#34; alt=&#34;ASP.NET Boilerplate&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Introduction&#34; target=&#34;_blank&#34;&gt;Introduction&lt;/a&gt; document for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Layered Architecture&lt;/h2&gt; &#xA;&lt;p&gt;ABP provides a layered architectural model based on &lt;strong&gt;Domain Driven Design&lt;/strong&gt; and provides a &lt;strong&gt;SOLID&lt;/strong&gt; model for your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aspnetboilerplate/aspnetboilerplate/dev/doc/img/abp-nlayer-architecture.png&#34; alt=&#34;NLayer Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/NLayer-Architecture&#34; target=&#34;_blank&#34;&gt;NLayer Architecture&lt;/a&gt; document for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Nuget Packages&lt;/h2&gt; &#xA;&lt;p&gt;ASP.NET Boilerplate is distributed as NuGet packages.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.AspNetCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.AspNetCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.AspNetCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web.Common&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web.Common&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Web.Common.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Web.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web.Mvc&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web.Mvc&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Web.Mvc.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web.Api&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web.Api&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Web.Api.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web.Api.OData&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web.Api.OData&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.eb.Api.OData.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web.Resources&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web.Resources&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Web.Resources.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Web.SignalR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Web.SignalR&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Web.SignalR.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Owin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Owin&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Owin.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.EntityFramework.Common&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.EntityFramework.Common&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.EntityFramework.Common.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.EntityFramework&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.EntityFramework&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.EntityFramework.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.EntityFramework.GraphDiff&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.EntityFramework.GraphDiff&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.EntityFramework.GraphDiff.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.EntityFrameworkCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.EntityFrameworkCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.EntityFrameworkCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.NHibernate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.NHibernate&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.NHibernate.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Dapper&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Dapper&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Dapper.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.FluentMigrator&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.FluentMigrator&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.FluentMigrator.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.AspNetCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.AspNetCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.AspNetCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.AspNetCore.SignalR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.AspNetCore.SignalR&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.AspNetCore.SignalR.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.AutoMapper&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.AutoMapper&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.AutoMapper.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.HangFire&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.HangFire&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.HangFire.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.HangFire.AspNetCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.HangFire.AspNetCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.HangFire.AspNetCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Castle.Log4Net&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Castle.Log4Net&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Castle.Log4Net.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.RedisCache&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.RedisCache&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.RedisCache.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.RedisCache.ProtoBuf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.RedisCache.ProtoBuf&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.RedisCache.ProtoBuf.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.MailKit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.MailKit&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.MailKit.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Quartz&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Quartz&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Quartz.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.TestBase&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.TestBase&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.TestBase.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.AspNetCore.TestBase&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.AspNetCore.TestBase&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.AspNetCore.TestBase.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Module Zero&lt;/h1&gt; &#xA;&lt;h2&gt;What is &#39;Module Zero&#39;?&lt;/h2&gt; &#xA;&lt;p&gt;This is an &lt;a href=&#34;https://aspnetboilerplate.com/&#34; target=&#34;_blank&#34;&gt;ASP.NET Boilerplate&lt;/a&gt; module integrated with Microsoft &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/introduction-to-aspnet-identity&#34; target=&#34;_blank&#34;&gt;ASP.NET Identity&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implements abstract concepts of ASP.NET Boilerplate framework:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Setting-Management&#34; target=&#34;_blank&#34;&gt;Setting store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Audit-Logging&#34; target=&#34;_blank&#34;&gt;Audit log store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Background-Jobs-And-Workers&#34; target=&#34;_blank&#34;&gt;Background job store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Feature-Management&#34; target=&#34;_blank&#34;&gt;Feature store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Notification-System&#34; target=&#34;_blank&#34;&gt;Notification store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Authorization&#34; target=&#34;_blank&#34;&gt;Permission checker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also adds common enterprise application features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/User-Management&#34; target=&#34;_blank&#34;&gt;User&lt;/a&gt;, &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Role-Management&#34; target=&#34;_blank&#34;&gt;Role&lt;/a&gt; and &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Permission-Management&#34; target=&#34;_blank&#34;&gt;Permission&lt;/a&gt;&lt;/strong&gt; management for applications that require authentication and authorization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Tenant-Management&#34; target=&#34;_blank&#34;&gt;Tenant&lt;/a&gt; and &lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Edition-Management&#34; target=&#34;_blank&#34;&gt;Edition&lt;/a&gt;&lt;/strong&gt; management for SaaS applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Organization-Units&#34; target=&#34;_blank&#34;&gt;Organization Units&lt;/a&gt;&lt;/strong&gt; management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Language-Management&#34; target=&#34;_blank&#34;&gt;Language and localization&lt;/a&gt; text&lt;/strong&gt; management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Identity-Server&#34; target=&#34;_blank&#34;&gt;Identity Server 4&lt;/a&gt;&lt;/strong&gt; integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Module Zero packages define entities and implement base domain logic for these concepts.&lt;/p&gt; &#xA;&lt;h2&gt;NuGet Packages&lt;/h2&gt; &#xA;&lt;h3&gt;ASP.NET Core Identity Packages&lt;/h3&gt; &#xA;&lt;p&gt;Packages integrated into &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/introduction-to-aspnet-identity&#34; target=&#34;_blank&#34;&gt;ASP.NET Core Identity&lt;/a&gt; and &lt;a href=&#34;http://identityserver.io/&#34; target=&#34;_blank&#34;&gt;Identity Server 4&lt;/a&gt; (supports .NET Standard).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.ZeroCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.ZeroCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.ZeroCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.ZeroCore.EntityFrameworkCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.ZeroCore.EntityFrameworkCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.ZeroCore.EntityFrameworkCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.ZeroCore.IdentityServer4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.ZeroCore.IdentityServer4.EntityFrameworkCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.EntityFrameworkCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.vNext.EntityFrameworkCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.ZeroCore.IdentityServer4.vNext&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.vNext&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.ZeroCore.IdentityServer4.vNext.EntityFrameworkCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.vNext.EntityFrameworkCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.ZeroCore.IdentityServer4.vNext.EntityFrameworkCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ASP.NET Identity Packages&lt;/h3&gt; &#xA;&lt;p&gt;Packages integrated into &lt;a href=&#34;https://www.asp.net/identity&#34; target=&#34;_blank&#34;&gt;ASP.NET Identity&lt;/a&gt; 2.x.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Zero&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Zero&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Zero.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Zero.Owin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Zero.Owin&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Zero.Owin.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Zero.AspNetCore&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Zero.AspNetCore&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Zero.AspNetCore.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Zero.EntityFramework&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Zero.EntityFramework&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Zero.EntityFramework.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Shared Packages&lt;/h3&gt; &#xA;&lt;p&gt;Shared packages between the Abp.ZeroCore.* and Abp.Zero.* packages.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Package&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Zero.Common&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Zero.Common&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Zero.Common.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Abp.Zero.Ldap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://badge.fury.io/nu/Abp.Zero.Ldap&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/Abp.Zero.Ldap.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Startup Templates&lt;/h2&gt; &#xA;&lt;p&gt;You can create your project from startup templates to easily start with Module Zero:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Startup-Template-Angular&#34; target=&#34;_blank&#34;&gt;ASP.NET Core &amp;amp; Angular&lt;/a&gt; based startup project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Startup-Template-Core&#34; target=&#34;_blank&#34;&gt;ASP.NET Core MVC &amp;amp; jQuery&lt;/a&gt; based startup project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aspnetboilerplate.com/Pages/Documents/Zero/Startup-Template&#34; target=&#34;_blank&#34;&gt;ASP.NET Core MVC 5.x / AngularJS&lt;/a&gt; based startup project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A screenshot of the ASP.NET Core based startup template:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aspnetboilerplate/aspnetboilerplate/dev/doc/img/module-zero-core-template-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web site &amp;amp; Documentation: &lt;a href=&#34;https://aspnetboilerplate.com&#34;&gt;https://aspnetboilerplate.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Questions &amp;amp; Answers: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/aspnetboilerplate?sort=newest&#34;&gt;https://stackoverflow.com/questions/tagged/aspnetboilerplate?sort=newest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;.NET Foundation&lt;/h3&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;https://dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aspnetboilerplate/aspnetboilerplate/dev/LICENSE&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cratesmith/Cratesmith.AssetUI</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/Cratesmith/Cratesmith.AssetUI</id>
    <link href="https://github.com/Cratesmith/Cratesmith.AssetUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Popout Inspector and ScriptableObject aware default Object Drawer for Unity3d.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cratesmith.AssetUI&lt;/h1&gt; &#xA;&lt;p&gt;Popout Inspector and ScriptableObject aware default Object Drawer for Unity3d.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the package manager window&lt;/li&gt; &#xA; &lt;li&gt;Click the add button in the top left&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;add from git url&#34;&lt;/li&gt; &#xA; &lt;li&gt;Pate in the following url and press enter: &lt;a href=&#34;https://github.com/Cratesmith/Cratesmith.AssetUI.git&#34;&gt;https://github.com/Cratesmith/Cratesmith.AssetUI.git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;... or just check out the files and dump them somewhere in your project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thangchung/clean-code-dotnet</title>
    <updated>2022-06-03T01:34:28Z</updated>
    <id>tag:github.com,2022-06-03:/thangchung/clean-code-dotnet</id>
    <link href="https://github.com/thangchung/clean-code-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛁 Clean Code concepts and tools adapted for .NET&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Code concepts adapted for .NET/.NET Core&lt;/h1&gt; &#xA;&lt;p&gt;If you liked &lt;code&gt;clean-code-dotnet&lt;/code&gt; project or if it helped you, please give a star &lt;span&gt;⭐&lt;/span&gt; for this repository. That will not only help strengthen our .NET community but also improve skills about the clean code for .NET developers in around the world. Thank you very much &lt;span&gt;👍&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out my &lt;a href=&#34;https://medium.com/@thangchung&#34;&gt;blog&lt;/a&gt; or say hi on &lt;a href=&#34;https://twitter.com/thangchung&#34;&gt;Twitter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#clean-code-concepts-adapted-for-netnet-core&#34;&gt;Clean Code concepts adapted for .NET/.NET Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#clean-code-net&#34;&gt;Clean Code .NET&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#naming&#34;&gt;Naming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#solid&#34;&gt;SOLID&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#other-clean-code-resources&#34;&gt;Other Clean Code Resources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#other-clean-code-lists&#34;&gt;Other Clean Code Lists&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#style-guides&#34;&gt;Style Guides&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#cheatsheets&#34;&gt;Cheatsheets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#backers&#34;&gt;Backers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.osnews.com/images/comics/wtfm.jpg&#34; alt=&#34;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for .NET/.NET Core. This is not a style guide. It&#39;s a guide to producing readable, reusable, and refactorable software in .NET/.NET Core.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inspired from &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;clean-code-javascript&lt;/a&gt; and &lt;a href=&#34;https://github.com/jupeter/clean-code-php&#34;&gt;clean-code-php&lt;/a&gt; lists.&lt;/p&gt; &#xA;&lt;h1&gt;Clean Code .NET&lt;/h1&gt; &#xA;&lt;h2&gt;Naming&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid using bad names&lt;/b&gt;&lt;/summary&gt; A good name allows the code to be used by many developers. The name should reflect what it does and give context. &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int d;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int daySinceModification;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid Misleading Names&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Name the variable to reflect what it is used for.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var dataFromDb = db.GetFromService().ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var listOfEmployee = _employeeService.GetEmployees().ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid Hungarian notation&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Hungarian Notation restates the type which is already present in the declaration. This is pointless since modern IDEs will identify the type.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int iCounter;&#xA;string strFullName;&#xA;DateTime dModifiedDate;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;int counter;&#xA;string fullName;&#xA;DateTime modifiedDate;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Hungarian Notation should also not be used in paramaters.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsShopOpen(string pDay, int pAmount)&#xA;{&#xA;    // some logic&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsShopOpen(string day, int amount)&#xA;{&#xA;    // some logic&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use consistent capitalization&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;const int DAYS_IN_WEEK = 7;&#xA;const int daysInMonth = 30;&#xA;&#xA;var songs = new List&amp;lt;string&amp;gt; { &#39;Back In Black&#39;, &#39;Stairway to Heaven&#39;, &#39;Hey Jude&#39; };&#xA;var Artists = new List&amp;lt;string&amp;gt; { &#39;ACDC&#39;, &#39;Led Zeppelin&#39;, &#39;The Beatles&#39; };&#xA;&#xA;bool EraseDatabase() {}&#xA;bool Restore_database() {}&#xA;&#xA;class animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;const int DaysInWeek = 7;&#xA;const int DaysInMonth = 30;&#xA;&#xA;var songs = new List&amp;lt;string&amp;gt; { &#39;Back In Black&#39;, &#39;Stairway to Heaven&#39;, &#39;Hey Jude&#39; };&#xA;var artists = new List&amp;lt;string&amp;gt; { &#39;ACDC&#39;, &#39;Led Zeppelin&#39;, &#39;The Beatles&#39; };&#xA;&#xA;bool EraseDatabase() {}&#xA;bool RestoreDatabase() {}&#xA;&#xA;class Animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use pronounceable names&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;It will take time to investigate the meaning of the variables and functions when they are not pronounceable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Employee&#xA;{&#xA;    public Datetime sWorkDate { get; set; } // what the heck is this&#xA;    public Datetime modTime { get; set; } // same here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Employee&#xA;{&#xA;    public Datetime StartWorkingDate { get; set; }&#xA;    public Datetime ModificationTime { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use Camelcase notation&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Use &lt;a href=&#34;https://en.wikipedia.org/wiki/Camel_case&#34;&gt;Camelcase Notation&lt;/a&gt; for variable and method paramaters.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var employeephone;&#xA;&#xA;public double CalculateSalary(int workingdays, int workinghours)&#xA;{&#xA;    // some logic&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var employeePhone;&#xA;&#xA;public double CalculateSalary(int workingDays, int workingHours)&#xA;{&#xA;    // some logic&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use domain name&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;People who read your code are also programmers. Naming things right will help everyone be on the same page. We don&#39;t want to take time to explain to everyone what a variable or function is for.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class SingleObject&#xA;{&#xA;    // create an object of SingleObject&#xA;    private static SingleObject _instance = new SingleObject();&#xA;&#xA;    // make the constructor private so that this class cannot be instantiated&#xA;    private SingleObject() {}&#xA;&#xA;    // get the only object available&#xA;    public static SingleObject GetInstance()&#xA;    {&#xA;        return _instance;&#xA;    }&#xA;&#xA;    public string ShowMessage()&#xA;    {&#xA;        return &#34;Hello World!&#34;;&#xA;    }&#xA;}&#xA;&#xA;public static void main(String[] args)&#xA;{&#xA;    // illegal construct&#xA;    // var object = new SingleObject();&#xA;&#xA;    // Get the only object available&#xA;    var singletonObject = SingleObject.GetInstance();&#xA;&#xA;    // show the message&#xA;    singletonObject.ShowMessage();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid nesting too deeply and return early&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Too many if else statements can make the code hard to follow. &lt;strong&gt;Explicit is better than implicit&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsShopOpen(string day)&#xA;{&#xA;    if (!string.IsNullOrEmpty(day))&#xA;    {&#xA;        day = day.ToLower();&#xA;        if (day == &#34;friday&#34;)&#xA;        {&#xA;            return true;&#xA;        }&#xA;        else if (day == &#34;saturday&#34;)&#xA;        {&#xA;            return true;&#xA;        }&#xA;        else if (day == &#34;sunday&#34;)&#xA;        {&#xA;            return true;&#xA;        }&#xA;        else&#xA;        {&#xA;            return false;&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        return false;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsShopOpen(string day)&#xA;{&#xA;    if (string.IsNullOrEmpty(day))&#xA;    {&#xA;        return false;&#xA;    }&#xA;&#xA;    var openingDays = new[] { &#34;friday&#34;, &#34;saturday&#34;, &#34;sunday&#34; };&#xA;    return openingDays.Any(d =&amp;gt; d == day.ToLower());&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public long Fibonacci(int n)&#xA;{&#xA;    if (n &amp;lt; 50)&#xA;    {&#xA;        if (n != 0)&#xA;        {&#xA;            if (n != 1)&#xA;            {&#xA;                return Fibonacci(n - 1) + Fibonacci(n - 2);&#xA;            }&#xA;            else&#xA;            {&#xA;                return 1;&#xA;            }&#xA;        }&#xA;        else&#xA;        {&#xA;            return 0;&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        throw new System.Exception(&#34;Not supported&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public long Fibonacci(int n)&#xA;{&#xA;    if (n == 0)&#xA;    {&#xA;        return 0;&#xA;    }&#xA;&#xA;    if (n == 1)&#xA;    {&#xA;        return 1;&#xA;    }&#xA;&#xA;    if (n &amp;gt; 50)&#xA;    {&#xA;        throw new System.Exception(&#34;Not supported&#34;);&#xA;    }&#xA;&#xA;    return Fibonacci(n - 1) + Fibonacci(n - 2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid mental mapping&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Don’t force the reader of your code to translate what the variable means. &lt;strong&gt;Explicit is better than implicit&lt;/strong&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var l = new[] { &#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34; };&#xA;&#xA;for (var i = 0; i &amp;lt; l.Count(); i++)&#xA;{&#xA;    var li = l[i];&#xA;    DoStuff();&#xA;    DoSomeOtherStuff();&#xA;&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    // Wait, what is `li` for again?&#xA;    Dispatch(li);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var locations = new[] { &#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34; };&#xA;&#xA;foreach (var location in locations)&#xA;{&#xA;    DoStuff();&#xA;    DoSomeOtherStuff();&#xA;&#xA;    // ...&#xA;    // ...&#xA;    // ...&#xA;    Dispatch(location);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid magic string&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Magic strings are string values that are specified directly within application code that have an impact on the application’s behavior. Frequently, such strings will end up being duplicated within the system, and since they cannot automatically be updated using refactoring tools, they become a common source of bugs when changes are made to some strings but not others.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if (userRole == &#34;Admin&#34;)&#xA;{&#xA;    // logic in here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;const string ADMIN_ROLE = &#34;Admin&#34;&#xA;if (userRole == ADMIN_ROLE)&#xA;{&#xA;    // logic in here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Using this we only have to change in centralize place and others will adapt it.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t add unneeded context&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Car&#xA;{&#xA;    public string CarMake { get; set; }&#xA;    public string CarModel { get; set; }&#xA;    public string CarColor { get; set; }&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Car&#xA;{&#xA;    public string Make { get; set; }&#xA;    public string Model { get; set; }&#xA;    public string Color { get; set; }&#xA;&#xA;    //...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use meaningful and pronounceable variable names&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var ymdstr = DateTime.UtcNow.ToString(&#34;MMMM dd, yyyy&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var currentDate = DateTime.UtcNow.ToString(&#34;MMMM dd, yyyy&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use the same vocabulary for the same type of variable&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GetUserInfo();&#xA;GetUserData();&#xA;GetUserRecord();&#xA;GetUserProfile();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GetUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use searchable names (part 1)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// What the heck is data for?&#xA;var data = new { Name = &#34;John&#34;, Age = 42 };&#xA;&#xA;var stream1 = new MemoryStream();&#xA;var ser1 = new DataContractJsonSerializer(typeof(object));&#xA;ser1.WriteObject(stream1, data);&#xA;&#xA;stream1.Position = 0;&#xA;var sr1 = new StreamReader(stream1);&#xA;Console.Write(&#34;JSON form of Data object: &#34;);&#xA;Console.WriteLine(sr1.ReadToEnd());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var person = new Person&#xA;{&#xA;    Name = &#34;John&#34;,&#xA;    Age = 42&#xA;};&#xA;&#xA;var stream2 = new MemoryStream();&#xA;var ser2 = new DataContractJsonSerializer(typeof(Person));&#xA;ser2.WriteObject(stream2, data);&#xA;&#xA;stream2.Position = 0;&#xA;var sr2 = new StreamReader(stream2);&#xA;Console.Write(&#34;JSON form of Data object: &#34;);&#xA;Console.WriteLine(sr2.ReadToEnd());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use searchable names (part 2)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var data = new { Name = &#34;John&#34;, Age = 42, PersonAccess = 4};&#xA;&#xA;// What the heck is 4 for?&#xA;if (data.PersonAccess == 4)&#xA;{&#xA;    // do edit ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public enum PersonAccess : int&#xA;{&#xA;    ACCESS_READ = 1,&#xA;    ACCESS_CREATE = 2,&#xA;    ACCESS_UPDATE = 4,&#xA;    ACCESS_DELETE = 8&#xA;}&#xA;&#xA;var person = new Person&#xA;{&#xA;    Name = &#34;John&#34;,&#xA;    Age = 42,&#xA;    PersonAccess= PersonAccess.ACCESS_CREATE&#xA;};&#xA;&#xA;if (person.PersonAccess == PersonAccess.ACCESS_UPDATE)&#xA;{&#xA;    // do edit ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ Back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use explanatory variables&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;const string Address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;var cityZipCodeRegex = @&#34;/^[^,\]+[,\\s]+(.+?)\s*(\d{5})?$/&#34;;&#xA;var matches = Regex.Matches(Address, cityZipCodeRegex);&#xA;if (matches[0].Success == true &amp;amp;&amp;amp; matches[1].Success == true)&#xA;{&#xA;    SaveCityZipCode(matches[0].Value, matches[1].Value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Decrease dependence on regex by naming subpatterns.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;const string Address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;var cityZipCodeWithGroupRegex = @&#34;/^[^,\]+[,\\s]+(?&amp;lt;city&amp;gt;.+?)\s*(?&amp;lt;zipCode&amp;gt;\d{5})?$/&#34;;&#xA;var matchesWithGroup = Regex.Match(Address, cityZipCodeWithGroupRegex);&#xA;var cityGroup = matchesWithGroup.Groups[&#34;city&#34;];&#xA;var zipCodeGroup = matchesWithGroup.Groups[&#34;zipCode&#34;];&#xA;if(cityGroup.Success == true &amp;amp;&amp;amp; zipCodeGroup.Success == true)&#xA;{&#xA;    SaveCityZipCode(cityGroup.Value, zipCodeGroup.Value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use default arguments instead of short circuiting or conditionals&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Not good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This is not good because &lt;code&gt;breweryName&lt;/code&gt; can be &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;This opinion is more understandable than the previous version, but it better controls the value of the variable.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void CreateMicrobrewery(string name = null)&#xA;{&#xA;    var breweryName = !string.IsNullOrEmpty(name) ? name : &#34;Hipster Brew Co.&#34;;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void CreateMicrobrewery(string breweryName = &#34;Hipster Brew Co.&#34;)&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid side effects&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA; &lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA; &lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;var name = &#34;Ryan McDermott&#34;;&#xA;&#xA;public void SplitAndEnrichFullName()&#xA;{&#xA;    var temp = name.Split(&#34; &#34;);&#xA;    name = $&#34;His first name is {temp[0]}, and his last name is {temp[1]}&#34;; // side effect&#xA;}&#xA;&#xA;SplitAndEnrichFullName();&#xA;&#xA;Console.WriteLine(name); // His first name is Ryan, and his last name is McDermott&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public string SplitAndEnrichFullName(string name)&#xA;{&#xA;    var temp = name.Split(&#34; &#34;);&#xA;    return $&#34;His first name is {temp[0]}, and his last name is {temp[1]}&#34;;&#xA;}&#xA;&#xA;var name = &#34;Ryan McDermott&#34;;&#xA;var fullName = SplitAndEnrichFullName(name);&#xA;&#xA;Console.WriteLine(name); // Ryan McDermott&#xA;Console.WriteLine(fullName); // His first name is Ryan, and his last name is McDermott&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid negative conditionals&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsDOMNodeNotPresent(string node)&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (!IsDOMNodeNotPresent(node))&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool IsDOMNodePresent(string node)&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;if (IsDOMNodePresent(node))&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid conditionals&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Airplane&#xA;{&#xA;    // ...&#xA;&#xA;    public double GetCruisingAltitude()&#xA;    {&#xA;        switch (_type)&#xA;        {&#xA;            case &#39;777&#39;:&#xA;                return GetMaxAltitude() - GetPassengerCount();&#xA;            case &#39;Air Force One&#39;:&#xA;                return GetMaxAltitude();&#xA;            case &#39;Cessna&#39;:&#xA;                return GetMaxAltitude() - GetFuelExpenditure();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;interface IAirplane&#xA;{&#xA;    // ...&#xA;&#xA;    double GetCruisingAltitude();&#xA;}&#xA;&#xA;class Boeing777 : IAirplane&#xA;{&#xA;    // ...&#xA;&#xA;    public double GetCruisingAltitude()&#xA;    {&#xA;        return GetMaxAltitude() - GetPassengerCount();&#xA;    }&#xA;}&#xA;&#xA;class AirForceOne : IAirplane&#xA;{&#xA;    // ...&#xA;&#xA;    public double GetCruisingAltitude()&#xA;    {&#xA;        return GetMaxAltitude();&#xA;    }&#xA;}&#xA;&#xA;class Cessna : IAirplane&#xA;{&#xA;    // ...&#xA;&#xA;    public double GetCruisingAltitude()&#xA;    {&#xA;        return GetMaxAltitude() - GetFuelExpenditure();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid type-checking (part 1)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Path TravelToTexas(object vehicle)&#xA;{&#xA;    if (vehicle.GetType() == typeof(Bicycle))&#xA;    {&#xA;        (vehicle as Bicycle).PeddleTo(new Location(&#34;texas&#34;));&#xA;    }&#xA;    else if (vehicle.GetType() == typeof(Car))&#xA;    {&#xA;        (vehicle as Car).DriveTo(new Location(&#34;texas&#34;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Path TravelToTexas(Traveler vehicle)&#xA;{&#xA;    vehicle.TravelTo(new Location(&#34;texas&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;or&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// pattern matching&#xA;public Path TravelToTexas(object vehicle)&#xA;{&#xA;    if (vehicle is Bicycle bicycle)&#xA;    {&#xA;        bicycle.PeddleTo(new Location(&#34;texas&#34;));&#xA;    }&#xA;    else if (vehicle is Car car)&#xA;    {&#xA;        car.DriveTo(new Location(&#34;texas&#34;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid type-checking (part 2)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int Combine(dynamic val1, dynamic val2)&#xA;{&#xA;    int value;&#xA;    if (!int.TryParse(val1, out value) || !int.TryParse(val2, out value))&#xA;    {&#xA;        throw new Exception(&#39;Must be of type Number&#39;);&#xA;    }&#xA;&#xA;    return val1 + val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int Combine(int val1, int val2)&#xA;{&#xA;    return val1 + val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid flags in method parameters&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;A flag indicates that the method has more than one responsibility. It is best if the method only has a single responsibility. Split the method into two if a boolean parameter adds multiple responsibilities to the method.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void CreateFile(string name, bool temp = false)&#xA;{&#xA;    if (temp)&#xA;    {&#xA;        Touch(&#34;./temp/&#34; + name);&#xA;    }&#xA;    else&#xA;    {&#xA;        Touch(name);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void CreateFile(string name)&#xA;{&#xA;    Touch(name);&#xA;}&#xA;&#xA;public void CreateTempFile(string name)&#xA;{&#xA;    Touch(&#34;./temp/&#34;  + name);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t write to global functions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Polluting globals is a bad practice in many languages because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to have configuration array. You could write global function like &lt;code&gt;Config()&lt;/code&gt;, but it could clash with another library that tried to do the same thing.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Dictionary&amp;lt;string, string&amp;gt; Config()&#xA;{&#xA;    return new Dictionary&amp;lt;string,string&amp;gt;(){&#xA;        [&#34;foo&#34;] = &#34;bar&#34;&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Configuration&#xA;{&#xA;    private Dictionary&amp;lt;string, string&amp;gt; _configuration;&#xA;&#xA;    public Configuration(Dictionary&amp;lt;string, string&amp;gt; configuration)&#xA;    {&#xA;        _configuration = configuration;&#xA;    }&#xA;&#xA;    public string[] Get(string key)&#xA;    {&#xA;        return _configuration.ContainsKey(key) ? _configuration[key] : null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Load configuration and create instance of &lt;code&gt;Configuration&lt;/code&gt; class&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var configuration = new Configuration(new Dictionary&amp;lt;string, string&amp;gt;() {&#xA;    [&#34;foo&#34;] = &#34;bar&#34;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And now you must use instance of &lt;code&gt;Configuration&lt;/code&gt; in your application.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t use a Singleton pattern&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Singleton is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Singleton_pattern&#34;&gt;anti-pattern&lt;/a&gt;. Paraphrased from Brian Button:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;They are generally used as a &lt;strong&gt;global instance&lt;/strong&gt;, why is that so bad? Because &lt;strong&gt;you hide the dependencies&lt;/strong&gt; of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_smell&#34;&gt;code smell&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;They violate the &lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#single-responsibility-principle-srp&#34;&gt;single responsibility principle&lt;/a&gt;: by virtue of the fact that &lt;strong&gt;they control their own creation and lifecycle&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;They inherently cause code to be tightly &lt;a href=&#34;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&#34;&gt;coupled&lt;/a&gt;. This makes faking them out under &lt;strong&gt;test rather difficult&lt;/strong&gt; in many cases.&lt;/li&gt; &#xA;  &lt;li&gt;They carry state around for the lifetime of the application. Another hit to testing since &lt;strong&gt;you can end up with a situation where tests need to be ordered&lt;/strong&gt; which is a big no for unit tests. Why? Because each unit test should be independent from the other.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;There is also very good thoughts by &lt;a href=&#34;http://misko.hevery.com/about/&#34;&gt;Misko Hevery&lt;/a&gt; about the &lt;a href=&#34;http://misko.hevery.com/2008/08/25/root-cause-of-singletons/&#34;&gt;root of problem&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class DBConnection&#xA;{&#xA;    private static DBConnection _instance;&#xA;&#xA;    private DBConnection()&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    public static GetInstance()&#xA;    {&#xA;        if (_instance == null)&#xA;        {&#xA;            _instance = new DBConnection();&#xA;        }&#xA;&#xA;        return _instance;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;var singleton = DBConnection.GetInstance();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class DBConnection&#xA;{&#xA;    public DBConnection(IOptions&amp;lt;DbConnectionOption&amp;gt; options)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Create instance of &lt;code&gt;DBConnection&lt;/code&gt; class and configure it with &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-2.1&#34;&gt;Option pattern&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var options = &amp;lt;resolve from IOC&amp;gt;;&#xA;var connection = new DBConnection(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And now you must use instance of &lt;code&gt;DBConnection&lt;/code&gt; in your application.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Function arguments (2 or fewer ideally)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA; &lt;p&gt;Zero arguments is the ideal case. One or two arguments is ok, and three should be avoided. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void CreateMenu(string title, string body, string buttonText, bool cancellable)&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MenuConfig&#xA;{&#xA;    public string Title { get; set; }&#xA;    public string Body { get; set; }&#xA;    public string ButtonText { get; set; }&#xA;    public bool Cancellable { get; set; }&#xA;}&#xA;&#xA;var config = new MenuConfig&#xA;{&#xA;    Title = &#34;Foo&#34;,&#xA;    Body = &#34;Bar&#34;,&#xA;    ButtonText = &#34;Baz&#34;,&#xA;    Cancellable = true&#xA;};&#xA;&#xA;public void CreateMenu(MenuConfig config)&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Functions should do one thing&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, they can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void SendEmailToListOfClients(string[] clients)&#xA;{&#xA;    foreach (var client in clients)&#xA;    {&#xA;        var clientRecord = db.Find(client);&#xA;        if (clientRecord.IsActive())&#xA;        {&#xA;            Email(client);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void SendEmailToListOfClients(string[] clients)&#xA;{&#xA;    var activeClients = GetActiveClients(clients);&#xA;    // Do some logic&#xA;}&#xA;&#xA;public List&amp;lt;Client&amp;gt; GetActiveClients(string[] clients)&#xA;{&#xA;    return db.Find(clients).Where(s =&amp;gt; s.Status == &#34;Active&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Function names should say what they do&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Email&#xA;{&#xA;    //...&#xA;&#xA;    public void Handle()&#xA;    {&#xA;        SendMail(this._to, this._subject, this._body);&#xA;    }&#xA;}&#xA;&#xA;var message = new Email(...);&#xA;// What is this? A handle for the message? Are we writing to a file now?&#xA;message.Handle();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Email&#xA;{&#xA;    //...&#xA;&#xA;    public void Send()&#xA;    {&#xA;        SendMail(this._to, this._subject, this._body);&#xA;    }&#xA;}&#xA;&#xA;var message = new Email(...);&#xA;// Clear and obvious&#xA;message.Send();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Functions should only be one level of abstraction&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Not finished yet&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public string ParseBetterJSAlternative(string code)&#xA;{&#xA;    var regexes = [&#xA;        // ...&#xA;    ];&#xA;&#xA;    var statements = explode(&#34; &#34;, code);&#xA;    var tokens = new string[] {};&#xA;    foreach (var regex in regexes)&#xA;    {&#xA;        foreach (var statement in statements)&#xA;        {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    var ast = new string[] {};&#xA;    foreach (var token in tokens)&#xA;    {&#xA;        // lex...&#xA;    }&#xA;&#xA;    foreach (var node in ast)&#xA;    {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad too:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;We have carried out some of the functionality, but the &lt;code&gt;ParseBetterJSAlternative()&lt;/code&gt; function is still very complex and not testable.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public string Tokenize(string code)&#xA;{&#xA;    var regexes = new string[]&#xA;    {&#xA;        // ...&#xA;    };&#xA;&#xA;    var statements = explode(&#34; &#34;, code);&#xA;    var tokens = new string[] {};&#xA;    foreach (var regex in regexes)&#xA;    {&#xA;        foreach (var statement in statements)&#xA;        {&#xA;            tokens[] = /* ... */;&#xA;        }&#xA;    }&#xA;&#xA;    return tokens;&#xA;}&#xA;&#xA;public string Lexer(string[] tokens)&#xA;{&#xA;    var ast = new string[] {};&#xA;    foreach (var token in tokens)&#xA;    {&#xA;        ast[] = /* ... */;&#xA;    }&#xA;&#xA;    return ast;&#xA;}&#xA;&#xA;public string ParseBetterJSAlternative(string code)&#xA;{&#xA;    var tokens = Tokenize(code);&#xA;    var ast = Lexer(tokens);&#xA;    foreach (var node in ast)&#xA;    {&#xA;        // parse...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The best solution is move out the dependencies of &lt;code&gt;ParseBetterJSAlternative()&lt;/code&gt; function.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Tokenizer&#xA;{&#xA;    public string Tokenize(string code)&#xA;    {&#xA;        var regexes = new string[] {&#xA;            // ...&#xA;        };&#xA;&#xA;        var statements = explode(&#34; &#34;, code);&#xA;        var tokens = new string[] {};&#xA;        foreach (var regex in regexes)&#xA;        {&#xA;            foreach (var statement in statements)&#xA;            {&#xA;                tokens[] = /* ... */;&#xA;            }&#xA;        }&#xA;&#xA;        return tokens;&#xA;    }&#xA;}&#xA;&#xA;class Lexer&#xA;{&#xA;    public string Lexify(string[] tokens)&#xA;    {&#xA;        var ast = new[] {};&#xA;        foreach (var token in tokens)&#xA;        {&#xA;            ast[] = /* ... */;&#xA;        }&#xA;&#xA;        return ast;&#xA;    }&#xA;}&#xA;&#xA;class BetterJSAlternative&#xA;{&#xA;    private string _tokenizer;&#xA;    private string _lexer;&#xA;&#xA;    public BetterJSAlternative(Tokenizer tokenizer, Lexer lexer)&#xA;    {&#xA;        _tokenizer = tokenizer;&#xA;        _lexer = lexer;&#xA;    }&#xA;&#xA;    public string Parse(string code)&#xA;    {&#xA;        var tokens = _tokenizer.Tokenize(code);&#xA;        var ast = _lexer.Lexify(tokens);&#xA;        foreach (var node in ast)&#xA;        {&#xA;            // parse...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Function callers and callees should be close&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class PerformanceReview&#xA;{&#xA;    private readonly Employee _employee;&#xA;&#xA;    public PerformanceReview(Employee employee)&#xA;    {&#xA;        _employee = employee;&#xA;    }&#xA;&#xA;    private IEnumerable&amp;lt;PeersData&amp;gt; LookupPeers()&#xA;    {&#xA;        return db.lookup(_employee, &#39;peers&#39;);&#xA;    }&#xA;&#xA;    private ManagerData LookupManager()&#xA;    {&#xA;        return db.lookup(_employee, &#39;manager&#39;);&#xA;    }&#xA;&#xA;    private IEnumerable&amp;lt;PeerReviews&amp;gt; GetPeerReviews()&#xA;    {&#xA;        var peers = LookupPeers();&#xA;        // ...&#xA;    }&#xA;&#xA;    public PerfReviewData PerfReview()&#xA;    {&#xA;        GetPeerReviews();&#xA;        GetManagerReview();&#xA;        GetSelfReview();&#xA;    }&#xA;&#xA;    public ManagerData GetManagerReview()&#xA;    {&#xA;        var manager = LookupManager();&#xA;    }&#xA;&#xA;    public EmployeeData GetSelfReview()&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;var  review = new PerformanceReview(employee);&#xA;review.PerfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class PerformanceReview&#xA;{&#xA;    private readonly Employee _employee;&#xA;&#xA;    public PerformanceReview(Employee employee)&#xA;    {&#xA;        _employee = employee;&#xA;    }&#xA;&#xA;    public PerfReviewData PerfReview()&#xA;    {&#xA;        GetPeerReviews();&#xA;        GetManagerReview();&#xA;        GetSelfReview();&#xA;    }&#xA;&#xA;    private IEnumerable&amp;lt;PeerReviews&amp;gt; GetPeerReviews()&#xA;    {&#xA;        var peers = LookupPeers();&#xA;        // ...&#xA;    }&#xA;&#xA;    private IEnumerable&amp;lt;PeersData&amp;gt; LookupPeers()&#xA;    {&#xA;        return db.lookup(_employee, &#39;peers&#39;);&#xA;    }&#xA;&#xA;    private ManagerData GetManagerReview()&#xA;    {&#xA;        var manager = LookupManager();&#xA;        return manager;&#xA;    }&#xA;&#xA;    private ManagerData LookupManager()&#xA;    {&#xA;        return db.lookup(_employee, &#39;manager&#39;);&#xA;    }&#xA;&#xA;    private EmployeeData GetSelfReview()&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;var review = new PerformanceReview(employee);&#xA;review.PerfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Encapsulate conditionals&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if (article.state == &#34;published&#34;)&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if (article.IsPublished())&#xA;{&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Remove dead code&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void OldRequestModule(string url)&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;public void NewRequestModule(string url)&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;var request = NewRequestModule(requestUrl);&#xA;InventoryTracker(&#34;apples&#34;, request, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void RequestModule(string url)&#xA;{&#xA;    // ...&#xA;}&#xA;&#xA;var request = RequestModule(requestUrl);&#xA;InventoryTracker(&#34;apples&#34;, request, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Objects and Data Structures&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use getters and setters&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;In C# / VB.NET you can set &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; keywords for methods. Using it, you can control properties modification on an object.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA;  &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA;  &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA;  &lt;li&gt;Inheriting this class, you can override default functionality.&lt;/li&gt; &#xA;  &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Additionally, this is part of Open/Closed principle, from object-oriented design principles.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class BankAccount&#xA;{&#xA;    public double Balance = 1000;&#xA;}&#xA;&#xA;var bankAccount = new BankAccount();&#xA;&#xA;// Fake buy shoes...&#xA;bankAccount.Balance -= 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class BankAccount&#xA;{&#xA;    private double _balance = 0.0D;&#xA;&#xA;    pubic double Balance {&#xA;        get {&#xA;            return _balance;&#xA;        }&#xA;    }&#xA;&#xA;    public BankAccount(balance = 1000)&#xA;    {&#xA;       _balance = balance;&#xA;    }&#xA;&#xA;    public void WithdrawBalance(int amount)&#xA;    {&#xA;        if (amount &amp;gt; _balance)&#xA;        {&#xA;            throw new Exception(&#39;Amount greater than available balance.&#39;);&#xA;        }&#xA;&#xA;        _balance -= amount;&#xA;    }&#xA;&#xA;    public void DepositBalance(int amount)&#xA;    {&#xA;        _balance += amount;&#xA;    }&#xA;}&#xA;&#xA;var bankAccount = new BankAccount();&#xA;&#xA;// Buy shoes...&#xA;bankAccount.WithdrawBalance(price);&#xA;&#xA;// Get balance&#xA;balance = bankAccount.Balance;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Make objects have private/protected members&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Employee&#xA;{&#xA;    public string Name { get; set; }&#xA;&#xA;    public Employee(string name)&#xA;    {&#xA;        Name = name;&#xA;    }&#xA;}&#xA;&#xA;var employee = new Employee(&#34;John Doe&#34;);&#xA;Console.WriteLine(employee.Name); // Employee name: John Doe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Employee&#xA;{&#xA;    public string Name { get; }&#xA;&#xA;    public Employee(string name)&#xA;    {&#xA;        Name = name;&#xA;    }&#xA;}&#xA;&#xA;var employee = new Employee(&#34;John Doe&#34;);&#xA;Console.WriteLine(employee.Name); // Employee name: John Doe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Classes&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use method chaining&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This pattern is very useful and commonly used in many libraries. It allows your code to be expressive, and less verbose. For that reason, use method chaining and take a look at how clean your code will be.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class ListExtensions&#xA;{&#xA;    public static List&amp;lt;T&amp;gt; FluentAdd&amp;lt;T&amp;gt;(this List&amp;lt;T&amp;gt; list, T item)&#xA;    {&#xA;        list.Add(item);&#xA;        return list;&#xA;    }&#xA;&#xA;    public static List&amp;lt;T&amp;gt; FluentClear&amp;lt;T&amp;gt;(this List&amp;lt;T&amp;gt; list)&#xA;    {&#xA;        list.Clear();&#xA;        return list;&#xA;    }&#xA;&#xA;    public static List&amp;lt;T&amp;gt; FluentForEach&amp;lt;T&amp;gt;(this List&amp;lt;T&amp;gt; list, Action&amp;lt;T&amp;gt; action)&#xA;    {&#xA;        list.ForEach(action);&#xA;        return list;&#xA;    }&#xA;&#xA;    public static List&amp;lt;T&amp;gt; FluentInsert&amp;lt;T&amp;gt;(this List&amp;lt;T&amp;gt; list, int index, T item)&#xA;    {&#xA;        list.Insert(index, item);&#xA;        return list;&#xA;    }&#xA;&#xA;    public static List&amp;lt;T&amp;gt; FluentRemoveAt&amp;lt;T&amp;gt;(this List&amp;lt;T&amp;gt; list, int index)&#xA;    {&#xA;        list.RemoveAt(index);&#xA;        return list;&#xA;    }&#xA;&#xA;    public static List&amp;lt;T&amp;gt; FluentReverse&amp;lt;T&amp;gt;(this List&amp;lt;T&amp;gt; list)&#xA;    {&#xA;        list.Reverse();&#xA;        return list;&#xA;    }&#xA;}&#xA;&#xA;internal static void ListFluentExtensions()&#xA;{&#xA;    var list = new List&amp;lt;int&amp;gt;() { 1, 2, 3, 4, 5 }&#xA;        .FluentAdd(1)&#xA;        .FluentInsert(0, 0)&#xA;        .FluentRemoveAt(1)&#xA;        .FluentReverse()&#xA;        .FluentForEach(value =&amp;gt; value.WriteLine())&#xA;        .FluentClear();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Prefer composition over inheritance&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition.&lt;/p&gt; &#xA; &lt;p&gt;The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA; &lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA;  &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA;  &lt;li&gt;You want to make global changes to derived classes by changing a base class (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Employee&#xA;{&#xA;    private string Name { get; set; }&#xA;    private string Email { get; set; }&#xA;&#xA;    public Employee(string name, string email)&#xA;    {&#xA;        Name = name;&#xA;        Email = email;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data.&#xA;// EmployeeTaxData is not a type of Employee&#xA;&#xA;class EmployeeTaxData : Employee&#xA;{&#xA;    private string Name { get; }&#xA;    private string Email { get; }&#xA;&#xA;    public EmployeeTaxData(string name, string email, string ssn, string salary)&#xA;    {&#xA;         // ...&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class EmployeeTaxData&#xA;{&#xA;    public string Ssn { get; }&#xA;    public string Salary { get; }&#xA;&#xA;    public EmployeeTaxData(string ssn, string salary)&#xA;    {&#xA;        Ssn = ssn;&#xA;        Salary = salary;&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&#xA;class Employee&#xA;{&#xA;    public string Name { get; }&#xA;    public string Email { get; }&#xA;    public EmployeeTaxData TaxData { get; }&#xA;&#xA;    public Employee(string name, string email)&#xA;    {&#xA;        Name = name;&#xA;        Email = email;&#xA;    }&#xA;&#xA;    public void SetTax(string ssn, double salary)&#xA;    {&#xA;        TaxData = new EmployeeTaxData(ssn, salary);&#xA;    }&#xA;&#xA;    // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;SOLID&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;What is SOLID?&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt; is the mnemonic acronym introduced by Michael Feathers for the first five principles named by Robert Martin, which meant five basic principles of object-oriented programming and design.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#single-responsibility-principle-srp&#34;&gt;S: Single Responsibility Principle (SRP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#openclosed-principle-ocp&#34;&gt;O: Open/Closed Principle (OCP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#liskov-substitution-principle-lsp&#34;&gt;L: Liskov Substitution Principle (LSP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#interface-segregation-principle-isp&#34;&gt;I: Interface Segregation Principle (ISP)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#dependency-inversion-principle-dip&#34;&gt;D: Dependency Inversion Principle (DIP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Single Responsibility Principle (SRP)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important.&lt;/p&gt; &#xA; &lt;p&gt;It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class UserSettings&#xA;{&#xA;    private User User;&#xA;&#xA;    public UserSettings(User user)&#xA;    {&#xA;        User = user;&#xA;    }&#xA;&#xA;    public void ChangeSettings(Settings settings)&#xA;    {&#xA;        if (verifyCredentials())&#xA;        {&#xA;            // ...&#xA;        }&#xA;    }&#xA;&#xA;    private bool VerifyCredentials()&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class UserAuth&#xA;{&#xA;    private User User;&#xA;&#xA;    public UserAuth(User user)&#xA;    {&#xA;        User = user;&#xA;    }&#xA;&#xA;    public bool VerifyCredentials()&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;class UserSettings&#xA;{&#xA;    private User User;&#xA;    private UserAuth Auth;&#xA;&#xA;    public UserSettings(User user)&#xA;    {&#xA;        User = user;&#xA;        Auth = new UserAuth(user);&#xA;    }&#xA;&#xA;    public void ChangeSettings(Settings settings)&#xA;    {&#xA;        if (Auth.VerifyCredentials())&#xA;        {&#xA;            // ...&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Open/Closed Principle (OCP)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;abstract class AdapterBase&#xA;{&#xA;    protected string Name;&#xA;&#xA;    public string GetName()&#xA;    {&#xA;        return Name;&#xA;    }&#xA;}&#xA;&#xA;class AjaxAdapter : AdapterBase&#xA;{&#xA;    public AjaxAdapter()&#xA;    {&#xA;        Name = &#34;ajaxAdapter&#34;;&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter : AdapterBase&#xA;{&#xA;    public NodeAdapter()&#xA;    {&#xA;        Name = &#34;nodeAdapter&#34;;&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester : AdapterBase&#xA;{&#xA;    private readonly AdapterBase Adapter;&#xA;&#xA;    public HttpRequester(AdapterBase adapter)&#xA;    {&#xA;        Adapter = adapter;&#xA;    }&#xA;&#xA;    public bool Fetch(string url)&#xA;    {&#xA;        var adapterName = Adapter.GetName();&#xA;&#xA;        if (adapterName == &#34;ajaxAdapter&#34;)&#xA;        {&#xA;            return MakeAjaxCall(url);&#xA;        }&#xA;        else if (adapterName == &#34;httpNodeAdapter&#34;)&#xA;        {&#xA;            return MakeHttpCall(url);&#xA;        }&#xA;    }&#xA;&#xA;    private bool MakeAjaxCall(string url)&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;&#xA;    private bool MakeHttpCall(string url)&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;interface IAdapter&#xA;{&#xA;    bool Request(string url);&#xA;}&#xA;&#xA;class AjaxAdapter : IAdapter&#xA;{&#xA;    public bool Request(string url)&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class NodeAdapter : IAdapter&#xA;{&#xA;    public bool Request(string url)&#xA;    {&#xA;        // request and return promise&#xA;    }&#xA;}&#xA;&#xA;class HttpRequester&#xA;{&#xA;    private readonly IAdapter Adapter;&#xA;&#xA;    public HttpRequester(IAdapter adapter)&#xA;    {&#xA;        Adapter = adapter;&#xA;    }&#xA;&#xA;    public bool Fetch(string url)&#xA;    {&#xA;        return Adapter.Request(url);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Liskov Substitution Principle (LSP)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA; &lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Rectangle&#xA;{&#xA;    protected double Width = 0;&#xA;    protected double Height = 0;&#xA;&#xA;    public Drawable Render(double area)&#xA;    {&#xA;        // ...&#xA;    }&#xA;&#xA;    public void SetWidth(double width)&#xA;    {&#xA;        Width = width;&#xA;    }&#xA;&#xA;    public void SetHeight(double height)&#xA;    {&#xA;        Height = height;&#xA;    }&#xA;&#xA;    public double GetArea()&#xA;    {&#xA;        return Width * Height;&#xA;    }&#xA;}&#xA;&#xA;class Square : Rectangle&#xA;{&#xA;    public double SetWidth(double width)&#xA;    {&#xA;        Width = Height = width;&#xA;    }&#xA;&#xA;    public double SetHeight(double height)&#xA;    {&#xA;        Width = Height = height;&#xA;    }&#xA;}&#xA;&#xA;Drawable RenderLargeRectangles(Rectangle rectangles)&#xA;{&#xA;    foreach (rectangle in rectangles)&#xA;    {&#xA;        rectangle.SetWidth(4);&#xA;        rectangle.SetHeight(5);&#xA;        var area = rectangle.GetArea(); // BAD: Will return 25 for Square. Should be 20.&#xA;        rectangle.Render(area);&#xA;    }&#xA;}&#xA;&#xA;var rectangles = new[] { new Rectangle(), new Rectangle(), new Square() };&#xA;RenderLargeRectangles(rectangles);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;abstract class ShapeBase&#xA;{&#xA;    protected double Width = 0;&#xA;    protected double Height = 0;&#xA;&#xA;    abstract public double GetArea();&#xA;&#xA;    public Drawable Render(double area)&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&#xA;class Rectangle : ShapeBase&#xA;{&#xA;    public void SetWidth(double width)&#xA;    {&#xA;        Width = width;&#xA;    }&#xA;&#xA;    public void SetHeight(double height)&#xA;    {&#xA;        Height = height;&#xA;    }&#xA;&#xA;    public double GetArea()&#xA;    {&#xA;        return Width * Height;&#xA;    }&#xA;}&#xA;&#xA;class Square : ShapeBase&#xA;{&#xA;    private double Length = 0;&#xA;&#xA;    public double SetLength(double length)&#xA;    {&#xA;        Length = length;&#xA;    }&#xA;&#xA;    public double GetArea()&#xA;    {&#xA;        return Math.Pow(Length, 2);&#xA;    }&#xA;}&#xA;&#xA;Drawable RenderLargeRectangles(Rectangle rectangles)&#xA;{&#xA;    foreach (rectangle in rectangles)&#xA;    {&#xA;        if (rectangle is Square)&#xA;        {&#xA;            rectangle.SetLength(5);&#xA;        }&#xA;        else if (rectangle is Rectangle)&#xA;        {&#xA;            rectangle.SetWidth(4);&#xA;            rectangle.SetHeight(5);&#xA;        }&#xA;&#xA;        var area = rectangle.GetArea();&#xA;        rectangle.Render(area);&#xA;    }&#xA;}&#xA;&#xA;var shapes = new[] { new Rectangle(), new Rectangle(), new Square() };&#xA;RenderLargeRectangles(shapes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Interface Segregation Principle (ISP)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34;&lt;/p&gt; &#xA; &lt;p&gt;A good example to look at that demonstrates this principle is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IEmployee&#xA;{&#xA;    void Work();&#xA;    void Eat();&#xA;}&#xA;&#xA;public class Human : IEmployee&#xA;{&#xA;    public void Work()&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public void Eat()&#xA;    {&#xA;        // ...... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;public class Robot : IEmployee&#xA;{&#xA;    public void Work()&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;&#xA;    public void Eat()&#xA;    {&#xA;        //.... robot can&#39;t eat, but it must implement this method&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Not every worker is an employee, but every employee is an worker.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IWorkable&#xA;{&#xA;    void Work();&#xA;}&#xA;&#xA;public interface IFeedable&#xA;{&#xA;    void Eat();&#xA;}&#xA;&#xA;public interface IEmployee : IFeedable, IWorkable&#xA;{&#xA;}&#xA;&#xA;public class Human : IEmployee&#xA;{&#xA;    public void Work()&#xA;    {&#xA;        // ....working&#xA;    }&#xA;&#xA;    public void Eat()&#xA;    {&#xA;        //.... eating in lunch break&#xA;    }&#xA;}&#xA;&#xA;// robot can only work&#xA;public class Robot : IWorkable&#xA;{&#xA;    public void Work()&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Dependency Inversion Principle (DIP)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA;  &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with .NET/.NET Core framework, you&#39;ve seen an implementation of this principle in the form of &lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34;&gt;Dependency Injection&lt;/a&gt; (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public abstract class EmployeeBase&#xA;{&#xA;    protected virtual void Work()&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;public class Human : EmployeeBase&#xA;{&#xA;    public override void Work()&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;public class Robot : EmployeeBase&#xA;{&#xA;    public override void Work()&#xA;    {&#xA;        //.... working much, much more&#xA;    }&#xA;}&#xA;&#xA;public class Manager&#xA;{&#xA;    private readonly Robot _robot;&#xA;    private readonly Human _human;&#xA;&#xA;    public Manager(Robot robot, Human human)&#xA;    {&#xA;        _robot = robot;&#xA;        _human = human;&#xA;    }&#xA;&#xA;    public void Manage()&#xA;    {&#xA;        _robot.Work();&#xA;        _human.Work();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IEmployee&#xA;{&#xA;    void Work();&#xA;}&#xA;&#xA;public class Human : IEmployee&#xA;{&#xA;    public void Work()&#xA;    {&#xA;        // ....working&#xA;    }&#xA;}&#xA;&#xA;public class Robot : IEmployee&#xA;{&#xA;    public void Work()&#xA;    {&#xA;        //.... working much more&#xA;    }&#xA;}&#xA;&#xA;public class Manager&#xA;{&#xA;    private readonly IEnumerable&amp;lt;IEmployee&amp;gt; _employees;&#xA;&#xA;    public Manager(IEnumerable&amp;lt;IEmployee&amp;gt; employees)&#xA;    {&#xA;        _employees = employees;&#xA;    }&#xA;&#xA;    public void Manage()&#xA;    {&#xA;        foreach (var employee in _employees)&#xA;        {&#xA;            _employee.Work();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don’t repeat yourself (DRY)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Try to observe the &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; principle.&lt;/p&gt; &#xA; &lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA; &lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA; &lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA; &lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#classes&#34;&gt;Classes&lt;/a&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public List&amp;lt;EmployeeData&amp;gt; ShowDeveloperList(Developers developers)&#xA;{&#xA;    foreach (var developers in developer)&#xA;    {&#xA;        var expectedSalary = developer.CalculateExpectedSalary();&#xA;        var experience = developer.GetExperience();&#xA;        var githubLink = developer.GetGithubLink();&#xA;        var data = new[] {&#xA;            expectedSalary,&#xA;            experience,&#xA;            githubLink&#xA;        };&#xA;&#xA;        Render(data);&#xA;    }&#xA;}&#xA;&#xA;public List&amp;lt;ManagerData&amp;gt; ShowManagerList(Manager managers)&#xA;{&#xA;    foreach (var manager in managers)&#xA;    {&#xA;        var expectedSalary = manager.CalculateExpectedSalary();&#xA;        var experience = manager.GetExperience();&#xA;        var githubLink = manager.GetGithubLink();&#xA;        var data =&#xA;        new[] {&#xA;            expectedSalary,&#xA;            experience,&#xA;            githubLink&#xA;        };&#xA;&#xA;        render(data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public List&amp;lt;EmployeeData&amp;gt; ShowList(Employee employees)&#xA;{&#xA;    foreach (var employee in employees)&#xA;    {&#xA;        var expectedSalary = employees.CalculateExpectedSalary();&#xA;        var experience = employees.GetExperience();&#xA;        var githubLink = employees.GetGithubLink();&#xA;        var data =&#xA;        new[] {&#xA;            expectedSalary,&#xA;            experience,&#xA;            githubLink&#xA;        };&#xA;&#xA;        render(data);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Very good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;It is better to use a compact version of the code.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public List&amp;lt;EmployeeData&amp;gt; ShowList(Employee employees)&#xA;{&#xA;    foreach (var employee in employees)&#xA;    {&#xA;        render(new[] {&#xA;            employee.CalculateExpectedSalary(),&#xA;            employee.GetExperience(),&#xA;            employee.GetGithubLink()&#xA;        });&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Basic concept of testing&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/using-code-coverage-to-determine-how-much-code-is-being-tested&#34;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;There&#39;s no excuse to not write tests. There&#39;s &lt;a href=&#34;https://github.com/thangchung/awesome-dotnet-core#testing&#34;&gt;plenty of good .NET test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Single concept per test&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Ensures that your tests are laser focused and not testing miscellaenous (non-related) things, forces &lt;a href=&#34;http://wiki.c2.com/?ArrangeActAssert&#34;&gt;AAA patern&lt;/a&gt; used to make your codes more clean and readable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;public class MakeDotNetGreatAgainTests&#xA;{&#xA;    [Fact]&#xA;    public void HandleDateBoundaries()&#xA;    {&#xA;        var date = new MyDateTime(&#34;1/1/2015&#34;);&#xA;        date.AddDays(30);&#xA;        Assert.Equal(&#34;1/31/2015&#34;, date);&#xA;&#xA;        date = new MyDateTime(&#34;2/1/2016&#34;);&#xA;        date.AddDays(28);&#xA;        Assert.Equal(&#34;02/29/2016&#34;, date);&#xA;&#xA;        date = new MyDateTime(&#34;2/1/2015&#34;);&#xA;        date.AddDays(28);&#xA;        Assert.Equal(&#34;03/01/2015&#34;, date);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;public class MakeDotNetGreatAgainTests&#xA;{&#xA;    [Fact]&#xA;    public void Handle30DayMonths()&#xA;    {&#xA;        // Arrange&#xA;        var date = new MyDateTime(&#34;1/1/2015&#34;);&#xA;&#xA;        // Act&#xA;        date.AddDays(30);&#xA;&#xA;        // Assert&#xA;        Assert.Equal(&#34;1/31/2015&#34;, date);&#xA;    }&#xA;&#xA;    [Fact]&#xA;    public void HandleLeapYear()&#xA;    {&#xA;        // Arrange&#xA;        var date = new MyDateTime(&#34;2/1/2016&#34;);&#xA;&#xA;        // Act&#xA;        date.AddDays(28);&#xA;&#xA;        // Assert&#xA;        Assert.Equal(&#34;02/29/2016&#34;, date);&#xA;    }&#xA;&#xA;    [Fact]&#xA;    public void HandleNonLeapYear()&#xA;    {&#xA;        // Arrange&#xA;        var date = new MyDateTime(&#34;2/1/2015&#34;);&#xA;&#xA;        // Act&#xA;        date.AddDays(28);&#xA;&#xA;        // Assert&#xA;        Assert.Equal(&#34;03/01/2015&#34;, date);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Soure &lt;a href=&#34;https://www.codingblocks.net/podcast/how-to-write-amazing-unit-tests&#34;&gt;https://www.codingblocks.net/podcast/how-to-write-amazing-unit-tests&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Concurrency&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use Async/Await&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Summary of Asynchronous Programming Guidelines&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Exceptions&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Avoid async void&lt;/td&gt; &#xA;    &lt;td&gt;Prefer async Task methods over async void methods&lt;/td&gt; &#xA;    &lt;td&gt;Event handlers&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Async all the way&lt;/td&gt; &#xA;    &lt;td&gt;Don&#39;t mix blocking and async code&lt;/td&gt; &#xA;    &lt;td&gt;Console main method (C# &amp;lt;= 7.0)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Configure context&lt;/td&gt; &#xA;    &lt;td&gt;Use &lt;code&gt;ConfigureAwait(false)&lt;/code&gt; when you can&lt;/td&gt; &#xA;    &lt;td&gt;Methods that require con­text&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;The Async Way of Doing Things&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;To Do This ...&lt;/th&gt; &#xA;    &lt;th&gt;Instead of This ...&lt;/th&gt; &#xA;    &lt;th&gt;Use This&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Retrieve the result of a background task&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.Wait or Task.Result&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Wait for any task to complete&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.WaitAny&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await Task.WhenAny&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Retrieve the results of multiple tasks&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.WaitAll&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await Task.WhenAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Wait a period of time&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Thread.Sleep&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await Task.Delay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;Best practice&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;The async/await is the best for IO bound tasks (networking communication, database communication, http request, etc.) but it is not good to apply on computational bound tasks (traverse on the huge list, render a hugge image, etc.). Because it will release the holding thread to the thread pool and CPU/cores available will not involve to process those tasks. Therefore, we should avoid using Async/Await for computional bound tasks.&lt;/p&gt; &#xA; &lt;p&gt;For dealing with computational bound tasks, prefer to use &lt;code&gt;Task.Factory.CreateNew&lt;/code&gt; with &lt;code&gt;TaskCreationOptions&lt;/code&gt; is &lt;code&gt;LongRunning&lt;/code&gt;. It will start a new background thread to process a heavy computational bound task without release it back to the thread pool until the task being completed.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Know Your Tools&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;There&#39;s a lot to learn about async and await, and it&#39;s natural to get a little disoriented. Here&#39;s a quick reference of solutions to common problems.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Solutions to Common Async Problems&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Problem&lt;/th&gt; &#xA;    &lt;th&gt;Solution&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Create a task to execute code&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.Run&lt;/code&gt; or &lt;code&gt;TaskFactory.StartNew&lt;/code&gt; (not the &lt;code&gt;Task&lt;/code&gt; constructor or &lt;code&gt;Task.Start&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Create a task wrapper for an operation or event&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;TaskFactory.FromAsync&lt;/code&gt; or &lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Support cancellation&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CancellationTokenSource&lt;/code&gt; and &lt;code&gt;CancellationToken&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Report progress&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Progress&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Handle streams of data&lt;/td&gt; &#xA;    &lt;td&gt;TPL Dataflow or Reactive Extensions&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Synchronize access to a shared resource&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;SemaphoreSlim&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Asynchronously initialize a resource&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;AsyncLazy&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Async-ready producer/consumer structures&lt;/td&gt; &#xA;    &lt;td&gt;TPL Dataflow or &lt;code&gt;AsyncCollection&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Read the &lt;a href=&#34;http://www.microsoft.com/download/en/details.aspx?id=19957&#34;&gt;Task-based Asynchronous Pattern (TAP) document&lt;/a&gt;. It is extremely well-written, and includes guidance on API design and the proper use of async/await (including cancellation and progress reporting).&lt;/p&gt; &#xA; &lt;p&gt;There are many new await-friendly techniques that should be used instead of the old blocking techniques. If you have any of these Old examples in your new async code, you&#39;re Doing It Wrong(TM):&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Old&lt;/th&gt; &#xA;    &lt;th&gt;New&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;task.Wait&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await task&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Wait/await for a task to complete&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;task.Result&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await task&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Get the result of a completed task&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.WaitAny&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await Task.WhenAny&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Wait/await for one of a collection of tasks to complete&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.WaitAll&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await Task.WhenAll&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Wait/await for every one of a collection of tasks to complete&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;Thread.Sleep&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;await Task.Delay&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Wait/await for a period of time&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task&lt;/code&gt; constructor&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Task.Run&lt;/code&gt; or &lt;code&gt;TaskFactory.StartNew&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Create a code-based task&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Source &lt;a href=&#34;https://gist.github.com/jonlabelle/841146854b23b305b50fa5542f84b20c&#34;&gt;https://gist.github.com/jonlabelle/841146854b23b305b50fa5542f84b20c&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Basic concept of error handling&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in .NET/.NET Core), and notifying you in the console with a stack trace.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t use &#39;throw ex&#39; in catch block&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you need to re-throw an exception after catching it, use just &#39;throw&#39; By using this, you will save the stack trace. But in the bad option below, you will lost the stack trace.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    // Do something..&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    // Any action something like roll-back or logging etc.&#xA;    throw ex;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    // Do something..&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    // Any action something like roll-back or logging etc.&#xA;    throw;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t ignore caught errors&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Throwing the error isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    FunctionThatMightThrow();&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    // silent exception&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    FunctionThatMightThrow();&#xA;}&#xA;catch (Exception error)&#xA;{&#xA;    NotifyUserOfError(error);&#xA;&#xA;    // Another option&#xA;    ReportErrorToService(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Use multiple catch block instead of if conditions.&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you need to take action according to type of the exception, you better use multiple catch block for exception handling.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    // Do something..&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;&#xA;    if (ex is TaskCanceledException)&#xA;    {&#xA;        // Take action for TaskCanceledException&#xA;    }&#xA;    else if (ex is TaskSchedulerException)&#xA;    {&#xA;        // Take action for TaskSchedulerException&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    // Do something..&#xA;}&#xA;catch (TaskCanceledException ex)&#xA;{&#xA;    // Take action for TaskCanceledException&#xA;}&#xA;catch (TaskSchedulerException ex)&#xA;{&#xA;    // Take action for TaskSchedulerException&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Keep exception stack trace when rethrowing exceptions&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;C# allows the exception to be rethrown in a catch block using the &lt;code&gt;throw&lt;/code&gt; keyword. It is a bad practice to throw a caught exception using &lt;code&gt;throw e;&lt;/code&gt;. This statement resets the stack trace. Instead use &lt;code&gt;throw;&lt;/code&gt;. This will keep the stack trace and provide a deeper insight about the exception. Another option is to use a custom exception. Simply instantiate a new exception and set its inner exception property to the caught exception with throw &lt;code&gt;new CustomException(&#34;some info&#34;, e);&lt;/code&gt;. Adding information to an exception is a good practice as it will help with debugging. However, if the objective is to log an exception then use &lt;code&gt;throw;&lt;/code&gt; to pass the buck to the caller.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    FunctionThatMightThrow();&#xA;}&#xA;catch (Exception ex)&#xA;{&#xA;    logger.LogInfo(ex);&#xA;    throw ex;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    FunctionThatMightThrow();&#xA;}&#xA;catch (Exception error)&#xA;{&#xA;    logger.LogInfo(error);&#xA;    throw;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    FunctionThatMightThrow();&#xA;}&#xA;catch (Exception error)&#xA;{&#xA;    logger.LogInfo(error);&#xA;    throw new CustomException(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Uses &lt;i&gt;.editorconfig&lt;/i&gt; file&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Has many code formatting styles in the project. For example, indent style is &lt;code&gt;space&lt;/code&gt; and &lt;code&gt;tab&lt;/code&gt; mixed in the project.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Define and maintain consistent code style in your codebase with the use of an &lt;code&gt;.editorconfig&lt;/code&gt; file&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;root = true&#xA;&#xA;[*]&#xA;indent_style = space&#xA;indent_size = 2&#xA;end_of_line = lf&#xA;charset = utf-8&#xA;trim_trailing_whitespace = true&#xA;insert_final_newline = true&#xA;&#xA;# C# files&#xA;[*.cs]&#xA;indent_size = 4&#xA;# New line preferences&#xA;csharp_new_line_before_open_brace = all&#xA;csharp_new_line_before_else = true&#xA;csharp_new_line_before_catch = true&#xA;csharp_new_line_before_finally = true&#xA;csharp_new_line_before_members_in_object_initializers = true&#xA;csharp_new_line_before_members_in_anonymous_types = true&#xA;csharp_new_line_within_query_expression_clauses = true&#xA;&#xA;# Code files&#xA;[*.{cs,csx,vb,vbx}]&#xA;indent_size = 4&#xA;&#xA;# Indentation preferences&#xA;csharp_indent_block_contents = true&#xA;csharp_indent_braces = false&#xA;csharp_indent_case_contents = true&#xA;csharp_indent_switch_labels = true&#xA;csharp_indent_labels = one_less_than_current&#xA;&#xA;# avoid this. unless absolutely necessary&#xA;dotnet_style_qualification_for_field = false:suggestion&#xA;dotnet_style_qualification_for_property = false:suggestion&#xA;dotnet_style_qualification_for_method = false:suggestion&#xA;dotnet_style_qualification_for_event = false:suggestion&#xA;&#xA;# only use var when it&#39;s obvious what the variable type is&#xA;# csharp_style_var_for_built_in_types = false:none&#xA;# csharp_style_var_when_type_is_apparent = false:none&#xA;# csharp_style_var_elsewhere = false:suggestion&#xA;&#xA;# use language keywords instead of BCL types&#xA;dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion&#xA;dotnet_style_predefined_type_for_member_access = true:suggestion&#xA;&#xA;# name all constant fields using PascalCase&#xA;dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion&#xA;dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields&#xA;dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style&#xA;&#xA;dotnet_naming_symbols.constant_fields.applicable_kinds   = field&#xA;dotnet_naming_symbols.constant_fields.required_modifiers = const&#xA;&#xA;dotnet_naming_style.pascal_case_style.capitalization = pascal_case&#xA;&#xA;# static fields should have s_ prefix&#xA;dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion&#xA;dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields&#xA;dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style&#xA;&#xA;dotnet_naming_symbols.static_fields.applicable_kinds   = field&#xA;dotnet_naming_symbols.static_fields.required_modifiers = static&#xA;&#xA;dotnet_naming_style.static_prefix_style.required_prefix = s_&#xA;dotnet_naming_style.static_prefix_style.capitalization = camel_case&#xA;&#xA;# internal and private fields should be _camelCase&#xA;dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion&#xA;dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields&#xA;dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style&#xA;&#xA;dotnet_naming_symbols.private_internal_fields.applicable_kinds = field&#xA;dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal&#xA;&#xA;dotnet_naming_style.camel_case_underscore_style.required_prefix = _&#xA;dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case&#xA;&#xA;# Code style defaults&#xA;dotnet_sort_system_directives_first = true&#xA;csharp_preserve_single_line_blocks = true&#xA;csharp_preserve_single_line_statements = false&#xA;&#xA;# Expression-level preferences&#xA;dotnet_style_object_initializer = true:suggestion&#xA;dotnet_style_collection_initializer = true:suggestion&#xA;dotnet_style_explicit_tuple_names = true:suggestion&#xA;dotnet_style_coalesce_expression = true:suggestion&#xA;dotnet_style_null_propagation = true:suggestion&#xA;&#xA;# Expression-bodied members&#xA;csharp_style_expression_bodied_methods = false:none&#xA;csharp_style_expression_bodied_constructors = false:none&#xA;csharp_style_expression_bodied_operators = false:none&#xA;csharp_style_expression_bodied_properties = true:none&#xA;csharp_style_expression_bodied_indexers = true:none&#xA;csharp_style_expression_bodied_accessors = true:none&#xA;&#xA;# Pattern matching&#xA;csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion&#xA;csharp_style_pattern_matching_over_as_with_null_check = true:suggestion&#xA;csharp_style_inlined_variable_declaration = true:suggestion&#xA;&#xA;# Null checking preferences&#xA;csharp_style_throw_expression = true:suggestion&#xA;csharp_style_conditional_delegate_call = true:suggestion&#xA;&#xA;# Space preferences&#xA;csharp_space_after_cast = false&#xA;csharp_space_after_colon_in_inheritance_clause = true&#xA;csharp_space_after_comma = true&#xA;csharp_space_after_dot = false&#xA;csharp_space_after_keywords_in_control_flow_statements = true&#xA;csharp_space_after_semicolon_in_for_statement = true&#xA;csharp_space_around_binary_operators = before_and_after&#xA;csharp_space_around_declaration_statements = do_not_ignore&#xA;csharp_space_before_colon_in_inheritance_clause = true&#xA;csharp_space_before_comma = false&#xA;csharp_space_before_dot = false&#xA;csharp_space_before_open_square_brackets = false&#xA;csharp_space_before_semicolon_in_for_statement = false&#xA;csharp_space_between_empty_square_brackets = false&#xA;csharp_space_between_method_call_empty_parameter_list_parentheses = false&#xA;csharp_space_between_method_call_name_and_opening_parenthesis = false&#xA;csharp_space_between_method_call_parameter_list_parentheses = false&#xA;csharp_space_between_method_declaration_empty_parameter_list_parentheses = false&#xA;csharp_space_between_method_declaration_name_and_open_parenthesis = false&#xA;csharp_space_between_method_declaration_parameter_list_parentheses = false&#xA;csharp_space_between_parentheses = false&#xA;csharp_space_between_square_brackets = false&#xA;&#xA;[*.{asm,inc}]&#xA;indent_size = 8&#xA;&#xA;# Xml project files&#xA;[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]&#xA;indent_size = 2&#xA;&#xA;# Xml config files&#xA;[*.{props,targets,config,nuspec}]&#xA;indent_size = 2&#xA;&#xA;[CMakeLists.txt]&#xA;indent_size = 2&#xA;&#xA;[*.cmd]&#xA;indent_size = 2&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Comments&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Avoid positional markers&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;////////////////////////////////////////////////////////////////////////////////&#xA;// Scope Model Instantiation&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;var model = new[]&#xA;{&#xA;    menu: &#39;foo&#39;,&#xA;    nav: &#39;bar&#39;&#xA;};&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;// Action setup&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;void Actions()&#xA;{&#xA;    // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;#region Scope Model Instantiation&#xA;&#xA;var model = {&#xA;    menu: &#39;foo&#39;,&#xA;    nav: &#39;bar&#39;&#xA;};&#xA;&#xA;#endregion&#xA;&#xA;#region Action setup&#xA;&#xA;void Actions() {&#xA;    // ...&#xA;};&#xA;&#xA;#endregion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var model = new[]&#xA;{&#xA;    menu: &#39;foo&#39;,&#xA;    nav: &#39;bar&#39;&#xA;};&#xA;&#xA;void Actions()&#xA;{&#xA;    // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t leave commented out code in your codebase&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;doStuff();&#xA;// doOtherStuff();&#xA;// doSomeMoreStuff();&#xA;// doSoMuchStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;doStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Don&#39;t have journal comments&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;/**&#xA; * 2018-12-20: Removed monads, didn&#39;t understand them (RM)&#xA; * 2017-10-01: Improved using special monads (JP)&#xA; * 2016-02-03: Removed type-checking (LI)&#xA; * 2015-03-14: Added combine with type-checking (JR)&#xA; */&#xA;public int Combine(int a,int b)&#xA;{&#xA;    return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int Combine(int a,int b)&#xA;{&#xA;    return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Only comment things that have business logic complexity&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int HashIt(string data)&#xA;{&#xA;    // The hash&#xA;    var hash = 0;&#xA;&#xA;    // Length of string&#xA;    var length = data.length;&#xA;&#xA;    // Loop through every character in data&#xA;    for (var i = 0; i &amp;lt; length; i++)&#xA;    {&#xA;        // Get character code.&#xA;        const char = data.charCodeAt(i);&#xA;        // Make the hash&#xA;        hash = ((hash &amp;lt;&amp;lt; 5) - hash) + char;&#xA;        // Convert to 32-bit integer&#xA;        hash &amp;amp;= hash;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Better but still Bad:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int HashIt(string data)&#xA;{&#xA;    var hash = 0;&#xA;    var length = data.length;&#xA;    for (var i = 0; i &amp;lt; length; i++)&#xA;    {&#xA;        const char = data.charCodeAt(i);&#xA;        hash = ((hash &amp;lt;&amp;lt; 5) - hash) + char;&#xA;&#xA;        // Convert to 32-bit integer&#xA;        hash &amp;amp;= hash;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If a comment explain WHAT the code is doing, it is probably a useless comment and can be implemented with a well named variable or function. The comment in the previous code could be replaced with a function named &lt;code&gt;ConvertTo32bitInt&lt;/code&gt; so this comment is still useless. However it would be hard to express by code WHY the developer choose djb2 hash algorithm instead of sha-1 or another hash function. In that case a comment is acceptable.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public int Hash(string data)&#xA;{&#xA;    var hash = 0;&#xA;    var length = data.length;&#xA;&#xA;    for (var i = 0; i &amp;lt; length; i++)&#xA;    {&#xA;        var character = data[i];&#xA;        // use of djb2 hash algorithm as it has a good compromise&#xA;        // between speed and low collision with a very simple implementation&#xA;        hash = ((hash &amp;lt;&amp;lt; 5) - hash) + character;&#xA;&#xA;        hash = ConvertTo32BitInt(hash);&#xA;    }&#xA;    return hash;&#xA;}&#xA;&#xA;private int ConvertTo32BitInt(int value)&#xA;{&#xA;    return value &amp;amp; value;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Other Clean Code Resources&lt;/h1&gt; &#xA;&lt;h2&gt;Other Clean Code Lists&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;clean-code-javascript&lt;/a&gt; - Clean Code concepts adapted for JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jupeter/clean-code-php&#34;&gt;clean-code-php&lt;/a&gt; - Clean Code concepts adapted for PHP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uohzxela/clean-code-ruby&#34;&gt;clean-code-ruby&lt;/a&gt; - Clean Code concepts adapted for Ruby&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zedr/clean-code-python&#34;&gt;clean-code-python&lt;/a&gt; - Clean Code concepts adapted for Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/labs42io/clean-code-typescript&#34;&gt;clean-code-typescript&lt;/a&gt; - Clean Code concepts adapted for TypeScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pungyeon/clean-go-article&#34;&gt;clean-go-article&lt;/a&gt; - Clean Code concepts adapted for Golang and an example how to apply &lt;a href=&#34;https://github.com/Pungyeon/clean-go&#34;&gt;clean code in Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/styleguides&#34;&gt;clean-abap&lt;/a&gt; - Clean Code concepts adapted for ABAP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webpro/programming-principles&#34;&gt;programming-principles&lt;/a&gt; - Categorized overview of Programming Principles &amp;amp; Patterns&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucasvegi/Elixir-Code-Smells&#34;&gt;Elixir-Code-Smells&lt;/a&gt; - Catalog of Elixir-specific code smells&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Style Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/styleguide&#34;&gt;Google Styleguides&lt;/a&gt; - This project holds the C++ Style Guide, Swift Style Guide, Objective-C Style Guide, Java Style Guide, Python Style Guide, R Style Guide, Shell Style Guide, HTML/CSS Style Guide, JavaScript Style Guide, AngularJS Style Guide, Common Lisp Style Guide, and Vimscript Style Guide&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codecadwallader/codemaid&#34;&gt;codemaid&lt;/a&gt; - open source Visual Studio extension to cleanup and simplify our C#, C++, F#, VB, PHP, PowerShell, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sharpenrocks/Sharpen&#34;&gt;Sharpen&lt;/a&gt; - Visual Studio extension that intelligently introduces new C# features into your existing code base&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Glavin001/tslint-clean-code&#34;&gt;tslint-clean-code&lt;/a&gt; - TSLint rules for enforcing Clean Code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cheatsheets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davidfowl/AspNetCoreDiagnosticScenarios&#34;&gt;AspNetCoreDiagnosticScenarios&lt;/a&gt; - Examples of broken patterns in ASP.NET Core applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/cheatsheets/Clean-Code-V2.4.pdf&#34;&gt;Clean Code&lt;/a&gt; - The summary of &lt;a href=&#34;https://www.amazon.com/dp/0132350882&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt; book&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thangchung/clean-code-dotnet/master/cheatsheets/Clean-Architecture-V1.0.pdf&#34;&gt;Clean Architecture&lt;/a&gt; - The summary of &lt;a href=&#34;https://www.amazon.com/dp/0134494164&#34;&gt;Clean Architecture: A Craftsman&#39;s Guide to Software Structure and Design&lt;/a&gt; book&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mbeaudru/modern-js-cheatsheet&#34;&gt;Modern JavaScript Cheatsheet&lt;/a&gt; - Cheatsheet for the JavaScript knowledge you will frequently encounter in modern projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org&#34;&gt;OWASP Cheat Sheet Series&lt;/a&gt; - Cheatsheet was created to provide a concise collection of high value information on specific application security topics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Maoni0/mem-doc/raw/master/doc/.NETMemoryPerformanceAnalysis.md&#34;&gt;.NET Memory Performance Analysis&lt;/a&gt; - This document aims to help folks who develop applications in .NET with how to think about memory performance analysis and finding the right approaches to perform such analysis if they need to. In this context .NET includes .NET Framework and .NET Core. In order to get the latest memory improvements in both the garbage collector and the rest of the framework I strongly encourage you to be on .NET Core if you are not already, because that’s where the active development happens&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kettanaito/naming-cheatsheet&#34;&gt;naming-cheatsheet&lt;/a&gt; - Comprehensive language-agnostic guidelines on variables naming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourcemaking.com/design-patterns-and-tips&#34;&gt;101 Design Patterns &amp;amp; Tips for Developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luk4z7/go-concurrency-guide&#34;&gt;Go Concurrency Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Thank you to all the people who have already contributed to &lt;code&gt;clean-code-dotnet&lt;/code&gt; project&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thangchung/clean-code-dotnet/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/contributors.svg?width=890&#34; title=&#34;contributors&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Backers&lt;/h1&gt; &#xA;&lt;p&gt;Love our work and help us continue our activities? [&lt;a href=&#34;https://opencollective.com/cleancodedotnet#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/cleancodedotnet#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;Become a sponsor and get your logo on our README on Github with a link to your site. [&lt;a href=&#34;https://opencollective.com/cleancodedotnet#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/cleancodedotnet/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cleancodedotnet/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cleancodedotnet/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cleancodedotnet/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/cleancodedotnet/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/cleancodedotnet/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;&lt;img src=&#34;http://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg?sanitize=true&#34; alt=&#34;CC0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To the extent possible under law, &lt;a href=&#34;https://github.com/thangchung&#34;&gt;thangchung&lt;/a&gt; has waived all copyright and related or neighboring rights to this work.&lt;/p&gt;</summary>
  </entry>
</feed>