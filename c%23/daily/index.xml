<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T01:32:54Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Fictiverse/Redream</title>
    <updated>2023-06-01T01:32:54Z</updated>
    <id>tag:github.com,2023-06-01:/Fictiverse/Redream</id>
    <link href="https://github.com/Fictiverse/Redream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realtime Diffusion, using Automatic1111 Stable Diffusion API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fictiverse : Redream&lt;/h1&gt; &#xA;&lt;p&gt;(Kind of) Realtime Stable Diffusion from a screen area using &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Automatic1111&lt;/a&gt;&#39;s API. &lt;img src=&#34;https://github.com/Fictiverse/Redream/assets/111762798/92d5d1e8-8d14-443c-823a-56cfd632cf84&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Automatic1111 stable-diffusion-webui&lt;/a&gt;&lt;br&gt; Make sure&lt;code&gt;--xformers&lt;/code&gt; and &lt;code&gt;--api&lt;/code&gt; commandline arguments are set in your &#34;webui-user.bat&#34;:&lt;br&gt; &lt;code&gt;set COMMANDLINE_ARGS=--xformers --api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;ControlNet Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/6.0&#34;&gt;.NET 6.0 Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Last &lt;a href=&#34;https://github.com/Fictiverse/Redream/releases/latest&#34;&gt;Redream&lt;/a&gt; Release&lt;br&gt; Or compile this repo with &lt;a href=&#34;https://visualstudio.microsoft.com/en/downloads/&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/111762798/208230356-3e1272a1-60f9-4a12-9996-ea8431cd0017.mp4&#34;&gt;https://user-images.githubusercontent.com/111762798/208230356-3e1272a1-60f9-4a12-9996-ea8431cd0017.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First, start &lt;strong&gt;Automatic1111 stable-diffusion-webui&lt;/strong&gt; and wait until it is ready.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Starting with Redream :&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207682985-39ae0ce5-d2bf-4067-b136-5a2dd5fdaf6b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Start to press &lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207306165-315287c6-e337-46fa-9d80-19c4eb782226.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; Place the &lt;code&gt;Capture area&lt;/code&gt; where you want and lock the position with &lt;code&gt;left click&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207306554-a15944a1-3acd-41c0-8054-b2ab6a441265.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to Start/Stop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207307399-d24b97ca-4ef0-4fc3-b62a-290e82c3acc8.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to save every generated frames&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207307617-5af3735b-eda3-48dc-b426-f93db18809a6.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to change aspect ratio&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changing diffusion settings :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207307725-a0c2fea1-3f04-4e5d-8504-1004f610be72.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the seed value (-1 for random)&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207308468-fd1085df-11ef-4692-8a19-36ee129bbfdf.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the steps&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207308656-348a6d65-0014-4b49-94ed-d28521246200.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the denoising strength&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207308818-78c084e5-f489-42c4-ab21-f2e7c56033b5.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the cfg scale&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Saving presets :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207309228-04635108-dbd7-40af-8913-f6848a54d2be.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;code&gt;Click&lt;/code&gt; to enable Fav mod&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207309404-749e0a8d-0fde-40d8-892c-2ea928643cf8.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; Presets will start blinking&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207309847-1ef2322a-bee2-4c79-82bf-00f161f55746.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;code&gt;Click&lt;/code&gt; to save the current prompt into the selected slot number.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Prompt:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207310573-321321d8-d735-463b-8ec3-28a8bb53ffd8.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to interrogate the last captured image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=MSXYHF2E7YXZG&#34;&gt;Paypal&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://discord.gg/UYgRnhj8PR&#34;&gt;Discord&lt;/a&gt; - &lt;a href=&#34;https://twitter.com/Fictiverse&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>letharqic/InstantPipes</title>
    <updated>2023-06-01T01:32:54Z</updated>
    <id>tag:github.com,2023-06-01:/letharqic/InstantPipes</id>
    <link href="https://github.com/letharqic/InstantPipes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unity editor tool for quickly generating pipes — with pathfinding&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Instant Pipes&lt;/h1&gt; &#xA;&lt;p&gt;An editor tool for procedurally generating pipes by just dragging the cursor from start to end —&amp;nbsp;the pipe will find the path in a customizable way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/letharqic/InstantPipes/assets/44412176/912f3879-1d82-4408-8cef-2698b82608a0&#34; alt=&#34;Unity_3wtlMTU9I1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Unity 2021.3 or higher.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the package to your project via the &lt;a href=&#34;https://docs.unity3d.com/Manual/upm-ui.html&#34;&gt;Package Manager&lt;/a&gt; using the Git URL &lt;code&gt;https://github.com/letharqic/InstantPipes.git&lt;/code&gt;. You can also clone the repository and point the Package Manager to your local copy.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Starting out&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an empty GameObject and set its world position to zero.&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;Pipe Generator&lt;/code&gt; component.&lt;/li&gt; &#xA; &lt;li&gt;Select a material for the &lt;code&gt;Material&lt;/code&gt; property.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;! If your pipes appear squashed, toggle and re-toggle rings, that will fix it. Looking into it!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ctrl+Z works with all actions. When you&#39;re commited to the pipes, you can just remove the component, the mesh will stay.&lt;/p&gt; &#xA;&lt;h3&gt;Pipes Settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Curvature&lt;/code&gt; changes the length of the curved parts, making pipes appear more or less curvy. Note that it applies after pathfinding, so in some cases high curvature value can make pipes intersect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Edges&lt;/code&gt; property selects how many edges the pipes will have, and &lt;code&gt;Segments&lt;/code&gt; is the amount of subdivisions in curved parts.&lt;/li&gt; &#xA; &lt;li&gt;You can toggle &lt;code&gt;Rings&lt;/code&gt; and &lt;code&gt;End Caps&lt;/code&gt; and separately set up their radius and thickness.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using pathfinding&lt;/h3&gt; &#xA;&lt;p&gt;In the component inspector, select the &lt;code&gt;Create&lt;/code&gt; tab. Now in the scene view start dragging your cursor where you want the pipe to start, end let go where you want it to end; a pipe will appear.&lt;/p&gt; &#xA;&lt;p&gt;The tool uses A* pathfinding&amp;nbsp;without a predefined grid — by raycasting from a point to the next points. Pipes can only detect colliders as obstacles.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Explanation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Amount&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;How many pipes will be created at once; each one will have an individual path.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Max Iterations&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;How many points will the algorithm check before giving up.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Grid Y Angle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rotates the Y axis of the pathfinding grid that every pipes have to follow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Grid Size&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The distance between searched points; making it too small can produce bad results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Height&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;How high the first and the last segment of a pipe will be. This value can&#39;t be smaller than grid size.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chaos&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Adds randomness to the pathfinding, making paths twisted and chaotic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Straight Priority&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Makes the algorithm prefer straight paths over turns.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Near Obstacle Priority&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Makes the pipes stay close to obstacles.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/letharqic/InstantPipes/assets/44412176/a076dcf6-21d2-46b1-80c9-70cdbd59b00e&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Editing&lt;/h3&gt; &#xA;&lt;p&gt;In the component inspector, select the &lt;code&gt;Edit&lt;/code&gt; tab. Select one of the points in the scene view by clicking on it, and then you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Move the selected points in the scene view&lt;/li&gt; &#xA; &lt;li&gt;Input the exact positions for the selected points in the inspector&lt;/li&gt; &#xA; &lt;li&gt;Delete the point or the entire pipe via a button in the inspector&lt;/li&gt; &#xA; &lt;li&gt;Insert a new point via a button in the inspector&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hold &lt;code&gt;shift&lt;/code&gt; to select multiple points. Press &lt;code&gt;A&lt;/code&gt; to select every point of the selected pipe.&lt;/p&gt; &#xA;&lt;p&gt;Every pipe is a separate submesh, so you can assign separate materials by dragging them into the scene view.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZiggyCreatures/FusionCache</title>
    <updated>2023-06-01T01:32:54Z</updated>
    <id>tag:github.com,2023-06-01:/ZiggyCreatures/FusionCache</id>
    <link href="https://github.com/ZiggyCreatures/FusionCache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FusionCache is an easy to use, fast and robust cache with advanced resiliency features and an optional distributed 2nd layer.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/logo-256x256.png&#34; alt=&#34;FusionCache logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;FusionCache&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache&#34; alt=&#34;Nuget&#34;&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?hashtags=fusioncache,caching,cache,dotnet,oss,csharp&amp;amp;text=%F0%9F%9A%80+FusionCache:+a+new+cache+with+an+optional+2nd+layer+and+some+advanced+features&amp;amp;url=https%3A%2F%2Fgithub.com%2Fjodydonetti%2FZiggyCreatures.FusionCache&amp;amp;via=jodydonetti&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=flat&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🙋‍♂️ Updating from before &lt;code&gt;v0.20.0&lt;/code&gt; ? please &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Update_v0_20_0.md&#34;&gt;read here&lt;/a&gt;.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;FusionCache is an easy to use, fast and robust cache with advanced resiliency features and an optional distributed 2nd layer.&lt;/h3&gt; &#xA;&lt;p&gt;It was born after years of dealing with all sorts of different types of caches: memory caching, distributed caching, http caching, CDNs, browser cache, offline cache, you name it. So I&#39;ve tried to put together these experiences and came up with FusionCache.&lt;/p&gt; &#xA;&lt;div style=&#34;text-align:center;&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/images/diagram.png&#34; alt=&#34;FusionCache diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It uses a memory cache (any impl of the standard &lt;code&gt;IMemoryCache&lt;/code&gt; interface) as the &lt;strong&gt;primary&lt;/strong&gt; backing store and optionally a distributed, 2nd level cache (any impl of the standard &lt;code&gt;IDistributedCache&lt;/code&gt; interface) as a &lt;strong&gt;secondary&lt;/strong&gt; backing store for better resilience and higher performance, for example in a multi-node scenario or to avoid the typical effects of a cold start (initial empty cache, maybe after a restart).&lt;/p&gt; &#xA;&lt;p&gt;Optionally, it can also use a &lt;strong&gt;backplane&lt;/strong&gt;: in a multi-node scenario this will send notifications to the other nodes to keep all the memory caches involved perfectly synchronized, without any additional work.&lt;/p&gt; &#xA;&lt;p&gt;FusionCache also includes some advanced resiliency features like &lt;strong&gt;cache stampede&lt;/strong&gt; prevention, a &lt;strong&gt;fail-safe&lt;/strong&gt; mechanism, fine grained &lt;strong&gt;soft/hard timeouts&lt;/strong&gt; with &lt;strong&gt;background factory completion&lt;/strong&gt;, customizable &lt;strong&gt;extensive logging&lt;/strong&gt; and more (see below).&lt;/p&gt; &#xA;&lt;h2&gt;🏆 Award&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/google-award-128x128.png&#34; alt=&#34;Google Award&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;On August 2021, FusionCache received the &lt;a href=&#34;https://twitter.com/jodydonetti/status/1422550932433350666&#34;&gt;Google Open Source Peer Bonus Award&lt;/a&gt;: here is the &lt;a href=&#34;https://opensource.googleblog.com/2021/09/announcing-latest-open-source-peer-bonus-winners.html&#34;&gt;official blogpost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📕 Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AGentleIntroduction.md&#34;&gt;🦄 A Gentle Introduction&lt;/a&gt; you&#39;ll get yourself comfortable with the overall concepts.&lt;/p&gt; &#xA;&lt;p&gt;Want to start using it immediately? There&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/#-quick-start&#34;&gt;⭐ Quick Start&lt;/a&gt; for you.&lt;/p&gt; &#xA;&lt;p&gt;Curious about what you can achieve from start to finish? There&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/StepByStep.md&#34;&gt;&lt;span&gt;👩🏫&lt;/span&gt; Step By Step &lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;More into videos? The great Anna Hoffman has been so nice to listen to me mumble random stuff on &lt;a href=&#34;https://learn.microsoft.com/en-us/shows/data-exposed/caching-made-easy-in-azure-sql-db-with-fusioncache-data-exposed&#34;&gt;Data Exposed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V2fCUoJgVAo&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/images/talk-data-exposed.jpg&#34; alt=&#34;Data Exposed Talk&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;✔ Features&lt;/h2&gt; &#xA;&lt;p&gt;These are the &lt;strong&gt;key features&lt;/strong&gt; of FusionCache:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheStampede.md&#34;&gt;&lt;strong&gt;🚀 Cache Stampede prevention&lt;/strong&gt;&lt;/a&gt;: automatic protection from the Cache Stampede problem&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheLevels.md&#34;&gt;&lt;strong&gt;🔀 Optional 2nd level&lt;/strong&gt;&lt;/a&gt;: an optional 2nd level handled transparently, with any implementation of &lt;code&gt;IDistributedCache&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/FailSafe.md&#34;&gt;&lt;strong&gt;💣 Fail-Safe&lt;/strong&gt;&lt;/a&gt;: a mechanism to avoids transient failures, by reusing an expired entry as a temporary fallback&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;&lt;strong&gt;⏱ Soft/Hard timeouts&lt;/strong&gt;&lt;/a&gt;: a slow factory (or distributed cache) will not slow down your application, and no data will be wasted&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AdaptiveCaching.md&#34;&gt;&lt;strong&gt;🧙‍♂️ Adaptive Caching&lt;/strong&gt;&lt;/a&gt;: for when you don&#39;t know upfront the cache duration, as it depends on the value being cached itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/ConditionalRefresh.md&#34;&gt;&lt;strong&gt;🔂 Conditional Refresh&lt;/strong&gt;&lt;/a&gt;: like HTTP Conditional Requests, but for caching&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/EagerRefresh.md&#34;&gt;&lt;strong&gt;🦅 Eager Refresh&lt;/strong&gt;&lt;/a&gt;: start a non-blocking background refresh before the expiration occurs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Backplane.md&#34;&gt;&lt;strong&gt;📢 Backplane&lt;/strong&gt;&lt;/a&gt;: in a multi-node scenario, it can notify the other nodes about changes in the cache, so all will be in-sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/DependencyInjection.md&#34;&gt;&lt;strong&gt;🔃 Dependency Injection&lt;/strong&gt;&lt;/a&gt;: native support for Dependency Injection, with a nice fluent interface including a Builder support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/NamedCaches.md&#34;&gt;&lt;strong&gt;📛 Named Caches&lt;/strong&gt;&lt;/a&gt;: easily work with multiple named caches, even if differently configured&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CoreMethods.md&#34;&gt;&lt;strong&gt;💫 Natively sync/async&lt;/strong&gt;&lt;/a&gt;: native support for both the synchronous and asynchronous programming model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Events.md&#34;&gt;&lt;strong&gt;📞 Events&lt;/strong&gt;&lt;/a&gt;: a comprehensive set of events, both at a high level and at lower levels (memory/distributed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Plugins.md&#34;&gt;&lt;strong&gt;🧩 Plugins&lt;/strong&gt;&lt;/a&gt;: extend FusionCache with additional behavior like adding support for metrics, statistics, etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Logging.md&#34;&gt;&lt;strong&gt;📜 Logging&lt;/strong&gt;&lt;/a&gt;: comprehensive, structured and customizable, via the standard &lt;code&gt;ILogger&lt;/code&gt; interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Something more 😏 ?&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Also, FusionCache has some nice &lt;strong&gt;additional features&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Portable&lt;/strong&gt;: targets .NET Standard 2.0, so it can run almost everywhere&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ High Performance&lt;/strong&gt;: FusionCache is optimized to minimize CPU usage and memory allocations to get better performance and lower the cost of your infrastructure all while obtaining a more stable, error resilient application&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Null caching&lt;/strong&gt;: explicitly supports caching of &lt;code&gt;null&lt;/code&gt; values differently than &#34;no value&#34;. This creates a less ambiguous usage, and typically leads to better performance because it avoids the classic problem of not being able to differentiate between &lt;em&gt;&#34;the value was not in the cache, go check the database&#34;&lt;/em&gt; and &lt;em&gt;&#34;the value was in the cache, and it was &lt;code&gt;null&lt;/code&gt;&#34;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Circuit-breaker&lt;/strong&gt;: it is possible to enable a simple circuit-breaker for when the distributed cache or the backplane become temporarily unavailable. This will prevent those components to be hit with an excessive load of requests (that would probably fail anyway) in a problematic moment, so it can gracefully get back on its feet. More advanced scenarios can be covered using a dedicated solution, like &lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Dynamic Jittering&lt;/strong&gt;: setting &lt;code&gt;JitterMaxDuration&lt;/code&gt; will add a small randomized extra duration to a cache entry&#39;s normal duration. This is useful to prevent variations of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_stampede&#34;&gt;Cache Stampede problem&lt;/a&gt; in a multi-node scenario&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Hot Swap&lt;/strong&gt;: supports thread-safe changes of the entire distributed cache or backplane implementation (add/swap/removal)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Cancellation&lt;/strong&gt;: every method supports cancellation via the standard &lt;code&gt;CancellationToken&lt;/code&gt;, so it is easy to cancel an entire pipeline of operation gracefully&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Code comments&lt;/strong&gt;: every property and method is fully documented in code, with useful informations provided via IntelliSense or similar technologies&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;✅ Fully annotated for &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references&#34;&gt;nullability&lt;/a&gt;&lt;/strong&gt;: every usage of nullable references has been annotated for a better flow analysis by the compiler&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;📦 Packages&lt;/h2&gt; &#xA;&lt;p&gt;Main packages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache/&#34;&gt;ZiggyCreatures.FusionCache&lt;/a&gt; &lt;br&gt; The core package&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Chaos/&#34;&gt;ZiggyCreatures.FusionCache.Chaos&lt;/a&gt; &lt;br&gt; A package with additional chaos-related utilities and implementations&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Chaos/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Chaos.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Chaos&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Serializers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson&lt;/a&gt; &lt;br&gt; A serializer, based on Newtonsoft Json.NET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.SystemTextJson/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.SystemTextJson&lt;/a&gt; &lt;br&gt; A serializer, based on the new System.Text.Json&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.SystemTextJson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.SystemTextJson.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.SystemTextJson&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack&lt;/a&gt; &lt;br&gt; A MessagePack serializer, based on the most used &lt;a href=&#34;https://github.com/neuecc/MessagePack-CSharp&#34;&gt;MessagePack&lt;/a&gt; serializer on .NET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.ProtoBufNet&lt;/a&gt; &lt;br&gt; A Protobuf serializer, based on one of the most used &lt;a href=&#34;https://github.com/protobuf-net/protobuf-net&#34;&gt;protobuf-net&lt;/a&gt; serializer on .NET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack&lt;/a&gt; &lt;br&gt; A serializer based on the uber fast new serializer by Neuecc, &lt;a href=&#34;https://github.com/Cysharp/MemoryPack&#34;&gt;MemoryPack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.ServiceStackJson&lt;/a&gt; &lt;br&gt; A serializer based on the &lt;a href=&#34;https://servicestack.net/&#34;&gt;ServiceStack&lt;/a&gt; JSON serializer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Backplanes:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.Memory/&#34;&gt;ZiggyCreatures.FusionCache.Backplane.Memory&lt;/a&gt; &lt;br&gt; An in-memory backplane (mainly for testing)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.Memory/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Backplane.Memory.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Backplane.Memory&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis/&#34;&gt;ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis&lt;/a&gt; &lt;br&gt; A Redis backplane, based on StackExchange.Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Third-party packages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core/&#34;&gt;JoeShook.ZiggyCreatures.FusionCache.Metrics.Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters/&#34;&gt;JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics/&#34;&gt;JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;⭐ Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;FusionCache can be installed via the nuget UI (search for the &lt;code&gt;ZiggyCreatures.FusionCache&lt;/code&gt; package) or via the nuget package manager console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;PM&amp;gt; Install-Package ZiggyCreatures.FusionCache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example, imagine having a method that retrieves a product from your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Product GetProductFromDb(int id) {&#xA;&#x9;// YOUR DATABASE CALL HERE&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;💡 This is using the &lt;strong&gt;sync&lt;/strong&gt; programming model, but it would be equally valid with the newer &lt;strong&gt;async&lt;/strong&gt; one for even better performance.&lt;/p&gt; &#xA;&lt;p&gt;To start using FusionCache the first thing is create a cache instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cache = new FusionCache(new FusionCacheOptions());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If instead you are using &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/DependencyInjection.md&#34;&gt;DI (Dependency Injection)&lt;/a&gt; use this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddFusionCache();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also specify some global options, like a default &lt;code&gt;FusionCacheEntryOptions&lt;/code&gt; object to serve as a default for each call we&#39;ll make, with a duration of &lt;code&gt;2 minutes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cache = new FusionCache(new FusionCacheOptions() {&#xA;&#x9;DefaultEntryOptions = new FusionCacheEntryOptions {&#xA;&#x9;&#x9;Duration = TimeSpan.FromMinutes(2)&#xA;&#x9;}&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, using DI, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddFusionCache()&#xA;&#x9;.WithDefaultEntryOptions(new FusionCacheEntryOptions {&#xA;&#x9;&#x9;Duration = TimeSpan.FromMinutes(2)&#xA;&#x9;})&#xA;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, to get the product from the cache and, if not there, get it from the database in an optimized way and cache it for &lt;code&gt;30 sec&lt;/code&gt; (overriding the default &lt;code&gt;2 min&lt;/code&gt; we set above) simply do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var id = 42;&#xA;&#xA;cache.GetOrSet&amp;lt;Product&amp;gt;(&#xA;&#x9;$&#34;product:{id}&#34;,&#xA;&#x9;_ =&amp;gt; GetProductFromDb(id),&#xA;&#x9;TimeSpan.FromSeconds(30)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it 🎉&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Want a little bit more 😏 ?&lt;/summary&gt; &#xA; &lt;p&gt;Now, imagine we want to do the same, but also:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;set the &lt;strong&gt;priority&lt;/strong&gt; of the cache item to &lt;code&gt;High&lt;/code&gt; (mainly used in the underlying memory cache)&lt;/li&gt; &#xA;  &lt;li&gt;enable &lt;strong&gt;fail-safe&lt;/strong&gt; for &lt;code&gt;2 hours&lt;/code&gt;, to allow an expired value to be used again in case of problems with the database (&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/FailSafe.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;set a factory &lt;strong&gt;soft timeout&lt;/strong&gt; of &lt;code&gt;100 ms&lt;/code&gt;, to avoid too slow factories crumbling your application when there&#39;s a fallback value readily available (&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;set a factory &lt;strong&gt;hard timeout&lt;/strong&gt; of &lt;code&gt;2 sec&lt;/code&gt;, so that, even if there is no fallback value to use, you will not wait undefinitely but instead an exception will be thrown to let you handle it however you want (&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;To do all of that we simply have to change the last line (reformatted for better readability):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;cache.GetOrSet&amp;lt;Product&amp;gt;(&#xA;&#x9;$&#34;product:{id}&#34;,&#xA;&#x9;_ =&amp;gt; GetProductFromDb(id),&#xA;&#x9;// THIS IS WHERE THE MAGIC HAPPENS&#xA;&#x9;options =&amp;gt; options&#xA;&#x9;&#x9;.SetDuration(TimeSpan.FromSeconds(30))&#xA;&#x9;&#x9;.SetPriority(CacheItemPriority.High)&#xA;&#x9;&#x9;.SetFailSafe(true, TimeSpan.FromHours(2))&#xA;&#x9;&#x9;.SetFactoryTimeouts(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(2))&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Basically, on top of specifying the &lt;em&gt;cache key&lt;/em&gt; and the &lt;em&gt;factory&lt;/em&gt;, instead of specifying just a &lt;em&gt;duration&lt;/em&gt; as a &lt;code&gt;TimeSpan&lt;/code&gt; we specify a &lt;code&gt;FusionCacheEntryOptions&lt;/code&gt; object - which contains all the options needed to control the behavior of FusionCache during each operation - in the form of a lambda that automatically duplicates the default entry options defined before (to copy all our defaults) while giving us a chance to modify it as we like for this specific call.&lt;/p&gt; &#xA; &lt;p&gt;Now let&#39;s say we really like these set of options (&lt;em&gt;priority&lt;/em&gt;, &lt;em&gt;fail-safe&lt;/em&gt; and &lt;em&gt;factory timeouts&lt;/em&gt;) and we want them to be the overall defaults, while keeping the ability to change something on a per-call basis (like the &lt;em&gt;duration&lt;/em&gt;).&lt;/p&gt; &#xA; &lt;p&gt;To do that we simply &lt;strong&gt;move&lt;/strong&gt; the customization of the entry options where we created the &lt;code&gt;DefaultEntryOptions&lt;/code&gt;, by changing it to something like this (the same is true for the DI way):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cache = new FusionCache(new FusionCacheOptions() {&#xA;&#x9;DefaultEntryOptions = new FusionCacheEntryOptions()&#xA;&#x9;&#x9;.SetDuration(TimeSpan.FromMinutes(2))&#xA;&#x9;&#x9;.SetPriority(CacheItemPriority.High)&#xA;&#x9;&#x9;.SetFailSafe(true, TimeSpan.FromHours(2))&#xA;&#x9;&#x9;.SetFactoryTimeouts(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(2))&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now these options will serve as the &lt;strong&gt;cache-wide default&lt;/strong&gt;, usable in every method call as a &#34;starting point&#34;.&lt;/p&gt; &#xA; &lt;p&gt;Then, we just change our method call to simply this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var id = 42;&#xA;&#xA;cache.GetOrSet&amp;lt;Product&amp;gt;(&#xA;&#x9;$&#34;product:{id}&#34;,&#xA;&#x9;_ =&amp;gt; GetProductFromDb(id),&#xA;&#x9;options =&amp;gt; options.SetDuration(TimeSpan.FromSeconds(30))&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;DefaultEntryOptions&lt;/code&gt; we did set before will be duplicated and only the duration will be changed for this call.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The documentation is available in the &lt;span&gt;📂&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/README.md&#34;&gt;docs&lt;/a&gt; folder, with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AGentleIntroduction.md&#34;&gt;&lt;strong&gt;🦄 A Gentle Introduction&lt;/strong&gt;&lt;/a&gt;: what you need to know first&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheLevels.md&#34;&gt;&lt;strong&gt;🔀 Cache Levels&lt;/strong&gt;&lt;/a&gt;: a bried description of the 2 available caching levels and how to setup them&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Backplane.md&#34;&gt;&lt;strong&gt;📢 Backplane&lt;/strong&gt;&lt;/a&gt;: how to get an always synchronized cache, even in a multi-node scenario&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheStampede.md&#34;&gt;&lt;strong&gt;🚀 Cache Stampede prevention&lt;/strong&gt;&lt;/a&gt;: no more overloads during a cold start or after an expiration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/FailSafe.md&#34;&gt;&lt;strong&gt;💣 Fail-Safe&lt;/strong&gt;&lt;/a&gt;: an explanation of how the fail-safe mechanism works&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;&lt;strong&gt;⏱ Timeouts&lt;/strong&gt;&lt;/a&gt;: the various types of timeouts at your disposal (calling a factory, using the distributed cache, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/NamedCaches.md&#34;&gt;&lt;strong&gt;📛 Named Caches&lt;/strong&gt;&lt;/a&gt;: how to work with multiple named FusionCache instances&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AdaptiveCaching.md&#34;&gt;&lt;strong&gt;🧙‍♂️ Adaptive Caching&lt;/strong&gt;&lt;/a&gt;: how to adapt cache duration (and more) based on the object being cached itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/ConditionalRefresh.md&#34;&gt;&lt;strong&gt;🔂 Conditional Refresh&lt;/strong&gt;&lt;/a&gt;: how to save resources when the remote data is not changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/EagerRefresh.md&#34;&gt;&lt;strong&gt;🦅 Eager Refresh&lt;/strong&gt;&lt;/a&gt;: how to start a background refresh eagerly, before the expiration occurs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/DependencyInjection.md&#34;&gt;&lt;strong&gt;🔃 Dependency Injection&lt;/strong&gt;&lt;/a&gt;: how to work with FusionCache + DI in .NET&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Options.md&#34;&gt;&lt;strong&gt;🎚 Options&lt;/strong&gt;&lt;/a&gt;: everything about the available options, both cache-wide and per-call&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CoreMethods.md&#34;&gt;&lt;strong&gt;🕹 Core Methods&lt;/strong&gt;&lt;/a&gt;: what you need to know about the core methods available&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Events.md&#34;&gt;&lt;strong&gt;📞 Events&lt;/strong&gt;&lt;/a&gt;: the events hub and how to use it&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Plugins.md&#34;&gt;&lt;strong&gt;🧩 Plugins&lt;/strong&gt;&lt;/a&gt;: how to create and use plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Logging.md&#34;&gt;&lt;strong&gt;📜 Logging&lt;/strong&gt;&lt;/a&gt;: logging configuration and usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;👩‍🏫 Step By Step&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you are in for a ride you can read a complete &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/StepByStep.md&#34;&gt;step by step example&lt;/a&gt; of why a cache is useful, why FusionCache could be even more so, how to apply most of the options available and what &lt;strong&gt;results&lt;/strong&gt; you can expect to obtain.&lt;/p&gt; &#xA;&lt;div style=&#34;text-align:center;&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/images/stepbystep-intro.png&#34; alt=&#34;FusionCache diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🆎 Comparison&lt;/h2&gt; &#xA;&lt;p&gt;There are various alternatives out there with different features, different performance characteristics (cpu/memory) and in general a different set of pros/cons.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Comparison.md&#34;&gt;feature comparison&lt;/a&gt; between existing .NET caching solutions may help you choose which one to use.&lt;/p&gt; &#xA;&lt;h2&gt;🧰 Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;FusionCache targets &lt;code&gt;.NET Standard 2.0&lt;/code&gt; so any compatible .NET implementation is fine: this means &lt;code&gt;.NET Framework&lt;/code&gt; (the old one), &lt;code&gt;.NET Core 2+&lt;/code&gt; and &lt;code&gt;.NET 5/6+&lt;/code&gt; (the new ones), &lt;code&gt;Mono&lt;/code&gt; 5.4+ and more (see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support&#34;&gt;here&lt;/a&gt; for a complete rundown).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: if you are running on &lt;strong&gt;.NET Framework 4.6.1&lt;/strong&gt; and want to use &lt;strong&gt;.NET Standard&lt;/strong&gt; packages Microsoft suggests to upgrade to .NET Framework 4.7.2 or higher (see the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support&#34;&gt;.NET Standard Documentation&lt;/a&gt;) to avoid some known dependency issues.&lt;/p&gt; &#xA;&lt;h2&gt;🖼 Logo&lt;/h2&gt; &#xA;&lt;p&gt;The logo is an &lt;a href=&#34;https://dribbble.com/shots/14854206-FusionCache-logo&#34;&gt;original creation&lt;/a&gt; and is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Sloth&#34;&gt;sloth&lt;/a&gt; because, you know, speed.&lt;/p&gt; &#xA;&lt;h2&gt;💰 Support&lt;/h2&gt; &#xA;&lt;p&gt;Nothing to do here.&lt;/p&gt; &#xA;&lt;p&gt;After years of using a lot of open source stuff for free, this is just me trying to give something back to the community.&lt;/p&gt; &#xA;&lt;p&gt;If you find FusionCache useful please just &lt;a href=&#34;https://twitter.com/jodydonetti&#34;&gt;&lt;strong&gt;✉ drop me a line&lt;/strong&gt;&lt;/a&gt;, I would be interested in knowing about your usage.&lt;/p&gt; &#xA;&lt;p&gt;And if you really want to talk about money, please consider making &lt;strong&gt;❤ a donation to a good cause&lt;/strong&gt; of your choosing, and maybe let me know about that.&lt;/p&gt; &#xA;&lt;h2&gt;💼 Is it Production Ready &lt;span&gt;™&lt;/span&gt; ?&lt;/h2&gt; &#xA;&lt;p&gt;Yes!&lt;/p&gt; &#xA;&lt;p&gt;Even though the current version is &lt;code&gt;0.X&lt;/code&gt; for an excess of caution, FusionCache is already used &lt;strong&gt;in production&lt;/strong&gt; on multiple &lt;strong&gt;real world projects&lt;/strong&gt; happily handling millions of requests per day, or at least these are the projects I&#39;m aware of.&lt;/p&gt; &#xA;&lt;p&gt;Considering that the FusionCache packages have been downloaded more than &lt;strong&gt;a million times&lt;/strong&gt; (thanks everybody!) it may very well be used even more.&lt;/p&gt; &#xA;&lt;p&gt;And again, if you are using it please &lt;a href=&#34;https://twitter.com/jodydonetti&#34;&gt;&lt;strong&gt;✉ drop me a line&lt;/strong&gt;&lt;/a&gt;, I&#39;d like to know!&lt;/p&gt;</summary>
  </entry>
</feed>