<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:36:28Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>actions/runner</title>
    <updated>2022-07-01T01:36:28Z</updated>
    <id>tag:github.com,2022-07-01:/actions/runner</id>
    <link href="https://github.com/actions/runner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Runner for GitHub Actions ðŸš€&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/res/github-graph.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;GitHub Actions Runner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/actions/runner/actions&#34;&gt;&lt;img src=&#34;https://github.com/actions/runner/workflows/Runner%20CI/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The runner is the application that runs a job from a GitHub Actions workflow. It is used by GitHub Actions in the &lt;a href=&#34;https://github.com/actions/virtual-environments&#34;&gt;hosted virtual environments&lt;/a&gt;, or you can &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/about-self-hosted-runners&#34;&gt;self-host the runner&lt;/a&gt; in your own environment.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;For more information about installing and using self-hosted runners, see &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/adding-self-hosted-runners&#34;&gt;Adding self-hosted runners&lt;/a&gt; and &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/using-self-hosted-runners-in-a-workflow&#34;&gt;Using self-hosted runners in a workflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Runner releases:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/res/win_sm.png&#34; alt=&#34;win&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/start/envwin.md&#34;&gt;Pre-reqs&lt;/a&gt; | &lt;a href=&#34;https://github.com/actions/runner/releases&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/res/apple_sm.png&#34; alt=&#34;macOS&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/start/envosx.md&#34;&gt;Pre-reqs&lt;/a&gt; | &lt;a href=&#34;https://github.com/actions/runner/releases&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/res/linux_sm.png&#34; alt=&#34;linux&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/start/envlinux.md&#34;&gt;Pre-reqs&lt;/a&gt; | &lt;a href=&#34;https://github.com/actions/runner/releases&#34;&gt;Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We accept contributions in the form of issues and pull requests. &lt;a href=&#34;https://raw.githubusercontent.com/actions/runner/main/docs/contribute.md&#34;&gt;Read more here&lt;/a&gt; before contributing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mob-sakai/UIEffect</title>
    <updated>2022-07-01T01:36:28Z</updated>
    <id>tag:github.com,2022-07-01:/mob-sakai/UIEffect</id>
    <link href="https://github.com/mob-sakai/UIEffect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UIEffect is an effect component for uGUI element in Unity. Let&#39;s decorate your UI with effects!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UIEffect&lt;/h1&gt; &#xA;&lt;p&gt;UIEffect provides visual effect components for Unity UI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openupm.com/packages/com.coffee.ui-effect/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/com.coffee.ui-effect?label=openupm&amp;amp;registry_uri=https://package.openupm.com&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/mob-sakai/UIEffect?include_prereleases&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/mob-sakai/UIEffect.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/unity-2017.1%20or%20later-green.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mob-sakai/UIEffect.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-orange.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/subscription&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/mob-sakai/UIEffect.svg?style=social&amp;amp;label=Watch&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=mob_sakai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/mob_sakai.svg?label=Follow&amp;amp;style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt; &lt;a href=&#34;https://raw.githubusercontent.com/mob-sakai/UIEffect/upm/#Description&#34;&gt;Description&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mob-sakai/UIEffect/upm/#demo&#34;&gt;WebGL Demo&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mob-sakai/UIEffect/upm/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mob-sakai/UIEffect/upm/#usage&#34;&gt;Usage&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mob-sakai/UIEffect/upm/#example-of-using&#34;&gt;Example of using&lt;/a&gt; | &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/raw/upm/CHANGELOG.md&#34;&gt;Change log&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mob-sakai/UIEffect/upm/#support&#34;&gt;Support&lt;/a&gt; &amp;gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s decorate your UI with effects! You can control parameters as you like from the script as well as inspector. AnimationClip is supported as a matter of course!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/41398364-155cf5a6-6ff2-11e8-8124-9d16ef6ca267.gif&#34; alt=&#34;thumbnail&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/12690315/38594668-636dd3ac-3d82-11e8-9951-820964a6a95f.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Available effects&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIEffect&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Combine some visual effects.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Effect Mode:&lt;/strong&gt; Grayscale, Sepia, Nega, Pixelation&lt;br&gt;&lt;strong&gt;Color Mode:&lt;/strong&gt; Multiply, Fill, Additive, Subtract&lt;br&gt;&lt;strong&gt;Blur Mode:&lt;/strong&gt; Fast, Medium, Detail&lt;br&gt;&lt;strong&gt;Advanced Blur:&lt;/strong&gt; Enable more beautiful blurring.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46639603-258df180-cba2-11e8-8f50-9e93bdc4c96e.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIShiny&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply shining effect to a graphic.&lt;br&gt;The effect does not require Mask component or normal map.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; Effect factor, Width, Rotation, Softness, Brightness, Gloss&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46639689-b1078280-cba2-11e8-8716-cbc634af7293.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIDissolve&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply dissolve effect to a graphic.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Color Mode for edge:&lt;/strong&gt; Multiply, Fill, Additive, Subtract&lt;br&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; Effect factor, Width, Rotation, Softness, Edge color&lt;br&gt;&lt;strong&gt;Options:&lt;/strong&gt; Effect area, Keep effect aspect ratio&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46639690-b1078280-cba2-11e8-8aa9-1d2650fe9a62.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIHsvModifier&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Modify HSV for graphic.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Target:&lt;/strong&gt; Color, Range&lt;br&gt;&lt;strong&gt;Adjustment:&lt;/strong&gt; Hue, Saturation, Value&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/43200006-d6e2bf54-904e-11e8-9f22-0c0f9ce5912f.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UITransition Effect&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply transition effect with a single channel texture.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Effect Mode:&lt;/strong&gt; Cutoff, Fade, Dissolve&lt;br&gt;&lt;strong&gt;Options:&lt;/strong&gt; Effect area, Keep effect aspect ratio, transition texture&lt;br&gt;&lt;strong&gt;Pass Ray On Hidden:&lt;/strong&gt; Disable the graphic&#39;s raycastTarget on hidden.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46639688-b1078280-cba2-11e8-8bbb-16b8498bca5f.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h5&gt;The following effects can be used with the above components.&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIShadow&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add shadow/outline to a graphic.&lt;br&gt;The performance is better than the default Shadow/Outline component.&lt;br&gt;&lt;br&gt;&lt;strong&gt;ShadowStyle:&lt;/strong&gt; Shadow, Shadow3, Outline, Outline8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46639604-258df180-cba2-11e8-98a9-aa31f04c695d.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIGradient&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change vertex color as gradient with angle and offset.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Direction:&lt;/strong&gt; Horizontal, Vertical, Angle, Diagonal&lt;br&gt;&lt;strong&gt;Options:&lt;/strong&gt; Offset, Color space&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/40716995-ca87665e-6445-11e8-8233-ec2e21fefd6b.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;UIFlip&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Flip a graphic.&lt;br&gt;&lt;br&gt;&lt;strong&gt;Direction:&lt;/strong&gt; Horizontal, Vertical, Both&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/40716996-cab1fd7e-6445-11e8-9753-962d23991d86.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://mob-sakai.github.io/UIEffect&#34;&gt;WebGL Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Requirement&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unity 2017.1 or later&lt;/li&gt; &#xA; &lt;li&gt;No other SDK are required&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using OpenUPM (for Unity 2018.3 or later)&lt;/h4&gt; &#xA;&lt;p&gt;This package is available on &lt;a href=&#34;https://openupm.com&#34;&gt;OpenUPM&lt;/a&gt;. You can install it via &lt;a href=&#34;https://github.com/openupm/openupm-cli&#34;&gt;openupm-cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openupm add com.coffee.ui-effect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Git (for Unity 2018.3 or later)&lt;/h4&gt; &#xA;&lt;p&gt;Find the manifest.json file in the Packages folder of your project and edit it to look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA; &#34;dependencies&#34;: {&#xA; &#34;com.coffee.ui-effect&#34;: &#34;https://github.com/mob-sakai/UIEffect.git&#34;,&#xA; ...&#xA; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the package, change suffix &lt;code&gt;#{version}&lt;/code&gt; to the target version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;e.g. &lt;code&gt;&#34;com.coffee.ui-effect&#34;: &#34;https://github.com/mob-sakai/UIEffect.git#4.0.0&#34;,&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or, use &lt;a href=&#34;https://github.com/mob-sakai/UpmGitExtension&#34;&gt;UpmGitExtension&lt;/a&gt; to install and update the package.&lt;/p&gt; &#xA;&lt;h4&gt;For Unity 2018.2 or earlier&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download a source code zip file from &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/releases&#34;&gt;Releases&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;Extract it&lt;/li&gt; &#xA; &lt;li&gt;Import it into the following directory in your Unity project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Packages&lt;/code&gt; (It works as an embedded package. For Unity 2018.1 or later)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Assets&lt;/code&gt; (Legacy way. For Unity 2017.1 or later)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to play demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Unity 2019.1 or later &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;Package Manager&lt;/code&gt; window and select &lt;code&gt;UI Effect&lt;/code&gt; package in package list and click &lt;code&gt;Demo &amp;gt; Import in project&lt;/code&gt; button&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Unity 2018.4 or earlier &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;Assets/Samples/UIEffect/Import Demo&lt;/code&gt; from menu&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The assets will be imported into &lt;code&gt;Assets/Samples/UI Effect/{version}/Demo&lt;/code&gt;.&lt;br&gt; Open `&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add any effect component to UI element (Image, RawImage, Text, etc...) from &lt;code&gt;Add Component&lt;/code&gt; in inspector or &lt;code&gt;Component &amp;gt; UI &amp;gt; UIEffect &amp;gt; ...&lt;/code&gt; menu.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/12690315/78853708-811c9200-7a5a-11ea-9826-0606046525b6.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adjust the parameters of the effect as you like, in inspector.&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/12690315/38594668-636dd3ac-3d82-11e8-9951-820964a6a95f.gif&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can add or modify effects from the script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var uieffect = gameObject.AddComponent&amp;lt;UIEffect&amp;gt;();&#xA;uieffect.effectMode = EffectMode.Grayscale;&#xA;uieffect.effectFactor = 0.85f;&#xA;uieffect.colorMode = ColorMode.Add;&#xA;uieffect.effectColor = Color.white;&#xA;uieffect.colorFactor = 0.1f;&#xA;uieffect.blurMode = BlurMode.FastBlur;&#xA;uieffect.blurFactor = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/78853467-e4f28b00-7a59-11ea-82fa-3235aa95e993.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Enjoy!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example of using&lt;/h2&gt; &#xA;&lt;p&gt;UIEffect can easily be used in a variety of cases in the game.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Case&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Screenshot&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lock/unlock contents&lt;/td&gt; &#xA;   &lt;td&gt;Use UIEffect to apply grayscale.&lt;br&gt;Indicate to user that the content is unavailable.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46563469-aba8fe80-c93c-11e8-850f-949f6f8da742.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Silhouette&lt;/td&gt; &#xA;   &lt;td&gt;Use UIEffect for filling color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46563576-3db10700-c93d-11e8-960e-4336ff3ce481.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Soft shadow/&lt;br&gt;Outer glow&lt;/td&gt; &#xA;   &lt;td&gt;Use UIEffect and UIShadow to blur the shadow.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46566001-452edb00-c952-11e8-9cc4-6098a9eb67f3.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Colored shadow&lt;/td&gt; &#xA;   &lt;td&gt;Use UIEffect and UIShadow to fill shadow with color.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46566000-452edb00-c952-11e8-8d20-6ccc3fa92ae4.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blurred dynamic font&lt;/td&gt; &#xA;   &lt;td&gt;Use UIEffect to blur text.&lt;br&gt;To blur dynamic font cleanly, enable &lt;code&gt;Advanced Blur&lt;/code&gt; option.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46566002-45c77180-c952-11e8-87cb-4d915e0614be.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text with outline &amp;amp; shadow&lt;/td&gt; &#xA;   &lt;td&gt;Use two UIShadows to add outline and shadow.&lt;br&gt;There is less overdraw than default Outline/Shadow.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46566003-45c77180-c952-11e8-9b47-7bf563ffbaa7.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shining button&lt;/td&gt; &#xA;   &lt;td&gt;Use UIShiny for shining button.&lt;br&gt;Indicate to user that you can press the button.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46563539-fb87c580-c93c-11e8-8c08-0f21872c47d4.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Screen transition&lt;/td&gt; &#xA;   &lt;td&gt;Use UITransitionEffect to transition the screen with any transition texture.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/46565182-dfd5ec80-c947-11e8-834f-a2ef67ad0d95.gif&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT&lt;/li&gt; &#xA; &lt;li&gt;Â© UTJ/UCL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;This is an open-source project that I am developing in my free time. If you like it, you can support me. By supporting, you let me spend more time working on better tools that you can use for free. :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/join/2343451?&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/50731629-3b18b480-11ad-11e9-8fad-4b13f27969c1.png&#34; alt=&#34;become_a_patron_on_patreon&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/users/mob-sakai/sponsorship&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12690315/66942881-03686280-f085-11e9-9586-fc0b6011029f.png&#34; alt=&#34;become_a_sponsor_on_github&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mob-sakai&#34;&gt;mob-sakai&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=mob_sakai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/mob_sakai.svg?label=Follow&amp;amp;style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub page : &lt;a href=&#34;https://github.com/mob-sakai/UIEffect&#34;&gt;https://github.com/mob-sakai/UIEffect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Releases : &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/releases&#34;&gt;https://github.com/mob-sakai/UIEffect/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue tracker : &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/issues&#34;&gt;https://github.com/mob-sakai/UIEffect/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change log : &lt;a href=&#34;https://github.com/mob-sakai/UIEffect/raw/upm/CHANGELOG.md&#34;&gt;https://github.com/mob-sakai/UIEffect/blob/upm/CHANGELOG.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sta/websocket-sharp</title>
    <updated>2022-07-01T01:36:28Z</updated>
    <id>tag:github.com,2022-07-01:/sta/websocket-sharp</id>
    <link href="https://github.com/sta/websocket-sharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C# implementation of the WebSocket protocol client and server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/websocket-sharp_logo.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Welcome to websocket-sharp!&lt;/h2&gt; &#xA;&lt;p&gt;websocket-sharp supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#supported-websocket-specifications&#34;&gt;RFC 6455&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#websocket-client&#34;&gt;WebSocket Client&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#websocket-server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#per-message-compression&#34;&gt;Per-message Compression&lt;/a&gt; extension&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#secure-connection&#34;&gt;Secure Connection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#http-authentication&#34;&gt;HTTP Authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#query-string-origin-header-and-cookies&#34;&gt;Query string, Origin header, and Cookies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sta/websocket-sharp/master/#connecting-through-the-http-proxy-server&#34;&gt;Connecting through the HTTP proxy server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;.NET Framework &lt;strong&gt;3.5&lt;/strong&gt; or later (includes compatible environment such as &lt;a href=&#34;http://www.mono-project.com&#34;&gt;Mono&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master&#34;&gt;master&lt;/a&gt; for production releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/hybi-00&#34;&gt;hybi-00&lt;/a&gt; for older &lt;a href=&#34;http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00&#34;&gt;draft-ietf-hybi-thewebsocketprotocol-00&lt;/a&gt;. No longer maintained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/draft75&#34;&gt;draft75&lt;/a&gt; for even more old &lt;a href=&#34;http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75&#34;&gt;draft-hixie-thewebsocketprotocol-75&lt;/a&gt;. No longer maintained.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;websocket-sharp is built as a single assembly, &lt;strong&gt;websocket-sharp.dll&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;websocket-sharp is developed with &lt;a href=&#34;http://monodevelop.com&#34;&gt;MonoDevelop&lt;/a&gt;. So a simple way to build is to open &lt;strong&gt;websocket-sharp.sln&lt;/strong&gt; and run build for &lt;strong&gt;websocket-sharp project&lt;/strong&gt; with any of the build configurations (e.g. &lt;code&gt;Debug&lt;/code&gt;) in MonoDevelop.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Self Build&lt;/h3&gt; &#xA;&lt;p&gt;You should add your websocket-sharp.dll (e.g. &lt;code&gt;/path/to/websocket-sharp/bin/Debug/websocket-sharp.dll&lt;/code&gt;) to the library references of your project.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use that dll in your &lt;a href=&#34;http://unity3d.com&#34;&gt;Unity&lt;/a&gt; project, you should add it to any folder of your project (e.g. &lt;code&gt;Assets/Plugins&lt;/code&gt;) in the &lt;strong&gt;Unity Editor&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;NuGet Gallery&lt;/h3&gt; &#xA;&lt;p&gt;websocket-sharp is available on the &lt;a href=&#34;http://www.nuget.org&#34;&gt;NuGet Gallery&lt;/a&gt;, as still a &lt;strong&gt;prerelease&lt;/strong&gt; version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/WebSocketSharp&#34;&gt;NuGet Gallery: websocket-sharp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add websocket-sharp to your project with the NuGet Package Manager, by using the following command in the Package Manager Console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package WebSocketSharp -Pre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unity Asset Store&lt;/h3&gt; &#xA;&lt;p&gt;websocket-sharp is available on the Unity Asset Store (Sorry, Not available now).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://u3d.as/content/sta-blockhead/websocket-sharp-for-unity&#34;&gt;WebSocket-Sharp for Unity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It works with &lt;strong&gt;Unity Free&lt;/strong&gt;, but there are some limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.unity3d.com/Manual/SecuritySandbox.html&#34;&gt;Security Sandbox of the Webplayer&lt;/a&gt; (The server is not available in Web Player)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.unity3d.com/Manual/webgl-networking.html&#34;&gt;WebGL Networking&lt;/a&gt; (Not available in WebGL)&lt;/li&gt; &#xA; &lt;li&gt;Incompatible platform (Not available for such UWP)&lt;/li&gt; &#xA; &lt;li&gt;Lack of dll for the System.IO.Compression (The compression extension is not available on Windows)&lt;/li&gt; &#xA; &lt;li&gt;.NET Socket Support for iOS/Android (iOS/Android Pro is required if your Unity is earlier than Unity 5)&lt;/li&gt; &#xA; &lt;li&gt;.NET API 2.0 compatibility level for iOS/Android&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.NET API 2.0 compatibility level for iOS/Android may require to fix lack of some features for later than .NET Framework 2.0, such as the &lt;code&gt;System.Func&amp;lt;...&amp;gt;&lt;/code&gt; delegates (so i have added them in the asset package).&lt;/p&gt; &#xA;&lt;p&gt;And it is priced at &lt;strong&gt;US$15&lt;/strong&gt;. I believe your $15 makes this project more better, &lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;WebSocket Client&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;using WebSocketSharp;&#xA;&#xA;namespace Example&#xA;{&#xA;  public class Program&#xA;  {&#xA;    public static void Main (string[] args)&#xA;    {&#xA;      using (var ws = new WebSocket (&#34;ws://dragonsnest.far/Laputa&#34;)) {&#xA;        ws.OnMessage += (sender, e) =&amp;gt;&#xA;            Console.WriteLine (&#34;Laputa says: &#34; + e.Data);&#xA;&#xA;        ws.Connect ();&#xA;        ws.Send (&#34;BALUS&#34;);&#xA;        Console.ReadKey (true);&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;p&gt;Required namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using WebSocketSharp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocket&lt;/code&gt; class exists in the &lt;code&gt;WebSocketSharp&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;p&gt;Creating a new instance of the &lt;code&gt;WebSocket&lt;/code&gt; class with the WebSocket URL to connect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var ws = new WebSocket (&#34;ws://example.com&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocket&lt;/code&gt; class inherits the &lt;code&gt;System.IDisposable&lt;/code&gt; interface, so you can create it with the &lt;code&gt;using&lt;/code&gt; statement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var ws = new WebSocket (&#34;ws://example.com&#34;)) {&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will &lt;strong&gt;close&lt;/strong&gt; the WebSocket connection with status code &lt;code&gt;1001&lt;/code&gt; (going away) when the control leaves the &lt;code&gt;using&lt;/code&gt; block.&lt;/p&gt; &#xA;&lt;h4&gt;Step 3&lt;/h4&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;WebSocket&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;h5&gt;WebSocket.OnOpen Event&lt;/h5&gt; &#xA;&lt;p&gt;This event occurs when the WebSocket connection has been established.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.OnOpen += (sender, e) =&amp;gt; {&#xA;    ...&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;System.EventArgs.Empty&lt;/code&gt; is passed as &lt;code&gt;e&lt;/code&gt;, so you do not need to use it.&lt;/p&gt; &#xA;&lt;h5&gt;WebSocket.OnMessage Event&lt;/h5&gt; &#xA;&lt;p&gt;This event occurs when the &lt;code&gt;WebSocket&lt;/code&gt; receives a message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.OnMessage += (sender, e) =&amp;gt; {&#xA;    ...&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;WebSocketSharp.MessageEventArgs&lt;/code&gt; instance is passed as &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to get the message data, you should access &lt;code&gt;e.Data&lt;/code&gt; or &lt;code&gt;e.RawData&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;e.Data&lt;/code&gt; property returns a &lt;code&gt;string&lt;/code&gt;, so it is mainly used to get the &lt;strong&gt;text&lt;/strong&gt; message data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;e.RawData&lt;/code&gt; property returns a &lt;code&gt;byte[]&lt;/code&gt;, so it is mainly used to get the &lt;strong&gt;binary&lt;/strong&gt; message data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;if (e.IsText) {&#xA;  // Do something with e.Data.&#xA;  ...&#xA;&#xA;  return;&#xA;}&#xA;&#xA;if (e.IsBinary) {&#xA;  // Do something with e.RawData.&#xA;  ...&#xA;&#xA;  return;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you would like to notify that a &lt;strong&gt;ping&lt;/strong&gt; has been received, via this event, you should set the &lt;code&gt;WebSocket.EmitOnPing&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.EmitOnPing = true;&#xA;ws.OnMessage += (sender, e) =&amp;gt; {&#xA;    if (e.IsPing) {&#xA;      // Do something to notify that a ping has been received.&#xA;      ...&#xA;&#xA;      return;&#xA;    }&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;WebSocket.OnError Event&lt;/h5&gt; &#xA;&lt;p&gt;This event occurs when the &lt;code&gt;WebSocket&lt;/code&gt; gets an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.OnError += (sender, e) =&amp;gt; {&#xA;    ...&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;WebSocketSharp.ErrorEventArgs&lt;/code&gt; instance is passed as &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to get the error message, you should access &lt;code&gt;e.Message&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;e.Message&lt;/code&gt; property returns a &lt;code&gt;string&lt;/code&gt; that represents the error message.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;e.Exception&lt;/code&gt; property returns a &lt;code&gt;System.Exception&lt;/code&gt; instance that represents the cause of the error if it is due to an exception.&lt;/p&gt; &#xA;&lt;h5&gt;WebSocket.OnClose Event&lt;/h5&gt; &#xA;&lt;p&gt;This event occurs when the WebSocket connection has been closed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.OnClose += (sender, e) =&amp;gt; {&#xA;    ...&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;WebSocketSharp.CloseEventArgs&lt;/code&gt; instance is passed as &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to get the reason for the close, you should access &lt;code&gt;e.Code&lt;/code&gt; or &lt;code&gt;e.Reason&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;e.Code&lt;/code&gt; property returns a &lt;code&gt;ushort&lt;/code&gt; that represents the status code for the close.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;e.Reason&lt;/code&gt; property returns a &lt;code&gt;string&lt;/code&gt; that represents the reason for the close.&lt;/p&gt; &#xA;&lt;h4&gt;Step 4&lt;/h4&gt; &#xA;&lt;p&gt;Connecting to the WebSocket server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Connect ();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to connect to the server asynchronously, you should use the &lt;code&gt;WebSocket.ConnectAsync ()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h4&gt;Step 5&lt;/h4&gt; &#xA;&lt;p&gt;Sending data to the WebSocket server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Send (data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocket.Send&lt;/code&gt; method is overloaded.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;WebSocket.Send (string)&lt;/code&gt;, &lt;code&gt;WebSocket.Send (byte[])&lt;/code&gt;, or &lt;code&gt;WebSocket.Send (System.IO.FileInfo)&lt;/code&gt; method to send the data.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to send the data asynchronously, you should use the &lt;code&gt;WebSocket.SendAsync&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.SendAsync (data, completed);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And also if you would like to do something when the send is complete, you should set &lt;code&gt;completed&lt;/code&gt; to any &lt;code&gt;Action&amp;lt;bool&amp;gt;&lt;/code&gt; delegate.&lt;/p&gt; &#xA;&lt;h4&gt;Step 6&lt;/h4&gt; &#xA;&lt;p&gt;Closing the WebSocket connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Close (code, reason);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to close the connection explicitly, you should use the &lt;code&gt;WebSocket.Close&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocket.Close&lt;/code&gt; method is overloaded.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;WebSocket.Close ()&lt;/code&gt;, &lt;code&gt;WebSocket.Close (ushort)&lt;/code&gt;, &lt;code&gt;WebSocket.Close (WebSocketSharp.CloseStatusCode)&lt;/code&gt;, &lt;code&gt;WebSocket.Close (ushort, string)&lt;/code&gt;, or &lt;code&gt;WebSocket.Close (WebSocketSharp.CloseStatusCode, string)&lt;/code&gt; method to close the connection.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to close the connection asynchronously, you should use the &lt;code&gt;WebSocket.CloseAsync&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h3&gt;WebSocket Server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;using WebSocketSharp;&#xA;using WebSocketSharp.Server;&#xA;&#xA;namespace Example&#xA;{&#xA;  public class Laputa : WebSocketBehavior&#xA;  {&#xA;    protected override void OnMessage (MessageEventArgs e)&#xA;    {&#xA;      var msg = e.Data == &#34;BALUS&#34;&#xA;                ? &#34;Are you kidding?&#34;&#xA;                : &#34;I&#39;m not available now.&#34;;&#xA;&#xA;      Send (msg);&#xA;    }&#xA;  }&#xA;&#xA;  public class Program&#xA;  {&#xA;    public static void Main (string[] args)&#xA;    {&#xA;      var wssv = new WebSocketServer (&#34;ws://dragonsnest.far&#34;);&#xA;&#xA;      wssv.AddWebSocketService&amp;lt;Laputa&amp;gt; (&#34;/Laputa&#34;);&#xA;      wssv.Start ();&#xA;      Console.ReadKey (true);&#xA;      wssv.Stop ();&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;p&gt;Required namespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using WebSocketSharp.Server;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocketBehavior&lt;/code&gt; and &lt;code&gt;WebSocketServer&lt;/code&gt; classes exist in the &lt;code&gt;WebSocketSharp.Server&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;p&gt;Creating the class that inherits the &lt;code&gt;WebSocketBehavior&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you would like to provide an echo service,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;using WebSocketSharp;&#xA;using WebSocketSharp.Server;&#xA;&#xA;public class Echo : WebSocketBehavior&#xA;{&#xA;  protected override void OnMessage (MessageEventArgs e)&#xA;  {&#xA;    Send (e.Data);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you would like to provide a chat service,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;&#xA;using WebSocketSharp;&#xA;using WebSocketSharp.Server;&#xA;&#xA;public class Chat : WebSocketBehavior&#xA;{&#xA;  private string _suffix;&#xA;&#xA;  public Chat ()&#xA;  {&#xA;    _suffix = String.Empty;&#xA;  }&#xA;&#xA;  public string Suffix {&#xA;    get {&#xA;      return _suffix;&#xA;    }&#xA;&#xA;    set {&#xA;      _suffix = value ?? String.Empty;&#xA;    }&#xA;  }&#xA;&#xA;  protected override void OnMessage (MessageEventArgs e)&#xA;  {&#xA;    Sessions.Broadcast (e.Data + _suffix);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can define the behavior of any WebSocket service by creating the class that inherits the &lt;code&gt;WebSocketBehavior&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;If you override the &lt;code&gt;WebSocketBehavior.OnMessage (MessageEventArgs)&lt;/code&gt; method, it will be called when the &lt;code&gt;WebSocket&lt;/code&gt; used in a session in the service receives a message.&lt;/p&gt; &#xA;&lt;p&gt;And if you override the &lt;code&gt;WebSocketBehavior.OnOpen ()&lt;/code&gt;, &lt;code&gt;WebSocketBehavior.OnError (ErrorEventArgs)&lt;/code&gt;, and &lt;code&gt;WebSocketBehavior.OnClose (CloseEventArgs)&lt;/code&gt; methods, each of them will be called when each of the &lt;code&gt;WebSocket&lt;/code&gt; events (&lt;code&gt;OnOpen&lt;/code&gt;, &lt;code&gt;OnError&lt;/code&gt;, and &lt;code&gt;OnClose&lt;/code&gt;) occurs.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocketBehavior.Send&lt;/code&gt; method can send data to the client on a session in the service.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to get the sessions in the service, you should access the &lt;code&gt;WebSocketBehavior.Sessions&lt;/code&gt; property (returns a &lt;code&gt;WebSocketSharp.Server.WebSocketSessionManager&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocketBehavior.Sessions.Broadcast&lt;/code&gt; method can send data to every client in the service.&lt;/p&gt; &#xA;&lt;h4&gt;Step 3&lt;/h4&gt; &#xA;&lt;p&gt;Creating a new instance of the &lt;code&gt;WebSocketServer&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var wssv = new WebSocketServer (4649);&#xA;&#xA;wssv.AddWebSocketService&amp;lt;Echo&amp;gt; (&#34;/Echo&#34;);&#xA;wssv.AddWebSocketService&amp;lt;Chat&amp;gt; (&#34;/Chat&#34;);&#xA;wssv.AddWebSocketService&amp;lt;Chat&amp;gt; (&#34;/ChatWithNyan&#34;, s =&amp;gt; s.Suffix = &#34; Nyan!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add any WebSocket service to your &lt;code&gt;WebSocketServer&lt;/code&gt; with the specified behavior and absolute path to the service, by using the &lt;code&gt;WebSocketServer.AddWebSocketService&amp;lt;TBehavior&amp;gt; (string)&lt;/code&gt; or &lt;code&gt;WebSocketServer.AddWebSocketService&amp;lt;TBehavior&amp;gt; (string, Action&amp;lt;TBehavior&amp;gt;)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;The type of &lt;code&gt;TBehavior&lt;/code&gt; must inherit the &lt;code&gt;WebSocketBehavior&lt;/code&gt; class, and must have a public parameterless constructor.&lt;/p&gt; &#xA;&lt;p&gt;So you can use a class in the above Step 2 to add the service.&lt;/p&gt; &#xA;&lt;p&gt;If you create a new instance of the &lt;code&gt;WebSocketServer&lt;/code&gt; class without a port number, it sets the port number to &lt;strong&gt;80&lt;/strong&gt;. So it is necessary to run with root permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo mono example2.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 4&lt;/h4&gt; &#xA;&lt;p&gt;Starting the WebSocket server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;wssv.Start ();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 5&lt;/h4&gt; &#xA;&lt;p&gt;Stopping the WebSocket server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;wssv.Stop ();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Server with the WebSocket&lt;/h3&gt; &#xA;&lt;p&gt;I have modified the &lt;code&gt;System.Net.HttpListener&lt;/code&gt;, &lt;code&gt;System.Net.HttpListenerContext&lt;/code&gt;, and some other classes from &lt;strong&gt;&lt;a href=&#34;http://www.mono-project.com&#34;&gt;Mono&lt;/a&gt;&lt;/strong&gt; to create an HTTP server that allows to accept the WebSocket handshake requests.&lt;/p&gt; &#xA;&lt;p&gt;So websocket-sharp provides the &lt;code&gt;WebSocketSharp.Server.HttpServer&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;p&gt;You can add any WebSocket service to your &lt;code&gt;HttpServer&lt;/code&gt; with the specified behavior and path to the service, by using the &lt;code&gt;HttpServer.AddWebSocketService&amp;lt;TBehavior&amp;gt; (string)&lt;/code&gt; or &lt;code&gt;HttpServer.AddWebSocketService&amp;lt;TBehavior&amp;gt; (string, Action&amp;lt;TBehavior&amp;gt;)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var httpsv = new HttpServer (4649);&#xA;&#xA;httpsv.AddWebSocketService&amp;lt;Echo&amp;gt; (&#34;/Echo&#34;);&#xA;httpsv.AddWebSocketService&amp;lt;Chat&amp;gt; (&#34;/Chat&#34;);&#xA;httpsv.AddWebSocketService&amp;lt;Chat&amp;gt; (&#34;/ChatWithNyan&#34;, s =&amp;gt; s.Suffix = &#34; Nyan!&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, would you see &lt;strong&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master/Example3&#34;&gt;Example3&lt;/a&gt;&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;h3&gt;WebSocket Extensions&lt;/h3&gt; &#xA;&lt;h4&gt;Per-message Compression&lt;/h4&gt; &#xA;&lt;p&gt;websocket-sharp supports the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7692&#34;&gt;Per-message Compression&lt;/a&gt; extension (but does not support it with the &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7692#section-7.1.1&#34;&gt;context take over&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;As a WebSocket client, if you would like to enable this extension, you should set the &lt;code&gt;WebSocket.Compression&lt;/code&gt; property to a compression method before calling the connect method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Compression = CompressionMethod.Deflate;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then the client will send the following header in the handshake request to the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Sec-WebSocket-Extensions: permessage-deflate; server_no_context_takeover; client_no_context_takeover&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the server supports this extension, it will return the same header which has the corresponding value.&lt;/p&gt; &#xA;&lt;p&gt;So eventually this extension will be available when the client receives the header in the handshake response.&lt;/p&gt; &#xA;&lt;h4&gt;Ignoring the extensions&lt;/h4&gt; &#xA;&lt;p&gt;As a WebSocket server, if you would like to ignore the extensions requested from a client, you should set the &lt;code&gt;WebSocketBehavior.IgnoreExtensions&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; in your &lt;code&gt;WebSocketBehavior&lt;/code&gt; constructor or initializing it, such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;wssv.AddWebSocketService&amp;lt;Chat&amp;gt; (&#xA;  &#34;/Chat&#34;,&#xA;  s =&amp;gt; s.IgnoreExtensions = true // To ignore the extensions requested from a client.&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it is set to &lt;code&gt;true&lt;/code&gt;, the service will not return the Sec-WebSocket-Extensions header in its handshake response.&lt;/p&gt; &#xA;&lt;p&gt;I think this is useful when you get something error in connecting the server and exclude the extensions as a cause of the error.&lt;/p&gt; &#xA;&lt;h3&gt;Secure Connection&lt;/h3&gt; &#xA;&lt;p&gt;websocket-sharp supports the secure connection with &lt;strong&gt;SSL/TLS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a WebSocket client, you should create a new instance of the &lt;code&gt;WebSocket&lt;/code&gt; class with a &lt;strong&gt;wss&lt;/strong&gt; scheme WebSocket URL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var ws = new WebSocket (&#34;wss://example.com&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to set a custom validation for the server certificate, you should set the &lt;code&gt;WebSocket.SslConfiguration.ServerCertificateValidationCallback&lt;/code&gt; property to a callback for it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.SslConfiguration.ServerCertificateValidationCallback =&#xA;  (sender, certificate, chain, sslPolicyErrors) =&amp;gt; {&#xA;    // Do something to validate the server certificate.&#xA;    ...&#xA;&#xA;    return true; // If the server certificate is valid.&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default callback always returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a WebSocket server, you should create a new instance of the &lt;code&gt;WebSocketServer&lt;/code&gt; or &lt;code&gt;HttpServer&lt;/code&gt; class with some settings for the secure connection, such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var wssv = new WebSocketServer (5963, true);&#xA;wssv.SslConfiguration.ServerCertificate = new X509Certificate2 (&#xA;                                            &#34;/path/to/cert.pfx&#34;, &#34;password for cert.pfx&#34;&#xA;                                          );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Authentication&lt;/h3&gt; &#xA;&lt;p&gt;websocket-sharp supports the &lt;a href=&#34;http://tools.ietf.org/html/rfc2617&#34;&gt;HTTP Authentication (Basic/Digest)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a WebSocket client, you should set a pair of user name and password for the HTTP authentication, by using the &lt;code&gt;WebSocket.SetCredentials (string, string, bool)&lt;/code&gt; method before calling the connect method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.SetCredentials (&#34;nobita&#34;, &#34;password&#34;, preAuth);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;preAuth&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the client will send the credentials for the Basic authentication in the first handshake request to the server.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, it will send the credentials for either the Basic or Digest (determined by the unauthorized response to the first handshake request) authentication in the second handshake request to the server.&lt;/p&gt; &#xA;&lt;p&gt;As a WebSocket server, you should set an HTTP authentication scheme, a realm, and any function to find the user credentials before calling the start method, such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;wssv.AuthenticationSchemes = AuthenticationSchemes.Basic;&#xA;wssv.Realm = &#34;WebSocket Test&#34;;&#xA;wssv.UserCredentialsFinder = id =&amp;gt; {&#xA;    var name = id.Name;&#xA;&#xA;    // Return user name, password, and roles.&#xA;    return name == &#34;nobita&#34;&#xA;           ? new NetworkCredential (name, &#34;password&#34;, &#34;gunfighter&#34;)&#xA;           : null; // If the user credentials are not found.&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to provide the Digest authentication, you should set such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;wssv.AuthenticationSchemes = AuthenticationSchemes.Digest;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query string, Origin header, and Cookies&lt;/h3&gt; &#xA;&lt;p&gt;As a WebSocket client, if you would like to send the query string in the handshake request, you should create a new instance of the &lt;code&gt;WebSocket&lt;/code&gt; class with a WebSocket URL that includes the &lt;a href=&#34;http://tools.ietf.org/html/rfc3986#section-3.4&#34;&gt;Query&lt;/a&gt; string parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var ws = new WebSocket (&#34;ws://example.com/?name=nobita&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to send the Origin header in the handshake request, you should set the &lt;code&gt;WebSocket.Origin&lt;/code&gt; property to an allowable value as the &lt;a href=&#34;http://tools.ietf.org/html/rfc6454#section-7&#34;&gt;Origin&lt;/a&gt; header before calling the connect method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Origin = &#34;http://example.com&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you would like to send the cookies in the handshake request, you should set any cookie by using the &lt;code&gt;WebSocket.SetCookie (WebSocketSharp.Net.Cookie)&lt;/code&gt; method before calling the connect method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.SetCookie (new Cookie (&#34;name&#34;, &#34;nobita&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a WebSocket server, if you would like to get the query string included in a handshake request, you should access the &lt;code&gt;WebSocketBehavior.QueryString&lt;/code&gt; property, such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Chat : WebSocketBehavior&#xA;{&#xA;  private string _name;&#xA;  ...&#xA;&#xA;  protected override void OnOpen ()&#xA;  {&#xA;    _name = QueryString[&#34;name&#34;];&#xA;  }&#xA;&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to get the value of the Origin header included in a handshake request, you should access the &lt;code&gt;WebSocketBehavior.Context.Origin&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to get the cookies included in a handshake request, you should access the &lt;code&gt;WebSocketBehavior.Context.CookieCollection&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;And if you would like to validate the Origin header, cookies, or both, you should set each validation for it with your &lt;code&gt;WebSocketBehavior&lt;/code&gt;, for example, by using the &lt;code&gt;WebSocketServer.AddWebSocketService&amp;lt;TBehavior&amp;gt; (string, Action&amp;lt;TBehavior&amp;gt;)&lt;/code&gt; method with initializing, such as the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;wssv.AddWebSocketService&amp;lt;Chat&amp;gt; (&#xA;  &#34;/Chat&#34;,&#xA;  s =&amp;gt; {&#xA;    s.OriginValidator = val =&amp;gt; {&#xA;        // Check the value of the Origin header, and return true if valid.&#xA;        Uri origin;&#xA;&#xA;        return !val.IsNullOrEmpty ()&#xA;               &amp;amp;&amp;amp; Uri.TryCreate (val, UriKind.Absolute, out origin)&#xA;               &amp;amp;&amp;amp; origin.Host == &#34;example.com&#34;;&#xA;      };&#xA;&#xA;    s.CookiesValidator = (req, res) =&amp;gt; {&#xA;        // Check the cookies in &#39;req&#39;, and set the cookies to send to&#xA;        // the client with &#39;res&#39; if necessary.&#xA;        foreach (var cookie in req) {&#xA;          cookie.Expired = true;&#xA;          res.Add (cookie);&#xA;        }&#xA;&#xA;        return true; // If valid.&#xA;      };&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connecting through the HTTP proxy server&lt;/h3&gt; &#xA;&lt;p&gt;websocket-sharp supports to connect through the HTTP proxy server.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to connect to a WebSocket server through the HTTP proxy server, you should set the proxy server URL, and if necessary, a pair of user name and password for the proxy server authentication (Basic/Digest), by using the &lt;code&gt;WebSocket.SetProxy (string, string, string)&lt;/code&gt; method before calling the connect method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var ws = new WebSocket (&#34;ws://example.com&#34;);&#xA;ws.SetProxy (&#34;http://localhost:3128&#34;, &#34;nobita&#34;, &#34;password&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I have tested this with &lt;strong&gt;&lt;a href=&#34;http://www.squid-cache.org&#34;&gt;Squid&lt;/a&gt;&lt;/strong&gt;. It is necessary to disable the following option in &lt;strong&gt;squid.conf&lt;/strong&gt; (e.g. &lt;code&gt;/etc/squid/squid.conf&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Deny CONNECT to other than SSL ports&#xA;#http_access deny CONNECT !SSL_ports&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocket&lt;/code&gt; class has the own logging function.&lt;/p&gt; &#xA;&lt;p&gt;You can use it with the &lt;code&gt;WebSocket.Log&lt;/code&gt; property (returns a &lt;code&gt;WebSocketSharp.Logger&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;So if you would like to change the current logging level (&lt;code&gt;WebSocketSharp.LogLevel.Error&lt;/code&gt; as the default), you should set the &lt;code&gt;WebSocket.Log.Level&lt;/code&gt; property to any of the &lt;code&gt;LogLevel&lt;/code&gt; enum values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Log.Level = LogLevel.Debug;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above means a log with lower than &lt;code&gt;LogLevel.Debug&lt;/code&gt; cannot be outputted.&lt;/p&gt; &#xA;&lt;p&gt;And if you would like to output a log, you should use any of the output methods. The following outputs a log with &lt;code&gt;LogLevel.Debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ws.Log.Debug (&#34;This is a debug message.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;WebSocketServer&lt;/code&gt; and &lt;code&gt;HttpServer&lt;/code&gt; classes have the same logging function.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Examples using websocket-sharp.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master/Example&#34;&gt;Example&lt;/a&gt; connects to the server executed by &lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master/Example2&#34;&gt;Example2&lt;/a&gt; or &lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master/Example3&#34;&gt;Example3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master/Example2&#34;&gt;Example2&lt;/a&gt; starts a WebSocket server.&lt;/p&gt; &#xA;&lt;h3&gt;Example3&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sta/websocket-sharp/tree/master/Example3&#34;&gt;Example3&lt;/a&gt; starts an HTTP server that allows to accept the WebSocket handshake requests.&lt;/p&gt; &#xA;&lt;p&gt;Would you access to &lt;a href=&#34;http://localhost:4649&#34;&gt;http://localhost:4649&lt;/a&gt; to do &lt;strong&gt;WebSocket Echo Test&lt;/strong&gt; with your web browser while Example3 is running?&lt;/p&gt; &#xA;&lt;h2&gt;Supported WebSocket Specifications&lt;/h2&gt; &#xA;&lt;p&gt;websocket-sharp supports &lt;strong&gt;RFC 6455&lt;/strong&gt;, and it is based on the following references:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tools.ietf.org/html/rfc6455&#34;&gt;The WebSocket Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.w3.org/TR/websockets&#34;&gt;The WebSocket API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7692&#34;&gt;Compression Extensions for WebSocket&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks for translating to japanese.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.hcn.zaq.ne.jp/___/WEB/RFC6455-ja.html&#34;&gt;The WebSocket Protocol æ—¥æœ¬èªžè¨³&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.hcn.zaq.ne.jp/___/WEB/WebSocket-ja.html&#34;&gt;The WebSocket API æ—¥æœ¬èªžè¨³&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;websocket-sharp is provided under &lt;a href=&#34;https://raw.github.com/sta/websocket-sharp/master/LICENSE.txt&#34;&gt;The MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>