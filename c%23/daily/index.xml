<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:32:29Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Unity-Technologies/game-programming-patterns-demo</title>
    <updated>2022-10-16T01:32:29Z</updated>
    <id>tag:github.com,2022-10-16:/Unity-Technologies/game-programming-patterns-demo</id>
    <link href="https://github.com/Unity-Technologies/game-programming-patterns-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repo of small demos that assemble some of the well-known design patterns in Unity development to support the ebook &#34;Level up your code with game programming patterns&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Level up your code with game programming patterns&lt;/h1&gt; &#xA;&lt;p&gt;Understand how to use game programming patterns in your Unity projects When working in Unity, you don’t have to reinvent the wheel. It’s likely someone has already invented one for you. For every software design issue you encounter, a thousand developers have been there before. While you can’t always ask them directly for advice, you can learn from their decisions through design patterns.&lt;/p&gt; &#xA;&lt;p&gt;A design pattern is a general solution to a common problem found in software engineering. These aren’t finished solutions that you can copy and paste into your code; instead, think of design patterns as extra tools in your toolbox. By understanding and using these patterns in a way that fits your project, you can produce cleaner code that’s easier to understand and faster to test and scale as your project grows.&lt;/p&gt; &#xA;&lt;p&gt;This GitHub repository contains some Unity demo examples of design patterns in action for your game development.&lt;/p&gt; &#xA;&lt;h1&gt;Based on the new e-book: Level up your code with game programming patterns&lt;/h1&gt; &#xA;&lt;p&gt;These examples are taken from our new e-book, Level up your code with game programming patterns. This 100-page guide explains the design patterns covered in this demo in more detail, as well as explaining the SOLID programming principles and concepts such as KISS and DRY. The e-book will be available to download here shortly.&lt;/p&gt; &#xA;&lt;h1&gt;How to use the game programming patterns guide&lt;/h1&gt; &#xA;&lt;p&gt;Both internal and external Unity development experts contributed to the new e-book, especially Wilmer Lin at &lt;a href=&#34;https://github.com/UnityGameAcademy&#34;&gt;Unity Game Academy&lt;/a&gt; for his significant contribution in bringing the guide together as well as creating the demo project.&lt;/p&gt; &#xA;&lt;p&gt;However, please keep in mind that the guide and these examples are based on subjective opinion; they are not recommendations that promise a particular outcome but are examples only. A good code architectural solution is one that fits your needs and covers the majority of the day-to-day use cases in your game development. Our intention is for you to use the guide and examples as a starting point for creating your own guidelines.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/sdk</title>
    <updated>2022-10-16T01:32:29Z</updated>
    <id>tag:github.com,2022-10-16:/dotnet/sdk</id>
    <link href="https://github.com/dotnet/sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Core functionality needed to create .NET Core projects, that is shared between Visual Studio and CLI&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Welcome to dotnet sdk&lt;/h2&gt; &#xA;&lt;p&gt;This repo contains core functionality needed to create .NET projects that is shared between VisualStudio and CLI.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MSBuild tasks can be found under &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/sdk/main/src/Tasks/Microsoft.NET.Build.Tasks&#34;&gt;/src/Tasks/Microsoft.NET.Build.Tasks/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/dotnet/project-system&#34;&gt;dotnet/project-system&lt;/a&gt; for the project system work that is specific to Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;This repo also contains &lt;a href=&#34;https://github.com/dotnet/sdk/tree/main/template_feed&#34;&gt;common project and item templates&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows x64&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/internal/_build?definitionId=140&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/internal/_apis/build/status/dotnet/sdk/DotNet-Core-Sdk%203.0%20(Windows)%20(YAML)%20(Official)&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installing the SDK&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-core&#34;&gt;Official builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/installer#installers-and-binaries&#34;&gt;Latest builds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I engage and contribute?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome you to try things out, &lt;a href=&#34;https://github.com/dotnet/sdk/issues&#34;&gt;file issues&lt;/a&gt;, make feature requests and join us in design conversations. Also be sure to check out our &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/sdk/main/documentation&#34;&gt;project documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt; to clarify expected behavior in our community.&lt;/p&gt; &#xA;&lt;h2&gt;How do I build the SDK?&lt;/h2&gt; &#xA;&lt;p&gt;Start with the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/sdk/main/documentation/project-docs/developer-guide.md&#34;&gt;Developer Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How do I test an SDK I have built?&lt;/h2&gt; &#xA;&lt;p&gt;To test your locally built SDK, run &lt;code&gt;eng\dogfood.cmd&lt;/code&gt; after building. That script starts a new Powershell with the environment configured to redirect SDK resolution to your build.&lt;/p&gt; &#xA;&lt;p&gt;From that shell your SDK will be available in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;any Visual Studio instance launched (via &lt;code&gt;&amp;amp; devenv.exe&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;msbuild&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How we triage and review PRs&lt;/h2&gt; &#xA;&lt;p&gt;With the SDK repo being the home for many different areas, we&#39;ve started trying to label incoming issues for the area they are related to using Area- labels. Then we rely on the &lt;a href=&#34;https://github.com/dotnet/sdk/raw/main/CODEOWNERS&#34;&gt;codeowners&lt;/a&gt; to manage and triages issues in their areas. Feel free to ping the owners listed in that file if you&#39;re not getting traction on a particular issue or PR. Please try to label new issues as that&#39;ll help us route them faster.&lt;/p&gt; &#xA;&lt;p&gt;For PRs, we assign out a reviewer once a week on Wednesday looking only at PRs that are green in the build. If you are contributing, please get the PR green including a test if possible and then ping @dotnet-cli if you want to raise visibility of the PR.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mafaca/UtinyRipper</title>
    <updated>2022-10-16T01:32:29Z</updated>
    <id>tag:github.com,2022-10-16:/mafaca/UtinyRipper</id>
    <link href="https://github.com/mafaca/UtinyRipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GUI and API library to work with Engine assets, serialized and bundle files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uTinyRipper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourceforge.net/projects/utinyripper/files&#34;&gt;&lt;img src=&#34;https://a.fsdn.com/con/app/sf-download-button&#34; alt=&#34;Download uTinyRipper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ci.appveyor.com/project/mafaca/utinyripper&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/yd78hqp83f7vjkwb?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/UtinyRipper/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;uTinyRipper is a tool for extracting assets from serialized files (&lt;em&gt;CAB-&lt;/em&gt;*, &lt;em&gt;*.assets&lt;/em&gt;, &lt;em&gt;*.sharedAssets&lt;/em&gt;, etc.) and assets bundles (&lt;em&gt;*.unity3d&lt;/em&gt;, &lt;em&gt;*.assetbundle&lt;/em&gt;, etc.) and converting them into native Engine format.&lt;/p&gt; &#xA;&lt;p&gt;Important note: work on this project has been suspended. The Author is going to restart it from scratch, please redirect development and focus on other things. So don&#39;t waste your time on PRs, propositions or complex issues. The only exception is bug fixes.&lt;/p&gt; &#xA;&lt;p&gt;Supported versions: 1.x to 2019.x (since development is suspended, 2020.x or greater won&#39;t be supported)&lt;/p&gt; &#xA;&lt;h2&gt;Export features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scenes&lt;/li&gt; &#xA; &lt;li&gt;Prefabs (GameObjects with transform components)&lt;/li&gt; &#xA; &lt;li&gt;AnimationClips (legacy, generic, humanoid)&lt;/li&gt; &#xA; &lt;li&gt;Meshes&lt;/li&gt; &#xA; &lt;li&gt;Shaders (native listing)&lt;/li&gt; &#xA; &lt;li&gt;Textures&lt;/li&gt; &#xA; &lt;li&gt;Audio&lt;/li&gt; &#xA; &lt;li&gt;Fonts&lt;/li&gt; &#xA; &lt;li&gt;Movie textures&lt;/li&gt; &#xA; &lt;li&gt;Materials&lt;/li&gt; &#xA; &lt;li&gt;AnimatorControllers&lt;/li&gt; &#xA; &lt;li&gt;Avatars&lt;/li&gt; &#xA; &lt;li&gt;Terrains&lt;/li&gt; &#xA; &lt;li&gt;TextAssets&lt;/li&gt; &#xA; &lt;li&gt;Components: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MeshRenderer&lt;/li&gt; &#xA;   &lt;li&gt;SkinnedMeshRenderer&lt;/li&gt; &#xA;   &lt;li&gt;Animation&lt;/li&gt; &#xA;   &lt;li&gt;Animator&lt;/li&gt; &#xA;   &lt;li&gt;Canvas&lt;/li&gt; &#xA;   &lt;li&gt;Light&lt;/li&gt; &#xA;   &lt;li&gt;ParticleSystem&lt;/li&gt; &#xA;   &lt;li&gt;Colliders&lt;/li&gt; &#xA;   &lt;li&gt;Rigidbody&lt;/li&gt; &#xA;   &lt;li&gt;AudioSource&lt;/li&gt; &#xA;   &lt;li&gt;Camera&lt;/li&gt; &#xA;   &lt;li&gt;MonoBehaviour (Mono only)&lt;/li&gt; &#xA;   &lt;li&gt;MonoScript (Mono only)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;uTinyRipperCore&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Core library. It&#39;s designed as an single module without any third party dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;uTinyRipperGUI&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Basic graphic interface application. It has some extra converters, so additionally it exports:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AudioClip .wav export&lt;/li&gt; &#xA;   &lt;li&gt;Texture2D .png export (with Sprites)&lt;/li&gt; &#xA;   &lt;li&gt;Shader DirectX blob export&lt;/li&gt; &#xA;   &lt;li&gt;References to build-in Engine assets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;uTinyRipperConsole&lt;/em&gt; and &lt;em&gt;uTinyRipperConsoleNETCore&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Sample console application which is designed to test Core library functionality.&lt;br&gt; It&#39;s a command line application. Drag and drop resource file(s) or/and folder(s) onto the .exe to retrieve the assets. It will then automaticly try to find resource dependencies, create a &#39;Ripped&#39; folder and extract all supported assets into the created directory. As this is a sample application, I&#39;m not going to improve it in any way.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements:&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build a solution, you&#39;ll need:&lt;/p&gt; &#xA;&lt;p&gt;- .NET Framework 4.7.2 + .NET Core 2.0 SDK&lt;/p&gt; &#xA;&lt;p&gt;- Compiler with C# 7.3 syntax support (Visual Studio 2017)&lt;/p&gt; &#xA;&lt;p&gt;If you want to run binary files, you need to install:&lt;/p&gt; &#xA;&lt;p&gt;- &lt;a href=&#34;https://support.microsoft.com/en-us/help/4054530/microsoft-net-framework-4-7-2-offline-installer-for-windows&#34;&gt;.NET Framework 4.7.2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;- &lt;a href=&#34;https://www.microsoft.com/en-us/download/details.aspx?id=53840&#34;&gt;Microsoft Visual C++ 2015&lt;/a&gt; Redistributables&lt;/p&gt; &#xA;&lt;p&gt;- &lt;a href=&#34;https://unity3d.com/get-unity/download/archive&#34;&gt;Unity 2017.3.0f3 or greater&lt;/a&gt; (NOTE: your editor version must be no less than the game&#39;s version)&lt;/p&gt;</summary>
  </entry>
</feed>