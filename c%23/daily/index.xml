<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-21T01:30:48Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>planetarium/libplanet</title>
    <updated>2022-12-21T01:30:48Z</updated>
    <id>tag:github.com,2022-12-21:/planetarium/libplanet</id>
    <link href="https://github.com/planetarium/libplanet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blockchain toolkit in C#/.NET for decentralized game&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Libplanet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://planetarium.dev/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/928926944937013338.svg?color=7289da&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.circleci.com/pipelines/github/planetarium/libplanet&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/planetarium/libplanet/tree/main.svg?style=shield&#34; alt=&#34;Build Status (CircleCI)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/planetarium/libplanet&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/planetarium/libplanet/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Libplanet/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Libplanet.svg?style=flat&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Libplanet/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Libplanet.svg?style=flat&#34; alt=&#34;NuGet (prerelease)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libplanet is a .NET library for creating multiplayer online game in decentralized fashion, which means the whole gameplay occurs on a peer-to-peer network among equal nodes rather than an authorized central server. Under the hood, it incorporates many features (e.g., &lt;a href=&#34;https://en.wikipedia.org/wiki/Digital_signature&#34;&gt;digital signature&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Byzantine_fault_tolerance&#34;&gt;BFT&lt;/a&gt; consensus, data replication) of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Blockchain&#34;&gt;blockchain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It has competitive advantages over other solutions for decentralized gaming:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Embeddable&lt;/em&gt;: A game app does not have to communicate with another running process, hence it doesn&#39;t require extra marshaling or processes management. To draw a parallel, Libplanet is closer to SQLite than MySQL or PostgreSQL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Isomorphic&lt;/em&gt;: Libplanet is a .NET library, so every game logic can be written in the same language, C#, and run on the blockchain. No glue code or &#34;smart contracts&#34; are needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Token-independent&lt;/em&gt;: Unlike almost every blockchain system, it does not force users to create and deal with yet-another-cryptocurrency. Your game can be free to play, and enjoyed by regular gamers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about why Planetarium is creating technology for fully decentralized games, please refer to our &lt;a href=&#34;https://medium.com/planetarium/introducing-planetarium-powering-games-with-freedom-22ab1ab70e0e&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NuGet&lt;/h2&gt; &#xA;&lt;p&gt;For every stable release, we pack Libplanet into a &lt;em&gt;.nupkg&lt;/em&gt; and upload it to &lt;a href=&#34;https://www.nuget.org/packages/Libplanet/&#34;&gt;NuGet&lt;/a&gt; and GitHub &lt;a href=&#34;https://github.com/planetarium/libplanet/releases&#34;&gt;releases&lt;/a&gt; page. (You can find the changelog for versions from &lt;a href=&#34;https://github.com/planetarium/libplanet/releases&#34;&gt;releases&lt;/a&gt; page.) To use Libplanet in your game, your project needs to add a dependency to &lt;em&gt;Libplanet&lt;/em&gt; package. On Visual Studio IDE, run the following command in Package Manager Console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Libplanet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer &lt;code&gt;dotnet&lt;/code&gt; CLI run the following command instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package Libplanet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also Microsoft&#39;s docs on &lt;a href=&#34;https://docs.microsoft.com/nuget/consume-packages/ways-to-install-a-package&#34;&gt;different ways to install NuGet package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to stable releases, we also provide pre-release packages. For every day and every merge commit, it is packed into a &lt;em&gt;.nupkg&lt;/em&gt; and uploaded to &lt;a href=&#34;https://www.nuget.org/packages/Libplanet/&#34;&gt;NuGet&lt;/a&gt; with a hyphen-suffixed version name.&lt;/p&gt; &#xA;&lt;p&gt;For a merge commit build, a version name looks like &lt;code&gt;0.1.0-dev.20181231235959+a0b1c2d&lt;/code&gt; where &lt;code&gt;20181231235959&lt;/code&gt; is a UTC timestamp of the build and &lt;code&gt;a0b1c2d&lt;/code&gt; is the first 7 hexadecimals of the Git commit hash. For a daily build, a version name is like &lt;code&gt;0.1.0-nightly.20181231+a0b1c2d&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, Unity currently does not support NuGet. There are some Unity plug-ins to deal with NuGet package system, and these seem immature at present. To use Libplanet on Unity, you need to manually extract &lt;em&gt;Libplanet.dll&lt;/em&gt; from &lt;em&gt;Libplanet.*.nupkg&lt;/em&gt; file and place it inside of your Unity project. We are acknowledging the fact Libplanet is currently not very usable together with Unity, and promise to make it better in the next few minor releases. Until then, you could try &lt;a href=&#34;https://github.com/microsoft/MSBuildForUnity&#34;&gt;MSBuildForUnity&lt;/a&gt; which is experimental as of January 2020.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;You could build &lt;em&gt;Libplanet.dll&lt;/em&gt; and &lt;em&gt;Libplanet.Stun.dll&lt;/em&gt; assemblies from the source code.&lt;/p&gt; &#xA;&lt;p&gt;The following command installs dependencies (required library packages) and builds the whole Libplanet solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;dotnet&lt;/code&gt; command is distributed together with &lt;a href=&#34;https://dot.net/&#34;&gt;.NET Core&lt;/a&gt; SDK.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute code to the Libplanet project in earnest, please read our &lt;a href=&#34;https://raw.githubusercontent.com/planetarium/libplanet/main/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gh0x0st/wanderer</title>
    <updated>2022-12-21T01:30:48Z</updated>
    <id>tag:github.com,2022-12-21:/gh0x0st/wanderer</id>
    <link href="https://github.com/gh0x0st/wanderer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source process injection enumeration tool written in C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wanderer&lt;/h1&gt; &#xA;&lt;p&gt;Wanderer is an open-source program that collects information about running processes. This information includes the integrity level, the presence of the AMSI as a loaded module, whether it is running as 64-bit or 32-bit as well as the privilege level of the current process. This information is extremely helpful when building payloads catered to the ideal candidate for process injection.&lt;/p&gt; &#xA;&lt;p&gt;This is a project that I started working on as I progressed through Offensive Security&#39;s PEN-300 course. One of my favorite modules from the course is the process injection &amp;amp; migration section which inspired me to be build a tool to help me be more efficient in during that activity. A special thanks goes out to ShadowKhan who provided valuable feedback which helped provide creative direction to make this utility visually appealing and enhanced its usability with suggested filtering capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PS C:\&amp;gt; .\wanderer.exe&#xA;&#xA;     &amp;gt;&amp;gt; Process Injection Enumeration&#xA;     &amp;gt;&amp;gt; https://github.com/gh0x0st&#xA;     &#xA;Usage: wanderer [target options] &amp;lt;value&amp;gt; [filter options] &amp;lt;value&amp;gt; [output options] &amp;lt;value&amp;gt;&#xA;&#xA;Target Options:&#xA;&#xA;-i, --id, Target a single or group of processes by their id number&#xA;-n, --name, Target a single or group of processes by their name&#xA;-c, --current, Target the current process and reveal the current privilege level&#xA;-a, --all, Target every running process&#xA;&#xA;Filter Options:&#xA;&#xA;--include-denied, Include instances where process access is denied&#xA;--exclude-32, Exclude instances where the process architecture is 32-bit&#xA;--exclude-64, Exclude instances where the process architecture is 64-bit&#xA;--exclude-amsiloaded, Exclude instances where amsi.dll is a loaded process module&#xA;--exclude-amsiunloaded, Exclude instances where amsi is not loaded process module&#xA;--exclude-integrity, Exclude instances where the process integrity level is a specific value&#xA;&#xA;Output Options:&#xA;&#xA;--output-nested, Output the results in a nested style view&#xA;-q, --quiet, Do not output the banner&#xA;&#xA;Examples:&#xA;&#xA;Enumerate the process with id 12345&#xA;C:\&amp;gt; wanderer --id 12345&#xA;&#xA;Enumerate all processes with the names process1 and processs2&#xA;C:\&amp;gt; wanderer --name process1,process2&#xA;&#xA;Enumerate the current process privilege level&#xA;C:\&amp;gt; wanderer --current&#xA;&#xA;Enumerate all 32-bit processes&#xA;C:\wanderer --all --exclude-64&#xA;&#xA;Enumerate all processes where is AMSI is loaded&#xA;C:\&amp;gt; wanderer --all --exclude-amsiunloaded&#xA;&#xA;Enumerate all processes with the names pwsh,powershell,spotify and exclude instances where the integrity level is untrusted or low and exclude 32-bit processes&#xA;C:\&amp;gt; wanderer --name pwsh,powershell,spotify --exclude-integrity untrusted,low --exclude-32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Example 1&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gh0x0st/wanderer/main/example-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example 2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gh0x0st/wanderer/main/example-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example 3&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gh0x0st/wanderer/main/example-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example 4&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gh0x0st/wanderer/main/example-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example 5&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gh0x0st/wanderer/main/example-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>