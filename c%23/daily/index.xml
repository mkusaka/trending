<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:27:02Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jstrosch/learning-malware-analysis</title>
    <updated>2024-02-11T01:27:02Z</updated>
    <id>tag:github.com,2024-02-11:/jstrosch/learning-malware-analysis</id>
    <link href="https://github.com/jstrosch/learning-malware-analysis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains sample programs that mimick behavior found in real-world malware. The goal is to provide source code that can be compiled and used for learning purposes, without having to worry about handling live malware.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learning Malware Analysis&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains sample programs that mimick behavior found in real-world malware. The goal is to provide source code that can be compiled and used for learning purposes, without having to worry about handling live malware or causing real damage to any system. The type of program is organized by concept it is focused on, you can see this through the root folder structure.&lt;/p&gt; &#xA;&lt;p&gt;I discuss many of these programs through online videos and courses and you may find the following helpful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Various topics in malware analysis - &lt;a href=&#34;https://www.youtube.com/playlist?list=PLHJns8WZXCdueUdUTn-xw-eiBZuqSUGPG&#34;&gt;YouTube Playlist&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Getting Started with Reverse Engineering - &lt;a href=&#34;https://www.youtube.com/playlist?list=PLHJns8WZXCdvaD7-xR7e5FJNW_6H9w-wC&#34;&gt;YouTube Playlist&lt;/a&gt; and full courses on &lt;a href=&#34;https://www.pluralsight.com/courses/reverse-engineering-getting-started&#34;&gt;Pluralsight&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Essential Malware Analysis on Pluralsight:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/initial-file-triage-malware-analysis&#34;&gt;Initial File Triage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/initial-access-techniques-malware-analysis&#34;&gt;Initial Access Techniques&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/ida-pro-concepts-basic-functionality&#34;&gt;Basics of IDA Pro&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/ghidra-concepts-basic-functionality&#34;&gt;Basics of Ghidra&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Yara for Malware Research - &lt;a href=&#34;https://www.youtube.com/playlist?list=PLHJns8WZXCdsG809U-N3tGuf_665Ox3Q8&#34;&gt;YouTube playlist&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Essential Elements of the Portable Executable (PE) file - &lt;a href=&#34;https://www.youtube.com/playlist?list=PLHJns8WZXCdstHnLaxcz-CO74fO4Q88_8&#34;&gt;YouTube playlist&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Tools You May Find Helpful&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstrosch/learning-reverse-engineering/tree/master&#34;&gt;Learnign Reverse Engineering Github repo&lt;/a&gt;: A similar repository with source code and resources for learning reverse engineering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstrosch/sclauncher&#34;&gt;sclauncher&lt;/a&gt;: A shellcode launcher and debugging tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling the Source Code&lt;/h2&gt; &#xA;&lt;p&gt;These programs are intended to be compiled with the C/C++ compiler from Microsoft. You can use the &lt;code&gt;Developer Command Prompt&lt;/code&gt; after installing the free/community version to compile using &lt;code&gt;cl&lt;/code&gt;. An example of this command would be:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cl &amp;lt;path/to/source_code&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This should produce two files: &lt;code&gt;.obj&lt;/code&gt; and &lt;code&gt;.exe&lt;/code&gt; using the name of the input file. You can typically ignore the &lt;code&gt;.obj&lt;/code&gt; file, the &lt;code&gt;.exe&lt;/code&gt; is what you will analyze. Please note, occassionally specific compiler flags are used to obtain desired affects in the resulting binary. These compiler flags will be identified in the related videos or noted in the README in the specific folder.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for real world malware or other interesting artifacts, please check out my repo &lt;a href=&#34;https://github.com/jstrosch/malware-samples&#34;&gt;malware-samples&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rocketseat-education/nlw-expert-c-sharp</title>
    <updated>2024-02-11T01:27:02Z</updated>
    <id>tag:github.com,2024-02-11:/rocketseat-education/nlw-expert-c-sharp</id>
    <link href="https://github.com/rocketseat-education/nlw-expert-c-sharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An auction system API&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>reqnroll/Reqnroll</title>
    <updated>2024-02-11T01:27:02Z</updated>
    <id>tag:github.com,2024-02-11:/reqnroll/Reqnroll</id>
    <link href="https://github.com/reqnroll/Reqnroll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open-source Cucumber-style BDD test automation framework for .NET.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reqnroll&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Reqnroll&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Reqnroll&#34; alt=&#34;NuGet Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reqnroll/Reqnroll/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/reqnroll/Reqnroll/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reqnroll is an open-source .NET test automation tool to practice &lt;a href=&#34;https://cucumber.io/docs/bdd/&#34;&gt;Behavior Driven Development (BDD)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Reqnroll is a .NET port of &lt;a href=&#34;https://cucumber.io/&#34;&gt;Cucumber&lt;/a&gt; and it is based on the &lt;a href=&#34;https://www.specflow.org/&#34;&gt;SpecFlow&lt;/a&gt; framework and code base. You can find more information about the goal of the Reqnroll project and the motivations to create it on the &lt;a href=&#34;https://reqnroll.net/&#34;&gt;Reqnroll website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Reqnroll enables writing executable specifications for BDD using &lt;a href=&#34;https://cucumber.io/docs/gherkin/&#34;&gt;Gherkin&lt;/a&gt;, the widely-accepted &lt;em&gt;feature file&lt;/em&gt; specification format. With that you can define the requirements using &lt;em&gt;Given-When-Then&lt;/em&gt; style &lt;em&gt;scenarios&lt;/em&gt; and turn them to automated tests in order to verify their implementation.&lt;/p&gt; &#xA;&lt;p&gt;Reqnroll works on all major operating systems (Windows, Linux, macOS), on all commonly used .NET implementations (including .NET Framework 4.6.2+ and .NET 8.0). For executing the automated scenarios, Reqnroll can use &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest&#34;&gt;MsTest&lt;/a&gt;, &lt;a href=&#34;https://nunit.org/&#34;&gt;NUnit&lt;/a&gt; or &lt;a href=&#34;https://xunit.net/&#34;&gt;xUnit&lt;/a&gt;. On Reqnroll projects you can work using Visual Studio 2022, Visual Studio Core and Rider, but you can also use Reqnroll without any IDE.&lt;/p&gt; &#xA;&lt;h2&gt;Useful links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.reqnroll.net/quickstart&#34;&gt;Quickstart guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reqnroll.net/&#34;&gt;Reqnroll website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.reqnroll.net/&#34;&gt;Reqnroll documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.reqnroll.net/release-notes&#34;&gt;Release notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.reqnroll.net/doc-setup-ide&#34;&gt;IDE setup instructions for Reqnroll&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The extension can be installed via NuGet packages from nuget.org. The main package you need to install depends on the test execution framework: &lt;a href=&#34;https://www.nuget.org/packages/Reqnroll.NUnit&#34;&gt;&lt;code&gt;Reqnroll.NUnit&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.nuget.org/packages/Reqnroll.MsTest&#34;&gt;&lt;code&gt;Reqnroll.MsTest&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://www.nuget.org/packages/Reqnroll.xUnit&#34;&gt;&lt;code&gt;Reqnroll.xUnit&lt;/code&gt;&lt;/a&gt;. See detailed instructions on the &lt;a href=&#34;https://go.reqnroll.net/doc-setup-project&#34;&gt;project setup documentation page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All contributors are welcome! For more information see the &lt;a href=&#34;https://raw.githubusercontent.com/reqnroll/Reqnroll/main/CONTRIBUTING.md&#34;&gt;Contribution guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Reqnroll for VisualStudio is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/reqnroll/Reqnroll/main/LICENSE&#34;&gt;BSD 3-Clause License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2024 Reqnroll&lt;/p&gt; &#xA;&lt;p&gt;This project is based on the &lt;a href=&#34;https://raw.githubusercontent.com/reqnroll/Reqnroll/main/SpecFlowOSS/SpecFlow&#34;&gt;SpecFlow&lt;/a&gt; framework.&lt;/p&gt;</summary>
  </entry>
</feed>