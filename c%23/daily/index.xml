<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-25T01:30:40Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/hack-together-teams</title>
    <updated>2023-05-25T01:30:40Z</updated>
    <id>tag:github.com,2023-05-25:/microsoft/hack-together-teams</id>
    <link href="https://github.com/microsoft/hack-together-teams" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HackTogether: The Microsoft Teams Global Hack | Register, Hack, Win üëá&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HackTogether: The Microsoft Teams Global Hack&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/hack-together-teams/assets/45178151/1a8b3b43-f674-4b35-a737-5a7cd1cf2e0c&#34; alt=&#34;TeamsGlobalHack Banner Dark&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://aka.ms/hack-together-teams/register&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HackTogether-Register-6264A7?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=MicrosoftTeams&#34; alt=&#34;Hackathon survey&#34; border=&#34;0&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;üõ†Ô∏èBuild, innovate, and &lt;strong&gt;#HackTogether&lt;/strong&gt;!üõ†Ô∏è It&#39;s time to get started building apps for Microsoft Teams. üî•&lt;/p&gt; &#xA;&lt;p&gt;HackTogether is your playground for coding and experimenting with Microsoft Teams. With mentorship from Microsoft experts and access to the latest tech, you will learn how to build Teams apps based on the top Microsoft Teams app scenarios. The possibilities are endless for what you can create... plus you can submit your hack for a chance to win exciting prizes! ü•≥&lt;/p&gt; &#xA;&lt;p&gt;The hackathon starts on &lt;strong&gt;June 1st&lt;/strong&gt; and ends on &lt;strong&gt;June 15th&lt;/strong&gt;. It is recommended for participants to follow the HackTogether Roadmap for a successful hackathon.&lt;/p&gt; &#xA;&lt;h3&gt;Tips &amp;amp; Tricks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Whenever you struggle during the hackathon, ask your questions on &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/discussions/new?category=q-a&#34;&gt;‚ùìGitHub Discussions&lt;/a&gt;&lt;/strong&gt;. Microsoft experts will be there to help you.&lt;/li&gt; &#xA; &lt;li&gt;Are your looking for a project idea? Check out &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/raw/main/TOP-SCENARIOS.md&#34;&gt;üìÉ Top Teams App Scenarios&lt;/a&gt;&lt;/strong&gt; to pick a project idea to get started, or get insipired for your own project idea! Also, there are many samples available in the &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/raw/main/README.md#samples-to-get-inspired-&#34;&gt;‚ú® Project samples to get inspired&lt;/a&gt;&lt;/strong&gt; section if you are looking for more inspiration while working on your hack to win a digital badge!&lt;/li&gt; &#xA; &lt;li&gt;Looking for documentation and guidance? Check out &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/raw/main/README.md#recommended-learning-materials-&#34;&gt;üìö Recommended Learning Materials&lt;/a&gt;&lt;/strong&gt; below.&lt;/li&gt; &#xA; &lt;li&gt;Looking for code templates to start with? Check out available &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/raw/main/README.md#templates-to-get-started-&#34;&gt;ü™° Templates&lt;/a&gt;&lt;/strong&gt; in the repository.&lt;/li&gt; &#xA; &lt;li&gt;Submit your project until June 15 to win &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/raw/main/README.md#judging-and-prizes-&#34;&gt;üèÜ Judging and Prizes&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HackTogether Roadmap üó∫Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/hack-together-teams/assets/45178151/8a97e909-9783-45e6-8484-e786250a5c7a&#34; alt=&#34;TeamsGlobalHack Roadmap&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow the steps below to successfully complete the hackathon.&lt;/p&gt; &#xA;&lt;h3&gt;#00 - Pre-requisites&lt;/h3&gt; &#xA;&lt;p&gt;Register to Hack Together:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/register&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HackTogether-Register-6264A7?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=MicrosoftTeams&#34; alt=&#34;Register&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before you start hacking, you will need an environment setup. Review &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/raw/main/SETUP.md&#34;&gt;Environment Setup&lt;/a&gt;&lt;/strong&gt; guidelines or the following prerequisites or click the related link of each prerequisite to be directed to the official documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/hack-together-teams/main/SETUP.md#1---prepare-your-microsoft-365-tenant&#34;&gt;Prepare your Office 365 tenant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/hack-together-teams/main/SETUP.md#2---install-visual-studio-or-visual-studio-code-recommended&#34;&gt;Install Visual Studio or Visual Studio Code (Recommended)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/hack-together-teams/main/SETUP.md#3---install-teams-toolkit-for-visual-studio-or-visual-studio-code-recommended&#34;&gt;Install Teams Toolkit for Visual Studio or Visual Studio Code (Recommended)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/hack-together-teams/main/SETUP.md#4---install-the-browser-of-your-choice&#34;&gt;Install the browser of your choice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/hack-together-teams/main/SETUP.md#5---setup-your-github-account&#34;&gt;Setup your GitHub account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Teams AI Library - &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/bots/how-to/teams%20conversational%20ai/how-conversation-ai-get-started&#34;&gt;Get started with Teams AI Library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For SharePoint - &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/hack-together-teams/main/SETUP.md#sharepoint-framework-environment-setup&#34;&gt;SharePoint Framework Environment Setup&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Introduce yourself, we&#39;d like to get to know you! ü•≥ &lt;a href=&#34;https://github.com/microsoft/hack-together-teams/discussions/1&#34;&gt;GitHub Discussions | Let&#39;s get to know each other üéâ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;#01 - Start hacking on June 1st&lt;/h3&gt; &#xA;&lt;p&gt;Either team up (max 4 team members) or fly solo to join the hacking! Make sure to register for HackTogether and complete the pre-requisites before starting to build your project.&lt;/p&gt; &#xA;&lt;h3&gt;#02 - Join live sessions for learning and inspiration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/sessions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ADD%20TO%20CALENDAR-4285F4?style=for-the-badge&amp;amp;label=&amp;amp;labelColor=555555&amp;amp;logoColor=white&amp;amp;logo=googlecalendar&#34; alt=&#34;Calendar Invite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/session1&#34;&gt;June 1st - Join Live üì∫&lt;/a&gt;:&lt;/strong&gt; Ready, Set, Hack: Empower the developer in you with Microsoft Teams app development!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/session2&#34;&gt;June 5th - Join Live üì∫&lt;/a&gt;:&lt;/strong&gt; Intro to Teams tabs and building them with SharePoint Framework: Maximize Microsoft 365 investments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/session3&#34;&gt;June 6th - Join Live üì∫&lt;/a&gt;:&lt;/strong&gt; Intro to Teams bots: Integrating AI into your bot logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/session4&#34;&gt;June 7th - Join Live üì∫&lt;/a&gt;:&lt;/strong&gt; Boost user engagement beyond Teams with Message Extensions and make your app intelligent using Microsoft Graph.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/session5&#34;&gt;June 12th - Join Live üì∫&lt;/a&gt;:&lt;/strong&gt; Ask the experts: Meet our Engineering team and ask your pressing questions!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://aka.ms/hack-together-teams/session6&#34;&gt;June 15th - Join Live üì∫&lt;/a&gt;:&lt;/strong&gt; Wrap up and take action: Join our community for the next Big Thing!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;#03 - Submit your project until June 15th 23:59 PM PST&lt;/h3&gt; &#xA;&lt;p&gt;You may submit your project here when it&#39;s ready: &lt;strong&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/issues/new?assignees=&amp;amp;labels=&amp;amp;template=project.yml&amp;amp;title=Project%3A+%3Cshort+description%3E&#34;&gt;üöÄ Project Submission&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There will be a grand prize winner out of all projects as well as a &#39;Best AI-powered solution&#39; and &#39;Best productivity-focused solution,&#39; so it is worthwhile to align your hack to one of these categories.&lt;/p&gt; &#xA;&lt;p&gt;Check out this video for step by step project submission guidance: &lt;a href=&#34;https://github.com/microsoft/hack-together-teams/assets/3199282/70c9008f-8de5-4b01-9143-6db7183fb9a8&#34;&gt;Project Submission Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;d love to hear about your project, tell us what you are working on! &lt;a href=&#34;https://github.com/microsoft/hack-together-teams/discussions/2&#34;&gt;GitHub Discussions | Tell us more about your project üó∫Ô∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Recommended Learning Materials üìö&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/training/paths/m365-teams-toolkit-vsc/&#34;&gt;Learn Path - Build and deploy apps for Microsoft Teams using Teams Toolkit for Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/training/modules/intro-microsoft-teams-apps/&#34;&gt;Learn Module - Introduction to building apps for Microsoft Teams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/overview&#34;&gt;Documentation - Teams app that fits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/overview-story&#34;&gt;Documentation - From ideas to Teams app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/bots/how-to/teams%20conversational%20ai/teams-conversation-ai-overview&#34;&gt;Documentation - Teams AI library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/bots/how-to/teams%20conversational%20ai/conversation-ai-quick-start&#34;&gt;Documentation - Teams AI library Quick start guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoftteams/platform/sbs-botbuilder-conversation-ai?tabs=vscode%2Cviscode&#34;&gt;Tutorial - Build your first app using Teams AI library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/sharepoint/dev/spfx/sharepoint-framework-overview&#34;&gt;Documentation - Overview of the SharePoint Framework&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Templates to get started ü™°&lt;/h2&gt; &#xA;&lt;p&gt;If you are looking for a code template to start your project, we have the following templates available for you in this repository created using Teams Toolkit for Visual Studio(.NET) and Visual Studio Code(JavaScript/TypeScript).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/tree/main/templates/vs-dotnet&#34;&gt;Visual Studio with .NET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/hack-together-teams/tree/main/templates/vscode-js-ts&#34;&gt;Visual Studio Code with JavaScript/TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples to get inspired ‚ú®&lt;/h2&gt; &#xA;&lt;p&gt;If you are looking for scenarios or project ideas to get inspired, we have many samples available for you to explore! Check out below repositories to discover what you can build and get some inspiration for your hack!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/officedev/teamsfx-samples&#34;&gt;Microsoft - Teams Framework (TeamsFx) Sample Gallery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnp.github.io/teams-dev-samples/&#34;&gt;Microsoft 365 &amp;amp; Power Platform Community - Teams Development Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/teams-ai&#34;&gt;Teams AI Library Samples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Judging and Prizes üèÜ&lt;/h2&gt; &#xA;&lt;p&gt;Projects will be evaluated by a panel of judges, including Microsoft executives, product managers, and developer advocates. Judging criteria will include innovation, impact, technical usability, and alignment with corresponding hackathon category.&lt;/p&gt; &#xA;&lt;p&gt;The winners will receive the following exciting prizes (up to 4 individuals if submitting as a team, prizes for each person on the team). Winning solutions and/or product feedback may also be considered for integration into the Microsoft Teams product roadmap. Winners will also have the opportunity to showcase their projects to experts and leaders on Microsoft 365 Community Calls and on our YouTube channels.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üèÜ Grand prize winner:&lt;/strong&gt; &lt;em&gt;The best of the best! This category rewards the solution that meets all judging criteria, wows judges, and has potential real-world value for the 300M Teams users.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Xbox üéÆ&lt;/li&gt; &#xA; &lt;li&gt;$300 digital gift card üí∏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü•á Best AI-powered solution:&lt;/strong&gt; &lt;em&gt;This category rewards the solution that integrates AI or machine learning in an innovative way. For example, a chatbot that automates common tasks in Teams or an app that uses AI to suggest relevant files for users.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$300 digital gift card üí∏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü•á Best productivity-focused solution:&lt;/strong&gt; &lt;em&gt;This category rewards the solution that facilitates productivity and collaboration within Teams. For example, extending an existing app to Teams or creating a custom solution that helps team members stay organized during meetings.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;$300 digital gift card üí∏&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ü•á Community hack winner:&lt;/strong&gt; &lt;em&gt;This category rewards the solution chosen by the European Collaboration Summit (ECS) panel of judges.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C64 retro computer üñ•Ô∏è&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;üèÖ All hackathon participants who submit an app will receive a digital badge.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;‚ÑπÔ∏è Hack Together winners will be selected as per the following judging criteria:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Innovation&lt;/li&gt; &#xA;  &lt;li&gt;Impact&lt;/li&gt; &#xA;  &lt;li&gt;Technical Usability/User Experience&lt;/li&gt; &#xA;  &lt;li&gt;Alignment with hackathon category (either AI-powered or productivity-focused)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Join the community üíú&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do you have an existing Microsoft Teams app and want help from Microsoft experts?&lt;/strong&gt; &lt;a href=&#34;https://aka.ms/TeamsApp/Support&#34;&gt;Fill out this form for 1:1 assistance.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pnp.github.io/&#34;&gt;Join the Microsoft 365 and Power Platform Community&lt;/a&gt; to find like-minded people, attend &lt;a href=&#34;https://pnp.github.io/#community&#34;&gt;community calls&lt;/a&gt;, and explore &lt;a href=&#34;https://pnp.github.io/#samples&#34;&gt;resources&lt;/a&gt; to see what other apps you can build for Microsoft Teams!&lt;/p&gt; &#xA;&lt;img width=&#34;1307&#34; alt=&#34;banner-m365-community&#34; src=&#34;https://github.com/microsoft/hack-together-teams/assets/36196437/5e38dfeb-8a00-4f59-819e-d94b74b3069e&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;Special thanks to our partner &lt;strong&gt;&lt;a href=&#34;https://collabsummit.eu&#34;&gt;European Collaboration Summit&lt;/a&gt;&lt;/strong&gt; for supporting HackTogether: The Microsoft Teams Global Hack.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/hack-together-teams/assets/36196437/b4b996b2-a093-4c44-8890-b8067107131d&#34; alt=&#34;summit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feedback ‚ôªÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;We are excited to learn from you! Please share your experience and feedback with us: &lt;a href=&#34;https://aka.ms/hack-together-teams/survey&#34;&gt;Feedback Survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://aka.ms/hack-together-teams/register&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HackTogether-Register-6264A7?style=for-the-badge&amp;amp;logoColor=white&amp;amp;logo=MicrosoftTeams&#34; alt=&#34;Hackathon survey&#34; border=&#34;0&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Scighost/Starward</title>
    <updated>2023-05-25T01:30:40Z</updated>
    <id>tag:github.com,2023-05-25:/Scighost/Starward</id>
    <link href="https://github.com/Scighost/Starward" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Á±≥ÂÆ∂Ê∏∏ÊàèÂêØÂä®Âô® - Game Launcher for miHoYo&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is Starward?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Starward&lt;/strong&gt; Âá∫Ëá™ÊòüÁ©πÈìÅÈÅìÂºÄÊúçÂâçÁöÑÂÆ£‰º†ËØ≠‚Äî‚Äî‚ÄîÊÑøÊ≠§Ë°åÔºåÁªàÊäµÁæ§Êòü (May This Journey Lead Us &lt;strong&gt;Starward&lt;/strong&gt;)ÔºåËôΩÁÑ∂Ëøô‰∏çÊòØ‰∏Ä‰∏™Ê≠£Á°ÆÁöÑËã±ÊñáÂçïËØçÔºå‰ΩÜÊòØÂæàÈÄÇÂêàÊãøÊù•Áî®‰ΩúÂ∫îÁî®Âêç„ÄÇÊú¨È°πÁõÆÁöÑÁÅµÊÑüÊù•Ëá™ &lt;a href=&#34;https://github.com/neon-nyan&#34;&gt;neon-nyan&lt;/a&gt; Â§ß‰Ω¨ÁöÑÁ±≥ÂÆ∂ÂêØÂä®Âô® &lt;a href=&#34;https://github.com/neon-nyan/Collapse&#34;&gt;Collapse&lt;/a&gt;ÔºåÂú®Ê≠§Âü∫Á°Ä‰∏äÊàëÂä†ÂÖ•‰∫ÜËá™Â∑±ÈúÄË¶Å‰ΩÜÊòØ Collapse &lt;a href=&#34;https://github.com/neon-nyan/Collapse/raw/main/CONTRIBUTING.md#restrictions-for-new-features&#34;&gt;‰∏ç‰ºöÂÆûÁé∞ÁöÑÂäüËÉΩ&lt;/a&gt;„ÄÇÊàëË¶ÅÁâπÂà´ÊÑüË∞¢ neon-nyan Âíå CollapseÔºåÊúâÊ≠§Áè†ÁéâÂú®ÂâçÔºåÊàëÁöÑÂºÄÂèëËøáÁ®ãÈ°∫Âà©‰∫ÜÂæàÂ§ö„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Starward ÊòØ‰∏Ä‰∏™Á±≥ÂÆ∂Ê∏∏ÊàèÂêØÂä®Âô®ÔºåÂÆÉÈô§‰∫ÜÊèê‰æõ‰∫ÜÁªü‰∏ÄÁöÑÂêØÂä®Ê∏∏ÊàèÁöÑÂÖ•Âè£Â§ñÔºåËøòÂåÖÂê´‰ª•‰∏ãÂäüËÉΩÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂàáÊç¢Â∑≤ÁôªÂΩïÁöÑÊ∏∏ÊàèË¥¶Âè∑&lt;/li&gt; &#xA; &lt;li&gt;ÊµèËßàÊ∏∏ÊàèÊà™Âõæ&lt;/li&gt; &#xA; &lt;li&gt;‰øùÂ≠òÊäΩÂç°ËÆ∞ÂΩï&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ëøô‰∫õÂäüËÉΩÊîØÊåÅÁöÑÊ∏∏ÊàèÊúâÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂéüÁ•ûÔºàÂõΩÊúçÔºåÂõΩÈôÖÊúçÔºå‰∫ëÂéüÁ•ûÔºâ&lt;/li&gt; &#xA; &lt;li&gt;Â¥©ÂùèÔºöÊòüÁ©πÈìÅÈÅìÔºàÂõΩÊúçÔºåÂõΩÈôÖÊúçÔºâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Êõ¥Â§öÁöÑÂäüËÉΩÂíåÊ∏∏ÊàèÊîØÊåÅÊ≠£Âú®ÂºÄÂèë‰∏≠„ÄÇ„ÄÇ„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Starward ‰∏ç‰ºöÂä†ÂÖ•ÈúÄË¶ÅÂºÄÂèëËÄÖÊåÅÁª≠Êõ¥Êñ∞Ê∏∏ÊàèÊï∞ÊçÆÂíåËµÑÊ∫êÁöÑÂäüËÉΩÔºåÊØîÂ¶ÇÁªôÊäΩÂç°ËÆ∞ÂΩïÂä†‰∏äÁâ©ÂìÅÂõæÁâá„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;‰∏ãËΩΩ &amp;amp; Êõ¥Êñ∞&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‰ªÖÊîØÊåÅ Windows 10 1809 (17763) Âèä‰ª•‰∏äÁöÑÁâàÊú¨&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;‰Ω†ÂèØÂú® &lt;a href=&#34;https://github.com/Scighost/Starward/releases&#34;&gt;Release&lt;/a&gt; È°µÈù¢‰∏ãËΩΩÊúÄÊñ∞ÂèëÂ∏ÉÁöÑÁâàÊú¨ÔºåÂ∫îÁî®‰ΩøÁî®Â¢ûÈáèÊõ¥Êñ∞ÁöÑÊñπÂºèÔºåÊó¢ÁÆÄÂçïÂèà‰æøÊç∑„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰Ω†ËøòÂèØ‰ª•Âú®&lt;a href=&#34;https://github.com/Scighost/Starward/tree/metadata/dev&#34;&gt;ËøôÈáå&lt;/a&gt;ÊâæÂà∞ÊØèÊ¨°Êèê‰∫§‰ª£Á†ÅÂêéËá™Âä®ÁîüÊàêÁöÑÁâàÊú¨Ôºå‰ΩÜÊòØ‰∏çËÉΩ‰øùËØÅÁ®≥ÂÆöÊÄßÂíåÂÖºÂÆπÊÄß„ÄÇ&lt;/p&gt; &#xA;&lt;h1&gt;ÂºÄÂèëÁéØÂ¢É&lt;/h1&gt; &#xA;&lt;p&gt;Âú®Êú¨Âú∞ÁîüÊàêÂ∫îÁî®Ôºå‰Ω†ÈúÄË¶ÅÂÆâË£Ö Visual Studio 2022 Âπ∂ÈÄâÊã©‰ª•‰∏ãË¥üËΩΩÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Ê°åÈù¢ÂºÄÂèë&lt;/li&gt; &#xA; &lt;li&gt;‰ΩøÁî® C++ ÁöÑÊ°åÈù¢ÂºÄÂèë&lt;/li&gt; &#xA; &lt;li&gt;ÈÄöÁî® Windows Âπ≥Âè∞ÂºÄÂèë&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Âçï‰∏™ÁªÑ‰ª∂‰∏≠ËøòÈúÄË¶ÅÂãæÈÄâÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Â∫îÁî® SDK C# Ê®°Êùø&lt;/li&gt; &#xA; &lt;li&gt;Windows 11 SDK (10.0.22621.0)&lt;/li&gt; &#xA; &lt;li&gt;MSVC v143 - VS 2022 C++ x64/x86 ÁîüÊàêÂ∑•ÂÖ∑&lt;/li&gt; &#xA; &lt;li&gt;MSVC v143 - VS 2022 C++ ARM64 ÁîüÊàêÂ∑•ÂÖ∑ (ÂèØÈÄâ)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>altmann/FluentResults</title>
    <updated>2023-05-25T01:30:40Z</updated>
    <id>tag:github.com,2023-05-25:/altmann/FluentResults</id>
    <link href="https://github.com/altmann/FluentResults" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A generalised Result object implementation for .NET/C#&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/altmann/FluentResults/raw/master/resources/icons/FluentResults-Icon-64.png&#34; alt=&#34;FluentResults&#34;&gt; &#xA;&lt;h1&gt;FluentResults&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/FluentResults/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/fluentresults.svg?sanitize=true&#34; alt=&#34;Nuget downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FluentResults/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/fluentresults&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/altmann/FluentResults/_build/latest?definitionId=11&#34;&gt;&lt;img src=&#34;https://dev.azure.com/altmann/FluentResults/_apis/build/status/FluentResults-CI&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/altmann/FluentResults/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FluentResults is a lightweight .NET library developed to solve a common problem. It returns an object indicating success or failure of an operation instead of throwing/using exceptions.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://www.nuget.org/packages/FluentResults/&#34;&gt;FluentResults with NuGet&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package FluentResults&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ù§Ô∏è&lt;/span&gt; The most needed community feature is pushed to nuget: &lt;strong&gt;&lt;a href=&#34;https://www.nuget.org/packages/FluentResults.Extensions.AspNetCore/&#34;&gt;FluentResults.Extensions.AspNetCore&lt;/a&gt;&lt;/strong&gt; Read &lt;a href=&#34;https://github.com/altmann/FluentResults/wiki/Returning-Result-Objects-from-ASP.NET-Core-Controller&#34;&gt;documentation&lt;/a&gt;. Try it, test it, &lt;a href=&#34;https://github.com/altmann/FluentResults/issues/149&#34;&gt;give feedback&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generalised container&lt;/strong&gt; which works in all contexts (ASP.NET MVC/WebApi, WPF, DDD Domain Model, etc)&lt;/li&gt; &#xA; &lt;li&gt;Store &lt;strong&gt;multiple errors&lt;/strong&gt; in one Result object&lt;/li&gt; &#xA; &lt;li&gt;Store &lt;strong&gt;powerful and elaborative Error and Success objects&lt;/strong&gt; instead of only error messages in string format&lt;/li&gt; &#xA; &lt;li&gt;Designing Errors/Success in an object-oriented way&lt;/li&gt; &#xA; &lt;li&gt;Store the &lt;strong&gt;root cause with chain of errors in a hierarchical way&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Provide &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;.NET Standard, .NET Core, .NET 5+ and .NET Full Framework support (details see &lt;a href=&#34;https://github.com/altmann/FluentResults#net-targeting&#34;&gt;.NET Targeting&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;SourceLink support&lt;/li&gt; &#xA;   &lt;li&gt;powerful &lt;a href=&#34;https://github.com/altmann/FluentResults#samplesbest-practices&#34;&gt;code samples&lt;/a&gt; which show the integration with famous or common frameworks/libraries&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEW&lt;/strong&gt; Enhanced &lt;a href=&#34;https://github.com/altmann/FluentResults/wiki/Asserting-Result-Objects&#34;&gt;FluentAssertions Extension&lt;/a&gt; to assert FluentResult objects in an elegant way&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IN PREVIEW&lt;/strong&gt; &lt;a href=&#34;https://github.com/altmann/FluentResults/wiki/Returning-Result-Objects-from-ASP.NET-Core-Controller&#34;&gt;Returning Result Objects from ASP.NET Controller&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Results instead of exceptions&lt;/h2&gt; &#xA;&lt;p&gt;To be honest, the pattern - returning a Result object indicating success or failure - is not at all a new idea. This pattern comes from functional programming languages. With FluentResults this pattern can also be applied in .NET/C#.&lt;/p&gt; &#xA;&lt;p&gt;The article &lt;a href=&#34;https://enterprisecraftsmanship.com/posts/exceptions-for-flow-control/&#34;&gt;Exceptions for Flow Control by Vladimir Khorikov&lt;/a&gt; describes very good in which scenarios the Result pattern makes sense and in which not. See the &lt;a href=&#34;https://github.com/altmann/FluentResults#samplesbest-practices&#34;&gt;list of Best Practices&lt;/a&gt; and the &lt;a href=&#34;https://github.com/altmann/FluentResults#interesting-resources-about-result-pattern&#34;&gt;list of resources&lt;/a&gt; to learn more about the Result Pattern.&lt;/p&gt; &#xA;&lt;h2&gt;Creating a Result&lt;/h2&gt; &#xA;&lt;p&gt;A Result can store multiple Error and Success messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// create a result which indicates success&#xA;Result successResult1 = Result.Ok();&#xA;&#xA;// create a result which indicates failure&#xA;Result errorResult1 = Result.Fail(&#34;My error message&#34;);&#xA;Result errorResult2 = Result.Fail(new Error(&#34;My error message&#34;));&#xA;Result errorResult3 = Result.Fail(new StartDateIsAfterEndDateError(startDate, endDate));&#xA;Result errorResult4 = Result.Fail(new List&amp;lt;string&amp;gt; { &#34;Error 1&#34;, &#34;Error 2&#34; });&#xA;Result errorResult5 = Result.Fail(new List&amp;lt;IError&amp;gt; { new Error(&#34;Error 1&#34;), new Error(&#34;Error 2&#34;) });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The class &lt;code&gt;Result&lt;/code&gt; is typically used by void methods which have no return value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Result DoTask()&#xA;{&#xA;    if (this.State == TaskState.Done)&#xA;        return Result.Fail(&#34;Task is in the wrong state.&#34;);&#xA;&#xA;    // rest of the logic&#xA;&#xA;    return Result.Ok();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally a value from a specific type can also be stored if necessary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// create a result which indicates success&#xA;Result&amp;lt;int&amp;gt; successResult1 = Result.Ok(42);&#xA;Result&amp;lt;MyCustomObject&amp;gt; successResult2 = Result.Ok(new MyCustomObject());&#xA;&#xA;// create a result which indicates failure&#xA;Result&amp;lt;int&amp;gt; errorResult = Result.Fail&amp;lt;int&amp;gt;(&#34;My error message&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The class &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; is typically used by methods with a return type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public Result&amp;lt;Task&amp;gt; GetTask()&#xA;{&#xA;    if (this.State == TaskState.Deleted)&#xA;        return Result.Fail&amp;lt;Task&amp;gt;(&#34;Deleted Tasks can not be displayed.&#34;);&#xA;&#xA;    // rest of the logic&#xA;&#xA;    return Result.Ok(task);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Processing a Result&lt;/h2&gt; &#xA;&lt;p&gt;After you get a Result object from a method you have to process it. This means, you have to check if the operation was completed successfully or not. The properties &lt;code&gt;IsSuccess&lt;/code&gt; and &lt;code&gt;IsFailed&lt;/code&gt; in the Result object indicate success or failure. The value of a &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; can be accessed via the properties &lt;code&gt;Value&lt;/code&gt; and &lt;code&gt;ValueOrDefault&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result&amp;lt;int&amp;gt; result = DoSomething();&#xA;     &#xA;// get all reasons why result object indicates success or failure. &#xA;// contains Error and Success messages&#xA;IEnumerable&amp;lt;IReason&amp;gt; reasons = result.Reasons;&#xA;&#xA;// get all Error messages&#xA;IEnumerable&amp;lt;IError&amp;gt; errors = result.Errors;&#xA;&#xA;// get all Success messages&#xA;IEnumerable&amp;lt;ISuccess&amp;gt; successes = result.Successes;&#xA;&#xA;if (result.IsFailed)&#xA;{&#xA;    // handle error case&#xA;    var value1 = result.Value; // throws exception because result is in failed state&#xA;    var value2 = result.ValueOrDefault; // return default value (=0) because result is in failed state&#xA;    return;&#xA;}&#xA;&#xA;// handle success case&#xA;var value3 = result.Value; // return value and doesn&#39;t throw exception because result is in success state&#xA;var value4 = result.ValueOrDefault; // return value because result is in success state&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Designing errors and success messages&lt;/h2&gt; &#xA;&lt;p&gt;There are many Result Libraries which store only simple string messages. FluentResults instead stores powerful object-oriented Error and Success objects. The advantage is all the relevant information of an error or success is encapsulated within one class.&lt;/p&gt; &#xA;&lt;p&gt;The entire public api of this library uses the interfaces &lt;code&gt;IReason&lt;/code&gt;, &lt;code&gt;IError&lt;/code&gt; and &lt;code&gt;ISuccess&lt;/code&gt; for representing a reason, error or success. &lt;code&gt;IError&lt;/code&gt; and &lt;code&gt;ISuccess&lt;/code&gt; inherit from &lt;code&gt;IReason&lt;/code&gt;. If at least one &lt;code&gt;IError&lt;/code&gt; object exists in the &lt;code&gt;Reasons&lt;/code&gt; property then the result indicates a failure and the property &lt;code&gt;IsSuccess&lt;/code&gt; is false.&lt;/p&gt; &#xA;&lt;p&gt;You can create your own &lt;code&gt;Success&lt;/code&gt; or &lt;code&gt;Error&lt;/code&gt; classes when you inherit from &lt;code&gt;ISuccess&lt;/code&gt; or &lt;code&gt;IError&lt;/code&gt; or if you inherit from &lt;code&gt;Success&lt;/code&gt; or &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class StartDateIsAfterEndDateError : Error&#xA;{&#xA;    public StartDateIsAfterEndDateError(DateTime startDate, DateTime endDate)&#xA;        : base($&#34;The start date {startDate} is after the end date {endDate}&#34;)&#xA;    { &#xA;        Metadata.Add(&#34;ErrorCode&#34;, &#34;12&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this mechanism you can also create a class &lt;code&gt;Warning&lt;/code&gt;. You can choose if a Warning in your system indicates a success or a failure by inheriting from &lt;code&gt;Success&lt;/code&gt; or &lt;code&gt;Error&lt;/code&gt; classes.&lt;/p&gt; &#xA;&lt;h2&gt;Further features&lt;/h2&gt; &#xA;&lt;h3&gt;Chaining error and success messages&lt;/h3&gt; &#xA;&lt;p&gt;In some cases it is necessary to chain multiple error and success messages in one result object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Fail(&#34;error message 1&#34;)&#xA;                   .WithError(&#34;error message 2&#34;)&#xA;                   .WithError(&#34;error message 3&#34;)&#xA;                   .WithSuccess(&#34;success message 1&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a result depending on success/failure condition&lt;/h3&gt; &#xA;&lt;p&gt;Very often you have to create a fail or success result depending on a condition. Usually you can write it in this way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = string.IsNullOrEmpty(firstName) ? Result.Fail(&#34;First Name is empty&#34;) : Result.Ok();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the methods &lt;code&gt;FailIf()&lt;/code&gt; and &lt;code&gt;OkIf()&lt;/code&gt; you can also write in a more readable way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.FailIf(string.IsNullOrEmpty(firstName), &#34;First Name is empty&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an error instance should be lazily initialized, overloads accepting &lt;code&gt;Func&amp;lt;string&amp;gt;&lt;/code&gt; or &lt;code&gt;Func&amp;lt;IError&amp;gt;&lt;/code&gt; can be used to that effect:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var list = Enumerable.Range(1, 9).ToList();&#xA;&#xA;var result = Result.FailIf(&#xA;    list.Any(IsDivisibleByTen),&#xA;    () =&amp;gt; new Error($&#34;Item {list.First(IsDivisibleByTen)} should not be on the list&#34;));&#xA;&#xA;bool IsDivisibleByTen(int i) =&amp;gt; i % 10 == 0;&#xA;&#xA;// rest of the code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Try&lt;/h3&gt; &#xA;&lt;p&gt;In some scenarios you want to execute an action. If this action throws an exception then the exception should be catched and transformed to a result object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Try(() =&amp;gt; DoSomethingCritical());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example the default catchHandler is used. The behavior of the default catchHandler can be overwritten via the global Result settings (see next example). You can control how the Error object looks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result.Setup(cfg =&amp;gt;&#xA;{&#xA;    cfg.DefaultTryCatchHandler = exception =&amp;gt;&#xA;    {&#xA;        if (exception is SqlTypeException sqlException)&#xA;            return new ExceptionalError(&#34;Sql Fehler&#34;, sqlException);&#xA;&#xA;        if (exception is DomainException domainException)&#xA;            return new Error(&#34;Domain Fehler&#34;)&#xA;                .CausedBy(new ExceptionError(domainException.Message, domainException));&#xA;&#xA;        return new Error(exception.Message);&#xA;    };&#xA;});&#xA;&#xA;var result = Result.Try(() =&amp;gt; DoSomethingCritical());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to pass a custom catchHandler via the &lt;code&gt;Try(..)&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Try(() =&amp;gt; DoSomethingCritical(), ex =&amp;gt; new MyCustomExceptionError(ex));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Root cause of the error&lt;/h3&gt; &#xA;&lt;p&gt;You can also store the root cause of the error in the error object. With the method &lt;code&gt;CausedBy(...)&lt;/code&gt; the root cause can be passed as Error, list of Errors, string, list of strings or as exception. The root cause is stored in the &lt;code&gt;Reasons&lt;/code&gt; property of the error object.&lt;/p&gt; &#xA;&lt;p&gt;Example 1 - root cause is an exception&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;try&#xA;{&#xA;    //export csv file&#xA;}&#xA;catch(CsvExportException ex)&#xA;{&#xA;    return Result.Fail(new Error(&#34;CSV Export not executed successfully&#34;).CausedBy(ex));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 2 - root cause is an error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Error rootCauseError = new Error(&#34;This is the root cause of the error&#34;);&#xA;Result result = Result.Fail(new Error(&#34;Do something failed&#34;, rootCauseError));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example 3 - reading root cause from errors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result result = ....;&#xA;if (result.IsSuccess)&#xA;   return;&#xA;&#xA;foreach(IError error in result.Errors)&#xA;{&#xA;    foreach(ExceptionalError causedByExceptionalError in error.Reasons.OfType&amp;lt;ExceptionalError&amp;gt;())&#xA;    {&#xA;        Console.WriteLine(causedByExceptionalError.Exception);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Metadata&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to add metadata to Error or Success objects.&lt;/p&gt; &#xA;&lt;p&gt;One way of doing that is to call the method &lt;code&gt;WithMetadata(...)&lt;/code&gt; directly where result object is being created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result1 = Result.Fail(new Error(&#34;Error 1&#34;).WithMetadata(&#34;metadata name&#34;, &#34;metadata value&#34;));&#xA;&#xA;var result2 = Result.Ok()&#xA;                    .WithSuccess(new Success(&#34;Success 1&#34;)&#xA;                                 .WithMetadata(&#34;metadata name&#34;, &#34;metadata value&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way is to call &lt;code&gt;WithMetadata(...)&lt;/code&gt; in constructor of the &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Success&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class DomainError : Error&#xA;{&#xA;    public DomainError(string message)&#xA;        : base(message)&#xA;    { &#xA;        WithMetadata(&#34;ErrorCode&#34;, &#34;12&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Merging&lt;/h3&gt; &#xA;&lt;p&gt;Multiple results can be merged with the static method &lt;code&gt;Merge()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result1 = Result.Ok();&#xA;var result2 = Result.Fail(&#34;first error&#34;);&#xA;var result3 = Result.Ok&amp;lt;int&amp;gt;();&#xA;&#xA;var mergedResult = Result.Merge(result1, result2, result3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A list of results can be merged to one result with the extension method &lt;code&gt;Merge()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result1 = Result.Ok();&#xA;var result2 = Result.Fail(&#34;first error&#34;);&#xA;var result3 = Result.Ok&amp;lt;int&amp;gt;();&#xA;&#xA;var results = new List&amp;lt;Result&amp;gt; { result1, result2, result3 };&#xA;&#xA;var mergedResult = results.Merge();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting and Transformation&lt;/h3&gt; &#xA;&lt;p&gt;A result object can be converted to another result object with methods &lt;code&gt;ToResult()&lt;/code&gt; and &lt;code&gt;ToResult&amp;lt;TValue&amp;gt;()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// converting a result to a result from type Result&amp;lt;int&amp;gt; with default value of int&#xA;Result.Ok().ToResult&amp;lt;int&amp;gt;();&#xA;&#xA;// converting a result to a result from type Result&amp;lt;int&amp;gt; with a custom value&#xA;Result.Ok().ToResult&amp;lt;int&amp;gt;(5);&#xA;&#xA;// converting a failed result to a result from type Result&amp;lt;int&amp;gt; without passing a custom value&#xA;// because result is in failed state and therefore no value is needed&#xA;Result.Fail(&#34;Failed&#34;).ToResult&amp;lt;int&amp;gt;();&#xA;&#xA;// converting a result to a result from type Result&amp;lt;float&amp;gt;&#xA;Result.Ok&amp;lt;int&amp;gt;(5).ToResult&amp;lt;float&amp;gt;(v =&amp;gt; v);&#xA;&#xA;// converting a result from type Result&amp;lt;int&amp;gt; to result from type Result&amp;lt;float&amp;gt; without passing the converting&#xA;// logic because result is in failed state and therefore no converting logic needed&#xA;Result.Fail&amp;lt;int&amp;gt;(&#34;Failed&#34;).ToResult&amp;lt;float&amp;gt;();&#xA;&#xA;// converting a result to a result from type Result&#xA;Result.Ok&amp;lt;int&amp;gt;().ToResult();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A value of a result object to another value can be transformed via method ``Map(..)`&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// converting a result to a result from type Result&amp;lt;float&amp;gt;&#xA;Result.Ok&amp;lt;int&amp;gt;(5).Map(v =&amp;gt; new Dto(5));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implicit conversion from T to success result &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string myString = &#34;hello world&#34;;&#xA;Result&amp;lt;T&amp;gt; result = myString;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implicit conversion from Error to fail result &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;from a single error&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;error myError = new Error(&#34;error msg&#34;);&#xA;Result result = myError;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or from a list of errors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;List&amp;lt;Error&amp;gt; myErrors = new List&amp;lt;Error&amp;gt;() &#xA;    { &#xA;        new Error(&#34;error 1&#34;), &#xA;        new Error(&#34;error 2&#34;) &#xA;    };&#xA;    &#xA;Result result = myErrors;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bind the result to another result&lt;/h3&gt; &#xA;&lt;p&gt;Binding is a transformation that returns a &lt;code&gt;Result&lt;/code&gt; | &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt;. It only evaluates the transformation if the original result is successful. The reasons of both &lt;code&gt;Result&lt;/code&gt; will be merged into a new flattened &lt;code&gt;Result&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// converting a result to a result which may fail&#xA;Result&amp;lt;string&amp;gt; r = Result.Ok(8)&#xA;    .Bind(v =&amp;gt; v == 5 ? &#34;five&#34; : Result.Fail&amp;lt;string&amp;gt;(&#34;It is not five&#34;));&#xA;&#xA;// converting a failed result to a result, which can also fail, &#xA;// returns a result with the errors of the first result only,&#xA;// the transformation is not evaluated because the value of the first result is not available&#xA;Result&amp;lt;string&amp;gt; r = Result.Fail&amp;lt;int&amp;gt;(&#34;Not available&#34;)&#xA;    .Bind(v =&amp;gt; v == 5 ? &#34;five&#34; : Result.Fail&amp;lt;string&amp;gt;(&#34;It is not five&#34;));&#xA;&#xA;// converting a result with value to a Result via a transformation which may fail&#xA;Result.Ok(5).Bind(x =&amp;gt; Result.OkIf(x == 6, &#34;Number is not 6&#34;));&#xA;&#xA;// converting a result without value into a Result &#xA;Result.Ok().Bind(() =&amp;gt; Result.Ok(5));&#xA;&#xA;// just running an action if the original result is sucessful. &#xA;Result r = Result.Ok().Bind(() =&amp;gt; Result.Ok());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Bind&lt;/code&gt; has asynchronous overloads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = await Result.Ok(5)&#xA;    .Bind(int n =&amp;gt; Task.FromResult(Result.Ok(n + 1).WithSuccess(&#34;Added one&#34;)))&#xA;    .Bind(int n =&amp;gt; /* next continuation */);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set global factories for ISuccess/IError/IExceptionalError&lt;/h3&gt; &#xA;&lt;p&gt;Within the FluentResults library in some scenarios an ISuccess, IError or IExceptionalError object is created. For example if the method &lt;code&gt;Result.Fail(&#34;My Error&#34;)&lt;/code&gt; is called then internally an IError object is created. If you need to overwrite this behavior and create in this scenario a custom error class then you can set the error factory via the settings. The same extension points are also available for ISuccess and IExceptionalError.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result.Setup(cfg =&amp;gt;&#xA;{&#xA;    cfg.SuccessFactory = successMessage =&amp;gt; new Success(successMessage).WithMetadata(&#34;Timestamp&#34;, DateTime.Now);&#xA;    &#xA;    cfg.ErrorFactory = errorMessage =&amp;gt; new Error(errorMessage).WithMetadata(&#34;Timestamp&#34;, DateTime.Now);&#xA;    &#xA;    cfg.ExceptionalErrorFactory = (errorMessage, exception) =&amp;gt; new ExceptionalError(errorMessage ?? exception.Message, exception)&#xA;    .WithMetadata(&#34;Timestamp&#34;, DateTime.Now);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mapping errors and successes&lt;/h3&gt; &#xA;&lt;p&gt;If you want to add some information to all successes in a result you can use &lt;code&gt;MapSuccesses(...)&lt;/code&gt; on a result object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Ok().WithSuccess(&#34;Success 1&#34;);&#xA;var result2 = result.MapSuccesses(e =&amp;gt; new Success(&#34;Prefix: &#34; + e.Message));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to add some information to all errors in a result you can use &lt;code&gt;MapErrors(...)&lt;/code&gt; on a result object. This method only iterate through the first level of errors, the root cause errors (in error.Reasons) are not changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Fail(&#34;Error 1&#34;);&#xA;var result2 = result.MapErrors(e =&amp;gt; new Error(&#34;Prefix: &#34; + e.Message));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling/catching errors&lt;/h3&gt; &#xA;&lt;p&gt;Similar to the catch block for exceptions, the checking and handling of errors within Result object is also supported using some methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// check if the Result object contains an error from a specific type&#xA;result.HasError&amp;lt;MyCustomError&amp;gt;();&#xA;&#xA;// check if the Result object contains an error from a specific type and with a specific condition&#xA;result.HasError&amp;lt;MyCustomError&amp;gt;(myCustomError =&amp;gt; myCustomError.MyField == 2);&#xA;&#xA;// check if the Result object contains an error with a specific metadata key&#xA;result.HasError(error =&amp;gt; error.HasMetadataKey(&#34;MyKey&#34;));&#xA;&#xA;// check if the Result object contains an error with a specific metadata&#xA;result.HasError(error =&amp;gt; error.HasMetadata(&#34;MyKey&#34;, metadataValue =&amp;gt; (string)metadataValue == &#34;MyValue&#34;)); &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All &lt;code&gt;HasError()&lt;/code&gt; methods have an optional out parameter result to access the found errorors.&lt;/p&gt; &#xA;&lt;h3&gt;Handling successes&lt;/h3&gt; &#xA;&lt;p&gt;Checking if a result object contains a specific success object can be done with the method &lt;code&gt;HasSuccess()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// check if the Result object contains a success from a specific type&#xA;result.HasSuccess&amp;lt;MyCustomSuccess&amp;gt;();&#xA;&#xA;// check if the Result object contains a success from a specific type and with a specific condition&#xA;result.HasSuccess&amp;lt;MyCustomSuccess&amp;gt;(success =&amp;gt; success.MyField == 3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All &lt;code&gt;HasSuccess()&lt;/code&gt; methods have an optional out parameter result to access the found successes.&lt;/p&gt; &#xA;&lt;h3&gt;Handling/catching exceptions&lt;/h3&gt; &#xA;&lt;p&gt;Checking if a result object contains an error with an specific exception type can be done with the method &lt;code&gt;HasException()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// check if the Result object contains an exception from a specific type&#xA;result.HasException&amp;lt;MyCustomException&amp;gt;();&#xA;&#xA;// check if the Result object contains an exception from a specific type and with a specific condition&#xA;result.HasException&amp;lt;MyCustomException&amp;gt;(MyCustomException =&amp;gt; MyCustomException.MyField == 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All &lt;code&gt;HasException()&lt;/code&gt; methods have an optional out parameter result to access the found error.&lt;/p&gt; &#xA;&lt;h3&gt;Pattern Matching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Fail&amp;lt;int&amp;gt;(&#34;Error 1&#34;);&#xA;&#xA;var outcome = result switch&#xA;{&#xA;     { IsFailed: true } =&amp;gt; $&#34;Errored because {result.Errors}&#34;,&#xA;     { IsSuccess: true } =&amp;gt; $&#34;Value is {result.Value}&#34;,&#xA;     _ =&amp;gt; null&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deconstruct Operators&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var (isSuccess, isFailed, value, errors) = Result.Fail&amp;lt;bool&amp;gt;(&#34;Failure 1&#34;);&#xA;&#xA;var (isSuccess, isFailed, errors) = Result.Fail(&#34;Failure 1&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it is necessary to log results. First create a logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyConsoleLogger : IResultLogger&#xA;{&#xA;    public void Log(string context, string content, ResultBase result, LogLevel logLevel)&#xA;    {&#xA;        Console.WriteLine(&#34;Result: {0} {1} &amp;lt;{2}&amp;gt;&#34;, result.Reasons.Select(reason =&amp;gt; reason.Message), content, context);&#xA;    }&#xA;&#xA;    public void Log&amp;lt;TContext&amp;gt;(string content, ResultBase result, LogLevel logLevel)&#xA;    {&#xA;        Console.WriteLine(&#34;Result: {0} {1} &amp;lt;{2}&amp;gt;&#34;, result.Reasons.Select(reason =&amp;gt; reason.Message), content, typeof(TContext).FullName);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you must register your logger in the Result settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var myLogger = new MyConsoleLogger();&#xA;Result.Setup(cfg =&amp;gt; {&#xA;    cfg.Logger = myLogger;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally the logger can be used on any result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Fail(&#34;Operation failed&#34;)&#xA;    .Log();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, a context can be passed in form of a string or of a generic type parameter. A custom message that provide more information can also be passed as content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Fail(&#34;Operation failed&#34;)&#xA;    .Log(&#34;logger context&#34;, &#34;More info about the result&#34;);&#xA;&#xA;var result2 = Result.Fail(&#34;Operation failed&#34;)&#xA;    .Log&amp;lt;MyLoggerContext&amp;gt;(&#34;More info about the result&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to specify the desired log level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var result = Result.Ok().Log(LogLevel.Debug);&#xA;var result = Result.Fail().Log&amp;lt;MyContext&amp;gt;(&#34;Additional context&#34;, LogLevel.Error);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also log results only on successes or failures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Result&amp;lt;int&amp;gt; result = DoSomething();&#xA;&#xA;// log with default log level &#39;Information&#39;&#xA;result.LogIfSuccess();&#xA;&#xA;// log with default log level &#39;Error&#39;&#xA;result.LogIfFailed();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asserting FluentResult objects&lt;/h3&gt; &#xA;&lt;p&gt;Try it with the power of FluentAssertions and &lt;a href=&#34;https://github.com/altmann/FluentResults/wiki#fluentresultsextensionsfluentassertions&#34;&gt;FluentResults.Extensions.FluentAssertions&lt;/a&gt;. Since v2.0 the assertion package is out of the experimental phase and its really a great enhancement to assert result objects in a fluent way.&lt;/p&gt; &#xA;&lt;h3&gt;.NET Targeting&lt;/h3&gt; &#xA;&lt;p&gt;FluentResults 3.x and above supports .NET Standard 2.0 and .NET Standard 2.1. If you need support for .NET Standard 1.1, .NET 4.6.1 or .NET 4.5 use &lt;a href=&#34;https://www.nuget.org/packages/FluentResults/2.6.0&#34;&gt;FluentResults 2.x&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Samples/Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;Here are some samples and best practices to be followed while using FluentResult or the Result pattern in general with some famous or commonly used frameworks and libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Powerful domain model inspired by Domain Driven Design&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altmann/FluentResults/tree/master/src/FluentResults.Samples/DomainDrivenDesign&#34;&gt;Domain model with a command handler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Protecting domain invariants by using for example factory methods returning a Result object&lt;/li&gt; &#xA; &lt;li&gt;Make each error unique by making your own custom Error classes inheriting from IError interface or Error class&lt;/li&gt; &#xA; &lt;li&gt;If the method doesn&#39;t have a failure scenario then don&#39;t use the Result class as return type&lt;/li&gt; &#xA; &lt;li&gt;Be aware that you can merge multiple failed results or return the first failed result asap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Serializing Result objects (ASP.NET WebApi, &lt;a href=&#34;https://www.hangfire.io/&#34;&gt;Hangfire&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altmann/FluentResults/tree/master/src/FluentResults.Samples/WebController&#34;&gt;Asp.net WebController&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altmann/FluentResults/tree/master/src/FluentResults.Samples/HangfireJobs&#34;&gt;Hangfire Job&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t serialize FluentResult result objects.&lt;/li&gt; &#xA; &lt;li&gt;Make your own custom ResultDto class for your public api in your system boundaries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;So you can control which data is submitted and which data is serialized&lt;/li&gt; &#xA;   &lt;li&gt;Your public api is independent of third party libraries like FluentResults&lt;/li&gt; &#xA;   &lt;li&gt;You can keep your public api stable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt; request handlers returning Result objects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altmann/FluentResults/tree/master/src/FluentResults.Samples.MediatR&#34;&gt;Full functional .NET Core sample code with commands/queries and a ValidationPipelineBehavior&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Returns business validation errors via a Result object from a MediatR request handler back to the consumer&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t throw exceptions based on business validation errors&lt;/li&gt; &#xA; &lt;li&gt;Inject command and query validation via MediatR PipelineBehavior and return a Result object instead of throwing an exception&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interesting Resources about Result Pattern&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@michael_altmann/error-handling-returning-results-2b88b5ea11e9&#34;&gt;Error Handling ‚Äî Returning Results by Michael Altmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.forevolve.com/en/articles/2018/03/19/operation-result/&#34;&gt;Operation Result Pattern by Carl-Hugo Marcotte&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/posts/exceptions-for-flow-control/&#34;&gt;Exceptions for flow control in C# by Vladimir Khorikov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/posts/error-handling-exception-or-result/&#34;&gt;Error handling: Exception or Result? by Vladimir Khorikov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/posts/what-is-exceptional-situation/&#34;&gt;What is an exceptional situation in code? by Vladimir Khorikov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/posts/advanced-error-handling-techniques/&#34;&gt;Advanced error handling techniques by Vladimir Khorikov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@cummingsi1993/the-operation-result-pattern-a-simple-guide-fe10ff959080&#34;&gt;A Simple Guide by Isaac Cummings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://khalilstemmler.com/articles/enterprise-typescript-nodejs/handling-errors-result-class/&#34;&gt;Flexible Error Handling w/ the Result Class by Khalil Stemmler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://enterprisecraftsmanship.com/posts/combining-asp-net-core-attributes-with-value-objects/&#34;&gt;Combining ASP.NET Core validation attributes with Value Objects by Vladimir Khorikov&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;I love this project but implementing features, answering issues or maintaining ci/release pipelines takes time - this is my freetime. If you like FluentResult and you find it useful, consider making a donation. Click on the sponsor button on the top right side.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the contributers and to all the people who gave feedback!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/altmann/fluentresults/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=altmann/fluentresults&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) Michael Altmann. See &lt;a href=&#34;https://raw.githubusercontent.com/altmann/FluentResults/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;</summary>
  </entry>
</feed>