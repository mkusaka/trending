<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-11T01:35:26Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/reverse-proxy</title>
    <updated>2022-08-11T01:35:26Z</updated>
    <id>tag:github.com,2022-08-11:/microsoft/reverse-proxy</id>
    <link href="https://github.com/microsoft/reverse-proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit for developing high-performance HTTP reverse proxy applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/219224/171533159-51879bda-9f70-42a9-8fa5-95656e45be24.png&#34; alt=&#34;YARP_96x&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to the YARP project&lt;/h1&gt; &#xA;&lt;p&gt;YARP (which stands for &#34;Yet Another Reverse Proxy&#34;) is a project to create a reverse proxy server. We found a bunch of internal teams at Microsoft who were either building a reverse proxy for their service or had been asking about APIs and tech for building one, so we decided to get them all together to work on a common solution, this project.&lt;/p&gt; &#xA;&lt;p&gt;YARP is a reverse proxy toolkit for building fast proxy servers in .NET using the infrastructure from ASP.NET and .NET. The key differentiator for YARP is that it&#39;s been designed to be easily customized and tweaked to match the specific needs of each deployment scenario.&lt;/p&gt; &#xA;&lt;p&gt;We expect YARP to ship as a library and project template that together provide a robust, performant proxy server. Its pipeline and modules are designed so that you can then customize the functionality for your needs. For example, while YARP supports configuration files, we expect that many users will want to manage the configuration programmatically based on their own backend configuration management system, YARP will provide a configuration API to enable that customization in-proc. YARP is designed with customizability as a primary scenario, rather than requiring you to break out to script or having to rebuild from source.&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See our &lt;a href=&#34;https://microsoft.github.io/reverse-proxy/articles/getting-started.html&#34;&gt;Getting Started&lt;/a&gt; docs.&lt;/li&gt; &#xA; &lt;li&gt;Try our &lt;a href=&#34;https://github.com/microsoft/reverse-proxy/releases&#34;&gt;previews&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Try our latest &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/reverse-proxy/main/docs/DailyBuilds.md&#34;&gt;daily build&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Updates&lt;/h1&gt; &#xA;&lt;p&gt;For regular updates, see our &lt;a href=&#34;https://github.com/microsoft/reverse-proxy/releases&#34;&gt;releases page&lt;/a&gt;. Subscribe to release notifications on this repository to be notified of future updates (Watch -&amp;gt; Custom -&amp;gt; Releases).&lt;/p&gt; &#xA;&lt;p&gt;If you want to live on the bleeding edge, you can pickup the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/reverse-proxy/main/docs/DailyBuilds.md&#34;&gt;daily builds&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;To build the repo, you should only need to run &lt;code&gt;build.cmd&lt;/code&gt; (on Windows) or &lt;code&gt;build.sh&lt;/code&gt; (on Linux or macOS). The script will download the .NET SDK and build the solution.&lt;/p&gt; &#xA;&lt;p&gt;For VS on Windows, install the latest &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;VS 2022&lt;/a&gt; release and then run the &lt;code&gt;startvs.cmd&lt;/code&gt; script to launch Visual Studio using the appropriate local copy of the .NET SDK.&lt;/p&gt; &#xA;&lt;p&gt;To set up local development with Visual Studio, Visual Studio for Mac or Visual Studio Code, you need to put the local copy of the .NET SDK in your &lt;code&gt;PATH&lt;/code&gt; environment variable. Our &lt;code&gt;Restore&lt;/code&gt; script fetches the latest build of .NET and installs it to a &lt;code&gt;.dotnet&lt;/code&gt; directory &lt;em&gt;within&lt;/em&gt; this repository.&lt;/p&gt; &#xA;&lt;p&gt;We provide some scripts to set all this up for you. Just follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;restore.cmd&lt;/code&gt;/&lt;code&gt;restore.sh&lt;/code&gt; script to fetch the required .NET SDK locally (to the &lt;code&gt;.dotnet&lt;/code&gt; directory within this repo)&lt;/li&gt; &#xA; &lt;li&gt;&#34;Dot-source&#34; the &lt;code&gt;activate&lt;/code&gt; script to put the local .NET SDK on the PATH &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;For PowerShell, run: &lt;code&gt;. .\activate.ps1&lt;/code&gt; (note the leading &lt;code&gt;. &lt;/code&gt;, it is required!)&lt;/li&gt; &#xA;   &lt;li&gt;For Linux/macOS/WSL, run: &lt;code&gt;. ./activate.sh&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For CMD, there is no supported script. You can manually add the &lt;code&gt;.dotnet&lt;/code&gt; directory &lt;strong&gt;within this repo&lt;/strong&gt; to your &lt;code&gt;PATH&lt;/code&gt;. Ensure &lt;code&gt;where dotnet&lt;/code&gt; shows a path within this repository!&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Launch VS, VS for Mac, or VS Code!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When you&#39;re done, you can run the &lt;code&gt;deactivate&lt;/code&gt; function to undo the changes to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re having trouble building the project, or developing in Visual Studio, please file an issue to let us know and we&#39;ll help out (and fix our scripts/tools as needed)!&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;The command to build and run all tests: &lt;code&gt;build.cmd/sh -test&lt;/code&gt;. To run specific test you may use XunitMethodName property: &lt;code&gt;dotnet build /t:Test /p:XunitMethodName={FullyQualifiedNamespace}.{ClassName}.{MethodName}&lt;/code&gt;. The tests can also be run from Visual Studio if launched using &lt;code&gt;startvs.cmd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/reverse-proxy/main/docs/roadmap.md&#34;&gt;docs/roadmap.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Reporting security issues and bugs&lt;/h1&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) at &lt;code&gt;secure@microsoft.com&lt;/code&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including &lt;a href=&#34;https://www.microsoft.com/msrc/pgp-key-msrc&#34;&gt;the MSRC PGP key&lt;/a&gt;, can be found at the &lt;a href=&#34;https://www.microsoft.com/msrc&#34;&gt;Microsoft Security Response Center&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mKenfenheuer/steam-deck-windows-usermode-driver</title>
    <updated>2022-08-11T01:35:26Z</updated>
    <id>tag:github.com,2022-08-11:/mKenfenheuer/steam-deck-windows-usermode-driver</id>
    <link href="https://github.com/mKenfenheuer/steam-deck-windows-usermode-driver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A windows usermode controller driver for the steam deck internal controller.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Steamdeck Windows Controller Driver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;teamdeck &lt;strong&gt;WI&lt;/strong&gt;ndows &lt;strong&gt;C&lt;/strong&gt;ontroller &lt;strong&gt;D&lt;/strong&gt;river (SWICD)&lt;/p&gt; &#xA;&lt;p&gt;This work-in-progress driver maps the Steam deck&#39;s built-in controller to a virtual ViGEm XBox 360 Controller. The layout is customizeable using the gui.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mKenfenheuer/steam-deck-windows-usermode-driver/wiki/Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mKenfenheuer/steam-deck-windows-usermode-driver/wiki/Driver_Status&#34;&gt;Driver Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mKenfenheuer/steam-deck-windows-usermode-driver/wiki/Settings&#34;&gt;Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mKenfenheuer/steam-deck-windows-usermode-driver/wiki/Profiles&#34;&gt;Profiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mKenfenheuer/steam-deck-windows-usermode-driver/wiki/Support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>n00mkrad/cupscale</title>
    <updated>2022-08-11T01:35:26Z</updated>
    <id>tag:github.com,2022-08-11:/n00mkrad/cupscale</id>
    <link href="https://github.com/n00mkrad/cupscale" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image Upscaling GUI based on ESRGAN&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cupscale&lt;/h1&gt; &#xA;&lt;p&gt;Image Upscaling GUI based on ESRGAN&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ntIuSrv.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;p&gt;Based around &lt;a href=&#34;https://github.com/xinntao/ESRGAN&#34;&gt;xinntao&#39;s ESRGAN&lt;/a&gt; implemented via &lt;a href=&#34;https://github.com/JoeyBallentine/ESRGAN&#34;&gt;Joey&#39;s Fork&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;AMD/Intel GPU compatibility is possible thanks to BlueAmulet&#39;s &lt;a href=&#34;https://github.com/BlueAmulet/realsr-ncnn-vulkan&#34;&gt;esrgan-ncnn-vulkan&lt;/a&gt; based on nihui&#39;s &lt;a href=&#34;https://github.com/nihui/realsr-ncnn-vulkan&#34;&gt;realsr-ncnn-vulkan&lt;/a&gt; running on Tencent&#39;s &lt;a href=&#34;https://github.com/Tencent/ncnn&#34;&gt;ncnn&lt;/a&gt; framework, as well as &lt;a href=&#34;https://github.com/xinntao/Real-ESRGAN&#34;&gt;xinntao&#39;s Real-ESRGAN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/n00mkrad/cupscale/releases&#34;&gt;Get the latest release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;The application is more or less portable. It&#39;s a single executable that you can run anywhere.&lt;/p&gt; &#xA;&lt;p&gt;Temporary files are stored in the installation directory by default, which is why you shouldn&#39;t install the application in protected locations like Program Files.&lt;/p&gt; &#xA;&lt;h2&gt;Supported AI Backends:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nvidia CUDA (Recommended)&lt;/li&gt; &#xA; &lt;li&gt;Vulkan (Works on any modern GPU, but is slower and takes a long time start up)&lt;/li&gt; &#xA; &lt;li&gt;CPU (Works without GPU, but is very slow)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CUDA, Vulkan/NCNN or CPU supported, with included model converter for NCNN&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly Model Interpolation&lt;/li&gt; &#xA; &lt;li&gt;Model Chaining (Run images through multiple models at once)&lt;/li&gt; &#xA; &lt;li&gt;Batch Upscaling (Load a directory or multiple single images)&lt;/li&gt; &#xA; &lt;li&gt;Automatic Image tiling/merging to avoid running out of VRAM&lt;/li&gt; &#xA; &lt;li&gt;Pre-Processing: Optionally downscale images before upscaling&lt;/li&gt; &#xA; &lt;li&gt;Post-Processing: Automatically resize after upscaling&lt;/li&gt; &#xA; &lt;li&gt;Compatible with PNG, JPEG, BMP, WEBP, TGA, DDS images&lt;/li&gt; &#xA; &lt;li&gt;Load image straight out of the clipboard (no need to download images from web)&lt;/li&gt; &#xA; &lt;li&gt;Create various types of comparisons (Side-By-Side, 50/50, and before/after animations as GIF or MP4)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>