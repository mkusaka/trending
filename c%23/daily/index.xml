<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:29:53Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SamboyCoding/Cpp2IL</title>
    <updated>2024-07-01T01:29:53Z</updated>
    <id>tag:github.com,2024-07-01:/SamboyCoding/Cpp2IL</id>
    <link href="https://github.com/SamboyCoding/Cpp2IL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Work-in-progress tool to reverse unity&#39;s IL2CPP toolchain.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cpp2IL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Samboy063.Cpp2IL.Core/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Samboy063.Cpp2IL.Core&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Need Help? Join &lt;a href=&#34;https://discord.gg/XdggT7XZXm&#34;&gt;the discord&lt;/a&gt;!&lt;/h3&gt; &#xA;&lt;p&gt;WIP Tool to reverse Unity&#39;s IL2CPP build process back to the original managed DLLs.&lt;/p&gt; &#xA;&lt;p&gt;The information below almost entirely applies to the CLI application available on github releases. For documentation on using the &#34;core&#34; module - which the CLI is just a wrapper around - in your own projects, see &lt;a href=&#34;https://raw.githubusercontent.com/SamboyCoding/Cpp2IL/development/Cpp2IL.Core/README_CORE.md&#34;&gt;README_CORE.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Uses &lt;a href=&#34;https://raw.githubusercontent.com/SamboyCoding/Cpp2IL/development/LibCpp2IL&#34;&gt;LibCpp2IL&lt;/a&gt; for the initial parsing and loading of metadata structures. LibCpp2IL is obtainable from the build artifacts if you want to do something yourself with IL2CPP metadata, and is released under the MIT license. The link above will take you to the documentation for LibCpp2IL.&lt;/p&gt; &#xA;&lt;h3&gt;Development Branch Notes&lt;/h3&gt; &#xA;&lt;p&gt;Cpp2IL is currently undergoing a major rewrite. This branch represents work in progress, and is subject to change.&lt;/p&gt; &#xA;&lt;p&gt;CI builds for developers can be obtained from &lt;a href=&#34;https://nuget.samboy.dev/&#34;&gt;My Nuget Feed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The command-line interface has been simplified, going from a lot of command line options to a concept of output formats and processing layers. However, a lot of these formats and layers are not yet implemented, so functionality is limited compared to the previously released versions.&lt;/p&gt; &#xA;&lt;h4&gt;Obvious Changes:&lt;/h4&gt; &#xA;&lt;p&gt;Many options, such as &lt;code&gt;--analysis-level&lt;/code&gt;, &lt;code&gt;--skip-analysis&lt;/code&gt;, etc, have been removed. Ignoring the fact that analysis is not yet implemented, these options will not be coming back. Analysis will be off by default, and will be enabled via the usage of a processing layer.&lt;/p&gt; &#xA;&lt;p&gt;Equally, options like &lt;code&gt;--supress-attributes&lt;/code&gt;, which previously suppressed the Cpp2ILInjected attributes, have been replaced with a process layer - this one is actually implemented, and is called &lt;code&gt;attributeinjector&lt;/code&gt;. You can enable this layer using the &lt;code&gt;--use-processor&lt;/code&gt; option, and you can list other options using &lt;code&gt;--list-processors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Metadata dumps and method dumps will be their own output format too, instead of both being default-on, and controlled via a dedicated option. Currently this means you&#39;ll need to run Cpp2IL multiple times if you want both dumps, though this may change in the future if we add support for outputting to multiple formats simultaneously. Like processing layers, output formats can be listed via the &lt;code&gt;--list-output-formats&lt;/code&gt; option, and are selected via the &lt;code&gt;--output-as&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Less obvious changes:&lt;/h4&gt; &#xA;&lt;p&gt;Under the hood, the application has been almost completely rewritten. Primarily, this was necessary due to the degree Cpp2IL was dependent on the Mono.Cecil library, which had some limitations. When we looked into switching, we realised how reliant we were on the library. This is no longer the case - the application is written around LibCpp2IL types and the new Analysis Context objects, and the Mono.Cecil library is no longer used, having been replaced with AsmResolver.DotNet.&lt;/p&gt; &#xA;&lt;p&gt;On top of that, we are currently in the process of reimplementing analysis based around an intermediate representation called ISIL (Instruction-Set-Independent Language), which will allow for much easier support of new instruction sets. The ISIL is then converted into a Control Flow Graph, which can be analysed more intelligently than a raw disassembly.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re also working on a Plugin system which will allow third-party developers to write plugins to add support for custom instruction sets, binary formats, and eventually load obfuscated or encrypted metadata or binary files.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Options&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;The simplest usage of this application is for a windows x86 or x64 unity game. In that case you can just run &lt;code&gt;Cpp2IL-Win.exe --game-path=C:\Path\To\Your\Game&lt;/code&gt; and Cpp2IL will detect your unity version, locate the files it needs, and dump the output into a cpp2il_out folder wherever you ran the command from.&lt;/p&gt; &#xA;&lt;p&gt;Assuming you have a single APK file (not an APKM or XAPK), and are running at least cpp2il 2021.4.0, you can use the same argument as above but pass in the path to the APK, and cpp2il will extract the files it needs from the APK.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Command Line Option Listing&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Argument Example&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--game-path&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C:\Path\To\Game&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Specify the path to the game folder. Required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--exe-name&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TestGame&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Specify the name of the game&#39;s exe file in case auto detection fails (because there are other exe files in the game directory)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--verbose&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;lt;None&amp;gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Log more information about what we are doing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--list-processors&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;lt;None&amp;gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;List available processing layers, then exit.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--use-processor&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;attributeinjector&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Select a processing layer to use, which can change the raw data prior to outputting. This option can appear multiple times.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--processor-config&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;key=value&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Provide configuration options to the selected processing layers. These will be documented by the plugin which adds the processing layer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--list-output-formats&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&amp;lt;None&amp;gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;List available output formats, then exit.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--output-as&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;dummydll&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Specify the output format you wish to use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--output-to&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cpp2il_out&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Root directory to output to. This path will be passed to the selected output format, which may then create subdirectories etc. within this location.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--wasm-framework-file&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C:\Path\To\webgl.framework.js&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Only used in conjunction with WASM binaries. Some of these have obfuscated exports but they can be recovered via a framework.js file, which you can provide the path to using this argument.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Release Structure&lt;/h2&gt; &#xA;&lt;p&gt;Every single commit is built to a CI build using Github Actions - the action file can be found in the .github folder, if you want to reproduce the builds yourself. Be aware these may not be the most stable - while there are tests to ensure compatibility with a range of games, sometimes things do break! These are versioned by the commit they were built from.&lt;/p&gt; &#xA;&lt;p&gt;The release files can be downloaded from the Actions tab if you are signed into GitHub, or you can use the following links, which always point to the latest successful CI build. Note that the .NET Framework build is provided for compatibility with wine/proton.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/SamboyCoding/Cpp2IL/workflows/dotnet-core/development/Cpp2IL-net6-win-x64.zip&#34;&gt;Windows Native Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/SamboyCoding/Cpp2IL/workflows/dotnet-core/development/Cpp2IL-net6-linux-x64.zip&#34;&gt;Linux Native Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/SamboyCoding/Cpp2IL/workflows/dotnet-core/development/Cpp2IL-net6-osx-x64.zip&#34;&gt;Mac Native Build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/SamboyCoding/Cpp2IL/workflows/dotnet-core/development/Cpp2IL-Netframework472-Windows.zip&#34;&gt;.NET Framework 4.7.2 Windows Build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On top of this, I manually release &#34;milestone&#34; release builds whenever I think a major set of improvements have been made. These are NOT marked as pre-releases on github, and should (at least in theory) be stable and suitable for use on a range of games.&lt;/p&gt; &#xA;&lt;h2&gt;Terminal Colors and Debug Logging&lt;/h2&gt; &#xA;&lt;p&gt;From the first milestone build 2021.0, and onwards, Cpp2IL now outputs more rigidly-structured data to the console. This includes log levels (VERB, INFO, WARN, FAIL) and associated colours (Grey for VERB, Blue for INFO, Yellow for WARN, Red for FAIL).&lt;/p&gt; &#xA;&lt;p&gt;As of milestone 2021.1, if Cpp2IL is able to detect that you&#39;re running in Wine/Proton, these ANSI colour codes are disabled, as they are not supported by wine and look awful.&lt;/p&gt; &#xA;&lt;p&gt;VERB messages will only be logged if Cpp2IL is launched with the &lt;code&gt;--verbose&lt;/code&gt; option, and it would be helpful if you could report issues with this flag enabled. For normal operation, they shouldn&#39;t be needed, unless you&#39;re curious.&lt;/p&gt; &#xA;&lt;p&gt;If you do not wish for the output to be coloured, set the Environment Variable &lt;code&gt;NO_COLOR=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This application is built primarily using .NET 6.0, but a .NET Framework 4.7.2 build is also published for legacy purposes.&lt;/p&gt; &#xA;&lt;p&gt;It uses the following libraries, for which I am very thankful:&lt;/p&gt; &#xA;&lt;p&gt;(All are MIT licensed aside from XUnit which is Apache 2.0+MIT)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/icedland/iced&#34;&gt;iced&lt;/a&gt; disassembler for x86&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/9ee1/Capstone.NET&#34;&gt;Capstone.NET&lt;/a&gt; for ARMv8 and ARMv7 disassembly.&lt;/li&gt; &#xA; &lt;li&gt;My own WasmDisassembler library for WebAssembly disassembly. This can be found in the &lt;code&gt;WasmDisassembler&lt;/code&gt; subdirectory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/silkfire/Pastel&#34;&gt;Pastel&lt;/a&gt; for the console colours.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/commandlineparser/commandline&#34;&gt;CommandLineParser&lt;/a&gt; so I didn&#39;t need to write one myself.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Washi1337/AsmResolver&#34;&gt;AsmResolver&lt;/a&gt; for any output formats which produce managed .NET assemblies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xunit/xunit&#34;&gt;xUnit&lt;/a&gt; for the unit tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bgrainger/IndexRange&#34;&gt;IndexRange&lt;/a&gt; to port System.Index and System.Range back to netstandard2.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/manuelroemer/Nullable&#34;&gt;Nullable&lt;/a&gt; to port nullable attributes back to netstandard2.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to the above, the GUI Project uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AvaloniaUI/Avalonia&#34;&gt;Avalonia&lt;/a&gt; as a GUI framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AvaloniaUI/AvaloniaEdit/&#34;&gt;AvaloniaEdit&lt;/a&gt; for the text editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danipen/TextMateSharp&#34;&gt;TextMateSharp&lt;/a&gt; for the syntax highlighting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally, the OrbisPkg plugin uses &lt;a href=&#34;https://github.com/maxton/LibOrbisPkg&#34;&gt;LibOrbisPkg&lt;/a&gt;, which is licensed under the LGPL, version 3.&lt;/p&gt; &#xA;&lt;p&gt;Cpp2IL is (very loosely, at this point) based off of &lt;a href=&#34;https://github.com/Perfare/Il2CppDumper&#34;&gt;Il2CppDumper&lt;/a&gt;, which I forked in 2018 and removed a lot of code, rewrote a lot, and added a lot more. But at its core, it&#39;s still got some dumper left in it, mostly in LibCpp2IL.&lt;/p&gt; &#xA;&lt;p&gt;It contains bits and pieces from &lt;a href=&#34;https://github.com/djkaty/Il2CppInspector/&#34;&gt;Il2CppInspector&lt;/a&gt;, taken with permission from djKaty, and I&#39;d like to express my gratitude to her here for her invaluable help.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d like to thank the Audica Modding community and Discord for the initial inspiration for this project, lots of support in the early days, and feature requests these days.&lt;/p&gt; &#xA;&lt;p&gt;And finally, check out some other cool projects which link in with this one. Of course, I mentioned &lt;a href=&#34;https://github.com/knah/Il2CppAssemblyUnhollower/&#34;&gt;Il2CppAssemblyUnhollower&lt;/a&gt; further up, but also check out &lt;a href=&#34;https://github.com/LavaGang/MelonLoader/&#34;&gt;MelonLoader&lt;/a&gt;, which uses Cpp2IL for Dummy DLL generation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sn4k3/UVtools</title>
    <updated>2024-07-01T01:29:53Z</updated>
    <id>tag:github.com,2024-07-01:/sn4k3/UVtools</id>
    <link href="https://github.com/sn4k3/UVtools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MSLA/DLP, file analysis, calibration, repair, conversion and manipulation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UVtools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/sn4k3/UVtools?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sn4k3/UVtools/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/sn4k3/UVtools?style=for-the-badge&#34; alt=&#34;GitHub repo size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sn4k3/UVtools/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/sn4k3/UVtools?style=for-the-badge&#34; alt=&#34;Code size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sn4k3/UVtools/master/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/tokei/lines/github/sn4k3/UVtools?style=for-the-badge&#34; alt=&#34;Total code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/UVtools.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/UVtools.Core?style=for-the-badge&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sn4k3/UVtools/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/sn4k3/UVtools?include_prereleases&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub release (latest by date including pre-releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sn4k3/UVtools/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/sn4k3/UVtools/total?style=for-the-badge&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.chocolatey.org/packages/uvtools&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/dt/uvtools?color=brown&amp;amp;label=Chocolatey&amp;amp;style=for-the-badge&#34; alt=&#34;Chocolatey&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/sn4k3&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/sn4k3?color=red&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download the latest version at:&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/releases/latest&#34;&gt;https://github.com/sn4k3/UVtools/releases/latest&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;To auto install on Windows (package manager):&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Winget:&lt;/strong&gt; &lt;code&gt;winget install -e --id PTRTECH.UVtools&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chocolatey:&lt;/strong&gt; &lt;code&gt;choco install -y uvtools&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Winget is included on Windows 10 with recent updates and Windows 11 by default.&lt;/p&gt; &#xA;&lt;h2&gt;To auto install on Linux:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ &#34;$(command -v apt)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo apt-get install -y curl &#xA;[ &#34;$(command -v dnf)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo dnf install -y curl&#xA;[ &#34;$(command -v pacman)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo pacman -S curl&#xA;[ &#34;$(command -v zypper)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo zypper install -y curl&#xA;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/sn4k3/UVtools/master/Scripts/install-uvtools.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To auto install on MacOS:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/sn4k3/UVtools/master/Scripts/install-uvtools.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;To downgrade to a previous version:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Replace x.x.x by the version you want to install&#xA;bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/sn4k3/UVtools/master/Scripts/install-uvtools.sh)&#34; -- x.x.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;MSLA/DLP, file analysis, calibration, repair, conversion and manipulation&lt;/h1&gt; &#xA;&lt;p&gt;This simple tool can give you insight of supports and find key failures.&lt;br&gt; Did you forget what resin or other settings you used on a project? This can also save you, check every setting that were used with or simply change them!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook group: &lt;a href=&#34;https://www.facebook.com/groups/uvtools&#34;&gt;https://www.facebook.com/groups/uvtools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discussions: &lt;a href=&#34;https://github.com/sn4k3/UVtools/discussions&#34;&gt;https://github.com/sn4k3/UVtools/discussions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sn4k3/UVtools/master/wiki/UI1.png&#34; alt=&#34;GUI Screenshot&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sn4k3/UVtools/master/wiki/UI2.png&#34; alt=&#34;GUI Screenshot Islands&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Why this project?&lt;/h1&gt; &#xA;&lt;p&gt;I don&#39;t own a Prusa SL1 or any other resin printer, for now I’m only a FDM user with Prusa MK3 and a Ender3. PrusaSlicer is my only choose, why? Because I think it&#39;s the best and feature more, at least for me, simple but powerful.&lt;/p&gt; &#xA;&lt;p&gt;So why this project? Well in fact I’m looking for a resin printer and i like to study and learn first before buy, get good and don&#39;t regret, and while inspecting i found that resin printers firmwares are not as universal as FDM, too many file formats and there before each printer can use their own property file, this of course limit the software selection, for example, only PrusaSlicer can slice SL1 files. So with that in mind I&#39;m preparing when I get a resin printer in future I can use PrusaSlicer instead of others. I&#39;ve explored the other slicers and again, no one give me joy, and i feel them unstable, many users slice model on PrusaSlicer just to get those supports and export STL to load in another, that means again PrusaSlicer is on the win side, the problem is they can&#39;t slice directly on PrusaSlicer, so, in the end, my project aims to do almost that, configure a printer on PrusaSlicer, eg: EPAX X1, slice, export file, convert SL1 to native printer file and print.&lt;/p&gt; &#xA;&lt;p&gt;Please note I don&#39;t own any resin printer! All my work is virtual and calculated, so, use experimental functions with care! Once things got confirmed a list will show. But also, I need victims for test subject. Proceed at your own risk!&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View, modify and extract layer by layer&lt;/li&gt; &#xA; &lt;li&gt;View, modify and extract thumbnails&lt;/li&gt; &#xA; &lt;li&gt;Export file to a folder&lt;/li&gt; &#xA; &lt;li&gt;View and edit all used properties/settings&lt;/li&gt; &#xA; &lt;li&gt;Many tools to mutate and filter layers&lt;/li&gt; &#xA; &lt;li&gt;Check for issues and repair/remove them as possible: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Islands&lt;/li&gt; &#xA;   &lt;li&gt;Overhangs&lt;/li&gt; &#xA;   &lt;li&gt;Resin traps&lt;/li&gt; &#xA;   &lt;li&gt;Suction cups&lt;/li&gt; &#xA;   &lt;li&gt;Touching bounds&lt;/li&gt; &#xA;   &lt;li&gt;Print height&lt;/li&gt; &#xA;   &lt;li&gt;Empty layers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Suggestions and auto corrections: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Layer height&lt;/li&gt; &#xA;   &lt;li&gt;Bottom layer count&lt;/li&gt; &#xA;   &lt;li&gt;Wait time before cure&lt;/li&gt; &#xA;   &lt;li&gt;Wait time after cure&lt;/li&gt; &#xA;   &lt;li&gt;Transition layer count&lt;/li&gt; &#xA;   &lt;li&gt;Model position&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/wiki/Sliced-File-Conversion&#34;&gt;Convert format to another format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Calibration tests&lt;/li&gt; &#xA; &lt;li&gt;Portable (No installation needed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known File Formats&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SL1, SL1S (PrusaSlicer)&lt;/li&gt; &#xA; &lt;li&gt;Photon, Photons, CBDDLP, CTB, PHZ, FDG, ZIP (Chitubox)&lt;/li&gt; &#xA; &lt;li&gt;PWS, PW0, PWX, DLP, DL2P, PWMO, PWMA, PWMS, PWMX, PMX2, PWMB, PWSQ, PX6S, PM3, PM3N, PM3M, PM3R, PM5, PM5S, PWC (Photon Workshop)&lt;/li&gt; &#xA; &lt;li&gt;JXS (GKone Slicer)&lt;/li&gt; &#xA; &lt;li&gt;ZCode (UnizMaker)&lt;/li&gt; &#xA; &lt;li&gt;ZCodex (Z-Suite)&lt;/li&gt; &#xA; &lt;li&gt;CWS (NovaMaker), RGB.CWS (Nova Bene4 Mono / Elfin2 Mono SE)&lt;/li&gt; &#xA; &lt;li&gt;XML.CWS (Wanhao Workshop)&lt;/li&gt; &#xA; &lt;li&gt;MDLP (Makerbase MKS-DLP v1)&lt;/li&gt; &#xA; &lt;li&gt;GR1 (GR1 Workshop)&lt;/li&gt; &#xA; &lt;li&gt;CXDLP, CXDLPV4 (Creality Box)&lt;/li&gt; &#xA; &lt;li&gt;GOO (Elegoo)&lt;/li&gt; &#xA; &lt;li&gt;LGS (Longer Orange 10), LGS30 (Longer Orange 30), LGS120 (Longer Orange 120), LGS4K (Longer Orange 4K &amp;amp; mono)&lt;/li&gt; &#xA; &lt;li&gt;Flashforge SVGX&lt;/li&gt; &#xA; &lt;li&gt;Anet N4, Anet N7&lt;/li&gt; &#xA; &lt;li&gt;QDT (Emake3D Galaxy 1)&lt;/li&gt; &#xA; &lt;li&gt;OSLA (Open SLA universal binary file)&lt;/li&gt; &#xA; &lt;li&gt;OSF (Vlare Open File Format)&lt;/li&gt; &#xA; &lt;li&gt;NanoDLP (Zip)&lt;/li&gt; &#xA; &lt;li&gt;UVJ (Vendor-neutral format for manual manipulation)&lt;/li&gt; &#xA; &lt;li&gt;VDT (Voxeldance Tango), VDA.ZIP (Voxeldance Additive)&lt;/li&gt; &#xA; &lt;li&gt;ZIP (Generic / Phrozen Zip)&lt;/li&gt; &#xA; &lt;li&gt;Image files (png, jpg, jpeg, jp2, tif, bmp, pbm, pgm, ras, sr)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;PrusaSlicer&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Installation:&lt;/strong&gt; &lt;a href=&#34;https://github.com/sn4k3/UVtools/wiki/Setup-PrusaSlicer&#34;&gt;https://github.com/sn4k3/UVtools/wiki/Setup-PrusaSlicer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Available printers:&lt;/strong&gt; &lt;a href=&#34;https://github.com/sn4k3/UVtools/tree/master/PrusaSlicer/printer&#34;&gt;https://github.com/sn4k3/UVtools/tree/master/PrusaSlicer/printer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Available profiles&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;From 0.01mm to 0.20mm&lt;/li&gt; &#xA;   &lt;li&gt;Light, Medium and Heavy Supports&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom &#34;Material Notes&#34; and &#34;Printer Notes&#34; keywords:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;TransitionLayerCount_xxx:&lt;/strong&gt; Sets the number of transition layers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomLightOffDelay_xxx:&lt;/strong&gt; Sets the bottom light off delay time in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LightOffDelay_xxx:&lt;/strong&gt; Sets the light off delay time in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomWaitTimeBeforeCure_xxx:&lt;/strong&gt; Sets the bottom wait time before cure in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WaitTimeBeforeCure_xxx:&lt;/strong&gt; Sets the wait time before cure in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomWaitTimeAfterCure_xxx:&lt;/strong&gt; Sets the bottom wait time after cure in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WaitTimeAfterCure_xxx:&lt;/strong&gt; Sets the wait time after cure in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomLiftHeight_xxx:&lt;/strong&gt; Sets the bottom lift height in millimeters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomLiftSpeed_xxx:&lt;/strong&gt; Sets the bottom lift speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomLiftHeight2_xxx:&lt;/strong&gt; Sets the second bottom lift height in millimeters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomLiftSpeed2_xxx:&lt;/strong&gt; Sets the second bottom lift speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LiftHeight_xxx:&lt;/strong&gt; Sets the lift height in millimeters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LiftSpeed_xxx:&lt;/strong&gt; Sets the lift speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LiftHeight2_xxx:&lt;/strong&gt; Sets the second lift height in millimeters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LiftSpeed2_xxx:&lt;/strong&gt; Sets the second lift speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomWaitTimeAfterLift_xxx:&lt;/strong&gt; Sets the bottom wait time after lift in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WaitTimeAfterLift_xxx:&lt;/strong&gt; Sets the wait time after lift in seconds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomRetractSpeed_xxx:&lt;/strong&gt; Sets the bottom retract speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomRetractHeight2_xxx:&lt;/strong&gt; Sets the second bottom retract height in millimeters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomRetractSpeed2_xxx:&lt;/strong&gt; Sets the second bottom retract speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;RetractSpeed_xxx:&lt;/strong&gt; Sets the retract speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;RetractHeight2_xxx:&lt;/strong&gt; Sets the second retract height in millimeters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;RetractSpeed2_xxx:&lt;/strong&gt; Sets the second retract speed in millimeters/minute&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;BottomLightPWM_xxx:&lt;/strong&gt; Sets the bottom LED light power (0-255)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LightPWM_xxx:&lt;/strong&gt; Sets the LED light power (0-255)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FILEVERSION_n:&lt;/strong&gt; Sets the output file format version/revision&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;FILEFORMAT_xxx:&lt;/strong&gt; Sets the output file format extension to be auto converted once open on UVtools&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;LAYERIMAGEFORMAT_xxx:&lt;/strong&gt; Sets the layer image format required for the converted file if the format have multiple options (For Archives with PNG&#39;s)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that some variables will only work if the target format supports them, otherwise they will be ignored.&lt;br&gt; Replace the &#34;xxx&#34; by your desired value in the correct units&lt;/p&gt; &#xA;&lt;h1&gt;Command-line&lt;/h1&gt; &#xA;&lt;h2&gt;UVtoolsCmd (Console) executable&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Usage:&#xA;  UVtoolsCmd [command] [options]&#xA;&#xA;Options:&#xA;  -q, --quiet     Make output silent but exceptions error will still show&#xA;  --no-progress   Show no progress&#xA;  --dummy         Do not save alterations to file&#xA;  --core-version  Show core version information&#xA;  --version       Show version information&#xA;  -?, -h, --help  Show help and usage information&#xA;&#xA;Commands:&#xA;  set-properties &amp;lt;input-file&amp;gt; &amp;lt;property=value&amp;gt;                                            Set properties in a file or to it layers with new values&#xA;  run &amp;lt;input-file&amp;gt; &amp;lt;classes/files&amp;gt;                                                        Run operations, suggestions and/or scripts&#xA;  convert &amp;lt;input-file&amp;gt; &amp;lt;target-type/ext&amp;gt; &amp;lt;output-file&amp;gt;                                    Convert input file into a output file format by a known type or extension []&#xA;  extract &amp;lt;input-file&amp;gt; &amp;lt;output-folder&amp;gt;                                                    Extract file contents to a folder []&#xA;  copy-parameters &amp;lt;input-file&amp;gt; &amp;lt;target-files&amp;gt;                                             Copy print parameters from one file to another&#xA;  set-preview, set-thumbnail &amp;lt;input-file&amp;gt; &amp;lt;file path|layer index|:random-layer|:heatmap&amp;gt;  Sets and replace thumbnail(s) in the file [default: :heatmap]&#xA;  compare &amp;lt;input-file-a&amp;gt; &amp;lt;input-file-b&amp;gt;                                                   Compare two files and output the differences&#xA;  print-issues &amp;lt;input-file&amp;gt;                                                               Detect and print issues&#xA;  print-properties &amp;lt;input-file&amp;gt;                                                           Prints available properties&#xA;  print-gcode &amp;lt;input-file&amp;gt;                                                                Prints the gcode of the file if available&#xA;  print-machines                                                                          Prints machine settings&#xA;  print-formats                                                                           Prints the available formats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: On each command you can use -? to see specific command help and extra options&lt;/p&gt; &#xA;&lt;h2&gt;UVtools (UI) executable&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open file(s):&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools &amp;lt;file1&amp;gt; [file2] [file3] ...&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools C:\model.osla&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; UVtools C:\model.zip D:\other_model.osla&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a invalid file is pass, the program will open as default.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Redirect a command to UVtoolsCmd:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools --cmd &amp;lt;commands ...&amp;gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools --cmd convert C:\model.osla zip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; This can be used when UVtoolsCmd is not directly exposed, for example if you are running via a .AppImage.&lt;br&gt; All commands will be redirected to &lt;code&gt;UVtoolsCmd&lt;/code&gt; and the UI will not run. It still shows the terminal window.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Legacy&lt;/h3&gt; &#xA;&lt;p&gt;The following commands are the old way and commands under the UI executable, they will be removed in near future, try to not use them, please prefer &lt;strong&gt;UVtoolsCmd&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convert a file into another type(s)&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools -c/--convert &amp;lt;input_file&amp;gt; &amp;lt;output_file1_or_ext&amp;gt; [output_file2_or_ext] ...&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools -c model.zip osla&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; UVtools -c model.zip model_converted.osla&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; UVtools --convert model.zip model_converted.osla model_converted.zcode&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Nothing happen when providing wrong files, will quit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extract a file to a folder&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools -e/--extract &amp;lt;input_file&amp;gt; [output_folder]&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools -e model.zip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; UVtools -e model.zip mymodel&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; UVtools --extract model.zip .&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Nothing happen when providing wrong files/folder, will quit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Export a file to a 3D mesh&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools --export-mesh &amp;lt;input_file&amp;gt; [output_mesh_file]&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools --export-mesh model.zip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; UVtools --export-mesh model.zip model_exported.stl&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Nothing happen when providing wrong files, will quit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run a operation and save the file&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools --run-operation &amp;lt;input_file&amp;gt; &amp;lt;operation_file.uvtop&amp;gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools --run-operation model.zip MyMorph.uvtop&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Nothing happen when providing wrong files, will quit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run a script and save the file&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools --run-script &amp;lt;input_file&amp;gt; &amp;lt;script_file.cs&amp;gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools --run-script model.zip myScript.cs&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Nothing happen when providing wrong files, will quit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy print parameters from one file to another&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Syntax:&lt;/strong&gt; UVtools --copy-parameters &amp;lt;from_file&amp;gt; &amp;lt;to_file&amp;gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; UVtools --copy-parameters model.zip otherfile.zip&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Nothing happen when providing wrong files, will quit.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Windows 7 SP1 or greater &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If on Windows 10/11 N or NK: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/download/details.aspx?id=48231&#34;&gt;Media Feature Pack&lt;/a&gt; must be installed&lt;/li&gt; &#xA;     &lt;li&gt;Press Windows + R&lt;/li&gt; &#xA;     &lt;li&gt;Type: appwiz.cpl (and press Enter key)&lt;/li&gt; &#xA;     &lt;li&gt;Click on: Turn Windows features on or off&lt;/li&gt; &#xA;     &lt;li&gt;Check the &#34;Media Extensions&#34; and click Ok&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- 1. [.NET 6.0](https://dotnet.microsoft.com/download/dotnet/6.0) installed (Comes pre-installed on Windows 10 with last updates)!--&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;8GB RAM or higher + 512MB per CPU core&lt;/li&gt; &#xA; &lt;li&gt;64 bit System&lt;/li&gt; &#xA; &lt;li&gt;1920 x 1080 @ 100% scale as minimum resolution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;8GB RAM or higher + 512MB per CPU core&lt;/li&gt; &#xA; &lt;li&gt;64 bit System&lt;/li&gt; &#xA; &lt;li&gt;1920 x 1080 @ 100% scale as minimum resolution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Installing the dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Copy the following script, paste and run on a terminal:&lt;/strong&gt;&lt;br&gt; (Required if you didn&#39;t use the &lt;a href=&#34;https://github.com/sn4k3/UVtools#to-auto-install-on-linux&#34;&gt;auto installer&lt;/a&gt; or if it failed to detect and install dependencies)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ &#34;$(command -v apt-get)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo apt-get install -y curl &#xA;[ &#34;$(command -v pacman)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo pacman -S curl&#xA;[ &#34;$(command -v dnf)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo dnf install -y curl&#xA;[ &#34;$(command -v zypper)&#34; -a -z &#34;$(command -v curl)&#34; ] &amp;amp;&amp;amp; sudo zypper install -y curl&#xA;sudo bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/sn4k3/UVtools/master/Scripts/install-dependencies.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- sudo bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/sn4k3/UVtools/master/Scripts/libdl-solver.sh)&#34; !--&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run UVtools open it folder on a terminal and call one of:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Double-click &lt;code&gt;UVtools&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./UVtools&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bash UVtools.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet UVtools.dll&lt;/code&gt; [For universal package only, requires dotnet-runtime]&lt;/li&gt; &#xA; &lt;li&gt;As a practical alternative you can create a shortcut on Desktop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you downloaded the &lt;strong&gt;.AppImage&lt;/strong&gt; package variant you must set run permissions to it before attempt to run it:&lt;br&gt; &lt;img src=&#34;https://github.com/sn4k3/UVtools/raw/master/wiki/linux_AppImage_permissions.png&#34; alt=&#34;AppImage permissions&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;macOS 10.15 Catalina or higher&lt;/li&gt; &#xA; &lt;li&gt;8GB RAM or higher + 512MB per CPU core&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;For Mac M1/M2 (ARM):&lt;/strong&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Install via the &lt;a href=&#34;https://github.com/sn4k3/UVtools#to-auto-install-on-macos-homebrew&#34;&gt;auto installer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To run UVtools open it folder on a terminal and call one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Double-click &lt;code&gt;UVtools&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./UVtools.app/Contents/MacOS/UVtools&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bash UVtools.app/Contents/MacOS/UVtools.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;As a practical alternative you can create a shortcut on Desktop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;p&gt;There are multiple ways to open your file in UVtools:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open UVtools and load your file (CTRL + O) (File -&amp;gt; Open)&lt;/li&gt; &#xA; &lt;li&gt;Open UVtools and drag and drop your file inside window&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop file into UVtools.exe&lt;/li&gt; &#xA; &lt;li&gt;Set UVtools the default program to open your files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Library -&amp;gt; Developers&lt;/h1&gt; &#xA;&lt;p&gt;Are you a developer? This project include a .NET 6.0 library (UVtools.Core) that can be referenced in your application to make use of my work. Easy to use calls that allow you work with the formats. For more information navigate main code to see some calls.&lt;/p&gt; &#xA;&lt;p&gt;Nuget package: &lt;a href=&#34;https://www.nuget.org/packages/UVtools.Core&#34;&gt;https://www.nuget.org/packages/UVtools.Core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/UVtools.Core&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/UVtools.Core?style=for-the-badge&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet add package UVtools.Core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scripting:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/tree/master/Scripts/UVtools.Powershell&#34;&gt;Powershell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/tree/master/Scripts/UVtools.Python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Develop and build from Source&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/tree/master/build&#34;&gt;Build directions&lt;/a&gt;&lt;br&gt; The fastest way to compile the project is by run the &lt;code&gt;build/compile.bat&lt;/code&gt;, however if you wish to develop with visual studio follow the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio and include .NET development support&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET 6.0 SDK&lt;/a&gt; if not included on previous installation&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=AvaloniaTeam.AvaloniaVS&#34;&gt;Avalonia for Visual Studio&lt;/a&gt;:&lt;/li&gt; &#xA; &lt;li&gt;Install the Wix Toolset: (Required only for MSI build, &lt;strong&gt;optional&lt;/strong&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;dotnet tool install --global wix&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.firegiant.com/wix/heatwave&#34;&gt;Visual Studio HeatWave extension&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open UVtools.sln&lt;/li&gt; &#xA; &lt;li&gt;Build&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More file formats&lt;/li&gt; &#xA; &lt;li&gt;Clean up &amp;amp; performance (always)&lt;/li&gt; &#xA; &lt;li&gt;See features request under GitHub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Support my work / Donate&lt;/h1&gt; &#xA;&lt;p&gt;All my work here is given for free (OpenSource), it took some hours to build, test and polish the program. If you&#39;re happy to contribute for a better program and for my work i will appreciate the tip.&lt;br&gt; Use one of the following methods:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/sn4k3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Sponsor-red?style=for-the-badge&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/SkillTournament&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue?style=for-the-badge&#34; alt=&#34;Donate PayPal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sn4k3/UVtools/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/sn4k3/UVtools?style=for-the-badge&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/sn4k3/UVtools/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=sn4k3/UVtools&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>