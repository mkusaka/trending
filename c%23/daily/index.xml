<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-10T01:25:35Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XuanchenLin/NanUI</title>
    <updated>2023-10-10T01:25:35Z</updated>
    <id>tag:github.com,2023-10-10:/XuanchenLin/NanUI</id>
    <link href="https://github.com/XuanchenLin/NanUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NanUI is an open source .NET project for .NET developers who want to create desktop applications with HTML, CSS and JavaScript.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/XuanchenLin/NanUI/master/artworks/WinFormiumLogo.png&#34; width=&#34;144&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;The WinFormium Project&lt;br&gt;(A.K.A. NanUI)&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;Easily buid powerful WinForm applications with HTML, CSS and JavaScript.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WinFormium&lt;/h1&gt; &#xA;&lt;p&gt;ÁÇπÂáª&lt;a href=&#34;https://gitee.com/dotNetChina/NanUI/&#34;&gt;[Ê≠§Â§Ñ]&lt;/a&gt;ÂàáÊç¢Âà∞&lt;strong&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/strong&gt;‰ªìÂ∫ìÈ¶ñÈ°µ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/XuanchenLin/WinFormium&#34; alt=&#34;GitHub&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/v/NetDimension.NanUI&#34; alt=&#34;Nuget&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/NetDimension.NanUI&#34; alt=&#34;Nuget&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;NanUI has always been in the testing stage. After 9 years, it is time to release the official v1.0 version of NanUI! When version 1.0 is released, the new name of the project will be officially launched - &lt;strong&gt;WinFormium&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê About&lt;/h2&gt; &#xA;&lt;p&gt;WinFormium is a open source framework on .NET platform for creating user interface of WinForm Applicaitons using HTML5, CSS3, and JavaScript. It is based on the &lt;a href=&#34;https://bitbucket.org/xilium/xilium.cefglue/wiki/Home&#34;&gt;Xilium.CefGlue&lt;/a&gt; project, which is a .NET wrapper around the &lt;a href=&#34;https://bitbucket.org/chromiumembedded/cef&#34;&gt;Chromium Embedded Framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are looking for a framework for creating a WinForm application with a modern user interface, WinFormium is a good choice. you can use HTML, CSS, and JavaScript to create a user interface, and use C# to write the business logic of the application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please give WinFormium project a star‚≠ê if you like it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If this project helps, please consider funding it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/mrjson?country.x=C2&amp;amp;locale.x=zh_XC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Development&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET Framework 4.6.2 or higher / .NET 6.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2019 or higher (VS2022 is recommended)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Deployment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Windows 7 Service Pack 1 or higher&lt;/li&gt; &#xA; &lt;li&gt;.Net Framework 4.6.2 or higher&lt;/li&gt; &#xA; &lt;li&gt;.NET 6.0 for Windows 7 and higher.&lt;/li&gt; &#xA; &lt;li&gt;.NET 7.0/8.0 for Windows 10 and higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;Windows Only&lt;/strong&gt; framework, it can not run on Linux or Mac OS.&lt;/p&gt; &#xA;&lt;p&gt;The minimum supported Windows is Windows 7 Service Pack 1, and some features (such as DirectComposition Offscreen Rendering) are not supported on Windows 7.&lt;/p&gt; &#xA;&lt;h2&gt;üß∞ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Create a simple WinFormium Application by following the steps below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Create a WinForm Application by default template.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Install WinFormium NuGet Package&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open the NuGet Package Manager to install or use NuGet Package Manager Console, and run the following command to install WinFormium nuget package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PM&amp;gt; Install-Package NetDimension.NanUI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies of Chromium Embedded Framework that WinFormium depends on:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PM&amp;gt; Install-Package NetDimension.NanUI.Runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. A basic WinFormium application requires the following code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Modify the code in the &lt;strong&gt;Program.cs&lt;/strong&gt; file as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using WinFormium;&#xA;&#xA;class Program&#xA;{&#xA;    [STAThread]&#xA;    static void Main(string[] args)&#xA;    {&#xA;        var builder = WinFormiumApp.CreateBuilder();&#xA;&#xA;        builder.UseWinFormiumApp&amp;lt;MyApp&amp;gt;();&#xA;&#xA;        var app = builder.Build();&#xA;&#xA;        app.Run();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a class implements &lt;strong&gt;WinFormiumStartup&lt;/strong&gt; for configuring the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using WinFormium;&#xA;&#xA;class MyAPP : WinFormiumStartup&#xA;{&#xA;    protected override MainWindowCreationAction? UseMainWindow(MainWindowOptions opts)&#xA;    {&#xA;        // Configure the main window of this application&#xA;        return opts.UseMainFormium&amp;lt;MyWindow&amp;gt;();&#xA;    }&#xA;&#xA;    protected override void WinFormiumMain(string[] args)&#xA;    {&#xA;        // The codes in Main function should be here, this function only runs in Main process. So it can prevent the codes in Main process running in sub-processes.&#xA;        ApplicationConfiguration.Initialize();&#xA;    }&#xA;&#xA;    protected override void ConfigurationChromiumEmbedded(ChromiumEnvironmentBuiler cef)&#xA;    {&#xA;        // Configure the Chromium Embedded Framework here&#xA;    }&#xA;&#xA;    protected override void ConfigureServices(IServiceCollection services)&#xA;    {&#xA;        // Configure the services of this application here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a class implements &lt;strong&gt;Formium&lt;/strong&gt; for configuring the main window of the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using WinFormium;&#xA;using WinFormium.Forms;&#xA;&#xA;class MyWindow : Formium&#xA;{&#xA;    public MyWindow()&#xA;    {&#xA;        Url = &#34;https://www.google.com&#34;;&#xA;    }&#xA;&#xA;    protected override FormStyle ConfigureWindowStyle(WindowStyleBuilder builder)&#xA;    {&#xA;        // Configure the style of the window here or leave it blank to use the default style&#xA;&#xA;        var style = builder.UseSystemForm();&#xA;&#xA;        style.TitleBar = false;&#xA;&#xA;        style.DefaultAppTitle = &#34;My first WinFomrim app&#34;;&#xA;&#xA;        return style;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Build and run your WinFormium application&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For more info please see - &lt;a href=&#34;https://raw.githubusercontent.com/XuanchenLin/NanUI/master/docs/README.md&#34;&gt;Documentation&lt;/a&gt; or &lt;a href=&#34;https://github.com/XuanchenLin/WinFormium/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñ Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XuanchenLin/NanUI/master/examples/MinimalWinFormiumApp&#34;&gt;Minimal WinFormium App&lt;/a&gt; - Introduction to the basic usage of WinFormium.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîó Third-Party References &amp;amp; Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CEF - &lt;a href=&#34;&#34;&gt;https://bitbucket.org/chromiumembedded/cef&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xilium.CefGlue - &lt;a href=&#34;&#34;&gt;https://gitlab.com/xiliumhq/chromiumembedded/cefglue/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vanara.Library - &lt;a href=&#34;&#34;&gt;https://github.com/dahall/Vanara/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vortice.Windows - &lt;a href=&#34;&#34;&gt;https://github.com/amerkoleci/Vortice.Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SkiaSharp - &lt;a href=&#34;&#34;&gt;https://github.com/mono/SkiaSharp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React - &lt;a href=&#34;&#34;&gt;https://github.com/facebook/react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React-Router - &lt;a href=&#34;&#34;&gt;https://github.com/remix-run/react-router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vite - &lt;a href=&#34;&#34;&gt;https://github.com/vitejs/vite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèÜ Inspirations&lt;/h2&gt; &#xA;&lt;p&gt;I was inspired by the following songs and albums when creating this version of WinFormium.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strandels&lt;/strong&gt; - Chance Of Rain&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One Direction&lt;/strong&gt; - What a Feeling (Made In The A.M.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thomas Rhett&lt;/strong&gt; - VHS (Center Point Road)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sammy Kershaw&lt;/strong&gt; - She Don&#39;t Know She&#39;s Beautiful (Haunted Heart)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chrissy Steele&lt;/strong&gt; - Two Bodies (Magnet To Steele)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Halestorm&lt;/strong&gt; - I Like It Heavy (Into the Wild Life)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Joan Jett &amp;amp; The Blackhearts&lt;/strong&gt; - I Hate Myself for Loving You (Up Your Alley)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/typechat.net</title>
    <updated>2023-10-10T01:25:35Z</updated>
    <id>tag:github.com,2023-10-10:/microsoft/typechat.net</id>
    <link href="https://github.com/microsoft/typechat.net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TypeChat.NET&lt;/h1&gt; &#xA;&lt;p&gt;TypeChat.NET is an &lt;strong&gt;experimental project&lt;/strong&gt; from the &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Microsoft Semantic Kernel&lt;/a&gt; team. TypeChat.NET brings the ideas of &lt;a href=&#34;https://github.com/microsoft/TypeChat&#34;&gt;TypeChat&lt;/a&gt; to .NET.&lt;/p&gt; &#xA;&lt;p&gt;TypeChat.NET provides &lt;strong&gt;cross platform&lt;/strong&gt; libraries that help you build natural language interfaces with language models using strong types, type validation and simple type safe programs (plans). Strong typing may help make software that uses language models more deterministic and reliable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Translates user intent into strongly typed Calendar Actions&#xA;var model = new LanguageModel(Config.LoadOpenAI());&#xA;var translator = new JsonTranslator&amp;lt;CalendarActions&amp;gt;(model);&#xA;&#xA;// Translate natural language request &#xA;CalendarActions actions = await translator.TranslateAsync(requestText);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TypeChat.NET is in &lt;strong&gt;active development&lt;/strong&gt; with frequent updates. The framework will evolve as the team explores the space and incorporates feedback. Supported scenarios are shown in the included &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples&#34;&gt;Examples&lt;/a&gt;. Documentation will also continue to improve. When in doubt, please look at the code.&lt;/p&gt; &#xA;&lt;h1&gt;Assemblies&lt;/h1&gt; &#xA;&lt;p&gt;TypeChat.NET currently consists of the following assemblies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Microsoft.TypeChat&lt;/strong&gt;: Classes that translate user intent into strongly typed and validated objects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Microsoft.TypeChat.Program&lt;/strong&gt;: Classes to synthesize, validate and run &lt;em&gt;&lt;strong&gt;JSON programs&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Microsoft.TypeChat.SemanticKernel&lt;/strong&gt;: Integration with Microsoft Semantic Kernel for language models, plugins and embeddings.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Microsoft.TypeChat&lt;/h2&gt; &#xA;&lt;p&gt;TypeChat uses language models to translate user intent into JSON that conforms to a schema. This JSON is then validated and deserialized into a typed object. Additional constraint checking is applied as needed. Validation errors are sent back to the language model, which uses them to &lt;strong&gt;repair&lt;/strong&gt; the Json it originally returned.&lt;/p&gt; &#xA;&lt;p&gt;TypeChat provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Json translation, validation, repair and deserialization.&lt;/li&gt; &#xA; &lt;li&gt;Extensibility: interfaces for customizing schemas, validators and prompts.&lt;/li&gt; &#xA; &lt;li&gt;Schema export: classes to generate schema for the .NET Type you want to translate to. Exported schema includes dependencies and base classes. The exported schema is specified using &lt;strong&gt;Typescript&lt;/strong&gt;, which can concisely express schema for JSON objects. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for common scenarios shown in TypeChat examples. When you encounter limitations (such as how generics are currently exported), you can supply schema text, such as Typescript authored by hand.&lt;/li&gt; &#xA;   &lt;li&gt;Helper attributes for Vocabularies and Comments. Vocabularies are string tables that constrain the values that can be assigned to string properties. Dynamic loading of vocabularies enables scenarios where they vary at runtime.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Like TypeChat, TypeChat.NET has only been tested with schema specified in Typescript.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Comment(&#34;Milks currently in stock&#34;)]&#xA;public class Milks&#xA;{&#xA;    [JsonVocab(&#34;whole milk | two percent milk | nonfat milk | soy milk | almond milk&#34;)]&#xA;    public string Name { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Microsoft.TypeChat.Program&lt;/h2&gt; &#xA;&lt;p&gt;TypeChat.Program translates natural language requests into simple programs (&lt;em&gt;&lt;strong&gt;Plans&lt;/strong&gt;&lt;/em&gt;), represented as JSON.&lt;/p&gt; &#xA;&lt;p&gt;JSON programs can be thought of as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt; or &lt;a href=&#34;https://learn.microsoft.com/en-us/semantic-kernel/ai-orchestration/planners/?tabs=Csharp&#34;&gt;Plan&lt;/a&gt;, expressed in JSON, with an associated &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/src/typechat.program/ProgramSchema.ts&#34;&gt;&lt;strong&gt;grammar&lt;/strong&gt;&lt;/a&gt; that is enforced. JSON programs can be type checked against the APIs they target. They can be then be run using an interpreter, or compiled into .NET code. Both mechanisms enforce type safety.&lt;/p&gt; &#xA;&lt;p&gt;TypeChat.Program includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Program Translator: translates user intent into programs that follow the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/src/typechat.program/ProgramSchema.ts&#34;&gt;Program Grammar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Program Interpreter: runs programs generated by ProgramTranslator using an interpreter.&lt;/li&gt; &#xA; &lt;li&gt;Program Compiler: uses the dynamic language runtime (DLR) to compile programs/plans with type checking. Compilation diagnostics are used to repair programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Translates user intent into typed Programs that call methods on a Math API&#xA;var model = new LanguageModel(Config.LoadOpenAI());&#xA;var api = new MathAPI();&#xA;var translator = new ProgramTranslator&amp;lt;IMathAPI&amp;gt;(model, api);&#xA;&#xA;// Translate natural language request&#xA;Program program = await translator.TranslateAsync(requestText);&#xA;// Run the program&#xA;program.Run(api);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Microsoft.TypeChat.SemanticKernel&lt;/h2&gt; &#xA;&lt;p&gt;TypeChat.SemanticKernel provides default bindings for language models, plugins and embeddings to Typechat.NET and TypeChat.NET examples.&lt;/p&gt; &#xA;&lt;p&gt;TypeChat.SemanticKernel include classes for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Json Programs for Plugins&lt;/strong&gt;: turn registered plugins into &lt;strong&gt;APIs&lt;/strong&gt; that Json programs can target. See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/Plugins/Program.cs&#34;&gt;Plugins Example&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Language model and embeddings access: all TypeChat examples use the Semantic Kernel to call models and generate embeddings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisite: OpenAI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI Language Models&lt;/strong&gt;: TypeChat.NET and its examples currently require familiarity with and access to language models from OpenAI.&lt;/li&gt; &#xA; &lt;li&gt;TypeChat.NET has been tested with and supports the following models: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gpt-35-turbo&lt;/li&gt; &#xA;   &lt;li&gt;gpt-4&lt;/li&gt; &#xA;   &lt;li&gt;ada-002&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Some examples and scenarios will work best with gpt-4&lt;/li&gt; &#xA; &lt;li&gt;Since TypeChat.NET uses the Semantic Kernel, models from other providers &lt;em&gt;&lt;strong&gt;may&lt;/strong&gt;&lt;/em&gt; be used for experimentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Load &lt;strong&gt;typechat.sln&lt;/strong&gt; from the root directory.&lt;/li&gt; &#xA;   &lt;li&gt;Restore packages&lt;/li&gt; &#xA;   &lt;li&gt;Build&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;dotnet build &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Launch a command prompt / terminal&lt;/li&gt; &#xA;   &lt;li&gt;Go to the root directory of the project&lt;/li&gt; &#xA;   &lt;li&gt;dotnet build Typechat.sln&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nuget Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft.Typechat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Microsoft.TypeChat&#xA;dotnet add package Microsoft.TypeChat.SemanticKernel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please ensure that you have installed both packages above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft.TypeChat.Program&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Microsoft.TypeChat.Program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To see TypeChat.NET in action, explore the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples&#34;&gt;Example projects&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/typechat.examplesLib&#34;&gt;TypeChat.Examples Library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each example includes an &lt;strong&gt;input.txt&lt;/strong&gt; with sample input. Pass the input file as an argument to run the example in &lt;strong&gt;batch mode&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The sections below describe which examples will best introduce which concept. Some examples or scenarios may work &lt;em&gt;&lt;strong&gt;best with gpt-4&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/Sentiment/Program.cs&#34;&gt;Sentiment&lt;/a&gt; example is TypeChat&#39;s Hello World and a minimal introduction to JsonTranslator.&lt;/p&gt; &#xA;&lt;h3&gt;JsonTranslator&lt;/h3&gt; &#xA;&lt;p&gt;The following examples demonstrate how to use JsonTranslator, Schemas and Vocabularies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/CoffeeShop&#34;&gt;CoffeeShop&lt;/a&gt;: Natural language ordering at a coffee shop. Demonstrates a complex schema with polymorphic deserialzation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/Calendar&#34;&gt;Calendar&lt;/a&gt;: Transform language into calendar actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/Restaurant&#34;&gt;Restaurant&lt;/a&gt;: Order processing at a pizza restaurant&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hierarchical schemas&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/MultiSchema&#34;&gt;MultiSchema&lt;/a&gt;: dynamically route user intent to other &#39;sub-apps&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/SchemaHierarchy&#34;&gt;SchemaHierarchy&lt;/a&gt;: A Json Translator than uses multiple child JsonTranslators. For each user request, it picks the semantically &lt;em&gt;&lt;strong&gt;nearest&lt;/strong&gt;&lt;/em&gt; child translator and routes the input to it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/typechat.examplesLib/Classification&#34;&gt;TextClassification&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/typechat.examplesLib/VectorTextIndex.cs&#34;&gt;VectorTextIndex&lt;/a&gt; show how to build a simple classifiers to route input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Json Programs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/Math&#34;&gt;Math&lt;/a&gt;: How to turn user requests into simple calculator programs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/Plugins&#34;&gt;Plugins&lt;/a&gt;: How to translate user intent into programs programs that call Semantic Kernel Plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interactive agents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/HealthData&#34;&gt;HealthData&lt;/a&gt;: how to use an interactive bot to collect a user&#39;s health information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/typechat.examplesLib/Dialog&#34;&gt;Agent Classes&lt;/a&gt; for working with interactive agents that have history. These classes emonstrate how TypeChat.NET may be used for strongly typed interactions with message passing agents or bots. These agents can include features such as built in interaction history.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Api Key and Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To use TypeChat.net or run the examples, you need an &lt;strong&gt;API key&lt;/strong&gt; for an OpenAI service. Azure OpenAI and the OpenAI service are both supported.&lt;/p&gt; &#xA;&lt;h3&gt;Configure Api Key for examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples&#34;&gt;examples&lt;/a&gt;&lt;/strong&gt; folder in the solution&lt;/li&gt; &#xA; &lt;li&gt;Make a copy of the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/examples/appSettings.json&#34;&gt;appSettings.json&lt;/a&gt; file and name it &lt;strong&gt;appSettings.Development.json&lt;/strong&gt;. Ensure it is in the same folder as appSettings.json&lt;/li&gt; &#xA; &lt;li&gt;appSettings.Development.json is a local development only override of the settings in appSettings.json and is &lt;strong&gt;never&lt;/strong&gt; checked in.&lt;/li&gt; &#xA; &lt;li&gt;Add your Api Key to &lt;strong&gt;appSettings.Development.json&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A typical appSettings.Development.json will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// For Azure OpenAI service&#xA;{&#xA;  &#34;OpenAI&#34;: {&#xA;    &#34;Azure&#34;: true,&#xA;    &#34;ApiKey&#34;: &#34;YOUR API KEY&#34;,&#xA;    &#34;Endpoint&#34;: &#34;https://YOUR_RESOURCE_NAME.openai.azure.com&#34;,&#xA;    &#34;Model&#34;: &#34;gpt-35-turbo&#34;  // Name of Azure deployment&#xA;  }&#xA;}&#xA;&#xA;// For OpenAI Service:&#xA;{&#xA;  &#34;OpenAI&#34;: {&#xA;    &#34;Azure&#34;: false,&#xA;    &#34;ApiKey&#34;: &#34;YOUR API KEY&#34;,&#xA;    &#34;Endpoint&#34;: &#34;https://api.openai.com/v1/chat/completions&#34;,&#xA;    &#34;Model&#34;: &#34;gpt-3.5-turbo&#34;  // Name of OpenAI model&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OpenAIConfig&lt;/h3&gt; &#xA;&lt;p&gt;TypeChat examples accesses language models using the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/src/typechat.sk/LanguageModel.cs&#34;&gt;LanguageModel&lt;/a&gt; class. The OpenAIConfig class supplies configuration for LanguageModel. You initialize OpenAIConfig from your application&#39;s configuration, from a Json file or from environment variables.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/src/typechat.sk/OpenAIConfig.cs&#34;&gt;OpenAIConfig.cs&lt;/a&gt; for a list of :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configurable properties&lt;/li&gt; &#xA; &lt;li&gt;Supported environment variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Your configuration &#xA;OpenAIConfig config = Config.LoadOpenAI();&#xA;// Or Json file&#xA;OpenAIConfig config = OpenAIConfig.LoadFromJsonFile(...);&#xA;// Or from config&#xA;config = OpenAIConfig.FromEnvironment();&#xA;&#xA;var model = new LanguageModel(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Semantic Kernel directly&lt;/h2&gt; &#xA;&lt;p&gt;You can also initialize LanguageModel using an IKernel object you created using a KernelBuilder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;const string modelName = &#34;gpt-35-turbo&#34;;&#xA;new LanguageModel(_kernel.GetService&amp;lt;IChatCompletion&amp;gt;(modelName), modelName);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using your own client&lt;/h2&gt; &#xA;&lt;p&gt;TypeChat accesses language models using the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/src/typechat/ILanguageModel.cs&#34;&gt;ILanguageModel&lt;/a&gt; interface. &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/src/typechat.sk/LanguageModel.cs&#34;&gt;LanguageModel&lt;/a&gt; implements ILanguageModel.&lt;/p&gt; &#xA;&lt;p&gt;You can use your own model client by implementing ILanguageModel.&lt;/p&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/typechat.net/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;h1&gt;Trademarks&lt;/h1&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bepu/bepuphysics2</title>
    <updated>2023-10-10T01:25:35Z</updated>
    <id>tag:github.com,2023-10-10:/bepu/bepuphysics2</id>
    <link href="https://github.com/bepu/bepuphysics2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure C# 3D real time physics simulation library, now with a higher version number.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bepuphysics v2&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=sfgC_eNx9M8&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/images/youtubeLink.png&#34; width=&#34;375&#34; height=&#34;211&#34; border=&#34;0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=tjtwSq3u6Dg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/images/youtubeLink24.png&#34; width=&#34;375&#34; height=&#34;211&#34; border=&#34;0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the repo for the bepuphysics v2 library, a complete rewrite of the C# 3d rigid body physics engine &lt;a href=&#34;https://github.com/bepu/bepuphysics1&#34;&gt;BEPUphysics v1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The BepuPhysics and BepuUtilities libraries target .NET 6 and should work on any supported platform. The demos application, Demos.sln, uses DX11 by default. There is also a Demos.GL.sln that uses OpenGL and should run on other platforms. The demos can be run from the command line (in the repo root directory) with &lt;code&gt;dotnet run --project Demos/Demos.csproj -c Release&lt;/code&gt; or &lt;code&gt;dotnet run --project Demos.GL/Demos.csproj -c Release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The physics engine heavily uses &lt;code&gt;System.Numerics.Vectors&lt;/code&gt; types, so to get good performance, you&#39;ll need a compiler which can consume those types (like RyuJIT).&lt;/p&gt; &#xA;&lt;p&gt;To build the source, you&#39;ll need a recent version of Visual Studio with the .NET desktop development workload installed. Demos.sln references all relevant projects. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/Building.md&#34;&gt;Building&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spheres, capsules, boxes, triangles, cylinders, and convex hulls&lt;/li&gt; &#xA; &lt;li&gt;Compounds of the above&lt;/li&gt; &#xA; &lt;li&gt;Meshes&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/BepuPhysics/Constraints/&#34;&gt;whole bunch of constraint types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Demos/Demos/NewtDemo.cs&#34;&gt;Newts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linear and angular continuous collision detection&lt;/li&gt; &#xA; &lt;li&gt;Extremely low cost sleep states for resting bodies&lt;/li&gt; &#xA; &lt;li&gt;Efficient scene-wide ray and sweep queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Demos/Demos/Characters/CharacterDemo.cs&#34;&gt;Character controller example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;At least somewhat extensible collision pipeline, with &lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Demos/Demos/CustomVoxelCollidableDemo.cs&#34;&gt;example custom voxel collidable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Highly nonidiomatic APIs&lt;/li&gt; &#xA; &lt;li&gt;Super speediness&lt;/li&gt; &#xA; &lt;li&gt;And a bunch of other miscellaneous stuff!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;Report bugs &lt;a href=&#34;https://raw.githubusercontent.com/bepu/issues&#34;&gt;on the issues tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://raw.githubusercontent.com/bepu/discussions&#34;&gt;discussions tab&lt;/a&gt; for... discussions. And questions.&lt;/p&gt; &#xA;&lt;p&gt;By user request, there&#39;s a &lt;a href=&#34;https://discord.gg/ssa2XpY&#34;&gt;discord server&lt;/a&gt;. I&#39;ll be focusing on github for long-form content, but if you like discord, now you can discord.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/GettingStarted.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/Building.md&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/QuestionsAndAnswers.md&#34;&gt;Q&amp;amp;A&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/StabilityTips.md&#34;&gt;Stability Tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/PerformanceTips.md&#34;&gt;Performance Tips&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/Substepping.md&#34;&gt;Substepping&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/ContinuousCollisionDetection.md&#34;&gt;Continuous Collision Detection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/changelog.md&#34;&gt;Change log&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/UpgradingFromV1.md&#34;&gt;Upgrading from v1, concept mapping&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/PackagingAndVersioning.md&#34;&gt;Packaging and Versioning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/bepu/bepuphysics2/master/Documentation/roadmap.md&#34;&gt;roadmap&lt;/a&gt; for a high level look at where things are going.&lt;/p&gt; &#xA;&lt;p&gt;If you have too many dollars, we are willing to consume them through &lt;a href=&#34;https://www.github.com/sponsors/RossNordby&#34;&gt;github sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bepu/bepuphysics1/master/Documentation/images/readme/angelduck.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>