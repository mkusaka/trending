<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-29T01:32:08Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Fody/MethodTimer</title>
    <updated>2023-01-29T01:32:08Z</updated>
    <id>tag:github.com,2023-01-29:/Fody/MethodTimer</id>
    <link href="https://github.com/Fody/MethodTimer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Injects some very basic method timing code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fody/MethodTimer/master/package_icon.png&#34; height=&#34;30px&#34;&gt; MethodTimer.Fody&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/Fody/Fody&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/fody/fody.svg?sanitize=true&#34; alt=&#34;Chat on Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/MethodTimer.Fody/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/MethodTimer.Fody.svg?sanitize=true&#34; alt=&#34;NuGet Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Injects some very basic method timing code.&lt;/p&gt; &#xA;&lt;h3&gt;This is an add-in for &lt;a href=&#34;https://github.com/Fody/Home/&#34;&gt;Fody&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is expected that all developers using Fody &lt;a href=&#34;https://opencollective.com/fody/contribute/patron-3059&#34;&gt;become a Patron on OpenCollective&lt;/a&gt;. &lt;a href=&#34;https://github.com/Fody/Home/raw/master/pages/licensing-patron-faq.md&#34;&gt;See Licensing/Patron FAQ&lt;/a&gt; for more information.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/Fody/Home/raw/master/pages/usage.md&#34;&gt;Fody usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;NuGet installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://nuget.org/packages/MethodTimer.Fody/&#34;&gt;MethodTimer.Fody NuGet package&lt;/a&gt; and update the &lt;a href=&#34;https://nuget.org/packages/Fody/&#34;&gt;Fody NuGet package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PM&amp;gt; Install-Package Fody&#xA;PM&amp;gt; Install-Package MethodTimer.Fody&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Install-Package Fody&lt;/code&gt; is required since NuGet always defaults to the oldest, and most buggy, version of any dependency.&lt;/p&gt; &#xA;&lt;h3&gt;Add to FodyWeavers.xml&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;&amp;lt;MethodTimer/&amp;gt;&lt;/code&gt; to &lt;a href=&#34;https://github.com/Fody/Home/raw/master/pages/usage.md#add-fodyweaversxml&#34;&gt;FodyWeavers.xml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Weavers&amp;gt;&#xA;  &amp;lt;MethodTimer/&amp;gt;&#xA;&amp;lt;/Weavers&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Your Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass&#xA;{&#xA;    [Time]&#xA;    public void MyMethod()&#xA;    {&#xA;        //Some code u are curious how long it takes&#xA;        Console.WriteLine(&#34;Hello&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What gets compiled without an Interceptor&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass&#xA;{&#xA;    public void MyMethod()&#xA;    {&#xA;        var stopwatch = Stopwatch.StartNew();&#xA;        try&#xA;        {&#xA;            //Some code u are curious how long it takes&#xA;            Console.WriteLine(&#34;Hello&#34;);&#xA;        }&#xA;        finally&#xA;        {&#xA;            stopwatch.Stop();&#xA;            Trace.WriteLine(&#34;MyClass.MyMethod &#34; + stopwatch.ElapsedMilliseconds + &#34;ms&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What gets compiled with an Interceptor&lt;/h3&gt; &#xA;&lt;p&gt;If you want to handle the logging you can define a static class to intercept the logging.&lt;/p&gt; &#xA;&lt;p&gt;The interceptor takes one of the two following forms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when both methods are available, the intercepter will prefer the &lt;code&gt;TimeSpan&lt;/code&gt; overload.&lt;/p&gt; &#xA;&lt;h4&gt;Interceptor with elapsed duration as long (milliseconds)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class MethodTimeLogger&#xA;{&#xA;    public static void Log(MethodBase methodBase, long milliseconds, string message)&#xA;    {&#xA;        //Do some logging here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then this will be compiled&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass&#xA;{&#xA;    public void MyMethod()&#xA;    {&#xA;        var stopwatch = Stopwatch.StartNew();&#xA;        try&#xA;        {&#xA;            //Some code u are curious how long it takes&#xA;            Console.WriteLine(&#34;Hello&#34;);&#xA;        }&#xA;        finally&#xA;        {&#xA;            stopwatch.Stop();&#xA;            MethodTimeLogger.Log(methodof(MyClass.MyMethod), stopwatch.ElapsedMilliseconds);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Interceptor with elapsed duration as TimeSpan&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static class MethodTimeLogger&#xA;{&#xA;    public static void Log(MethodBase methodBase, TimeSpan elapsed, string message)&#xA;    {&#xA;        //Do some logging here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then this will be compiled&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass&#xA;{&#xA;    public void MyMethod()&#xA;    {&#xA;        var stopwatch = Stopwatch.StartNew();&#xA;        try&#xA;        {&#xA;            //Some code u are curious how long it takes&#xA;            Console.WriteLine(&#34;Hello&#34;);&#xA;        }&#xA;        finally&#xA;        {&#xA;            stopwatch.Stop();&#xA;            MethodTimeLogger.Log(methodof(MyClass.MyMethod), stopwatch.Elapsed);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using parameters inside the logging&lt;/h3&gt; &#xA;&lt;p&gt;If you want to get the parameter values inside the logging, you can use a string format in the attribute definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass&#xA;{&#xA;    [Time(&#34;File name: &#39;{fileName}&#39;&#34;)]&#xA;    public void MyMethod(string fileName)&#xA;    {&#xA;        //Some code u are curious how long it takes&#xA;        Console.WriteLine(&#34;Hello&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then this will be compiled&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyClass&#xA;{&#xA;    public void MyMethod(string fileName)&#xA;    {&#xA;        var stopwatch = Stopwatch.StartNew();&#xA;        try&#xA;        {&#xA;            //Some code u are curious how long it takes&#xA;            Console.WriteLine(&#34;Hello&#34;);&#xA;        }&#xA;        finally&#xA;        {&#xA;            stopwatch.Stop();&#xA;            var message = string.Format(&#34;File name: &#39;{0}&#39;&#34;, fileName);&#xA;            MethodTimeLogger.Log(methodof(MyClass.MyMethod), stopwatch.ElapsedMilliseconds, message);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following values are allowed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any parameter name (e.g. &lt;code&gt;{fileName}&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{this}&lt;/code&gt; (calls &lt;code&gt;ToString()&lt;/code&gt; on the instance itself) - Note that this is not available on static methods, the weaver will throw an error if being used in a static method&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; sub-properties are not (yet?) supported. &lt;a href=&#34;https://opencollective.com/fody&#34;&gt;Support Fody on OpenCollective&lt;/a&gt; and this might be implemented!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; this feature requires an updated Log method call with the definition below. If this method (with the &lt;em&gt;message&lt;/em&gt; parameter) is not found, the weaver will raise an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;public static void Log(MethodBase methodBase, long milliseconds, string message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Whats in the NuGet&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the actual weaving assembly the NuGet package will also add a file &lt;code&gt;TimeAttribute.cs&lt;/code&gt; to the target project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Constructor,AllowMultiple = false)]&#xA;class TimeAttribute : Attribute&#xA;{&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At compile time this attribute and all usages to it will be removed from the target assembly. If you want to re-use the class in a common assembly change the class from &lt;code&gt;internal&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt;. This will result in the class not being removed at compile time.&lt;/p&gt; &#xA;&lt;h2&gt;Icon&lt;/h2&gt; &#xA;&lt;p&gt;Icon courtesy of &lt;a href=&#34;https://thenounproject.com&#34;&gt;The Noun Project&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kwsch/SysBot.NET</title>
    <updated>2023-01-29T01:32:08Z</updated>
    <id>tag:github.com,2023-01-29:/kwsch/SysBot.NET</id>
    <link href="https://github.com/kwsch/SysBot.NET" rel="alternate"></link>
    <summary type="html">&lt;p&gt;sys-botbase client for remote control automation of Nintendo Switch consoles.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SysBot.NET&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPLv3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support Discord:&lt;/h2&gt; &#xA;&lt;p&gt;For support on setting up your own instance of SysBot.NET, feel free to join the discord! (Beware of un-official discords who claim to be official)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/tDMvSRv&#34;&gt;&lt;img src=&#34;https://canary.discordapp.com/api/guilds/401014193211441153/widget.png?style=banner2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/olliz0r/sys-botbase&#34;&gt;sys-botbase&lt;/a&gt; client for remote control automation of Nintendo Switch consoles.&lt;/p&gt; &#xA;&lt;h2&gt;SysBot.Base:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Base logic library to be built upon in game-specific projects.&lt;/li&gt; &#xA; &lt;li&gt;Contains a synchronous and asynchronous Bot connection class to interact with sys-botbase.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SysBot.Tests:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unit Tests for ensuring logic behaves as intended :)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example Implementations&lt;/h1&gt; &#xA;&lt;p&gt;The driving force to develop this project is automated bots for Nintendo Switch Pokémon games. An example implementation is provided in this repo to demonstrate interesting tasks this framework is capable of performing. Refer to the &lt;a href=&#34;https://github.com/kwsch/SysBot.NET/wiki&#34;&gt;Wiki&lt;/a&gt; for more details on the supported Pokémon features.&lt;/p&gt; &#xA;&lt;h2&gt;SysBot.Pokemon:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Class library using SysBot.Base to contain logic related to creating &amp;amp; running Sword/Shield bots.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SysBot.Pokemon.WinForms:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple GUI Launcher for adding, starting, and stopping Pokémon bots (as described above).&lt;/li&gt; &#xA; &lt;li&gt;Configuration of program settings is performed in-app and is saved as a local json file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SysBot.Pokemon.Discord:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord interface for remotely interacting with the WinForms GUI.&lt;/li&gt; &#xA; &lt;li&gt;Provide a discord login token and the Roles that are allowed to interact with your bots.&lt;/li&gt; &#xA; &lt;li&gt;Commands are provided to manage &amp;amp; join the distribution queue.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SysBot.Pokemon.Twitch:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitch.tv interface for remotely announcing when the distribution starts.&lt;/li&gt; &#xA; &lt;li&gt;Provide a Twitch login token, username, and channel for login.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SysBot.Pokemon.YouTube:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YouTube.com interface for remotely announcing when the distribution starts.&lt;/li&gt; &#xA; &lt;li&gt;Provide a YouTube login ClientID, ClientSecret, and ChannelID for login.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Uses &lt;a href=&#34;https://github.com/discord-net/Discord.Net&#34;&gt;Discord.Net&lt;/a&gt; , &lt;a href=&#34;https://github.com/TwitchLib/TwitchLib&#34;&gt;TwitchLib&lt;/a&gt; and &lt;a href=&#34;https://github.com/SaviorXTanren/StreamingClientLibrary&#34;&gt;StreamingClientLibary&lt;/a&gt; as a dependency via Nuget.&lt;/p&gt; &#xA;&lt;h2&gt;Other Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Pokémon API logic is provided by &lt;a href=&#34;https://github.com/kwsch/PKHeX/&#34;&gt;PKHeX&lt;/a&gt;, and template generation is provided by &lt;a href=&#34;https://github.com/architdate/PKHeX-Plugins/&#34;&gt;AutoMod&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Refer to the &lt;code&gt;License.md&lt;/code&gt; for details regarding licensing.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>modery/PowerDocu</title>
    <updated>2023-01-29T01:32:08Z</updated>
    <id>tag:github.com,2023-01-29:/modery/PowerDocu</id>
    <link href="https://github.com/modery/PowerDocu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate technical documentation from your existing Power Automate Flows and Power Apps canvas apps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PowerDocu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/PowerDocu%20-%20Info%20Header.png&#34; alt=&#34;PowerDocu&#34;&gt; After you have built a Flow in Power Automate or a canvas app in Power Apps, you may consider documenting it as to allow others to get a better understanding of how it works, to ensure that any specific configuration in it is kept somewhere else as well, or for other reasons. However, manually documenting the technical implementation can be quite time consuming.&lt;/p&gt; &#xA;&lt;p&gt;This is where &lt;strong&gt;PowerDocu&lt;/strong&gt; can help!&lt;/p&gt; &#xA;&lt;p&gt;PowerDocu contains a &lt;strong&gt;Windows GUI executable&lt;/strong&gt; to easily perform technical documentations. It allows the automatic generation of technical documentation based on a provided exported Flow package, an exported Power Apps canvas app, or an exported Solution package. The documentation can be generated as a Word document or in Markdown format (for example to host it in GitHub or Azure DevOps).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/PowerDocu.GUI.png&#34; alt=&#34;PowerDocu.GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Watch an introduction and demo of PowerDocu&lt;/strong&gt; As part of a Microsoft 365 Community call, an overview and a demo of PowerDocu were given. Want to see the tool in action? Check out this recording on YouTube: &lt;a href=&#34;https://www.youtube.com/watch?v=2-mH8vdVlaM&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/youtube-microsoft365community-powerdocu.jpg&#34; alt=&#34;PowerDocu demo as part of the Microsoft 365 Community call&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another recording was done for the Low Code Revolution show hosted by April Dunnam: &lt;a href=&#34;https://www.youtube.com/watch?v=jpPsngS8rww&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/youtube-low-code-revolution.png&#34; alt=&#34;Low Code Revolution - Automatically create Technical Documentation for your Power Apps and Power Automate Flows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples of generated documentation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/examples/examples.md&#34;&gt;Examples&lt;/a&gt; for more details. The screenshots below give an overview of what gets generated&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/Weather-Flow-Documentation-1.png&#34; alt=&#34;Example of generated Flow Word documentation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/Markdown-GitHub-PowerApp-BuildingAccess-0.png&#34; alt=&#34;Example of generated app Markdown documentation&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/Images/Markdown-Azure-DevOps-PowerApp-BuildingAccess-0.png&#34; alt=&#34;Example of generated app Markdown documentation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is generated as part of the technical documentation?&lt;/h2&gt; &#xA;&lt;p&gt;The documentation for each Flow includes&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A generated Word document or Markdown content including sections on &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;General information of the Flow&lt;/li&gt; &#xA;   &lt;li&gt;The connectors that are used by the Flow&lt;/li&gt; &#xA;   &lt;li&gt;The Trigger that starts the Flow&lt;/li&gt; &#xA;   &lt;li&gt;The actions used in the Flow&lt;/li&gt; &#xA;   &lt;li&gt;A high-level and a detailed diagram of the Flow&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;PNG and SVG renditions of the high-level and details diagrams&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The documentation for each canvas app includes&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A generated Word document or Markdown content including sections on &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;General information of the app and its properties&lt;/li&gt; &#xA;   &lt;li&gt;The global variables and collections used in the app (and in which controls they are used)&lt;/li&gt; &#xA;   &lt;li&gt;The Data Sources used&lt;/li&gt; &#xA;   &lt;li&gt;The Resources used&lt;/li&gt; &#xA;   &lt;li&gt;An overview of the various screens inside the app and the controls inside them&lt;/li&gt; &#xA;   &lt;li&gt;A detailed list of all controls, together with all their properties&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The documentation for a solution includes&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generated documentation for each app inside the solution&lt;/li&gt; &#xA; &lt;li&gt;Generated documentation for each Flow inside the solution&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; If you find any bugs or other issues, please log an &lt;strong&gt;&lt;a href=&#34;https://github.com/modery/PowerDocu/issues&#34;&gt;Issue&lt;/a&gt;&lt;/strong&gt; in this GitHub project. For any improvement recommendations and suggestions, please open a &lt;strong&gt;&lt;a href=&#34;https://github.com/modery/PowerDocu/discussions&#34;&gt;Discussion&lt;/a&gt;&lt;/strong&gt;. Most importantly, if you want to contribute to this project&#39;s code, please fork this repository and submit appropriate Pull Requests. &lt;strong&gt;Any kind of contribution is more than welcome!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to use PowerDocu&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/installation.md&#34;&gt;Installation &amp;amp; Usage&lt;/a&gt; for information on how to install PowerDocu and how to use it to generate documentation.&lt;/p&gt; &#xA;&lt;h2&gt;How does the generated documentation look like?&lt;/h2&gt; &#xA;&lt;p&gt;Please have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/modery/PowerDocu/main/examples/examples.md&#34;&gt;examples&lt;/a&gt; provided.&lt;/p&gt; &#xA;&lt;h2&gt;How can I help to improve PowerDocu?&lt;/h2&gt; &#xA;&lt;p&gt;If you can think of ways to improve it, here are some things that you can do:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If it is not working properly or if you find a bug, please log a detailed &lt;a href=&#34;https://github.com/modery/PowerDocu/issues&#34;&gt;Issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you have a suggestion on what could be added or what could be done better, please add it under &lt;strong&gt;&lt;a href=&#34;https://github.com/modery/PowerDocu/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/strong&gt;. Also, please have a look at the existing discussions and add any comments you may have&lt;/li&gt; &#xA; &lt;li&gt;Found some ugly code that should be improved? Got an idea for some additional functionality and want to implement it yourself? Please create a fork of this repo, make your changes, and submit a Pull Request!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What other documentation options are there for the Power Platform?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PowerApps-docstring&lt;/strong&gt; is a console based, pipeline ready application that automatically generates user and technical documentation for PowerApps: &lt;a href=&#34;https://github.com/sebastian-muthwill/powerapps-docstring&#34;&gt;https://github.com/sebastian-muthwill/powerapps-docstring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FlowToVisio&lt;/strong&gt;, a tool to create Visio representations of your Cloud Flows: &lt;a href=&#34;https://github.com/LinkeD365/FlowToVisio&#34;&gt;https://github.com/LinkeD365/FlowToVisio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>