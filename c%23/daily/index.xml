<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-08T01:37:18Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>2dust/v2rayN</title>
    <updated>2022-06-08T01:37:18Z</updated>
    <id>tag:github.com,2022-06-08:/2dust/v2rayN</id>
    <link href="https://github.com/2dust/v2rayN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A V2Ray client for Windows, support Xray core and v2fly core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;v2rayN&lt;/h1&gt; &#xA;&lt;p&gt;A V2Ray client for Windows, support &lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;Xray core&lt;/a&gt; and &lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;v2fly core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/2dust/v2rayN/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/2dust/v2rayN&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/2dust/v2rayn&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/2dust/v2rayn/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/2dust/v2rayN/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/2dust/v2rayN/latest/total?logo=github&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/v2rayn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg?sanitize=true&#34; alt=&#34;Chat on Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to use&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are newbie please download v2rayN-Core.zip from releases&lt;/li&gt; &#xA; &lt;li&gt;Otherwise please download v2rayN.zip (Also need to download v2ray core in the same folder)&lt;/li&gt; &#xA; &lt;li&gt;Run v2rayN.exe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft &lt;a href=&#34;https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/thank-you/net48-web-installer&#34;&gt;.NET Framework 4.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;v2fly core &lt;a href=&#34;https://github.com/v2fly/v2ray-core/releases&#34;&gt;https://github.com/v2fly/v2ray-core/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xray core &lt;a href=&#34;https://github.com/XTLS/Xray-core/releases&#34;&gt;https://github.com/XTLS/Xray-core/releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jasontaylordev/CleanArchitecture</title>
    <updated>2022-06-08T01:37:18Z</updated>
    <id>tag:github.com,2022-06-08:/jasontaylordev/CleanArchitecture</id>
    <link href="https://github.com/jasontaylordev/CleanArchitecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean Architecture Solution Template for .NET 6&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;116&#34; height=&#34;116&#34; src=&#34;https://raw.githubusercontent.com/jasontaylordev/CleanArchitecture/main/.github/icon.png&#34;&gt; &#xA;&lt;h1&gt;Clean Architecture Solution Template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jasontaylordev/CleanArchitecture/actions/workflows/dotnet-deploy.yml&#34;&gt;&lt;img src=&#34;https://github.com/jasontaylordev/CleanArchitecture/actions/workflows/dotnet-deploy.yml/badge.svg?sanitize=true&#34; alt=&#34;.NET&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jasontaylordev/CleanArchitecture/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/jasontaylordev/CleanArchitecture/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Clean.Architecture.Solution.Template&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Clean.Architecture.Solution.Template?label=NuGet&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Clean.Architecture.Solution.Template&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/Clean.Architecture.Solution.Template?label=Downloads&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/p9YtBjfgGe&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/893301913662148658?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/jasontaylordev?label=Follow&amp;amp;style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;This is a solution template for creating a Single Page App (SPA) with Angular and ASP.NET Core following the principles of Clean Architecture. Create a new project based on this template by clicking the above &lt;strong&gt;Use this template&lt;/strong&gt; button or by installing and running the associated NuGet package (see Getting Started for full details).&lt;/p&gt; &#xA;&lt;h2&gt;Learn about Clean Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dK4Yb6-LxAk&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/dK4Yb6-LxAk/0.jpg&#34; alt=&#34;Clean Architecture with ASP.NET Core 3.0 • Jason Taylor • GOTO 2019&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technologies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0&#34;&gt;ASP.NET Core 6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/ef/core/&#34;&gt;Entity Framework Core 6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://angular.io/&#34;&gt;Angular 13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://automapper.org/&#34;&gt;AutoMapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluentvalidation.net/&#34;&gt;FluentValidation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nunit.org/&#34;&gt;NUnit&lt;/a&gt;, &lt;a href=&#34;https://fluentassertions.com/&#34;&gt;FluentAssertions&lt;/a&gt;, &lt;a href=&#34;https://github.com/moq&#34;&gt;Moq&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/jbogard/Respawn&#34;&gt;Respawn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started is to install the &lt;a href=&#34;https://www.nuget.org/packages/Clean.Architecture.Solution.Template&#34;&gt;NuGet package&lt;/a&gt; and run &lt;code&gt;dotnet new ca-sln&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the latest &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET 6 SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the latest &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js LTS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dotnet new --install Clean.Architecture.Solution.Template&lt;/code&gt; to install the project template&lt;/li&gt; &#xA; &lt;li&gt;Create a folder for your solution and cd into it (the template will use it as project name)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dotnet new ca-sln&lt;/code&gt; to create a new project&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;code&gt;src/WebUI&lt;/code&gt; and launch the project using &lt;code&gt;dotnet run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Check out my &lt;a href=&#34;https://jasontaylor.dev/clean-architecture-getting-started/&#34;&gt;blog post&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Database Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The template is configured to use an in-memory database by default. This ensures that all users will be able to run the solution without needing to set up additional infrastructure (e.g. SQL Server).&lt;/p&gt; &#xA;&lt;p&gt;If you would like to use SQL Server, you will need to update &lt;strong&gt;WebUI/appsettings.json&lt;/strong&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;UseInMemoryDatabase&#34;: false,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify that the &lt;strong&gt;DefaultConnection&lt;/strong&gt; connection string within &lt;strong&gt;appsettings.json&lt;/strong&gt; points to a valid SQL Server instance.&lt;/p&gt; &#xA;&lt;p&gt;When you run the application the database will be automatically created (if necessary) and the latest migrations will be applied.&lt;/p&gt; &#xA;&lt;h3&gt;Database Migrations&lt;/h3&gt; &#xA;&lt;p&gt;To use &lt;code&gt;dotnet-ef&lt;/code&gt; for your migrations first ensure that &#34;UseInMemoryDatabase&#34; is disabled, as described within previous section. Then, add the following flags to your command (values assume you are executing from repository root)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--project src/Infrastructure&lt;/code&gt; (optional if in this folder)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--startup-project src/WebUI&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output-dir Persistence/Migrations&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to add a new migration from the root folder:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dotnet ef migrations add &#34;SampleMigration&#34; --project src\Infrastructure --startup-project src\WebUI --output-dir Persistence\Migrations&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Domain&lt;/h3&gt; &#xA;&lt;p&gt;This will contain all entities, enums, exceptions, interfaces, types and logic specific to the domain layer.&lt;/p&gt; &#xA;&lt;h3&gt;Application&lt;/h3&gt; &#xA;&lt;p&gt;This layer contains all application logic. It is dependent on the domain layer, but has no dependencies on any other layer or project. This layer defines interfaces that are implemented by outside layers. For example, if the application need to access a notification service, a new interface would be added to application and an implementation would be created within infrastructure.&lt;/p&gt; &#xA;&lt;h3&gt;Infrastructure&lt;/h3&gt; &#xA;&lt;p&gt;This layer contains classes for accessing external resources such as file systems, web services, smtp, and so on. These classes should be based on interfaces defined within the application layer.&lt;/p&gt; &#xA;&lt;h3&gt;WebUI&lt;/h3&gt; &#xA;&lt;p&gt;This layer is a single page application based on Angular 13 and ASP.NET Core 6. This layer depends on both the Application and Infrastructure layers, however, the dependency on Infrastructure is only to support dependency injection. Therefore only &lt;em&gt;Startup.cs&lt;/em&gt; should reference Infrastructure.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you are having problems, please let us know by &lt;a href=&#34;https://github.com/jasontaylordev/CleanArchitecture/issues/new/choose&#34;&gt;raising a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed with the &lt;a href=&#34;https://raw.githubusercontent.com/jasontaylordev/CleanArchitecture/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>1y0n/AV_Evasion_Tool</title>
    <updated>2022-06-08T01:37:18Z</updated>
    <id>tag:github.com,2022-06-08:/1y0n/AV_Evasion_Tool</id>
    <link href="https://github.com/1y0n/AV_Evasion_Tool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;掩日 - 免杀执行器生成工具&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://github.com/1y0n/AV_Evasion_Tool/raw/master/images/2021.ico&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;374&#34; height=&#34;50&#34; src=&#34;https://github.com/1y0n/AV_Evasion_Tool/raw/master/images/xred.team.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;掩日 - 适用于红队的综合免杀工具&lt;/h1&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;仅限用于技术研究和获得正式授权的测试活动！&lt;/li&gt; &#xA; &lt;li&gt;工作繁忙、水平低下、精力有限、时间仓促，代码未经过大量测试，如发现问题请提交 issue。&lt;/li&gt; &#xA; &lt;li&gt;主程序已被部分杀软标记，请添加到杀软白名单。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/1y0n/AV_Evasion_Tool/releases/download/20220419/20220419.zip&#34;&gt;Github 下载&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://download.xred.team/yanri.zip&#34;&gt;备用下载&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;依赖&lt;/h2&gt; &#xA;&lt;p&gt;如果使用工具的全部功能，请确保满足以下全部条件：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;64位 Windows 7 或以上操作系统&lt;/li&gt; &#xA; &lt;li&gt;.net framework 4.0 或更高版本 (Windows 自带)&lt;/li&gt; &#xA; &lt;li&gt;安装 tdm-gcc&lt;/li&gt; &#xA; &lt;li&gt;安装 &lt;a href=&#34;https://go.dev/dl/go1.17.8.windows-amd64.msi&#34;&gt;64位 Go 语言环境&lt;/a&gt;，并添加到系统环境变量&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;tdm-gcc&lt;a href=&#34;https://github.com/jmeubank/tdm-gcc/releases/download/v9.2.0-tdm64-1/tdm64-gcc-9.2.0.exe&#34;&gt;下载地址&lt;/a&gt;，双击运行，选择 CREATE，然后一直“下一步”即可。 下载并安装，完成后，新建一个cmd窗口，输入 &lt;code&gt;gcc --version&lt;/code&gt; ，出现以下效果即说明成功：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://sec-note.oss-cn-beijing.aliyuncs.com/img/20200604232603.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;生成路径中不要包含中文和空格，并且生成过程中尽量关闭所有的杀毒软件，否则会生成失败！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;64位免杀效果远好于32位，能用64尽量用64（注意对应的 shellcode 也需要是64位）。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;针对Cobalt Strike，不要选择生成Windows分阶段木马、Windows无阶段木马，而是生成payload，最终是一个payload.c文件。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更新&lt;/h2&gt; &#xA;&lt;p&gt;v20220419 2022年4月19日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;免杀效果优化&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v20220329 2022年3月29日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;bug修复（感谢@1191569886反馈）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v20220325 2022年3月25日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;bug修复（感谢@Tas9er反馈）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v20220311 2022年3月11日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;bug修复&lt;/li&gt; &#xA; &lt;li&gt;使用C语言生成的程序体积减小90%（可以使用UPX进一步压缩体积，最终可以压缩到11KB左右）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v20220204 2022年3月7日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;全新的界面&lt;/li&gt; &#xA; &lt;li&gt;支持 Go 语言&lt;/li&gt; &#xA; &lt;li&gt;支持本地分离&lt;/li&gt; &#xA; &lt;li&gt;支持网络分离&lt;/li&gt; &#xA; &lt;li&gt;杀软对比功能&lt;/li&gt; &#xA; &lt;li&gt;更新检测功能&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v3.1.2 2021年2月6日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;免杀效果优化&lt;/li&gt; &#xA; &lt;li&gt;现在用户可以自行决定要不要隐藏窗口&lt;/li&gt; &#xA; &lt;li&gt;由于算法原因，免杀的exe运行时，会进入一个很长很长的解密阶段，大概需要几分钟，解密后可以正常运行&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v3.0RC 2020年12月29日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;新年快乐！&lt;/li&gt; &#xA; &lt;li&gt;修复了一个严重bug&lt;/li&gt; &#xA; &lt;li&gt;免杀效果优化&lt;/li&gt; &#xA; &lt;li&gt;支持自定义密码&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v3.0beta2 2020年11月29日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;修复了找不到 dll 的问题&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v3.0 2020年11月14日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;更易于使用&lt;/li&gt; &#xA; &lt;li&gt;理论上更好的免杀效果😂&lt;/li&gt; &#xA; &lt;li&gt;支持对 exe 文件进行二次处理实现免杀（基于Donut）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;v2.1 2020年9月1日&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;现在每次异或的key都会随机生成了；&lt;/li&gt; &#xA; &lt;li&gt;部分细节更新。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;引用&lt;/h2&gt; &#xA;&lt;p&gt;感谢以下优秀项目/文章/网站，本工具修改和使用了其中的代码、资源或思路：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Dount (&lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;https://github.com/TheWover/donut&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;avList (&lt;a href=&#34;https://github.com/gh0stkey/avList&#34;&gt;https://github.com/gh0stkey/avList&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Go编译-race参数实现VT全免杀 - liwp1929&lt;/li&gt; &#xA; &lt;li&gt;goShellCodeByPassVT (&lt;a href=&#34;https://github.com/fcre1938/goShellCodeByPassVT&#34;&gt;https://github.com/fcre1938/goShellCodeByPassVT&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;HandyControls (&lt;a href=&#34;https://github.com/HandyOrg/HandyControl&#34;&gt;https://github.com/HandyOrg/HandyControl&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;flaticon (&lt;a href=&#34;https://www.flaticon.com&#34;&gt;https://www.flaticon.com&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>