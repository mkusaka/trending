<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:29:10Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>buybackoff/1brc</title>
    <updated>2024-01-07T01:29:10Z</updated>
    <id>tag:github.com,2024-01-07:/buybackoff/1brc</id>
    <link href="https://github.com/buybackoff/1brc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;1Ô∏è‚É£üêùüèéÔ∏è The One Billion Row Challenge&lt;/h1&gt; &#xA;&lt;p&gt;.NET implementation of &lt;a href=&#34;https://github.com/gunnarmorling/1brc&#34;&gt;https://github.com/gunnarmorling/1brc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to compare results on the same hardware, open a PR with your implementation. Add it to a directory &lt;code&gt;1brc_githugusername&lt;/code&gt;. This directory must contain a dotnet project &lt;code&gt;1brc.csproj&lt;/code&gt; (not renamed) and your code. You program must accept the first argument as the path to the measurements file.&lt;/p&gt; &#xA; &lt;p&gt;This should work from the repo dir: dotnet build 1brc_githugusername/1brc.csproj -c Release dotnet run --project 1brc_githugusername/1brc.csproj -c Release --no-build -- path/to/the/file.txt&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that his implementation supports &lt;code&gt;\r\n&lt;/code&gt; line endings. The numbers in the Evolution section below are from Windows, where the input file is 13.7GB vs 12.8GB. It&#39;s generated by the upstream Java code on Windows so this is an implicit requirement for x-plat already.&lt;/p&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;The performance is measured on an idle 6C/12T Alder Lake CPU fixed at 2.5 GHz (no turbo), 32GB DDR4 3200, Debian 12 in LXC. At least 5 runs, showing the best result.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Jan 6, 6 PM UTC&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The top two Java results (reported as &lt;code&gt;&amp;lt; 8.0&lt;/code&gt;): &lt;strong&gt;~4.1 sec&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;This code: &lt;strong&gt;4.59 sec&lt;/strong&gt; ü•â&lt;/li&gt; &#xA; &lt;li&gt;Current No 3 Java (&lt;code&gt;9.625&lt;/code&gt;): &lt;strong&gt;4.75 sec&lt;/strong&gt; (Graal JVM), &lt;strong&gt;4.83 sec&lt;/strong&gt; (Graal native image)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Evolution&lt;/h2&gt; &#xA;&lt;p&gt;Below is the evolution of results with each commit. The time shown here is measured inside the app, on Windows. Using &lt;code&gt;time&lt;/code&gt; command adds up to &lt;code&gt;0.5-0.9 sec&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;First attempt&lt;/h4&gt; &#xA;&lt;p&gt;Mmap + paralell using Span API and some unsafe tricks to avoid Utf8 parsing until the very end.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:10.6978618&#xA;Processed in 00:00:10.8473143&#xA;Processed in 00:00:10.9107262&#xA;Processed in 00:00:10.9733218&#xA;Processed in 00:00:10.5854176&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Some micro optimizations&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:09.7093471&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Float parsing is ~57%, dictionary lookup is ~24%. Optimizing further is about those two things. We may use &lt;code&gt;csFastFloat&lt;/code&gt; library and a specialized dictionary such as &lt;code&gt;DictionarySlim&lt;/code&gt;. However the goal is to avoid dependencies even if they are pure .NET.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s near-perfectly parallelizable though. On 8 cores it should be 33% faster than on 6 that I have. With 32GB RAM the file should be cached by an OS after the first read. The first read may be very slow in the cloud VM, but then the cache should eliminate the difference between drive speeds.&lt;/p&gt; &#xA;&lt;h4&gt;Use naive double parsing&lt;/h4&gt; &#xA;&lt;p&gt;If we can assume that the float values are well formed then the speed almost doubles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:05.5519479&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optimized double parsing with fallback&lt;/h4&gt; &#xA;&lt;p&gt;No assumptions are required if we fallback to the full .NET parsing implementation on any irregularity.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:05.2944041&#xA;Processed in 00:00:05.3489315&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cache powers of 10, inline summary.init&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:04.7363095&#xA;Processed in 00:00:04.8472097&#xA;Processed in 00:00:04.8235814&#xA;Processed in 00:00:04.7163938&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Microoptimize float parsing, but keep it general purpose&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:04.4547973&#xA;Processed in 00:00:04.5303938&#xA;Processed in 00:00:04.5125394&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optimize hash function&lt;/h4&gt; &#xA;&lt;p&gt;See comments in Utf8Span.GetHashCode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Processed in 00:00:04.2237865&#xA;Processed in 00:00:04.2524434&#xA;Processed in 00:00:04.2688423&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Use specification to use int parsing and branchless min/max&lt;/h4&gt; &#xA;&lt;p&gt;Processed in 00:00:03.9916535 Processed in 00:00:03.9897462 Processed in 00:00:03.9810353&lt;/p&gt; &#xA;&lt;h4&gt;Set dictionary capacity&lt;/h4&gt; &#xA;&lt;p&gt;Set dictionary capacity to 10k.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;`\n` only&#xA;Processed in 00:00:03.2530659&#xA;Processed in 00:00:03.1561451&#xA;&#xA;`\r\n`&#xA;Processed in 00:00:03.3463769&#xA;Processed in 00:00:03.3641962&#xA;Processed in 00:00:03.3762491&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/teams-ai</title>
    <updated>2024-01-07T01:29:10Z</updated>
    <id>tag:github.com,2024-01-07:/microsoft/teams-ai</id>
    <link href="https://github.com/microsoft/teams-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SDK focused on building AI based applications and extensions for Microsoft Teams.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://github.com/microsoft/teams-ai/assets/14900841/10a0fbac-9d31-46d5-ad65-0eeb33b787a8&#34; alt=&#34;teams logo&#34;&gt; Teams AI Library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/microsoft/teams-ai?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/microsoft/teams-ai/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Javascript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/DomoreexpGithub/Github_Pipelines/_build/latest?definitionId=5&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/DomoreexpGithub/Github_Pipelines/_apis/build/status%2Fteams-ai%2Fmicrosoft.teams-ai.javascript?branchName=main&#34; alt=&#34;Javascript Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dev.azure.com/DomoreexpGithub/Github_Pipelines/_build/latest?definitionId=4&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/DomoreexpGithub/Github_Pipelines/_apis/build/status%2Fteams-ai%2Fmicrosoft.teams-ai.dotnet?branchName=main&#34; alt=&#34;C# Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Welcome to the Teams AI Library! This SDK is specifically designed to assist you in creating bots capable of interacting with Teams and Microsoft 365 applications. It is constructed using the &lt;a href=&#34;https://github.com/microsoft/botbuilder-js&#34;&gt;Bot Framework SDK&lt;/a&gt; as its foundation, simplifying the process of developing bots that interact with Teams&#39; artificial intelligence capabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/teams-ai/assets/14900841/154353ff-bafe-4423-abcd-6dc5a8680fe9&#34; alt=&#34;Teams AI flow diagram&#34;&gt; This is a diagram of the Teams-AI flow. Teams AI SDK hooks into the Teams SDK and Azure OpenAI SDK to provide a seamless experience for developers.&lt;/p&gt; &#xA;&lt;p&gt;The SDK is currently available for JavaScript/TypeScript applications in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/js&#34;&gt;&lt;code&gt;js&lt;/code&gt;&lt;/a&gt; folder and via the &lt;a href=&#34;https://www.npmjs.com/package/@microsoft/teams-ai&#34;&gt;teams-ai package on NPM&lt;/a&gt;. .NET support is available in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/dotnet&#34;&gt;&lt;code&gt;dotnet&lt;/code&gt;&lt;/a&gt; folder and via the &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Teams.AI&#34;&gt;teams-ai package on NuGet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;üñáÔ∏è Jump right in‚ùóÔ∏è üìé&lt;/h3&gt; &#xA; &lt;p&gt;If you want to jump immediately into AI, try out the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/js/samples/04.ai.a.teamsChefBot&#34;&gt;04.ai.a.teamsChefbot&lt;/a&gt; sample. This sample is a simple bot that uses the OpenAI GPT model to build a Teams app. Just load it up in Visual Studio Code, rename the sample.env file to .env, add in your OpenAI key or Azure OpenAI key and endpoint in the .env file, and hit F5! üéâ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Start with our getting started guides&lt;/h3&gt; &#xA;&lt;p&gt;This SDK is now generally available. We welcome your feedback and contributions!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To get started, head over to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/getting-started/README.md&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;h3&gt;Teams-centric component scaffolding&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For examples of the below, browse through the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/js/samples/&#34;&gt;&lt;code&gt;js&lt;/code&gt;&lt;/a&gt; sample folders or the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/dotnet/samples&#34;&gt;&lt;code&gt;dotnet&lt;/code&gt;&lt;/a&gt; sample folders. Simple scaffolding for any conversational app component, including:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat bots&lt;/li&gt; &#xA; &lt;li&gt;Message Extensions&lt;/li&gt; &#xA; &lt;li&gt;Link unfurling&lt;/li&gt; &#xA; &lt;li&gt;Adaptive Cards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Natural Language Modelling&lt;/h3&gt; &#xA;&lt;p&gt;The SDK is built to leverage OpenAI Large Language Models so you don&#39;t have to create your own. This saves you the complexity of processing natural language, and allows your users to talk to your app with their own words.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt Engineering&lt;/h3&gt; &#xA;&lt;p&gt;With a simple text file written in human language, you can describe the functionality of your app to cue OpenAI to focus on the right user intentions and provide relevant responses.&lt;/p&gt; &#xA;&lt;h3&gt;Moderation&lt;/h3&gt; &#xA;&lt;p&gt;A configurable API call to filter inappropriate content for input content, output content, or both.&lt;/p&gt; &#xA;&lt;p&gt;(Moderators are available whether you decide to you OpenAI or Azure OpenAI for your models. If using OpenAI see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/js/packages/teams-ai/src/moderators/OpenAIModerator.ts&#34;&gt;OpenAIModerator.ts&lt;/a&gt; or &lt;a href=&#34;https://github.com/microsoft/teams-ai/raw/46042530f43058a815df4376f0f068f9d8d2e144/dotnet/packages/Microsoft.TeamsAI/Microsoft.TeamsAI/AI/Moderator/OpenAIModerator.cs&#34;&gt;OpenAIModerator.cs&lt;/a&gt; and for Azure&#39;s moderator see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/js/packages/teams-ai/src/moderators/AzureContentSafetyModerator.ts&#34;&gt;AzureContentSaftyModerator.ts&lt;/a&gt;. Azure&#39;s moderator for C# is in development)&lt;/p&gt; &#xA;&lt;h3&gt;Predictive Engine to Map Intents to Actions&lt;/h3&gt; &#xA;&lt;p&gt;Leveraging provided prompts and topic filters, it&#39;s simple to create a predictive engine that detects user intents and map them to relevant app actions, where you can focus your business logic. These actions are even possible to chain together to make building complex workflows easy.&lt;/p&gt; &#xA;&lt;h3&gt;Conversational Session History&lt;/h3&gt; &#xA;&lt;p&gt;The state of your user&#39;s session is not lost, allowing conversations to flow freely and arrive quickly at right outcome.&lt;/p&gt; &#xA;&lt;h3&gt;Localization&lt;/h3&gt; &#xA;&lt;p&gt;Because OpenAI&#39;s models are trained on the open internet, they&#39;re tuned to any language, saving you the cost of localization.&lt;/p&gt; &#xA;&lt;h3&gt;LLM modularity&lt;/h3&gt; &#xA;&lt;p&gt;While the SDK handles OpenAI&#39;s GPT models out of the box, you can choose to swap to the LLM of your choice without touching any of your conversational app code.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This SDK is licensed under the MIT License. This SDK includes tools to use APIs provided by third parties. These APIs are provided under their own separate terms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI API. Use of the OpenAI API requires an API key, which can be obtained from OpenAI. By using this SDK, you agree to abide by the OpenAI API Terms of Use and Privacy Policy. You can find them at &lt;a href=&#34;https://openai.com/policies/terms-of-use&#34;&gt;OpenAI Terms of Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Azure OpenAI Service. Use of the Azure OpenAI API requires an API key. By using this SDK, you agree to abide by the Azure OpenAI API terms. You can find them at &lt;a href=&#34;https://www.microsoft.com/licensing/terms/productoffering/MicrosoftAzure/MCA#ServiceSpecificTerms&#34;&gt;Azure OPENAI TOS&lt;/a&gt;, and associated documentation at &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/cognitive-services/openai/&#34;&gt;Azure Cognitive Services&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/CONTRIBUTING.md&#34;&gt;./CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt; &#xA;&lt;h2&gt;Accessing daily builds&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/teams-ai/main/docs/DAILYBUILDS.md&#34;&gt;Daily Builds&lt;/a&gt; for instructions on how to access daily builds.&lt;/p&gt;</summary>
  </entry>
</feed>