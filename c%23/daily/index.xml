<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:31:30Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>khellang/Scrutor</title>
    <updated>2022-10-06T01:31:30Z</updated>
    <id>tag:github.com,2022-10-06:/khellang/Scrutor</id>
    <link href="https://github.com/khellang/Scrutor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Assembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scrutor &lt;a href=&#34;https://ci.appveyor.com/project/khellang/scrutor&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/j00uyvqnm54rdlkb?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Scrutor&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Scrutor.svg?sanitize=true&#34; alt=&#34;NuGet Package&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Scrutor - I search or examine thoroughly; I probe, investigate or scrutinize&lt;br&gt; From scrÅ«ta, as the original sense of the verb was to search through trash. - &lt;a href=&#34;https://en.wiktionary.org/wiki/scrutor&#34;&gt;https://en.wiktionary.org/wiki/scrutor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Assembly scanning and decoration extensions for Microsoft.Extensions.DependencyInjection&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://www.nuget.org/packages/Scrutor&#34;&gt;Scrutor NuGet Package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Package Manager Console&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Scrutor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;.NET Core CLI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Scrutor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The library adds two extension methods to &lt;code&gt;IServiceCollection&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Scan&lt;/code&gt; - This is the entry point to set up your assembly scanning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Decorate&lt;/code&gt; - This method is used to decorate already registered services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Examples&lt;/strong&gt; below for usage examples.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Scanning&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = new ServiceCollection();&#xA;&#xA;collection.Scan(scan =&amp;gt; scan&#xA;     // We start out with all types in the assembly of ITransientService&#xA;    .FromAssemblyOf&amp;lt;ITransientService&amp;gt;()&#xA;        // AddClasses starts out with all public, non-abstract types in this assembly.&#xA;        // These types are then filtered by the delegate passed to the method.&#xA;        // In this case, we filter out only the classes that are assignable to ITransientService.&#xA;        .AddClasses(classes =&amp;gt; classes.AssignableTo&amp;lt;ITransientService&amp;gt;())&#xA;            // We then specify what type we want to register these classes as.&#xA;            // In this case, we want to register the types as all of its implemented interfaces.&#xA;            // So if a type implements 3 interfaces; A, B, C, we&#39;d end up with three separate registrations.&#xA;            .AsImplementedInterfaces()&#xA;            // And lastly, we specify the lifetime of these registrations.&#xA;            .WithTransientLifetime()&#xA;        // Here we start again, with a new full set of classes from the assembly above.&#xA;        // This time, filtering out only the classes assignable to IScopedService.&#xA;        .AddClasses(classes =&amp;gt; classes.AssignableTo&amp;lt;IScopedService&amp;gt;())&#xA;            // Now, we just want to register these types as a single interface, IScopedService.&#xA;            .As&amp;lt;IScopedService&amp;gt;()&#xA;            // And again, just specify the lifetime.&#xA;            .WithScopedLifetime()&#xA;        // Generic interfaces are also supported too, e.g. public interface IOpenGeneric&amp;lt;T&amp;gt; &#xA;        .AddClasses(classes =&amp;gt; classes.AssignableTo(typeof(IOpenGeneric&amp;lt;&amp;gt;)))&#xA;            .AsImplementedInterfaces()&#xA;        // And you scan generics with multiple type parameters too&#xA;        // e.g. public interface IQueryHandler&amp;lt;TQuery, TResult&amp;gt;&#xA;        .AddClasses(classes =&amp;gt; classes.AssignableTo(typeof(IQueryHandler&amp;lt;,&amp;gt;)))&#xA;            .AsImplementedInterfaces());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decoration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var collection = new ServiceCollection();&#xA;&#xA;// First, add our service to the collection.&#xA;collection.AddSingleton&amp;lt;IDecoratedService, Decorated&amp;gt;();&#xA;&#xA;// Then, decorate Decorated with the Decorator type.&#xA;collection.Decorate&amp;lt;IDecoratedService, Decorator&amp;gt;();&#xA;&#xA;// Finally, decorate Decorator with the OtherDecorator type.&#xA;// As you can see, OtherDecorator requires a separate service, IService. We can get that from the provider argument.&#xA;collection.Decorate&amp;lt;IDecoratedService&amp;gt;((inner, provider) =&amp;gt; new OtherDecorator(inner, provider.GetRequiredService&amp;lt;IService&amp;gt;()));&#xA;&#xA;var serviceProvider = collection.BuildServiceProvider();&#xA;&#xA;// When we resolve the IDecoratedService service, we&#39;ll get the following structure:&#xA;// OtherDecorator -&amp;gt; Decorator -&amp;gt; Decorated&#xA;var instance = serviceProvider.GetRequiredService&amp;lt;IDecoratedService&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>BornToBeRoot/NETworkManager</title>
    <updated>2022-10-06T01:31:30Z</updated>
    <id>tag:github.com,2022-10-06:/BornToBeRoot/NETworkManager</id>
    <link href="https://github.com/BornToBeRoot/NETworkManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful tool for managing networks and troubleshoot network problems!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;NETworkManager&lt;/h1&gt; &#xA; &lt;h3&gt;A powerful tool for managing networks and troubleshoot network problems!&lt;/h3&gt; &#xA; &lt;img alt=&#34;NETworkManager Preview&#34; src=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/docs/Preview.gif?raw=true&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/BornToBeroot/NETworkManager/releases&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;All releases&#34; src=&#34;https://img.shields.io/github/downloads/BornToBeroot/NETworkManager/total.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/BornToBeroot/NETworkManager/releases/latest&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Latest release&#34; src=&#34;https://img.shields.io/github/downloads/BornToBeroot/NETworkManager/latest/total.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/BornToBeroot/NETworkManager/stargazers&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/BornToBeroot/NETworkManager.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/BornToBeroot/NETworkManager/network&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/BornToBeroot/NETworkManager.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://ci.appveyor.com/project/BornToBeRoot/NETworkManager/branch/main&#34;&gt; &lt;img alt=&#34;AppVeyor&#34; src=&#34;https://img.shields.io/appveyor/ci/BornToBeRoot/NETworkManager/main.svg?style=for-the-badge&amp;amp;logo=appveyor&amp;amp;&amp;amp;label=main&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;AppVeyor&#34; src=&#34;https://img.shields.io/github/license/BornToBeroot/NETworkManager.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://transifex.com/BornToBeRoot/NETworkManager/&#34;&gt; &lt;img alt=&#34;Transifex&#34; src=&#34;https://img.shields.io/badge/transifex-translate-green.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/issues/new?labels=Feature-Request&amp;amp;template=Feature_request.md&#34;&gt; &lt;img alt=&#34;Feature request&#34; src=&#34;https://img.shields.io/badge/github-feature_request-green.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/issues/new?labels=Issue&amp;amp;template=Bug_report.md&#34;&gt; &lt;img alt=&#34;Bug report&#34; src=&#34;https://img.shields.io/badge/github-bug_report-red.svg?style=for-the-badge&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;More informations&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://borntoberoot.net/NETworkManager/Features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://borntoberoot.net/NETworkManager/Download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://borntoberoot.net/NETworkManager/Changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://borntoberoot.net/NETworkManager/Documentation/Application&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/CONTRIBUTING.md&#34;&gt;How to contribute, add a translation, write documentation or report a bug?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/Contributors.md&#34;&gt;List of contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/SECURITY.md&#34;&gt;How to report a security vulnerability?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;SDK .NET 6.x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2019 or later with &lt;code&gt;.NET desktop development&lt;/code&gt; and &lt;code&gt;Universal Windows Platform development&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jrsoftware.org/isinfo.php&#34;&gt;InnoSetup&lt;/a&gt; (if you want to create an installer) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download &lt;code&gt;ChineseSimplified.isl&lt;/code&gt; and &lt;code&gt;ChineseTraditional.isl&lt;/code&gt; from the &lt;a href=&#34;https://github.com/jrsoftware/issrc/raw/main/Files/Languages/Unofficial/&#34;&gt;official repo&lt;/a&gt; and place them in the language folder of InnoSetup&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone or download the repository: &lt;code&gt;git clone https://github.com/BornToBeRoot/NETworkManager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;.\build.ps1&lt;/code&gt; script with PowerShell to compile the solution and create a portable and a setup version (or open the file &lt;code&gt;Source/NETworkManager.sln&lt;/code&gt; in Visual Studio to debug or build the solution)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also copy &amp;amp; paste this command in your PowerShell console &lt;span&gt;ð&lt;/span&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;git clone https://github.com/BornToBeRoot/NETworkManager; Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass; .\NETworkManager\build.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; defined by the &lt;a href=&#34;http://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;NETworkManager is published under the &lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/raw/main/LICENSE&#34;&gt;GNU General Public License v3&lt;/a&gt;. The licenses of the used libraries can be found &lt;a href=&#34;https://github.com/BornToBeRoot/NETworkManager/tree/main/Source/NETworkManager.Documentation/Licenses&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Xabaril/AspNetCore.Diagnostics.HealthChecks</title>
    <updated>2022-10-06T01:31:30Z</updated>
    <id>tag:github.com,2022-10-06:/Xabaril/AspNetCore.Diagnostics.HealthChecks</id>
    <link href="https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enterprise HealthChecks for ASP.NET Core Diagnostics Package&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_applicationstatus_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_applicationstatus_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;HealthChecks Application Status CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_arangodb_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_arangodb_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ArangoDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_s3_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_s3_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Aws S3 Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_secretsmanager_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_secretsmanager_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Aws SecretsManager Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_sns_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_sns_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Aws Sns Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_sqs_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_sqs_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Aws Sqs Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_systemsmanager_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_aws_systemsmanager_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Aws SystemsManager Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azure_iothub_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azure_iothub_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Azure IoTHub Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azure_digitaltwin_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azure_digitaltwin_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Azure DigitalTwin Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azurekeyvault_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azurekeyvault_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Azure KeyVault Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azureservicebus_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azureservicebus_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Azure ServiceBus Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azurestorage_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_azurestorage_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Azure Storage Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_consul_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_consul_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Consul Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_cosmosdb_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_cosmosdb_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CosmosDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_documentdb_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_documentdb_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;DocumentDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_dynamodb_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_dynamodb_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;DynamoDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_elasticsearch_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_elasticsearch_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ElasticSearch Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_gcp_cloudfirestore_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_gcp_cloudfirestore_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Gcp CloudFirstore Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_gremlin_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_gremlin_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;GremlinDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_hangfire_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_hangfire_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Hangfire Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_ibmmq_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_ibmmq_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;IbmMQ Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_kafka_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_kafka_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Kafka Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_mongodb_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_mongodb_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;MongoDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_mysql_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_mysql_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;MySql Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_nats_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_nats_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Nats Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_npgsql_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_npgsql_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;NpgSql Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_network_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_network_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Network Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_openidconnectserver_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_openidconnectserver_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;OpenIdConnect Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_oracle_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_oracle_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Oracle Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_prometheus_metrics_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_prometheus_metrics_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Prometheus Metrics Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_applicationinsights_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_applicationinsights_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Publisher ApplicationInsights Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_datadog_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_datadog_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Publisher Datadog Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_prometheus_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_prometheus_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Publisher Prometheus Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_seq_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_publisher_seq_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Publisher Seq status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_rabbitmq_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_rabbitmq_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;RabbitMQ Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_ravendb_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_ravendb_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;RavenDb Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_redis_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_redis_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Redis Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_sqlserver_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_sqlserver_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;SqlServer Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_sendgrid_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_sendgrid_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;SendGrid Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_signalr_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_signalr_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;SignalR Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_solr_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_solr_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;SolR Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_sqlite_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_sqlite_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;SqlLite Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_system_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_system_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;System Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_ui_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_ui_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;UI Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_uris_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/actions/workflows/healthchecks_uris_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Uris Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/v/xabarilcoding/healthchecksui?label=Docker%20UI%20Version&amp;amp;logo=dsd&amp;amp;sort=date&#34; alt=&#34;ui version&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/xabarilcoding/healthchecksui.svg?label=Docker%20UI%20Pulls&#34; alt=&#34;ui pulls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/docker/v/xabarilcoding/healthchecksui-k8s-operator?label=k8s%20Operator%20Version&amp;amp;logo=dsd&amp;amp;sort=date&#34; alt=&#34;k8s version&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/xabarilcoding/healthchecksui-k8s-operator.svg?label=k8s%20Operator%20Pulls&#34; alt=&#34;k8s pulls&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AspNetCore.Diagnostics.HealthChecks&lt;/h1&gt; &#xA;&lt;p&gt;This repository offers a wide collection of &lt;strong&gt;ASP.NET Core&lt;/strong&gt; Health Check packages for widely used services and platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ASP.NET Core&lt;/strong&gt; versions supported: 6.0, 5.0, 3.1, 3.0 and 2.2&lt;/p&gt; &#xA;&lt;h1&gt;Sections&lt;/h1&gt; &#xA;&lt;h2&gt;Previous versions documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/raw/netcore-3.1/README.md&#34;&gt;NetCore 3.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/raw/netcore-3.0/README.md&#34;&gt;NetCore 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/raw/netcore-2.2/README.md&#34;&gt;NetCore 2.2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HealthChecks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#Health-Checks&#34;&gt;Health Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#HealthCheck-push-results&#34;&gt;Health Checks Push Results&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HealthChecks UI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#HealthCheckUI&#34;&gt;UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#UI-Storage-Providers&#34;&gt;UI Storage Providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#UI-Database-Migrations&#34;&gt;UI Database Migrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#Health-status-history-timeline&#34;&gt;History Timeline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#Configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#Webhooks-and-Failure-Notifications&#34;&gt;Webhooks and Failure Notifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#UI-Configure-HttpClient-and-HttpMessageHandler-for-Api-and-Webhooks-endpoints&#34;&gt;HttpClient and HttpMessageHandler Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HealthChecks UI and Kubernetes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#UI-Kubernetes-Operator&#34;&gt;Kubernetes Operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#UI-Kubernetes-automatic-services-discovery&#34;&gt;Kubernetes automatic services discovery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HealthChecks and Devops&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#HealthChecks-as-Release-Gates-for-Azure-DevOps-Pipelines&#34;&gt;Releases Gates for Azure DevOps Pipelines&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HealthChecks Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/#tutorials-demos-and-walkthroughs-on-aspnet-core-healthchecks&#34;&gt;Tutorials, Demos and walkthroughs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Health Checks&lt;/h2&gt; &#xA;&lt;p&gt;HealthChecks packages include health checks for:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Downloads&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ApplicationStatus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.ApplicationStatus&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.ApplicationStatus&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ArangoDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.ArangoDb&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.ArangoDb&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon S3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Aws.S3&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Aws.S3&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon Secrets Manager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Aws.SecretsManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Aws.SecretsManager&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon SNS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Aws.Sns&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Aws.Sns&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon SQS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Aws.Sqs&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Aws.Sqs&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon Systems Manager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Aws.SystemsManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Aws.SystemsManager&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure IoT Hub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Azure.IoTHub&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Azure.IoTHub&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure DigitalTwin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.AzureDigitalTwin&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.AzureDigitalTwin&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Subscription status, models and instances&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure Key Vault&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.AzureKeyVault&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.AzureKeyVault&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure Service Bus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.AzureServiceBus&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.AzureServiceBus&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;EventHub, Queue and Topics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure Storage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.AzureStorage&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.AzureStorage&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blob, File, Queue and Table&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Consul&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Consul&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Consul&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CosmosDb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.CosmosDb&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.CosmosDb&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure DocumentDb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.DocumentDb&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.DocumentDb&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon DynamoDb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.DynamoDb&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.DynamoDb&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elasticsearch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Elasticsearch&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Elasticsearch&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EventStore&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.EventStore&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.EventStore&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Cloud Firestore&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Gcp.CloudFirestore&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Gcp.CloudFirestore&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gremlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Gremlin&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Gremlin&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hangfire&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Hangfire&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Hangfire&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IbmMQ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.IbmMQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.IbmMQ&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kafka&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Kafka&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Kafka&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kubernetes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Kubernetes&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Kubernetes&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.MongoDb&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.MongoDb&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySql&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.MySql&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.MySql&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nats&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Nats&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Nats&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NATS, messaging, message-bus, pubsub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Network&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Network&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Network&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ftp, SFtp, Dns, Tcp port, Smtp, Imap, Ssl&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.NpgSql&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.NpgSql&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Identity Server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.OpenIdConnectServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.OpenIdConnectServer&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oracle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Oracle&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Oracle&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RabbitMQ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.RabbitMQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.RabbitMQ&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RavenDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.RavenDB&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.RavenDB&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Redis&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Redis&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Redis&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SendGrid&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.SendGrid&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.SendGrid&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SignalR&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.SignalR&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.SignalR&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Solr&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Solr&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sqlite&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Sqlite&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Sqlite&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sql Server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.SqlServer&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.SqlServer&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;System&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.System&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.System&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disk Storage, Folder, Private Memory, Virtual Memory, Process, Windows Service&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Uri&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Uris&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Uris&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Single uri and uri groups&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We support netcoreapp 2.2, 3.0 and 3.1. Please use package versions 2.2.X, 3.0.X and 3.1.X to target different versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Install-Package AspNetCore.HealthChecks.ApplicationStatus&#xA;Install-Package AspNetCore.HealthChecks.ArangoDb&#xA;Install-Package AspNetCore.HealthChecks.Aws.S3&#xA;Install-Package AspNetCore.HealthChecks.Aws.SecretsManager&#xA;Install-Package AspNetCore.HealthChecks.Aws.Sns&#xA;Install-Package AspNetCore.HealthChecks.Aws.Sqs&#xA;Install-Package AspNetCore.HealthChecks.Aws.SystemsManager&#xA;Install-Package AspNetCore.HealthChecks.Azure.IoTHub&#xA;Install-Package AspNetCore.HealthChecks.AzureDigitalTwin&#xA;Install-Package AspNetCore.HealthChecks.AzureKeyVault&#xA;Install-Package AspNetCore.HealthChecks.AzureServiceBus&#xA;Install-Package AspNetCore.HealthChecks.AzureStorage&#xA;Install-Package AspNetCore.HealthChecks.Consul&#xA;Install-Package AspNetCore.HealthChecks.CosmosDb&#xA;Install-Package AspNetCore.HealthChecks.DocumentDb&#xA;Install-Package AspNetCore.HealthChecks.DynamoDB&#xA;Install-Package AspNetCore.HealthChecks.Elasticsearch&#xA;Install-Package AspNetCore.HealthChecks.EventStore&#xA;Install-Package AspNetCore.HealthChecks.Gcp.CloudFirestore&#xA;Install-Package AspNetCore.HealthChecks.Gremlin&#xA;Install-Package AspNetCore.HealthChecks.Hangfire&#xA;Install-Package AspNetCore.HealthChecks.IbmMQ&#xA;Install-Package AspNetCore.HealthChecks.Kafka&#xA;Install-Package AspNetCore.HealthChecks.Kubernetes&#xA;Install-Package AspNetCore.HealthChecks.MongoDb&#xA;Install-Package AspNetCore.HealthChecks.MySql&#xA;Install-Package AspNetCore.HealthChecks.Nats&#xA;Install-Package AspNetCore.HealthChecks.Network&#xA;Install-Package AspNetCore.HealthChecks.Npgsql&#xA;Install-Package AspNetCore.HealthChecks.OpenIdConnectServer&#xA;Install-Package AspNetCore.HealthChecks.Oracle&#xA;Install-Package AspNetCore.HealthChecks.RabbitMQ&#xA;Install-Package AspNetCore.HealthChecks.RavenDB&#xA;Install-Package AspNetCore.HealthChecks.Redis&#xA;Install-Package AspNetCore.HealthChecks.SendGrid&#xA;Install-Package AspNetCore.HealthChecks.SignalR&#xA;Install-Package AspNetCore.HealthChecks.Solr&#xA;Install-Package AspNetCore.HealthChecks.SqLite&#xA;Install-Package AspNetCore.HealthChecks.SqlServer&#xA;Install-Package AspNetCore.HealthChecks.System&#xA;Install-Package AspNetCore.HealthChecks.Uris&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the package is installed you can add the HealthCheck using the &lt;strong&gt;AddXXX&lt;/strong&gt; &lt;code&gt;IServiceCollection&lt;/code&gt; extension methods.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We use &lt;a href=&#34;https://www.myget.org/F/xabaril/api/v3/index.json&#34;&gt;MyGet&lt;/a&gt; feed for preview versions of HealthChecks packages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)&#xA;{&#xA;    services.AddHealthChecks()&#xA;        .AddSqlServer(Configuration[&#34;Data:ConnectionStrings:Sql&#34;])&#xA;        .AddRedis(Configuration[&#34;Data:ConnectionStrings:Redis&#34;]);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each HealthCheck registration supports also name, tags, failure status and other optional parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)&#xA;{&#xA;    services&#xA;        .AddHealthChecks()&#xA;        .AddSqlServer(&#xA;            connectionString: Configuration[&#34;Data:ConnectionStrings:Sql&#34;],&#xA;            healthQuery: &#34;SELECT 1;&#34;,&#xA;            name: &#34;sql&#34;,&#xA;            failureStatus: HealthStatus.Degraded,&#xA;            tags: new string[] { &#34;db&#34;, &#34;sql&#34;, &#34;sqlserver&#34; });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HealthCheck push results&lt;/h2&gt; &#xA;&lt;p&gt;HealthChecks include a &lt;em&gt;push model&lt;/em&gt; to send HealthCheckReport results into configured consumers. The project &lt;strong&gt;AspNetCore.HealthChecks.Publisher.ApplicationInsights&lt;/strong&gt;, &lt;strong&gt;AspNetCore.HealthChecks.Publisher.Datadog&lt;/strong&gt;, &lt;strong&gt;AspNetCore.HealthChecks.Publisher.Prometheus&lt;/strong&gt;, &lt;strong&gt;AspNetCore.HealthChecks.Publisher.Seq&lt;/strong&gt; or &lt;strong&gt;AspNetCore.HealthChecks.Publisher.CloudWatch&lt;/strong&gt; define a consumers to send report results to Application Insights, Datadog, Prometheus, Seq or CloudWatch.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Downloads&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Application Insights&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Publisher.ApplicationInsights&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Publisher.ApplicationInsights&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CloudWatch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Publisher.CloudWatch&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Publisher.CloudWatch&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Datadog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Publisher.Datadog&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Publisher.Datadog&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prometheus Gateway&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Publisher.Prometheus&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Publisher.Prometheus&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DEPRECATED&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Seq&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.Publisher.Seq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.Publisher.Seq&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Include the package in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;install-package AspNetcore.HealthChecks.Publisher.ApplicationInsights&#xA;install-package AspNetcore.HealthChecks.Publisher.CloudWatch&#xA;install-package AspNetcore.HealthChecks.Publisher.Datadog&#xA;install-package AspNetcore.HealthChecks.Publisher.Prometheus&#xA;install-package AspNetcore.HealthChecks.Publisher.Seq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add publisher[s] into the &lt;code&gt;IHealthCheckBuilder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecks()&#xA;    .AddSqlServer(connectionString: Configuration[&#34;Data:ConnectionStrings:Sample&#34;])&#xA;    .AddCheck&amp;lt;RandomHealthCheck&amp;gt;(&#34;random&#34;)&#xA;    .AddApplicationInsightsPublisher()&#xA;    .AddCloudWatchPublisher()&#xA;    .AddDatadogPublisher(&#34;myservice.healthchecks&#34;)&#xA;    .AddPrometheusGatewayPublisher();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HealthChecks Prometheus Exporter&lt;/h2&gt; &#xA;&lt;p&gt;If you need an endpoint to consume from prometheus instead of using Prometheus Gateway you could install &lt;strong&gt;AspNetCore.HealthChecks.Prometheus.Metrics&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;install-package AspNetCore.HealthChecks.Prometheus.Metrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;ApplicationBuilder&lt;/code&gt; extension method to add the endpoint with the metrics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// default endpoint: /healthmetrics&#xA;app.UseHealthChecksPrometheusExporter();&#xA;&#xA;// You could customize the endpoint&#xA;app.UseHealthChecksPrometheusExporter(&#34;/my-health-metrics&#34;);&#xA;&#xA;// Customize HTTP status code returned(prometheus will not read health metrics when a default HTTP 503 is returned)&#xA;app.UseHealthChecksPrometheusExporter(&#34;/my-health-metrics&#34;, options =&amp;gt; options.ResultStatusCodes[HealthStatus.Unhealthy] = (int)HttpStatusCode.OK);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HealthCheckUI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/images/ui-home.png&#34; alt=&#34;HealthChecksUI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/ui-changelog.md&#34;&gt;UI Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The project HealthChecks.UI is a minimal UI interface that stores and shows the health checks results from the configured HealthChecks uris.&lt;/p&gt; &#xA;&lt;p&gt;To integrate HealthChecks.UI in your project you just need to add the HealthChecks.UI services and middlewares available in the package: &lt;strong&gt;AspNetCore.HealthChecks.UI&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using HealthChecks.UI.Core;&#xA;using HealthChecks.UI.InMemory.Storage;&#xA;&#xA;public class Startup&#xA;{&#xA;    public void ConfigureServices(IServiceCollection services)&#xA;    {&#xA;        services&#xA;            .AddHealthChecksUI()&#xA;            .AddInMemoryStorage();&#xA;    }&#xA;&#xA;    public void Configure(IApplicationBuilder app, IHostingEnvironment env)&#xA;    {&#xA;        app&#xA;            .UseRouting()&#xA;            .UseEndpoints(config =&amp;gt; config.MapHealthChecksUI());&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This automatically registers a new interface on &lt;strong&gt;/healthchecks-ui&lt;/strong&gt; where the SPA will be served.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Optionally, &lt;code&gt;MapHealthChecksUI&lt;/code&gt; can be configured to serve its health api, webhooks api and the front-end resources in different endpoints using the &lt;code&gt;MapHealthChecksUI(setup =&amp;gt; { })&lt;/code&gt; method overload. Default configured urls for this endpoints can be found &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/raw/master/src/HealthChecks.UI/Configuration/Options.cs&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; It is important to understand that the API endpoint that the UI serves is used by the frontend SPA to receive the result of all processed checks. The health reports are collected by a background hosted service and the API endpoint served at /healthchecks-api by default is the url that the SPA queries.&lt;/p&gt; &#xA;&lt;p&gt;Do not confuse this UI api endpoint with the endpoints we have to configure to declare the target apis to be checked on the UI project in the &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/raw/master/samples/HealthChecks.UI.Sample/appsettings.json&#34;&gt;appsettings HealthChecks configuration section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When we target applications to be tested and shown on the UI interface, those endpoints have to register the &lt;code&gt;UIResponseWriter&lt;/code&gt; that is present on the &lt;strong&gt;AspNetCore.HealthChecks.UI.Client&lt;/strong&gt; as their &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/raw/master/samples/HealthChecks.Sample/Startup.cs#L48&#34;&gt;ResponseWriter in the HealthChecksOptions&lt;/a&gt; when configuring MapHealthChecks method.&lt;/p&gt; &#xA;&lt;h3&gt;UI Polling interval&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the polling interval in seconds for the UI inside the setup method. Default value is 10 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;.AddHealthChecksUI(setupSettings: setup =&amp;gt;&#xA;{&#xA;    setup.SetEvaluationTimeInSeconds(5); // Configures the UI to poll for healthchecks updates every 5 seconds&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI API max active requests&lt;/h3&gt; &#xA;&lt;p&gt;You can configure max active requests to the HealthChecks UI backend api using the setup method. Default value is 3 active requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;.AddHealthChecksUI(setupSettings: setup =&amp;gt;&#xA;{&#xA;    setup.SetApiMaxActiveRequests(1);&#xA;    //Only one active request will be executed at a time.&#xA;    //All the excedent requests will result in 429 (Too many requests)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI Storage Providers&lt;/h3&gt; &#xA;&lt;p&gt;HealthChecks UI offers several storage providers, available as different nuget packages.&lt;/p&gt; &#xA;&lt;p&gt;The current supported databases are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InMemory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.UI.InMemory.Storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.UI.InMemory.Storage&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SqlServer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.UI.SqlServer.Storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.UI.SqlServer.Storage&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.UI.SQLite.Storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.UI.SQLite.Storage&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.UI.PostgreSQL.Storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.UI.PostgreSQL.Storage&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySql&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/AspNetCore.HealthChecks.UI.MySql.Storage&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/AspNetCore.HealthChecks.UI.MySql.Storage&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;All the storage providers are extensions of &lt;code&gt;HealthChecksUIBuilder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;InMemory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI()&#xA;    .AddInMemoryStorage();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sql Server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI()&#xA;    .AddSqlServerStorage(&#34;connectionString&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Postgre SQL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI()&#xA;    .AddPostgreSqlStorage(&#34;connectionString&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;MySql&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI()&#xA;    .AddMySqlStorage(&#34;connectionString&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sqlite&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI()&#xA;    .AddSqliteStorage($&#34;Data Source=sqlite.db&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UI Database Migrations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database Migrations&lt;/strong&gt; are enabled by default, if you need to disable migrations you can use the &lt;code&gt;AddHealthChecksUI&lt;/code&gt; setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI(setup =&amp;gt; setup.DisableDatabaseMigrations())&#xA;    .AddInMemoryStorage();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use &lt;code&gt;IConfiguration&lt;/code&gt; providers, like json file or environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;HealthChecksUI&#34;: {&#xA;  &#34;DisableMigrations&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Health status history timeline&lt;/h3&gt; &#xA;&lt;p&gt;By clicking details button in the healthcheck row you can preview the health status history timeline:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/images/timeline.png&#34; alt=&#34;Timeline&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: HealthChecks UI saves an execution history entry in the database whenever a HealthCheck status changes from Healthy to Unhealthy and viceversa.&lt;/p&gt; &#xA;&lt;p&gt;This information is displayed in the status history timeline but we do not perform purge or cleanup tasks in users databases. In order to limit the maximum history entries that are sent by the UI Api middleware to the frontend you can do a database cleanup or set the maximum history entries served by endpoint using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddHealthChecksUI(setup =&amp;gt;&#xA;{&#xA;    // Set the maximum history entries by endpoint that will be served by the UI api middleware&#xA;    setup.MaximumHistoryEntriesPerEndpoint(50);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;HealthChecksUI&lt;/strong&gt; is also available as a &lt;em&gt;docker image&lt;/em&gt; You can read more about &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/ui-docker.md&#34;&gt;HealthChecks UI Docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;By default HealthChecks returns a simple Status Code (200 or 503) without the HealthReport data. If you want that HealthCheck-UI shows the HealthReport data from your HealthCheck you can enable it adding an specific &lt;code&gt;ResponseWriter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app&#xA;    .UseRouting()&#xA;    .UseEndpoints(config =&amp;gt;&#xA;    {&#xA;        config.MapHealthChecks(&#34;/healthz&#34;, new HealthCheckOptions&#xA;        {&#xA;            Predicate = _ =&amp;gt; true,&#xA;            ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse&#xA;        });&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;WriteHealthCheckUIResponse&lt;/em&gt; is defined on HealthChecks.UI.Client nuget package.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To show these HealthChecks in HealthCheck-UI they have to be configured through the &lt;strong&gt;HealthCheck-UI&lt;/strong&gt; settings.&lt;/p&gt; &#xA;&lt;p&gt;You can configure these Healthchecks and webhooks by using &lt;code&gt;IConfiguration&lt;/code&gt; providers (appsettings, user secrets, env variables) or the &lt;code&gt;AddHealthChecksUI(setupSettings: setup =&amp;gt; { })&lt;/code&gt; method can be used too.&lt;/p&gt; &#xA;&lt;h4&gt;Sample 2: Configuration using appsettings.json&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;HealthChecksUI&#34;: {&#xA;    &#34;HealthChecks&#34;: [&#xA;      {&#xA;        &#34;Name&#34;: &#34;HTTP-Api-Basic&#34;,&#xA;        &#34;Uri&#34;: &#34;http://localhost:6457/healthz&#34;&#xA;      }&#xA;    ],&#xA;    &#34;Webhooks&#34;: [&#xA;      {&#xA;        &#34;Name&#34;: &#34;&#34;,&#xA;        &#34;Uri&#34;: &#34;&#34;,&#xA;        &#34;Payload&#34;: &#34;&#34;,&#xA;        &#34;RestoredPayload&#34;: &#34;&#34;&#xA;      }&#xA;    ],&#xA;    &#34;EvaluationTimeInSeconds&#34;: 10,&#xA;    &#34;MinimumSecondsBetweenFailureNotifications&#34;: 60&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample 2: Configuration using setupSettings method:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services&#xA;    .AddHealthChecksUI(setupSettings: setup =&amp;gt;&#xA;    {&#xA;       setup.AddHealthCheckEndpoint(&#34;endpoint1&#34;, &#34;http://localhost:8001/healthz&#34;);&#xA;       setup.AddHealthCheckEndpoint(&#34;endpoint2&#34;, &#34;http://remoteendpoint:9000/healthz&#34;);&#xA;       setup.AddWebhookNotification(&#34;webhook1&#34;, uri: &#34;http://httpbin.org/status/200?code=ax3rt56s&#34;, payload: &#34;{...}&#34;);&#xA;    })&#xA;    .AddSqlServer(&#34;connectionString&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The previous configuration section was HealthChecks-UI, but due to incompatibilies with Azure Web App environment variables the section has been moved to HealthChecksUI. The UI is retro compatible and it will check the new section first, and fallback to the old section if the new section has not been declared.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.- HealthChecks: The collection of health checks uris to evaluate.&#xA;2.- EvaluationTimeInSeconds: Number of elapsed seconds between health checks.&#xA;3.- Webhooks: If any health check returns a *Failure* result, this collections will be used to notify the error status. (Payload is the json payload and must be escaped. For more information see the notifications documentation section)&#xA;4.- MinimumSecondsBetweenFailureNotifications: The minimum seconds between failure notifications to avoid receiver flooding.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;HealthChecksUI&#34;: {&#xA;    &#34;HealthChecks&#34;: [&#xA;      {&#xA;        &#34;Name&#34;: &#34;HTTP-Api-Basic&#34;,&#xA;        &#34;Uri&#34;: &#34;http://localhost:6457/healthz&#34;&#xA;      }&#xA;    ],&#xA;    &#34;Webhooks&#34;: [&#xA;      {&#xA;        &#34;Name&#34;: &#34;&#34;,&#xA;        &#34;Uri&#34;: &#34;&#34;,&#xA;        &#34;Payload&#34;: &#34;&#34;,&#xA;        &#34;RestoredPayload&#34;: &#34;&#34;&#xA;      }&#xA;    ],&#xA;    &#34;EvaluationTimeInSeconds&#34;: 10,&#xA;    &#34;MinimumSecondsBetweenFailureNotifications&#34;: 60&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using relative urls in Health Checks and Webhooks configurations (UI 3.0.5 onwards)&lt;/h3&gt; &#xA;&lt;p&gt;If you are configuring the UI in the same process where the HealthChecks and Webhooks are listening, from version 3.0.5 onwards the UI can use relative urls and it will automatically discover the listening endpoints by using server &lt;code&gt;IServerAddressesFeature&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//Configuration sample with relative url health checks and webhooks&#xA;services&#xA;    .AddHealthChecksUI(setupSettings: setup =&amp;gt;&#xA;    {&#xA;       setup.AddHealthCheckEndpoint(&#34;endpoint1&#34;, &#34;/health-databases&#34;);&#xA;       setup.AddHealthCheckEndpoint(&#34;endpoint2&#34;, &#34;health-messagebrokers&#34;);&#xA;       setup.AddWebhookNotification(&#34;webhook1&#34;, uri: &#34;/notify&#34;, payload: &#34;{...}&#34;);&#xA;    })&#xA;    .AddSqlServer(&#34;connectionString&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use relative urls when using &lt;code&gt;IConfiguration&lt;/code&gt; providers like appsettings.json.&lt;/p&gt; &#xA;&lt;h3&gt;Webhooks and Failure Notifications&lt;/h3&gt; &#xA;&lt;p&gt;If the &lt;strong&gt;WebHooks&lt;/strong&gt; section is configured, HealthCheck-UI automatically posts a new notification into the webhook collection. HealthCheckUI uses a simple replace method for values in the webhook&#39;s &lt;strong&gt;Payload&lt;/strong&gt; and &lt;strong&gt;RestorePayload&lt;/strong&gt; properties. At this moment we support two bookmarks:&lt;/p&gt; &#xA;&lt;p&gt;[[LIVENESS]] The name of the liveness that returns &lt;em&gt;Down&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[[FAILURE]] A detail message with the failure.&lt;/p&gt; &#xA;&lt;p&gt;[[DESCRIPTIONS]] Failure descriptions&lt;/p&gt; &#xA;&lt;p&gt;Webhooks can be configured with configuration providers and also by code. Using code allows greater customization as you can setup you own user functions to customize output messages or configuring if a payload should be sent to a given webhook endpoint.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/webhooks.md&#34;&gt;web hooks section&lt;/a&gt; contains more information and webhooks samples for Microsoft Teams, Azure Functions, Slack and more.&lt;/p&gt; &#xA;&lt;h2&gt;UI Style and branding customization&lt;/h2&gt; &#xA;&lt;h3&gt;Sample of dotnet styled UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/images/ui-branding.png&#34; alt=&#34;HealthChecksUIBranding&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since version 2.2.34, UI supports custom styles and branding by using a &lt;strong&gt;custom style sheet&lt;/strong&gt; and &lt;strong&gt;css variables&lt;/strong&gt;. To add your custom styles sheet, use the UI setup method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;app&#xA;    .UseRouting()&#xA;    .UseEndpoints(config =&amp;gt;&#xA;    {&#xA;        config.MapHealthChecksUI(setup =&amp;gt;&#xA;        {&#xA;            setup.AddCustomStylesheet(&#34;dotnet.css&#34;);&#xA;        });&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can visit the section &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/styles-branding.md&#34;&gt;custom styles and branding&lt;/a&gt; to find source samples and get further information about custom css properties.&lt;/p&gt; &#xA;&lt;h2&gt;UI Configure HttpClient and HttpMessageHandler for Api and Webhooks endpoints&lt;/h2&gt; &#xA;&lt;p&gt;If you need to configure a proxy, or set an authentication header, the UI allows you to configure the &lt;code&gt;HttpMessageHandler&lt;/code&gt; and the &lt;code&gt;HttpClient&lt;/code&gt; for the webhooks and healtheck api endpoints. You can also register custom delegating handlers for the API and WebHooks HTTP clients.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddHealthChecksUI(setupSettings: setup =&amp;gt;&#xA;{&#xA;    setup.ConfigureApiEndpointHttpclient((sp, client) =&amp;gt;&#xA;    {&#xA;        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(&#34;Bearer&#34;, &#34;supertoken&#34;);&#xA;    })&#xA;    .UseApiEndpointHttpMessageHandler(sp =&amp;gt;&#xA;    {&#xA;        return new HttpClientHandler&#xA;        {&#xA;            Proxy = new WebProxy(&#34;http://proxy:8080&#34;)&#xA;        };&#xA;    })&#xA;    .UseApiEndpointDelegatingHandler&amp;lt;CustomDelegatingHandler&amp;gt;()&#xA;    .ConfigureWebhooksEndpointHttpclient((sp, client) =&amp;gt;&#xA;    {&#xA;        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(&#34;Bearer&#34;, &#34;sampletoken&#34;);&#xA;    })&#xA;    .UseWebhookEndpointHttpMessageHandler(sp =&amp;gt;&#xA;    {&#xA;        return new HttpClientHandler()&#xA;        {&#xA;            Properties =&#xA;            {&#xA;                [&#34;prop&#34;] = &#34;value&#34;&#xA;            }&#xA;        };&#xA;    })&#xA;    .UseWebHooksEndpointDelegatingHandler&amp;lt;CustomDelegatingHandler2&amp;gt;();&#xA;})&#xA;.AddInMemoryStorage();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;UI Kubernetes Operator&lt;/h2&gt; &#xA;&lt;p&gt;If you are running your workloads in kubernetes, you can benefit from it and have your healthchecks environment ready and monitoring in seconds.&lt;/p&gt; &#xA;&lt;p&gt;You can get for information in our &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/k8s-operator.md&#34;&gt;HealthChecks Operator docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;UI Kubernetes automatic services discovery&lt;/h2&gt; &#xA;&lt;!-- ![k8s-discovery](./doc/images/k8s-discovery-service.png) --&gt; &#xA;&lt;p&gt;HealthChecks UI supports automatic discovery of k8s services exposing pods that have health checks endpoints. This means, you can benefit from it and avoid registering all the endpoints you want to check and let the UI discover them using the k8s api.&lt;/p&gt; &#xA;&lt;p&gt;You can get more information &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/k8s-ui-discovery.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;HealthChecks as Release Gates for Azure DevOps Pipelines&lt;/h2&gt; &#xA;&lt;p&gt;HealthChecks can be used as &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/devops/pipelines/release/approvals/gates?view=azure-devops&#34;&gt;Release Gates for Azure DevOps&lt;/a&gt; using this &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=luisfraile.vss-services-aspnetcorehealthcheck-extensions&#34;&gt;Visual Studio Market place Extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check this &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/extensions/README.md&#34;&gt;README&lt;/a&gt; on how to configure it.&lt;/p&gt; &#xA;&lt;h2&gt;Protected HealthChecks.UI with OpendId Connect&lt;/h2&gt; &#xA;&lt;p&gt;There are some scenarios where you can find useful to restrict access for users on HealthChecks UI, maybe for users who belong to some role, based on some claim value etc.&lt;/p&gt; &#xA;&lt;p&gt;We can leverage the ASP.NET Core Authentication/Authorization features to easily implement it. You can see a fully functional example using IdentityServer4 &lt;a href=&#34;https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/tree/master/samples/HealthChecks.UI.Oidc&#34;&gt;here&lt;/a&gt; but you can use Azure AD, Auth0, Okta, etc.&lt;/p&gt; &#xA;&lt;p&gt;Check this &lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/extensions/README.md&#34;&gt;README&lt;/a&gt; on how to configure it.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials, demos and walkthroughs on ASP.NET Core HealthChecks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/master/doc/kubernetes-liveness.md&#34;&gt;ASP.NET Core HealthChecks and Kubernetes Liveness / Readiness by Carlos Landeras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kzRKGCmGbqo&#34;&gt;ASP.NET Core HealthChecks, BeatPulse UI, Webhooks and Kubernetes Liveness / Readiness probes demos at SDN.nl live WebCast by Carlos Landeras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.co/YriQ6cLWVm&#34;&gt;ASP.NET Core HealthChecks features video by @condrong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hanselman.com/blog/HowToSetUpASPNETCore22HealthChecksWithBeatPulsesAspNetCoreDiagnosticsHealthChecks.aspx&#34;&gt;How to set up ASP.NET Core 2.2 Health Checks with BeatPulse&#39;s AspNetCore.Diagnostics.HealthChecks by Scott Hanselman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.co/47M9FBfpWF&#34;&gt;ASP.NET Core HealthChecks announcement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.elmah.io/asp-net-core-2-2-health-checks-explained/&#34;&gt;ASP.NET Core 2.2 HealthChecks Explained by Thomas Ardal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/implement-resilient-applications/monitor-app-health&#34;&gt;Health Monitoring on ASP.NET Core 2.2 / eShopOnContainers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;AspNetCore.Diagnostics.HealthChecks wouldn&#39;t be possible without the time and effort of its contributors. The team is made up of Unai Zorrilla Castro &lt;a href=&#34;https://github.com/unaizorrilla&#34;&gt;@unaizorrilla&lt;/a&gt;, Luis Ruiz PavÃ³n &lt;a href=&#34;https://github.com/lurumad&#34;&gt;@lurumad&lt;/a&gt;, Carlos Landeras &lt;a href=&#34;https://github.com/carloslanderas&#34;&gt;@carloslanderas&lt;/a&gt;, Eduard TomÃ¡s &lt;a href=&#34;https://github.com/eiximenis&#34;&gt;@eiximenis&lt;/a&gt; and Eva Crespo &lt;a href=&#34;https://github.com/evacrespob&#34;&gt;@evacrespob&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Our valued committers are&lt;/em&gt;: Hugo Biarge @hbiarge, Matt Channer @mattchanner, Luis Fraile @lfraile, Bradley Grainger @bgrainger, Simon Birrer @SbiCA, Mahamadou Camara @poumup, Jonathan Berube @joncloud, Daniel Edwards @dantheman999301, Mike McFarland @roketworks, Matteo @Franklin89, MiÅo Martiniak @Burgyn, Peter Winkler @pajzo, @mikevanoo,Alexandru Rus @AlexandruRus23,Volker Thiel @riker09, Ahmad Magdy @Ahmad-Magdy, Marcel Lambacher @Marcel-Lambacher, Ivan Maximov @sungam3r, David Bottiau @odonno,ZeWizard @zeWizard, Ruslan Popovych @rpopovych, @jnovick, Marcos Palacios @mpcmarcos, Gerard Godone-Maresca @ggmaresca, Facundo @fglaeser, Daniel NordstrÃ¶m @SpaceOgre, @mphelt&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to the project and make it better, your help is very welcome. You can contribute with helpful bug reports, features requests and also submitting new features with pull requests.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Read and follow the &lt;a href=&#34;https://www.igvita.com/2011/12/19/dont-push-your-pull-requests/&#34;&gt;Don&#39;t push your pull requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the code guidelines and conventions.&lt;/li&gt; &#xA; &lt;li&gt;New features are not only code, tests and documentation are also mandatory.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>