<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-22T01:29:42Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cysharp/Ulid</title>
    <updated>2024-07-22T01:29:42Z</updated>
    <id>tag:github.com,2024-07-22:/Cysharp/Ulid</id>
    <link href="https://github.com/Cysharp/Ulid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast .NET C# Implementation of ULID for .NET and Unity.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ulid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Cysharp/Ulid/actions&#34;&gt;&lt;img src=&#34;https://github.com/Cysharp/Ulid/workflows/Build-Debug/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cysharp/Ulid/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Cysharp/Ulid.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fast C# Implementation of &lt;a href=&#34;https://github.com/ulid/spec&#34;&gt;ULID&lt;/a&gt; for .NET Core and Unity. Ulid is sortable, random id generator. This project aims performance by fastest binary serializer(&lt;a href=&#34;https://github.com/neuecc/MessagePack-CSharp/&#34;&gt;MessagePack-CSharp&lt;/a&gt;) technology. It achives faster generate than Guid.NewGuid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/55129636-266c0d00-515b-11e9-85ab-3437de539451.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;NuGet: &lt;a href=&#34;https://www.nuget.org/packages/Ulid&#34;&gt;Ulid&lt;/a&gt; or download .unitypackage from &lt;a href=&#34;https://github.com/Cysharp/Ulid/releases&#34;&gt;Ulid/Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Install-Package Ulid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/Ulid/master/#how-to-use&#34;&gt;How to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/Ulid/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/Ulid/master/#cli&#34;&gt;Cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/Ulid/master/#integrate&#34;&gt;Integrate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cysharp/Ulid/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Similar api to Guid.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ulid.NewUlid()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ulid.Parse()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ulid.TryParse()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new Ulid()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ToString()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ToByteArray()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.TryWriteBytes()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.TryWriteStringify()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ToBase64()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.Time&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.Random&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Allow to convert Guid.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.ToGuid()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(Guid)ulid&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Guid&lt;/code&gt; is standard corelib guid. &lt;code&gt;Ulid&lt;/code&gt; is this library. &lt;code&gt;NUlid&lt;/code&gt; is competitor &lt;a href=&#34;https://github.com/RobThree/NUlid&#34;&gt;RobThree/NUlid&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;73.13 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;65.41 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.89&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;209.89 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.87&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0162&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;104 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;Ulid.NewUlid()&lt;/code&gt; is faster than &lt;code&gt;Guid.NewGuid()&lt;/code&gt; and zero allocation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parse&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;197.98 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;28.67 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;161.03 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.81&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0441&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;280 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;from string(Base32) to ulid, &lt;code&gt;Ulid.Parse(string)&lt;/code&gt; is fastest and zero allocation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ToString&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;57.73 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0163&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;104 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;38.77 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.67&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0126&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;80 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;96.76 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.68&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0583&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;368 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;to string representation(Base32), &lt;code&gt;Ulid.ToString()&lt;/code&gt; is fastest and less allocation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NewId().ToString()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;205.7 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0162&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;104 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;110.2 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.54&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0125&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;80 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;301.7 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.47&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0744&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;472 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;case of get the string representation immediately, &lt;code&gt;Ulid&lt;/code&gt; is twice faster than Guid.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GetHashCode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.9706 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.0329 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.06&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20.6175 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21.24&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0063&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;GetHashCode is called when use dictionary&#39;s key. &lt;code&gt;Ulid&lt;/code&gt; is fast and zero allocation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Equals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.819 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.023 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.11&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;29.875 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16.43&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0126&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;80 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Equals is called when use dictionary&#39;s key. &lt;code&gt;Ulid&lt;/code&gt; is fast and zero allocation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CompareTo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Error&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Ratio&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 0/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 1/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Gen 2/1k Op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Allocated Memory/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Guid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.409 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.00&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ulid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.838 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.71&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUlid_&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17.126 ns&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3.17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0063&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40 B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;CompareTo is called when use sort. &lt;code&gt;Ulid&lt;/code&gt; is fastest and zero allocation.&lt;/p&gt; &#xA;&lt;h2&gt;Cli&lt;/h2&gt; &#xA;&lt;p&gt;You can install command-line to generate ulid string by .NET Core Global Tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dotnet tool install --global ulid-cli&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;after installed, you can call like here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dotnet ulid&#xA;01D7CB31YQKCJPY9FDTN2WTAFF&#xA;&#xA;$ dotnet ulid -t &#34;2019/03/25&#34; -min&#xA;01D6R3EBC00000000000000000&#xA;&#xA;$ dotnet ulid -t &#34;2019/03/25&#34; -max&#xA;01D6R3EBC0ZZZZZZZZZZZZZZZZ&#xA;&#xA;$ dotnet ulid -t &#34;2019/03/25&#34; -max -base64&#xA;AWmwNy2A/////////////w==&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;argument list:&#xA;-t, -timestamp: [default=null]timestamp(converted to UTC, ISO8601 format recommended)&#xA;-r, -randomness: [default=null]randomness bytes(formatted as Base32, must be 16 characters, case insensitive)&#xA;-b, -base64: [default=False]output as base64 format, or output base32 if false&#xA;-min, -minRandomness: [default=False]min-randomness(use 000...)&#xA;-max, -maxRandomness: [default=False]max-randomness(use ZZZ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This CLI tool is powered by &lt;a href=&#34;https://github.com/Cysharp/ConsoleAppFramework/&#34;&gt;ConsoleAppFramework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integrate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;System.Text.Json&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;NuGet: &lt;a href=&#34;https://www.nuget.org/packages/Ulid.SystemTextJson&#34;&gt;Ulid.SystemTextJson&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use custom Ulid converter - &lt;code&gt;Cysharp.Serialization.Json.UlidJsonConverter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var options = new JsonSerializerOptions()&#xA;{&#xA;    Converters =&#xA;    {&#xA;        new Cysharp.Serialization.Json.UlidJsonConverter()&#xA;    }&#xA;};&#xA;&#xA;JsonSerializer.Serialize(Ulid.NewUlid(), options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If application targetframework is &lt;code&gt;netcoreapp3.0&lt;/code&gt;, converter is builtin, does not require to add &lt;code&gt;Ulid.SystemTextJson&lt;/code&gt; package, and does not require use custom options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MessagePack-CSharp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;NuGet: &lt;a href=&#34;https://www.nuget.org/packages/Ulid.MessagePack&#34;&gt;Ulid.MessagePack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use custom Ulid formatter - &lt;code&gt;Cysharp.Serialization.MessagePack.UlidMessagePackFormatter&lt;/code&gt; and resolver - &lt;code&gt;Cysharp.Serialization.MessagePack.UlidMessagePackResolver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var resolver = MessagePack.Resolvers.CompositeResolver.Create(&#xA;    Cysharp.Serialization.MessagePack.UlidMessagePackResolver.Instance,&#xA;    MessagePack.Resolvers.StandardResolver.Instance);&#xA;var options = MessagePackSerializerOptions.Standard.WithResolver(resolver);&#xA;&#xA;MessagePackSerializer.Serialize(Ulid.NewUlid(), options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use this custom formatter on Unity, download &lt;a href=&#34;https://github.com/Cysharp/Ulid/raw/master/src/Ulid.MessagePack/UlidMessagePackFormatter.cs&#34;&gt;UlidMessagePackFormatter.cs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dapper&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/StackExchange/Dapper&#34;&gt;Dapper&lt;/a&gt; or other ADO.NET database mapper, register custom converter from Ulid to binary or Ulid to string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class BinaryUlidHandler : TypeHandler&amp;lt;Ulid&amp;gt;&#xA;{&#xA;    public override Ulid Parse(object value)&#xA;    {&#xA;        return new Ulid((byte[])value);&#xA;    }&#xA;&#xA;    public override void SetValue(IDbDataParameter parameter, Ulid value)&#xA;    {&#xA;        parameter.DbType = DbType.Binary;&#xA;        parameter.Size = 16;&#xA;        parameter.Value = value.ToByteArray();&#xA;    }&#xA;}&#xA;&#xA;public class StringUlidHandler : TypeHandler&amp;lt;Ulid&amp;gt;&#xA;{&#xA;    public override Ulid Parse(object value)&#xA;    {&#xA;        return Ulid.Parse((string)value);&#xA;    }&#xA;&#xA;    public override void SetValue(IDbDataParameter parameter, Ulid value)&#xA;    {&#xA;        parameter.DbType = DbType.StringFixedLength;&#xA;        parameter.Size = 26;&#xA;        parameter.Value = value.ToString();&#xA;    }&#xA;}&#xA;&#xA;// setup handler&#xA;Dapper.SqlMapper.AddTypeHandler(new BinaryUlidHandler());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Entity Framework Core&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;to use in EF, create ValueConverter and bind it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class UlidToBytesConverter : ValueConverter&amp;lt;Ulid, byte[]&amp;gt;&#xA;{&#xA;    private static readonly ConverterMappingHints defaultHints = new ConverterMappingHints(size: 16);&#xA;&#xA;    public UlidToBytesConverter() : this(null)&#xA;    {&#xA;    }&#xA;&#xA;    public UlidToBytesConverter(ConverterMappingHints mappingHints = null)&#xA;        : base(&#xA;                convertToProviderExpression: x =&amp;gt; x.ToByteArray(),&#xA;                convertFromProviderExpression: x =&amp;gt; new Ulid(x),&#xA;                mappingHints: defaultHints.With(mappingHints))&#xA;    {&#xA;    }&#xA;}&#xA;&#xA;public class UlidToStringConverter : ValueConverter&amp;lt;Ulid, string&amp;gt;&#xA;{&#xA;    private static readonly ConverterMappingHints defaultHints = new ConverterMappingHints(size: 26);&#xA;&#xA;    public UlidToStringConverter() : this(null)&#xA;    {&#xA;    }&#xA;&#xA;    public UlidToStringConverter(ConverterMappingHints mappingHints = null)&#xA;        : base(&#xA;                convertToProviderExpression: x =&amp;gt; x.ToString(),&#xA;                convertFromProviderExpression: x =&amp;gt; Ulid.Parse(x),&#xA;                mappingHints: defaultHints.With(mappingHints))&#xA;    {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use those converters, you can either specify individual properties of entities in &lt;code&gt;OnModelCreating&lt;/code&gt; method of your context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;protected override void OnModelCreating(ModelBuilder modelBuilder)&#xA;{&#xA;    modelBuilder.Entity&amp;lt;MyEntity&amp;gt;()&#xA;        .Property(e =&amp;gt; e.MyProperty)&#xA;        .HasConversion&amp;lt;UlidToStringConverter&amp;gt;()&#xA;        .HasConversion&amp;lt;UlidToBytesConverter&amp;gt;();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use model bulk configuration for all properties of type &lt;code&gt;Ulid&lt;/code&gt;. To do this, overload &lt;code&gt;ConfigureConventions&lt;/code&gt; method of your context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)&#xA;{&#xA;    configurationBuilder&#xA;        .Properties&amp;lt;Ulid&amp;gt;()&#xA;        .HaveConversion&amp;lt;UlidToStringConverter&amp;gt;()&#xA;        .HaveConversion&amp;lt;UlidToBytesConverter&amp;gt;();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is under the MIT License.&lt;/p&gt;</summary>
  </entry>
</feed>