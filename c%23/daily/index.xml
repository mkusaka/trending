<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-03T01:25:46Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wolfgarbe/PruningRadixTrie</title>
    <updated>2023-10-03T01:25:46Z</updated>
    <id>tag:github.com,2023-10-03:/wolfgarbe/PruningRadixTrie</id>
    <link href="https://github.com/wolfgarbe/PruningRadixTrie" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PruningRadixTrie - 1000x faster Radix trie for prefix search &amp; auto-complete&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PruningRadixTrie&lt;br&gt; &lt;a href=&#34;https://github.com/wolfgarbe/PruningRadixTrie/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/wolfgarbe/pruningradixtrie.png&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;PruningRadixTrie - 1000x faster Radix trie&lt;/strong&gt; for prefix search &amp;amp; auto-complete&lt;/p&gt; &#xA;&lt;p&gt;The PruningRadixTrie is a novel data structure, derived from a radix trie - but 3 orders of magnitude faster.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_tree&#34;&gt;Radix Trie&lt;/a&gt; or Patricia Trie is a space-optimized trie (prefix tree).&lt;br&gt; A &lt;strong&gt;Pruning Radix trie&lt;/strong&gt; is a novel Radix trie algorithm, that allows pruning of the Radix trie and early termination of the lookup.&lt;/p&gt; &#xA;&lt;p&gt;In many cases, we are not interested in a complete set of all children for a given prefix, but only in the top-k most relevant terms. Especially for short prefixes, this results in a &lt;strong&gt;massive reduction of lookup time&lt;/strong&gt; for the top-10 results. On the other hand, a complete result set of millions of suggestions wouldn&#39;t be helpful at all for autocompletion.&lt;br&gt;&lt;br&gt; The lookup acceleration is achieved by storing in each node the maximum rank of all its children. By comparing this maximum child rank with the lowest rank of the results retrieved so far, we can heavily prune the trie and do early termination of the lookup for non-promising branches with low child ranks.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*HauBPEDRiwyQJ77OuJOj3g.png&#34; alt=&#34;Benchmark&#34; title=&#34;Benchmark&#34;&gt; &lt;br&gt;&lt;br&gt; The &lt;strong&gt;Pruning Radix Trie&lt;/strong&gt; is up to &lt;strong&gt;1000x faster&lt;/strong&gt; than an ordinary Radix Trie.&lt;/p&gt; &#xA;&lt;p&gt;While 36 ms for an autocomplete might seem fast enough for a single user, it becomes insufficient when we have to serve thousands of users in parallel. Then autocomplete lookups in large dictionaries are only feasible when powered by something much faster than an ordinary radix trie.&lt;/p&gt; &#xA;&lt;p&gt;While a prefix of length=1 is not very useful for the Latin alphabet, it does make sense for CJK languages. Also, there are many more application fields for a fast prefix search algorithm beyond character-wise word completion: Instead of characters, the prefix can be composed of arbitrary items, e.g. whole words in a query completion, or towns in a long routing sequence.&lt;/p&gt; &#xA;&lt;h3&gt;Dictionary&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wolfgarbe/PruningRadixTrie/raw/master/PruningRadixTrie.Benchmark/terms.zip&#34;&gt;Terms.txt&lt;/a&gt; contains 6 million unigrams and bigrams derived from English Wikipedia, with term frequency counts used for ranking. But you can use any frequency dictionary for any language and domain of your choice.&lt;/p&gt; &#xA;&lt;h3&gt;Blog Posts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://seekstorm.com/blog/pruning-radix-trie/&#34;&gt;The Pruning Radix Trie â€” a Radix trie on steroids&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://seekstorm.com/blog/1000x-spelling-correction/&#34;&gt;1000x Faster Spelling Correction algorithm&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://seekstorm.com/blog/symspell-vs-bk-tree/&#34;&gt;SymSpell vs. BK-tree: 100x faster fuzzy string search &amp;amp; spell checking&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Application:&lt;/h3&gt; &#xA;&lt;p&gt;The PruningRadixTrie is perfect for auto-completion, query completion or any other prefix search in large dictionaries. While 37 ms for an auto-complete might seem fast enough for a &lt;strong&gt;single user&lt;/strong&gt;, it becomes a completely different story if we have to serve &lt;strong&gt;thousands of users in parallel&lt;/strong&gt;. Then autocomplete lookups in large dictionaries become only feasible when powered by something much faster than an ordinary radix trie.&lt;/p&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create Object&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PruningRadixtrie pruningRadixTrie = new PruningRadixtrie();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;AddTerm:&lt;/strong&gt; insert term and term frequency count into Pruning Radix Trie. Frequency counts for same term are summed up.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pruningRadixTrie.AddTerm(&#34;microsoft&#34;, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;GetTopkTermsForPrefix:&lt;/strong&gt; retrieve the top-k most relevant terms for a given prefix from the Pruning Radix Trie.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;string prefix=&#34;micro&#34;;&#xA;int topK=10;&#xA;var results = pruningRadixTrie.GetTopkTermsForPrefix(prefix, topK, out long termFrequencyCountPrefix);&#xA;foreach ((string term,long termFrequencyCount) in results) Console.WriteLine(term+&#34; &#34;+termFrequencyCount);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ReadTermsFromFile:&lt;/strong&gt; Deserialise the Pruning Radix Trie from disk for persistence.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pruningRadixTrie.ReadTermsFromFile(&#34;terms.txt&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WriteTermsToFile:&lt;/strong&gt; Serialise the Pruning Radix Trie to disk for persistence.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pruningRadixTrie.WriteTermsToFile(&#34;terms.txt&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ports&lt;/h3&gt; &#xA;&lt;p&gt;The following third party ports or reimplementations to other programming languages have not been tested by myself whether they are an exact port, error free, provide identical results or are as fast as the original algorithm.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/benldr/JPruningRadixTrie&#34;&gt;https://github.com/benldr/JPruningRadixTrie&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/otto-de/PyPruningRadixTrie&#34;&gt;https://github.com/otto-de/PyPruningRadixTrie&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/peterall/pruning_radix_trie&#34;&gt;https://github.com/peterall/pruning_radix_trie&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;PruningRadixTrie&lt;/strong&gt; is contributed by &lt;a href=&#34;https://seekstorm.com&#34;&gt;&lt;strong&gt;SeekStorm&lt;/strong&gt; - the high performance Search as a Service &amp;amp; search API&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ai-tradingbot/AI-Trading-Bot</title>
    <updated>2023-10-03T01:25:46Z</updated>
    <id>tag:github.com,2023-10-03:/ai-tradingbot/AI-Trading-Bot</id>
    <link href="https://github.com/ai-tradingbot/AI-Trading-Bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;State-of-the-art AI trading bot. Enjoy automated trading with precision&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introducing the Future of Financial Trading: The AI-Powered Crypto/Forex/Stock Trading Bot&lt;/h1&gt; &#xA;&lt;h3&gt;Download here: &lt;a href=&#34;https://github.com/ai-tradingbot/AI-Trading-Bot/releases/tag/v1.10&#34;&gt;https://github.com/ai-tradingbot/AI-Trading-Bot/releases/tag/v1.10&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Revolutionize your trading experience with our cutting-edge AI-powered trading bot, the ultimate solution for crypto, forex, and stock markets. Harnessing the power of artificial intelligence, this trading bot is designed to elevate your trading game to new heights. Here&#39;s why it&#39;s a game-changer:&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Intelligent Automation:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Our AI trading bot is equipped with state-of-the-art machine learning algorithms that analyze market data in real-time. It constantly adapts to changing market conditions, making it the ideal trading companion for both novice and experienced traders.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Universal Compatibility:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Whether you prefer cryptocurrency exchanges, forex platforms, or stock brokerages, our trading bot is adaptable to any trading environment. It seamlessly integrates with a wide range of exchanges and brokerages, ensuring you can trade where you feel most comfortable.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;User-Friendly Setup:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Setting up your trading bot has never been easier. With a user-friendly interface and step-by-step guidance, you can configure your bot to match your preferences and risk tolerance within minutes. No complex coding or technical expertise required.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Customizable Strategies:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;One of the standout features of our trading bot is its ability to accommodate your unique trading strategies. Tailor the bot to follow your preferred trading rules and indicators. Whether you&#39;re a day trader, swing trader, or long-term investor, our bot adapts to your style.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Risk Management:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The trading bot includes advanced risk management tools to protect your investments. You can set stop-loss orders, take-profit levels, and risk-per-trade limits to ensure your trading remains within your desired risk parameters.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;24/7 Trading:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Forget about monitoring the markets round the clock. Our AI-powered bot tirelessly executes your strategies 24/7, taking advantage of trading opportunities even while you sleep.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Real-time Insights:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Stay informed with real-time market insights and performance analytics. The bot provides detailed reports on your trading activity, helping you make data-driven decisions to optimize your strategies.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Security First:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Your security is paramount. We&#39;ve implemented robust security measures to safeguard your trading accounts and personal information. Rest assured that your assets are protected against any potential threats.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Continuous Updates:&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;As the financial markets evolve, so does our trading bot. We provide regular updates and improvements to ensure it remains at the forefront of technological advancements, helping you stay ahead of the curve.&lt;/p&gt; &#xA;&lt;h3&gt;Whether you&#39;re a seasoned trader looking to automate your strategies or a newcomer eager to explore the world of trading, our AI-powered trading bot is your ideal companion. Take control of your financial future and experience the next generation of trading technology. Join us today and unlock the potential of AI-driven trading like never before.&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>Kir-Antipov/HotAvalonia</title>
    <updated>2023-10-03T01:25:46Z</updated>
    <id>tag:github.com,2023-10-03:/Kir-Antipov/HotAvalonia</id>
    <link href="https://github.com/Kir-Antipov/HotAvalonia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”¥ Supercharge your Avalonia development experience with hot reload capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HotAvalonia&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kir-Antipov/HotAvalonia/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/Kir-Antipov/HotAvalonia/build.yml?style=flat&amp;amp;logo=github&amp;amp;cacheSeconds=3600&#34; alt=&#34;GitHub Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kir-Antipov/HotAvalonia/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Kir-Antipov/HotAvalonia?sort=date&amp;amp;style=flat&amp;amp;label=version&amp;amp;cacheSeconds=3600&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Kir-Antipov/HotAvalonia/raw/HEAD/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Kir-Antipov/HotAvalonia?style=flat&amp;amp;cacheSeconds=36000&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;HotAvalonia Icon&#34; src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/icon.png&#34; width=&#34;128&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;HotAvalonia&lt;/code&gt; is a .NET library crafted to seamlessly integrate hot reload functionality into Avalonia applications. Acting as a transformative tool for Avalonia developers, it enables dynamic and instantaneous updates to XAML without the need for full recompilation. This empowers developers to witness UI changes in real-time, accelerating the design and development workflow.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;NuGet Packages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Package&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Latest Version&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HotAvalonia&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nuget.org/packages/HotAvalonia/&#34; title=&#34;Download HotAvalonia from NuGet.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/HotAvalonia?style=flat&amp;amp;logo=nuget&amp;amp;label=nuget&amp;amp;cacheSeconds=3600&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HotAvalonia.Extensions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://nuget.org/packages/HotAvalonia.Extensions/&#34; title=&#34;Download HotAvalonia.Extensions from NuGet.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/HotAvalonia.Extensions?style=flat&amp;amp;logo=nuget&amp;amp;label=nuget&amp;amp;cacheSeconds=3600&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To get started, you&#39;ll need to add the following three packages to your project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuget.org/packages/Avalonia.Markup.Xaml.Loader/&#34;&gt;Avalonia.Markup.Xaml.Loader&lt;/a&gt; - The official Avalonia package responsible for runtime XAML parsing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuget.org/packages/HotAvalonia/&#34;&gt;HotAvalonia&lt;/a&gt; - The package that integrates hot reload functionality into your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuget.org/packages/HotAvalonia.Extensions/&#34;&gt;HotAvalonia.Extensions&lt;/a&gt; - The package that provides &lt;code&gt;.EnableHotReload()&lt;/code&gt; and &lt;code&gt;.DisableHotReload()&lt;/code&gt; extension methods for greater convenience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While you could use the &lt;code&gt;dotnet add&lt;/code&gt; command to accomplish this, I would strongly recommend a more manual yet flexible approach - insert the following snippet into your &lt;code&gt;.csproj&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PropertyGroup Condition=&#34;&#39;$(Configuration)&#39; == &#39;Debug&#39;&#34;&amp;gt;&#xA;  &amp;lt;DefineConstants&amp;gt;$(DefineConstants);ENABLE_XAML_HOT_RELOAD&amp;lt;/DefineConstants&amp;gt;&#xA;&amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;&amp;lt;ItemGroup&amp;gt;&#xA;  &amp;lt;PackageReference Condition=&#34;$(DefineConstants.Contains(ENABLE_XAML_HOT_RELOAD))&#34; Include=&#34;Avalonia.Markup.Xaml.Loader&#34; Version=&#34;$(AvaloniaVersion)&#34; /&amp;gt;&#xA;  &amp;lt;PackageReference Condition=&#34;$(DefineConstants.Contains(ENABLE_XAML_HOT_RELOAD))&#34; Include=&#34;HotAvalonia&#34; Version=&#34;1.0.0&#34; /&amp;gt;&#xA;  &amp;lt;PackageReference Include=&#34;HotAvalonia.Extensions&#34; Version=&#34;1.0.0&#34; PrivateAssets=&#34;All&#34; /&amp;gt;&#xA;&amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to replace &lt;code&gt;$(AvaloniaVersion)&lt;/code&gt; with the version of Avalonia you&#39;re currently using; in other words, &lt;code&gt;Avalonia.Markup.Xaml.Loader&lt;/code&gt; should match the main &lt;code&gt;Avalonia&lt;/code&gt; package&#39;s version. You may also update &lt;code&gt;HotAvalonia&lt;/code&gt; and &lt;code&gt;HotAvalonia.Extensions&lt;/code&gt; to their latest compatible versions.&lt;/p&gt; &#xA;&lt;p&gt;In the snippet above, we introduce a new preprocessor directive - &lt;code&gt;ENABLE_XAML_HOT_RELOAD&lt;/code&gt;. It is responsible for activating hot reload capabilities. Here the directive is defined whenever the project is compiled using the Debug configuration, but you can set your own conditions for its activation. Also, if you wish to deactivate hot reload even when &lt;code&gt;ENABLE_XAML_HOT_RELOAD&lt;/code&gt; might be present, define &lt;code&gt;DISABLE_XAML_HOT_RELOAD&lt;/code&gt;, which will override the former directive.&lt;/p&gt; &#xA;&lt;p&gt;Next, we reference the necessary packages mentioned above. &lt;code&gt;Avalonia.Markup.Xaml.Loader&lt;/code&gt; and &lt;code&gt;HotAvalonia&lt;/code&gt; are required only when hot reload is active, so they are included solely when the &lt;code&gt;ENABLE_XAML_HOT_RELOAD&lt;/code&gt; directive is present. &lt;code&gt;HotAvalonia.Extensions&lt;/code&gt; is unique in that matter, since it provides the methods we need always to be accessible, so we just mark it as a development-only dependency.&lt;/p&gt; &#xA;&lt;p&gt;This setup &lt;strong&gt;guarantees&lt;/strong&gt; that no hot reload logic will infiltrate the production version of your app. All calls to &lt;code&gt;HotAvalonia&lt;/code&gt; will be automatically and completely eradicated from the Release builds, as can be seen below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Debug&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Release&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/build_debug.png&#34; alt=&#34;Debug build&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/build_release.png&#34; alt=&#34;Release build&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Once you have installed all the necessary dependencies, it&#39;s time to unlock the hot reload capabilities for your app. Fortunately, this process is quite straightforward!&lt;/p&gt; &#xA;&lt;p&gt;Typically, the code of the main application class (&lt;code&gt;App.axaml.cs&lt;/code&gt; / &lt;code&gt;App.xaml.cs&lt;/code&gt;) looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Avalonia;&#xA;using Avalonia.Controls.ApplicationLifetimes;&#xA;using Avalonia.Markup.Xaml;&#xA;&#xA;namespace HotReloadDemo;&#xA;&#xA;public partial class App : Application&#xA;{&#xA;    public override void Initialize()&#xA;    {&#xA;        AvaloniaXamlLoader.Load(this);&#xA;    }&#xA;&#xA;    public override void OnFrameworkInitializationCompleted()&#xA;    {&#xA;        // ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable hot reload, all you need to do is import the &lt;code&gt;HotAvalonia&lt;/code&gt; namespace and use the &lt;code&gt;.EnableHotReload()&lt;/code&gt; extension method on the &lt;code&gt;App&lt;/code&gt; instance &lt;strong&gt;before&lt;/strong&gt; the &lt;code&gt;AvaloniaXamlLoader.Load(this)&lt;/code&gt; call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  using Avalonia;&#xA;  using Avalonia.Controls.ApplicationLifetimes;&#xA;  using Avalonia.Markup.Xaml;&#xA;+ using HotAvalonia;&#xA;&#xA;  namespace HotReloadDemo;&#xA;&#xA;  public partial class App : Application&#xA;  {&#xA;      public override void Initialize()&#xA;      {&#xA;+         this.EnableHotReload(); // Ensure this line **precedes** `AvaloniaXamlLoader.Load(this);`&#xA;          AvaloniaXamlLoader.Load(this);&#xA;      }&#xA;&#xA;      public override void OnFrameworkInitializationCompleted()&#xA;      {&#xA;          // ...&#xA;      }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this setup, you can debug the app using your IDE&#39;s built-in debugger, run the project with &lt;code&gt;dotnet run&lt;/code&gt;, combine &lt;code&gt;dotnet watch&lt;/code&gt; hot reload capabilities with XAML hot reload provided by HotAvalonia, or simply build the app using &lt;code&gt;dotnet build&lt;/code&gt; and run it as a standalone executable. Either way, you can expect your app to reload whenever one of the source files of your controls changes.&lt;/p&gt; &#xA;&lt;p&gt;If you ever need to temporarily disable hot reload while the app is running, you can call &lt;code&gt;Application.Current.DisableHotReload()&lt;/code&gt;. To resume hot reload, simply call &lt;code&gt;.EnableHotReload()&lt;/code&gt; on &lt;code&gt;Application.Current&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are some examples that demonstrate HotAvalonia in action:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/hot_reload_app.gif&#34; alt=&#34;Hot Reload: App&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/hot_reload_user_control.gif&#34; alt=&#34;Hot Reload: User Control&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/hot_reload_view.gif&#34; alt=&#34;Hot Reload: View&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/hot_reload_styles.gif&#34; alt=&#34;Hot Reload: Styles&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/hot_reload_resources.gif&#34; alt=&#34;Hot Reload: Resources&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Kir-Antipov/HotAvalonia/HEAD/media/examples/hot_reload_window.gif&#34; alt=&#34;Hot Reload: Window&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To try it out yourself, you can run the &lt;a href=&#34;https://github.com/Kir-Antipov/HotAvalonia/raw/HEAD/samples/HotReloadDemo&#34;&gt;&lt;code&gt;samples/HotReloadDemo&lt;/code&gt;&lt;/a&gt; application included in the repository.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;While HotAvalonia is a powerful tool for enhancing your Avalonia development workflow, it does have some limitations to keep in mind:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Code Files (.cs):&lt;/strong&gt; HotAvalonia cannot process &lt;code&gt;.cs&lt;/code&gt; files &lt;em&gt;(or any other code files for that matter)&lt;/em&gt;. Therefore, when you create a new control, typically defined as a pair of &lt;code&gt;.axaml&lt;/code&gt; and &lt;code&gt;.axaml.cs&lt;/code&gt; files, you will need to recompile the project to see the changes take effect. However, existing XAML files can be edited freely without recompilation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;New Assets:&lt;/strong&gt; HotAvalonia does not watch for new assets &lt;em&gt;(such as icons)&lt;/em&gt; being added to the &lt;code&gt;Assets&lt;/code&gt; folder. To make newly added assets visible in your application, you will need to recompile the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;.NET 7+ Compatibility:&lt;/strong&gt; It&#39;s important to note that .NET 7 introduced breaking changes that affect some internal mechanisms we have been relying on for years. To ensure the full hot reload experience, it is recommended to run your application with a debugger attached to it, or in the &lt;code&gt;dotnet watch&lt;/code&gt; mode. This is necessary as, without these conditions met, certain resources &lt;em&gt;(like styles or resource dictionaries)&lt;/em&gt; may not hot reload correctly &lt;em&gt;(do not ask why, it is what it is)&lt;/em&gt;. If you are still using .NET 6 or an earlier version, these additional requirements do not apply.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Referenced Projects:&lt;/strong&gt; Currently, HotAvalonia does not watch for controls located in referenced projects. In other words, hot reload only works for controls defined within the entry assembly. While this limitation exists, it is technically feasible to implement support for this feature in the future.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;dotnet watch&lt;/code&gt;:&lt;/strong&gt; In rare edge cases, when using HotAvalonia in conjunction with &lt;code&gt;dotnet watch&lt;/code&gt;, Avalonia may not be able to discover some newly added class members &lt;em&gt;(such as event handlers in views)&lt;/em&gt;. However, your hot reload experience should generally be quite smooth when editing view models.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the terms of the &lt;a href=&#34;https://github.com/Kir-Antipov/HotAvalonia/raw/HEAD/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>