<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-20T01:31:30Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pardeike/Harmony</title>
    <updated>2022-12-20T01:31:30Z</updated>
    <id>tag:github.com,2022-12-20:/pardeike/Harmony</id>
    <link href="https://github.com/pardeike/Harmony" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for patching, replacing and decorating .NET and Mono methods during runtime&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pardeike/Harmony/master/HarmonyLogo.png&#34; alt=&#34;Harmony&#34; width=&#34;180&#34;&gt;&lt;br&gt; &lt;b&gt;Version 2&lt;/b&gt;&lt;br&gt; A library for patching, replacing and decorating&lt;br&gt; .NET and Mono methods during runtime. &lt;/p&gt; &#xA;&lt;h3&gt;About&lt;/h3&gt; &#xA;&lt;p&gt;Harmony gives you an elegant and high level way to alter the functionality in applications written in C#. It works great in games and is well established in titles like &lt;strong&gt;7 Days To Die&lt;/strong&gt;, &lt;strong&gt;BattleTech&lt;/strong&gt;, &lt;strong&gt;Besiege&lt;/strong&gt;, &lt;strong&gt;Cities:Skylines&lt;/strong&gt;, &lt;strong&gt;Kerbal Space Program&lt;/strong&gt;, &lt;strong&gt;Oxygen Not Included&lt;/strong&gt;, Ravenfield, &lt;strong&gt;Rimworld&lt;/strong&gt;, Sheltered, &lt;strong&gt;Stardew Valley&lt;/strong&gt;, Staxel, &lt;strong&gt;Subnautica&lt;/strong&gt;, The Ultimate Nerd Game, Total Miner, Unturned, SCP: Secret Laboratory and many more.&lt;/p&gt; &#xA;&lt;p&gt;It is also used in unit testing WPF controls and in many other areas.&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;p&gt;If you develop in C# and your code is loaded as a module/plugin into a host application, you can use Harmony to alter the functionality of all the available assemblies of that application. Where other patch libraries simply allow you to replace the original method, Harmony goes one step further and gives you:&lt;/p&gt; &#xA;&lt;p&gt;• A way to keep the original method intact&lt;br&gt; • Execute your code before and/or after the original method&lt;br&gt; • Modify the original with IL code processors&lt;br&gt; • Multiple Harmony patches co-exist and don&#39;t conflict with each other&lt;br&gt; • Works at runtime and does not touch any files&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Installation is done by using &lt;a href=&#34;https://github.com/pardeike/Harmony/releases&#34;&gt;0Harmony.dll&lt;/a&gt; in your project or by using the &lt;a href=&#34;https://www.nuget.org/packages/Lib.Harmony&#34;&gt;Lib.Harmony&lt;/a&gt; nuget package.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;https://harmony.pardeike.net&#34;&gt;documentation&lt;/a&gt; and join the official &lt;a href=&#34;https://discord.gg/xXgghXR&#34;&gt;discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contribute&lt;/h3&gt; &#xA;&lt;p&gt;I put thousands of hours into this project and its support. So every little action helps:&lt;/p&gt; &#xA;&lt;p&gt;• Upvote this &lt;a href=&#34;https://stackoverflow.com/questions/7299097/dynamically-replace-the-contents-of-a-c-sharp-method/42043003#42043003&#34;&gt;stackoverflow answer&lt;/a&gt;&lt;br&gt; • Spread the word in your developer communities&lt;br&gt; • Become a &lt;a href=&#34;https://github.com/sponsors/pardeike&#34;&gt;GitHub sponsor&lt;/a&gt; or a &lt;a href=&#34;https://www.patreon.com/pardeike&#34;&gt;Patreon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project uses the great &lt;a href=&#34;https://github.com/MonoMod/MonoMod.Common&#34;&gt;MonoMod.Common&lt;/a&gt; library by &lt;a href=&#34;https://github.com/0x0ade&#34;&gt;0x0ade&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Harmony 1&lt;/h3&gt; &#xA;&lt;p&gt;Harmony 1 is deprecated and not under active development anymore. The latest version of it (v1.2.0.1) is stable and contains only minor bugs. Keep using it if you are in an environment that exclusively uses Harmony 1. Currently Harmony 1.x and 2.x are &lt;strong&gt;NOT COMPATIBLE&lt;/strong&gt; with each other and &lt;strong&gt;SHOULD NOT BE MIXED&lt;/strong&gt;. The old documentation can still be found at the &lt;a href=&#34;https://github.com/pardeike/Harmony/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pardeike/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/pardeike/harmony.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/lib.harmony&#34;&gt; &lt;img src=&#34;https://img.shields.io/nuget/v/lib.harmony.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://harmony.pardeike.net&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/documentation-%F0%9F%94%8D-blue?style=flat&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dev.azure.com/pardeike/Harmony/_build&#34;&gt; &lt;img src=&#34;https://pardeike.visualstudio.com/Harmony/_apis/build/status/Build%20and%20test&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/xXgghXR&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/131466550938042369.svg?style=flat&amp;amp;logo=discord&amp;amp;label=discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pardeike/blob/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/pardeike/harmony.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;mailto:andreas@pardeike.net&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/email-andreas@pardeike.net-blue.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/pardeike&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/twitter-@pardeike-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wiz0u/WTelegramClient</title>
    <updated>2022-12-20T01:31:30Z</updated>
    <id>tag:github.com,2022-12-20:/wiz0u/WTelegramClient</id>
    <link href="https://github.com/wiz0u/WTelegramClient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram Client API (MTProto) library written 100% in C# and .NET Standard&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://corefork.telegram.org/methods&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/API_Layer-150-blueviolet&#34; alt=&#34;API Layer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/WTelegramClient/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/WTelegramClient?color=00508F&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/wiz0u/WTelegramClient/_build?definitionId=7&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/wiz0u/WTelegramClient/7&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://t.me/WTelegramBot?start=donate&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Help_this_project:-Donate-ff4444&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;Telegram Client API library written 100% in C# and .NET&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This library allows you to connect to Telegram and control a user programmatically (or a bot, but &lt;a href=&#34;https://github.com/TelegramBots/Telegram.Bot&#34;&gt;Telegram.Bot&lt;/a&gt; is much easier for that). All the Telegram Client APIs (MTProto) are supported so you can do everything the user could do with a full Telegram GUI client.&lt;/p&gt; &#xA;&lt;p&gt;This ReadMe is a &lt;strong&gt;quick but important tutorial&lt;/strong&gt; to learn the fundamentals about this library. Please read it all.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ This library requires understanding advanced C# techniques such as &lt;strong&gt;asynchronous programming&lt;/strong&gt; or &lt;strong&gt;subclass pattern matching&lt;/strong&gt;...&lt;br&gt; If you are a beginner in C#, starting a project based on this library might not be a great idea.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;p&gt;After installing WTelegramClient through &lt;a href=&#34;https://www.nuget.org/packages/WTelegramClient/&#34;&gt;Nuget&lt;/a&gt;, your first Console program will be as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static async Task Main(string[] _)&#xA;{&#xA;    using var client = new WTelegram.Client();&#xA;    var myself = await client.LoginUserIfNeeded();&#xA;    Console.WriteLine($&#34;We are logged-in as {myself} (id {myself.id})&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When run, this will prompt you interactively for your App &lt;strong&gt;api_hash&lt;/strong&gt; and &lt;strong&gt;api_id&lt;/strong&gt; (that you obtain through Telegram&#39;s &lt;a href=&#34;https://my.telegram.org/apps&#34;&gt;API development tools&lt;/a&gt; page) and try to connect to Telegram servers. Those api hash/id represent your application and one can be used for handling many user accounts.&lt;/p&gt; &#xA;&lt;p&gt;Then it will attempt to sign-in &lt;em&gt;(login)&lt;/em&gt; as a user for which you must enter the &lt;strong&gt;phone_number&lt;/strong&gt; and the &lt;strong&gt;verification_code&lt;/strong&gt; that will be sent to this user (for example through SMS, Email, or another Telegram client app the user is connected to).&lt;/p&gt; &#xA;&lt;p&gt;If the verification succeeds but the phone number is unknown to Telegram, the user might be prompted to sign-up &lt;em&gt;(register their account by accepting the Terms of Service)&lt;/em&gt; and provide their &lt;strong&gt;first_name&lt;/strong&gt; and &lt;strong&gt;last_name&lt;/strong&gt;.&lt;br&gt; If the account already exists and has enabled two-step verification (2FA) a &lt;strong&gt;password&lt;/strong&gt; might be required.&lt;br&gt; In some case, Telegram may request that you associate an &lt;strong&gt;email&lt;/strong&gt; with your account for receiving login verification codes, you may skip this step by leaving &lt;strong&gt;email&lt;/strong&gt; empty, otherwise the email address will first receive an &lt;strong&gt;email_verification_code&lt;/strong&gt;.&lt;br&gt; All these login scenarios are handled automatically within the call to &lt;code&gt;LoginUserIfNeeded&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After login, you now have access to the &lt;strong&gt;&lt;a href=&#34;https://corefork.telegram.org/methods&#34;&gt;full range of Telegram Client APIs&lt;/a&gt;&lt;/strong&gt;. All those API methods require &lt;code&gt;using TL;&lt;/code&gt; namespace and are called with an underscore instead of a dot in the method name, like this: &lt;code&gt;await client.Method_Name(...)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Saved session&lt;/h1&gt; &#xA;&lt;p&gt;If you run this program again, you will notice that only &lt;strong&gt;api_hash&lt;/strong&gt; is requested, the other prompts are gone and you are automatically logged-on and ready to go.&lt;/p&gt; &#xA;&lt;p&gt;This is because WTelegramClient saves (typically in the encrypted file &lt;strong&gt;bin\WTelegram.session&lt;/strong&gt;) its state and the authentication keys that were negotiated with Telegram so that you needn&#39;t sign-in again every time.&lt;/p&gt; &#xA;&lt;p&gt;That file path is configurable (&lt;strong&gt;session_pathname&lt;/strong&gt;), and under various circumstances (changing user or server address) you may want to change it or simply delete the existing session file in order to restart the authentification process.&lt;/p&gt; &#xA;&lt;h1&gt;Non-interactive configuration&lt;/h1&gt; &#xA;&lt;p&gt;Your next step will probably be to provide a configuration to the client so that the required elements are not prompted through the Console but answered by your program.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you need to write a method that will provide the answers, and pass it on the constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;static string Config(string what)&#xA;{&#xA;    switch (what)&#xA;    {&#xA;        case &#34;api_id&#34;: return &#34;YOUR_API_ID&#34;;&#xA;        case &#34;api_hash&#34;: return &#34;YOUR_API_HASH&#34;;&#xA;        case &#34;phone_number&#34;: return &#34;+12025550156&#34;;&#xA;        case &#34;verification_code&#34;: Console.Write(&#34;Code: &#34;); return Console.ReadLine();&#xA;        case &#34;first_name&#34;: return &#34;John&#34;;      // if sign-up is required&#xA;        case &#34;last_name&#34;: return &#34;Doe&#34;;        // if sign-up is required&#xA;        case &#34;password&#34;: return &#34;secret!&#34;;     // if user has enabled 2FA&#xA;        default: return null;                  // let WTelegramClient decide the default config&#xA;    }&#xA;}&#xA;...&#xA;using var client = new WTelegram.Client(Config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other configuration items that are queried to your method but returning &lt;code&gt;null&lt;/code&gt; let WTelegramClient choose a default adequate value. Those shown above are the only ones that have no default values and should be provided by your method.&lt;/p&gt; &#xA;&lt;p&gt;Returning &lt;code&gt;null&lt;/code&gt; for verification_code or password will show a prompt for console apps, or an error otherwise &lt;em&gt;(see &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/FAQ#GUI&#34;&gt;FAQ #3&lt;/a&gt; for WinForms)&lt;/em&gt;&lt;br&gt; Returning &lt;code&gt;&#34;&#34;&lt;/code&gt; for verification_code requests the resending of the code through another system (SMS or Call).&lt;/p&gt; &#xA;&lt;p&gt;Another simple approach is to pass &lt;code&gt;Environment.GetEnvironmentVariable&lt;/code&gt; as the config callback and define the configuration items as environment variables &lt;em&gt;(undefined variables get the default &lt;code&gt;null&lt;/code&gt; behavior)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you want to redirect the library logs to your logger instead of the Console, you can install a delegate in the &lt;code&gt;WTelegram.Helpers.Log&lt;/code&gt; static property. Its &lt;code&gt;int&lt;/code&gt; argument is the log severity, compatible with the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.loglevel&#34;&gt;LogLevel enum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Alternative simplified configuration &amp;amp; login&lt;/h1&gt; &#xA;&lt;p&gt;Since version 3.0.0, a new approach to login/configuration has been added. Some people might find it easier to deal with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;WTelegram.Client client = new WTelegram.Client(YOUR_API_ID, &#34;YOUR_API_HASH&#34;);&#xA;await DoLogin(&#34;+12025550156&#34;); // initial call with user&#39;s phone_number&#xA;&#xA;async Task DoLogin(string loginInfo) // (add this method to your code)&#xA;{&#xA;   while (client.User == null)&#xA;      switch (await client.Login(loginInfo)) // returns which config is needed to continue login&#xA;      {&#xA;         case &#34;verification_code&#34;: Console.Write(&#34;Code: &#34;); loginInfo = Console.ReadLine(); break;&#xA;         case &#34;name&#34;: loginInfo = &#34;John Doe&#34;; break;    // if sign-up is required (first/last_name)&#xA;         case &#34;password&#34;: loginInfo = &#34;secret!&#34;; break; // if user has enabled 2FA&#xA;         default: loginInfo = null; break;&#xA;      }&#xA;   Console.WriteLine($&#34;We are logged-in as {client.User} (id {client.User.id})&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this method, you can choose in some cases to interrupt the login loop via a &lt;code&gt;return&lt;/code&gt; instead of &lt;code&gt;break&lt;/code&gt;, and resume it later by calling &lt;code&gt;DoLogin(requestedCode)&lt;/code&gt; again once you&#39;ve obtained the requested code/password/etc... See &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/Examples/WinForms_app.zip&#34;&gt;WinForms example&lt;/a&gt; and &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/Examples/ASPnet_webapp.zip&#34;&gt;ASP.NET example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Example of API call&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ The Telegram API makes extensive usage of base and derived classes, so be ready to use the various C# syntaxes to check/cast base classes into the more useful derived classes (&lt;code&gt;is&lt;/code&gt;, &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;case DerivedType&lt;/code&gt; )&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;All the Telegram API classes/methods are fully documented through Intellisense: Place your mouse over a class/method name, or start typing the call arguments to see a tooltip displaying their description, the list of derived classes and a web link to the official API page.&lt;/p&gt; &#xA;&lt;p&gt;The Telegram &lt;a href=&#34;https://corefork.telegram.org/schema&#34;&gt;API object classes&lt;/a&gt; are defined in the &lt;code&gt;TL&lt;/code&gt; namespace, and the &lt;a href=&#34;https://corefork.telegram.org/methods&#34;&gt;API functions&lt;/a&gt; are available as async methods of &lt;code&gt;Client&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example of calling the &lt;a href=&#34;https://corefork.telegram.org/method/messages.getAllChats&#34;&gt;messages.getAllChats&lt;/a&gt; API function, enumerating the various groups/channels the user is in, and then using &lt;code&gt;client.SendMessageAsync&lt;/code&gt; helper function to easily send a message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using TL;&#xA;...&#xA;var chats = await client.Messages_GetAllChats();&#xA;Console.WriteLine(&#34;This user has joined the following:&#34;);&#xA;foreach (var (id, chat) in chats.chats)&#xA;    switch (chat) // example of downcasting to their real classes:&#xA;    {&#xA;        case Chat basicChat when basicChat.IsActive:&#xA;            Console.WriteLine($&#34;{id}:  Basic chat: {basicChat.title}&#34;);&#xA;            break;&#xA;        case Channel group when group.IsGroup:&#xA;            Console.WriteLine($&#34;{id}: Group {group.username}: {group.title}&#34;);&#xA;            break;&#xA;        case Channel channel:&#xA;            Console.WriteLine($&#34;{id}: Channel {channel.username}: {channel.title}&#34;);&#xA;            break;&#xA;    }&#xA;Console.Write(&#34;Type a chat ID to send a message: &#34;);&#xA;long chatId = long.Parse(Console.ReadLine());&#xA;var target = chats.chats[chatId];&#xA;Console.WriteLine($&#34;Sending a message in chat {chatId}: {target.Title}&#34;);&#xA;await client.SendMessageAsync(target, &#34;Hello, World&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;➡️ You can find lots of useful code snippets in &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/EXAMPLES&#34;&gt;EXAMPLES&lt;/a&gt; and in the &lt;a href=&#34;https://github.com/wiz0u/WTelegramClient/tree/master/Examples&#34;&gt;Examples subdirectory&lt;/a&gt;.&lt;br&gt; ➡️ Check &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/FAQ#compile&#34;&gt;the FAQ&lt;/a&gt; if example codes don&#39;t compile correctly on your machine, or other troubleshooting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;terminology&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Terminology in Telegram Client API&lt;/h1&gt; &#xA;&lt;p&gt;In the API, Telegram uses some terms/classnames that can be confusing as they differ from the terms shown to end-users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Channel&lt;/code&gt;: A (large or public) chat group &lt;em&gt;(sometimes called &lt;a href=&#34;https://corefork.telegram.org/api/channel#supergroups&#34;&gt;supergroup&lt;/a&gt;)&lt;/em&gt;, or a &lt;a href=&#34;https://corefork.telegram.org/api/channel#channels&#34;&gt;broadcast channel&lt;/a&gt; (the &lt;code&gt;broadcast&lt;/code&gt; flag differentiate those)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Chat&lt;/code&gt;: A private &lt;a href=&#34;https://corefork.telegram.org/api/channel#basic-groups&#34;&gt;basic chat group&lt;/a&gt; with less than 200 members (it may be migrated to a supergroup &lt;code&gt;Channel&lt;/code&gt; with a new ID when it gets bigger or public, in which case the old &lt;code&gt;Chat&lt;/code&gt; will still exist but will be &lt;code&gt;deactivated&lt;/code&gt;)&lt;br&gt; &lt;strong&gt;⚠️ Most chat groups you see are really of type &lt;code&gt;Channel&lt;/code&gt;, not &lt;code&gt;Chat&lt;/code&gt;!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;chats&lt;/strong&gt;: In plural or general meaning, it means either &lt;code&gt;Chat&lt;/code&gt; or &lt;code&gt;Channel&lt;/code&gt; &lt;em&gt;(therefore, no private user discussions)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Peer&lt;/code&gt;: Either a &lt;code&gt;Chat&lt;/code&gt;, a &lt;code&gt;Channel&lt;/code&gt; or a &lt;code&gt;User&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dialog&lt;/strong&gt;: Status of chat with a &lt;code&gt;Peer&lt;/code&gt; &lt;em&gt;(draft, last message, unread count, pinned...)&lt;/em&gt;. It represents each line from your Telegram chat list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access Hash&lt;/strong&gt;: Telegram requires you to provide a specific &lt;code&gt;access_hash&lt;/code&gt; for users, channels, and other resources before interacting with them. See &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/FAQ#access-hash&#34;&gt;FAQ #4&lt;/a&gt; to learn more about it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DC&lt;/strong&gt; (DataCenter): There are a few datacenters depending on where in the world the user (or an uploaded media file) is from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; or &lt;strong&gt;Authorization&lt;/strong&gt;: Pairing between a device and a phone number. You can have several active sessions for the same phone number.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other things to know&lt;/h1&gt; &#xA;&lt;p&gt;The Client class also offers an &lt;code&gt;OnUpdate&lt;/code&gt; event that is triggered when Telegram servers sends Updates (like new messages or status), independently of your API requests. See &lt;a href=&#34;https://github.com/wiz0u/WTelegramClient/raw/master/Examples/Program_ListenUpdates.cs?ts=4#L23&#34;&gt;Examples/Program_ListenUpdates.cs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An invalid API request can result in a &lt;code&gt;RpcException&lt;/code&gt; being raised, reflecting the &lt;a href=&#34;https://revgram.github.io/errors.html&#34;&gt;error code and status text&lt;/a&gt; of the problem.&lt;/p&gt; &#xA;&lt;p&gt;The other configuration items that you can override include: &lt;strong&gt;session_pathname, email, email_verification_code, session_key, server_address, device_model, system_version, app_version, system_lang_code, lang_pack, lang_code, user_id, bot_token&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Optional API parameters have a default value of &lt;code&gt;null&lt;/code&gt; when unset. Passing &lt;code&gt;null&lt;/code&gt; for a required string/array is the same as &lt;em&gt;empty&lt;/em&gt; (0-length). Required API parameters/fields can sometimes be set to 0 or &lt;code&gt;null&lt;/code&gt; when unused (check API documentation or experiment).&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve added several useful converters, implicit cast or helper properties to various API objects so that they are more easy to manipulate.&lt;/p&gt; &#xA;&lt;p&gt;Beyond the TL async methods, the Client class offers a few other methods to simplify the sending/receiving of files, medias or messages, as well as generic handling of chats/channels.&lt;/p&gt; &#xA;&lt;p&gt;This library works best with &lt;strong&gt;.NET 5.0+&lt;/strong&gt; (faster, no dependencies) and is also available for &lt;strong&gt;.NET Standard 2.0&lt;/strong&gt; (.NET Framework 4.6.1+ &amp;amp; .NET Core 2.0+) and &lt;strong&gt;Xamarin/Mono.Android&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Library uses and limitations&lt;/h1&gt; &#xA;&lt;p&gt;This library can be used for any Telegram scenario including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sequential or parallel automated steps based on API requests/responses&lt;/li&gt; &#xA; &lt;li&gt;Real-time &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/EXAMPLES#updates&#34;&gt;monitoring&lt;/a&gt; of incoming Updates/Messages&lt;/li&gt; &#xA; &lt;li&gt;Download/upload of files/media&lt;/li&gt; &#xA; &lt;li&gt;Exchange end-to-end encrypted messages/files in &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/EXAMPLES#e2e&#34;&gt;Secret Chats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Building a full-featured interactive client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has been tested in a Console app, &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/Examples/WinForms_app.zip&#34;&gt;in Windows Forms&lt;/a&gt;, &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/Examples/ASPnet_webapp.zip&#34;&gt;in ASP.NET webservice&lt;/a&gt;, and in Xamarin/Android.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t use this library for Spam or Scam. Respect Telegram &lt;a href=&#34;https://telegram.org/tos&#34;&gt;Terms of Service&lt;/a&gt; as well as the &lt;a href=&#34;https://core.telegram.org/api/terms&#34;&gt;API Terms of Service&lt;/a&gt; or you might get banned from Telegram servers.&lt;/p&gt; &#xA;&lt;p&gt;If you read all this ReadMe, the &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;, the &lt;a href=&#34;https://wiz0u.github.io/WTelegramClient/EXAMPLES&#34;&gt;Examples codes&lt;/a&gt; and still have questions, feedback is welcome in our Telegram group &lt;a href=&#34;https://t.me/WTelegramClient&#34;&gt;@WTelegramClient&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you like this library, please &lt;a href=&#34;http://t.me/WTelegramBot?start=donate&#34;&gt;consider a donation&lt;/a&gt; ❤ This will help the project keep going.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>metatube-community/jellyfin-plugin-metatube</title>
    <updated>2022-12-20T01:31:30Z</updated>
    <id>tag:github.com,2022-12-20:/metatube-community/jellyfin-plugin-metatube</id>
    <link href="https://github.com/metatube-community/jellyfin-plugin-metatube" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Metadata Tube Plugin for Jellyfin/Emby.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Jellyfin Plugin MetaTube&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/metatube-community/jellyfin-plugin-metatube/main/README_ZH.md&#34;&gt;简体中文&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Plugin Banner&#34; src=&#34;https://metatube-community.github.io/images/banner-dark.png&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube/actions&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/metatube-community/jellyfin-plugin-metatube/dotnetcore.yml?branch=main&amp;amp;logo=github&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube/search?l=c%23&#34;&gt; &lt;img alt=&#34;GitHub top language&#34; src=&#34;https://img.shields.io/github/languages/top/metatube-community/jellyfin-plugin-metatube?color=%23239120&amp;amp;label=.NET&amp;amp;logo=csharp&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/metatube-community/jellyfin-plugin-metatube&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://t.me/MetaTubePlugin&#34;&gt; &lt;img alt=&#34;Telegram Group&#34; src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?logo=telegram&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube&#34;&gt; &lt;img alt=&#34;Downloads&#34; src=&#34;https://img.shields.io/github/downloads/metatube-community/jellyfin-plugin-metatube/total&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/metatube/metatube-server&#34;&gt; &lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/metatube/metatube-server?logo=docker&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube/releases&#34;&gt; &lt;img alt=&#34;Releases&#34; src=&#34;https://img.shields.io/github/v/release/metatube-community/jellyfin-plugin-metatube?include_prereleases&amp;amp;logo=smartthings&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Metadata Tube Plugin for Jellyfin/Emby.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full Metadata: Including title, overview, genres, director, actors, and studio.&lt;/li&gt; &#xA; &lt;li&gt;Full Search: Support searching for movies and actors across various providers.&lt;/li&gt; &#xA; &lt;li&gt;Trailer Video: Support trailers without downloading the full trailer videos.&lt;/li&gt; &#xA; &lt;li&gt;Scheduled Task: Automatically organize metadata genres and update plugin.&lt;/li&gt; &#xA; &lt;li&gt;Face Detection: Cut primary image with face centered by face detection engine.&lt;/li&gt; &#xA; &lt;li&gt;Auto Translation: Support translate certain metadata to preferred language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jellyfin.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?color=%2300A4DC&amp;amp;style=for-the-badge&amp;amp;label=Jellyfin&amp;amp;logo=jellyfin&amp;amp;message=10.8.x&#34; alt=&#34;Jellyfin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://emby.media/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?color=%2352B54B&amp;amp;style=for-the-badge&amp;amp;label=Emby&amp;amp;logo=emby&amp;amp;message=4.7.x&#34; alt=&#34;Emby&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: This project will only support stable versions.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metatube-community.github.io/wiki/plugin-installation/&#34;&gt;Plugin installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metatube-community.github.io/wiki/server-deployment/&#34;&gt;Server deployment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metatube-community.github.io/wiki/naming-rules/&#34;&gt;File naming rules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metatube-community.github.io/wiki/auto-translation/&#34;&gt;Auto translation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metatube-community.github.io/wiki/build-from-source/&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://metatube-community.github.io/wiki/metadata-providers/&#34;&gt;Metadata providers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full documentation and examples can be found at &lt;a href=&#34;https://metatube-community.github.io/wiki/&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Welcome and feel free to ask any questions at &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube/discussions&#34;&gt;Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is released under the &lt;a href=&#34;https://github.com/metatube-community/jellyfin-plugin-metatube/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt; License.&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/metatube-community/jellyfin-plugin-metatube&#34;&gt;&lt;img src=&#34;https://starchart.cc/metatube-community/jellyfin-plugin-metatube.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>