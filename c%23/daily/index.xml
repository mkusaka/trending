<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-12T01:24:41Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VRPirates/rookie</title>
    <updated>2024-02-12T01:24:41Z</updated>
    <id>tag:github.com,2024-02-12:/VRPirates/rookie</id>
    <link href="https://github.com/VRPirates/rookie" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;androidsideloader&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/VRPirates/rookie&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/VRPirates/rookie&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;a href=&#34;https://github.com/VRPirates/rookie/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/VRPirates/rookie/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/issues/VRPirates/rookie&#34; alt=&#34;Issues&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;androidsideloader uses the GPL license, any forks of it must have their source code made public on the internet.&lt;/p&gt; &#xA;&lt;h2&gt;!IMPORTANT!&lt;/h2&gt; &#xA;&lt;p&gt;This app may be buggy and have problems.&lt;/p&gt; &#xA;&lt;h3&gt;This app might get detected as malware, however both the sideloader and the sideloader launcher are open source.&lt;/h3&gt; &#xA;&lt;p&gt;Rookie 1.25.1 VirusTotal Scan (1/72)- &lt;a href=&#34;https://www.virustotal.com/gui/file/dc3ed59057d508646a06a978c44ae72d473fd678129483ab186202046cbc713f&#34;&gt;https://www.virustotal.com/gui/file/dc3ed59057d508646a06a978c44ae72d473fd678129483ab186202046cbc713f&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thexeondev/WutheringWaves</title>
    <updated>2024-02-12T01:24:41Z</updated>
    <id>tag:github.com,2024-02-12:/thexeondev/WutheringWaves</id>
    <link href="https://github.com/thexeondev/WutheringWaves" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wuthering Waves ps (0.8.2)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WutheringWaves&lt;/h1&gt; &#xA;&lt;p&gt;Wuthering Waves server emulator (0.8.2)&lt;/p&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile and run SDKServer and GameServer using dotnet8 (Visual Studio 2022 recommended)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connecting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://nogatekeep.ing/assets/ww/0.8.2/ww.7z&#34;&gt;Game Client&lt;/a&gt;, it&#39;s &lt;strong&gt;pre-patched&lt;/strong&gt; and redirects http requests to &lt;code&gt;127.0.0.1:5500&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run game and connect to the server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;You can ask your questions in our &lt;a href=&#34;https://discord.xeondev.com&#34;&gt;Discord Server&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/CsWin32</title>
    <updated>2024-02-12T01:24:41Z</updated>
    <id>tag:github.com,2024-02-12:/microsoft/CsWin32</id>
    <link href="https://github.com/microsoft/CsWin32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C#/Win32 P/Invoke Source Generator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;A source generator to add a user-defined set of Win32 P/Invoke methods and supporting types to a C# project.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Microsoft.Windows.CsWin32&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Microsoft.Windows.CsWin32&#34; alt=&#34;NuGet (prerelease)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/azure-public/winsdk/_packaging?_a=package&amp;amp;feed=CI%40Local&amp;amp;package=Microsoft.Windows.CsWin32&amp;amp;protocolType=NuGet&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/nuget-daily-red&#34; alt=&#34;NuGet (daily)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/azure-public/winsdk/_build/latest?definitionId=47&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/azure-public/winsdk/_apis/build/status/microsoft.CsWin32?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rapidly add P/Invoke methods and supporting types to your C# project.&lt;/li&gt; &#xA; &lt;li&gt;No bulky assemblies to ship alongside your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SafeHandle&lt;/code&gt;-types automatically generated.&lt;/li&gt; &#xA; &lt;li&gt;Generates xml documentation based on and links back to docs.microsoft.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/CsWin32/main/doc/demo.gif&#34; alt=&#34;Animation demonstrating p/invoke code generation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The .NET 5 SDK or Visual Studio 2019 Update 8 (16.8) for the C# compiler that added support for Source Generators. The experience with source generators in Visual Studio is still improving, and is noticeably better in VS 16.9. WPF projects have &lt;a href=&#34;https://github.com/microsoft/CsWin32/issues/7&#34;&gt;additional requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition, some generated code may require use of the C# 9 language version (&lt;code&gt;&amp;lt;LangVersion&amp;gt;9&amp;lt;/LangVersion&amp;gt;&lt;/code&gt;) in your project file. See &lt;a href=&#34;https://github.com/microsoft/CsWin32/issues/4&#34;&gt;issue #4&lt;/a&gt; for more on this.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/dotnet/pinvoke&#34;&gt;dotnet/pinvoke&lt;/a&gt; for precompiled NuGet packages with Win32 P/Invokes.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;Microsoft.Windows.CsWin32&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;dotnet add package Microsoft.Windows.CsWin32 --prerelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Remove the &lt;code&gt;IncludeAssets&lt;/code&gt; metadata from the package reference so that you get better code generation by allowing nuget to bring in the &lt;code&gt;System.Memory&lt;/code&gt; package as a transitive dependency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &amp;lt;PackageReference Include=&#34;Microsoft.Windows.CsWin32&#34; Version=&#34;0.1.647-beta&#34;&amp;gt;&#xA;   &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;&#xA;-  &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;&#xA; &amp;lt;/PackageReference&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your project must allow unsafe code to support the generated code that will likely use pointers. This does &lt;em&gt;not&lt;/em&gt; automatically make all your code &lt;em&gt;unsafe&lt;/em&gt;. Use of the &lt;code&gt;unsafe&lt;/code&gt; keyword is required anywhere you use pointers. The source generator NuGet package sets the default value of the &lt;code&gt;AllowUnsafeBlocks&lt;/code&gt; property for your project to &lt;code&gt;true&lt;/code&gt;, but if you explicitly set it to &lt;code&gt;false&lt;/code&gt; in your project file, generated code may produce compiler errors.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;NativeMethods.txt&lt;/code&gt; file in your project directory that lists the APIs to generate code for. Each line may consist of &lt;em&gt;one&lt;/em&gt; of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exported method name (e.g. &lt;code&gt;CreateFile&lt;/code&gt;). This &lt;em&gt;may&lt;/em&gt; include the &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;W&lt;/code&gt; suffix, where applicable. This &lt;em&gt;may&lt;/em&gt; be qualified with a namespace but is only recommended in cases of ambiguity, which CsWin32 will prompt where appropriate.&lt;/li&gt; &#xA; &lt;li&gt;A macro name (e.g. &lt;code&gt;HRESULT_FROM_WIN32&lt;/code&gt;). These are generated into the same class with extern methods. Macros must be hand-authored into CsWin32, so let us know if you want to see a macro added.&lt;/li&gt; &#xA; &lt;li&gt;A namespace to generate all APIs from (e.g. &lt;code&gt;Windows.Win32.Storage.FileSystem&lt;/code&gt; would search the metadata for all APIs within that namespace and generate them).&lt;/li&gt; &#xA; &lt;li&gt;Module name followed by &lt;code&gt;.*&lt;/code&gt; to generate all methods exported from that module (e.g. &lt;code&gt;Kernel32.*&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The name of a struct, enum, constant or interface to generate. This &lt;em&gt;may&lt;/em&gt; be qualified with a namespace but is only recommended in cases of ambiguity, which CsWin32 will prompt where appropriate.&lt;/li&gt; &#xA; &lt;li&gt;A prefix shared by many constants, followed by &lt;code&gt;*&lt;/code&gt;, to generate all constants that share that prefix (e.g. &lt;code&gt;ALG_SID_MD*&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;A comment (i.e. any line starting with &lt;code&gt;//&lt;/code&gt;) or white space line, which will be ignored.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When generating any type or member, all supporting types will also be generated.&lt;/p&gt; &#xA;&lt;p&gt;Generated code is added directly in the compiler. An IDE may make this generated code available to view through code navigation commands (e.g. Go to Definition) or a tree view of source files that include generated source files.&lt;/p&gt; &#xA;&lt;p&gt;Assuming default settings and a &lt;code&gt;NativeMethods.txt&lt;/code&gt; file with content that includes &lt;code&gt;CreateFile&lt;/code&gt;, the P/Invoke methods can be found on the &lt;code&gt;Windows.Win32.PInvoke&lt;/code&gt; class, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using Windows.Win32;&#xA;&#xA;PInvoke.CreateFile(/*args*/);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Constants are defined on the same class as the p/invoke methods (by default, the &lt;code&gt;Windows.Win32.PInvoke&lt;/code&gt; class).&lt;/p&gt; &#xA;&lt;p&gt;Other supporting types are defined within or under the &lt;code&gt;Windows.Win32&lt;/code&gt; namespace. Discovery of the namespace for a given type can be done with the Go To All feature (Ctrl+T) in Visual Studio with the type name as the search query.&lt;/p&gt; &#xA;&lt;p&gt;A project may include many NativeMethods.txt files (each one necessarily in its own directory). CsWin32 will read them all to generate APIs, provided these files are included as &lt;code&gt;AdditionalFiles&lt;/code&gt; in the project. A &lt;code&gt;NativeMethods.txt&lt;/code&gt; file directly in the project directory is added automatically to &lt;code&gt;AdditionalFiles&lt;/code&gt;. Files in other directories must be added to the project file manually.&lt;/p&gt; &#xA;&lt;p&gt;Whether API requests are all in a single NativeMethods.txt file or split across many makes no difference to the generated result. We recommend using just one NativeMethods.txt file and keeping it sorted for easy bookkeeping. Multiple files perhaps makes the most sense in a Shared Project scenario where several API requests will be common across many projects, so sharing a NativeMethods.txt file with those same projects that contain all the necessary APIs for the set of shared source files make maintenance easier.&lt;/p&gt; &#xA;&lt;p&gt;Some APIs require targeting a specific architecture and are not available when your C# project compiles as &#34;Any CPU&#34;. Learn more about &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/CsWin32/main/doc/ArchSpecificAPIs.md&#34;&gt;how this manifests and what your options are&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing generated code&lt;/h3&gt; &#xA;&lt;p&gt;Several aspects of the generated code can be customized, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The name of the class(es) that declare p/invoke methods&lt;/li&gt; &#xA; &lt;li&gt;Whether to emit interop types as &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;internal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Whether to emit ANSI functions as well where Wide character functions also exist&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;PreserveSig&lt;/code&gt; for COM interfaces or individual members&lt;/li&gt; &#xA; &lt;li&gt;Force generation of blittable structs, COM structs instead of interfaces (for super high performance with 0 GC pressure), etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To configure these settings, create a &lt;code&gt;NativeMethods.json&lt;/code&gt; file in your project directory. Specifying the &lt;code&gt;$schema&lt;/code&gt; property that points to &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/CsWin32/main/src/Microsoft.Windows.CsWin32/settings.schema.json&#34;&gt;the schema&lt;/a&gt; adds completions, descriptions and validation in many JSON editors, and in fact is where all the documentation for the available settings is found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;$schema&#34;: &#34;https://aka.ms/CsWin32.schema.json&#34;,&#xA;  &#34;emitSingleFile&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most generated types include the &lt;code&gt;partial&lt;/code&gt; modifier so you can add your own members to that type within your code.&lt;/p&gt; &#xA;&lt;p&gt;When you need to &lt;em&gt;replace&lt;/em&gt; a generated type, simply copy and paste it from generated code into your own source files and remove the &lt;code&gt;partial&lt;/code&gt; modifier. Be sure to keep the name and namespace exactly the same. CsWin32 will notice that your project already declares the type and skip generating it, but generate everything else. Note that if that type is the only thing that references some other generated type, CsWin32 will stop generating that type too. To keep CsWin32 generating the referred types you need, add them explicitly to &lt;code&gt;NativeMethods.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Newer metadata&lt;/h3&gt; &#xA;&lt;p&gt;To update the metadata used as the source for code generation, you may install a newer &lt;code&gt;Microsoft.Windows.SDK.Win32Metadata&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps1&#34;&gt;dotnet add package Microsoft.Windows.SDK.Win32Metadata --prerelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CsWin32 also consumes the WDK from a similarly named package: &lt;code&gt;Microsoft.Windows.WDK.Win32Metadata&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Consuming daily builds&lt;/h2&gt; &#xA;&lt;p&gt;Can&#39;t wait for the next release to try out a bug fix? Follow these steps to consume directly from our daily build.&lt;/p&gt; &#xA;&lt;p&gt;Just add this package feed to your nuget.config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;add key=&#34;winsdk&#34; value=&#34;https://pkgs.dev.azure.com/azure-public/winsdk/_packaging/CI/nuget/v3/index.json&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>