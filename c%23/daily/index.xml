<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-12T01:30:53Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hadashiA/VContainer</title>
    <updated>2024-05-12T01:30:53Z</updated>
    <id>tag:github.com,2024-05-12:/hadashiA/VContainer</id>
    <link href="https://github.com/hadashiA/VContainer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The extra fast, minimum code size, GC-free DI (Dependency Injection) library running on Unity Game Engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VContainer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/hadashiA/VContainer/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/unity-2018.4+-000.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/hadashiA/VContainer/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hadashiA/VContainer.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openupm.com/packages/jp.hadashikick.vcontainer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/jp.hadashikick.vcontainer?label=openupm&amp;amp;registry_uri=https://package.openupm.com&#34; alt=&#34;openupm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The extra fast DI (Dependency Injection) library running on Unity Game Engine.&lt;/p&gt; &#xA;&lt;p&gt;&#34;V&#34; means making Unity&#39;s initial &#34;U&#34; more thinner and solid ... !&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast Resolve:&lt;/strong&gt; Basically 5-10x faster than Zenject.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimum GC Allocation:&lt;/strong&gt; In Resolve, we have &lt;strong&gt;zero allocation&lt;/strong&gt; without spawned instances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Small code size:&lt;/strong&gt; Few internal types and few .callvirt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Assisting correct DI way:&lt;/strong&gt; Provides simple and transparent API, and carefully select features. This prevents the DI declaration from becoming overly complex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Immutable Container:&lt;/strong&gt; Thread safety and robustness.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Constructor Injection / Method Injection / Property &amp;amp; Field Injection&lt;/li&gt; &#xA; &lt;li&gt;Dispatch own PlayerLoopSystem&lt;/li&gt; &#xA; &lt;li&gt;Flexible scoping &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Application can freely create nested Lifetime Scope with any async way for you like.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Accelerated mode with SourceGenerator (Optional)&lt;/li&gt; &#xA; &lt;li&gt;Diagnositcs window on unity editor&lt;/li&gt; &#xA; &lt;li&gt;UniTask Integration&lt;/li&gt; &#xA; &lt;li&gt;ECS Integration &lt;em&gt;beta&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://vcontainer.hadashikick.jp&#34;&gt;vcontainer.hadashikick.jp&lt;/a&gt; to view the full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadashiA/VContainer/master/website/static/img/benchmark_result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GC Alloc Result Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadashiA/VContainer/master/website/static/img/gc_alloc_profiler_result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadashiA/VContainer/master/website/static/img/screenshot_profiler_vcontainer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadashiA/VContainer/master/website/static/img/screenshot_profiler_zenject.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires Unity 2018.4+&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Install via UPM (using Git URL)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to your project&#39;s Packages folder and open the manifest.json file.&lt;/li&gt; &#xA; &lt;li&gt;Add this line below the &#34;dependencies&#34;: { line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;jp.hadashikick.vcontainer&#34;: &#34;https://github.com/hadashiA/VContainer.git?path=VContainer/Assets/VContainer#1.15.4&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;UPM should now install the package.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install via OpenUPM&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The package is available on the &lt;a href=&#34;https://openupm.com&#34;&gt;openupm registry&lt;/a&gt;. It&#39;s recommended to install it via &lt;a href=&#34;https://github.com/openupm/openupm-cli&#34;&gt;openupm-cli&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Execute the openum command. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code&gt;openupm add jp.hadashikick.vcontainer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install manually (using .unitypackage)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the .unitypackage from &lt;a href=&#34;https://github.com/hadashiA/VContainer/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Open VContainer.x.x.x.unitypackage&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, create a scope. References are automatically resolved for types registered here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class GameLifetimeScope : LifetimeScope&#xA;{&#xA;    public override void Configure(IContainerBuilder builder)&#xA;    {&#xA;        builder.RegisterEntryPoint&amp;lt;ActorPresenter&amp;gt;();&#xA;&#xA;        builder.Register&amp;lt;CharacterService&amp;gt;(Lifetime.Scoped);&#xA;        builder.Register&amp;lt;IRouteSearch, AStarRouteSearch&amp;gt;(Lifetime.Singleton);&#xA;&#xA;        builder.RegisterComponentInHierarchy&amp;lt;ActorsView&amp;gt;();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where definitions of classes are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IRouteSearch&#xA;{&#xA;}&#xA;&#xA;public class AStarRouteSearch : IRouteSearch&#xA;{&#xA;}&#xA;&#xA;public class CharacterService&#xA;{&#xA;    readonly IRouteSearch routeSearch;&#xA;&#xA;    public CharacterService(IRouteSearch routeSearch)&#xA;    {&#xA;        this.routeSearch = routeSearch;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ActorsView : MonoBehaviour&#xA;{&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ActorPresenter : IStartable&#xA;{&#xA;    readonly CharacterService service;&#xA;    readonly ActorsView actorsView;&#xA;&#xA;    public ActorPresenter(&#xA;        CharacterService service,&#xA;        ActorsView actorsView)&#xA;    {&#xA;        this.service = service;&#xA;        this.actorsView = actorsView;&#xA;    }&#xA;&#xA;    void IStartable.Start()&#xA;    {&#xA;        // Scheduled at Start () on VContainer&#39;s own PlayerLoopSystem.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In this example, the routeSearch of CharacterService is automatically set as the instance of AStarRouteSearch when CharacterService is resolved.&lt;/li&gt; &#xA; &lt;li&gt;Further, VContainer can have a Pure C# class as an entry point. (Various timings such as Start, Update, etc. can be specified.) This facilitates &#34;separation of domain logic and presentation&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flexible Scoping with async&lt;/h3&gt; &#xA;&lt;p&gt;LifetimeScope can dynamically create children. This allows you to deal with the asynchronous resource loading that often occurs in games.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void LoadLevel()&#xA;{&#xA;    // ... Loading some assets&#xA;&#xA;    // Create a child scope&#xA;    instantScope = currentScope.CreateChild();&#xA;&#xA;    // Create a child scope with LifetimeScope prefab&#xA;    instantScope = currentScope.CreateChildFromPrefab(lifetimeScopePrefab);&#xA;&#xA;    // Create a child with additional registration&#xA;    instantScope = currentScope.CreateChildFromPrefab(&#xA;        lifetimeScopePrefab,&#xA;        builder =&amp;gt;&#xA;        {&#xA;            // Extra Registrations ...&#xA;        });&#xA;&#xA;    instantScope = currentScope.CreateChild(builder =&amp;gt;&#xA;    {&#xA;        // ExtraRegistrations ...&#xA;    });&#xA;&#xA;    instantScope = currentScope.CreateChild(extraInstaller);&#xA;}&#xA;&#xA;public void UnloadLevel()&#xA;{&#xA;    instantScope.Dispose();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, you can create a parent-child relationship with LifetimeScope in an Additive scene.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class SceneLoader&#xA;{&#xA;    readonly LifetimeScope currentScope;&#xA;&#xA;    public SceneLoader(LifetimeScope currentScope)&#xA;    {&#xA;        this.currentScope = currentScope; // Inject the LifetimeScope to which this class belongs&#xA;    }&#xA;&#xA;    IEnumerator LoadSceneAsync()&#xA;    {&#xA;        // LifetimeScope generated in this block will be parented by `this.lifetimeScope`&#xA;        using (LifetimeScope.EnqueueParent(currentScope))&#xA;        {&#xA;            // If this scene has a LifetimeScope, its parent will be `parent`.&#xA;            var loading = SceneManager.LoadSceneAsync(&#34;...&#34;, LoadSceneMode.Additive);&#xA;            while (!loading.isDone)&#xA;            {&#xA;                yield return null;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    // UniTask example&#xA;    async UniTask LoadSceneAsync()&#xA;    {&#xA;        using (LifetimeScope.EnqueueParent(parent))&#xA;        {&#xA;            await SceneManager.LoadSceneAsync(&#34;...&#34;, LoadSceneMode.Additive);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// LifetimeScopes generated during this block will be additionally Registered.&#xA;using (LifetimeScope.Enqueue(builder =&amp;gt;&#xA;{&#xA;    // Register for the next scene not yet loaded&#xA;    builder.RegisterInstance(extraInstance);&#xA;}))&#xA;{&#xA;    // Loading the scene..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://vcontainer.hadashikick.jp/scoping/lifetime-overview&#34;&gt;scoping&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;UniTask&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class FooController : IAsyncStartable&#xA;{&#xA;    public async UniTask StartAsync(CancellationToken cancellation)&#xA;    {&#xA;        await LoadSomethingAsync(cancellation);&#xA;        await ...&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;builder.RegisterEntryPoint&amp;lt;FooController&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://vcontainer.hadashikick.jp/integrations/unitask&#34;&gt;integrations&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnostics Window&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadashiA/VContainer/master/website/static/img/screenshot_diagnostics_window.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://vcontainer.hadashikick.jp/diagnostics/diagnostics-window&#34;&gt;diagnostics&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;VContainer is inspired by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/modesttree/Zenject&#34;&gt;Zenject&lt;/a&gt; / &lt;a href=&#34;https://github.com/svermeulen/Extenject&#34;&gt;Extenject&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://autofac.org&#34;&gt;Autofac&lt;/a&gt; - &lt;a href=&#34;https://github.com/autofac/Autofac&#34;&gt;Autofac Project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neuecc/MicroResolver&#34;&gt;MicroResolver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/hadashiA&#34;&gt;@hadashiA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paidworkco/solana-api</title>
    <updated>2024-05-12T01:30:53Z</updated>
    <id>tag:github.com,2024-05-12:/paidworkco/solana-api</id>
    <link href="https://github.com/paidworkco/solana-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API for Solana Tokens&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://zrcdn.net/static/img/logos/paidwork/paidwork-logo-github.png&#34; alt=&#34;Paidwork&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Multi-purpose Solana Blockchain based library for custom solutions. &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/paidworkco/solana-api&#34;&gt; &lt;img alt=&#34;GitHub Repository Stars Count&#34; src=&#34;https://img.shields.io/github/stars/paidworkco/solana-api?style=social&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://x.com/paidworkco&#34;&gt; &lt;img alt=&#34;Follow Us on X&#34; src=&#34;https://img.shields.io/twitter/follow/paidworkco?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt; &lt;img alt=&#34;Commitizen friendly&#34; src=&#34;https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/paidworkco/worken-sdk-php&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/paidworkco/worken-sdk-php&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/paidworkco/worken-sdk-php/pulls&#34;&gt; &lt;img alt=&#34;PRs Welcome&#34; src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;SDK library providing access to send, receive, burn Tokens, manage wallets. Multi-purpose Solana Blockchain based library for custom solutions.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;Endpoints&lt;/h3&gt;&#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CreateTransaction&lt;/li&gt; &#xA; &lt;li&gt;CreateWallet&lt;/li&gt; &#xA; &lt;li&gt;CreateWalletWordCount&lt;/li&gt; &#xA; &lt;li&gt;CreateWalletWordList&lt;/li&gt; &#xA; &lt;li&gt;CreateWalletFull&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CreateTransaction&lt;/h2&gt; &#xA;&lt;h4&gt;[POST] /api/Transactions/CreateTransaction&lt;/h4&gt; &#xA;&lt;h4&gt;Body structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;public class CreateTransactionRequest&#xA;{&#xA;&#xA;    public string fromAccountPublicKey { get; set; }&#xA;&#xA;    public string fromAccountPrivateKey { get; set; }&#xA;&#xA;    public string toAccountPublicKey { get; set; }&#xA;&#xA;    public ulong lanPorts {  get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Result&lt;/h4&gt; &#xA;&lt;p&gt;String&lt;/p&gt; &#xA;&lt;h2&gt;CreateWallet&lt;/h2&gt; &#xA;&lt;h4&gt;[POST] /api/Wallet/CreateWallet&lt;/h4&gt; &#xA;&lt;h4&gt;Body structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example result [JSON]&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;account&#34;: {&#xA;    &#34;privateKey&#34;: {&#xA;      &#34;key&#34;: &#34;45oED964ffnj1Br6tDbwcLNdi8JaZqHciVdWeaJhLVwB4JWZ3SRWE7LtZn4Zh4ntqjrDD7ksyMaPRBuMEnfdhojz&#34;,&#xA;      &#34;keyBytes&#34;: &#34;mjAR0I/E+pNVwqxQ+Z3yGb1o0z5uELRb60DZikAQFDADskNwpOnFtC30jRx+Cyni+o3ALdANvDmJtJVU8cCuNQ==&#34;&#xA;    },&#xA;    &#34;publicKey&#34;: {&#xA;      &#34;key&#34;: &#34;FRt3vuU8aPPs74ZeH5CA6QD9WYutvVzzsySTYSTD1dn&#34;,&#xA;      &#34;keyBytes&#34;: &#34;A7JDcKTpxbQt9I0cfgsp4vqNwC3QDbw5ibSVVPHArjU=&#34;&#xA;    }&#xA;  },&#xA;  &#34;mnemonic&#34;: {&#xA;    &#34;isValidChecksum&#34;: true,&#xA;    &#34;wordList&#34;: {&#xA;      &#34;space&#34;: &#34; &#34;,&#xA;      &#34;wordCount&#34;: 2048&#xA;    },&#xA;    &#34;indices&#34;: [&#xA;      1224,&#xA;      1684,&#xA;      34,&#xA;      1881,&#xA;      1701,&#xA;      1350,&#xA;      453,&#xA;      1818,&#xA;      519,&#xA;      2037,&#xA;      1451,&#xA;      1540&#xA;    ],&#xA;    &#34;words&#34;: [&#xA;      &#34;october&#34;,&#xA;      &#34;spoon&#34;,&#xA;      &#34;affair&#34;,&#xA;      &#34;twenty&#34;,&#xA;      &#34;start&#34;,&#xA;      &#34;potato&#34;,&#xA;      &#34;december&#34;,&#xA;      &#34;today&#34;,&#xA;      &#34;domain&#34;,&#xA;      &#34;wrong&#34;,&#xA;      &#34;rely&#34;,&#xA;      &#34;scene&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;CreateWalletWordCount&lt;/h2&gt; &#xA;&lt;h4&gt;[POST] /api/Wallet/CreateWalletWordCount&lt;/h4&gt; &#xA;&lt;h4&gt;Body structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;int&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Possible values that represent number of words&lt;/h4&gt; &#xA;&lt;p&gt;12 15 18 21 24&lt;/p&gt; &#xA;&lt;h4&gt;Example result [JSON]&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;account&#34;: {&#xA;    &#34;privateKey&#34;: {&#xA;      &#34;key&#34;: &#34;45oED964ffnj1Br6tDbwcLNdi8JaZqHciVdWeaJhLVwB4JWZ3SRWE7LtZn4Zh4ntqjrDD7ksyMaPRBuMEnfdhojz&#34;,&#xA;      &#34;keyBytes&#34;: &#34;mjAR0I/E+pNVwqxQ+Z3yGb1o0z5uELRb60DZikAQFDADskNwpOnFtC30jRx+Cyni+o3ALdANvDmJtJVU8cCuNQ==&#34;&#xA;    },&#xA;    &#34;publicKey&#34;: {&#xA;      &#34;key&#34;: &#34;FRt3vuU8aPPs74ZeH5CA6QD9WYutvVzzsySTYSTD1dn&#34;,&#xA;      &#34;keyBytes&#34;: &#34;A7JDcKTpxbQt9I0cfgsp4vqNwC3QDbw5ibSVVPHArjU=&#34;&#xA;    }&#xA;  },&#xA;  &#34;mnemonic&#34;: {&#xA;    &#34;isValidChecksum&#34;: true,&#xA;    &#34;wordList&#34;: {&#xA;      &#34;space&#34;: &#34; &#34;,&#xA;      &#34;wordCount&#34;: 2048&#xA;    },&#xA;    &#34;indices&#34;: [&#xA;      1224,&#xA;      1684,&#xA;      34,&#xA;      1881,&#xA;      1701,&#xA;      1350,&#xA;      453,&#xA;      1818,&#xA;      519,&#xA;      2037,&#xA;      1451,&#xA;      1540&#xA;    ],&#xA;    &#34;words&#34;: [&#xA;      &#34;october&#34;,&#xA;      &#34;spoon&#34;,&#xA;      &#34;affair&#34;,&#xA;      &#34;twenty&#34;,&#xA;      &#34;start&#34;,&#xA;      &#34;potato&#34;,&#xA;      &#34;december&#34;,&#xA;      &#34;today&#34;,&#xA;      &#34;domain&#34;,&#xA;      &#34;wrong&#34;,&#xA;      &#34;rely&#34;,&#xA;      &#34;scene&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;CreateWalletWordList&lt;/h2&gt; &#xA;&lt;h4&gt;[POST] /api/Wallet/CreateWalletWordList&lt;/h4&gt; &#xA;&lt;h4&gt;Body structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Possible values that represents wordList&lt;/h4&gt; &#xA;&lt;p&gt;&#34;English&#34;, &#34;Japanese&#34;, &#34;ChineseSimplified&#34;, &#34;ChineseTraditional&#34;, &#34;Spanish&#34;, &#34;French&#34;, &#34;PortugueseBrazil&#34;, &#34;Czech&#34;&lt;/p&gt; &#xA;&lt;h4&gt;Example result [JSON]&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;account&#34;: {&#xA;    &#34;privateKey&#34;: {&#xA;      &#34;key&#34;: &#34;45oED964ffnj1Br6tDbwcLNdi8JaZqHciVdWeaJhLVwB4JWZ3SRWE7LtZn4Zh4ntqjrDD7ksyMaPRBuMEnfdhojz&#34;,&#xA;      &#34;keyBytes&#34;: &#34;mjAR0I/E+pNVwqxQ+Z3yGb1o0z5uELRb60DZikAQFDADskNwpOnFtC30jRx+Cyni+o3ALdANvDmJtJVU8cCuNQ==&#34;&#xA;    },&#xA;    &#34;publicKey&#34;: {&#xA;      &#34;key&#34;: &#34;FRt3vuU8aPPs74ZeH5CA6QD9WYutvVzzsySTYSTD1dn&#34;,&#xA;      &#34;keyBytes&#34;: &#34;A7JDcKTpxbQt9I0cfgsp4vqNwC3QDbw5ibSVVPHArjU=&#34;&#xA;    }&#xA;  },&#xA;  &#34;mnemonic&#34;: {&#xA;    &#34;isValidChecksum&#34;: true,&#xA;    &#34;wordList&#34;: {&#xA;      &#34;space&#34;: &#34; &#34;,&#xA;      &#34;wordCount&#34;: 2048&#xA;    },&#xA;    &#34;indices&#34;: [&#xA;      1224,&#xA;      1684,&#xA;      34,&#xA;      1881,&#xA;      1701,&#xA;      1350,&#xA;      453,&#xA;      1818,&#xA;      519,&#xA;      2037,&#xA;      1451,&#xA;      1540&#xA;    ],&#xA;    &#34;words&#34;: [&#xA;      &#34;october&#34;,&#xA;      &#34;spoon&#34;,&#xA;      &#34;affair&#34;,&#xA;      &#34;twenty&#34;,&#xA;      &#34;start&#34;,&#xA;      &#34;potato&#34;,&#xA;      &#34;december&#34;,&#xA;      &#34;today&#34;,&#xA;      &#34;domain&#34;,&#xA;      &#34;wrong&#34;,&#xA;      &#34;rely&#34;,&#xA;      &#34;scene&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;CreateWalletFull&lt;/h2&gt; &#xA;&lt;h4&gt;[POST] /api/Wallet/CreateWalletFull&lt;/h4&gt; &#xA;&lt;h4&gt;Body structure&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class WalletCreationRequest&#xA;{&#xA;    public string WordList { get; set; }&#xA;&#xA;    public int WordCount { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Possible values for WordCount that represent number of words&lt;/h4&gt; &#xA;&lt;p&gt;12 15 18 21 24&lt;/p&gt; &#xA;&lt;h4&gt;Possible values for WordList that represents wordList&lt;/h4&gt; &#xA;&lt;p&gt;&#34;English&#34;, &#34;Japanese&#34;, &#34;ChineseSimplified&#34;, &#34;ChineseTraditional&#34;, &#34;Spanish&#34;, &#34;French&#34;, &#34;PortugueseBrazil&#34;, &#34;Czech&#34;&lt;/p&gt; &#xA;&lt;h4&gt;Example result [JSON]&lt;/h4&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;account&#34;: {&#xA;    &#34;privateKey&#34;: {&#xA;      &#34;key&#34;: &#34;45oED964ffnj1Br6tDbwcLNdi8JaZqHciVdWeaJhLVwB4JWZ3SRWE7LtZn4Zh4ntqjrDD7ksyMaPRBuMEnfdhojz&#34;,&#xA;      &#34;keyBytes&#34;: &#34;mjAR0I/E+pNVwqxQ+Z3yGb1o0z5uELRb60DZikAQFDADskNwpOnFtC30jRx+Cyni+o3ALdANvDmJtJVU8cCuNQ==&#34;&#xA;    },&#xA;    &#34;publicKey&#34;: {&#xA;      &#34;key&#34;: &#34;FRt3vuU8aPPs74ZeH5CA6QD9WYutvVzzsySTYSTD1dn&#34;,&#xA;      &#34;keyBytes&#34;: &#34;A7JDcKTpxbQt9I0cfgsp4vqNwC3QDbw5ibSVVPHArjU=&#34;&#xA;    }&#xA;  },&#xA;  &#34;mnemonic&#34;: {&#xA;    &#34;isValidChecksum&#34;: true,&#xA;    &#34;wordList&#34;: {&#xA;      &#34;space&#34;: &#34; &#34;,&#xA;      &#34;wordCount&#34;: 2048&#xA;    },&#xA;    &#34;indices&#34;: [&#xA;      1224,&#xA;      1684,&#xA;      34,&#xA;      1881,&#xA;      1701,&#xA;      1350,&#xA;      453,&#xA;      1818,&#xA;      519,&#xA;      2037,&#xA;      1451,&#xA;      1540&#xA;    ],&#xA;    &#34;words&#34;: [&#xA;      &#34;october&#34;,&#xA;      &#34;spoon&#34;,&#xA;      &#34;affair&#34;,&#xA;      &#34;twenty&#34;,&#xA;      &#34;start&#34;,&#xA;      &#34;potato&#34;,&#xA;      &#34;december&#34;,&#xA;      &#34;today&#34;,&#xA;      &#34;domain&#34;,&#xA;      &#34;wrong&#34;,&#xA;      &#34;rely&#34;,&#xA;      &#34;scene&#34;&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>