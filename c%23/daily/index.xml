<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-24T01:32:34Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SixLabors/ImageSharp</title>
    <updated>2022-10-24T01:32:34Z</updated>
    <id>tag:github.com,2022-10-24:/SixLabors/ImageSharp</id>
    <link href="https://github.com/SixLabors/ImageSharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üì∑ A modern, cross-platform, 2D Graphics library for .NET&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/SixLabors/Branding/raw/main/icons/imagesharp/sixlabors.imagesharp.svg?sanitize=true&#34; alt=&#34;SixLabors.ImageSharp&#34; width=&#34;256&#34;&gt; &lt;br&gt; SixLabors.ImageSharp &lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/SixLabors/ImageSharp/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/SixLabors/ImageSharp/Build/main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SixLabors/ImageSharp&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/SixLabors/ImageSharp/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Six%20Labors%20Split-%23e30183&#34; alt=&#34;License: Six Labors Split&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?hashtags=imagesharp,dotnet,oss&amp;amp;text=ImageSharp.+A+new+cross-platform+2D+graphics+API+in+C%23&amp;amp;url=https%3a%2f%2fgithub.com%2fSixLabors%2fImageSharp&amp;amp;via=sixlabors&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=flat&amp;amp;logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ImageSharp&lt;/strong&gt; is a new, fully featured, fully managed, cross-platform, 2D graphics API.&lt;/h3&gt; &#xA;&lt;p&gt;ImageSharp is a new, fully featured, fully managed, cross-platform, 2D graphics library. Designed to simplify image processing, ImageSharp brings you an incredibly powerful yet beautifully simple API.&lt;/p&gt; &#xA;&lt;p&gt;ImageSharp is designed from the ground up to be flexible and extensible. The library provides API endpoints for common image processing operations and the building blocks to allow for the development of additional operations.&lt;/p&gt; &#xA;&lt;p&gt;Built against &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard&#34;&gt;.NET 6&lt;/a&gt;, ImageSharp can be used in device, cloud, and embedded/IoT scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ImageSharp is licensed under the &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/raw/main/LICENSE&#34;&gt;Six Labors Split License, Version 1.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Six Labors&lt;/h2&gt; &#xA;&lt;p&gt;Support the efforts of the development of the Six Labors projects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sixlabors.com/pricing/&#34;&gt;Purchase a Commercial License &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/SixLabors&#34;&gt;Become a sponsor via GitHub Sponsors &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/sixlabors&#34;&gt;Become a sponsor via Open Collective &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sixlabors.github.io/docs/&#34;&gt;Detailed documentation&lt;/a&gt; for the ImageSharp API is available. This includes additional conceptual documentation to help you get started.&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/SixLabors/Samples/tree/main/ImageSharp&#34;&gt;Samples Repository&lt;/a&gt; is also available containing buildable code samples demonstrating common activities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do you have questions? Please &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/discussions/categories/q-a&#34;&gt;join our Discussions Forum&lt;/a&gt;. Do not open issues for questions.&lt;/li&gt; &#xA; &lt;li&gt;For feature ideas please &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/discussions/categories/ideas&#34;&gt;join our Discussions Forum&lt;/a&gt; and we&#39;ll be happy to discuss.&lt;/li&gt; &#xA; &lt;li&gt;Please read our &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/raw/main/.github/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; before opening issues or pull requests!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;https://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install stable releases via Nuget; development releases are available via MyGet.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th&gt;Release (NuGet)&lt;/th&gt; &#xA;   &lt;th&gt;Nightly (MyGet)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SixLabors.ImageSharp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/SixLabors.ImageSharp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/SixLabors.ImageSharp.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.myget.org/feed/sixlabors/package/nuget/SixLabors.ImageSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/sixlabors/vpre/SixLabors.ImageSharp.svg?sanitize=true&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Manual build&lt;/h2&gt; &#xA;&lt;p&gt;If you prefer, you can compile ImageSharp yourself (please do and help!)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;Visual Studio 2022&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure you have the latest version installed&lt;/li&gt; &#xA;   &lt;li&gt;Make sure you have &lt;a href=&#34;https://www.microsoft.com/net/core#windows&#34;&gt;the .NET 6 SDK&lt;/a&gt; installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can work from command line and/or with a lightweight editor on &lt;strong&gt;both Linux/Unix and Windows&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; with &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp&#34;&gt;C# Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/net/core#linuxubuntu&#34;&gt;.NET Core&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To clone ImageSharp locally, click the &#34;Clone in [YOUR_OS]&#34; button above or run the following git commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/SixLabors/ImageSharp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then set the following config to ensure blame commands ignore mass reformatting commits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config blame.ignoreRevsFile .git-blame-ignore-revs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If working with Windows please ensure that you have enabled long file paths in git (run as Administrator).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --system core.longpaths true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This repository uses &lt;a href=&#34;https://docs.github.com/en/github/managing-large-files/installing-git-large-file-storage&#34;&gt;Git Large File Storage&lt;/a&gt;. Please follow the linked instructions to ensure you have it set up in your environment.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains &lt;a href=&#34;https://blog.github.com/2016-02-01-working-with-submodules/&#34;&gt;Git Submodules&lt;/a&gt;. To add the submodules to the project, navigate to the repository root and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How can you help?&lt;/h2&gt; &#xA;&lt;p&gt;Please... Spread the word, contribute algorithms, submit performance improvements, unit tests, no input is too little. Make sure to read our &lt;a href=&#34;https://github.com/SixLabors/ImageSharp/raw/main/.github/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; before opening a PR.&lt;/p&gt; &#xA;&lt;h2&gt;The ImageSharp Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimbobsquarepants&#34;&gt;James Jackson-South&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dlemstra&#34;&gt;Dirk Lemstra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonfirsov&#34;&gt;Anton Firsov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tocsoft&#34;&gt;Scott Williams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/brianpopow&#34;&gt;Brian Popow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sebastienros/jint</title>
    <updated>2022-10-24T01:32:34Z</updated>
    <id>tag:github.com,2022-10-24:/sebastienros/jint</id>
    <link href="https://github.com/sebastienros/jint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Javascript Interpreter for .NET&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sebastienros/jint/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/sebastienros/jint/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Jint&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Jint.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Jint&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Jint.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.myget.org/feed/jint/package/nuget/Jint&#34;&gt;&lt;img src=&#34;https://img.shields.io/myget/jint/vpre/jint.svg?label=MyGet&#34; alt=&#34;MyGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/sebastienros/jint&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/sebastienros/jint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Jint&lt;/h1&gt; &#xA;&lt;p&gt;Jint is a &lt;strong&gt;Javascript interpreter&lt;/strong&gt; for .NET which can run on &lt;strong&gt;any modern .NET platform&lt;/strong&gt; as it supports .NET Standard 2.0 and .NET 4.6.2 targets (and up).&lt;/p&gt; &#xA;&lt;p&gt;üí° You should prefer 3.x beta over the 2.x legacy version as all new features and improvements are targeted against version 3.x.&lt;/p&gt; &#xA;&lt;h2&gt;ECMAScipt Features&lt;/h2&gt; &#xA;&lt;h3&gt;Version 2.x&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî Full support for &lt;a href=&#34;http://www.ecma-international.org/ecma-262/5.1/&#34;&gt;ECMAScript 5.1 (ES5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;.NET Interoperability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version 3.x&lt;/h3&gt; &#xA;&lt;p&gt;The entire execution engine was rebuild with performance in mind, in many cases at least twice as fast as the old engine. All the features of 2.x and more:&lt;/p&gt; &#xA;&lt;h4&gt;ECMAScript 2015 (ES6)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî ArrayBuffer&lt;/li&gt; &#xA; &lt;li&gt;‚úî Arrow function expression&lt;/li&gt; &#xA; &lt;li&gt;‚úî Binary and octal literals&lt;/li&gt; &#xA; &lt;li&gt;‚úî Class support&lt;/li&gt; &#xA; &lt;li&gt;‚úî DataView&lt;/li&gt; &#xA; &lt;li&gt;‚úî Destructuring&lt;/li&gt; &#xA; &lt;li&gt;‚úî Default, rest and spread&lt;/li&gt; &#xA; &lt;li&gt;‚úî Enhanced object literals&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;for...of&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Generators&lt;/li&gt; &#xA; &lt;li&gt;‚úî Template strings&lt;/li&gt; &#xA; &lt;li&gt;‚úî Lexical scoping of variables (let and const)&lt;/li&gt; &#xA; &lt;li&gt;‚úî Map and Set&lt;/li&gt; &#xA; &lt;li&gt;‚úî Modules and module loaders&lt;/li&gt; &#xA; &lt;li&gt;‚úî Promises (Experimental, API is unstable)&lt;/li&gt; &#xA; &lt;li&gt;‚úî Reflect&lt;/li&gt; &#xA; &lt;li&gt;‚úî Proxies&lt;/li&gt; &#xA; &lt;li&gt;‚úî Symbols&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Tail calls&lt;/li&gt; &#xA; &lt;li&gt;‚úî Typed arrays&lt;/li&gt; &#xA; &lt;li&gt;‚úî Unicode&lt;/li&gt; &#xA; &lt;li&gt;‚úî Weakmap and Weakset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2016&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Array.prototype.includes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;await&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî Block-scoping of variables and functions&lt;/li&gt; &#xA; &lt;li&gt;‚úî Exponentiation operator &lt;code&gt;**&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî Destructuring patterns (of variables)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2017&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Object.values&lt;/code&gt;, &lt;code&gt;Object.entries&lt;/code&gt; and &lt;code&gt;Object.getOwnPropertyDescriptors&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2018&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Promise.prototype.finally&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî RegExp named capture groups&lt;/li&gt; &#xA; &lt;li&gt;‚úî Rest/spread operators for object literals (&lt;code&gt;...identifier&lt;/code&gt;),&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2019&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Array.prototype.flat&lt;/code&gt;, &lt;code&gt;Array.prototype.flatMap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;String.prototype.trimStart&lt;/code&gt;, &lt;code&gt;String.prototype.trimEnd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Object.fromEntries&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Symbol.description&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî Optional catch binding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;BigInt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚ùå &lt;code&gt;export * as ns from&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;for-in&lt;/code&gt; enhancements&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;globalThis&lt;/code&gt; object&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;import&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;import.meta&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî Nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;‚úî Optional chaining&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Promise.allSettled&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;String.prototype.matchAll&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2021&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî Logical Assignment Operators (&lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; &lt;code&gt;||=&lt;/code&gt; &lt;code&gt;??=&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;‚úî Numeric Separators (&lt;code&gt;1_000&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;AggregateError&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;Promise.any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;String.prototype.replaceAll&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;WeakRef&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;FinalizationRegistry&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript 2022&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ùå Class Fields&lt;/li&gt; &#xA; &lt;li&gt;‚úî RegExp Match Indices&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Top-level await&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Ergonomic brand checks for Private Fields&lt;/li&gt; &#xA; &lt;li&gt;‚úî &lt;code&gt;.at()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úî Accessible &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt; (&lt;code&gt;Object.hasOwn&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Class Static Block&lt;/li&gt; &#xA; &lt;li&gt;‚úî Error Cause&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ECMAScript Stage 3 (no version yet)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úî Array find from last&lt;/li&gt; &#xA; &lt;li&gt;‚úî Array.group and Array.groupToMap&lt;/li&gt; &#xA; &lt;li&gt;‚úî ShadowRealm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Further refined .NET CLR interop capabilities&lt;/li&gt; &#xA; &lt;li&gt;Constraints for execution (recursion, memory usage, duration)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Follow new features as they are being implemented, see &lt;a href=&#34;https://github.com/sebastienros/jint/issues/343&#34;&gt;https://github.com/sebastienros/jint/issues/343&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Because Jint neither generates any .NET bytecode nor uses the DLR it runs relatively small scripts really fast&lt;/li&gt; &#xA; &lt;li&gt;If you repeatedly run the same script, you should cache the &lt;code&gt;Script&lt;/code&gt; or &lt;code&gt;Module&lt;/code&gt; instance produced by Esprima and feed it to Jint instead of the content string&lt;/li&gt; &#xA; &lt;li&gt;You should prefer running engine in strict mode, it improves performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out &lt;a href=&#34;https://raw.githubusercontent.com/sebastienros/jint/main/Jint.Benchmark&#34;&gt;the engine comparison results&lt;/a&gt;, bear in mind that every use case is different and benchmarks might not reflect your real-world usage.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Join the chat on &lt;a href=&#34;https://gitter.im/sebastienros/jint&#34;&gt;Gitter&lt;/a&gt; or post your questions with the &lt;code&gt;jint&lt;/code&gt; tag on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/jint&#34;&gt;stackoverflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Video&lt;/h2&gt; &#xA;&lt;p&gt;Here is a short video of how Jint works and some sample usage&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/shows/code-conversations/sebastien-ros-on-jint-javascript-interpreter-net&#34;&gt;https://docs.microsoft.com/shows/code-conversations/sebastien-ros-on-jint-javascript-interpreter-net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;This example defines a new value named &lt;code&gt;log&lt;/code&gt; pointing to &lt;code&gt;Console.WriteLine&lt;/code&gt;, then runs a script calling &lt;code&gt;log(&#39;Hello World!&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var engine = new Engine()&#xA;    .SetValue(&#34;log&#34;, new Action&amp;lt;object&amp;gt;(Console.WriteLine));&#xA;    &#xA;engine.Execute(@&#34;&#xA;    function hello() { &#xA;        log(&#39;Hello World&#39;);&#xA;    };&#xA; &#xA;    hello();&#xA;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the variable &lt;code&gt;x&lt;/code&gt; is set to &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;x * x&lt;/code&gt; is evaluated in JavaScript. The result is returned to .NET directly, in this case as a &lt;code&gt;double&lt;/code&gt; value &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var square = new Engine()&#xA;    .SetValue(&#34;x&#34;, 3) // define a new variable&#xA;    .Evaluate(&#34;x * x&#34;) // evaluate a statement&#xA;    .ToObject(); // converts the value to .NET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly pass POCOs or anonymous objects and use them from JavaScript. In this example for instance a new &lt;code&gt;Person&lt;/code&gt; instance is manipulated from JavaScript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var p = new Person {&#xA;    Name = &#34;Mickey Mouse&#34;&#xA;};&#xA;&#xA;var engine = new Engine()&#xA;    .SetValue(&#34;p&#34;, p)&#xA;    .Execute(&#34;p.Name = &#39;Minnie&#39;&#34;);&#xA;&#xA;Assert.AreEqual(&#34;Minnie&#34;, p.Name);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can invoke JavaScript function reference&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var add = new Engine()&#xA;    .Execute(&#34;function add(a, b) { return a + b; }&#34;)&#xA;    .GetValue(&#34;add&#34;);&#xA;&#xA;add.Invoke(1, 2); // -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or directly by name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var engine = new Engine()&#xA;   .Execute(&#34;function add(a, b) { return a + b; }&#34;);&#xA;&#xA;engine.Invoke(&#34;add&#34;, 1, 2); // -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing .NET assemblies and classes&lt;/h2&gt; &#xA;&lt;p&gt;You can allow an engine to access any .NET class by configuring the engine instance like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var engine = new Engine(cfg =&amp;gt; cfg.AllowClr());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you have access to the &lt;code&gt;System&lt;/code&gt; namespace as a global value. Here is how it&#39;s used in the context on the command line utility:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jint&amp;gt; var file = new System.IO.StreamWriter(&#39;log.txt&#39;);&#xA;jint&amp;gt; file.WriteLine(&#39;Hello World !&#39;);&#xA;jint&amp;gt; file.Dispose();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And even create shortcuts to common .NET methods&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jint&amp;gt; var log = System.Console.WriteLine;&#xA;jint&amp;gt; log(&#39;Hello World !&#39;);&#xA;=&amp;gt; &#34;Hello World !&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When allowing the CLR, you can optionally pass custom assemblies to load types from.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var engine = new Engine(cfg =&amp;gt; cfg&#xA;    .AllowClr(typeof(Bar).Assembly)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then to assign local namespaces the same way &lt;code&gt;System&lt;/code&gt; does it for you, use &lt;code&gt;importNamespace&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jint&amp;gt; var Foo = importNamespace(&#39;Foo&#39;);&#xA;jint&amp;gt; var bar = new Foo.Bar();&#xA;jint&amp;gt; log(bar.ToString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;adding a specific CLR type reference can be done like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;engine.SetValue(&#34;TheType&#34;, TypeReference.CreateTypeReference(engine, typeof(TheType)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and used this way&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jint&amp;gt; var o = new TheType();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generic types are also supported. Here is how to declare, instantiate and use a &lt;code&gt;List&amp;lt;string&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jint&amp;gt; var ListOfString = System.Collections.Generic.List(System.String);&#xA;jint&amp;gt; var list = new ListOfString();&#xA;jint&amp;gt; list.Add(&#39;foo&#39;);&#xA;jint&amp;gt; list.Add(1); // automatically converted to String&#xA;jint&amp;gt; list.Count; // 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Internationalization&lt;/h2&gt; &#xA;&lt;p&gt;You can enforce what Time Zone or Culture the engine should use when locale JavaScript methods are used if you don&#39;t want to use the computer&#39;s default values.&lt;/p&gt; &#xA;&lt;p&gt;This example forces the Time Zone to Pacific Standard Time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var PST = TimeZoneInfo.FindSystemTimeZoneById(&#34;Pacific Standard Time&#34;);&#xA;var engine = new Engine(cfg =&amp;gt; cfg.LocalTimeZone(PST));&#xA;    &#xA;engine.Execute(&#34;new Date().toString()&#34;); // Wed Dec 31 1969 16:00:00 GMT-08:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example is using French as the default culture.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var FR = CultureInfo.GetCultureInfo(&#34;fr-FR&#34;);&#xA;var engine = new Engine(cfg =&amp;gt; cfg.Culture(FR));&#xA;    &#xA;engine.Execute(&#34;new Number(1.23).toString()&#34;); // 1.23&#xA;engine.Execute(&#34;new Number(1.23).toLocaleString()&#34;); // 1,23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execution Constraints&lt;/h2&gt; &#xA;&lt;p&gt;Execution constraints are used during script execution to ensure that requirements around resource consumption are met, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scripts should not use more than X memory.&lt;/li&gt; &#xA; &lt;li&gt;Scripts should only run for a maximum amount of time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can configure them via the options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var engine = new Engine(options =&amp;gt; {&#xA;&#xA;    // Limit memory allocations to MB&#xA;    options.LimitMemory(4_000_000);&#xA;&#xA;    // Set a timeout to 4 seconds.&#xA;    options.TimeoutInterval(TimeSpan.FromSeconds(4));&#xA;&#xA;    // Set limit of 1000 executed statements.&#xA;    options.MaxStatements(1000);&#xA;&#xA;    // Use a cancellation token.&#xA;    options.CancellationToken(cancellationToken);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also write a custom constraint by deriving from the &lt;code&gt;Constraint&lt;/code&gt; base class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;public abstract class Constraint&#xA;{&#xA;    /// Called before script is run and useful when you use an engine object for multiple executions.&#xA;    public abstract void Reset();&#xA;&#xA;    // Called before each statement to check if your requirements are met; if not - throws an exception.&#xA;    public abstract void Check();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example we can write a constraint that stops scripts when the CPU usage gets too high:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;class MyCPUConstraint : Constraint&#xA;{&#xA;    public override void Reset()&#xA;    {&#xA;    }&#xA;&#xA;    public override void Check()&#xA;    {&#xA;        var cpuUsage = GetCPUUsage();&#xA;&#xA;        if (cpuUsage &amp;gt; 0.8) // 80%&#xA;        {&#xA;            throw new OperationCancelledException();&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;var engine = new Engine(options =&amp;gt;&#xA;{&#xA;    options.Constraint(new MyCPUConstraint());&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you reuse the engine you want to use cancellation tokens you have to reset the token before each call of &lt;code&gt;Execute&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var constraint = new CancellationConstraint();&#xA;&#xA;var engine = new Engine(options =&amp;gt;&#xA;{&#xA;    options.Constraint(constraint);&#xA;});&#xA;&#xA;for (var i = 0; i &amp;lt; 10; i++) &#xA;{&#xA;    using (var tcs = new CancellationTokenSource(TimeSpan.FromSeconds(10)))&#xA;    {&#xA;        constraint.Reset(tcs.Token);&#xA;&#xA;        engine.SetValue(&#34;a&#34;, 1);&#xA;        engine.Execute(&#34;a++&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Modules&lt;/h2&gt; &#xA;&lt;p&gt;You can use modules to &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; variables from multiple script files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var engine = new Engine(options =&amp;gt;&#xA;{&#xA;    options.EnableModules(@&#34;C:\Scripts&#34;);&#xA;})&#xA;&#xA;var ns = engine.ImportModule(&#34;./my-module.js&#34;);&#xA;&#xA;var value = ns.Get(&#34;value&#34;).AsString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the module resolution algorithm will be restricted to the base path specified in &lt;code&gt;EnableModules&lt;/code&gt;, and there is no package support. However you can provide your own packages in two ways.&lt;/p&gt; &#xA;&lt;p&gt;Defining modules using JavaScript source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;engine.CreateModule(&#34;user&#34;, &#34;export const name = &#39;John&#39;;&#34;)&#xA;&#xA;var ns = engine.ImportModule(&#34;user&#34;);&#xA;&#xA;var name = ns.Get(&#34;name&#34;).AsString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Defining modules using the module builder, which allows you to export CLR classes and values from .NET:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// Create the module &#39;lib&#39; with the class MyClass and the variable version&#xA;engine.CreateModule(&#34;lib&#34;, builder =&amp;gt; builder&#xA;    .ExportType&amp;lt;MyClass&amp;gt;()&#xA;    .ExportValue(&#34;version&#34;, 15)&#xA;);&#xA;&#xA;// Create a user-defined module and do something with &#39;lib&#39;&#xA;engine.CreateModule(&#34;custom&#34;, @&#34;&#xA;    import { MyClass, version } from &#39;lib&#39;;&#xA;    const x = new MyClass();&#xA;    export const result as x.doSomething();&#xA;&#34;);&#xA;&#xA;// Import the user-defined module; this will execute the import chain&#xA;var ns = engine.ImportModule(&#34;custom&#34;);&#xA;&#xA;// The result contains &#34;live&#34; bindings to the module&#xA;var id = ns.Get(&#34;result&#34;).AsInteger();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you don&#39;t need to &lt;code&gt;EnableModules&lt;/code&gt; if you only use modules created using &lt;code&gt;AddModule&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;.NET Interoperability&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manipulate CLR objects from JavaScript, including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Single values&lt;/li&gt; &#xA;   &lt;li&gt;Objects &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Properties&lt;/li&gt; &#xA;     &lt;li&gt;Methods&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Delegates&lt;/li&gt; &#xA;   &lt;li&gt;Anonymous objects&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Convert JavaScript values to CLR objects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Primitive values&lt;/li&gt; &#xA;   &lt;li&gt;Object -&amp;gt; expando objects (&lt;code&gt;IDictionary&amp;lt;string, object&amp;gt;&lt;/code&gt; and dynamic)&lt;/li&gt; &#xA;   &lt;li&gt;Array -&amp;gt; object[]&lt;/li&gt; &#xA;   &lt;li&gt;Date -&amp;gt; DateTime&lt;/li&gt; &#xA;   &lt;li&gt;number -&amp;gt; double&lt;/li&gt; &#xA;   &lt;li&gt;string -&amp;gt; string&lt;/li&gt; &#xA;   &lt;li&gt;boolean -&amp;gt; bool&lt;/li&gt; &#xA;   &lt;li&gt;Regex -&amp;gt; RegExp&lt;/li&gt; &#xA;   &lt;li&gt;Function -&amp;gt; Delegate&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Extensions methods&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;The following features provide you with a secure, sand-boxed environment to run user scripts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define memory limits, to prevent allocations from depleting the memory.&lt;/li&gt; &#xA; &lt;li&gt;Enable/disable usage of BCL to prevent scripts from invoking .NET code.&lt;/li&gt; &#xA; &lt;li&gt;Limit number of statements to prevent infinite loops.&lt;/li&gt; &#xA; &lt;li&gt;Limit depth of calls to prevent deep recursion calls.&lt;/li&gt; &#xA; &lt;li&gt;Define a timeout, to prevent scripts from taking too long to finish.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Branches and releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The recommended branch is &lt;strong&gt;main&lt;/strong&gt;, any PR should target this branch&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;main&lt;/strong&gt; branch is automatically built and published on &lt;a href=&#34;https://www.myget.org/feed/Packages/jint&#34;&gt;MyGet&lt;/a&gt;. Add this feed to your NuGet sources to use it: &lt;a href=&#34;https://www.myget.org/F/jint/api/v3/index.json&#34;&gt;https://www.myget.org/F/jint/api/v3/index.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;main&lt;/strong&gt; branch is occasionally published on &lt;a href=&#34;https://www.nuget.org/packages/jint&#34;&gt;NuGet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The 3.x releases have more features (from es6) and is faster than the 2.x ones. They run the same test suite so they are as reliable. For instance &lt;a href=&#34;https://github.com/ravendb/ravendb&#34;&gt;RavenDB&lt;/a&gt; is using the 3.x version.&lt;/li&gt; &#xA; &lt;li&gt;The 3.x versions are marked as &lt;em&gt;beta&lt;/em&gt; as they might get breaking changes while es6 features are added.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>huntandhackett/Antignis</title>
    <updated>2022-10-24T01:32:34Z</updated>
    <id>tag:github.com,2022-10-24:/huntandhackett/Antignis</id>
    <link href="https://github.com/huntandhackett/Antignis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code and examples for Antignis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Antignis&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;   ,_     _,            _____          __  .__              .__&#xA;     &#39;._.&#39;             /  _  \   _____/  |_|__| ____   ____ |__| ______&#xA;&#39;-,   (_)   ,-&#39;       /  /_\  \ /    \   __\  |/ ___\ /    \|  |/  ___/&#xA;  &#39;._ .:. _.&#39;        /    |    \   |  \  | |  / /_/  &amp;gt;   |  \  |\___ \&#xA;   _ &#39;|Y|&#39; _         \____|__  /___|  /__| |__\___  /|___|  /__/____  &amp;gt;&#xA; ,` `&amp;gt;\ /&amp;lt;` `,               \/     \/       /_____/      \/        \/&#xA;` ,-`  I  `-, `&#xA;  |   /=\   |        &#xA;,-&#39;   |=|   &#39;-,      &#xA;      )-(&#xA;      \_/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Link to blogpost: &lt;a href=&#34;https://www.huntandhackett.com/blog/introducing-antignis-a-data-driven-tool-to-configure-windows-hostbased-firewall&#34;&gt;https://www.huntandhackett.com/blog/introducing-antignis-a-data-driven-tool-to-configure-windows-hostbased-firewall&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About this repository&lt;/h2&gt; &#xA;&lt;p&gt;Antignis comes with two tools: &lt;code&gt;Antignis.Server&lt;/code&gt; and &lt;code&gt;Antignis.Client&lt;/code&gt;.&lt;br&gt; These tools have their own project and dedicated READMEs that goes into more detail on how to use it, how it was created and more.&lt;/p&gt; &#xA;&lt;h2&gt;How to download&lt;/h2&gt; &#xA;&lt;p&gt;Go to Releases to download the packages. Or clone the repository and build the solution yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Antignis was created using &lt;code&gt;.NET Framework 4.8&lt;/code&gt;. You will need to install this before you can use Antignis.&lt;/p&gt; &#xA;&lt;p&gt;For Antignis.Server, there are additional requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The tool must be run on a domain joined computer with a domain user account&lt;/li&gt; &#xA; &lt;li&gt;The user running the tool must have enough privileges to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;create groups and populate the groups&lt;/li&gt; &#xA;   &lt;li&gt;create GPOs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Antignis.Client, the user or computer account must be able to write to the output directory. If no output directory is specified, this defaults to the startup directory of the tool.&lt;/p&gt; &#xA;&lt;h2&gt;Use other data sources to enrich the Antignis database&lt;/h2&gt; &#xA;&lt;p&gt;If you do not want to use Antignis.Client but rather use other data sources to enrich the database, you can do so by exporting the existing data into a JSON file. There&#39;s a JSON schema available in &lt;code&gt;https://github.com/huntandhackett/Antignis/tree/main/Misc&lt;/code&gt; to validate the output. If the schema successfully validates the JSON file, the JSON files can be imported into the database as well.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0&lt;/p&gt;</summary>
  </entry>
</feed>