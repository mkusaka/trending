<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-19T01:21:21Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scrtwpns/mixbox</title>
    <updated>2023-08-19T01:21:21Z</updated>
    <id>tag:github.com,2023-08-19:/scrtwpns/mixbox</id>
    <link href="https://github.com/scrtwpns/mixbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mixbox is a library for natural color mixing based on real pigments.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mixbox: Pigment-Based Color Mixing&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://scrtwpns.com/mixbox/teaser.jpg&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Mixbox is a new blending method for natural color mixing. It produces saturated gradients with hue shifts and natural secondary colors during blending. Yellow and blue make green. The interface is simple - RGB in, RGB out. Internally, Mixbox treats colors as real-life pigments using the Kubelka &amp;amp; Munk theory to predict realistic color behavior. That way, colors act like actual paints and bring more vibrance and intuition into digital painting.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Paper: &lt;a href=&#34;https://scrtwpns.com/mixbox.pdf&#34;&gt;https://scrtwpns.com/mixbox.pdf&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Video: &lt;a href=&#34;https://youtu.be/ATzVPVNp1qA&#34;&gt;https://youtu.be/ATzVPVNp1qA&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk: &lt;a href=&#34;https://youtu.be/_qa5iWdfNKg&#34;&gt;https://youtu.be/_qa5iWdfNKg&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;Demo: &lt;a href=&#34;https://scrtwpns.com/mixbox/painter&#34;&gt;https://scrtwpns.com/mixbox/painter&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mixbox is shipping in Rebelle 5 Pro as the &lt;a href=&#34;https://www.escapemotions.com/products/rebelle/about&#34;&gt;Rebelle Pigments&lt;/a&gt; feature and in the &lt;a href=&#34;https://flipfluids.com/&#34;&gt;Flip Fluids&lt;/a&gt; addon for Blender.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/cpp&#34;&gt;C / C++&lt;/a&gt;: &lt;code&gt;#include &#34;mixbox.h&#34;&lt;/code&gt; and build &lt;code&gt;mixbox.cpp&lt;/code&gt; together with your project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/csharp&#34;&gt;C#&lt;/a&gt;: use Mixbox package from NuGet &lt;code&gt;https://www.nuget.org/packages/Mixbox/2.0.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/java&#34;&gt;Java&lt;/a&gt;: add &lt;code&gt;implementation &#39;com.scrtwpns:mixbox:2.0.0&#39;&lt;/code&gt; to your Gradle&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript&#34;&gt;JavaScript&lt;/a&gt;: &lt;code&gt;&amp;lt;script src=&#34;https://scrtwpns.com/mixbox.js&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript&#34;&gt;Node&lt;/a&gt;: &lt;code&gt;npm install mixbox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/python&#34;&gt;Python&lt;/a&gt;: &lt;code&gt;pip install pymixbox&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/rust&#34;&gt;Rust&lt;/a&gt;: add &lt;code&gt;mixbox = &#34;2.0.0&#34;&lt;/code&gt; to your Cargo.toml&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/unity&#34;&gt;Unity&lt;/a&gt;: add package from git url &lt;code&gt;git://github.com/scrtwpns/mixbox.git#upm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/godot&#34;&gt;Godot&lt;/a&gt;: copy &lt;code&gt;godot\addons&lt;/code&gt; to the root of your project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/shaders&#34;&gt;Shaders&lt;/a&gt;: load &lt;code&gt;mixbox_lut.png&lt;/code&gt; as texture and include &lt;code&gt;mixbox.glsl&lt;/code&gt;/&lt;code&gt;.hlsl&lt;/code&gt;/&lt;code&gt;.metal&lt;/code&gt; code into your shader&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pigment Colors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pigment&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;RGB&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Float RGB&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linear RGB&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cadmium Yellow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/cadmium_yellow.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;254, 236, 0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.996, 0.925, 0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.991, 0.839, 0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hansa Yellow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/hansa_yellow.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;252, 211, 0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.988, 0.827, 0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.973, 0.651, 0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cadmium Orange&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/cadmium_orange.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;255, 105, 0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0, 0.412, 0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0, 0.141, 0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cadmium Red&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/cadmium_red.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;255, 39, 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0, 0.153, 0.008&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0, 0.02, 0.001&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Quinacridone Magenta&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/quinacridone_magenta.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;128, 2, 46&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.502, 0.008, 0.18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.216, 0.001, 0.027&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cobalt Violet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/cobalt_violet.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;78, 0, 66&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.306, 0.0, 0.259&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.076, 0.0, 0.054&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ultramarine Blue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/ultramarine_blue.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25, 0, 89&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.098, 0.0, 0.349&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.01, 0.0, 0.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cobalt Blue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/cobalt_blue.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0, 33, 133&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.0, 0.129, 0.522&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.0, 0.015, 0.235&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phthalo Blue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/phthalo_blue.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13, 27, 68&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.051, 0.106, 0.267&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.004, 0.011, 0.058&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phthalo Green&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/phthalo_green.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0, 60, 50&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.0, 0.235, 0.196&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.0, 0.045, 0.032&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Permanent Green&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/permanent_green.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7, 109, 22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.027, 0.427, 0.086&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.002, 0.153, 0.008&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sap Green&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/sap_green.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;107, 148, 4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.42, 0.58, 0.016&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.147, 0.296, 0.001&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Burnt Sienna&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/pigments/burnt_sienna.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;123, 72, 0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.482, 0.282, 0.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.198, 0.065, 0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;C / C++&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &#34;mixbox.h&#34;&#xA;&#xA;int main() {&#xA;  unsigned char r1 =   0, g1 = 33,  b1 = 133; // blue&#xA;  unsigned char r2 = 252, g2 = 211, b2 = 0;   // yellow&#xA;  float t = 0.5;&#xA;  unsigned char r, g, b;&#xA;&#xA;  mixbox_lerp(r1, g1, b1,  // first color&#xA;              r2, g2, b2,  // second color&#xA;              t,           // mixing ratio&#xA;              &amp;amp;r, &amp;amp;g, &amp;amp;b); // result&#xA;&#xA;  printf(&#34;%d %d %d\n&#34;, r, g, b);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GLSL Shader&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-glsl&#34;&gt;#ifdef GL_ES&#xA;precision highp float;&#xA;#endif&#xA;&#xA;uniform sampler2D mixbox_lut; // bind the &#34;mixbox_lut.png&#34; texture here&#xA;&#xA;#include &#34;mixbox.glsl&#34; // paste the contents of mixbox.glsl here&#xA;&#xA;void main(void) {&#xA;  vec3 rgb1 = vec3(0, 0.129, 0.522); // blue&#xA;  vec3 rgb2 = vec3(0.988, 0.827, 0); // yellow&#xA;  float t = 0.5;                     // mixing ratio&#xA;&#xA;  vec3 rgb = mixbox_lerp(rgb1, rgb2, t);&#xA;&#xA;  gl_FragColor = vec4(rgb, 1.0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rust&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {&#xA;    let rgb1 = [0, 33, 133];  // blue&#xA;    let rgb2 = [252, 211, 0]; // yellow&#xA;    let t = 0.5;              // mixing ratio&#xA;&#xA;    let [r, g, b] = mixbox::lerp(&amp;amp;rgb1, &amp;amp;rgb2, t);&#xA;&#xA;    println!(&#34;{} {} {}&#34;, r, g, b);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import mixbox&#xA;&#xA;rgb1 = (0, 33, 133)  # blue&#xA;rgb2 = (252, 211, 0) # yellow&#xA;t = 0.5              # mixing ratio&#xA;&#xA;rgb_mix = mixbox.lerp(rgb1, rgb2, t)&#xA;&#xA;print(rgb_mix)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JavaScript&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;script src=&#34;https://scrtwpns.com/mixbox.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;    &amp;lt;script&amp;gt;&#xA;      var rgb1 = &#34;rgb(0, 33, 133)&#34;;  // blue&#xA;      var rgb2 = &#34;rgb(252, 211, 0)&#34;; // yellow&#xA;      var t = 0.5;                   // mixing ratio&#xA;&#xA;      var mixed  = mixbox.lerp(rgb1, rgb2, t);&#xA;&#xA;      document.body.style.background = mixed;&#xA;    &amp;lt;/script&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Node&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import mixbox from &#39;mixbox&#39;;&#xA;&#xA;let rgb1 = &#34;rgb(0, 33, 133)&#34;;  // blue&#xA;let rgb2 = &#34;rgb(252, 211, 0)&#34;; // yellow&#xA;let t = 0.5;                   // mixing ratio&#xA;&#xA;let mixed  = mixbox.lerp(rgb1, rgb2, t);&#xA;&#xA;console.log(mixed);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Java&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.awt.Color;&#xA;import com.scrtwpns.Mixbox;&#xA;&#xA;class HelloMixbox {&#xA;  public static void main(String[] args) {&#xA;    Color color1 = new Color(0, 33, 133);  // blue&#xA;    Color color2 = new Color(252, 211, 0); // yellow&#xA;    float t = 0.5f;                        // mixing ratio&#xA;&#xA;    Color colorMix = new Color(Mixbox.lerp(color1.getRGB(), color2.getRGB(), t));&#xA;&#xA;    System.out.print(colorMix);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.example.hellomixbox;&#xA;&#xA;import android.app.Activity;&#xA;import android.os.Bundle;&#xA;import android.view.View;&#xA;import android.graphics.Color;&#xA;&#xA;import com.scrtwpns.Mixbox;&#xA;&#xA;public class MainActivity extends Activity {&#xA;    @Override&#xA;    protected void onCreate(Bundle savedInstanceState) {&#xA;        super.onCreate(savedInstanceState);&#xA;&#xA;        int color1 = Color.rgb(0, 33, 133);  // blue&#xA;        int color2 = Color.rgb(252, 211, 0); // yellow&#xA;        float t = 0.5f;                      // mixing ratio&#xA;&#xA;        int colorMix = Mixbox.lerp(color1, color2, t);&#xA;&#xA;        View view = new View(this);&#xA;        view.setBackgroundColor(colorMix);&#xA;        setContentView(view);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;C#&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Drawing;&#xA;using Scrtwpns.Mixbox;&#xA;&#xA;public class HelloMixbox&#xA;{&#xA;    public static void Main(string[] args)&#xA;    {&#xA;        Color color1 = Color.FromArgb(0, 33, 133);  // blue&#xA;        Color color2 = Color.FromArgb(252, 211, 0); // yellow&#xA;        float t = 0.5f;                             // mixing ratio&#xA;&#xA;        Color colorMix = Color.FromArgb(Mixbox.Lerp(color1.ToArgb(), color2.ToArgb(), t));&#xA;&#xA;        System.Console.WriteLine(colorMix);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unity&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using UnityEngine;&#xA;using Scrtwpns.Mixbox;&#xA;&#xA;public class NewBehaviourScript : MonoBehaviour&#xA;{&#xA;    void Start()&#xA;    {&#xA;        Color color1 = new Color(0.0f, 0.129f, 0.522f); // blue&#xA;        Color color2 = new Color(0.988f, 0.827f, 0.0f); // yellow&#xA;        float t = 0.5f;                                 // mixing ratio&#xA;&#xA;        Color colorMix = Mixbox.Lerp(color1, color2, t);&#xA;&#xA;        Debug.Log(colorMix);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unity Shader&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ShaderLab&#34;&gt;Shader &#34;MixboxHelloShader&#34;&#xA;{&#xA;    Properties&#xA;    {&#xA;        _MixboxLUT (&#34;Mixbox LUT&#34;, 2D) = &#34;white&#34; {} // assign &#34;Packages/Mixbox/Textures/MixboxLUT.png&#34;&#xA;&#xA;        _Color1 (&#34;Color 1&#34;, Color) = (0, 0.129, 0.522, 1) // blue&#xA;        _Color2 (&#34;Color 2&#34;, Color) = (0.988, 0.827, 0, 1) // yellow&#xA;    }&#xA;    SubShader&#xA;    {&#xA;        Pass&#xA;        {&#xA;            CGPROGRAM&#xA;            #pragma vertex vert&#xA;            #pragma fragment frag&#xA;&#xA;            #include &#34;UnityCG.cginc&#34;&#xA;&#xA;            sampler2D _MixboxLUT;&#xA;            #include &#34;Packages/com.scrtwpns.mixbox/ShaderLibrary/Mixbox.cginc&#34;&#xA;&#xA;            fixed4 _Color1;&#xA;            fixed4 _Color2;&#xA;&#xA;            struct appdata { float4 vertex : POSITION; float2 uv : TEXCOORD0; };&#xA;            struct v2f { float2 uv : TEXCOORD0; float4 vertex : SV_POSITION; };&#xA;&#xA;            v2f vert (appdata v)&#xA;            {&#xA;                v2f o;&#xA;                o.vertex = UnityObjectToClipPos(v.vertex);&#xA;                o.uv = v.uv;&#xA;                return o;&#xA;            }&#xA;&#xA;            fixed4 frag (v2f i) : SV_Target&#xA;            {&#xA;                fixed4 mixedColor = MixboxLerp(_Color1, _Color2, i.uv.x);&#xA;                return mixedColor;&#xA;            }&#xA;            ENDCG&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unity Shader Graph&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://scrtwpns.com/mixbox/unity/shadergraph_.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Godot&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gdscript&#34;&gt;var Mixbox = preload(&#34;res://addons/mixbox/mixbox.gd&#34;)&#xA;&#xA;var color1 = Color(0.0, 0.129, 0.522) # blue&#xA;var color2 = Color(0.988, 0.827, 0.0) # yellow&#xA;var t = 0.5                           # mixing ratio&#xA;&#xA;var color_mix = Mixbox.lerp(color1, color2, t)&#xA;&#xA;print(color_mix)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Godot Shader&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-glsl&#34;&gt;shader_type canvas_item;&#xA;&#xA;uniform sampler2D mixbox_lut; // attach &#34;addons/mixbox/mixbox_lut.png&#34; here&#xA;&#xA;uniform vec4 color1 : hint_color = vec4(0.0, 0.129, 0.522, 1.0); // blue&#xA;uniform vec4 color2 : hint_color = vec4(0.988, 0.827, 0.0, 1.0); // yellow&#xA;&#xA;#include &#34;addons/mixbox/mixbox.gdshaderinc&#34;&#xA;&#xA;void fragment() {&#xA;    COLOR = mixbox_lerp(color1, color2, UV.x);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Godot VisualShader&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://scrtwpns.com/mixbox/godot/visualshader_.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;WebGL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://scrtwpns.com/mixbox.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var shader = `&#xA;  precision highp float;&#xA;&#xA;  uniform sampler2D mixbox_lut; // bind mixbox.lutTexture(gl) here&#xA;&#xA;  #include &#34;mixbox.glsl&#34;&#xA;&#xA;  void main(void) {&#xA;    vec3 rgb1 = vec3(0, 0.129, 0.522); // blue&#xA;    vec3 rgb2 = vec3(0.988, 0.827, 0); // yellow&#xA;    float t = 0.5;                     // mixing ratio&#xA;&#xA;    vec3 rgb = mixbox_lerp(rgb1, rgb2, t);&#xA;&#xA;    gl_FragColor = vec4(rgb, 1.0);&#xA;  }&#xA;`;&#xA;&#xA;shader = shader.replace(&#39;#include &#34;mixbox.glsl&#34;&#39;, mixbox.glsl());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;gl.useProgram(shaderProgram);&#xA;gl.activeTexture(gl.TEXTURE0);&#xA;gl.bindTexture(gl.TEXTURE_2D, mixbox.lutTexture(gl));&#xA;gl.uniform1i(gl.getUniformLocation(shaderProgram, &#34;mixbox_lut&#34;), 0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gradients&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Mountains&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Palette Snakes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/examples/gradients.html&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/examples/gradients.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/examples/mountains.html&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/examples/mountains.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/examples/palette.html&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/examples/palette.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript/examples/gradients.js&#34;&gt;source code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript/examples/mountains.js&#34;&gt;source code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript/examples/palette.js&#34;&gt;source code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Splash Art&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Paint Mixer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Pigment Fluids&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/examples/splash.html&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/examples/splash.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/examples/mixer.html&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/examples/mixer.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/fluids&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/examples/fluids.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript/examples/splash.html&#34;&gt;source code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/scrtwpns/mixbox/master/javascript/examples/mixer.js&#34;&gt;source code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scrtwpns.com/mixbox/fluids/script.js&#34;&gt;source code&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Painter&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://scrtwpns.com/mixbox/painter&#34;&gt;&lt;img src=&#34;https://scrtwpns.com/mixbox/painter_git.jpg&#34;&gt;&lt;/a&gt; &lt;/p&gt; This painting app runs two color mixing implementations in parallel: one based on Mixbox and the other that performs ordinary RGB mixing. The app allows switching between them on the fly, showing the differences between pigment-based mixing and the normal RGB mixing. To launch the painter in your browser, please &#xA;&lt;a href=&#34;https://scrtwpns.com/mixbox/painter&#34;&gt;click here&lt;/a&gt;. &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2022, Secret Weapons. All rights reserved.&lt;br&gt; Mixbox is provided under the CC BY-NC 4.0 license for non-commercial use only.&lt;br&gt; If you want to obtain commercial license, please contact: &lt;a href=&#34;mailto:mixbox@scrtwpns.com&#34;&gt;mixbox@scrtwpns.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elastic/apm-agent-dotnet</title>
    <updated>2023-08-19T01:21:21Z</updated>
    <id>tag:github.com,2023-08-19:/elastic/apm-agent-dotnet</id>
    <link href="https://github.com/elastic/apm-agent-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elastic APM .NET Agent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;apm-agent-dotnet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apm-ci.elastic.co/job/apm-agent-dotnet/job/apm-agent-dotnet-mbp/job/main/&#34;&gt;&lt;img src=&#34;https://apm-ci.elastic.co/buildStatus/icon?job=apm-agent-dotnet/apm-agent-dotnet-mbp/main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/elastic/apm-agent-dotnet&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/elastic/apm-agent-dotnet/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please fill out this survey to help us prioritize framework support: &lt;a href=&#34;https://goo.gl/forms/FHHbhptcDx8eDNx92&#34;&gt;https://goo.gl/forms/FHHbhptcDx8eDNx92&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Official NuGet packages can be referenced from &lt;a href=&#34;https://www.nuget.org&#34;&gt;NuGet.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Download&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The core of the Agent, Public Agent API, Auto instrumentation for libraries that are part of .NET Standard 2.0.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.AspNetCore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ASP.NET Core auto instrumentation.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.AspNetCore/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.AspNetCore.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.EntityFrameworkCore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Entity Framework Core auto instrumentation.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.EntityFrameworkCore/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.EntityFrameworkCore.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.NetCoreAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;References every .NET Core related Elastic APM package. It can be used to simply turn on the agent and activate all auto instrumentation.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.NetCoreAll/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.NetCoreAll.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.AspNetFullFramework&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ASP.NET (classic) auto instrumentation with an IIS Module.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.AspNetFullFramework/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.AspNetFullFramework.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.EntityFramework6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Entity Framework 6 auto instrumentation.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.EntityFramework6/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.EntityFramework6.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.SqlClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;System.Data.SqlClient&lt;/code&gt; and &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt; auto instrumentation. &lt;a href=&#34;https://raw.githubusercontent.com/elastic/apm-agent-dotnet/main/src/Elastic.Apm.SqlClient/README.md&#34;&gt;More details&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.SqlClient/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.SqlClient.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.Elasticsearch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integration with the .NET clients for Elasticsearch.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.Elasticsearch/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.Elasticsearch.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.StackExchange.Redis&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integration with the StackExchange.Redis client for Redis.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.StackExchange.Redis/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.StackExchange.Redis.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.MongoDb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integration with the MongoDb.Driver driver for MongoDb.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.MongoDb/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.MongoDb.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.Azure.ServiceBus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integration with Azure ServiceBus&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.Azure.ServiceBus/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.Azure.ServiceBus.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.Azure.Storage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integration with Azure Storage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.Azure.Storage/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.Azure.Storage.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Elastic.Apm.Azure.CosmosDb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Integration with Azure CosmosDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elastic.Apm.Azure.CosmosDb/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elastic.Apm.Azure.CosmosDb.svg?sanitize=true&#34; alt=&#34;NuGet Release&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Docs are located &lt;a href=&#34;https://www.elastic.co/guide/en/apm/agent/dotnet/&#34;&gt;here&lt;/a&gt;. That page is generated from the content of the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/apm-agent-dotnet/main/docs&#34;&gt;docs&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;If you have any feedback feel free to &lt;a href=&#34;https://github.com/elastic/apm-agent-dotnet/issues/new&#34;&gt;open an issue&lt;/a&gt;. For any other assistance, please open or add to a topic on the &lt;a href=&#34;https://discuss.elastic.co/c/apm&#34;&gt;APM discuss forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need help or hit an issue, please start by opening a topic on our discuss forums. Please note that we reserve GitHub tickets for confirmed bugs and enhancement requests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/apm-agent-dotnet/main/CONTRIBUTING.md&#34;&gt;contributing documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/apm-agent-dotnet/main/RELEASING.md&#34;&gt;releasing documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Repository structure&lt;/h2&gt; &#xA;&lt;p&gt;These are the main folders within the repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src&lt;/code&gt;: The source code of the agent. Each project within this folder targets a specific library, and there is one core project, which is referenced by all other projects. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm&lt;/code&gt;: The core project targeting .NET Standard 2.0. It contains the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/apm-agent-dotnet/main/docs/public-api.asciidoc&#34;&gt;Agent API&lt;/a&gt;, the infrastructure to report data to the APM Server, the logging infrastructure, and auto-instrumentation for things that are part of .NET Standard 2.0.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.AspNetCore&lt;/code&gt;: Auto-instrumentation for ASP.NET Core.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.EntityFrameworkCore&lt;/code&gt;: Auto-instrumentation for EntityFramework Core.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.NetCoreAll&lt;/code&gt;: A convenient project that references all other .NET Core related projects from the &lt;code&gt;src&lt;/code&gt; folder. It contains an ASP.NET Core middleware extension that enables the agent and every other component with a single line of code. In a typical ASP.NET Core application (e.g. apps referencing &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.All&#34;&gt;Microsoft.AspNetCore.All&lt;/a&gt;) that uses EF Core the &lt;code&gt;Elastic.Apm.NetCoreAll&lt;/code&gt; can be referenced.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.AspNetFullFramework&lt;/code&gt;: Auto-instrumentation for ASP.NET (classic).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.EntityFramework6&lt;/code&gt;: Auto-instrumentation for Entity Framework 6.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.SqlClient&lt;/code&gt;: Auto-instrumentation for &lt;code&gt;System.Data.SqlClient&lt;/code&gt; and &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.Elasticsearch&lt;/code&gt;: Auto-instrumentation for the official .NET clients for Elasticsearch.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.StackExchange.Redis&lt;/code&gt;: Auto-instrumentation for the StackExchange.Redis client for Redis.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.MongoDb&lt;/code&gt;: Instrumentation for the MongoDb.Driver driver for MongoDb.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.Azure.ServiceBus&lt;/code&gt;: Instrumentation for Azure ServiceBus.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.Azure.Storage&lt;/code&gt;: Instrumentation for Azure Storage.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt;: This folder contains test projects. Typically each project from the &lt;code&gt;src&lt;/code&gt; folder has a corresponding test project. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.Tests&lt;/code&gt;: Tests the &lt;code&gt;Elastic.Apm&lt;/code&gt; project.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.AspNetCore.Tests&lt;/code&gt;: Tests the &lt;code&gt;Elastic.Apm.AspNetCore&lt;/code&gt; project.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.AspNetFullFramework.Tests&lt;/code&gt;: Tests the &lt;code&gt;Elastic.Apm.AspNetFullFramework&lt;/code&gt; project.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Elastic.Apm.Tests.MockApmServer&lt;/code&gt;: Implementation of APM Server mock used for agent-as-component tests (for example in &lt;code&gt;Elastic.Apm.AspNetFullFramework.Tests&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt;: This folder contains the official documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sample&lt;/code&gt;: Sample applications that are monitored by the APM .NET Agent. These are also very useful for development: you can start one of these applications and debug the agent through them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.build&lt;/code&gt;: Contains files used when building the solution, and &lt;a href=&#34;https://raw.githubusercontent.com/elastic/apm-agent-dotnet/main/build/README.md&#34;&gt;a project to perform common build tasks&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.ci&lt;/code&gt;: This folder contains all the scripts used to build, test and release the agent within the CI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Elastic APM .NET Agent is licensed under Apache License, Version 2.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Oryx</title>
    <updated>2023-08-19T01:21:21Z</updated>
    <id>tag:github.com,2023-08-19:/microsoft/Oryx</id>
    <link href="https://github.com/microsoft/Oryx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build your repo automatically.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Oryx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devdiv.visualstudio.com/DevDiv/_build/latest?definitionId=10393&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://devdiv.visualstudio.com/DevDiv/_apis/build/status/Oryx/Oryx-Nightly?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oryx is a build system which automatically compiles source code repos into runnable artifacts. It is used to build web apps for &lt;a href=&#34;https://azure.microsoft.com/services/app-service/&#34;&gt;Azure App Service&lt;/a&gt; and other platforms.&lt;/p&gt; &#xA;&lt;p&gt;To receive updates on runtimes and versions supported by Oryx and App Service, subscribe to &lt;a href=&#34;https://azure.microsoft.com/updates&#34;&gt;Azure Updates&lt;/a&gt; or watch the &lt;a href=&#34;https://github.com/Azure/app-service-announcements&#34;&gt;github.com/Azure/app-service-announcements&lt;/a&gt; tracker.&lt;/p&gt; &#xA;&lt;p&gt;Oryx generates and runs an opinionated build script within a &lt;em&gt;build&lt;/em&gt; container based on analysis of a codebase&#39;s contents. For example, if &lt;code&gt;package.json&lt;/code&gt; is discovered in the repo Oryx includes &lt;code&gt;npm run build&lt;/code&gt; in the build script; or if &lt;code&gt;requirements.txt&lt;/code&gt; is found it includes &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Oryx also generates a run-time startup script for the app including typical start commands like &lt;code&gt;npm run start&lt;/code&gt; for Node.js or a WSGI module and server for Python.&lt;/p&gt; &#xA;&lt;p&gt;The built artifacts and start script are loaded into a minimalistic &lt;em&gt;run&lt;/em&gt; container and run.&lt;/p&gt; &#xA;&lt;h1&gt;Supported platforms and versions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/supportedPlatformVersions.md&#34;&gt;Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Patches (0.0.&lt;strong&gt;x&lt;/strong&gt;) are applied as soon as possible after they are released upstream.&lt;/p&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;p&gt;Though built first for use within Azure services, you can also use the Oryx build system yourself for troubleshooting and tests. Following are simple instructions; for complete background see our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/architecture.md&#34;&gt;architecture doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Oryx includes two command-line applications; the first is included in the &lt;em&gt;build&lt;/em&gt; image and generates a build script by analyzing a codebase. The second is included in &lt;em&gt;run&lt;/em&gt; images and generates a startup script. Both are aliased and accessible as &lt;code&gt;oryx&lt;/code&gt; in their respective images.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;oryx build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;oryx build&lt;/code&gt; is run, the system detects which programming platforms appear to be in use and applies toolsets appropriate for each one. You can override the default choices through &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/configuration.md#oryx-configuration&#34;&gt;configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--output&lt;/code&gt; (or &lt;code&gt;-o&lt;/code&gt;) parameter specifies where prepared artifacts will be placed; if not specified the source directory is used for output as well.&lt;/p&gt; &#xA;&lt;p&gt;For all options, specify &lt;code&gt;oryx --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;oryx create-script -appPath&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;oryx&lt;/code&gt; is run in the runtime images it generates a start script named run.sh, by default in the same folder as the compiled artifact.&lt;/p&gt; &#xA;&lt;h2&gt;Support for Build Configuration File&lt;/h2&gt; &#xA;&lt;p&gt;The App Service YAML file (&lt;code&gt;appsvc.yaml&lt;/code&gt;) is used to specify the build and run commands for your Web Apps, thus overriding any defaults provided by the App Service Build Service. App Service expects this file to be in the root directory of your project.&lt;/p&gt; &#xA;&lt;h3&gt;Format&lt;/h3&gt; &#xA;&lt;p&gt;There are ordered keys for &lt;code&gt;pre-build&lt;/code&gt;, &lt;code&gt;post-build&lt;/code&gt;, and &lt;code&gt;run&lt;/code&gt;. The commands/scripts referenced by these keys are executed in-order. If a key is missing, it will be skipped and the next key will be processed. An optional &lt;code&gt;version&lt;/code&gt; key specifies the version of the &lt;code&gt;appsvc.yaml&lt;/code&gt; file, if new versions are introduced in the future.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 1&#xA;&#xA;pre-build: apt-get install jq&#xA;&#xA;post-build: |&#xA;    python manage.py makemigrations&#xA;    python manage.py migrate&#xA;&#xA;run: gunicorn myapp.app --workers 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build and run an app&lt;/h2&gt; &#xA;&lt;p&gt;To build and run an app from a repo, follow these approximate steps. An example script follows.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mount the repo as a volume in Oryx&#39;s &lt;code&gt;docker.io/oryxprod/build&lt;/code&gt; container.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;oryx build ...&lt;/code&gt; within the repo directory to build a runnable artifact.&lt;/li&gt; &#xA; &lt;li&gt;Mount the output directory from build in an appropriate Oryx &#34;run&#34; container, such as &lt;code&gt;docker.io/oryxprod/node-10.14&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;oryx ...&lt;/code&gt; within the &#34;run&#34; container to write a startup script.&lt;/li&gt; &#xA; &lt;li&gt;Run the generated startup script, by default &lt;code&gt;/run.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run these from the root of the repo.&#xA;# build&#xA;docker run --volume $(pwd):/repo \&#xA;    &#39;mcr.microsoft.com/oryx/build:latest&#39; \&#xA;    oryx build /repo --output /repo&#xA;&#xA;# run&#xA;&#xA;# the -p/--publish and -e/--env flags specify and open a host port&#xA;docker run --detach --rm \&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; --volume $(pwd):/app \&#xA;    --env PORT=8080 \&#xA;    --publish 8080:8080 \&#xA;    &#39;mcr.microsoft.com/oryx/node:10&#39; \&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; sh -c &#39;oryx create-script -appPath /app &amp;amp;&amp;amp; /run.sh&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Server Invocation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build the Oryx solution &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/buildServer/buildSolution.png&#34; alt=&#34;Build Solutionpng&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create image with oryx and platform binaries &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;time build/buildBuildImages.sh -t ltsversion&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run docker to port map, volume mount a directory, specify the image with &lt;code&gt;oryx build&lt;/code&gt;, and invoke BuildServer &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; docker run -it -p 8086:80 \&#xA; -v C:\Repo\Oryx\tests\SampleApps\:/tmp/SampleApps \&#xA; -e &#34;ASPNETCORE_URLS=http://+80&#34; \&#xA; oryxdevmcr.azurecr.io/public/oryx/build:lts-versions \&#xA; /opt/buildscriptgen/BuildServer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/buildServer/start.png&#34; alt=&#34;Start&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Invoke build &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/buildServer/post.png&#34; alt=&#34;Post&#34;&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Under the hood &lt;code&gt;oryx build&lt;/code&gt; is invoked &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;oryx build [sourcePath] \&#xA;    --platform [platform] \&#xA;    --platform-version [version] \&#xA;    --output [outputPath] \&#xA;    --log-file [logPath]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check build status with id &lt;code&gt;1&lt;/code&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/buildServer/status.png&#34; alt=&#34;Status&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Check server healthcheck &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/buildServer/healthCheck.png&#34; alt=&#34;Health Check&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Components&lt;/h1&gt; &#xA;&lt;p&gt;Oryx consists of a build image, a collection of runtime images, a build script generator, and a collection of startup script generators. For more details, refer to our &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/doc/architecture.md&#34;&gt;architecture&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h1&gt;Testing Locally&lt;/h1&gt; &#xA;&lt;h2&gt;startup script generator&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;build/testStartupScriptGenerators.sh&lt;/code&gt; will perform tests on all startup script generators written in go. The tests are copied into a docker image for performing &lt;code&gt;go test&lt;/code&gt; on all platforms.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;MIT, see &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Oryx/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) at &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the &lt;a href=&#34;https://technet.microsoft.com/en-us/security/dn606155&#34;&gt;MSRC PGP&lt;/a&gt; key, can be found in the &lt;a href=&#34;https://technet.microsoft.com/en-us/security/default&#34;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Trademark&lt;/h1&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks&#34;&gt;Microsoft’s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party’s policies.&lt;/p&gt; &#xA;&lt;h1&gt;Data/Telemetry&lt;/h1&gt; &#xA;&lt;p&gt;When utilized within Azure services, this project collects usage data and sends it to Microsoft to help improve our products and services. Read &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkId=521839&#34;&gt;Microsoft&#39;s privacy statement&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt;. Contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with questions and comments.&lt;/p&gt; &#xA;&lt;h2&gt;Disable Data Collection&lt;/h2&gt; &#xA;&lt;p&gt;To prevent Oryx command line tools from collecting any data, set the environment variable &lt;code&gt;ORYX_DISABLE_TELEMETRY&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>