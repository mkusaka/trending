<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:31:34Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DebugST/STNodeEditor</title>
    <updated>2023-05-17T01:31:34Z</updated>
    <id>tag:github.com,2023-05-17:/DebugST/STNodeEditor</id>
    <link href="https://github.com/DebugST/STNodeEditor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款基于.Net WinForm的节点编辑器 纯GDI+绘制 使用方式非常简洁 提供了丰富的属性以及事件 可以非常方便的完成节点之间数据的交互及通知 大量的虚函数供开发者重写具有很高的自由性&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Version 3.0&lt;/h1&gt; &#xA;&lt;p&gt;现在: 2022-08-30&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;3.0&lt;/code&gt;版本进入排期开发，开发进度将同步更新。具体说明请查看 &lt;a href=&#34;https://raw.githubusercontent.com/DebugST/STNodeEditor/main/V3_CN.md&#34;&gt;V3_CN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;now: 2022-08-30&lt;/p&gt; &#xA;&lt;p&gt;The version &lt;code&gt;3.0&lt;/code&gt; has been start coding,The development progress is updated synchronously. more info refer &lt;a href=&#34;https://raw.githubusercontent.com/DebugST/STNodeEditor/main/V3_EN.md&#34;&gt;V3_EN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;2023-04-20&lt;/p&gt; &#xA;&lt;p&gt;老铁们，最近问更新情况的人比较多。确实摆烂了一段时间，什么也不想做。不过现在陆陆续续回到状态了。不过在继续更新之前手里还有一个&lt;a href=&#34;https://github.com/DebugST/STJson&#34;&gt;STJson&lt;/a&gt;。也正是当前项目需要的。&lt;code&gt;STJson&lt;/code&gt;项目也摆烂很久了。。不过这两天应该会完工了，提供了全套的&lt;code&gt;Json&lt;/code&gt;解析操作包括&lt;code&gt;JsonPath&lt;/code&gt;的支持。。如果有经常使用&lt;code&gt;Json&lt;/code&gt;的小伙伴可以关注一下。现在已经进入最后的调试和文档教程编写阶段。。等完工后回到&lt;code&gt;STNodeEditor&lt;/code&gt;的开发，并且&lt;code&gt;STNodeEditor&lt;/code&gt;的数据保存也将提供&lt;code&gt;Json&lt;/code&gt;格式。&lt;/p&gt; &#xA;&lt;h1&gt;STNodeEditor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/zh-hans/vs/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Visual%20Studio-2010-blueviolet&#34; alt=&#34;VS2010&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.microsoft.com/zh-cn/download/details.aspx?id=25150&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/DotNet-3.5-blue&#34; alt=&#34;.NET35&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/ST.Library.UI/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/NuGet-5.9-blue&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/DebugST/STNodeEditor/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;STNodeEditor 是一个轻量且功能强大的节点编辑器 纯&lt;code&gt;GDI&lt;/code&gt;实现无任何依赖库仅仅&lt;code&gt;100+Kb&lt;/code&gt; 使用方式非常简洁 提供了丰富的属性以及事件可以非常方便的完成节点之间数据的交互及通知 大量的虚函数可供开发者重写具有很高的自由性&lt;/p&gt; &#xA;&lt;p&gt;Environment: VS2010(.NET 3.5)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://debugst.github.io/STNodeEditor/images/page_top.png&#34; alt=&#34;STNodeEditor&#34;&gt; &lt;img src=&#34;https://debugst.github.io/STNodeEditor/images/node_scan.png&#34; alt=&#34;STNodeEditor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;项目主页 (Project home): &lt;a href=&#34;https://DebugST.github.io/STNodeEditor&#34;&gt;DebugST.github.io/STNodeEditor&lt;/a&gt; (简体中文, English)&lt;/p&gt; &#xA;&lt;p&gt;教程文档: &lt;a href=&#34;https://DebugST.github.io/STNodeEditor/doc_cn.html&#34;&gt;DebugST.github.io/STNodeEditor/doc_cn.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tutorials and API: &lt;a href=&#34;https://DebugST.github.io/STNodeEditor/doc_en.html&#34;&gt;DebugST.github.io/STNodeEditor/doc_en.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mail: (&lt;a href=&#34;mailto:2212233137@qq.com&#34;&gt;2212233137@qq.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;NuGet: &lt;a href=&#34;https://www.nuget.org/packages/ST.Library.UI/&#34;&gt;https://www.nuget.org/packages/ST.Library.UI/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package ST.Library.UI -Version 2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;那是一个冬季 在研究无线电安全的作者接触到了&lt;a href=&#34;https://www.gnuradio.org/&#34;&gt;GNURadio&lt;/a&gt; 那是作者第一次接触到节点编辑器&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; What? Excuse me... What&#34;s this?.. 这是什么鬼东西?...&lt;/p&gt; &#xA;&lt;p&gt;那是一个春季 不知道为什么 过完年整个世界都变了 大家被迫窝在家里 无聊至极的作者学起了&lt;a href=&#34;https://www.blender.org/&#34;&gt;Blender&lt;/a&gt;那是作者第二次接触到节点编辑器&lt;/p&gt; &#xA;&lt;p&gt;-&amp;gt; Wo...原来这东西可以这么玩...真方便&lt;/p&gt; &#xA;&lt;p&gt;于是一些想法在作者脑中逐渐诞生 让作者有了想做一个这样的东西的想法&lt;/p&gt; &#xA;&lt;p&gt;那是一个夏季 不知道为什么 作者又玩起了&lt;a href=&#34;http://www.blackmagicdesign.com/cn/products/davinciresolve/&#34;&gt;Davinci&lt;/a&gt;那是作者第三次接触到节点编辑器 这一次的接触让作者对节点编辑器的好感倍增 作者瞬间觉得 只要是可以模块化流程化的功能 万物皆可节点化&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;像流程图一样使用你的功能&lt;/h1&gt; &#xA;&lt;p&gt;你是否有设想过流程图不再是流程图 而是直接可以执行的？&lt;/p&gt; &#xA;&lt;p&gt;在一些开发过程中我们可能会为整个程序设计一个流程图 上面包含了我们存在的功能模块以及执行流程 然后由开发者逐一实现&lt;/p&gt; &#xA;&lt;p&gt;但是这样会带来一些问题 程序的执行流程可能会被硬编码到程序中去 如果突然有一天可能需要改变执行顺序或者添加删除一个执行模块 可能需要开发者对代码重新编辑然后编译 而且各个功能模块之间的调用也需要开发者进行编码调度 增加开发成本 等一系列的问题&lt;/p&gt; &#xA;&lt;p&gt;而 &lt;code&gt;STNodeEditor&lt;/code&gt; 就是为此诞生&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;STNodeEditor&lt;/code&gt; 包含3部分 &lt;code&gt;TreeView&lt;/code&gt; &lt;code&gt;PropertyGrid&lt;/code&gt; &lt;code&gt;NodeEditor&lt;/code&gt; 这三部分组成了一套完整的可使用框架&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TreeView &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;可以把执行功能编码到一个节点中 而 &lt;code&gt;TreeView&lt;/code&gt; 则负责展示以及检索节点 在 &lt;code&gt;TreeView&lt;/code&gt; 中的节点可直接拖拽添加到 &lt;code&gt;NodeEditor&lt;/code&gt; 中&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;PropertyGrid &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;类似与 &lt;code&gt;WinForm&lt;/code&gt; 开发使用的属性窗口 作为一个节点 它也是可以有属性的 而作者在编辑器进行设计的过程中也把一个节点视作一个 &lt;code&gt;Form&lt;/code&gt; 让开发者几乎没有什么学习成本直接上手一个节点的开发 *NodeEditor *&lt;code&gt;NodeEditor&lt;/code&gt; 是用户组合自己执行流程的地方 使得功能模块执行流程可视化&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;如何使用它？&lt;/h1&gt; &#xA;&lt;p&gt;STNodeEditor的使用非常简单 你几乎可以没有任何学习成本的去使用的 当然最重要的一点就是 你需要知道如何去创建一个节点&lt;/p&gt; &#xA;&lt;p&gt;你可以像创建一个Form一样去创建一个Node&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using ST.Library.UI.NodeEditor;&#xA; &#xA;public class MyNode : STNode&#xA;{&#xA;    public MyNode() { //等同于 [override void Oncreate(){}]&#xA;        this.Title = &#34;MyNode&#34;;&#xA;        this.TitleColor = Color.FromArgb(200, Color.Goldenrod);&#xA;        this.AutoSize = false;&#xA;        this.Size = new Size(100, 100);&#xA; &#xA;        var ctrl = new STNodeControl();&#xA;        ctrl.Text = &#34;Button&#34;;&#xA;        ctrl.Location = new Point(10, 10);&#xA;        this.Controls.Add(ctrl);&#xA;        ctrl.MouseClick += new MouseEventHandler(ctrl_MouseClick);&#xA;    }&#xA; &#xA;    void ctrl_MouseClick(object sender, MouseEventArgs e) {&#xA;        MessageBox.Show(&#34;MouseClick&#34;);&#xA;    }&#xA;}&#xA;//添加到编辑器中&#xA;stNodeEditor.Nodes.Add(new MyNode());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;MyNode.png&#34; src=&#34;https://img-blog.csdnimg.cn/img_convert/7c7dd3f7b17c18781c54dc210555bf56.png&#34; width=&#34;273&#34;&gt; &#xA;&lt;p&gt;可以看到它的使用方式和 &lt;code&gt;Form&lt;/code&gt; 确实很像 其实目前还暂时没有提供所见即所得的UI设计器 而且一个 &lt;code&gt;STNode&lt;/code&gt; 它同样有它的控件集合且数据类型为 &lt;code&gt;STNodeControl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;STNodeControl&lt;/code&gt; 作为 &lt;code&gt;STNode&lt;/code&gt; 控件的基类 它拥有着和 &lt;code&gt;System.Windows.Forms.Control&lt;/code&gt; 许多同名的属性和事件 一切的初衷都只为与 &lt;code&gt;WinForm&lt;/code&gt; 靠近&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：在目前的版本中(2.0) STNodeEditor仅仅提供了STNodeControl基类 并未提供任何一个可用控件 当然在附随的Demo工程中包含了部分示例演示如何自定义一个控件 由于这属于自定义控件的范畴 所以演示并未太多 若需了解关于自定义控件如何开发可参考作者：&lt;a href=&#34;http://st233.com/blog.php?group=1&#34;&gt;自定义控件开发&lt;/a&gt; 系列文章 当然在后续的版本中 作者将提供部分常用控件 虽说作者想把使用方式往WinForm上靠 单仅仅是把它当作WinForm使用并不是作者的初衷&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;上面的演示仅仅是为了让大家感到亲切感 毕竟 &lt;code&gt;WinForm&lt;/code&gt; 可能是大家熟悉的一个东西 但是如果仅仅是把它当作 &lt;code&gt;WinForm&lt;/code&gt; 使用毫无意义 对于一个节点来说 最重要的属性当然是数据的输入和输出&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class MyNode : STNode&#xA;{&#xA;    protected override void OnCreate() {//等同 [public MyNode(){}]&#xA;        base.OnCreate();&#xA;        this.Title = &#34;TestNode&#34;;&#xA;        //可以得到添加的索引位置&#xA;        int nIndex = this.InputOptions.Add(new STNodeOption(&#34;IN_1&#34;, typeof(string), false));&#xA;        //可以得到添加的 STNodeOption&#xA;        STNodeOption op = this.InputOptions.Add(&#34;IN_2&#34;, typeof(int), true);&#xA;        this.OutputOptions.Add(&#34;OUT&#34;, typeof(string), false);&#xA;    }&#xA;    //当所有者发生改变(即：在NodeEditor中被添加或移除)&#xA;    //应当像容器提交自己拥有数据类型的连接点 所期望显示的颜色&#xA;    //颜色主要用于区分不同的数据类型&#xA;    protected override void OnOwnerChanged() {&#xA;        base.OnOwnerChanged();&#xA;        if (this.Owner == null) return;&#xA;        this.Owner.SetTypeColor(typeof(string), Color.Yellow);&#xA;        //当前容器中已有的颜色会被替换&#xA;        this.Owner.SetTypeColor(typeof(int), Color.DodgerBlue, true); &#xA;        //下面的代码将忽略容器中已有的颜色&#xA;        //this.SetOptionDotColor(op, Color.Red); //无需在OnOwnerChanged()中设置&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;MyNode.png&#34; src=&#34;https://img-blog.csdnimg.cn/img_convert/a7bb83f3bc1c39143d71a42f26668e4f.png&#34; width=&#34;208&#34;&gt; &#xA;&lt;p&gt;通过上面的案例你可以看到 &lt;code&gt;STNode&lt;/code&gt; 有两个重要的属性 &lt;code&gt;InputOptions&lt;/code&gt; 和 &lt;code&gt;OutputOptions&lt;/code&gt; 其数据类型为 &lt;code&gt;STNodeOption&lt;/code&gt; 而 &lt;code&gt;STNodeOption&lt;/code&gt; 有两种连接模式 &lt;code&gt;single-connection&lt;/code&gt; 和 &lt;code&gt;multi-connection&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;single-connection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;单连接模式 在单连接模式下一个连接点同时 只能被一个 同数据类型点的连接&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;multi-connection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;多连接模式 在多连接模式下一个连接点同时 可以被多个 同数据类型点连接&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class MyNode : STNode {&#xA;    protected override void OnCreate() {&#xA;        base.OnCreate();&#xA;        this.Title = &#34;MyNode&#34;;&#xA;        this.TitleColor = Color.FromArgb(200, Color.Goldenrod);&#xA;        //multi-connection&#xA;        this.InputOptions.Add(&#34;Single&#34;, typeof(string), true);&#xA;        //single-connection&#xA;        this.OutputOptions.Add(&#34;Multi&#34;, typeof(string), false);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;MyNode.png&#34; src=&#34;https://img-blog.csdnimg.cn/img_convert/da719b3dc6c7d61423df83c5876917ae.png&#34; width=&#34;208&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;如何进行数据交互？&lt;/h1&gt; &#xA;&lt;p&gt;在上面的案例中仅仅是做了一个可以被连接的选项点 并不包含任何的功能&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;STNodeOption可以通过绑定DataTransfer事件获取到传入该选项的所有数据&lt;/li&gt; &#xA; &lt;li&gt;STNodeOption可以通过TransferData(object obj)向该选项上所有连接的选项进行数据投递&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;下面通过一个案例进行演示 创建两个节点 一个节点用于每秒输出一次当前系统事件 另一个节点用于接收一个事件并显示&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class ClockNode : STNode&#xA;{&#xA;    private Thread m_thread;&#xA;    private STNodeOption m_op_out_time;&#xA; &#xA;    protected override void OnCreate() {&#xA;        base.OnCreate();&#xA;        this.Title = &#34;ClockNode&#34;;&#xA;        m_op_out_time = this.OutputOptions.Add(&#34;Time&#34;, typeof(DateTime), false);&#xA;    }&#xA;    //当被添加或者移除&#xA;    protected override void OnOwnerChanged() {&#xA;        base.OnOwnerChanged();&#xA;        if (this.Owner == null) {   //如果是被移除 停止线程&#xA;            if (m_thread != null) m_thread.Abort();&#xA;            return;&#xA;        }&#xA;        this.Owner.SetTypeColor(typeof(DateTime), Color.DarkCyan);&#xA;        m_thread = new Thread(() =&amp;gt; {&#xA;            while (true) {&#xA;                Thread.Sleep(1000);&#xA;                //STNodeOption.TransferData(object)会自动设置STNodeOption.Data&#xA;                //然后自动向所有连接的选项进行数据传递&#xA;                m_op_out_time.TransferData(DateTime.Now);&#xA;                //如果你需要一些耗时操作STNode同样提供了Begin/Invoke()操作&#xA;                //this.BeginInvoke(new MethodInvoker(() =&amp;gt; {&#xA;                //    m_op_out_time.TransferData(DateTime.Now);&#xA;                //}));&#xA;            }&#xA;        }) { IsBackground = true };&#xA;        m_thread.Start();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然上面可以直线将时间显示出来 不过这里为了演示数据的传递 所以还需要一个接收节点&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class ShowClockNode : STNode {&#xA;    private STNodeOption m_op_time_in;&#xA;    protected override void OnCreate() {&#xA;        base.OnCreate();&#xA;        this.Title = &#34;ShowTime&#34;;&#xA;        //采用 &#34;single-connection&#34; 模式&#xA;        m_op_time_in = this.InputOptions.Add(&#34;--&#34;, typeof(DateTime), true);&#xA;        //当有数据时会自动触发此事件&#xA;        m_op_time_in.DataTransfer += new STNodeOptionEventHandler(op_DataTransfer);&#xA;    }&#xA; &#xA;    void op_DataTransfer(object sender, STNodeOptionEventArgs e) {&#xA;        //当连接的建立与断开都会触发此事件 所以需要判断连接状态&#xA;        if (e.Status != ConnectionStatus.Connected || e.TargetOption.Data == null) {&#xA;            //当 STNode.AutoSize=true 并不建议使用STNode.SetOptionText&#xA;            //因为当文本发生改变时候会重新计算布局 正确的做法是自定义一个如Lable控件&#xA;            //作为时间的显示 当然这里为了演示方式采用此方案&#xA;            this.SetOptionText(m_op_time_in, &#34;--&#34;);&#xA;        } else {&#xA;            this.SetOptionText(m_op_time_in, ((DateTime)e.TargetOption.Data).ToString());&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;TimeNode.gif&#34; src=&#34;https://img-blog.csdnimg.cn/img_convert/91c426fda7d1e8dd7d85307168868116.gif&#34; width=&#34;208&#34;&gt; &#xA;&lt;p&gt;可以看到当连接被建立时 &lt;code&gt;ShowTime&lt;/code&gt; 节点每秒都在刷新 下面是一个更加复杂一点的案例 但是这里并没有给出代码请参考附随工程的 &lt;code&gt;Demo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;img alt=&#34;ImageNode.png&#34; src=&#34;https://img-blog.csdnimg.cn/img_convert/2ffaa58c22f91f1219143256dfa49799.png&#34; width=&#34;418&#34;&gt; &#xA;&lt;p&gt;点击 &lt;code&gt;Open Image&lt;/code&gt; 按钮可打开并显示一张图片在 &lt;code&gt;ImageShowNode&lt;/code&gt; 中并将图片作为输出数据 &lt;code&gt;ImageChanel&lt;/code&gt; 则负责接收一张图像并处理输出图像的RGB图像及原图 &lt;code&gt;ImageSize&lt;/code&gt; 则负责接收并显示一张图像的尺寸信息&lt;/p&gt; &#xA;&lt;p&gt;对于上面的节点在开发期间它们并不知道会被什么样的节点连接 也并不知道会被连接到什么节点上 开发者仅仅是完成了自己的功能处理接收到的数据并将结果打包给 &lt;code&gt;STNodeOption&lt;/code&gt; 无需关系最终会被谁把结果拿走并处理 使得节点之间与节点之间的耦合关系大大降低 唯一将它们联系在一起的是一个 &lt;code&gt;Image&lt;/code&gt; 数据类型 最终执行的逻辑交给用户自己拖拽节点组合他们自己想要的流程 使得功能的执行流程变得可视化 这也是作者的初衷&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于更多的教程和文档请参考：&lt;a href=&#34;https://debugst.github.io/STNodeEditor/doc_cn.html&#34;&gt;https://debugst.github.io/STNodeEditor/doc_cn.html&lt;/a&gt; 在下载的调用库压缩包里面同样包含离线版文档&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;关于下个版本&lt;/h1&gt; &#xA;&lt;p&gt;其实目前这个版本还有很多需要完善的代码 如上面提到的提供一些基础控件 而且目前提供的东西还很原始 一些应用场景目前需要开发者自己写代码完成&lt;/p&gt; &#xA;&lt;img alt=&#34;First.png&#34; src=&#34;https://img-blog.csdnimg.cn/img_convert/6785f2f9d7244bc6e6756c2f786776b4.png&#34; width=&#34;1030&#34;&gt; &#xA;&lt;p&gt;上图为作者的最初构思以及第一个 &lt;code&gt;Demo&lt;/code&gt; 演示版本 在上图中可以看到有 &lt;code&gt;启动&lt;/code&gt; 按钮 某些应用场景下可能需要用户点击执行按钮以后才开始执行用户所部署的逻辑 而之前上面的案例数据交互都是更具用户的布线实时的 当然在目前的版本中想实现也是可以的 只是需要开发者自己写部分代码 由于这部分的代码作者暂时还没有构思好很多细节处理 所以还有下一个版本的话很多功能都将出现&lt;/p&gt; &#xA;&lt;p&gt;上图的构想是 开发者无需关系架构执行逻辑什么的 而开发者只需要关系功能点本省只需要开发出包含 &lt;code&gt;STNode&lt;/code&gt; 的 &lt;code&gt;DLL&lt;/code&gt; 文件 而程序启动 &lt;code&gt;TreeView&lt;/code&gt; 会自动加载目录下的 &lt;code&gt;DLL&lt;/code&gt; 文件并装载 &lt;code&gt;STNode&lt;/code&gt; 到 &lt;code&gt;TreeView&lt;/code&gt; 中 然后让用户拖拽执行 对于上一段话中作者提到的需要通过 启动 按钮执行如何在当前版本的实现 作者这里给出一些思路&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;//首先定义一个基类 包含Start和Stop方法&#xA;public abstract class BaseNode : STNode&#xA;{&#xA;    public abstract void Start();&#xA;    public abstract void Stop();&#xA;}&#xA;//===================================================================&#xA;//然后再基于基类在定义3个类型&#xA;//InputNode 将作为开始节点 作为数据执行的入口节点 类似与Main函数一样&#xA;public abstract class InputNode : BaseNode { }&#xA;//OutputNode 将作为最终数据的处理节点 如文件保存 数据库保存等&#xA;public abstract class OutputNode : BaseNode { }&#xA;//更具自己需求定义一些其他执行功能的节点&#xA;public abstract class ExecNode : BaseNode { }&#xA;//===================================================================&#xA;//创建一个 TestInputNode 提供一个字符串输入 并作为开始节点&#xA;public class TestInputNode : InputNode&#xA;{&#xA;    //使用&#34;STNodeProperty&#34;特性则此属性会在&#34;STNodePropertyGrid&#34;中显示&#xA;    [STNodeProperty(&#34;希望显示的属性名字&#34;, &#34;属性秒速&#34;)]&#xA;    public string TestText { get; set; }&#xA; &#xA;    private STNodeOption m_op_out;&#xA; &#xA;    protected override void OnCreate() {&#xA;        base.OnCreate();&#xA;        this.Title = &#34;StringInput&#34;;&#xA;        m_op_out = this.OutputOptions.Add(&#34;OutputString&#34;, typeof(string), false);&#xA;    }&#xA; &#xA;    public override void Start() {&#xA;        //当执行开始的时候才向连接的选项进行数据的传递&#xA;        m_op_out.TransferData(this.TestText);&#xA;        this.LockOption = true;//开始后锁定选项&#xA;    }&#xA; &#xA;    public override void Stop() {&#xA;        this.LockOption = false;//结束后解锁选项&#xA;    }&#xA;}&#xA;//===================================================================&#xA;//创建一个 TextFileOutputNode 用于文本文件保存收到的字符串&#xA;public class TextFileOutputNode : OutputNode&#xA;{&#xA;    [STNodeProperty(&#34;属性显示名称&#34;, &#34;属性描述&#34;)]&#xA;    public string FileName { get; set; }&#xA; &#xA;    private StreamWriter m_writer;&#xA; &#xA;    protected override void OnCreate() {&#xA;        base.OnCreate();&#xA;        this.InputOptions.Add(&#34;Text&#34;, typeof(string), false)&#xA;            .DataTransfer += new STNodeOptionEventHandler(op_DataTransfer);&#xA;    }&#xA; &#xA;    void op_DataTransfer(object sender, STNodeOptionEventArgs e) {&#xA;        if (e.Status != ConnectionStatus.Connected) return;&#xA;        if (e.TargetOption.Data == null) return;&#xA;        if (m_writer == null) return;&#xA;        //当收到一个数据时候 写入文本&#xA;        lock (m_writer) m_writer.WriteLine(e.TargetOption.Data.ToString());&#xA;    }&#xA; &#xA;    public override void Start() {&#xA;        //开始的时候初始化文件&#xA;        m_writer = new StreamWriter(this.FileName, false, Encoding.UTF8);&#xA;        this.LockOption = true;&#xA;    }&#xA; &#xA;    public override void Stop() {&#xA;        this.LockOption = false;&#xA;        if (m_writer == null) return;&#xA;        m_writer.Close();&#xA;        m_writer = null;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;上面的代码演示了一个 &lt;code&gt;输入&lt;/code&gt; 和 &lt;code&gt;输出&lt;/code&gt; 类型的节点 至于其他需求自行举一反三 当用户点下 &lt;code&gt;启动&lt;/code&gt; 按钮时候&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public void OnClickStart() {&#xA;    List&amp;lt;InputNode&amp;gt; lst_input = new List&amp;lt;InputNode&amp;gt;();&#xA;    List&amp;lt;OutputNode&amp;gt; lst_output = new List&amp;lt;OutputNode&amp;gt;();&#xA;    List&amp;lt;BaseNode&amp;gt; lst_other = new List&amp;lt;BaseNode&amp;gt;();&#xA;    foreach (var v in stNodeEditor.Nodes) {&#xA;        if ((v is BaseNode)) continue;&#xA;        if (v is InputNode) {&#xA;            lst_input.Add((InputNode)v);&#xA;        } else if (v is OutputNode) {&#xA;            lst_output.Add((OutputNode)v);&#xA;        } else {&#xA;            lst_other.Add((BaseNode)v);&#xA;        }&#xA;    }&#xA;    //在真正的开始之前 应当处理一些事情&#xA;    if (lst_output.Count == 0)&#xA;        throw new Exception(&#34;没有找到 [OutputNode] 类型的节点 请添加.&#34;);&#xA;    if (lst_input.Count == 0)&#xA;        throw new Exception(&#34;没有找到 [InputNode] 类型的节点 请添加.&#34;);&#xA;    foreach (var v in lst_other) v.Start();&#xA;    foreach (var v in lst_output) v.Start();&#xA;    //最起码 InputNode 类型的节点至少得又一个吧 不然怎么开始.&#xA;    //而且 InputNode 类型的节点应当是最后启动&#xA;    foreach (var v in lst_input) v.Start();&#xA;    stNodePropertyGrid1.ReadOnlyModel = true;//不要忘记设置属性窗口只读&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你希望只能有一个 InputNode 类型的节点被添加&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;stNodeEditor.NodeAdded += new STNodeEditorEventHandler(stNodeEditor_NodeAdded);&#xA;void stNodeEditor_NodeAdded(object sender, STNodeEditorEventArgs e) {&#xA;    int nCounter = 0;&#xA;    foreach (var v in stNodeEditor.Nodes) {&#xA;        if (v is InputNode) nCounter++;&#xA;    }&#xA;    if (nCounter &amp;gt; 1) {&#xA;        System.Windows.Forms.MessageBox.Show(&#34;只能有一个 InputNode 被添加&#34;);&#xA;        stNodeEditor.Nodes.Remove(e.Node);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当然 这个需求估计很少有吧&lt;/p&gt; &#xA;&lt;p&gt;当然这里就并没有给出上述代码片段的执行效果了 因为上面仅仅是提供思路 让读者可以举一反三 而且上面的代码均没有任何的异常处理 要真正做好其实还有很多细节需要处理很多代码需要写 所以暂定目前版本不提供这样的功能&lt;/p&gt; &#xA;&lt;h1&gt;关于作者&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Github: &lt;a href=&#34;https://github.com/DebugST/&#34;&gt;DebugST&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blog: &lt;a href=&#34;http://st233.com&#34;&gt;Crystal_lz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mail: (&lt;a href=&#34;mailto:2212233137@qq.com&#34;&gt;2212233137@qq.com&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>streamviewerchatbot/Stream-Viewer-Chat-Bot</title>
    <updated>2023-05-17T01:31:34Z</updated>
    <id>tag:github.com,2023-05-17:/streamviewerchatbot/Stream-Viewer-Chat-Bot</id>
    <link href="https://github.com/streamviewerchatbot/Stream-Viewer-Chat-Bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Twitch | YouTube | Kick | Facebook Live | Twitter | DLive | Nimo Tv | Trovo Live - Easy to use form application. Forget about the command lines and terminals. Gain chat capable viewers in a couple of minutes. Free stream viewer and chat bot.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://streamviewerbot.com/images/trk.png&#34; alt=&#34;alt text&#34;&gt; HELP TURKEY! - Stream Viewer&amp;amp;Chat Bot&lt;/h1&gt; &#xA;&lt;p&gt;Our easy to use app, allows you to gain chat capable live viewers in a couple of minutes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supports:&lt;/strong&gt; &lt;em&gt;Twitch | Youtube | Kick | Facebook Live | Twitter | DLive | Nimo Tv | Trovo Live&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t have time and knowledge to run this app? Try our &lt;strong&gt;&lt;a href=&#34;https://streamviewerbot.com/index.php/shop&#34;&gt;Cloud Service&lt;/a&gt;&lt;span&gt;☁&lt;/span&gt;&lt;/strong&gt; and gain viewers in seconds...&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; Give us a star, if you like it! &lt;span&gt;⭐&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://streamviewerbot.com/images/ui_23_2_4.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/streamviewerchatbot/Stream-Viewer-Chat-Bot/releases/download/23.3.4/StreamViewerBot-23.3.4.rar&#34;&gt;Download for Windows x64&lt;/a&gt;&lt;span&gt;⬇&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;3 URL FREE&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Leaked free proxies may &lt;strong&gt;NOT&lt;/strong&gt; work, please buy for yourself. You can buy it from &lt;a href=&#34;https://www.webshare.io/?referral_code=ceuygyx4sir2&#34;&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt; at an affordable price.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Usage has been limited to 3 Stream URLs to prevent others to make money with this free application.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Your hardware and proxy capacity determines the viewer count that you will have.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;❓&lt;/span&gt; &lt;a href=&#34;https://github.com/gorkemhacioglu/Stream-Viewer-Bot/wiki/Configuration&#34;&gt;How to configure&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;ℹ&lt;/span&gt; &lt;a href=&#34;https://github.com/gorkemhacioglu/Stream-Viewer-Bot/wiki&#34;&gt;Wiki for more information&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;span&gt;✉&lt;/span&gt; &lt;a href=&#34;https://discord.gg/t9N85a3eVv&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;</summary>
  </entry>
</feed>