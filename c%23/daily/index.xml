<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-02T01:31:46Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cysharp/SimdLinq</title>
    <updated>2023-02-02T01:31:46Z</updated>
    <id>tag:github.com,2023-02-02:/Cysharp/SimdLinq</id>
    <link href="https://github.com/Cysharp/SimdLinq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drop-in replacement of LINQ aggregation operations extremely faster with SIMD.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SimdLinq&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Cysharp/SimdLinq/actions&#34;&gt;&lt;img src=&#34;https://github.com/Cysharp/SimdLinq/workflows/Build-Debug/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cysharp/SimdLinq/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Cysharp/SimdLinq.svg?sanitize=true&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SimdLinq is a drop-in replacement of LINQ aggregation operations(&lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;) extremely faster with SIMD.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/46207/215410106-b68d8567-5abf-4aa4-a050-a803b1913187.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/#linq&#34;&gt;.NET 7 LINQ supports SIMD&lt;/a&gt; but it is very limited, due to compatibility and safety issues, it is only enabled for &lt;code&gt;int[]&lt;/code&gt; &lt;code&gt;Average&lt;/code&gt;, &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt; and &lt;code&gt;long[]&lt;/code&gt; &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SimdLinq accelerates many methods (&lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;LongSum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, &lt;code&gt;MinMax&lt;/code&gt;, &lt;code&gt;Contains&lt;/code&gt;, &lt;code&gt;SequenceEqual&lt;/code&gt;) and types (&lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt; int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;). It can also be used with &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlyMemory&amp;lt;T&amp;gt;&lt;/code&gt; in addition to &lt;code&gt;T[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Using the overload resolution priority, all target methods are automatically SIMD by simply referencing the library and setting global using.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;This library is distributed via NuGet.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;PM&amp;gt; Install-Package &lt;a href=&#34;https://www.nuget.org/packages/SimdLinq&#34;&gt;SimdLinq&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that this library requires &lt;strong&gt;.NET 7&lt;/strong&gt; or above because this library uses static abstract members and the new cross platform &lt;strong&gt;.NET 7&lt;/strong&gt; SIMD Api.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using SimdLinq; // enable SimdLinq extension methods&#xA;&#xA;var array = Enumerable.Range(1, 100000).ToArray();&#xA;&#xA;var sum = array.Sum(); // uses SimdLinqExtensions.Sum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable SimdLinq per file, add the &lt;code&gt;using SimdLinq;&lt;/code&gt; using directive. To enable SimdLinq across the project, use global usings in the csproj file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;ItemGroup&amp;gt;&#xA;    &amp;lt;Using Include=&#34;SimdLinq&#34; /&amp;gt;&#xA;&amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;SimdLinqExtensions&lt;/code&gt; has methods for concrete data types, like &lt;code&gt;int[]&lt;/code&gt; or &lt;code&gt;Span&amp;lt;double&amp;gt;&lt;/code&gt;, with the same names as LINQ&#39;s methods. If a method is eligible for SIMD optimization (such as the Sum of int[]), the &lt;code&gt;SimdLinqExtensions&lt;/code&gt; method will be used for improved performance.&lt;/p&gt; &#xA;&lt;p&gt;Unlike base LINQ, SimdLinq supports &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, allowing you to call methods such as &lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Min&lt;/code&gt;, etc. on &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt; collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;(double Min, double Max) GetMinMax(Span&amp;lt;double&amp;gt; span)&#xA;{&#xA;    return span.MinMax();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;MinMax&lt;/code&gt; is an original SimdLinq extension, that returns a tuple of &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;One of the reasons why LINQ&#39;s SIMD support in .NET 7 is incomplete, is compatibility. SimdLinq prioritises performance over some safety features and full compatibility with LINQ. Please note the following differences.&lt;/p&gt; &#xA;&lt;h3&gt;Sum/Average&lt;/h3&gt; &#xA;&lt;p&gt;LINQ Sum is &lt;code&gt;checked&lt;/code&gt; but SimdLinq is &lt;code&gt;unchecked&lt;/code&gt;(SIMD operation is not supported overflow). To reduce the risk of overflow, &lt;code&gt;Sum&lt;/code&gt; and &lt;code&gt;Average&lt;/code&gt; only support types that are 32-bit or higher(&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;SimdLinq provides &lt;code&gt;LongSum&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;uint&lt;/code&gt;, that returns &lt;code&gt;long&lt;/code&gt;/&lt;code&gt;ulong&lt;/code&gt; so avoid overflow.&lt;/p&gt; &#xA;&lt;h3&gt;float/double&lt;/h3&gt; &#xA;&lt;p&gt;Unlike LINQ, SimdLinq does not check for NaN in float/double Min/Max calculations. Additionally, the order of calculation for Sum is not sequential, leading to slight differences in floating-point operations compared to regular LINQ. For instance, LINQ returns 1.5710588F, while SimdLinq returns 1.5710589F. If compatibility is not a concern, this difference is not significant, but be aware of potential small tolerance differences.&lt;/p&gt; &#xA;&lt;h2&gt;Supported collections&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;T[]&lt;/code&gt;, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlyMemory&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported methods&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Sum&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LongSum&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Average&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Min&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Max&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MinMax&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Contains&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SequenceEqual&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SoA&lt;/h2&gt; &#xA;&lt;p&gt;SIMD with LINQ requires primitive array(or Span). &lt;a href=&#34;https://github.com/Cysharp/StructureOfArraysGenerator&#34;&gt;Cysharp/StructureOfArraysGenerator&lt;/a&gt; makes easy to create SoA array to use SIMD easily.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the MIT License.&lt;/p&gt;</summary>
  </entry>
</feed>