<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-13T01:32:49Z</updated>
  <subtitle>Daily Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sksalahuddin2828/C_Sharp</title>
    <updated>2023-07-13T01:32:49Z</updated>
    <id>tag:github.com,2023-07-13:/sksalahuddin2828/C_Sharp</id>
    <link href="https://github.com/sksalahuddin2828/C_Sharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Explore something new&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C# - Unlocking the Power of Programming&lt;/h1&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;Welcome to the fascinating world of C# (pronounced &#34;C sharp&#34;), a versatile and powerful programming language developed by Microsoft. Whether you&#39;re a seasoned developer or just starting your coding journey, C# opens up a world of possibilities, enabling you to build robust and scalable applications across various platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Why Choose C#?&lt;/h3&gt; &#xA;&lt;p&gt;C# offers a delightful blend of simplicity, expressiveness, and performance. With its intuitive syntax and extensive standard library, it allows developers to write clean and elegant code, making the development process enjoyable and productive. C# combines the best features of object-oriented programming (OOP) with modern language constructs, empowering you to create efficient and maintainable software solutions.&lt;/p&gt; &#xA;&lt;h3&gt;Key Features and Benefits&lt;/h3&gt; &#xA;&lt;h4&gt;1. Object-Oriented Paradigm&lt;/h4&gt; &#xA;&lt;p&gt;C# follows a powerful object-oriented programming paradigm, enabling you to organize your code into reusable and modular components. Encapsulation, inheritance, and polymorphism provide the foundation for building scalable and extensible applications.&lt;/p&gt; &#xA;&lt;h4&gt;2. Cross-Platform Development&lt;/h4&gt; &#xA;&lt;p&gt;C# offers cross-platform capabilities through the .NET platform, allowing you to write code once and deploy it on various operating systems, including Windows, macOS, and Linux. With the introduction of .NET Core and later .NET 5 and beyond, C# has become a truly versatile language.&lt;/p&gt; &#xA;&lt;h4&gt;4. Productivity and Tooling&lt;/h4&gt; &#xA;&lt;p&gt;C# provides a wide range of development tools, including Visual Studio and Visual Studio Code, which offer rich features such as intelligent code completion, debugging, and integrated source control. These tools enhance your productivity and streamline the development process.&lt;/p&gt; &#xA;&lt;h4&gt;5. Strong Typing and Memory Management&lt;/h4&gt; &#xA;&lt;p&gt;C# is a statically typed language, ensuring type safety and early error detection during compilation. It also incorporates automatic memory management through garbage collection, relieving developers from manual memory allocation and deallocation.&lt;/p&gt; &#xA;&lt;h4&gt;6. Integration with the .NET Ecosystem&lt;/h4&gt; &#xA;&lt;p&gt;C# seamlessly integrates with the extensive .NET ecosystem, giving you access to a vast array of libraries and frameworks. Whether you&#39;re building desktop applications, web services, mobile apps, or games, you&#39;ll find a wealth of resources to accelerate your development and leverage existing solutions.&lt;/p&gt; Get Started with C# &#xA;&lt;p&gt;Ready to dive into the world of C#? Here&#39;s a quick guide to get you started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the .NET SDK: Visit the official .NET website (&lt;a href=&#34;https://dotnet.microsoft.com&#34;&gt;https://dotnet.microsoft.com&lt;/a&gt;) and download the .NET SDK, which includes the C# compiler and other essential tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose an IDE: Select your preferred integrated development environment (IDE) such as Visual Studio or Visual Studio Code. These IDEs provide a comprehensive development environment tailored for C# development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Learn the Language: Explore online tutorials, documentation, and interactive resources to grasp the fundamentals of C#. Familiarize yourself with concepts such as classes, objects, control flow, and LINQ.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Practice, Practice, Practice: Start coding! Undertake small projects, solve coding challenges, and contribute to open-source projects. Building real-world applications is the best way to hone your skills and deepen your understanding of the language.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Engage with the Community: Join developer communities, forums, and online platforms to connect with fellow C# enthusiasts. Networking and collaboration can provide valuable insights, guidance, and opportunities for growth.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Conclusion&lt;/h3&gt; &#xA;&lt;p&gt;C# empowers developers to unleash their creativity and build impactful software solutions. Its combination of simplicity, performance, and versatility makes it a valuable tool for a wide range of applications. Whether you&#39;re crafting desktop applications, web services, or game development, C# is your gateway to unlocking the full potential of modern programming.&lt;/p&gt; &#xA;&lt;p&gt;So, embark on your C# journey with enthusiasm, curiosity, and a thirst for innovation. Happy coding!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kawser2133/clean-structured-project</title>
    <updated>2023-07-13T01:32:49Z</updated>
    <id>tag:github.com,2023-07-13:/kawser2133/clean-structured-project</id>
    <link href="https://github.com/kawser2133/clean-structured-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean structured ASP.NET Core web project, follows the Clean Architecture principles, SOLID design principles, and implements the Dependency Injection, Repository, and Unit of Work design pattern, and utilizes Entity Framework Core for data access.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Structured Project - ASP.NET Core&lt;/h1&gt; &#xA;&lt;p&gt;This template is for a clean structured ASP.NET Core web project, follows the Clean Architecture principles, SOLID design principles, and implements the Dependency Injection, Repository, and Unit of Work design pattern, and utilizes Entity Framework Core for data access. It provides a standardized structure and organization for building robust and maintainable ASP.NET Core web applications with complete CRUD (Create, Read, Update, Delete) operations.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;The project structure is designed to promote separation of concerns and modularity, making it easier to understand, test, and maintain the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── src&#xA;│   ├── Core                    # Contains the core business logic and domain models, etc.&#xA;│   ├── Infrastructure          # Contains infrastructure concerns such as data access, external services, etc.&#xA;│   └── UI                      # Contains the user interface layer, including controllers, views, and extensions, etc.&#xA;├── tests&#xA;│   ├── Core.Tests              # Contains unit tests for the core layer&#xA;│   ├── Infrastructure.Tests    # Contains unit tests for the infrastructure layer&#xA;│   └── UI.Tests                # Contains unit tests for the UI layer&#xA;└── README.md                   # Project documentation (you are here!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To use this project template, follow the steps below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure that you have the .NET 7 SDK installed on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Clone or download this repository to your local machine.&lt;/li&gt; &#xA; &lt;li&gt;Open the solution in your preferred IDE (e.g., Visual Studio, Visual Studio Code).&lt;/li&gt; &#xA; &lt;li&gt;Build the solution to restore NuGet packages and compile the code.&lt;/li&gt; &#xA; &lt;li&gt;Configure the necessary database connection settings in the &lt;code&gt;appsettings.json&lt;/code&gt; file of the Infrastructure project.&lt;/li&gt; &#xA; &lt;li&gt;Open the Package Manager Console, select &lt;code&gt;Project.Infrastructure&lt;/code&gt; project and run the &lt;code&gt;Update-Database&lt;/code&gt; command to create the database&lt;/li&gt; &#xA; &lt;li&gt;Run the application by starting the &lt;code&gt;Project.UI&lt;/code&gt; project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Project Features&lt;/h2&gt; &#xA;&lt;p&gt;This project template includes the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clean Architecture&lt;/strong&gt;: The project is structured according to the principles of Clean Architecture, which promotes separation of concerns and a clear division of responsibilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SOLID Design Principles&lt;/strong&gt;: The code adheres to SOLID principles (Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion), making it easier to maintain and extend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Repository Pattern&lt;/strong&gt;: The repository pattern is used to abstract the data access layer and provide a consistent interface for working with data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unit of Work Pattern&lt;/strong&gt;: The unit of work pattern helps manage transactions and ensures consistency when working with multiple repositories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Entity Framework Core&lt;/strong&gt;: The project utilizes Entity Framework Core as the ORM (Object-Relational Mapping) tool for data access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ASP.NET Core Web&lt;/strong&gt;: The project includes an ASP.NET Core web project that serves as the user interface layer, handling HTTP requests and responses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRUD Operations&lt;/strong&gt;: The project template provides a foundation for implementing complete CRUD (Create, Read, Update, Delete) operations on entities using Entity Framework Core.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;: The project utilizes the built-in dependency injection container in ASP.NET Core, making it easy to manage and inject dependencies throughout the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unit Testing&lt;/strong&gt;: The solution includes separate test projects for unit testing the core, infrastructure, and UI layers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The project template provides a starting point for implementing CRUD operations on entities using Entity Framework Core. You can modify and extend the existing code to suit your specific application requirements. Here&#39;s an overview of the key components involved in the CRUD operations:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Models&lt;/strong&gt;: The &lt;code&gt;Core&lt;/code&gt; project contains the domain models representing the entities you want to perform CRUD operations on. Update the models or add new ones according to your domain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Repositories&lt;/strong&gt;: The &lt;code&gt;Infrastructure&lt;/code&gt; project contains repository implementations that handle data access operations using Entity Framework Core. Modify the repositories or create new ones to match your entity models and database structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Services&lt;/strong&gt;: The &lt;code&gt;Core&lt;/code&gt; project contains services that encapsulate the business logic and orchestrate the operations on repositories. Update or create new services to handle CRUD operations on your entities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Controllers&lt;/strong&gt;: The &lt;code&gt;UI&lt;/code&gt; project contains controllers that handle HTTP requests and responses. Update or create new controllers to expose the CRUD endpoints for your entities.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Make sure to update the routes, validation, and error-handling logic to align with your application requirements and best practices.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions or need further assistance, please contact the project author at &lt;a href=&#34;https://www.github.com/kawser2133&#34;&gt;@kawser2133&lt;/a&gt; || &lt;a href=&#34;https://www.linkedin.com/in/kawser2133&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/linkedin-0A66C2?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34; alt=&#34;linkedin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;I want you to know that contributions to this project are welcome. Please open an issue or submit a pull request if you have any ideas, bug fixes, or improvements.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/kawser2133/clean-structured-project/development/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>