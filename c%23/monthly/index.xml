<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-01T01:45:17Z</updated>
  <subtitle>Monthly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bloxstraplabs/bloxstrap</title>
    <updated>2024-11-01T01:45:17Z</updated>
    <id>tag:github.com,2024-11-01:/bloxstraplabs/bloxstrap</id>
    <link href="https://github.com/bloxstraplabs/bloxstrap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An alternative bootstrapper for Roblox with a bunch of extra features.&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] The only official places to download Bloxstrap are this GitHub repository and &lt;a href=&#34;https://bloxstraplabs.com&#34;&gt;bloxstraplabs.com&lt;/a&gt;. Any other websites offering downloads or claiming to be us are not controlled by us.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/pizzaboxer/bloxstrap/raw/main/Images/Bloxstrap-full-dark.png#gh-dark-mode-only&#34; width=&#34;420&#34;&gt; &lt;img src=&#34;https://github.com/pizzaboxer/bloxstrap/raw/main/Images/Bloxstrap-full-light.png#gh-light-mode-only&#34; width=&#34;420&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pizzaboxer/bloxstrap&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/pizzaboxer/bloxstrap/ci-release.yml?branch=main&amp;amp;label=builds&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/bloxstrap&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/bloxstrap/localized.svg?sanitize=true&#34; alt=&#34;Crowdin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/pizzaboxer/bloxstrap/latest/total?color=981bfe&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/pizzaboxer/bloxstrap?color=7a39fb&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/nKjV3mGq6R&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1099468797410283540?logo=discord&amp;amp;logoColor=white&amp;amp;label=discord&amp;amp;color=4d3dff&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://media.tenor.com/FIkSGbGycmAAAAAd/manly-roblox.gif&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mom_made-pizza_rolls-orange&#34; alt=&#34;lol&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Bloxstrap is a third-party replacement for the standard Roblox bootstrapper, providing additional useful features and improvements.&lt;/p&gt; &#xA;&lt;p&gt;Running into a problem or need help with something? &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/wiki&#34;&gt;Check out the Wiki&lt;/a&gt;. If you can&#39;t find anything, or would like to suggest something, please &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/issues&#34;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bloxstrap is only supported for PCs running Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Is this malware?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No. The source code here is viewable to all, and it&#39;d be impossible for us to slip anything malicious into the downloads without anyone noticing. Just be sure you&#39;re downloading it from an official source. The only two official sources are this GitHub repository and &lt;a href=&#34;https://bloxstraplabs.com&#34;&gt;bloxstraplabs.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Can using this get me banned?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No, it shouldn&#39;t. Bloxstrap doesn&#39;t interact with the Roblox client in the same way that exploits do. &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/wiki/Why-it&#39;s-not-reasonably-possible-for-you-to-be-banned-by-Bloxstrap&#34;&gt;Read more about that here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why was multi-instance launching removed?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; It was removed starting with v2.6.0 for the &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/wiki/Plans-to-remove-multi%E2%80%90instance-launching-from-Bloxstrap&#34;&gt;reasons stated here&lt;/a&gt;. It may be added back in the future when there are less issues with doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hassle-free Discord Rich Presence to let your friends know what you&#39;re playing at a glance&lt;/li&gt; &#xA; &lt;li&gt;Simple support for modding of content files for customizability (death sound, mouse cursor, etc)&lt;/li&gt; &#xA; &lt;li&gt;See where your server is geographically located (courtesy of &lt;a href=&#34;https://ipinfo.io&#34;&gt;ipinfo.io&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ability to configure graphics fidelity and UI experience&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/pizzaboxer/bloxstrap/releases/latest&#34;&gt;latest release of Bloxstrap&lt;/a&gt;, and run it. Configure your preferences if needed, and install. That&#39;s about it!&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can install Bloxstrap via &lt;a href=&#34;https://winstall.app/apps/pizzaboxer.Bloxstrap&#34;&gt;Winget&lt;/a&gt; by running this in a Command Prompt window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; winget install bloxstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need the &lt;a href=&#34;https://aka.ms/dotnet-core-applaunch?missing_runtime=true&amp;amp;arch=x64&amp;amp;rid=win11-x64&amp;amp;apphost_version=6.0.16&amp;amp;gui=true&#34;&gt;.NET 6 Desktop Runtime&lt;/a&gt;. If you don&#39;t already have it installed, you&#39;ll be prompted to install it anyway. Be sure to install Bloxstrap after you&#39;ve installed this.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not unlikely that Windows Smartscreen will show a popup when you run Bloxstrap for the first time. This happens because it&#39;s an unknown program, not because it&#39;s actually detected as being malicious. To dismiss it, just click on &#34;More info&#34; and then &#34;Run anyway&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Once installed, Bloxstrap is added to your Start Menu, where you can access the menu and reconfigure your preferences if needed.&lt;/p&gt; &#xA;&lt;h2&gt;Code&lt;/h2&gt; &#xA;&lt;p&gt;Bloxstrap uses the &lt;a href=&#34;https://github.com/lepoco/wpfui&#34;&gt;WPF UI&lt;/a&gt; library for the user interface design. We currently use and maintain our own fork of WPF UI at &lt;a href=&#34;https://github.com/bloxstraplabs/wpfui&#34;&gt;bloxstraplabs/wpfui&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openai/openai-dotnet</title>
    <updated>2024-11-01T01:45:17Z</updated>
    <id>tag:github.com,2024-11-01:/openai/openai-dotnet</id>
    <link href="https://github.com/openai/openai-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official .NET library for the OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI .NET API library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenAI/absoluteLatest&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/openai.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The OpenAI .NET library provides convenient access to the OpenAI REST API from .NET applications.&lt;/p&gt; &#xA;&lt;p&gt;It is generated from our &lt;a href=&#34;https://github.com/openai/openai-openapi&#34;&gt;OpenAPI specification&lt;/a&gt; in collaboration with Microsoft.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#install-the-nuget-package&#34;&gt;Install the NuGet package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#using-the-client-library&#34;&gt;Using the client library&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#namespace-organization&#34;&gt;Namespace organization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#using-the-async-api&#34;&gt;Using the async API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#using-the-openaiclient-class&#34;&gt;Using the &lt;code&gt;OpenAIClient&lt;/code&gt; class&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-use-chat-completions-with-streaming&#34;&gt;How to use chat completions with streaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-use-chat-completions-with-tools-and-function-calling&#34;&gt;How to use chat completions with tools and function calling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-use-chat-completions-with-structured-outputs&#34;&gt;How to use chat completions with structured outputs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-generate-text-embeddings&#34;&gt;How to generate text embeddings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-generate-images&#34;&gt;How to generate images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-transcribe-audio&#34;&gt;How to transcribe audio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-use-assistants-with-retrieval-augmented-generation-rag&#34;&gt;How to use assistants with retrieval augmented generation (RAG)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-use-assistants-with-streaming-and-vision&#34;&gt;How to use assistants with streaming and vision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#how-to-work-with-azure-openai&#34;&gt;How to work with Azure OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#advanced-scenarios&#34;&gt;Advanced scenarios&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#using-protocol-methods&#34;&gt;Using protocol methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#mock-a-client-for-testing&#34;&gt;Mock a client for testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#automatically-retrying-errors&#34;&gt;Automatically retrying errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/#observability&#34;&gt;Observability&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To call the OpenAI REST API, you will need an API key. To obtain one, first &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;create a new OpenAI account&lt;/a&gt; or &lt;a href=&#34;https://platform.openai.com/login&#34;&gt;log in&lt;/a&gt;. Next, navigate to the &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;API key page&lt;/a&gt; and select &#34;Create new secret key&#34;, optionally naming the key. Make sure to save your API key somewhere safe and do not share it with anyone.&lt;/p&gt; &#xA;&lt;h3&gt;Install the NuGet package&lt;/h3&gt; &#xA;&lt;p&gt;Add the client library to your .NET project with &lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet&lt;/a&gt; using your IDE or the dotnet CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;dotnet add package OpenAI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the code examples included below were written using &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/8.0&#34;&gt;.NET 8&lt;/a&gt;. The OpenAI .NET library is compatible with all .NET Standard 2.0 applications, but the syntax used in some of the code examples in this document may depend on newer language features.&lt;/p&gt; &#xA;&lt;h2&gt;Using the client library&lt;/h2&gt; &#xA;&lt;p&gt;The full API of this library can be found in the &lt;a href=&#34;https://github.com/openai/openai-dotnet/raw/main/api/OpenAI.netstandard2.0.cs&#34;&gt;OpenAI.netstandard2.0.cs&lt;/a&gt; file, and there are many &lt;a href=&#34;https://github.com/openai/openai-dotnet/tree/main/examples&#34;&gt;code examples&lt;/a&gt; to help. For instance, the following snippet illustrates the basic use of the chat completions API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using OpenAI.Chat;&#xA;&#xA;ChatClient client = new(model: &#34;gpt-4o&#34;, apiKey: Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;&#xA;ChatCompletion completion = client.CompleteChat(&#34;Say &#39;this is a test.&#39;&#34;);&#xA;&#xA;Console.WriteLine($&#34;[ASSISTANT]: {completion.Content[0].Text}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While you can pass your API key directly as a string, it is highly recommended that you keep it in a secure location and instead access it via an environment variable or configuration file as shown above to avoid storing it in source control.&lt;/p&gt; &#xA;&lt;h3&gt;Namespace organization&lt;/h3&gt; &#xA;&lt;p&gt;The library is organized into namespaces by feature areas in the OpenAI REST API. Each namespace contains a corresponding client class.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Namespace&lt;/th&gt; &#xA;   &lt;th&gt;Client class&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Assistants&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AssistantClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/experimental-purple&#34; alt=&#34;Experimental&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Audio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AudioClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Batch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BatchClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/experimental-purple&#34; alt=&#34;Experimental&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Chat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ChatClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Embeddings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;EmbeddingClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.FineTuning&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FineTuningClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/experimental-purple&#34; alt=&#34;Experimental&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Files&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAIFileClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Images&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ImageClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Models&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAIModelClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.Moderations&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ModerationClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI.VectorStores&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;VectorStoreClient&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/badge/experimental-purple&#34; alt=&#34;Experimental&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using the async API&lt;/h3&gt; &#xA;&lt;p&gt;Every client method that performs a synchronous API call has an asynchronous variant in the same client class. For instance, the asynchronous variant of the &lt;code&gt;ChatClient&lt;/code&gt;&#39;s &lt;code&gt;CompleteChat&lt;/code&gt; method is &lt;code&gt;CompleteChatAsync&lt;/code&gt;. To rewrite the call above using the asynchronous counterpart, simply &lt;code&gt;await&lt;/code&gt; the call to the corresponding async variant:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ChatCompletion completion = await client.CompleteChatAsync(&#34;Say &#39;this is a test.&#39;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the &lt;code&gt;OpenAIClient&lt;/code&gt; class&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the namespaces mentioned above, there is also the parent &lt;code&gt;OpenAI&lt;/code&gt; namespace itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using OpenAI;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This namespace contains the &lt;code&gt;OpenAIClient&lt;/code&gt; class, which offers certain conveniences when you need to work with multiple feature area clients. Specifically, you can use an instance of this class to create instances of the other clients and have them share the same implementation details, which might be more efficient.&lt;/p&gt; &#xA;&lt;p&gt;You can create an &lt;code&gt;OpenAIClient&lt;/code&gt; by specifying the API key that all clients will use for authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OpenAIClient client = new(Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, to create an instance of an &lt;code&gt;AudioClient&lt;/code&gt;, for example, you can call the &lt;code&gt;OpenAIClient&lt;/code&gt;&#39;s &lt;code&gt;GetAudioClient&lt;/code&gt; method by passing the OpenAI model that the &lt;code&gt;AudioClient&lt;/code&gt; will use, just as if you were using the &lt;code&gt;AudioClient&lt;/code&gt; constructor directly. If necessary, you can create additional clients of the same type to target different models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AudioClient ttsClient = client.GetAudioClient(&#34;tts-1&#34;);&#xA;AudioClient whisperClient = client.GetAudioClient(&#34;whisper-1&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use chat completions with streaming&lt;/h2&gt; &#xA;&lt;p&gt;When you request a chat completion, the default behavior is for the server to generate it in its entirety before sending it back in a single response. Consequently, long chat completions can require waiting for several seconds before hearing back from the server. To mitigate this, the OpenAI REST API supports the ability to stream partial results back as they are being generated, allowing you to start processing the beginning of the completion before it is finished.&lt;/p&gt; &#xA;&lt;p&gt;The client library offers a convenient approach to working with streaming chat completions. If you wanted to re-write the example from the previous section using streaming, rather than calling the &lt;code&gt;ChatClient&lt;/code&gt;&#39;s &lt;code&gt;CompleteChat&lt;/code&gt; method, you would call its &lt;code&gt;CompleteChatStreaming&lt;/code&gt; method instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CollectionResult&amp;lt;StreamingChatCompletionUpdate&amp;gt; completionUpdates = client.CompleteChatStreaming(&#34;Say &#39;this is a test.&#39;&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the returned value is a &lt;code&gt;CollectionResult&amp;lt;StreamingChatCompletionUpdate&amp;gt;&lt;/code&gt; instance, which can be enumerated to process the streaming response chunks as they arrive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Console.Write($&#34;[ASSISTANT]: &#34;);&#xA;foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)&#xA;{&#xA;    if (completionUpdate.ContentUpdate.Count &amp;gt; 0)&#xA;    {&#xA;        Console.Write(completionUpdate.ContentUpdate[0].Text);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can do this asynchronously by calling the &lt;code&gt;CompleteChatStreamingAsync&lt;/code&gt; method to get an &lt;code&gt;AsyncCollectionResult&amp;lt;StreamingChatCompletionUpdate&amp;gt;&lt;/code&gt; and enumerate it using &lt;code&gt;await foreach&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AsyncCollectionResult&amp;lt;StreamingChatCompletionUpdate&amp;gt; completionUpdates = client.CompleteChatStreamingAsync(&#34;Say &#39;this is a test.&#39;&#34;);&#xA;&#xA;Console.Write($&#34;[ASSISTANT]: &#34;);&#xA;await foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)&#xA;{&#xA;    if (completionUpdate.ContentUpdate.Count &amp;gt; 0)&#xA;    {&#xA;        Console.Write(completionUpdate.ContentUpdate[0].Text);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use chat completions with tools and function calling&lt;/h2&gt; &#xA;&lt;p&gt;In this example, you have two functions. The first function can retrieve a user&#39;s current geographic location (e.g., by polling the location service APIs of the user&#39;s device), while the second function can query the weather in a given location (e.g., by making an API call to some third-party weather service). You want the model to be able to call these functions if it deems it necessary to have this information in order to respond to a user request as part of generating a chat completion. For illustrative purposes, consider the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private static string GetCurrentLocation()&#xA;{&#xA;    // Call the location API here.&#xA;    return &#34;San Francisco&#34;;&#xA;}&#xA;&#xA;private static string GetCurrentWeather(string location, string unit = &#34;celsius&#34;)&#xA;{&#xA;    // Call the weather API here.&#xA;    return $&#34;31 {unit}&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start by creating two &lt;code&gt;ChatTool&lt;/code&gt; instances using the static &lt;code&gt;CreateFunctionTool&lt;/code&gt; method to describe each function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private static readonly ChatTool getCurrentLocationTool = ChatTool.CreateFunctionTool(&#xA;    functionName: nameof(GetCurrentLocation),&#xA;    functionDescription: &#34;Get the user&#39;s current location&#34;&#xA;);&#xA;&#xA;private static readonly ChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(&#xA;    functionName: nameof(GetCurrentWeather),&#xA;    functionDescription: &#34;Get the current weather in a given location&#34;,&#xA;    functionParameters: BinaryData.FromBytes(&#34;&#34;&#34;&#xA;        {&#xA;            &#34;type&#34;: &#34;object&#34;,&#xA;            &#34;properties&#34;: {&#xA;                &#34;location&#34;: {&#xA;                    &#34;type&#34;: &#34;string&#34;,&#xA;                    &#34;description&#34;: &#34;The city and state, e.g. Boston, MA&#34;&#xA;                },&#xA;                &#34;unit&#34;: {&#xA;                    &#34;type&#34;: &#34;string&#34;,&#xA;                    &#34;enum&#34;: [ &#34;celsius&#34;, &#34;fahrenheit&#34; ],&#xA;                    &#34;description&#34;: &#34;The temperature unit to use. Infer this from the specified location.&#34;&#xA;                }&#xA;            },&#xA;            &#34;required&#34;: [ &#34;location&#34; ]&#xA;        }&#xA;        &#34;&#34;&#34;u8.ToArray())&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, create a &lt;code&gt;ChatCompletionOptions&lt;/code&gt; instance and add both to its &lt;code&gt;Tools&lt;/code&gt; property. You will pass the &lt;code&gt;ChatCompletionOptions&lt;/code&gt; as an argument in your calls to the &lt;code&gt;ChatClient&lt;/code&gt;&#39;s &lt;code&gt;CompleteChat&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;List&amp;lt;ChatMessage&amp;gt; messages = &#xA;[&#xA;    new UserChatMessage(&#34;What&#39;s the weather like today?&#34;),&#xA;];&#xA;&#xA;ChatCompletionOptions options = new()&#xA;{&#xA;    Tools = { getCurrentLocationTool, getCurrentWeatherTool },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the resulting &lt;code&gt;ChatCompletion&lt;/code&gt; has a &lt;code&gt;FinishReason&lt;/code&gt; property equal to &lt;code&gt;ChatFinishReason.ToolCalls&lt;/code&gt;, it means that the model has determined that one or more tools must be called before the assistant can respond appropriately. In those cases, you must first call the function specified in the &lt;code&gt;ChatCompletion&lt;/code&gt;&#39;s &lt;code&gt;ToolCalls&lt;/code&gt; and then call the &lt;code&gt;ChatClient&lt;/code&gt;&#39;s &lt;code&gt;CompleteChat&lt;/code&gt; method again while passing the function&#39;s result as an additional &lt;code&gt;ChatRequestToolMessage&lt;/code&gt;. Repeat this process as needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;bool requiresAction;&#xA;&#xA;do&#xA;{&#xA;    requiresAction = false;&#xA;    ChatCompletion completion = client.CompleteChat(messages, options);&#xA;&#xA;    switch (completion.FinishReason)&#xA;    {&#xA;        case ChatFinishReason.Stop:&#xA;            {&#xA;                // Add the assistant message to the conversation history.&#xA;                messages.Add(new AssistantChatMessage(completion));&#xA;                break;&#xA;            }&#xA;&#xA;        case ChatFinishReason.ToolCalls:&#xA;            {&#xA;                // First, add the assistant message with tool calls to the conversation history.&#xA;                messages.Add(new AssistantChatMessage(completion));&#xA;&#xA;                // Then, add a new tool message for each tool call that is resolved.&#xA;                foreach (ChatToolCall toolCall in completion.ToolCalls)&#xA;                {&#xA;                    switch (toolCall.FunctionName)&#xA;                    {&#xA;                        case nameof(GetCurrentLocation):&#xA;                            {&#xA;                                string toolResult = GetCurrentLocation();&#xA;                                messages.Add(new ToolChatMessage(toolCall.Id, toolResult));&#xA;                                break;&#xA;                            }&#xA;&#xA;                        case nameof(GetCurrentWeather):&#xA;                            {&#xA;                                // The arguments that the model wants to use to call the function are specified as a&#xA;                                // stringified JSON object based on the schema defined in the tool definition. Note that&#xA;                                // the model may hallucinate arguments too. Consequently, it is important to do the&#xA;                                // appropriate parsing and validation before calling the function.&#xA;                                using JsonDocument argumentsJson = JsonDocument.Parse(toolCall.FunctionArguments);&#xA;                                bool hasLocation = argumentsJson.RootElement.TryGetProperty(&#34;location&#34;, out JsonElement location);&#xA;                                bool hasUnit = argumentsJson.RootElement.TryGetProperty(&#34;unit&#34;, out JsonElement unit);&#xA;&#xA;                                if (!hasLocation)&#xA;                                {&#xA;                                    throw new ArgumentNullException(nameof(location), &#34;The location argument is required.&#34;);&#xA;                                }&#xA;&#xA;                                string toolResult = hasUnit&#xA;                                    ? GetCurrentWeather(location.GetString(), unit.GetString())&#xA;                                    : GetCurrentWeather(location.GetString());&#xA;                                messages.Add(new ToolChatMessage(toolCall.Id, toolResult));&#xA;                                break;&#xA;                            }&#xA;&#xA;                        default:&#xA;                            {&#xA;                                // Handle other unexpected calls.&#xA;                                throw new NotImplementedException();&#xA;                            }&#xA;                    }&#xA;                }&#xA;&#xA;                requiresAction = true;&#xA;                break;&#xA;            }&#xA;&#xA;        case ChatFinishReason.Length:&#xA;            throw new NotImplementedException(&#34;Incomplete model output due to MaxTokens parameter or token limit exceeded.&#34;);&#xA;&#xA;        case ChatFinishReason.ContentFilter:&#xA;            throw new NotImplementedException(&#34;Omitted content due to a content filter flag.&#34;);&#xA;&#xA;        case ChatFinishReason.FunctionCall:&#xA;            throw new NotImplementedException(&#34;Deprecated in favor of tool calls.&#34;);&#xA;&#xA;        default:&#xA;            throw new NotImplementedException(completion.FinishReason.ToString());&#xA;    }&#xA;} while (requiresAction);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use chat completions with structured outputs&lt;/h2&gt; &#xA;&lt;p&gt;Beginning with the &lt;code&gt;gpt-4o-mini&lt;/code&gt;, &lt;code&gt;gpt-4o-mini-2024-07-18&lt;/code&gt;, and &lt;code&gt;gpt-4o-2024-08-06&lt;/code&gt; model snapshots, structured outputs are available for both top-level response content and tool calls in the chat completion and assistants APIs. For information about the feature, see &lt;a href=&#34;https://platform.openai.com/docs/guides/structured-outputs/introduction&#34;&gt;the Structured Outputs guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use structured outputs to constrain chat completion content, set an appropriate &lt;code&gt;ChatResponseFormat&lt;/code&gt; as in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;List&amp;lt;ChatMessage&amp;gt; messages =&#xA;[&#xA;    new UserChatMessage(&#34;How can I solve 8x + 7 = -23?&#34;),&#xA;];&#xA;&#xA;ChatCompletionOptions options = new()&#xA;{&#xA;    ResponseFormat = ChatResponseFormat.CreateJsonSchemaFormat(&#xA;        jsonSchemaFormatName: &#34;math_reasoning&#34;,&#xA;        jsonSchema: BinaryData.FromBytes(&#34;&#34;&#34;&#xA;            {&#xA;                &#34;type&#34;: &#34;object&#34;,&#xA;                &#34;properties&#34;: {&#xA;                &#34;steps&#34;: {&#xA;                    &#34;type&#34;: &#34;array&#34;,&#xA;                    &#34;items&#34;: {&#xA;                    &#34;type&#34;: &#34;object&#34;,&#xA;                    &#34;properties&#34;: {&#xA;                        &#34;explanation&#34;: { &#34;type&#34;: &#34;string&#34; },&#xA;                        &#34;output&#34;: { &#34;type&#34;: &#34;string&#34; }&#xA;                    },&#xA;                    &#34;required&#34;: [&#34;explanation&#34;, &#34;output&#34;],&#xA;                    &#34;additionalProperties&#34;: false&#xA;                    }&#xA;                },&#xA;                &#34;final_answer&#34;: { &#34;type&#34;: &#34;string&#34; }&#xA;                },&#xA;                &#34;required&#34;: [&#34;steps&#34;, &#34;final_answer&#34;],&#xA;                &#34;additionalProperties&#34;: false&#xA;            }&#xA;            &#34;&#34;&#34;u8.ToArray()),&#xA;        jsonSchemaIsStrict: true)&#xA;};&#xA;&#xA;ChatCompletion completion = client.CompleteChat(messages, options);&#xA;&#xA;using JsonDocument structuredJson = JsonDocument.Parse(completion.Content[0].Text);&#xA;&#xA;Console.WriteLine($&#34;Final answer: {structuredJson.RootElement.GetProperty(&#34;final_answer&#34;)}&#34;);&#xA;Console.WriteLine(&#34;Reasoning steps:&#34;);&#xA;&#xA;foreach (JsonElement stepElement in structuredJson.RootElement.GetProperty(&#34;steps&#34;).EnumerateArray())&#xA;{&#xA;    Console.WriteLine($&#34;  - Explanation: {stepElement.GetProperty(&#34;explanation&#34;)}&#34;);&#xA;    Console.WriteLine($&#34;    Output: {stepElement.GetProperty(&#34;output&#34;)}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to generate text embeddings&lt;/h2&gt; &#xA;&lt;p&gt;In this example, you want to create a trip-planning website that allows customers to write a prompt describing the kind of hotel that they are looking for and then offers hotel recommendations that closely match this description. To achieve this, it is possible to use text embeddings to measure the relatedness of text strings. In summary, you can get embeddings of the hotel descriptions, store them in a vector database, and use them to build a search index that you can query using the embedding of a given customer&#39;s prompt.&lt;/p&gt; &#xA;&lt;p&gt;To generate a text embedding, use &lt;code&gt;EmbeddingClient&lt;/code&gt; from the &lt;code&gt;OpenAI.Embeddings&lt;/code&gt; namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using OpenAI.Embeddings;&#xA;&#xA;EmbeddingClient client = new(&#34;text-embedding-3-small&#34;, Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;&#xA;string description = &#34;Best hotel in town if you like luxury hotels. They have an amazing infinity pool, a spa,&#34;&#xA;    + &#34; and a really helpful concierge. The location is perfect -- right downtown, close to all the tourist&#34;&#xA;    + &#34; attractions. We highly recommend this hotel.&#34;;&#xA;&#xA;OpenAIEmbedding embedding = client.GenerateEmbedding(description);&#xA;ReadOnlyMemory&amp;lt;float&amp;gt; vector = embedding.ToFloats();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the resulting embedding is a list (also called a vector) of floating point numbers represented as an instance of &lt;code&gt;ReadOnlyMemory&amp;lt;float&amp;gt;&lt;/code&gt;. By default, the length of the embedding vector will be 1536 when using the &lt;code&gt;text-embedding-3-small&lt;/code&gt; model or 3072 when using the &lt;code&gt;text-embedding-3-large&lt;/code&gt; model. Generally, larger embeddings perform better, but using them also tends to cost more in terms of compute, memory, and storage. You can reduce the dimensions of the embedding by creating an instance of the &lt;code&gt;EmbeddingGenerationOptions&lt;/code&gt; class, setting the &lt;code&gt;Dimensions&lt;/code&gt; property, and passing it as an argument in your call to the &lt;code&gt;GenerateEmbedding&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;EmbeddingGenerationOptions options = new() { Dimensions = 512 };&#xA;&#xA;OpenAIEmbedding embedding = client.GenerateEmbedding(description, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to generate images&lt;/h2&gt; &#xA;&lt;p&gt;In this example, you want to build an app to help interior designers prototype new ideas based on the latest design trends. As part of the creative process, an interior designer can use this app to generate images for inspiration simply by describing the scene in their head as a prompt. As expected, high-quality, strikingly dramatic images with finer details deliver the best results for this application.&lt;/p&gt; &#xA;&lt;p&gt;To generate an image, use &lt;code&gt;ImageClient&lt;/code&gt; from the &lt;code&gt;OpenAI.Images&lt;/code&gt; namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using OpenAI.Images;&#xA;&#xA;ImageClient client = new(&#34;dall-e-3&#34;, Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating an image always requires a &lt;code&gt;prompt&lt;/code&gt; that describes what should be generated. To further tailor the image generation to your specific needs, you can create an instance of the &lt;code&gt;ImageGenerationOptions&lt;/code&gt; class and set the &lt;code&gt;Quality&lt;/code&gt;, &lt;code&gt;Size&lt;/code&gt;, and &lt;code&gt;Style&lt;/code&gt; properties accordingly. Note that you can also set the &lt;code&gt;ResponseFormat&lt;/code&gt; property of &lt;code&gt;ImageGenerationOptions&lt;/code&gt; to &lt;code&gt;GeneratedImageFormat.Bytes&lt;/code&gt; in order to receive the resulting PNG as &lt;code&gt;BinaryData&lt;/code&gt; (instead of the default remote &lt;code&gt;Uri&lt;/code&gt;) if this is convenient for your use case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;string prompt = &#34;The concept for a living room that blends Scandinavian simplicity with Japanese minimalism for&#34;&#xA;    + &#34; a serene and cozy atmosphere. It&#39;s a space that invites relaxation and mindfulness, with natural light&#34;&#xA;    + &#34; and fresh air. Using neutral tones, including colors like white, beige, gray, and black, that create a&#34;&#xA;    + &#34; sense of harmony. Featuring sleek wood furniture with clean lines and subtle curves to add warmth and&#34;&#xA;    + &#34; elegance. Plants and flowers in ceramic pots adding color and life to a space. They can serve as focal&#34;&#xA;    + &#34; points, creating a connection with nature. Soft textiles and cushions in organic fabrics adding comfort&#34;&#xA;    + &#34; and softness to a space. They can serve as accents, adding contrast and texture.&#34;;&#xA;&#xA;ImageGenerationOptions options = new()&#xA;{&#xA;    Quality = GeneratedImageQuality.High,&#xA;    Size = GeneratedImageSize.W1792xH1024,&#xA;    Style = GeneratedImageStyle.Vivid,&#xA;    ResponseFormat = GeneratedImageFormat.Bytes&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, call the &lt;code&gt;ImageClient&lt;/code&gt;&#39;s &lt;code&gt;GenerateImage&lt;/code&gt; method by passing the prompt and the &lt;code&gt;ImageGenerationOptions&lt;/code&gt; instance as arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GeneratedImage image = client.GenerateImage(prompt, options);&#xA;BinaryData bytes = image.ImageBytes;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For illustrative purposes, you could then save the generated image to local storage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using FileStream stream = File.OpenWrite($&#34;{Guid.NewGuid()}.png&#34;);&#xA;bytes.ToStream().CopyTo(stream);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to transcribe audio&lt;/h2&gt; &#xA;&lt;p&gt;In this example, an audio file is transcribed using the Whisper speech-to-text model, including both word- and audio-segment-level timestamp information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using OpenAI.Audio;&#xA;&#xA;AudioClient client = new(&#34;whisper-1&#34;, Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;&#xA;string audioFilePath = Path.Combine(&#34;Assets&#34;, &#34;audio_houseplant_care.mp3&#34;);&#xA;&#xA;AudioTranscriptionOptions options = new()&#xA;{&#xA;    ResponseFormat = AudioTranscriptionFormat.Verbose,&#xA;    TimestampGranularities = AudioTimestampGranularities.Word | AudioTimestampGranularities.Segment,&#xA;};&#xA;&#xA;AudioTranscription transcription = client.TranscribeAudio(audioFilePath, options);&#xA;&#xA;Console.WriteLine(&#34;Transcription:&#34;);&#xA;Console.WriteLine($&#34;{transcription.Text}&#34;);&#xA;&#xA;Console.WriteLine();&#xA;Console.WriteLine($&#34;Words:&#34;);&#xA;foreach (TranscribedWord word in transcription.Words)&#xA;{&#xA;    Console.WriteLine($&#34;  {word.Word,15} : {word.StartTime.TotalMilliseconds,5:0} - {word.EndTime.TotalMilliseconds,5:0}&#34;);&#xA;}&#xA;&#xA;Console.WriteLine();&#xA;Console.WriteLine($&#34;Segments:&#34;);&#xA;foreach (TranscribedSegment segment in transcription.Segments)&#xA;{&#xA;    Console.WriteLine($&#34;  {segment.Text,90} : {segment.StartTime.TotalMilliseconds,5:0} - {segment.EndTime.TotalMilliseconds,5:0}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use assistants with retrieval augmented generation (RAG)&lt;/h2&gt; &#xA;&lt;p&gt;In this example, you have a JSON document with the monthly sales information of different products, and you want to build an assistant capable of analyzing it and answering questions about it.&lt;/p&gt; &#xA;&lt;p&gt;To achieve this, use both &lt;code&gt;OpenAIFileClient&lt;/code&gt; from the &lt;code&gt;OpenAI.Files&lt;/code&gt; namespace and &lt;code&gt;AssistantClient&lt;/code&gt; from the &lt;code&gt;OpenAI.Assistants&lt;/code&gt; namespace.&lt;/p&gt; &#xA;&lt;p&gt;Important: The Assistants REST API is currently in beta. As such, the details are subject to change, and correspondingly the &lt;code&gt;AssistantClient&lt;/code&gt; is attributed as &lt;code&gt;[Experimental]&lt;/code&gt;. To use it, you must suppress the &lt;code&gt;OPENAI001&lt;/code&gt; warning first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using OpenAI.Assistants;&#xA;using OpenAI.Files;&#xA;&#xA;OpenAIClient openAIClient = new(Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;OpenAIFileClient fileClient = openAIClient.GetOpenAIFileClient();&#xA;AssistantClient assistantClient = openAIClient.GetAssistantClient();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example of what the JSON document might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Stream document = BinaryData.FromBytes(&#34;&#34;&#34;&#xA;    {&#xA;        &#34;description&#34;: &#34;This document contains the sale history data for Contoso products.&#34;,&#xA;        &#34;sales&#34;: [&#xA;            {&#xA;                &#34;month&#34;: &#34;January&#34;,&#xA;                &#34;by_product&#34;: {&#xA;                    &#34;113043&#34;: 15,&#xA;                    &#34;113045&#34;: 12,&#xA;                    &#34;113049&#34;: 2&#xA;                }&#xA;            },&#xA;            {&#xA;                &#34;month&#34;: &#34;February&#34;,&#xA;                &#34;by_product&#34;: {&#xA;                    &#34;113045&#34;: 22&#xA;                }&#xA;            },&#xA;            {&#xA;                &#34;month&#34;: &#34;March&#34;,&#xA;                &#34;by_product&#34;: {&#xA;                    &#34;113045&#34;: 16,&#xA;                    &#34;113055&#34;: 5&#xA;                }&#xA;            }&#xA;        ]&#xA;    }&#xA;    &#34;&#34;&#34;u8.ToArray()).ToStream();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upload this document to OpenAI using the &lt;code&gt;OpenAIFileClient&lt;/code&gt;&#39;s &lt;code&gt;UploadFile&lt;/code&gt; method, ensuring that you use &lt;code&gt;FileUploadPurpose.Assistants&lt;/code&gt; to allow your assistant to access it later:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OpenAIFile salesFile = fileClient.UploadFile(&#xA;    document,&#xA;    &#34;monthly_sales.json&#34;,&#xA;    FileUploadPurpose.Assistants);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new assistant using an instance of the &lt;code&gt;AssistantCreationOptions&lt;/code&gt; class to customize it. Here, we use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A friendly &lt;code&gt;Name&lt;/code&gt; for the assistant, as will display in the Playground&lt;/li&gt; &#xA; &lt;li&gt;Tool definition instances for the tools that the assistant should have access to; here, we use &lt;code&gt;FileSearchToolDefinition&lt;/code&gt; to process the sales document we just uploaded and &lt;code&gt;CodeInterpreterToolDefinition&lt;/code&gt; so we can analyze and visualize the numeric data&lt;/li&gt; &#xA; &lt;li&gt;Resources for the assistant to use with its tools, here using the &lt;code&gt;VectorStoreCreationHelper&lt;/code&gt; type to automatically make a new vector store that indexes the sales file; alternatively, you could use &lt;code&gt;VectorStoreClient&lt;/code&gt; to manage the vector store separately&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;AssistantCreationOptions assistantOptions = new()&#xA;{&#xA;    Name = &#34;Example: Contoso sales RAG&#34;,&#xA;    Instructions =&#xA;        &#34;You are an assistant that looks up sales data and helps visualize the information based&#34;&#xA;        + &#34; on user queries. When asked to generate a graph, chart, or other visualization, use&#34;&#xA;        + &#34; the code interpreter tool to do so.&#34;,&#xA;    Tools =&#xA;    {&#xA;        new FileSearchToolDefinition(),&#xA;        new CodeInterpreterToolDefinition(),&#xA;    },&#xA;    ToolResources = new()&#xA;    {&#xA;        FileSearch = new()&#xA;        {&#xA;            NewVectorStores =&#xA;            {&#xA;                new VectorStoreCreationHelper([salesFile.Id]),&#xA;            }&#xA;        }&#xA;    },&#xA;};&#xA;&#xA;Assistant assistant = assistantClient.CreateAssistant(&#34;gpt-4o&#34;, assistantOptions);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, create a new thread. For illustrative purposes, you could include an initial user message asking about the sales information of a given product and then use the &lt;code&gt;AssistantClient&lt;/code&gt;&#39;s &lt;code&gt;CreateThreadAndRun&lt;/code&gt; method to get it started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ThreadCreationOptions threadOptions = new()&#xA;{&#xA;    InitialMessages = { &#34;How well did product 113045 sell in February? Graph its trend over time.&#34; }&#xA;};&#xA;&#xA;ThreadRun threadRun = assistantClient.CreateThreadAndRun(assistant.Id, threadOptions);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Poll the status of the run until it is no longer queued or in progress:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;do&#xA;{&#xA;    Thread.Sleep(TimeSpan.FromSeconds(1));&#xA;    threadRun = assistantClient.GetRun(threadRun.ThreadId, threadRun.Id);&#xA;} while (!threadRun.Status.IsTerminal);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything went well, the terminal status of the run will be &lt;code&gt;RunStatus.Completed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can use the &lt;code&gt;AssistantClient&lt;/code&gt;&#39;s &lt;code&gt;GetMessages&lt;/code&gt; method to retrieve the messages associated with this thread, which now include the responses from the assistant to the initial user message.&lt;/p&gt; &#xA;&lt;p&gt;For illustrative purposes, you could print the messages to the console and also save any images produced by the assistant to local storage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CollectionResult&amp;lt;ThreadMessage&amp;gt; messages&#xA;    = assistantClient.GetMessages(threadRun.ThreadId, new MessageCollectionOptions() { Order = MessageCollectionOrder.Ascending });&#xA;&#xA;foreach (ThreadMessage message in messages)&#xA;{&#xA;    Console.Write($&#34;[{message.Role.ToString().ToUpper()}]: &#34;);&#xA;    foreach (MessageContent contentItem in message.Content)&#xA;    {&#xA;        if (!string.IsNullOrEmpty(contentItem.Text))&#xA;        {&#xA;            Console.WriteLine($&#34;{contentItem.Text}&#34;);&#xA;&#xA;            if (contentItem.TextAnnotations.Count &amp;gt; 0)&#xA;            {&#xA;                Console.WriteLine();&#xA;            }&#xA;&#xA;            // Include annotations, if any.&#xA;            foreach (TextAnnotation annotation in contentItem.TextAnnotations)&#xA;            {&#xA;                if (!string.IsNullOrEmpty(annotation.InputFileId))&#xA;                {&#xA;                    Console.WriteLine($&#34;* File citation, file ID: {annotation.InputFileId}&#34;);&#xA;                }&#xA;                if (!string.IsNullOrEmpty(annotation.OutputFileId))&#xA;                {&#xA;                    Console.WriteLine($&#34;* File output, new file ID: {annotation.OutputFileId}&#34;);&#xA;                }&#xA;            }&#xA;        }&#xA;        if (!string.IsNullOrEmpty(contentItem.ImageFileId))&#xA;        {&#xA;            OpenAIFile imageInfo = fileClient.GetFile(contentItem.ImageFileId);&#xA;            BinaryData imageBytes = fileClient.DownloadFile(contentItem.ImageFileId);&#xA;            using FileStream stream = File.OpenWrite($&#34;{imageInfo.Filename}.png&#34;);&#xA;            imageBytes.ToStream().CopyTo(stream);&#xA;&#xA;            Console.WriteLine($&#34;&amp;lt;image: {imageInfo.Filename}.png&amp;gt;&#34;);&#xA;        }&#xA;    }&#xA;    Console.WriteLine();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And it would yield something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[USER]: How well did product 113045 sell in February? Graph its trend over time.&#xA;&#xA;[ASSISTANT]: Product 113045 sold 22 units in February【4:0†monthly_sales.json】.&#xA;&#xA;Now, I will generate a graph to show its sales trend over time.&#xA;&#xA;* File citation, file ID: file-hGOiwGNftMgOsjbynBpMCPFn&#xA;&#xA;[ASSISTANT]: &amp;lt;image: 015d8e43-17fe-47de-af40-280f25452280.png&amp;gt;&#xA;The sales trend for Product 113045 over the past three months shows that:&#xA;&#xA;- In January, 12 units were sold.&#xA;- In February, 22 units were sold, indicating significant growth.&#xA;- In March, sales dropped slightly to 16 units.&#xA;&#xA;The graph above visualizes this trend, showing a peak in sales during February.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use assistants with streaming and vision&lt;/h2&gt; &#xA;&lt;p&gt;This example shows how to use the v2 Assistants API to provide image data to an assistant and then stream the run&#39;s response.&lt;/p&gt; &#xA;&lt;p&gt;As before, you will use a &lt;code&gt;OpenAIFileClient&lt;/code&gt; and an &lt;code&gt;AssistantClient&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OpenAIClient openAIClient = new(Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;OpenAIFileClient fileClient = openAIClient.GetOpenAIFileClient();&#xA;AssistantClient assistantClient = openAIClient.GetAssistantClient();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this example, we will use both image data from a local file as well as an image located at a URL. For the local data, we upload the file with the &lt;code&gt;Vision&lt;/code&gt; upload purpose, which would also allow it to be downloaded and retrieved later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OpenAIFile pictureOfAppleFile = fileClient.UploadFile(&#xA;    Path.Combine(&#34;Assets&#34;, &#34;images_apple.png&#34;),&#xA;    FileUploadPurpose.Vision);&#xA;&#xA;Uri linkToPictureOfOrange = new(&#34;https://raw.githubusercontent.com/openai/openai-dotnet/refs/heads/main/examples/Assets/images_orange.png&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, create a new assistant with a vision-capable model like &lt;code&gt;gpt-4o&lt;/code&gt; and a thread with the image information referenced:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Assistant assistant = assistantClient.CreateAssistant(&#xA;    &#34;gpt-4o&#34;,&#xA;    new AssistantCreationOptions()&#xA;    {&#xA;        Instructions = &#34;When asked a question, attempt to answer very concisely. &#34;&#xA;            + &#34;Prefer one-sentence answers whenever feasible.&#34;&#xA;    });&#xA;&#xA;AssistantThread thread = assistantClient.CreateThread(new ThreadCreationOptions()&#xA;{&#xA;    InitialMessages =&#xA;        {&#xA;            new ThreadInitializationMessage(&#xA;                MessageRole.User,&#xA;                [&#xA;                    &#34;Hello, assistant! Please compare these two images for me:&#34;,&#xA;                    MessageContent.FromImageFileId(pictureOfAppleFile.Id),&#xA;                    MessageContent.FromImageUri(linkToPictureOfOrange),&#xA;                ]),&#xA;        }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the assistant and thread prepared, use the &lt;code&gt;CreateRunStreaming&lt;/code&gt; method to get an enumerable &lt;code&gt;CollectionResult&amp;lt;StreamingUpdate&amp;gt;&lt;/code&gt;. You can then iterate over this collection with &lt;code&gt;foreach&lt;/code&gt;. For async calling patterns, use &lt;code&gt;CreateRunStreamingAsync&lt;/code&gt; and iterate over the &lt;code&gt;AsyncCollectionResult&amp;lt;StreamingUpdate&amp;gt;&lt;/code&gt; with &lt;code&gt;await foreach&lt;/code&gt;, instead. Note that streaming variants also exist for &lt;code&gt;CreateThreadAndRunStreaming&lt;/code&gt; and &lt;code&gt;SubmitToolOutputsToRunStreaming&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CollectionResult&amp;lt;StreamingUpdate&amp;gt; streamingUpdates = assistantClient.CreateRunStreaming(&#xA;    thread.Id,&#xA;    assistant.Id,&#xA;    new RunCreationOptions()&#xA;    {&#xA;        AdditionalInstructions = &#34;When possible, try to sneak in puns if you&#39;re asked to compare things.&#34;,&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to handle the &lt;code&gt;StreamingUpdates&lt;/code&gt; as they arrive, you can use the &lt;code&gt;UpdateKind&lt;/code&gt; property on the base &lt;code&gt;StreamingUpdate&lt;/code&gt; and/or downcast to a specifically desired update type, like &lt;code&gt;MessageContentUpdate&lt;/code&gt; for &lt;code&gt;thread.message.delta&lt;/code&gt; events or &lt;code&gt;RequiredActionUpdate&lt;/code&gt; for streaming tool calls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach (StreamingUpdate streamingUpdate in streamingUpdates)&#xA;{&#xA;    if (streamingUpdate.UpdateKind == StreamingUpdateReason.RunCreated)&#xA;    {&#xA;        Console.WriteLine($&#34;--- Run started! ---&#34;);&#xA;    }&#xA;    if (streamingUpdate is MessageContentUpdate contentUpdate)&#xA;    {&#xA;        Console.Write(contentUpdate.Text);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will yield streamed output from the run like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--- Run started! ---&#xA;The first image depicts a multicolored apple with a blend of red and green hues, while the second image shows an orange with a bright, textured orange peel; one might say it’s comparing apples to oranges!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to work with Azure OpenAI&lt;/h2&gt; &#xA;&lt;p&gt;For Azure OpenAI scenarios use the &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net&#34;&gt;Azure SDK&lt;/a&gt; and more specifically the &lt;a href=&#34;https://github.com/Azure/azure-sdk-for-net/raw/main/sdk/openai/Azure.AI.OpenAI/README.md&#34;&gt;Azure OpenAI client library for .NET&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Azure OpenAI client library for .NET is a companion to this library and all common capabilities between OpenAI and Azure OpenAI share the same scenario clients, methods, and request/response types. It is designed to make Azure specific scenarios straightforward, with extensions for Azure-specific concepts like Responsible AI content filter results and On Your Data integration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;AzureOpenAIClient azureClient = new(&#xA;    new Uri(&#34;https://your-azure-openai-resource.com&#34;),&#xA;    new DefaultAzureCredential());&#xA;ChatClient chatClient = azureClient.GetChatClient(&#34;my-gpt-35-turbo-deployment&#34;);&#xA;&#xA;ChatCompletion completion = chatClient.CompleteChat(&#xA;    [&#xA;        // System messages represent instructions or other guidance about how the assistant should behave&#xA;        new SystemChatMessage(&#34;You are a helpful assistant that talks like a pirate.&#34;),&#xA;        // User messages represent user input, whether historical or the most recen tinput&#xA;        new UserChatMessage(&#34;Hi, can you help me?&#34;),&#xA;        // Assistant messages in a request represent conversation history for responses&#xA;        new AssistantChatMessage(&#34;Arrr! Of course, me hearty! What can I do for ye?&#34;),&#xA;        new UserChatMessage(&#34;What&#39;s the best way to train a parrot?&#34;),&#xA;    ]);&#xA;&#xA;Console.WriteLine($&#34;{completion.Role}: {completion.Content[0].Text}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced scenarios&lt;/h2&gt; &#xA;&lt;h3&gt;Using protocol methods&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the client methods that use strongly-typed request and response objects, the .NET library also provides &lt;em&gt;protocol methods&lt;/em&gt; that enable more direct access to the REST API. Protocol methods are &#34;binary in, binary out&#34; accepting &lt;code&gt;BinaryContent&lt;/code&gt; as request bodies and providing &lt;code&gt;BinaryData&lt;/code&gt; as response bodies.&lt;/p&gt; &#xA;&lt;p&gt;For example, to use the protocol method variant of the &lt;code&gt;ChatClient&lt;/code&gt;&#39;s &lt;code&gt;CompleteChat&lt;/code&gt; method, pass the request body as &lt;code&gt;BinaryContent&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;ChatClient client = new(&#34;gpt-4o&#34;, Environment.GetEnvironmentVariable(&#34;OPENAI_API_KEY&#34;));&#xA;&#xA;BinaryData input = BinaryData.FromBytes(&#34;&#34;&#34;&#xA;    {&#xA;       &#34;model&#34;: &#34;gpt-4o&#34;,&#xA;       &#34;messages&#34;: [&#xA;           {&#xA;               &#34;role&#34;: &#34;user&#34;,&#xA;               &#34;content&#34;: &#34;Say &#39;this is a test.&#39;&#34;&#xA;           }&#xA;       ]&#xA;    }&#xA;    &#34;&#34;&#34;u8.ToArray());&#xA;&#xA;using BinaryContent content = BinaryContent.Create(input);&#xA;ClientResult result = client.CompleteChat(content);&#xA;BinaryData output = result.GetRawResponse().Content;&#xA;&#xA;using JsonDocument outputAsJson = JsonDocument.Parse(output.ToString());&#xA;string message = outputAsJson.RootElement&#xA;    .GetProperty(&#34;choices&#34;u8)[0]&#xA;    .GetProperty(&#34;message&#34;u8)&#xA;    .GetProperty(&#34;content&#34;u8)&#xA;    .GetString();&#xA;&#xA;Console.WriteLine($&#34;[ASSISTANT]: {message}&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how you can then call the resulting &lt;code&gt;ClientResult&lt;/code&gt;&#39;s &lt;code&gt;GetRawResponse&lt;/code&gt; method and retrieve the response body as &lt;code&gt;BinaryData&lt;/code&gt; via the &lt;code&gt;PipelineResponse&lt;/code&gt;&#39;s &lt;code&gt;Content&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;h3&gt;Mock a client for testing&lt;/h3&gt; &#xA;&lt;p&gt;The OpenAI .NET library has been designed to support mocking, providing key features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client methods made virtual to allow overriding.&lt;/li&gt; &#xA; &lt;li&gt;Model factories to assist in instantiating API output models that lack public constructors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To illustrate how mocking works, suppose you want to validate the behavior of the following method using the &lt;a href=&#34;https://github.com/devlooped/moq&#34;&gt;Moq&lt;/a&gt; library. Given the path to an audio file, it determines whether it contains a specified secret word:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public bool ContainsSecretWord(AudioClient client, string audioFilePath, string secretWord)&#xA;{&#xA;    AudioTranscription transcription = client.TranscribeAudio(audioFilePath);&#xA;    return transcription.Text.Contains(secretWord);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create mocks of &lt;code&gt;AudioClient&lt;/code&gt; and &lt;code&gt;ClientResult&amp;lt;AudioTranscription&amp;gt;&lt;/code&gt;, set up methods and properties that will be invoked, then test the behavior of the &lt;code&gt;ContainsSecretWord&lt;/code&gt; method. Since the &lt;code&gt;AudioTranscription&lt;/code&gt; class does not provide public constructors, it must be instantiated by the &lt;code&gt;OpenAIAudioModelFactory&lt;/code&gt; static class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Instantiate mocks and the AudioTranscription object.&#xA;&#xA;Mock&amp;lt;AudioClient&amp;gt; mockClient = new();&#xA;Mock&amp;lt;ClientResult&amp;lt;AudioTranscription&amp;gt;&amp;gt; mockResult = new(null, Mock.Of&amp;lt;PipelineResponse&amp;gt;());&#xA;AudioTranscription transcription = OpenAIAudioModelFactory.AudioTranscription(text: &#34;I swear I saw an apple flying yesterday!&#34;);&#xA;&#xA;// Set up mocks&#39; properties and methods.&#xA;&#xA;mockResult&#xA;    .SetupGet(result =&amp;gt; result.Value)&#xA;    .Returns(transcription);&#xA;&#xA;mockClient.Setup(client =&amp;gt; client.TranscribeAudio(&#xA;        It.IsAny&amp;lt;string&amp;gt;(),&#xA;        It.IsAny&amp;lt;AudioTranscriptionOptions&amp;gt;()))&#xA;    .Returns(mockResult.Object);&#xA;&#xA;// Perform validation.&#xA;&#xA;AudioClient client = mockClient.Object;&#xA;bool containsSecretWord = ContainsSecretWord(client, &#34;&amp;lt;audioFilePath&amp;gt;&#34;, &#34;apple&#34;);&#xA;&#xA;Assert.That(containsSecretWord, Is.True);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All namespaces have their corresponding model factory to support mocking with the exception of the &lt;code&gt;OpenAI.Assistants&lt;/code&gt; and &lt;code&gt;OpenAI.VectorStores&lt;/code&gt; namespaces, for which model factories are coming soon.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically retrying errors&lt;/h3&gt; &#xA;&lt;p&gt;By default, the client classes will automatically retry the following errors up to three additional times using exponential backoff:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;408 Request Timeout&lt;/li&gt; &#xA; &lt;li&gt;429 Too Many Requests&lt;/li&gt; &#xA; &lt;li&gt;500 Internal Server Error&lt;/li&gt; &#xA; &lt;li&gt;502 Bad Gateway&lt;/li&gt; &#xA; &lt;li&gt;503 Service Unavailable&lt;/li&gt; &#xA; &lt;li&gt;504 Gateway Timeout&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Observability&lt;/h3&gt; &#xA;&lt;p&gt;OpenAI .NET library supports experimental distributed tracing and metrics with OpenTelemetry. Check out &lt;a href=&#34;https://raw.githubusercontent.com/openai/openai-dotnet/main/docs/observability.md&#34;&gt;Observability with OpenTelemetry&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>louthy/language-ext</title>
    <updated>2024-11-01T01:45:17Z</updated>
    <id>tag:github.com,2024-11-01:/louthy/language-ext</id>
    <link href="https://github.com/louthy/language-ext" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# functional language extensions - a base class library for functional programming&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/Images/banner.png&#34; alt=&#34;lang-ext&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;C# Functional Programming Language Extensions&lt;/h1&gt; &#xA;&lt;p&gt;This library uses and abuses the features of C# to provide a pure functional-programming framework that, if you squint, can look like extensions to the language itself. The desire here is to make programming in C# much more robust by helping the engineer&#39;s inertia flow in the direction of declarative and pure functional code rather than imperative. Using these techniques for large code-bases can bring tangible benefits to long-term maintenance by removing hidden complexity and by easing the engineer&#39;s cognitive load.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/louthy/language-ext/discussions&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/Images/discussions.svg?sanitize=true&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Author on...&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blog&lt;/strong&gt;: &lt;a href=&#34;https://paullouth.com/&#34;&gt;Notes from a Small Functional Island&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/paullouth&#34;&gt;@paullouth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mastodon:&lt;/strong&gt; &lt;a href=&#34;https://4four.org/@louthy&#34;&gt;@louthy@4four.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github ReadME project&lt;/strong&gt;: &lt;a href=&#34;https://github.com/readme/featured/functional-programming&#34;&gt;&#39;Functional programming is finally going mainstream&#39;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#nu-get&#34;&gt;Nu-get package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#prologue&#34;&gt;Prologue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#features&#34;&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#functional-effects-and-io&#34;&gt;Functional effects and IO&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#atomic-concurrency-and-collections&#34;&gt;Atomic concurrency, shared state, and collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#immutable-collections&#34;&gt;Immutable collections&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#optional-and-alternative-value-monads&#34;&gt;Optional and Alternative value monads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#state-managing-monads&#34;&gt;State managing monads&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#parser-combinators&#34;&gt;Parser combinators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#pretty&#34;&gt;Pretty: Produce nicely formatted text with smart layouts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#differencing&#34;&gt;Differencing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#traits&#34;&gt;Traits&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#value-traits&#34;&gt;Value traits&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/louthy/language-ext/main/#contributing--code-of-conduct&#34;&gt;Contributing &amp;amp; Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/louthy/language-ext/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue%20label%3A%22examples%20%2F%20documentation%22%20&#34;&gt;Issues that contain documentation and examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nu-get&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nu-get package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/LanguageExt.Core&#34;&gt;LanguageExt.Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All of the core types and functional &#39;prelude&#39;. &lt;strong&gt;This is all that&#39;s needed to get started&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/LanguageExt.FSharp&#34;&gt;LanguageExt.FSharp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;F# to C# interop package. Provides interop between the LanguageExt.Core types (like &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt;) to the F# equivalents, as well as interop between core BCL types and F#&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/LanguageExt.Parsec&#34;&gt;LanguageExt.Parsec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Port of the &lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;Haskell parsec library&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/LanguageExt.Rx&#34;&gt;LanguageExt.Rx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reactive Extensions support for various types within the Core&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/LanguageExt.Sys&#34;&gt;LanguageExt.Sys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides an effects wrapper around the .NET System namespace making common IO operations pure and unit-testable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To use this library, simply include &lt;code&gt;LanguageExt.Core.dll&lt;/code&gt; in your project or grab it from NuGet. It is also worth setting up some &lt;code&gt;global using&lt;/code&gt; for your project. This is the full list that will cover the key functionality and bring it into scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;global using LanguageExt;&#xA;global using LanguageExt.Common;&#xA;global using static LanguageExt.Prelude;&#xA;global using LanguageExt.Traits;&#xA;global using LanguageExt.Effects;&#xA;global using LanguageExt.Pipes;&#xA;global using LanguageExt.Pretty;&#xA;global using LanguageExt.Traits.Domain;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A minimum, might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;global using LanguageExt;&#xA;global using static LanguageExt.Prelude;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The namespace &lt;code&gt;LanguageExt&lt;/code&gt; contains most of the core types; &lt;code&gt;LanguageExt.Prelude&lt;/code&gt; contains the functions that bring into scope the prelude functions that behave like standalone functions in ML style functional programming languages; &lt;code&gt;LanguageExt.Traits&lt;/code&gt; brings in the higher-kinded trait-types and many extensions; &lt;code&gt;LanguageExt.Common&lt;/code&gt; brings in the &lt;code&gt;Error&lt;/code&gt; type and predefined &lt;code&gt;Errors&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prologue&lt;/h2&gt; &#xA;&lt;p&gt;From C# 6 onwards we got the ability to treat static classes like namespaces. This means that we can use static methods without qualifying them first. That instantly gives us access to single term method names that look exactly like functions in ML-style functional languages. i.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;    using static System.Console;&#xA;    &#xA;    WriteLine(&#34;Hello, World&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This library tries to bring some of the functional world into C#. It won&#39;t always sit well with the seasoned C# OO programmer, especially the choice of &lt;code&gt;camelCase&lt;/code&gt; names for a lot of functions and the seeming &#39;globalness&#39; of a lot of the library.&lt;/p&gt; &#xA;&lt;p&gt;I can understand that much of this library is non-idiomatic, but when you think of the journey C# has been on, is &#34;idiomatic&#34; necessarily right? A lot of C#&#39;s idioms are inherited from Java and C# 1.0. Since then we&#39;ve had generics, closures, Func, LINQ, async... C# as a language is becoming more and more like a functional language on every release. In fact, the bulk of the new features are either inspired by or directly taken from features in functional languages. So perhaps it&#39;s time to move the C# idioms closer to the functional world&#39;s idioms?&lt;/p&gt; &#xA;&lt;p&gt;My goal with this library is very much to create a whole new community within the larger C# community. This community is not constrained by the dogma of the past or by the norms of C#. It understands that the OOP approach to programming has some problems and tries to address them head-on.&lt;/p&gt; &#xA;&lt;p&gt;And for those that say &#34;just use F#&#34; or &#34;just use Haskell&#34;, sure, go do that. But it&#39;s important to remember that C# has a lot going for it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Incredible investment into a state-of-the art compiler&lt;/li&gt; &#xA; &lt;li&gt;Incredible tooling (Visual Studio and Rider)&lt;/li&gt; &#xA; &lt;li&gt;A large ecosystem of open-source libraries&lt;/li&gt; &#xA; &lt;li&gt;A large community of developers already using it &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is also very important for companies that hire engineers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;It &lt;em&gt;is&lt;/em&gt; a functional programming language! It has first-class functions, lambdas, etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;And with this library it has a functional-first &lt;em&gt;Base Class Library&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;A note about naming&lt;/h3&gt; &#xA;&lt;p&gt;One of the areas that&#39;s likely to get seasoned C# heads worked up is my choice of naming style. The intent is to try and make something that &lt;em&gt;feels&lt;/em&gt; like a functional language rather than following rules of naming conventions (mostly set out by the BCL).&lt;/p&gt; &#xA;&lt;p&gt;There is, however, a naming guide that will keep you in good stead while reading through this documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type names are &lt;code&gt;PascalCase&lt;/code&gt; in the normal way&lt;/li&gt; &#xA; &lt;li&gt;The types all have constructor functions rather than public constructors that you instantiate with &lt;code&gt;new&lt;/code&gt;. They will always be &lt;code&gt;PascalCase&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;    Option&amp;lt;int&amp;gt; x = Some(123);&#xA;    Option&amp;lt;int&amp;gt; y = None;&#xA;    Seq&amp;lt;int&amp;gt; items = Seq(1,2,3,4,5);&#xA;    List&amp;lt;int&amp;gt; items = List(1,2,3,4,5);&#xA;    HashMap&amp;lt;int, string&amp;gt; dict = HashMap((1, &#34;Hello&#34;), (2, &#34;World&#34;));&#xA;    Map&amp;lt;int, string&amp;gt; dict = Map((1, &#34;Hello&#34;), (2, &#34;World&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any (non-type constructor) static function that can be used on its own by &lt;code&gt;using static LanguageExt.Prelude&lt;/code&gt; are &lt;code&gt;camelCase&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;    var x = map(opt, v =&amp;gt; v * 2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any extension methods, or anything &#34;fluent&#34; are &lt;code&gt;PascalCase&lt;/code&gt; in the normal way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;    var x = opt.Map(v =&amp;gt; v * 2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even if you disagree with this non-idiomatic approach, all of the &lt;code&gt;camelCase&lt;/code&gt; static functions have fluent variants, so you never actually have to see the non-standard stuff.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Effects/index.html&#34;&gt;Functional effects and IO&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;IO&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Effects/IO/index.html&#34;&gt;A synchronous and asynchronous side-effect: an IO monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Eff&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Effects/Eff/Eff%20no%20runtime/index.html&#34;&gt;A synchronous and asynchronous side-effect with error handling&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Eff&amp;lt;RT, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Effects/Eff/Eff%20with%20runtime/index.html&#34;&gt;Same as &lt;code&gt;Eff&amp;lt;A&amp;gt;&lt;/code&gt; but with an injectable runtime for dependency-injection: a unit testable IO monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pipes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Effects/Pipes/index.html&#34;&gt;A clean and powerful stream processing system that lets you build and connect reusable streaming components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;StreamT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Effects/StreamT/index.html&#34;&gt;less powerful (than Pipes), but easier to use streaming effects transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/index.html&#34;&gt;Atomic concurrency and collections&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Atom&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/Atom&#34;&gt;A lock-free atomically mutable reference for working with shared state&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ref&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/STM&#34;&gt;An atomic reference to be used in the transactional memory system&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AtomHashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/AtomHashMap&#34;&gt;An immutable &lt;code&gt;HashMap&lt;/code&gt; with a lock-free atomically mutable reference&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AtomSeq&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/AtomSeq&#34;&gt;An immutable &lt;code&gt;Seq&lt;/code&gt; with a lock-free atomically mutable reference&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;VectorClock&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/VectorClock&#34;&gt;Understand distributed causality&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;VersionVector&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/VersionVector&#34;&gt;A vector clock with some versioned data&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;VersionHashMap &amp;lt;ConflictV, K, V&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Concurrency/VersionHashMap&#34;&gt;Distrubuted atomic versioning of keys in a hash-map&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/index.html&#34;&gt;Immutable collections&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Arr&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Arr/index.html&#34;&gt;Immutable array&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Seq&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Seq/index.html&#34;&gt;Lazy immutable list, evaluate at-most-once&lt;/a&gt; - very, very fast!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Iterable&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Iterable/index.html&#34;&gt;Wrapper around &lt;code&gt;IEnumerable&lt;/code&gt; with support for traits&lt;/a&gt; - enables the higher-kinded traits to work with enumerables.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Lst&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/List/index.html&#34;&gt;Immutable list&lt;/a&gt; - use &lt;code&gt;Seq&lt;/code&gt; over &lt;code&gt;Lst&lt;/code&gt; unless you need &lt;code&gt;InsertAt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Map&amp;lt;K, V&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Map/index.html&#34;&gt;Immutable map&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Map&amp;lt;OrdK, K, V&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Map/index.html&#34;&gt;Immutable map with Ord constraint on &lt;code&gt;K&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/HashMap/index.html&#34;&gt;Immutable hash-map&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HashMap&amp;lt;EqK, K, V&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/HashMap/index.html&#34;&gt;Immutable hash-map with Eq constraint on &lt;code&gt;K&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Set&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Set/index.html&#34;&gt;Immutable set&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Set&amp;lt;OrdA, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Set/index.html&#34;&gt;Immutable set with Ord constraint on &lt;code&gt;A&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HashSet&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/HashSet/index.html&#34;&gt;Immutable hash-set&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;HashSet&amp;lt;EqA, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/HashSet/index.html&#34;&gt;Immutable hash-set with Eq constraint on &lt;code&gt;A&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Que&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Queue/index.html&#34;&gt;Immutable queue&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stck&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Immutable%20Collections/Stack/index.html&#34;&gt;Immutable stack&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/index.html&#34;&gt;Optional and alternative value monads&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Option&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/Option/index.html&#34;&gt;Option monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;OptionT&amp;lt;M, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/OptionT/index.html&#34;&gt;Option monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Either&amp;lt;L,R&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/Either/index.html&#34;&gt;Right/Left choice monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;EitherT&amp;lt;L, M, R&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/EitherT/index.html&#34;&gt;Right/Left choice monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Fin&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/Fin/index.html&#34;&gt;&lt;code&gt;Error&lt;/code&gt; handling monad, like &lt;code&gt;Either&amp;lt;Error, A&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FinT&amp;lt;M, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/FinT/index.html&#34;&gt;&lt;code&gt;Error&lt;/code&gt; handling monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Try&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/Try/index.html&#34;&gt;Exception handling monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TryT&amp;lt;M, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/TryT/index.html&#34;&gt;Exception handling monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Validation&amp;lt;FAIL ,SUCCESS&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/Validation/index.html&#34;&gt;Validation applicative and monad&lt;/a&gt; for collecting multiple errors before aborting an operation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ValidationT&amp;lt;FAIL, M, SUCCESS&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/Alternative%20Monads/ValidationT/index.html&#34;&gt;Validation applicative and monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/index.html&#34;&gt;State managing monads&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Reader&amp;lt;E, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/Reader/Reader/index.html&#34;&gt;Reader monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ReaderT&amp;lt;E, M, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/Reader/ReaderT/index.html&#34;&gt;Reader monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Writer&amp;lt;W, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/Writer/Writer/index.html&#34;&gt;Writer monad that logs to a &lt;code&gt;W&lt;/code&gt; constrained to be a Monoid&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;WriterT&amp;lt;W, M, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/Writer/WriterT/index.html&#34;&gt;Writer monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;State&amp;lt;S, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/State/State/index.html&#34;&gt;State monad&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StateT&amp;lt;S, M, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Monads/State%20and%20Environment%20Monads/State/StateT/index.html&#34;&gt;State monad-transformer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Parsec/index.html&#34;&gt;Parser combinators&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Parsec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Parser&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Parsec/index.html&#34;&gt;String parser monad and full parser combinators library&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Parsec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Parser&amp;lt;I, O&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Parsec/index.html&#34;&gt;Parser monad that can work with any input stream type&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Pretty/index.html&#34;&gt;Pretty&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Doc&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Produce nicely formatted text with smart layouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/DataTypes/Patch/index.html&#34;&gt;Differencing&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Patch&amp;lt;EqA, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Uses patch-theory to efficiently calculate the difference (&lt;code&gt;Patch.diff(list1, list2)&lt;/code&gt;) between two collections of &lt;code&gt;A&lt;/code&gt; and build a patch which can be applied (&lt;code&gt;Patch.apply(patch, list)&lt;/code&gt;) to one to make the other (think git diff).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/index.html&#34;&gt;Traits&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The traits are major feature of &lt;code&gt;v5&lt;/code&gt;+ language-ext that makes generic programming with higher-kinds a reality. Check out Paul&#39;s &lt;a href=&#34;https://paullouth.com/higher-kinds-in-c-with-language-ext/&#34;&gt;series on Higher Kinds&lt;/a&gt; to get a deeper insight.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Applicative&amp;lt;F&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Applicative/index.html&#34;&gt;Applicative functor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Eq&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Eq/index.html&#34;&gt;Ad-hoc equality trait&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Fallible&amp;lt;F&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Fallible/index.html&#34;&gt;Trait that describes types that can fail&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Foldable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Foldable/index.html&#34;&gt;Aggregation over a structure&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Functor&amp;lt;F&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Functor/index.html&#34;&gt;Functor &lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Has&amp;lt;M, TRAIT&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Has/index.html&#34;&gt;Used in runtimes to enable DI-like capabilities&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Hashable&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Hashable/index.html&#34;&gt;Ad-hoc has-a-hash-code trait&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Local&amp;lt;M, E&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Local/index.html&#34;&gt;Creates a local environment to run a computation &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Monad&amp;lt;M&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Monads/Monad/index.html&#34;&gt;Monad trait&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;MonadT&amp;lt;M, N&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Monads/MonadT/index.html&#34;&gt;Monad transformer trait&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Monoid&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Monoid/index.html&#34;&gt;A monoid is a type with an identity &lt;code&gt;Empty&lt;/code&gt; and an associative binary operation &lt;code&gt;+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;MonoidK&amp;lt;M&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/MonoidK/index.html&#34;&gt;Equivalent of monoids for working on higher-kinded types&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Mutates&amp;lt;M, OUTER_STATE, INNER_STATE&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Mutates/index.html&#34;&gt;Used in runtimes to enable stateful operations&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ord&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Ord/index.html&#34;&gt;Ad-hoc ordering / comparisons&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Range&amp;lt;SELF, NumOrdA, A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Range/index.html&#34;&gt;Abstraction of a range of values&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Readable&amp;lt;M, Env&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Readable/index.html&#34;&gt;Generalised Reader monad abstraction&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Semigroup&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Semigroup/index.html&#34;&gt;Provides an associative binary operation &lt;code&gt;+&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SemigroupK&amp;lt;M&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/SemigroupK/index.html&#34;&gt;Equivalent of semigroups for working with higher-kinded types&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Stateful&amp;lt;M, S&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Stateful/index.html&#34;&gt;Generalised State monad abstraction&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Traversable&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Traversable/index.html&#34;&gt;Traversable structures support element-wise sequencing of Applicative effects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Writable&amp;lt;M, W&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Writable/index.html&#34;&gt;Generalised Writer monad abstraction&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://louthy.github.io/language-ext/LanguageExt.Core/Traits/Domain/index.html&#34;&gt;Value traits&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These work a little like type-aliasing but they impart semantic meaning and some common operators for the underlying value.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DomainType&amp;lt;SELF, REPR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provides a mapping from &lt;code&gt;SELF&lt;/code&gt; to an underlying representation: &lt;code&gt;REPR&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Identifier &amp;lt;SELF&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Identifiers (like IDs in databases: &lt;code&gt;PersonId&lt;/code&gt; for example), they are equivalent to &lt;code&gt;DomaintType&lt;/code&gt; with equality.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;VectorSpace&amp;lt;SELF, SCALAR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scalable values; can add and subtract self, but can only multiply and divide by a scalar. Can also negate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Amount &amp;lt;SELF, SCALAR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quantities, such as the amount of money in USD on a bank account or a file size in bytes. Derives &lt;code&gt;VectorSpace&lt;/code&gt;, &lt;code&gt;IdentifierLike&lt;/code&gt;, &lt;code&gt;DomainType&lt;/code&gt;, and is orderable (comparable).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Core&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Locus &amp;lt;SELF, DISTANCE, SCALAR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Works with space-like structures. Spaces have absolute and relative distances. Has an origin/zero point and derives &lt;code&gt;DomainType&lt;/code&gt;, &lt;code&gt;IdentifierLike&lt;/code&gt;, &lt;code&gt;AmountLike&lt;/code&gt; and &lt;code&gt;VectorSpace&lt;/code&gt;. &lt;code&gt;DISTANCE&lt;/code&gt; must also be an &lt;code&gt;AmountLike&amp;lt;SELF, REPR, SCALAR&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;These features are still a little in-flux as of 17th Oct 2024 - they may evolve, be renamed, or removed - but I like the idea!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Further&lt;/h2&gt; &#xA;&lt;p&gt;For some non-reference like documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Paul&#39;s blog: &lt;a href=&#34;https://paullouth.com/&#34;&gt;Notes from a Small Functional Island&lt;/a&gt; does deep dives into the philosophy of FP and the inner-workings of language-ext.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/louthy/language-ext/wiki&#34;&gt;The wiki&lt;/a&gt; has some additional documentation, some might be a little out of date since the big &lt;code&gt;v5&lt;/code&gt; refactor, but should give some good insights.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing &amp;amp; Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to get involved with this project, please first read the &lt;a href=&#34;https://github.com/louthy/language-ext/raw/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; and the &lt;a href=&#34;https://github.com/louthy/language-ext/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>