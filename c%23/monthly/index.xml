<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:44:19Z</updated>
  <subtitle>Monthly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>1Remote/1Remote</title>
    <updated>2024-05-01T01:44:19Z</updated>
    <id>tag:github.com,2024-05-01:/1Remote/1Remote</id>
    <link href="https://github.com/1Remote/1Remote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One Remote Access Manager to Rule Them All&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;1Remote&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/1Remote/1Remote/wiki/Intro%E2%80%90ZhCn&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/1Remote/1Remote/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/1Remote/1Remote?color=Green&amp;amp;include_prereleases&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-1remote-1remote-main&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/32de66ab-1ba5-4eb3-b131-23982f20a376&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/1Remote/1Remote/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/1Remote/1Remote&#34; alt=&#34;issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/1Remote/1Remote/raw/dev/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/1Remote/1Remote?color=blue&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fvshawn%2Fpremotem&amp;amp;count_bg=%23E83D61&amp;amp;title_bg=%23102B3E&amp;amp;icon=github.svg&amp;amp;icon_color=%23CED8E1&amp;amp;title=&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/1Remote/1Remote/actions/workflows/build-on-dev-push.yml/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;1Remote is a modern personal remote session manager and launcher. It is a single place to manage all your remote sessions supporting number of different protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports RDP, SSH, VNC, Telnet, (S)FTP, &lt;a href=&#34;https://1remote.org/usage/protocol/especial/remoteapp/&#34;&gt;RemoteApp&lt;/a&gt;, &lt;a href=&#34;https://1remote.org/usage/protocol/especial/app/&#34;&gt;NoMachine and other app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Quick and convenient remote session launcher (Alt + M)&lt;/li&gt; &#xA; &lt;li&gt;Multi-screen and HiDPI RDP connection (Test on *&lt;em&gt;Win10 + 4k monitor &lt;em&gt;2&lt;/em&gt;&lt;/em&gt; RDP TO &lt;strong&gt;Win2016&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Detailed connection configuration: tags, icons, colors, connection scripts etc.&lt;/li&gt; &#xA; &lt;li&gt;Multiple languages, themes and tabbed interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://1remote.org/usage/overview/#importing-from-mremoteng&#34;&gt;Import connections from mRemoteNG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable runners, in SFTP \ FTP \ VNC \ etc. protocols, you can replace the internal runner with your favourite tools.&lt;a href=&#34;https://1remote.org/usage/protocol/runner/&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Portable - just unpack and run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚩Installation&lt;/h2&gt; &#xA;&lt;p&gt;Latest Version: 0.7.2.8&lt;/p&gt; &#xA;&lt;h3&gt;🗺&lt;a href=&#34;https://1remote.org/usage/quick-start/&#34;&gt;Quick start&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;🔻&lt;a href=&#34;https://1remote.org/download/&#34;&gt;Download&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;👓Overview&lt;/h2&gt; &#xA;&lt;img src=&#34;https://1remote.org/img/home_override/hero1.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://1remote.org/img/home_override/protocols.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://1remote.org/img/home_override/hero2.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ↑ Launcher(Alt + M) open RDP connection &amp;amp; resizing &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/1Remote/PRemoteM/Doc/DocPic/multi-screen.jpg&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ↑ RDP with Multi-monitors &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/1Remote/PRemoteM/Doc/DocPic/RemoteApp/demo.jpg&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ↑ RemoteApp via RDP &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/1Remote/PRemoteM/Doc/DocPic/Runner/vnc_runners.jpg&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; ↑ Customizable runners &lt;/p&gt; &#xA;&lt;h2&gt;Make 1Remote Stronger&lt;/h2&gt; &#xA;&lt;p&gt;If you like &lt;strong&gt;1Remote&lt;/strong&gt;, help us make it stronger by doing any of the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simply star this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://1remote.org/usage/misc/help-translation/&#34;&gt;Help translation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ko-fi.com/VShawn&#34;&gt;Buy a coffee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/1Remote/1Remote/main/DEVELOP.md&#34;&gt;Join DEV&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Special thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.jetbrains.com/resharper/&#34;&gt;&lt;img src=&#34;http://www.tom-englert.de/Images/icon_ReSharper.png&#34; alt=&#34;ReSharper&#34; width=&#34;64&#34; height=&#34;64&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/csharplang</title>
    <updated>2024-05-01T01:44:19Z</updated>
    <id>tag:github.com,2024-05-01:/dotnet/csharplang</id>
    <link href="https://github.com/dotnet/csharplang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official repo for the design of the C# programming language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C# Language Design&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/dotnet/csharplang?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/dotnet/csharplang.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/dotnet/csharplang&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aka.ms/dotnet-discord-csharp&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/143867839282020352/widget.png&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to the official repo for C# language design. This is where new C# language features are developed, adopted and specified.&lt;/p&gt; &#xA;&lt;p&gt;C# is designed by the C# Language Design Team (LDT) in close coordination with the &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; project, which implements the language.&lt;/p&gt; &#xA;&lt;p&gt;You can find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active C# language feature proposals in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/proposals&#34;&gt;proposals folder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Notes from C# language design meetings in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/meetings&#34;&gt;meetings folder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Full C# 6 language specification (draft) in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/spec&#34;&gt;spec folder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Summary of the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/Language-Version-History.md&#34;&gt;language version history here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you discover bugs or deficiencies in the above, please leave an issue to raise them, or even better: a pull request to fix them.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;em&gt;new feature proposals&lt;/em&gt;, however, please raise them for &lt;a href=&#34;https://github.com/dotnet/csharplang/labels/Discussion&#34;&gt;discussion&lt;/a&gt;, and &lt;em&gt;only&lt;/em&gt; submit a proposal as a pull request if invited to do so by a member of the Language Design Team (a &#34;champion&#34;).&lt;/p&gt; &#xA;&lt;h2&gt;Discussions&lt;/h2&gt; &#xA;&lt;p&gt;Debate pertaining to language features takes place in the form of &lt;a href=&#34;https://github.com/dotnet/csharplang/discussions&#34;&gt;Discussions&lt;/a&gt; in this repo.&lt;/p&gt; &#xA;&lt;p&gt;If you want to suggest a feature, discuss current design notes or proposals, etc., please &lt;a href=&#34;https://github.com/dotnet/csharplang/discussions/new&#34;&gt;open a new Discussion topic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Discussions that are short and stay on topic are much more likely to be read. If you leave comment number fifty, chances are that only a few people will read it. To make discussions easier to navigate and benefit from, please observe a few rules of thumb:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discussion should be relevant to C# language design. If they are not, they will be summarily closed.&lt;/li&gt; &#xA; &lt;li&gt;Choose a descriptive topic that clearly communicates the scope of discussion.&lt;/li&gt; &#xA; &lt;li&gt;Stick to the topic of the discussion. If a comment is tangential, or goes into detail on a subtopic, start a new discussion and link back.&lt;/li&gt; &#xA; &lt;li&gt;Is your comment useful for others to read, or can it be adequately expressed with an emoji reaction to an existing comment?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Language proposals which prevent specific syntax from occurring can be achieved with a &lt;a href=&#34;https://docs.microsoft.com/visualstudio/extensibility/getting-started-with-roslyn-analyzers&#34;&gt;Roslyn analyzer&lt;/a&gt;. Proposals that only make existing syntax optionally illegal will be rejected by the language design committee to prevent increased language complexity.&lt;/p&gt; &#xA;&lt;h2&gt;Proposals&lt;/h2&gt; &#xA;&lt;p&gt;Once you have a fully fleshed out proposal describing a new language feature in syntactic and semantic detail, please &lt;a href=&#34;https://github.com/dotnet/csharplang/issues/new/choose&#34;&gt;open an issue for it&lt;/a&gt;, and it will be labeled as a &lt;a href=&#34;https://github.com/dotnet/csharplang/issues?q=is%3Aopen+is%3Aissue+label%3AProposal&#34;&gt;Proposal&lt;/a&gt;. The comment thread on the issue can be used to hash out or briefly discuss details of the proposal, as well as pros and cons of adopting it into C#. If an issue does not meet the bar of being a full proposal, we may move it to a discussion, so that it can be &#34;baked&#34; further. Specific open issues or more expansive discussion with a proposal will often warrant opening a side discussion rather than cluttering the comment section on the issue.&lt;/p&gt; &#xA;&lt;p&gt;When a member of the C# LDM finds that a proposal merits discussion, they can &lt;a href=&#34;https://github.com/dotnet/csharplang/issues?q=is%3Aopen+is%3Aissue+label%3A%22Proposal+champion%22&#34;&gt;Champion&lt;/a&gt; it, which means that they will bring it to the C# Language Design Meeting. If the LDM decides to work on adopting the feature, the proposer, the champion and others can collaborate on adding it as a document to the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/proposals&#34;&gt;Proposals&lt;/a&gt; folder, where its evolution can be tracked over time.&lt;/p&gt; &#xA;&lt;h2&gt;Design Process&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/proposals&#34;&gt;Proposals&lt;/a&gt; evolve as a result of decisions in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/meetings&#34;&gt;Language Design Meetings&lt;/a&gt;, which are informed by &lt;a href=&#34;https://github.com/dotnet/csharplang/discussions&#34;&gt;discussions&lt;/a&gt;, experiments, and offline design work.&lt;/p&gt; &#xA;&lt;p&gt;In many cases it will be necessary to implement and share a prototype of a feature in order to land on the right design, and ultimately decide whether to adopt the feature. Prototypes help discover both implementation and usability issues of a feature. A prototype should be implemented in a fork of the &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn repo&lt;/a&gt; and meet the following bar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parsing (if applicable) should be resilient to experimentation: typing should not cause crashes.&lt;/li&gt; &#xA; &lt;li&gt;Include minimal tests demonstrating the feature at work end-to-end.&lt;/li&gt; &#xA; &lt;li&gt;Include minimal IDE support (keyword coloring, formatting, completion).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once approved, a feature should be fully implemented in &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt;, and fully specified in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/spec&#34;&gt;language specification&lt;/a&gt;, whereupon the proposal is moved into the appropriate folder for a completed feature, e.g. &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/proposals/csharp-7.1&#34;&gt;C# 7.1 proposals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: An active proposal is under active consideration for inclusion into a future version of the C# programming language but is not in any way guaranteed to ultimately be included in the next or any version of the language. A proposal may be postponed or rejected at any time during any phase of the above process based on feedback from the design team, community, code reviewers, or testing.&lt;/p&gt; &#xA;&lt;h3&gt;Milestones&lt;/h3&gt; &#xA;&lt;p&gt;We have a few different milestones for issues on the repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/milestone/19&#34;&gt;Working Set&lt;/a&gt; is the set of championed proposals that are currently being actively worked on. Not everything in this milestone will make the next version of C#, but it will get design time during the upcoming release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/milestone/10&#34;&gt;Backlog&lt;/a&gt; is the set of championed proposals that have been triaged, but are not being actively worked on. While discussion and ideas from the community are welcomed on these proposals, the cost of the design work and implementation review on these features are too high for us to consider community implementation until we are ready for it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/milestone/14&#34;&gt;Any Time&lt;/a&gt; is the set of championed proposals that have been triaged, but are not being actively worked on and are open to community implementation. Issues in this can be in one of 2 states: needs approved specification, and needs implementation. Those that need a specification still need to be presented during LDM for approval of the spec, but we are willing to take the time to do so at our earliest convenience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/csharplang/milestone/13&#34;&gt;Likely Never&lt;/a&gt; is the set of proposals that the LDM has rejected from the language. Without strong need or community feedback, these proposals will not be considered in the future.&lt;/li&gt; &#xA; &lt;li&gt;Numbered milestones are the set of features that have been implemented for that particular language version. For closed milestones, these are the set of things that shipped with that release. For open milestones, features can be potentially pulled later if we discover compatibility or other issues as we near release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Design Meetings&lt;/h2&gt; &#xA;&lt;p&gt;Language Design Meetings (LDMs) are held by the LDT and occasional invited guests, and are documented in Design Meeting Notes in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/meetings&#34;&gt;meetings&lt;/a&gt; folder, organized in folders by year. The lifetime of a design meeting note is described in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/meetings/README.md&#34;&gt;meetings/README.md&lt;/a&gt;. LDMs are where decisions about future C# versions are made, including which proposals to work on, how to evolve the proposals, and whether and when to adopt them.&lt;/p&gt; &#xA;&lt;h2&gt;Language Specification&lt;/h2&gt; &#xA;&lt;p&gt;It is our plan to move the C# Language Specification into Markdown, and draft it in the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/csharplang/main/spec&#34;&gt;spec&lt;/a&gt; folder. The spec drafts will eventually be standardized and published by ECMA. The folder currently contains an unofficial Markdown version of the C# 6.0 specification for convenience.&lt;/p&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;The reference implementation of the C# language can be found in the &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn repository&lt;/a&gt;. This repository also tracks the &lt;a href=&#34;https://github.com/dotnet/roslyn/raw/main/docs/Language%20Feature%20Status.md&#34;&gt;implementation status for language features&lt;/a&gt;. Until recently, that was also where language design artifacts were tracked. Please allow a little time as we move over active proposals.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>glzr-io/glazewm</title>
    <updated>2024-05-01T01:44:19Z</updated>
    <id>tag:github.com,2024-05-01:/glzr-io/glazewm</id>
    <link href="https://github.com/glzr-io/glazewm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GlazeWM · &lt;a href=&#34;https://github.com/glzr-io/glazewm/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/glzr-io/GlazeWM/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/glzr-io/GlazeWM&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ud6z3qjRvM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA&#34; alt=&#34;Discord invite&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt; &#xA;&lt;p&gt;Why use a tiling window manager? A tiling WM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple YAML configuration&lt;/li&gt; &#xA; &lt;li&gt;Multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;Customizable bar window&lt;/li&gt; &#xA; &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; &#xA; &lt;li&gt;Easy one-click installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/glzr-io/glazewm/assets/34844898/58167ca8-3064-4c5f-a82e-51bd3cd8830b&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Showcase GIF by &lt;a href=&#34;https://github.com/HolbyFPV&#34;&gt;@HolbyFPV&lt;/a&gt;&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, GlazeWM adds functionality to the built-in window manager and uses the Windows API via P/Invoke to position windows.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#available-commands&#34;&gt;Available Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#known-issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#direct-download&#34;&gt;Direct download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#winget&#34;&gt;Winget&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#scoop&#34;&gt;Scoop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#build-from-source&#34;&gt;Build from source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Direct download&lt;/h2&gt; &#xA;&lt;p&gt;The latest runnable executable can be downloaded via &lt;a href=&#34;https://github.com/glzr-io/GlazeWM/releases&#34;&gt;releases&lt;/a&gt;. No installation necessary, simply run the &lt;code&gt;.exe&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Winget&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be downloaded via Winget package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;winget install GlazeWM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Winget installs portable packages in &lt;code&gt;%LOCALAPPDATA%\Microsoft\Winget\Packages\&lt;/code&gt; by default. This can be overrided with the flag &lt;code&gt;--location \path\to\folder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scoop&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be download via Scoop in the &lt;a href=&#34;https://github.com/ScoopInstaller/Extras&#34;&gt;Extras&lt;/a&gt; bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras # Ensure bucket is added first&#xA;scoop install glazewm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, to build from source, use the following .NET CLI command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet publish ./GlazeWM.App/GlazeWM.App.csproj --configuration=Release --runtime=win-x64 --output=. --self-contained -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build for other runtimes than Windows x64, see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#windows-rids&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve handling of fullscreen and maximized windows.&lt;/li&gt; &#xA; &lt;li&gt;More bar components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/lars-berger/projects/2/views/1&#34;&gt;📋 Full roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#general&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#focus-window-border&#34;&gt;Focus Window Border&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#gap-configuration&#34;&gt;Gap Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#workspaces&#34;&gt;Workspaces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-configuration&#34;&gt;Bar Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The configuration file for GlazeWM can be found at &lt;code&gt;C:\Users\&amp;lt;YOUR_USER&amp;gt;\.glaze-wm\config.yaml&lt;/code&gt;. If this file doesn&#39;t exist, the &lt;a href=&#34;https://github.com/glzr-io/GlazeWM/raw/master/GlazeWM.App/Resources/sample-config.yaml&#34;&gt;default config&lt;/a&gt; can optionally be generated on launch.&lt;/p&gt; &#xA;&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config=&#34;...&#34;&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./GlazeWM.exe --config=&#34;C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;general:&#xA;  # Whether to automatically focus windows underneath the cursor.&#xA;  focus_follows_cursor: false&#xA;&#xA;  # Whether to jump the cursor between windows focused by the WM.&#xA;  cursor_follows_focus: false&#xA;&#xA;  # Whether to switch back and forth between the previously focused workspace&#xA;  # when focusing the current workspace.&#xA;  toggle_workspace_on_refocus: true&#xA;&#xA;  # Whether to show floating windows as always on top.&#xA;  show_floating_on_top: false&#xA;&#xA;  # Amount to move floating windows by (eg. when using `alt+&amp;lt;hjkl&amp;gt;` on a floating window)&#xA;  floating_window_move_amount: &#34;5%&#34;&#xA;&#xA;  # Whether to globally enable/disable window transition animations (on minimize, close,&#xA;  # etc). Set to &#39;unchanged&#39; to make no setting changes.&#xA;  window_animations: &#34;unchanged&#34;&#xA;&#xA;  # Whether to center new floating windows (default is true)&#xA;  center_new_floating_windows: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;The available keybindings can be customized via the &lt;code&gt;keybindings&lt;/code&gt; property in the config file. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; &#xA;&lt;p&gt;A full list of keys that can be used for keybindings can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=windowsdesktop-5.0#fields&#34;&gt;here&lt;/a&gt;. Numbers can be used in keybindings with and without a &lt;code&gt;D&lt;/code&gt; prefix (eg. either &lt;code&gt;D1&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; works).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to use the alt key for keybindings. The windows key is unfortunately a pain to remap, since certain keybindings (eg. &lt;code&gt;LWin+L&lt;/code&gt;) are reserved by the OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;keybindings:&#xA;  # Command to run.&#xA;  - command: &#34;focus workspace 1&#34;&#xA;&#xA;    # Key combination to trigger the keybinding.&#xA;    binding: &#34;Alt+1&#34;&#xA;&#xA;  # To run multiple commands in a sequence, use the `commands` property (eg. to move a window to a&#xA;  # workspace + focus workspace).&#xA;  - commands: [&#34;move to workspace 1&#34;, &#34;focus workspace 1&#34;]&#xA;    binding: &#34;Alt+Shift+1&#34;&#xA;&#xA;  - command: &#34;focus left&#34;&#xA;    # To have multiple key combinations that can trigger a command, use the `bindings` property.&#xA;    bindings: [&#34;Alt+H&#34;, &#34;Alt+Left&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635035-152ed4a6-e5a1-4878-8863-f62391e7d703.png&#34; alt=&#34;Alt key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635089-d5ed152b-1527-43e8-a69c-4e154b97a207.png&#34; alt=&#34;Alt+shift key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apart from the &lt;code&gt;Alt+Shift+E&lt;/code&gt; binding for exiting GlazeWM, it&#39;s also possibly to safely exit via the system tray icon.&lt;/p&gt; &#xA;&lt;h2&gt;Focus Window Border configuration&lt;/h2&gt; &#xA;&lt;p&gt;The focused and unfocused window border color can be configured via the &lt;code&gt;focus_borders&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires minimum of Windows 11 Build 22000.51.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;focus_borders:&#xA;  active:&#xA;    enabled: true&#xA;    color: &#34;#ff0000&#34;&#xA;  inactive:&#xA;    enabled: false&#xA;    color: &#34;#0000ff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gap configuration&lt;/h2&gt; &#xA;&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gaps:&#xA;  # Gap between adjacent windows.&#xA;  inner_gap: &#34;20px&#34;&#xA;&#xA;  # Gap between windows and the screen edge. See &#34;Shorthand properties&#34; for more info.&#xA;  outer_gap: &#34;20px 0 20px 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workspaces configuration&lt;/h2&gt; &#xA;&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;workspaces:&#xA;  # Uniquely identifies the workspace and is used as the label for the workspace in the bar if&#xA;  # `display_name` is not provided.&#xA;  - name: &#34;1&#34;&#xA;&#xA;    # Optional override for the workspace label in the bar. Does not need to be unique.&#xA;    display_name: &#34;Work&#34;&#xA;&#xA;    # Optionally force the workspace on a specific monitor if it exists. Use the monitor&#39;s number&#xA;    # as shown in the Windows display settings (eg. 1, 2, 3...).&#xA;    bind_to_monitor: 1&#xA;&#xA;    # Optionally prevent workspace from being deactivated when empty.&#xA;    keep_alive: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bar configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-configuration&#34;&gt;Bar Component configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-components&#34;&gt;Bar Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The appearance of the bar can be changed via the &lt;code&gt;bar&lt;/code&gt; property in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  # The option to enable/disable the bar.&#xA;  enabled: true&#xA;&#xA;  # Height of the bar in pixels.&#xA;  height: &#34;30px&#34;&#xA;&#xA;  # The position of the bar on the screen. Can be either &#34;top&#34; or &#34;bottom&#34;.&#xA;  position: &#34;top&#34;&#xA;&#xA;  # Whether to show the bar above other windows&#xA;  always_on_top: false&#xA;&#xA;  # Opacity value between 0.0 and 1.0.&#xA;  opacity: 1.0&#xA;&#xA;  # Background color of the bar.&#xA;  background: &#34;#101010&#34;&#xA;&#xA;  # Default font color. Can be overriden by setting `foreground` in a component&#39;s config.&#xA;  foreground: &#34;white&#34;&#xA;&#xA;  # Default font family. Can be overriden by setting `font_family` in a component&#39;s config.&#xA;  font_family: &#34;Segoe UI&#34;&#xA;&#xA;  # Default font size. Can be overriden by setting `font_size` in a component&#39;s config.&#xA;  font_size: &#34;13px&#34;&#xA;&#xA;  # Default font weight. Typically ranges from 100 to 950, where a higher value is thicker. Can&#xA;  # be overriden by setting `font_weight` in a component&#39;s config.&#xA;  font_weight: &#34;400&#34;&#xA;&#xA;  # Horizontal and vertical borders in pixels. Borders are inside the dimensions of the bar and do&#xA;  # not affect bar height. See &#34;Shorthand properties&#34; for more info.&#xA;  border_width: &#34;0&#34;&#xA;&#xA;  # Color of the border.&#xA;  border_color: &#34;blue&#34;&#xA;&#xA;  # Horizontal and vertical spacing between components within the bar and the edges of the bar. See&#xA;  # &#34;Shorthand properties&#34; for more info.&#xA;  padding: &#34;4px 6px 4px 6px&#34;&#xA;&#xA;  # Separator between components within the bar. `label` is used for each section&#xA;  # of the bar unless `label_{left,center,right}` is explictly set, in which case&#xA;  # they are preferred over default.&#xA;  component_separator:&#xA;    label: &#34; | &#34;&#xA;&#xA;  # Components to display on the left side of the bar.&#xA;  components_left:&#xA;    - type: &#34;workspaces&#34;&#xA;&#xA;  # Components to display on the right side of the bar.&#xA;  components_right:&#xA;    - type: &#34;clock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component configuration&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of bar components can also be customized. The following properties can change the styling of a component, regardless of the component type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Type of component to display. See &#34;Bar Components&#34; for all available components.&#xA;type: &amp;lt;COMPONENT_TYPE&amp;gt;&#xA;&#xA;# Horizontal and vertical margins. See &#34;Shorthand properties&#34; for more info.&#xA;margin: &#34;0 10px 0 0&#34;&#xA;&#xA;# Horizontal and vertical padding. See &#34;Shorthand properties&#34; for more info.&#xA;padding: &#34;0&#34;&#xA;&#xA;# Opacity value between 0.0 and 1.0.&#xA;opacity: 1.0&#xA;&#xA;# Background color of the component.&#xA;background: &#34;#101010&#34;&#xA;&#xA;# Font color used within the component.&#xA;foreground: &#34;white&#34;&#xA;&#xA;# Font family used within the component.&#xA;font_family: &#34;Segoe UI&#34;&#xA;&#xA;# Font size used within the component.&#xA;font_size: &#34;13px&#34;&#xA;&#xA;# Font weight used within the component. Typically ranges from 100 to 950, where a higher value is&#xA;# thicker.&#xA;font_weight: &#34;400&#34;&#xA;&#xA;# Horizontal and vertical borders in pixels. Borders are inside the dimensions of the component.&#xA;# See &#34;Shorthand properties&#34; for more info.&#xA;border_width: &#34;0&#34;&#xA;&#xA;# Color of the border.&#xA;border_color: &#34;blue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shorthand properties&lt;/h3&gt; &#xA;&lt;p&gt;Properties related to the edges of the bar or a component, like &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, and &lt;code&gt;border_width&lt;/code&gt;, use a 1-to-4 value syntax. This is the same convention that&#39;s common in CSS.&lt;/p&gt; &#xA;&lt;p&gt;Using the example of padding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When one value is specified, it applies the same padding to all four sides.&lt;/li&gt; &#xA; &lt;li&gt;When two values are specified, the first padding applies to the top and bottom, the second to the left and right.&lt;/li&gt; &#xA; &lt;li&gt;When three values are specified, the first padding applies to the top, the second to the right and left, the third to the bottom.&lt;/li&gt; &#xA; &lt;li&gt;When four values are specified, the paddings apply to the top, right, bottom, and left in that order (clockwise).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bar components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-clock&#34;&gt;Clock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-battery&#34;&gt;Battery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-cpu-usage&#34;&gt;CPU Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-gpu-usage&#34;&gt;GPU Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-memory-usage&#34;&gt;Memory Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-network&#34;&gt;Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-volume&#34;&gt;Volume&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-text-file&#34;&gt;Text File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-weather&#34;&gt;Weather&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-image&#34;&gt;Image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-system-tray&#34;&gt;System Tray&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#bar-component-music&#34;&gt;Music&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bar component: Clock&lt;/h4&gt; &#xA;&lt;p&gt;The text shown in the clock component is specified via &lt;code&gt;time_formatting&lt;/code&gt;. The supported time format specifiers are defined by &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings&#34;&gt;.NET&#39;s time/date string formatting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally supported format specifiers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Specifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;w&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year: 1..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 21.12.2022 (51)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;ww&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year 01..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 02.01.2022 (02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;clock&#34;&#xA;  time_formatting: &#34;hh:mm tt  ddd MMM d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Battery&lt;/h4&gt; &#xA;&lt;p&gt;The battery component displays the system&#39;s battery level in percent. There are three labels available that can be customized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label_draining&lt;/code&gt;: used when the system is draining battery power(i.e. not charging).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_power_saver&lt;/code&gt;: used when the system is on power saving mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_charging&lt;/code&gt;: used when the system is connected to power. &lt;code&gt;{battery_level}&lt;/code&gt; is a variable which is replaced by the actual battery level when the label is displayed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;battery&#34;&#xA;  label_draining: &#34;{battery_level}% remaining&#34;&#xA;  label_power_saver: &#34;{battery_level}% (power saver)&#34;&#xA;  label_charging: &#34;{battery_level}% (charging)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: CPU Usage&lt;/h4&gt; &#xA;&lt;p&gt;Displays the current CPU usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;cpu&#34;&#xA;  label: &#34;CPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: GPU Usage&lt;/h4&gt; &#xA;&lt;p&gt;This component has high CPU requirement (compared to others); due to no efficient way to pull data from Windows API. Avoid using low refresh intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;gpu&#34;&#xA;  label: &#34;GPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Memory Usage&lt;/h4&gt; &#xA;&lt;p&gt;Displays the current Memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;memory&#34;&#xA;  label: &#34;RAM: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Network&lt;/h4&gt; &#xA;&lt;p&gt;Displays the type and signal strength of the active network connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;network&#34;&#xA;  label_no_internet: &#34;NC&#34;&#xA;  label_ethernet: &#34;Eth&#34;&#xA;  label_wifi_strength_0: &#34;WiFi: 0%&#34;&#xA;  label_wifi_strength_25: &#34;WiFi: 25%&#34;&#xA;  label_wifi_strength_50: &#34;WiFi: 50%&#34;&#xA;  label_wifi_strength_75: &#34;WiFi: 75%&#34;&#xA;  label_wifi_strength_100: &#34;WiFi: 100%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Volume&lt;/h4&gt; &#xA;&lt;p&gt;Displays volume level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;volume&#34;&#xA;  label_low: &#34;🔊{volume_level}%&#34;&#xA;  label_medium: &#34;🔊{volume_level}%&#34;&#xA;  label_high: &#34;🔊{volume_level}%&#34;&#xA;  label_mute: &#34;🔊{volume_level}%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Text File&lt;/h4&gt; &#xA;&lt;p&gt;For displaying any content without a native integrated widget; updates in real time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;text file&#34;&#xA;  # Path to file.&#xA;  file_path: &#34;PATH_HERE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Weather&lt;/h4&gt; &#xA;&lt;p&gt;Uses Open-Meteo API, refreshes every hour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;weather&#34;&#xA;  latitude: 40.6892&#xA;  longitude: 74.0445&#xA;  label: &#34;{temperature_celsius}°C&#34;&#xA;  label_sun: &#34;☀️ {temperature_celsius}°C&#34;&#xA;  label_moon: &#34;🌙 {temperature_celsius}°C&#34;&#xA;  label_cloud_moon: &#34;🌙☁️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun: &#34;⛅ {temperature_celsius}°C&#34;&#xA;  label_cloud_moon_rain: &#34;🌙🌧️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun_rain: &#34;🌦️ {temperature_celsius}°C&#34;&#xA;  label_cloud_rain: &#34;🌧️ {temperature_celsius}°C&#34;&#xA;  label_snow_flake: &#34;❄️ {temperature_celsius}°C&#34;&#xA;  label_thunderstorm: &#34;⚡ {temperature_celsius}°C&#34;&#xA;  label_cloud: &#34;☁️ {temperature_celsius}°C&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Image&lt;/h4&gt; &#xA;&lt;p&gt;Supports &lt;code&gt;.png&lt;/code&gt; and &lt;code&gt;.jpg&lt;/code&gt; formats.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;image&#34;&#xA;  source: &#34;C:\\Folder\\AnotherFolder\\image.png&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: System Tray&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Alt+Click&lt;/code&gt; to pin and un-pin an icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;system tray&#34;&#xA;  label_expand_text: &#34;&amp;lt;&#34;&#xA;  label_collapse_text: &#34;&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bar component: Music&lt;/h4&gt; &#xA;&lt;p&gt;Displays currently playing music.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;music&#34;&#xA;  label_not_playing: &#34;&#34;&#xA;  label_paused: &#34;{song_title} - {artist_name}&#34;&#xA;  label_playing: &#34;{song_title} - {artist_name} ▶&#34;&#xA;  max_title_length: 20&#xA;  max_artist_length: 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mixing font properties within a label&lt;/h2&gt; &#xA;&lt;p&gt;Font family, font weight, font size, and foreground color can be changed within parts of a label. This means that icons and text fonts can be used together in a label. To customize a part of the label, wrap it in an &#xA; &lt;attr&gt;&#xA;   tag:&#xA; &lt;/attr&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  components_left:&#xA;    - type: &#34;cpu&#34;&#xA;      # Change font family (ie. ff) to Comic Sans for part of the label:&#xA;      label: &#34;&amp;lt;attr ff=&#39;Comic Sans&#39;&amp;gt;CPU:&amp;lt;/attr&amp;gt; {percent_usage}%&#34;&#xA;&#xA;    - type: &#34;battery&#34;&#xA;      # Show an icon by using an icon font:&#xA;      label_draining: &#34;&amp;lt;attr ff=&#39;Material Icons&#39;&amp;gt;&amp;lt;/attr&amp;gt; {battery_level}%&#34;&#xA;      # Multiple attributes can be changed at once:&#xA;      label_charging: &#34;{battery_level}% &amp;lt;attr ff=&#39;Arial&#39; fg=&#39;#228B22&#39; fw=&#39;400&#39; fs=&#39;13px&#39;&amp;gt;(charging)&amp;lt;/attr&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Icons in Bar Components&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s common to use icons as the &lt;code&gt;label&lt;/code&gt; in bar components by assigning a font family that contains glyphs. A popular option is &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Font&lt;/a&gt; which comes with a &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;cheat sheet&lt;/a&gt; for easily finding a desired glyph.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing New Bar Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/docs/contributing-new-components.md&#34;&gt;Guide Available Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Window rules&lt;/h2&gt; &#xA;&lt;p&gt;Commands can be run when a window is initially launched. This can be used to assign an app to a specific workspace or to always start an app in floating mode.&lt;/p&gt; &#xA;&lt;p&gt;Multiple matching criteria can be used together to target a window more precisely. Regex syntax can also be used by wrapping the pattern with &lt;code&gt;/&lt;/code&gt; (eg. &lt;code&gt;/notepad|chrome/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_rules:&#xA;  # Command to run. Use `commands` to specify an array of commands to run in sequence.&#xA;  - command: &#34;move to workspace 2&#34;&#xA;&#xA;    # Process name to match exactly.&#xA;    match_process_name: &#34;chrome&#34;&#xA;&#xA;    # Window title to match exactly.&#xA;    match_title: &#34;/.*/&#34;&#xA;&#xA;    # Class name to match exactly.&#xA;    match_class_name: &#34;Chrome_WidgetWin_1&#34;&#xA;&#xA;  # To prevent the WM from managing an app, use the &#34;ignore&#34; command.&#xA;  - command: &#34;ignore&#34;&#xA;    match_process_name: &#34;notepad&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;focus &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;prev | next | recent&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move to workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;resize &amp;lt;height | width&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;resize height 3%&lt;/code&gt; or &lt;code&gt;resize width 20px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;resize borders &lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#shorthand-properties&#34;&gt;&amp;lt;shorthand property&amp;gt;&lt;/a&gt; (eg. &lt;code&gt;resize borders 0px -7px -7px -7px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;floating | tiling | minimized | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;width | height&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;set height 30%&lt;/code&gt; or &lt;code&gt;set width 200px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;toggle &amp;lt;floating | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus mode toggle&lt;/li&gt; &#xA; &lt;li&gt;tiling direction &amp;lt;vertical | horizontal | toggle&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;exit wm&lt;/li&gt; &#xA; &lt;li&gt;reload config&lt;/li&gt; &#xA; &lt;li&gt;close&lt;/li&gt; &#xA; &lt;li&gt;exec &amp;lt;process name | path to executable&amp;gt; (eg. &lt;code&gt;exec chrome&lt;/code&gt; or &lt;code&gt;exec &#39;C:/Program Files/Google/Chrome/Application/chrome&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ignore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#blurry-buttons-in-bar-window&#34;&gt;Blurry buttons in bar window&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#binding-the-right-side-alt-key-rmenu-on-certain-keyboard-layouts&#34;&gt;Binding the right-side Alt key &lt;code&gt;RMenu&lt;/code&gt; on certain keyboard layouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glzr-io/glazewm/main/#how-to-remap-lwin&#34;&gt;How to remap &lt;code&gt;LWin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Blurry buttons in bar window&lt;/h2&gt; &#xA;&lt;p&gt;An app called &#34;Sonic Studio&#34;, which is installed by default on ASUS ROG machines can cause rendering issues with WPF apps. This can be resolved by disabling &lt;code&gt;NahimicService&lt;/code&gt; in Windows Services Manager.&lt;/p&gt; &#xA;&lt;h2&gt;Binding the right-side Alt key &lt;code&gt;RMenu&lt;/code&gt; on certain keyboard layouts&lt;/h2&gt; &#xA;&lt;p&gt;Most keyboard layouts treat the right-side &lt;kbd&gt;Alt&lt;/kbd&gt; key the same as the left, while others (eg. US International and German) treat it as &lt;kbd&gt;AltGr&lt;/kbd&gt; and generate both &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt; when it is pressed. For these keyboard layouts, keybindings with the &lt;kbd&gt;AltGr&lt;/kbd&gt; key need to specify both &lt;code&gt;RMenu&lt;/code&gt; and &lt;code&gt;Control&lt;/code&gt; (eg. &lt;code&gt;RMenu+Control+A&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;How to remap &lt;code&gt;LWin&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Run the following autohotkey v1 script as administrator&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;; https://superuser.com/a/1819950/881662&#xA;&#xA;&#xA;#InstallKeybdHook&#xA;&#xA;&#xA;; Disable win + l key locking (This line must come before any hotkey assignments in the .ahk file)&#xA;&#xA;&#xA;RegWrite, REG_DWORD, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\System, DisableLockWorkstation, 1&#xA;&#xA;&#xA;; Optional: Remap winKey + &amp;lt;someKey&amp;gt; here:&#xA;&#xA;&#xA;#space::return&#xA;#s::return&#xA;&#xA;#h::&#xA;Send, ^{F9}       ; It&#39;s important to chose some random intermediary hotkey, I choose ctrl + F9&#xA;return&#xA;&#xA;#j::&#xA;Send, ^{F10}&#xA;return&#xA;&#xA;#k::&#xA;Send, ^{F11}&#xA;return&#xA;&#xA;#l::&#xA;Send, ^{F12}&#xA;return&#xA;&#xA;;CTRL+WIN+L&#xA;^F12::&#xA;RegWrite, REG_DWORD, HKEY_CURRENT_USER, Software\Microsoft\Windows\CurrentVersion\Policies\System, DisableLockWorkstation, 0&#xA;DllCall(&#34;LockWorkStation&#34;)&#xA;;after locking workstation force a reload of this script which effectively disables Win + L locking the computer again&#xA;Reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, amend the keybindings section in config.yaml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;keybindings:&#xA;  # Shift focus in a given direction.&#xA;  - command: &#34;focus left&#34;&#xA;    bindings: [&#34;Ctrl+F9&#34;]      ; Notice I am using the intermediary hotkeys here&#xA;  - command: &#34;focus right&#34;&#xA;    bindings: [&#34;Ctrl+F12&#34;]&#xA;  - command: &#34;focus up&#34;&#xA;    bindings: [&#34;Ctrl+F11&#34;]&#xA;  - command: &#34;focus down&#34;&#xA;    bindings: [&#34;Ctrl+F10&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, now you can use &lt;code&gt;LWin + l&lt;/code&gt; to focus right and &lt;code&gt;LWin + h&lt;/code&gt; to focus left, etc.&lt;/p&gt;</summary>
  </entry>
</feed>