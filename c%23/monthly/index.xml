<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-01T01:51:58Z</updated>
  <subtitle>Monthly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>space-wizards/space-station-14</title>
    <updated>2025-08-01T01:51:58Z</updated>
    <id>tag:github.com,2025-08-01:/space-wizards/space-station-14</id>
    <link href="https://github.com/space-wizards/space-station-14" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multiplayer game about paranoia and chaos on a space station. Remake of the cult-classic Space Station 13.&lt;/p&gt;&lt;hr&gt;&lt;div class=&#34;header&#34; align=&#34;center&#34;&gt; &#xA; &lt;img alt=&#34;Space Station 14&#34; width=&#34;880&#34; height=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/space-wizards/asset-dump/de329a7898bb716b9d5ba9a0cd07f38e61f1ed05/github-logo.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Space Station 14 is a remake of SS13 that runs on &lt;a href=&#34;https://github.com/space-wizards/RobustToolbox&#34;&gt;Robust Toolbox&lt;/a&gt;, our homegrown engine written in C#.&lt;/p&gt; &#xA;&lt;p&gt;This is the primary repo for Space Station 14. To prevent people forking RobustToolbox, a &#34;content&#34; pack is loaded by the client and server. This content pack contains everything needed to play the game on one specific server.&lt;/p&gt; &#xA;&lt;p&gt;If you want to host or create content for SS14, this is the repo you need. It contains both RobustToolbox and the content pack for development of new content packs.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;div class=&#34;header&#34; align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://spacestation14.com/&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://discord.ss14.io/&#34;&gt;Discord&lt;/a&gt; | &lt;a href=&#34;https://forum.spacestation14.com/&#34;&gt;Forum&lt;/a&gt; | &lt;a href=&#34;https://mastodon.gamedev.place/@spacestation14&#34;&gt;Mastodon&lt;/a&gt; | &lt;a href=&#34;https://lemmy.spacestation14.com/&#34;&gt;Lemmy&lt;/a&gt; | &lt;a href=&#34;https://www.patreon.com/spacestation14&#34;&gt;Patreon&lt;/a&gt; | &lt;a href=&#34;https://store.steampowered.com/app/1255460/Space_Station_14/&#34;&gt;Steam&lt;/a&gt; | &lt;a href=&#34;https://spacestation14.com/about/nightlies/&#34;&gt;Standalone Download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Documentation/Wiki&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://docs.spacestation14.com/&#34;&gt;docs site&lt;/a&gt; has documentation on SS14&#39;s content, engine, game design, and more.&lt;br&gt; Additionally, see these resources for license and attribution information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spacestation14.com/en/specifications/robust-generic-attribution.html&#34;&gt;Robust Generic Attribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.spacestation14.com/en/specifications/robust-station-image.html&#34;&gt;Robust Station Image&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also have lots of resources for new contributors to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are happy to accept contributions from anybody. Get in Discord if you want to help. We&#39;ve got a &lt;a href=&#34;https://github.com/space-wizards/space-station-14-content/issues&#34;&gt;list of issues&lt;/a&gt; that need to be done and anybody can pick them up. Don&#39;t be afraid to ask for help either!&lt;br&gt; Just make sure your changes and pull requests are in accordance with the &lt;a href=&#34;https://docs.spacestation14.com/en/general-development/codebase-info/pull-request-guidelines.html&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We are not currently accepting translations of the game on our main repository. If you would like to translate the game into another language, consider creating a fork or contributing to a fork.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/space-wizards/space-station-14.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Go to the project folder and run &lt;code&gt;RUN_THIS.py&lt;/code&gt; to initialize the submodules and load the engine:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd space-station-14&#xA;python RUN_THIS.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Compile the solution:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Build the server using &lt;code&gt;dotnet build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.spacestation14.com/en/general-development/setup.html&#34;&gt;More detailed instructions on building the project.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;All code for the content repository is licensed under the &lt;a href=&#34;https://github.com/space-wizards/space-station-14/raw/master/LICENSE.TXT&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most assets are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC-BY-SA 3.0&lt;/a&gt; unless stated otherwise. Assets have their license and copyright specified in the metadata file. For example, see the &lt;a href=&#34;https://github.com/space-wizards/space-station-14/raw/master/Resources/Textures/Objects/Tools/crowbar.rsi/meta.json&#34;&gt;metadata for a crowbar&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Some assets are licensed under the non-commercial &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;CC-BY-NC-SA 3.0&lt;/a&gt; or similar non-commercial licenses and will need to be removed if you wish to use this project commercially.&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>Arcenox-co/TickerQ</title>
    <updated>2025-08-01T01:51:58Z</updated>
    <id>tag:github.com,2025-08-01:/Arcenox-co/TickerQ</id>
    <link href="https://github.com/Arcenox-co/TickerQ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TickerQ is a fast, reflection-free background task scheduler for .NET ‚Äî built with source generators, EF Core integration, cron + time-based execution, and a real-time dashboard.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TickerQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ZJemWvp9MK&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-TickerQ-5865F2?logo=discord&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34; alt=&#34;Discord Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/tickerq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/tickerq.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/tickerq&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/tickerq.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Arcenox-co/TickerQ/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Arcenox-co/TickerQ/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build NuGet Packages&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tickerq.arcenox.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs%20-official%20web-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Robust. Adaptive. Precise.&lt;/strong&gt;&lt;br&gt; TickerQ is a fast, reflection-free background task scheduler for .NET ‚Äî built with source generators, EF Core integration, cron + time-based execution, and a real-time dashboard.&lt;/p&gt; &#xA;&lt;h3&gt;üìö Full Docs: &lt;a href=&#34;https://tickerq.arcenox.com&#34;&gt;https://tickerq.arcenox.com&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of v2.2.0, all TickerQ packages are versioned together ‚Äî even if a package has no changes ‚Äî to keep the ecosystem in sync. Always update all packages to the same version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time and Cron Scheduling&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stateless Core&lt;/strong&gt; with source generator&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;EF Core Persistence&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Live Dashboard UI&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Retry Policies &amp;amp; Throttling&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency Injection support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-node distributed coordination&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Core (required)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package TickerQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Entity Framework Integration (optional)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package TickerQ.EntityFrameworkCore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dashboard UI (optional)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package TickerQ.Dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Basic Setup&lt;/h2&gt; &#xA;&lt;h3&gt;In &lt;code&gt;Program.cs&lt;/code&gt; or &lt;code&gt;Startup.cs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;builder.Services.AddTickerQ(options =&amp;gt;&#xA;{&#xA;    options.SetMaxConcurrency(4); // Optional&#xA;    options.SetExceptionHandler&amp;lt;MyExceptionHandler&amp;gt;(); // Optional&#xA;    options.AddOperationalStore&amp;lt;MyDbContext&amp;gt;(efOpt =&amp;gt; &#xA;    {&#xA;        efOpt.UseModelCustomizerForMigrations(); // Applies custom model customization only during EF Core migrations&#xA;        efOpt.CancelMissedTickersOnApplicationRestart(); // Useful in distributed mode&#xA;    }); // Enables EF-backed storage&#xA;    options.AddDashboard(basePath: &#34;/tickerq-dashboard&#34;); // Dashboard path&#xA;    options.AddDashboardBasicAuth(); // Enables simple auth&#xA;});&#xA;&#xA;app.UseTickerQ(); // Activates job processor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ùóÔ∏èIf Not Using &lt;code&gt;UseModelCustomizerForMigrations()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;You must apply TickerQ configurations manually in your &lt;code&gt;DbContext&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MyDbContext : DbContext&#xA;{&#xA;    public MyDbContext(DbContextOptions&amp;lt;MyDbContext&amp;gt; options)&#xA;        : base(options) { }&#xA;&#xA;    protected override void OnModelCreating(ModelBuilder builder)&#xA;    {&#xA;        base.OnModelCreating(builder);&#xA;&#xA;        // Apply TickerQ entity configurations explicitly&#xA;        builder.ApplyConfiguration(new TimeTickerConfigurations());&#xA;        builder.ApplyConfiguration(new CronTickerConfigurations());&#xA;        builder.ApplyConfiguration(new CronTickerOccurrenceConfigurations());&#xA;&#xA;        // Alternatively, apply all configurations from assembly:&#xA;        // builder.ApplyConfigurationsFromAssembly(typeof(TimeTickerConfigurations).Assembly);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° &lt;strong&gt;Recommendation:&lt;/strong&gt;&lt;br&gt; Use &lt;code&gt;UseModelCustomizerForMigrations()&lt;/code&gt; to cleanly separate infrastructure concerns from your core domain model, especially during design-time operations like migrations.&lt;br&gt; &lt;strong&gt;Note:&lt;/strong&gt; If you&#39;re using third-party libraries (e.g., OpenIddict) that also override &lt;code&gt;IModelCustomizer&lt;/code&gt;, you must either merge customizations or fall back to manual configuration inside &lt;code&gt;OnModelCreating()&lt;/code&gt; to avoid conflicts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Job Definition&lt;/h2&gt; &#xA;&lt;h3&gt;1. &lt;strong&gt;Cron Job (Recurring)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class CleanupJobs&#xA;{&#xA;    [TickerFunction(functionName: &#34;CleanupLogs&#34;, cronExpression: &#34;0 0 * * *&#34; )]&#xA;    public void CleanupLogs()&#xA;    {&#xA;        // Runs every midnight&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This uses a cron expression to run daily at midnight.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;2. &lt;strong&gt;One-Time Job (TimeTicker)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class NotificationJobs&#xA;{&#xA;    [TickerFunction(functionName: &#34;SendWelcome&#34;)]&#xA;    public Task SendWelcome(TickerFunctionContext&amp;lt;string&amp;gt; tickerContext ,CancellationToken ct)&#xA;    {&#xA;        Console.WriteLine(tickerContext.Request); // Output: User123&#xA;        return Task.CompletedTask;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then schedule it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await _timeTickerManager.AddAsync(new TimeTicker&#xA;{&#xA;    Function = &#34;SendWelcome&#34;,&#xA;    ExecutionTime = DateTime.UtcNow.AddMinutes(1),&#xA;    Request = TickerHelper.CreateTickerRequest&amp;lt;string&amp;gt;(&#34;User123&#34;),&#xA;    Retries = 3,&#xA;    RetryIntervals = new[] { 30, 60, 120 }, // Retry after 30s, 60s, then 2min&#xA;&#xA;    // Optional batching&#xA;    BatchParent = Guid.Parse(&#34;....&#34;),&#xA;    BatchRunCondition = BatchRunCondition.OnSuccess&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;3. &lt;strong&gt;Injecting Services in Jobs (Fully DI Support)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ReportJobs&#xA;{&#xA;    private readonly IReportService _reportService;&#xA;&#xA;    public ReportJobs(IReportService reportService)&#xA;    {&#xA;        _reportService = reportService;&#xA;    }&#xA;&#xA;    [TickerFunction(functionName: &#34;GenerateDailyReport&#34;, cronExpression: &#34;0 6 * * *&#34;)]&#xA;    public async Task GenerateDailyReport()&#xA;    {&#xA;        await _reportService.GenerateAsync();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dashboard UI&lt;/h2&gt; &#xA;&lt;h3&gt;Check out Dashboard Overview: &lt;a href=&#34;https://tickerq.arcenox.com/intro/dashboard-overview.html&#34;&gt;TickerQ-Dashboard-Examples&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Enabled by adding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;options.AddDashboard(basePath: &#34;/tickerq-dashboard&#34;);&#xA;options.AddDashboardBasicAuth(); // Optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Accessible at &lt;code&gt;/tickerq-dashboard&lt;/code&gt;, it shows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System status&lt;/li&gt; &#xA; &lt;li&gt;Active tickers&lt;/li&gt; &#xA; &lt;li&gt;Job queue state&lt;/li&gt; &#xA; &lt;li&gt;Cron ticker stats&lt;/li&gt; &#xA; &lt;li&gt;Execution history&lt;/li&gt; &#xA; &lt;li&gt;Trigger/cancel/edit jobs live&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Auth config (optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;TickerQBasicAuth&#34;: {&#xA;  &#34;Username&#34;: &#34;admin&#34;,&#xA;  &#34;Password&#34;: &#34;admin&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üîê Retry &amp;amp; Locking&lt;/h2&gt; &#xA;&lt;p&gt;TickerQ supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retries per job&lt;/li&gt; &#xA; &lt;li&gt;Retry intervals (&lt;code&gt;RetryIntervals&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Distributed locking (EF mode only)&lt;/li&gt; &#xA; &lt;li&gt;Job ownership tracking across instances&lt;/li&gt; &#xA; &lt;li&gt;Cooldown on job failure&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üß™ Advanced: Manual CronTicker Scheduling&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await _cronTickerManager.AddAsync(new CronTicker&#xA;{&#xA;    Function = &#34;CleanupLogs&#34;,&#xA;    CronExpression = &#34;0 */6 * * *&#34;, // Every 6 hours&#xA;    Retries = 2,&#xA;    RetryIntervals = new[] { 60, 300 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Developer Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;[TickerFunction]&lt;/code&gt; to register jobs&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;FunctionName&lt;/code&gt; consistently across schedule and handler&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;CancellationToken&lt;/code&gt; for graceful cancellation&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Request&lt;/code&gt; to pass dynamic data to jobs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ü§ù Contribution&lt;/h2&gt; &#xA;&lt;p&gt;PRs, ideas, and issues are welcome!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork &amp;amp; branch&lt;/li&gt; &#xA; &lt;li&gt;Code your change&lt;/li&gt; &#xA; &lt;li&gt;Submit a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MIT OR Apache 2.0&lt;/strong&gt; ¬© &lt;a href=&#34;https://arcenox.com&#34;&gt;Arcenox&lt;/a&gt;&lt;br&gt; You may choose either license to use this software.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Lidarr/Lidarr</title>
    <updated>2025-08-01T01:51:58Z</updated>
    <id>tag:github.com,2025-08-01:/Lidarr/Lidarr</id>
    <link href="https://github.com/Lidarr/Lidarr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Looks and smells like Sonarr but made for music.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lidarr&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Lidarr/Lidarr/_build/latest?definitionId=1&amp;amp;branchName=develop&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Lidarr/Lidarr/_apis/build/status/lidarr.Lidarr?branchName=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://translate.servarr.com/engage/servarr/?utm_source=widget&#34;&gt;&lt;img src=&#34;https://translate.servarr.com/widget/servarr/lidarr/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wiki.servarr.com/lidarr/installation#docker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/linuxserver/lidarr.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/lidarr/lidarr/total.svg?sanitize=true&#34; alt=&#34;Github Downloads&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/lidarr/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lidarr/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lidarr is a music collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new tracks from your favorite artists and will grab, sort and rename them. It can also be configured to automatically upgrade the quality of files already downloaded when a better quality format becomes available.&lt;/p&gt; &#xA;&lt;h2&gt;Major Features Include:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for major platforms: Windows, Linux, macOS, Raspberry Pi, etc.&lt;/li&gt; &#xA; &lt;li&gt;Automatically detects new tracks.&lt;/li&gt; &#xA; &lt;li&gt;Can scan your existing library and download any missing tracks.&lt;/li&gt; &#xA; &lt;li&gt;Can watch for better quality of the tracks you already have and do an automatic upgrade.&lt;/li&gt; &#xA; &lt;li&gt;Automatic failed download handling will try another release if one fails&lt;/li&gt; &#xA; &lt;li&gt;Manual search so you can pick any release or to see why a release was not downloaded automatically&lt;/li&gt; &#xA; &lt;li&gt;Fully configurable track renaming&lt;/li&gt; &#xA; &lt;li&gt;Full integration with SABnzbd and NZBGet&lt;/li&gt; &#xA; &lt;li&gt;Full integration with Kodi, Plex (notification, library update, metadata)&lt;/li&gt; &#xA; &lt;li&gt;Full support for specials and multi-album releases&lt;/li&gt; &#xA; &lt;li&gt;And a beautiful UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Note: GitHub Issues are for Bugs and Feature Requests Only&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lidarr.audio/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-chat-7289DA.svg?maxAge=60&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Lidarr/Lidarr/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/github-issues-red.svg?maxAge=60&#34; alt=&#34;GitHub - Bugs and Feature Requests Only&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wiki.servarr.com/lidarr&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/servarr-wiki-181717.svg?maxAge=60&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;. &lt;a href=&#34;https://github.com/lidarr/Lidarr/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lidarr/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè &lt;a href=&#34;https://opencollective.com/Lidarr#backer&#34;&gt;Become a backer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/Lidarr/backers.svg?width=890&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. &lt;a href=&#34;https://opencollective.com/Lidarr#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/Lidarr/sponsors.svg?width=890&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mega Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://opencollective.com/Lidarr/tiers/mega-sponsor.svg?width=890&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;JetBrains&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;http://www.jetbrains.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/Logo/jetbrains.svg?sanitize=true&#34; alt=&#34;JetBrains&#34; width=&#34;32&#34;&gt; JetBrains&lt;/a&gt; for providing us with free licenses to their great tools.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jetbrains.com/resharper/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/Logo/resharper.svg?sanitize=true&#34; alt=&#34;ReSharper&#34; width=&#34;32&#34;&gt; ReSharper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jetbrains.com/webstorm/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/Logo/webstorm.svg?sanitize=true&#34; alt=&#34;WebStorm&#34; width=&#34;32&#34;&gt; WebStorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jetbrains.com/rider/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/Logo/rider.svg?sanitize=true&#34; alt=&#34;Rider&#34; width=&#34;32&#34;&gt; Rider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jetbrains.com/dottrace/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lidarr/Lidarr/develop/Logo/dottrace.svg?sanitize=true&#34; alt=&#34;dotTrace&#34; width=&#34;32&#34;&gt; dotTrace&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;DigitalOcean&lt;/h2&gt; &#xA;&lt;p&gt;This project is also supported by DigitalOcean&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt; &lt;img src=&#34;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg?sanitize=true&#34; width=&#34;201px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/licenses/gpl.html&#34;&gt;GNU GPL v3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2010-2021&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>