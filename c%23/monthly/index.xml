<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:09:32Z</updated>
  <subtitle>Monthly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotnet/maui</title>
    <updated>2023-10-01T02:09:32Z</updated>
    <id>tag:github.com,2023-10-01:/dotnet/maui</id>
    <link href="https://github.com/dotnet/maui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET MAUI is the .NET Multi-platform App UI, a framework for building native device applications spanning mobile, tablet, and desktop.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Multi-platform App UI (.NET MAUI)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/xamarin/public/_build/latest?definitionId=57&amp;amp;repoName=dotnet%2Fmaui&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/xamarin/public/_apis/build/status/MAUI-public?repoName=dotnet%2Fmaui&amp;amp;branchName=main&amp;amp;label=Public&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://devdiv.visualstudio.com/DevDiv/_build/latest?definitionId=13330&amp;amp;repoName=dotnet%2Fmaui&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://devdiv.visualstudio.com/DevDiv/_apis/build/status/MAUI?repoName=dotnet%2Fmaui&amp;amp;branchName=main&amp;amp;label=Private&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/maui&#34;&gt;.NET Multi-platform App UI (.NET MAUI)&lt;/a&gt; is a cross-platform framework for creating mobile and desktop apps with C# and XAML. Using .NET MAUI, you can develop apps that can run on Android, iOS, iPadOS, macOS, and Windows from a single shared codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;Install .NET MAUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/maui&#34;&gt;.NET MAUI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/maui-samples&#34;&gt;.NET MAUI Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/DEVELOPMENT.md&#34;&gt;Development Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;.NET Multi-platform App UI (.NET MAUI) is the evolution of Xamarin.Forms that expands capabilities beyond mobile Android and iOS into desktop apps for Windows and macOS. With .NET MAUI, you can build apps that perform great for any device that runs Windows, macOS, Android, &amp;amp; iOS from a single codebase. Coupled with Visual Studio productivity tools and emulators, .NET and Visual Studio significantly speed up the development process for building apps that target the widest possible set of devices. Use a single development stack that supports the best of breed solutions for all modern workloads with a unified SDK, base class libraries, and toolchain. &lt;a href=&#34;https://docs.microsoft.com/dotnet/maui/what-is-maui&#34;&gt;Read More&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet/maui/main/Assets/maui-weather-hero-sm.png&#34; alt=&#34;.NET MAUI Weather App on all platforms&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Current News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;September 12, 2023 - &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8-rc-1&#34;&gt;Announcing .NET MAUI in .NET 8 Release Candidate 1: Quality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;August 8, 2023 - &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-in-dotnet-8-preview-7/&#34;&gt;Announcing .NET MAUI in .NET 8 Preview 7: Keyboard Accelerators&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/category/net-maui/&#34;&gt;.NET MAUI Blog&lt;/a&gt; and visit the &lt;a href=&#34;https://github.com/dotnet/maui/wiki/News&#34;&gt;News&lt;/a&gt; wiki page for more news and updates.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;p&gt;Do you have questions? Do not worry, we have prepared a complete &lt;a href=&#34;https://github.com/dotnet/maui/wiki/FAQs&#34;&gt;FAQ&lt;/a&gt; answering the most common questions.&lt;/p&gt; &#xA;&lt;h2&gt;How to Engage, Contribute, and Give Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Some of the best ways to &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/CONTRIBUTING.md&#34;&gt;contribute&lt;/a&gt; are to try things out, file issues, join in design conversations, and make pull-requests. Proposals for changes specific to MAUI can be found &lt;a href=&#34;https://github.com/dotnet/maui/issues&#34;&gt;here for discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/CODE_OF_CONDUCT.md&#34;&gt;CODE-OF-CONDUCT&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui/main/.github/DEVELOPMENT.md&#34;&gt;Development Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elsa-workflows/elsa-core</title>
    <updated>2023-10-01T02:09:32Z</updated>
    <id>tag:github.com,2023-10-01:/elsa-workflows/elsa-core</id>
    <link href="https://github.com/elsa-workflows/elsa-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET workflows library&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/github-social-preview-banner-for-elsa.png&#34; alt=&#34;Elsa Workflows&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Elsa Workflows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elsa/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Elsa&#34; alt=&#34;Nuget (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@elsa-workflows/elsa-workflows-studio&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@elsa-workflows/elsa-workflows-studio&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Elsa 2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elsa/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Elsa&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f.feedz.io/elsa-workflows/elsa-2/nuget/index.json&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/endpoint.svg?url=https%3A%2F%2Ff.feedz.io%2Felsa-workflows%2Felsa-2%2Fshield%2FElsa%2Flatest&#34; alt=&#34;feedz.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f.feedz.io/elsa-workflows/elsa-2/npm/@elsa-workflows/elsa-workflows-studio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=0790b2&amp;amp;label=feedz.io%20%28npm%29&amp;amp;query=%24%5B%27dist-tags%27%5D.latest&amp;amp;url=https%3A%2F%2Ff.feedz.io%2Felsa-workflows%2Felsa-2%2Fnpm%2F%40elsa-workflows%2Felsa-workflows-studio&#34; alt=&#34;feedz.io npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-elsa.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-elsa.yml/badge.svg?branch=master&#34; alt=&#34;Build Elsa&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Elsa 3&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://f.feedz.io/elsa-workflows/elsa-3/nuget/index.json&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/endpoint.svg?url=https%3A%2F%2Ff.feedz.io%2Felsa-workflows%2Felsa-3%2Fshield%2FElsa%2Flatest&#34; alt=&#34;feedz.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f.feedz.io/elsa-workflows/elsa-3/npm/@elsa-workflows/elsa-workflows-designer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=0790b2&amp;amp;label=feedz.io%20%28npm%29&amp;amp;query=%24%5B%27dist-tags%27%5D.latest&amp;amp;url=https%3A%2F%2Ff.feedz.io%2Felsa-workflows%2Felsa-3%2Fnpm%2F%40elsa-workflows%2Felsa-workflows-designer&#34; alt=&#34;feedz.io npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/packages.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/packages.yml/badge.svg?sanitize=true&#34; alt=&#34;Elsa 3 Prerelease&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/npm-packages.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/npm-packages.yml/badge.svg?sanitize=true&#34; alt=&#34;Elsa 3 Workflow Designer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/repository/docker/elsaworkflows/elsa-dashboard-and-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/elsaworkflows/elsa-dashboard-and-server?label=docker&amp;amp;logo=docker&#34; alt=&#34;Docker Image Version (latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-dashboard-and-server-docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-dashboard-and-server-docker.yml/badge.svg?sanitize=true&#34; alt=&#34;Build elsa-dashboard:latest&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Discussion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/hhChk5H472&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/814605913783795763?label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/tagged/elsa-workflows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-elsa_workflows-orange.svg?sanitize=true&#34; alt=&#34;Stack Overflow questions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/elsaworkflows/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/elsaworkflows?style=social&#34; alt=&#34;Subreddit subscribers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elsa Core is a workflows library that enables workflow execution in any .NET Core application. Workflows can be defined using code and using the visual workflow designer.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/elsa-2-hello-world-http.gif&#34; alt=&#34;Elsa 2 Preview&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found &lt;a href=&#34;https://v2.elsaworkflows.io/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet new console -n &#34;MyConsoleApp&#34;&#xA;&#xA;cd MyConsoleApp&#xA;&#xA;dotnet add package Elsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new file called &lt;code&gt;HelloWorldWorkflow.cs&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Elsa.Activities.Console;&#xA;using Elsa.Builders;&#xA;&#xA;namespace MyConsoleApp&#xA;{&#xA;    public class HelloWorld : IWorkflow&#xA;    {&#xA;        public void Build(IWorkflowBuilder builder) =&amp;gt; builder.WriteLine(&#34;Hello World!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;Program.cs&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;&#xA;using Elsa.Services;&#xA;using Microsoft.Extensions.DependencyInjection;&#xA;&#xA;namespace MyConsoleApp&#xA;{&#xA;    class Program&#xA;    {&#xA;        private static async Task Main()&#xA;        {&#xA;            var services = new ServiceCollection()&#xA;                .AddElsa(options =&amp;gt; options&#xA;                    .AddConsoleActivities()&#xA;                    .AddWorkflow&amp;lt;HelloWorld&amp;gt;())&#xA;                .BuildServiceProvider();&#xA;            &#xA;            var workflowRunner = services.GetRequiredService&amp;lt;IBuildsAndStartsWorkflow&amp;gt;();&#xA;            await workflowRunner.BuildAndStartWorkflowAsync&amp;lt;HelloWorld&amp;gt;();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/docs/next/quickstarts/quickstarts-console-hello-world&#34;&gt;Quickstart guides&lt;/a&gt; for more examples, including how to setup the Elsa Dashboard to create and manage visual workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;A quick and easy way to give Elsa a spin is to run the following Docker command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t -i -e ELSA__SERVER__BASEURL=&#39;http://localhost:13000&#39; -p 13000:80 elsaworkflows/elsa-dashboard-and-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then navigate to &lt;a href=&#34;http://localhost:13000&#34;&gt;http://localhost:13000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;When you clone the repo, the solution file to open is &lt;code&gt;Elsa.sln&lt;/code&gt; which should build with no issues.&lt;/p&gt; &#xA;&lt;h3&gt;Elsa Dashboard &amp;amp; Client Assets&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run the sample project &lt;code&gt;ElsaDashboard.Samples.AspNetCore.Monolith.csproj&lt;/code&gt;, you should build the client assets first.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to do that is by running the &lt;code&gt;.\build-assets.ps1&lt;/code&gt; file in the root of the repo (where this README.md is as well). Alternatively, you might run &lt;code&gt;.\build-assets-and-run-dashboard-monolith.ps1&lt;/code&gt; that will first build the client assets and then run the dashboard application to give Elsa a quick whirl.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Another quick way to try out Elsa is to run &lt;code&gt;build-and-run-dashboard-monolith-with-docker.ps1&lt;/code&gt;, which will use Docker Compose to build an image and start a container. When the container starts, you can reach the Elsa Dashboard at &lt;a href=&#34;http://localhost:14000&#34;&gt;http://localhost:14000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Invoker&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Long-running Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflows as code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflows as data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Correlation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistence: CosmosDB, Entity Framework Core, MongoDB, YesSQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTML5 Workflow Designer Web Component&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ASP.NET Core Workflow Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JavaScript Expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liquid Expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Primitive Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Control Flow Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Timer Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Email Activities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 2.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Composite Activities API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Service Bus Messaging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Host REST API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Distributed Hosting Support (support for multi-node environments)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistence: MongoDB, YesSQL, Entity Framework Core (SQL Server, SQLLite, PostgreSql)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; New Workflow Designer + Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generic Command &amp;amp; Event Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; State Machines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test Workflows from Designer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Debug Workflows from Designer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Localization Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lucene Indexing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 3.0 (engine + designer redesign)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programming model similar to WF&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sequential Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flowchart Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; State Machine Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Sagas&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; BPMN Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Actor Model for Distributed Workflows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional goals for Elsa 3 (separate from core library)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modular workflow server application framework: unobtrusively add new capabilities to the workflow engine. Requires a common ORM in order to extend persistence layer in a modular fashion. EF Core has the potential to abstract away any &amp;amp; all DB providers, including MongoDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modular &amp;amp; themeable dashboard application framework: unobtrusively add UI (screens &amp;amp; widgets) to the dashboard (could be Blazor). The dashboard would be a SPA, invoking API endpoints by the modular workflow server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Module: ability for users to visually define API endpoints and implement their logic using workflows (&#34;code behind&#34; concept of VB and WinForms). With Swagger integration for Open API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Module: ability to define logical forms (form name and fields) and implement their submission logic visually using workflows (also &#34;code behind&#34; concept).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The secondary goals for Elsa 3 aim to bring about a low-code framework &amp;amp; platform for rapid application development. This shoud apply to the full spectrum of application development, ranging from embedded software (e.g Raspberry PI) to microservices &amp;amp; serverless architectures. Where one would normally write C# code to handle UI events or implement API endpoints, one can now visually design their logic using workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow Designer&lt;/h2&gt; &#xA;&lt;p&gt;Workflows can be visually designed using the Elsa Designer, a reusable &amp;amp; extensible HTML5 web component built with &lt;a href=&#34;https://stenciljs.com/&#34;&gt;StencilJS&lt;/a&gt;. To manage workflow definitions and instances, Elsa comes with an NPM package providing a set of HTML web components and a reusable Razor Class Library that wraps this package. The NPM package can be used in any type of web application, while the RCL provides Razor Components to embed the Elsa Dashboard SPA component as well as individual components in your ASP.NET Core application.&lt;/p&gt; &#xA;&lt;h2&gt;Programmatic Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Workflows can be created programmatically and then executed using one of the various APIs, which vary from low-level control to high-level ease of use.&lt;/p&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;p&gt;The following code snippet demonstrates creating a workflow with two WriteLine activities from code and then invoking it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;&#xA;// Define a strongly-typed workflow.&#xA;public class HelloWorldWorkflow : IWorkflow&#xA;{&#xA;    public void Build(IWorkflowBuilder builder)&#xA;    {&#xA;        builder&#xA;            .WriteLine(&#34;Hello World!&#34;)&#xA;            .WriteLine(&#34;Goodbye cruel world...&#34;);&#xA;    }&#xA;}&#xA;&#xA;// Setup a service collection.&#xA;var services = new ServiceCollection()&#xA;    .AddElsa()&#xA;    .AddConsoleActivities()&#xA;    .AddWorkflows&amp;lt;HelloWorldWorkflow&amp;gt;()&#xA;    .BuildServiceProvider();&#xA;&#xA;// Get a workflow runner.&#xA;var workflowRunner = services.GetService&amp;lt;IBuildsAndStartsWorkflow&amp;gt;();&#xA;&#xA;// Run the workflow.&#xA;await workflowRunner.BuildAndStartWorkflowAsync&amp;lt;HelloWorld&amp;gt;();&#xA;&#xA;// Output:&#xA;// /&amp;gt; Hello World!&#xA;// /&amp;gt; Goodbye cruel world...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Persistence&lt;/h2&gt; &#xA;&lt;p&gt;Elsa abstracts away data access, which means you can use any persistence provider you prefer.&lt;/p&gt; &#xA;&lt;h2&gt;Long Running Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Elsa has native support for long-running workflows. As soon as a workflow is halted because of some blocking activity, the workflow is persisted. When the appropriate event occurs, the workflow is loaded from the store and resumed.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create workflows using the &lt;strong&gt;Workflow Builder API&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create &amp;amp; manage workflows &lt;strong&gt;visually&lt;/strong&gt; using the Elsa Dashboard SPA.&lt;/li&gt; &#xA; &lt;li&gt;Design &lt;strong&gt;long-running&lt;/strong&gt; workflows.&lt;/li&gt; &#xA; &lt;li&gt;REST &lt;strong&gt;API Endpoints&lt;/strong&gt; to manage and integrate with Elsa from external applications.&lt;/li&gt; &#xA; &lt;li&gt;Create higher-level activities using the &lt;strong&gt;Composite Activity API&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich set of activities&lt;/strong&gt; such as SetVariable, For, ForEach, ParallelForEach, Fork, Join, HttpEndpoint, SendHttpRequest, SendEmail, MessageReceived and much more.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;strong&gt;custom activities&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workflow Expressions&lt;/strong&gt; allow you to configure activity properties with expressions that are evaluated at runtime. Supported syntaxes are JavaScript ans Liquid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Elsa Workflows?&lt;/h2&gt; &#xA;&lt;p&gt;One of the main goals of Elsa is to &lt;strong&gt;enable workflows in any .NET application&lt;/strong&gt; with &lt;strong&gt;minimum effort&lt;/strong&gt; and &lt;strong&gt;maximum extensibility&lt;/strong&gt;. This means that it should be easy to integrate workflow capabilities into your own application.&lt;/p&gt; &#xA;&lt;h3&gt;What about Azure Logic Apps?&lt;/h3&gt; &#xA;&lt;p&gt;As powerful and as complete Azure Logic Apps is, it&#39;s available only as a managed service in Azure. Elsa on the other hand allows you to host it not only on Azure, but on any cloud provider that supports .NET Core. And of course you can host it on-premise.&lt;/p&gt; &#xA;&lt;p&gt;Although you can implement long-running workflows with Logic Apps, you would typically do so with splitting your workflow with multiple Logic Apps where one workflow invokes the other. This can make the logic flow a bit hard to follow. with Elsa, you simply add triggers anywhere in the workflow, making it easier to have a complete view of your application logic. And if you want, you can still invoke other workflows form one workflow.&lt;/p&gt; &#xA;&lt;h3&gt;What about Windows Workflow Foundation?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve always liked Windows Workflow Foundation, but unfortunately &lt;a href=&#34;https://forums.dotnetfoundation.org/t/what-is-the-roadmap-of-workflow-foundation/3066&#34;&gt;development appears to have halted&lt;/a&gt;. Although there&#39;s an effort being made to &lt;a href=&#34;https://github.com/dmetzgar/corewf&#34;&gt;port WF to .NET Standard&lt;/a&gt;, there are a few reasons I prefer Elsa:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elsa intrinsically supports triggering events that starts new workflows and resumes halted workflow instances in an easy to use manner. E.g. &lt;code&gt;workflowHost.TriggerWorkflowAsync(&#34;HttpRequestTrigger&#34;);&#34;&lt;/code&gt; will start and resume all workflows that either start with or are halted on the &lt;code&gt;HttpRequestTrigger&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Elsa has a web-based workflow designer. I once worked on a project for a customer that was building a huge SaaS platform. One of the requirements was to provide a workflow engine and a web-based editor. Although there are commercial workflow libraries and editors out there, the business model required open-source software. We used WF and the re-hosted Workflow Designer. It worked, but it wasn&#39;t great.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What about Orchard Workflows?&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;a href=&#34;http://docs.orchardproject.net/en/latest/Documentation/Workflows/&#34;&gt;Orchard&lt;/a&gt; and &lt;a href=&#34;https://orchardcore.readthedocs.io/en/dev/docs/reference/modules/Workflows/&#34;&gt;Orchard Core&lt;/a&gt; ship with a powerful workflows module, and both are awesome. In fact, Elsa Workflows is taken &amp;amp; adapted from Orchard Core&#39;s Workflows module. Elsa uses a similar model, but there are some differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elsa Workflows is completely decoupled from web, whereas Orchard Core Workflows is coupled to not only the web, but also the Orchard Core Framework itself.&lt;/li&gt; &#xA; &lt;li&gt;Elsa Workflows can execute in any .NET Core application without taking a dependency on any Orchard Core packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;.NET Foundation&lt;/h3&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;https://dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.interfirst.com/&#34;&gt;Interfirst&lt;/a&gt;, a Residential Mortgage Licensee&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.interfirst.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/sponsors/interfirst.svg?sanitize=true&#34; alt=&#34;Interfirst&#34; width=&#34;600&#34; height=&#34;120&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nexxbiz.io/&#34;&gt;nexxbiz&lt;/a&gt;, accelerating delivery&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nexxbiz.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/sponsors/nexxbiz.svg?sanitize=true&#34; width=&#34;300&#34; height=&#34;300&#34; alt=&#34;nexxbiz&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mono/mono</title>
    <updated>2023-10-01T02:09:32Z</updated>
    <id>tag:github.com,2023-10-01:/mono/mono</id>
    <link href="https://github.com/mono/mono" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mono open source ECMA CLI, C# and .NET implementation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Mono is a software platform designed to allow developers to easily create cross platform applications. It is an open source implementation of Microsoft&#39;s .NET Framework based on the ECMA standards for C# and the Common Language Runtime.&lt;/p&gt; &#xA;&lt;p&gt;The Mono project is part of the &lt;a href=&#34;https://www.dotnetfoundation.org/&#34;&gt;.NET Foundation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join us on &lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;Discord&lt;/a&gt; in the &lt;code&gt;#monovm&lt;/code&gt; channel:&lt;/p&gt; &#xA;&lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/732297728826277939?style=flat-square&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=7289DA&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#compilation-and-installation&#34;&gt;Compilation and Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#using-mono&#34;&gt;Using Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#directory-roadmap&#34;&gt;Directory Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#contributing-to-mono&#34;&gt;Contributing to Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#configuration-options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mono/mono/main/#working-with-submodules&#34;&gt;Working with Submodules&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build Status&lt;/h3&gt; &#xA;&lt;p&gt;Public CI: &lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=952&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/mono/mono-ci?branchName=main&#34; alt=&#34;Azure Pipelines&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Legacy Jenkins CI (no longer available publicly):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 9&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-amd64&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-amd64/badge/icon&#34; alt=&#34;debian-9-amd64&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 9&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-i386/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-i386/badge/icon&#34; alt=&#34;debian-9-i386&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 9&lt;/td&gt; &#xA;   &lt;td&gt;armel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armel/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armel/badge/icon&#34; alt=&#34;debian-9-armel&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 9&lt;/td&gt; &#xA;   &lt;td&gt;armhf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armhf/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armhf/badge/icon&#34; alt=&#34;debian-9-armhf&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 9&lt;/td&gt; &#xA;   &lt;td&gt;arm64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-arm64/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-arm64/badge/icon&#34; alt=&#34;debian-9-arm64&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OS X&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-amd64/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-amd64/badge/icon&#34; alt=&#34;osx-amd64&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OS X&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-i386/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-i386/badge/icon&#34; alt=&#34;osx-i386&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/z/label=w64/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/z/label=w64/badge/icon&#34; alt=&#34;windows-amd64&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;i386&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/z/label=w32/&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/z/label=w32/badge/icon&#34; alt=&#34;windows-i386&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CentOS&lt;/td&gt; &#xA;   &lt;td&gt;s390x (cs)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community/label=centos-s390x&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community/label=centos-s390x/badge/icon&#34; alt=&#34;centos-s390x&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 9&lt;/td&gt; &#xA;   &lt;td&gt;ppc64el (cs)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community-chroot/label=debian-9-ppc64el&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community-chroot/label=debian-9-ppc64el/badge/icon&#34; alt=&#34;debian-9-ppc64el&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AIX 6.1&lt;/td&gt; &#xA;   &lt;td&gt;ppc64 (cs)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community/label=aix-ppc64&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community/label=aix-ppc64/badge/icon&#34; alt=&#34;aix-ppc64&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD 12&lt;/td&gt; &#xA;   &lt;td&gt;amd64 (cs)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community/label=freebsd-12-amd64&#34;&gt;&lt;img src=&#34;https://jenkins.mono-project.com/job/test-mono-mainline-community/label=freebsd-12-amd64/badge/icon&#34; alt=&#34;freebsd-amd64&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;(cs) = community supported architecture&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Compilation and Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Building the Software&lt;/h2&gt; &#xA;&lt;p&gt;Please see our guides for building Mono on &lt;a href=&#34;https://www.mono-project.com/docs/compiling-mono/mac/&#34;&gt;Mac OS X&lt;/a&gt;, &lt;a href=&#34;https://www.mono-project.com/docs/compiling-mono/linux/&#34;&gt;Linux&lt;/a&gt; and &lt;a href=&#34;https://www.mono-project.com/docs/compiling-mono/windows/&#34;&gt;Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that building from Git assumes that you already have Mono installed, so please download and &lt;a href=&#34;https://www.mono-project.com/download/&#34;&gt;install the latest Mono release&lt;/a&gt; before trying to build from Git. This is required because the Mono build relies on a working Mono C# compiler to compile itself (also known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Bootstrapping_(compilers)&#34;&gt;bootstrapping&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;If you don&#39;t have a working Mono installation&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have a working Mono installation, you can try a slightly more risky approach: getting the latest version of the &#39;monolite&#39; distribution, which contains just enough to run the &#39;mcs&#39; compiler. You do this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Run the following line after ./autogen.sh&#xA;make get-monolite-latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download and place the files appropriately so that you can then just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build will then use the files downloaded by &lt;code&gt;make get-monolite-latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing and Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can run the mono and mcs test suites with the command: &lt;code&gt;make check&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Expect to find a few test suite failures. As a sanity check, you can compare the failures you got with &lt;a href=&#34;https://jenkins.mono-project.com/&#34;&gt;https://jenkins.mono-project.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can now install mono with: &lt;code&gt;make install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can verify your installation by using the mono-test-install script, it can diagnose some common problems with Mono&#39;s install. Failure to follow these steps may result in a broken installation.&lt;/p&gt; &#xA;&lt;h1&gt;Using Mono&lt;/h1&gt; &#xA;&lt;p&gt;Once you have installed the software, you can run a few programs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mono program.exe&lt;/code&gt; runtime engine&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mcs program.cs&lt;/code&gt; C# compiler&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;monodis program.exe&lt;/code&gt; CIL Disassembler&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the man pages for mono(1), mcs(1) and monodis(1) for further details.&lt;/p&gt; &#xA;&lt;h1&gt;Directory Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;acceptance-tests/&lt;/code&gt; - Optional third party test suites used to validate Mono against a wider range of test cases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;data/&lt;/code&gt; - Configuration files installed as part of the Mono runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;docs/&lt;/code&gt; - Technical documents about the Mono runtime.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;external/&lt;/code&gt; - Git submodules for external libraries (Newtonsoft.Json, ikvm, etc).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ikvm-native/&lt;/code&gt; - Glue code for ikvm.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;libgc/&lt;/code&gt; - The (deprecated) Boehm GC implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;llvm/&lt;/code&gt; - Utility Makefiles for integrating the Mono LLVM fork.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;m4/&lt;/code&gt; - General utility Makefiles.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;man/&lt;/code&gt; - Manual pages for the various Mono commands and programs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mcs/&lt;/code&gt; - The class libraries, compiler and tools&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;class/&lt;/code&gt; - The class libraries (like System.*, Microsoft.Build, etc.)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;mcs/&lt;/code&gt; - The Mono C# compiler written in C#&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;tools/&lt;/code&gt; - Tools like gacutil, ikdasm, mdoc, etc.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mono/&lt;/code&gt; - The core of the Mono Runtime.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;arch/&lt;/code&gt; - Architecture specific portions.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;benchmark/&lt;/code&gt; - A collection of benchmarks.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;btls/&lt;/code&gt; - Build files for the BTLS library which incorporates BoringSSL.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;cil/&lt;/code&gt; - Common Intermediate Representation, XML definition of the CIL bytecodes.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;dis/&lt;/code&gt; - CIL executable Disassembler.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;eglib/&lt;/code&gt; - Independent implementation of the glib API.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;metadata/&lt;/code&gt; - The object system and metadata reader.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;mini/&lt;/code&gt; - The Just in Time Compiler.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;profiler/&lt;/code&gt; - The profiler implementation.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;sgen/&lt;/code&gt; - The SGen Garbage Collector implementation.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;tests/&lt;/code&gt; - The main runtime tests.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;unit-tests/&lt;/code&gt; - Additional runtime unit tests.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;utils/&lt;/code&gt; - Utility functions used across the runtime codebase.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;msvc/&lt;/code&gt; - Logic for the MSVC / Visual Studio based runtime and BCL build system. The latter is experimental at the moment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;packaging/&lt;/code&gt; - Packaging logic for the OS X and Windows Mono packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;po/&lt;/code&gt; - Translation files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;runtime/&lt;/code&gt; - A directory that contains the Makefiles that link the mono/ and mcs/ build systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;samples/&lt;/code&gt; - Some simple sample programs on uses of the Mono runtime as an embedded library.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;scripts/&lt;/code&gt; - Scripts used to invoke Mono and the corresponding program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;support/&lt;/code&gt; - Various support libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tools/&lt;/code&gt; - A collection of tools, mostly used during Mono development.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing to Mono&lt;/h1&gt; &#xA;&lt;p&gt;Before submitting changes to Mono, please review the &lt;a href=&#34;https://www.mono-project.com/community/contributing/&#34;&gt;contribution guidelines&lt;/a&gt;. Please pay particular attention to the &lt;a href=&#34;https://www.mono-project.com/community/contributing/#important-rules&#34;&gt;Important Rules&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting bugs&lt;/h1&gt; &#xA;&lt;p&gt;To submit bug reports, please &lt;a href=&#34;https://github.com/mono/mono/issues/new&#34;&gt;open an issue on the mono GitHub repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please use the search facility to ensure the same bug hasn&#39;t already been submitted and follow our &lt;a href=&#34;https://www.mono-project.com/community/bugs/make-a-good-bug-report/&#34;&gt;guidelines&lt;/a&gt; on how to make a good bug report.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration Options&lt;/h1&gt; &#xA;&lt;p&gt;The following are the configuration options that someone building Mono might want to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-sgen=yes,no&lt;/code&gt; - Generational GC support: Used to enable or disable the compilation of a Mono runtime with the SGen garbage collector.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On platforms that support it, after building Mono, you will have both a &lt;code&gt;mono-boehm&lt;/code&gt; binary and a &lt;code&gt;mono-sgen&lt;/code&gt; binary. &lt;code&gt;mono-boehm&lt;/code&gt; uses Boehm, while &lt;code&gt;mono-sgen&lt;/code&gt; uses the Simple Generational GC.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-libgc=[included, none]&lt;/code&gt; - Selects the default Boehm garbage collector engine to use.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;included&lt;/em&gt;: (&lt;em&gt;slightly modified Boehm GC&lt;/em&gt;) This is the default value for the Boehm GC, and it&#39;s the most feature complete, it will allow Mono to use typed allocations and support the debugger.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;none&lt;/em&gt;: Disables the inclusion of a Boehm garbage collector.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This defaults to &lt;code&gt;included&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-cooperative-suspend&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you pass this flag the Mono runtime is configured to only use the cooperative mode of the garbage collector. If you do not pass this flag, then you can control at runtime the use of the cooperative GC mode by setting the &lt;code&gt;MONO_ENABLE_COOP_SUSPEND&lt;/code&gt; flag.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-tls=__thread,pthread&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Controls how Mono should access thread local storage, pthread forces Mono to use the pthread APIs, while __thread uses compiler-optimized access to it.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Although __thread is faster, it requires support from the compiler, kernel and libc. Old Linux systems do not support with __thread.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This value is typically pre-configured and there is no need to set it, unless you are trying to debug a problem.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-sigaltstack=yes,no&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Experimental&lt;/strong&gt;: Use at your own risk, it is known to cause problems with garbage collection and is hard to reproduce those bugs.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This controls whether Mono will install a special signal handler to handle stack overflows. If set to &lt;code&gt;yes&lt;/code&gt;, it will turn stack overflows into the StackOverflowException. Otherwise when a stack overflow happens, your program will receive a segmentation fault.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The configure script will try to detect if your operating system supports this. Some older Linux systems do not support this feature, or you might want to override the auto-detection.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-static_mono=yes,no&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;This controls whether &lt;code&gt;mono&lt;/code&gt; should link against a static library (libmono.a) or a shared library (libmono.so).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This defaults to &lt;code&gt;yes&lt;/code&gt;, and will improve the performance of the &lt;code&gt;mono&lt;/code&gt; program.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This only affects the `mono&#39; binary, the shared library libmono.so will always be produced for developers that want to embed the runtime in their application.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-xen-opt=yes,no&lt;/code&gt; - Optimize code for Xen virtualization.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;It makes Mono generate code which might be slightly slower on average systems, but the resulting executable will run faster under the Xen virtualization system.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This defaults to &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-large-heap=yes,no&lt;/code&gt; - Enable support for GC heaps larger than 3GB.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;This only applies only to the Boehm garbage collector, the SGen garbage collector does not use this configuration option.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This defaults to &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-small-config=yes,no&lt;/code&gt; - Enable some tweaks to reduce memory usage and disk footprint at the expense of some capabilities.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Typically this means that the number of threads that can be created is limited (256), that the maximum heap size is also reduced (256 MB) and other such limitations that still make mono useful, but more suitable to embedded devices (like mobile phones).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This defaults to &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-ikvm-native=yes,no&lt;/code&gt; - Controls whether the IKVM JNI interface library is built or not.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;This is used if you are planning on using the IKVM Java Virtual machine with Mono.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This defaults to &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-profile4=yes,no&lt;/code&gt; - Whether you want to build the 4.x profile libraries and runtime.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This defaults to &lt;code&gt;yes&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-libgdiplus=installed,sibling,&amp;lt;path&amp;gt;&lt;/code&gt; - Configure where Mono searches for libgdiplus when running System.Drawing tests.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;It defaults to &lt;code&gt;installed&lt;/code&gt;, which means that the library is available to Mono through the regular system setup.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;sibling&lt;/code&gt; can be used to specify that a libgdiplus that resides as a sibling of this directory (mono) should be used.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or you can specify a path to a libgdiplus.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-minimal=LIST&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use this feature to specify optional runtime components that you might not want to include. This is only useful for developers embedding Mono that require a subset of Mono functionality.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The list is a comma-separated list of components that should be removed, these are:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;aot&lt;/code&gt;: Disables support for the Ahead of Time compilation.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;attach&lt;/code&gt;: Support for the Mono.Management assembly and the VMAttach API (allowing code to be injected into a target VM)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;com&lt;/code&gt;: Disables COM support.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;debug&lt;/code&gt;: Drop debugging support.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;decimal&lt;/code&gt;: Disables support for System.Decimal.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;full_messages&lt;/code&gt;: By default Mono comes with a full table of messages for error codes. This feature turns off uncommon error messages and reduces the runtime size.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;generics&lt;/code&gt;: Generics support. Disabling this will not allow Mono to run any 2.0 libraries or code that contains generics.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;jit&lt;/code&gt;: Removes the JIT engine from the build, this reduces the executable size, and requires that all code executed by the virtual machine be compiled with Full AOT before execution.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;large_code&lt;/code&gt;: Disables support for large assemblies.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;logging&lt;/code&gt;: Disables support for debug logging.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;pinvoke&lt;/code&gt;: Support for Platform Invocation services, disabling this will drop support for any libraries using DllImport.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;portability&lt;/code&gt;: Removes support for MONO_IOMAP, the environment variables for simplifying porting applications that are case-insensitive and that mix the Unix and Windows path separators.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;profiler&lt;/code&gt;: Disables support for the default profiler.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;reflection_emit&lt;/code&gt;: Drop System.Reflection.Emit support&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;reflection_emit_save&lt;/code&gt;: Drop support for saving dynamically created assemblies (AssemblyBuilderAccess.Save) in System.Reflection.Emit.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;shadow_copy&lt;/code&gt;: Disables support for AppDomain&#39;s shadow copies (you can disable this if you do not plan on using appdomains).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;simd&lt;/code&gt;: Disables support for the Mono.SIMD intrinsics library.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;ssa&lt;/code&gt;: Disables compilation for the SSA optimization framework, and the various SSA-based optimizations.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-llvm&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;This enables the use of LLVM as a code generation engine for Mono. The LLVM code generator and optimizer will be used instead of Mono&#39;s built-in code generator for both Just in Time and Ahead of Time compilations.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://www.mono-project.com/docs/advanced/mono-llvm/&#34;&gt;https://www.mono-project.com/docs/advanced/mono-llvm/&lt;/a&gt; for the full details and up-to-date information on this feature.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You will need to have an LLVM built that Mono can link against.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-big-arrays&lt;/code&gt; - Enable use of arrays with indexes larger than Int32.MaxValue.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;By default Mono has the same limitation as .NET on Win32 and Win64 and limits array indexes to 32-bit values (even on 64-bit systems).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;In certain scenarios where large arrays are required, you can pass this flag and Mono will be built to support 64-bit arrays.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This is not the default as it breaks the C embedding ABI that we have exposed through the Mono development cycle.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-parallel-mark&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use this option to enable the garbage collector to use multiple CPUs to do its work. This helps performance on multi-CPU machines as the work is divided across CPUS.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This option is not currently the default on OSX as it runs into issues there.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This option only applies to the Boehm GC.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-dtrace&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On Solaris and MacOS X builds a version of the Mono runtime that contains DTrace probes and can participate in the system profiling using DTrace.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--disable-dev-random&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Mono uses /dev/random to obtain good random data for any source that requires random numbers. If your system does not support this, you might want to disable it.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;There are a number of runtime options to control this also, see the man page.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--with-csc=roslyn,mcs,default&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use this option to configure which C# compiler to use. By default the configure script will pick Roslyn, except on platforms where Roslyn does not work (Big Endian systems) where it will pick mcs.&lt;/p&gt; &lt;p&gt;If you specify &#34;mcs&#34;, then Mono&#39;s C# compiler will be used. This also allows for a complete bootstrap of Mono&#39;s core compiler and core libraries from source.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp; If you specify &#34;roslyn&#34;, then Roslyn&#39;s C# compiler will be used. This currently uses Roslyn binaries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-nacl&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;This configures the Mono compiler to generate code suitable to be used by Google&#39;s Native Client: &lt;a href=&#34;https://code.google.com/p/nativeclient/&#34;&gt;https://code.google.com/p/nativeclient/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Currently this is used with Mono&#39;s AOT engine as Native Client does not support JIT engines yet.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--enable-wasm&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use this option to configure mono to run on WebAssembly. It will set both host and target to the WebAssembly triplet. This overrides the values passed to &lt;code&gt;--host&lt;/code&gt; or &lt;code&gt;--target&lt;/code&gt; and ignored what config.sub guesses.&lt;/p&gt; &lt;p&gt;This is a workaround to enable usage of old automake versions that don&#39;t recognize the wasm triplet.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Working With Submodules&lt;/h1&gt; &#xA;&lt;p&gt;Mono references several external git submodules, for example a fork of Microsoft&#39;s reference source code that has been altered to be suitable for use with the Mono runtime.&lt;/p&gt; &#xA;&lt;p&gt;This section describes how to use it.&lt;/p&gt; &#xA;&lt;p&gt;An initial clone should be done recursively so all submodules will also be cloned in a single pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone --recursive git@github.com:mono/mono&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once cloned, submodules can be updated to pull down the latest changes. This can also be done after an initial non-recursive clone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pull external changes into a submodule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;submodule&amp;gt;&#xA;$ git pull origin &amp;lt;branch&amp;gt;&#xA;$ cd &amp;lt;top-level&amp;gt;&#xA;$ git add &amp;lt;submodule&amp;gt;&#xA;$ git commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, submodules are detached because they point to a specific commit. Use &lt;code&gt;git checkout&lt;/code&gt; to move back to a branch before making changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;submodule&amp;gt;&#xA;$ git checkout &amp;lt;branch&amp;gt;&#xA;# work as normal; the submodule is a normal repo&#xA;$ git commit/push new changes to the repo (submodule)&#xA;&#xA;$ cd &amp;lt;top-level&amp;gt;&#xA;$ git add &amp;lt;submodule&amp;gt; # this will record the new commits to the submodule&#xA;$ git commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To switch the repo of a submodule (this should not be a common or normal thing to do at all), first edit &lt;code&gt;.gitmodules&lt;/code&gt; to point to the new location, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git submodule sync -- &amp;lt;path of the submodule&amp;gt;&#xA;$ git submodule update --recursive&#xA;$ git checkout &amp;lt;desired new hash or branch&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The desired output diff is a change in &lt;code&gt;.gitmodules&lt;/code&gt; to reflect the change in the remote URL, and a change in /&#xA; &lt;submodule&gt;&#xA;   where you see the desired change in the commit hash.&#xA; &lt;/submodule&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;See the LICENSE file for licensing information, and the PATENTS.TXT file for information about Microsoft&#39;s patent grant.&lt;/p&gt; &#xA;&lt;h1&gt;Mono Trademark Use Policy&lt;/h1&gt; &#xA;&lt;p&gt;The use of trademarks and logos for Mono can be found &lt;a href=&#34;https://www.dotnetfoundation.org/legal/mono-tm&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>