<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:05:19Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotnet/maui-samples</title>
    <updated>2022-08-14T02:05:19Z</updated>
    <id>tag:github.com,2022-08-14:/dotnet/maui-samples</id>
    <link href="https://github.com/dotnet/maui-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for .NET Multi-Platform App UI (.NET MAUI)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET MAUI Samples&lt;/h1&gt; &#xA;&lt;p&gt;Samples built with .NET Multi-platform App UI (.NET MAUI).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;.NET MAUI&lt;/a&gt; is a cross-platform framework for creating mobile and desktop apps with C# and XAML. Using .NET MAUI, you can develop apps that can run on Android, iOS, iPadOS, macOS, and Windows from a single shared codebase.&lt;/p&gt; &#xA;&lt;h2&gt;Official Samples&lt;/h2&gt; &#xA;&lt;p&gt;Official samples can be accessed via the &lt;a href=&#34;https://docs.microsoft.com/samples/browse/?expanded=dotnet&amp;amp;products=dotnet-maui&#34;&gt;Samples browser&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sample highlights include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Apps/WeatherTwentyOne&#34;&gt;Weather &#39;21 App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Apps/Calculator&#34;&gt;Calculator App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/dotnet-podcasts&#34;&gt;.NET Podcasts App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Navigation&#34;&gt;Navigation Samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/6.0/Beginners-Series&#34;&gt;Beginner&#39;s Series Task App Sample&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rachelkang/recipeSearch&#34;&gt;Rachel&#39;s Recipes App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jsuarezruiz/awesome-dotnet-maui&#34;&gt;Awesome .NET MAUI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET MAUI Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dot.net/maui&#34;&gt;.NET MAUI Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/maui&#34;&gt;.NET MAUI Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/category/maui/&#34;&gt;.NET MAUI Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/maui&#34;&gt;.NET MAUI GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dotnet&#34;&gt;.NET home repo&lt;/a&gt; - links to hundreds of .NET projects, from Microsoft and the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/aspnet/core/&#34;&gt;ASP.NET Core home&lt;/a&gt; - the best place to start learning about ASP.NET Core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;http://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;http://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;.NET (including the maui-samples repo) is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/maui-samples/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>egametang/ET</title>
    <updated>2022-08-14T02:05:19Z</updated>
    <id>tag:github.com,2022-08-14:/egametang/ET</id>
    <link href="https://github.com/egametang/ET" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unity3D Client And C# Server Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/egametang/Egametang/raw/master/README-EN.md&#34;&gt;English&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;strong&gt;讨论QQ群 : 474643097&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://et-framework.cn&#34;&gt;ET论坛&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/egametang/ET/tree/master/Store&#34;&gt;ET商店&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://edu.uwa4d.com/course-intro/1/375&#34;&gt;ET6.0视频教程上线&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/egametang/ET/raw/master/Book/1.1%E8%BF%90%E8%A1%8C%E6%8C%87%E5%8D%97.md&#34;&gt;运行指南&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://www.yuque.com/u28961999/yms0nt/&#34;&gt;分析器说明&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;ET7开发中，使用master分支，ET6改成release6.0分支&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;调整结构，机器人工程与服务器合并，更易使用，一个进程同时可以做server，也能创建机器人，真正的ALL IN ONE! -- 已实现&lt;/li&gt; &#xA; &lt;li&gt;客户端跟服务端合并，服务端代码全部放在了客户端，客户端中可以带一个服务端，开发超级方便，服务端发布的时候可以选择发布成Dotnet也可以发布成UnityServer，终极All IN ONE -- 已实现&lt;/li&gt; &#xA; &lt;li&gt;Entity可视化，客户端跟服务端所有的Entity都实现了可视化，开启ENABLE_CODES宏，运行游戏，查看Hierarchy面板，展开Init/Global/Scene(Process)即可看到 -- 已实现&lt;/li&gt; &#xA; &lt;li&gt;因为所有代码都在Unity中，所以开发ET插件变得非常容易，直接使用Unity导入导出即可 -- 已实现&lt;/li&gt; &#xA; &lt;li&gt;增加软路由，可以防各种网络攻击而不影响正常玩家，网游必备！-- 已实现&lt;/li&gt; &#xA; &lt;li&gt;各种事件跟网络消息订阅带上DomainSceneType，更精确，更不容易出错 -- 已实现&lt;/li&gt; &#xA; &lt;li&gt;sj兄弟添加了各种分析器，分析器保证了写出的代码必须符合ET规范，否则编译不通过！（这点ET6也增加上了） -- 已实现&lt;/li&gt; &#xA; &lt;li&gt;利用Linux fork写时复制的机制减少配置文件内存占用（可能GC整理内存会走不通，待研究）-- 暂未实现&lt;/li&gt; &#xA; &lt;li&gt;ET7已经去除客户端热更新，请大家自己选择接入,接入huatuo或者ILRuntime都非常简单, 注意！(不要混淆客户端热更新跟服务端热更新，服务端热更新，ET一直都有)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;ET6 发布！ET6相比ET5有巨大变化，可以说是凤姐变亦菲，6.0拥有如下惊人的特点&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;客户端逻辑全热更新（基于ILRuntime），没有不能更的部分&lt;/li&gt; &#xA; &lt;li&gt;客户端服务端均可热重载，开发不用重启客户端服务端即可修改逻辑代码，开发极其方便&lt;/li&gt; &#xA; &lt;li&gt;机器人框架，ET6的客户端的逻辑跟表现分离，机器人程序直接共享利用客户端的逻辑层代码做压测，只需要极少代码即可做出机器人，方便压测服务端&lt;/li&gt; &#xA; &lt;li&gt;测试用例框架，利用客户端的逻辑层代码写单元测试，每个单元测试都是完整的游戏环境，无需各种恶心的mock&lt;/li&gt; &#xA; &lt;li&gt;AI框架，比行为树更加方便，写AI比写UI还简单&lt;/li&gt; &#xA; &lt;li&gt;新的服务端架构，极其优美&lt;/li&gt; &#xA; &lt;li&gt;内外网kcp网络，性能强劲，搭配软路由模块，可以防各种网络攻击&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;ET开发的商业mmo项目千古风流成功上线，64核128G内存的单服单物理机1.5W在线（实际线上策划为了生态限制为单服6000人同时在线，6000人的话cpu消耗约为30%）。为了堆栈行号正常，线上跑得是Debug版，如果使用Release版开启优化，性能还能翻一倍，达到单物理机3W在线！上线5个月来十分稳定。千古风流使用了ET框架从零开发，用时两年，这个开发速度可以说无人出其右。千古风流的成功上线证明了ET具备开发任何大型游戏的能力，开发速度，开发效率都令人叹为观止！千古风流使用到的客户端服务器技术：&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;动态副本跟分线，按需分配，用完回收&lt;/li&gt; &#xA; &lt;li&gt;分线合线，分线人数较少会把多条线合并。合线功能基本上其它mmo游戏很少见到&lt;/li&gt; &#xA; &lt;li&gt;客户端服务端场景无缝切换，也就是无缝大世界技术&lt;/li&gt; &#xA; &lt;li&gt;跨服副本，跨服战场&lt;/li&gt; &#xA; &lt;li&gt;前后端一体化，利用客户端代码开发服务器压测机器人，4台24核机器轻松模拟1W人做任务&lt;/li&gt; &#xA; &lt;li&gt;千古风流各种ai设计，使用ET的全新开发的ai框架，使ai开发简单到跟写ui一样简单&lt;/li&gt; &#xA; &lt;li&gt;测试用例框架，大部分重要系统，千古风流都写了测试用例，跟市面上的测试用例不同，每个千古风流的测试用例都是一个完整的游戏环境，针对协议级别，不需要搞各种接口去mock。写起来非常快速。&lt;/li&gt; &#xA; &lt;li&gt;九宫格的aoi实现，动态调整看见的玩家，降低服务器负载&lt;/li&gt; &#xA; &lt;li&gt;防攻击，千古风流开发了软路由功能，即使攻击也只能攻击到软路由，一旦被攻击，玩家客户端发现几秒钟无响应，即可动态切换到其它软路由，用户几乎无感知。整个过程客户端网络连接不断开，数据不丢失。&lt;/li&gt; &#xA; &lt;li&gt;还有很多很多，这里就不啰嗦了&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;ET的介绍：&lt;/h1&gt; &#xA;&lt;p&gt;ET是一个开源的游戏客户端（基于unity3d）服务端双端框架，服务端是使用C# .net core开发的分布式游戏服务端，其特点是开发效率高，性能强，双端共享逻辑代码，客户端服务端热更机制完善，同时支持可靠udp tcp websocket协议，支持服务端3D recast寻路等等&lt;/p&gt; &#xA;&lt;h1&gt;ET的功能：&lt;/h1&gt; &#xA;&lt;h3&gt;1.可用VS单步调试的分布式服务端，N变1&lt;/h3&gt; &#xA;&lt;p&gt;一般来说，分布式服务端要启动很多进程，一旦进程多了，单步调试就变得非常困难，导致服务端开发基本上靠打log来查找问题。平常开发游戏逻辑也得开启一大堆进程，不仅启动慢，而且查找问题及其不方便，要在一堆堆日志里面查问题，这感觉非常糟糕，这么多年也没人解决这个问题。ET框架使用了类似守望先锋的组件设计，所有服务端内容都拆成了一个个组件，启动时根据服务器类型挂载自己所需要的组件。这有点类似电脑，电脑都模块化的拆成了内存，CPU，主板等等零件，搭配不同的零件就能组装成一台不同的电脑，例如家用台式机需要内存，CPU，主板，显卡，显示器，硬盘。而公司用的服务器却不需要显示器和显卡，网吧的电脑可能不需要硬盘等。正因为这样的设计，ET框架可以将所有的服务器组件都挂在一个服务器进程上，那么这个服务器进程就有了所有服务器的功能，一个进程就可以作为整组分布式服务器使用。这也类似电脑，台式机有所有的电脑组件，那它也完全可以当作公司服务器使用，也可以当作网吧电脑。&lt;/p&gt; &#xA;&lt;h3&gt;2.随意可拆分功能的分布式服务端，1变N&lt;/h3&gt; &#xA;&lt;p&gt;分布式服务端要开发多种类型的服务器进程，比如Login server，gate server，battle server，chat server friend server等等一大堆各种server，传统开发方式需要预先知道当前的功能要放在哪个服务器上，当功能越来越多的时候，比如聊天功能之前在一个中心服务器上，之后需要拆出来单独做成一个服务器，这时会牵扯到大量迁移代码的工作，烦不胜烦。ET框架在平常开发的时候根本不太需要关心当前开发的这个功能会放在什么server上，只用一个进程进行开发，功能开发成组件的形式。发布的时候使用一份多进程的配置即可发布成多进程的形式，是不是很方便呢？随便你怎么拆分服务器。只需要修改极少的代码就可以进行拆分。不同的server挂上不同的组件就行了嘛！&lt;/p&gt; &#xA;&lt;h3&gt;3.跨平台的分布式服务端&lt;/h3&gt; &#xA;&lt;p&gt;ET框架使用C#做服务端，现在C#是完全可以跨平台的，在linux上安装.netcore，即可，不需要修改任何代码，就能跑起来。性能方面，现在.netcore的性能非常强，比lua，python，js什么快的多了。做游戏服务端完全不在话下。平常我们开发的时候用VS在windows上开发调试，发布的时候发布到linux上即可。ET框架还提供了一键同步工具，打开unity-&amp;gt;tools-&amp;gt;rsync同步，即可同步代码到linux上&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./Run.sh Config/StartConfig/192.168.12.188.txt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;即可编译启动服务器。&lt;/p&gt; &#xA;&lt;h3&gt;4.提供协程支持&lt;/h3&gt; &#xA;&lt;p&gt;C#天生支持异步变同步语法 async和await，比lua，python的协程强大的多，新版python以及javascript语言甚至照搬了C#的协程语法。分布式服务端大量服务器之间的远程调用，没有异步语法的支持，开发将非常麻烦。所以java没有异步语法，做单服还行，不适合做大型分布式游戏服务端。例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;// 发送C2R_Ping并且等待响应消息R2C_Ping&#xA;R2C_Ping pong = await session.Call(new C2R_Ping()) as R2C_Ping;&#xA;Log.Debug(&#34;收到R2C_Ping&#34;);&#xA;&#xA;// 向mongodb查询一个id为1的Player，并且等待返回&#xA;Player player = await Game.Scene.GetComponent&amp;lt;DBProxyComponent&amp;gt;().Query&amp;lt;Player&amp;gt;(1);&#xA;Log.Debug($&#34;打印player name: {player.Name}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以看出，有了async await，所有的服务器间的异步操作将变得非常连贯，不用再拆成多段逻辑。大大简化了分布式服务器开发&lt;/p&gt; &#xA;&lt;h3&gt;5.提供类似erlang的actor消息机制&lt;/h3&gt; &#xA;&lt;p&gt;erlang语言一大优势就是位置透明的消息机制，用户完全不用关心对象在哪个进程，拿到id就可以对对象发送消息。ET框架也提供了actor消息机制，实体对象只需要挂上MailBoxComponent组件，这个实体对象就成了一个Actor，任何服务器只需要知道这个实体对象的id就可以向其发送消息，完全不用关心这个实体对象在哪个server，在哪台物理机器上。其实现原理也很简单，ET框架提供了一个位置服务器，所有挂载MailBoxComponent的实体对象都会将自己的id跟位置注册到这个位置服务器，其它服务器向这个实体对象发送消息的时候如果不知道这个实体对象的位置，会先去位置服务器查询，查询到位置再进行发送。&lt;/p&gt; &#xA;&lt;h3&gt;6.提供服务器不停服动态更新逻辑功能&lt;/h3&gt; &#xA;&lt;p&gt;热更是游戏服务器不可缺少的功能，ET框架使用的组件设计，可以做成守望先锋的设计，组件只有成员，无方法，将所有方法做成扩展方法放到热更dll中，运行时重新加载dll即可热更所有逻辑。&lt;/p&gt; &#xA;&lt;h3&gt;7.客户端使用C#热更新，热更新一键切换&lt;/h3&gt; &#xA;&lt;p&gt;可以使用csharp.lua或者ILRuntime稍加改造即可做客户端热更。再也不用使用狗屎lua了，客户端可以实现所有逻辑热更新，包括协议，config，ui等等。&lt;/p&gt; &#xA;&lt;h3&gt;8.客户端热重载&lt;/h3&gt; &#xA;&lt;p&gt;开发不用重启客户端即可修改客户端逻辑代码，开发极其方便&lt;/p&gt; &#xA;&lt;h3&gt;9.客户端服务端用同一种语言，并且共享代码&lt;/h3&gt; &#xA;&lt;p&gt;下载ET框架，打开服务端工程，可以看到服务端引用了客户端很多代码，通过引用客户端代码的方式实现了双端共享代码。例如客户端服务端之间的网络消息两边完全共用一个文件即可，添加一个消息只需要修改一遍。&lt;/p&gt; &#xA;&lt;h3&gt;10.KCP ENET TCP Websocket协议无缝切换&lt;/h3&gt; &#xA;&lt;p&gt;ET框架不但支持TCP，而且支持可靠的UDP协议（ENET跟KCP），ENet是英雄联盟所使用的网络库，其特点是快速，并且网络丢包的情况下性能也非常好，这个我们做过测试TCP在丢包5%的情况下，moba游戏就卡的不行了，但是使用ENet，丢包20%仍然不会感到卡。非常强大。框架还支持使用KCP协议，KCP也是可靠UDP协议，据说比ENET性能更好，使用kcp请注意，需要自己加心跳机制，否则20秒没收到包，服务端将断开连接。协议可以无缝切换。&lt;/p&gt; &#xA;&lt;h3&gt;11. 3D Recast寻路功能&lt;/h3&gt; &#xA;&lt;p&gt;可以Unity导出场景数据，给服务端做recast寻路。做MMO非常方便，demo演示了服务端3d寻路功能&lt;/p&gt; &#xA;&lt;h3&gt;12. 服务端支持repl，也可以动态执行一段新代码&lt;/h3&gt; &#xA;&lt;p&gt;这样就可以打印出进程中任何数据，大大简化了服务端查找问题的难度，开启repl方法，直接在console中输入repl回车即可进入repl模式&lt;/p&gt; &#xA;&lt;h3&gt;13.提供客户端机器人框架支持&lt;/h3&gt; &#xA;&lt;p&gt;几行代码即可创建机器人登录游戏。机器人压测轻而易举，机器人跟正常的玩家完全一样，上线前用机器人做好压测，大大降低上线崩溃几率&lt;/p&gt; &#xA;&lt;h3&gt;14.AI框架&lt;/h3&gt; &#xA;&lt;p&gt;ET的AI框架让AI编写比UI还简单&lt;/p&gt; &#xA;&lt;h3&gt;15.测试用例框架&lt;/h3&gt; &#xA;&lt;p&gt;跟市面上的测试用例不同，ET的测试用例都是一个完整的游戏环境，针对协议级别，不需要搞各种接口去mock。写起来非常快速&lt;/p&gt; &#xA;&lt;h3&gt;16.还有很多很多功能，我就不详细介绍了&lt;/h3&gt; &#xA;&lt;p&gt;a.及其方便检查CPU占用和内存泄漏检查，vs自带分析工具，不用再为性能和内存泄漏检查而烦恼&lt;br&gt; b.使用NLog库，打log及其方便，平常开发时，可以将所有服务器log打到一个文件中，再也不用一个个文件搜索log了&lt;br&gt; c.统一使用Mongodb的bson做序列化，消息和配置文件全部都是bson或者json，并且以后使用mongodb做数据库，再也不用做格式转换了。&lt;br&gt; d.提供一个同步工具&lt;/p&gt; &#xA;&lt;p&gt;ET框架是一个强大灵活的分布式服务端架构，完全可以满足绝大部分大型游戏需求。使用这套框架，客户端开发者就可以自己完成双端开发，节省大量人力物力，节省大量沟通时间。&lt;/p&gt; &#xA;&lt;p&gt;相关网站:&lt;br&gt; &lt;a href=&#34;https://et-framework.cn&#34;&gt;ET论坛&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;群友分享：&lt;br&gt; &lt;a href=&#34;https://github.com/DukeChiang/ET.git&#34;&gt;行为树与fgui分支(Duke Chiang开发维护)&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lfzxb.top/&#34;&gt;ET学习笔记系列(烟雨迷离半世殇写)&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://acgmart.com/&#34;&gt;图形渲染与ET学习笔记(咲夜詩写)&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.cnblogs.com/fancybit/p/et1.html&#34;&gt;框架服务端运行流程&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.cnblogs.com/fancybit/p/et2.html&#34;&gt;ET启动配置&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.jianshu.com/p/f2ea0d26c7c1&#34;&gt;框架demo介绍&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://gad.qq.com/article/detail/35973&#34;&gt;linux部署&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=25&#34;&gt;linux部署，mongo安装，资源服搭建&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=111&#34;&gt;ET框架心跳包组件开发&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=117&#34;&gt;ET框架Actor使用与心得&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=124&#34;&gt;基于ET框架和UGUI的简单UI框架实现（渐渐写）&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=76&#34;&gt;ET框架笔记 (笑览世界写)&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=147&#34;&gt;ET框架如何用MAC开发&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.tinkingli.com/?p=145&#34;&gt;ET的动态添加事件和触发组件&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;商业项目:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qiangu.com/&#34;&gt;千古风流&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taptap.com/app/227804&#34;&gt;魔法点点2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.taptap.com/app/71064&#34;&gt;养不大&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;天天躲猫猫2（ios2019春节下载排行19）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/ECPS_admin/PlanB&#34;&gt;牛虎棋牌&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wufanjoin/fivestar&#34;&gt;五星麻将&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;群友demo：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Viagi/LandlordsCore&#34;&gt;斗地主（客户端服务端）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitee.com/ECPS_admin/planc&#34;&gt;背包系统&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Acgmart/Sekia_TechDemo&#34;&gt;移动端渲染技术demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;视频教程：&lt;br&gt; &lt;a href=&#34;https://edu.uwa4d.com/course-intro/1/375&#34;&gt;字母哥ET6.0教程&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://www.taikr.com/my/course/972&#34;&gt;肉饼老师主讲&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://edu.manew.com/course/796&#34;&gt;官剑铭主讲&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://pan.baidu.com/s/1a5-j2R5QctZpC9n3sMC9QQ&#34;&gt;ET新手教程-初见主讲&lt;/a&gt; 密码: ru1j&lt;br&gt; &lt;a href=&#34;https://www.bilibili.com/video/av33280463/?redirectFrom=h5&#34;&gt;ET新手教程新版-初见主讲&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://pan.baidu.com/s/1VUQbdd1Yio7ULFXwAv7X7A&#34;&gt;ET在Mac上运行指南-L主讲&lt;/a&gt; 密码: l3e3&lt;br&gt; &lt;a href=&#34;https://space.bilibili.com/33595745/favlist?fid=759596845&amp;amp;ftype=create&#34;&gt;ET框架系列教程-烟雨主讲-6.0版本&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.net core 游戏资源分享&lt;br&gt; &lt;a href=&#34;https://github.com/thangchung/awesome-dotnet-core&#34;&gt;各种dotnet core项目收集&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;讨论QQ群 : 474643097&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;支付宝捐赠&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/egametang/ET/raw/master/Book/donate.png&#34; alt=&#34;使用支付宝对该项目进行捐赠&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;友情链接&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Zonciu/Box2DSharp&#34;&gt;Box2DSharp&lt;/a&gt; box2d的C#移植版，性能很强&lt;br&gt; &lt;a href=&#34;https://github.com/xasset/xasset&#34;&gt;xasset&lt;/a&gt; 致力于为 Unity 项目提供了一套 精简稳健 的资源管理环境&lt;br&gt; &lt;a href=&#34;https://github.com/liangxiegame/QFramework&#34;&gt;QFramework&lt;/a&gt; Your first K.I.S.S Unity3d Framework&lt;br&gt; &lt;a href=&#34;https://github.com/zzjfengqing/ET-EUI&#34;&gt;ET UI框架&lt;/a&gt; 字母哥实现的UI框架，ET风格，各种事件分发&lt;br&gt; &lt;a href=&#34;https://github.com/zzjfengqing/ETCsharpToXLua&#34;&gt;ETCsharpToXLua&lt;/a&gt; 字母哥使用csharp.lua实现的ET客户端热更新&lt;br&gt; &lt;a href=&#34;https://www.lfzxb.top/et-6-with-ilruntime&#34;&gt;et-6-with-ilruntime&lt;/a&gt; 烟雨使用ILRuntime实现的ET客户端热更新&lt;br&gt; &lt;a href=&#34;https://github.com/focus-creative-games/luban&#34;&gt;Luban&lt;/a&gt; 适用于大中型项目的游戏配置解决方案&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/runtime</title>
    <updated>2022-08-14T02:05:19Z</updated>
    <id>tag:github.com,2022-08-14:/dotnet/runtime</id>
    <link href="https://github.com/dotnet/runtime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Runtime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dnceng.visualstudio.com/public/_build/latest?definitionId=686&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dnceng.visualstudio.com/public/_apis/build/status/dotnet/runtime/runtime?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotnet/runtime/labels/help%20wanted&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/dotnet/runtime/help%20wanted?style=flat-square&amp;amp;color=%232EA043&amp;amp;label=help%20wanted&#34; alt=&#34;Help Wanted&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/dotnet/runtime&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/732297728826277939?style=flat-square&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;color=7289DA&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the code to build the .NET runtime, libraries and shared host (&lt;code&gt;dotnet&lt;/code&gt;) installers for all supported platforms, as well as the sources to .NET runtime and libraries.&lt;/p&gt; &#xA;&lt;h2&gt;What is .NET?&lt;/h2&gt; &#xA;&lt;p&gt;Official Starting Page: &lt;a href=&#34;https://dotnet.microsoft.com&#34;&gt;https://dotnet.microsoft.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/get-started&#34;&gt;How to use .NET&lt;/a&gt; (with VS, VS Code, command-line CLI) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;Install official releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/docs/project/dogfooding.md&#34;&gt;Install daily builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core&#34;&gt;Documentation&lt;/a&gt; (Get Started, Tutorials, Porting from .NET Framework, API reference, ...) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/deploying&#34;&gt;Deploying apps&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/raw/main/os-lifecycle-policy.md&#34;&gt;Supported OS versions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/raw/main/roadmap.md&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/core/tree/main/release-notes&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How can I contribute?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Many people all over the world have helped make this project better.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; explains what kinds of contributions we welcome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/docs/workflow/README.md&#34;&gt;Workflow Instructions&lt;/a&gt; explains how to build and test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/docs/project/dogfooding.md&#34;&gt;Get Up and Running on .NET Core&lt;/a&gt; explains how to get nightly builds of the runtime and its libraries to test them in your own projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting security issues and security bugs&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href=&#34;https://www.microsoft.com/msrc/faqs-report-an-issue&#34;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see info about related &lt;a href=&#34;https://www.microsoft.com/msrc/bounty-dot-net-core&#34;&gt;Microsoft .NET Core and ASP.NET Core Bug Bounty Program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Filing issues&lt;/h2&gt; &#xA;&lt;p&gt;This repo should contain issues that are tied to the runtime, the class libraries and frameworks, the installation of the &lt;code&gt;dotnet&lt;/code&gt; binary (sometimes known as the &lt;code&gt;muxer&lt;/code&gt;) and installation of the .NET runtime and libraries.&lt;/p&gt; &#xA;&lt;p&gt;For other issues, please use the following repos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For overall .NET SDK issues, file in the &lt;a href=&#34;https://github.com/dotnet/sdk&#34;&gt;dotnet/sdk&lt;/a&gt; repo&lt;/li&gt; &#xA; &lt;li&gt;For ASP.NET issues, file in the &lt;a href=&#34;https://github.com/dotnet/aspnetcore&#34;&gt;dotnet/aspnetcore&lt;/a&gt; repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://source.dot.net&#34;&gt;.NET Core source index&lt;/a&gt; / &lt;a href=&#34;https://referencesource.microsoft.com&#34;&gt;.NET Framework source index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/api&#34;&gt;API Reference docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apisof.net&#34;&gt;.NET API Catalog&lt;/a&gt; (incl. APIs from daily builds and API usage info)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/dotnet-api-docs/wiki&#34;&gt;API docs writing guidelines&lt;/a&gt; - useful when writing /// comments&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aka.ms/dotnet-discord&#34;&gt;.NET Discord Server&lt;/a&gt; - a place to discuss the development of .NET and its ecosystem&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;.NET Runtime is a &lt;a href=&#34;https://www.dotnetfoundation.org/projects&#34;&gt;.NET Foundation&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dotnet&#34;&gt;.NET home repo&lt;/a&gt;&amp;nbsp;- links to 100s of .NET projects, from Microsoft and the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/aspnet/core&#34;&gt;ASP.NET Core home&lt;/a&gt; - the best place to start learning about ASP.NET Core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;https://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;https://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;General .NET OSS discussions: &lt;a href=&#34;https://github.com/dotnet-foundation/Home/discussions&#34;&gt;.NET Foundation Discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;.NET (including the runtime repo) is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/runtime/main/LICENSE.TXT&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
</feed>