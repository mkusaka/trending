<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-26T01:41:51Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>builtbybel/Flyby11</title>
    <updated>2025-01-26T01:41:51Z</updated>
    <id>tag:github.com,2025-01-26:/builtbybel/Flyby11</id>
    <link href="https://github.com/builtbybel/Flyby11" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows 11 Upgrading Assistant&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flyby11 (FlybyScript) Windows 11 for All ‚Äì No Specs, No Problem!&lt;/h1&gt; &#xA;&lt;p&gt;Flyby11 is a simple patcher that removes the annoying restrictions preventing you from installing Windows 11 (24H2) on unsupported hardware. Got an old PC? No TPM, Secure Boot, or your processor isn&#39;t supported? Flyby11 lets you install Windows 11 24H2 anyway.&lt;/p&gt; &#xA;&lt;p&gt;No complicated steps. &lt;strong&gt;Just run the tool (see &lt;a href=&#34;https://github.com/builtbybel/Flyby11/releases/tag/0.17.160&#34;&gt;&#34;Releases&#34;&lt;/a&gt; in the right side of the page, you may need to unpack a zip file), and you&#39;ll be running Windows 11 on your outdated machine in no time.&lt;/strong&gt; Think of it as sneaking through the back door without anyone noticing.&lt;/p&gt; &#xA;&lt;h1&gt;Technical Overview&lt;/h1&gt; &#xA;&lt;p&gt;Flyby11 leverages a feature of the Windows 11 setup process that uses the Windows Server variant of the installation. This variant, unlike the regular Windows 11 setup, skips most hardware compatibility checks, allowing it to run on unsupported systems. Here‚Äôs a more technical breakdown of the process:&lt;/p&gt; &#xA;&lt;p&gt;Windows Server Setup: The tool uses the Windows Server variant of the setup, which avoids the usual checks for things like TPM, Secure Boot, and specific processor requirements. Install Regular Windows 11: Even though the setup runs in server mode, it installs the normal Windows 11 version (not the server version). Manual ISO Preparation: Flyby11 automates the download and mounting of the ISO, so you don‚Äôt need to manually tweak anything. You can get the ISO from official sources or the tool will handle it using the &lt;a href=&#34;https://github.com/pbatard/Fido&#34;&gt;Fido script&lt;/a&gt; This method is the same approach described in the official Windows documentation for upgrading unsupported systems, as &lt;a href=&#34;https://support.microsoft.com/en-us/windows/ways-to-install-windows-11-e0edbbfb-cfc5-4011-868b-2ce77ac7c70e&#34;&gt;detailed in this article&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Flyby11 offers all the currently working methods to bypass the restrictions for installing Windows 11 24H2 on unsupported hardware. The internet is full of guides showing how to get around the TPM, Secure Boot, and processor requirements, but Flyby11 does all that automatically for you.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZiggyCreatures/FusionCache</title>
    <updated>2025-01-26T01:41:51Z</updated>
    <id>tag:github.com,2025-01-26:/ZiggyCreatures/FusionCache</id>
    <link href="https://github.com/ZiggyCreatures/FusionCache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FusionCache is an easy to use, fast and robust hybrid cache with advanced resiliency features.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/logo-256x256.png&#34; alt=&#34;FusionCache logo&#34;&gt;&lt;/p&gt; &#xA; &lt;h1&gt;FusionCache&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache&#34; alt=&#34;Nuget&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;üôã‚Äç‚ôÇÔ∏è Updating to &lt;code&gt;v2&lt;/code&gt; ? please &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Update_v2_0_0.md&#34;&gt;read here&lt;/a&gt;.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;FusionCache is an easy to use, fast and robust hybrid cache with advanced resiliency features.&lt;/h3&gt; &#xA;&lt;p&gt;It was born after years of dealing with all sorts of different types of caches: memory, distributed, hybrid, HTTP caching, CDNs, browser cache, offline cache, you name it.&lt;/p&gt; &#xA;&lt;p&gt;So I tried to put together these experiences and came up with FusionCache.&lt;/p&gt; &#xA;&lt;div style=&#34;text-align:center;&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/images/diagram.png&#34; alt=&#34;FusionCache diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Being a hybrid cache means it can transparently work as either a normal memory cache (L1) or as a multi-level cache (L1+L2), where the distributed 2nd level (L2) can be any implementation of the standard &lt;code&gt;IDistributedCache&lt;/code&gt; interface: this will get us better cold starts, better horizontal scalability, more resiliency and overall better performance.&lt;/p&gt; &#xA;&lt;p&gt;FusionCache includes an optional &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Backplane.md&#34;&gt;backplane&lt;/a&gt; for realtime sync between multiple nodes and advanced resiliency features like &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheStampede.md&#34;&gt;cache stampede&lt;/a&gt; protection, a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/FailSafe.md&#34;&gt;fail-safe&lt;/a&gt; mechanism, &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;soft/hard timeouts&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/EagerRefresh.md&#34;&gt;eager refresh&lt;/a&gt;, full observability via &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Logging.md&#34;&gt;logging&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/OpenTelemetry.md&#34;&gt;OpenTelemetry&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Tagging.md&#34;&gt;tagging&lt;/a&gt; and much more.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s being used in production on real-world projects with huge volumes for years, and is even used by Microsoft itself in its products like &lt;a href=&#34;https://devblogs.microsoft.com/azure-sql/data-api-builder-ga/&#34;&gt;Data API Builder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also compatible with the new HybridCache from Microsoft, thanks to a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/MicrosoftHybridCache.md&#34;&gt;powerful integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üèÜ Awards&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/google-award-128x128.png&#34; alt=&#34;Google OSS Award&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;In 2021 FusionCache received the &lt;a href=&#34;https://twitter.com/jodydonetti/status/1422550932433350666&#34;&gt;Google Open Source Peer Bonus Award&lt;/a&gt;: here is the &lt;a href=&#34;https://opensource.googleblog.com/2021/09/announcing-latest-open-source-peer-bonus-winners.html&#34;&gt;official blogpost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìï Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AGentleIntroduction.md&#34;&gt;ü¶Ñ A Gentle Introduction&lt;/a&gt; you&#39;ll get yourself comfortable with the overall concepts.&lt;/p&gt; &#xA;&lt;p&gt;Want to start using it immediately? There&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/#-quick-start&#34;&gt;‚≠ê Quick Start&lt;/a&gt; for you.&lt;/p&gt; &#xA;&lt;p&gt;What about each global or entry option? Sure thing, there&#39;s an üéöÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Options.md&#34;&gt;Options&lt;/a&gt; page for that.&lt;/p&gt; &#xA;&lt;p&gt;Curious about what you can achieve from start to finish? There&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/StepByStep.md&#34;&gt;üë©‚Äçüè´ Step By Step &lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;In search of all the docs? There&#39;s a &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/README.md&#34;&gt;page&lt;/a&gt; for that, too.&lt;/p&gt; &#xA;&lt;h2&gt;üì∫ Media&lt;/h2&gt; &#xA;&lt;p&gt;More into videos?&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been lucky enough to be invited on some shows and podcasts here and there: you can find them in the &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Media.md&#34;&gt;Media&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;A good example is when the fine folks at &lt;a href=&#34;https://learn.microsoft.com/en-us/shows/on-net/&#34;&gt;On .NET&lt;/a&gt; invited me on the show to allow me to mumbling random caching stuff.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hCswI2goi7s&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/images/talks/on-dotnet-small.jpg&#34; alt=&#34;On .NET Talk&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;‚úî Features&lt;/h2&gt; &#xA;&lt;p&gt;FusionCache has a lot of features, let&#39;s see them grouped together:&lt;/p&gt; &#xA;&lt;h4&gt;Resiliency&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheStampede.md&#34;&gt;&lt;strong&gt;üõ°Ô∏è Cache Stampede&lt;/strong&gt;&lt;/a&gt;: automatic protection from the Cache Stampede problem&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/FailSafe.md&#34;&gt;&lt;strong&gt;üí£ Fail-Safe&lt;/strong&gt;&lt;/a&gt;: a mechanism to avoids transient failures, by reusing an expired entry as a temporary fallback&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AutoRecovery.md&#34;&gt;&lt;strong&gt;‚Ü©Ô∏è Auto-Recovery&lt;/strong&gt;&lt;/a&gt;: self-healing for the entire cache, all automatically&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Performance &amp;amp; Scalability&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheLevels.md&#34;&gt;&lt;strong&gt;üîÄ L1+L2&lt;/strong&gt;&lt;/a&gt;: any implementation of &lt;code&gt;IDistributedCache&lt;/code&gt; can be used as an optional 2nd level, all transparently&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Backplane.md&#34;&gt;&lt;strong&gt;üì¢ Backplane&lt;/strong&gt;&lt;/a&gt;: in a multi-node scenario, it can notify the other nodes about changes in the cache, so all will be in-sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;&lt;strong&gt;‚è± Soft/Hard Timeouts&lt;/strong&gt;&lt;/a&gt;: a slow factory (or distributed cache) will not slow down your application, and no data will be wasted&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/EagerRefresh.md&#34;&gt;&lt;strong&gt;ü¶Ö Eager Refresh&lt;/strong&gt;&lt;/a&gt;: start a non-blocking background refresh before the expiration occurs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/ConditionalRefresh.md&#34;&gt;&lt;strong&gt;üîÇ Conditional Refresh&lt;/strong&gt;&lt;/a&gt;: like HTTP Conditional Requests, but for caching&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/BackgroundDistributedOperations.md&#34;&gt;&lt;strong&gt;üöÄ Background Distributed Operations&lt;/strong&gt;&lt;/a&gt;: distributed operations can easily be executed in the background, safely, for better performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Flexibility&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/NamedCaches.md&#34;&gt;&lt;strong&gt;üìõ Named Caches&lt;/strong&gt;&lt;/a&gt;: easily work with multiple named caches, even if differently configured&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Tagging.md&#34;&gt;&lt;strong&gt;üè∑Ô∏è Tagging&lt;/strong&gt;&lt;/a&gt;: tags can be associated to entries, to later expire them all at once&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Clear.md&#34;&gt;&lt;strong&gt;üßº Clear&lt;/strong&gt;&lt;/a&gt;: clear an entire cache, even with shared L2, cache key prefix, etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/MicrosoftHybridCache.md&#34;&gt;&lt;strong&gt;‚ìÇÔ∏è Microsoft HybridCache&lt;/strong&gt;&lt;/a&gt;: can be used as an implementation of the new HybridCache abstraction from Microsoft, all while adding extra features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AdaptiveCaching.md&#34;&gt;&lt;strong&gt;üßô‚Äç‚ôÇÔ∏è Adaptive Caching&lt;/strong&gt;&lt;/a&gt;: for when you don&#39;t know upfront the entry options (eg: &lt;code&gt;Duration&lt;/code&gt;), since they depends on the value being cached itself&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/DependencyInjection.md&#34;&gt;&lt;strong&gt;üîÉ Dependency Injection + Builder&lt;/strong&gt;&lt;/a&gt;: native support for Dependency Injection, with a nice fluent interface including a Builder support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AutoClone.md&#34;&gt;&lt;strong&gt;‚ôä Auto-Clone&lt;/strong&gt;&lt;/a&gt;: be sure that cached values returned can be safely modified&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CoreMethods.md&#34;&gt;&lt;strong&gt;üí´ Fully sync/async&lt;/strong&gt;&lt;/a&gt;: native support for both the synchronous and asynchronous programming model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Plugins.md&#34;&gt;&lt;strong&gt;üß© Plugins&lt;/strong&gt;&lt;/a&gt;: extend FusionCache with additional behavior like adding support for metrics, statistics, etc...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Observability&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/OpenTelemetry.md&#34;&gt;&lt;strong&gt;üî≠ OpenTelemetry&lt;/strong&gt;&lt;/a&gt;: native observability support via OpenTelemetry&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Logging.md&#34;&gt;&lt;strong&gt;üìú Logging&lt;/strong&gt;&lt;/a&gt;: comprehensive, structured and customizable, via the standard &lt;code&gt;ILogger&lt;/code&gt; interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Events.md&#34;&gt;&lt;strong&gt;üìû Events&lt;/strong&gt;&lt;/a&gt;: a comprehensive set of events, both at a high level and at lower levels (memory/distributed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That was a lot, but not all!&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Something more üòè ?&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;Also, FusionCache has some nice &lt;strong&gt;additional features&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Portable&lt;/strong&gt;: targets .NET Standard 2.0, so it can run almost everywhere&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ High Performance&lt;/strong&gt;: FusionCache is optimized to minimize CPU usage and memory allocations to get better performance and lower the cost of your infrastructure all while obtaining a more stable, error resilient application&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Null caching&lt;/strong&gt;: explicitly supports caching of &lt;code&gt;null&lt;/code&gt; values differently than &#34;no value&#34;. This creates a less ambiguous usage, and typically leads to better performance because it avoids the classic problem of not being able to differentiate between &lt;em&gt;&#34;the value was not in the cache, go check the database&#34;&lt;/em&gt; and &lt;em&gt;&#34;the value was in the cache, and it was &lt;code&gt;null&lt;/code&gt;&#34;&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Circuit-breaker&lt;/strong&gt;: it is possible to enable a simple circuit-breaker for when the distributed cache or the backplane become temporarily unavailable. This will prevent those components to be hit with an excessive load of requests (that would probably fail anyway) in a problematic moment, so it can gracefully get back on its feet. More advanced scenarios can be covered using a dedicated solution, like &lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Dynamic Jittering&lt;/strong&gt;: setting &lt;code&gt;JitterMaxDuration&lt;/code&gt; will add a small randomized extra duration to a cache entry&#39;s normal duration. This is useful to prevent variations of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cache_stampede&#34;&gt;Cache Stampede problem&lt;/a&gt; in a multi-node scenario&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Cancellation&lt;/strong&gt;: every method supports cancellation via the standard &lt;code&gt;CancellationToken&lt;/code&gt;, so it is easy to cancel an entire pipeline of operation gracefully&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Code comments&lt;/strong&gt;: every property and method is fully documented in code, with useful informations provided via IntelliSense or similar technologies&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;‚úÖ Fully annotated for &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references&#34;&gt;nullability&lt;/a&gt;&lt;/strong&gt;: every usage of nullable references has been annotated for a better flow analysis by the compiler&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üì¶ Packages&lt;/h2&gt; &#xA;&lt;p&gt;Main packages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache/&#34;&gt;ZiggyCreatures.FusionCache&lt;/a&gt; &lt;br&gt; The core package&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.OpenTelemetry/&#34;&gt;ZiggyCreatures.FusionCache.OpenTelemetry&lt;/a&gt; &lt;br&gt; Adds native support for OpenTelemetry setup&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.OpenTelemetry/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.OpenTelemetry.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.OpenTelemetry&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Chaos/&#34;&gt;ZiggyCreatures.FusionCache.Chaos&lt;/a&gt; &lt;br&gt; A package to add some controlled chaos, for testing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Chaos/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Chaos.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Chaos&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Serializers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson&lt;/a&gt; &lt;br&gt; A serializer, based on Newtonsoft Json.NET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.NewtonsoftJson&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.SystemTextJson/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.SystemTextJson&lt;/a&gt; &lt;br&gt; A serializer, based on the new System.Text.Json&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.SystemTextJson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.SystemTextJson.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.SystemTextJson&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack&lt;/a&gt; &lt;br&gt; A MessagePack serializer, based on the most used &lt;a href=&#34;https://github.com/neuecc/MessagePack-CSharp&#34;&gt;MessagePack&lt;/a&gt; serializer on .NET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.NeueccMessagePack&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.ProtoBufNet&lt;/a&gt; &lt;br&gt; A Protobuf serializer, based on one of the most used &lt;a href=&#34;https://github.com/protobuf-net/protobuf-net&#34;&gt;protobuf-net&lt;/a&gt; serializer on .NET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.ProtoBufNet&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack&lt;/a&gt; &lt;br&gt; A serializer based on the uber fast new serializer by Neuecc, &lt;a href=&#34;https://github.com/Cysharp/MemoryPack&#34;&gt;MemoryPack&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.CysharpMemoryPack&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson/&#34;&gt;ZiggyCreatures.FusionCache.Serialization.ServiceStackJson&lt;/a&gt; &lt;br&gt; A serializer based on the &lt;a href=&#34;https://servicestack.net/&#34;&gt;ServiceStack&lt;/a&gt; JSON serializer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Serialization.ServiceStackJson&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Backplanes:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.Memory/&#34;&gt;ZiggyCreatures.FusionCache.Backplane.Memory&lt;/a&gt; &lt;br&gt; An in-memory backplane (mainly for testing)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.Memory/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Backplane.Memory.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Backplane.Memory&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis/&#34;&gt;ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis&lt;/a&gt; &lt;br&gt; A Redis backplane, based on StackExchange.Redis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/ZiggyCreatures.FusionCache.Backplane.StackExchangeRedis&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Third-party packages:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Downloads&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core/&#34;&gt;JoeShook.ZiggyCreatures.FusionCache.Metrics.Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/JoeShook.ZiggyCreatures.FusionCache.Metrics.Core&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters/&#34;&gt;JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/JoeShook.ZiggyCreatures.FusionCache.Metrics.EventCounters&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics/&#34;&gt;JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/JoeShook.ZiggyCreatures.FusionCache.Metrics.AppMetrics&#34; alt=&#34;Nuget&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‚≠ê Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Just install the &lt;code&gt;ZiggyCreatures.FusionCache&lt;/code&gt; Nuget package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;PM&amp;gt; Install-Package ZiggyCreatures.FusionCache&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, let&#39;s say we have a method that loads a product from the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Product GetProductFromDb(int id) {&#xA;&#x9;// DATABASE CALL HERE&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(This is using the &lt;strong&gt;sync&lt;/strong&gt; programming model, but it would be equally valid with the newer &lt;strong&gt;async&lt;/strong&gt; one)&lt;/p&gt; &#xA;&lt;p&gt;Then we create a FusionCache instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cache = new FusionCache(new FusionCacheOptions());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if using &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/DependencyInjection.md&#34;&gt;dependency injection&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddFusionCache();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, to get the product from the cache and, if not there, get it from the database in an optimized way and cache it for &lt;code&gt;30 sec&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var id = 42;&#xA;&#xA;cache.GetOrSet&amp;lt;Product&amp;gt;(&#xA;&#x9;$&#34;product:{id}&#34;,&#xA;&#x9;_ =&amp;gt; GetProductFromDb(id),&#xA;&#x9;TimeSpan.FromSeconds(30)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Want a little bit more üòè ?&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;We can also specify some global options, like a default &lt;code&gt;FusionCacheEntryOptions&lt;/code&gt; object to serve as a default for each call we&#39;ll make, with a duration of &lt;code&gt;2 minutes&lt;/code&gt; and a &lt;code&gt;Low&lt;/code&gt; priority:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cache = new FusionCache(new FusionCacheOptions() {&#xA;&#x9;DefaultEntryOptions = new FusionCacheEntryOptions {&#xA;&#x9;&#x9;Duration = TimeSpan.FromMinutes(2),&#xA;&#x9;&#x9;Priority = CacheItemPriority.Low&#xA;&#x9;}&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or, using DI, like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddFusionCache()&#xA;&#x9;.WithDefaultEntryOptions(new FusionCacheEntryOptions {&#xA;&#x9;&#x9;Duration = TimeSpan.FromMinutes(2),&#xA;&#x9;&#x9;Priority = CacheItemPriority.Low&#xA;&#x9;})&#xA;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now, imagine we want to do the same, but also:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;set the &lt;strong&gt;priority&lt;/strong&gt; of the cache item to &lt;code&gt;High&lt;/code&gt; (mainly used in the underlying memory cache)&lt;/li&gt; &#xA;  &lt;li&gt;enable &lt;strong&gt;fail-safe&lt;/strong&gt; for &lt;code&gt;2 hours&lt;/code&gt;, to allow an expired value to be used again in case of problems with the database (&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/FailSafe.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;set a factory &lt;strong&gt;soft timeout&lt;/strong&gt; of &lt;code&gt;100 ms&lt;/code&gt;, to avoid too slow factories crumbling your application when there&#39;s a fallback value readily available (&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;set a factory &lt;strong&gt;hard timeout&lt;/strong&gt; of &lt;code&gt;2 sec&lt;/code&gt;, so that, even if there is no fallback value to use, you will not wait undefinitely but instead an exception will be thrown to let you handle it however you want (&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Timeouts.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;To do all of that we simply have to change the last line (reformatted for better readability):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;cache.GetOrSet&amp;lt;Product&amp;gt;(&#xA;&#x9;$&#34;product:{id}&#34;,&#xA;&#x9;_ =&amp;gt; GetProductFromDb(id),&#xA;&#x9;// THIS IS WHERE THE MAGIC HAPPENS&#xA;&#x9;options =&amp;gt; options&#xA;&#x9;&#x9;.SetDuration(TimeSpan.FromSeconds(30))&#xA;&#x9;&#x9;.SetPriority(CacheItemPriority.High)&#xA;&#x9;&#x9;.SetFailSafe(true, TimeSpan.FromHours(2))&#xA;&#x9;&#x9;.SetFactoryTimeouts(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(2))&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Basically, on top of specifying the &lt;em&gt;cache key&lt;/em&gt; and the &lt;em&gt;factory&lt;/em&gt;, instead of specifying just a &lt;em&gt;duration&lt;/em&gt; as a &lt;code&gt;TimeSpan&lt;/code&gt; we specify a &lt;code&gt;FusionCacheEntryOptions&lt;/code&gt; object - which contains all the options needed to control the behavior of FusionCache during each operation - in the form of a lambda that automatically duplicates the default entry options defined before (to copy all our defaults) while giving us a chance to modify it as we like for this specific call.&lt;/p&gt; &#xA; &lt;p&gt;Now let&#39;s say we really like these set of options (&lt;em&gt;priority&lt;/em&gt;, &lt;em&gt;fail-safe&lt;/em&gt; and &lt;em&gt;factory timeouts&lt;/em&gt;) and we want them to be the overall defaults, while keeping the ability to change something on a per-call basis (like the &lt;em&gt;duration&lt;/em&gt;).&lt;/p&gt; &#xA; &lt;p&gt;To do that we simply &lt;strong&gt;move&lt;/strong&gt; the customization of the entry options where we created the &lt;code&gt;DefaultEntryOptions&lt;/code&gt;, by changing it to something like this (the same is true for the DI way):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var cache = new FusionCache(new FusionCacheOptions() {&#xA;&#x9;DefaultEntryOptions = new FusionCacheEntryOptions()&#xA;&#x9;&#x9;.SetDuration(TimeSpan.FromMinutes(2))&#xA;&#x9;&#x9;.SetPriority(CacheItemPriority.High)&#xA;&#x9;&#x9;.SetFailSafe(true, TimeSpan.FromHours(2))&#xA;&#x9;&#x9;.SetFactoryTimeouts(TimeSpan.FromMilliseconds(100), TimeSpan.FromSeconds(2))&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now these options will serve as the &lt;strong&gt;cache-wide default&lt;/strong&gt;, usable in every method call as a &#34;starting point&#34;.&lt;/p&gt; &#xA; &lt;p&gt;Then, we just change our method call to simply this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var id = 42;&#xA;&#xA;cache.GetOrSet&amp;lt;Product&amp;gt;(&#xA;&#x9;$&#34;product:{id}&#34;,&#xA;&#x9;_ =&amp;gt; GetProductFromDb(id),&#xA;&#x9;options =&amp;gt; options.SetDuration(TimeSpan.FromSeconds(30))&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;DefaultEntryOptions&lt;/code&gt; we did set before will be duplicated and only the duration will be changed for this call.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;strong&gt;üë©‚Äçüè´ Step By Step&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you are in for a ride you can read a complete &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/StepByStep.md&#34;&gt;step by step example&lt;/a&gt; of why a cache is useful, why FusionCache could be even more so, how to apply most of the options available and what &lt;strong&gt;results&lt;/strong&gt; you can expect to obtain.&lt;/p&gt; &#xA;&lt;div style=&#34;text-align:center;&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/images/stepbystep-intro.png&#34; alt=&#34;FusionCache diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Simulator&lt;/h2&gt; &#xA;&lt;p&gt;Distributed systems are, in general, quite complex to understand.&lt;/p&gt; &#xA;&lt;p&gt;When using FusionCache with the &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/CacheLevels.md&#34;&gt;distributed cache&lt;/a&gt;, the &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Backplane.md&#34;&gt;backplane&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/AutoRecovery.md&#34;&gt;auto-recovery&lt;/a&gt; the Simulator can help us &lt;strong&gt;see&lt;/strong&gt; the whole picture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Simulator.md&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/6jGX6ePgD3Q/maxresdefault.jpg&#34; alt=&#34;FusionCache Simulator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üß∞ Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;FusionCache targets &lt;code&gt;.NET Standard 2.0&lt;/code&gt; so any compatible .NET implementation is fine: this means &lt;code&gt;.NET Framework&lt;/code&gt; (the old one), &lt;code&gt;.NET Core 2+&lt;/code&gt; and &lt;code&gt;.NET 5/6/7/8+&lt;/code&gt; (the new ones), &lt;code&gt;Mono&lt;/code&gt; 5.4+ and more (see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support&#34;&gt;here&lt;/a&gt; for a complete rundown).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: if you are running on &lt;strong&gt;.NET Framework 4.6.1&lt;/strong&gt; and want to use &lt;strong&gt;.NET Standard&lt;/strong&gt; packages Microsoft suggests to upgrade to .NET Framework 4.7.2 or higher (see the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support&#34;&gt;.NET Standard Documentation&lt;/a&gt;) to avoid some known dependency issues.&lt;/p&gt; &#xA;&lt;h2&gt;üÜé Comparison&lt;/h2&gt; &#xA;&lt;p&gt;There are various alternatives out there with different features, different performance characteristics (cpu/memory) and in general a different set of pros/cons.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/ZiggyCreatures/FusionCache/main/docs/Comparison.md&#34;&gt;feature comparison&lt;/a&gt; between existing .NET caching solutions may help you choose which one to use.&lt;/p&gt; &#xA;&lt;h2&gt;üíº Is it Production Ready &lt;span&gt;‚Ñ¢&lt;/span&gt; ?&lt;/h2&gt; &#xA;&lt;p&gt;Yes!&lt;/p&gt; &#xA;&lt;p&gt;FusionCache is being used &lt;strong&gt;in production&lt;/strong&gt; on &lt;strong&gt;real world projects&lt;/strong&gt; for years, happily handling billions of requests.&lt;/p&gt; &#xA;&lt;p&gt;Considering that the FusionCache packages have been downloaded more than &lt;strong&gt;10 million times&lt;/strong&gt; (thanks everybody!) it may very well be used even more.&lt;/p&gt; &#xA;&lt;p&gt;Oh, and it is being used in products by Microsoft itself, like &lt;a href=&#34;https://devblogs.microsoft.com/azure-sql/data-api-builder-ga/&#34;&gt;Data API Builder&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;üí∞ Support&lt;/h2&gt; &#xA;&lt;p&gt;Nothing to do here.&lt;/p&gt; &#xA;&lt;p&gt;After years of using a lot of open source stuff for free, this is just me trying to give something back to the community.&lt;/p&gt; &#xA;&lt;p&gt;If you really want to talk about money, please consider making &lt;strong&gt;‚ù§ a donation to a good cause&lt;/strong&gt; of your choosing, and let me know about that.&lt;/p&gt; &#xA;&lt;h2&gt;üòç Are you using it?&lt;/h2&gt; &#xA;&lt;p&gt;If you find FusionCache useful please &lt;a href=&#34;https://github.com/ZiggyCreatures/FusionCache/discussions/new?category=show-and-tell&amp;amp;title=I%27m%20using%20FusionCache!&amp;amp;body=%23%23%20Scenario%0ADescribe%20how%20you%20are%20using%20FusionCache:%20commercial%20product,%20oss%20project,%20monolith,%20microservice,%20web,%20mobile%20app,%20CLI,%20etc%0A%0A%23%23%20Liked%0AWhat%20you%20liked,%20features,%20docs%20or%20anything%0A%0A%23%23%20Unliked/Missing%0AThings%20you%20didn%27t%20like%20or%20felt%20was%20missing%0A%0A%23%23%20Closing%20Thoughts%0AAny%20closing%20thoughts&#34;&gt;let me know&lt;/a&gt;, I&#39;m really interested!&lt;/p&gt; &#xA;&lt;p&gt;This is the only way for me to know how it is helping people.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shouldly/shouldly</title>
    <updated>2025-01-26T01:41:51Z</updated>
    <id>tag:github.com,2025-01-26:/shouldly/shouldly</id>
    <link href="https://github.com/shouldly/shouldly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Should testing for .NET‚Äîthe way assertions should be!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shouldly/shouldly/master/assets/logo_350x84.png&#34; alt=&#34;Shouldly Logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shouldly/shouldly/actions/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://github.com/shouldly/shouldly/actions/workflows/CI.yml/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Shouldly&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/shouldly.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Shouldly&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/shouldly.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/shouldly/shouldly?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/shouldly/shouldly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shouldly is an assertion framework which focuses on giving great error messages when the assertion fails while being simple and terse.&lt;/p&gt; &#xA;&lt;p&gt;This is the old &lt;em&gt;Assert&lt;/em&gt; way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Assert.That(contestant.Points, Is.EqualTo(1337));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For your troubles, you get this message, when it fails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Expected 1337 but was 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How it &lt;strong&gt;Should&lt;/strong&gt; be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;contestant.Points.ShouldBe(1337);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which is just syntax, so far, but check out the message when it fails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;contestant.Points should be 1337 but was 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It might be easy to underestimate how useful this is. Another example, side by side:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Assert.That(map.IndexOfValue(&#34;boo&#34;), Is.EqualTo(2));    // -&amp;gt; Expected 2 but was -1&#xA;map.IndexOfValue(&#34;boo&#34;).ShouldBe(2);                    // -&amp;gt; map.IndexOfValue(&#34;boo&#34;) should be 2 but was -1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Shouldly&lt;/strong&gt; uses the code before the &lt;em&gt;ShouldBe&lt;/em&gt; statement to report on errors, which makes diagnosing easier.&lt;/p&gt; &#xA;&lt;p&gt;Read more about Shouldly and its features at &lt;a href=&#34;https://docs.shouldly.org/&#34;&gt;https://docs.shouldly.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Shouldly can be &lt;a href=&#34;https://www.nuget.org/packages/Shouldly/&#34;&gt;found here on NuGet&lt;/a&gt; and can be installed by copying and pasting the following command into your Package Manager Console within Visual Studio (Tools &amp;gt; NuGet Package Manager &amp;gt; Package Manager Console).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Install-Package Shouldly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively if you&#39;re using .NET Core then you can install Shouldly via the command line interface with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package Shouldly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Shouldly are very welcome. For guidance, please see &lt;a href=&#34;https://raw.githubusercontent.com/shouldly/shouldly/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>