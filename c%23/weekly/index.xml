<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:40:39Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davidfowl/TodoApi</title>
    <updated>2022-12-04T01:40:39Z</updated>
    <id>tag:github.com,2022-12-04:/davidfowl/TodoApi</id>
    <link href="https://github.com/davidfowl/TodoApi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Todo application with ASP.NET Core Blazor WASM, Minimal APIs and Authentication&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Todo application with ASP.NET Core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/davidfowl/TodoApi/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/davidfowl/TodoApi/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a Todo application that features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web&#34;&gt;&lt;strong&gt;Todo.Web&lt;/strong&gt;&lt;/a&gt; - An ASP.NET Core hosted Blazor WASM front end application&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;&lt;strong&gt;TodoApi&lt;/strong&gt;&lt;/a&gt; - An ASP.NET Core REST API backend using minimal APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/95136/204161352-bc54ccb7-32cf-49ba-a6f7-f46d0f2d204f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It showcases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blazor WebAssembly&lt;/li&gt; &#xA; &lt;li&gt;Minimal APIs&lt;/li&gt; &#xA; &lt;li&gt;Using EntityFramework and SQLite for data access&lt;/li&gt; &#xA; &lt;li&gt;OpenAPI&lt;/li&gt; &#xA; &lt;li&gt;User management with ASP.NET Core Identity&lt;/li&gt; &#xA; &lt;li&gt;Cookie authentication&lt;/li&gt; &#xA; &lt;li&gt;JWT authentication&lt;/li&gt; &#xA; &lt;li&gt;Proxying requests from the front end application server using YARP&#39;s IHttpForwarder&lt;/li&gt; &#xA; &lt;li&gt;Rate Limiting&lt;/li&gt; &#xA; &lt;li&gt;Writing integration tests for your REST API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;.NET&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download&#34;&gt;Install .NET 7&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the &lt;strong&gt;dotnet-ef&lt;/strong&gt; tool: &lt;code&gt;dotnet tool install dotnet-ef -g&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the &lt;code&gt;TodoApi&lt;/code&gt; folder. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;mkdir .db&lt;/code&gt; to create the local database folder.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;dotnet ef database update&lt;/code&gt; to create the database.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Learn more about &lt;a href=&#34;https://learn.microsoft.com/en-us/ef/core/cli/dotnet&#34;&gt;dotnet-ef&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;JWT&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To initialize the keys for JWT generation, run &lt;code&gt;dotnet user-jwts&lt;/code&gt; in to &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;TodoApi&lt;/a&gt; folder:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet user-jwts create&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the application&lt;/h3&gt; &#xA;&lt;p&gt;To run the application, run both the &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web/Server&#34;&gt;Todo.Web/Server&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;TodoApi&lt;/a&gt;. Below are different ways to run both applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt; - Setup multiple startup projects by right clicking on the solution and selecting Properties. Select &lt;code&gt;TodoApi&lt;/code&gt; and &lt;code&gt;Todo.Web.Server&lt;/code&gt; as startup projects.&lt;/p&gt; &lt;img width=&#34;591&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/95136/204311327-479445c8-4f73-4845-b146-d56be8ceb9ab.png&#34;&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; - Open up 2 terminal windows, one in &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web/Server/&#34;&gt;Todo.Web.Server&lt;/a&gt; and the other in &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi/&#34;&gt;TodoApi&lt;/a&gt; run:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet watch run -lp https&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will run both applications with the &lt;code&gt;https&lt;/code&gt; profile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tye&lt;/strong&gt; - Install the global tool using the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet tool install --global Microsoft.Tye --version 0.11.0-alpha.22111.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Run &lt;code&gt;tye run&lt;/code&gt; in the repository root and navigate to the tye dashboard (usually &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;) to see both applications running.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; - Open your terminal, navigate to the root folder of this project and run the following commands:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Build a docker image for the &lt;code&gt;TodoApi&lt;/code&gt; directly from dotnet publish.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet publish ./TodoApi/TodoApi.csproj --os linux --arch x64 /t:PublishContainer -c Release&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Build a docker image for the &lt;code&gt;Todo.Web.Server&lt;/code&gt; directly from dotnet publish.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet publish ./Todo.Web/Server/Todo.Web.Server.csproj --os linux --arch x64 /t:PublishContainer -c Release --self-contained true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Generate certificate and configure local machine so we can start our apps with https support using docker compose.&lt;/p&gt; &lt;p&gt;Windows using Linux containers&lt;/p&gt; &lt;pre&gt;&lt;code&gt;set PASSWORD YourPasswordHere&#xA;dotnet dev-certs https -ep ${HOME}/.aspnet/https/todoapps.pfx -p $PASSWORD --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;macOS or Linux&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export PASSWORD=YourPasswordHere&#xA;dotnet dev-certs https -ep ~/.aspnet/https/todoapps.pfx -p $PASSWORD --trust&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Change these variables below in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to match your https certificate and password.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ASPNETCORE_Kestrel__Certificates__Default__Password&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ASPNETCORE_Kestrel__Certificates__Default__Path&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt; to spin up both apps todo-api and todo-web-server plus jaeger and prometheus.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Navigate to the Todo Web app &lt;a href=&#34;https://localhost:5003&#34;&gt;https://localhost:5003&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optional&lt;/h2&gt; &#xA;&lt;h3&gt;Using the API standalone&lt;/h3&gt; &#xA;&lt;p&gt;The Todo REST API can run standalone as well. You can run the &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/TodoApi&#34;&gt;TodoApi&lt;/a&gt; project and make requests to various endpoints using the Swagger UI (or a client of your choice):&lt;/p&gt; &#xA;&lt;img width=&#34;1200&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/95136/204315486-86d25a5f-1164-467a-9891-827343b9f0e8.png&#34;&gt; &#xA;&lt;p&gt;Before executing any requests, you need to create a user and get an auth token.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To create a new user, run the application and POST a JSON payload to &lt;code&gt;/users&lt;/code&gt; endpoint:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;username&#34;: &#34;myuser&#34;,&#xA;  &#34;password&#34;: &#34;&amp;lt;put a password here&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get a token for the above user run &lt;code&gt;dotnet user-jwts&lt;/code&gt; to create a JWT token with the same user name specified above e.g:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet user-jwts create -n myuser&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should be able to use this token to make authenticated requests to the todo endpoints.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Learn more about &lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/security?view=aspnetcore-7.0#using-dotnet-user-jwts-to-improve-development-time-testing&#34;&gt;user-jwts&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Social authentication&lt;/h3&gt; &#xA;&lt;p&gt;In addition to username and password, social authentication providers can be configured to work with this todo application. By default it supports Github, Google, and Microsoft accounts.&lt;/p&gt; &#xA;&lt;p&gt;Instructions for setting up each of these providers can be found at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/developers/apps/building-oauth-apps&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/microsoft-logins&#34;&gt;Microsoft&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/aspnet/core/security/authentication/social/google-logins&#34;&gt;Google&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you obtain the client id and client secret, the configuration for these providers must be added with the following schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;Authentication&#34;: {&#xA;        &#34;Schemes&#34;: {&#xA;            &#34;&amp;lt;scheme&amp;gt;&#34;: {&#xA;                &#34;ClientId&#34;: &#34;xxx&#34;,&#xA;                &#34;ClientSecret&#34;: &#34;xxxx&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or using environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Authentication__Schemes__&amp;lt;scheme&amp;gt;__ClientId=xxx&#xA;Authentication__Schemes__&amp;lt;scheme&amp;gt;__ClientSecret=xxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other providers can be found &lt;a href=&#34;https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers#providers&#34;&gt;here&lt;/a&gt;. These must be added to &lt;a href=&#34;https://raw.githubusercontent.com/davidfowl/TodoApi/main/Todo.Web/Server/Authentication/AuthenticationExtensions.cs&#34;&gt;AuthenticationExtensions&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Don&#39;t store client secrets in configuration!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OpenTelemetry&lt;/h3&gt; &#xA;&lt;p&gt;TodoApi uses OpenTelemetry to collect logs, metrics and spans.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to view the collected telemetry, follow the steps below.&lt;/p&gt; &#xA;&lt;h4&gt;Metrics&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run Prometheus with Docker:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -p 9090:9090 --name prometheus -v $PWD/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:9090/&#34;&gt;Prometheus in your browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Query the collected metrics&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Spans&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure environment variable &lt;code&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt; with the right endpoint URL to enable &lt;code&gt;.AddOtlpExporter&lt;/code&gt; below &lt;code&gt;builder.Services.AddOpenTelemetryTracing&lt;/code&gt;, in the &lt;code&gt;TodoApi/OpenTelemetryExtensions.cs&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Run Jaeger with Docker:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d --name jaeger -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 -e COLLECTOR_OTLP_ENABLED=true -p 6831:6831/udp -p 6832:6832/udp -p 5778:5778 -p 16686:16686 -p 4317:4317 -p 4318:4318 -p 14250:14250 -p 14268:14268 -p 14269:14269 -p 9411:9411 jaegertracing/all-in-one:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:16686/&#34;&gt;Jaeger in your browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;View the collected spans&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Logs&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure environment variable &lt;code&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt; with the right endpoint URL to enable &lt;code&gt;.AddOtlpExporter&lt;/code&gt; below &lt;code&gt;builder.Logging.AddOpenTelemetry&lt;/code&gt;, in the &lt;code&gt;TodoApi/Extensions/OpenTelemetryExtensions.cs&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Find a Vendor that supports OpenTelemetry-based logging.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Vendor support for OpenTelemetry-based logging is currently very limited.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nilaoda/N_m3u8DL-RE</title>
    <updated>2022-12-04T01:40:39Z</updated>
    <id>tag:github.com,2022-12-04:/nilaoda/N_m3u8DL-RE</id>
    <link href="https://github.com/nilaoda/N_m3u8DL-RE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross-Platform, modern and powerful stream downloader for MPD/M3U8/ISM. English/简体中文/繁體中文.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;N_m3u8DL-RE&lt;/h1&gt; &#xA;&lt;p&gt;跨平台的DASH/HLS/MSS下载工具。支持点播、直播(DASH/HLS)。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;版本较低的Windows系统自带的终端可能不支持本程序，替代方案：在 &lt;a href=&#34;https://github.com/cmderdev/cmder&#34;&gt;cmder&lt;/a&gt; 中运行。&lt;/p&gt; &#xA;&lt;p&gt;Arch Linux 可以从 AUR 获取：&lt;a href=&#34;https://aur.archlinux.org/packages/n-m3u8dl-re-bin&#34;&gt;n-m3u8dl-re-bin&lt;/a&gt;、&lt;a href=&#34;https://aur.archlinux.org/packages/n-m3u8dl-re-git&#34;&gt;n-m3u8dl-re-git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Arch Linux 及其衍生版安装 N_m3u8DL-RE 发行版&#xA;yay -Syu n-m3u8dl-re-bin&#xA;&#xA;# Arch Linux 及其衍生版安装 N_m3u8DL-RE 开发版&#xA;yay -Syu n-m3u8dl-re-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;命令行参数&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Description:&#xA;  N_m3u8DL-RE (Beta version) 20221101&#xA;&#xA;Usage:&#xA;  N_m3u8DL-RE &amp;lt;input&amp;gt; [options]&#xA;&#xA;Arguments:&#xA;  &amp;lt;input&amp;gt;  链接或文件&#xA;&#xA;Options:&#xA;  --tmp-dir &amp;lt;tmp-dir&amp;gt;                      设置临时文件存储目录&#xA;  --save-dir &amp;lt;save-dir&amp;gt;                    设置输出目录&#xA;  --save-name &amp;lt;save-name&amp;gt;                  设置保存文件名&#xA;  --base-url &amp;lt;base-url&amp;gt;                    设置BaseURL&#xA;  --thread-count &amp;lt;number&amp;gt;                  设置下载线程数 [default: 8]&#xA;  --download-retry-count &amp;lt;number&amp;gt;          每个分片下载异常时的重试次数 [default: 3]&#xA;  --auto-select                            自动选择所有类型的最佳轨道 [default: False]&#xA;  --skip-merge                             跳过合并分片 [default: False]&#xA;  --skip-download                          跳过下载 [default: False]&#xA;  --check-segments-count                   检测实际下载的分片数量和预期数量是否匹配 [default: True]&#xA;  --binary-merge                           二进制合并 [default: False]&#xA;  --del-after-done                         完成后删除临时文件 [default: True]&#xA;  --no-date-info                           混流时不写入日期信息 [default: False]&#xA;  --write-meta-json                        解析后的信息是否输出json文件 [default: False]&#xA;  --append-url-params                      将输入Url的Params添加至分片, 对某些网站很有用, 例如 kakao.com [default: False]&#xA;  -mt, --concurrent-download               并发下载已选择的音频、视频和字幕 [default: False]&#xA;  -H, --header &amp;lt;header&amp;gt;                    为HTTP请求设置特定的请求头, 例如:&#xA;                                           -H &#34;Cookie: mycookie&#34; -H &#34;User-Agent: iOS&#34;&#xA;  --sub-only                               只选取字幕轨道 [default: False]&#xA;  --sub-format &amp;lt;SRT|VTT&amp;gt;                   字幕输出类型 [default: SRT]&#xA;  --auto-subtitle-fix                      自动修正字幕 [default: True]&#xA;  --ffmpeg-binary-path &amp;lt;PATH&amp;gt;              ffmpeg可执行程序全路径, 例如 C:\Tools\ffmpeg.exe&#xA;  --log-level &amp;lt;DEBUG|ERROR|INFO|OFF|WARN&amp;gt;  设置日志级别 [default: INFO]&#xA;  --ui-language &amp;lt;en-US|zh-CN|zh-TW&amp;gt;        设置UI语言&#xA;  --urlprocessor-args &amp;lt;urlprocessor-args&amp;gt;  此字符串将直接传递给URL Processor&#xA;  --key &amp;lt;key&amp;gt;                              设置解密密钥, 程序调用mp4decrpyt/shaka-packager进行解密. 格式:&#xA;                                           --key KID1:KEY1 --key KID2:KEY2&#xA;  --key-text-file &amp;lt;key-text-file&amp;gt;          设置密钥文件,程序将从文件中按KID搜寻KEY以解密.(不建议使用特大文件)&#xA;  --decryption-binary-path &amp;lt;PATH&amp;gt;          MP4解密所用工具的全路径, 例如 C:\Tools\mp4decrypt.exe&#xA;  --use-shaka-packager                     解密时使用shaka-packager替代mp4decrypt [default: False]&#xA;  --mp4-real-time-decryption               实时解密MP4分片 [default: False]&#xA;  -M, --mux-after-done &amp;lt;OPTIONS&amp;gt;           所有工作完成时尝试混流分离的音视频. 输入 &#34;--morehelp mux-after-done&#34; 以查看详细信息&#xA;  --custom-hls-method &amp;lt;METHOD&amp;gt;             指定HLS加密方式 (AES_128|AES_128_ECB|CENC|CHACHA20|NONE|SAMPLE_AES|SAMPLE_AES_CTR|UNKNOWN)&#xA;  --custom-hls-key &amp;lt;FILE|HEX|BASE64&amp;gt;       指定HLS解密KEY. 可以是文件, HEX或Base64&#xA;  --custom-hls-iv &amp;lt;FILE|HEX|BASE64&amp;gt;        指定HLS解密IV. 可以是文件, HEX或Base64&#xA;  --use-system-proxy                       使用系统默认代理 [default: True]&#xA;  --custom-proxy &amp;lt;URL&amp;gt;                     设置请求代理, 如 http://127.0.0.1:8888&#xA;  --live-perform-as-vod                    以点播方式下载直播流 [default: False]&#xA;  --live-real-time-merge                   录制直播时实时合并 [default: False]&#xA;  --live-keep-segments                     录制直播并开启实时合并时依然保留分片 [default: True]&#xA;  --live-record-limit &amp;lt;HH:mm:ss&amp;gt;           录制直播时的录制时长限制&#xA;  --live-wait-time &amp;lt;SEC&amp;gt;                   手动设置直播列表刷新间隔&#xA;  --mux-import &amp;lt;OPTIONS&amp;gt;                   混流时引入外部媒体文件. 输入 &#34;--morehelp mux-import&#34; 以查看详细信息&#xA;  -sv, --select-video &amp;lt;OPTIONS&amp;gt;            通过正则表达式选择符合要求的视频流. 输入 &#34;--morehelp select-video&#34; 以查看详细信息&#xA;  -sa, --select-audio &amp;lt;OPTIONS&amp;gt;            通过正则表达式选择符合要求的音频流. 输入 &#34;--morehelp select-audio&#34; 以查看详细信息&#xA;  -ss, --select-subtitle &amp;lt;OPTIONS&amp;gt;         通过正则表达式选择符合要求的字幕流. 输入 &#34;--morehelp select-subtitle&#34; 以查看详细信息&#xA;  --morehelp &amp;lt;OPTION&amp;gt;                      查看某个选项的详细帮助信息&#xA;  --version                                Show version information&#xA;  -?, -h, --help                           Show help and usage information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击查看More Help&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;More Help:&#xA;&#xA;  --mux-after-done&#xA;&#xA;所有工作完成时尝试混流分离的音视频. 你能够以:分隔形式指定如下参数:&#xA;&#xA;* format=FORMAT: 指定混流容器 mkv, mp4&#xA;* muxer=MUXER: 指定混流程序 ffmpeg, mkvmerge (默认: ffmpeg)&#xA;* bin_path=PATH: 指定程序路径 (默认: 自动寻找)&#xA;* keep=BOOL: 混流完成是否删除文件 true, false (默认: true)&#xA;&#xA;例如:&#xA;# 混流为mp4容器&#xA;-M format=mp4&#xA;# 使用mkvmerge, 自动寻找程序&#xA;-M format=mkv:muxer=mkvmerge&#xA;# 使用mkvmerge, 自定义程序路径&#xA;-M format=mkv:muxer=mkvmerge:bin_path=&#34;C\:\Program Files\MKVToolNix\mkvmerge.exe&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code&gt;More Help:&#xA;&#xA;  --mux-import&#xA;&#xA;混流时引入外部媒体文件. 你能够以:分隔形式指定如下参数:&#xA;&#xA;* path=PATH: 指定媒体文件路径&#xA;* lang=CODE: 指定媒体文件语言代码 (非必须)&#xA;* name=NAME: 指定媒体文件描述信息 (非必须)&#xA;&#xA;例如:&#xA;# 引入外部字幕&#xA;--mux-import path=zh-Hans.srt:lang=chi:name=&#34;中文 (简体)&#34;&#xA;# 引入外部音轨+字幕&#xA;--mux-import path=&#34;D\:\media\atmos.m4a&#34;:lang=eng:name=&#34;English Description Audio&#34; --mux-import path=&#34;D\:\media\eng.vtt&#34;:lang=eng:name=&#34;English (Description)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code&gt;More Help:&#xA;&#xA;  --select-video&#xA;&#xA;通过正则表达式选择符合要求的视频流. 你能够以:分隔形式指定如下参数:&#xA;&#xA;id=REGEX:lang=REGEX:name=REGEX:codec=REGEX:res=REGEX&#xA;frame=REGEX:ch=REGEX:range=REGEX:url=REGEX:for=FOR&#xA;&#xA;* for=FOR: 选择方式. best[number], worst[number], all (默认: best)&#xA;&#xA;例如:&#xA;# 选择最佳视频&#xA;-sv best&#xA;# 选择4K+HEVC视频&#xA;-sv res=&#34;3840*&#34;:codec=hvc1:for=best&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code&gt;More Help:&#xA;&#xA;  --select-audio&#xA;&#xA;通过正则表达式选择符合要求的音频流. 参考 --select-video&#xA;&#xA;例如:&#xA;# 选择所有音频&#xA;-sa all&#xA;# 选择最佳英语音轨&#xA;-sa lang=en:for=best&#xA;# 选择最佳的2条英语(或日语)音轨&#xA;-sa lang=&#34;ja|en&#34;:for=best2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code&gt;More Help:&#xA;&#xA;  --select-subtitle&#xA;&#xA;通过正则表达式选择符合要求的字幕流. 参考 --select-video&#xA;&#xA;例如:&#xA;# 选择所有字幕&#xA;-ss all&#xA;# 选择所有带有&#34;中文&#34;的字幕&#xA;-ss name=&#34;中文&#34;:for=all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;运行截图&lt;/h1&gt; &#xA;&lt;h2&gt;点播&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nilaoda/N_m3u8DL-RE/main/img/RE.gif&#34; alt=&#34;RE1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;还可以并行下载+自动混流&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nilaoda/N_m3u8DL-RE/main/img/RE2.gif&#34; alt=&#34;RE2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;直播&lt;/h2&gt; &#xA;&lt;p&gt;录制TS直播源：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://pan.iqiyi.com/file/paopao/W0LfmaMRvuA--uCdOpZ1cldM5JCVhMfIm7KFqr4oKCz80jLn0bBb-9PWmeCFZ-qHpAaQydQ1zk-CHYT_UbRLtw.gif&#34;&gt;click to show gif&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;录制MPD直播源：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://pan.iqiyi.com/file/paopao/nmAV5MOh0yIyHhnxdgM_6th_p2nqrFsM4k-o3cUPwUa8Eh8QOU4uyPkLa_BlBrMa3GBnKWSk8rOaUwbsjKN14g.gif&#34;&gt;click to show gif&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;录制过程中，借助ffmpeg完成对音视频的实时混流&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffmpeg -readrate 1 -i 2022-09-21_19-54-42_V.mp4 -i 2022-09-21_19-54-42_V.chi.m4a -c copy 2022-09-21_19-54-42_V.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;赞助&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/nilaoda&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me A Coffee&#34; height=&#34;41&#34; width=&#34;174&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kgrzybek/modular-monolith-with-ddd</title>
    <updated>2022-12-04T01:40:39Z</updated>
    <id>tag:github.com,2022-12-04:/kgrzybek/modular-monolith-with-ddd</id>
    <link href="https://github.com/kgrzybek/modular-monolith-with-ddd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full Modular Monolith application with Domain-Driven Design approach.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Modular Monolith with DDD&lt;/h1&gt; &#xA;&lt;p&gt;Full Modular Monolith .NET application with Domain-Driven Design approach.&lt;/p&gt; &#xA;&lt;h2&gt;Announcement&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/glory_to_ukraine.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn, use and benefit from this project only if:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You &lt;strong&gt;condemn Russia and its military aggression against Ukraine&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;recognize that Russia is an occupant that unlawfully invaded a sovereign state&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;support Ukraine&#39;s territorial integrity, including its claims over temporarily occupied territories of Crimea and Donbas&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;reject false narratives perpetuated by Russian state propaganda&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Otherwise, leave this project immediately and educate yourself.&lt;/p&gt; &#xA;&lt;p&gt;Putin, idi nachuj.&lt;/p&gt; &#xA;&lt;h2&gt;CI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/kgrzybek/modular-monolith-with-ddd/workflows/Build%20Pipeline/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FrontEnd application&lt;/h2&gt; &#xA;&lt;p&gt;FrontEnd application : &lt;a href=&#34;https://github.com/kgrzybek/modular-monolith-with-ddd-fe-react&#34;&gt;Modular Monolith With DDD: FrontEnd React application&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#1-Introduction&#34;&gt;1. Introduction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#11-purpose-of-this-repository&#34;&gt;1.1 Purpose of this Repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#12-out-of-scope&#34;&gt;1.2 Out of Scope&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#13-reason&#34;&gt;1.3 Reason&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#14-disclaimer&#34;&gt;1.4 Disclaimer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#15-give-a-star&#34;&gt;1.5 Give a Star&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#16-share-it&#34;&gt;1.6 Share It&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#2-Domain&#34;&gt;2. Domain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#21-description&#34;&gt;2.1 Description&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#22-conceptual-model&#34;&gt;2.2 Conceptual Model&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#23-event-storming&#34;&gt;2.3 Event Storming&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#3-Architecture&#34;&gt;3. Architecture&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#30-c4-model&#34;&gt;3.0 C4 Model&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#31-high-level-view&#34;&gt;3.1 High Level View&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#32-module-level-view&#34;&gt;3.2 Module Level View&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#33-api-and-module-communication&#34;&gt;3.3 API and Module Communication&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#34-module-requests-processing-via-cqrs&#34;&gt;3.4 Module Requests Processing via CQRS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#35-domain-model-principles-and-attributes&#34;&gt;3.5 Domain Model Principles and Attributes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#36-cross-cutting-concerns&#34;&gt;3.6 Cross-Cutting Concerns&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#37-modules-integration&#34;&gt;3.7 Modules Integration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#38-internal-processing&#34;&gt;3.8 Internal Processing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#39-security&#34;&gt;3.9 Security&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#310-unit-tests&#34;&gt;3.10 Unit Tests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#311-architecture-decision-log&#34;&gt;3.11 Architecture Decision Log&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#312-architecture-unit-tests&#34;&gt;3.12 Architecture Unit Tests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#313-integration-tests&#34;&gt;3.13 Integration Tests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#314-system-integration-testing&#34;&gt;3.14 System Integration Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#315-event-sourcing&#34;&gt;3.15 Event Sourcing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#316-database-change-management&#34;&gt;3.16 Database change management&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#317-continuous-integration&#34;&gt;3.17 Continuous Integration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#318-static-code-analysis&#34;&gt;3.18 Static code analysis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#319-system-under-test-sut&#34;&gt;3.19 System Under Test SUT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#320-mutation-testing&#34;&gt;3.20 Mutation Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#4-technology&#34;&gt;4. Technology&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#5-how-to-run&#34;&gt;5. How to Run&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#6-contribution&#34;&gt;6. Contribution&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#7-roadmap&#34;&gt;7. Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#8-authors&#34;&gt;8. Authors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#9-license&#34;&gt;9. License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#10-inspirations-and-recommendations&#34;&gt;10. Inspirations and Recommendations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 Purpose of this Repository&lt;/h3&gt; &#xA;&lt;p&gt;This is a list of the main goals of this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Showing how you can implement a &lt;strong&gt;monolith&lt;/strong&gt; application in a &lt;strong&gt;modular&lt;/strong&gt; way&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the &lt;strong&gt;full implementation&lt;/strong&gt; of an application &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is not another simple application&lt;/li&gt; &#xA;   &lt;li&gt;This is not another proof of concept (PoC)&lt;/li&gt; &#xA;   &lt;li&gt;The goal is to present the implementation of an application that would be ready to run in production&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Showing the application of &lt;strong&gt;best practices&lt;/strong&gt; and &lt;strong&gt;object-oriented programming principles&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the use of &lt;strong&gt;design patterns&lt;/strong&gt;. When, how and why they can be used&lt;/li&gt; &#xA; &lt;li&gt;Presentation of some &lt;strong&gt;architectural&lt;/strong&gt; considerations, decisions, approaches&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the implementation using &lt;strong&gt;Domain-Driven Design&lt;/strong&gt; approach (&lt;strong&gt;tactical&lt;/strong&gt; patterns)&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the implementation of &lt;strong&gt;Unit Tests&lt;/strong&gt; for Domain Model (Testable Design in mind)&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the implementation of &lt;strong&gt;Integration Tests&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Presentation of the implementation of &lt;strong&gt;Event Sourcing&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Presentation of &lt;strong&gt;C4 Model&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Presentation of &lt;strong&gt;diagram as text&lt;/strong&gt; approach&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.2 Out of Scope&lt;/h3&gt; &#xA;&lt;p&gt;This is a list of subjects which are out of scope for this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Business requirements gathering and analysis&lt;/li&gt; &#xA; &lt;li&gt;System analysis&lt;/li&gt; &#xA; &lt;li&gt;Domain exploration&lt;/li&gt; &#xA; &lt;li&gt;Domain distillation&lt;/li&gt; &#xA; &lt;li&gt;Domain-Driven Design &lt;strong&gt;strategic&lt;/strong&gt; patterns&lt;/li&gt; &#xA; &lt;li&gt;Architecture evaluation, quality attributes analysis&lt;/li&gt; &#xA; &lt;li&gt;Integration, system tests&lt;/li&gt; &#xA; &lt;li&gt;Project management&lt;/li&gt; &#xA; &lt;li&gt;Infrastructure&lt;/li&gt; &#xA; &lt;li&gt;Containerization&lt;/li&gt; &#xA; &lt;li&gt;Software engineering process&lt;/li&gt; &#xA; &lt;li&gt;Deployment process&lt;/li&gt; &#xA; &lt;li&gt;Maintenance&lt;/li&gt; &#xA; &lt;li&gt;Documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.3 Reason&lt;/h3&gt; &#xA;&lt;p&gt;The reason for creating this repository is the lack of something similar. Most sample applications on GitHub have at least one of the following issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very, very simple - few entities and use cases implemented&lt;/li&gt; &#xA; &lt;li&gt;Not finished (for example there is no authentication, logging, etc..)&lt;/li&gt; &#xA; &lt;li&gt;Poorly designed (in my opinion)&lt;/li&gt; &#xA; &lt;li&gt;Poorly implemented (in my opinion)&lt;/li&gt; &#xA; &lt;li&gt;Not well described&lt;/li&gt; &#xA; &lt;li&gt;Assumptions and decisions are not clearly explained&lt;/li&gt; &#xA; &lt;li&gt;Implements &#34;Orders&#34; domain - yes, everyone knows this domain, but something different is needed&lt;/li&gt; &#xA; &lt;li&gt;Implemented in old technology&lt;/li&gt; &#xA; &lt;li&gt;Not maintained&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To sum up, there are some very good examples, but there are far too few of them. This repository has the task of filling this gap at some level.&lt;/p&gt; &#xA;&lt;h3&gt;1.4 Disclaimer&lt;/h3&gt; &#xA;&lt;p&gt;Software architecture should always be created to resolve specific &lt;strong&gt;business problems&lt;/strong&gt;. Software architecture always supports some quality attributes and at the same time does not support others. A lot of other factors influence your software architecture - your team, opinions, preferences, experiences, technical constraints, time, budget, etc.&lt;/p&gt; &#xA;&lt;p&gt;Always functional requirements, quality attributes, technical constraints and other factors should be considered before an architectural decision is made.&lt;/p&gt; &#xA;&lt;p&gt;Because of the above, the architecture and implementation presented in this repository is &lt;strong&gt;one of the many ways&lt;/strong&gt; to solve some problems. Take from this repository as much as you want, use it as you like but remember to &lt;strong&gt;always pick the best solution which is appropriate to the problem class you have&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;1.5 Give a Star&lt;/h3&gt; &#xA;&lt;p&gt;My primary focus in this project is on quality. Creating a good quality product involves a lot of analysis, research and work. It takes a lot of time. If you like this project, learned something or you are using it in your applications, please give it a star &lt;span&gt;⭐&lt;/span&gt;. This is the best motivation for me to continue this work. Thanks!&lt;/p&gt; &#xA;&lt;h3&gt;1.6 Share It&lt;/h3&gt; &#xA;&lt;p&gt;There are very few really good examples of this type of application. If you think this repository makes a difference and is worth it, please share it with your friends and on social networks. I will be extremely grateful.&lt;/p&gt; &#xA;&lt;h2&gt;2. Domain&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 Description&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Domain - A sphere of knowledge, influence, or activity. The subject area to which the user applies a program is the domain of the software. &lt;a href=&#34;http://domainlanguage.com/ddd/reference/&#34;&gt;Domain-Driven Design Reference&lt;/a&gt;, Eric Evans&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Meeting Groups&lt;/strong&gt; domain was selected for the purposes of this project based on the &lt;a href=&#34;https://www.meetup.com/&#34;&gt;Meetup.com&lt;/a&gt; system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Main reasons for selecting this domain:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is common, a lot of people use the Meetup site to organize or attend meetings&lt;/li&gt; &#xA; &lt;li&gt;There is a system for it, so everyone can check this implementation against a working site which supports this domain&lt;/li&gt; &#xA; &lt;li&gt;It is not complex so it is easy to understand&lt;/li&gt; &#xA; &lt;li&gt;It is not trivial - there are some business rules and logic and it is not just CRUD operations&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need much specific domain knowledge unlike other domains like financing, banking, medical&lt;/li&gt; &#xA; &lt;li&gt;It is not big so it is easier to implement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Meetings&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The main business entities are &lt;code&gt;Member&lt;/code&gt;, &lt;code&gt;Meeting Group&lt;/code&gt; and &lt;code&gt;Meeting&lt;/code&gt;. A &lt;code&gt;Member&lt;/code&gt; can create a &lt;code&gt;Meeting Group&lt;/code&gt;, be part of a &lt;code&gt;Meeting Group&lt;/code&gt; or can attend a &lt;code&gt;Meeting&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Meeting Group Member&lt;/code&gt; can be an &lt;code&gt;Organizer&lt;/code&gt; of this group or a normal &lt;code&gt;Member&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Only an &lt;code&gt;Organizer&lt;/code&gt; of a &lt;code&gt;Meeting Group&lt;/code&gt; can create a new &lt;code&gt;Meeting&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Meeting&lt;/code&gt; has attendees, not attendees (&lt;code&gt;Members&lt;/code&gt; which declare they will not attend the &lt;code&gt;Meeting&lt;/code&gt;) and &lt;code&gt;Members&lt;/code&gt; on the &lt;code&gt;Waitlist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Meeting&lt;/code&gt; can have an attendee limit. If the limit is reached, &lt;code&gt;Members&lt;/code&gt; can only sign up to the &lt;code&gt;Waitlist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Meeting Attendee&lt;/code&gt; can bring guests to the &lt;code&gt;Meeting&lt;/code&gt;. The number of guests allowed is an attribute of the &lt;code&gt;Meeting&lt;/code&gt;. Bringing guests can be unallowed.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Meeting Attendee&lt;/code&gt; can have one of two roles: &lt;code&gt;Attendee&lt;/code&gt; or &lt;code&gt;Host&lt;/code&gt;. A &lt;code&gt;Meeting&lt;/code&gt; must have at least one &lt;code&gt;Host&lt;/code&gt;. The &lt;code&gt;Host&lt;/code&gt; is a special role which grants permission to edit &lt;code&gt;Meeting&lt;/code&gt; information or change the attendees list.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Member&lt;/code&gt; can comment &lt;code&gt;Meetings&lt;/code&gt;. A &lt;code&gt;Member&lt;/code&gt; can reply to, like other &lt;code&gt;Comments&lt;/code&gt;. &lt;code&gt;Organizer&lt;/code&gt; manages commenting of &lt;code&gt;Meeting&lt;/code&gt; by &lt;code&gt;Meeting Commenting Configuration&lt;/code&gt;. &lt;code&gt;Organizer&lt;/code&gt; can delete any &lt;code&gt;Comment&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Meeting Group&lt;/code&gt; must have an organizer with active &lt;code&gt;Subscription&lt;/code&gt;. One organizer can cover 3 &lt;code&gt;Meeting Groups&lt;/code&gt; by his &lt;code&gt;Subscription&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, Meeting organizer can set an &lt;code&gt;Event Fee&lt;/code&gt;. Each &lt;code&gt;Meeting Attendee&lt;/code&gt; is obliged to pay the fee. All guests should be paid by &lt;code&gt;Meeting Attendee&lt;/code&gt; too.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Administration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To create a new &lt;code&gt;Meeting Group&lt;/code&gt;, a &lt;code&gt;Member&lt;/code&gt; needs to propose the group. A &lt;code&gt;Meeting Group Proposal&lt;/code&gt; is sent to &lt;code&gt;Administrators&lt;/code&gt;. An &lt;code&gt;Administrator&lt;/code&gt; can accept or reject a &lt;code&gt;Meeting Group Proposal&lt;/code&gt;. If a &lt;code&gt;Meeting Group Proposal&lt;/code&gt; is accepted, a &lt;code&gt;Meeting Group&lt;/code&gt; is created.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Payments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Member&lt;/code&gt; who is the &lt;code&gt;Payer&lt;/code&gt; can buy the &lt;code&gt;Subscription&lt;/code&gt;. He needs to pay the &lt;code&gt;Subscription Payment&lt;/code&gt;. &lt;code&gt;Subscription&lt;/code&gt; can expire so &lt;code&gt;Subscription Renewal&lt;/code&gt; is required (by &lt;code&gt;Subscription Renewal Payment&lt;/code&gt; payment to keep &lt;code&gt;Subscription&lt;/code&gt; active).&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;Meeting&lt;/code&gt; fee is required, the &lt;code&gt;Payer&lt;/code&gt; needs to pay &lt;code&gt;Meeting Fee&lt;/code&gt; (through &lt;code&gt;Meeting Fee Payment&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Users&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Administrator&lt;/code&gt;, &lt;code&gt;Member&lt;/code&gt; and &lt;code&gt;Payer&lt;/code&gt; is a &lt;code&gt;User&lt;/code&gt;. To be a &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;User Registration&lt;/code&gt; is required and confirmed.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;User&lt;/code&gt; is assigned one or more &lt;code&gt;User Role&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;User Role&lt;/code&gt; has set of &lt;code&gt;Permissions&lt;/code&gt;. A &lt;code&gt;Permission&lt;/code&gt; defines whether &lt;code&gt;User&lt;/code&gt; can invoke a particular action.&lt;/p&gt; &#xA;&lt;h3&gt;2.2 Conceptual Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Conceptual Model - A conceptual model is a representation of a system, made of the composition of concepts that are used to help people know, understand, or simulate a subject the model represents. &lt;a href=&#34;https://en.wikipedia.org/wiki/Conceptual_model&#34;&gt;Wikipedia - Conceptual model&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Conceptual Model&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PlantUML version: &lt;img src=&#34;https://www.plantuml.com/plantuml/proxy?cache=no&amp;amp;src=https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/PlantUML/Conceptual_Model.puml&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;VisualParadigm version (not maintained, only for demonstration): &lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Conceptual_Model.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Conceptual Model of commenting feature&lt;/strong&gt; &lt;img src=&#34;https://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/PlantUML/Commenting_Conceptual_Model.puml&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.3 Event Storming&lt;/h3&gt; &#xA;&lt;p&gt;While a Conceptual Model focuses on structures and relationships between them, &lt;strong&gt;behavior&lt;/strong&gt; and &lt;strong&gt;events&lt;/strong&gt; that occur in our domain are more important.&lt;/p&gt; &#xA;&lt;p&gt;There are many ways to show behavior and events. One of them is a light technique called &lt;a href=&#34;https://www.eventstorming.com/&#34;&gt;Event Storming&lt;/a&gt; which is becoming more popular. Below are presented 3 main business processes using this technique: user registration, meeting group creation and meeting organization.&lt;/p&gt; &#xA;&lt;p&gt;Note: Event Storming is a light, live workshop. One of the possible outputs of this workshop is presented here. Even if you are not doing Event Storming workshops, this type of process presentation can be very valuable to you and your stakeholders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;User Registration process&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/User_Registration.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Meeting Group creation&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Meeting_Group_Creation.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Meeting organization&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Meeting_Organization.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Payments&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Payments_EventStorming_Design.jpg&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Payments_EventStorming_Design_HighRes.jpg&#34;&gt;Download high resolution file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;3. Architecture&lt;/h2&gt; &#xA;&lt;h3&gt;3.0 C4 Model&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://c4model.com/&#34;&gt;C4 model&lt;/a&gt; is a lean graphical notation technique for modelling the architecture of software systems. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;As can be found on the website of the author of this model (&lt;a href=&#34;https://simonbrown.je/&#34;&gt;Simon Brown&lt;/a&gt;): &lt;em&gt;The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase&lt;/em&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Model C4&lt;/em&gt; defines 4 levels (views) of the system architecture: &lt;em&gt;System Context&lt;/em&gt;, &lt;em&gt;Container&lt;/em&gt;, &lt;em&gt;Component&lt;/em&gt; and &lt;em&gt;Code&lt;/em&gt;. Below are examples of each of these levels that describe the architecture of this system. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; (diagram as text) component was used to describe all C4 model levels. Additionally, for levels C1-C3, a &lt;a href=&#34;https://github.com/plantuml-stdlib/C4-PlantUML&#34;&gt;C4-PlantUML&lt;/a&gt; plug-in connecting PlantUML with the C4 model was used&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;3.0.1 C1 System Context&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/png/7OrDgeD048JtxnGl1z0ca5LMGWuYutIZulIqz0_6d3vZDbLG5Dytc2VruF9tMsikWHHQ_XVttPu0cev-Nds9AOmqItMgtcTXs6Rzd1Djm89HadOiLKgxTiSLY0YSp4a19Hky7f3levrjuV77UNk_Nzg1AhR-0W00&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;3.0.2 C2 Container&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/png/5OrDgiCm30RtxnIl1uW5fQkk0Zr8SIoHcDXIq0-XFNtZpVTjXfdPFAj7Rt-togK5KcZxtzmFUm9eFjDQVOibZBG8Ex6d8XtsLR-VXNReWj6oJbrOseLEvnX4X9xDIG6b6BmUKExl8SYLITCnYZCnNly3&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;3.0.3 C3 Component (high-level)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/png/5OqxZiCm30NxFSNc01QBf4fb80S9P96m3Kkam0-CvFIHc_UQ6SnidjMZrR_RpgK6KcZztzoxFG4qdsdTVOibZBG8Ex6d8WsELR-VXGveWb6pJarOwa2dynf4X9RDIG6b6BmUKExl8NPXOhVKh-HCZED_&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;3.0.4 C3 Component (module-level)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/png/7OqzheCm48JxTugN0y0MIPKAAGT1nhi2XBrhxOzGSlgOD3FDVFDDvaazQlcxxPnB88MM_yszsHD0qpckks-nX95cOIVsCKk5OzNFUw43gc2Kf4CLbjAdmta58a9DvgI0aWrU3yZtkODDk5_O_CDeR9Tv8iRUNm00&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;3.0.5 C4 Code (meeting group aggregate)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.plantuml.com/plantuml/png/5OqxheD0303xTugN0x1kg58XvI3HObk0yAwHFqB9wGFDJ3FIJ1xL8flyFRQEaiHfyhz67Fu4i7gMPOirvtGsr1xSew0ss1VxVcRUeIcbL1kQTfKh7SuRH0IjUh01AJgyHi3nZLBTot7V9kvq-GS0&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.1 High Level View&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Architecture_high_level.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module descriptions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt; - Very thin ASP.NET MVC Core REST API application. Main responsibilities are: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Accept request&lt;/li&gt; &#xA;   &lt;li&gt;Authenticate and authorize request (using User Access module)&lt;/li&gt; &#xA;   &lt;li&gt;Delegate work to specific module sending Command or Query&lt;/li&gt; &#xA;   &lt;li&gt;Return response&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Access&lt;/strong&gt; - responsible for user authentication, authorization and registration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Meetings&lt;/strong&gt; - implements Meetings Bounded Context: creating meeting groups, meetings&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Administration&lt;/strong&gt; - implements Administration Bounded Context: implements administrative tasks like meeting group proposal verification&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payments&lt;/strong&gt; - implements Payments Bounded Context: implements all functionalities associated with payments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;In Memory Events Bus&lt;/strong&gt; - Publish/Subscribe implementation to asynchronously integrate all modules using events (&lt;a href=&#34;https://en.wikipedia.org/wiki/Event-driven_architecture&#34;&gt;Event Driven Architecture&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key assumptions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;API contains no application logic&lt;/li&gt; &#xA; &lt;li&gt;API communicates with Modules using a small interface to send Queries and Commands&lt;/li&gt; &#xA; &lt;li&gt;Each Module has its own interface which is used by API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modules communicate each other only asynchronously using Events Bus&lt;/strong&gt; - direct method calls are not allowed&lt;/li&gt; &#xA; &lt;li&gt;Each Module &lt;strong&gt;has it&#39;s own data&lt;/strong&gt; in a separate schema - shared data is not allowed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Module data could be moved into separate databases if desired&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modules can only have a dependency on the integration events assembly of other Module (see &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#32-module-level-view&#34;&gt;Module level view&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Each Module has its own &lt;a href=&#34;https://freecontent.manning.com/dependency-injection-in-net-2nd-edition-understanding-the-composition-root/&#34;&gt;Composition Root&lt;/a&gt;, which implies that each Module has its own Inversion-of-Control container&lt;/li&gt; &#xA; &lt;li&gt;API as a host needs to initialize each module and each module has an initialization method&lt;/li&gt; &#xA; &lt;li&gt;Each Module is &lt;strong&gt;highly encapsulated&lt;/strong&gt; - only required types and members are public, the rest are internal or private&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3.2 Module Level View&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Module_level_diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each Module has &lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;Clean Architecture&lt;/a&gt; and consists of the following submodules (assemblies):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt; - the application logic submodule which is responsible for requests processing: use cases, domain events, integration events, internal commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Domain&lt;/strong&gt; - Domain Model in Domain-Driven Design terms implements the applicable &lt;a href=&#34;https://martinfowler.com/bliki/BoundedContext.html&#34;&gt;Bounded Context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt; - infrastructural code responsible for module initialization, background processing, data access, communication with Events Bus and other external components or systems&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IntegrationEvents&lt;/strong&gt; - &lt;strong&gt;Contracts&lt;/strong&gt; published to the Events Bus; only this assembly can be called by other modules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/VSSolution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Application, Domain and Infrastructure assemblies could be merged into one assembly. Some people like horizontal layering or more decomposition, some don&#39;t. Implementing the Domain Model or Infrastructure in separate assembly allows encapsulation using the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/internal&#34;&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/a&gt; keyword. Sometimes Bounded Context logic is not worth it because it is too simple. As always, be pragmatic and take whatever approach you like.&lt;/p&gt; &#xA;&lt;h3&gt;3.3 API and Module Communication&lt;/h3&gt; &#xA;&lt;p&gt;The API only communicates with Modules in two ways: during module initialization and request processing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Module initialization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each module has a static &lt;code&gt;Initialize&lt;/code&gt; method which is invoked in the API &lt;code&gt;Startup&lt;/code&gt; class. All configuration needed by this module should be provided as arguments to this method. All services are configured during initialization and the Composition Root is created using the Inversion-of-Control Container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static void Initialize(&#xA;    string connectionString,&#xA;    IExecutionContextAccessor executionContextAccessor,&#xA;    ILogger logger,&#xA;    EmailsConfiguration emailsConfiguration)&#xA;{&#xA;    var moduleLogger = logger.ForContext(&#34;Module&#34;, &#34;Meetings&#34;);&#xA;&#xA;    ConfigureCompositionRoot(connectionString, executionContextAccessor, moduleLogger, emailsConfiguration);&#xA;&#xA;    QuartzStartup.Initialize(moduleLogger);&#xA;&#xA;    EventsBusStartup.Initialize(moduleLogger);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Request processing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each module has the same interface signature exposed to the API. It contains 3 methods: command with result, command without result and query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public interface IMeetingsModule&#xA;{&#xA;    Task&amp;lt;TResult&amp;gt; ExecuteCommandAsync&amp;lt;TResult&amp;gt;(ICommand&amp;lt;TResult&amp;gt; command);&#xA;&#xA;    Task ExecuteCommandAsync(ICommand command);&#xA;&#xA;    Task&amp;lt;TResult&amp;gt; ExecuteQueryAsync&amp;lt;TResult&amp;gt;(IQuery&amp;lt;TResult&amp;gt; query);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some people say that processing a command should not return a result. This is an understandable approach but sometimes impractical, especially when you want to immediately return the ID of a newly created resource. Sometimes the boundary between Command and Query is blurry. One example is &lt;code&gt;AuthenticateCommand&lt;/code&gt; - it returns a token but it is not a query because it has a side effect.&lt;/p&gt; &#xA;&lt;h3&gt;3.4 Module Requests Processing via CQRS&lt;/h3&gt; &#xA;&lt;p&gt;Processing of Commands and Queries is separated by applying the architectural style/pattern &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs&#34;&gt;Command Query Responsibility Segregation (CQRS)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/CQRS.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Commands are processed using &lt;em&gt;Write Model&lt;/em&gt; which is implemented using DDD tactical patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class CreateNewMeetingGroupCommandHandler : ICommandHandler&amp;lt;CreateNewMeetingGroupCommand&amp;gt;&#xA;{&#xA;    private readonly IMeetingGroupRepository _meetingGroupRepository;&#xA;    private readonly IMeetingGroupProposalRepository _meetingGroupProposalRepository;&#xA;&#xA;    internal CreateNewMeetingGroupCommandHandler(&#xA;        IMeetingGroupRepository meetingGroupRepository,&#xA;        IMeetingGroupProposalRepository meetingGroupProposalRepository)&#xA;    {&#xA;        _meetingGroupRepository = meetingGroupRepository;&#xA;        _meetingGroupProposalRepository = meetingGroupProposalRepository;&#xA;    }&#xA;&#xA;    public async Task&amp;lt;Unit&amp;gt; Handle(CreateNewMeetingGroupCommand request, CancellationToken cancellationToken)&#xA;    {&#xA;        var meetingGroupProposal = await _meetingGroupProposalRepository.GetByIdAsync(request.MeetingGroupProposalId);&#xA;&#xA;        var meetingGroup = meetingGroupProposal.CreateMeetingGroup();&#xA;&#xA;        await _meetingGroupRepository.AddAsync(meetingGroup);&#xA;&#xA;        return Unit.Value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Queries are processed using &lt;em&gt;Read Model&lt;/em&gt; which is implemented by executing raw SQL statements on database views:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class GetAllMeetingGroupsQueryHandler : IQueryHandler&amp;lt;GetAllMeetingGroupsQuery, List&amp;lt;MeetingGroupDto&amp;gt;&amp;gt;&#xA;{&#xA;    private readonly ISqlConnectionFactory _sqlConnectionFactory;&#xA;&#xA;    internal GetAllMeetingGroupsQueryHandler(ISqlConnectionFactory sqlConnectionFactory)&#xA;    {&#xA;        _sqlConnectionFactory = sqlConnectionFactory;&#xA;    }&#xA;&#xA;    public async Task&amp;lt;List&amp;lt;MeetingGroupDto&amp;gt;&amp;gt; Handle(GetAllMeetingGroupsQuery request, CancellationToken cancellationToken)&#xA;    {&#xA;        var connection = _sqlConnectionFactory.GetOpenConnection();&#xA;&#xA;        const string sql = &#34;SELECT &#34; +&#xA;                           &#34;[MeetingGroup].[Id], &#34; +&#xA;                           &#34;[MeetingGroup].[Name], &#34; +&#xA;                           &#34;[MeetingGroup].[Description], &#34; +&#xA;                           &#34;[MeetingGroup].[LocationCountryCode], &#34; +&#xA;                           &#34;[MeetingGroup].[LocationCity]&#34; +&#xA;                           &#34;FROM [meetings].[v_MeetingGroups] AS [MeetingGroup]&#34;;&#xA;        var meetingGroups = await connection.QueryAsync&amp;lt;MeetingGroupDto&amp;gt;(sql);&#xA;&#xA;        return meetingGroups.AsList();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key advantages:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solution is appropriate to the problem - reading and writing needs are usually different&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt; (SRP) - one handler does one thing&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_segregation_principle&#34;&gt;Interface Segregation Principle&lt;/a&gt; (ISP) - each handler implements interface with exactly one method&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://refactoring.com/catalog/introduceParameterObject.html&#34;&gt;Parameter Object pattern&lt;/a&gt; - Commands and Queries are objects which are easy to serialize/deserialize&lt;/li&gt; &#xA; &lt;li&gt;Easy way to apply &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorator pattern&lt;/a&gt; to handle cross-cutting concerns&lt;/li&gt; &#xA; &lt;li&gt;Supports Loose Coupling by use of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Mediator_pattern&#34;&gt;Mediator pattern&lt;/a&gt; - separates invoker of request from handler of request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disadvantage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mediator pattern introduces extra indirection and is harder to reason about which class handles the request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information: &lt;a href=&#34;https://www.kamilgrzybek.com/design/simple-cqrs-implementation-with-raw-sql-and-ddd/&#34;&gt;Simple CQRS implementation with raw SQL and DDD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.5 Domain Model Principles and Attributes&lt;/h3&gt; &#xA;&lt;p&gt;The Domain Model, which is the central and most critical part in the system, should be designed with special attention. Here are some key principles and attributes which are applied to Domain Models of each module:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High level of encapsulation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;All members are &lt;code&gt;private&lt;/code&gt; by default, then &lt;code&gt;internal&lt;/code&gt; - only &lt;code&gt;public&lt;/code&gt; at the very edge.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High level of PI (Persistence Ignorance)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;No dependencies to infrastructure, databases, etc. All classes are &lt;a href=&#34;https://en.wikipedia.org/wiki/Plain_old_CLR_object&#34;&gt;POCOs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rich in behavior&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;All business logic is located in the Domain Model. No leaks to the application layer or elsewhere.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Low level of Primitive Obsession&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Primitive attributes of Entites grouped together using ValueObjects.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Business language&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;All classes, methods and other members are named in business language used in this Bounded Context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Testable&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The Domain Model is a critical part of the system so it should be easy to test (Testable Design).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class MeetingGroup : Entity, IAggregateRoot&#xA;{&#xA;    public MeetingGroupId Id { get; private set; }&#xA;&#xA;    private string _name;&#xA;&#xA;    private string _description;&#xA;&#xA;    private MeetingGroupLocation _location;&#xA;&#xA;    private MemberId _creatorId;&#xA;&#xA;    private List&amp;lt;MeetingGroupMember&amp;gt; _members;&#xA;&#xA;    private DateTime _createDate;&#xA;&#xA;    private DateTime? _paymentDateTo;&#xA;&#xA;    internal static MeetingGroup CreateBasedOnProposal(&#xA;        MeetingGroupProposalId meetingGroupProposalId,&#xA;        string name,&#xA;        string description,&#xA;        MeetingGroupLocation location, MemberId creatorId)&#xA;    {&#xA;        return new MeetingGroup(meetingGroupProposalId, name, description, location, creatorId);&#xA;    }&#xA;&#xA;     public Meeting CreateMeeting(&#xA;            string title,&#xA;            MeetingTerm term,&#xA;            string description,&#xA;            MeetingLocation location,&#xA;            int? attendeesLimit,&#xA;            int guestsLimit,&#xA;            Term rsvpTerm,&#xA;            MoneyValue eventFee,&#xA;            List&amp;lt;MemberId&amp;gt; hostsMembersIds,&#xA;            MemberId creatorId)&#xA;        {&#xA;            this.CheckRule(new MeetingCanBeOrganizedOnlyByPayedGroupRule(_paymentDateTo));&#xA;&#xA;            this.CheckRule(new MeetingHostMustBeAMeetingGroupMemberRule(creatorId, hostsMembersIds, _members));&#xA;&#xA;            return new Meeting(this.Id,&#xA;                title,&#xA;                term,&#xA;                description,&#xA;                location,&#xA;                attendeesLimit,&#xA;                guestsLimit,&#xA;                rsvpTerm,&#xA;                eventFee,&#xA;                hostsMembersIds,&#xA;                creatorId);&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.6 Cross-Cutting Concerns&lt;/h3&gt; &#xA;&lt;p&gt;To support &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don&#39;t Repeat Yourself&lt;/a&gt; principles, the implementation of cross-cutting concerns is done using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorator Pattern&lt;/a&gt;. Each Command processor is decorated by 3 decorators: logging, validation and unit of work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/Decorator.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Logging decorator logs execution, arguments and processing of each Command. This way each log inside a processor has the log context of the processing command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class LoggingCommandHandlerDecorator&amp;lt;T&amp;gt; : ICommandHandler&amp;lt;T&amp;gt; where T:ICommand&#xA;{&#xA;    private readonly ILogger _logger;&#xA;    private readonly IExecutionContextAccessor _executionContextAccessor;&#xA;    private readonly ICommandHandler&amp;lt;T&amp;gt; _decorated;&#xA;&#xA;    public LoggingCommandHandlerDecorator(&#xA;        ILogger logger,&#xA;        IExecutionContextAccessor executionContextAccessor,&#xA;        ICommandHandler&amp;lt;T&amp;gt; decorated)&#xA;    {&#xA;        _logger = logger;&#xA;        _executionContextAccessor = executionContextAccessor;&#xA;        _decorated = decorated;&#xA;    }&#xA;    public async Task&amp;lt;Unit&amp;gt; Handle(T command, CancellationToken cancellationToken)&#xA;    {&#xA;        if (command is IRecurringCommand)&#xA;        {&#xA;            return await _decorated.Handle(command, cancellationToken);&#xA;        }&#xA;        using (&#xA;            LogContext.Push(&#xA;                new RequestLogEnricher(_executionContextAccessor),&#xA;                new CommandLogEnricher(command)))&#xA;        {&#xA;            try&#xA;            {&#xA;                this._logger.Information(&#xA;                    &#34;Executing command {Command}&#34;,&#xA;                    command.GetType().Name);&#xA;&#xA;                var result = await _decorated.Handle(command, cancellationToken);&#xA;&#xA;                this._logger.Information(&#34;Command {Command} processed successful&#34;, command.GetType().Name);&#xA;&#xA;                return result;&#xA;            }&#xA;            catch (Exception exception)&#xA;            {&#xA;                this._logger.Error(exception, &#34;Command {Command} processing failed&#34;, command.GetType().Name);&#xA;                throw;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    private class CommandLogEnricher : ILogEventEnricher&#xA;    {&#xA;        private readonly ICommand _command;&#xA;&#xA;        public CommandLogEnricher(ICommand command)&#xA;        {&#xA;            _command = command;&#xA;        }&#xA;        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)&#xA;        {&#xA;            logEvent.AddOrUpdateProperty(new LogEventProperty(&#34;Context&#34;, new ScalarValue($&#34;Command:{_command.Id.ToString()}&#34;)));&#xA;        }&#xA;    }&#xA;&#xA;    private class RequestLogEnricher : ILogEventEnricher&#xA;    {&#xA;        private readonly IExecutionContextAccessor _executionContextAccessor;&#xA;        public RequestLogEnricher(IExecutionContextAccessor executionContextAccessor)&#xA;        {&#xA;            _executionContextAccessor = executionContextAccessor;&#xA;        }&#xA;        public void Enrich(LogEvent logEvent, ILogEventPropertyFactory propertyFactory)&#xA;        {&#xA;            if (_executionContextAccessor.IsAvailable)&#xA;            {&#xA;                logEvent.AddOrUpdateProperty(new LogEventProperty(&#34;CorrelationId&#34;, new ScalarValue(_executionContextAccessor.CorrelationId)));&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Validation decorator performs Command data validation. It checks rules against Command arguments using the FluentValidation library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class ValidationCommandHandlerDecorator&amp;lt;T&amp;gt; : ICommandHandler&amp;lt;T&amp;gt; where T:ICommand&#xA;{&#xA;    private readonly IList&amp;lt;IValidator&amp;lt;T&amp;gt;&amp;gt; _validators;&#xA;    private readonly ICommandHandler&amp;lt;T&amp;gt; _decorated;&#xA;&#xA;    public ValidationCommandHandlerDecorator(&#xA;        IList&amp;lt;IValidator&amp;lt;T&amp;gt;&amp;gt; validators,&#xA;        ICommandHandler&amp;lt;T&amp;gt; decorated)&#xA;    {&#xA;        this._validators = validators;&#xA;        _decorated = decorated;&#xA;    }&#xA;&#xA;    public Task&amp;lt;Unit&amp;gt; Handle(T command, CancellationToken cancellationToken)&#xA;    {&#xA;        var errors = _validators&#xA;            .Select(v =&amp;gt; v.Validate(command))&#xA;            .SelectMany(result =&amp;gt; result.Errors)&#xA;            .Where(error =&amp;gt; error != null)&#xA;            .ToList();&#xA;&#xA;        if (errors.Any())&#xA;        {&#xA;            var errorBuilder = new StringBuilder();&#xA;&#xA;            errorBuilder.AppendLine(&#34;Invalid command, reason: &#34;);&#xA;&#xA;            foreach (var error in errors)&#xA;            {&#xA;                errorBuilder.AppendLine(error.ErrorMessage);&#xA;            }&#xA;&#xA;            throw new InvalidCommandException(errorBuilder.ToString(), null);&#xA;        }&#xA;&#xA;        return _decorated.Handle(command, cancellationToken);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unit Of Work&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;All Command processing has side effects. To avoid calling commit on every handler, &lt;code&gt;UnitOfWorkCommandHandlerDecorator&lt;/code&gt; is used. It additionally marks &lt;code&gt;InternalCommand&lt;/code&gt; as processed (if it is Internal Command) and dispatches all Domain Events (as part of &lt;a href=&#34;https://martinfowler.com/eaaCatalog/unitOfWork.html&#34;&gt;Unit Of Work&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class UnitOfWorkCommandHandlerDecorator&amp;lt;T&amp;gt; : ICommandHandler&amp;lt;T&amp;gt; where T:ICommand&#xA;{&#xA;    private readonly ICommandHandler&amp;lt;T&amp;gt; _decorated;&#xA;    private readonly IUnitOfWork _unitOfWork;&#xA;    private readonly MeetingsContext _meetingContext;&#xA;&#xA;    public UnitOfWorkCommandHandlerDecorator(&#xA;        ICommandHandler&amp;lt;T&amp;gt; decorated,&#xA;        IUnitOfWork unitOfWork,&#xA;        MeetingsContext meetingContext)&#xA;    {&#xA;        _decorated = decorated;&#xA;        _unitOfWork = unitOfWork;&#xA;        _meetingContext = meetingContext;&#xA;    }&#xA;&#xA;    public async Task&amp;lt;Unit&amp;gt; Handle(T command, CancellationToken cancellationToken)&#xA;    {&#xA;        await this._decorated.Handle(command, cancellationToken);&#xA;&#xA;        if (command is InternalCommandBase)&#xA;        {&#xA;            var internalCommand =&#xA;                await _meetingContext.InternalCommands.FirstOrDefaultAsync(x =&amp;gt; x.Id == command.Id,&#xA;                    cancellationToken: cancellationToken);&#xA;&#xA;            if (internalCommand != null)&#xA;            {&#xA;                internalCommand.ProcessedDate = DateTime.UtcNow;&#xA;            }&#xA;        }&#xA;&#xA;        await this._unitOfWork.CommitAsync(cancellationToken);&#xA;&#xA;        return Unit.Value;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.7 Modules Integration&lt;/h3&gt; &#xA;&lt;p&gt;Integration between modules is strictly &lt;strong&gt;asynchronous&lt;/strong&gt; using Integration Events and the In Memory Event Bus as broker. In this way coupling between modules is minimal and exists only on the structure of Integration Events.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modules don&#39;t share data&lt;/strong&gt; so it is not possible nor desirable to create a transaction which spans more than one module. To ensure maximum reliability, the &lt;a href=&#34;http://www.kamilgrzybek.com/design/the-outbox-pattern/&#34;&gt;Outbox / Inbox pattern&lt;/a&gt; is used. This pattern provides accordingly &lt;em&gt;&#34;At-Least-Once delivery&#34;&lt;/em&gt; and &lt;em&gt;&#34;At-Least-Once processing&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/OutboxInbox.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Outbox and Inbox is implemented using two SQL tables and a background worker for each module. The background worker is implemented using the Quartz.NET library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Saving to Outbox:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/OutboxSave.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Processing Outbox:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/OutboxProcessing.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.8 Internal Processing&lt;/h3&gt; &#xA;&lt;p&gt;The main principle of this system is that you can change its state only by calling a specific Command.&lt;/p&gt; &#xA;&lt;p&gt;Commands can be called not only by the API, but by the processing module itself. The main use case which implements this mechanism is data processing in eventual consistency mode when we want to process something in a different process and transaction. This applies, for example, to Inbox processing because we want to do something (calling a Command) based on an Integration Event from the Inbox.&lt;/p&gt; &#xA;&lt;p&gt;This idea is taken from Alberto&#39;s Brandolini&#39;s Event Storming picture called &#34;The picture that explains “almost” everything&#34; which shows that every side effect (domain event) is created by invoking a Command on Aggregate. See &lt;a href=&#34;https://xebia.com/blog/eventstorming-cheat-sheet/&#34;&gt;EventStorming cheat sheet&lt;/a&gt; article for more details.&lt;/p&gt; &#xA;&lt;p&gt;Implementation of internal processing is very similar to implementation of the Outbox and Inbox. One SQL table and one background worker for processing. Each internally processing Command must inherit from &lt;code&gt;InternalCommandBase&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal abstract class InternalCommandBase : ICommand&#xA;{&#xA;    public Guid Id { get; }&#xA;&#xA;    protected InternalCommandBase(Guid id)&#xA;    {&#xA;        this.Id = id;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is important because the &lt;code&gt;UnitOfWorkCommandHandlerDecorator&lt;/code&gt; must mark an internal Command as processed during committing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public async Task&amp;lt;Unit&amp;gt; Handle(T command, CancellationToken cancellationToken)&#xA;{&#xA;    await this._decorated.Handle(command, cancellationToken);&#xA;&#xA;    if (command is InternalCommandBase)&#xA;    {&#xA;        var internalCommand =&#xA;            await _meetingContext.InternalCommands.FirstOrDefaultAsync(x =&amp;gt; x.Id == command.Id,&#xA;                cancellationToken: cancellationToken);&#xA;&#xA;        if (internalCommand != null)&#xA;        {&#xA;            internalCommand.ProcessedDate = DateTime.UtcNow;&#xA;        }&#xA;    }&#xA;&#xA;    await this._unitOfWork.CommitAsync(cancellationToken);&#xA;&#xA;    return Unit.Value;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.9 Security&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Authentication is implemented using JWT Token and Bearer scheme using IdentityServer. For now, only one authentication method is implemented: forms style authentication (username and password) via the OAuth2 &lt;a href=&#34;https://www.oauth.com/oauth2-servers/access-tokens/password-grant/&#34;&gt;Resource Owner Password Grant Type&lt;/a&gt;. It requires implementation of the &lt;code&gt;IResourceOwnerPasswordValidator&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ResourceOwnerPasswordValidator : IResourceOwnerPasswordValidator&#xA;{&#xA;    private readonly IUserAccessModule _userAccessModule;&#xA;&#xA;    public ResourceOwnerPasswordValidator(IUserAccessModule userAccessModule)&#xA;    {&#xA;        _userAccessModule = userAccessModule;&#xA;    }&#xA;&#xA;    public async Task ValidateAsync(ResourceOwnerPasswordValidationContext context)&#xA;    {&#xA;        var authenticationResult = await _userAccessModule.ExecuteCommandAsync(new AuthenticateCommand(context.UserName, context.Password));&#xA;        if (!authenticationResult.IsAuthenticated)&#xA;        {&#xA;            context.Result = new GrantValidationResult(&#xA;                TokenRequestErrors.InvalidGrant,&#xA;                authenticationResult.AuthenticationError);&#xA;            return;&#xA;        }&#xA;        context.Result = new GrantValidationResult(&#xA;            authenticationResult.User.Id.ToString(),&#xA;            &#34;forms&#34;,&#xA;            authenticationResult.User.Claims);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Authorization is achieved by implementing &lt;a href=&#34;https://en.wikipedia.org/wiki/Role-based_access_control&#34;&gt;RBAC (Role Based Access Control)&lt;/a&gt; using Permissions. Permissions are more granular and a much better way to secure your application than Roles alone. Each User has a set of Roles and each Role contains one or more Permission. The User&#39;s set of Permissions is extracted from all Roles the User belongs to. Permissions are always checked on &lt;code&gt;Controller&lt;/code&gt; level - never Roles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[HttpPost]&#xA;[Route(&#34;&#34;)]&#xA;[HasPermission(MeetingsPermissions.ProposeMeetingGroup)]&#xA;public async Task&amp;lt;IActionResult&amp;gt; ProposeMeetingGroup(ProposeMeetingGroupRequest request)&#xA;{&#xA;    await _meetingsModule.ExecuteCommandAsync(&#xA;        new ProposeMeetingGroupCommand(&#xA;            request.Name,&#xA;            request.Description,&#xA;            request.LocationCity,&#xA;            request.LocationCountryCode));&#xA;&#xA;    return Ok();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.10 Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A unit test is an automated piece of code that invokes the unit of work being tested, and then checks some assumptions about a single end result of that unit. A unit test is almost always written using a unit testing framework. It can be written easily and runs quickly. It’s trustworthy, readable, and maintainable. It’s consistent in its results as long as production code hasn’t changed. &lt;a href=&#34;https://www.manning.com/books/the-art-of-unit-testing-second-edition&#34;&gt;Art of Unit Testing 2nd Edition&lt;/a&gt; Roy Osherove&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attributes of good unit test&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automated&lt;/li&gt; &#xA; &lt;li&gt;Maintainable&lt;/li&gt; &#xA; &lt;li&gt;Runs very fast (in ms)&lt;/li&gt; &#xA; &lt;li&gt;Consistent, Deterministic (always the same result)&lt;/li&gt; &#xA; &lt;li&gt;Isolated from other tests&lt;/li&gt; &#xA; &lt;li&gt;Readable&lt;/li&gt; &#xA; &lt;li&gt;Can be executed by anyone&lt;/li&gt; &#xA; &lt;li&gt;Testing public API, not internal behavior (overspecification)&lt;/li&gt; &#xA; &lt;li&gt;Looks like production code&lt;/li&gt; &#xA; &lt;li&gt;Treated as production code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unit tests should mainly test business logic (domain model): &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/unit_tests.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each unit test has 3 standard sections: Arrange, Act and Assert:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/UnitTestsGeneral.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Arrange&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Arrange section is responsible for preparing the Aggregate for testing the public method that we want to test. This public method is often called (from the unit tests perspective) the SUT (system under test).&lt;/p&gt; &#xA;&lt;p&gt;Creating an Aggregate ready for testing involves &lt;strong&gt;calling one or more other public constructors/methods&lt;/strong&gt; on the Domain Model. At first it may seem that we are testing too many things at the same time, but this is not true. We need to be one hundred percent sure that the Aggregate is in a state exactly as it will be in production. This can only be ensured when we:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use only public API of Domain Model&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute?view=netframework-4.8&#34;&gt;InternalsVisibleToAttribute&lt;/a&gt; class &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This exposes the Domain Model to the Unit Tests library, removing encapsulation so our tests and production code are treated differently and it is a very bad thing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.conditionalattribute?view=netframework-4.8&#34;&gt;ConditionalAttribute&lt;/a&gt; classes - it reduces readability and increases complexity&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t create any special constructors/factory methods for tests (even with conditional compilation symbols) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Special constructor/factory method only for unit tests causes duplication of business logic in the test itself and focuses on state - this kind of approach causes the test to be very sensitive to changes and hard to maintain&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t remove encapsulation from Domain Model (for example: change keywords from &lt;code&gt;internal&lt;/code&gt;/&lt;code&gt;private&lt;/code&gt; to &lt;code&gt;public&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t make methods &lt;code&gt;protected&lt;/code&gt; to inherit from tested class and in this way provide access to internal methods/properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Isolation of external dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are 2 main concepts - stubs and mocks:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A stub is a controllable replacement for an existing dependency (or collaborator) in the system. By using a stub, you can test your code without dealing with the dependency directly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A mock object is a fake object in the system that decides whether the unit test has passed or failed. It does so by verifying whether the object under test called the fake object as expected. There’s usually no more than one mock per test. &lt;a href=&#34;https://www.manning.com/books/the-art-of-unit-testing-second-edition&#34;&gt;Art of Unit Testing 2nd Edition&lt;/a&gt; Roy Osherove&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Good advice: use stubs if you need to, but try to avoid mocks. Mocking causes us to test too many internal things and leads to overspecification.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Act&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This section is very easy - we execute &lt;strong&gt;exactly one&lt;/strong&gt; public method on aggregate (SUT).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Assert&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this section we check expectations. There are only 2 possible outcomes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Method completed and Domain Event(s) published&lt;/li&gt; &#xA; &lt;li&gt;Business rule was broken&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void NewUserRegistration_WithUniqueLogin_IsSuccessful()&#xA;{&#xA;    // Arrange&#xA;    var usersCounter = Substitute.For&amp;lt;IUsersCounter&amp;gt;();&#xA;&#xA;    // Act&#xA;    var userRegistration =&#xA;        UserRegistration.RegisterNewUser(&#xA;            &#34;login&#34;, &#34;password&#34;, &#34;test@email&#34;,&#xA;            &#34;firstName&#34;, &#34;lastName&#34;, usersCounter);&#xA;&#xA;    // Assert&#xA;    var newUserRegisteredDomainEvent = AssertPublishedDomainEvent&amp;lt;NewUserRegisteredDomainEvent&amp;gt;(userRegistration);&#xA;    Assert.That(newUserRegisteredDomainEvent.UserRegistrationId, Is.EqualTo(userRegistration.Id));&#xA;}&#xA;&#xA;[Test]&#xA;public void NewUserRegistration_WithoutUniqueLogin_BreaksUserLoginMustBeUniqueRule()&#xA;{&#xA;    // Arrange&#xA;    var usersCounter = Substitute.For&amp;lt;IUsersCounter&amp;gt;();&#xA;    usersCounter.CountUsersWithLogin(&#34;login&#34;).Returns(x =&amp;gt; 1);&#xA;&#xA;    // Assert&#xA;    AssertBrokenRule&amp;lt;UserLoginMustBeUniqueRule&amp;gt;(() =&amp;gt;&#xA;    {&#xA;        // Act&#xA;        UserRegistration.RegisterNewUser(&#xA;            &#34;login&#34;, &#34;password&#34;, &#34;test@email&#34;,&#xA;            &#34;firstName&#34;, &#34;lastName&#34;, usersCounter);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Advanced example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Test]&#xA;public void AddAttendee_WhenMemberIsAlreadyAttendeeOfMeeting_IsNotPossible()&#xA;{&#xA;    // Arrange&#xA;    var creatorId = new MemberId(Guid.NewGuid());&#xA;    var meetingTestData = CreateMeetingTestData(new MeetingTestDataOptions&#xA;    {&#xA;        CreatorId = creatorId&#xA;    });&#xA;    var newMemberId = new MemberId(Guid.NewGuid());&#xA;    meetingTestData.MeetingGroup.JoinToGroupMember(newMemberId);&#xA;    meetingTestData.Meeting.AddAttendee(meetingTestData.MeetingGroup, newMemberId, 0);&#xA;&#xA;    // Assert&#xA;    AssertBrokenRule&amp;lt;MemberCannotBeAnAttendeeOfMeetingMoreThanOnceRule&amp;gt;(() =&amp;gt;&#xA;    {&#xA;        // Act&#xA;        meetingTestData.Meeting.AddAttendee(meetingTestData.MeetingGroup, newMemberId, 0);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;CreateMeetingTestData&lt;/code&gt; method is an implementation of &lt;a href=&#34;https://blog.ploeh.dk/2009/02/13/SUTFactory/&#34;&gt;SUT Factory&lt;/a&gt; described by Mark Seemann which allows keeping common creation logic in one place:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;protected MeetingTestData CreateMeetingTestData(MeetingTestDataOptions options)&#xA;{&#xA;    var proposalMemberId = options.CreatorId ?? new MemberId(Guid.NewGuid());&#xA;    var meetingProposal = MeetingGroupProposal.ProposeNew(&#xA;        &#34;name&#34;, &#34;description&#34;,&#xA;        new MeetingGroupLocation(&#34;Warsaw&#34;, &#34;PL&#34;), proposalMemberId);&#xA;&#xA;    meetingProposal.Accept();&#xA;&#xA;    var meetingGroup = meetingProposal.CreateMeetingGroup();&#xA;&#xA;    meetingGroup.UpdatePaymentInfo(DateTime.Now.AddDays(1));&#xA;&#xA;    var meetingTerm = options.MeetingTerm ??&#xA;                      new MeetingTerm(DateTime.UtcNow.AddDays(1), DateTime.UtcNow.AddDays(2));&#xA;&#xA;    var rsvpTerm = options.RvspTerm ?? Term.NoTerm;&#xA;    var meeting = meetingGroup.CreateMeeting(&#34;title&#34;,&#xA;        meetingTerm,&#xA;        &#34;description&#34;,&#xA;        new MeetingLocation(&#34;Name&#34;, &#34;Address&#34;, &#34;PostalCode&#34;, &#34;City&#34;),&#xA;        options.AttendeesLimit,&#xA;        options.GuestsLimit,&#xA;        rsvpTerm,&#xA;        MoneyValue.Zero,&#xA;        new List&amp;lt;MemberId&amp;gt;(),&#xA;        proposalMemberId);&#xA;&#xA;    DomainEventsTestHelper.ClearAllDomainEvents(meetingGroup);&#xA;&#xA;    return new MeetingTestData(meetingGroup, meeting);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.11 Architecture Decision Log&lt;/h3&gt; &#xA;&lt;p&gt;All Architectural Decisions (AD) are documented in the &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/architecture-decision-log&#34;&gt;Architecture Decision Log (ADL)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More information about documenting architecture-related decisions in this way : &lt;a href=&#34;https://github.com/joelparkerhenderson/architecture_decision_record&#34;&gt;https://github.com/joelparkerhenderson/architecture_decision_record&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.12 Architecture Unit Tests&lt;/h3&gt; &#xA;&lt;p&gt;In some cases it is not possible to enforce the application architecture, design or established conventions using compiler (compile-time). For this reason, code implementations can diverge from the original design and architecture. We want to minimize this behavior, not only by code review.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;To do this, unit tests of system architecture, design, major conventions and assumptions have been written. In .NET there is special library for this task: &lt;a href=&#34;https://github.com/BenMorris/NetArchTest&#34;&gt;NetArchTest&lt;/a&gt;. This library has been written based on the very popular JAVA architecture unit tests library - &lt;a href=&#34;https://www.archunit.org/&#34;&gt;ArchUnit&lt;/a&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using this kind of tests we can test proper layering of our application, dependencies, encapsulation, immutability, DDD correct implementation, naming, conventions and so on - everything what we need to test. Example:&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/architecture_unit_tests.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More information about architecture unit tests here: &lt;a href=&#34;https://blogs.oracle.com/javamagazine/unit-test-your-architecture-with-archunit&#34;&gt;https://blogs.oracle.com/javamagazine/unit-test-your-architecture-with-archunit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.13 Integration Tests&lt;/h3&gt; &#xA;&lt;h4&gt;Definition&lt;/h4&gt; &#xA;&lt;p&gt;&#34;Integration Test&#34; term is blurred. It can mean test between classes, modules, services, even systems - see &lt;a href=&#34;https://martinfowler.com/bliki/IntegrationTest.html&#34;&gt;this&lt;/a&gt; article (by Martin Fowler). &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;For this reason, the definition of integration test in this project is as follows:&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it verifies how system works in integration with &#34;out-of-process&#34; dependencies - database, messaging system, file system or external API&lt;/li&gt; &#xA; &lt;li&gt;it tests particular use case&lt;/li&gt; &#xA; &lt;li&gt;it can be slow (as opposed to Unit Test)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Approach&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do not mock dependencies over which you have full control&lt;/strong&gt; (like database). Full control dependency means you can always revert all changes (remove side-effects) and no one can notice it. They are not visible to others. See next point, please.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use &#34;production&#34;, normal, real database version&lt;/strong&gt;. Some use e.g. in memory repository, some use light databases instead &#34;production&#34; version. This is still mocking. Testing makes sense if we have full confidence in testing. You can&#39;t trust the test if you know that the infrastructure in the production environment will vary. Be always as close to production environment as possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mock dependencies over which you don&#39;t have control&lt;/strong&gt;. No control dependency means you can&#39;t remove side-effects after interaction with this dependency (external API, messaging system, SMTP server etc.). They can be visible to others.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implementation&lt;/h4&gt; &#xA;&lt;p&gt;Integration test should test exactly one use case. One use case is represented by one Command/Query processing so CommandHandler/QueryHandler in Application layer is perfect starting point for running the Integration Test:&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/integration_tests.jpg&#34; alt=&#34;&#34;&gt; For each test, the following preparation steps must be performed:&lt;br&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clear database&lt;/li&gt; &#xA; &lt;li&gt;Prepare mocks&lt;/li&gt; &#xA; &lt;li&gt;Initialize testing module&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[SetUp]&#xA;public async Task BeforeEachTest()&#xA;{&#xA;    const string connectionStringEnvironmentVariable =&#xA;        &#34;ASPNETCORE_MyMeetings_IntegrationTests_ConnectionString&#34;;&#xA;    ConnectionString = Environment.GetEnvironmentVariable(connectionStringEnvironmentVariable, EnvironmentVariableTarget.Machine);&#xA;    if (ConnectionString == null)&#xA;    {&#xA;        throw new ApplicationException(&#xA;            $&#34;Define connection string to integration tests database using environment variable: {connectionStringEnvironmentVariable}&#34;);&#xA;    }&#xA;&#xA;    using (var sqlConnection = new SqlConnection(ConnectionString))&#xA;    {&#xA;        await ClearDatabase(sqlConnection);&#xA;    }&#xA;&#xA;    Logger = Substitute.For&amp;lt;ILogger&amp;gt;();&#xA;    EmailSender = Substitute.For&amp;lt;IEmailSender&amp;gt;();&#xA;    EventsBus = new EventsBusMock();&#xA;    ExecutionContext = new ExecutionContextMock(Guid.NewGuid());&#xA;    &#xA;    PaymentsStartup.Initialize(&#xA;        ConnectionString,&#xA;        ExecutionContext,&#xA;        Logger,&#xA;        EventsBus,&#xA;        false);&#xA;&#xA;    PaymentsModule = new PaymentsModule();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After preparation, test is performed on clear database. Usually, it is the execution of some (or many) Commands and: &lt;br&gt; a) running a Query or/and &lt;br&gt; b) verifying mocks &lt;br&gt; to check the result.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]&#xA;public class MeetingPaymentTests : TestBase&#xA;{&#xA;    [Test]&#xA;    public async Task CreateMeetingPayment_Test()&#xA;    {&#xA;        PayerId payerId = new PayerId(Guid.NewGuid());&#xA;        MeetingId meetingId = new MeetingId(Guid.NewGuid());&#xA;        decimal value = 100;&#xA;        string currency = &#34;EUR&#34;;&#xA;        await PaymentsModule.ExecuteCommandAsync(new CreateMeetingPaymentCommand(Guid.NewGuid(),&#xA;            payerId, meetingId, value, currency));&#xA;&#xA;        var payment = await PaymentsModule.ExecuteQueryAsync(new GetMeetingPaymentQuery(meetingId.Value, payerId.Value));&#xA;&#xA;        Assert.That(payment.PayerId, Is.EqualTo(payerId.Value));&#xA;        Assert.That(payment.MeetingId, Is.EqualTo(meetingId.Value));&#xA;        Assert.That(payment.FeeValue, Is.EqualTo(value));&#xA;        Assert.That(payment.FeeCurrency, Is.EqualTo(currency));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each Command/Query processing is a separate execution (with different object graph resolution, context, database connection etc.) thanks to Composition Root of each module. This behavior is important and desirable.&lt;/p&gt; &#xA;&lt;h3&gt;3.14 System Integration Testing&lt;/h3&gt; &#xA;&lt;h4&gt;Definition&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/System_integration_testing&#34;&gt;System Integration Testing (SIT)&lt;/a&gt; is performed to verify the interactions between the modules of a software system. It involves the overall testing of a complete system of many subsystem components or elements.&lt;/p&gt; &#xA;&lt;h4&gt;Implementation&lt;/h4&gt; &#xA;&lt;p&gt;Implementation of system integration tests is based on approach of integration testing of modules in isolation (invoking commands and queries) described in the previous section.&lt;/p&gt; &#xA;&lt;p&gt;The problem is that in this case we are dealing with &lt;strong&gt;asynchronous communication&lt;/strong&gt;. Due to asynchrony, our &lt;strong&gt;test must wait for the result&lt;/strong&gt; at certain times.&lt;/p&gt; &#xA;&lt;p&gt;To correctly implement such tests, the &lt;strong&gt;Sampling&lt;/strong&gt; technique and implementation described in the &lt;a href=&#34;https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627&#34;&gt;Growing Object-Oriented Software, Guided by Tests&lt;/a&gt; book was used:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An asynchronous test must wait for success and use timeouts to detect failure. This implies that every tested activity must have an observable effect: a test must affect the system so that its observable state becomes different. This sounds obvious but it drives how we think about writing asynchronous tests. If an activity has no observable effect, there is nothing the test can wait for, and therefore no way for the test to synchronize with the system it is testing. There are two ways a test can observe the system: by sampling its observable state or by listening for events that it sends out.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/SystemIntegrationTests.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates Meeting Group Proposal in Meetings module&lt;/li&gt; &#xA; &lt;li&gt;Waits until Meeting Group Proposal to verification will be available in Administration module with 10 seconds timeout&lt;/li&gt; &#xA; &lt;li&gt;Accepts Meeting Group Proposal in Administration module&lt;/li&gt; &#xA; &lt;li&gt;Waits until Meeting Group is created in Meetings module with 15 seconds timeout&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class CreateMeetingGroupTests : TestBase&#xA;{&#xA;    [Test]&#xA;    public async Task CreateMeetingGroupScenario_WhenProposalIsAccepted()&#xA;    {&#xA;        var meetingGroupId = await MeetingsModule.ExecuteCommandAsync(&#xA;            new ProposeMeetingGroupCommand(&#34;Name&#34;,&#xA;            &#34;Description&#34;,&#xA;            &#34;Location&#34;,&#xA;            &#34;PL&#34;));&#xA;&#xA;        AssertEventually(&#xA;            new GetMeetingGroupProposalFromAdministrationProbe(meetingGroupId, AdministrationModule), &#xA;            10000);&#xA;&#xA;        await AdministrationModule.ExecuteCommandAsync(new AcceptMeetingGroupProposalCommand(meetingGroupId));&#xA;&#xA;        AssertEventually(&#xA;            new GetCreatedMeetingGroupFromMeetingsProbe(meetingGroupId, MeetingsModule),&#xA;            15000);&#xA;    }&#xA;&#xA;    private class GetCreatedMeetingGroupFromMeetingsProbe : IProbe&#xA;    {&#xA;        private readonly Guid _expectedMeetingGroupId;&#xA;&#xA;        private readonly IMeetingsModule _meetingsModule;&#xA;&#xA;        private List&amp;lt;MeetingGroupDto&amp;gt; _allMeetingGroups;&#xA;&#xA;        public GetCreatedMeetingGroupFromMeetingsProbe(&#xA;            Guid expectedMeetingGroupId, &#xA;            IMeetingsModule meetingsModule)&#xA;        {&#xA;            _expectedMeetingGroupId = expectedMeetingGroupId;&#xA;            _meetingsModule = meetingsModule;&#xA;        }&#xA;&#xA;        public bool IsSatisfied()&#xA;        {&#xA;            return _allMeetingGroups != null &amp;amp;&amp;amp; &#xA;                   _allMeetingGroups.Any(x =&amp;gt; x.Id == _expectedMeetingGroupId);&#xA;        }&#xA;&#xA;        public async Task SampleAsync()&#xA;        {&#xA;            _allMeetingGroups = await _meetingsModule.ExecuteQueryAsync(new GetAllMeetingGroupsQuery());&#xA;        }&#xA;&#xA;        public string DescribeFailureTo() &#xA;            =&amp;gt; $&#34;Meeting group with ID: {_expectedMeetingGroupId} is not created&#34;;&#xA;    }&#xA;&#xA;    private class GetMeetingGroupProposalFromAdministrationProbe : IProbe&#xA;    {&#xA;        private readonly Guid _expectedMeetingGroupProposalId;&#xA;&#xA;        private MeetingGroupProposalDto _meetingGroupProposal;&#xA;&#xA;        private readonly IAdministrationModule _administrationModule;&#xA;&#xA;        public GetMeetingGroupProposalFromAdministrationProbe(Guid expectedMeetingGroupProposalId, IAdministrationModule administrationModule)&#xA;        {&#xA;            _expectedMeetingGroupProposalId = expectedMeetingGroupProposalId;&#xA;            _administrationModule = administrationModule;&#xA;        }&#xA;&#xA;        public bool IsSatisfied()&#xA;        {&#xA;            if (_meetingGroupProposal == null)&#xA;            {&#xA;                return false;&#xA;            }&#xA;&#xA;            if (_meetingGroupProposal.Id == _expectedMeetingGroupProposalId &amp;amp;&amp;amp;&#xA;                _meetingGroupProposal.StatusCode == MeetingGroupProposalStatus.ToVerify.Value)&#xA;            {&#xA;                return true;&#xA;            }&#xA;&#xA;            return false;&#xA;        }&#xA;&#xA;        public async Task SampleAsync()&#xA;        {&#xA;            try&#xA;            {&#xA;                _meetingGroupProposal =&#xA;                    await _administrationModule.ExecuteQueryAsync(&#xA;                        new GetMeetingGroupProposalQuery(_expectedMeetingGroupProposalId));&#xA;            }&#xA;            catch&#xA;            {&#xA;                // ignored&#xA;            }&#xA;        }&#xA;&#xA;        public string DescribeFailureTo()&#xA;            =&amp;gt; $&#34;Meeting group proposal with ID: {_expectedMeetingGroupProposalId} to verification not created&#34;;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Poller class implementation (based on example in the book):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Poller&#xA;{&#xA;    private readonly int _timeoutMillis;&#xA;&#xA;    private readonly int _pollDelayMillis;&#xA;&#xA;    public Poller(int timeoutMillis)&#xA;    {&#xA;        _timeoutMillis = timeoutMillis;&#xA;        _pollDelayMillis = 1000;&#xA;    }&#xA;&#xA;    public void Check(IProbe probe)&#xA;    {&#xA;        var timeout = new Timeout(_timeoutMillis);&#xA;        while (!probe.IsSatisfied())&#xA;        {&#xA;            if (timeout.HasTimedOut())&#xA;            {&#xA;                throw new AssertErrorException(DescribeFailureOf(probe));&#xA;            }&#xA;&#xA;            Thread.Sleep(_pollDelayMillis);&#xA;            probe.SampleAsync();&#xA;        }&#xA;    }&#xA;&#xA;    private static string DescribeFailureOf(IProbe probe)&#xA;    {&#xA;        return probe.DescribeFailureTo();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.15 Event Sourcing&lt;/h3&gt; &#xA;&lt;h4&gt;Theory&lt;/h4&gt; &#xA;&lt;p&gt;During the implementation of the Payment module, &lt;em&gt;Event Sourcing&lt;/em&gt; was used. &lt;em&gt;Event Sourcing&lt;/em&gt; is a way of preserving the state of our system by recording a sequence of events. No less, no more.&lt;/p&gt; &#xA;&lt;p&gt;It is important here to really restore the state of our application from events. If we collect events only for auditing purposes, it is an &lt;a href=&#34;https://en.wikipedia.org/wiki/Audit_trail&#34;&gt;Audit Log/Trail&lt;/a&gt; - not the &lt;em&gt;Event Sourcing&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main elements of &lt;em&gt;Event Sourcing&lt;/em&gt; are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Events Stream&lt;/li&gt; &#xA; &lt;li&gt;Objects that are restored based on events. There are 2 types of such objects depending on the purpose: -- Objects responsible for the change of state. In Domain-Driven Design they will be &lt;em&gt;Aggregates&lt;/em&gt;. -- &lt;em&gt;Projections&lt;/em&gt;: read models prepared for a specific purpose&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Subscriptions&lt;/em&gt; : a way to receive information about new events&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Snapshots&lt;/em&gt;: from time to time, objects saved in the traditional way for performance purposes. Mainly used if there are many events to restore the object from the entire event history. (Note: there is currently no snapshot implementation in the project)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ES_elements.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Tool&lt;/h4&gt; &#xA;&lt;p&gt;In order not to reinvent the wheel, the &lt;em&gt;SQL Stream Store&lt;/em&gt; library was used. As the &lt;a href=&#34;https://sqlstreamstore.readthedocs.io/en/latest/&#34;&gt;documentation&lt;/a&gt; says:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;SQL Stream Store is a .NET library to assist with developing applications that use event sourcing or wish to use stream based patterns over a relational database and existing operational infrastructure.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like every library, it has its limitations and assumptions (I recommend the linked documentation chapter &#34;Things you need to know before adopting&#34;). For me, the most important 2 points from this chapter are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;&#34;Subscriptions (and thus projections) are &lt;strong&gt;eventually consistent&lt;/strong&gt; and always will be.&#34;&lt;/em&gt; This means that there will always be an inconsistency time from saving the event to the stream and processing the event by the projector(s).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&#34;No support for ambient System.Transaction scopes enforcing the concept of the stream as the consistency and transactional boundary.&#34;&lt;/em&gt; This means that if we save the event to a events stream and want to save something &lt;strong&gt;in the same transaction&lt;/strong&gt;, we must use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.transactions.transactionscope?view=netcore-3.1&#34;&gt;TransactionScope&lt;/a&gt;. If we cannot use &lt;em&gt;TransactionScope&lt;/em&gt; for some reason, we must accept the Eventual Consistency also in this case.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Other popular tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eventstore.com/&#34;&gt;EventStore&lt;/a&gt; &lt;em&gt;&#34;An industrial-strength database solution built from the ground up for event sourcing.&#34;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martendb.io/&#34;&gt;Marten&lt;/a&gt; &lt;em&gt;&#34;.NET Transactional Document DB and Event Store on PostgreSQL&#34;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Implementation&lt;/h4&gt; &#xA;&lt;p&gt;There are 2 main &#34;flows&#34; to handle:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command handling: change of state - adding new events to stream (writing)&lt;/li&gt; &#xA; &lt;li&gt;Projection of events to create read models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Command Handling&lt;/h5&gt; &#xA;&lt;p&gt;The whole process looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ES_command_handling.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We create / update an aggregate by creating an event&lt;/li&gt; &#xA; &lt;li&gt;We add changes to the Aggregate Store. This is the class responsible for writing / loading our aggregates. We are not saving changes yet.&lt;/li&gt; &#xA; &lt;li&gt;As part of Unit Of Work a) Aggregate Store adds events to the stream b) messages are added to the Outbox&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Command Handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class BuySubscriptionCommandHandler : ICommandHandler&amp;lt;BuySubscriptionCommand, Guid&amp;gt;&#xA;{&#xA;    private readonly IAggregateStore _aggregateStore;&#xA;&#xA;    private readonly IPayerContext _payerContext;&#xA;&#xA;    private readonly ISqlConnectionFactory _sqlConnectionFactory;&#xA;&#xA;    public BuySubscriptionCommandHandler(&#xA;        IAggregateStore aggregateStore, &#xA;        IPayerContext payerContext, &#xA;        ISqlConnectionFactory sqlConnectionFactory)&#xA;    {&#xA;        _aggregateStore = aggregateStore;&#xA;        _payerContext = payerContext;&#xA;        _sqlConnectionFactory = sqlConnectionFactory;&#xA;    }&#xA;&#xA;    public async Task&amp;lt;Guid&amp;gt; Handle(BuySubscriptionCommand command, CancellationToken cancellationToken)&#xA;    {&#xA;        var priceList = await PriceListProvider.GetPriceList(_sqlConnectionFactory.GetOpenConnection());&#xA;&#xA;        var subscriptionPayment = SubscriptionPayment.Buy(&#xA;            _payerContext.PayerId,&#xA;            SubscriptionPeriod.Of(command.SubscriptionTypeCode),&#xA;            command.CountryCode,&#xA;            MoneyValue.Of(command.Value, command.Currency),&#xA;            priceList);&#xA;        &#xA;        _aggregateStore.AppendChanges(subscriptionPayment);&#xA;&#xA;        return subscriptionPayment.Id;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;SubscriptionPayment&lt;/code&gt; Aggregate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class SubscriptionPayment : AggregateRoot&#xA;{&#xA;    private PayerId _payerId;&#xA;&#xA;    private SubscriptionPeriod _subscriptionPeriod;&#xA;&#xA;    private string _countryCode;&#xA;&#xA;    private SubscriptionPaymentStatus _subscriptionPaymentStatus;&#xA;&#xA;    private MoneyValue _value;&#xA;&#xA;    protected override void Apply(IDomainEvent @event)&#xA;    {&#xA;        this.When((dynamic)@event);&#xA;    }&#xA;&#xA;    public static SubscriptionPayment Buy(&#xA;        PayerId payerId,&#xA;        SubscriptionPeriod period,&#xA;        string countryCode,&#xA;        MoneyValue priceOffer,&#xA;        PriceList priceList)&#xA;    {&#xA;        var priceInPriceList = priceList.GetPrice(countryCode, period, PriceListItemCategory.New);&#xA;        CheckRule(new PriceOfferMustMatchPriceInPriceListRule(priceOffer, priceInPriceList));&#xA;&#xA;        var subscriptionPayment = new SubscriptionPayment();&#xA;&#xA;        var subscriptionPaymentCreated = new SubscriptionPaymentCreatedDomainEvent(&#xA;            Guid.NewGuid(),&#xA;            payerId.Value,&#xA;            period.Code,&#xA;            countryCode,&#xA;            SubscriptionPaymentStatus.WaitingForPayment.Code,&#xA;            priceOffer.Value,&#xA;            priceOffer.Currency);&#xA;&#xA;        subscriptionPayment.Apply(subscriptionPaymentCreated);&#xA;        subscriptionPayment.AddDomainEvent(subscriptionPaymentCreated);&#xA;&#xA;        return subscriptionPayment;&#xA;    }&#xA;&#xA;    private void When(SubscriptionPaymentCreatedDomainEvent @event)&#xA;    {&#xA;        this.Id = @event.SubscriptionPaymentId;&#xA;        _payerId = new PayerId(@event.PayerId);&#xA;        _subscriptionPeriod = SubscriptionPeriod.Of(@event.SubscriptionPeriodCode);&#xA;        _countryCode = @event.CountryCode;&#xA;        _subscriptionPaymentStatus = SubscriptionPaymentStatus.Of(@event.Status);&#xA;        _value = MoneyValue.Of(@event.Value, @event.Currency);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;AggregateRoot&lt;/code&gt; base class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public abstract class AggregateRoot&#xA;{&#xA;    public Guid Id { get; protected set; }&#xA;&#xA;    public int Version { get; private set; }&#xA;&#xA;    private readonly List&amp;lt;IDomainEvent&amp;gt; _domainEvents;&#xA;&#xA;    protected AggregateRoot()&#xA;    {&#xA;        _domainEvents = new List&amp;lt;IDomainEvent&amp;gt;();&#xA;&#xA;        Version = -1;&#xA;    }&#xA;&#xA;    protected void AddDomainEvent(IDomainEvent @event)&#xA;    {&#xA;        _domainEvents.Add(@event);&#xA;    }&#xA;&#xA;    public IReadOnlyCollection&amp;lt;IDomainEvent&amp;gt; GetDomainEvents() =&amp;gt; _domainEvents.AsReadOnly();&#xA;&#xA;    public void Load(IEnumerable&amp;lt;IDomainEvent&amp;gt; history)&#xA;    {&#xA;        foreach (var e in history)&#xA;        {&#xA;            Apply(e);&#xA;            Version++;&#xA;        }&#xA;    }&#xA;&#xA;    protected abstract void Apply(IDomainEvent @event);&#xA;&#xA;    protected static void CheckRule(IBusinessRule rule)&#xA;    {&#xA;        if (rule.IsBroken())&#xA;        {&#xA;            throw new BusinessRuleValidationException(rule);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Aggregate Store implementation with SQL Stream Store library usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class SqlStreamAggregateStore : IAggregateStore&#xA;{&#xA;    private readonly IStreamStore _streamStore;&#xA;&#xA;    private readonly List&amp;lt;IDomainEvent&amp;gt; _appendedChanges;&#xA;&#xA;    private readonly List&amp;lt;AggregateToSave&amp;gt; _aggregatesToSave;&#xA;&#xA;    public SqlStreamAggregateStore(&#xA;        ISqlConnectionFactory sqlConnectionFactory)&#xA;    {&#xA;        _appendedChanges = new List&amp;lt;IDomainEvent&amp;gt;();&#xA;&#xA;        _streamStore =&#xA;            new MsSqlStreamStore(&#xA;                new MsSqlStreamStoreSettings(sqlConnectionFactory.GetConnectionString())&#xA;                    {&#xA;                        Schema = DatabaseSchema.Name&#xA;                });&#xA;&#xA;        _aggregatesToSave = new List&amp;lt;AggregateToSave&amp;gt;();&#xA;    }&#xA;&#xA;    public async Task Save()&#xA;    {&#xA;        foreach (var aggregateToSave in _aggregatesToSave)&#xA;        {&#xA;            await _streamStore.AppendToStream(&#xA;                GetStreamId(aggregateToSave.Aggregate),&#xA;                aggregateToSave.Aggregate.Version,&#xA;                aggregateToSave.Messages.ToArray());&#xA;        }&#xA;&#xA;        _aggregatesToSave.Clear();&#xA;    }&#xA;&#xA;    public async Task&amp;lt;T&amp;gt; Load&amp;lt;T&amp;gt;(AggregateId&amp;lt;T&amp;gt; aggregateId) where T : AggregateRoot&#xA;    {&#xA;        var streamId = GetStreamId(aggregateId);&#xA;&#xA;        IList&amp;lt;IDomainEvent&amp;gt; domainEvents = new List&amp;lt;IDomainEvent&amp;gt;();&#xA;        ReadStreamPage readStreamPage;&#xA;        do&#xA;        {&#xA;            readStreamPage = await _streamStore.ReadStreamForwards(streamId, StreamVersion.Start, maxCount: 100);&#xA;            var messages = readStreamPage.Messages;&#xA;            foreach (var streamMessage in messages)&#xA;            {&#xA;                Type type = DomainEventTypeMappings.Dictionary[streamMessage.Type];&#xA;                var jsonData = await streamMessage.GetJsonData();&#xA;                var domainEvent = JsonConvert.DeserializeObject(jsonData, type) as IDomainEvent;&#xA;&#xA;                domainEvents.Add(domainEvent);&#xA;            }&#xA;        } while (!readStreamPage.IsEnd);&#xA;&#xA;        var aggregate = (T)Activator.CreateInstance(typeof(T), true);&#xA;&#xA;        aggregate.Load(domainEvents);&#xA;&#xA;        return aggregate;&#xA;    }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Events Projection&lt;/h5&gt; &#xA;&lt;p&gt;The whole process looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ES_events_projection.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Special class &lt;code&gt;Subscriptions Manager&lt;/code&gt; subscribes to Events Store (using SQL Store Stream library)&lt;/li&gt; &#xA; &lt;li&gt;Events Store raises &lt;code&gt;StreamMessageRecievedEvent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Subscriptions Manager&lt;/code&gt; invokes all projectors&lt;/li&gt; &#xA; &lt;li&gt;If projector know how to handle given event, it updates particular read model. In current implementation it updates special table in SQL database.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;SubscriptionsManager&lt;/code&gt; class implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class SubscriptionsManager&#xA;{&#xA;    private readonly IStreamStore _streamStore;&#xA;&#xA;    public SubscriptionsManager(&#xA;        IStreamStore streamStore)&#xA;    {&#xA;        _streamStore = streamStore;&#xA;    }&#xA;&#xA;    public void Start()&#xA;    {&#xA;        long? actualPosition;&#xA;&#xA;        using (var scope = PaymentsCompositionRoot.BeginLifetimeScope())&#xA;        {&#xA;            var checkpointStore = scope.Resolve&amp;lt;ICheckpointStore&amp;gt;();&#xA;&#xA;            actualPosition = checkpointStore.GetCheckpoint(SubscriptionCode.All);&#xA;        }&#xA;&#xA;        _streamStore.SubscribeToAll(actualPosition, StreamMessageReceived);&#xA;    }&#xA;&#xA;    public void Stop()&#xA;    {&#xA;        _streamStore.Dispose();&#xA;    }&#xA;&#xA;    private static async Task StreamMessageReceived(&#xA;        IAllStreamSubscription subscription, StreamMessage streamMessage, CancellationToken cancellationToken)&#xA;    {&#xA;        var type = DomainEventTypeMappings.Dictionary[streamMessage.Type];&#xA;        var jsonData = await streamMessage.GetJsonData(cancellationToken);&#xA;        var domainEvent = JsonConvert.DeserializeObject(jsonData, type) as IDomainEvent;&#xA;&#xA;        using var scope = PaymentsCompositionRoot.BeginLifetimeScope();&#xA;&#xA;        var projectors = scope.Resolve&amp;lt;IList&amp;lt;IProjector&amp;gt;&amp;gt;();&#xA;&#xA;        var tasks = projectors&#xA;            .Select(async projector =&amp;gt;&#xA;            {&#xA;                await projector.Project(domainEvent);&#xA;            });&#xA;&#xA;        await Task.WhenAll(tasks);&#xA;&#xA;        var checkpointStore = scope.Resolve&amp;lt;ICheckpointStore&amp;gt;();&#xA;        await checkpointStore.StoreCheckpoint(SubscriptionCode.All, streamMessage.Position);&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example projector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;internal class SubscriptionDetailsProjector : ProjectorBase, IProjector&#xA;{&#xA;    private readonly IDbConnection _connection;&#xA;&#xA;    public SubscriptionDetailsProjector(ISqlConnectionFactory sqlConnectionFactory)&#xA;    {&#xA;        _connection = sqlConnectionFactory.GetOpenConnection();&#xA;    }&#xA;&#xA;    public async Task Project(IDomainEvent @event)&#xA;    {&#xA;        await When((dynamic) @event);&#xA;    }&#xA;&#xA;    private async Task When(SubscriptionRenewedDomainEvent subscriptionRenewed)&#xA;    {&#xA;        var period = SubscriptionPeriod.GetName(subscriptionRenewed.SubscriptionPeriodCode);&#xA;        &#xA;        await _connection.ExecuteScalarAsync(&#34;UPDATE payments.SubscriptionDetails &#34; +&#xA;                                                &#34;SET &#34; +&#xA;                                                    &#34;[Status] = @Status, &#34; +&#xA;                                                    &#34;[ExpirationDate] = @ExpirationDate, &#34; +&#xA;                                                    &#34;[Period] = @Period &#34; +&#xA;                                                &#34;WHERE [Id] = @SubscriptionId&#34;,&#xA;            new&#xA;            {&#xA;                subscriptionRenewed.SubscriptionId,&#xA;                subscriptionRenewed.Status,&#xA;                subscriptionRenewed.ExpirationDate,&#xA;                period&#xA;            });&#xA;    }&#xA;&#xA;    private async Task When(SubscriptionExpiredDomainEvent subscriptionExpired)&#xA;    {&#xA;        await _connection.ExecuteScalarAsync(&#34;UPDATE payments.SubscriptionDetails &#34; +&#xA;                                             &#34;SET &#34; +&#xA;                                             &#34;[Status] = @Status &#34; +&#xA;                                             &#34;WHERE [Id] = @SubscriptionId&#34;,&#xA;            new&#xA;            {&#xA;                subscriptionExpired.SubscriptionId,&#xA;                subscriptionExpired.Status&#xA;            });&#xA;    }&#xA;&#xA;    private async Task When(SubscriptionCreatedDomainEvent subscriptionCreated)&#xA;    {&#xA;        var period = SubscriptionPeriod.GetName(subscriptionCreated.SubscriptionPeriodCode);&#xA;        &#xA;        await _connection.ExecuteScalarAsync(&#34;INSERT INTO payments.SubscriptionDetails &#34; +&#xA;                                       &#34;([Id], [Period], [Status], [CountryCode], [ExpirationDate]) &#34; +&#xA;                                       &#34;VALUES (@SubscriptionId, @Period, @Status, @CountryCode, @ExpirationDate)&#34;,&#xA;            new&#xA;            {&#xA;                subscriptionCreated.SubscriptionId,&#xA;                period,&#xA;                subscriptionCreated.Status,&#xA;                subscriptionCreated.CountryCode,&#xA;                subscriptionCreated.ExpirationDate&#xA;            });&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample view of Event Store&lt;/h4&gt; &#xA;&lt;p&gt;Sample &lt;em&gt;Event Store&lt;/em&gt; view after execution of SubscriptionLifecycleTests Integration Test which includes following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creating Price List&lt;/li&gt; &#xA; &lt;li&gt;Buying Subscription&lt;/li&gt; &#xA; &lt;li&gt;Renewing Subscription&lt;/li&gt; &#xA; &lt;li&gt;Expiring Subscription&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;looks like this (&lt;em&gt;SQL Stream Store&lt;/em&gt; table - &lt;em&gt;payments.Messages&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ES_event_store_db_sample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.16 Database Change Management&lt;/h3&gt; &#xA;&lt;p&gt;Database change management is accomplished by &lt;em&gt;migrations/transitions&lt;/em&gt; versioning. Additionally, the current state of the database structure is also versioned.&lt;/p&gt; &#xA;&lt;p&gt;Migrations are applied using a simple &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/Database/DatabaseMigrator&#34;&gt;DatabaseMigrator&lt;/a&gt; console application that uses the &lt;a href=&#34;https://dbup.readthedocs.io/en/latest/&#34;&gt;DbUp&lt;/a&gt; library. The current state of the database structure is kept in the &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/ssdt/how-to-create-a-new-database-project&#34;&gt;SSDT Database Project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The database update is performed by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet DatabaseMigrator.dll &#34;connection_string&#34; &#34;scripts_directory_path&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The entire solution is described in detail in the following articles:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kamilgrzybek.com/database/database-change-management/&#34;&gt;Database change management&lt;/a&gt; (theory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kamilgrzybek.com/database/using-database-project-and-dbup-for-database-management/&#34;&gt;Using database project and DbUp for database management&lt;/a&gt; (implementation)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3.17 Continuous Integration&lt;/h3&gt; &#xA;&lt;h4&gt;Definition&lt;/h4&gt; &#xA;&lt;p&gt;As defined on &lt;a href=&#34;https://martinfowler.com/articles/continuousIntegration.html&#34;&gt;Martin Fowler&#39;s website&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;YAML Implementation [OBSOLETE]&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Originally the build was implemented using yaml and GitHub Actions functionality. Currently, the build is implemented with NUKE (see next section). See &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/.github/workflows/buildPipeline.yml&#34;&gt;buildPipeline.yml&lt;/a&gt;&lt;/em&gt; file history.&lt;/p&gt; &#xA;&lt;h5&gt;Pipeline description&lt;/h5&gt; &#xA;&lt;p&gt;CI was implemented using &lt;a href=&#34;https://docs.github.com/en/actions/getting-started-with-github-actions/about-github-actions&#34;&gt;GitHub Actions&lt;/a&gt;. For this purpose, one workflow, which triggers on Pull Request to &lt;em&gt;master&lt;/em&gt; branch or Push to &lt;em&gt;master&lt;/em&gt; branch was created. It contains 2 jobs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build test, execute Unit Tests and Architecture Tests&lt;/li&gt; &#xA; &lt;li&gt;execute Integration Tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ci.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Steps description&lt;/strong&gt;&lt;br&gt; a) Checkout repository - clean checkout of git repository &lt;br&gt; b) Setup .NET Core - install .NET Core SDK&lt;br&gt; c) Install dependencies - resolve NuGet packages&lt;br&gt; d) Build - build solution&lt;br&gt; e) Run Unit Tests - run automated Unit Tests (see section 3.10)&lt;br&gt; f) Run Architecture Tests - run automated Architecture Tests (see section 3.12)&lt;br&gt; g) Initialize containers - setup Docker container for MS SQL Server&lt;br&gt; h) Wait for SQL Server initialization - after container initialization MS SQL Server is not ready, initialization of server itself takes some time so 30 seconds timeout before execution of next step is needed&lt;br&gt; i) Create Database - create and initialize database&lt;br&gt; j) Migrate Database - execute database upgrade using &lt;em&gt;DatabaseMigrator&lt;/em&gt; application (see 3.16 section)&lt;br&gt; k) Run Integration Tests - perform Integration and System Integration Testing (see section 3.13 and 3.14)&lt;br&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Workflow definition&lt;/h5&gt; &#xA;&lt;p&gt;Workflow definition: &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/.github/workflows/buildPipeline.yml&#34;&gt;buildPipeline.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Example workflow execution&lt;/h5&gt; &#xA;&lt;p&gt;Example workflow output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ci_job1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/ci_job2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;NUKE&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nuke.build/&#34;&gt;Nuke&lt;/a&gt; is &lt;em&gt;the cross-platform build automation solution for .NET with C# DSL.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The 2 main advantages of its use over pure yaml defined in GitHub actions are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You run the same code on local machine and in the build server. See &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/.github/workflows/buildPipeline.yml&#34;&gt;buildPipeline.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You use C# with all the goodness (debugging, compilation, packages, refactoring and so on)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is how one of the stage definition looks like (execute Build, Unit Tests, Architecture Tests) &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/build/Build.cs&#34;&gt;Build.cs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;partial class Build : NukeBuild&#xA;{&#xA;    /// Support plugins are available for:&#xA;    ///   - JetBrains ReSharper        https://nuke.build/resharper&#xA;    ///   - JetBrains Rider            https://nuke.build/rider&#xA;    ///   - Microsoft VisualStudio     https://nuke.build/visualstudio&#xA;    ///   - Microsoft VSCode           https://nuke.build/vscode&#xA;&#xA;    public static int Main () =&amp;gt; Execute&amp;lt;Build&amp;gt;(x =&amp;gt; x.Compile);&#xA;&#xA;    [Parameter(&#34;Configuration to build - Default is &#39;Debug&#39; (local) or &#39;Release&#39; (server)&#34;)]&#xA;    readonly Configuration Configuration = IsLocalBuild ? Configuration.Debug : Configuration.Release;&#xA;&#xA;    [Solution] readonly Solution Solution;&#xA;&#xA;    Target Clean =&amp;gt; _ =&amp;gt; _&#xA;        .Before(Restore)&#xA;        .Executes(() =&amp;gt;&#xA;        {&#xA;            EnsureCleanDirectory(WorkingDirectory);&#xA;        });&#xA;&#xA;    Target Restore =&amp;gt; _ =&amp;gt; _&#xA;        .Executes(() =&amp;gt;&#xA;        {&#xA;            DotNetRestore(s =&amp;gt; s&#xA;                .SetProjectFile(Solution));&#xA;        });&#xA;&#xA;    Target Compile =&amp;gt; _ =&amp;gt; _&#xA;        .DependsOn(Restore)&#xA;        .Executes(() =&amp;gt;&#xA;        {&#xA;            DotNetBuild(s =&amp;gt; s&#xA;                .SetProjectFile(Solution)&#xA;                .SetConfiguration(Configuration)&#xA;                .EnableNoRestore());&#xA;        });&#xA;&#xA;    Target UnitTests =&amp;gt; _ =&amp;gt; _&#xA;        .DependsOn(Compile)&#xA;        .Executes(() =&amp;gt;&#xA;        {&#xA;            DotNetTest(s =&amp;gt; s&#xA;                .SetProjectFile(Solution)&#xA;                .SetFilter(&#34;UnitTests&#34;)&#xA;                .SetConfiguration(Configuration)&#xA;                .EnableNoRestore()&#xA;                .EnableNoBuild());&#xA;        });&#xA;&#xA;    Target ArchitectureTests =&amp;gt; _ =&amp;gt; _&#xA;        .DependsOn(UnitTests)&#xA;        .Executes(() =&amp;gt;&#xA;        {&#xA;            DotNetTest(s =&amp;gt; s&#xA;                .SetProjectFile(Solution)&#xA;                .SetFilter(&#34;ArchTests&#34;)&#xA;                .SetConfiguration(Configuration)&#xA;                .EnableNoRestore()&#xA;                .EnableNoBuild());&#xA;        });&#xA;&#xA;    Target BuildAndUnitTests =&amp;gt; _ =&amp;gt; _&#xA;        .Triggers(ArchitectureTests)&#xA;        .Executes(() =&amp;gt;&#xA;        {&#xA;        });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to see more complex scenario when integration tests are executed (with SQL Server database creation using docker) see &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/build/BuildIntegrationTests.cs&#34;&gt;BuildIntegrationTests.cs&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;SQL Server database project build&lt;/h4&gt; &#xA;&lt;p&gt;Currently, compilation of database projects is not supported by the .NET Core and dotnet tool. For this reason, the &lt;a href=&#34;https://github.com/rr-wfm/MSBuild.Sdk.SqlProj/&#34;&gt;MSBuild.Sdk.SqlProj&lt;/a&gt; library was used. In order to do that, you need to create .NET standard library, change SDK and create links to scripts folders. Final &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/Database/CompanyName.MyMeetings.Database.Build/CompanyName.MyMeetings.Database.Build.csproj&#34;&gt;database project&lt;/a&gt; looks as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&#34;MSBuild.Sdk.SqlProj/1.6.0&#34;&amp;gt;&#xA;    &amp;lt;PropertyGroup&amp;gt;&#xA;        &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;&#xA;    &amp;lt;/PropertyGroup&amp;gt;&#xA;    &amp;lt;ItemGroup&amp;gt;&#xA;        &amp;lt;Content Include=&#34;..\CompanyName.MyMeetings.Database\administration\**\*.sql&#34; /&amp;gt;&#xA;        &amp;lt;Content Include=&#34;..\CompanyName.MyMeetings.Database\app\**\*.sql&#34; /&amp;gt;&#xA;        &amp;lt;Content Include=&#34;..\CompanyName.MyMeetings.Database\meetings\**\*.sql&#34; /&amp;gt;&#xA;        &amp;lt;Content Include=&#34;..\CompanyName.MyMeetings.Database\payments\**\*.sql&#34; /&amp;gt;&#xA;        &amp;lt;Content Include=&#34;..\CompanyName.MyMeetings.Database\users\**\*.sql&#34; /&amp;gt;&#xA;        &amp;lt;Content Include=&#34;..\CompanyName.MyMeetings.Database\Security\**\*.sql&#34; /&amp;gt;&#xA;    &amp;lt;/ItemGroup&amp;gt;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.18 Static code analysis&lt;/h3&gt; &#xA;&lt;p&gt;In order to standardize the appearance of the code and increase its readability, the &lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers&#34;&gt;StyleCopAnalyzers&lt;/a&gt; library was used. This library implements StyleCop rules using the .NET Compiler Platform and is responsible for the static code analysis.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using this library is trivial - it is just added as a NuGet package to all projects. There are many ways to configure rules, but currently the best way to do this is to edit the &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/.editorconfig&#34;&gt;.editorconfig&lt;/a&gt; file. More information can be found at the link above.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note! Static code analysis works best when the following points are met:&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Each developer has an IDE that respects the rules and helps to follow them&lt;/li&gt; &#xA; &lt;li&gt;The rules are checked during the project build process as part of Continuous Integration&lt;/li&gt; &#xA; &lt;li&gt;The rules are set to &lt;em&gt;help your system grow&lt;/em&gt;. &lt;strong&gt;Static analysis is not a value in itself.&lt;/strong&gt; Some rules may not make complete sense and should be turned off. Other rules may have higher priority. It all depends on the project, company standards and people involved in the project. Be pragmatic.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;3.19 System Under Test SUT&lt;/h3&gt; &#xA;&lt;p&gt;There is always a need to prepare the entire system in a specific state, e.g. for manual, exploratory, UX / UI tests. The fact that the tests are performed manually does not mean that we cannot automate the preparation phase (Given / Arrange). Thanks to the automation of system state preparation (&lt;a href=&#34;https://en.wikipedia.org/wiki/System_under_test&#34;&gt;System Under Test&lt;/a&gt;), we are able to recreate exactly the same state in any environment. In addition, such automation can be used later to automate the entire test (e.g. through an &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/#313-integration-tests&#34;&gt;3.13 Integration Tests&lt;/a&gt;).&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;The implementation of such automation based on the use of NUKE and the test framework is presented below. As in the case of integration testing, we use the public API of modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/sut-preparation.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Below is a SUT whose task is to go through the whole process - from setting up a &lt;em&gt;Meeting Group&lt;/em&gt;, through its &lt;em&gt;Payment&lt;/em&gt;, adding a new &lt;em&gt;Meeting&lt;/em&gt; and signing up for it by another user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class CreateMeeting : TestBase&#xA;{&#xA;    protected override bool PerformDatabaseCleanup =&amp;gt; true;&#xA;&#xA;    [Test]&#xA;    public async Task Prepare()&#xA;    {&#xA;        await UsersFactory.GivenAdmin(&#xA;            UserAccessModule,&#xA;            &#34;testAdmin@mail.com&#34;,&#xA;            &#34;testAdminPass&#34;,&#xA;            &#34;Jane Doe&#34;,&#xA;            &#34;Jane&#34;,&#xA;            &#34;Doe&#34;,&#xA;            &#34;testAdmin@mail.com&#34;);&#xA;&#xA;        var userId = await UsersFactory.GivenUser(&#xA;            UserAccessModule,&#xA;            ConnectionString,&#xA;            &#34;adamSmith@mail.com&#34;,&#xA;            &#34;adamSmithPass&#34;,&#xA;            &#34;Adam&#34;,&#xA;            &#34;Smith&#34;,&#xA;            &#34;adamSmith@mail.com&#34;);&#xA;&#xA;        ExecutionContextAccessor.SetUserId(userId);&#xA;&#xA;        var meetingGroupId = await MeetingGroupsFactory.GivenMeetingGroup(&#xA;            MeetingsModule,&#xA;            AdministrationModule,&#xA;            ConnectionString,&#xA;            &#34;Software Craft&#34;,&#xA;            &#34;Group for software craft passionates&#34;,&#xA;            &#34;Warsaw&#34;,&#xA;            &#34;PL&#34;);&#xA;&#xA;        await TestPriceListManager.AddPriceListItems(PaymentsModule, ConnectionString);&#xA;&#xA;        await TestPaymentsManager.BuySubscription(&#xA;            PaymentsModule,&#xA;            ExecutionContextAccessor);&#xA;        &#xA;        SetDate(new DateTime(2022, 7, 1, 10, 0, 0));&#xA;&#xA;        var meetingId = await TestMeetingFactory.GivenMeeting(&#xA;            MeetingsModule,&#xA;            meetingGroupId,&#xA;            &#34;Tactical DDD&#34;,&#xA;            new DateTime(2022, 7, 10, 18, 0, 0),&#xA;            new DateTime(2022, 7, 10, 20, 0, 0),&#xA;            &#34;Meeting about Tactical DDD patterns&#34;,&#xA;            &#34;Location Name&#34;,&#xA;            &#34;Location Address&#34;,&#xA;            &#34;01-755&#34;,&#xA;            &#34;Warsaw&#34;,&#xA;            50,&#xA;            0,&#xA;            null,&#xA;            null,&#xA;            0,&#xA;            null,&#xA;            new List&amp;lt;Guid&amp;gt;()&#xA;        );&#xA;        &#xA;        var attendeeUserId = await UsersFactory.GivenUser(&#xA;            UserAccessModule,&#xA;            ConnectionString,&#xA;            &#34;rickmorty@mail.com&#34;,&#xA;            &#34;rickmortyPass&#34;,&#xA;            &#34;Rick&#34;,&#xA;            &#34;Morty&#34;,&#xA;            &#34;rickmorty@mail.com&#34;);&#xA;        &#xA;        ExecutionContextAccessor.SetUserId(attendeeUserId);&#xA;&#xA;        await TestMeetingGroupManager.JoinToGroup(MeetingsModule, meetingGroupId);&#xA;&#xA;        await TestMeetingManager.AddAttendee(MeetingsModule, meetingId, guestsNumber: 1);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create this SUT using following &lt;em&gt;NUKE&lt;/em&gt; target providing connection string and particular test name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; .\build PrepareSUT --DatabaseConnectionString &#34;connection_string&#34; --SUTTestName CreateMeeting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.20 Mutation Testing&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;p&gt;Mutation testing is an approach to test and evaluate our existing tests. During mutation testing a special framework modifies pieces of our code and runs our tests. These modifications are called &lt;em&gt;mutations&lt;/em&gt; or &lt;em&gt;mutants&lt;/em&gt;. If a given &lt;em&gt;mutation&lt;/em&gt; does not cause a failure of at least once test, it means that the mutant has &lt;em&gt;survived&lt;/em&gt; so our tests are probably not sufficient.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;In this repository, the &lt;a href=&#34;https://stryker-mutator.io/docs/stryker-net/Introduction&#34;&gt;Stryker.NET&lt;/a&gt; framework was used for mutation testing. In the simplest use, after installation, all you need to do is enter the directory of tests that you want to mutate and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet stryker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of this command is the &lt;em&gt;mutation report file&lt;/em&gt;. Assuming we want to test the unit tests of the Meetings module, such a &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/mutation-tests-reports/mutation-report.html&#34;&gt;report&lt;/a&gt; has been generated. This is its first page:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/mutation_testing_report.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let us analyze one of the places where the mutant survived. This is the &lt;em&gt;AddNotAttendee&lt;/em&gt; method of the &lt;em&gt;Meeting&lt;/em&gt; class. This method is used to add a &lt;em&gt;Member&lt;/em&gt; to the list of people who have decided not to attend the meeting. According to the logic, if the same person previously indicated that he was going to the &lt;em&gt;Meeting&lt;/em&gt; and later changed his mind, then if there is someone on the &lt;em&gt;Waiting List&lt;/em&gt;, he should be added to the attendees. Based on requirements, this should be the person who signed up on the &lt;em&gt;Waiting List&lt;/em&gt; &lt;strong&gt;first&lt;/strong&gt; (based on &lt;strong&gt;SignUpDate&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/docs/Images/mutation_testing_example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see, the mutation framework changed our sorting in linq query (from default ascending to descending). However, each test was successful, so it means that mutant survived so we don&#39;t have a test that checks the correct sort based on &lt;em&gt;SignUpDate&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From the example above, one more important thing can be deduced - &lt;strong&gt;code coverage is insufficient&lt;/strong&gt;. In the given example, this code is covered, but our tests do not check the given requirement, therefore our code may have errors. Mutation testing allow to detect such situations. Of course, as with any tool, we should use it wisely, as not every case requires our attention.&lt;/p&gt; &#xA;&lt;h2&gt;4. Technology&lt;/h2&gt; &#xA;&lt;p&gt;List of technologies, frameworks and libraries used for implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;.NET Core 3.1&lt;/a&gt; (platform). Note for Visual Studio users: &lt;strong&gt;VS 2019&lt;/strong&gt; is required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/sql-server/sql-server-editions-express&#34;&gt;MS SQL Server Express&lt;/a&gt; (database)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/ef/core/&#34;&gt;Entity Framework Core 3.1&lt;/a&gt; (ORM Write Model implementation for DDD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://autofac.org/&#34;&gt;Autofac&lt;/a&gt; (Inversion of Control Container)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.identityserver.io&#34;&gt;IdentityServer4&lt;/a&gt; (Authentication and Authorization)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serilog.net/&#34;&gt;Serilog&lt;/a&gt; (structured logging)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/khellang/Middleware/tree/master/src/ProblemDetails&#34;&gt;Hellang.Middleware.ProblemDetails&lt;/a&gt; (API Problem Details support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/domaindrivendev/Swashbuckle&#34;&gt;Swashbuckle&lt;/a&gt; (Swagger automated documentation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/StackExchange/Dapper&#34;&gt;Dapper&lt;/a&gt; (micro ORM for Read Model)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.newtonsoft.com/json&#34;&gt;Newtonsoft.Json&lt;/a&gt; (serialization/deserialization to/from JSON)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.quartz-scheduler.net/&#34;&gt;Quartz.NET&lt;/a&gt; (background processing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fluentvalidation.net/&#34;&gt;FluentValidation&lt;/a&gt; (data validation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt; (mediator implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; (API tests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nunit.org/&#34;&gt;NUnit&lt;/a&gt; (Testing framework)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nsubstitute.github.io/&#34;&gt;NSubstitute&lt;/a&gt; (Testing isolation framework)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.visual-paradigm.com/download/community.jsp&#34;&gt;Visual Paradigm Community Edition&lt;/a&gt; (CASE tool for modeling and documentation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BenMorris/NetArchTest&#34;&gt;NetArchTest&lt;/a&gt; (Architecture Unit Tests library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt; (Resilience and transient-fault-handling library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SQLStreamStore&#34;&gt;SQL Stream Store&lt;/a&gt; (Library to assist with Event Sourcing)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dbup.readthedocs.io/en/latest/&#34;&gt;DbUp&lt;/a&gt; (Database migrations deployment)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/ssdt/how-to-create-a-new-database-project&#34;&gt;SSDT Database Project&lt;/a&gt; (Database structure versioning)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/actions&#34;&gt;GitHub Actions&lt;/a&gt; (Continuous Integration workflows implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DotNetAnalyzers/StyleCopAnalyzers&#34;&gt;StyleCopAnalyzers&lt;/a&gt; (Static code analysis library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plantuml.com&#34;&gt;PlantUML&lt;/a&gt; (UML diagrams from textual description, diagrams as text)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://c4model.com/&#34;&gt;C4 Model&lt;/a&gt; (Model for visualising software architecture)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plantuml-stdlib/C4-PlantUML&#34;&gt;C4-PlantUML&lt;/a&gt; (C4 Model for PlantUML plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nuke.build/&#34;&gt;NUKE&lt;/a&gt; (Build automation system)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rr-wfm/MSBuild.Sdk.SqlProj/&#34;&gt;MSBuild.Sdk.SqlProj&lt;/a&gt; (Database project compilation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stryker-mutator.io/docs/stryker-net/Introduction&#34;&gt;Stryker.NET&lt;/a&gt; (Mutation Testing framework)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5. How to Run&lt;/h2&gt; &#xA;&lt;h3&gt;Install .NET Core 3.1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and install .NET Core 3.1 SDK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Create database&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and install MS SQL Server Express or other&lt;/li&gt; &#xA; &lt;li&gt;Create an empty database using &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/Database/CompanyName.MyMeetings.Database/Scripts/CreateDatabase_Windows.sql&#34;&gt;CreateDatabase_Windows.sql&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/Database/CompanyName.MyMeetings.Database/Scripts/CreateDatabase_Linux.sql&#34;&gt;CreateDatabase_Linux.sql&lt;/a&gt;. Script adds &lt;strong&gt;app&lt;/strong&gt; schema which is needed for migrations journal table. Change database file path if needed.&lt;/li&gt; &#xA; &lt;li&gt;Run database migrations using &lt;strong&gt;MigrateDatabase&lt;/strong&gt; NUKE target:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\build MigrateDatabase &#34;connection_string&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&#34;connection_string&#34;&lt;/em&gt; - connection string to your database&lt;/p&gt; &#xA;&lt;h3&gt;Seed database&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/Database/CompanyName.MyMeetings.Database/Scripts/SeedDatabase.sql&#34;&gt;SeedDatabase.sql&lt;/a&gt; script&lt;/li&gt; &#xA; &lt;li&gt;2 test users will be created - check the script for usernames and passwords&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configure connection string&lt;/h3&gt; &#xA;&lt;p&gt;Set a database connection string called &lt;code&gt;MeetingsConnectionString&lt;/code&gt; in the root of the API project&#39;s appsettings.json or use &lt;a href=&#34;https://blogs.msdn.microsoft.com/mihansen/2017/09/10/managing-secrets-in-net-core-2-0-apps/&#34;&gt;Secrets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example config setting in appsettings.json for a database called &lt;code&gt;ModularMonolith&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;MeetingsConnectionString&#34;: &#34;Server=(localdb)\\mssqllocaldb;Database=ModularMonolith;Trusted_Connection=True;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure startup in IDE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set the Startup Item in your IDE to the API Project, not IIS Express&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Authenticate&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once it is running you&#39;ll need a token to make API calls. This is done via OAuth2 &lt;a href=&#34;https://www.oauth.com/oauth2-servers/access-tokens/password-grant/&#34;&gt;Resource Owner Password Grant Type&lt;/a&gt;. By default IdentityServer is configured with the following:&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;client_id = ro.client&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;client_secret = secret&lt;/code&gt; &lt;strong&gt;(this is literally the value - not a statement that this value is secret!)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scope = myMeetingsAPI openid profile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;grant_type = password&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Include the credentials of a test user created in the &lt;a href=&#34;https://raw.githubusercontent.com/kgrzybek/modular-monolith-with-ddd/master/src/Database/CompanyName.MyMeetings.Database/Scripts/SeedDatabase.sql&#34;&gt;SeedDatabase.sql&lt;/a&gt; script - for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;username = testMember@mail.com&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password = testMemberPass&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example HTTP Request for an Access Token:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;POST /connect/token HTTP/1.1&#xA;Host: localhost:5000&#xA; &#xA;grant_type=password&#xA;&amp;amp;username=testMember@mail.com&#xA;&amp;amp;password=testMemberPass&#xA;&amp;amp;client_id=ro.client&#xA;&amp;amp;client_secret=secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch an access token for this user to make authorized API requests using the HTTP request header &lt;code&gt;Authorization: Bearer &amp;lt;access_token&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use a tool such as Postman to test your API, the token can be fetched and stored within the tool itself and appended to all API calls. Check your tool documentation for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Run using Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;You can run whole application using &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker compose&lt;/a&gt; from root folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create following services: &lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MS SQL Server Database&lt;/li&gt; &#xA; &lt;li&gt;Database Migrator&lt;/li&gt; &#xA; &lt;li&gt;Application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Integration Tests in Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can run all Integration Tests in Docker (exactly the same process is executed on CI) using &lt;strong&gt;RunAllIntegrationTests&lt;/strong&gt; NUKE target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\build RunAllIntegrationTests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;6. Contribution&lt;/h2&gt; &#xA;&lt;p&gt;This project is still under analysis and development. I assume its maintenance for a long time and I would appreciate your contribution to it. Please let me know by creating an Issue or Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;7. Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;List of features/tasks/approaches to add:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Release date&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Domain Model Unit Tests&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2019-09-10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Architecture Decision Log update&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2019-11-09&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Integration automated tests&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-02-24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Migration to .NET Core 3.1&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-03-04&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;System Integration Testing&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-03-28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;More advanced Payments module&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-07-11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Event Sourcing implementation&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-07-11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Database Change Management&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-08-23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Continuous Integration&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-09-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StyleCop Static Code Analysis&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-09-05&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FrontEnd SPA application&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-11-08&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker support&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2020-11-26&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PlantUML Conceptual Model&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2021-03-22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C4 Model&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2021-03-29&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Meeting comments feature&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2021-03-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NUKE build automation&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2021-06-15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Database project compilation on CI&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2021-06-15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;System Under Test implementation&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2022-07-17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mutation Testing&lt;/td&gt; &#xA;   &lt;td&gt;Completed&lt;/td&gt; &#xA;   &lt;td&gt;2022-08-23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;NOTE: Please don&#39;t hesitate to suggest something else or a change to the existing code. All proposals will be considered.&lt;/p&gt; &#xA;&lt;h2&gt;8. Authors&lt;/h2&gt; &#xA;&lt;p&gt;Kamil Grzybek&lt;/p&gt; &#xA;&lt;p&gt;Blog: &lt;a href=&#34;https://kamilgrzybek.com&#34;&gt;https://kamilgrzybek.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Twitter: &lt;a href=&#34;https://twitter.com/kamgrzybek&#34;&gt;https://twitter.com/kamgrzybek&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/kamilgrzybek/&#34;&gt;https://www.linkedin.com/in/kamilgrzybek/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub: &lt;a href=&#34;https://github.com/kgrzybek&#34;&gt;https://github.com/kgrzybek&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;8.1 Main contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreiGanichev&#34;&gt;Andrei Ganichev&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;9. License&lt;/h2&gt; &#xA;&lt;p&gt;The project is under &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;10. Inspirations and Recommendations&lt;/h2&gt; &#xA;&lt;h3&gt;Modular Monolith&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kamilgrzybek.com/design/modular-monolith-primer/&#34;&gt;&#34;Modular Monolith: A Primer&#34;&lt;/a&gt; Modular Monolith architecture article series, Kamil Grzybek&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=njDSXUWeik0&#34;&gt;&#34;Modular Monolith Architecture: One to rule them all&#34;&lt;/a&gt; presentation, Kamil Grzybek&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5OjqD-ow8GE&#34;&gt;&#34;Modular Monoliths&#34;&lt;/a&gt; presentation, Simon Brown&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BOvxJaklcr0&#34;&gt;&#34;Majestic Modular Monoliths&#34;&lt;/a&gt; presentation, Axel Fontaine&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/olivergierke/building-better-monoliths-modulithic-applications-with-spring-boot-cd16e6ec-d334-497d-b9f6-3f92d5db035a&#34;&gt;&#34;Building Better Monoliths – Modulithic Applications with Spring Boot&#34;&lt;/a&gt; slides, Oliver Drotbohm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/MonolithFirst.html&#34;&gt;&#34;MonolithFirst&#34;&lt;/a&gt; article, Martin Fowler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microservices.io/patterns/monolithic.html&#34;&gt;&#34;Pattern: Monolithic Architecture&#34;&lt;/a&gt; pattern description, Chris Richardson&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Domain-Driven Design&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&#34;&gt;&#34;Domain-Driven Design: Tackling Complexity in the Heart of Software&#34;&lt;/a&gt; book, Eric Evans&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&#34;&gt;&#34;Implementing Domain-Driven Design&#34;&lt;/a&gt; book, Vaughn Vernon&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/dp/0134434420&#34;&gt;&#34;Domain-Driven Design Distilled&#34;&lt;/a&gt; book, Vaughn Vernon&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Patterns-Principles-Practices-Domain-Driven-Design-ebook/dp/B00XLYUA0W&#34;&gt;&#34;Patterns, Principles, and Practices of Domain-Driven Design&#34;&lt;/a&gt; book, Scott Millett, Nick Tune&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Secure-Design-Daniel-Deogun/dp/1617294357&#34;&gt;&#34;Secure By Design&#34;&lt;/a&gt; book, Daniel Deogun, Dan Bergh Johnsson, Daniel Sawano&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Hands-Domain-Driven-Design-NET-ebook/dp/B07C5WSR9B&#34;&gt;&#34;Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice&#34;&lt;/a&gt; book, Alexey Zimarev&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven-ebook/dp/B07B44BPFB&#34;&gt;&#34;Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F#&#34;&lt;/a&gt; book, Scott Wlaschin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ddd-by-examples/library&#34;&gt;&#34;DDD by examples - library&#34;&lt;/a&gt; GH repository, Jakub Pilimon, Bartłomiej Słota&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VaughnVernon/IDDD_Samples&#34;&gt;&#34;IDDD_Samples&#34;&lt;/a&gt; GH repository, Vaughn Vernon&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/VaughnVernon/IDDD_Samples_NET&#34;&gt;&#34;IDDD_Samples_NET&#34;&lt;/a&gt; GH repository, Vaughn Vernon&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/heynickc/awesome-ddd&#34;&gt;&#34;Awesome Domain-Driven Design&#34;&lt;/a&gt; GH repository, Nick Chamberlain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Application Architecture&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martinfowler.com/books/eaa.html&#34;&gt;&#34;Patterns of Enterprise Application Architecture&#34;&lt;/a&gt; book, Martin Fowler&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/dependency-injection-principles-practices-patterns&#34;&gt;&#34;Dependency Injection Principles, Practices, and Patterns&#34;&lt;/a&gt; book, Steven van Deursen, Mark Seemann&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164&#34;&gt;&#34;Clean Architecture: A Craftsman&#39;s Guide to Software Structure and Design (Robert C. Martin Series&#34;&lt;/a&gt; book, Robert C. Martin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&#34;&gt;&#34;The Clean Architecture&#34;&lt;/a&gt; article, Robert C. Martin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/&#34;&gt;&#34;The Onion Architecture&#34;&lt;/a&gt; article series, Jeffrey Palermo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20180822100852/http://alistair.cockburn.us/Hexagonal+architecture&#34;&gt;&#34;Hexagonal/Ports &amp;amp; Adapters Architecture&#34;&lt;/a&gt; article, Alistair Cockburn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/&#34;&gt;&#34;DDD, Hexagonal, Onion, Clean, CQRS, … How I put it all together&#34;&lt;/a&gt; article, Herberto Graca&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Software Architecture&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Software-Architecture-Practice-3rd-Engineering/dp/0321815734&#34;&gt;&#34;Software Architecture in Practice (3rd Edition)&#34;&lt;/a&gt; book, Len Bass, Paul Clements, Rick Kazman&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://softwarearchitecturefordevelopers.com/&#34;&gt;&#34;Software Architecture for Developers Vol 1 &amp;amp; 2&#34;&lt;/a&gt; book, Simon Brown&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Just-Enough-Software-Architecture-Risk-Driven/dp/0984618104&#34;&gt;&#34;Just Enough Software Architecture: A Risk-Driven Approach&#34;&lt;/a&gt; book, George H. Fairbanks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Software-Systems-Architecture-Stakeholders-Perspectives/dp/032171833X/&#34;&gt;&#34;Software Systems Architecture: Working With Stakeholders Using Viewpoints and Perspectives (2nd Edition)&#34;&lt;/a&gt; book, Nick Rozanski, Eóin Woods&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Design-Programmer-Architect-Pragmatic-Programmers/dp/1680502093&#34;&gt;&#34;Design It!: From Programmer to Software Architect (The Pragmatic Programmers)&#34;&lt;/a&gt; book, Michael Keeling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System Architecture&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.enterpriseintegrationpatterns.com/&#34;&gt;&#34;Enterprise Integration Patterns : Designing, Building, and Deploying Messaging Solutions&#34;&lt;/a&gt; book and catalogue, Gregor Hohpe, Bobby Woolf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321&#34;&gt;&#34;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems &#34;&lt;/a&gt; book, Martin Kleppman&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Building-Evolutionary-Architectures-Support-Constant/dp/1491986360&#34;&gt;&#34;Building Evolutionary Architectures: Support Constant Change&#34;&lt;/a&gt; book, Neal Ford&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Building-Microservices-Designing-Fine-Grained-Systems/dp/1491950358&#34;&gt;&#34;Building Microservices: Designing Fine-Grained Systems&#34;&lt;/a&gt; book, Sam Newman&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Design&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672&#34;&gt;&#34;Refactoring: Improving the Design of Existing Code&#34;&lt;/a&gt; book, Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&#34;Clean Code: A Handbook of Agile Software Craftsmanship&#34;&lt;/a&gt; book, Robert C. Martin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258&#34;&gt;&#34;Agile Principles, Patterns, and Practices in C#&#34;&lt;/a&gt; book, Robert C. Martin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Applying-UML-Patterns-Introduction-Object-Oriented/dp/0131489062&#34;&gt;&#34;Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development (3rd Edition)&#34;&lt;/a&gt; book, Craig Larman&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052&#34;&gt;&#34;Working Effectively with Legacy Code&#34;&lt;/a&gt; book, Michael Feathers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&#34;&gt;&#34;Code Complete: A Practical Handbook of Software Construction, Second Edition&#34;&lt;/a&gt; book, Steve McConnell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&#34;&gt;&#34;Design Patterns: Elements of Reusable Object-Oriented Software&#34;&lt;/a&gt; book, Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Craftsmanship&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Clean-Coder-Conduct-Professional-Programmers/dp/0137081073&#34;&gt;&#34;The Clean Coder: A Code of Conduct for Professional Programmers&#34;&lt;/a&gt; book, Robert C. Martin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X&#34;&gt;&#34;The Pragmatic Programmer: From Journeyman to Master&#34;&lt;/a&gt; book, Andrew Hunt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Art-Unit-Testing-examples/dp/1617290890&#34;&gt;&#34;The Art of Unit Testing: with examples in C#&#34;&lt;/a&gt; book, Roy Osherove&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/javamagazine/unit-test-your-architecture-with-archunit&#34;&gt;&#34;Unit Test Your Architecture with ArchUnit&#34;&lt;/a&gt; article, Jonas Havers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Unit-Testing-Principles-Practices-Patterns/dp/1617296279&#34;&gt;&#34;Unit Testing Principles, Practices, and Patterns&#34;&lt;/a&gt; book, Vladimir Khorikov&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627&#34;&gt;&#34;Growing Object-Oriented Software, Guided by Tests&#34;&lt;/a&gt; book, Steve Freeman, Nat Pryce&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;UML&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/UML-Distilled-Standard-Modeling-Language/dp/0321193687&#34;&gt;&#34;UML Distilled: A Brief Guide to the Standard Object Modeling Language (3rd Edition)&#34;&lt;/a&gt; book, Martin Fowler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Event Storming&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/introducing_eventstorming&#34;&gt;&#34;Introducing EventStorming&#34;&lt;/a&gt; book, Alberto Brandolini&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mariuszgil/awesome-eventstorming&#34;&gt;&#34;Awesome EventStorming&#34;&lt;/a&gt; GH repository, Mariusz Gil&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Event Sourcing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Hands-Domain-Driven-Design-NET-ebook/dp/B07C5WSR9B&#34;&gt;&#34;Hands-On Domain-Driven Design with .NET Core: Tackling complexity in the heart of software by putting DDD principles into practice&#34;&lt;/a&gt; book, Alexey Zimarev&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/esversioning&#34;&gt;&#34;Versioning in an Event Sourced System&#34;&lt;/a&gt; book, Greg Young&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PacktPublishing/Hands-On-Domain-Driven-Design-with-.NET-Core&#34;&gt;Hands-On-Domain-Driven-Design-with-.NET-Core&lt;/a&gt; GH repository, Alexey Zimarev&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oskardudycz/EventSourcing.NetCore&#34;&gt;EventSourcing.NetCore&lt;/a&gt; GH repository, Oskar Dudycz&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>