<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-24T01:37:20Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>evolutionary-architecture/evolutionary-architecture-by-example</title>
    <updated>2024-11-24T01:37:20Z</updated>
    <id>tag:github.com,2024-11-24:/evolutionary-architecture/evolutionary-architecture-by-example</id>
    <link href="https://github.com/evolutionary-architecture/evolutionary-architecture-by-example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Navigate the complex landscape of .NET software architecture with our step-by-step, story-like guide. Unpack the interplay between modular monoliths, microservices, domain-driven design, and various architectural patterns. Go beyond the one-size-fits-all solutions and understand how to blend these approaches based on your unique needs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Evolutionary Architecture&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_objective&#34;&gt;Objective&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_problem&#34;&gt;Problem&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_proposed_solution&#34;&gt;Proposed Solution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_domain&#34;&gt;Domain&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_subdomains&#34;&gt;Subdomains&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_potential_patterns&#34;&gt;Potential Patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_chapters&#34;&gt;Chapters&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_chapter_1_initial_architecture_focus_on_simplicity&#34;&gt;Chapter 1: Initial Architecture: Focus On Simplicity&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_chapter_2_modules_separation_focus_on_maintainability&#34;&gt;Chapter 2: Modules Separation: Focus On Maintainability&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_chapter_3_microservice_extraction_focus_on_growth&#34;&gt;Chapter 3: Microservice Extraction: Focus On Growth&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_chapter_4_applying_tactical_domain_driven_design_focus_on_complexity&#34;&gt;Chapter 4: Applying Tactical Domain-Driven Design: Focus On Complexity&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_repository_structure&#34;&gt;Repository Structure&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_overview_2&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_how_to_navigate&#34;&gt;How To Navigate?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_libraries_and_platforms_used&#34;&gt;Libraries and Platforms Used&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_videos&#34;&gt;Videos üé•&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_webinar_from_architecture_weekly&#34;&gt;Webinar from Architecture Weekly üá¨üáß&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_presentation_at_programistok_2023_conference&#34;&gt;Presentation at Programistok 2023 Conference üáµüá±&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_evolutionary_architecture_visualized_through_ndepend&#34;&gt;Evolutionary Architecture Visualized Through NDepend üá¨üáß&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_authors&#34;&gt;Authors ‚úçÔ∏è&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_what_software_engeeniers_say&#34;&gt;üë©‚Äçüíªüë®‚Äçüíª What Software Engeeniers Say&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_chief_software_architect&#34;&gt;üë®‚Äçüíº Chief Software Architect&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_net_developer&#34;&gt;üë®‚Äçüíª .NET Developer&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_net_developer_2&#34;&gt;üë®‚Äçüíª .NET Developer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_join_our_community&#34;&gt;üí¨ Join our Community&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/#_say_thanks&#34;&gt;‚≠ê Say thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div align=&#34;center&#34;&gt; &#xA;   &lt;picture&gt; &#xA;    &lt;source srcset=&#34;Assets/ea_banner_dark.png&#34; media=&#34;(prefers-color-scheme: dark)&#34;&gt; &#xA;    &lt;source srcset=&#34;Assets/ea_banner_light.png&#34; media=&#34;(prefers-color-scheme: light)&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/ea_banner_light.png&#34; width=&#34;350&#34; height=&#34;350&#34; alt=&#34;ea banner&#34;&gt; &#xA;   &lt;/picture&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;realease&#34;&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;License Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Stars Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Commits Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Last Commit Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Issues Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Pull Requests Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Forks Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/evolutionary-architecture/evolutionary-architecture-by-example&#34; alt=&#34;Watchers Badge&#34;&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1140287971367600148&#34; alt=&#34;Discord Active&#34;&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_objective&#34;&gt;Objective&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_problem&#34;&gt;Problem&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are many repositories that describe software and solution architecture in .NET. As there is no single definition of software architecture, they combine several topics:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Deployment strategies like Modular Monolith and Microservices&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Domain-Driven Design&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Clean, Onion, Hexagonal Architecture&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Infrastructure&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;as if each of the above were the only possible solution. And that is the problem - it is very rare that any single material shows you a concrete decision path or mix of the above approaches.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Often the examples you find are either too trivial or too complex. Sometimes they are harmful because they misunderstand different concepts. As a result, it is very difficult to take just one and follow some patterns for your own application.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;em&gt;It depends&lt;/em&gt; - one of the most overused phrases. Well, it always depends on something, but there are always heuristics to help you decide.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In summary, if you are looking for a journey - not just a single article describing a solution - look no further. It starts here, in this repo.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_proposed_solution&#34;&gt;Proposed Solution&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Our solution should be read like a story and is divided into 4 chapters:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Chapter-1-initial-architecture/README.adoc&#34;&gt;&lt;strong&gt;Chapter 1:&lt;/strong&gt; Initial Architecture: Focus On Simplicity&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Chapter-2-modules-separation/README.adoc&#34;&gt;&lt;strong&gt;Chapter 2:&lt;/strong&gt; Modules Separation: Focus On Maintainability&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Chapter-3-microservice-extraction/README.adoc&#34;&gt;&lt;strong&gt;Chapter 3:&lt;/strong&gt; Microservice Extraction: Focus On Growth&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Chapter-4-applying-tactical-domain-driven-design/README.adoc&#34;&gt;&lt;strong&gt;Chapter 4:&lt;/strong&gt; Applying Tactical Domain-Driven Design: Focus On Complexity&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In each chapter we describe the evolution of the architecture of a selected domain:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Starting with a simple solution architecture that meets early production needs, where business processes are separated in namespaces and communication is handled by an in-memory queue&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Moving to module separation with the structure of multiple projects associated with each module (including CQRS)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Continue with the single module extraction to a microservice and add the message queue component&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Tackling the complexity of one of the modules using tactical Domain-Driven Design&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We apply everything we have learned over many years of software development - our aim is to help you avoid making the same mistakes we have. This way you can be sure that your architecture will not be too trivial for too long, or too complex from the start. Treat it as a guide, something you can refer to at any time.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;What we focus on:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Selected business domain analysis&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Split the domain into subdomains (Core and Supportive)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Choice of architectural pattern&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Evolution from monolithic to modular&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Evolution to a mix of modular monolith and microservices&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Applying Domain-Driven Design to a Core module&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Backend (.NET) with minimal API&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Loose coupling&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Architecture decision log&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Good coding practices&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;What we do not focus on:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Frontend (you can use React, Vue, Angular, Svelte or anything else)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Logging (you can use &lt;a href=&#34;https://serilog.net/&#34;&gt;Serilog&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Contract testing (you can use &lt;a href=&#34;https://github.com/pact-foundation/pact-net&#34;&gt;Pact Net&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;so that you get the gist of what we have to share with you. Additionally, static code analysis is enabled in all chapters to help us to keep the code base as clean as possible. It is strongly suggested to use it as well in your production code.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Note&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; Keep in mind that these are our suggestions. In the end you will have to decide for yourself which chapters fit your needs or combine them into one solution. &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_domain&#34;&gt;Domain&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_overview&#34;&gt;Overview&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The chosen domain for analysis and implementation is a &lt;em&gt;Fitness Studio&lt;/em&gt;. It is an area that most of people have an idea of how it works. You can:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Get an offer&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Request for a contract&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Sign the contract&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Receive a pass (to be able to enter the fitness studio)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Attend to fitness classes&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;and many more.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, in order to identify the above processes, you usually need to analyse the domain with &lt;em&gt;Domain Experts&lt;/em&gt; and break it down into smaller pieces called &lt;em&gt;Subdomains&lt;/em&gt;. Otherwise, there is a high risk of falling into a big ball of mud (or distributed mud) where everything is tightly coupled.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;At first glance, the domain seems small and problems of oversimplification of initial assumptions usually arise from this interpretation. There are dozens of processes related to expired passes and renewals, discount policies, VIP access, negative cases (e.g. rejection of the access). We often tend to underestimate the problem.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Important&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; Remember that what we want to show you in this repository is how to handle a domain split into a few example subdomains, and how to prepare building blocks that will allow you to easily extend them to cover all processes. We are not able to cover the entire &lt;em&gt;Fitness Studio&lt;/em&gt; domain, as that would probably take us a year (or more) of work. &lt;strong&gt;Do not worry - we try to show ideas here that are complex enough to be applied to your application.&lt;/strong&gt; &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_subdomains&#34;&gt;Subdomains&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Now that you understand which business domain we are focusing on, it is time to break it down into smaller pieces called &lt;em&gt;Subdomains&lt;/em&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are many ways to do this. Our 3 favourites are:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://domainstorytelling.org&#34;&gt;Domain Storytelling&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.eventstorming.com&#34;&gt;Event Storming&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://storystorming.com&#34;&gt;Story Storming&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In general, the idea is to find processes by discovering the flow. Based on different heuristics you are able to define the smaller blocks.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;After a round of analysis, we decided to choose the following areas for implementation to show you the idea of &lt;em&gt;Evolutionary Architecture&lt;/em&gt;:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/subdomains.jpg&#34; alt=&#34;subdomains&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;As you can imagine, each subdomain covers a lot of different processes. Again, due to time constraints, we cannot focus on every single aspect. Therefore, we have chosen the following actions for each subdomain:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/subdomains_processes.jpg&#34; alt=&#34;subdomains processes&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are 6 different processes in 4 different subdomains. There is a problem here - these subdomains do not communicate with each other and this is one of the most common problems we have in our applications. So we decided to complicate things a bit and add some communication:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;imageblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets//subdomains_communication.jpg&#34; alt=&#34;subdomains communication&#34;&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are 2 triggers:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;when the contract is signed by you (a customer), then the new pass is registered to allow you to enter the fitness studio&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;when the pass expires, then the new offer is prepared (which will be sent to you as a customer)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This way we are almost ready to start the implementation.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;One more thing to mention - in our example, each subdomain is a separate &lt;em&gt;Bounded Context&lt;/em&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Important&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; It is worth mentioning that there may be a situation where multiple subdomains create a single &lt;em&gt;Bounded Context&lt;/em&gt;. An example of this in &lt;em&gt;Fitness Studio&lt;/em&gt; domain can be: Assessments, Progress Tracking and Virtual Coaching that creates 1 &lt;em&gt;Bounded Context&lt;/em&gt; called &lt;em&gt;Personalised Training&lt;/em&gt;. &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_potential_patterns&#34;&gt;Potential Patterns&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Before you decide to start coding, it is worth to look at your analysis and division one more time and check the complexity of each (it will be mainly defined by the amount of processes and its business rules/policies). Let‚Äôs take a look at below examples.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_passes&#34;&gt;Passes&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/subdomain_passes_logic.jpg&#34; alt=&#34;subdomain passes logic&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;There is no business logic:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;in the pass registration process, it is only informed that the contract has been signed&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;In the pass expiry process, it is only informed that the pass expiry date has been reached.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In addition, the potential for new business rules to be applied to the above processes or other actions is rather low. As it looks like a perfect candidate for CRUD operations, we want to mark it as a candidate to become an &lt;em&gt;Active Record&lt;/em&gt; pattern.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &lt;em&gt;Active Record&lt;/em&gt; is an pattern that rationalises the persistence layer in an application. It encapsulates the idea that a database record is an object in the application, with properties that map to the columns of the database table and the behaviour (domain logic) of that object. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_offers&#34;&gt;Offers&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/subdomain_offers_logic.jpg&#34; alt=&#34;subdomain offers logic&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The story here is similar to &lt;em&gt;Passes&lt;/em&gt;. There is no business logic, only the fact that the pass is expiring.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_contracts&#34;&gt;Contracts&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets//subdomain_contracts_logic.jpg&#34; alt=&#34;subdomain contracts logic&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This is the place where the fun begins. There are 3 business rules:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;ulist&#34;&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt; &lt;p&gt;in the process of contract preparation, it is only allowed if the customer is an adult AND smaller than the maximum height allowed (210 cm)&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;li&gt; &lt;p&gt;in the contract signing process, it is only allowed if it is signed within 30 days of the contract being created, otherwise the contract has to be created from scratch&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;In addition, the potential for new business rules being applied to the above processes or other actions is quite high. Here the warning bell should go off - this has a really high potential to become more and more complex, so it might be a good candidate for a &lt;em&gt;Domain Model&lt;/em&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &lt;em&gt;Domain Model&lt;/em&gt; is a widely used pattern in software engineering that encapsulates the concepts and behaviours of a particular problem domain. This representation is designed to mimic the structure and functionality of the real-world system. The domain model pattern is particularly well known for its ability to handle complex business logic by providing a rich, object-oriented representation of the problem domain. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_reports&#34;&gt;Reports&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/subdomain_reports.jpg&#34; alt=&#34;subdomain reports&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This case is really simple. The only thing that we want to achieve is to get the information about new passes that have been registered in each month.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;There is no business logic and there is also no need to have an object representation of the data retrieved. This is a perfect candidate for a &lt;em&gt;Transaction Script&lt;/em&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &lt;em&gt;Transaction Script&lt;/em&gt; is a pattern commonly used in software engineering that organises business logic into procedures, where each procedure handles a single request from the presentation. Each transaction script is a series of procedural steps that represent a sequence of tasks performed as part of a transaction, similar to a script in a play. &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_summary&#34;&gt;Summary&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;After deeper thinking about our subdomains, we decided for following patterns that will be applied in one of 4 chapters:&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/subdomains_architectural_patterns.jpg&#34; alt=&#34;subdomains architectural patterns&#34;&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_chapters&#34;&gt;Chapters&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;In the beginning of every greenfield project we need to make a lot of decisions and we lack of knowledge. It is called &lt;em&gt;The Project Paradox&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/project_paradox.png&#34; alt=&#34;project paradox&#34;&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Quite often we are biased by conferences, meetups, friends and colleagues. As a result we decide for too complex architecture.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This means starting with:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;microservices (where we do not yet know the traffic, scale and other factors)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;orchestrators&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;data streaming&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;NoSQL&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;cache&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;and many more. In the end, we have a lot of problems of our own making, and the barrier to entry for any team member is extremely high. In fact, after release, we do not know if we need this or that block. We are also not optimised from a cost perspective and it is very difficult to find bottlenecks.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Another problem is choosing an architecture that is too trivial for too long (this happens less often than &#34;overcomplicated&#34;). This means that we just add code to a monolith, new features flood our codebase and then it becomes a big ball of mud.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;What we want to show you in our story is the evolutionary approach that will tackle most of the applications you work with.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_chapter_1_initial_architecture_focus_on_simplicity&#34;&gt;Chapter 1: Initial Architecture: Focus On Simplicity&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In this chapter we will show you how to start your solution architecture. We start with modularisation from day one of the application, but modules are only separated by namespaces (there is only one project for the production code called &lt;code&gt;Fitnet&lt;/code&gt;). Each process that occurs in each module is sliced vertically - all the code is covered in each process namespace. This gives us several advantages:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;better productivity - when we start a new design, we are not distracted by creating namespaces, renaming, moving things around&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;all the code for each process is in just one namespace, so there is no need to look around in folders like &lt;code&gt;Controllers, Entities, Commands, Queries&lt;/code&gt; etc. Everything is just in e.g. &lt;code&gt;SignContract&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;deleting or extracting the process is simple - you just drop or extract a namespace&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Modules communicate with the in-memory queue.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_interactive_diagram&#34;&gt;&lt;a href=&#34;https://s.icepanel.io/vY0SkvgDs7V83U/wOj3&#34;&gt;Interactive diagram&lt;/a&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;a class=&#34;image&#34; href=&#34;https://s.icepanel.io/vY0SkvgDs7V83U/wOj3&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/ice_panel_black.png&#34; alt=&#34;ice panel black&#34; width=&#34;100&#34; height=&#34;28&#34;&gt;&lt;/a&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_chapter_2_modules_separation_focus_on_maintainability&#34;&gt;Chapter 2: Modules Separation: Focus On Maintainability&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This chapter focuses on the second step you can take in your application. After some time, you will find that your assumptions about modules were wrong - they grow fast, the business logic becomes more complex. You may have to decide to use a different type of database (e.g. key-value). Or the other way around - something you thought was going to be complex is actually quite simple and there is not a lot of business logic involved. Also, the team has grown and it is quite difficult to work on one project - lots of conflict and merging hell.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;With this in mind, you can now start thinking to split your single &lt;code&gt;Fitnet&lt;/code&gt; project into several ones:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;for one module it will be just &lt;code&gt;Fitnet.Reports&lt;/code&gt; - there is only a transaction script, no business logic&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;for another, it will be &lt;code&gt;Fitnet.Passes.Api, Fitnet.Passes.DataAccess&lt;/code&gt; to build around the active record&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;for the complex one it will be &lt;code&gt;Fitnet.Contracts.Api, Fitnet.Contracts.Application, Fitnet.Contracts.Core, Fitnet.Contracts.Infrastructure&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;and so on. The modules still communicate with the in-memory queue (alternatives described in the chapter‚Äôs own README).&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_chapter_3_microservice_extraction_focus_on_growth&#34;&gt;Chapter 3: Microservice Extraction: Focus On Growth&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Over time, you may need to extract a microservice from one of your application modules. In this chapter, you will identify the most common disintegrators (decision drivers for extracting a microservice).&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We will also add a message queue component to replace the in-memory queue. This way, we will improve the exchange of messages between the modules themselves and the microservice.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Here you will learn about various concepts that are important from a microservices architecture perspective.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_interactive_diagram_2&#34;&gt;&lt;a href=&#34;https://s.icepanel.io/EPX45vmGXfBpnJ/cBSP&#34;&gt;Interactive diagram&lt;/a&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;imageblock&#34;&gt; &#xA;     &lt;div class=&#34;content&#34;&gt; &#xA;      &lt;a class=&#34;image&#34; href=&#34;https://s.icepanel.io/EPX45vmGXfBpnJ/cBSP&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/ice_panel_black.png&#34; alt=&#34;ice panel black&#34; width=&#34;100&#34; height=&#34;28&#34;&gt;&lt;/a&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_chapter_4_applying_tactical_domain_driven_design_focus_on_complexity&#34;&gt;Chapter 4: Applying Tactical Domain-Driven Design: Focus On Complexity&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;At the end of the story, we want to show you that it is possible to evolve to a domain model for one of your modules at some point.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You do not have to start from scratch if you do not know your business domain. And you do not need to apply all the concepts of Domain-Driven Design to get good results.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Interesting fact - if you have done a proper analysis of your business domain in the beginning and have already broken it down into different subdomains (and combined them into e.g. a module), then you are almost done from a strategic Domain-Driven Design perspective. Now you just need to make some adjustments and do some tactical DDD. Cool? Absolutely cool!&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Here we focus mainly on tactical DDD and describe&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;value objects&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;entities&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;aggregates&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;You will also find some tips for the next steps.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_repository_structure&#34;&gt;Repository Structure&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_overview_2&#34;&gt;Overview&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We are trying to keep this repository as simple as possible, so that you can read it like a book. It contains chapters, where each chapter is an extension of the previous one, read like a story.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_navigate&#34;&gt;How To Navigate?&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In the root folder of this repository you will find only this README, the assets (images &amp;amp; diagrams) used in it, and 4 folders containing the content for each chapter.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In each folder you will find the same root solution, but expanded:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Chapter 1 - Initial state of the application&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Chapter 2 - Extraction into separate projects&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Chapter 3 - Extracting a module to a microservice and using the message queue&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Chapter 4 - Applying Tactical Domain-Driven Design to one of the modules&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Another important thing to note is that the detailed description of each chapter is in its own README folder. There you will find the information on how to run the solution, what solution structure is used, and other important things that are only relevant to that particular chapter.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;We are not repeating the information covered in the previous chapter, we are just extending it with the decision we have made.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;    &lt;table&gt; &#xA;     &lt;tbody&gt;&#xA;      &lt;tr&gt; &#xA;       &lt;td class=&#34;icon&#34;&gt; &#xA;        &lt;div class=&#34;title&#34;&gt;&#xA;         Important&#xA;        &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;td class=&#34;content&#34;&gt; If you want to get the most out of this repository, we recommend that you read the first chapter, understand the code and description, and then navigate to another folder. Of course you can go through the folders in your own way but you might miss some concepts. &lt;/td&gt; &#xA;      &lt;/tr&gt; &#xA;     &lt;/tbody&gt;&#xA;    &lt;/table&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_libraries_and_platforms_used&#34;&gt;Libraries and Platforms Used&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The entire application is developed using C# and .NET 8.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;In each chapter we use libraries and platforms that simplify the development process (no need to create them yourself). We try to keep it to a minimum. The certain disadvantage is that we do not have full control over it (trade-off we accept). Here is the list of the most important ones:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Application:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.fluentvalidation.net/en/latest/&#34;&gt;Fluent Validation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/DapperLib/Dapper&#34;&gt;Dapper&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/efcore&#34;&gt;Entity Framework&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/npgsql/npgsql&#34;&gt;Npgsql&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SonarSource/sonar-dotnet&#34;&gt;SonarAnalyzer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Testing:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/xunit/xunit&#34;&gt;xunit&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nsubstitute.github.io/&#34;&gt;NSubstitute&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/VerifyTests/Verify&#34;&gt;Verify&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/bchavez/Bogus&#34;&gt;Bogus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/fluentassertions/fluentassertions&#34;&gt;Fluent Assertions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dotnet.testcontainers.org&#34;&gt;Test Containers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_videos&#34;&gt;Videos üé•&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can learn the essentials of Evolutionary Architecture from these videos:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_webinar_from_architecture_weekly&#34;&gt;Webinar from Architecture Weekly üá¨üáß&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In this webinar, Maciej &#34;MJ&#34; Jedrzejewski gives a detailed talk on Evolutionary Architecture. You can watch the recorded webinar &lt;a href=&#34;https://www.architecture-weekly.com/p/webinar-11-maciej-mj-jedrzejewski&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_presentation_at_programistok_2023_conference&#34;&gt;Presentation at Programistok 2023 Conference üáµüá±&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This is a recorded presentation from the Programistok 2023 Conference, where Evolutionary Architecture was extensively explained. You can watch it on YouTube &lt;a href=&#34;https://www.youtube.com/watch?v=tfCtM8D_DZ4&amp;amp;t=598s&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_evolutionary_architecture_visualized_through_ndepend&#34;&gt;Evolutionary Architecture Visualized Through NDepend üá¨üáß&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Explore Evolutionary Architecture visualized through NDepend, featuring comprehensive dependency and code analysis in the form of an interview led by Ferry de Boer with Kamil. Watch it on YouTube &lt;a href=&#34;https://www.youtube.com/watch?v=Z60SAiVevIM&amp;amp;t&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_authors&#34;&gt;Authors ‚úçÔ∏è&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt; &#xA;   &lt;colgroup&gt; &#xA;    &lt;col style=&#34;width: 50%;&#34;&gt; &#xA;    &lt;col style=&#34;width: 50%;&#34;&gt; &#xA;   &lt;/colgroup&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Maciej Jedrzejewski&lt;/th&gt; &#xA;     &lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;Kamil Baczek&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Software architect, tech lead and facilitator of modern software development practices that allow shortening the feedback loop in every area of a lifecycle e.g. trunk-based development, short-living branches, vertical slices, canary releases, CI/CD, and more.&lt;/p&gt; &lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://meaboutsoftware.com/&#34;&gt;Blog&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/jedrzejewski-maciej/&#34;&gt;Linkedin&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/@meaboutsoftware&#34;&gt;YouTube&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;     &lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;.NET Engineer, Software Architect who empowers teams to build better software through solid software architecture, utilising techniques such as Event Storming, Domain Driven Design and various architecture styles and design patterns.&lt;/p&gt; &lt;p class=&#34;tableblock&#34;&gt;&lt;a href=&#34;https://artofsoftwaredesign.net/&#34;&gt;Blog&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/kamilbaczek/&#34;&gt;Linkedin&lt;/a&gt; &lt;a href=&#34;https://github.com/kamilbaczek&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_what_software_engeeniers_say&#34;&gt;üë©‚Äçüíªüë®‚Äçüíª What Software Engeeniers Say&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_chief_software_architect&#34;&gt;üë®‚Äçüíº Chief Software Architect&lt;/h3&gt; &#xA;   &lt;div class=&#34;quoteblock&#34;&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Really appreciate the repository and the content you are sharing. I think it is really valuable to see the evolutionary approach in practice, and focus on simplicity and pragmatic reasoning and making decisions in software design.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_net_developer&#34;&gt;üë®‚Äçüíª .NET Developer&lt;/h3&gt; &#xA;   &lt;div class=&#34;quoteblock&#34;&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Your work has been super helpful as I dive deeper into this field. Evolutionary Architecture, in particular, is incredible and has really clicked for me thanks to your examples and insights.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_net_developer_2&#34;&gt;üë®‚Äçüíª .NET Developer&lt;/h3&gt; &#xA;   &lt;div class=&#34;quoteblock&#34;&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;I was always concerned about what architecture to use on a project. Sometimes, spending time on researching what‚Äôs right affects my motivation. Your approach which focuses on creating a project with an architecture that evolves resonates perfectly with me. Your efforts in creating such a wonderful resource is greatly appreciated.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/blockquote&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_join_our_community&#34;&gt;üí¨ Join our Community&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Join the &#34;Evolutionary Architecture Community&#34; on Discord (&lt;a href=&#34;https://discord.gg/BGxYkHFCCF&#34; class=&#34;bare&#34;&gt;https://discord.gg/BGxYkHFCCF&lt;/a&gt;) to engage with fellow architects and enthusiasts who share a fervor for pushing boundaries and crafting high-quality software systems. Whether you have questions, suggestions, or feedback for our repository, we‚Äôre excited to hear from you and collaborate towards continuous improvement.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;imageblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;a class=&#34;image&#34; href=&#34;https://discord.gg/BGxYkHFCCF&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evolutionary-architecture/evolutionary-architecture-by-example/main/Assets/discord.png&#34; alt=&#34;discord&#34; width=&#34;200&#34; height=&#34;64&#34;&gt;&lt;/a&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_say_thanks&#34;&gt;‚≠ê Say thanks&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Feel free to give a ‚≠ê to this repository if you like it. Your support is greatly appreciated!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>