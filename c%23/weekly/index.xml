<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T01:47:29Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>icsharpcode/ILSpy</title>
    <updated>2023-08-06T01:47:29Z</updated>
    <id>tag:github.com,2023-08-06:/icsharpcode/ILSpy</id>
    <link href="https://github.com/icsharpcode/ILSpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET Decompiler with support for PDB generation, ReadyToRun, Metadata (&amp;more) - cross-platform!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ILSpy &lt;a href=&#34;https://nuget.org/packages/ICSharpCode.Decompiler&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ICSharpCode.Decompiler.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/icsharpcode/ILSpy/workflows/Build%20ILSpy/badge.svg?branch=master&#34; alt=&#34;Build ILSpy&#34;&gt; &lt;a href=&#34;https://hachyderm.io/@ilspy&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?label=Mastodon&amp;amp;query=totalItems&amp;amp;url=https%3A%2F%2Fhachyderm.io%2Fusers%2Filspy%2Ffollowers.json&amp;amp;logo=mastodon&amp;amp;style=flat-square&#34; alt=&#34;Mastodon Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ilspy&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ILSpy.svg?label=Follow%20@ILSpy&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/8ef1d688-f80c-4380-8004-2ec7f814e7de&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/VS%20Extension-ILSpy-blue.svg?sanitize=true&#34; alt=&#34;ILSpy VS extension&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;ILSpy is the open-source .NET assembly browser and decompiler.&lt;/p&gt; &#xA;&lt;p&gt;Download: &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/releases&#34;&gt;latest release&lt;/a&gt; | &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/actions?query=workflow%3A%22Build+ILSpy%22+branch%3Amaster+is%3Asuccess+event%3Apush&#34;&gt;latest CI build (master)&lt;/a&gt; | &lt;a href=&#34;https://apps.microsoft.com/store/detail/ilspy-fresh/XP8C26VDWLP4T4&#34;&gt;Microsoft Store (RTM versions only)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Decompiler Frontends&lt;/h2&gt; &#xA;&lt;p&gt;Aside from the WPF UI ILSpy (downloadable via Releases, see also &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/wiki/Plugins&#34;&gt;plugins&lt;/a&gt;), the following other frontends are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual Studio 2022 ships with decompilation support for F12 enabled by default (using our engine v7.1).&lt;/li&gt; &#xA; &lt;li&gt;In Visual Studio 2019, you have to manually enable F12 support. Go to Tools / Options / Text Editor / C# / Advanced and check &#34;Enable navigation to decompiled source&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp&#34;&gt;C# for Visual Studio Code&lt;/a&gt; ships with decompilation support as well. To enable, activate the setting &#34;Enable Decompilation Support&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Our Visual Studio 2022 extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=SharpDevelopTeam.ILSpy2022&#34;&gt;marketplace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our Visual Studio 2017/2019 extension &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=SharpDevelopTeam.ILSpy&#34;&gt;marketplace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our Visual Studio Code Extension &lt;a href=&#34;https://github.com/icsharpcode/ilspy-vscode&#34;&gt;repository&lt;/a&gt; | &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=icsharpcode.ilspy-vscode&#34;&gt;marketplace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our Linux/Mac/Windows ILSpy UI based on &lt;a href=&#34;http://www.avaloniaui.net/&#34;&gt;Avalonia&lt;/a&gt; - check out &lt;a href=&#34;https://github.com/icsharpcode/AvaloniaILSpy&#34;&gt;https://github.com/icsharpcode/AvaloniaILSpy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://www.nuget.org/packages/ICSharpCode.Decompiler/&#34;&gt;ICSharpCode.Decompiler&lt;/a&gt; NuGet for your own projects&lt;/li&gt; &#xA; &lt;li&gt;Our dotnet tool for Linux/Mac/Windows - check out &lt;a href=&#34;https://raw.githubusercontent.com/icsharpcode/ILSpy/master/ICSharpCode.ILSpyCmd&#34;&gt;ILSpyCmd&lt;/a&gt; in this repository&lt;/li&gt; &#xA; &lt;li&gt;Our Linux/Mac/Windows &lt;a href=&#34;https://raw.githubusercontent.com/icsharpcode/ILSpy/master/ICSharpCode.Decompiler.PowerShell&#34;&gt;PowerShell cmdlets&lt;/a&gt; in this repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decompilation to C# (check out the &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/issues/829&#34;&gt;language support status&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Whole-project decompilation&lt;/li&gt; &#xA; &lt;li&gt;Search for types/methods/properties (learn about the &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/wiki/Search-Options&#34;&gt;options&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hyperlink-based type/method/property navigation&lt;/li&gt; &#xA; &lt;li&gt;Base/Derived types navigation, history&lt;/li&gt; &#xA; &lt;li&gt;Assembly metadata explorer (&lt;a href=&#34;https://github.com/icsharpcode/ILSpy/wiki/Metadata-Explorer&#34;&gt;feature walkthrough&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;BAML to XAML decompiler&lt;/li&gt; &#xA; &lt;li&gt;ReadyToRun binary support for .NET Core (see the &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/wiki/ILSpy.ReadyToRun&#34;&gt;tutorial&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Extensible via &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/wiki/Plugins&#34;&gt;plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional features in DEBUG builds (&lt;a href=&#34;https://github.com/icsharpcode/ILSpy/wiki/Additional-Features-in-DEBUG-Builds&#34;&gt;for the devs&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ILSpy is distributed under the MIT License. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/icsharpcode/ILSpy/master/doc/ILSpyAboutPage.txt&#34;&gt;About&lt;/a&gt; doc for details, as well as &lt;a href=&#34;https://raw.githubusercontent.com/icsharpcode/ILSpy/master/doc/third-party-notices.txt&#34;&gt;third party notices&lt;/a&gt; for included open-source libraries.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;h4&gt;Windows:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure PowerShell (at least version) 5.0 is installed.&lt;/li&gt; &#xA; &lt;li&gt;Clone the ILSpy repository using git.&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to download the ILSpy-Tests submodule (used by some test cases).&lt;/li&gt; &#xA; &lt;li&gt;Install Visual Studio (documented version: 17.1). You can install the necessary components in one of 3 ways: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow Microsoft&#39;s instructions for &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/install/import-export-installation-configurations?view=vs-2022#import-a-configuration&#34;&gt;importing a configuration&lt;/a&gt;, and import the .vsconfig file located at the root of the solution.&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively, you can open the ILSpy solution (ILSpy.sln) and Visual Studio will &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/install/import-export-installation-configurations?view=vs-2022#automatically-install-missing-components&#34;&gt;prompt you to install the missing components&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Finally, you can manually install the necessary components via the Visual Studio Installer. The workloads/components are as follows: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Workload &#34;.NET Desktop Development&#34;. This workload includes the .NET Framework 4.8 SDK and the .NET Framework 4.7.2 targeting pack, as well as the &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET 6.0 SDK&lt;/a&gt; and &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/7.0&#34;&gt;.NET 7.0 SDK&lt;/a&gt; (ILSpy.csproj targets .NET 6.0, but we have net472+net70 projects too). &lt;em&gt;Note: The optional components of this workload are not required for ILSpy&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Workload &#34;Visual Studio extension development&#34; (ILSpy.sln contains a VS extension project) &lt;em&gt;Note: The optional components of this workload are not required for ILSpy&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Individual Component &#34;MSVC v143 - VS 2022 C++ x64/x86 build tools&#34; (or similar) &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;em&gt;The VC++ toolset is optional&lt;/em&gt;; if present it is used for &lt;code&gt;editbin.exe&lt;/code&gt; to modify the stack size used by ILSpy.exe from 1MB to 16MB, because the decompiler makes heavy use of recursion, where small stack sizes lead to problems in very complex methods.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Open ILSpy.sln in Visual Studio. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;NuGet package restore will automatically download further dependencies&lt;/li&gt; &#xA;     &lt;li&gt;Run project &#34;ILSpy&#34; for the ILSpy UI&lt;/li&gt; &#xA;     &lt;li&gt;Use the Visual Studio &#34;Test Explorer&#34; to see/run the tests&lt;/li&gt; &#xA;     &lt;li&gt;If you are only interested in a specific subset of ILSpy, you can also use &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;ILSpy.Wpf.slnf: for the ILSpy WPF frontend&lt;/li&gt; &#xA;       &lt;li&gt;ILSpy.XPlat.slnf: for the cross-platform CLI or PowerShell cmdlets&lt;/li&gt; &#xA;       &lt;li&gt;ILSpy.AddIn.slnf: for the Visual Studio plugin&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Visual Studio includes a version of the .NET SDK that is managed by the Visual Studio installer - once you update, it may get upgraded too. Please note that ILSpy is only compatible with the .NET 6.0 SDK and Visual Studio will refuse to load some projects in the solution (and unit tests will fail). If this problem occurs, please manually install the .NET 6.0 SDK from &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Unix / Mac:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/7.0&#34;&gt;.NET 7.0 SDK&lt;/a&gt; is installed.&lt;/li&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;https://github.com/PowerShell/PowerShell&#34;&gt;PowerShell&lt;/a&gt; is installed (formerly known as PowerShell Core)&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository using git.&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to download the ILSpy-Tests submodule (used by some test cases).&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;dotnet build ILSpy.XPlat.slnf&lt;/code&gt; to build the non-Windows flavors of ILSpy (.NET Core Global Tool and PowerShell Core).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs&lt;/li&gt; &#xA; &lt;li&gt;If you want to contribute a pull request, please add &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/raw/master/BuildTools/pre-commit&#34;&gt;https://github.com/icsharpcode/ILSpy/blob/master/BuildTools/pre-commit&lt;/a&gt; to your &lt;code&gt;.git/hooks&lt;/code&gt; to prevent checking in code with wrong formatting. We use tabs and not spaces. The build server runs the same script, so any pull requests using wrong formatting will fail.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Current and past &lt;a href=&#34;https://github.com/icsharpcode/ILSpy/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy Policy for ILSpy&lt;/h2&gt; &#xA;&lt;p&gt;ILSpy does not collect any personally identifiable information, nor does it send user files to 3rd party services. ILSpy does not use any APM (Application Performance Management) service to collect telemetry or metrics.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Rectify11/Installer</title>
    <updated>2023-08-06T01:47:29Z</updated>
    <id>tag:github.com,2023-08-06:/Rectify11/Installer</id>
    <link href="https://github.com/Rectify11/Installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Windows 11 modification to make Windows more consistent.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/MishaTy/Rectify11Installer/raw/master/logo.png&#34; alt=&#34;alt text&#34; title=&#34;Rectify11 Installer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Official Rectify11 Installer source code. Note: not completed.&lt;/p&gt; &#xA;&lt;p&gt;Official Discord community: &lt;a href=&#34;https://discord.gg/gsgu9GCtsk&#34;&gt;https://discord.gg/gsgu9GCtsk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Projects used&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.angusj.com/resourcehacker/&#34;&gt;Resource Hacker&lt;/a&gt; for replacing resources in files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nptr/msstyleEditor&#34;&gt;Libmsstyle&lt;/a&gt; for rendering controls from rectify msstyles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/namazso/SecureUxTheme&#34;&gt;SecureUxTheme&lt;/a&gt; for uxtheme patching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MicaForEveryone/MicaForEveryone&#34;&gt;MicaForEveryone&lt;/a&gt; for applying mica backdrop to the UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dongle-the-gadget&#34;&gt;WinverUWP&lt;/a&gt; for modern and consistent winver.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lixkote/RectifyPad&#34;&gt;RectifyPad&lt;/a&gt; for the uwp wordpad-like text editor to be included in the future releases of Rectify11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krlvm/AccentColorizer&#34;&gt;AccentColorizer&lt;/a&gt; for colorizing legacy win32 controls used in msstyles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://7-zip.org/&#34;&gt;7-zip&lt;/a&gt; for efficient compression and decompression of the installed resouces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://8gadgetpack.net/&#34;&gt;8GadgetPack&lt;/a&gt; for the Rectified Gadgets.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lay295/TwitchDownloader</title>
    <updated>2023-08-06T01:47:29Z</updated>
    <id>tag:github.com,2023-08-06:/lay295/TwitchDownloader</id>
    <link href="https://github.com/lay295/TwitchDownloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Twitch VOD/Clip Downloader - Chat Download/Render/Replay&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/lay295/TwitchDownloader&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderWPF/Images/Logo.png&#34; alt=&#34;Logo&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;Twitch Downloader&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Twitch VOD/Clip/Chat Downloader and Chat Renderer &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/lay295/TwitchDownloader/issues&#34;&gt;Report Bug&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/README_es.md&#34;&gt;&lt;strong&gt;Readme in Spanish&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chat Render Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1060681/197653099-c3fd12c2-f03a-4580-84e4-63ce3f36be8d.mp4&#34;&gt;https://user-images.githubusercontent.com/1060681/197653099-c3fd12c2-f03a-4580-84e4-63ce3f36be8d.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What can it do?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Twitch VODs&lt;/li&gt; &#xA; &lt;li&gt;Download Twitch Clips&lt;/li&gt; &#xA; &lt;li&gt;Download chat for VODs and Clips, in either a &lt;a href=&#34;https://pastebin.com/raw/YDgRe6X4&#34;&gt;JSON with all the original information&lt;/a&gt;, a browser HTML file, or a &lt;a href=&#34;https://pastebin.com/raw/016azeQX&#34;&gt;plain text file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update the contents of a previously generated JSON chat file with an option to save as another format&lt;/li&gt; &#xA; &lt;li&gt;Use a previously generated JSON chat file to render the chat with Twitter Twemoji or Google Noto Color emojis and BTTV, FFZ, 7TV static and animated emotes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;GUI&lt;/h1&gt; &#xA;&lt;h2&gt;Windows WPF&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bLegxGX.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderWPF/README.md&#34;&gt;See the full WPF documentation here&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h3&gt;Functionality&lt;/h3&gt; &#xA;&lt;p&gt;The Windows WPF GUI implements all of the main functions of the program along with some extra quality of life functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Queue up multiple download/render jobs to run simultaneously&lt;/li&gt; &#xA; &lt;li&gt;Create a list of download jobs from a list of vod/clip links&lt;/li&gt; &#xA; &lt;li&gt;Search for and download multiple VODs/clips from any streamer without leaving the app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multi-language Support&lt;/h3&gt; &#xA;&lt;p&gt;The Windows WPF GUI is available in multiple languages thanks to community translations. See the &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderWPF/README.md#localization&#34;&gt;Localization section&lt;/a&gt; of the &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderWPF/README.md&#34;&gt;WPF README&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;The Windows WPF GUI comes bundled with both light and dark themes, along with an option to update live according the current Windows theme. It also supports user created themes! See the &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderWPF/README.md#theming&#34;&gt;Theming section&lt;/a&gt; of the &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderWPF/README.md&#34;&gt;WPF README&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Video Demonstration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0W3MhfhnYjk&#34;&gt;https://www.youtube.com/watch?v=0W3MhfhnYjk&lt;/a&gt; (older version, same concept)&lt;/p&gt; &#xA;&lt;h2&gt;Linux?&lt;/h2&gt; &#xA;&lt;p&gt;Check twitch-downloader-gui on &lt;a href=&#34;https://github.com/mohad12211/twitch-downloader-gui&#34;&gt;github&lt;/a&gt; or on the &lt;a href=&#34;https://aur.archlinux.org/packages/twitch-downloader-gui&#34;&gt;AUR&lt;/a&gt; for a Linux GUI wrapper for the CLI.&lt;/p&gt; &#xA;&lt;h2&gt;MacOS?&lt;/h2&gt; &#xA;&lt;p&gt;No GUI is available for MacOS yet :(&lt;/p&gt; &#xA;&lt;h1&gt;CLI&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderCLI/README.md&#34;&gt;See the full CLI documentation here&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;p&gt;The CLI is cross-platform and implements the main functions of the program. It works on Windows, Linux, and MacOS&lt;sup&gt;*&lt;/sup&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;*Only Intel Macs have been tested&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;With the CLI, it is possible to automate video processing using external scripts. For example, you could copy-paste the following code into a &lt;code&gt;.bat&lt;/code&gt; file on Windows to download a VOD and its chat, and then render the chat, all from a single input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off&#xA;set /p vodid=&#34;Enter VOD ID: &#34;&#xA;TwitchDownloaderCLI.exe videodownload --id %vodid% --ffmpeg-path &#34;ffmpeg.exe&#34; -o %vodid%.mp4&#xA;TwitchDownloaderCLI.exe chatdownload --id %vodid% -o %vodid%_chat.json -E&#xA;TwitchDownloaderCLI.exe chatrender -i %vodid%_chat.json -h 1080 -w 422 --framerate 30 --update-rate 0 --font-size 18 -o %vodid%_chat.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows - Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/lay295/TwitchDownloader/releases/&#34;&gt;Releases&lt;/a&gt; and download the latest version for Windows or &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/#building-from-source&#34;&gt;build from source&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;TwitchDownloaderCLI.exe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse to where you extracted the file in the terminal.&lt;/li&gt; &#xA; &lt;li&gt;If you do not have FFmpeg, you can install it via &lt;a href=&#34;https://community.chocolatey.org/&#34;&gt;Chocolatey package manager&lt;/a&gt;, or you can get it as a standalone file from &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;ffmpeg.org&lt;/a&gt; or by using TwitchDownloaderCLI:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;TwitchDownloaderCLI.exe ffmpeg --download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;You can now start using the downloader, for example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;TwitchDownloaderCLI.exe videodownload --id &amp;lt;vod-id-here&amp;gt; -o out.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux – Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Some distros, like Linux Alpine, lack fonts for some languages (Arabic, Persian, Thai, etc.) If this is the case for you, install additional fonts families such as &lt;a href=&#34;https://fonts.google.com/noto/specimen/Noto+Sans&#34;&gt;Noto&lt;/a&gt; or check your distro&#39;s wiki page on fonts as it may have an install command for this specific scenario, such as the &lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Fonts&#34;&gt;Linux Alpine&lt;/a&gt; font page.&lt;/li&gt; &#xA; &lt;li&gt;Ensure both &lt;code&gt;fontconfig&lt;/code&gt; and &lt;code&gt;libfontconfig1&lt;/code&gt; are installed. &lt;code&gt;apt-get install fontconfig libfontconfig1&lt;/code&gt; on Ubuntu.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/lay295/TwitchDownloader/releases/&#34;&gt;Releases&lt;/a&gt; and download the latest binary for Linux, grab the &lt;a href=&#34;https://aur.archlinux.org/packages/twitch-downloader-bin/&#34;&gt;AUR Package&lt;/a&gt; for Arch Linux, or &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/#building-from-source&#34;&gt;build from source&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;TwitchDownloaderCLI&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse to where you extracted the file and give it executable rights in the terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo chmod +x TwitchDownloaderCLI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;a) If you do not have FFmpeg, you should install it via your distro package manager, however you can also get it as a standalone file from &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;ffmpeg.org&lt;/a&gt; or by using TwitchDownloaderCLI:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./TwitchDownloaderCLI ffmpeg --download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;b) If downloaded as a standalone file, you must also give it executable rights with:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo chmod +x ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;You can now start using the downloader, for example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./TwitchDownloaderCLI videodownload --id &amp;lt;vod-id-here&amp;gt; -o out.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MacOS – Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/lay295/TwitchDownloader/releases/&#34;&gt;Releases&lt;/a&gt; and download the latest binary for MacOS or &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/#building-from-source&#34;&gt;build from source&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;TwitchDownloaderCLI&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse to where you extracted the file and give it executable rights in the terminal:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x TwitchDownloaderCLI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;a) If you do not have FFmpeg, you can install it via &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew package manager&lt;/a&gt;, or you can get it as a standalone file from &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;ffmpeg.org&lt;/a&gt; or by using TwitchDownloaderCLI:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./TwitchDownloaderCLI ffmpeg --download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;b) If downloaded as a standalone file, you must also give it executable rights with:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod +x ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;You can now start using the downloader, for example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./TwitchDownloaderCLI videodownload --id &amp;lt;vod-id-here&amp;gt; -o out.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Building from source&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/6.0&#34;&gt;.NET 6.0.x SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/lay295/TwitchDownloader.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Navigate to the solution folder:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd TwitchDownloader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Restore the solution:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet restore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;a) Build the GUI:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet publish TwitchDownloaderWPF -p:PublishProfile=Windows -p:DebugType=None -p:DebugSymbols=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;b) Build the CLI:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet publish TwitchDownloaderCLI -p:PublishProfile=&amp;lt;Profile&amp;gt; -p:DebugType=None -p:DebugSymbols=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Applicable Profiles: &lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, &lt;code&gt;LinuxAlpine&lt;/code&gt;, &lt;code&gt;LinuxArm&lt;/code&gt;, &lt;code&gt;LinuxArm64&lt;/code&gt;, &lt;code&gt;MacOS&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;a) Navigate to the GUI build folder:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd TwitchDownloaderWPF/bin/Release/net6.0-windows/publish/win-x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;b) Navigate to the CLI build folder:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd TwitchDownloaderCLI/bin/Release/net6.0/publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/LICENSE.txt&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Third Party Credits&lt;/h1&gt; &#xA;&lt;p&gt;Chat Renders are rendered with &lt;a href=&#34;https://github.com/mono/SkiaSharp&#34;&gt;SkiaSharp and HarfBuzzSharp&lt;/a&gt; © Microsoft Corporation.&lt;/p&gt; &#xA;&lt;p&gt;Chat Renders are encoded and Video Downloads are finalized with &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt; © The FFmpeg developers.&lt;/p&gt; &#xA;&lt;p&gt;Chat Renders may use &lt;a href=&#34;https://github.com/googlefonts/noto-emoji&#34;&gt;Noto Color Emoji&lt;/a&gt; © Google and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Chat Renders may use &lt;a href=&#34;https://github.com/twitter/twemoji&#34;&gt;Twemoji&lt;/a&gt; © Twitter and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Bundled FFmpeg binaries are fetched from &lt;a href=&#34;https://www.gyan.dev/ffmpeg/&#34;&gt;gyan.dev&lt;/a&gt; © Gyan Doshi.&lt;/p&gt; &#xA;&lt;p&gt;FFmpeg binaries fetched are runtime are downloaded using &lt;a href=&#34;https://github.com/tomaszzmuda/Xabe.FFmpeg&#34;&gt;Xabe.FFmpeg.Downloader&lt;/a&gt; © Xabe.&lt;/p&gt; &#xA;&lt;p&gt;Chat Html exports utilize the &lt;em&gt;Inter&lt;/em&gt; typeface hosted by the &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts API&lt;/a&gt; © Google.&lt;/p&gt; &#xA;&lt;p&gt;For a full list of utilized external libraries, see &lt;a href=&#34;https://raw.githubusercontent.com/lay295/TwitchDownloader/master/TwitchDownloaderCore/Resources/THIRD-PARTY-LICENSES.txt&#34;&gt;THIRD-PARTY-LICENSES.txt&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>