<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:43:34Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/dotnet-podcasts</title>
    <updated>2024-02-18T01:43:34Z</updated>
    <id>tag:github.com,2024-02-18:/microsoft/dotnet-podcasts</id>
    <link href="https://github.com/microsoft/dotnet-podcasts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET reference application shown at .NET Conf featuring ASP.NET Core, Blazor, .NET MAUI, Microservices, Orleans, Playwright, and more!&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;page_type: sample description: &#34;.NET reference application shown at .NET Conf 2021 &amp;amp; 2022 featuring ASP.NET Core, Blazor, .NET MAUI, Microservices, Power Apps, Playwright, Orleans, and more!&#34; languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;csharp products:&lt;/li&gt; &#xA; &lt;li&gt;dotnet-core&lt;/li&gt; &#xA; &lt;li&gt;ef-core&lt;/li&gt; &#xA; &lt;li&gt;blazor&lt;/li&gt; &#xA; &lt;li&gt;orleans&lt;/li&gt; &#xA; &lt;li&gt;dotnet-maui&lt;/li&gt; &#xA; &lt;li&gt;azure-sql-database&lt;/li&gt; &#xA; &lt;li&gt;azure-storage&lt;/li&gt; &#xA; &lt;li&gt;azure-container-apps&lt;/li&gt; &#xA; &lt;li&gt;azure-container-registry&lt;/li&gt; &#xA; &lt;li&gt;azure-app-service-web&lt;/li&gt; &#xA; &lt;li&gt;playwright&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;.NET Podcasts - Sample Application&lt;/h1&gt; &#xA;&lt;p&gt;The .NET Podcast app is a sample application showcasing &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;.NET&lt;/a&gt;, &lt;a href=&#34;https://dotnet.microsoft.com/apps/aspnet&#34;&gt;ASP.NET Core&lt;/a&gt;, &lt;a href=&#34;https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor&#34;&gt;Blazor&lt;/a&gt;, &lt;a href=&#34;https://dotnet.microsoft.com/apps/maui&#34;&gt;.NET MAUI&lt;/a&gt;, &lt;a href=&#34;https://azure.microsoft.com/services/container-apps/#overview&#34;&gt;Azure Container Apps&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/dotnet/orleans/overview&#34;&gt;Orleans&lt;/a&gt;, &lt;a href=&#34;https://playwright.dev&#34;&gt;Playwright&lt;/a&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;In addition, we created an Approval App using &lt;a href=&#34;https://docs.microsoft.com/en-us/power-apps/&#34;&gt;Microsoft Power Apps&lt;/a&gt; to handle incoming podcast requests.&lt;/p&gt; &#xA;&lt;p&gt;You can browse a &lt;a href=&#34;https://dotnetpodcasts.azurewebsites.net/&#34;&gt;live running version of the .NET Podcasts app&lt;/a&gt; powered by ASP.NET Core and Blazor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/docs/images/net-podcasts.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Application Architecture Diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/docs/images/arch_diagram_podcast.png&#34; alt=&#34;.NET Podcast Application Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Repositories&lt;/h2&gt; &#xA;&lt;p&gt;For this sample application, we build an app to listen to all your favorite .NET podcasts for all the ecosystems: Web, Android, iOS, macOS and Windows. You can find the different apps separated by folders in this repo:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/Mobile&#34;&gt;Mobile &amp;amp; Desktop:&lt;/a&gt; Native .NET MAUI Application for iOS, Android, macOS, and Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/Web&#34;&gt;Website:&lt;/a&gt; Blazor WebAssembly app and ASP.NET Core Razor Marketing website&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/Services&#34;&gt;Backend API:&lt;/a&gt; ASP.NET Core Web APIs &amp;amp; Minimal APIs, ingestion worker, and podcast update worker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/MobileBlazor&#34;&gt;Blazor Hybrid App:&lt;/a&gt; Sample hybrid application of .NET MAUI with Blazor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, we build an application using &lt;a href=&#34;https://docs.microsoft.com/en-us/power-apps/&#34;&gt;Microsoft Power Apps&lt;/a&gt; to allow us to reject or accept incoming podcast requests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/PowerApps&#34;&gt;Microsoft Power Apps:&lt;/a&gt; Power Apps sample to handle incoming podcast requests. &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/PowerApps&#34;&gt;Follow these guidelines&lt;/a&gt; on how to import the Approval Power App into your own Power Platform environment or &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/docs/demos/powerapps&#34;&gt;check out how to connect your API&lt;/a&gt; with the Microsoft Power Platform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Full Deployment with GitHub Actions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dotnet-podcasts&lt;/code&gt; repo is configured to deploy all services and websites automatically to Azure using GitHub Actions. &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/docs/deploy-websites-services.md&#34;&gt;Follow the detailed guidelines&lt;/a&gt; to setup GitHub Actions on your fork.&lt;/p&gt; &#xA;&lt;h2&gt;Local Deployment Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started is to build and run the .NET Podcasts app service, database, and storage using Docker.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First install &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository and navigate to the root directory in a terminal&lt;/li&gt; &#xA; &lt;li&gt;Run the following docker command (this may take some time to pull images, build, and deploy locally)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;For Apple arm64-based system&lt;/em&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;docker-compose -f docker-compose.arm64.yml -f docker-compose.override.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will deploy and start all services required to run the web, mobile, and desktop apps. The Web API will run on &lt;code&gt;localhost:5003&lt;/code&gt; and the SignalR Hub for listen together will run on &lt;code&gt;localhost:5001&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web, Mobile, &amp;amp; Desktop&lt;/h3&gt; &#xA;&lt;p&gt;The apps are configured to speak to &lt;code&gt;localhost&lt;/code&gt; on the correct ports for each service. Simply open the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/Web#solution&#34;&gt;Web solution&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/Mobile&#34;&gt;.NET MAUI solution&lt;/a&gt; and run the app.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that you have the following services running in Docker (podcast.api, listentogether.hub, podcast.updater.worker, podcast.db, storage):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/docs/images/docker-app-config.png&#34; alt=&#34;Configured Docker services&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backend Services&lt;/h3&gt; &#xA;&lt;p&gt;Open the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/src/Services&#34;&gt;Services solution&lt;/a&gt; and pick a service to run locally such as the &lt;code&gt;Podcast.API&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ensure that the following services are running in Docker, note that you only need the &lt;code&gt;podcast.db&lt;/code&gt; and &lt;code&gt;storage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/dotnet-podcasts/main/docs/images/docker-services-config.png&#34; alt=&#34;Configured Docker services&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Local Deployment with Visual Studio&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First install &lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker Desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository and navigate to the root directory in a terminal&lt;/li&gt; &#xA; &lt;li&gt;Open the solution &lt;code&gt;NetPodcast.sln&lt;/code&gt;, set the start project to &lt;code&gt;docker-compose&lt;/code&gt; and hit F5. To optimize debugging while running all services, please refer to &lt;a href=&#34;https://docs.microsoft.com/visualstudio/containers/launch-profiles&#34;&gt;Launch a subset of Compose services documentation.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;By default, the Podcast.Api&#39;s swagger endpoint will be launched. Navigate to &lt;code&gt;localhost:5002&lt;/code&gt; for the web application. If you see any errors, wait for a while and refresh the page.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rocketseat-education/nlw-expert-c-sharp</title>
    <updated>2024-02-18T01:43:34Z</updated>
    <id>tag:github.com,2024-02-18:/rocketseat-education/nlw-expert-c-sharp</id>
    <link href="https://github.com/rocketseat-education/nlw-expert-c-sharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An auction system API&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>builtbybel/BloatynosyAI</title>
    <updated>2024-02-18T01:43:34Z</updated>
    <id>tag:github.com,2024-02-18:/builtbybel/BloatynosyAI</id>
    <link href="https://github.com/builtbybel/BloatynosyAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Copilot rebel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BloatynosyAI - The Anti-assistant assistant&lt;/h1&gt; &#xA;&lt;h4&gt;Upgrade your Windows 10 and Windows 11 journey with the sleek power of Bloatynosy and its next-gen successor, BloatynosyAI – the AI-driven way to customize your digital world.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34; width=&#34;50%&#34;&gt; &lt;img width=&#34;33%&#34; src=&#34;https://github.com/builtbybel/BloatynosyAI/assets/57478606/122de929-86cd-4422-9e92-491669c15c3f&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About the app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/builtbybel/BloatynosyAI/assets/57478606/5863102b-2316-432a-9997-0b5be11b9fc4&#34; alt=&#34;h38B5YXwpu&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The latest release of BloatynosyAI introduces a significant milestone with its hybrid web app foundation. This update not only empowers users with the capability to remove AI features in Windows but also emphasizes the app&#39;s intelligent approach, driven by a novel hybrid and web-based core.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended AI Version:&lt;/strong&gt; &lt;a href=&#34;https://github.com/builtbybel/BloatynosyAI/releases&#34;&gt;Latest Preview AI release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Classic Bloatynosy version:&lt;/strong&gt; &lt;a href=&#34;https://github.com/builtbybel/Bloatynosy/releases/tag/1.5.0&#34;&gt;Last classic Bloatynosy 1.5 release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How-to&lt;/h2&gt; &#xA;&lt;p&gt;Simply execute BloatynosyAI.exe. Feel free to delete the cache folder BloatynosyAI.exe.WebView2 whenever necessary.&lt;/p&gt; &#xA;&lt;p&gt;With the chat box in front of you, input your search terms, inquiries, or keywords, and enjoy real-time results. For instance, if you need to &#39;install an app,&#39; simply type &#39;install&#39; or any related keyword, and you&#39;ll receive the same outcome. Additionally, using this search function, you can easily install popular apps using &#39;winget.&#39; Remember other useful keywords such as &#39;bloat,&#39; &#39;appx,&#39; or &#39;uninstall&#39; to effortlessly remove unwanted default apps in Windows 10/11. The possibilities are endless. Have fun experimenting with different queries!&lt;/p&gt; &#xA;&lt;p&gt;Currently trending keywords include &#39;#ai&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Localization support&lt;/h2&gt; &#xA;&lt;p&gt;Language files are already available. A German language file can be directly and live installed via the user interface. To do this, simply search for &#34;translate&#34; and/or &#34;German&#34; in the search/chat box and execute. Language files, including the &lt;a href=&#34;https://github.com/orgs/builtbybel/discussions/133#discussioncomment-8456415&#34;&gt;French&lt;/a&gt; one attached, can also be manually installed. Simply download the .zip file and unpack it into the &#34;app&#34; directory of BloatynosyAI (allowing existing files to be overwritten). In the future, additional language files will be installable by default via the search box.&lt;/p&gt; &#xA;&lt;h2&gt;Support statement for the AI Version&lt;/h2&gt; &#xA;&lt;p&gt;WebView2 apps can run on the following versions of Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 11&lt;/li&gt; &#xA; &lt;li&gt;Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 IoT Enterprise LTSC x32 2019&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 IoT Enterprise LTSC x64 2019&lt;/li&gt; &#xA; &lt;li&gt;Windows 10 IoT Enterprise 21h1 x64&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2022&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2019&lt;/li&gt; &#xA; &lt;li&gt;Windows Server 2016&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-US/microsoft-edge/webview2/&#34;&gt;https://learn.microsoft.com/en-US/microsoft-edge/webview2/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>