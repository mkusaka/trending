<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-13T01:56:18Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>martinothamar/Mediator</title>
    <updated>2025-04-13T01:56:18Z</updated>
    <id>tag:github.com,2025-04-13:/martinothamar/Mediator</id>
    <link href="https://github.com/martinothamar/Mediator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high performance implementation of Mediator pattern in .NET using source generators.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/martinothamar/Mediator/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/martinothamar/Mediator/build.yml?branch=main&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/martinothamar/Mediator/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/martinothamar/Mediator?style=flat-square&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Mediator.Abstractions/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/mediator.abstractions?style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nuget.org/packages/Mediator.Abstractions&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Mediator.Abstractions?label=Mediator.Abstractions&#34; alt=&#34;Abstractions NuGet current&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Mediator.SourceGenerator&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Mediator.SourceGenerator?label=Mediator.SourceGenerator&#34; alt=&#34;SourceGenerator NuGet current&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Mediator.Abstractions&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Mediator.Abstractions?label=Mediator.Abstractions&#34; alt=&#34;Abstractions NuGet prerelease&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Mediator.SourceGenerator&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Mediator.SourceGenerator?label=Mediator.SourceGenerator&#34; alt=&#34;SourceGenerator NuGet prerelease&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Mediator&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Version 3.0&lt;/strong&gt; is currently being developed. See status and provide feedback &lt;a href=&#34;https://github.com/martinothamar/Mediator/issues/98&#34;&gt;here (#98)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This is a high performance .NET implementation of the Mediator pattern using the &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/&#34;&gt;source generators&lt;/a&gt; feature introduced in .NET 5. The API and usage is mostly based on the great &lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt; library, with some deviations to allow for better performance. Packages are .NET Standard 2.1 compatible.&lt;/p&gt; &#xA;&lt;p&gt;The mediator pattern is great for implementing cross cutting concern (logging, metrics, etc) and avoiding &#34;fat&#34; constructors due to lots of injected services.&lt;/p&gt; &#xA;&lt;p&gt;Goals for this library&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;High performance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Runtime performance can be the same for both runtime reflection and source generator based approaches, but it&#39;s easier to optimize in the latter case&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AOT friendly &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MS are investing time in various AOT scenarios, and for example iOS requires AOT compilation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build time errors instead of runtime errors &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The generator includes diagnostics, i.e. if a handler is not defined for a request, a warning is emitted&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In particular, source generators in this library is used to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate code for DI registration&lt;/li&gt; &#xA; &lt;li&gt;Generate code for &lt;code&gt;IMediator&lt;/code&gt; implementation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request/Command/Query &lt;code&gt;Send&lt;/code&gt; methods are monomorphized (1 method per T), the generic &lt;code&gt;ISender.Send&lt;/code&gt; methods rely on these&lt;/li&gt; &#xA;   &lt;li&gt;You can use both &lt;code&gt;IMediator&lt;/code&gt; and &lt;code&gt;Mediator&lt;/code&gt;, the latter allows for better performance&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate diagnostics related messages and message handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See this great video by &lt;a href=&#34;https://github.com/Elfocrash&#34;&gt;@Elfocrash / Nick Chapsas&lt;/a&gt;, covering both similarities and differences between Mediator and MediatR&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aaFLtcf8cO4&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/aaFLtcf8cO4/0.jpg&#34; alt=&#34;Using MediatR in .NET? Maybe replace it with this&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#mediator&#34;&gt;Mediator&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#2-benchmarks&#34;&gt;2. Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#3-usage-and-abstractions&#34;&gt;3. Usage and abstractions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#31-message-types&#34;&gt;3.1. Message types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#32-handler-types&#34;&gt;3.2. Handler types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#33-pipeline-types&#34;&gt;3.3. Pipeline types&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#331-message-validation-example&#34;&gt;3.3.1. Message validation example&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#332-error-logging-example&#34;&gt;3.3.2. Error logging example&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#34-configuration&#34;&gt;3.4. Configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#4-getting-started&#34;&gt;4. Getting started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#41-add-package&#34;&gt;4.1. Add package&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#42-add-mediator-to-di-container&#34;&gt;4.2. Add Mediator to DI container&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#43-create-irequest-type&#34;&gt;4.3. Create &lt;code&gt;IRequest&amp;lt;&amp;gt;&lt;/code&gt; type&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#44-use-pipeline-behaviors&#34;&gt;4.4. Use pipeline behaviors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#45-constrain-ipipelinebehavior-message-with-open-generics&#34;&gt;4.5. Constrain &lt;code&gt;IPipelineBehavior&amp;lt;,&amp;gt;&lt;/code&gt; message with open generics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#46-use-notifications&#34;&gt;4.6. Use notifications&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#47-polymorphic-dispatch-with-notification-handlers&#34;&gt;4.7. Polymorphic dispatch with notification handlers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#48-notification-handlers-also-support-open-generics&#34;&gt;4.8. Notification handlers also support open generics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#49-notification-publishers&#34;&gt;4.9. Notification publishers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#410-use-streaming-messages&#34;&gt;4.10. Use streaming messages&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#5-diagnostics&#34;&gt;5. Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#6-differences-from-mediatr&#34;&gt;6. Differences from MediatR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/#7-versioning&#34;&gt;7. Versioning&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;This benchmark exposes the perf overhead of the libraries. Mediator (this library) and MediatR methods show the overhead of the respective mediator implementations. I&#39;ve also included the &lt;a href=&#34;https://github.com/Cysharp/MessagePipe&#34;&gt;MessagePipe&lt;/a&gt; library as it also has great performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SendRequest | Stream&amp;gt;_Baseline&lt;/code&gt;: simple method call into the handler class&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SendRequest | Stream&amp;gt;_Mediator&lt;/code&gt;: the concrete &lt;code&gt;Mediator&lt;/code&gt; class generated by this library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SendRequest | Stream&amp;gt;_MessagePipe&lt;/code&gt;: the &lt;a href=&#34;https://github.com/Cysharp/MessagePipe&#34;&gt;MessagePipe&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SendRequest | Stream&amp;gt;_IMediator&lt;/code&gt;: call through the &lt;code&gt;IMediator&lt;/code&gt; interface in this library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SendRequest | Stream&amp;gt;_MediatR&lt;/code&gt;: the &lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt; library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/benchmarks/Mediator.Benchmarks/Request&#34;&gt;benchmarks code&lt;/a&gt; for more details on the measurement.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;A current limitation of this library is that performance degrades significantly for projects with a large number of messages (&amp;gt;500) There is ongoing work on resolving this for version 3.0 (&lt;a href=&#34;https://github.com/martinothamar/Mediator/issues/48&#34;&gt;#48&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/img/request_benchmark.png&#34; alt=&#34;Requests benchmark&#34; title=&#34;Requests benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/img/stream_benchmark.png&#34; alt=&#34;Stream benchmark&#34; title=&#34;Stream benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Usage and abstractions&lt;/h2&gt; &#xA;&lt;p&gt;There are two NuGet packages needed to use this library&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mediator.SourceGenerator &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To generate the &lt;code&gt;IMediator&lt;/code&gt; implementation and dependency injection setup.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mediator.Abstractions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Message types (&lt;code&gt;IRequest&amp;lt;,&amp;gt;&lt;/code&gt;, &lt;code&gt;INotification&lt;/code&gt;), handler types (&lt;code&gt;IRequestHandler&amp;lt;,&amp;gt;&lt;/code&gt;, &lt;code&gt;INotificationHandler&amp;lt;&amp;gt;&lt;/code&gt;), pipeline types (&lt;code&gt;IPipelineBehavior&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You install the source generator package into your edge/outermost project (i.e. ASP.NET Core application, Background worker project), and then use the &lt;code&gt;Mediator.Abstractions&lt;/code&gt; package wherever you define message types and handlers. Standard message handlers are automatically picked up and added to the DI container in the generated &lt;code&gt;AddMediator&lt;/code&gt; method. &lt;em&gt;Pipeline behaviors need to be added manually (including pre/post/exception behaviors).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example implementations, see the &lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/samples&#34;&gt;/samples&lt;/a&gt; folder. See the &lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/samples/ASPNET_Core_CleanArchitecture&#34;&gt;ASP.NET Core clean architecture sample&lt;/a&gt; for a more real world setup.&lt;/p&gt; &#xA;&lt;h3&gt;3.1. Message types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IMessage&lt;/code&gt; - marker interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamMessage&lt;/code&gt; - marker interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IBaseRequest&lt;/code&gt; - marker interface for requests&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IRequest&lt;/code&gt; - a request message, no return value (&lt;code&gt;ValueTask&amp;lt;Unit&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IRequest&amp;lt;out TResponse&amp;gt;&lt;/code&gt; - a request message with a response (&lt;code&gt;ValueTask&amp;lt;TResponse&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamRequest&amp;lt;out TResponse&amp;gt;&lt;/code&gt; - a request message with a streaming response (&lt;code&gt;IAsyncEnumerable&amp;lt;TResponse&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IBaseCommand&lt;/code&gt; - marker interface for commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ICommand&lt;/code&gt; - a command message, no return value (&lt;code&gt;ValueTask&amp;lt;Unit&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ICommand&amp;lt;out TResponse&amp;gt;&lt;/code&gt; - a command message with a response (&lt;code&gt;ValueTask&amp;lt;TResponse&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamCommand&amp;lt;out TResponse&amp;gt;&lt;/code&gt; - a command message with a streaming response (&lt;code&gt;IAsyncEnumerable&amp;lt;TResponse&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IBaseQuery&lt;/code&gt; - marker interface for queries&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IQuery&amp;lt;out TResponse&amp;gt;&lt;/code&gt; - a query message with a response (&lt;code&gt;ValueTask&amp;lt;TResponse&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamQuery&amp;lt;out TResponse&amp;gt;&lt;/code&gt; - a query message with a streaming response (&lt;code&gt;IAsyncEnumerable&amp;lt;TResponse&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INotification&lt;/code&gt; - a notification message, no return value (&lt;code&gt;ValueTask&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As you can see, you can achieve the exact same thing with requests, commands and queries. But I find the distinction in naming useful if you for example use the CQRS pattern or for some reason have a preference on naming in your application.&lt;/p&gt; &#xA;&lt;h3&gt;3.2. Handler types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IRequestHandler&amp;lt;in TRequest&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IRequestHandler&amp;lt;in TRequest, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamRequestHandler&amp;lt;in TRequest, out TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ICommandHandler&amp;lt;in TCommand&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ICommandHandler&amp;lt;in TCommand, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamCommandHandler&amp;lt;in TCommand, out TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IQueryHandler&amp;lt;in TQuery, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamQueryHandler&amp;lt;in TQuery, out TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INotificationHandler&amp;lt;in TNotification&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These types are used in correlation with the message types above.&lt;/p&gt; &#xA;&lt;h3&gt;3.3. Pipeline types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IPipelineBehavior&amp;lt;TMessage, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IStreamPipelineBehavior&amp;lt;TMessage, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MessagePreProcessor&amp;lt;TMessage, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MessagePostProcessor&amp;lt;TMessage, TResponse&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MessageExceptionHandler&amp;lt;TMessage, TResponse, TException&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3.3.1. Message validation example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// As a normal pipeline behavior&#xA;public sealed class MessageValidatorBehaviour&amp;lt;TMessage, TResponse&amp;gt; : IPipelineBehavior&amp;lt;TMessage, TResponse&amp;gt;&#xA;    where TMessage : IValidate&#xA;{&#xA;    public ValueTask&amp;lt;TResponse&amp;gt; Handle(&#xA;        TMessage message,&#xA;        CancellationToken cancellationToken,&#xA;        MessageHandlerDelegate&amp;lt;TMessage, TResponse&amp;gt; next&#xA;    )&#xA;    {&#xA;        if (!message.IsValid(out var validationError))&#xA;            throw new ValidationException(validationError);&#xA;&#xA;        return next(message, cancellationToken);&#xA;    }&#xA;}&#xA;&#xA;// Or as a pre-processor&#xA;public sealed class MessageValidatorBehaviour&amp;lt;TMessage, TResponse&amp;gt; : MessagePreProcessor&amp;lt;TMessage, TResponse&amp;gt;&#xA;    where TMessage : IValidate&#xA;{&#xA;    protected override ValueTask Handle(TMessage message, CancellationToken cancellationToken)&#xA;    {&#xA;        if (!message.IsValid(out var validationError))&#xA;            throw new ValidationException(validationError);&#xA;&#xA;        return default;&#xA;    }&#xA;}&#xA;&#xA;// Register as IPipelineBehavior&amp;lt;,&amp;gt; in either case&#xA;services.AddSingleton(typeof(IPipelineBehavior&amp;lt;,&amp;gt;), typeof(MessageValidatorBehaviour&amp;lt;,&amp;gt;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.3.2. Error logging example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// As a normal pipeline behavior&#xA;public sealed class ErrorLoggingBehaviour&amp;lt;TMessage, TResponse&amp;gt; : IPipelineBehavior&amp;lt;TMessage, TResponse&amp;gt;&#xA;    where TMessage : IMessage&#xA;{&#xA;    private readonly ILogger&amp;lt;ErrorLoggingBehaviour&amp;lt;TMessage, TResponse&amp;gt;&amp;gt; _logger;&#xA;&#xA;    public ErrorLoggingBehaviour(ILogger&amp;lt;ErrorLoggingBehaviour&amp;lt;TMessage, TResponse&amp;gt;&amp;gt; logger)&#xA;    {&#xA;        _logger = logger;&#xA;    }&#xA;&#xA;    public async ValueTask&amp;lt;TResponse&amp;gt; Handle(&#xA;        TMessage message,&#xA;        CancellationToken cancellationToken,&#xA;        MessageHandlerDelegate&amp;lt;TMessage, TResponse&amp;gt; next&#xA;    )&#xA;    {&#xA;        try&#xA;        {&#xA;            return await next(message, cancellationToken);&#xA;        }&#xA;        catch (Exception ex)&#xA;        {&#xA;            _logger.LogError(ex, &#34;Error handling message of type {messageType}&#34;, message.GetType().Name);&#xA;            throw;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// Or as an exception handler&#xA;public sealed class ErrorLoggingBehaviour&amp;lt;TMessage, TResponse&amp;gt; : MessageExceptionHandler&amp;lt;TMessage, TResponse&amp;gt;&#xA;    where TMessage : notnull, IMessage&#xA;{&#xA;    private readonly ILogger&amp;lt;ErrorLoggingBehaviour&amp;lt;TMessage, TResponse&amp;gt;&amp;gt; _logger;&#xA;&#xA;    public ErrorLoggingBehaviour(ILogger&amp;lt;ErrorLoggingBehaviour&amp;lt;TMessage, TResponse&amp;gt;&amp;gt; logger)&#xA;    {&#xA;        _logger = logger;&#xA;    }&#xA;&#xA;    protected override ValueTask&amp;lt;ExceptionHandlingResult&amp;lt;TResponse&amp;gt;&amp;gt; Handle(&#xA;        TMessage message,&#xA;        Exception exception,&#xA;        CancellationToken cancellationToken&#xA;    )&#xA;    {&#xA;        _logger.LogError(exception, &#34;Error handling message of type {messageType}&#34;, message.GetType().Name);&#xA;        // Let the exception bubble up by using the base class helper NotHandled:&#xA;        return NotHandled;&#xA;        // Or if the exception is properly handled, you can just return your own response,&#xA;        // using the base class helper Handle().&#xA;        // This requires you to know something about TResponse,&#xA;        // so TResponse needs to be constrained to something,&#xA;        // typically with a static abstract member acting as a consructor on an interface or abstract class.&#xA;        return Handled(null!);&#xA;    }&#xA;}&#xA;&#xA;// Register as IPipelineBehavior&amp;lt;,&amp;gt; in either case&#xA;services.AddSingleton(typeof(IPipelineBehavior&amp;lt;,&amp;gt;), typeof(ErrorLoggingBehaviour&amp;lt;,&amp;gt;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.4. Configuration&lt;/h3&gt; &#xA;&lt;p&gt;There are two ways to configure Mediator. Configuration values are needed during compile-time since this is a source generator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assembly level attribute for configuration: &lt;code&gt;MediatorOptionsAttribute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Options configuration delegate in &lt;code&gt;AddMediator&lt;/code&gt; function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddMediator(options =&amp;gt;&#xA;{&#xA;    options.Namespace = &#34;SimpleConsole.Mediator&#34;;&#xA;    options.DefaultServiceLifetime = ServiceLifetime.Transient;&#xA;});&#xA;&#xA;// or&#xA;&#xA;[assembly: MediatorOptions(Namespace = &#34;SimpleConsole.Mediator&#34;, DefaultServiceLifetime = ServiceLifetime.Transient)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Namespace&lt;/code&gt; - where the &lt;code&gt;IMediator&lt;/code&gt; implementation is generated&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DefaultServiceLifetime&lt;/code&gt; - the DI service lifetime &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Singleton&lt;/code&gt; - (default value) everything registered as singletons, minimal allocations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Transient&lt;/code&gt; - mediator and handlers registered as transient&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Scoped&lt;/code&gt; - mediator and handlers registered as scoped&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. Getting started&lt;/h2&gt; &#xA;&lt;p&gt;In this section we will get started with Mediator and go through a sample illustrating the various ways the Mediator pattern can be used in an application.&lt;/p&gt; &#xA;&lt;p&gt;See the full runnable sample code in the &lt;a href=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/samples/Showcase/&#34;&gt;Showcase sample&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;4.1. Add package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;dotnet add package Mediator.SourceGenerator --version 2.0.*&#xA;dotnet add package Mediator.Abstractions --version 2.0.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PackageReference Include=&#34;Mediator.SourceGenerator&#34; Version=&#34;2.0.*&#34;&amp;gt;&#xA;  &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;&#xA;  &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;&#xA;&amp;lt;/PackageReference&amp;gt;&#xA;&amp;lt;PackageReference Include=&#34;Mediator.Abstractions&#34; Version=&#34;2.0.*&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.2. Add Mediator to DI container&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;ConfigureServices&lt;/code&gt; or equivalent, call &lt;code&gt;AddMediator&lt;/code&gt; (unless &lt;code&gt;MediatorOptions&lt;/code&gt; is configured, default namespace is &lt;code&gt;Mediator&lt;/code&gt;). This registers your handler below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Mediator;&#xA;using Microsoft.Extensions.DependencyInjection;&#xA;using System;&#xA;&#xA;var services = new ServiceCollection(); // Most likely IServiceCollection comes from IHostBuilder/Generic host abstraction in Microsoft.Extensions.Hosting&#xA;&#xA;services.AddMediator();&#xA;var serviceProvider = services.BuildServiceProvider();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.3. Create &lt;code&gt;IRequest&amp;lt;&amp;gt;&lt;/code&gt; type&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var mediator = serviceProvider.GetRequiredService&amp;lt;IMediator&amp;gt;();&#xA;var ping = new Ping(Guid.NewGuid());&#xA;var pong = await mediator.Send(ping);&#xA;Debug.Assert(ping.Id == pong.Id);&#xA;&#xA;// ...&#xA;&#xA;public sealed record Ping(Guid Id) : IRequest&amp;lt;Pong&amp;gt;;&#xA;&#xA;public sealed record Pong(Guid Id);&#xA;&#xA;public sealed class PingHandler : IRequestHandler&amp;lt;Ping, Pong&amp;gt;&#xA;{&#xA;    public ValueTask&amp;lt;Pong&amp;gt; Handle(Ping request, CancellationToken cancellationToken)&#xA;    {&#xA;        return new ValueTask&amp;lt;Pong&amp;gt;(new Pong(request.Id));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As soon as you code up message types, the source generator will add DI registrations automatically (inside &lt;code&gt;AddMediator&lt;/code&gt;). P.S - You can inspect the code yourself - open &lt;code&gt;Mediator.g.cs&lt;/code&gt; in VS from Project -&amp;gt; Dependencies -&amp;gt; Analyzers -&amp;gt; Mediator.SourceGenerator -&amp;gt; Mediator.SourceGenerator.MediatorGenerator, or just F12 through the code.&lt;/p&gt; &#xA;&lt;h3&gt;4.4. Use pipeline behaviors&lt;/h3&gt; &#xA;&lt;p&gt;The pipeline behavior below validates all incoming &lt;code&gt;Ping&lt;/code&gt; messages. Pipeline behaviors currently must be added manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddMediator();&#xA;services.AddSingleton&amp;lt;IPipelineBehavior&amp;lt;Ping, Pong&amp;gt;, PingValidator&amp;gt;();&#xA;&#xA;public sealed class PingValidator : IPipelineBehavior&amp;lt;Ping, Pong&amp;gt;&#xA;{&#xA;    public ValueTask&amp;lt;Pong&amp;gt; Handle(Ping request, MessageHandlerDelegate&amp;lt;Ping, Pong&amp;gt; next, CancellationToken cancellationToken)&#xA;    {&#xA;        if (request is null || request.Id == default)&#xA;            throw new ArgumentException(&#34;Invalid input&#34;);&#xA;&#xA;        return next(request, cancellationToken);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.5. Constrain &lt;code&gt;IPipelineBehavior&amp;lt;,&amp;gt;&lt;/code&gt; message with open generics&lt;/h3&gt; &#xA;&lt;p&gt;Add open generic handler to process all or a subset of messages passing through Mediator. This handler will log any error that is thrown from message handlers (&lt;code&gt;IRequest&lt;/code&gt;, &lt;code&gt;ICommand&lt;/code&gt;, &lt;code&gt;IQuery&lt;/code&gt;). It also publishes a notification allowing notification handlers to react to errors. Message pre- and post-processors along with the exception handlers can also constrain the generic type parameters in the same way.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddMediator();&#xA;services.AddSingleton(typeof(IPipelineBehavior&amp;lt;,&amp;gt;), typeof(ErrorLoggerHandler&amp;lt;,&amp;gt;));&#xA;&#xA;public sealed record ErrorMessage(Exception Exception) : INotification;&#xA;public sealed record SuccessfulMessage() : INotification;&#xA;&#xA;public sealed class ErrorLoggerHandler&amp;lt;TMessage, TResponse&amp;gt; : IPipelineBehavior&amp;lt;TMessage, TResponse&amp;gt;&#xA;    where TMessage : IMessage // Constrained to IMessage, or constrain to IBaseCommand or any custom interface you&#39;ve implemented&#xA;{&#xA;    private readonly ILogger&amp;lt;ErrorLoggerHandler&amp;lt;TMessage, TResponse&amp;gt;&amp;gt; _logger;&#xA;    private readonly IMediator _mediator;&#xA;&#xA;    public ErrorLoggerHandler(ILogger&amp;lt;ErrorLoggerHandler&amp;lt;TMessage, TResponse&amp;gt;&amp;gt; logger, IMediator mediator)&#xA;    {&#xA;        _logger = logger;&#xA;        _mediator = mediator;&#xA;    }&#xA;&#xA;    public async ValueTask&amp;lt;TResponse&amp;gt; Handle(TMessage message, MessageHandlerDelegate&amp;lt;TMessage, TResponse&amp;gt; next, CancellationToken cancellationToken)&#xA;    {&#xA;        try&#xA;        {&#xA;            var response = await next(message, cancellationToken);&#xA;            return response;&#xA;        }&#xA;        catch (Exception ex)&#xA;        {&#xA;            _logger.LogError(ex, &#34;Error handling message&#34;);&#xA;            await _mediator.Publish(new ErrorMessage(ex));&#xA;            throw;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.6. Use notifications&lt;/h3&gt; &#xA;&lt;p&gt;We can define a notification handler to catch errors from the above pipeline behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Notification handlers are automatically added to DI container&#xA;&#xA;public sealed class ErrorNotificationHandler : INotificationHandler&amp;lt;ErrorMessage&amp;gt;&#xA;{&#xA;    public ValueTask Handle(ErrorMessage error, CancellationToken cancellationToken)&#xA;    {&#xA;        // Could log to application insights or something...&#xA;        return default;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.7. Polymorphic dispatch with notification handlers&lt;/h3&gt; &#xA;&lt;p&gt;We can also define a notification handler that receives all notifications.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;public sealed class StatsNotificationHandler : INotificationHandler&amp;lt;INotification&amp;gt; // or any other interface deriving from INotification&#xA;{&#xA;    private long _messageCount;&#xA;    private long _messageErrorCount;&#xA;&#xA;    public (long MessageCount, long MessageErrorCount) Stats =&amp;gt; (_messageCount, _messageErrorCount);&#xA;&#xA;    public ValueTask Handle(INotification notification, CancellationToken cancellationToken)&#xA;    {&#xA;        Interlocked.Increment(ref _messageCount);&#xA;        if (notification is ErrorMessage)&#xA;            Interlocked.Increment(ref _messageErrorCount);&#xA;        return default;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.8. Notification handlers also support open generics&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public sealed class GenericNotificationHandler&amp;lt;TNotification&amp;gt; : INotificationHandler&amp;lt;TNotification&amp;gt;&#xA;    where TNotification : INotification // Generic notification handlers will be registered as open constrained types automatically&#xA;{&#xA;    public ValueTask Handle(TNotification notification, CancellationToken cancellationToken)&#xA;    {&#xA;        return default;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.9. Notification publishers&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; This API is currently in the latest 3.0 previews, not available in stable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Notification publishers are responsible for dispatching notifications to a collection of handlers. There are two built in implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ForeachAwaitPublisher&lt;/code&gt; - the default, dispatches the notifications to handlers in order 1-by-1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TaskWhenAllPublisher&lt;/code&gt; - dispatches notifications in parallel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both of these try to be efficient by handling a number of special cases (early exit on sync completion, single-handler, array of handlers). Below we implement a custom one by simply using &lt;code&gt;Task.WhenAll&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;services.AddMediator(options =&amp;gt;&#xA;{&#xA;    options.NotificationPublisherType = typeof(FireAndForgetNotificationPublisher);&#xA;});&#xA;&#xA;public sealed class FireAndForgetNotificationPublisher : INotificationPublisher&#xA;{&#xA;    public async ValueTask Publish&amp;lt;TNotification&amp;gt;(&#xA;        NotificationHandlers&amp;lt;TNotification&amp;gt; handlers,&#xA;        TNotification notification,&#xA;        CancellationToken cancellationToken&#xA;    )&#xA;        where TNotification : INotification&#xA;    {&#xA;        try&#xA;        {&#xA;            await Task.WhenAll(handlers.Select(handler =&amp;gt; handler.Handle(notification, cancellationToken).AsTask()));&#xA;        }&#xA;        catch (Exception ex)&#xA;        {&#xA;            // Notifications should be fire-and-forget, we just need to log it!&#xA;            // This way we don&#39;t have to worry about exceptions bubbling up when publishing notifications&#xA;            Console.Error.WriteLine(ex);&#xA;&#xA;            // NOTE: not necessarily saying this is a good idea!&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.10. Use streaming messages&lt;/h3&gt; &#xA;&lt;p&gt;Since version 1.* of this library there is support for streaming using &lt;code&gt;IAsyncEnumerable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var mediator = serviceProvider.GetRequiredService&amp;lt;IMediator&amp;gt;();&#xA;&#xA;var ping = new StreamPing(Guid.NewGuid());&#xA;&#xA;await foreach (var pong in mediator.CreateStream(ping))&#xA;{&#xA;    Debug.Assert(ping.Id == pong.Id);&#xA;    Console.WriteLine(&#34;Received pong!&#34;); // Should log 5 times&#xA;}&#xA;&#xA;// ...&#xA;&#xA;public sealed record StreamPing(Guid Id) : IStreamRequest&amp;lt;Pong&amp;gt;;&#xA;&#xA;public sealed record Pong(Guid Id);&#xA;&#xA;public sealed class PingHandler : IStreamRequestHandler&amp;lt;StreamPing, Pong&amp;gt;&#xA;{&#xA;    public async IAsyncEnumerable&amp;lt;Pong&amp;gt; Handle(StreamPing request, [EnumeratorCancellation] CancellationToken cancellationToken)&#xA;    {&#xA;        for (int i = 0; i &amp;lt; 5; i++)&#xA;        {&#xA;            await Task.Delay(1000, cancellationToken);&#xA;            yield return new Pong(request.Id);&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5. Diagnostics&lt;/h2&gt; &#xA;&lt;p&gt;Since this is a source generator, diagnostics are also included. Examples below&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Missing request handler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/img/missing_request_handler.png&#34; alt=&#34;Missing request handler&#34; title=&#34;Missing request handler&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple request handlers found&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/martinothamar/Mediator/main/img/multiple_request_handlers.png&#34; alt=&#34;Multiple request handlers found&#34; title=&#34;Multiple request handlers found&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Differences from &lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This is a work in progress list on the differences between this library and MediatR.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RequestHandlerDelegate&amp;lt;TResponse&amp;gt;()&lt;/code&gt; -&amp;gt; &lt;code&gt;MessageHandlerDelegate&amp;lt;TMessage, TResponse&amp;gt;(TMessage message, CancellationToken cancellationToken)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is to avoid excessive closure allocations. I think it&#39;s worthwhile when the cost is simply passing along the message and the cancellation token.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;ServiceFactory&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This library relies on the &lt;code&gt;Microsoft.Extensions.DependencyInjection&lt;/code&gt;, so it only works with DI containers that integrate with those abstractions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Singleton service lifetime by default &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MediatR in combination with &lt;code&gt;MediatR.Extensions.Microsoft.DependencyInjection&lt;/code&gt; does transient service registration by default, which leads to a lot of allocations. Even if it is configured for singleton lifetime, &lt;code&gt;IMediator&lt;/code&gt; and &lt;code&gt;ServiceFactory&lt;/code&gt; services are registered as transient (not configurable).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Methods return &lt;code&gt;ValueTask&amp;lt;T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;, to allow for fewer allocations (for example if the handler completes synchronously, or using async method builder pooling/&lt;code&gt;PoolingAsyncValueTaskMethodBuilder&amp;lt;T&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;This library doesn&#39;t support generic requests/notifications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;7. Versioning&lt;/h2&gt; &#xA;&lt;p&gt;For versioning this library I try to follow &lt;a href=&#34;https://semver.org/&#34;&gt;semver 2.0&lt;/a&gt; as best as I can, meaning&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Major bump for breaking changes&lt;/li&gt; &#xA; &lt;li&gt;Minor bump for new backward compatible features&lt;/li&gt; &#xA; &lt;li&gt;Patch bump for bugfixes&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>duplicati/duplicati</title>
    <updated>2025-04-13T01:56:18Z</updated>
    <id>tag:github.com,2025-04-13:/duplicati/duplicati</id>
    <link href="https://github.com/duplicati/duplicati" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Store securely encrypted backups in the cloud!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Duplicati&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/duplicati/duplicati/master/README.zh-CN.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/duplicati/duplicati/master/README.ja-JP.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Store securely encrypted backups on cloud storage services!&lt;/p&gt; &#xA;&lt;!--&#xA;These are currently not functional ...&#xA;[![Issue Stats](http://www.issuestats.com/github/duplicati/duplicati/badge/pr)](http://www.issuestats.com/github/duplicati/duplicati/)&#xA;[![Issue Stats](http://www.issuestats.com/github/duplicati/duplicati/badge/issue)](http://www.issuestats.com/github/duplicati/duplicati/)&#xA;--&gt; &#xA;&lt;!--&#xA;Removed Gitter&#xA;[![Join the chat at https://gitter.im/duplicati/Lobby](https://badges.gitter.im/duplicati/Lobby.svg)](https://gitter.im/duplicati/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge)&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/duplicati/duplicati/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/duplicati/duplicati/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/duplicati/duplicati&#34;&gt;&lt;img src=&#34;https://travis-ci.org/duplicati/duplicati.svg?branch=master&#34; alt=&#34;Build Status on Travis-CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/duplicati/duplicati?branch=HEAD&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/duplicati/duplicati/badge.svg?branch=HEAD&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/duplicati/duplicati/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gurubase.io/g/duplicati&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gurubase-Ask%20Duplicati%20Guru-006BFF&#34; alt=&#34;Gurubase&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Duplicati is a free, open-source backup client that securely stores encrypted, incremental, and compressed backups on cloud storage services and remote file servers. It supports:&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp; &lt;em&gt;Amazon S3, &lt;a href=&#34;https://www.idrive.com/e2/duplicati&#34; title=&#34;Using Duplicati with IDrive e2&#34;&gt;IDrive e2&lt;/a&gt;, &lt;a href=&#34;https://www.backblaze.com/blog/duplicati-backups-cloud-storage/&#34; title=&#34;Duplicati with Backblaze B2 Cloud Storage&#34;&gt;Backblaze (B2)&lt;/a&gt;, Box, Dropbox, FTP, Google Cloud and Drive, MEGA, Microsoft Azure and OneDrive, Rackspace Cloud Files, OpenStack Storage (Swift), Sia, Storj DCS, SSH (SFTP), WebDAV, Tencent Cloud Object Storage (COS), Aliyun OSS, &lt;a href=&#34;https://docs.duplicati.com/backup-destinations/destination-overview&#34;&gt;and more!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Duplicati is licensed under the MIT license and is available for Windows, macOS, and Linux (.NET 4.7.1+ or Mono 5.10.0+ required).&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;p&gt;The latest version of Duplicati is a beta version for the Duplicati 2.0 release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://duplicati.com/download&#34;&gt;Click here to download the latest Duplicati 2.0 beta release.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The beta release will automatically notify you of updates and allows you to upgrade with a single click (or command in the terminal). For even more &lt;a href=&#34;https://github.com/duplicati/duplicati/releases&#34;&gt;bleeding edge access, check the latest releases&lt;/a&gt; or choose another update channel in the UI or on the commandline.&lt;/p&gt; &#xA;&lt;p&gt;All releases are GPG-signed with the public key &lt;a href=&#34;https://keys.openpgp.org/search?q=0xC20E90473DAC703D&#34;&gt;3DAC703D&lt;/a&gt;. The latest signature file and ASCII signature file are available on &lt;a href=&#34;https://github.com/duplicati/duplicati/releases&#34;&gt;the Duplicati download page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;Duplicati is supported by an &lt;a href=&#34;https://forum.duplicati.com&#34;&gt;active community and you can reach them via our forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a comprehensive &lt;a href=&#34;https://docs.duplicati.com&#34;&gt;Duplicati manual&lt;/a&gt;, which you can &lt;a href=&#34;https://github.com/duplicati/documentation&#34;&gt;contribute to&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Duplicati uses AES-256 encryption (or GNU Privacy Guard) to secure all data before uploading.&lt;/li&gt; &#xA; &lt;li&gt;Initial full backup followed by smaller, incremental updates to save bandwidth and storage.&lt;/li&gt; &#xA; &lt;li&gt;Built-in scheduler ensures backups stay up-to-date automatically.&lt;/li&gt; &#xA; &lt;li&gt;An integrated updater notifies you of new releases.&lt;/li&gt; &#xA; &lt;li&gt;Encrypted backups can be transferred to destinations like FTP, Cloudfiles, WebDAV, SSH (SFTP), Amazon S3, and more.&lt;/li&gt; &#xA; &lt;li&gt;Flexible backup options: back up folders, specific file types (e.g., documents or images), or use custom filters.&lt;/li&gt; &#xA; &lt;li&gt;Available as a user-friendly application or a command-line tool.&lt;/li&gt; &#xA; &lt;li&gt;Supports backing up open or locked files using Volume Snapshot Service (VSS) on Windows or Logical Volume Manager (LVM) on Linux.&lt;/li&gt; &#xA; &lt;li&gt;Advanced options for filters, deletion rules, transfer settings, bandwidth limits, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Why Use Duplicati?&lt;/h1&gt; &#xA;&lt;p&gt;Keep your data safe, store it remotely, and back it up regularly! Many backup solutions fail to meet these essential requirements, but Duplicati excels at all three:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keep your data safe:&lt;/strong&gt; Duplicati uses strong encryption to ensure your data remains private. With a secure password, your backup files are safer on a public web server than unencrypted files at home.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Store your backup remotely:&lt;/strong&gt; Protect your data from local disasters like fires by storing backups on remote servers. Duplicati supports incremental backups, making it efficient to use distant storage destinations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backup regularly:&lt;/strong&gt; Outdated backups are as good as no backups. Duplicati&#39;s built-in scheduler ensures your backups are always current. It also uses compression and incremental backups to save storage and bandwidth.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;We use GitHub for bug tracking. Please search existing issues before creating a new one: &lt;a href=&#34;https://github.com/duplicati/duplicati/issues&#34;&gt;https://github.com/duplicati/duplicati/issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Translations&lt;/h2&gt; &#xA;&lt;p&gt;Want to help translate Duplicati? Contributions are welcome on Transifex: &lt;a href=&#34;https://www.transifex.com/duplicati/duplicati/dashboard/&#34;&gt;https://www.transifex.com/duplicati/duplicati/dashboard/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Code&lt;/h2&gt; &#xA;&lt;p&gt;Instructions for setting up your development environment and building Duplicati are available in the &lt;a href=&#34;https://docs.duplicati.com/installation-details/developer&#34;&gt;documentation&lt;/a&gt;. Pull requests for bug fixes or improvements are highly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Looking for something to work on? Check out &lt;a href=&#34;https://github.com/duplicati/duplicati/issues?q=is%3Aissue+is%3Aopen+label%3A%22minor+change%22&#34;&gt;minor change issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/duplicati/duplicati/issues?q=is%3Aissue+is%3Aopen+label%3A%22UI%22&#34;&gt;UI-related issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to all our contributors: &lt;a href=&#34;https://github.com/duplicati/duplicati/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 &lt;a href=&#34;https://opencollective.com/duplicati#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;A special thanks to our sponsors for supporting this open-source project: &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/duplicati/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/duplicati/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>