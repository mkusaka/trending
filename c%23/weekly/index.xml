<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:51:11Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LorisYounger/VPet</title>
    <updated>2023-08-27T01:51:11Z</updated>
    <id>tag:github.com,2023-08-27:/LorisYounger/VPet</id>
    <link href="https://github.com/LorisYounger/VPet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;虚拟桌宠模拟器 一个开源的桌宠软件, 可以内置到任何WPF应用程序&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VPet-Simulator&lt;/h1&gt; &#xA;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README_en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;虚拟桌宠模拟器 一个开源的桌宠软件, 可以内置到任何WPF应用程序&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README.assets/%E4%B8%BB%E5%9B%BE.png&#34; alt=&#34;主图&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;获取虚拟桌宠模拟器 &lt;a href=&#34;https://store.steampowered.com/app/1920960/VPet&#34;&gt;OnSteam(免费)&lt;/a&gt; 或 通过&lt;a href=&#34;https://www.nuget.org/packages/VPet-Simulator.Core&#34;&gt;Nuget&lt;/a&gt;内置到你的WPF应用程序&lt;/p&gt; &#xA;&lt;h2&gt;虚拟桌宠模拟器 详细介绍&lt;/h2&gt; &#xA;&lt;p&gt;虚拟桌宠模拟器是一款桌宠软件,支持各种互动投喂等. 开源免费并且支持创意工坊.&lt;/p&gt; &#xA;&lt;p&gt;反正免费为啥不试试呢(&lt;/p&gt; &#xA;&lt;p&gt;该游戏为 &lt;a href=&#34;https://store.steampowered.com/app/1352140/_/&#34;&gt;虚拟主播模拟器&lt;/a&gt; 内置桌宠(教程)程序独立而来, 如果喜欢的话欢迎添加 &lt;a href=&#34;https://store.steampowered.com/app/1352140/_/&#34;&gt;虚拟主播模拟器&lt;/a&gt; 至愿望单&lt;/p&gt; &#xA;&lt;h3&gt;超多的互动和动画&lt;/h3&gt; &#xA;&lt;p&gt;多达 32(种) * 4(状态) * 3(类型) 种动画, &lt;em&gt;注:部分种类没有生病状态或循环等内容,实际动画数量会偏少&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;一些动画例子:&lt;/h4&gt; &#xA;&lt;h5&gt;摸头&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README.assets/ss0.gif&#34; alt=&#34;ss0&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;提起&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README.assets/ss4.gif&#34; alt=&#34;ss4&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README.assets/ss8.gif&#34; alt=&#34;ss4&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;爬墙&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README.assets/ss7.gif&#34; alt=&#34;ss7&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;免费&lt;/h3&gt; &#xA;&lt;p&gt;该游戏完全免费! 反正不要钱,试试不要紧(&lt;br&gt; 该游戏主要目的是宣传下 &lt;a href=&#34;https://store.steampowered.com/app/1352140/_/&#34;&gt;虚拟主播模拟器&lt;/a&gt;, 游戏中Q版人物为虚拟主播模拟器的主人公.&lt;/p&gt; &#xA;&lt;h3&gt;开源&lt;/h3&gt; &#xA;&lt;p&gt;该游戏在github上开源, 欢迎提出自己的想法,创意或者参与开发!&lt;br&gt; 您还可以修改代码来制作自己专属的桌宠!(虽然说大部分内容都支持创意工坊,不需要修改代码)&lt;br&gt; 项目地址: &lt;a href=&#34;https://github.com/LorisYounger/VPet&#34;&gt;https://github.com/LorisYounger/VPet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;支持创意工坊&lt;/h3&gt; &#xA;&lt;p&gt;该游戏支持创意工坊,您可以制作别的人物桌宠动画或者互动,并上传至创意工坊分享给更多人使用.&lt;/p&gt; &#xA;&lt;p&gt;创意工坊支持添加/修改以下内容&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;桌宠动画&lt;/li&gt; &#xA; &lt;li&gt;物品/食物/饮料等&lt;/li&gt; &#xA; &lt;li&gt;自定义桌宠工作&lt;/li&gt; &#xA; &lt;li&gt;说话文本&lt;/li&gt; &#xA; &lt;li&gt;主题&lt;/li&gt; &#xA; &lt;li&gt;代码插件 - 通过编写代码给桌宠添加内容 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;添加新的动画逻辑/显示方案 (eg: l2d/spine 等)&lt;/li&gt; &#xA;   &lt;li&gt;添加新功能 (闹钟/记事板等等)&lt;/li&gt; &#xA;   &lt;li&gt;几乎无所不能, 示例例子参见 &lt;a href=&#34;https://github.com/LorisYounger/VPet.Plugin.Demo&#34;&gt;VPet.Plugin.Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;反馈&amp;amp;建议&amp;amp;联系我们&lt;/h3&gt; &#xA;&lt;p&gt;如果有建议或者意见,可以在Steam商店评论/社区,Github Issue,虚拟主播模拟器贴吧,虚拟桌宠模拟器MODDer群(907101442)或者邮件联系我 &lt;a href=&#34;mailto:service@exlb.net&#34;&gt;mailto:service@exlb.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;软件结构&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;VPet-Simulator.Windows: 适用于桌面端的虚拟桌宠模拟器&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Function 功能性代码存放位置&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;CoreMOD Mod管理类&lt;/li&gt; &#xA;     &lt;li&gt;MWController 窗体控制器&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;*WinDesign 窗口和UI设计&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;winBetterBuy 更好买窗口&lt;/li&gt; &#xA;     &lt;li&gt;winCGPTSetting ChatGPT 设置&lt;/li&gt; &#xA;     &lt;li&gt;winSetting 软件设置/MOD 窗口&lt;/li&gt; &#xA;     &lt;li&gt;winConsole 开发控制台&lt;/li&gt; &#xA;     &lt;li&gt;winGameSetting 游戏设置&lt;/li&gt; &#xA;     &lt;li&gt;winReport 反馈中心&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;MainWindows 主窗体,存放和展示Core&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;PetHelper 快速切换小标&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VPet-Simulator.Tool: 方便制作MOD的工具(eg:图片帧生成)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VPet-Simulator.Core: 软件核心 方便内置到任何WPF应用程序(例如:VUP-Simulator)&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Handle 接口与控件 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;IController 窗体控制器 (调用相关功能和设置,例如移动到侧边等)&lt;/li&gt; &#xA;     &lt;li&gt;Function 通用功能&lt;/li&gt; &#xA;     &lt;li&gt;GameCore 游戏核心,包含各种数据等内容&lt;/li&gt; &#xA;     &lt;li&gt;GameSave 游戏存档&lt;/li&gt; &#xA;     &lt;li&gt;IFood 食物/物品接口&lt;/li&gt; &#xA;     &lt;li&gt;PetLoader 宠物图形加载器&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Graph 图形渲染 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;IGraph 动画基本接口&lt;/li&gt; &#xA;     &lt;li&gt;GraphCore 动画显示核心&lt;/li&gt; &#xA;     &lt;li&gt;GraphHelper 动画帮助类&lt;/li&gt; &#xA;     &lt;li&gt;GraphInfo 动画信息&lt;/li&gt; &#xA;     &lt;li&gt;FoodAnimation 食物动画 支持显示前中后3层夹心动画 不一定只用于食物,只是叫这个名字&lt;/li&gt; &#xA;     &lt;li&gt;PNGAnimation 桌宠动态动画组件&lt;/li&gt; &#xA;     &lt;li&gt;Picture 桌宠静态动画组件&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Display 显示 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;basestyle/Theme 基本风格主题&lt;/li&gt; &#xA;     &lt;li&gt;Main.xaml 核心显示部件 &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;MainDisplay 核心显示方法&lt;/li&gt; &#xA;       &lt;li&gt;MainLogic 核心显示逻辑&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;ToolBar 点击人物时候的工具栏&lt;/li&gt; &#xA;     &lt;li&gt;MessageBar 人物说话时候的说话栏&lt;/li&gt; &#xA;     &lt;li&gt;WorkTimer 工作时钟&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参与开发&lt;/h2&gt; &#xA;&lt;p&gt;欢迎参与虚拟桌宠模拟器的开发! 为保证代码可维护度和游戏性,如果想要开发新的功能,请先&lt;a href=&#34;mailto:zoujin.dev@exlb.org&#34;&gt;邮件联系&lt;/a&gt;或发&lt;a href=&#34;https://github.com/LorisYounger/VPet/issues&#34;&gt;Issues&lt;/a&gt;我想要添加的功能/玩法, 以确保该功能/玩法适用于虚拟桌宠模拟器. 以免未来提交时因不合适被拒(而造成代码浪费)&lt;br&gt; 如果是修复错误或者BUG,无需联系我,修好后直接PR即可&lt;/p&gt; &#xA;&lt;p&gt;当想法通过后,您可以通过 &lt;a href=&#34;https://github.com/LorisYounger/VPet/fork&#34;&gt;fork&lt;/a&gt; 功能拷贝代码至自己的github以方便编写自己的代码, 编写完毕后通过&lt;a href=&#34;https://github.com/LorisYounger/VPet/compare&#34;&gt;pull requests&lt;/a&gt; 提交&lt;br&gt; 如果您想法没有被通过,也可以另起炉灶,写个不同版本功能的桌宠软件. 但需遵守 &lt;a href=&#34;https://github.com/LorisYounger/VPet/raw/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/LorisYounger/VPet#%E5%8A%A8%E7%94%BB%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E4%B8%8E%E6%8E%88%E6%9D%83&#34;&gt;动画版权声明与授权&lt;/a&gt; 注: 一般来讲, 添加新功能都可以通过编写代码插件MOD实现, 详情请参见 &lt;a href=&#34;https://github.com/LorisYounger/VPet.Plugin.Demo&#34;&gt;VPet.Plugin.Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;我可能会对您的提交的代码进行修改,删减等以确保该功能/玩法适用于虚拟桌宠模拟器.&lt;/p&gt; &#xA;&lt;p&gt;感谢以下参与的开发人员(按贡献程度排序)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Wreathlit&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;windofxy&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;bwnotfound&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;aalichao&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dobby233Liu&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;eltociear&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;yupix&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;和提供社区翻译和更多内容的创意工坊人员&lt;/p&gt; &#xA;&lt;h2&gt;动画版权声明与授权&lt;/h2&gt; &#xA;&lt;p&gt;在github中 &lt;a href=&#34;https://github.com/LorisYounger/VPet/tree/main/VPet-Simulator.Windows/mod/0000_core/pet/vup&#34;&gt;桌宠动画文件&lt;/a&gt; 动画版权归 &lt;a href=&#34;https://www.exlb.net/VUP-Simulator&#34;&gt;虚拟主播模拟器制作组&lt;/a&gt;所有, 当使用本类库时,您可能需要自行准备动画文件,或遵循以下协议&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;**注 ** 本动画声明仅限于桌宠自带的动画, 若有画师/开发者画自己的动画适配给桌宠,并不遵循用本声明&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;非商用用途授权&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;需要向用户告知动画文件来源并提供访问 &lt;a href=&#34;https://github.com/LorisYounger/VPet&#34;&gt;该页面&lt;/a&gt; 的链接&lt;/li&gt; &#xA; &lt;li&gt;当您完成以上要求后,您可以免费使用动画文件&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;商用用途授权&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;第一次使用时需弹窗并醒目的向用户告知动画文件来源并提供访问 &lt;a href=&#34;https://github.com/LorisYounger/VPet&#34;&gt;该页面&lt;/a&gt; 的链接&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在相应页面(用户可以快捷访问)向用户告知动画文件来源并提供访问 &lt;a href=&#34;https://github.com/LorisYounger/VPet&#34;&gt;该页面&lt;/a&gt; 的链接&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;禁止通过出售动画文件进行盈利&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;请&lt;a href=&#34;mailto:zoujin.dev@exlb.org&#34;&gt;邮件联系&lt;/a&gt;我&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;当您完成以上要求后,您可以免费使用动画文件&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;分发动画文件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;需要告知以上所有授权信息&lt;/li&gt; &#xA; &lt;li&gt;需要提供访问 &lt;a href=&#34;https://github.com/LorisYounger/VPet&#34;&gt;该页面&lt;/a&gt; 的链接&lt;/li&gt; &#xA; &lt;li&gt;分发动画文件时禁止任何付费/收费行为&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;桌面端部署方法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;下载本项目, 通过VisualStudio打开 &lt;code&gt;VPet.sln&lt;/code&gt; 文件&lt;/li&gt; &#xA; &lt;li&gt;在生成栏中, 选择 位数为 &lt;code&gt;x64&lt;/code&gt; 和生成项目为 &lt;code&gt;Vpet-Simulator.Windows&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LorisYounger/VPet/main/README.assets/image-20230208004330895.png&#34; alt=&#34;image-20230208004330895&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;点击启动, 如果一切正常则会报错 &lt;code&gt;缺少模组Core,无法启动桌宠&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;以管理员身份运行 &lt;code&gt;mklink.bat&lt;/code&gt;, 这会让mod文件链接到生成位置&lt;/li&gt; &#xA; &lt;li&gt;再次点击启动即可正常运行&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>boy1dr/SpleeterGui</title>
    <updated>2023-08-27T01:51:11Z</updated>
    <id>tag:github.com,2023-08-27:/boy1dr/SpleeterGui</id>
    <link href="https://github.com/boy1dr/SpleeterGui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Windows desktop front end for Spleeter - AI source separation&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;SpleeterGUI - Music source separation desktop app&lt;/h2&gt; &#xA;&lt;p&gt;Windows Desktop Front end for Spleeter - AI source separation&lt;/p&gt; &#xA;&lt;p&gt;Latest installer can be downloaded from here &lt;a href=&#34;https://makenweb.com/#spleetergui&#34;&gt;https://makenweb.com/#spleetergui&lt;/a&gt;&lt;br&gt; No need to install python or spleeter, this app contains a portable version of python pre-loaded with spleeter.&lt;/p&gt; &#xA;&lt;p&gt;The aim for this project is to make it easy for Windows users to download and run Spleeter without needing to use the command line tools to do so.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/boy1dr/SpleeterGui/master/Spleeter_GUI.png&#34; alt=&#34;SpleeterGUI_app&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is a simple C# desktop front end for Spleeter.&lt;br&gt; Please consider donating and help pay for hosting and development paypal.me/makenitso&lt;/p&gt; &#xA;&lt;h2&gt;Version history&lt;/h2&gt; &#xA;&lt;p&gt;27/07/2020 - MS Defender is falsely identifying V2.7 as a trojan. The exe has been submitted to Microsoft and given the all clear.&lt;br&gt; Defender definition version 1.319.2309.0 finds no threat More details can be found here &lt;a href=&#34;https://github.com/boy1dr/SpleeterGui/issues/36&#34;&gt;https://github.com/boy1dr/SpleeterGui/issues/36&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Date&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5/04/2022&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.9.2&lt;/td&gt; &#xA;   &lt;td&gt;Upgraded spleeter to 2.3.0. Updated python files, the spleeter core update feature is working again.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;30/01/2021&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.9.1&lt;/td&gt; &#xA;   &lt;td&gt;Upgraded spleeter to 2.1.2. Updated command syntax for latest Spleeter version.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9/11/2020&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.9&lt;/td&gt; &#xA;   &lt;td&gt;Upgraded spleeter to 2.0.1 and python.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;31/07/2020&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.8&lt;/td&gt; &#xA;   &lt;td&gt;Upgraded the project to 64bit.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19/07/2020&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.7&lt;/td&gt; &#xA;   &lt;td&gt;Updated help, set paths for python/ffmpeg (use your own python)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4/07/2020&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6&lt;/td&gt; &#xA;   &lt;td&gt;Recombine audio and multi-lingual update.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10/05/2020&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.5&lt;/td&gt; &#xA;   &lt;td&gt;UI update, Additional help menu items for version check and spleeter core upgrade, Display installed spleeter version on startup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4/05/2020&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.4&lt;/td&gt; &#xA;   &lt;td&gt;Bug fix: &#34;full bandwidth&#34; mode checked but not enabled by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;27/12/2019&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.3&lt;/td&gt; &#xA;   &lt;td&gt;Accessibility update (process button, tab order, access labels and descriptions, ding on complete etc.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;24/12/2019&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.2&lt;/td&gt; &#xA;   &lt;td&gt;New windows MSI installer. Drag and drop processing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21/12/2019&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;Interface update, added Batch processing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17/12/2019&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.1&lt;/td&gt; &#xA;   &lt;td&gt;Added High quality/expert mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Older versions&lt;/h2&gt; &#xA;&lt;p&gt;Version 2.8 &lt;a href=&#34;https://makenweb.com/downloads/SpleeterGUI_V2.8.msi&#34;&gt;https://makenweb.com/downloads/SpleeterGUI_V2.8.msi&lt;/a&gt;&lt;br&gt; Version 2.7 &lt;a href=&#34;https://makenweb.com/downloads/SpleeterGUI_V2.7.msi&#34;&gt;https://makenweb.com/downloads/SpleeterGUI_V2.7.msi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=bdNzVPLzOLE&#34;&gt;https://www.youtube.com/watch?v=bdNzVPLzOLE&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=nxJfIsus0Ig&#34;&gt;https://www.youtube.com/watch?v=nxJfIsus0Ig&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=PHGAmZhuI-c&#34;&gt;https://www.youtube.com/watch?v=PHGAmZhuI-c&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=3X5nfc2d1Rw&#34;&gt;https://www.youtube.com/watch?v=3X5nfc2d1Rw&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=9KkWJHC2bz0&#34;&gt;https://www.youtube.com/watch?v=9KkWJHC2bz0&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Mygm1sFlQXc&#34;&gt;https://www.youtube.com/watch?v=Mygm1sFlQXc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The project contains the C# source code for the Graphical User Interface. It also contains Python3.7 and the Spleeter project.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to inspect the source code and build for yourself. you can also install your own python/tensorflow/ffmpeg/spleeter.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/semantic-memory</title>
    <updated>2023-08-27T01:51:11Z</updated>
    <id>tag:github.com,2023-08-27:/microsoft/semantic-memory</id>
    <link href="https://github.com/microsoft/semantic-memory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Index and query any data using LLM and natural language, tracking sources and showing citations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Semantic Memory&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Semantic Memory&lt;/strong&gt; is an open-source library and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/dotnet/Service/README.md&#34;&gt;service&lt;/a&gt; specialized in the efficient indexing of datasets through custom continuous data pipelines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/semantic-memory/assets/371009/31894afa-d19e-4e9b-8d0f-cb889bf5c77f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Utilizing advanced embeddings and LLMs, the system enables Natural Language querying for obtaining answers from the indexed data, complete with citations and links to the original sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/semantic-memory/assets/371009/c5f0f6c3-814f-45bf-b055-063f23ed80ea&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Designed for seamless integration with &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;, Semantic Memory enhances data-driven features in applications built using SK.&lt;/p&gt; &#xA;&lt;h3&gt;Supported backends&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;↗️ Vector storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Cognitive Search&lt;/li&gt; &#xA;   &lt;li&gt;Qdrant&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;📀 Content storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Blobs&lt;/li&gt; &#xA;   &lt;li&gt;Local file system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;⏳ Asynchronous ingestion queues &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Queues&lt;/li&gt; &#xA;   &lt;li&gt;RabbitMQ&lt;/li&gt; &#xA;   &lt;li&gt;Local file based queue&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ &lt;strong&gt;NOTE&lt;/strong&gt;: the documentation below is work in progress, will evolve quickly as is not fully functional yet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Semantic Memory in serverless mode&lt;/h1&gt; &#xA;&lt;p&gt;Semantic Memory works and scales at best when running as a service, allowing to ingest thousands of documents and information without blocking your app.&lt;/p&gt; &#xA;&lt;p&gt;However, you can use Semantic Memory also serverless, embedding the &lt;code&gt;MemoryServerlessClient&lt;/code&gt; in your app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Importing documents into your Semantic Memory can be as simple as this:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var memory = new MemoryClientBuilder()&#xA;    .WithOpenAIDefaults(Env.Var(&#34;OPENAI_API_KEY&#34;))&#xA;    .WithAzureCognitiveSearch(Env.Var(&#34;ACS_ENDPOINT&#34;), Env.Var(&#34;ACS_API_KEY&#34;))&#xA;    .Build();&#xA;&#xA;// Import a file&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;, tags: new() { { &#34;user&#34;, &#34;Blake&#34; } });&#xA;&#xA;// Import multiple files and apply multiple tags&#xA;await memory.ImportDocumentAsync(new Document(&#34;file001&#34;)&#xA;    .AddFile(&#34;business-plan.docx&#34;)&#xA;    .AddFile(&#34;project-timeline.pdf&#34;)&#xA;    .AddTag(&#34;user&#34;, &#34;Blake&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;    .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Asking questions:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var answer1 = await memory.AskAsync(&#34;How many people attended the meeting?&#34;);&#xA;&#xA;var answer2 = await memory.AskAsync(&#34;what&#39;s the project timeline?&#34;, filter: new MemoryFilter().ByTag(&#34;user&#34;, &#34;Blake&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The code leverages the default documents ingestion pipeline:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Extract text: recognize the file format and extract the information&lt;/li&gt; &#xA; &lt;li&gt;Partition the text in small chunks, to optimize search&lt;/li&gt; &#xA; &lt;li&gt;Extract embedding using an LLM embedding generator&lt;/li&gt; &#xA; &lt;li&gt;Save embedding into a vector index such as &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/search/vector-search-overview&#34;&gt;Azure Cognitive Search&lt;/a&gt;, &lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt; or other DBs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Documents are organized by users, safeguarding their private information. Furthermore, memories can be categorized and structured using &lt;strong&gt;tags&lt;/strong&gt;, enabling efficient search and retrieval through faceted navigation.&lt;/p&gt; &#xA;&lt;h1&gt;Data lineage, citations&lt;/h1&gt; &#xA;&lt;p&gt;All memories and answers are fully correlated to the data provided. When producing an answer, Semantic Memory includes all the information needed to verify its accuracy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await memory.ImportFileAsync(&#34;NASA-news.pdf&#34;);&#xA;&#xA;var answer = await memory.AskAsync(&#34;Any news from NASA about Orion?&#34;);&#xA;&#xA;Console.WriteLine(answer.Result + &#34;/n&#34;);&#xA;&#xA;foreach (var x in answer.RelevantSources)&#xA;{&#xA;    Console.WriteLine($&#34;  * {x.SourceName} -- {x.Partitions.First().LastUpdate:D}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on Wednesday, August 2, at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;NASA-news.pdf -- Tuesday, August 1, 2023&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using Semantic Memory Service&lt;/h2&gt; &#xA;&lt;p&gt;Depending on your scenarios, you might want to run all the code &lt;strong&gt;locally inside your process, or remotely through an asynchronous service.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re importing small files, and need only C# or only Python, and can block the process during the import, local-in-process execution can be fine, using the &lt;strong&gt;MemoryServerlessClient&lt;/strong&gt; seen above.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are in one of these scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;d just like a web service to import data and send queries to answer&lt;/li&gt; &#xA; &lt;li&gt;My app is written in &lt;strong&gt;TypeScript, Java, Rust, or some other language&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want to define &lt;strong&gt;custom pipelines mixing multiple languages&lt;/strong&gt; like Python, TypeScript, etc&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m importing &lt;strong&gt;big documents that can require minutes to process&lt;/strong&gt;, and I don&#39;t want to block the user interface&lt;/li&gt; &#xA; &lt;li&gt;I need memory import to &lt;strong&gt;run independently, supporting failures and retry logic&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;then you can deploy Semantic Memory as a service, plugging in the default handlers or your custom Python/TypeScript/Java/etc. handlers, and leveraging the asynchronous non-blocking memory encoding process, sending documents and asking questions using the &lt;strong&gt;MemoryWebClient&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/dotnet/Service/README.md&#34;&gt;Here&lt;/a&gt; you can find a complete set of instruction about &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/dotnet/Service/README.md&#34;&gt;how to run the Semantic Memory service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to give the service a quick test, use the following command to &lt;strong&gt;start the Semantic Memory Service&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On WSL / Linux / MacOS:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet/Service&#xA;./setup.sh&#xA;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On Windows:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet\Service&#xA;setup.cmd&#xA;run.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;To import files using Semantic Memory &lt;strong&gt;web service&lt;/strong&gt;, use &lt;code&gt;MemoryWebClient&lt;/code&gt;:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;#reference dotnet/ClientLib/ClientLib.csproj&#xA;&#xA;var memory = new MemoryWebClient(&#34;http://127.0.0.1:9001&#34;); // &amp;lt;== URL where the web service is running&#xA;&#xA;// Import a file (default user)&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;);&#xA;&#xA;// Import a file specifying a Document ID, User and Tags&#xA;await memory.ImportDocumentAsync(&#34;business-plan.docx&#34;,&#xA;    new DocumentDetails(&#34;user@some.email&#34;, &#34;file001&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;        .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Getting answers via the web service&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl http://127.0.0.1:9001/ask -d&#39;{&#34;query&#34;:&#34;Any news from NASA about Orion?&#34;}&#39; -H &#39;Content-Type: application/json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Query&#34;: &#34;Any news from NASA about Orion?&#34;,&#xA;  &#34;Text&#34;: &#34;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on August 2nd at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&#34;,&#xA;  &#34;RelevantSources&#34;: [&#xA;    {&#xA;      &#34;Link&#34;: &#34;...&#34;,&#xA;      &#34;SourceContentType&#34;: &#34;application/pdf&#34;,&#xA;      &#34;SourceName&#34;: &#34;file5-NASA-news.pdf&#34;,&#xA;      &#34;Partitions&#34;: [&#xA;        {&#xA;          &#34;Text&#34;: &#34;Skip to main content\nJul 28, 2023\nMEDIA ADVISORY M23-095\nNASA Invites Media to See Recovery Craft for\nArtemis Moon Mission\n(/sites/default/ﬁles/thumbnails/image/ksc-20230725-ph-fmx01_0003orig.jpg)\nAboard the USS John P. Murtha, NASA and Department of Defense personnel practice recovery operations for Artemis II in July. A\ncrew module test article is used to help verify the recovery team will be ready to recovery the Artemis II crew and the Orion spacecraft.\nCredits: NASA/Frank Michaux\nMedia are invited to see the new test version of NASA’s Orion spacecraft and the hardware teams will use\nto recover the capsule and astronauts upon their return from space during the Artemis II\n(http://www.nasa.gov/artemis-ii) mission. The event will take place at 11 a.m. PDT on Wednesday, Aug. 2,\nat Naval Base San Diego.\nPersonnel involved in recovery operations from NASA, the U.S. Navy, and the U.S. Air Force will be\navailable to speak with media.\nU.S. media interested in attending must RSVP by 4&amp;nbsp;p.m., Monday, July 31, to the Naval Base San Diego\nPublic Aﬀairs (mailto:nbsd.pao@us.navy.mil) or 619-556-7359.\nOrion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n1 of 3 7/28/23, 4:51 PMTeams are currently conducting the ﬁrst in a series of tests in the Paciﬁc Ocean to demonstrate and\nevaluate the processes, procedures, and hardware for recovery operations (https://www.nasa.gov\n/exploration/systems/ground/index.html) for crewed Artemis missions. The tests will help prepare the\nteam for Artemis II, NASA’s ﬁrst crewed mission under Artemis that will send four astronauts in Orion\naround the Moon to checkout systems ahead of future lunar missions.\nThe Artemis II crew – NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and CSA\n(Canadian Space Agency) astronaut Jeremy Hansen – will participate in recovery testing at sea next year.\nFor more information about Artemis, visit:\nhttps://www.nasa.gov/artemis (https://www.nasa.gov/artemis)\n-end-\nRachel Kraft\nHeadquarters, Washington\n202-358-1100\nrachel.h.kraft@nasa.gov (mailto:rachel.h.kraft@nasa.gov)\nMadison Tuttle\nKennedy Space Center, Florida\n321-298-5868\nmadison.e.tuttle@nasa.gov (mailto:madison.e.tuttle@nasa.gov)\nLast Updated: Jul 28, 2023\nEditor: Claire O’Shea\nTags:&amp;nbsp; Artemis (/artemisprogram),Ground Systems (http://www.nasa.gov/exploration/systems/ground\n/index.html),Kennedy Space Center (/centers/kennedy/home/index.html),Moon to Mars (/topics/moon-to-\nmars/),Orion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n2 of 3 7/28/23, 4:51 PM&#34;,&#xA;          &#34;Relevance&#34;: 0.8430657,&#xA;          &#34;SizeInTokens&#34;: 863,&#xA;          &#34;LastUpdate&#34;: &#34;2023-08-01T08:15:02-07:00&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can find a &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/002-dotnet-WebClient/README.md&#34;&gt;full example here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom memory ingestion pipelines&lt;/h2&gt; &#xA;&lt;p&gt;On the other hand, if you need a custom data pipeline, you can also customize the steps, which will be handled by your custom business logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Memory setup, e.g. how to calculate and where to store embeddings&#xA;var memoryBuilder = new MemoryClientBuilder()&#xA;    .WithOpenAIDefaults(Env.Var(&#34;OPENAI_API_KEY&#34;))&#xA;    .WithAzureCognitiveSearch(Env.Var(&#34;ACS_ENDPOINT&#34;), Env.Var(&#34;ACS_API_KEY&#34;));&#xA;memoryBuilder.Build();&#xA;var orchestrator = memoryBuilder.GetOrchestrator();&#xA;&#xA;// Define custom .NET handlers&#xA;var step1 = new MyHandler1(&#34;step1&#34;, orchestrator);&#xA;var step2 = new MyHandler2(&#34;step2&#34;, orchestrator);&#xA;var step3 = new MyHandler3(&#34;step3&#34;, orchestrator);&#xA;await orchestrator.AddHandlerAsync(step1);&#xA;await orchestrator.AddHandlerAsync(step2);&#xA;await orchestrator.AddHandlerAsync(step3);&#xA;&#xA;// Instantiate a custom pipeline&#xA;var pipeline = orchestrator&#xA;    .PrepareNewFileUploadPipeline(&#34;user-id-1&#34;, &#34;mytest&#34;, new[] { &#34;memory-collection&#34; })&#xA;    .AddUploadFile(&#34;file1&#34;, &#34;file1.docx&#34;, &#34;file1.docx&#34;)&#xA;    .AddUploadFile(&#34;file2&#34;, &#34;file2.pdf&#34;, &#34;file2.pdf&#34;)&#xA;    .Then(&#34;step1&#34;)&#xA;    .Then(&#34;step2&#34;)&#xA;    .Then(&#34;step3&#34;)&#xA;    .Build();&#xA;&#xA;// Execute in process, process all files with all the handlers&#xA;await orchestrator.RunPipelineAsync(pipeline);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Web API specs&lt;/h1&gt; &#xA;&lt;p&gt;The API schema is available at &lt;a href=&#34;http://127.0.0.1:9001/swagger/index.html&#34;&gt;http://127.0.0.1:9001/swagger/index.html&lt;/a&gt; when running the service locally with OpenAPI enabled.&lt;/p&gt; &#xA;&lt;h1&gt;Examples and Tools&lt;/h1&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/000-notebooks&#34;&gt;Collection of Jupyter notebooks with various tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/001-dotnet-Serverless&#34;&gt;Importing files and asking question without running the service (serverless mode)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/002-dotnet-WebClient&#34;&gt;Using the Semantic Memory web service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/003-curl-calling-webservice&#34;&gt;How to upload files from command line with curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/004-dotnet-ServerlessCustomPipeline&#34;&gt;Processing files with custom steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/005-dotnet-InProcessMemoryWithCustomHandler&#34;&gt;Using a custom pipeline handler with serverless memory class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/examples/006-dotnet-CustomHandlerAsAService&#34;&gt;Writing a custom async pipeline handler&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/upload-file.sh&#34;&gt;Curl script to upload files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/ask.sh&#34;&gt;Curl script to ask questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/search.sh&#34;&gt;Curl script to search documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/run-qdrant.sh&#34;&gt;Script to start Qdrant for development tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/semantic-memory/main/tools/run-rabbitmq.sh&#34;&gt;Script to start RabbitMQ for development tasks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>