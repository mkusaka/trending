<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:47:49Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mattpannella/pocket-updater-utility</title>
    <updated>2023-10-22T01:47:49Z</updated>
    <id>tag:github.com,2023-10-22:/mattpannella/pocket-updater-utility</id>
    <link href="https://github.com/mattpannella/pocket-updater-utility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Analogue Pocket Updater Utility&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Oh Hi&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mattpannella/pocket-updater-utility/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/mattpannella/pocket-updater-utility?label=Current%20Release&#34; alt=&#34;Current Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/mattpannella/pocket-updater-utility/latest/total?label=Downloads&#34; alt=&#34;Downloads&#34;&gt; &lt;a href=&#34;https://www.paypal.com/donate/?business=YEERX89E75HQ8&amp;amp;no_recurring=1&amp;amp;currency_code=USD&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A free utility for updating the openFPGA cores, and firmware, on your Analogue Pocket.&lt;/p&gt; &#xA;&lt;p&gt;The update process will check for pocket firmware updates, openfpga core updates, and install any required BIOS files and arcade ROMS. You&#39;re on your own when it comes to console ROMs.&lt;/p&gt; &#xA;&lt;p&gt;A complete list of available cores can also be found here: &lt;a href=&#34;https://openfpga-cores-inventory.github.io/analogue-pocket/&#34;&gt;https://openfpga-cores-inventory.github.io/analogue-pocket/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I can&#39;t (and don&#39;t want to) support old versions, so please make sure you download the latest release before submitting any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to use this utility, do not clone the source repository. Just&lt;/p&gt; &#xA;&lt;p&gt;download the &lt;a href=&#34;https://github.com/mattpannella/pocket-updater-utility/releases/latest/&#34;&gt;latest release&lt;/a&gt;. Unzip it, put the executable file for your platform (windows, mac os, or linux) in the root of your sd card, and run the program.&lt;/p&gt; &#xA;&lt;p&gt;At the main menu run &lt;code&gt;Settings&lt;/code&gt; to have it walk through the available settings for you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#advanced-usage&#34;&gt;Advanced&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#settings&#34;&gt;Settings&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#download-image-packs&#34;&gt;Image Packs&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#core-selector&#34;&gt;Core Selector&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#generating-instance-json-files&#34;&gt;PC Engine CD&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#jotego-beta-cores&#34;&gt;Jotego Cores&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mattpannella/pocket-updater-utility/main/#how-to-build-game-and-watch-roms-that-are-compatible-with-the-pocket&#34;&gt;Game n Watch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Usage&lt;/h3&gt; &#xA;&lt;p&gt;CLI Parameters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;  menu                 (Default Verb) Interactive Main Menu&#xA;    -p, --path    &#x9;     Absolute path to install location&#xA;&#xA;  fund                 List sponsor links. Lists all if no core is provided&#xA;    -c, --core               The core to check funding links for&#xA;    &#xA;  update               Run update all. (Can be configured via the settings menu)&#xA;    -p, --path               Absolute path to install location&#xA;    -c, --core               The core you want to update. Runs for all otherwise&#xA;    -f, --platformsfolder    Preserve the Platforms folder, so customizations aren&#39;t overwritten by updates.&#xA;&#xA;  assets               Run the asset downloader&#xA;    -p, --path               Absolute path to install location&#xA;    -c, --core               The core you want to download assets for.&#xA;&#xA;  firmware             Check for Pocket firmware updates&#xA;    -p, --path               Absolute path to install location&#xA;&#xA;  images               Download image packs&#xA;    -p, --path               Absolute path to install location&#xA;    -o, --owner              Image pack repo username&#xA;    -i, --imagepack          Github repo name for image pack&#xA;    -v, --variant            The optional variant&#xA;&#xA;  instancegenerator    Run the instance JSON generator&#xA;    -p, --path               Absolute path to install location&#xA;&#xA;  help                 Display more information on a specific command.&#xA;&#xA;  version              Display version information.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/path/to/pocket_updater -p /path/to/sdcard/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/path/to/pocket_updater update -c boogermann.bankpanic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/path/to/pocket_updater assets -c jotego.jtcontra&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/path/to/pocket_updater images -i pocket-platform-images -o dyreschlock -v home&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;All settings can be modified in your &lt;code&gt;pocket_updater_settings.json&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Disable Firmware Downloading&lt;/td&gt; &#xA;   &lt;td&gt;config.download_firmware&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;false&lt;/code&gt; if you don&#39;t want Update All to check for firmware updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Disable Asset Downloading&lt;/td&gt; &#xA;   &lt;td&gt;config.download_assets&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;false&lt;/code&gt; if you&#39;d like to supply your own BIOS and arcade rom files, and don&#39;t want Update All to handle this.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Preserve Platforms Folder Customizations&lt;/td&gt; &#xA;   &lt;td&gt;config.preserve_platforms_folder&lt;/td&gt; &#xA;   &lt;td&gt;If you have any customizations to the Platforms folder, you can use this option to preserve them during the update process. Set to &lt;code&gt;true&lt;/code&gt; in your settings file, or use &lt;code&gt;-f&lt;/code&gt; as a command line parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github Personal Access Token&lt;/td&gt; &#xA;   &lt;td&gt;config.github_token&lt;/td&gt; &#xA;   &lt;td&gt;If you&#39;re running up against the rate limit on the github api, you can provide your personal access token to the updater via the settings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Disable Instance JSON Builder&lt;/td&gt; &#xA;   &lt;td&gt;config.build_instance_jsons&lt;/td&gt; &#xA;   &lt;td&gt;Set this to &lt;code&gt;false&lt;/code&gt; if you don&#39;t want Update All to build instance JSON files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Delete Untracked Cores&lt;/td&gt; &#xA;   &lt;td&gt;config.delete_skipped_cores&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; by default. Set to &lt;code&gt;false&lt;/code&gt; if you don&#39;t want the updater to remove cores you don&#39;t select to track&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CRC Check Assets&lt;/td&gt; &#xA;   &lt;td&gt;config.crc_check&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; by default. Set to &lt;code&gt;false&lt;/code&gt; if you don&#39;t want the updater check the CRC hash on your asset files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Skip Alternative Assets&lt;/td&gt; &#xA;   &lt;td&gt;config.skip_alternative_assets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; by default. If a core developer puts any of their rom asset files in a directory named &lt;code&gt;_alternatives&lt;/code&gt; they won&#39;t be downloaded automatically (unless you set this to &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Use Custom Archive&lt;/td&gt; &#xA;   &lt;td&gt;config.use_custom_archive&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt; by default. Instead of checking the archive site defined in your settings to look for required assets, use a custom site that you can define. (by default this will be a site hosted by RetroDriven)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Custom Archive URL&lt;/td&gt; &#xA;   &lt;td&gt;config.custom_archive.url&lt;/td&gt; &#xA;   &lt;td&gt;The full url to your custom site&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Custom Archive Index&lt;/td&gt; &#xA;   &lt;td&gt;config.custom_archive.index&lt;/td&gt; &#xA;   &lt;td&gt;Relative path to the index of your custom site&#39;s files. This is not required, but it&#39;s needed for CRC checking. If you have CRC checking enabled, the setting will be ignored unless this provides the necessary format. It must match the output of archive.org&#39;s json endpoint. &lt;a href=&#34;https://archive.org/developers/md-read.html&#34;&gt;https://archive.org/developers/md-read.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Per Core Settings&lt;/td&gt; &#xA;   &lt;td&gt;coreSettings.{corename}.download_assets and coreSettings.{corename}.platform_rename&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;false&lt;/code&gt; for any core you don&#39;t want assets downloaded for, or automatic platform renaming (currently this only applies to jotego cores)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Download Image Packs&lt;/h3&gt; &#xA;&lt;p&gt;This will present you with a list of available image packs and automatically download and extract it to the Platforms/_images directory for you&lt;/p&gt; &#xA;&lt;h3&gt;Core Selector&lt;/h3&gt; &#xA;&lt;p&gt;On your first run it will prompt you to select the cores you want tracked. After that initial run, you can run it again any time via the main menu.&lt;/p&gt; &#xA;&lt;h3&gt;Generating Instance JSON Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Only supported by PC Engine CD, currently&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put your games in /Assets/{platform}/common&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each game needs to be in its own directory (and be sure to name the directory the full title of the game)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Example: /Assets/pcecd/common/Rondo of Blood&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;/Assets/pcecd/common/Bonk&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;etc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All games (for PC Engine CD) must be in cue/bin format. The generated json file will be saved using the same filename as the cue file, so be sure to also name that with the full title of the game&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When you run the &lt;code&gt;Generate Instance JSON Files&lt;/code&gt; or &lt;code&gt;Update All&lt;/code&gt; menu items, it will search through every directory in common and create a json file that can be launched by the core&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can disable this process in Update All by setting &lt;code&gt;build_instance_jsons&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your settings file, if you don&#39;t want it to run every time you update.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Jotego Beta Cores&lt;/h3&gt; &#xA;&lt;p&gt;Now that Jotego is releasing his beta cores publicly (and requiring a beta key to play them), you can just drop the &lt;code&gt;jtbeta.zip&lt;/code&gt; file from patreon onto the root of your sd card and run Update All, and it will automatically copy the beta key to the correct folders for the cores that need it. It also will let you install the yhe cores directly from the updater, now. Make sure you don&#39;t rename the file, it&#39;s going to look for exactly &lt;code&gt;jtbeta.zip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to build game and watch roms that are compatible with the pocket&lt;/h3&gt; &#xA;&lt;p&gt;Create 2 new folders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/Assets/gameandwatch/agg23.GameAndWatch/artwork&lt;/code&gt; and &lt;code&gt;/Assets/gameandwatch/agg23.GameAndWatch/roms&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Place your &lt;code&gt;[artwork].zip&lt;/code&gt; files into the artwork folder and your &lt;code&gt;[rom]&lt;/code&gt;.zip files into the roms folder&lt;/p&gt; &#xA;&lt;p&gt;Should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;/Assets/gameandwatch/agg23.GameAndWatch/artwork/gnw_dkong.zip&#xA;&#xA;/Assets/gameandwatch/agg23.GameAndWatch/roms/gnw_dkong.zip&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now just run the menu option in the updater and it will build your games&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Slow asset downloads? Try toggling &lt;code&gt;use_custom_archive&lt;/code&gt; to true, in your settings.&lt;/p&gt; &#xA;&lt;p&gt;If you run the update process and get a message like &lt;code&gt;Error in framework RS: bridge not responding&lt;/code&gt; when running a core, try to run the updater in a local folder on your pc, and then copy the files over to the sd card afterwards. I&#39;m not entirely sure what the issue is, but I&#39;ve seen it reported a bunch of times now and running the updater locally seems to help.&lt;/p&gt; &#xA;&lt;h2&gt;Submitting new cores&lt;/h2&gt; &#xA;&lt;p&gt;You can submit new cores here &lt;a href=&#34;https://github.com/openfpga-cores-inventory/analogue-pocket&#34;&gt;https://github.com/openfpga-cores-inventory/analogue-pocket&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/neil-morrison44&#34;&gt;neil-morrison44&lt;/a&gt;. This is a port built on top of the work originally done by him here &lt;a href=&#34;https://gist.github.com/neil-morrison44/34fbb18de90cd9a32ca5bdafb2a812b8&#34;&gt;https://gist.github.com/neil-morrison44/34fbb18de90cd9a32ca5bdafb2a812b8&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/RetroDriven/&#34;&gt;RetroDriven&lt;/a&gt; for maintaining the arcade rom archive.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;a href=&#34;https://github.com/dyreschlock/pocket-platform-images/tree/main/arcade/Platforms&#34;&gt;dyreschlock&lt;/a&gt; for hosting the updated platform files for Jotego&#39;s cores&lt;/p&gt; &#xA;&lt;p&gt;And if you&#39;re looking for something with a few more features and a user interface, check out this updater. &lt;a href=&#34;https://github.com/RetroDriven/Pocket_Updater&#34;&gt;https://github.com/RetroDriven/Pocket_Updater&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or if you want something cross platform that will run on a mac or linux: &lt;a href=&#34;https://github.com/neil-morrison44/pocket-sync&#34;&gt;https://github.com/neil-morrison44/pocket-sync&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>glazerdesktop/GlazeWM</title>
    <updated>2023-10-22T01:47:49Z</updated>
    <id>tag:github.com,2023-10-22:/glazerdesktop/GlazeWM</id>
    <link href="https://github.com/glazerdesktop/GlazeWM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GlazeWM · &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/lars-berger/GlazeWM&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ud6z3qjRvM&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1041662798196908052.svg?logo=discord&amp;amp;colorB=7289DA&#34; alt=&#34;Discord invite&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;GlazeWM is a tiling window manager for Windows inspired by i3 and Polybar.&lt;/p&gt; &#xA;&lt;p&gt;Why use a tiling window manager? A tiling WM lets you easily organize windows and adjust their layout on the fly by using keyboard-driven commands.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple YAML configuration&lt;/li&gt; &#xA; &lt;li&gt;Multi-monitor support&lt;/li&gt; &#xA; &lt;li&gt;Customizable bar window&lt;/li&gt; &#xA; &lt;li&gt;Customizable rules for specific windows&lt;/li&gt; &#xA; &lt;li&gt;Easy one-click installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/glazerdesktop/GlazeWM/assets/34844898/58167ca8-3064-4c5f-a82e-51bd3cd8830b&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Showcase GIF by &lt;a href=&#34;https://github.com/HolbyFPV&#34;&gt;@HolbyFPV&lt;/a&gt;&lt;/i&gt;&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, GlazeWM adds functionality to the built-in window manager and uses the Windows API via P/Invoke to position windows.&lt;/p&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;h2&gt;Direct download&lt;/h2&gt; &#xA;&lt;p&gt;The latest runnable executable can be downloaded via &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/releases&#34;&gt;releases&lt;/a&gt;. No installation necessary, simply run the &lt;code&gt;.exe&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Winget&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be downloaded via Winget package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install GlazeWM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Winget installs portable packages in &lt;code&gt;%LOCALAPPDATA%\Microsoft\Winget\Packages\&lt;/code&gt; by default. This can be overrided with the flag &lt;code&gt;--location \path\to\folder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Scoop&lt;/h2&gt; &#xA;&lt;p&gt;GlazeWM can be download via Scoop in the &lt;a href=&#34;https://github.com/ScoopInstaller/Extras&#34;&gt;Extras&lt;/a&gt; bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop bucket add extras # Ensure bucket is added first&#xA;scoop install glazewm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;Alternatively, to build from source, use the following .NET CLI command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet publish ./GlazeWM.App/GlazeWM.App.csproj --configuration=Release --runtime=win-x64 --output=. --self-contained -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build for other runtimes than Windows x64, see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#windows-rids&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve handling of fullscreen and maximized windows.&lt;/li&gt; &#xA; &lt;li&gt;More bar components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/lars-berger/projects/2/views/1&#34;&gt;📋 Full roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;The configuration file for GlazeWM can be found at &lt;code&gt;C:\Users\&amp;lt;YOUR_USER&amp;gt;\.glaze-wm\config.yaml&lt;/code&gt;. If this file doesn&#39;t exist, the &lt;a href=&#34;https://github.com/lars-berger/GlazeWM/raw/master/GlazeWM.App/Resources/sample-config.yaml&#34;&gt;default config&lt;/a&gt; can optionally be generated on launch.&lt;/p&gt; &#xA;&lt;p&gt;To use a different config file location, you can launch the GlazeWM executable with the CLI argument &lt;code&gt;--config=&#34;...&#34;&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;./GlazeWM.exe --config=&#34;C:\&amp;lt;PATH_TO_CONFIG&amp;gt;\config.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;general:&#xA;  # Whether to automatically focus windows underneath the cursor.&#xA;  focus_follows_cursor: false&#xA;&#xA;  # Whether to jump the cursor between windows focused by the WM.&#xA;  cursor_follows_focus: false&#xA;&#xA;  # Whether to switch back and forth between the previously focused workspace&#xA;  # when focusing the current workspace.&#xA;  toggle_workspace_on_refocus: true&#xA;&#xA;  # Whether to show floating windows as always on top.&#xA;  show_floating_on_top: false&#xA;&#xA;  # Amount to move floating windows by (eg. when using `alt+&amp;lt;hjkl&amp;gt;` on a floating window)&#xA;  floating_window_move_amount: &#34;5%&#34;&#xA;&#xA;  # Whether to globally enable/disable window transition animations (on minimize, close,&#xA;  # etc). Set to &#39;unchanged&#39; to make no setting changes.&#xA;  window_animations: &#34;unchanged&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;The available keybindings can be customized via the &lt;code&gt;keybindings&lt;/code&gt; property in the config file. A keybinding consists of one or more key combinations and one or more commands to run when pressed.&lt;/p&gt; &#xA;&lt;p&gt;A full list of keys that can be used for keybindings can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.keys?view=windowsdesktop-5.0#fields&#34;&gt;here&lt;/a&gt;. Numbers can be used in keybindings with and without a &lt;code&gt;D&lt;/code&gt; prefix (eg. either &lt;code&gt;D1&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; works).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to use the alt key for keybindings. The windows key is unfortunately a pain to remap, since certain keybindings (eg. &lt;code&gt;LWin+L&lt;/code&gt;) are reserved by the OS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;keybindings:&#xA;  # Command to run.&#xA;  - command: &#34;focus workspace 1&#34;&#xA;&#xA;    # Key combination to trigger the keybinding.&#xA;    binding: &#34;Alt+1&#34;&#xA;&#xA;  # To run multiple commands in a sequence, use the `commands` property (eg. to move a window to a&#xA;  # workspace + focus workspace).&#xA;  - commands: [&#34;move to workspace 1&#34;, &#34;focus workspace 1&#34;]&#xA;    binding: &#34;Alt+Shift+1&#34;&#xA;&#xA;  - command: &#34;focus left&#34;&#xA;    # To have multiple key combinations that can trigger a command, use the `bindings` property.&#xA;    bindings: [&#34;Alt+H&#34;, &#34;Alt+Left&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default keybindings&lt;/h3&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635035-152ed4a6-e5a1-4878-8863-f62391e7d703.png&#34; alt=&#34;Alt key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Keybindings with &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt; pressed:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/34844898/194635089-d5ed152b-1527-43e8-a69c-4e154b97a207.png&#34; alt=&#34;Alt+shift key pressed - with keybindings&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apart from the &lt;code&gt;Alt+Shift+E&lt;/code&gt; binding for exiting GlazeWM, it&#39;s also possibly to safely exit via the system tray icon.&lt;/p&gt; &#xA;&lt;h2&gt;Focus Window Border configuration&lt;/h2&gt; &#xA;&lt;p&gt;The focused and unfocused window border color can be configured via the &lt;code&gt;focus_borders&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires minimum of Windows 11 Build 22000.51.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;focus_borders:&#xA;  active:&#xA;    enabled: true&#xA;    color: &#34;#ff0000&#34;&#xA;  inactive:&#xA;    enabled: false&#xA;    color: &#34;#0000ff&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gap configuration&lt;/h2&gt; &#xA;&lt;p&gt;The gaps between windows can be changed via the &lt;code&gt;gaps&lt;/code&gt; property in the config file. Inner and outer gaps are set separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;gaps:&#xA;  # Gap between adjacent windows.&#xA;  inner_gap: &#34;20px&#34;&#xA;&#xA;  # Gap between windows and the screen edge. See &#34;Shorthand properties&#34; for more info.&#xA;  outer_gap: &#34;20px 0 20px 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workspaces configuration&lt;/h2&gt; &#xA;&lt;p&gt;Workspaces need to be predefined via the &lt;code&gt;workspaces&lt;/code&gt; property in the config file. A workspace is automatically assigned to each monitor on startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;workspaces:&#xA;  # Uniquely identifies the workspace and is used as the label for the workspace in the bar if&#xA;  # `display_name` is not provided.&#xA;  - name: &#34;1&#34;&#xA;&#xA;    # Optional override for the workspace label in the bar. Does not need to be unique.&#xA;    display_name: &#34;Work&#34;&#xA;&#xA;    # Optionally force the workspace on a specific monitor if it exists. Use the monitor&#39;s number&#xA;    # as shown in the Windows display settings (eg. 1, 2, 3...).&#xA;    bind_to_monitor: 1&#xA;&#xA;    # Optionally prevent workspace from being deactivated when empty.&#xA;    keep_alive: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bar configuration&lt;/h2&gt; &#xA;&lt;p&gt;The appearance of the bar can be changed via the &lt;code&gt;bar&lt;/code&gt; property in the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  # The option to enable/disable the bar.&#xA;  enabled: true&#xA;&#xA;  # Height of the bar in pixels.&#xA;  height: &#34;30px&#34;&#xA;&#xA;  # The position of the bar on the screen. Can be either &#34;top&#34; or &#34;bottom&#34;.&#xA;  position: &#34;top&#34;&#xA;&#xA;  # Whether to show the bar above other windows&#xA;  always_on_top: false&#xA;&#xA;  # Opacity value between 0.0 and 1.0.&#xA;  opacity: 1.0&#xA;&#xA;  # Background color of the bar.&#xA;  background: &#34;#101010&#34;&#xA;&#xA;  # Default font color. Can be overriden by setting `foreground` in a component&#39;s config.&#xA;  foreground: &#34;white&#34;&#xA;&#xA;  # Default font family. Can be overriden by setting `font_family` in a component&#39;s config.&#xA;  font_family: &#34;Segoe UI&#34;&#xA;&#xA;  # Default font size. Can be overriden by setting `font_size` in a component&#39;s config.&#xA;  font_size: &#34;13px&#34;&#xA;&#xA;  # Default font weight. Typically ranges from 100 to 950, where a higher value is thicker. Can&#xA;  # be overriden by setting `font_weight` in a component&#39;s config.&#xA;  font_weight: &#34;400&#34;&#xA;&#xA;  # Horizontal and vertical borders in pixels. Borders are inside the dimensions of the bar and do&#xA;  # not affect bar height. See &#34;Shorthand properties&#34; for more info.&#xA;  border_width: &#34;0&#34;&#xA;&#xA;  # Color of the border.&#xA;  border_color: &#34;blue&#34;&#xA;&#xA;  # Horizontal and vertical spacing between components within the bar and the edges of the bar. See&#xA;  # &#34;Shorthand properties&#34; for more info.&#xA;  padding: &#34;4px 6px 4px 6px&#34;&#xA;&#xA;  # Separator between components within the bar. `label` is used for each section&#xA;  # of the bar unless `label_{left,center,right}` is explictly set, in which case&#xA;  # they are preferred over default.&#xA;  component_separator:&#xA;    label: &#34; | &#34;&#xA;&#xA;  # Components to display on the left side of the bar.&#xA;  components_left:&#xA;    - type: &#34;workspaces&#34;&#xA;&#xA;  # Components to display on the right side of the bar.&#xA;  components_right:&#xA;    - type: &#34;clock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar component configuration&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of bar components can also be customized. The following properties can change the styling of a component, regardless of the component type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Type of component to display. Currently 7 component types exist: &#34;workspaces&#34;, &#34;clock&#34;, &#34;text&#34;, &#34;battery&#34;, &#34;window title&#34;, &#34;binding mode&#34; and &#34;tiling direction&#34;.&#xA;type: &amp;lt;COMPONENT_TYPE&amp;gt;&#xA;&#xA;# Horizontal and vertical margins. See &#34;Shorthand properties&#34; for more info.&#xA;margin: &#34;0 10px 0 0&#34;&#xA;&#xA;# Horizontal and vertical padding. See &#34;Shorthand properties&#34; for more info.&#xA;padding: &#34;0&#34;&#xA;&#xA;# Opacity value between 0.0 and 1.0.&#xA;opacity: 1.0&#xA;&#xA;# Background color of the component.&#xA;background: &#34;#101010&#34;&#xA;&#xA;# Font color used within the component.&#xA;foreground: &#34;white&#34;&#xA;&#xA;# Font family used within the component.&#xA;font_family: &#34;Segoe UI&#34;&#xA;&#xA;# Font size used within the component.&#xA;font_size: &#34;13px&#34;&#xA;&#xA;# Font weight used within the component. Typically ranges from 100 to 950, where a higher value is&#xA;# thicker.&#xA;font_weight: &#34;400&#34;&#xA;&#xA;# Horizontal and vertical borders in pixels. Borders are inside the dimensions of the component.&#xA;# See &#34;Shorthand properties&#34; for more info.&#xA;border_width: &#34;0&#34;&#xA;&#xA;# Color of the border.&#xA;border_color: &#34;blue&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shorthand properties&lt;/h3&gt; &#xA;&lt;p&gt;Properties related to the edges of the bar or a component, like &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt;, and &lt;code&gt;border_width&lt;/code&gt;, use a 1-to-4 value syntax. This is the same convention that&#39;s common in CSS.&lt;/p&gt; &#xA;&lt;p&gt;Using the example of padding:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When one value is specified, it applies the same padding to all four sides.&lt;/li&gt; &#xA; &lt;li&gt;When two values are specified, the first padding applies to the top and bottom, the second to the left and right.&lt;/li&gt; &#xA; &lt;li&gt;When three values are specified, the first padding applies to the top, the second to the right and left, the third to the bottom.&lt;/li&gt; &#xA; &lt;li&gt;When four values are specified, the paddings apply to the top, right, bottom, and left in that order (clockwise).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bar component: Clock&lt;/h3&gt; &#xA;&lt;p&gt;The text shown in the clock component is specified via &lt;code&gt;time_formatting&lt;/code&gt;. The supported time format specifiers are defined by &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings&#34;&gt;.NET&#39;s time/date string formatting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally supported format specifiers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Specifier&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;w&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year: 1..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 21.12.2022 (51)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&#34;ww&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Week of year 01..53&lt;/td&gt; &#xA;   &lt;td&gt;&#39;HH:mm dd.MM.yyyy (ww)&#39; =&amp;gt; 13:05 02.01.2022 (02)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;clock&#34;&#xA;  time_formatting: &#34;hh:mm tt  ddd MMM d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Battery&lt;/h3&gt; &#xA;&lt;p&gt;The battery component displays the system&#39;s battery level in percent. There are three labels available that can be customized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;label_draining&lt;/code&gt;: used when the system is draining battery power(i.e. not charging).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_power_saver&lt;/code&gt;: used when the system is on power saving mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;label_charging&lt;/code&gt;: used when the system is connected to power.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;{battery_level}&lt;/code&gt; is a variable which is replaced by the actual battery level when the label is displayed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;battery&#34;&#xA;  label_draining: &#34;{battery_level}% remaining&#34;&#xA;  label_power_saver: &#34;{battery_level}% (power saver)&#34;&#xA;  label_charging: &#34;{battery_level}% (charging)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: CPU Usage&lt;/h3&gt; &#xA;&lt;p&gt;Displays the current CPU usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;cpu&#34;&#xA;  label: &#34;CPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: GPU Usage&lt;/h3&gt; &#xA;&lt;p&gt;This component has high CPU requirement (compared to others); due to no efficient way to pull data from Windows API. Avoid using low refresh intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;gpu&#34;&#xA;  label: &#34;GPU: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Memory Usage&lt;/h3&gt; &#xA;&lt;p&gt;Displays the current Memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;memory&#34;&#xA;  label: &#34;RAM: {percent_usage}%&#34;&#xA;  # How often this counter is refreshed.&#xA;  refresh_interval_ms: 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Network&lt;/h3&gt; &#xA;&lt;p&gt;Displays the type and signal strength of the active network connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;network&#34;&#xA;  label_no_internet: &#34;NC&#34;&#xA;  label_ethernet: &#34;Eth&#34;&#xA;  label_wifi_strength_0: &#34;WiFi: 0%&#34;&#xA;  label_wifi_strength_25: &#34;WiFi: 25%&#34;&#xA;  label_wifi_strength_50: &#34;WiFi: 50%&#34;&#xA;  label_wifi_strength_75: &#34;WiFi: 75%&#34;&#xA;  label_wifi_strength_100: &#34;WiFi: 100%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Volume&lt;/h3&gt; &#xA;&lt;p&gt;Displays volume level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;volume&#34;&#xA;  label_low: &#34;🔊{volume_level}%&#34;&#xA;  label_medium: &#34;🔊{volume_level}%&#34;&#xA;  label_high: &#34;🔊{volume_level}%&#34;&#xA;  label_mute: &#34;🔊{volume_level}%&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Text File&lt;/h3&gt; &#xA;&lt;p&gt;For displaying any content without a native integrated widget; updates in real time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;text file&#34;&#xA;  # Path to file.&#xA;  file_path: &#34;PATH_HERE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Weather&lt;/h3&gt; &#xA;&lt;p&gt;Uses Open-Meteo API, refreshes every hour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;weather&#34;&#xA;  latitude: 40.6892&#xA;  longitude: 74.0445&#xA;  label: &#34;{temperature_celsius}°C&#34;&#xA;  label_sun: &#34;☀️ {temperature_celsius}°C&#34;&#xA;  label_moon: &#34;🌙 {temperature_celsius}°C&#34;&#xA;  label_cloud_moon: &#34;🌙☁️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun: &#34;⛅ {temperature_celsius}°C&#34;&#xA;  label_cloud_moon_rain: &#34;🌙🌧️ {temperature_celsius}°C&#34;&#xA;  label_cloud_sun_rain: &#34;🌦️ {temperature_celsius}°C&#34;&#xA;  label_cloud_rain: &#34;🌧️ {temperature_celsius}°C&#34;&#xA;  label_snow_flake: &#34;❄️ {temperature_celsius}°C&#34;&#xA;  label_thunderstorm: &#34;⚡ {temperature_celsius}°C&#34;&#xA;  label_cloud: &#34;☁️ {temperature_celsius}°C&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: Image&lt;/h3&gt; &#xA;&lt;p&gt;Supports &lt;code&gt;.png&lt;/code&gt; and &lt;code&gt;.jpg&lt;/code&gt; formats.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;image&#34;&#xA;  source: &#34;C:\\Folder\\AnotherFolder\\image.png&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bar Component: System Tray&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Alt+Click&lt;/code&gt; to pin and un-pin an icon.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: &#34;system tray&#34;&#xA;  label_expand_text: &#34;&amp;lt;&#34;&#xA;  label_collapse_text: &#34;&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mixing font properties within a label&lt;/h2&gt; &#xA;&lt;p&gt;Font family, font weight, font size, and foreground color can be changed within parts of a label. This means that icons and text fonts can be used together in a label. To customize a part of the label, wrap it in an &#xA; &lt;attr&gt;&#xA;   tag:&#xA; &lt;/attr&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;bar:&#xA;  components_left:&#xA;    - type: &#34;cpu&#34;&#xA;      # Change font family (ie. ff) to Comic Sans for part of the label:&#xA;      label: &#34;&amp;lt;attr ff=&#39;Comic Sans&#39;&amp;gt;CPU:&amp;lt;/attr&amp;gt; {percent_usage}%&#34;&#xA;&#xA;    - type: &#34;battery&#34;&#xA;      # Show an icon by using an icon font:&#xA;      label_draining: &#34;&amp;lt;attr ff=&#39;Material Icons&#39;&amp;gt;&amp;lt;/attr&amp;gt; {battery_level}%&#34;&#xA;      # Multiple attributes can be changed at once:&#xA;      label_charging: &#34;{battery_level}% &amp;lt;attr ff=&#39;Arial&#39; fg=&#39;#228B22&#39; fw=&#39;400&#39; fs=&#39;13px&#39;&amp;gt;(charging)&amp;lt;/attr&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Icons in Bar Components&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s common to use icons as the &lt;code&gt;label&lt;/code&gt; in bar components by assigning a font family that contains glyphs. A popular option is &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Font&lt;/a&gt; which comes with a &lt;a href=&#34;https://www.nerdfonts.com/cheat-sheet&#34;&gt;cheat sheet&lt;/a&gt; for easily finding a desired glyph.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing New Bar Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/glazerdesktop/GlazeWM/develop/docs/contributing-new-components.md&#34;&gt;Guide Available Here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Window rules&lt;/h2&gt; &#xA;&lt;p&gt;Commands can be run when a window is initially launched. This can be used to assign an app to a specific workspace or to always start an app in floating mode.&lt;/p&gt; &#xA;&lt;p&gt;Multiple matching criteria can be used together to target a window more precisely. Regex syntax can also be used by wrapping the pattern with &lt;code&gt;/&lt;/code&gt; (eg. &lt;code&gt;/notepad|chrome/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;window_rules:&#xA;  # Command to run. Use `commands` to specify an array of commands to run in sequence.&#xA;  - command: &#34;move to workspace 2&#34;&#xA;&#xA;    # Process name to match exactly.&#xA;    match_process_name: &#34;chrome&#34;&#xA;&#xA;    # Window title to match exactly.&#xA;    match_title: &#34;/.*/&#34;&#xA;&#xA;    # Class name to match exactly.&#xA;    match_class_name: &#34;Chrome_WidgetWin_1&#34;&#xA;&#xA;  # To prevent the WM from managing an app, use the &#34;ignore&#34; command.&#xA;  - command: &#34;ignore&#34;&#xA;    match_process_name: &#34;notepad&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;focus &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;prev | next | recent&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move &amp;lt;left | right | up | down&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;move to workspace &amp;lt;workspace name&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;resize &amp;lt;height | width&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;resize height 3%&lt;/code&gt; or &lt;code&gt;resize width 20px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;resize borders &lt;a href=&#34;https://raw.githubusercontent.com/glazerdesktop/GlazeWM/develop/#shorthand-properties&#34;&gt;&amp;lt;shorthand property&amp;gt;&lt;/a&gt; (eg. &lt;code&gt;resize borders 0px -7px -7px -7px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;floating | tiling | minimized | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;set &amp;lt;width | height&amp;gt; &amp;lt;amount in px | amount in %&amp;gt; (eg. &lt;code&gt;set height 30%&lt;/code&gt; or &lt;code&gt;set width 200px&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;toggle &amp;lt;floating | maximized&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;focus mode toggle&lt;/li&gt; &#xA; &lt;li&gt;tiling direction &amp;lt;vertical | horizontal | toggle&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;exit wm&lt;/li&gt; &#xA; &lt;li&gt;reload config&lt;/li&gt; &#xA; &lt;li&gt;close&lt;/li&gt; &#xA; &lt;li&gt;exec &amp;lt;process name | path to executable&amp;gt; (eg. &lt;code&gt;exec chrome&lt;/code&gt; or &lt;code&gt;exec &#39;C:/Program Files/Google/Chrome/Application/chrome&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ignore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;h2&gt;Blurry buttons in bar window&lt;/h2&gt; &#xA;&lt;p&gt;An app called &#34;Sonic Studio&#34;, which is installed by default on ASUS ROG machines can cause rendering issues with WPF apps. This can be resolved by disabling &lt;code&gt;NahimicService&lt;/code&gt; in Windows Services Manager.&lt;/p&gt; &#xA;&lt;h2&gt;Binding the right-side Alt key &lt;code&gt;RMenu&lt;/code&gt; on certain keyboard layouts&lt;/h2&gt; &#xA;&lt;p&gt;Most keyboard layouts treat the right-side &lt;kbd&gt;Alt&lt;/kbd&gt; key the same as the left, while others (eg. US International and German) treat it as &lt;kbd&gt;AltGr&lt;/kbd&gt; and generate both &lt;kbd&gt;Ctrl&lt;/kbd&gt; and &lt;kbd&gt;Alt&lt;/kbd&gt; when it is pressed. For these keyboard layouts, keybindings with the &lt;kbd&gt;AltGr&lt;/kbd&gt; key need to specify both &lt;code&gt;RMenu&lt;/code&gt; and &lt;code&gt;Control&lt;/code&gt; (eg. &lt;code&gt;RMenu+Control+A&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet-architecture/eShopOnWeb</title>
    <updated>2023-10-22T01:47:49Z</updated>
    <id>tag:github.com,2023-10-22:/dotnet-architecture/eShopOnWeb</id>
    <link href="https://github.com/dotnet-architecture/eShopOnWeb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sample ASP.NET Core 7.0 reference application, powered by Microsoft, demonstrating a layered application architecture with monolithic deployment model. Download the eBook PDF from docs folder.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnWeb/actions&#34;&gt;&lt;img src=&#34;https://github.com/dotnet-architecture/eShopOnWeb/workflows/eShopOnWeb%20Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Microsoft eShopOnWeb ASP.NET Core Reference Application&lt;/h1&gt; &#xA;&lt;p&gt;Sample ASP.NET Core reference application, powered by Microsoft, demonstrating a single-process (monolithic) application architecture and deployment model. If you&#39;re new to .NET development, read the &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnWeb/wiki/Getting-Started-for-Beginners&#34;&gt;Getting Started for Beginners&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;A list of Frequently Asked Questions about this repository can be found &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnWeb/wiki/Frequently-Asked-Questions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview Video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ardalis&#34;&gt;Steve &#34;ardalis&#34; Smith&lt;/a&gt; recorded &lt;a href=&#34;https://www.youtube.com/watch?v=vRZ8ucGac8M&amp;amp;ab_channel=Ardalis&#34;&gt;a live stream providing an overview of the eShopOnWeb reference app&lt;/a&gt; in October 2020.&lt;/p&gt; &#xA;&lt;h2&gt;eBook&lt;/h2&gt; &#xA;&lt;p&gt;This reference application is meant to support the free .PDF download ebook: &lt;a href=&#34;https://aka.ms/webappebook&#34;&gt;Architecting Modern Web Applications with ASP.NET Core and Azure&lt;/a&gt;, updated to &lt;strong&gt;ASP.NET Core 7.0&lt;/strong&gt;. &lt;a href=&#34;https://dotnet.microsoft.com/learn/web/aspnet-architecture&#34;&gt;Also available in ePub/mobi formats&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also read the book in online pages at the .NET docs here: &lt;a href=&#34;https://docs.microsoft.com/dotnet/architecture/modern-web-apps-azure/&#34;&gt;https://docs.microsoft.com/dotnet/architecture/modern-web-apps-azure/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dotnet.microsoft.com/learn/web/aspnet-architecture&#34;&gt;&lt;img src=&#34;https://dotnet.microsoft.com/blob-assets/images/e-books/aspnet.png&#34; height=&#34;300&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;eShopOnWeb&lt;/strong&gt; sample is related to the &lt;a href=&#34;https://github.com/dotnet/eShopOnContainers&#34;&gt;eShopOnContainers&lt;/a&gt; sample application which, in that case, focuses on a microservices/containers-based application architecture. However, &lt;strong&gt;eShopOnWeb&lt;/strong&gt; is much simpler in regards to its current functionality and focuses on traditional Web Application Development with a single deployment.&lt;/p&gt; &#xA;&lt;p&gt;The goal for this sample is to demonstrate some of the principles and patterns described in the &lt;a href=&#34;https://aka.ms/webappebook&#34;&gt;eBook&lt;/a&gt;. It is not meant to be an eCommerce reference application, and as such it does not implement many features that would be obvious and/or essential to a real eCommerce application.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;VERSIONS&lt;/h3&gt; &#xA; &lt;h4&gt;The &lt;code&gt;main&lt;/code&gt; branch is currently running ASP.NET Core 7.0.&lt;/h4&gt; &#xA; &lt;h4&gt;Older versions are tagged.&lt;/h4&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Topics (eBook TOC)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA; &lt;li&gt;Characteristics of Modern Web Applications&lt;/li&gt; &#xA; &lt;li&gt;Choosing Between Traditional Web Apps and SPAs&lt;/li&gt; &#xA; &lt;li&gt;Architectural Principles&lt;/li&gt; &#xA; &lt;li&gt;Common Web Application Architectures&lt;/li&gt; &#xA; &lt;li&gt;Common Client Side Technologies&lt;/li&gt; &#xA; &lt;li&gt;Developing ASP.NET Core MVC Apps&lt;/li&gt; &#xA; &lt;li&gt;Working with Data in ASP.NET Core Apps&lt;/li&gt; &#xA; &lt;li&gt;Testing ASP.NET Core MVC Apps&lt;/li&gt; &#xA; &lt;li&gt;Development Process for Azure-Hosted ASP.NET Core Apps&lt;/li&gt; &#xA; &lt;li&gt;Azure Hosting Recommendations for ASP.NET Core Web Apps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running the sample using Azd template&lt;/h2&gt; &#xA;&lt;p&gt;The store&#39;s home page should look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/782127/88414268-92d83a00-cdaa-11ea-9b4c-db67d95be039.png&#34; alt=&#34;eShopOnWeb home page screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Azure Developer CLI (&lt;code&gt;azd&lt;/code&gt;) is a developer-centric command-line interface (CLI) tool for creating Azure applications.&lt;/p&gt; &#xA;&lt;p&gt;You need to install it before running and deploying with Azure Developer CLI.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;powershell -ex AllSigned -c &#34;Invoke-RestMethod &#39;https://aka.ms/install-azd.ps1&#39; | Invoke-Expression&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux/MacOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://aka.ms/install-azd.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can also install with package managers, like winget, choco, and brew. For more details, you can follow the documentation: &lt;a href=&#34;https://aka.ms/azure-dev/install&#34;&gt;https://aka.ms/azure-dev/install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After logging in with the following command, you will be able to use the azd cli to quickly provision and deploy the application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;azd auth login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, execute the &lt;code&gt;azd init&lt;/code&gt; command to initialize the environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;azd init -t dotnet-architecture/eShopOnWeb &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;azd up&lt;/code&gt; to provision all the resources to Azure and deploy the code to those resources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;azd up &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;According to the prompt, enter an &lt;code&gt;env name&lt;/code&gt;, and select &lt;code&gt;subscription&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt;, these are the necessary parameters when you create resources. Wait a moment for the resource deployment to complete, click the web endpoint and you will see the home page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Considering security, we store its related data (id, password) in the &lt;strong&gt;Azure Key Vault&lt;/strong&gt; when we create the database, and obtain it from the Key Vault when we use it. This is different from directly deploying applications locally.&lt;/li&gt; &#xA; &lt;li&gt;The resource group name created in azure portal will be &lt;strong&gt;rg-{env name}&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can also run the sample directly locally (See below).&lt;/p&gt; &#xA;&lt;h2&gt;Running the sample locally&lt;/h2&gt; &#xA;&lt;p&gt;Most of the site&#39;s functionality works with just the web application running. However, the site&#39;s Admin page relies on Blazor WebAssembly running in the browser, and it must communicate with the server using the site&#39;s PublicApi web application. You&#39;ll need to also run this project. You can configure Visual Studio to start multiple projects, or just go to the PublicApi folder in a terminal window and run &lt;code&gt;dotnet run&lt;/code&gt; from there. After that from the Web folder you should run &lt;code&gt;dotnet run --launch-profile Web&lt;/code&gt;. Now you should be able to browse to &lt;code&gt;https://localhost:5001/&lt;/code&gt;. The admin part in Blazor is accessible to &lt;code&gt;https://localhost:5001/admin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that if you use this approach, you&#39;ll need to stop the application manually in order to build the solution (otherwise you&#39;ll get file locking errors).&lt;/p&gt; &#xA;&lt;p&gt;After cloning or downloading the sample you must setup your database. To use the sample with a persistent database, you will need to run its Entity Framework Core migrations before you will be able to run the app.&lt;/p&gt; &#xA;&lt;p&gt;You can also run the samples in Docker (see below).&lt;/p&gt; &#xA;&lt;h3&gt;Configuring the sample to use SQL Server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;By default, the project uses a real database. If you want an in memory database, you can add in the &lt;code&gt;appsettings.json&lt;/code&gt; file in the Web folder&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;UseOnlyInMemoryDatabase&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure your connection strings in &lt;code&gt;appsettings.json&lt;/code&gt; point to a local SQL Server instance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure the tool EF was already installed. You can find some help &lt;a href=&#34;https://docs.microsoft.com/ef/core/miscellaneous/cli/dotnet&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet tool update --global dotnet-ef&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a command prompt in the Web folder and execute the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dotnet restore&#xA;dotnet tool restore&#xA;dotnet ef database update -c catalogcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj&#xA;dotnet ef database update -c appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These commands will create two separate databases, one for the store&#39;s catalog data and shopping cart information, and one for the app&#39;s user credentials and identity data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the application.&lt;/p&gt; &lt;p&gt;The first time you run the application, it will seed both databases with data such that you should see products in the store, and you should be able to log in using the &lt;a href=&#34;mailto:demouser@microsoft.com&#34;&gt;demouser@microsoft.com&lt;/a&gt; account.&lt;/p&gt; &lt;p&gt;Note: If you need to create migrations, you can use these commands:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;-- create migration (from Web folder CLI)&#xA;dotnet ef migrations add InitialModel --context catalogcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj -o Data/Migrations&#xA;&#xA;dotnet ef migrations add InitialIdentityModel --context appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj -o Identity/Migrations&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the sample in the dev container&lt;/h2&gt; &#xA;&lt;p&gt;This project includes a &lt;code&gt;.devcontainer&lt;/code&gt; folder with a &lt;a href=&#34;https://containers.dev/&#34;&gt;dev container configuration&lt;/a&gt;, which lets you use a container as a full-featured dev environment.&lt;/p&gt; &#xA;&lt;p&gt;You can use the dev container to build and run the app without needing to install any of its tools locally! You can work in GitHub Codespaces or the VS Code Dev Containers extension.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about using the dev container in its &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-architecture/eShopOnWeb/main/.devcontainer/devcontainerreadme.md&#34;&gt;readme&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the sample using Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can run the Web sample by running these commands from the root folder (where the .sln file is located):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose build&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be able to make requests to localhost:5106 for the Web project, and localhost:5200 for the Public API project once these commands complete. If you have any problems, especially with login, try from a new guest or incognito browser instance.&lt;/p&gt; &#xA;&lt;p&gt;You can also run the applications by using the instructions located in their &lt;code&gt;Dockerfile&lt;/code&gt; file in the root of each project. Again, run these commands from the root of the solution (where the .sln file is located).&lt;/p&gt; &#xA;&lt;h2&gt;Community Extensions&lt;/h2&gt; &#xA;&lt;p&gt;We have some great contributions from the community, and while these aren&#39;t maintained by Microsoft we still want to highlight them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VBAndCs/eShopOnWeb_VB.NET&#34;&gt;eShopOnWeb VB.NET&lt;/a&gt; by Mohammad Hamdy Ghanem&lt;/p&gt;</summary>
  </entry>
</feed>