<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:44:45Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jellyfin/jellyfin</title>
    <updated>2022-09-18T01:44:45Z</updated>
    <id>tag:github.com,2022-09-18:/jellyfin/jellyfin</id>
    <link href="https://github.com/jellyfin/jellyfin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Free Software Media System&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Jellyfin&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;The Free Software Media System&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Logo Banner&#34; src=&#34;https://raw.githubusercontent.com/jellyfin/jellyfin-ux/master/branding/SVG/banner-logo-solid.svg?sanitize=true&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/jellyfin/jellyfin&#34;&gt; &lt;img alt=&#34;GPL 2.0 License&#34; src=&#34;https://img.shields.io/github/license/jellyfin/jellyfin.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jellyfin/jellyfin/releases&#34;&gt; &lt;img alt=&#34;Current Release&#34; src=&#34;https://img.shields.io/github/release/jellyfin/jellyfin.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://translate.jellyfin.org/projects/jellyfin/jellyfin-core/?utm_source=widget&#34;&gt; &lt;img alt=&#34;Translation Status&#34; src=&#34;https://translate.jellyfin.org/widgets/jellyfin/-/jellyfin-core/svg-badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/jellyfin-project/jellyfin/_build?definitionId=29&#34;&gt; &lt;img alt=&#34;Azure Builds&#34; src=&#34;https://dev.azure.com/jellyfin-project/jellyfin/_apis/build/status/Jellyfin%20Server&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/jellyfin/jellyfin&#34;&gt; &lt;img alt=&#34;Docker Pull Count&#34; src=&#34;https://img.shields.io/docker/pulls/jellyfin/jellyfin.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://opencollective.com/jellyfin&#34;&gt; &lt;img alt=&#34;Donate&#34; src=&#34;https://img.shields.io/opencollective/all/jellyfin.svg?label=backers&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://features.jellyfin.org&#34;&gt; &lt;img alt=&#34;Submit Feature Requests&#34; src=&#34;https://img.shields.io/badge/fider-vote%20on%20features-success.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#jellyfinorg:matrix.org&#34;&gt; &lt;img alt=&#34;Chat on Matrix&#34; src=&#34;https://img.shields.io/matrix/jellyfin:matrix.org.svg?logo=matrix&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/jellyfin&#34;&gt; &lt;img alt=&#34;Join our Subreddit&#34; src=&#34;https://img.shields.io/badge/reddit-r%2Fjellyfin-%23FF5700.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jellyfin/jellyfin/releases.atom&#34;&gt; &lt;img alt=&#34;Release RSS Feed&#34; src=&#34;https://img.shields.io/badge/rss-releases-ffa500?logo=rss&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jellyfin/jellyfin/commits/master.atom&#34;&gt; &lt;img alt=&#34;Master Commits RSS Feed&#34; src=&#34;https://img.shields.io/badge/rss-commits-ffa500?logo=rss&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby&#39;s 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it. We welcome anyone who is interested in joining us in our quest!&lt;/p&gt; &#xA;&lt;p&gt;For further details, please see &lt;a href=&#34;https://docs.jellyfin.org/&#34;&gt;our documentation page&lt;/a&gt;. To receive the latest updates, get help with Jellyfin, and join the community, please visit &lt;a href=&#34;https://docs.jellyfin.org/general/getting-help.html&#34;&gt;one of our communication channels&lt;/a&gt;. For more information about the project, please see our &lt;a href=&#34;https://docs.jellyfin.org/general/about.html&#34;&gt;about page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to get started?&lt;/strong&gt;&lt;br&gt; Check out our &lt;a href=&#34;https://jellyfin.org/downloads&#34;&gt;downloads page&lt;/a&gt; or our &lt;a href=&#34;https://docs.jellyfin.org/general/administration/installing.html&#34;&gt;installation guide&lt;/a&gt;, then see our &lt;a href=&#34;https://docs.jellyfin.org/general/quick-start.html&#34;&gt;quick start guide&lt;/a&gt;. You can also &lt;a href=&#34;https://docs.jellyfin.org/general/administration/building.html&#34;&gt;build from source&lt;/a&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Something not working right?&lt;/strong&gt;&lt;br&gt; Open an &lt;a href=&#34;https://docs.jellyfin.org/general/contributing/issues.html&#34;&gt;Issue&lt;/a&gt; on GitHub.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to contribute?&lt;/strong&gt;&lt;br&gt; Check out our &lt;a href=&#34;https://jellyfin.org/contribute&#34;&gt;contributing choose-your-own-adventure&lt;/a&gt; to see where you can help, then see our &lt;a href=&#34;https://docs.jellyfin.org/general/contributing/index.html&#34;&gt;contributing guide&lt;/a&gt; and our &lt;a href=&#34;https://jellyfin.org/docs/general/community-standards&#34;&gt;community standards&lt;/a&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New idea or improvement?&lt;/strong&gt;&lt;br&gt; Check out our &lt;a href=&#34;https://features.jellyfin.org/?view=most-wanted&#34;&gt;feature request hub&lt;/a&gt;.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t see Jellyfin in your language?&lt;/strong&gt;&lt;br&gt; Check out our &lt;a href=&#34;https://translate.jellyfin.org&#34;&gt;Weblate instance&lt;/a&gt; to help translate Jellyfin and its subprojects.&lt;br&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://translate.jellyfin.org/engage/jellyfin/?utm_source=widget&#34;&gt; &lt;img src=&#34;https://translate.jellyfin.org/widgets/jellyfin/-/jellyfin-web/multi-auto.svg?sanitize=true&#34; alt=&#34;Detailed Translation Status&#34;&gt; &lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Jellyfin Server&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the code for Jellyfin&#39;s backend server. Note that this is only one of many projects under the Jellyfin GitHub &lt;a href=&#34;https://github.com/jellyfin/&#34;&gt;organization&lt;/a&gt; on GitHub. If you want to contribute, you can start by checking out our &lt;a href=&#34;https://jellyfin.org/docs/general/contributing/index.html&#34;&gt;documentation&lt;/a&gt; to see what to work on.&lt;/p&gt; &#xA;&lt;h2&gt;Server Development&lt;/h2&gt; &#xA;&lt;p&gt;These instructions will help you get set up with a local development environment in order to contribute to this repository. Before you start, please be sure to completely read our &lt;a href=&#34;https://jellyfin.org/docs/general/contributing/development.html&#34;&gt;guidelines on development contributions&lt;/a&gt;. Note that this project is supported on all major operating systems except FreeBSD, which is still incompatible.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before the project can be built, you must first install the &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet&#34;&gt;.NET 6.0 SDK&lt;/a&gt; on your system.&lt;/p&gt; &#xA;&lt;p&gt;Instructions to run this project from the command line are included here, but you will also need to install an IDE if you want to debug the server while it is running. Any IDE that supports .NET 6 development will work, but two options are recent versions of &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; (at least 2022) and &lt;a href=&#34;https://code.visualstudio.com/Download&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jellyfin/jellyfin-ffmpeg&#34;&gt;ffmpeg&lt;/a&gt; will also need to be installed.&lt;/p&gt; &#xA;&lt;h3&gt;Cloning the Repository&lt;/h3&gt; &#xA;&lt;p&gt;After dependencies are installed you will need to clone a local copy of this repository. If you just want to run the server from source you can clone this repository directly, but if you are intending to contribute code changes to the project, you should &lt;a href=&#34;https://jellyfin.org/docs/general/contributing/development.html#set-up-your-copy-of-the-repo&#34;&gt;set up your own fork&lt;/a&gt; of the repository. The following example shows how you can clone the repository directly over HTTPS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jellyfin/jellyfin.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing the Web Client&lt;/h3&gt; &#xA;&lt;p&gt;The server is configured to host the static files required for the &lt;a href=&#34;https://github.com/jellyfin/jellyfin-web&#34;&gt;web client&lt;/a&gt; in addition to serving the backend by default. Before you can run the server, you will need to get a copy of the web client since they are not included in this repository directly.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is also possible to &lt;a href=&#34;https://raw.githubusercontent.com/jellyfin/jellyfin/master/#hosting-the-web-client-separately&#34;&gt;host the web client separately&lt;/a&gt; from the web server with some additional configuration, in which case you can skip this step.&lt;/p&gt; &#xA;&lt;p&gt;There are three options to get the files for the web client.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download one of the finished builds from the &lt;a href=&#34;https://dev.azure.com/jellyfin-project/jellyfin/_build?definitionId=27&#34;&gt;Azure DevOps pipeline&lt;/a&gt;. You can download the build for a specific release by looking at the &lt;a href=&#34;https://dev.azure.com/jellyfin-project/jellyfin/_build?definitionId=27&amp;amp;_a=summary&amp;amp;repositoryFilter=6&amp;amp;view=branches&#34;&gt;branches tab&lt;/a&gt; of the pipelines page.&lt;/li&gt; &#xA; &lt;li&gt;Build them from source following the instructions on the &lt;a href=&#34;https://github.com/jellyfin/jellyfin-web&#34;&gt;jellyfin-web repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the pre-built files from an existing installation of the server. For example, with a Windows server installation the client files are located at &lt;code&gt;C:\Program Files\Jellyfin\Server\jellyfin-web&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running The Server&lt;/h3&gt; &#xA;&lt;p&gt;The following instructions will help you get the project up and running via the command line, or your preferred IDE.&lt;/p&gt; &#xA;&lt;h4&gt;Running With Visual Studio&lt;/h4&gt; &#xA;&lt;p&gt;To run the project with Visual Studio you can open the Solution (&lt;code&gt;.sln&lt;/code&gt;) file and then press &lt;code&gt;F5&lt;/code&gt; to run the server.&lt;/p&gt; &#xA;&lt;h4&gt;Running With Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;To run the project with Visual Studio Code you will first need to open the repository directory with Visual Studio Code using the &lt;code&gt;Open Folder...&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Second, you need to &lt;a href=&#34;https://code.visualstudio.com/docs/editor/extension-gallery#_recommended-extensions&#34;&gt;install the recommended extensions for the workspace&lt;/a&gt;. Note that extension recommendations are classified as either &#34;Workspace Recommendations&#34; or &#34;Other Recommendations&#34;, but only the &#34;Workspace Recommendations&#34; are required.&lt;/p&gt; &#xA;&lt;p&gt;After the required extensions are installed, you can run the server by pressing &lt;code&gt;F5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Running From The Command Line&lt;/h4&gt; &#xA;&lt;p&gt;To run the server from the command line you can use the &lt;code&gt;dotnet run&lt;/code&gt; command. The example below shows how to do this if you have cloned the repository into a directory named &lt;code&gt;jellyfin&lt;/code&gt; (the default directory name) and should work on all operating systems.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd jellyfin                          # Move into the repository directory&#xA;dotnet run --project Jellyfin.Server --webdir /absolute/path/to/jellyfin-web/dist # Run the server startup project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A second option is to build the project and then run the resulting executable file directly. When running the executable directly you can easily add command line options. Add the &lt;code&gt;--help&lt;/code&gt; flag to list details on all the supported command line options.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build the project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet build                       # Build the project&#xA;cd Jellyfin.Server/bin/Debug/net6.0 # Change into the build output directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Execute the build output. On Linux, Mac, etc. use &lt;code&gt;./jellyfin&lt;/code&gt; and on Windows use &lt;code&gt;jellyfin.exe&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running The Tests&lt;/h3&gt; &#xA;&lt;p&gt;This repository also includes unit tests that are used to validate functionality as part of a CI pipeline on Azure. There are several ways to run these tests.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run tests from the command line using &lt;code&gt;dotnet test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run tests in Visual Studio using the &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer&#34;&gt;Test Explorer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run individual tests in Visual Studio Code using the associated &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-vscode/wiki/How-to-run-and-debug-unit-tests&#34;&gt;CodeLens annotation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Advanced Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The following sections describe some more advanced scenarios for running the server from source that build upon the standard instructions above.&lt;/p&gt; &#xA;&lt;h4&gt;Hosting The Web Client Separately&lt;/h4&gt; &#xA;&lt;p&gt;It is not necessary to host the frontend web client as part of the backend server. Hosting these two components separately may be useful for frontend developers who would prefer to host the client in a separate webpack development server for a tighter development loop. See the &lt;a href=&#34;https://github.com/jellyfin/jellyfin-web#getting-started&#34;&gt;jellyfin-web&lt;/a&gt; repo for instructions on how to do this.&lt;/p&gt; &#xA;&lt;p&gt;To instruct the server not to host the web content, there is a &lt;code&gt;nowebclient&lt;/code&gt; configuration flag that must be set. This can specified using the command line switch &lt;code&gt;--nowebclient&lt;/code&gt; or the environment variable &lt;code&gt;JELLYFIN_NOWEBCONTENT=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since this is a common scenario, there is also a separate launch profile defined for Visual Studio called &lt;code&gt;Jellyfin.Server (nowebcontent)&lt;/code&gt; that can be selected from the &#39;Start Debugging&#39; dropdown in the main toolbar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The setup wizard can not be run if the web client is hosted separately.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; This project is supported by: &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;&lt;img src=&#34;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg?sanitize=true&#34; height=&#34;50px&#34; alt=&#34;DigitalOcean&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://www.jetbrains.com&#34;&gt;&lt;img src=&#34;https://gist.githubusercontent.com/anthonylavado/e8b2403deee9581e0b4cb8cd675af7db/raw/fa104b7d73f759d7262794b94569f1b89df41c0b/jetbrains.svg?sanitize=true&#34; height=&#34;50px&#34; alt=&#34;JetBrains logo&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>daem0nc0re/TangledWinExec</title>
    <updated>2022-09-18T01:44:45Z</updated>
    <id>tag:github.com,2022-09-18:/daem0nc0re/TangledWinExec</id>
    <link href="https://github.com/daem0nc0re/TangledWinExec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C# PoCs for investigation of Windows process execution techniques investigation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tangled WinExec&lt;/h1&gt; &#xA;&lt;p&gt;This repository is for investigation of Windows process execution techniques. Most of PoCs are given a name corresponding to the technique.&lt;/p&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/CommandLineSpoofing&#34;&gt;CommandLineSpoofing&lt;/a&gt; :&lt;/strong&gt; This PoC performs Command Line Spoofing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/GhostlyHollowing&#34;&gt;GhostlyHollowing&lt;/a&gt; :&lt;/strong&gt; This PoC performs Ghostly Hollowing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/PPIDSpoofing&#34;&gt;PPIDSpoofing&lt;/a&gt; :&lt;/strong&gt; This PoC performs PPID Spoofing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/ProcessDoppelgaenging&#34;&gt;ProcessDoppelgaenging&lt;/a&gt; :&lt;/strong&gt; This PoC performs Process Doppelgänging. Due to kernel protection improvement, this technique does not work for recent Windows OS (&amp;gt; Windows 10 Version 1809, as far as I tested). See &lt;a href=&#34;https://github.com/hasherezade/process_doppelganging/issues/3&#34;&gt;the issue&lt;/a&gt; for &lt;a href=&#34;https://twitter.com/hasherezade&#34;&gt;hasherezade&lt;/a&gt;&#39;s repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/ProcessGhosting&#34;&gt;ProcessGhosting&lt;/a&gt; :&lt;/strong&gt; This PoC performs Process Ghosting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/ProcessHollowing&#34;&gt;ProcessHollowing&lt;/a&gt; :&lt;/strong&gt; This PoC performs Process Hollowing. Unlike the original, the PE image is parsed into a new memory area instead of using &lt;code&gt;ZwUnmapViewOfSection&lt;/code&gt; / &lt;code&gt;NtUnmapViewOfSection&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/TransactedHollowing&#34;&gt;TransactedHollowing&lt;/a&gt; :&lt;/strong&gt; This PoC performs Transacted Hollowing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/WmiSpawn&#34;&gt;WmiSpawn&lt;/a&gt; :&lt;/strong&gt; This PoC tries to spawn process with WMI. The processes will be spawn as child processes of &lt;code&gt;WmiPrvSE.exe&lt;/code&gt;. Supports local machine process execution and remote machine process execution. The usage can see &lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/WmiSpawn/README.md&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE :&lt;/strong&gt; Currently &lt;a href=&#34;https://raw.githubusercontent.com/daem0nc0re/TangledWinExec/main/ProcessGhosting&#34;&gt;ProcessHollowing&lt;/a&gt; code does not works for Debug build. To test it, use Release build. See &lt;a href=&#34;https://github.com/daem0nc0re/TangledWinExec/issues/1&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Command Line Spoofing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/techniques/T1564/010/&#34;&gt;https://attack.mitre.org/techniques/T1564/010/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.nviso.eu/2020/02/04/the-return-of-the-spoof-part-2-command-line-spoofing/&#34;&gt;https://blog.nviso.eu/2020/02/04/the-return-of-the-spoof-part-2-command-line-spoofing/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PPID Spoofing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/techniques/T1134/004/&#34;&gt;https://attack.mitre.org/techniques/T1134/004/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.hackingarticles.in/parent-pid-spoofing-mitret1134/&#34;&gt;https://www.hackingarticles.in/parent-pid-spoofing-mitret1134/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.picussecurity.com/resource/blog/how-to-detect-parent-pid-ppid-spoofing-attacks&#34;&gt;https://www.picussecurity.com/resource/blog/how-to-detect-parent-pid-ppid-spoofing-attacks&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.ired.team/offensive-security/defense-evasion/parent-process-id-ppid-spoofing&#34;&gt;https://www.ired.team/offensive-security/defense-evasion/parent-process-id-ppid-spoofing&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.nviso.eu/2020/01/31/the-return-of-the-spoof-part-1-parent-process-id-spoofing/&#34;&gt;https://blog.nviso.eu/2020/01/31/the-return-of-the-spoof-part-1-parent-process-id-spoofing/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Process Doppelgänging&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf&#34;&gt;https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/techniques/T1055/013/&#34;&gt;https://attack.mitre.org/techniques/T1055/013/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/&#34;&gt;https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Process Ghosting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.elastic.co/blog/process-ghosting-a-new-executable-image-tampering-attack&#34;&gt;https://www.elastic.co/blog/process-ghosting-a-new-executable-image-tampering-attack&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.hackingarticles.in/process-ghosting-attack/&#34;&gt;https://www.hackingarticles.in/process-ghosting-attack/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Process Hollowing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/techniques/T1055/012/&#34;&gt;https://attack.mitre.org/techniques/T1055/012/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.ired.team/offensive-security/code-injection-process-injection/process-hollowing-and-pe-image-relocations&#34;&gt;https://www.ired.team/offensive-security/code-injection-process-injection/process-hollowing-and-pe-image-relocations&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ghostly Hollowing and Transacted Hollowing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hasherezade/transacted_hollowing&#34;&gt;https://github.com/hasherezade/transacted_hollowing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for your research:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Tal Liberman (&lt;a href=&#34;https://twitter.com/tal_liberman&#34;&gt;@tal_liberman&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Eugene Kogan (&lt;a href=&#34;https://twitter.com/EuKogan&#34;&gt;@EuKogan&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;hasherezade (&lt;a href=&#34;https://twitter.com/hasherezade&#34;&gt;@hasherezade&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gabriel Landau (&lt;a href=&#34;https://twitter.com/GabrielLandau&#34;&gt;@GabrielLandau&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Suprcode/mir-eternal</title>
    <updated>2022-09-18T01:44:45Z</updated>
    <id>tag:github.com,2022-09-18:/Suprcode/mir-eternal</id>
    <link href="https://github.com/Suprcode/mir-eternal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mir Eternal Files&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/accountserver-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/accountserver-build.yml/badge.svg?branch=main&#34; alt=&#34;AccountServer Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/gameserver-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/gameserver-build.yml/badge.svg?sanitize=true&#34; alt=&#34;GameServer Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/launcher-build.yml&#34;&gt;&lt;img src=&#34;https://github.com/Suprcode/mir-eternal/actions/workflows/launcher-build.yml/badge.svg?sanitize=true&#34; alt=&#34;Launcher Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help us to continue maintaining the project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=SYTUMJ7742MRC&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Suprcode/mir-eternal/main/docs/paypal-donate-button.png&#34; alt=&#34;Donate with paypal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;If you have problems donating, try this other option&lt;/em&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://paypal.me/armifer&#34;&gt;http://paypal.me/armifer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Info&lt;/h2&gt; &#xA;&lt;p&gt;Originally, these sources were published on LOMCN in the following post: &lt;a href=&#34;https://www.lomcn.org/forum/threads/legend-of-mir-3d-emu-source-code.108580/&#34;&gt;https://www.lomcn.org/forum/threads/legend-of-mir-3d-emu-source-code.108580/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this repository, we have done a refactoring, translation and correction work from the mentioned source.&lt;/p&gt; &#xA;&lt;h2&gt;How to start&lt;/h2&gt; &#xA;&lt;h3&gt;Client &amp;amp; Launcher Configuration&lt;/h3&gt; &#xA;&lt;p&gt;First, a compatible client will need to be downloaded, for example: &lt;a href=&#34;https://cq.dorado.sdo.com/downloader/cqyh_10340_downloader.exe&#34;&gt;https://cq.dorado.sdo.com/downloader/cqyh_10340_downloader.exe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest version still compatible with this files &lt;strong&gt;[1.0.3.64]&lt;/strong&gt; at 25/08/22!&lt;/p&gt; &#xA;&lt;p&gt;Once downloaded, you will need to copy the compiled binaries of the launcher to the root of the folder.&lt;/p&gt; &#xA;&lt;p&gt;In launcher there is a configuration file called &#34;ServerCfg.txt&#34;. In this file we must put our WAN IP and the AccountServer port (by default 7000), eg:&lt;/p&gt; &#xA;&lt;p&gt;If it is locally: &lt;code&gt;127.0.0.1:7000&lt;/code&gt; If it is WAN: &lt;code&gt;&amp;lt;public_ip&amp;gt;:7000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Account Server Configuration&lt;/h3&gt; &#xA;&lt;p&gt;We will have to create a file in the root of the account server called &#34;server&#34; in which we will include a list of the GS that we will have raised, by default we will only have one, so we will have something like the following:&lt;/p&gt; &#xA;&lt;p&gt;If it is locally: &lt;code&gt;127.0.0.1,8701/&amp;lt;ServerName&amp;gt;&lt;/code&gt; If it is WAN: &lt;code&gt;&amp;lt;public_ip&amp;gt;,8701/&amp;lt;ServerName&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Game Server Configuration&lt;/h3&gt; &#xA;&lt;p&gt;We must copy a valid system database in the &#34;Database/System&#34; folder.&lt;/p&gt; &#xA;&lt;p&gt;It does not require changing the default config.&lt;/p&gt; &#xA;&lt;p&gt;To publish on the internet, you must open ports 7000 and 8701 on your router&lt;/p&gt; &#xA;&lt;h3&gt;Network Communication Diagram&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Suprcode/mir-eternal/main/docs/mir-network.png&#34; alt=&#34;Mir Network&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Special Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CraZyEriK&lt;/li&gt; &#xA; &lt;li&gt;Wincha&lt;/li&gt; &#xA; &lt;li&gt;Lilcooldoode&lt;/li&gt; &#xA; &lt;li&gt;Far&lt;/li&gt; &#xA; &lt;li&gt;Armifer (ElAmO)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>