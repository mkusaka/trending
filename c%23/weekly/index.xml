<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-18T01:36:00Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mini-software/MiniExcel</title>
    <updated>2024-08-18T01:36:00Z</updated>
    <id>tag:github.com,2024-08-18:/mini-software/MiniExcel</id>
    <link href="https://github.com/mini-software/MiniExcel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, Low-Memory, Easy Excel .NET helper to import/export/template spreadsheet (support Linux, Mac)&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/MiniExcel&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/MiniExcel.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/MiniExcel&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/MiniExcel.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/shps951023/miniexcel/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/b2vustrwsuqx45f4/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitee.com/dotnetchina/MiniExcel&#34;&gt;&lt;img src=&#34;https://gitee.com/dotnetchina/MiniExcel/badge/star.svg?sanitize=true&#34; alt=&#34;star&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shps951023/MiniExcel&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/shps951023/MiniExcel?logo=github&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/MiniExcel&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/.NET-%3E%3D%204.5-red.svg?sanitize=true&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.dotnetfoundation.org/&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://github.com/dotnet-foundation/swag/raw/main/logo/dotnetfoundation_v4.png?raw=true&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;This project is part of the &lt;a href=&#34;https://www.dotnetfoundation.org/&#34;&gt;.NET Foundation&lt;/a&gt; and operates under their &lt;a href=&#34;https://www.dotnetfoundation.org/code-of-conduct&#34;&gt;code of conduct&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/README.zh-Hant.md&#34;&gt;繁體中文&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Your &#xA; &lt;a href=&#34;https://github.com/shps951023/MiniExcel&#34;&gt;Star&lt;/a&gt; and &#xA; &lt;a href=&#34;https://miniexcel.github.io&#34;&gt;Donate&lt;/a&gt; can make MiniExcel better &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;MiniExcel is simple and efficient to avoid OOM&#39;s .NET processing Excel tool.&lt;/p&gt; &#xA;&lt;p&gt;At present, most popular frameworks need to load all the data into the memory to facilitate operation, but it will cause memory consumption problems. MiniExcel tries to use algorithm from a stream to reduce the original 1000 MB occupation to a few MB to avoid OOM(out of memory).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/113086657-ab8bd000-9214-11eb-9563-c970ac1ee35e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Low memory consumption, avoid OOM (out of memory) and full GC&lt;/li&gt; &#xA; &lt;li&gt;Support &lt;code&gt;real-time&lt;/code&gt; operation of each row of data&lt;/li&gt; &#xA; &lt;li&gt;Support LINQ deferred execution, it can do low-consumption, fast paging and other complex queries&lt;/li&gt; &#xA; &lt;li&gt;Lightweight, without Microsoft Office installed, no COM+, DLL size is less than 150KB&lt;/li&gt; &#xA; &lt;li&gt;Easy API style to read/write/fill excel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Get Started&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/#getstart1&#34;&gt;Import/Query Excel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/#getstart2&#34;&gt;Export/Create Excel&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/#getstart3&#34;&gt;Excel Template&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/#getstart4&#34;&gt;Excel Column Name/Index/Ignore Attribute&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/#getstart5&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install the package &lt;a href=&#34;https://www.nuget.org/packages/MiniExcel&#34;&gt;from NuGet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Release Notes&lt;/h3&gt; &#xA;&lt;p&gt;Please Check &lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs&#34;&gt;Release Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;p&gt;Please Check &lt;a href=&#34;https://github.com/shps951023/MiniExcel/projects/1?fullscreen=true&#34;&gt;TODO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;Benchmarks logic can be found in &lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Program.cs&#34;&gt;MiniExcel.Benchmarks&lt;/a&gt; , and test cli&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet run -p .\benchmarks\MiniExcel.Benchmarks\ -c Release -f netcoreapp3.1 -- -f * --join&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output from the latest run is :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042&#xA;Intel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores&#xA;  [Host]     : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT&#xA;  Job-ZYYABG : .NET Framework 4.8 (4.8.4341.0), X64 RyuJIT&#xA;IterationCount=3  LaunchCount=3  WarmupCount=3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Benchmark History : &lt;a href=&#34;https://github.com/shps951023/MiniExcel/issues/276&#34;&gt;Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Import/Query Excel&lt;/h4&gt; &#xA;&lt;p&gt;Logic : &lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/benchmarks/MiniExcel.Benchmarks/Test1%2C000%2C000x10.xlsx&#34;&gt;&lt;strong&gt;Test1,000,000x10.xlsx&lt;/strong&gt;&lt;/a&gt; as performance test basic file, 1,000,000 rows * 10 columns &#34;HelloWorld&#34; cells, 23 MB file size&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Max Memory Usage&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniExcel&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;MiniExcel QueryFirst&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.109 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0007264 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ExcelDataReader&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;ExcelDataReader QueryFirst&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15.24 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10.66421 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniExcel&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;MiniExcel Query&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17.3 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;14.17933 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ExcelDataReader&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;ExcelDataReader Query&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17.3 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;22.56508 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Epplus&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;Epplus QueryFirst&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,452 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;18.19801 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Epplus&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;Epplus Query&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,451 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;23.64747 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenXmlSDK&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;OpenXmlSDK Query&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,412 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52.00327 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenXmlSDK&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;OpenXmlSDK QueryFirst&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,413 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52.34865 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ClosedXml&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;ClosedXml QueryFirst&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2,158 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;66.18897 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ClosedXml&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;ClosedXml Query&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2,184 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;191.43412 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Export/Create Excel&lt;/h4&gt; &#xA;&lt;p&gt;Logic : create a total of 10,000,000 &#34;HelloWorld&#34; excel&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Method&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Max Memory Usage&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniExcel&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;MiniExcel Create Xlsx&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;11.53181 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Epplus&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;Epplus Create Xlsx&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,204 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;22.50971 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenXmlSdk&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;OpenXmlSdk Create Xlsx&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2,621 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;42.47399 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ClosedXml&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&#39;ClosedXml Create Xlsx&#39;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7,141 MB&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;140.93992 sec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Excel Query/Import &lt;a name=&#34;getstart1&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;1. Execute a query and map the results to a strongly typed IEnumerable &lt;a href=&#34;https://dotnetfiddle.net/w5WD1J&#34;&gt;[Try it]&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Recommand to use Stream.Query because of better efficiency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class UserAccount&#xA;{&#xA;    public Guid ID { get; set; }&#xA;    public string Name { get; set; }&#xA;    public DateTime BoD { get; set; }&#xA;    public int Age { get; set; }&#xA;    public bool VIP { get; set; }&#xA;    public decimal Points { get; set; }&#xA;}&#xA;&#xA;var rows = MiniExcel.Query&amp;lt;UserAccount&amp;gt;(path);&#xA;&#xA;// or&#xA;&#xA;using (var stream = File.OpenRead(path))&#xA;    var rows = stream.Query&amp;lt;UserAccount&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/111107423-c8c46b80-8591-11eb-982f-c97a2dafb379.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;2. Execute a query and map it to a list of dynamic objects without using head &lt;a href=&#34;https://dotnetfiddle.net/w5WD1J&#34;&gt;[Try it]&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dynamic key is &lt;code&gt;A.B.C.D..&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;MiniExcel&lt;/th&gt; &#xA;   &lt;th&gt;1&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;var rows = MiniExcel.Query(path).ToList();&#xA;&#xA;// or&#xA;using (var stream = File.OpenRead(path))&#xA;{&#xA;    var rows = stream.Query().ToList();&#xA;&#xA;    Assert.Equal(&#34;MiniExcel&#34;, rows[0].A);&#xA;    Assert.Equal(1, rows[0].B);&#xA;    Assert.Equal(&#34;Github&#34;, rows[1].A);&#xA;    Assert.Equal(2, rows[1].B);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Execute a query with first header row &lt;a href=&#34;https://dotnetfiddle.net/w5WD1J&#34;&gt;[Try it]&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;note : same column name use last right one&lt;/p&gt; &#xA;&lt;p&gt;Input Excel :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column1&lt;/th&gt; &#xA;   &lt;th&gt;Column2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniExcel&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;&#xA;var rows = MiniExcel.Query(useHeaderRow:true).ToList();&#xA;&#xA;// or&#xA;&#xA;using (var stream = File.OpenRead(path))&#xA;{&#xA;    var rows = stream.Query(useHeaderRow:true).ToList();&#xA;&#xA;    Assert.Equal(&#34;MiniExcel&#34;, rows[0].Column1);&#xA;    Assert.Equal(1, rows[0].Column2);&#xA;    Assert.Equal(&#34;Github&#34;, rows[1].Column1);&#xA;    Assert.Equal(2, rows[1].Column2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Query Support LINQ Extension First/Take/Skip ...etc&lt;/h4&gt; &#xA;&lt;p&gt;Query First&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var row = MiniExcel.Query(path).First();&#xA;Assert.Equal(&#34;HelloWorld&#34;, row.A);&#xA;&#xA;// or&#xA;&#xA;using (var stream = File.OpenRead(path))&#xA;{&#xA;    var row = stream.Query().First();&#xA;    Assert.Equal(&#34;HelloWorld&#34;, row.A);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performance between MiniExcel/ExcelDataReader/ClosedXML/EPPlus &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/111072392-6037a900-8515-11eb-9693-5ce2dad1e460.gif&#34; alt=&#34;queryfirst&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;5. Query by sheet name&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;MiniExcel.Query(path, sheetName: &#34;SheetName&#34;);&#xA;//or&#xA;stream.Query(sheetName: &#34;SheetName&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Query all sheet name and rows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var sheetNames = MiniExcel.GetSheetNames(path);&#xA;foreach (var sheetName in sheetNames)&#xA;{&#xA;    var rows = MiniExcel.Query(path, sheetName: sheetName);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. Get Columns&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var columns = MiniExcel.GetColumns(path); // e.g result : [&#34;A&#34;,&#34;B&#34;...]&#xA;&#xA;var cnt = columns.Count;  // get column count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8. Dynamic Query cast row to &lt;code&gt;IDictionary&amp;lt;string,object&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;foreach(IDictionary&amp;lt;string,object&amp;gt; row in MiniExcel.Query(path))&#xA;{&#xA;    //..&#xA;}&#xA;&#xA;// or&#xA;var rows = MiniExcel.Query(path).Cast&amp;lt;IDictionary&amp;lt;string,object&amp;gt;&amp;gt;();&#xA;// or Query specified ranges (capitalized)&#xA;// A2 represents the second row of column A, C3 represents the third row of column C&#xA;// If you don&#39;t want to restrict rows, just don&#39;t include numbers&#xA;var rows = MiniExcel.QueryRange(path, startCell: &#34;A2&#34;, endCell: &#34;C3&#34;).Cast&amp;lt;IDictionary&amp;lt;string, object&amp;gt;&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;9. Query Excel return DataTable&lt;/h4&gt; &#xA;&lt;p&gt;Not recommended, because DataTable will load all data into memory and lose MiniExcel&#39;s low memory consumption feature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;var table = MiniExcel.QueryAsDataTable(path, useHeaderRow: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/116673475-07917200-a9d6-11eb-947e-a6f68cce58df.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;10. Specify the cell to start reading data&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;MiniExcel.Query(path,useHeaderRow:true,startCell:&#34;B3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/117260316-8593c400-ae81-11eb-9877-c087b7ac2b01.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;11. Fill Merged Cells&lt;/h4&gt; &#xA;&lt;p&gt;Note: The efficiency is slower compared to &lt;code&gt;not using merge fill&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reason: The OpenXml standard puts mergeCells at the bottom of the file, which leads to the need to foreach the sheetxml twice&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    var config = new OpenXmlConfiguration()&#xA;    {&#xA;        FillMergedCells = true&#xA;    };&#xA;    var rows = MiniExcel.Query(path, configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/117973630-3527d500-b35f-11eb-95c3-bde255f8114e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;support variable length and width multi-row and column filling&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/117973820-6d2f1800-b35f-11eb-88d8-555063938108.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;12. Reading big file by disk-base cache (Disk-Base Cache - SharedString)&lt;/h4&gt; &#xA;&lt;p&gt;If the SharedStrings size exceeds 5 MB, MiniExcel default will use local disk cache, e.g, &lt;a href=&#34;https://github.com/MiniExcel/MiniExcel/files/8403819/NotDuplicateSharedStrings_10x100000.xlsx&#34;&gt;10x100000.xlsx&lt;/a&gt;(one million rows data), when disable disk cache the maximum memory usage is 195MB, but able disk cache only needs 65MB. Note, this optimization needs some efficiency cost, so this case will increase reading time from 7.4 seconds to 27.2 seconds, If you don&#39;t need it that you can disable disk cache with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new OpenXmlConfiguration { EnableSharedStringCache = false };&#xA;MiniExcel.Query(path,configuration: config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;SharedStringCacheSize &lt;/code&gt; to change the sharedString file size beyond the specified size for disk caching&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new OpenXmlConfiguration { SharedStringCacheSize=500*1024*1024 };&#xA;MiniExcel.Query(path, configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/161411851-1c3f72a7-33b3-4944-84dc-ffc1d16747dd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/161411825-17f53ec7-bef4-4b16-b234-e24799ea41b0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Create/Export Excel &lt;a name=&#34;getstart2&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Must be a non-abstract type with a public parameterless constructor .&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MiniExcel support parameter IEnumerable Deferred Execution, If you want to use least memory, please do not call methods such as ToList&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;e.g : ToList or not memory usage &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/112587389-752b0b00-8e38-11eb-8a52-cfb76c57e5eb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1. Anonymous or strongly type &lt;a href=&#34;https://dotnetfiddle.net/w5WD1J&#34;&gt;[Try it]&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var path = Path.Combine(Path.GetTempPath(), $&#34;{Guid.NewGuid()}.xlsx&#34;);&#xA;MiniExcel.SaveAs(path, new[] {&#xA;    new { Column1 = &#34;MiniExcel&#34;, Column2 = 1 },&#xA;    new { Column1 = &#34;Github&#34;, Column2 = 2}&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. &lt;code&gt;IEnumerable&amp;lt;IDictionary&amp;lt;string, object&amp;gt;&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var values = new List&amp;lt;Dictionary&amp;lt;string, object&amp;gt;&amp;gt;()&#xA;{&#xA;    new Dictionary&amp;lt;string,object&amp;gt;{{ &#34;Column1&#34;, &#34;MiniExcel&#34; }, { &#34;Column2&#34;, 1 } },&#xA;    new Dictionary&amp;lt;string,object&amp;gt;{{ &#34;Column1&#34;, &#34;Github&#34; }, { &#34;Column2&#34;, 2 } }&#xA;};&#xA;MiniExcel.SaveAs(path, values);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create File Result :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column1&lt;/th&gt; &#xA;   &lt;th&gt;Column2&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniExcel&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;3. IDataReader&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Recommended&lt;/code&gt;, it can avoid to load all data into memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;MiniExcel.SaveAs(path, reader);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/121275378-149a5e80-c8bc-11eb-85fe-5453552134f0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;DataReader export multiple sheets (recommand by Dapper ExecuteReader)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var cnn = Connection)&#xA;{&#xA;    cnn.Open();&#xA;    var sheets = new Dictionary&amp;lt;string,object&amp;gt;();&#xA;    sheets.Add(&#34;sheet1&#34;, cnn.ExecuteReader(&#34;select 1 id&#34;));&#xA;    sheets.Add(&#34;sheet2&#34;, cnn.ExecuteReader(&#34;select 2 id&#34;));&#xA;    MiniExcel.SaveAs(&#34;Demo.xlsx&#34;, sheets);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Datatable&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Not recommended&lt;/code&gt;, it will load all data into memory&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;DataTable use Caption for column name first, then use columname&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var path = Path.Combine(Path.GetTempPath(), $&#34;{Guid.NewGuid()}.xlsx&#34;);&#xA;var table = new DataTable();&#xA;{&#xA;    table.Columns.Add(&#34;Column1&#34;, typeof(string));&#xA;    table.Columns.Add(&#34;Column2&#34;, typeof(decimal));&#xA;    table.Rows.Add(&#34;MiniExcel&#34;, 1);&#xA;    table.Rows.Add(&#34;Github&#34;, 2);&#xA;}&#xA;&#xA;MiniExcel.SaveAs(path, table);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Dapper Query&lt;/h4&gt; &#xA;&lt;p&gt;Thanks @shaofing #552 , please use &lt;code&gt;CommandDefinition + CommandFlags.NoCache&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var connection = GetConnection(connectionString))&#xA;{&#xA;    var rows = connection.Query(&#xA;        new CommandDefinition(&#xA;            @&#34;select &#39;MiniExcel&#39; as Column1,1 as Column2 union all select &#39;Github&#39;,2&#34;&#xA;            , flags: CommandFlags.NoCache)&#xA;        );&#xA;    // Note: QueryAsync will throw close connection exception&#xA;    MiniExcel.SaveAs(path, rows);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below code will load all data into memory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var connection = GetConnection(connectionString))&#xA;{&#xA;    var rows = connection.Query(@&#34;select &#39;MiniExcel&#39; as Column1,1 as Column2 union all select &#39;Github&#39;,2&#34;);&#xA;    MiniExcel.SaveAs(path, rows);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. SaveAs to MemoryStream &lt;a href=&#34;https://dotnetfiddle.net/JOen0e&#34;&gt;[Try it]&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var stream = new MemoryStream()) //support FileStream,MemoryStream ect.&#xA;{&#xA;    stream.SaveAs(values);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g : api of export excel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public IActionResult DownloadExcel()&#xA;{&#xA;    var values = new[] {&#xA;        new { Column1 = &#34;MiniExcel&#34;, Column2 = 1 },&#xA;        new { Column1 = &#34;Github&#34;, Column2 = 2}&#xA;    };&#xA;&#xA;    var memoryStream = new MemoryStream();&#xA;    memoryStream.SaveAs(values);&#xA;    memoryStream.Seek(0, SeekOrigin.Begin);&#xA;    return new FileStreamResult(memoryStream, &#34;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#34;)&#xA;    {&#xA;        FileDownloadName = &#34;demo.xlsx&#34;&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. Create Multiple Sheets&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 1. Dictionary&amp;lt;string,object&amp;gt;&#xA;var users = new[] { new { Name = &#34;Jack&#34;, Age = 25 }, new { Name = &#34;Mike&#34;, Age = 44 } };&#xA;var department = new[] { new { ID = &#34;01&#34;, Name = &#34;HR&#34; }, new { ID = &#34;02&#34;, Name = &#34;IT&#34; } };&#xA;var sheets = new Dictionary&amp;lt;string, object&amp;gt;&#xA;{&#xA;    [&#34;users&#34;] = users,&#xA;    [&#34;department&#34;] = department&#xA;};&#xA;MiniExcel.SaveAs(path, sheets);&#xA;&#xA;// 2. DataSet&#xA;var sheets = new DataSet();&#xA;sheets.Add(UsersDataTable);&#xA;sheets.Add(DepartmentDataTable);&#xA;//..&#xA;MiniExcel.SaveAs(path, sheets);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/118130875-6e7c4580-b430-11eb-9b82-22f02716bd63.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;8. TableStyles Options&lt;/h4&gt; &#xA;&lt;p&gt;Default style&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/138234373-cfa97109-b71f-4711-b7f5-0eaaa4a0a3a6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Without style configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new OpenXmlConfiguration()&#xA;{&#xA;     TableStyles = TableStyles.None&#xA;};&#xA;MiniExcel.SaveAs(path, value,configuration:config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/118784917-f3e57700-b8c2-11eb-8718-8d955b1bc197.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;9. AutoFilter&lt;/h4&gt; &#xA;&lt;p&gt;Since v0.19.0 &lt;code&gt;OpenXmlConfiguration.AutoFilter&lt;/code&gt; can en/unable AutoFilter , default value is &lt;code&gt;true&lt;/code&gt;, and setting AutoFilter way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;MiniExcel.SaveAs(path, value, configuration: new OpenXmlConfiguration() { AutoFilter = false });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;10. Create Image&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var value = new[] {&#xA;    new { Name=&#34;github&#34;,Image=File.ReadAllBytes(PathHelper.GetFile(&#34;images/github_logo.png&#34;))},&#xA;    new { Name=&#34;google&#34;,Image=File.ReadAllBytes(PathHelper.GetFile(&#34;images/google_logo.png&#34;))},&#xA;    new { Name=&#34;microsoft&#34;,Image=File.ReadAllBytes(PathHelper.GetFile(&#34;images/microsoft_logo.png&#34;))},&#xA;    new { Name=&#34;reddit&#34;,Image=File.ReadAllBytes(PathHelper.GetFile(&#34;images/reddit_logo.png&#34;))},&#xA;    new { Name=&#34;statck_overflow&#34;,Image=File.ReadAllBytes(PathHelper.GetFile(&#34;images/statck_overflow_logo.png&#34;))},&#xA;};&#xA;MiniExcel.SaveAs(path, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/150462383-ad9931b3-ed8d-4221-a1d6-66f799743433.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;11. Byte Array File Export&lt;/h4&gt; &#xA;&lt;p&gt;Since 1.22.0, when value type is &lt;code&gt;byte[]&lt;/code&gt; then system will save file path at cell by default, and when import system can be converted to &lt;code&gt;byte[]&lt;/code&gt;. And if you don&#39;t want to use it, you can set &lt;code&gt;OpenXmlConfiguration.EnableConvertByteArray&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, it can improve the system efficiency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since 1.22.0, when value type is &lt;code&gt;byte[]&lt;/code&gt; then system will save file path at cell by default, and when import system can be converted to &lt;code&gt;byte[]&lt;/code&gt;. And if you don&#39;t want to use it, you can set &lt;code&gt;OpenXmlConfiguration.EnableConvertByteArray&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, it can improve the system efficiency.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/153702334-c3b834f4-6ae4-4ddf-bd4e-e5005d5d8c6a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;12. Merge same cells vertically&lt;/h4&gt; &#xA;&lt;p&gt;This functionality is only supported in &lt;code&gt;xlsx&lt;/code&gt; format and merges cells vertically between @merge and @endmerge tags. You can use @mergelimit to limit boundaries of merging cells vertically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var mergedFilePath = Path.Combine(Path.GetTempPath(), $&#34;{Guid.NewGuid().ToString()}.xlsx&#34;);&#xA;&#xA;var path = @&#34;../../../../../samples/xlsx/TestMergeWithTag.xlsx&#34;;&#xA;&#xA;MiniExcel.MergeSameCells(mergedFilePath, path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var memoryStream = new MemoryStream();&#xA;&#xA;var path = @&#34;../../../../../samples/xlsx/TestMergeWithTag.xlsx&#34;;&#xA;&#xA;memoryStream.MergeSameCells(path);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;File content before and after merge:&lt;/p&gt; &#xA;&lt;p&gt;Without merge limit:&lt;/p&gt; &#xA;&lt;img width=&#34;318&#34; alt=&#34;Screenshot 2023-08-07 at 11 59 24&#34; src=&#34;https://github.com/mini-software/MiniExcel/assets/38832863/49cc96b9-6c35-4bf3-8d43-a9752a15b22e&#34;&gt; &#xA;&lt;img width=&#34;318&#34; alt=&#34;Screenshot 2023-08-07 at 11 59 57&#34; src=&#34;https://github.com/mini-software/MiniExcel/assets/38832863/3fbd529b-3ae6-4bbe-b4d8-2793a5a58010&#34;&gt; &#xA;&lt;p&gt;With merge limit:&lt;/p&gt; &#xA;&lt;img width=&#34;346&#34; alt=&#34;Screenshot 2023-08-08 at 18 21 00&#34; src=&#34;https://github.com/mini-software/MiniExcel/assets/38832863/04049d28-84d5-4c2a-bcff-5847547df5e1&#34;&gt; &#xA;&lt;img width=&#34;346&#34; alt=&#34;Screenshot 2023-08-08 at 18 21 40&#34; src=&#34;https://github.com/mini-software/MiniExcel/assets/38832863/f5cf8957-b0b0-4831-b8fc-8556299235c2&#34;&gt; &#xA;&lt;h4&gt;13. Skip null values&lt;/h4&gt; &#xA;&lt;p&gt;New explicit option to write empty cells for null values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;DataTable dt = new DataTable();&#xA;&#xA;/* ... */&#xA;&#xA;DataRow dr = dt.NewRow();&#xA;&#xA;dr[&#34;Name1&#34;] = &#34;Somebody once&#34;;&#xA;dr[&#34;Name2&#34;] = null;&#xA;dr[&#34;Name3&#34;] = &#34;told me.&#34;;&#xA;&#xA;dt.Rows.Add(dr);&#xA;&#xA;OpenXmlConfiguration configuration = new OpenXmlConfiguration()&#xA;{&#xA;     EnableWriteNullValueCell = true // Default value.&#xA;};&#xA;&#xA;MiniExcel.SaveAs(@&#34;C:\temp\Book1.xlsx&#34;, dt, configuration: configuration);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31481586/241419455-3c0aec8a-4e5f-4d83-b7ec-6572124c165d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;x:row r=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;x:c r=&#34;A2&#34; t =&#34;str&#34; s=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;x:v&amp;gt;Somebody once&amp;lt;/x:v&amp;gt;&#xA;    &amp;lt;/x:c&amp;gt;&#xA;    &amp;lt;x:c r=&#34;B2&#34; s=&#34;2&#34;&amp;gt;&amp;lt;/x:c&amp;gt;&#xA;    &amp;lt;x:c r=&#34;C2&#34; t =&#34;str&#34; s=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;x:v&amp;gt;told me.&amp;lt;/x:v&amp;gt;&#xA;    &amp;lt;/x:c&amp;gt;&#xA;&amp;lt;/x:row&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Previous behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;/* ... */&#xA;&#xA;OpenXmlConfiguration configuration = new OpenXmlConfiguration()&#xA;{&#xA;     EnableWriteNullValueCell = false // Default value is true.&#xA;};&#xA;&#xA;MiniExcel.SaveAs(@&#34;C:\temp\Book1.xlsx&#34;, dt, configuration: configuration);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31481586/241419441-c4f27e8f-3f87-46db-a10f-08665864c874.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;x:row r=&#34;2&#34;&amp;gt;&#xA;    &amp;lt;x:c r=&#34;A2&#34; t =&#34;str&#34; s=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;x:v&amp;gt;Somebody once&amp;lt;/x:v&amp;gt;&#xA;    &amp;lt;/x:c&amp;gt;&#xA;    &amp;lt;x:c r=&#34;B2&#34; t =&#34;str&#34; s=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;x:v&amp;gt;&amp;lt;/x:v&amp;gt;&#xA;    &amp;lt;/x:c&amp;gt;&#xA;    &amp;lt;x:c r=&#34;C2&#34; t =&#34;str&#34; s=&#34;2&#34;&amp;gt;&#xA;        &amp;lt;x:v&amp;gt;told me.&amp;lt;/x:v&amp;gt;&#xA;    &amp;lt;/x:c&amp;gt;&#xA;&amp;lt;/x:row&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Works for null and DBNull values.&lt;/p&gt; &#xA;&lt;h4&gt;14. Freeze Panes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;/* ... */&#xA;&#xA;OpenXmlConfiguration configuration = new OpenXmlConfiguration()&#xA;{&#xA;    FreezeRowCount = 1,     // default is 1&#xA;    FreezeColumnCount = 2   // default is 0&#xA;};&#xA;&#xA;MiniExcel.SaveAs(@&#34;C:\temp\Book1.xlsx&#34;, dt, configuration: configuration);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/freeze-pane-1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fill Data To Excel Template &lt;a name=&#34;getstart3&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The declaration is similar to Vue template &lt;code&gt;{{variable name}}&lt;/code&gt;, or the collection rendering &lt;code&gt;{{collection name.field name}}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Collection rendering support IEnumerable/DataTable/DapperRow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1. Basic Fill&lt;/h4&gt; &#xA;&lt;p&gt;Template: &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114537556-ed8d2b00-9c84-11eb-8303-a69f62c41e5b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114537490-d8180100-9c84-11eb-8c69-db58692f3a85.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 1. By POCO&#xA;var value = new&#xA;{&#xA;    Name = &#34;Jack&#34;,&#xA;    CreateDate = new DateTime(2021, 01, 01),&#xA;    VIP = true,&#xA;    Points = 123&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&#xA;&#xA;// 2. By Dictionary&#xA;var value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;{&#xA;    [&#34;Name&#34;] = &#34;Jack&#34;,&#xA;    [&#34;CreateDate&#34;] = new DateTime(2021, 01, 01),&#xA;    [&#34;VIP&#34;] = true,&#xA;    [&#34;Points&#34;] = 123&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. IEnumerable Data Fill&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note1: Use the first IEnumerable of the same column as the basis for filling list&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Template: &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114564652-14f2f080-9ca3-11eb-831f-09e3fedbc5fc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114564204-b2015980-9ca2-11eb-900d-e21249f93f7c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//1. By POCO&#xA;var value = new&#xA;{&#xA;    employees = new[] {&#xA;        new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Lisa&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;John&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Mike&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Neo&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;    }&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&#xA;//2. By Dictionary&#xA;var value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;{&#xA;    [&#34;employees&#34;] = new[] {&#xA;        new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Lisa&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;John&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Mike&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Neo&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;    }&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Complex Data Fill&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Support multi-sheets and using same varible&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Template:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114565255-acf0da00-9ca3-11eb-8a7f-8131b2265ae8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114565329-bf6b1380-9ca3-11eb-85e3-3969e8bf6378.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 1. By POCO&#xA;var value = new&#xA;{&#xA;    title = &#34;FooCompany&#34;,&#xA;    managers = new[] {&#xA;        new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;    },&#xA;    employees = new[] {&#xA;        new {name=&#34;Wade&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Felix&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Eric&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Keaton&#34;,department=&#34;IT&#34;}&#xA;    }&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&#xA;// 2. By Dictionary&#xA;var value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;{&#xA;    [&#34;title&#34;] = &#34;FooCompany&#34;,&#xA;    [&#34;managers&#34;] = new[] {&#xA;        new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;    },&#xA;    [&#34;employees&#34;] = new[] {&#xA;        new {name=&#34;Wade&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Felix&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Eric&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Keaton&#34;,department=&#34;IT&#34;}&#xA;    }&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Fill Big Data Performance&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Using IEnumerable deferred execution not ToList can save max memory usage in MiniExcel&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114577091-5046ec80-9cae-11eb-924b-087c7becf8da.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;5. Cell value auto mapping type&lt;/h4&gt; &#xA;&lt;p&gt;Template&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114802504-64830a80-9dd0-11eb-8d56-8e8c401b3ace.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Result&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114802419-43221e80-9dd0-11eb-9ffe-a2ce34fe7076.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Poco&#xA;{&#xA;    public string @string { get; set; }&#xA;    public int? @int { get; set; }&#xA;    public decimal? @decimal { get; set; }&#xA;    public double? @double { get; set; }&#xA;    public DateTime? datetime { get; set; }&#xA;    public bool? @bool { get; set; }&#xA;    public Guid? Guid { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var poco = new TestIEnumerableTypePoco { @string = &#34;string&#34;, @int = 123, @decimal = decimal.Parse(&#34;123.45&#34;), @double = (double)123.33, @datetime = new DateTime(2021, 4, 1), @bool = true, @Guid = Guid.NewGuid() };&#xA;var value = new&#xA;{&#xA;    Ts = new[] {&#xA;        poco,&#xA;        new TestIEnumerableTypePoco{},&#xA;        null,&#xA;        poco&#xA;    }&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. Example : List Github Projects&lt;/h4&gt; &#xA;&lt;p&gt;Template&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/115068623-12073280-9f25-11eb-9124-f4b3efcdb2a7.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Result&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/115068639-1a5f6d80-9f25-11eb-9f45-27c434d19a78.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var projects = new[]&#xA;{&#xA;    new {Name = &#34;MiniExcel&#34;,Link=&#34;https://github.com/shps951023/MiniExcel&#34;,Star=146, CreateTime=new DateTime(2021,03,01)},&#xA;    new {Name = &#34;HtmlTableHelper&#34;,Link=&#34;https://github.com/shps951023/HtmlTableHelper&#34;,Star=16, CreateTime=new DateTime(2020,02,01)},&#xA;    new {Name = &#34;PocoClassGenerator&#34;,Link=&#34;https://github.com/shps951023/PocoClassGenerator&#34;,Star=16, CreateTime=new DateTime(2019,03,17)}&#xA;};&#xA;var value = new&#xA;{&#xA;    User = &#34;ITWeiHan&#34;,&#xA;    Projects = projects,&#xA;    TotalStar = projects.Sum(s =&amp;gt; s.Star)&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. Grouped Data Fill&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;{&#xA;    [&#34;employees&#34;] = new[] {&#xA;        new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;John&#34;,department=&#34;HR&#34;},&#xA;        new {name=&#34;John&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Neo&#34;,department=&#34;IT&#34;},&#xA;        new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;    }&#xA;};&#xA;await MiniExcel.SaveAsByTemplateAsync(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;1. With &lt;code&gt;@group&lt;/code&gt; tag and with &lt;code&gt;@header&lt;/code&gt; tag&lt;/h5&gt; &#xA;&lt;p&gt;Before&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/218646717-21b9d57a-2be2-4e9a-801b-ae212231d2b4.PNG&#34; alt=&#34;before_with_header&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/218646721-58a7a340-7004-4bc2-af24-cffcb2c20737.PNG&#34; alt=&#34;after_with_header&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;2. With @group tag and without @header tag&lt;/h5&gt; &#xA;&lt;p&gt;Before&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/218646873-b12417fa-801b-4890-8e96-669ed3b43902.PNG&#34; alt=&#34;before_without_header&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/218646872-622461ba-342e-49ee-834f-b91ad9c2dac3.PNG&#34; alt=&#34;after_without_header&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;3. Without @group tag&lt;/h5&gt; &#xA;&lt;p&gt;Before&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/218646975-f52a68eb-e031-43b5-abaa-03b67c052d1a.PNG&#34; alt=&#34;without_group&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/218646974-4a3c0e07-7c66-4088-ad07-b4ad3695b7e1.PNG&#34; alt=&#34;without_group_after&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;8. If/ElseIf/Else Statements inside cell&lt;/h4&gt; &#xA;&lt;p&gt;Rules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Supports DateTime, Double, Int with ==, !=, &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;= operators.&lt;/li&gt; &#xA; &lt;li&gt;Supports String with ==, != operators.&lt;/li&gt; &#xA; &lt;li&gt;Each statement should be new line.&lt;/li&gt; &#xA; &lt;li&gt;Single space should be added before and after operators.&lt;/li&gt; &#xA; &lt;li&gt;There shouldn&#39;t be new line inside of statements.&lt;/li&gt; &#xA; &lt;li&gt;Cell should be in exact format as below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;@if(name == Jack)&#xA;{{employees.name}}&#xA;@elseif(name == Neo)&#xA;Test {{employees.name}}&#xA;@else&#xA;{{employees.department}}&#xA;@endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/235360606-ca654769-ff55-4f5b-98d2-d2ec0edb8173.PNG&#34; alt=&#34;if_before&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38832863/235360609-869bb960-d63d-45ae-8d64-9e8b0d0ab658.PNG&#34; alt=&#34;if_after&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;9. DataTable as parameter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var managers = new DataTable();&#xA;{&#xA;    managers.Columns.Add(&#34;name&#34;);&#xA;    managers.Columns.Add(&#34;department&#34;);&#xA;    managers.Rows.Add(&#34;Jack&#34;, &#34;HR&#34;);&#xA;    managers.Rows.Add(&#34;Loan&#34;, &#34;IT&#34;);&#xA;}&#xA;var value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;{&#xA;    [&#34;title&#34;] = &#34;FooCompany&#34;,&#xA;    [&#34;managers&#34;] = managers,&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;10. Formulas&lt;/h4&gt; &#xA;&lt;h5&gt;1. Example&lt;/h5&gt; &#xA;&lt;p&gt;Prefix your formula with &lt;code&gt;$&lt;/code&gt; and use &lt;code&gt;$enumrowstart&lt;/code&gt; and &lt;code&gt;$enumrowend&lt;/code&gt; to mark references to the enumerable start and end rows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the template is rendered, the &lt;code&gt;$&lt;/code&gt; prefix will be removed and &lt;code&gt;$enumrowstart&lt;/code&gt; and &lt;code&gt;$enumrowend&lt;/code&gt; will be replaced with the start and end row numbers of the enumerable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/docs/images/template-formulas-2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;2. Other Example Formulas:&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$=SUM(C{{$enumrowstart}}:C{{$enumrowend}})&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alt. Average&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$=SUM(C{{$enumrowstart}}:C{{$enumrowend}}) / COUNT(C{{$enumrowstart}}:C{{$enumrowend}})&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Range&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$=MAX(C{{$enumrowstart}}:C{{$enumrowend}}) - MIN(C{{$enumrowstart}}:C{{$enumrowend}})&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;11. Other&lt;/h4&gt; &#xA;&lt;h5&gt;1. Checking template parameter key&lt;/h5&gt; &#xA;&lt;p&gt;Since V1.24.0 , default ignore template missing parameter key and replace it with empty string, &lt;code&gt;IgnoreTemplateParameterMissing&lt;/code&gt; can control throwing exception or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new OpenXmlConfiguration()&#xA;{&#xA;    IgnoreTemplateParameterMissing = false,&#xA;};&#xA;MiniExcel.SaveAsByTemplate(path, templatePath, value, config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/157464332-e316f829-54aa-4c84-a5aa-9aef337b668d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Excel Column Name/Index/Ignore Attribute &lt;a name=&#34;getstart4&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;1. Specify the column name, column index, column ignore&lt;/h4&gt; &#xA;&lt;p&gt;Excel Example&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114230869-3e163700-99ac-11eb-9a90-2039d4b4b313.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ExcelAttributeDemo&#xA;{&#xA;    [ExcelColumnName(&#34;Column1&#34;)]&#xA;    public string Test1 { get; set; }&#xA;    [ExcelColumnName(&#34;Column2&#34;)]&#xA;    public string Test2 { get; set; }&#xA;    [ExcelIgnore]&#xA;    public string Test3 { get; set; }&#xA;    [ExcelColumnIndex(&#34;I&#34;)] // system will convert &#34;I&#34; to 8 index&#xA;    public string Test4 { get; set; }&#xA;    public string Test5 { get; } //wihout set will ignore&#xA;    public string Test6 { get; private set; } //un-public set will ignore&#xA;    [ExcelColumnIndex(3)] // start with 0&#xA;    public string Test7 { get; set; }&#xA;}&#xA;&#xA;var rows = MiniExcel.Query&amp;lt;ExcelAttributeDemo&amp;gt;(path).ToList();&#xA;Assert.Equal(&#34;Column1&#34;, rows[0].Test1);&#xA;Assert.Equal(&#34;Column2&#34;, rows[0].Test2);&#xA;Assert.Null(rows[0].Test3);&#xA;Assert.Equal(&#34;Test7&#34;, rows[0].Test4);&#xA;Assert.Null(rows[0].Test5);&#xA;Assert.Null(rows[0].Test6);&#xA;Assert.Equal(&#34;Test4&#34;, rows[0].Test7);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Custom Format (ExcelFormatAttribute)&lt;/h4&gt; &#xA;&lt;p&gt;Since V0.21.0 support class which contains &lt;code&gt;ToString(string content)&lt;/code&gt; method format&lt;/p&gt; &#xA;&lt;p&gt;Class&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Dto&#xA;{&#xA;    public string Name { get; set; }&#xA;&#xA;    [ExcelFormat(&#34;MMMM dd, yyyy&#34;)]&#xA;    public DateTime InDate { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var value = new Dto[] {&#xA;    new Issue241Dto{ Name=&#34;Jack&#34;,InDate=new DateTime(2021,01,04)},&#xA;    new Issue241Dto{ Name=&#34;Henry&#34;,InDate=new DateTime(2020,04,05)},&#xA;};&#xA;MiniExcel.SaveAs(path, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/118910788-ab2bcd80-b957-11eb-8d42-bfce36621b1b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Query supports custom format conversion&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/118911286-87b55280-b958-11eb-9a88-c8ff403d240a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;3. Set Column Width(ExcelColumnWidthAttribute)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Dto&#xA;{&#xA;    [ExcelColumnWidth(20)]&#xA;    public int ID { get; set; }&#xA;    [ExcelColumnWidth(15.50)]&#xA;    public string Name { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Multiple column names mapping to the same property.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Dto&#xA;{&#xA;    [ExcelColumnName(excelColumnName:&#34;EmployeeNo&#34;,aliases:new[] { &#34;EmpNo&#34;,&#34;No&#34; })]&#xA;    public string Empno { get; set; }&#xA;    public string Name { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute&lt;/h4&gt; &#xA;&lt;p&gt;Since 1.24.0, system supports System.ComponentModel.DisplayNameAttribute = ExcelColumnName.excelColumnNameAttribute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;public class TestIssueI4TXGTDto&#xA;{&#xA;    public int ID { get; set; }&#xA;    public string Name { get; set; }&#xA;    [DisplayName(&#34;Specification&#34;)]&#xA;    public string Spc { get; set; }&#xA;    [DisplayName(&#34;Unit Price&#34;)]&#xA;    public decimal Up { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;6. ExcelColumnAttribute&lt;/h4&gt; &#xA;&lt;p&gt;Since V1.26.0, multiple attributes can be simplified like :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public class TestIssueI4ZYUUDto&#xA;        {&#xA;            [ExcelColumn(Name = &#34;ID&#34;,Index =0)]&#xA;            public string MyProperty { get; set; }&#xA;            [ExcelColumn(Name = &#34;CreateDate&#34;, Index = 1,Format =&#34;yyyy-MM&#34;,Width =100)]&#xA;            public DateTime MyProperty2 { get; set; }&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7. DynamicColumnAttribute&lt;/h4&gt; &#xA;&lt;p&gt;Since V1.26.0, we can set the attributes of Column dynamically&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            var config = new OpenXmlConfiguration&#xA;            {&#xA;                DynamicColumns = new DynamicExcelColumn[] {&#xA;                    new DynamicExcelColumn(&#34;id&#34;){Ignore=true},&#xA;                    new DynamicExcelColumn(&#34;name&#34;){Index=1,Width=10},&#xA;                    new DynamicExcelColumn(&#34;createdate&#34;){Index=0,Format=&#34;yyyy-MM-dd&#34;,Width=15},&#xA;                    new DynamicExcelColumn(&#34;point&#34;){Index=2,Name=&#34;Account Point&#34;},&#xA;                }&#xA;            };&#xA;            var path = PathHelper.GetTempPath();&#xA;            var value = new[] { new { id = 1, name = &#34;Jack&#34;, createdate = new DateTime(2022, 04, 12) ,point = 123.456} };&#xA;            MiniExcel.SaveAs(path, value, configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/164510353-5aecbc4e-c3ce-41e8-b6cf-afd55eb23b68.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;8. DynamicSheetAttribute&lt;/h4&gt; &#xA;&lt;p&gt;Since V1.31.4 we can set the attributes of Sheet dynamically. We can set sheet name and state (visibility).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            var configuration = new OpenXmlConfiguration&#xA;            {&#xA;                DynamicSheets = new DynamicExcelSheet[] {&#xA;                    new DynamicExcelSheet(&#34;usersSheet&#34;) { Name = &#34;Users&#34;, State = SheetState.Visible },&#xA;                    new DynamicExcelSheet(&#34;departmentSheet&#34;) { Name = &#34;Departments&#34;, State = SheetState.Hidden }&#xA;                }&#xA;            };&#xA;&#xA;            var users = new[] { new { Name = &#34;Jack&#34;, Age = 25 }, new { Name = &#34;Mike&#34;, Age = 44 } };&#xA;            var department = new[] { new { ID = &#34;01&#34;, Name = &#34;HR&#34; }, new { ID = &#34;02&#34;, Name = &#34;IT&#34; } };&#xA;            var sheets = new Dictionary&amp;lt;string, object&amp;gt;&#xA;            {&#xA;                [&#34;usersSheet&#34;] = users,&#xA;                [&#34;departmentSheet&#34;] = department&#xA;            };&#xA;&#xA;            var path = PathHelper.GetTempPath();&#xA;            MiniExcel.SaveAs(path, sheets, configuration: configuration);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also use new attribute ExcelSheetAttribute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;   [ExcelSheet(Name = &#34;Departments&#34;, State = SheetState.Hidden)]&#xA;   private class DepartmentDto&#xA;   {&#xA;      [ExcelColumn(Name = &#34;ID&#34;,Index = 0)]&#xA;      public string ID { get; set; }&#xA;      [ExcelColumn(Name = &#34;Name&#34;,Index = 1)]&#xA;      public string Name { get; set; }&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add, Delete, Update&lt;/h3&gt; &#xA;&lt;h4&gt;Add&lt;/h4&gt; &#xA;&lt;p&gt;v1.28.0 support CSV insert N rows data after last row&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Origin&#xA;{&#xA;    var value = new[] {&#xA;          new { ID=1,Name =&#34;Jack&#34;,InDate=new DateTime(2021,01,03)},&#xA;          new { ID=2,Name =&#34;Henry&#34;,InDate=new DateTime(2020,05,03)},&#xA;    };&#xA;    MiniExcel.SaveAs(path, value);&#xA;}&#xA;// Insert 1 rows after last&#xA;{&#xA;    var value = new { ID=3,Name = &#34;Mike&#34;, InDate = new DateTime(2021, 04, 23) };&#xA;    MiniExcel.Insert(path, value);&#xA;}&#xA;// Insert N rows after last&#xA;{&#xA;    var value = new[] {&#xA;          new { ID=4,Name =&#34;Frank&#34;,InDate=new DateTime(2021,06,07)},&#xA;          new { ID=5,Name =&#34;Gloria&#34;,InDate=new DateTime(2022,05,03)},&#xA;    };&#xA;    MiniExcel.Insert(path, value);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/191023733-1e2fa732-db5c-4a3a-9722-b891fe5aa069.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Delete(waiting)&lt;/h4&gt; &#xA;&lt;h4&gt;Update(waiting)&lt;/h4&gt; &#xA;&lt;h3&gt;Excel Type Auto Check &lt;a name=&#34;getstart5&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MiniExcel will check whether it is xlsx or csv based on the &lt;code&gt;file extension&lt;/code&gt; by default, but there may be inaccuracy, please specify it manually.&lt;/li&gt; &#xA; &lt;li&gt;Stream cannot be know from which excel, please specify it manually.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;stream.SaveAs(excelType:ExcelType.CSV);&#xA;//or&#xA;stream.SaveAs(excelType:ExcelType.XLSX);&#xA;//or&#xA;stream.Query(excelType:ExcelType.CSV);&#xA;//or&#xA;stream.Query(excelType:ExcelType.XLSX);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CSV&lt;/h3&gt; &#xA;&lt;h4&gt;Note&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default return &lt;code&gt;string&lt;/code&gt; type, and value will not be converted to numbers or datetime, unless the type is defined by strong typing generic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Custom separator&lt;/h4&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;,&lt;/code&gt; as the separator, you can modify the &lt;code&gt;Seperator&lt;/code&gt; property for customization&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new MiniExcelLibs.Csv.CsvConfiguration()&#xA;{&#xA;    Seperator=&#39;;&#39;&#xA;};&#xA;MiniExcel.SaveAs(path, values,configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since V1.30.1 support function to custom separator (thanks @hyzx86)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new CsvConfiguration()&#xA;{&#xA;    SplitFn = (row) =&amp;gt; Regex.Split(row, $&#34;[\t,](?=(?:[^\&#34;]|\&#34;[^\&#34;]*\&#34;)*$)&#34;)&#xA;        .Select(s =&amp;gt; Regex.Replace(s.Replace(&#34;\&#34;\&#34;&#34;, &#34;\&#34;&#34;), &#34;^\&#34;|\&#34;$&#34;, &#34;&#34;)).ToArray()&#xA;};&#xA;var rows = MiniExcel.Query(path, configuration: config).ToList();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom line break&lt;/h4&gt; &#xA;&lt;p&gt;The default is &lt;code&gt;\r\n&lt;/code&gt; as the newline character, you can modify the &lt;code&gt;NewLine&lt;/code&gt; property for customization&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new MiniExcelLibs.Csv.CsvConfiguration()&#xA;{&#xA;    NewLine=&#39;\n&#39;&#xA;};&#xA;MiniExcel.SaveAs(path, values,configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom coding&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The default encoding is &#34;Detect Encoding From Byte Order Marks&#34; (detectEncodingFromByteOrderMarks: true)&lt;/li&gt; &#xA; &lt;li&gt;f you have custom encoding requirements, please modify the StreamReaderFunc / StreamWriterFunc property&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Read&#xA;var config = new MiniExcelLibs.Csv.CsvConfiguration()&#xA;{&#xA;    StreamReaderFunc = (stream) =&amp;gt; new StreamReader(stream,Encoding.GetEncoding(&#34;gb2312&#34;))&#xA;};&#xA;var rows = MiniExcel.Query(path, true,excelType:ExcelType.CSV,configuration: config);&#xA;&#xA;// Write&#xA;var config = new MiniExcelLibs.Csv.CsvConfiguration()&#xA;{&#xA;    StreamWriterFunc = (stream) =&amp;gt; new StreamWriter(stream, Encoding.GetEncoding(&#34;gb2312&#34;))&#xA;};&#xA;MiniExcel.SaveAs(path, value,excelType:ExcelType.CSV, configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Read empty string as null&lt;/h4&gt; &#xA;&lt;p&gt;By default, empty values are mapped to string.Empty. You can modify this behavior&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new MiniExcelLibs.Csv.CsvConfiguration()&#xA;{&#xA;   ReadEmptyStringAsNull = true&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DataReader&lt;/h3&gt; &#xA;&lt;h4&gt;1. GetReader&lt;/h4&gt; &#xA;&lt;p&gt;Since 1.23.0, you can GetDataReader&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    using (var reader = MiniExcel.GetReader(path,true))&#xA;    {&#xA;        while (reader.Read())&#xA;        {&#xA;            for (int i = 0; i &amp;lt; reader.FieldCount; i++)&#xA;            {&#xA;                var value = reader.GetValue(i);&#xA;            }&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Async&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.17.0 support Async (thanks isdaniel ( SHIH,BING-SIOU)](&lt;a href=&#34;https://github.com/isdaniel&#34;&gt;https://github.com/isdaniel&lt;/a&gt;))&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static Task SaveAsAsync(string path, object value, bool printHeader = true, string sheetName = &#34;Sheet1&#34;, ExcelType excelType = ExcelType.UNKNOWN, IConfiguration configuration = null)&#xA;public static Task SaveAsAsync(this Stream stream, object value, bool printHeader = true, string sheetName = &#34;Sheet1&#34;, ExcelType excelType = ExcelType.XLSX, IConfiguration configuration = null)&#xA;public static Task&amp;lt;IEnumerable&amp;lt;dynamic&amp;gt;&amp;gt; QueryAsync(string path, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = &#34;A1&#34;, IConfiguration configuration = null)&#xA;public static Task&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt; QueryAsync&amp;lt;T&amp;gt;(this Stream stream, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = &#34;A1&#34;, IConfiguration configuration = null) where T : class, new()&#xA;public static Task&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt; QueryAsync&amp;lt;T&amp;gt;(string path, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = &#34;A1&#34;, IConfiguration configuration = null) where T : class, new()&#xA;public static Task&amp;lt;IEnumerable&amp;lt;IDictionary&amp;lt;string, object&amp;gt;&amp;gt;&amp;gt; QueryAsync(this Stream stream, bool useHeaderRow = false, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = &#34;A1&#34;, IConfiguration configuration = null)&#xA;public static Task SaveAsByTemplateAsync(this Stream stream, string templatePath, object value)&#xA;public static Task SaveAsByTemplateAsync(this Stream stream, byte[] templateBytes, object value)&#xA;public static Task SaveAsByTemplateAsync(string path, string templatePath, object value)&#xA;public static Task SaveAsByTemplateAsync(string path, byte[] templateBytes, object value)&#xA;public static Task&amp;lt;DataTable&amp;gt; QueryAsDataTableAsync(string path, bool useHeaderRow = true, string sheetName = null, ExcelType excelType = ExcelType.UNKNOWN, string startCell = &#34;A1&#34;, IConfiguration configuration = null)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1.25.0 support &lt;code&gt;cancellationToken&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;h4&gt;1. Enum&lt;/h4&gt; &#xA;&lt;p&gt;Be sure excel &amp;amp; property name same, system will auto mapping (case insensitive)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/116210595-9784b100-a775-11eb-936f-8e7a8b435961.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since V0.18.0 support Enum Description&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class Dto&#xA;{&#xA;    public string Name { get; set; }&#xA;    public I49RYZUserType UserType { get; set; }&#xA;}&#xA;&#xA;public enum Type&#xA;{&#xA;    [Description(&#34;General User&#34;)]&#xA;    V1,&#xA;    [Description(&#34;General Administrator&#34;)]&#xA;    V2,&#xA;    [Description(&#34;Super Administrator&#34;)]&#xA;    V3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/133116630-27cc7161-099a-48b8-9784-cd1e443af3d1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Since 1.30.0 version support excel Description to Enum , thanks @KaneLeung&lt;/p&gt; &#xA;&lt;h4&gt;2. Convert CSV to XLSX or Convert XLSX to CSV&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;MiniExcel.ConvertXlsxToCsv(xlsxPath, csvPath);&#xA;MiniExcel.ConvertXlsxToCsv(xlsxStream, csvStream);&#xA;MiniExcel.ConvertCsvToXlsx(csvPath, xlsxPath);&#xA;MiniExcel.ConvertCsvToXlsx(csvStream, xlsxStream);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var excelStream = new FileStream(path: filePath, FileMode.Open, FileAccess.Read))&#xA;using (var csvStream = new MemoryStream())&#xA;{&#xA;   MiniExcel.ConvertXlsxToCsv(excelStream, csvStream);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Custom CultureInfo&lt;/h4&gt; &#xA;&lt;p&gt;Since 1.22.0, you can custom CultureInfo like below, system default &lt;code&gt;CultureInfo.InvariantCulture&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new CsvConfiguration()&#xA;{&#xA;    Culture = new CultureInfo(&#34;fr-FR&#34;),&#xA;};&#xA;MiniExcel.SaveAs(path, value, configuration: config);&#xA;&#xA;// or&#xA;MiniExcel.Query(path, configuration: config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Custom Buffer Size&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public abstract class Configuration : IConfiguration&#xA;    {&#xA;        public int BufferSize { get; set; } = 1024 * 512;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. FastMode&lt;/h4&gt; &#xA;&lt;p&gt;System will not control memory, but you can get faster save speed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var config = new OpenXmlConfiguration() { FastMode = true };&#xA;MiniExcel.SaveAs(path, reader,configuration:config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples:&lt;/h3&gt; &#xA;&lt;h4&gt;1. SQLite &amp;amp; Dapper &lt;code&gt;Large Size File&lt;/code&gt; SQL Insert Avoid OOM&lt;/h4&gt; &#xA;&lt;p&gt;note : please don&#39;t call ToList/ToArray methods after Query, it&#39;ll load all data into memory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var connection = new SQLiteConnection(connectionString))&#xA;{&#xA;    connection.Open();&#xA;    using (var transaction = connection.BeginTransaction())&#xA;    using (var stream = File.OpenRead(path))&#xA;    {&#xA;       var rows = stream.Query();&#xA;       foreach (var row in rows)&#xA;             connection.Execute(&#34;insert into T (A,B) values (@A,@B)&#34;, new { row.A, row.B }, transaction: transaction);&#xA;       transaction.Commit();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;performance: &lt;img src=&#34;https://user-images.githubusercontent.com/12729184/111072579-2dda7b80-8516-11eb-9843-c01a1edc88ec.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;2. ASP.NET Core 3.1 or MVC 5 Download/Upload Excel Xlsx API Demo &lt;a href=&#34;https://raw.githubusercontent.com/mini-software/MiniExcel/master/tests/MiniExcel.Tests.AspNetCore&#34;&gt;Try it&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class ApiController : Controller&#xA;{&#xA;    public IActionResult Index()&#xA;    {&#xA;        return new ContentResult&#xA;        {&#xA;            ContentType = &#34;text/html&#34;,&#xA;            StatusCode = (int)HttpStatusCode.OK,&#xA;            Content = @&#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&#xA;&amp;lt;a href=&#39;api/DownloadExcel&#39;&amp;gt;DownloadExcel&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&#xA;&amp;lt;a href=&#39;api/DownloadExcelFromTemplatePath&#39;&amp;gt;DownloadExcelFromTemplatePath&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&#xA;&amp;lt;a href=&#39;api/DownloadExcelFromTemplateBytes&#39;&amp;gt;DownloadExcelFromTemplateBytes&amp;lt;/a&amp;gt;&amp;lt;br&amp;gt;&#xA;&amp;lt;p&amp;gt;Upload Excel&amp;lt;/p&amp;gt;&#xA;&amp;lt;form method=&#39;post&#39; enctype=&#39;multipart/form-data&#39; action=&#39;/api/uploadexcel&#39;&amp;gt;&#xA;    &amp;lt;input type=&#39;file&#39; name=&#39;excel&#39;&amp;gt; &amp;lt;br&amp;gt;&#xA;    &amp;lt;input type=&#39;submit&#39; &amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#xA;        };&#xA;    }&#xA;&#xA;    public IActionResult DownloadExcel()&#xA;    {&#xA;        var values = new[] {&#xA;            new { Column1 = &#34;MiniExcel&#34;, Column2 = 1 },&#xA;            new { Column1 = &#34;Github&#34;, Column2 = 2}&#xA;        };&#xA;        var memoryStream = new MemoryStream();&#xA;        memoryStream.SaveAs(values);&#xA;        memoryStream.Seek(0, SeekOrigin.Begin);&#xA;        return new FileStreamResult(memoryStream, &#34;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#34;)&#xA;        {&#xA;            FileDownloadName = &#34;demo.xlsx&#34;&#xA;        };&#xA;    }&#xA;&#xA;    public IActionResult DownloadExcelFromTemplatePath()&#xA;    {&#xA;        string templatePath = &#34;TestTemplateComplex.xlsx&#34;;&#xA;&#xA;        Dictionary&amp;lt;string, object&amp;gt; value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;        {&#xA;            [&#34;title&#34;] = &#34;FooCompany&#34;,&#xA;            [&#34;managers&#34;] = new[] {&#xA;                new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;                new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;            },&#xA;            [&#34;employees&#34;] = new[] {&#xA;                new {name=&#34;Wade&#34;,department=&#34;HR&#34;},&#xA;                new {name=&#34;Felix&#34;,department=&#34;HR&#34;},&#xA;                new {name=&#34;Eric&#34;,department=&#34;IT&#34;},&#xA;                new {name=&#34;Keaton&#34;,department=&#34;IT&#34;}&#xA;            }&#xA;        };&#xA;&#xA;        MemoryStream memoryStream = new MemoryStream();&#xA;        memoryStream.SaveAsByTemplate(templatePath, value);&#xA;        memoryStream.Seek(0, SeekOrigin.Begin);&#xA;        return new FileStreamResult(memoryStream, &#34;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#34;)&#xA;        {&#xA;            FileDownloadName = &#34;demo.xlsx&#34;&#xA;        };&#xA;    }&#xA;&#xA;    private static Dictionary&amp;lt;string, Byte[]&amp;gt; TemplateBytesCache = new Dictionary&amp;lt;string, byte[]&amp;gt;();&#xA;&#xA;    static ApiController()&#xA;    {&#xA;        string templatePath = &#34;TestTemplateComplex.xlsx&#34;;&#xA;        byte[] bytes = System.IO.File.ReadAllBytes(templatePath);&#xA;        TemplateBytesCache.Add(templatePath, bytes);&#xA;    }&#xA;&#xA;    public IActionResult DownloadExcelFromTemplateBytes()&#xA;    {&#xA;        byte[] bytes = TemplateBytesCache[&#34;TestTemplateComplex.xlsx&#34;];&#xA;&#xA;        Dictionary&amp;lt;string, object&amp;gt; value = new Dictionary&amp;lt;string, object&amp;gt;()&#xA;        {&#xA;            [&#34;title&#34;] = &#34;FooCompany&#34;,&#xA;            [&#34;managers&#34;] = new[] {&#xA;                new {name=&#34;Jack&#34;,department=&#34;HR&#34;},&#xA;                new {name=&#34;Loan&#34;,department=&#34;IT&#34;}&#xA;            },&#xA;            [&#34;employees&#34;] = new[] {&#xA;                new {name=&#34;Wade&#34;,department=&#34;HR&#34;},&#xA;                new {name=&#34;Felix&#34;,department=&#34;HR&#34;},&#xA;                new {name=&#34;Eric&#34;,department=&#34;IT&#34;},&#xA;                new {name=&#34;Keaton&#34;,department=&#34;IT&#34;}&#xA;            }&#xA;        };&#xA;&#xA;        MemoryStream memoryStream = new MemoryStream();&#xA;        memoryStream.SaveAsByTemplate(bytes, value);&#xA;        memoryStream.Seek(0, SeekOrigin.Begin);&#xA;        return new FileStreamResult(memoryStream, &#34;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#34;)&#xA;        {&#xA;            FileDownloadName = &#34;demo.xlsx&#34;&#xA;        };&#xA;    }&#xA;&#xA;    public IActionResult UploadExcel(IFormFile excel)&#xA;    {&#xA;        var stream = new MemoryStream();&#xA;        excel.CopyTo(stream);&#xA;&#xA;        foreach (var item in stream.Query(true))&#xA;        {&#xA;            // do your logic etc.&#xA;        }&#xA;&#xA;        return Ok(&#34;File uploaded successfully&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Paging Query&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void Main()&#xA;{&#xA;    var rows = MiniExcel.Query(path);&#xA;&#xA;    Console.WriteLine(&#34;==== No.1 Page ====&#34;);&#xA;    Console.WriteLine(Page(rows,pageSize:3,page:1));&#xA;    Console.WriteLine(&#34;==== No.50 Page ====&#34;);&#xA;    Console.WriteLine(Page(rows,pageSize:3,page:50));&#xA;    Console.WriteLine(&#34;==== No.5000 Page ====&#34;);&#xA;    Console.WriteLine(Page(rows,pageSize:3,page:5000));&#xA;}&#xA;&#xA;public static IEnumerable&amp;lt;T&amp;gt; Page&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; en, int pageSize, int page)&#xA;{&#xA;    return en.Skip(page * pageSize).Take(pageSize);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/114679083-6ef4c400-9d3e-11eb-9f78-a86daa45fe46.gif&#34; alt=&#34;20210419&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;4. WebForm export Excel by memorystream&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var fileName = &#34;Demo.xlsx&#34;;&#xA;var sheetName = &#34;Sheet1&#34;;&#xA;HttpResponse response = HttpContext.Current.Response;&#xA;response.Clear();&#xA;response.ContentType = &#34;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#34;;&#xA;response.AddHeader(&#34;Content-Disposition&#34;, $&#34;attachment;filename=\&#34;{fileName}\&#34;&#34;);&#xA;var values = new[] {&#xA;    new { Column1 = &#34;MiniExcel&#34;, Column2 = 1 },&#xA;    new { Column1 = &#34;Github&#34;, Column2 = 2}&#xA;};&#xA;var memoryStream = new MemoryStream();&#xA;memoryStream.SaveAs(values, sheetName: sheetName);&#xA;memoryStream.Seek(0, SeekOrigin.Begin);&#xA;memoryStream.CopyTo(Response.OutputStream);&#xA;response.End();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Dynamic i18n multi-language and role authority management&lt;/h4&gt; &#xA;&lt;p&gt;Like the example, create a method to handle i18n and permission management, and use &lt;code&gt;yield return to return IEnumerable&amp;lt;Dictionary&amp;lt;string, object&amp;gt;&amp;gt;&lt;/code&gt; to achieve dynamic and low-memory processing effects&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void Main()&#xA;{&#xA;    var value = new Order[] {&#xA;        new Order(){OrderNo = &#34;SO01&#34;,CustomerID=&#34;C001&#34;,ProductID=&#34;P001&#34;,Qty=100,Amt=500},&#xA;        new Order(){OrderNo = &#34;SO02&#34;,CustomerID=&#34;C002&#34;,ProductID=&#34;P002&#34;,Qty=300,Amt=400},&#xA;    };&#xA;&#xA;    Console.WriteLine(&#34;en-Us and Sales role&#34;);&#xA;    {&#xA;        var path = Path.GetTempPath() + Guid.NewGuid() + &#34;.xlsx&#34;;&#xA;        var lang = &#34;en-US&#34;;&#xA;        var role = &#34;Sales&#34;;&#xA;        MiniExcel.SaveAs(path, GetOrders(lang, role, value));&#xA;        MiniExcel.Query(path, true).Dump();&#xA;    }&#xA;&#xA;    Console.WriteLine(&#34;zh-CN and PMC role&#34;);&#xA;    {&#xA;        var path = Path.GetTempPath() + Guid.NewGuid() + &#34;.xlsx&#34;;&#xA;        var lang = &#34;zh-CN&#34;;&#xA;        var role = &#34;PMC&#34;;&#xA;        MiniExcel.SaveAs(path, GetOrders(lang, role, value));&#xA;        MiniExcel.Query(path, true).Dump();&#xA;    }&#xA;}&#xA;&#xA;private IEnumerable&amp;lt;Dictionary&amp;lt;string, object&amp;gt;&amp;gt; GetOrders(string lang, string role, Order[] orders)&#xA;{&#xA;    foreach (var order in orders)&#xA;    {&#xA;        var newOrder = new Dictionary&amp;lt;string, object&amp;gt;();&#xA;&#xA;        if (lang == &#34;zh-CN&#34;)&#xA;        {&#xA;            newOrder.Add(&#34;客户编号&#34;, order.CustomerID);&#xA;            newOrder.Add(&#34;订单编号&#34;, order.OrderNo);&#xA;            newOrder.Add(&#34;产品编号&#34;, order.ProductID);&#xA;            newOrder.Add(&#34;数量&#34;, order.Qty);&#xA;            if (role == &#34;Sales&#34;)&#xA;                newOrder.Add(&#34;价格&#34;, order.Amt);&#xA;            yield return newOrder;&#xA;        }&#xA;        else if (lang == &#34;en-US&#34;)&#xA;        {&#xA;            newOrder.Add(&#34;Customer ID&#34;, order.CustomerID);&#xA;            newOrder.Add(&#34;Order No&#34;, order.OrderNo);&#xA;            newOrder.Add(&#34;Product ID&#34;, order.ProductID);&#xA;            newOrder.Add(&#34;Quantity&#34;, order.Qty);&#xA;            if (role == &#34;Sales&#34;)&#xA;                newOrder.Add(&#34;Amount&#34;, order.Amt);&#xA;            yield return newOrder;&#xA;        }&#xA;        else&#xA;        {&#xA;            throw new InvalidDataException($&#34;lang {lang} wrong&#34;);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;public class Order&#xA;{&#xA;    public string OrderNo { get; set; }&#xA;    public string CustomerID { get; set; }&#xA;    public decimal Qty { get; set; }&#xA;    public string ProductID { get; set; }&#xA;    public decimal Amt { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/118939964-d24bc480-b982-11eb-88dd-f06655f6121a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;h4&gt;Q: Excel header title not equal class property name, how to mapping?&lt;/h4&gt; &#xA;&lt;p&gt;A. Please use ExcelColumnName attribute&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/116020475-eac50980-a678-11eb-8804-129e87200e5e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Q. How to query or export multiple-sheets?&lt;/h4&gt; &#xA;&lt;p&gt;A. &lt;code&gt;GetSheetNames&lt;/code&gt; method with Query sheetName parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var sheets = MiniExcel.GetSheetNames(path);&#xA;foreach (var sheet in sheets)&#xA;{&#xA;    Console.WriteLine($&#34;sheet name : {sheet} &#34;);&#xA;    var rows = MiniExcel.Query(path,useHeaderRow:true,sheetName:sheet);&#xA;    Console.WriteLine(rows);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/116199841-2a1f5300-a76a-11eb-90a3-6710561cf6db.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Q. How to query or export information about sheet visibility?&lt;/h4&gt; &#xA;&lt;p&gt;A. &lt;code&gt;GetSheetInformations&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var sheets = MiniExcel.GetSheetInformations(path);&#xA;foreach (var sheetInfo in sheets)&#xA;{&#xA;    Console.WriteLine($&#34;sheet index : {sheetInfo.Index} &#34;); // next sheet index - numbered from 0&#xA;    Console.WriteLine($&#34;sheet name : {sheetInfo.Name} &#34;);   // sheet name&#xA;    Console.WriteLine($&#34;sheet state : {sheetInfo.State} &#34;); // sheet visibility state - visible / hidden&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Q. Whether to use Count will load all data into the memory?&lt;/h4&gt; &#xA;&lt;p&gt;No, the image test has 1 million rows*10 columns of data, the maximum memory usage is &amp;lt;60MB, and it takes 13.65 seconds&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/117118518-70586000-adc3-11eb-9ce3-2ba76cf8b5e5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Q. How does Query use integer indexs?&lt;/h4&gt; &#xA;&lt;p&gt;The default index of Query is the string Key: A,B,C.... If you want to change to numeric index, please create the following method to convert&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;void Main()&#xA;{&#xA;    var path = @&#34;D:\git\MiniExcel\samples\xlsx\TestTypeMapping.xlsx&#34;;&#xA;    var rows = MiniExcel.Query(path,true);&#xA;    foreach (var r in ConvertToIntIndexRows(rows))&#xA;    {&#xA;        Console.Write($&#34;column 0 : {r[0]} ,column 1 : {r[1]}&#34;);&#xA;        Console.WriteLine();&#xA;    }&#xA;}&#xA;&#xA;private IEnumerable&amp;lt;Dictionary&amp;lt;int, object&amp;gt;&amp;gt; ConvertToIntIndexRows(IEnumerable&amp;lt;object&amp;gt; rows)&#xA;{&#xA;    ICollection&amp;lt;string&amp;gt; keys = null;&#xA;    var isFirst = true;&#xA;    foreach (IDictionary&amp;lt;string,object&amp;gt; r in rows)&#xA;    {&#xA;        if(isFirst)&#xA;        {&#xA;            keys = r.Keys;&#xA;            isFirst = false;&#xA;        }&#xA;&#xA;        var dic = new Dictionary&amp;lt;int, object&amp;gt;();&#xA;        var index = 0;&#xA;        foreach (var key in keys)&#xA;            dic[index++] = r[key];&#xA;        yield return dic;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Q. No title empty excel is generated when the value is empty when exporting Excel&lt;/h4&gt; &#xA;&lt;p&gt;Because MiniExcel uses a logic similar to JSON.NET to dynamically get type from values to simplify API operations, type cannot be knew without data. You can check &lt;a href=&#34;https://github.com/shps951023/MiniExcel/issues/133&#34;&gt;issue #133&lt;/a&gt; for understanding.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/122639771-546c0c00-d12e-11eb-800c-498db27889ca.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Strong type &amp;amp; DataTable will generate headers, but Dictionary are still empty Excel&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Q. How to stop the foreach when blank row?&lt;/h4&gt; &#xA;&lt;p&gt;MiniExcel can be used with &lt;code&gt;LINQ TakeWhile&lt;/code&gt; to stop foreach iterator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/130209137-162621c2-f337-4479-9996-beeac65bc4d4.png&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Q. How to remove empty rows?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/137873865-7107d8f5-eb59-42db-903a-44e80589f1b2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;IEnumerable :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static IEnumerable&amp;lt;dynamic&amp;gt; QueryWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)&#xA;{&#xA;    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);&#xA;    foreach (IDictionary&amp;lt;string,object&amp;gt; row in rows)&#xA;    {&#xA;        if(row.Keys.Any(key=&amp;gt;row[key]!=null))&#xA;            yield return row;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DataTable :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public static DataTable QueryAsDataTableWithoutEmptyRow(Stream stream, bool useHeaderRow, string sheetName, ExcelType excelType, string startCell, IConfiguration configuration)&#xA;{&#xA;    if (sheetName == null &amp;amp;&amp;amp; excelType != ExcelType.CSV) /*Issue #279*/&#xA;        sheetName = stream.GetSheetNames().First();&#xA;&#xA;    var dt = new DataTable(sheetName);&#xA;    var first = true;&#xA;    var rows = stream.Query(useHeaderRow,sheetName,excelType,startCell,configuration);&#xA;    foreach (IDictionary&amp;lt;string, object&amp;gt; row in rows)&#xA;    {&#xA;        if (first)&#xA;        {&#xA;&#xA;            foreach (var key in row.Keys)&#xA;            {&#xA;                var column = new DataColumn(key, typeof(object)) { Caption = key };&#xA;                dt.Columns.Add(column);&#xA;            }&#xA;&#xA;            dt.BeginLoadData();&#xA;            first = false;&#xA;        }&#xA;&#xA;        var newRow = dt.NewRow();&#xA;        var isNull=true;&#xA;        foreach (var key in row.Keys)&#xA;        {&#xA;            var _v = row[key];&#xA;            if(_v!=null)&#xA;                isNull = false;&#xA;            newRow[key] = _v;&#xA;        }&#xA;&#xA;        if(!isNull)&#xA;            dt.Rows.Add(newRow);&#xA;    }&#xA;&#xA;    dt.EndLoadData();&#xA;    return dt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Q. How SaveAs(path,value) to replace exists file and without throwing &#34;The file ...xlsx already exists error&#34;&lt;/h4&gt; &#xA;&lt;p&gt;Please use Stream class to custom file creating logic, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;    using (var stream = File.Create(&#34;Demo.xlsx&#34;))&#xA;        MiniExcel.SaveAs(stream,value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, since V1.25.0, SaveAs support overwriteFile parameter for enable/unable overwriting exist file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    MiniExcel.SaveAs(path, value, overwriteFile: true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Limitations and caveats&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not support xls and encrypted file now&lt;/li&gt; &#xA; &lt;li&gt;xlsm only support Query&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ExcelDataReader/ExcelDataReader&#34;&gt;ExcelDataReader&lt;/a&gt; / &lt;a href=&#34;https://github.com/ClosedXML/ClosedXML&#34;&gt;ClosedXML&lt;/a&gt; / &lt;a href=&#34;https://github.com/DapperLib/Dapper&#34;&gt;Dapper&lt;/a&gt; / &lt;a href=&#34;https://github.com/andersnm/ExcelNumberFormat&#34;&gt;ExcelNumberFormat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Thanks&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;Jetbrains&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12729184/123997015-8456c180-da02-11eb-829a-aec476fe8e94.png&#34; alt=&#34;jetbrains-variant-2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks for providing a free All product IDE for this project (&lt;a href=&#34;https://user-images.githubusercontent.com/12729184/123988233-6ab17c00-d9fa-11eb-8739-2a08c6a4a263.png&#34;&gt;License&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Benefit&lt;/h3&gt; &#xA;&lt;p&gt;Link &lt;a href=&#34;https://github.com/mini-software/MiniExcel/issues/560#issue-2080619180&#34;&gt;https://github.com/mini-software/MiniExcel/issues/560#issue-2080619180&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=shps951023/MiniExcel&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>