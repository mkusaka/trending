<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:45:58Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aras-p/UnityGaussianSplatting</title>
    <updated>2023-09-17T01:45:58Z</updated>
    <id>tag:github.com,2023-09-17:/aras-p/UnityGaussianSplatting</id>
    <link href="https://github.com/aras-p/UnityGaussianSplatting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Toy Gaussian Splatting visualization in Unity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toy Gaussian Splatting playground in Unity&lt;/h1&gt; &#xA;&lt;p&gt;SIGGRAPH 2023 had a paper &#34;&lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;&lt;strong&gt;3D Gaussian Splatting for Real-Time Radiance Field Rendering&lt;/strong&gt;&lt;/a&gt;&#34; by Kerbl, Kopanas, Leimkühler, Drettakis that looks pretty cool! Check out their website, source code repository, data sets and so on.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve decided to try to implement the realtime visualization part (i.e. the one that takes already-produced gaussian splat &#34;model&#34; file) in Unity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aras-p/UnityGaussianSplatting/main/Doc/shotOverview.jpg?raw=true&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The original paper code has a purely CUDA-based realtime renderer; other people have done their own implementations (e.g. WebGPU at &lt;a href=&#34;https://github.com/cvlab-epfl/gaussian-splatting-web&#34;&gt;cvlab-epfl&lt;/a&gt;, Taichi at &lt;a href=&#34;https://github.com/wanmeihuali/taichi_3d_gaussian_splatting&#34;&gt;wanmeihuali&lt;/a&gt;, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Code in here so far is randomly cribbled together from reading the paper (as well as earlier literature on EWA splatting), looking at the official CUDA implementation, and so on. Current state:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code does &lt;strong&gt;not&lt;/strong&gt; use the &#34;tile-based splat rasterizer&#34; bit from the paper; it just draws each gaussian splat as a screenspace aligned rectangle that covers the extents of it.&lt;/li&gt; &#xA; &lt;li&gt;Splat color accumulation is done by rendering front-to-back, with a blending mode that results in the same accumulated color as their tile-based renderer.&lt;/li&gt; &#xA; &lt;li&gt;Splat sorting is done with a AMD FidelityFX derived radix sort, or (on DX11) with a GPU bitonic sort that is lifted from Unity HDRP codebase.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note: this is all &lt;em&gt;&lt;strong&gt;a toy&lt;/strong&gt;&lt;/em&gt;, it is not robust, it does not handle errors gracefully, it does not interact or composite well with the &#34;rest of rendering&#34;, it is not fast, etc. etc. Also, do not file bugs or issues just yet; I will most likely just ignore them and do whatever I please. I told you so! &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;First download or clone this repository and open as a Unity (2022.3) project. Note that the project defaults to DX12 on Windows, since then it can use a faster sorting routine (DX11 should also work, but sorting will be slower).&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/aras-p/UnityGaussianSplatting/main/Doc/shotAssetCreator.png&#34; width=&#34;250px&#34;&gt; &#xA;&lt;p&gt;Next up, &lt;strong&gt;create some GaussianSplat assets&lt;/strong&gt;: open &lt;code&gt;Tools -&amp;gt; Gaussian Splats -&amp;gt; Create GaussianSplatAsset&lt;/code&gt; menu within Unity. In the dialog point it to your gaussian splat &#34;model&#34; directory (it is expected to contain &lt;code&gt;cameras.json&lt;/code&gt; and &lt;code&gt;point_cloud/iteration_7000/point_cloud.ply&lt;/code&gt; inside of it, and be an actual Gaussian Splat model, not something else).&lt;/p&gt; &#xA;&lt;p&gt;Pick desired compression options and output folder, and press &#34;Create Asset&#34; button.&lt;/p&gt; &#xA;&lt;p&gt;If everything was fine, there should be a GaussianSplat asset that has a bunch of data images next to it:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/aras-p/UnityGaussianSplatting/main/Doc/shotAsset.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;Since the gaussian splat models are quite large, I have not included any in this Github repo. The original &lt;a href=&#34;https://github.com/graphdeco-inria/gaussian-splatting&#34;&gt;paper github page&lt;/a&gt; has a a link to &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/datasets/pretrained/models.zip&#34;&gt;14GB zip&lt;/a&gt; of their models.&lt;/p&gt; &#xA;&lt;p&gt;In the game object that has a &lt;code&gt;GaussianSplatRenderer&lt;/code&gt; script, &lt;strong&gt;point the Asset field to&lt;/strong&gt; one of your created assets. There are various controls on the script to debug/visualize the data, as well as a slider to move game camera into one of asset&#39;s camera locations.&lt;/p&gt; &#xA;&lt;p&gt;The rendering takes game object transformation matrix into account; the official gaussian splat models seem to be all rotated by about -160 degrees around X axis, and mirrored around Z axis, so in the sample scene the object has such a transform set up, and the camera is setup as a child object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;That&#39;s it!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wishlist that I may or might not do at some point:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make it respect the game object transform&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make rendering faster (actual tiled compute shader rasterizer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Look at ways to make the data sets smaller (both on-disk and in-memory) (&lt;a href=&#34;https://aras-p.info/blog/2023/09/13/Making-Gaussian-Splats-smaller/&#34;&gt;blog post&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate better with &#34;the rest&#34; of rendering that might be in the scene (BiRP)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Maybe look at making it work in URP/HDRP? Not sure yet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Make sorting faster (bitonic -&amp;gt; FidelityFX radix sort)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Write-ups&lt;/h2&gt; &#xA;&lt;p&gt;My own blog posts about all this &lt;em&gt;(so far... not that many!)&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aras-p.info/blog/2023/09/05/Gaussian-Splatting-is-pretty-cool/&#34;&gt;Gaussian Splatting is pretty cool!&lt;/a&gt; (2023 Sep)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aras-p.info/blog/2023/09/13/Making-Gaussian-Splats-smaller/&#34;&gt;Making Gaussian Splats smaller&lt;/a&gt; (2023 Sep)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance numbers:&lt;/h2&gt; &#xA;&lt;p&gt;&#34;bicycle&#34; scene from the paper, with 6.1M splats and first camera in there, rendering at 1200x797 resolution, at &#34;Medium&#34; asset quality level (273MB asset file):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows (NVIDIA RTX 3080 Ti): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Official SBIR viewer: 7.4ms (135FPS). 4.8GB VRAM usage.&lt;/li&gt; &#xA;   &lt;li&gt;Unity, DX12 or Vulkan: 12.6ms (79FPS) - 9.4ms rendering, 2.4ms sorting, 0.7ms splat view calc. 1.2GB VRAM usage.&lt;/li&gt; &#xA;   &lt;li&gt;Unity, DX11: 20.8ms (48FPS) - 9.6ms rendering, 10.4ms sorting, 0.6ms splat view calc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac (Apple M1 Max): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unity, Metal: 31.8ms (31FPS).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Besides the gaussian splat asset that is loaded into GPU memory, currently this also needs about 48 bytes of GPU memory per splat (for sorting, caching view dependent data etc.).&lt;/p&gt; &#xA;&lt;h2&gt;External Code Used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zanders3/json&#34;&gt;zanders3/json&lt;/a&gt;, MIT license, (c) 2018 Alex Parker.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Island&#34; GPU sorting code adapted from &lt;a href=&#34;https://poniesandlight.co.uk/reflect/bitonic_merge_sort/&#34;&gt;Tim Gfrerer blog post&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&#34;Ffx&#34; GPU sorting code is &lt;a href=&#34;https://github.com/GPUOpen-Effects/FidelityFX-ParallelSort&#34;&gt;AMD FidelityFX ParallelSort&lt;/a&gt;, ported to Unity by me.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MonoGame/MonoGame</title>
    <updated>2023-09-17T01:45:58Z</updated>
    <id>tag:github.com,2023-09-17:/MonoGame/MonoGame</id>
    <link href="https://github.com/MonoGame/MonoGame" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One framework for creating powerful cross-platform games.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MonoGame&lt;/h1&gt; &#xA;&lt;p&gt;MonoGame is a simple and powerful .NET framework for creating games for desktop PCs, video game consoles, and mobile devices using the C# programming language. It has been successfully used to create games such as &lt;a href=&#34;https://store.steampowered.com/app/985890/Streets_of_Rage_4/&#34;&gt;Streets of Rage 4&lt;/a&gt;, &lt;a href=&#34;https://store.steampowered.com/app/953490/CARRION/&#34;&gt;Carrion&lt;/a&gt;, &lt;a href=&#34;https://store.steampowered.com/app/504230/Celeste/&#34;&gt;Celeste&lt;/a&gt;, &lt;a href=&#34;https://store.steampowered.com/app/413150/Stardew_Valley/&#34;&gt;Stardew Valley&lt;/a&gt;, and &lt;a href=&#34;https://www.monogame.net/showcase/&#34;&gt;many others&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is an open-source re-implementation of the discontinued &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb200104.aspx&#34;&gt;Microsoft&#39;s XNA Framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/monogame&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/355231098122272778?color=%237289DA&amp;amp;label=MonoGame&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Join the chat at https://discord.gg/monogame&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/#build-status&#34;&gt;Build Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/#supported-platforms&#34;&gt;Supported Platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/#support-and-contributions&#34;&gt;Support and Contributions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/#source-code&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/#helpful-links&#34;&gt;Helpful Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/MonoGame/MonoGame/actions&#34;&gt;GitHub Actions&lt;/a&gt; to automate builds and packages distribution of the latest MonoGame changes. We also rely on a &lt;a href=&#34;http://teamcity.monogame.net/?guest=1&#34;&gt;build server&lt;/a&gt; to run tests in order to avoid regressions. The table below shows the current build status for the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Builds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MonoGame/MonoGame/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/MonoGame/MonoGame/actions/workflows/main.yml/badge.svg?branch=develop&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows Tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://teamcity.monogame.net/viewType.html?buildTypeId=MonoGame_TestWindows&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;http://teamcity.monogame.net/app/rest/builds/buildType:MonoGame_TestWindows/statusIcon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mac Tests&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://teamcity.monogame.net/viewType.html?buildTypeId=MonoGame_TestMac&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;http://teamcity.monogame.net/app/rest/builds/buildType:MonoGame_TestMac/statusIcon&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;We support a growing list of platforms across the desktop, mobile, and console space. If there is a platform we don&#39;t support, please &lt;a href=&#34;https://github.com/MonoGame/MonoGame/issues&#34;&gt;make a request&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/CONTRIBUTING.md&#34;&gt;come help us&lt;/a&gt; add it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Desktop PCs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows 8.1 and up (OpenGL &amp;amp; DirectX)&lt;/li&gt; &#xA;   &lt;li&gt;Windows Store Apps (UWP)&lt;/li&gt; &#xA;   &lt;li&gt;Linux (OpenGL)&lt;/li&gt; &#xA;   &lt;li&gt;macOS 10.15 and up (OpenGL)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mobile/Tablet Devices &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Android 6.0 and up (OpenGL)&lt;/li&gt; &#xA;   &lt;li&gt;iPhone/iPad 10.0 and up (OpenGL)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Consoles (for registered developers) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PlayStation 4&lt;/li&gt; &#xA;   &lt;li&gt;PlayStation 5&lt;/li&gt; &#xA;   &lt;li&gt;Xbox One (both UWP and XDK)&lt;/li&gt; &#xA;   &lt;li&gt;Nintendo Switch&lt;/li&gt; &#xA;   &lt;li&gt;Google Stadia&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support and Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you think you have found a bug or have a feature request, use our &lt;a href=&#34;https://github.com/MonoGame/MonoGame/issues&#34;&gt;issue tracker&lt;/a&gt;. Before opening a new issue, please search to see if your problem has already been reported. Try to be as detailed as possible in your issue reports.&lt;/p&gt; &#xA;&lt;p&gt;If you need help using MonoGame or have other questions we suggest you post on our &lt;a href=&#34;http://community.monogame.net&#34;&gt;community forums&lt;/a&gt;. Please do not use the GitHub issue tracker for personal support requests.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing fixes or features to MonoGame, please read our &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/CONTRIBUTING.md&#34;&gt;contributors guide&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h3&gt;Subscription&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to help the project by supporting us financially, consider supporting us via a subscription for the price of a monthly coffee.&lt;/p&gt; &#xA;&lt;p&gt;Money goes towards hosting, new hardware and if enough people subscribe a dedicated developer.&lt;/p&gt; &#xA;&lt;p&gt;There are several options on our &lt;a href=&#34;http://www.monogame.net/donate/&#34;&gt;Donation Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Source Code&lt;/h2&gt; &#xA;&lt;p&gt;The full source code is available here from GitHub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the source: &lt;code&gt;git clone https://github.com/MonoGame/MonoGame.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up the submodules: &lt;code&gt;git submodule update --init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the solution for your target platform to build the game framework.&lt;/li&gt; &#xA; &lt;li&gt;Open the Tools solution for your development platform to build the pipeline and content tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the prerequisites for building from source, please look at the &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/REQUIREMENTS.md&#34;&gt;Requirements&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;A high level breakdown of the components of the framework:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The game framework is found in &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/MonoGame.Framework&#34;&gt;MonoGame.Framework&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The content pipeline is located in &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/MonoGame.Framework.Content.Pipeline&#34;&gt;MonoGame.Framework.Content.Pipeline&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Project templates are in &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/Templates&#34;&gt;Templates&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/Tests&#34;&gt;Tests&lt;/a&gt; for the framework unit tests.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/Tools/MonoGame.Tools.Tests&#34;&gt;Tools/Tests&lt;/a&gt; for the content pipeline and other tool tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/Tools/MonoGame.Content.Builder&#34;&gt;mgcb&lt;/a&gt; is the command line tool for content processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/Tools/MonoGame.Effect.Compiler&#34;&gt;mgfxc&lt;/a&gt; is the command line effect compiler tool.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/Tools/MonoGame.Content.Builder.Editor&#34;&gt;mgcb-editor&lt;/a&gt; tool is a GUI frontend for content processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Helpful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The official website is &lt;a href=&#34;http://www.monogame.net&#34;&gt;monogame.net&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/MonoGame/MonoGame/issues&#34;&gt;issue tracker&lt;/a&gt; is on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Use our &lt;a href=&#34;http://community.monogame.net/&#34;&gt;community forums&lt;/a&gt; for support questions.&lt;/li&gt; &#xA; &lt;li&gt;You can &lt;a href=&#34;https://discord.gg/monogame&#34;&gt;join the Discord server&lt;/a&gt; and chat live with the core developers and other users.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;http://www.monogame.net/documentation/&#34;&gt;official documentation&lt;/a&gt; is on our website.&lt;/li&gt; &#xA; &lt;li&gt;Download release and development &lt;a href=&#34;http://www.monogame.net/downloads/&#34;&gt;packages&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/monogameteam&#34;&gt;@MonoGameTeam&lt;/a&gt; on Twitter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MonoGame project is under the &lt;a href=&#34;https://opensource.org/licenses/MS-PL&#34;&gt;Microsoft Public License&lt;/a&gt; except for a few portions of the code. See the &lt;a href=&#34;https://raw.githubusercontent.com/MonoGame/MonoGame/develop/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for more details. Third-party libraries used by MonoGame are under their own licenses. Please refer to those libraries for details on the license they use.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/WPF-Samples</title>
    <updated>2023-09-17T01:45:58Z</updated>
    <id>tag:github.com,2023-09-17:/microsoft/WPF-Samples</id>
    <link href="https://github.com/microsoft/WPF-Samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for WPF related samples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WPF-Samples&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains the samples that demonstrate the API usage patterns and popular features for the Windows Presentation Foundation in the .NET for Desktop. These samples were initially hosted on &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/vstudio/ms771633.aspx&#34;&gt;MSDN&lt;/a&gt;, and we are gradually moving all the interesting WPF samples over to GitHub. All the samples have been retargeted to &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download&#34;&gt;.NET 6.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also find an archive of samples targeting .NET 4.7.2 in the &lt;a href=&#34;https://github.com/microsoft/WPF-Samples/tree/netframework&#34;&gt;netframework&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;The samples in this repo are generally about illustrating specific concepts and may go against accessibility best practices. However, the team has spent some time illustrating accessibility best practices in a subset of these samples.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WPF-Samples/tree/master/Getting%20Started/WalkthroughFirstWPFApp&#34;&gt;ExpenseItIntro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WPF-Samples/tree/master/Sample%20Applications/ExpenseIt/ExpenseItDemo&#34;&gt;ExpenseItDemo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WPF-Samples/tree/master/Sample%20Applications/DataBindingDemo&#34;&gt;DataBindingDemo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WPF-Samples/tree/master/Sample%20Applications/CustomComboBox&#34;&gt;CustomComboBox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/WPF-Samples/tree/master/Sample%20Applications/EditingExaminerDemo&#34;&gt;EditingExaminerDemo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For additional WPF samples, see &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/vstudio/ms771633.aspx&#34;&gt;WPF Samples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless otherwise mentioned, the samples are released under the &lt;a href=&#34;https://github.com/Microsoft/WPF-Samples/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help us improve our samples&lt;/h2&gt; &#xA;&lt;p&gt;Help us improve out samples by sending us a pull-request or opening a &lt;a href=&#34;https://github.com/Microsoft/WPF-Samples/issues&#34;&gt;GitHub Issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Questions: mail &lt;a href=&#34;mailto:wpfteam@microsoft.com&#34;&gt;wpfteam@microsoft.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;WPF development&lt;/h2&gt; &#xA;&lt;p&gt;These samples require Visual Studio 2022 to build, test, and deploy, and also require the .NET 6 SDK.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.visualstudio.com/wpf-vs&#34;&gt;Get a free copy of Visual Studio 2022 Community Edition&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/core-sdk&#34;&gt;.NET Core SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WPF on .NET has been open-sourced, and is now available on &lt;a href=&#34;https://github.com/dotnet/wpf&#34;&gt;Github&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the samples&lt;/h2&gt; &#xA;&lt;p&gt;To use the samples with Git, clone the WPF-Samples repository with &#39;git clone &lt;a href=&#34;https://github.com/microsoft/WPF-Samples&#34;&gt;https://github.com/microsoft/WPF-Samples&lt;/a&gt;&#39;&lt;/p&gt; &#xA;&lt;p&gt;After cloning the WPF-Samples respository, there will be two solution files in the root directory: WPF-Samples.sln and WPF-Samples.msbuild.sln&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To build the samples, open one of the solution files in Visual Studio 2019 and build the solution.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, navigate to the directory of a sample and build with &#39;dotnet build&#39; or &#39;msbuild&#39; specifying the target project file.&lt;/li&gt; &#xA; &lt;li&gt;WPF-Samples.msbuild.sln contains projects that can be built only with &lt;code&gt;msbuild&lt;/code&gt; or Visual Studio, and will not compile with &lt;code&gt;dotnet build&lt;/code&gt;. These projects contain C++ code, for which there is no support in &lt;code&gt;dotnet build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The easiest way to use these samples without using Git is to download the zip file containing the current version (using the link below or by clicking the &#34;Download ZIP&#34; button on the repo page). You can then unzip the entire archive and use the samples in Visual Studio 2019.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/archive/main.zip&#34;&gt;Download the samples ZIP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before you unzip the archive, right-click it, select Properties, and then select Unblock.&lt;/li&gt; &#xA; &lt;li&gt;Most samples should work independently&lt;/li&gt; &#xA; &lt;li&gt;By default, all the samples target .NET 6.0. (Installers for the .NET 6 SDK can be found at &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download&#34;&gt;https://dotnet.microsoft.com/en-us/download&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more info about the programming models, platforms, languages, and APIs demonstrated in these samples, please refer to the guidance available in &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms754130.aspx&#34;&gt;MSDN&lt;/a&gt;. These samples are provided as-is in order to indicate or demonstrate the functionality of the programming models and feature APIs for WPF.&lt;/p&gt;</summary>
  </entry>
</feed>