<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-05T01:47:51Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coding-horror/basic-computer-games</title>
    <updated>2023-11-05T01:47:51Z</updated>
    <id>tag:github.com,2023-11-05:/coding-horror/basic-computer-games</id>
    <link href="https://github.com/coding-horror/basic-computer-games" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An updated version of the classic &#34;Basic Computer Games&#34; book, with well-written examples in a variety of common MEMORY SAFE, SCRIPTING programming languages. See https://coding-horror.github.io/basic-computer-games/&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;What are we doing?&lt;/h3&gt; &#xA;&lt;p&gt;We‚Äôre updating the first million selling computer book, &lt;a href=&#34;https://en.wikipedia.org/wiki/BASIC_Computer_Games&#34;&gt;BASIC Computer Games&lt;/a&gt;, for 2022 and beyond!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://annarchive.com/files/Basic_Computer_Games_Microcomputer_Edition.pdf&#34;&gt;Read the original book&lt;/a&gt; (pdf)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://troypress.com/wp-content/uploads/user/js-basic/index.html&#34;&gt;Play the original games in your browser&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where can we discuss it?&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://discourse.codinghorror.com/t/-/7927&#34;&gt;the discussion here&lt;/a&gt; for a worklog and conversation around this project.&lt;/p&gt; &#xA;&lt;h3&gt;Project structure&lt;/h3&gt; &#xA;&lt;p&gt;I have moved all &lt;a href=&#34;http://www.vintage-basic.net/games.html&#34;&gt;the original BASIC source code&lt;/a&gt; into a folder for each project in the original book (first volume). Note that Lyle Kopnicky has generously normalized all the code (thanks Lyle!) to run against &lt;a href=&#34;http://www.vintage-basic.net/download.html&#34;&gt;Vintage Basic&lt;/a&gt; circa 2009:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I‚Äôve included all the games here for your tinkering pleasure. I‚Äôve tested and tweaked each one of them to make sure they‚Äôll run with Vintage BASIC, though you may see a few oddities. That‚Äôs part of the fun of playing with BASIC: it never works quite the same on two machines. The games will play better if you keep CAPS LOCK on, as they were designed to be used with capital-letter input.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Each project has subfolders corresponding to the languages we‚Äôd like to see the games ported to. This is based on the &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;2022 TIOBE index of top languages&lt;/a&gt; that are &lt;em&gt;&lt;strong&gt;memory safe&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;general purpose scripting languages&lt;/strong&gt;&lt;/em&gt; per &lt;a href=&#34;https://discourse.codinghorror.com/t/-/7927/34&#34;&gt;this post&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;C#&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Kotlin&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;Perl&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;VB.NET&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üì¢ Note that in March 2022 we removed Pascal / Object Pascal and replaced it with Rust as we couldn‚Äôt determine if Pascal is effectively memory safe. We‚Äôve also added Lua, as it made the top 20 in TIOBE (as of 2022) and it is both memory safe and a scripting language. The Pascal ports were moved to the alternate languages folder.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Please note that we have decided, as a project, that we &lt;strong&gt;do not want any IDE-specific or build-specific files in the repository.&lt;/strong&gt; Please refrain from committing any files to the repository that only exist to work with a specific IDE or a specific build system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Alternate Languages&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to port one of the programs to a language not in our list ‚Äì that is, a language which is either not memory safe, or not a general purpose scripting language, you can do so via the &lt;code&gt;00_Alternate_Languages&lt;/code&gt; folder. Place your port in the appropriate game subfolder, in a subfolder named for the language. Please note that these ports are appreciated, but they will not count toward the donation total at the end of the project.&lt;/p&gt; &#xA;&lt;h3&gt;Project goals&lt;/h3&gt; &#xA;&lt;p&gt;Feel free to begin converting these classic games into the above list of modern, memory safe languages. In fact, courtesy of @mojoaxel, you can even view the JavaScript versions in your web browser at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coding-horror.github.io/basic-computer-games/&#34;&gt;https://coding-horror.github.io/basic-computer-games/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;But first, a few guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;These are very old games&lt;/strong&gt;. They date from the mid-70s so they‚Äôre not exactly examples of what kids (or anyone, really?) would be playing these days. Consider them more like classic programming exercises to teach programming. We‚Äôre paying it forward by converting them into modern languages, so the next generation can learn from the programs in this classic book ‚Äì and compare implementations across common modern languages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stay true to the original program&lt;/strong&gt;. These are mostly unsophisticated, simple command line / console games, so we should strive to replicate the command line / console output and behavior illustrated in the original book. See the README in the project folder for links to the original scanned source input and output. Try &lt;a href=&#34;https://troypress.com/wp-content/uploads/user/js-basic/index.html&#34;&gt;running the game in your browser&lt;/a&gt;. Avoid the impulse to add features; keep it simple, &lt;em&gt;except&lt;/em&gt; for modern conventions, see next item üëá&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Please DO update for modern coding conventions&lt;/strong&gt;. Support uppercase and lowercase. Use structured programming. Use subroutines. Try to be an example of good, modern coding practices!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use lots of comments to explain what is going on&lt;/strong&gt;. Comment liberally! If there were clever tricks in the original code, decompose those tricks into simpler (even if more verbose) code, and use comments to explain what‚Äôs happening and why. If there is something particularly tricky about a program, edit the &lt;strong&gt;Porting Notes&lt;/strong&gt; section of the &lt;code&gt;readme.md&lt;/code&gt; to let everyone know. Those &lt;code&gt;GOTO&lt;/code&gt;s can be very pesky..&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Please don‚Äôt get &lt;em&gt;too&lt;/em&gt; fancy&lt;/strong&gt;. Definitely use the most recent versions and features of the target language, but also try to keep the code samples simple and explainable ‚Äì the goal is to teach programming in the target language, not necessarily demonstrate the cleverest one-line tricks, or big system &#34;enterprise&#34; coding techniques designed for thousands of lines of code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Please don&#39;t check in any build specific or IDE specific files&lt;/strong&gt;. We want the repository to be simple and clean, so we have ruled out including any IDE or build system specific files from the repository. Git related files are OK, as we are using Git and this is GitHub. üòâ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emulation and Bugfixes&lt;/h3&gt; &#xA;&lt;p&gt;We want the general behavior of the original programs to be preserved, &lt;em&gt;however&lt;/em&gt;, we also want to update them, specifically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;allow both UPPERCASE and lowercase input and display&lt;/li&gt; &#xA; &lt;li&gt;incorporate any bugfixes to the original programs; see the &lt;code&gt;readme.md&lt;/code&gt; in the game folder&lt;/li&gt; &#xA; &lt;li&gt;improved error handling for bad or erroneous input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that on the back of the Basic Computer Games book it says &lt;strong&gt;Microsoft 8K Basic, Rev 4.0 was the version David Ahl used to test&lt;/strong&gt;, so that is the level of compatibility we are looking for. &amp;nbsp;QBasic on the DOS emulation is a&amp;nbsp;later version of Basic but one that retains downwards compatibility so far in our testing. To verify behavior, try &lt;a href=&#34;https://troypress.com/wp-content/uploads/user/js-basic/index.html&#34;&gt;running the programs in your browser&lt;/a&gt; with &lt;a href=&#34;https://github.com/inexorabletash/jsbasic/&#34;&gt;JS BASIC, effectively Applesoft BASIC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Have fun!&lt;/h3&gt; &#xA;&lt;p&gt;Thank you for taking part in this project to update a classic programming book ‚Äì one of the most influential programming books in computing history ‚Äì for 2022 and beyond!&lt;/p&gt; &#xA;&lt;p&gt;NOTE: per &lt;a href=&#34;https://blog.codinghorror.com/updating-the-single-most-influential-book-of-the-basic-era/&#34;&gt;the official blog post announcement&lt;/a&gt;, I will be &lt;strong&gt;donating $5 for each contributed program in the 10 agreed upon languages to &lt;a href=&#34;https://girlswhocode.com/&#34;&gt;Girls Who Code&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Current Progress&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;toggle for game by language table&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Name&lt;/th&gt; &#xA;    &lt;th&gt;csharp&lt;/th&gt; &#xA;    &lt;th&gt;java&lt;/th&gt; &#xA;    &lt;th&gt;javascript&lt;/th&gt; &#xA;    &lt;th&gt;kotlin&lt;/th&gt; &#xA;    &lt;th&gt;lua&lt;/th&gt; &#xA;    &lt;th&gt;perl&lt;/th&gt; &#xA;    &lt;th&gt;python&lt;/th&gt; &#xA;    &lt;th&gt;ruby&lt;/th&gt; &#xA;    &lt;th&gt;rust&lt;/th&gt; &#xA;    &lt;th&gt;vbnet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;01_Acey_Ducey&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;02_Amazing&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;03_Animal&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;04_Awari&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;05_Bagels&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;06_Banner&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;07_Basketball&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;08_Batnum&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;09_Battle&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;10_Blackjack&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;11_Bombardment&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;12_Bombs_Away&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;13_Bounce&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;14_Bowling&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;15_Boxing&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;16_Bug&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;17_Bullfight&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;18_Bullseye&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;19_Bunny&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;20_Buzzword&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;21_Calendar&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;22_Change&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;23_Checkers&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;24_Chemist&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;25_Chief&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;26_Chomp&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;27_Civil_War&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;28_Combat&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;29_Craps&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;30_Cube&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;31_Depth_Charge&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;32_Diamond&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;33_Dice&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;34_Digits&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;35_Even_Wins&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;36_Flip_Flop&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;37_Football&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;38_Fur_Trader&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;39_Golf&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;40_Gomoko&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;41_Guess&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;42_Gunner&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;43_Hammurabi&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;44_Hangman&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;45_Hello&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;46_Hexapawn&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;47_Hi-Lo&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;48_High_IQ&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;49_Hockey&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;50_Horserace&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;51_Hurkle&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;52_Kinema&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;53_King&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;54_Letter&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;55_Life&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;56_Life_for_Two&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;57_Literature_Quiz&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;58_Love&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;59_Lunar_LEM_Rocket&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;60_Mastermind&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;61_Math_Dice&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;62_Mugwump&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;63_Name&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;64_Nicomachus&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;65_Nim&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;66_Number&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;67_One_Check&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;68_Orbit&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;69_Pizza&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;70_Poetry&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;71_Poker&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;72_Queen&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;73_Reverse&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;74_Rock_Scissors_Paper&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;75_Roulette&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;76_Russian_Roulette&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;77_Salvo&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;78_Sine_Wave&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;79_Slalom&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;80_Slots&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;81_Splat&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;82_Stars&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;83_Stock_Market&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;84_Super_Star_Trek&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;85_Synonym&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;86_Target&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;87_3-D_Plot&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;88_3-D_Tic-Tac-Toe&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;89_Tic-Tac-Toe&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;90_Tower&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;91_Train&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;92_Trap&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;93_23_Matches&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;94_War&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;95_Weekday&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;96_Word&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;    &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/kernel-memory</title>
    <updated>2023-11-05T01:47:51Z</updated>
    <id>tag:github.com,2023-11-05:/microsoft/kernel-memory</id>
    <link href="https://github.com/microsoft/kernel-memory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Index and query any data using LLM and natural language, tracking sources and showing citations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kernel Memory&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kernel Memory&lt;/strong&gt; (KM) is an open-source &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/dotnet/Service/README.md&#34;&gt;service&lt;/a&gt; and &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365/blog/2023/05/23/empowering-every-developer-with-plugins-for-microsoft-365-copilot/&#34;&gt;plugin&lt;/a&gt; specialized in the efficient indexing of datasets through custom continuous data hybrid pipelines. For some scenarios KM is also available as a library, and soon as a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/kernel-memory/assets/371009/31894afa-d19e-4e9b-8d0f-cb889bf5c77f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Utilizing advanced embeddings and LLMs, the system enables Natural Language querying for obtaining answers from the indexed data, complete with citations and links to the original sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/kernel-memory/assets/371009/c5f0f6c3-814f-45bf-b055-063f23ed80ea&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Designed for seamless integration as a Plugin with &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;, Microsoft Copilot and ChatGPT, Kernel Memory enhances data-driven features in applications built for most popular AI platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Supported backends&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚ÜóÔ∏è Vector storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Cognitive Search&lt;/li&gt; &#xA;   &lt;li&gt;Qdrant&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;üìÄ Content storage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Blobs&lt;/li&gt; &#xA;   &lt;li&gt;Local file system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚è≥ Asynchronous ingestion queues &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Azure Queues&lt;/li&gt; &#xA;   &lt;li&gt;RabbitMQ&lt;/li&gt; &#xA;   &lt;li&gt;Local file based queue&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è &lt;strong&gt;NOTE&lt;/strong&gt;: the documentation below is work in progress, will evolve quickly as is not fully functional yet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Kernel Memory in serverless mode&lt;/h1&gt; &#xA;&lt;p&gt;Kernel Memory works and scales at best when running as a service, allowing to ingest thousands of documents and information without blocking your app.&lt;/p&gt; &#xA;&lt;p&gt;However, you can use Kernel Memory also serverless, embedding the &lt;code&gt;MemoryServerlessClient&lt;/code&gt; in your app.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Importing documents into your Kernel Memory can be as simple as this:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var memory = new KernelMemoryBuilder()&#xA;    .WithOpenAIDefaults(Env.Var(&#34;OPENAI_API_KEY&#34;))&#xA;    .Build();&#xA;&#xA;// Import a file&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;, tags: new() { { &#34;user&#34;, &#34;Blake&#34; } });&#xA;&#xA;// Import multiple files and apply multiple tags&#xA;await memory.ImportDocumentAsync(new Document(&#34;file001&#34;)&#xA;    .AddFile(&#34;business-plan.docx&#34;)&#xA;    .AddFile(&#34;project-timeline.pdf&#34;)&#xA;    .AddTag(&#34;user&#34;, &#34;Blake&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;    .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;    .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Asking questions:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var answer1 = await memory.AskAsync(&#34;How many people attended the meeting?&#34;);&#xA;&#xA;var answer2 = await memory.AskAsync(&#34;what&#39;s the project timeline?&#34;, filter: new MemoryFilter().ByTag(&#34;user&#34;, &#34;Blake&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The code leverages the default documents ingestion pipeline:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Extract text: recognize the file format and extract the information&lt;/li&gt; &#xA; &lt;li&gt;Partition the text in small chunks, to optimize search&lt;/li&gt; &#xA; &lt;li&gt;Extract embedding using an LLM embedding generator&lt;/li&gt; &#xA; &lt;li&gt;Save embedding into a vector index such as &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/search/vector-search-overview&#34;&gt;Azure Cognitive Search&lt;/a&gt;, &lt;a href=&#34;https://qdrant.tech/&#34;&gt;Qdrant&lt;/a&gt; or other DBs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Documents are organized by users, safeguarding their private information. Furthermore, memories can be categorized and structured using &lt;strong&gt;tags&lt;/strong&gt;, enabling efficient search and retrieval through faceted navigation.&lt;/p&gt; &#xA;&lt;h1&gt;Data lineage, citations&lt;/h1&gt; &#xA;&lt;p&gt;All memories and answers are fully correlated to the data provided. When producing an answer, Kernel Memory includes all the information needed to verify its accuracy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;await memory.ImportFileAsync(&#34;NASA-news.pdf&#34;);&#xA;&#xA;var answer = await memory.AskAsync(&#34;Any news from NASA about Orion?&#34;);&#xA;&#xA;Console.WriteLine(answer.Result + &#34;/n&#34;);&#xA;&#xA;foreach (var x in answer.RelevantSources)&#xA;{&#xA;    Console.WriteLine($&#34;  * {x.SourceName} -- {x.Partitions.First().LastUpdate:D}&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on Wednesday, August 2, at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;NASA-news.pdf -- Tuesday, August 1, 2023&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using Kernel Memory Service&lt;/h2&gt; &#xA;&lt;p&gt;Depending on your scenarios, you might want to run all the code &lt;strong&gt;locally inside your process, or remotely through an asynchronous service.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re importing small files, and need only C# or only Python, and can block the process during the import, local-in-process execution can be fine, using the &lt;strong&gt;MemoryServerlessClient&lt;/strong&gt; seen above.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are in one of these scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;d just like a web service to import data and send queries to answer&lt;/li&gt; &#xA; &lt;li&gt;My app is written in &lt;strong&gt;TypeScript, Java, Rust, or some other language&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want to define &lt;strong&gt;custom pipelines mixing multiple languages&lt;/strong&gt; like Python, TypeScript, etc&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m importing &lt;strong&gt;big documents that can require minutes to process&lt;/strong&gt;, and I don&#39;t want to block the user interface&lt;/li&gt; &#xA; &lt;li&gt;I need memory import to &lt;strong&gt;run independently, supporting failures and retry logic&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;then you can deploy Kernel Memory as a service, plugging in the default handlers or your custom Python/TypeScript/Java/etc. handlers, and leveraging the asynchronous non-blocking memory encoding process, sending documents and asking questions using the &lt;strong&gt;MemoryWebClient&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/dotnet/Service/README.md&#34;&gt;Here&lt;/a&gt; you can find a complete set of instruction about &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/dotnet/Service/README.md&#34;&gt;how to run the Kernel Memory service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to give the service a quick test, use the following command to &lt;strong&gt;start the Kernel Memory Service&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On WSL / Linux / MacOS:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet/Service&#xA;./setup.sh&#xA;./run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;On Windows:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd dotnet\Service&#xA;setup.cmd&#xA;run.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;To import files using Kernel Memory &lt;strong&gt;web service&lt;/strong&gt;, use &lt;code&gt;MemoryWebClient&lt;/code&gt;:&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;#reference dotnet/ClientLib/ClientLib.csproj&#xA;&#xA;var memory = new MemoryWebClient(&#34;http://127.0.0.1:9001&#34;); // &amp;lt;== URL where the web service is running&#xA;&#xA;// Import a file (default user)&#xA;await memory.ImportDocumentAsync(&#34;meeting-transcript.docx&#34;);&#xA;&#xA;// Import a file specifying a Document ID, User and Tags&#xA;await memory.ImportDocumentAsync(&#34;business-plan.docx&#34;,&#xA;    new DocumentDetails(&#34;user@some.email&#34;, &#34;file001&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;business&#34;)&#xA;        .AddTag(&#34;collection&#34;, &#34;plans&#34;)&#xA;        .AddTag(&#34;fiscalYear&#34;, &#34;2023&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Getting answers via the web service&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code&gt;curl http://127.0.0.1:9001/ask -d&#39;{&#34;query&#34;:&#34;Any news from NASA about Orion?&#34;}&#39; -H &#39;Content-Type: application/json&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Query&#34;: &#34;Any news from NASA about Orion?&#34;,&#xA;  &#34;Text&#34;: &#34;Yes, there is news from NASA about the Orion spacecraft. NASA has invited the media to see a new test version of the Orion spacecraft and the hardware that will be used to recover the capsule and astronauts upon their return from space during the Artemis II mission. The event is scheduled to take place at Naval Base San Diego on August 2nd at 11 a.m. PDT. Personnel from NASA, the U.S. Navy, and the U.S. Air Force will be available to speak with the media. Teams are currently conducting tests in the Pacific Ocean to demonstrate and evaluate the processes, procedures, and hardware for recovery operations for crewed Artemis missions. These tests will help prepare the team for Artemis II, which will be NASA&#39;s first crewed mission under the Artemis program. The Artemis II crew, consisting of NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and Canadian Space Agency astronaut Jeremy Hansen, will participate in recovery testing at sea next year. For more information about the Artemis program, you can visit the NASA website.&#34;,&#xA;  &#34;RelevantSources&#34;: [&#xA;    {&#xA;      &#34;Link&#34;: &#34;...&#34;,&#xA;      &#34;SourceContentType&#34;: &#34;application/pdf&#34;,&#xA;      &#34;SourceName&#34;: &#34;file5-NASA-news.pdf&#34;,&#xA;      &#34;Partitions&#34;: [&#xA;        {&#xA;          &#34;Text&#34;: &#34;Skip to main content\nJul 28, 2023\nMEDIA ADVISORY M23-095\nNASA Invites Media to See Recovery Craft for\nArtemis Moon Mission\n(/sites/default/Ô¨Åles/thumbnails/image/ksc-20230725-ph-fmx01_0003orig.jpg)\nAboard the USS John P. Murtha, NASA and Department of Defense personnel practice recovery operations for Artemis II in July. A\ncrew module test article is used to help verify the recovery team will be ready to recovery the Artemis II crew and the Orion spacecraft.\nCredits: NASA/Frank Michaux\nMedia are invited to see the new test version of NASA‚Äôs Orion spacecraft and the hardware teams will use\nto recover the capsule and astronauts upon their return from space during the Artemis II\n(http://www.nasa.gov/artemis-ii) mission. The event will take place at 11 a.m. PDT on Wednesday, Aug. 2,\nat Naval Base San Diego.\nPersonnel involved in recovery operations from NASA, the U.S. Navy, and the U.S. Air Force will be\navailable to speak with media.\nU.S. media interested in attending must RSVP by 4&amp;nbsp;p.m., Monday, July 31, to the Naval Base San Diego\nPublic AÔ¨Äairs (mailto:nbsd.pao@us.navy.mil) or 619-556-7359.\nOrion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n1 of 3 7/28/23, 4:51 PMTeams are currently conducting the Ô¨Årst in a series of tests in the PaciÔ¨Åc Ocean to demonstrate and\nevaluate the processes, procedures, and hardware for recovery operations (https://www.nasa.gov\n/exploration/systems/ground/index.html) for crewed Artemis missions. The tests will help prepare the\nteam for Artemis II, NASA‚Äôs Ô¨Årst crewed mission under Artemis that will send four astronauts in Orion\naround the Moon to checkout systems ahead of future lunar missions.\nThe Artemis II crew ‚Äì NASA astronauts Reid Wiseman, Victor Glover, and Christina Koch, and CSA\n(Canadian Space Agency) astronaut Jeremy Hansen ‚Äì will participate in recovery testing at sea next year.\nFor more information about Artemis, visit:\nhttps://www.nasa.gov/artemis (https://www.nasa.gov/artemis)\n-end-\nRachel Kraft\nHeadquarters, Washington\n202-358-1100\nrachel.h.kraft@nasa.gov (mailto:rachel.h.kraft@nasa.gov)\nMadison Tuttle\nKennedy Space Center, Florida\n321-298-5868\nmadison.e.tuttle@nasa.gov (mailto:madison.e.tuttle@nasa.gov)\nLast Updated: Jul 28, 2023\nEditor: Claire O‚ÄôShea\nTags:&amp;nbsp; Artemis (/artemisprogram),Ground Systems (http://www.nasa.gov/exploration/systems/ground\n/index.html),Kennedy Space Center (/centers/kennedy/home/index.html),Moon to Mars (/topics/moon-to-\nmars/),Orion Spacecraft (/exploration/systems/orion/index.html)\nNASA Invites Media to See Recovery Craft for Artemis Moon Miss... https://www.nasa.gov/press-release/nasa-invites-media-to-see-recov...\n2 of 3 7/28/23, 4:51 PM&#34;,&#xA;          &#34;Relevance&#34;: 0.8430657,&#xA;          &#34;SizeInTokens&#34;: 863,&#xA;          &#34;LastUpdate&#34;: &#34;2023-08-01T08:15:02-07:00&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can find a &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/002-dotnet-WebClient/README.md&#34;&gt;full example here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom memory ingestion pipelines&lt;/h2&gt; &#xA;&lt;p&gt;On the other hand, if you need a custom data pipeline, you can also customize the steps, which will be handled by your custom business logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Memory setup, e.g. how to calculate and where to store embeddings&#xA;var memoryBuilder = new KernelMemoryBuilder().WithOpenAIDefaults(Env.Var(&#34;OPENAI_API_KEY&#34;));&#xA;memoryBuilder.Build();&#xA;var orchestrator = memoryBuilder.GetOrchestrator();&#xA;&#xA;// Define custom .NET handlers&#xA;var step1 = new MyHandler1(&#34;step1&#34;, orchestrator);&#xA;var step2 = new MyHandler2(&#34;step2&#34;, orchestrator);&#xA;var step3 = new MyHandler3(&#34;step3&#34;, orchestrator);&#xA;await orchestrator.AddHandlerAsync(step1);&#xA;await orchestrator.AddHandlerAsync(step2);&#xA;await orchestrator.AddHandlerAsync(step3);&#xA;&#xA;// Instantiate a custom pipeline&#xA;var pipeline = orchestrator&#xA;    .PrepareNewFileUploadPipeline(&#34;user-id-1&#34;, &#34;mytest&#34;, new[] { &#34;memory-collection&#34; })&#xA;    .AddUploadFile(&#34;file1&#34;, &#34;file1.docx&#34;, &#34;file1.docx&#34;)&#xA;    .AddUploadFile(&#34;file2&#34;, &#34;file2.pdf&#34;, &#34;file2.pdf&#34;)&#xA;    .Then(&#34;step1&#34;)&#xA;    .Then(&#34;step2&#34;)&#xA;    .Then(&#34;step3&#34;)&#xA;    .Build();&#xA;&#xA;// Execute in process, process all files with all the handlers&#xA;await orchestrator.RunPipelineAsync(pipeline);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Web API specs&lt;/h1&gt; &#xA;&lt;p&gt;The API schema is available at &lt;a href=&#34;http://127.0.0.1:9001/swagger/index.html&#34;&gt;http://127.0.0.1:9001/swagger/index.html&lt;/a&gt; when running the service locally with OpenAPI enabled.&lt;/p&gt; &#xA;&lt;h1&gt;Examples and Tools&lt;/h1&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/000-notebooks&#34;&gt;Collection of Jupyter notebooks with various tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/001-dotnet-Serverless&#34;&gt;Importing files and asking question without running the service (serverless mode)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/002-dotnet-WebClient&#34;&gt;Using the Kernel Memory web service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/003-curl-calling-webservice&#34;&gt;How to upload files from command line with curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/004-dotnet-ServerlessCustomPipeline&#34;&gt;Processing files with custom steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/005-dotnet-InProcessMemoryWithCustomHandler&#34;&gt;Using a custom pipeline handler with serverless memory class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/006-dotnet-CustomHandlerAsAService&#34;&gt;Writing a custom async pipeline handler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/007-aspnet-mvc-integration&#34;&gt;Integrating Memory with ASP.NET applications and controllers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/examples/008-dotnet-custom-partitioning-options&#34;&gt;Partioning/Chunking documents with custom settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/009-dotnet-custom-LLM&#34;&gt;Using Llama and other custom LLMs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/upload-file.sh&#34;&gt;Curl script to upload files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/ask.sh&#34;&gt;Curl script to ask questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/search.sh&#34;&gt;Curl script to search documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/run-qdrant.sh&#34;&gt;Script to start Qdrant for development tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/kernel-memory/main/tools/run-rabbitmq.sh&#34;&gt;Script to start RabbitMQ for development tasks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>IgorMundstein/WinMemoryCleaner</title>
    <updated>2023-11-05T01:47:51Z</updated>
    <id>tag:github.com,2023-11-05:/IgorMundstein/WinMemoryCleaner</id>
    <link href="https://github.com/IgorMundstein/WinMemoryCleaner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This free RAM cleaner uses native Windows features to optimize memory areas. It&#39;s a compact, portable, and smart application.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Windows Memory Cleaner&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#windows-memory-cleaner&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Windows-XP%20%7C%20Vista%20%7C%207%20%7C%208%20%7C%2010%20%7C%2011-blue?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#windows-memory-cleaner&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Server-2003%20%7C%202008%20%7C%202012%20%7C%202016%20%7C%202019%20%7C%202022-blue?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/IgorMundstein/WinMemoryCleaner?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IgorMundstein/WinMemoryCleaner/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/IgorMundstein/WinMemoryCleaner/total?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#windows-memory-cleaner&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/.github/images/main-window.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p align=&#34;justify&#34;&gt; This free RAM cleaner uses native Windows features to clear memory areas. Sometimes, programs do not release the allocated memory, making the computer slow. That is when you use Windows Memory Cleaner to optimize the memory, so you can keep working without wasting time restarting your system. &lt;/p&gt; &#xA; &lt;p align=&#34;justify&#34;&gt; The app has a minimalistic interface and smart features. It&#39;s portable, and you do not need to install it, but it requires administrator privileges to run. Click on the download button below and run the executable to get started. &lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/IgorMundstein/WinMemoryCleaner/releases/latest/download/WinMemoryCleaner.exe&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/.github/images/download-button.png&#34; alt=&#34;Download)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üöÄ Features&lt;/h2&gt; &#xA;&lt;h3&gt;Auto optimization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Every X hours&lt;/code&gt; - The optimization will run by period&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;When free memory is below X percent&lt;/code&gt; - The optimization will run if free memory is below the specified percentage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compact Mode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arrow (Up/Down) next to the minimize button to collapse and extend the window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#compact-mode&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/.github/images/main-window-compact.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Memory Areas&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Clean Combined Page List&lt;/code&gt; - Flushes the blocks from the combined page list effectively only when page combining is enabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clean Modified Page List&lt;/code&gt; - Flushes memory from the modified page list, writing unsaved data to disk and moving the pages to the standby list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clean Processes Working Set&lt;/code&gt; - Removes memory from all user-mode and system working sets and moves it to the standby or modified page lists. Note that by the time processes run, any code will necessarily populate their working sets to do so&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clean Standby List&lt;/code&gt; - Flushes pages from all standby lists to the free list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clean Standby List (Low Priority)&lt;/code&gt; - Flushes pages from the lowest-priority standby list to the free list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clean System Working Set&lt;/code&gt; - Removes memory from the system cache working set&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Multi-Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Arabic&lt;/code&gt; &lt;code&gt;Chinese&lt;/code&gt; &lt;code&gt;Dutch&lt;/code&gt; &lt;code&gt;English&lt;/code&gt; &lt;code&gt;French&lt;/code&gt; &lt;code&gt;German&lt;/code&gt; &lt;code&gt;Greek&lt;/code&gt; &lt;code&gt;Indonesian&lt;/code&gt; &lt;code&gt;Italian&lt;/code&gt; &lt;code&gt;Japanese&lt;/code&gt; &lt;code&gt;Korean&lt;/code&gt; &lt;code&gt;Macedonian&lt;/code&gt; &lt;code&gt;Polish&lt;/code&gt; &lt;code&gt;Portuguese&lt;/code&gt; &lt;code&gt;Serbian&lt;/code&gt; &lt;code&gt;Slovenian&lt;/code&gt; &lt;code&gt;Spanish&lt;/code&gt; &lt;code&gt;Turkish&lt;/code&gt; &lt;code&gt;Ukrainian&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notifications&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#notifications&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/.github/images/notification.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Processes excluded from optimization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can build a list of processes to ignore when memory is optimized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optimization hotkey (Global)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL + ALT + M (Customizable)&lt;/code&gt; - Optimize&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Always on top&lt;/code&gt; - Pins the window to the top of all your windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Auto update&lt;/code&gt; - Keeps the app up to date&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Close after optimization&lt;/code&gt; - Closes the app after optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Close to the notification area&lt;/code&gt; - Minimize the app to the system tray when clicking the close (X) button&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Run on startup&lt;/code&gt; - Runs the app after the system boots up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Show optimization notifications&lt;/code&gt; - Sends a message to the notification area after optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Start minimized&lt;/code&gt; - The app will start minimized to the system tray. Single/Double click on the icon to restore&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;System tray (Notification area)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#system-tray&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/.github/images/system-tray.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Command arguments (NO GUI)&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following arguments to run the app silently.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/CombinedPageList&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ModifiedPageList&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ProcessesWorkingSet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/StandbyList&lt;/code&gt; OR &lt;code&gt;/StandbyListLowPriority&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/SystemWorkingSet&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WinMemoryCleaner.exe /ModifiedPageList /ProcessesWorkingSet /StandbyList /SystemWorkingSet&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Logs&lt;/h2&gt; &#xA;&lt;p&gt;The app generates logs in the Windows event&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Press &lt;strong&gt;Win + R&lt;/strong&gt; to open the Run command dialog box&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;strong&gt;eventvwr&lt;/strong&gt; and press &lt;strong&gt;Enter&lt;/strong&gt; to open the Event Viewer&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/#-logs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/.github/images/windows-event-log.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìù Project notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft.NET 4 framework version for Windows retro compatibility&lt;/li&gt; &#xA; &lt;li&gt;Minimalistic user interface&lt;/li&gt; &#xA; &lt;li&gt;Model-View-ViewModel (MVVM) design pattern&lt;/li&gt; &#xA; &lt;li&gt;No third library or DLL dependencies&lt;/li&gt; &#xA; &lt;li&gt;Portable (Single .exe file)&lt;/li&gt; &#xA; &lt;li&gt;S.O.L.I.D. Principles of Object-Oriented&lt;/li&gt; &#xA; &lt;li&gt;Use of Windows native methods for memory management&lt;/li&gt; &#xA; &lt;li&gt;Windows Event to save logs&lt;/li&gt; &#xA; &lt;li&gt;Windows Presentation Foundation (WPF) for user interface&lt;/li&gt; &#xA; &lt;li&gt;Windows Registry to save user config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üåê Translation&lt;/h2&gt; &#xA;&lt;p&gt;If you are a native speaker of any language other than English, you can contribute by translating the file: &lt;a href=&#34;https://raw.githubusercontent.com/IgorMundstein/WinMemoryCleaner/master/src/Resources/Localization/English.json&#34;&gt;English.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üí° You can test any translation by creating a file alongside the executable&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://ss64.com/locale.html&#34;&gt;https://ss64.com/locale.html&lt;/a&gt; to get the &lt;strong&gt;locale description&lt;/strong&gt; of the language&lt;/li&gt; &#xA; &lt;li&gt;Save it as &lt;strong&gt;{locale-description}.json&lt;/strong&gt; using &lt;strong&gt;UTF-8&lt;/strong&gt; as character encoding&lt;/li&gt; &#xA; &lt;li&gt;Launch the application. If successful, the new language and changes will be visible&lt;/li&gt; &#xA; &lt;li&gt;Either submit a pull request or upload the file to the &lt;a href=&#34;https://github.com/IgorMundstein/WinMemoryCleaner/discussions/14&#34;&gt;translation discussion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;üí° If you are a .NET developer&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can add the new file to the Resources\Localization folder&lt;/li&gt; &#xA; &lt;li&gt;Change the file build action property to Embedded Resource&lt;/li&gt; &#xA; &lt;li&gt;Rebuild and run the WinMemoryCleaner project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;‚ù§Ô∏è Contributors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Arabic (ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)&lt;/code&gt; &lt;a href=&#34;https://github.com/Abdulmajeed-Alrajhi&#34;&gt;Abdulmajeed-Alrajhi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Chinese (Simplified) (‰∏≠Êñá(ÁÆÄ‰Ωì))&lt;/code&gt; &lt;a href=&#34;https://github.com/kzhdev&#34;&gt;Kun Zhao&lt;/a&gt; | &lt;a href=&#34;https://github.com/raydenake22&#34;&gt;raydenake22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Chinese (Traditional) (‰∏≠Êñá(ÁπÅÈ´î))&lt;/code&gt; &lt;a href=&#34;https://github.com/raydenake22&#34;&gt;raydenake22&lt;/a&gt; | &lt;a href=&#34;https://github.com/rtyrtyrtyqw&#34;&gt;rtyrtyrtyqw&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dutch (Nederlands)&lt;/code&gt; &lt;a href=&#34;https://github.com/hax4dazy&#34;&gt;hax4dazy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;French (Fran√ßais)&lt;/code&gt; &lt;a href=&#34;https://github.com/wixaw&#34;&gt;William VINCENT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;German (Deutsch)&lt;/code&gt; &lt;a href=&#34;https://github.com/Slluxx&#34;&gt;Calvin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Greek (ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨)&lt;/code&gt; &lt;a href=&#34;https://github.com/tkatsageorgis&#34;&gt;tkatsageorgis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Indonesian (Indonesia)&lt;/code&gt; &lt;a href=&#34;https://github.com/Eskeyz&#34;&gt;Eskey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Italian (Italiano)&lt;/code&gt; &lt;a href=&#34;https://github.com/wintrymichi&#34;&gt;wintrymichi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Japanese (Êó•Êú¨Ë™û)&lt;/code&gt; &lt;a href=&#34;https://github.com/dai&#34;&gt;dai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Korean (ÌïúÍµ≠Ïñ¥)&lt;/code&gt; &lt;a href=&#34;https://github.com/VenusGirl&#34;&gt;VenusGirl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Macedonian (–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏)&lt;/code&gt; &lt;a href=&#34;https://github.com/Cathadox&#34;&gt;Dimitrij Gjorgji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Polish (Polski)&lt;/code&gt; &lt;a href=&#34;https://github.com/Fresta56&#34;&gt;Fresta56&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Serbian (Srpski)&lt;/code&gt; &lt;a href=&#34;https://github.com/DragorMilos&#34;&gt;DragorMilos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Slovenian (Sloven≈°ƒçina)&lt;/code&gt; &lt;a href=&#34;https://github.com/JadranR&#34;&gt;Jadran Rudec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Spanish (Espa√±ol)&lt;/code&gt; &lt;a href=&#34;https://github.com/AjnebAlReves&#34;&gt;Ajneb Al Rev√©s&lt;/a&gt; | &lt;a href=&#34;https://github.com/FrannDzs&#34;&gt;Nekrodamus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Turkish (T√ºrk√ße)&lt;/code&gt; &lt;a href=&#34;https://github.com/Viollje&#34;&gt;Viollje&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ukrainian (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)&lt;/code&gt; &lt;a href=&#34;https://github.com/Mariachi1231&#34;&gt;Oleksander&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>