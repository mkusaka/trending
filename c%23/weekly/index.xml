<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T01:49:39Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Fictiverse/Redream</title>
    <updated>2023-06-11T01:49:39Z</updated>
    <id>tag:github.com,2023-06-11:/Fictiverse/Redream</id>
    <link href="https://github.com/Fictiverse/Redream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realtime Diffusion, using Automatic1111 Stable Diffusion API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fictiverse: Redream&lt;/h1&gt; &#xA;&lt;p&gt;(Kind of) Realtime Stable Diffusion from a screen area using &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Automatic1111&lt;/a&gt;&#39;s API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Fictiverse/Redream/assets/111762798/b408591d-3150-48bb-8f22-9d054726389c&#34; alt=&#34;screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows OS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Automatic1111 stable-diffusion-webui&lt;/a&gt;&lt;br&gt; Make sure&lt;code&gt;--xformers&lt;/code&gt; and &lt;code&gt;--api&lt;/code&gt; commandline arguments are set in your &#34;webui-user.bat&#34;:&lt;br&gt; &lt;code&gt;set COMMANDLINE_ARGS=--xformers --api&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Mikubill/sd-webui-controlnet&#34;&gt;ControlNet Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/en-us/download/dotnet/6.0&#34;&gt;.NET 6.0 Framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Last &lt;a href=&#34;https://github.com/Fictiverse/Redream/releases/latest&#34;&gt;Redream&lt;/a&gt; Release&lt;br&gt; Or compile this repo with &lt;a href=&#34;https://visualstudio.microsoft.com/en/downloads/&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/111762798/208230356-3e1272a1-60f9-4a12-9996-ea8431cd0017.mp4&#34;&gt;https://user-images.githubusercontent.com/111762798/208230356-3e1272a1-60f9-4a12-9996-ea8431cd0017.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First, start &lt;strong&gt;Automatic1111 stable-diffusion-webui&lt;/strong&gt; and wait until it is ready.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Starting with Redream:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Press &lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207306165-315287c6-e337-46fa-9d80-19c4eb782226.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; Place the &lt;code&gt;Capture area&lt;/code&gt; where you want.&lt;br&gt; &lt;code&gt;Right click&lt;/code&gt; to move, &lt;code&gt;Left click&lt;/code&gt; to paint mask, &lt;code&gt;Middle click&lt;/code&gt; to erase mask, &lt;code&gt;Mouse Scroll&lt;/code&gt; to change brush size, &lt;code&gt;Right click + Mouse Scroll&lt;/code&gt; to resize capture zone&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207306554-a15944a1-3acd-41c0-8054-b2ab6a441265.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to Start/Stop.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207307399-d24b97ca-4ef0-4fc3-b62a-290e82c3acc8.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to save every generated frames&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207307617-5af3735b-eda3-48dc-b426-f93db18809a6.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change aspect ratio&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Changing diffusion settings :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207307725-a0c2fea1-3f04-4e5d-8504-1004f610be72.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the seed value (-1 for random)&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207308468-fd1085df-11ef-4692-8a19-36ee129bbfdf.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the steps&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207308656-348a6d65-0014-4b49-94ed-d28521246200.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the denoising strength&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207308818-78c084e5-f489-42c4-ab21-f2e7c56033b5.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click/MouseScroll&lt;/code&gt; to change the cfg scale&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Saving presets :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207309228-04635108-dbd7-40af-8913-f6848a54d2be.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;code&gt;Click&lt;/code&gt; to enable Fav mod&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207309404-749e0a8d-0fde-40d8-892c-2ea928643cf8.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; Presets will start blinking&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207309847-1ef2322a-bee2-4c79-82bf-00f161f55746.png&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;code&gt;Click&lt;/code&gt; to save the current prompt into the selected slot number.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Prompt:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/111762798/207310573-321321d8-d735-463b-8ec3-28a8bb53ffd8.png&#34; alt=&#34;image&#34;&gt; &lt;code&gt;Click&lt;/code&gt; to interrogate the last captured image&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://github.com/Fictiverse/Redream/raw/master/LICENSE.txt&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/UYgRnhj8PR&#34;&gt;Discord&lt;/a&gt; - &lt;a href=&#34;https://twitter.com/Fictiverse&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=MSXYHF2E7YXZG&#34;&gt;Paypal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ko-fi.com/fictiverse&#34;&gt;ko-fi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>shimat/opencvsharp</title>
    <updated>2023-06-11T01:49:39Z</updated>
    <id>tag:github.com,2023-06-11:/shimat/opencvsharp</id>
    <link href="https://github.com/shimat/opencvsharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenCV wrapper for .NET&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/shimat/opencvsharp/image?description=1&amp;amp;forks=1&amp;amp;language=1&amp;amp;owner=1&amp;amp;pattern=Plus&amp;amp;stargazers=1&amp;amp;theme=Light&#34; alt=&#34;opencvsharp&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp/actions&#34;&gt;&lt;img src=&#34;https://github.com/shimat/opencvsharp/workflows/Windows%20Server%202022/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Windows Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shimat/opencvsharp/actions&#34;&gt;&lt;img src=&#34;https://github.com/shimat/opencvsharp/workflows/Ubuntu%2020.04/badge.svg?sanitize=true&#34; alt=&#34;Github Actions Ubuntu Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shimat/opencvsharp/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/shimat/opencvsharp.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Old versions of OpenCvSharp are stored in &lt;a href=&#34;https://github.com/shimat/opencvsharp_2410&#34;&gt;opencvsharp_2410&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NuGet&lt;/h2&gt; &#xA;&lt;h3&gt;Managed libraries&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenCvSharp core libraries&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.Extensions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GDI+ Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.Extensions&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.Extensions.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.WpfExtensions&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WPF Extensions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.WpfExtensions&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.WpfExtensions.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.Windows&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All-in-one package for Windows (except UWP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.Windows&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.Windows.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Native bindings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.win&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for Windows x64/x86 (except UWP)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.win&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.win.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.uwp&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for UWP (Universal Windows Platform) x64/x86/ARM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.uwp&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.uwp.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.ubuntu.20.04-x64&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for Ubuntu 20.04 x64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://badge.fury.io/nu/OpenCvSharp4_.runtime.ubuntu.20.04-x64&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4_.runtime.ubuntu.20.04-x64.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.linux-arm&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for Linux Arm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp4.runtime.linux-arm/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.linux-arm.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;OpenCvSharp4.runtime.wasm&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Native bindings for WebAssembly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp4.runtime.wasm/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/nu/OpenCvSharp4.runtime.wasm.svg?sanitize=true&#34; alt=&#34;NuGet version&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Native binding (OpenCvSharpExtern.dll / libOpenCvSharpExtern.so) is required to work OpenCvSharp. To use OpenCvSharp, you should add both &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.*&lt;/code&gt; packages to your project. Currently, native bindings for Windows, UWP and Ubuntu are released.&lt;/p&gt; &#xA;&lt;p&gt;Packages named OpenCvSharp3-* and OpenCvSharp-* are deprecated.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp3-AnyCPU/&#34;&gt;OpenCvSharp3-AnyCPU&lt;/a&gt; / &lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp3-WithoutDll/&#34;&gt;OpenCvSharp3-WithoutDll&lt;/a&gt; / &lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp-AnyCPU/&#34;&gt;OpenCvSharp-AnyCPU&lt;/a&gt; / &lt;a href=&#34;https://www.nuget.org/packages/OpenCvSharp-WithoutDll/&#34;&gt;OpenCvSharp-WithoutDll&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docker images&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shimat?tab=packages&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For Google App Engine Flexible (.NET Core 3.1): &lt;a href=&#34;https://hub.docker.com/r/shimat/appengine-aspnetcore3.1-opencv4.5.0&#34;&gt;shimat/appengine-aspnetcore3.1-opencv4.5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For AWS Lambda (.NET 5): &lt;a href=&#34;https://hub.docker.com/r/shimat/al2-dotnet5-opencv4.5.0&#34;&gt;shimat/al2-dotnet5-opencv4.5.0&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Code sample: &lt;a href=&#34;https://github.com/shimat/opencvsharp_AWSLambdaSample&#34;&gt;https://github.com/shimat/opencvsharp_AWSLambdaSample&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Windows (except UWP)&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.win&lt;/code&gt; NuGet packages to your project. You can use &lt;code&gt;OpenCvSharp4.Windows&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;UWP&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.uwp&lt;/code&gt; NuGet packages to your project. Note that &lt;code&gt;OpenCvSharp4.runtime.win&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.Windows&lt;/code&gt; don&#39;t work for UWP.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu 20.04&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; and &lt;code&gt;OpenCvSharp4.runtime.ubuntu.20.04.x64&lt;/code&gt; NuGet packages to your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new console -n ConsoleApp01&#xA;cd ConsoleApp01&#xA;dotnet add package OpenCvSharp4&#xA;dotnet add package OpenCvSharp4.runtime.ubuntu.20.04-x64&#xA;# -- edit Program.cs --- # &#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Downloads&lt;/h3&gt; &#xA;&lt;p&gt;If you do not use NuGet, get DLL files from the &lt;a href=&#34;https://github.com/shimat/opencvsharp/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Target OpenCV&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV 4.7&lt;/a&gt; with &lt;a href=&#34;https://github.com/opencv/opencv_contrib&#34;&gt;opencv_contrib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.microsoft.com/ja-jp/download/details.aspx?id=1639&#34;&gt;.NET Framework 4.8&lt;/a&gt; / &lt;a href=&#34;https://www.microsoft.com/net/download&#34;&gt;.NET Core 2.0&lt;/a&gt; / &lt;a href=&#34;http://www.mono-project.com/Main_Page&#34;&gt;Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Windows) &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Visual C++ 2022 Redistributable Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Windows Server) Media Foundation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;PS1&amp;gt; Install-WindowsFeature Server-Media-Foundation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Ubuntu) You must pre-install all the dependency packages needed to build OpenCV. Many packages such as libjpeg must be installed in order to work OpenCV. &lt;a href=&#34;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&#34;&gt;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenCvSharp won&#39;t work on Unity and Xamarin platform.&lt;/strong&gt; For Unity, please consider using &lt;a href=&#34;https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088&#34;&gt;OpenCV for Unity&lt;/a&gt; or some other solutions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenCvSharp does not support CUDA.&lt;/strong&gt; If you want to use the CUDA features, you need to customize the native bindings yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For more details, see &lt;strong&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp_samples/&#34;&gt;samples&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/strong&gt; pages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Always remember to release Mat instances! The &lt;code&gt;using&lt;/code&gt; syntax is useful.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;// C# 8&#xA;// Edge detection by Canny algorithm&#xA;using OpenCvSharp;&#xA;&#xA;class Program &#xA;{&#xA;    static void Main() &#xA;    {&#xA;        using var src = new Mat(&#34;lenna.png&#34;, ImreadModes.Grayscale);&#xA; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;using var dst = new Mat();&#xA;        &#xA;        Cv2.Canny(src, dst, 50, 200);&#xA;        using (new Window(&#34;src image&#34;, src)) &#xA;        using (new Window(&#34;dst image&#34;, dst)) &#xA;        {&#xA;            Cv2.WaitKey();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As mentioned above, objects of classes, such as Mat and MatExpr, have unmanaged resources and need to be manually released by calling the Dispose() method. Worst of all, the +, -, *, and other operators create new objects each time, and these objects need to be disposed, or there will be memory leaks. Despite having the using syntax, the code still looks very verbose.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, a ResourcesTracker class is provided. The ResourcesTracker implements the IDisposable interface, and when the Dispose() method is called, all resources tracked by the ResourcesTracker are disposed. The T() method of ResourcesTracker can trace an object or an array of objects, and the method NewMat() is like T(new Mat(...). All the objects that need to be released can be wrapped with T().For example: t.T(255 - t.T(picMat * 0.8)) . Example code is as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (var t = new ResourcesTracker())&#xA;{&#xA;    Mat mat1 = t.NewMat(new Size(100, 100), MatType.CV_8UC3, new Scalar(0));&#xA;    Mat mat3 = t.T(255-t.T(mat1*0.8));&#xA;    Mat[] mats1 = t.T(mat3.Split());&#xA;    Mat mat4 = t.NewMat();&#xA;    Cv2.Merge(new Mat[] { mats1[0], mats1[1], mats1[2] }, mat4);&#xA;}&#xA;&#xA;using (var t = new ResourcesTracker())&#xA;{&#xA;    var src = t.T(new Mat(@&#34;lenna.png&#34;, ImreadModes.Grayscale));&#xA;    var dst = t.NewMat();&#xA;    Cv2.Canny(src, dst, 50, 200);&#xA;    var blurredDst = t.T(dst.Blur(new Size(3, 3)));&#xA;    t.T(new Window(&#34;src image&#34;, src));&#xA;    t.T(new Window(&#34;dst image&#34;, blurredDst));&#xA;    Cv2.WaitKey();&#xA;}      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenCvSharp is modeled on the native OpenCV C/C++ API style as much as possible.&lt;/li&gt; &#xA; &lt;li&gt;Many classes of OpenCvSharp implement IDisposable. There is no need to manage unsafe resources.&lt;/li&gt; &#xA; &lt;li&gt;OpenCvSharp does not force object-oriented programming style on you. You can also call native-style OpenCV functions.&lt;/li&gt; &#xA; &lt;li&gt;OpenCvSharp provides functions for converting from &lt;code&gt;Mat&lt;/code&gt; into &lt;code&gt;Bitmap&lt;/code&gt;(GDI+) or &lt;code&gt;WriteableBitmap&lt;/code&gt;(WPF).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code samples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shimat/opencvsharp_samples/&#34;&gt;https://github.com/shimat/opencvsharp_samples/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API Documents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://shimat.github.io/opencvsharp/api/OpenCvSharp.html&#34;&gt;http://shimat.github.io/opencvsharp/api/OpenCvSharp.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;OpenCvSharp Build Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Visual Studio 2022 or later &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VC++ features are required.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;download_opencv_windows.ps1&lt;/code&gt; to download OpenCV libs and headers from &lt;a href=&#34;https://github.com/shimat/opencv_files&#34;&gt;https://github.com/shimat/opencv_files&lt;/a&gt;. Those lib files are precompiled by the owner of OpenCvSharp using GitHub Actions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\download_opencv_windows.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build OpenCvSharp &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;OpenCvSharp.sln&lt;/code&gt; and build&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;How to customize OpenCV binaries yourself&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use some OpenCV features that are not provided by default in OpenCvSharp (e.g. GPU), you will have to build OpenCV yourself. The binary files of OpenCV for OpenCvSharp for Windows are created in the &lt;a href=&#34;https://github.com/shimat/opencv_files&#34;&gt;opencv_files&lt;/a&gt; repository. See the README.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone --recursive https://github.com/shimat/opencv_files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;build_windows.ps1&lt;/code&gt; or &lt;code&gt;build_uwp.ps1&lt;/code&gt; to customize the CMake parameters .&lt;/li&gt; &#xA; &lt;li&gt;Run the PowerShell script.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build OpenCV with opencv_contrib. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&#34;&gt;https://www.learnopencv.com/install-opencv-4-on-ubuntu-18-04/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install .NET Core SDK. &lt;a href=&#34;https://learn.microsoft.com/ja-jp/dotnet/core/install/linux-ubuntu&#34;&gt;https://learn.microsoft.com/ja-jp/dotnet/core/install/linux-ubuntu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get OpenCvSharp source files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/shimat/opencvsharp.git&#xA;cd opencvsharp&#xA;git fetch --all --tags --prune &amp;amp;&amp;amp; git checkout ${OPENCVSHARP_VERSION}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build native wrapper &lt;code&gt;OpenCvSharpExtern&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd opencvsharp/src&#xA;mkdir build&#xA;cd build&#xA;cmake -D CMAKE_INSTALL_PREFIX=${YOUR_OPENCV_INSTALL_PATH} ..&#xA;make -j &#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should add reference to &lt;code&gt;opencvsharp/src/build/OpenCvSharpExtern/libOpenCvSharpExtern.so&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export LD_LIBRARY_PATH=&#34;${LD_LIBRARY_PATH}:/home/shimat/opencvsharp/src/build/OpenCvSharpExtern&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;OpenCvSharp4&lt;/code&gt; NuGet package to your project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet new console -n ConsoleApp01&#xA;cd ConsoleApp01&#xA;dotnet add package OpenCvSharp4&#xA;# -- edit Program.cs --- # &#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;If you find the OpenCvSharp library useful and would like to show your gratitude by donating, here are some donation options. Thank you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/shimat&#34;&gt;https://github.com/sponsors/shimat&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elsa-workflows/elsa-core</title>
    <updated>2023-06-11T01:49:39Z</updated>
    <id>tag:github.com,2023-06-11:/elsa-workflows/elsa-core</id>
    <link href="https://github.com/elsa-workflows/elsa-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A .NET workflows library&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/github-social-preview-banner-for-elsa.png&#34; alt=&#34;Elsa Workflows&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Elsa Workflows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Elsa/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/Elsa&#34; alt=&#34;Nuget (with prereleases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@elsa-workflows/elsa-workflows-studio&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@elsa-workflows/elsa-workflows-studio&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f.feedz.io/elsa-workflows/elsa-2/nuget/index.json&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/endpoint.svg?url=https%3A%2F%2Ff.feedz.io%2Felsa-workflows%2Felsa-2%2Fshield%2FElsa%2Flatest&#34; alt=&#34;feedz.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://f.feedz.io/elsa-workflows/elsa-2/npm/@elsa-workflows/elsa-workflows-studio&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?color=0790b2&amp;amp;label=feedz.io%20%28npm%29&amp;amp;query=%24%5B%27dist-tags%27%5D.latest&amp;amp;url=https%3A%2F%2Ff.feedz.io%2Felsa-workflows%2Felsa-2%2Fnpm%2F%40elsa-workflows%2Felsa-workflows-studio&#34; alt=&#34;feedz.io npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/elsaworkflows/elsa-dashboard-and-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/elsaworkflows/elsa-dashboard-and-server?label=docker&amp;amp;logo=docker&#34; alt=&#34;Docker Image Version (latest semver)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-elsa.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-elsa.yml/badge.svg?branch=master&#34; alt=&#34;Build Elsa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-dashboard-and-server-docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/elsa-workflows/elsa-core/actions/workflows/publish-latest-dashboard-and-server-docker.yml/badge.svg?sanitize=true&#34; alt=&#34;Build elsa-dashboard:latest&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/hhChk5H472&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/814605913783795763?label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com/questions/tagged/elsa-workflows&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-elsa_workflows-orange.svg?sanitize=true&#34; alt=&#34;Stack Overflow questions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/elsaworkflows/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/elsaworkflows?style=social&#34; alt=&#34;Subreddit subscribers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elsa Core is a workflows library that enables workflow execution in any .NET Core application. Workflows can be defined using code and using the visual workflow designer.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/elsa-2-hello-world-http.gif&#34; alt=&#34;Elsa 2 Preview&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found &lt;a href=&#34;https://v2.elsaworkflows.io/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet new console -n &#34;MyConsoleApp&#34;&#xA;&#xA;cd MyConsoleApp&#xA;&#xA;dotnet add package Elsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new file called &lt;code&gt;HelloWorldWorkflow.cs&lt;/code&gt; and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Elsa.Activities.Console;&#xA;using Elsa.Builders;&#xA;&#xA;namespace MyConsoleApp&#xA;{&#xA;    public class HelloWorld : IWorkflow&#xA;    {&#xA;        public void Build(IWorkflowBuilder builder) =&amp;gt; builder.WriteLine(&#34;Hello World!&#34;);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;Program.cs&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System.Threading.Tasks;&#xA;using Elsa.Services;&#xA;using Microsoft.Extensions.DependencyInjection;&#xA;&#xA;namespace MyConsoleApp&#xA;{&#xA;    class Program&#xA;    {&#xA;        private static async Task Main()&#xA;        {&#xA;            var services = new ServiceCollection()&#xA;                .AddElsa(options =&amp;gt; options&#xA;                    .AddConsoleActivities()&#xA;                    .AddWorkflow&amp;lt;HelloWorld&amp;gt;())&#xA;                .BuildServiceProvider();&#xA;            &#xA;            var workflowRunner = services.GetRequiredService&amp;lt;IBuildsAndStartsWorkflow&amp;gt;();&#xA;            await workflowRunner.BuildAndStartWorkflowAsync&amp;lt;HelloWorld&amp;gt;();&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hello World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://elsa-workflows.github.io/elsa-core/docs/next/quickstarts/quickstarts-console-hello-world&#34;&gt;Quickstart guides&lt;/a&gt; for more examples, including how to setup the Elsa Dashboard to create and manage visual workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;A quick and easy way to give Elsa a spin is to run the following Docker command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t -i -e ELSA__SERVER__BASEURL=&#39;http://localhost:13000&#39; -p 13000:80 elsaworkflows/elsa-dashboard-and-server:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then navigate to &lt;a href=&#34;http://localhost:13000&#34;&gt;http://localhost:13000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building From Source&lt;/h2&gt; &#xA;&lt;p&gt;When you clone the repo, the solution file to open is &lt;code&gt;Elsa.sln&lt;/code&gt; which should build with no issues.&lt;/p&gt; &#xA;&lt;h3&gt;Elsa Dashboard &amp;amp; Client Assets&lt;/h3&gt; &#xA;&lt;p&gt;If you want to run the sample project &lt;code&gt;ElsaDashboard.Samples.AspNetCore.Monolith.csproj&lt;/code&gt;, you should build the client assets first.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to do that is by running the &lt;code&gt;.\build-assets.ps1&lt;/code&gt; file in the root of the repo (where this README.md is as well). Alternatively, you might run &lt;code&gt;.\build-assets-and-run-dashboard-monolith.ps1&lt;/code&gt; that will first build the client assets and then run the dashboard application to give Elsa a quick whirl.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Another quick way to try out Elsa is to run &lt;code&gt;build-and-run-dashboard-monolith-with-docker.ps1&lt;/code&gt;, which will use Docker Compose to build an image and start a container. When the container starts, you can reach the Elsa Dashboard at &lt;a href=&#34;http://localhost:14000&#34;&gt;http://localhost:14000&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Version 1.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Invoker&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Long-running Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflows as code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflows as data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Correlation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistence: CosmosDB, Entity Framework Core, MongoDB, YesSQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTML5 Workflow Designer Web Component&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ASP.NET Core Workflow Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; JavaScript Expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Liquid Expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Primitive Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Control Flow Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Timer Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Email Activities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 2.0&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Composite Activities API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Service Bus Messaging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Host REST API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Workflow Server&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Distributed Hosting Support (support for multi-node environments)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistence: MongoDB, YesSQL, Entity Framework Core (SQL Server, SQLLite, PostgreSql)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; New Workflow Designer + Dashboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generic Command &amp;amp; Event Activities&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; State Machines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Test Workflows from Designer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Debug Workflows from Designer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Localization Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Lucene Indexing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Version 3.0 (engine + designer redesign)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programming model similar to WF&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sequential Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flowchart Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; State Machine Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Sagas&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; BPMN Workflows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Actor Model for Distributed Workflows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional goals for Elsa 3 (separate from core library)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modular workflow server application framework: unobtrusively add new capabilities to the workflow engine. Requires a common ORM in order to extend persistence layer in a modular fashion. EF Core has the potential to abstract away any &amp;amp; all DB providers, including MongoDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Modular &amp;amp; themeable dashboard application framework: unobtrusively add UI (screens &amp;amp; widgets) to the dashboard (could be Blazor). The dashboard would be a SPA, invoking API endpoints by the modular workflow server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Module: ability for users to visually define API endpoints and implement their logic using workflows (&#34;code behind&#34; concept of VB and WinForms). With Swagger integration for Open API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Module: ability to define logical forms (form name and fields) and implement their submission logic visually using workflows (also &#34;code behind&#34; concept).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The secondary goals for Elsa 3 aim to bring about a low-code framework &amp;amp; platform for rapid application development. This shoud apply to the full spectrum of application development, ranging from embedded software (e.g Raspberry PI) to microservices &amp;amp; serverless architectures. Where one would normally write C# code to handle UI events or implement API endpoints, one can now visually design their logic using workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow Designer&lt;/h2&gt; &#xA;&lt;p&gt;Workflows can be visually designed using the Elsa Designer, a reusable &amp;amp; extensible HTML5 web component built with &lt;a href=&#34;https://stenciljs.com/&#34;&gt;StencilJS&lt;/a&gt;. To manage workflow definitions and instances, Elsa comes with an NPM package providing a set of HTML web components and a reusable Razor Class Library that wraps this package. The NPM package can be used in any type of web application, while the RCL provides Razor Components to embed the Elsa Dashboard SPA component as well as individual components in your ASP.NET Core application.&lt;/p&gt; &#xA;&lt;h2&gt;Programmatic Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Workflows can be created programmatically and then executed using one of the various APIs, which vary from low-level control to high-level ease of use.&lt;/p&gt; &#xA;&lt;h3&gt;Hello World&lt;/h3&gt; &#xA;&lt;p&gt;The following code snippet demonstrates creating a workflow with two WriteLine activities from code and then invoking it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;&#xA;// Define a strongly-typed workflow.&#xA;public class HelloWorldWorkflow : IWorkflow&#xA;{&#xA;    public void Build(IWorkflowBuilder builder)&#xA;    {&#xA;        builder&#xA;            .WriteLine(&#34;Hello World!&#34;)&#xA;            .WriteLine(&#34;Goodbye cruel world...&#34;);&#xA;    }&#xA;}&#xA;&#xA;// Setup a service collection.&#xA;var services = new ServiceCollection()&#xA;    .AddElsa()&#xA;    .AddConsoleActivities()&#xA;    .AddWorkflows&amp;lt;HelloWorldWorkflow&amp;gt;()&#xA;    .BuildServiceProvider();&#xA;&#xA;// Get a workflow runner.&#xA;var workflowRunner = services.GetService&amp;lt;IBuildsAndStartsWorkflow&amp;gt;();&#xA;&#xA;// Run the workflow.&#xA;await workflowRunner.BuildAndStartWorkflowAsync&amp;lt;HelloWorld&amp;gt;();&#xA;&#xA;// Output:&#xA;// /&amp;gt; Hello World!&#xA;// /&amp;gt; Goodbye cruel world...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Persistence&lt;/h2&gt; &#xA;&lt;p&gt;Elsa abstracts away data access, which means you can use any persistence provider you prefer.&lt;/p&gt; &#xA;&lt;h2&gt;Long Running Workflows&lt;/h2&gt; &#xA;&lt;p&gt;Elsa has native support for long-running workflows. As soon as a workflow is halted because of some blocking activity, the workflow is persisted. When the appropriate event occurs, the workflow is loaded from the store and resumed.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create workflows using the &lt;strong&gt;Workflow Builder API&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create &amp;amp; manage workflows &lt;strong&gt;visually&lt;/strong&gt; using the Elsa Dashboard SPA.&lt;/li&gt; &#xA; &lt;li&gt;Design &lt;strong&gt;long-running&lt;/strong&gt; workflows.&lt;/li&gt; &#xA; &lt;li&gt;REST &lt;strong&gt;API Endpoints&lt;/strong&gt; to manage and integrate with Elsa from external applications.&lt;/li&gt; &#xA; &lt;li&gt;Create higher-level activities using the &lt;strong&gt;Composite Activity API&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich set of activities&lt;/strong&gt; such as SetVariable, For, ForEach, ParallelForEach, Fork, Join, HttpEndpoint, SendHttpRequest, SendEmail, MessageReceived and much more.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;strong&gt;custom activities&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workflow Expressions&lt;/strong&gt; allow you to configure activity properties with expressions that are evaluated at runtime. Supported syntaxes are JavaScript ans Liquid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Elsa Workflows?&lt;/h2&gt; &#xA;&lt;p&gt;One of the main goals of Elsa is to &lt;strong&gt;enable workflows in any .NET application&lt;/strong&gt; with &lt;strong&gt;minimum effort&lt;/strong&gt; and &lt;strong&gt;maximum extensibility&lt;/strong&gt;. This means that it should be easy to integrate workflow capabilities into your own application.&lt;/p&gt; &#xA;&lt;h3&gt;What about Azure Logic Apps?&lt;/h3&gt; &#xA;&lt;p&gt;As powerful and as complete Azure Logic Apps is, it&#39;s available only as a managed service in Azure. Elsa on the other hand allows you to host it not only on Azure, but on any cloud provider that supports .NET Core. And of course you can host it on-premise.&lt;/p&gt; &#xA;&lt;p&gt;Although you can implement long-running workflows with Logic Apps, you would typically do so with splitting your workflow with multiple Logic Apps where one workflow invokes the other. This can make the logic flow a bit hard to follow. with Elsa, you simply add triggers anywhere in the workflow, making it easier to have a complete view of your application logic. And if you want, you can still invoke other workflows form one workflow.&lt;/p&gt; &#xA;&lt;h3&gt;What about Windows Workflow Foundation?&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve always liked Windows Workflow Foundation, but unfortunately &lt;a href=&#34;https://forums.dotnetfoundation.org/t/what-is-the-roadmap-of-workflow-foundation/3066&#34;&gt;development appears to have halted&lt;/a&gt;. Although there&#39;s an effort being made to &lt;a href=&#34;https://github.com/dmetzgar/corewf&#34;&gt;port WF to .NET Standard&lt;/a&gt;, there are a few reasons I prefer Elsa:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elsa intrinsically supports triggering events that starts new workflows and resumes halted workflow instances in an easy to use manner. E.g. &lt;code&gt;workflowHost.TriggerWorkflowAsync(&#34;HttpRequestTrigger&#34;);&#34;&lt;/code&gt; will start and resume all workflows that either start with or are halted on the &lt;code&gt;HttpRequestTrigger&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Elsa has a web-based workflow designer. I once worked on a project for a customer that was building a huge SaaS platform. One of the requirements was to provide a workflow engine and a web-based editor. Although there are commercial workflow libraries and editors out there, the business model required open-source software. We used WF and the re-hosted Workflow Designer. It worked, but it wasn&#39;t great.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What about Orchard Workflows?&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;a href=&#34;http://docs.orchardproject.net/en/latest/Documentation/Workflows/&#34;&gt;Orchard&lt;/a&gt; and &lt;a href=&#34;https://orchardcore.readthedocs.io/en/dev/docs/reference/modules/Workflows/&#34;&gt;Orchard Core&lt;/a&gt; ship with a powerful workflows module, and both are awesome. In fact, Elsa Workflows is taken &amp;amp; adapted from Orchard Core&#39;s Workflows module. Elsa uses a similar model, but there are some differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elsa Workflows is completely decoupled from web, whereas Orchard Core Workflows is coupled to not only the web, but also the Orchard Core Framework itself.&lt;/li&gt; &#xA; &lt;li&gt;Elsa Workflows can execute in any .NET Core application without taking a dependency on any Orchard Core packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the &lt;a href=&#34;https://dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;.NET Foundation&lt;/h3&gt; &#xA;&lt;p&gt;This project is supported by the &lt;a href=&#34;https://dotnetfoundation.org&#34;&gt;.NET Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.interfirst.com/&#34;&gt;Interfirst&lt;/a&gt;, a Residential Mortgage Licensee&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.interfirst.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/sponsors/interfirst.svg?sanitize=true&#34; alt=&#34;Interfirst&#34; width=&#34;600&#34; height=&#34;120&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nexxbiz.io/&#34;&gt;nexxbiz&lt;/a&gt;, accelerating delivery&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nexxbiz.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsa-workflows/elsa-core/master/doc/sponsors/nexxbiz.svg?sanitize=true&#34; width=&#34;300&#34; height=&#34;300&#34; alt=&#34;nexxbiz&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>