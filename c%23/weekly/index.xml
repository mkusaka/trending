<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:39:01Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OkGoDoIt/OpenAI-API-dotnet</title>
    <updated>2022-12-25T01:39:01Z</updated>
    <id>tag:github.com,2022-12-25:/OkGoDoIt/OpenAI-API-dotnet</id>
    <link href="https://github.com/OkGoDoIt/OpenAI-API-dotnet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A C#/.NET SDK for accessing the OpenAI GPT-3 API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;C#/.NET SDK for accessing the OpenAI GPT-3 API&lt;/h1&gt; &#xA;&lt;p&gt;A simple C# .NET wrapper library to use with OpenAI&#39;s GPT-3 API. More context &lt;a href=&#34;https://rogerpincombe.com/openai-dotnet-api&#34;&gt;on my blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var api = new OpenAI_API.OpenAIAPI(engine: Engine.Davinci);&#xA;&#xA;var result = await api.Completions.CreateCompletionAsync(&#34;One Two Three One Two&#34;, temperature: 0.1);&#xA;Console.WriteLine(result.ToString());&#xA;// should print something starting with &#34;Three&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var api = new OpenAI_API.OpenAIAPI(&#34;sk-myapikeyhere&#34;););&#xA;&#xA;var result = await api.Search.GetBestMatchAsync(&#34;Washington DC&#34;, &#34;Canada&#34;, &#34;China&#34;, &#34;USA&#34;, &#34;Spain&#34;);&#xA;Console.WriteLine(result);&#xA;// should print &#34;USA&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;This library is based on .NET Standard 2.0, so it should work across .NET Framework &amp;gt;=4.7.2 and .NET Core &amp;gt;= 3.0. It should work across console apps, winforms, wpf, asp.net, etc (although I have not yet tested with asp.net). It should work across Windows, Linux, and Mac, although I have only tested on Windows so far.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Install from NuGet&lt;/h3&gt; &#xA;&lt;p&gt;Install package &lt;a href=&#34;https://www.nuget.org/packages/OpenAI/&#34;&gt;&lt;code&gt;OpenAI&lt;/code&gt; from Nuget&lt;/a&gt;. Here&#39;s how via commandline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Install-Package OpenAI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;There are 3 ways to provide your API keys, in order of precedence:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pass keys directly to &lt;code&gt;APIAuthentication(string key)&lt;/code&gt; constructor&lt;/li&gt; &#xA; &lt;li&gt;Set environment var for OPENAI_KEY&lt;/li&gt; &#xA; &lt;li&gt;Include a config file in the local directory or in your user directory named &lt;code&gt;.openai&lt;/code&gt; and containing the line:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;OPENAI_KEY=sk-aaaabbbbbccccddddd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You use the &lt;code&gt;APIAuthentication&lt;/code&gt; when you initialize the API as shown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// for example&#xA;OpenAIAPI api = new OpenAIAPI(&#34;sk-mykeyhere&#34;); // shorthand&#xA;// or&#xA;OpenAIAPI api = new OpenAIAPI(new APIAuthentication(&#34;sk-secretkey&#34;)); // create object manually&#xA;// or&#xA;OpenAIAPI api = new OpenAIAPI(APIAuthentication LoadFromEnv()); // use env vars&#xA;// or&#xA;OpenAIAPI api = new OpenAIAPI(APIAuthentication LoadFromPath()); // use config file (can optionally specify where to look)&#xA;// or&#xA;OpenAIAPI api = new OpenAIAPI(); // uses default, env, or config file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Completions&lt;/h3&gt; &#xA;&lt;p&gt;The Completion API is accessed via &lt;code&gt;OpenAIAPI.Completions&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;CreateCompletionAsync(CompletionRequest request)&#xA;&#xA;// for example&#xA;var result = await api.Completions.CreateCompletionAsync(new CompletionRequest(&#34;One Two Three One Two&#34;, temperature: 0.1));&#xA;// or&#xA;var result = await api.Completions.CreateCompletionAsync(&#34;One Two Three One Two&#34;, temperature: 0.1);&#xA;// or other convenience overloads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create your &lt;code&gt;CompletionRequest&lt;/code&gt; ahead of time or use one of the helper overloads for convenience. It returns a &lt;code&gt;CompletionResult&lt;/code&gt; which is mostly metadata, so use its &lt;code&gt;.ToString()&lt;/code&gt; method to get the text if all you want is the completion.&lt;/p&gt; &#xA;&lt;h4&gt;Streaming&lt;/h4&gt; &#xA;&lt;p&gt;Streaming allows you to get results are they are generated, which can help your application feel more responsive, especially on slow models like Davinci.&lt;/p&gt; &#xA;&lt;p&gt;Using the new C# 8.0 async iterators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IAsyncEnumerable&amp;lt;CompletionResult&amp;gt; StreamCompletionEnumerableAsync(CompletionRequest request)&#xA;&#xA;// for example&#xA;await foreach (var token in api.Completions.StreamCompletionEnumerableAsync(new CompletionRequest(&#34;My name is Roger and I am a principal software engineer at Salesforce.  This is my resume:&#34;, 200, 0.5, presencePenalty: 0.1, frequencyPenalty: 0.1)))&#xA;{&#xA;&#x9;Console.Write(token);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if using .NET framework or C# &amp;lt;8.0:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;StreamCompletionAsync(CompletionRequest request, Action&amp;lt;CompletionResult&amp;gt; resultHandler)&#xA;&#xA;// for example&#xA;await api.Completions.StreamCompletionAsync(&#xA;&#x9;new CompletionRequest(&#34;My name is Roger and I am a principal software engineer at Salesforce.  This is my resume:&#34;, 200, 0.5, presencePenalty: 0.1, frequencyPenalty: 0.1),&#xA;&#x9;res =&amp;gt; ResumeTextbox.Text += res.ToString());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Document Search&lt;/h3&gt; &#xA;&lt;p&gt;The Search API is accessed via &lt;code&gt;OpenAIAPI.Search&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;You can get all results as a dictionary using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GetSearchResultsAsync(SearchRequest request)&#xA;&#xA;// for example&#xA;var request = new SearchRequest()&#xA;{&#xA;&#x9;Query = &#34;Washington DC&#34;,&#xA;&#x9;Documents = new List&amp;lt;string&amp;gt; { &#34;Canada&#34;, &#34;China&#34;, &#34;USA&#34;, &#34;Spain&#34; }&#xA;};&#xA;var result = await api.Search.GetSearchResultsAsync(request);&#xA;// result[&#34;USA&#34;] == 294.22&#xA;// result[&#34;Spain&#34;] == 73.81&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The returned dictionary maps documents to scores. You can create your &lt;code&gt;SearchRequest&lt;/code&gt; ahead of time or use one of the helper overloads for convenience, such as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GetSearchResultsAsync(string query, params string[] documents)&#xA;&#xA;// for example&#xA;var result = await api.Search.GetSearchResultsAsync(&#34;Washington DC&#34;, &#34;Canada&#34;, &#34;China&#34;, &#34;USA&#34;, &#34;Spain&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get only the best match using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GetBestMatchAsync(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you only want the best match but still want to know the score, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;GetBestMatchWithScoreAsync(request)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of those methods has similar convenience overloads to specify the request inline.&lt;/p&gt; &#xA;&lt;h3&gt;Finetuning&lt;/h3&gt; &#xA;&lt;p&gt;I don&#39;t yet have access to finetuning, but once I do I will add it to this SDK. Subscribe to this repo if you want to be alerted.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Every single class, method, and property has extensive XML documentation, so it should show up automatically in IntelliSense. That combined with the official OpenAI documentation should be enough to get started. Feel free to ping me on Twitter &lt;a href=&#34;https://twitter.com/OkGoDoIt&#34;&gt;@OkGoDoIt&lt;/a&gt; if you have any questions. Better documentation may come later.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://licensebuttons.net/p/zero/1.0/88x31.png&#34; alt=&#34;CC-0 Public Domain&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library is licensed CC-0, in the public domain. You can use it for whatever you want, publicly or privately, without worrying about permission or licensing or whatever. It&#39;s just a wrapper around the OpenAI API, so you still need to get access to OpenAI from them directly. I am not affiliated with OpenAI and this library is not endorsed by them, I just have beta access and wanted to make a C# library to access it more easily. Hopefully others find this useful as well. Feel free to open a PR if there&#39;s anything you want to contribute.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>QuestPDF/QuestPDF</title>
    <updated>2022-12-25T01:39:01Z</updated>
    <id>tag:github.com,2022-12-25:/QuestPDF/QuestPDF</id>
    <link href="https://github.com/QuestPDF/QuestPDF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QuestPDF is an open-source, modern and battle-tested library that can help you with generating PDF documents by offering friendly, discoverable and predictable C# fluent API.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://www.questpdf.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/QuestPDF/example-invoice/raw/main/images/logo.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/QuestPDF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-.NET-blue&#34; alt=&#34;Dotnet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/QuestPDF/QuestPDF/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/QuestPDF/QuestPDF&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/QuestPDF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/QuestPdf&#34; alt=&#34;Nuget version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/QuestPDF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/QuestPDF&#34; alt=&#34;Nuget download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/QuestPDF/QuestPDF/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/QuestPDF/QuestPDF&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;QuestPDF is an open-source .NET library for PDF documents generation.&lt;/p&gt; &#xA;&lt;p&gt;It offers a layout engine designed with a full paging support in mind. The document consists of many simple elements (e.g. border, background, image, text, padding, table, grid etc.) that are composed together to create more complex structures. This way, as a developer, you can understand the behavior of every element and use them with full confidence. Additionally, the document and all its elements support paging functionality. For example, an element can be moved to the next page (if there is not enough space) or even be split between pages like table&#39;s rows.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other libraries, it does not rely on the HTML-to-PDF conversion which in many cases is not reliable. Instead, it implements its own layout engine that is optimized to cover all paging-related requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Please help by giving a star&lt;/h2&gt; &#xA;&lt;p&gt;Choosing a project dependency could be difficult. We need to ensure stability and maintainability of our projects. Surveys show that GitHub stars count play an important factor when assessing library quality.&lt;/p&gt; &#xA;&lt;p&gt;⭐ Please give this repository a star. It takes seconds and help thousands of developers! ⭐&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/9263853/209412523-e97bdd74-90a9-483c-b186-63cd9797e2a0.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;h2&gt;Please share with the community&lt;/h2&gt; &#xA;&lt;p&gt;As an open-source project without funding, I cannot afford advertising QuestPDF in a typical way. Instead, the library relies on community interactions. Please consider sharing a post about QuestPDF and the value it provides. It really does help!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reddit.com/submit?url=https://github.com/QuestPDF/QuestPDF&amp;amp;title=Check%20out%20QuestPDF%20%F0%9F%8E%8A%20a%20modern%20open-source%20.NET%20library%20%20for%20PDF%20document%20generation%20%F0%9F%9A%80&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-reddit-red?logo=reddit&#34; alt=&#34;Share on Reddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/share?url=https://github.com/QuestPDF/QuestPDF&amp;amp;t=Check%20out%20QuestPDF%20%F0%9F%8E%8A%20a%20modern%20open-source%20.NET%20library%20%20for%20PDF%20document%20generation%20%F0%9F%9A%80%20%23dotnet%20%23csharp%20%23questpdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-twitter-03A9F4?logo=twitter&#34; alt=&#34;Share on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://news.ycombinator.com/submitlink?u=https://github.com/QuestPDF/QuestPDF&amp;amp;t=QuestPDF%20-%20a%20modern%20open-source%20.NET%20library%20%20for%20PDF%20document%20generation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-hacker%20news-orange?logo=ycombinator&#34; alt=&#34;Share on HackerNews&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/sharer/sharer.php?u=https://github.com/QuestPDF/QuestPDF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/share%20on-facebook-1976D2?logo=facebook&#34; alt=&#34;Share on Facebook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The library is available as a nuget package. You can install it as any other nuget package from your IDE, try to search by &lt;code&gt;QuestPDF&lt;/code&gt;. You can find package details &lt;a href=&#34;https://www.nuget.org/packages/QuestPDF/&#34;&gt;on this webpage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;// Package Manager&#xA;Install-Package QuestPDF&#xA;&#xA;// .NET CLI&#xA;dotnet add package QuestPDF&#xA;&#xA;// Package reference in .csproj file&#xA;&amp;lt;PackageReference Include=&#34;QuestPDF&#34; Version=&#34;2022.12.0&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/QuestPDF/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/package%20details-QuestPDF-blue?logo=nuget&#34; alt=&#34;Nuget version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.questpdf.com/getting-started&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%9A%80%20read-getting%20started-blue&#34; alt=&#34;Getting started tutorial&#34;&gt;&lt;/a&gt; A short and easy to follow tutorial showing how to design an invoice document under 200 lines of code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.questpdf.com/api-reference/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%93%96%20read-API%20reference-blue&#34; alt=&#34;API reference&#34;&gt;&lt;/a&gt; A detailed description of behavior of all available components and how to use them with C# Fluent API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.questpdf.com/design-patterns&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E2%9C%A8%20read-patterns%20and%20practices-blue&#34; alt=&#34;Patterns and Practices&#34;&gt;&lt;/a&gt; Everything that may help you designing great reports and create reusable code that is easy to maintain.&lt;/p&gt; &#xA;&lt;h2&gt;QuestPDF Previewer&lt;/h2&gt; &#xA;&lt;p&gt;The QuestPDF Previewer is a tool designed to simplify and speed up your development lifecycle. First, it shows a preview of your document. But the real magic starts with the hot-reload capability! It observes your code and updates the preview every time you change the implementation. Get real-time results without the need of code recompilation. Save time and enjoy the task!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.questpdf.com/document-previewer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%93%96%20Previewer-learn%20more-blue&#34; alt=&#34;Learn more&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/QuestPDF/QuestPDF-Documentation/raw/main/docs/public/previewer/animation.gif?raw=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Simplicity is the key&lt;/h2&gt; &#xA;&lt;p&gt;How easy it is to start and prototype with QuestPDF? Really easy thanks to its minimal API! Please analyse the code below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using QuestPDF.Fluent;&#xA;using QuestPDF.Helpers;&#xA;using QuestPDF.Infrastructure;&#xA;&#xA;// code in your main method&#xA;Document.Create(container =&amp;gt;&#xA;{&#xA;    container.Page(page =&amp;gt;&#xA;    {&#xA;        page.Size(PageSizes.A4);&#xA;        page.Margin(2, Unit.Centimetre);&#xA;        page.PageColor(Colors.White);&#xA;        page.DefaultTextStyle(x =&amp;gt; x.FontSize(20));&#xA;        &#xA;        page.Header()&#xA;            .Text(&#34;Hello PDF!&#34;)&#xA;            .SemiBold().FontSize(36).FontColor(Colors.Blue.Medium);&#xA;        &#xA;        page.Content()&#xA;            .PaddingVertical(1, Unit.Centimetre)&#xA;            .Column(x =&amp;gt;&#xA;            {&#xA;                x.Spacing(20);&#xA;                &#xA;                x.Item().Text(Placeholders.LoremIpsum());&#xA;                x.Item().Image(Placeholders.Image(200, 100));&#xA;            });&#xA;        &#xA;        page.Footer()&#xA;            .AlignCenter()&#xA;            .Text(x =&amp;gt;&#xA;            {&#xA;                x.Span(&#34;Page &#34;);&#xA;                x.CurrentPageNumber();&#xA;            });&#xA;    });&#xA;})&#xA;.GeneratePdf(&#34;hello.pdf&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And compare it to the produced PDF file:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/QuestPDF/QuestPDF-Documentation/raw/main/docs/public/minimal-example-shadow.png?raw=true&#34; width=&#34;250px&#34;&gt; &#xA;&lt;h2&gt;Are you ready for more?&lt;/h2&gt; &#xA;&lt;p&gt;The Fluent API of QuestPDF scales really well. It is easy to create and maintain even most complex documents. Read &lt;a href=&#34;https://www.questpdf.com/getting-started.html&#34;&gt;the Getting started tutorial&lt;/a&gt; to learn QuestPDF basics and implement an invoice under 200 lines of code. You can also investigate and play with the code from &lt;a href=&#34;https://github.com/QuestPDF/example-invoice&#34;&gt;the example repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/QuestPDF/QuestPDF-Documentation/raw/main/docs/public/invoice-small.png?raw=true&#34; width=&#34;400px&#34;&gt; &#xA;&lt;h2&gt;QuestPDF on JetBrains OSS Power-Ups&lt;/h2&gt; &#xA;&lt;p&gt;QuestPDF was presented on one of the episodes of OSS Power-Ups hosted by JetBrains. Huge thanks for Matthias Koch and entire JetBrains team for giving me a chance to show QuestPDF. You are the best!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=-iYvZvpLX0g&#34;&gt; &lt;img src=&#34;https://github.com/QuestPDF/QuestPDF-Documentation/raw/main/docs/public/jetbrains-oss-powerups-youtube.png?raw=true&#34; width=&#34;600px&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-iYvZvpLX0g&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/watch%20on-YouTube-red?logo=youtube&#34; alt=&#34;YouTube video about QuestPDF&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bitwarden/server</title>
    <updated>2022-12-25T01:39:01Z</updated>
    <id>tag:github.com,2022-12-25:/bitwarden/server</id>
    <link href="https://github.com/bitwarden/server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core infrastructure backend (API, database, Docker, etc).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/bitwarden/brand/raw/master/screenshots/apps-combo-logo.png&#34; alt=&#34;Bitwarden&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/bitwarden/server/actions/workflows/build.yml?query=branch:master&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/bitwarden/server/actions/workflows/build.yml/badge.svg?branch=master&#34; alt=&#34;Github Workflow build on master&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/u/bitwarden/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/bitwarden/api.svg?sanitize=true&#34; alt=&#34;DockerHub&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/bitwarden/Lobby&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://badges.gitter.im/bitwarden/Lobby.svg?sanitize=true&#34; alt=&#34;gitter chat&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The Bitwarden Server project contains the APIs, database, and other core infrastructure items needed for the &#34;backend&#34; of all bitwarden client applications.&lt;/p&gt; &#xA;&lt;p&gt;The server project is written in C# using .NET Core with ASP.NET Core. The database is written in T-SQL/SQL Server. The codebase can be developed, built, run, and deployed cross-platform on Windows, macOS, and Linux distributions.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://contributing.bitwarden.com/getting-started/server/guide&#34;&gt;Server Setup Guide&lt;/a&gt; in the &lt;a href=&#34;https://contributing.bitwarden.com/&#34;&gt;Contributing Documentation&lt;/a&gt; for build instructions, recommended tooling, code style tips, and lots of other great information to get you started.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hub.docker.com/u/bitwarden/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://i.imgur.com/SZc8JnH.png&#34; alt=&#34;docker&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can deploy Bitwarden using Docker containers on Windows, macOS, and Linux distributions. Use the provided PowerShell and Bash scripts to get started quickly. Find all of the Bitwarden images on &lt;a href=&#34;https://hub.docker.com/u/bitwarden/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Full documentation for deploying Bitwarden with Docker can be found in our help center at: &lt;a href=&#34;https://help.bitwarden.com/article/install-on-premise/&#34;&gt;https://help.bitwarden.com/article/install-on-premise/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/community-edition#/download&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;Docker Compose&lt;/a&gt; (already included with some Docker installations)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;These dependencies are free to use.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux &amp;amp; macOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -s -o bitwarden.sh \&#xA;    https://raw.githubusercontent.com/bitwarden/server/master/scripts/bitwarden.sh \&#xA;    &amp;amp;&amp;amp; chmod +x bitwarden.sh&#xA;./bitwarden.sh install&#xA;./bitwarden.sh start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Invoke-RestMethod -OutFile bitwarden.ps1 `&#xA;    -Uri https://raw.githubusercontent.com/bitwarden/server/master/scripts/bitwarden.ps1&#xA;.\bitwarden.ps1 -install&#xA;.\bitwarden.ps1 -start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;We&#39;re Hiring!&lt;/h2&gt; &#xA;&lt;p&gt;Interested in contributing in a big way? Consider joining our team! We&#39;re hiring for many positions. Please take a look at our &lt;a href=&#34;https://bitwarden.com/careers/&#34;&gt;Careers page&lt;/a&gt; to see what opportunities are currently open as well as what it&#39;s like to work at Bitwarden.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Code contributions are welcome! Please commit any pull requests against the &lt;code&gt;master&lt;/code&gt; branch. Learn more about how to contribute by reading the &lt;a href=&#34;https://contributing.bitwarden.com/contributing/&#34;&gt;Contributing Guidelines&lt;/a&gt;. Check out the &lt;a href=&#34;https://contributing.bitwarden.com/&#34;&gt;Contributing Documentation&lt;/a&gt; for how to get started with your first contribution.&lt;/p&gt; &#xA;&lt;p&gt;Security audits and feedback are welcome. Please open an issue or email us privately if the report is sensitive in nature. You can read our security policy in the &lt;a href=&#34;https://raw.githubusercontent.com/bitwarden/server/master/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt; file. We also run a program on &lt;a href=&#34;https://hackerone.com/bitwarden&#34;&gt;HackerOne&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;No grant of any rights in the trademarks, service marks, or logos of Bitwarden is made (except as may be necessary to comply with the notice requirements as applicable), and use of any Bitwarden trademarks must comply with &lt;a href=&#34;https://github.com/bitwarden/server/raw/master/TRADEMARK_GUIDELINES.md&#34;&gt;Bitwarden Trademark Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dotnet-format&lt;/h3&gt; &#xA;&lt;p&gt;Consider installing our git pre-commit hook for automatic formatting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --local core.hooksPath .git-hooks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Scoped Namespaces&lt;/h3&gt; &#xA;&lt;p&gt;We recently migrated to using file scoped namespaces to save some horizontal space. All previous branches will need to update to avoid large merge conflicts using the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out your local Branch&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git merge 9b7aef0763ad14e229b337c3b5b27cb411009792&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resolve any merge conflicts, commit.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dotnet format&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git merge -Xours 7f5f010e1eea400300c47f776604ecf46c4b4f2d&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fix Merge conflicts&lt;/li&gt; &#xA; &lt;li&gt;Push&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>