<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-25T01:42:44Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thexeondev/WutheringWaves</title>
    <updated>2024-02-25T01:42:44Z</updated>
    <id>tag:github.com,2024-02-25:/thexeondev/WutheringWaves</id>
    <link href="https://github.com/thexeondev/WutheringWaves" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wuthering Waves ps (0.9.0)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WutheringWaves&lt;/h1&gt; &#xA;&lt;p&gt;Wuthering Waves server emulator (0.9.0)&lt;/p&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compile and run SDKServer and GameServer using dotnet8 (Visual Studio 2022 recommended)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connecting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get game client from somewhere. For example using official launcher (you can find it in our discord)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nogatekeep.ing/assets/ww/0.9.0/WuWa-0.9-patch.zip&#34;&gt;Download and extract patch&lt;/a&gt; to the game folder, it will redirect all http requests to &lt;code&gt;127.0.0.1:5500&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run game and connect to the server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;You can ask your questions in our &lt;a href=&#34;https://discord.xeondev.com&#34;&gt;Discord Server&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>milanm/DesignPatternsInUse</title>
    <updated>2024-02-25T01:42:44Z</updated>
    <id>tag:github.com,2024-02-25:/milanm/DesignPatternsInUse</id>
    <link href="https://github.com/milanm/DesignPatternsInUse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Most common Design Patterns you need to know, with examples in C#.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Design Patterns In Use&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The most common Design Patterns you need to know with examples in C#. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Design-Patterns-in-Use.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;Download the &lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/DesignPatternsInUseEbook.pdf&#34;&gt;PDF version&lt;/a&gt; of the book.&lt;/p&gt; &#xA;&lt;h2&gt;What are Design Patterns?&lt;/h2&gt; &#xA;&lt;p&gt;The concept of design patterns in software engineering was popularized in the early 1990s by the famous book &lt;strong&gt;&lt;a href=&#34;https://amzn.to/3SKaa9x&#34;&gt;&#34;Design Patterns: Elements of Reusable Object-Oriented Software&#34;&lt;/a&gt;&lt;/strong&gt; by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, collectively known as the &#34;Gang of Four&#34; (GoF). However, the roots of design patterns go back further, drawing inspiration from the field of architecture.&lt;/p&gt; &#xA;&lt;p&gt;Architect Christopher Alexander introduced the idea of patterns in architecture in his 1977 book &lt;strong&gt;&#34;A Pattern Language,&#34;&lt;/strong&gt; where he described solutions to common design problems in urban planning and building architecture. Alexander&#39;s work emphasized that each pattern solves a specific problem and is part of a more extensive design system. This approach resonated with software developers facing similar challenges in software construction.&lt;/p&gt; &#xA;&lt;p&gt;Seeing the potential of Alexander&#39;s concepts in software development, the GoF adapted and expanded these ideas to object-oriented programming. Their book &lt;strong&gt;introduced 23 design patterns categorized into Creational, Structural, and Behavioral patterns&lt;/strong&gt;, providing a standardized approach to solving common software design issues.&lt;/p&gt; &#xA;&lt;p&gt;In software development, design patterns serve a similar purpose—&lt;strong&gt;they provide templated solutions to recurring problems&lt;/strong&gt;, ensuring that you don&#39;t have to reinvent the wheel each time you encounter a familiar issue.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Software design pattern&lt;/strong&gt; - Is a common solution to common problem that have been observed in practice.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Give a Star! &lt;span&gt;⭐&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project to learn or start your solution, please give it a star. Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Design Pattern Types&lt;/h2&gt; &#xA;&lt;p&gt;Design patterns can be separated into three main categories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Creational Patterns&lt;/strong&gt; - Object creation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Singleton Pattern&lt;/strong&gt;: Ensures a class has only one instance and provides a global point of access to it. This is particularly useful for managing resources like database connections.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Factory Method Pattern&lt;/strong&gt;: Defines an interface for creating an object but lets subclasses alter the type of objects that will be created. It&#39;s ideal when you have a superclass with multiple subclasses, and must create an instance of one of these subclasses based on some initialization parameters.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Abstract Factory Pattern&lt;/strong&gt;: Offers an interface for creating families of related or dependent objects without specifying their concrete classes. This pattern shines when you must ensure that the created objects can work together without knowing their exact types.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Builder Pattern&lt;/strong&gt;: Separates the construction of a complex object from its representation, allowing the same construction process to create various representations. This pattern is excellent for when you need to create an object with many optional or required components.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Prototype Pattern&lt;/strong&gt;: Creates new objects by copying an existing object, known as the prototype. This is particularly useful in scenarios where the cost of creating an object is heavier than copying an existing one.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Structural Patterns&lt;/strong&gt; - Object assembly&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Adapter Pattern&lt;/strong&gt;: Allows incompatible interfaces to work together. It acts as a bridge between two incompatible interfaces, enabling them to communicate without changing their existing code. This pattern is perfect when integrating new features or libraries without disrupting existing code.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Composite Pattern&lt;/strong&gt;: Enables you to treat individual objects and compositions of objects uniformly. It&#39;s ideal for representing part-whole hierarchies where you want to ignore the difference between compositions of objects and individual objects.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Proxy Pattern&lt;/strong&gt;: Provides a placeholder for another object to control access to it. This is useful for lazy loading, controlling access, or logging, acting as an intermediary between the client and the actual object to add a processing layer.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flyweight Pattern&lt;/strong&gt;: Minimizes memory use by sharing as much data as possible with similar objects; it&#39;s a boon for efficiency when working with many objects with some shared state.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Facade Pattern&lt;/strong&gt;: Offers a simplified interface to a complex system of classes, library, or framework. Providing a higher-level interface makes the subsystem easier to use, reducing complexity and promoting decoupling.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bridge Pattern&lt;/strong&gt;: Decouples an abstraction from its implementation so that the two can vary independently. It&#39;s particularly useful when extending a class in several orthogonal (independent) dimensions.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Decorator Pattern&lt;/strong&gt;: Allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. This pattern provides a flexible alternative to subclassing for extending functionality.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Behavioral Patterns&lt;/strong&gt; - Object interactions&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Strategy Pattern&lt;/strong&gt;: Allows you to define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it. This pattern is perfect when you have multiple ways to accomplish a task, and you want to select the method at runtime.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Observer Pattern&lt;/strong&gt;: Defines a dependency between objects so that when one object changes its state, all its dependents are notified and updated automatically. It&#39;s ideal for implementing distributed event handling systems, where changing one object&#39;s state needs to be reflected in another.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Command Pattern&lt;/strong&gt;: Turns a request into a stand-alone object containing all the request information. This transformation allows you to parameterize methods with different requests, delay or queue a request&#39;s execution, and support undoable operations.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Iterator Pattern&lt;/strong&gt;: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. This pattern is useful for collections of objects to provide a standard way to traverse them and potentially access a selection of elements without exposing the internal structure.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;State Pattern&lt;/strong&gt;: An object can alter its behavior when its internal state changes. The object will appear to change its class. This is beneficial when an object&#39;s behavior depends on its state and must be able to change its behavior at runtime depending on that state.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Memento Pattern&lt;/strong&gt;: Without violating encapsulation, capture and externalize an object&#39;s internal state so that the object can be returned to this state later. This pattern is useful for implementing undo mechanisms or saving and restoring an object&#39;s state.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mediator Pattern&lt;/strong&gt;: Reduces chaos between interacting classes by encapsulating how disparate sets of objects interact and communicate. Doing so helps prevent the &#34;spaghetti code&#34; scenario where multiple classes communicate directly and in a complex way.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Chain of Responsibility Pattern&lt;/strong&gt;: Passes the request along a chain of handlers. Upon receiving a request, each handler decides to process the request or pass it to the next handler in the chain. It&#39;s particularly useful for processing multiple requests in a decentralized manner.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Visitor Pattern&lt;/strong&gt;: Let you define a new operation without changing the classes of the elements on which it operates. Ideal for scenarios where you need to perform operations across a group of objects with different classes.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interpreter Pattern&lt;/strong&gt;: Provides a way to evaluate language grammar or expression. This is useful in developing tools and compilers for new programming or scripting languages.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Template Method Pattern&lt;/strong&gt;: Defines the skeleton of an algorithm in the superclass but lets subclasses override specific algorithm steps without changing its structure. It&#39;s beneficial when a multi-step process requires flexibility while maintaining the overall structure.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/DesignPatterns.png&#34; alt=&#34;Types of Design Patterns&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;These Design patterns are not the only kind of design patterns we have. To learn more about other types of design patterns, &lt;a href=&#34;https://newsletter.techworld-with-milan.com/i/125894632/architecture-styles-patterns-and-design-patterns&#34;&gt;check here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Don’t fall into the Design Patterns trap&lt;/h2&gt; &#xA;&lt;p&gt;You should be warned that you will probably fall into &lt;strong&gt;the Design Patterns trap&lt;/strong&gt; when you first learn design patterns. This means you will try to squeeze a pattern in every solution, and your codebase will become over-engineering and unusable very soon.&lt;/p&gt; &#xA;&lt;p&gt;But we want to make our codebase as simple as possible, so Design patterns are not the silver bullet for all problems. We should not try to put them into every problem we have because they are solutions to problems, not tools that should be used everywhere. &lt;strong&gt;If you can implement a simple solution without using a design pattern, do it!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/DesignPatternsTrap.jpg&#34; alt=&#34;Design Patterns Trap&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Image credits: &lt;a href=&#34;https://twitter.com/flaviocopes/status/1417007331930423298&#34;&gt;flavio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We find something even more problematic in the latest &lt;a href=&#34;https://www.oreilly.com/radar/technology-trends-for-2024/&#34;&gt;O&#39;Reilly Technology Trends for 2024&lt;/a&gt;. Managers are asking developers how many patterns they used. This is an open door to over-engineering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/PatternsManagers.png&#34; alt=&#34;Patterns Managers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;But that&#39;s not all, we also saw examples of codebases that &lt;a href=&#34;https://youtu.be/P7CfWtR-ECk?t=408&#34;&gt;organize their code by folder names of design patterns&lt;/a&gt;. &lt;strong&gt;It cannot be more wrong than this!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yet, understanding design patterns keeps you from reinventing wheels.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;In the rest of the article, we will go through all the important Design Patterns. During many years of using these patterns, I noticed that some are used often, some rarely, and some are not. Here, I will present only those patterns you need daily.&lt;/p&gt; &#xA;&lt;p&gt;Every pattern has an &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src&#34;&gt;implementation in C# language&lt;/a&gt;&lt;/strong&gt;. The solution can be run using &lt;code&gt;.NET 8&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Solution.png&#34; alt=&#34;Implementation in C#&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creational Design Patterns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Creational.png&#34; alt=&#34;Creational Design Patterns&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Singleton pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Use when a single instance of a class is needed. Some examples are logging and database connections.&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Only one CEO leads the company, making decisions and representing the entire organization, like a singleton providing global access and control.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: The Singleton pattern is regarded as &lt;strong&gt;an anti-pattern&lt;/strong&gt;; hence, using them excessively is advised. Why? Using it, we tend to make procedural code with global variables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Singleton pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Singleton.png&#34; alt=&#34;Singleton&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Singleton&#34;&gt;An implementation of the Singleton pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;An important note about the Singleton pattern is that it poses a &lt;strong&gt;significant issue for multithreading&lt;/strong&gt;, especially in a scenario where multiple threads may simultaneously attempt to create an instance of the Singleton class. This can lead to multiple instances if proper synchronization is not enforced, thus violating the core principle of the Singleton pattern that only one instance of the class should ever exist. There are multiple solutions to this problem, such as eager initialization, double-checked locking, or lazy initialization.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Factory method pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Decouple object creation from usage. For example, you create different types of database connections based on configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Think of a pizza joint with a &#34;Pizza Factory&#34; instead of chefs. Customers order &#34;cheese&#34; or &#34;pepperoni,&#34; not knowing how it&#39;s made. Based on the order, this factory tells specialized &#34;CheesePizza&#34; or &#34;PepperoniPizza&#34; builders to get cookin&#39;. Each builder adds signature toppings, keeping the creation logic separate but the ordering process smooth.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: It can lead to increased classes, potentially making the codebase more complex.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Factory method pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/FactoryMethod.png&#34; alt=&#34;Factory Method&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/FactoryMethod&#34;&gt;An implementation of the Factory Method pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Builder pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Constructing complex objects step by step. For example, if you need to create a complex domain object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: If we hire an architect to design our dream home, we don&#39;t need to know every construction detail. We need to tell the architect our preferences (number of rooms, style, materials), and they create a blueprint with those specifications. The architect acts as the &#34;builder pattern,&#34; guiding us through the creation process with clear steps (foundation, walls, roof), ensuring correct order, and handling complex details. You make choices (fireplace or no fireplace?), and the builder incorporates them, constructing the house piece by piece until it&#39;s complete.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: It could lead to increased complexity due to the introduction of multiple new classes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Builder pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Builder.png&#34; alt=&#34;Builder&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Builder&#34;&gt;An implementation of the Builder pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other &lt;strong&gt;exciting design patterns from this group&lt;/strong&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Abstract Factory&lt;/strong&gt;: Create families of related objects. For example, I build parsers for different file formats (e.g., JSON, XML, CSV). Check the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/AbstractFactory&#34;&gt;implementation in C#&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Prototype&lt;/strong&gt;: Creating duplicate objects and reusing cached objects to reduce database calls. Check the &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Prototype&#34;&gt;implementation in C#&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Structural Design Patterns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Structural.png&#34; alt=&#34;Structural Design Patterns&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Adapter pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Make incompatible interfaces compatible. For example, it integrates a new logging library into an existing system that expects a different interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Allows you to use your devices in different countries by adapting to the local power outlet (adapter mediates communication between incompatible systems).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: Can lead to an increase in the number of adapters, making the system more complicated. Modifying the service class to align with the rest of the codebase could be simpler sometimes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Adapter pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Adapter.png&#34; alt=&#34;Adapter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Adapter&#34;&gt;An implementation of the Adapter pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Composite pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Represent part-whole hierarchies. For example, graphic objects in a drawing application can be grouped and treated uniformly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: In the library, books are organized on shelves, but each shelf can further hold categories (fiction, history). These categories might even contain subcategories (romance, mystery). Each shelf acts as a composite, keeping both individual books (leaf nodes) and other categories (composite nodes).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: Restricting operations for certain components or leaves in the hierarchy could be challenging.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Composite pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Composite.png&#34; alt=&#34;Composite&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Composite&#34;&gt;An implementation of the Composite pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Proxy pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Control access to objects. For example, lazy loading of a high-resolution image in a web application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Let’s assume you’re a CEO with a personal assistant who acts as a &#34;proxy,&#34; handling requests and shielding you from unnecessary distractions. The assistant assesses each request, prioritizing the important ones, filtering out spam, and preparing relevant info. Only the filtered essentials reach the CEO, who focuses on big decisions, while the assistant handles the rest.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: Overusing proxies can add unnecessary complexity and impact performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Proxy pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Proxy.png&#34; alt=&#34;Proxy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Proxy&#34;&gt;An implementation of the Proxy pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Decorator pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Dynamically add/remove behavior. For example, we are implementing compression or encryption on top of file streams.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: If we want to make a coffee, we would start with plain coffee (the core object). Then, &#34;decorate&#34; it with cream (adds richness), sugar (sweetness), and cinnamon (extra flavor), each a &#34;decorator&#34; enhancing the base coffee without altering it. You can even combine them (multiple decorators) for unique creations like a creamy, sweet cinnamon latte!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: Overuse of decorators can lead to a complex hierarchy of objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Decorator pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Decorator.png&#34; alt=&#34;Decorator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Decpratpr&#34;&gt;An implementation of the Decorator pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Facade pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: It provides a simplified interface to a complex subsystem.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Let&#39;s say we are visiting a hotel. We need various services - ordering room service, booking spa appointments, requesting housekeeping. Instead of contacting each department individually, you call the front desk. The front desk acts as a facade, hiding the complexity of the underlying systems. They take your request, communicate with the relevant department (kitchen, spa, housekeeping), and deliver the service, making everything seem effortless. You don&#39;t need to know how each department works; the facade provides a simplified interface to access them all.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: Facades have the potential to transform into god objects connected to every application class.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Facade.png&#34; alt=&#34;Facade&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Facade&#34;&gt;An implementation of the Facade pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another interesting design pattern from this group is the &lt;strong&gt;Bridge pattern&lt;/strong&gt;. It is used to decouple abstraction from implementation. For example, I am separating platform-specific code from core logic. Check the &lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Bridge&#34;&gt;implementation in C#&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Behavioral Design Patterns&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Behavioral.png&#34; alt=&#34;Behavioral Design Patterns&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Strategy pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Define a family of algorithms. For example, they allow users to choose different sorting or compression algorithms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Let’s plan a travel from city A to city B. You can choose a &#34;transportation strategy&#34; based on your needs: take a fast train (speed focus), a comfortable bus (comfort focus), or a budget-friendly carpool (low-cost focus).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: This could lead to an increased number of classes and complexity when dealing with many strategies. There is no need to add new classes and interfaces if you have only a few algorithms that change rarely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Strategy pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Strategy.png&#34; alt=&#34;Strategy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Strategy&#34;&gt;An implementation of the Strategy pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Observer pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Maintain a consistent state by being notified of changes and, for example, notifying subscribers of events in a messaging system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: We can think of a breaking news app. Users subscribe to specific topics (sports, politics, etc.), acting as &#34;observers.&#34; When news breaks in a subscribed topic, the &#34;observer pattern&#34; notifies all relevant users with personalized alerts. Sports fans get their scores, and political enthusiasts receive election updates without them needing to check actively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: This can result in performance issues when there are numerous observers or the update logic is complex. Subscribers are notified in an unpredictable sequence.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Observer pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Observer.png&#34; alt=&#34;Observer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Observer&#34;&gt;An implementation of the Observer pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Encapsulate a request as an object. For example, I implement undo/redo functionality in text or image editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Picture ordering food at a restaurant. You tell the waiter your wishes (pizza, extra cheese), creating an &#34;order command.&#34; The waiter then acts as a messenger, carrying your &#34;command&#34; to the Chef in the kitchen (receiver). The Chef, receiving the &#34;command,&#34; makes your pizza precisely as specified. This separation of ordering (command) from making (execution) lets you change or cancel easily.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: It has the potential to introduce complexity, as it requires creating additional classes for each action or request, complicating the architecture for simple operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Command pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/Command.png&#34; alt=&#34;Command&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/Command&#34;&gt;An implementation of the Command pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;State pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Encapsulate state-specific behavior. For example, we are handling different states of a user interface element (e.g., enabled, disabled, selected).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: The smartphone effortlessly transitions between states (on, off, silent, airplane mode) based on your actions. Each state (the &#34;concrete state&#34;) has unique behavior: on allows calls and notifications, silent mutes them, and airplane mode blocks signals. The phone (the &#34;context&#34;) doesn&#39;t manage these behaviors directly; it delegates to the current state object. When you press a button or toggle a setting, the phone transitions to a new state, seamlessly changing its behavior without requiring intricate logic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: It can lead to a proliferation of classes, as each state is typically represented by its class. This not only increases the complexity of the system but can also make it harder to manage and understand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of State pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/State.png&#34; alt=&#34;State&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/State&#34;&gt;An implementation of the State pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Template method pattern&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: Define the skeleton of an algorithm in operation, deferring some steps to subclasses and implementing a base class for unit testing with customizable setup and teardown steps.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Real-world example&lt;/strong&gt;: Let’s say we have a factory where every car (subclasses like Sedan, SUV, and Truck) follows the same basic steps: weld the frame, add the engine, install electrical components, and paint. This is the overall structure defined by the template method. However, each car type has specific variations: Sedans have smaller frames and engines, SUVs have higher clearance and different interiors, and trucks have reinforced frames and more significant engines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The remark about usage&lt;/strong&gt;: It can lead to overly complex hierarchies when multiple algorithm variations are required.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UML diagram of Template Method pattern:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/TemplateMethod.png&#34; alt=&#34;Template Method&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/src/TemplateMethod&#34;&gt;An implementation of the Template Method pattern in C#.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to select the right design pattern&lt;/h2&gt; &#xA;&lt;p&gt;Choosing the correct design pattern in software engineering is critical to practical problem-solving. This guide simplifies the process, helping you decide between patterns based on specific needs. It offers concise descriptions and valuable use cases for each pattern, making understanding and applying them in real-world scenarios easier.&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;To select a pattern, we must first go through the problem identification, as shown in the image below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/SelectPattern.png&#34; alt=&#34;Select Pattern&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/WhenToSelectDesignPattern.pdf&#34;&gt;PDF version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is the summary of the pattern selection:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/SelectPatternSummary.png&#34; alt=&#34;Select Pattern Summary&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;BONUS: Design Patterns Cheat Sheet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/DesignPatternsCheatSheet.png&#34; alt=&#34;Design Patterns Cheat Sheet&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/milanm/DesignPatternsInUse/master/assets/DesignPatternsCheatSheet.pdf&#34;&gt;PDF version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources to learn more&lt;/h2&gt; &#xA;&lt;p&gt;Here are some more resources if you want to dig deeper into the world of design patterns, you can check the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://amzn.to/3OxkE9P&#34;&gt;Head First Design Patterns: A Brain-friendly Guide&lt;/a&gt;&lt;/strong&gt; book.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://amzn.to/3SKaa9x&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;/strong&gt; book by GoF.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/DovAmir/awesome-design-patterns&#34;&gt;Awesome Software and Architectural Design Patterns&lt;/a&gt;&lt;/strong&gt;, A curated list of software and architecture related design patterns.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.pluralsight.com/courses/patterns-library&#34;&gt;Design Patterns Library&lt;/a&gt;&lt;/strong&gt; Pluralsight course.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://refactoring.guru/&#34;&gt;Refactoring.Guru&lt;/a&gt;&lt;/strong&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://sourcemaking.com/design-patterns-and-tips&#34;&gt;Source Making&lt;/a&gt;&lt;/strong&gt; website.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.mcdonaldland.info/2007/11/28/40/&#34;&gt;Design Patterns Quick Reference&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wrap Up&lt;/h2&gt; &#xA;&lt;p&gt;If you think the repository can be improved, please open a PR with any updates and submit any issues. Also, I will continue to improve this, so you should star this repository, too.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a pull request with improvements&lt;/li&gt; &#xA; &lt;li&gt;Discuss ideas in issues&lt;/li&gt; &#xA; &lt;li&gt;Spread the word&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://milan.milanovic.org&#34;&gt;Dr. Milan Milanović&lt;/a&gt; - CTO at &lt;a href=&#34;https://3mdinc.com&#34;&gt;3MD&lt;/a&gt; and Microsoft MVP for Developer Technologies.&lt;/p&gt;</summary>
  </entry>
</feed>