<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:47:39Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotnet/eShop</title>
    <updated>2023-11-26T01:47:39Z</updated>
    <id>tag:github.com,2023-11-26:/dotnet/eShop</id>
    <link href="https://github.com/dotnet/eShop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reference .NET application implementing an eCommerce site&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eShop Reference Application - &#34;Northern Mountains&#34;&lt;/h1&gt; &#xA;&lt;p&gt;A reference .NET application implementing an eCommerce web site using a services-based architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet/eShop/main/img/eshop_architecture.png&#34; alt=&#34;eShop Reference Application architecture diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dotnet/eShop/main/img/eshop_homepage.png&#34; alt=&#34;eShop homepage screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the eShop repository: &lt;a href=&#34;https://github.com/dotnet/eshop&#34;&gt;https://github.com/dotnet/eshop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Windows only) Install Visual Studio. Visual Studio contains tooling support for .NET Aspire that you will want to have. &lt;a href=&#34;https://visualstudio.microsoft.com/vs/preview/&#34;&gt;Visual Studio 2022 version 17.9 Preview&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;During installation, ensure that the following are selected: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ASP.NET and web development&lt;/code&gt; workload.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;.NET Aspire SDK&lt;/code&gt; component in &lt;code&gt;Individual components&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the latest &lt;a href=&#34;https://github.com/dotnet/installer#installers-and-binaries&#34;&gt;.NET 8 SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Mac/Linux (or if not using Visual Studio), install the Aspire workload with the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet workload update&#xA;dotnet workload install aspire&#xA;dotnet restore eShop.Web.slnf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &amp;amp; start Docker Desktop: &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;https://docs.docker.com/engine/install/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the solution&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Remember to ensure that Docker is started&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Windows only) Run the application from Visual Studio:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;eShop.Web.slnf&lt;/code&gt; file in Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;Ensure that &lt;code&gt;eShop.AppHost.csproj&lt;/code&gt; is your startup project&lt;/li&gt; &#xA; &lt;li&gt;Hit Ctrl-F5 to launch Aspire&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or run the application from your terminal:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;dotnet run --project src/eShop.AppHost/eShop.AppHost.csproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then look for lines like this in the console output in order to find the URL to open the Aspire dashboard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Now listening on: http://localhost:18848&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample data&lt;/h3&gt; &#xA;&lt;p&gt;The sample catalog data is defined in &lt;a href=&#34;https://github.com/dotnet/eShop/raw/main/src/Catalog.API/Setup/catalog.json&#34;&gt;catalog.json&lt;/a&gt;. Those product names, descriptions, and brand names are fictional and were generated using &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/chatgpt&#34;&gt;GPT-35-Turbo&lt;/a&gt;, and the corresponding &lt;a href=&#34;https://github.com/dotnet/eShop/tree/main/src/Catalog.API/Pics&#34;&gt;product images&lt;/a&gt; were generated using &lt;a href=&#34;https://openai.com/dall-e-3&#34;&gt;DALLÂ·E 3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;For more information on contributing to this repo, please read &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/eShop/main/CONTRIBUTING.md&#34;&gt;the contribution documentation&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/eShop/main/CODE-OF-CONDUCT.md&#34;&gt;the Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/chat-copilot</title>
    <updated>2023-11-26T01:47:39Z</updated>
    <id>tag:github.com,2023-11-26:/microsoft/chat-copilot</id>
    <link href="https://github.com/microsoft/chat-copilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is a &lt;strong&gt;sample&lt;/strong&gt; application to help you understand how Semantic Kernel and AI can work in Web Applications. This sample is &lt;strong&gt;NOT FOR PRODUCTION&lt;/strong&gt; deployments.&lt;/p&gt; &#xA;&lt;h1&gt;Chat Copilot Sample Application&lt;/h1&gt; &#xA;&lt;p&gt;This sample allows you to build your own integrated large language model (LLM) chat copilot. The sample is built on Microsoft &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt; and has three components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A frontend application &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/webapp/&#34;&gt;React web app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A backend REST API &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/webapi/&#34;&gt;.NET web API service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/memorypipeline/&#34;&gt;.NET worker service&lt;/a&gt; for processing semantic memory.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These quick-start instructions run the sample locally. They can also be found on the official Chat Copilot Microsoft Learn documentation page for &lt;a href=&#34;https://learn.microsoft.com/semantic-kernel/chat-copilot/getting-started&#34;&gt;getting started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To deploy the sample to Azure, please view &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/scripts/deploy/README.md&#34;&gt;Deploying Chat Copilot&lt;/a&gt; after meeting the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/#requirements&#34;&gt;requirements&lt;/a&gt; described below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; This sample is for educational purposes only and is not recommended for production deployments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Each chat interaction will call Azure OpenAI/OpenAI which will use tokens that you may be billed for.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://learn.microsoft.com/en-us/semantic-kernel/media/chat-copilot-in-action.gif&#34; alt=&#34;Chat Copilot answering a question&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;You will need the following items to run the sample:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/7.0&#34;&gt;.NET 7.0 SDK&lt;/a&gt; &lt;em&gt;(via Setup install.* script)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Node.js&lt;/a&gt; &lt;em&gt;(via Setup install.* script)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://classic.yarnpkg.com/docs/install&#34;&gt;Yarn&lt;/a&gt; &lt;em&gt;(via Setup install.* script)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;AI Service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;AI Service&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Azure OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://aka.ms/oai/access&#34;&gt;Access&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/how-to/create-resource?pivots=web-portal#create-a-resource&#34;&gt;Resource&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/how-to/create-resource?pivots=web-portal#deploy-a-model&#34;&gt;Deployed models&lt;/a&gt; (&lt;code&gt;gpt-35-turbo&lt;/code&gt; and &lt;code&gt;text-embedding-ada-002&lt;/code&gt;) &lt;br&gt;- &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/tutorials/embeddings?tabs=command-line#retrieve-key-and-endpoint&#34;&gt;Endpoint&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/tutorials/embeddings?tabs=command-line#retrieve-key-and-endpoint&#34;&gt;API key&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://platform.openai.com/docs/overview&#34;&gt;Account&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://platform.openai.com/api-keys&#34;&gt;API key&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open PowerShell as an administrator.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: Ensure that you have &lt;a href=&#34;https://github.com/PowerShell/PowerShell&#34;&gt;PowerShell Core 6+&lt;/a&gt; installed. This is different from the default PowerShell installed on Windows.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup your environment.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd &amp;lt;path to chat-copilot&amp;gt;\scripts\&#xA;.\Install.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: This script will install &lt;code&gt;Chocolatey&lt;/code&gt;, &lt;code&gt;dotnet-7.0-sdk&lt;/code&gt;, &lt;code&gt;nodejs&lt;/code&gt;, and &lt;code&gt;yarn&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: If you receive an error that the script is not digitally signed or cannot execute on the system, you may need to &lt;a href=&#34;https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3#change-the-execution-policy&#34;&gt;change the execution policy&lt;/a&gt; (see list of &lt;a href=&#34;https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3#powershell-execution-policies&#34;&gt;policies&lt;/a&gt; and &lt;a href=&#34;https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3#execution-policy-scope&#34;&gt;scopes&lt;/a&gt;) or &lt;a href=&#34;https://learn.microsoft.com/powershell/module/microsoft.powershell.security/get-executionpolicy?view=powershell-7.3#example-4-unblock-a-script-to-run-it-without-changing-the-execution-policy&#34;&gt;unblock the script&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Chat Copilot.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\Configure.ps1 -AIService {AI_SERVICE} -APIKey {API_KEY} -Endpoint {AZURE_OPENAI_ENDPOINT}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;AI_SERVICE&lt;/code&gt;: &lt;code&gt;AzureOpenAI&lt;/code&gt; or &lt;code&gt;OpenAI&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;API_KEY&lt;/code&gt;: The &lt;code&gt;API key&lt;/code&gt; for Azure OpenAI or for OpenAI.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;AZURE_OPENAI_ENDPOINT&lt;/code&gt;: The Azure OpenAI resource &lt;code&gt;Endpoint&lt;/code&gt; address. Omit &lt;code&gt;-Endpoint&lt;/code&gt; if using OpenAI.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; For &lt;code&gt;AzureOpenAI&lt;/code&gt;, if you deployed models &lt;code&gt;gpt-35-turbo&lt;/code&gt; and &lt;code&gt;text-embedding-ada-002&lt;/code&gt; with custom names (instead of each own&#39;s given name), also use the parameters:&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;-CompletionModel {DEPLOYMENT_NAME} -EmbeddingModel {DEPLOYMENT_NAME} -PlannerModel {DEPLOYMENT_NAME}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Chat Copilot locally. This step starts both the backend API and frontend application.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\Start.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It may take a few minutes for Yarn packages to install on the first run.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: Confirm pop-ups are not blocked and you are logged in with the same account used to register the application.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;(Optional) To start ONLY the backend:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\Start-Backend.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Linux/macOS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Bash as an administrator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure environment.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;path to chat-copilot&amp;gt;/scripts/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Ubuntu/Debian Linux&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./install-apt.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: This script uses &lt;code&gt;apt&lt;/code&gt; to install &lt;code&gt;dotnet-sdk-7.0&lt;/code&gt;, &lt;code&gt;nodejs&lt;/code&gt;, and &lt;code&gt;yarn&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./install-brew.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: This script uses &lt;code&gt;homebrew&lt;/code&gt; to install &lt;code&gt;dotnet-sdk&lt;/code&gt;, &lt;code&gt;nodejs&lt;/code&gt;, and &lt;code&gt;yarn&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Chat Copilot.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;For OpenAI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure.sh --aiservice OpenAI --apikey {API_KEY}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;API_KEY&lt;/code&gt;: The &lt;code&gt;API key&lt;/code&gt; for OpenAI.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For Azure OpenAI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure.sh --aiservice AzureOpenAI \&#xA;               --endpoint {AZURE_OPENAI_ENDPOINT} \&#xA;               --apikey   {API_KEY}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;AZURE_OPENAI_ENDPOINT&lt;/code&gt;: The Azure OpenAI resource &lt;code&gt;Endpoint&lt;/code&gt; address.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;API_KEY&lt;/code&gt;: The &lt;code&gt;API key&lt;/code&gt; for Azure OpenAI.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If you deployed models &lt;code&gt;gpt-35-turbo&lt;/code&gt; and &lt;code&gt;text-embedding-ada-002&lt;/code&gt; with custom names (instead of each own&#39;s given name), you need to specify the deployment names with three additional parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure.sh --aiservice AzureOpenAI \&#xA;               --endpoint        {AZURE_OPENAI_ENDPOINT} \&#xA;               --apikey          {API_KEY} \&#xA;               --completionmodel {DEPLOYMENT_NAME} \&#xA;               --plannermodel    {DEPLOYMENT_NAME} \&#xA;               --embeddingmodel  {DEPLOYMENT_NAME}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Chat Copilot locally. This step starts both the backend API and frontend application.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It may take a few minutes for Yarn packages to install on the first run.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: Confirm pop-ups are not blocked and you are logged in with the same account used to register the application.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;(Optional) To start ONLY the backend:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;./start-backend.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;(Optional) Run the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/memorypipeline/README.md&#34;&gt;memory pipeline&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;By default, the webapi is configured to work without the memory pipeline for synchronous processing documents. To enable asynchronous document processing, you need to configure the webapi and the memory pipeline. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/webapi/README.md&#34;&gt;webapi README&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/memorypipeline/README.md&#34;&gt;memory pipeline README&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;(Optional) Enable backend authentication via Azure AD&lt;/h2&gt; &#xA;&lt;p&gt;By default, Chat Copilot runs locally without authentication, using a guest user profile. If you want to enable authentication with Azure Active Directory, follow the steps below.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/free&#34;&gt;Azure account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/azure/active-directory/develop/quickstart-create-new-tenant&#34;&gt;Azure AD Tenant&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an &lt;a href=&#34;https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app&#34;&gt;application registration&lt;/a&gt; for the frontend web app, using the values below&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Supported account types&lt;/code&gt;: &#34;&lt;em&gt;Accounts in this organizational directory only ({YOUR TENANT} only - Single tenant)&lt;/em&gt;&#34;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Redirect URI (optional)&lt;/code&gt;: &lt;em&gt;Single-page application (SPA)&lt;/em&gt; and use &lt;em&gt;&lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/em&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a second &lt;a href=&#34;https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app&#34;&gt;application registration&lt;/a&gt; for the backend web api, using the values below:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Supported account types&lt;/code&gt;: &#34;&lt;em&gt;Accounts in this organizational directory only ({YOUR TENANT} only - Single tenant)&lt;/em&gt;&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Do &lt;strong&gt;not&lt;/strong&gt; configure a &lt;code&gt;Redirect URI (optional)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Other account types can be used to allow multitenant and personal Microsoft accounts to use your application if you desire. Doing so may result in more users and therefore higher costs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Take note of the &lt;code&gt;Application (client) ID&lt;/code&gt; for both app registrations as you will need them in future steps.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Expose an API within the second app registration&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select &lt;em&gt;Expose an API&lt;/em&gt; from the menu&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add an &lt;em&gt;Application ID URI&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;This will generate an &lt;code&gt;api://&lt;/code&gt; URI&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Click &lt;em&gt;Save&lt;/em&gt; to store the generated URI&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add a scope for &lt;code&gt;access_as_user&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Click &lt;em&gt;Add scope&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set &lt;em&gt;Scope name&lt;/em&gt; to &lt;code&gt;access_as_user&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set &lt;em&gt;Who can consent&lt;/em&gt; to &lt;em&gt;Admins and users&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set &lt;em&gt;Admin consent display name&lt;/em&gt; and &lt;em&gt;User consent display name&lt;/em&gt; to &lt;code&gt;Access copilot chat as a user&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set &lt;em&gt;Admin consent description&lt;/em&gt; and &lt;em&gt;User consent description&lt;/em&gt; to &lt;code&gt;Allows the accesses to the Copilot chat web API as a user&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add the web app frontend as an authorized client application&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Click &lt;em&gt;Add a client application&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;For &lt;em&gt;Client ID&lt;/em&gt;, enter the frontend&#39;s application (client) ID&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Check the checkbox under &lt;em&gt;Authorized scopes&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Click &lt;em&gt;Add application&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add permissions to web app frontend to access web api as user&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Open app registration for web app frontend&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go to &lt;em&gt;API Permissions&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Click &lt;em&gt;Add a permission&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select the tab &lt;em&gt;APIs my organization uses&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Choose the app registration representing the web api backend&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Select permissions &lt;code&gt;access_as_user&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Click &lt;em&gt;Add permissions&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the Configure script with additional parameters to set up authentication.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Powershell&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\Configure.ps1 -AiService {AI_SERVICE} -APIKey {API_KEY} -Endpoint {AZURE_OPENAI_ENDPOINT} -FrontendClientId {FRONTEND_APPLICATION_ID} -BackendClientId {BACKEND_APPLICATION_ID} -TenantId {TENANT_ID} -Instance {AZURE_AD_INSTANCE}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure.sh --aiservice {AI_SERVICE} --apikey {API_KEY} --endpoint {AZURE_OPENAI_ENDPOINT} --frontend-clientid {FRONTEND_APPLICATION_ID} --backend-clientid {BACKEND_APPLICATION_ID} --tenantid {TENANT_ID} --instance {AZURE_AD_INSTANCE}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;AI_SERVICE&lt;/code&gt;: &lt;code&gt;AzureOpenAI&lt;/code&gt; or &lt;code&gt;OpenAI&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;API_KEY&lt;/code&gt;: The &lt;code&gt;API key&lt;/code&gt; for Azure OpenAI or for OpenAI.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AZURE_OPENAI_ENDPOINT&lt;/code&gt;: The Azure OpenAI resource &lt;code&gt;Endpoint&lt;/code&gt; address. Omit &lt;code&gt;-Endpoint&lt;/code&gt; if using OpenAI.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FRONTEND_APPLICATION_ID&lt;/code&gt;: The &lt;code&gt;Application (client) ID&lt;/code&gt; associated with the application registration for the frontend.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;BACKEND_APPLICATION_ID&lt;/code&gt;: The &lt;code&gt;Application (client) ID&lt;/code&gt; associated with the application registration for the backend.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;TENANT_ID&lt;/code&gt; : Your Azure AD tenant ID&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;AZURE_AD_INSTANCE&lt;/code&gt; &lt;em&gt;(optional)&lt;/em&gt;: The Azure AD cloud instance for the authenticating users. Defaults to &lt;code&gt;https://login.microsoftonline.com&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Chat Copilot locally. This step starts both the backend API and frontend application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Powershell&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;.\Start.ps1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./start.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Troubleshooting&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Issue:&lt;/em&gt;&lt;/strong&gt; Unable to load chats.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Details&lt;/em&gt;: interaction&lt;em&gt;in_progress: Interaction is currently in progress.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Explanation&lt;/em&gt;: The WebApp can display this error when the application is configured for a different AAD tenant from the browser, (e.g., personal/MSA account vs work/school account).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;: Either use a private/incognito browser tab or clear your browser credentials/cookies. Confirm you are logged in with the same account used to register the application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Issue:&lt;/em&gt;&lt;/strong&gt;: Challenges using text completion models, such as &lt;code&gt;text-davinci-003&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;: For OpenAI, see &lt;a href=&#34;https://platform.openai.com/docs/models/model-endpoint-compatibility&#34;&gt;model endpoint compatibility&lt;/a&gt; for the complete list of current models supporting chat completions. For Azure OpenAI, see &lt;a href=&#34;https://learn.microsoft.com/azure/ai-services/openai/concepts/models#model-summary-table-and-region-availability&#34;&gt;model summary table and region availability&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Issue:&lt;/em&gt;&lt;/strong&gt; Localhost SSL certificate errors / CORS errors&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/microsoft/chat-copilot/assets/64985898/e9072af1-e43c-472d-bebc-d0082d0c9180&#34; alt=&#34;Cert-Issue&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Explanation&lt;/em&gt;: Your browser may be blocking the frontend access to the backend while waiting for your permission to connect.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Confirm the backend service is running. Open a web browser and navigate to &lt;code&gt;https://localhost:40443/healthz&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;You should see a confirmation message: &lt;code&gt;Healthy&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;If your browser asks you to acknowledge the risks of visiting an insecure website, you must acknowledge this before the frontend can connect to the backend server.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; or refresh the page to use the Chat Copilot application.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Issue:&lt;/em&gt;&lt;/strong&gt; Yarn is not working.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Explanation&lt;/em&gt;: You may have the wrong Yarn version installed such as v2.x+.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;: Use the classic version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install -g yarn&#xA;yarn set version classic&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Issue:&lt;/em&gt;&lt;/strong&gt; Missing &lt;code&gt;/usr/share/dotnet/host/fxr&lt;/code&gt; folder.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Details&lt;/em&gt;: &#34;A fatal error occurred. The folder [/usr/share/dotnet/host/fxr] does not exist&#34; when running dotnet commands on Linux.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Explanation&lt;/em&gt;: When .NET (Core) was first released for Linux, it was not yet available in the official Ubuntu repo. So instead, many of us added the Microsoft APT repo in order to install it. Now, the packages are part of the Ubuntu repo, and they are conflicting with the Microsoft packages. This error is a result of mixed packages. (&lt;a href=&#34;https://stackoverflow.com/questions/73753672/a-fatal-error-occurred-the-folder-usr-share-dotnet-host-fxr-does-not-exist&#34;&gt;Source: StackOverflow&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Remove all existing packages to get to a clean state:&#xA;sudo apt remove --assume-yes dotnet*;&#xA;sudo apt remove --assume-yes aspnetcore*;&#xA;sudo apt remove --assume-yes netstandard*;&#xA;&#xA;# Set the Microsoft package provider priority&#xA;echo -e &#34;Package: *\nPin: origin \&#34;packages.microsoft.com\&#34;\nPin-Priority: 1001&#34; | sudo tee /etc/apt/preferences.d/99microsoft-dotnet.pref;&#xA;&#xA;# Update and install dotnet&#xA;sudo apt update;&#xA;sudo apt install --assume-yes dotnet-sdk-7.0;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Check out our other repos!&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to learn more about Semantic Kernel and AI, you may also be interested in other repos the Semantic Kernel team supports:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repo&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;Semantic Kernel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A lightweight SDK that integrates cutting-edge LLM technology quickly and easily into your apps.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MicrosoftDocs/semantic-kernel-docs&#34;&gt;Semantic Kernel Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The home for Semantic Kernel documentation that appears on the Microsoft learn site.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/semantic-kernel-starters&#34;&gt;Semantic Kernel Starters&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starter projects for Semantic Kernel to make it easier to get started.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/semantic-memory&#34;&gt;Semantic Memory&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A service that allows you to create pipelines for ingesting, storing, and querying knowledge.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Join the community&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your contributions and suggestions to the Chat Copilot Sample App! One of the easiest ways to participate is to engage in discussions in the GitHub repository. Bug reports and fixes are welcome!&lt;/p&gt; &#xA;&lt;p&gt;To learn more and get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://learn.microsoft.com/semantic-kernel/chat-copilot/&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://aka.ms/SKDiscord&#34;&gt;Discord community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt; to the project&lt;/li&gt; &#xA; &lt;li&gt;Follow the team on our &lt;a href=&#34;https://aka.ms/sk/blog&#34;&gt;blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/chat-copilot/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/aspire</title>
    <updated>2023-11-26T01:47:39Z</updated>
    <id>tag:github.com,2023-11-26:/dotnet/aspire</id>
    <link href="https://github.com/dotnet/aspire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET Aspire&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;.NET Aspire&lt;/h1&gt; &#xA;&lt;h2&gt;What is .NET Aspire?&lt;/h2&gt; &#xA;&lt;p&gt;.NET Aspire is an opinionated, cloud ready stack for building observable, production ready, distributed applications. .NET Aspire is delivered through a collection of NuGet packages that handle specific cloud-native concerns. Cloud-native apps often consist of small, interconnected pieces or microservices rather than a single, monolithic code base. Cloud-native apps generally consume a large number of services, such as databases, messaging, and caching.&lt;/p&gt; &#xA;&lt;p&gt;.NET Aspire helps with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/dotnet/aspire/get-started/aspire-overview?#orchestration&#34;&gt;Orchestration&lt;/a&gt;: .NET Aspire provides features for running and connecting multi-project applications and their dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/dotnet/aspire/get-started/aspire-overview?#net-aspire-components&#34;&gt;Components&lt;/a&gt;: .NET Aspire components are NuGet packages for commonly used services, such as Redis or Postgres, with standardized interfaces ensuring they connect consistently and seamlessly with your app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/dotnet/aspire/get-started/aspire-overview?#project-templates-and-tooling&#34;&gt;Tooling&lt;/a&gt;: .NET Aspire comes with project templates and tooling experiences for Visual Studio and the dotnet CLI help you create and interact with .NET Aspire apps.&lt;/p&gt; &#xA;&lt;p&gt;To learn more, read the full &lt;a href=&#34;https://learn.microsoft.com/dotnet/aspire/&#34;&gt;.NET Aspire overview and documentation&lt;/a&gt;. Samples are available in the &lt;a href=&#34;https://github.com/dotnet/aspire-samples&#34;&gt;.NET Aspire samples repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is in this repo?&lt;/h2&gt; &#xA;&lt;p&gt;The .NET Aspire application host, dashboard, service discovery infrastructure, and all .NET Aspire components. It also contains the project templates and a simple sample, &#39;eShopLite&#39;.&lt;/p&gt; &#xA;&lt;p&gt;You can find the full version of the eShop sample &lt;a href=&#34;https://github.com/dotnet/eshop&#34;&gt;here&lt;/a&gt; and the Azure version &lt;a href=&#34;https://github.com/Azure-Samples/eShopOnAzure&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using latest daily builds&lt;/h2&gt; &#xA;&lt;p&gt;Follow instructions in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspire/main/docs/using-latest-daily.md&#34;&gt;docs/using-latest-daily.md&lt;/a&gt; to get started using .NET Aspire with the latest daily build.&lt;/p&gt; &#xA;&lt;h2&gt;How can I contribute?&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Many people all over the world have helped make .NET better.&lt;/p&gt; &#xA;&lt;p&gt;Follow instructions in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspire/main/docs/contributing.md&#34;&gt;docs/contributing.md&lt;/a&gt; for working in the code in the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting security issues and security bugs&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the &lt;a href=&#34;https://www.microsoft.com/msrc/faqs-report-an-issue&#34;&gt;Security TechCenter&lt;/a&gt;. You can also find these instructions in this repo&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspire/main/SECURITY.md&#34;&gt;Security doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see info about related &lt;a href=&#34;https://www.microsoft.com/msrc/bounty-dot-net-core&#34;&gt;Microsoft .NET Core and ASP.NET Core Bug Bounty Program&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;.NET Foundation&lt;/h2&gt; &#xA;&lt;p&gt;.NET Aspire is a &lt;a href=&#34;https://www.dotnetfoundation.org/projects&#34;&gt;.NET Foundation&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dotnet&#34;&gt;.NET home repo&lt;/a&gt;&amp;nbsp;- links to 100s of .NET projects, from Microsoft and the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/aspnet/core&#34;&gt;ASP.NET Core home&lt;/a&gt; - the best place to start learning about ASP.NET Core.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project has adopted the code of conduct defined by the &lt;a href=&#34;https://contributor-covenant.org&#34;&gt;Contributor Covenant&lt;/a&gt; to clarify expected behavior in our community. For more information, see the &lt;a href=&#34;https://www.dotnetfoundation.org/code-of-conduct&#34;&gt;.NET Foundation Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code in this repo is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/aspire/main/LICENSE.TXT&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
</feed>