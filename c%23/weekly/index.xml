<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-31T01:46:02Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DaXcess/LCVR</title>
    <updated>2024-12-31T01:46:02Z</updated>
    <id>tag:github.com,2024-12-31:/DaXcess/LCVR</id>
    <link href="https://github.com/DaXcess/LCVR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collecting Scrap in VR&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⚠️⚠️ NOT READY YET ⚠️⚠️&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The existence of this GitHub repository does not mean a working mod already exists, it&#39;s just semi-functional source code at this time&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Lethal Company VR Mod&lt;/h1&gt; &#xA;&lt;p&gt;Collecting Scrap in VR&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>App-vNext/Polly</title>
    <updated>2024-12-31T01:46:02Z</updated>
    <id>tag:github.com,2024-12-31:/App-vNext/Polly</id>
    <link href="https://github.com/App-vNext/Polly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Polly is a .NET resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner. From version 6.0.1, Polly targets .NET Standard 1.1 and 2.0+.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Polly&lt;/h1&gt; &#xA;&lt;p&gt;Polly is a .NET resilience and transient-fault-handling library that allows developers to express resilience strategies such as Retry, Circuit Breaker, Hedging, Timeout, Rate Limiter and Fallback in a fluent and thread-safe manner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.dotnetfoundation.org/&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://github.com/dotnet/swag/raw/main/logo/dotnetfoundation_v4_small.png&#34; width=&#34;100&#34; alt=&#34;The .NET Foundation logo&#34;&gt;&lt;/a&gt; We are a member of the &lt;a href=&#34;https://www.dotnetfoundation.org/about&#34;&gt;.NET Foundation&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Keep up to date with new feature announcements, tips &amp;amp; tricks, and other news through &lt;a href=&#34;https://www.thepollyproject.org&#34;&gt;www.thepollyproject.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/App-vNext/Polly/actions?query=workflow%3Abuild+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/App-vNext/Polly/workflows/build/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/App-vNext/Polly&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/App-vNext/Polly/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Code coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://securityscorecards.dev/viewer/?uri=github.com/App-vNext/Polly&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/App-vNext/Polly/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/App-vNext/Polly/main/Polly-Logo.png&#34; alt=&#34;Polly logo&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This documentation describes the new Polly v8 API. If you are using the v7 API, please refer to the &lt;a href=&#34;https://github.com/App-vNext/Polly/tree/7.2.4&#34;&gt;previous version&lt;/a&gt; of the documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;NuGet Packages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Package&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Latest Version&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Polly&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Polly/&#34; title=&#34;Download Polly from NuGet.org&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Polly&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Polly.Core&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Polly.Core/&#34; title=&#34;Download Polly.Core from NuGet.org&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Polly.Core&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Polly.Extensions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Polly.Extensions/&#34; title=&#34;Download Polly.Extensions from NuGet.org&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Polly.Extensions&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Polly.RateLimiting&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Polly.RateLimiting/&#34; title=&#34;Download Polly.RateLimiting from NuGet.org&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Polly.RateLimiting&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Polly.Testing&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.nuget.org/packages/Polly.Testing/&#34; title=&#34;Download Polly.Testing from NuGet.org&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Polly.Testing&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This README aims to give a quick overview of some Polly features - including enough to get you started with any resilience strategy. For deeper detail on any resilience strategy, and many other aspects of Polly, be sure also to check out &lt;a href=&#34;https://www.pollydocs.org/&#34;&gt;pollydocs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;To use Polly, you must provide a callback and execute it using &lt;a href=&#34;https://www.pollydocs.org/pipelines&#34;&gt;&lt;strong&gt;resilience pipeline&lt;/strong&gt;&lt;/a&gt;. A resilience pipeline is a combination of one or more &lt;a href=&#34;https://www.pollydocs.org/strategies&#34;&gt;&lt;strong&gt;resilience strategies&lt;/strong&gt;&lt;/a&gt; such as retry, timeout, and rate limiter. Polly uses &lt;strong&gt;builders&lt;/strong&gt; to integrate these strategies into a pipeline.&lt;/p&gt; &#xA;&lt;p&gt;To get started, first add the &lt;a href=&#34;https://www.nuget.org/packages/Polly.Core/&#34;&gt;Polly.Core&lt;/a&gt; package to your project by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet add package Polly.Core&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create a &lt;code&gt;ResiliencePipeline&lt;/code&gt; using the &lt;code&gt;ResiliencePipelineBuilder&lt;/code&gt; class as shown below:&lt;/p&gt; &#xA;&lt;!-- snippet: quick-start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Create an instance of builder that exposes various extensions for adding resilience strategies&#xA;ResiliencePipeline pipeline = new ResiliencePipelineBuilder()&#xA;    .AddRetry(new RetryStrategyOptions()) // Add retry using the default options&#xA;    .AddTimeout(TimeSpan.FromSeconds(10)) // Add 10 seconds timeout&#xA;    .Build(); // Builds the resilience pipeline&#xA;&#xA;// Execute the pipeline asynchronously&#xA;await pipeline.ExecuteAsync(static async token =&amp;gt; { /* Your custom logic goes here */ }, cancellationToken);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h3&gt;Dependency injection&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to define resilience pipelines using &lt;a href=&#34;https://learn.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection&#34;&gt;&lt;code&gt;IServiceCollection&lt;/code&gt;&lt;/a&gt;, you&#39;ll need to install the &lt;a href=&#34;https://www.nuget.org/packages/Polly.Extensions/&#34;&gt;Polly.Extensions&lt;/a&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet add package Polly.Extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then define your resilience pipeline using the &lt;code&gt;AddResiliencePipeline(...)&lt;/code&gt; extension method as shown:&lt;/p&gt; &#xA;&lt;!-- snippet: quick-start-di --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;var services = new ServiceCollection();&#xA;&#xA;// Define a resilience pipeline with the name &#34;my-pipeline&#34;&#xA;services.AddResiliencePipeline(&#34;my-pipeline&#34;, builder =&amp;gt;&#xA;{&#xA;    builder&#xA;        .AddRetry(new RetryStrategyOptions())&#xA;        .AddTimeout(TimeSpan.FromSeconds(10));&#xA;});&#xA;&#xA;// Build the service provider&#xA;var serviceProvider = services.BuildServiceProvider();&#xA;&#xA;// Retrieve a ResiliencePipelineProvider that dynamically creates and caches the resilience pipelines&#xA;var pipelineProvider = serviceProvider.GetRequiredService&amp;lt;ResiliencePipelineProvider&amp;lt;string&amp;gt;&amp;gt;();&#xA;&#xA;// Retrieve your resilience pipeline using the name it was registered with&#xA;ResiliencePipeline pipeline = pipelineProvider.GetPipeline(&#34;my-pipeline&#34;);&#xA;&#xA;// Execute the pipeline&#xA;await pipeline.ExecuteAsync(static async token =&amp;gt;&#xA;{&#xA;    // Your custom logic goes here&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;h2&gt;Resilience strategies&lt;/h2&gt; &#xA;&lt;p&gt;Polly provides a variety of resilience strategies. Alongside the comprehensive guides for each strategy, the wiki also includes an &lt;a href=&#34;https://github.com/App-vNext/Polly/wiki/Transient-fault-handling-and-proactive-resilience-engineering&#34;&gt;overview of the role each strategy plays in resilience engineering&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Polly categorizes resilience strategies into two main groups:&lt;/p&gt; &#xA;&lt;h3&gt;Reactive&lt;/h3&gt; &#xA;&lt;p&gt;These strategies handle specific exceptions that are thrown, or results that are returned, by the callbacks executed through the strategy.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Strategy&lt;/th&gt; &#xA;   &lt;th&gt;Premise&lt;/th&gt; &#xA;   &lt;th&gt;AKA&lt;/th&gt; &#xA;   &lt;th&gt;Mitigation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/#retry&#34;&gt;&lt;strong&gt;Retry&lt;/strong&gt; family&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Many faults are transient and may self-correct after a short delay.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Maybe it&#39;s just a blip&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows configuring automatic retries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/#circuit-breaker&#34;&gt;&lt;strong&gt;Circuit-breaker&lt;/strong&gt; family&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When a system is seriously struggling, failing fast is better than making users/callers wait. &lt;br&gt;&lt;br&gt;Protecting a faulting system from overload can help it recover.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Stop doing it if it hurts&lt;/em&gt; &lt;br&gt;&lt;br&gt;&lt;em&gt;Give that system a break&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Breaks the circuit (blocks executions) for a period, when faults exceed some pre-configured threshold.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/#fallback&#34;&gt;&lt;strong&gt;Fallback&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Things will still fail - plan what you will do when that happens.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Degrade gracefully&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines an alternative value to be returned (or action to be executed) on failure.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/#hedging&#34;&gt;&lt;strong&gt;Hedging&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Things can be slow sometimes, plan what you will do when that happens.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Hedge your bets&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Executes parallel actions when things are slow and waits for the fastest one.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Proactive&lt;/h3&gt; &#xA;&lt;p&gt;Unlike reactive strategies, proactive strategies do not focus on handling errors by the callbacks might throw or return. They can make pro-active decisions to cancel or reject the execution of callbacks.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Strategy&lt;/th&gt; &#xA;   &lt;th&gt;Premise&lt;/th&gt; &#xA;   &lt;th&gt;AKA&lt;/th&gt; &#xA;   &lt;th&gt;Prevention&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/#timeout&#34;&gt;&lt;strong&gt;Timeout&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Beyond a certain wait, a success result is unlikely.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Don&#39;t wait forever&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Guarantees the caller won&#39;t have to wait beyond the timeout.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/#rate-limiter&#34;&gt;&lt;strong&gt;Rate Limiter&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limiting the rate a system handles requests is another way to control load. &lt;br&gt; &lt;br&gt; This can apply to the way your system accepts incoming calls, and/or to the way you call downstream services.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Slow down a bit, will you?&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Constrains executions to not exceed a certain rate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://www.pollydocs.org/strategies&#34;&gt;resilience strategies&lt;/a&gt; docs to explore how to configure individual resilience strategies in more detail.&lt;/p&gt; &#xA;&lt;h3&gt;Retry&lt;/h3&gt; &#xA;&lt;!-- snippet: retry --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Retry using the default options.&#xA;// See https://www.pollydocs.org/strategies/retry#defaults for defaults.&#xA;var optionsDefaults = new RetryStrategyOptions();&#xA;&#xA;// For instant retries with no delay&#xA;var optionsNoDelay = new RetryStrategyOptions&#xA;{&#xA;    Delay = TimeSpan.Zero&#xA;};&#xA;&#xA;// For advanced control over the retry behavior, including the number of attempts,&#xA;// delay between retries, and the types of exceptions to handle.&#xA;var optionsComplex = new RetryStrategyOptions&#xA;{&#xA;    ShouldHandle = new PredicateBuilder().Handle&amp;lt;SomeExceptionType&amp;gt;(),&#xA;    BackoffType = DelayBackoffType.Exponential,&#xA;    UseJitter = true,  // Adds a random factor to the delay&#xA;    MaxRetryAttempts = 4,&#xA;    Delay = TimeSpan.FromSeconds(3),&#xA;};&#xA;&#xA;// To use a custom function to generate the delay for retries&#xA;var optionsDelayGenerator = new RetryStrategyOptions&#xA;{&#xA;    MaxRetryAttempts = 2,&#xA;    DelayGenerator = static args =&amp;gt;&#xA;    {&#xA;        var delay = args.AttemptNumber switch&#xA;        {&#xA;            0 =&amp;gt; TimeSpan.Zero,&#xA;            1 =&amp;gt; TimeSpan.FromSeconds(1),&#xA;            _ =&amp;gt; TimeSpan.FromSeconds(5)&#xA;        };&#xA;&#xA;        // This example uses a synchronous delay generator,&#xA;        // but the API also supports asynchronous implementations.&#xA;        return new ValueTask&amp;lt;TimeSpan?&amp;gt;(delay);&#xA;    }&#xA;};&#xA;&#xA;// To extract the delay from the result object&#xA;var optionsExtractDelay = new RetryStrategyOptions&amp;lt;HttpResponseMessage&amp;gt;&#xA;{&#xA;    DelayGenerator = static args =&amp;gt;&#xA;    {&#xA;        if (args.Outcome.Result is HttpResponseMessage responseMessage &amp;amp;&amp;amp;&#xA;            TryGetDelay(responseMessage, out TimeSpan delay))&#xA;        {&#xA;            return new ValueTask&amp;lt;TimeSpan?&amp;gt;(delay);&#xA;        }&#xA;&#xA;        // Returning null means the retry strategy will use its internal delay for this attempt.&#xA;        return new ValueTask&amp;lt;TimeSpan?&amp;gt;((TimeSpan?)null);&#xA;    }&#xA;};&#xA;&#xA;// To get notifications when a retry is performed&#xA;var optionsOnRetry = new RetryStrategyOptions&#xA;{&#xA;    MaxRetryAttempts = 2,&#xA;    OnRetry = static args =&amp;gt;&#xA;    {&#xA;        Console.WriteLine(&#34;OnRetry, Attempt: {0}&#34;, args.AttemptNumber);&#xA;&#xA;        // Event handlers can be asynchronous; here, we return an empty ValueTask.&#xA;        return default;&#xA;    }&#xA;};&#xA;&#xA;// To keep retrying indefinitely or until success use int.MaxValue.&#xA;var optionsIndefiniteRetry = new RetryStrategyOptions&#xA;{&#xA;    MaxRetryAttempts = int.MaxValue,&#xA;};&#xA;&#xA;// Add a retry strategy with a RetryStrategyOptions{&amp;lt;TResult&amp;gt;} instance to the pipeline&#xA;new ResiliencePipelineBuilder().AddRetry(optionsDefaults);&#xA;new ResiliencePipelineBuilder&amp;lt;HttpResponseMessage&amp;gt;().AddRetry(optionsExtractDelay);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;If all retries fail, a retry strategy rethrows the final exception back to the calling code.&lt;/p&gt; &#xA;&lt;p&gt;For more details, visit the &lt;a href=&#34;https://www.pollydocs.org/strategies/retry&#34;&gt;retry strategy&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Circuit Breaker&lt;/h3&gt; &#xA;&lt;!-- snippet: circuit-breaker --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Circuit breaker with default options.&#xA;// See https://www.pollydocs.org/strategies/circuit-breaker#defaults for defaults.&#xA;var optionsDefaults = new CircuitBreakerStrategyOptions();&#xA;&#xA;// Circuit breaker with customized options:&#xA;// The circuit will break if more than 50% of actions result in handled exceptions,&#xA;// within any 10-second sampling duration, and at least 8 actions are processed.&#xA;var optionsComplex = new CircuitBreakerStrategyOptions&#xA;{&#xA;    FailureRatio = 0.5,&#xA;    SamplingDuration = TimeSpan.FromSeconds(10),&#xA;    MinimumThroughput = 8,&#xA;    BreakDuration = TimeSpan.FromSeconds(30),&#xA;    ShouldHandle = new PredicateBuilder().Handle&amp;lt;SomeExceptionType&amp;gt;()&#xA;};&#xA;&#xA;// Circuit breaker using BreakDurationGenerator:&#xA;// The break duration is dynamically determined based on the properties of BreakDurationGeneratorArguments.&#xA;var optionsBreakDurationGenerator = new CircuitBreakerStrategyOptions&#xA;{&#xA;    FailureRatio = 0.5,&#xA;    SamplingDuration = TimeSpan.FromSeconds(10),&#xA;    MinimumThroughput = 8,&#xA;    BreakDurationGenerator = static args =&amp;gt; new ValueTask&amp;lt;TimeSpan&amp;gt;(TimeSpan.FromMinutes(args.FailureCount)),&#xA;};&#xA;&#xA;// Handle specific failed results for HttpResponseMessage:&#xA;var optionsShouldHandle = new CircuitBreakerStrategyOptions&amp;lt;HttpResponseMessage&amp;gt;&#xA;{&#xA;    ShouldHandle = new PredicateBuilder&amp;lt;HttpResponseMessage&amp;gt;()&#xA;        .Handle&amp;lt;SomeExceptionType&amp;gt;()&#xA;        .HandleResult(response =&amp;gt; response.StatusCode == HttpStatusCode.InternalServerError)&#xA;};&#xA;&#xA;// Monitor the circuit state, useful for health reporting:&#xA;var stateProvider = new CircuitBreakerStateProvider();&#xA;var optionsStateProvider = new CircuitBreakerStrategyOptions&amp;lt;HttpResponseMessage&amp;gt;&#xA;{&#xA;    StateProvider = stateProvider&#xA;};&#xA;&#xA;var circuitState = stateProvider.CircuitState;&#xA;&#xA;/*&#xA;CircuitState.Closed - Normal operation; actions are executed.&#xA;CircuitState.Open - Circuit is open; actions are blocked.&#xA;CircuitState.HalfOpen - Recovery state after break duration expires; actions are permitted.&#xA;CircuitState.Isolated - Circuit is manually held open; actions are blocked.&#xA;*/&#xA;&#xA;// Manually control the Circuit Breaker state:&#xA;var manualControl = new CircuitBreakerManualControl();&#xA;var optionsManualControl = new CircuitBreakerStrategyOptions&#xA;{&#xA;    ManualControl = manualControl&#xA;};&#xA;&#xA;// Manually isolate a circuit, e.g., to isolate a downstream service.&#xA;await manualControl.IsolateAsync();&#xA;&#xA;// Manually close the circuit to allow actions to be executed again.&#xA;await manualControl.CloseAsync();&#xA;&#xA;// Add a circuit breaker strategy with a CircuitBreakerStrategyOptions{&amp;lt;TResult&amp;gt;} instance to the pipeline&#xA;new ResiliencePipelineBuilder().AddCircuitBreaker(optionsDefaults);&#xA;new ResiliencePipelineBuilder&amp;lt;HttpResponseMessage&amp;gt;().AddCircuitBreaker(optionsStateProvider);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;For more details, visit the &lt;a href=&#34;https://www.pollydocs.org/strategies/circuit-breaker&#34;&gt;circuit breaker strategy&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Fallback&lt;/h3&gt; &#xA;&lt;!-- snippet: fallback --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// A fallback/substitute value if an operation fails.&#xA;var optionsSubstitute = new FallbackStrategyOptions&amp;lt;UserAvatar&amp;gt;&#xA;{&#xA;    ShouldHandle = new PredicateBuilder&amp;lt;UserAvatar&amp;gt;()&#xA;        .Handle&amp;lt;SomeExceptionType&amp;gt;()&#xA;        .HandleResult(r =&amp;gt; r is null),&#xA;    FallbackAction = static args =&amp;gt; Outcome.FromResultAsValueTask(UserAvatar.Blank)&#xA;};&#xA;&#xA;// Use a dynamically generated value if an operation fails.&#xA;var optionsFallbackAction = new FallbackStrategyOptions&amp;lt;UserAvatar&amp;gt;&#xA;{&#xA;    ShouldHandle = new PredicateBuilder&amp;lt;UserAvatar&amp;gt;()&#xA;        .Handle&amp;lt;SomeExceptionType&amp;gt;()&#xA;        .HandleResult(r =&amp;gt; r is null),&#xA;    FallbackAction = static args =&amp;gt;&#xA;    {&#xA;        var avatar = UserAvatar.GetRandomAvatar();&#xA;        return Outcome.FromResultAsValueTask(avatar);&#xA;    }&#xA;};&#xA;&#xA;// Use a default or dynamically generated value, and execute an additional action if the fallback is triggered.&#xA;var optionsOnFallback = new FallbackStrategyOptions&amp;lt;UserAvatar&amp;gt;&#xA;{&#xA;    ShouldHandle = new PredicateBuilder&amp;lt;UserAvatar&amp;gt;()&#xA;        .Handle&amp;lt;SomeExceptionType&amp;gt;()&#xA;        .HandleResult(r =&amp;gt; r is null),&#xA;    FallbackAction = static args =&amp;gt;&#xA;    {&#xA;        var avatar = UserAvatar.GetRandomAvatar();&#xA;        return Outcome.FromResultAsValueTask(UserAvatar.Blank);&#xA;    },&#xA;    OnFallback = static args =&amp;gt;&#xA;    {&#xA;        // Add extra logic to be executed when the fallback is triggered, such as logging.&#xA;        return default; // Returns an empty ValueTask&#xA;    }&#xA;};&#xA;&#xA;// Add a fallback strategy with a FallbackStrategyOptions&amp;lt;TResult&amp;gt; instance to the pipeline&#xA;new ResiliencePipelineBuilder&amp;lt;UserAvatar&amp;gt;().AddFallback(optionsOnFallback);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;For more details, visit the &lt;a href=&#34;https://www.pollydocs.org/strategies/fallback&#34;&gt;fallback strategy&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Hedging&lt;/h3&gt; &#xA;&lt;!-- snippet: Hedging --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Hedging with default options.&#xA;// See https://www.pollydocs.org/strategies/hedging#defaults for defaults.&#xA;var optionsDefaults = new HedgingStrategyOptions&amp;lt;HttpResponseMessage&amp;gt;();&#xA;&#xA;// A customized hedging strategy that retries up to 3 times if the execution&#xA;// takes longer than 1 second or if it fails due to an exception or returns an HTTP 500 Internal Server Error.&#xA;var optionsComplex = new HedgingStrategyOptions&amp;lt;HttpResponseMessage&amp;gt;&#xA;{&#xA;    ShouldHandle = new PredicateBuilder&amp;lt;HttpResponseMessage&amp;gt;()&#xA;        .Handle&amp;lt;SomeExceptionType&amp;gt;()&#xA;        .HandleResult(response =&amp;gt; response.StatusCode == HttpStatusCode.InternalServerError),&#xA;    MaxHedgedAttempts = 3,&#xA;    Delay = TimeSpan.FromSeconds(1),&#xA;    ActionGenerator = static args =&amp;gt;&#xA;    {&#xA;        Console.WriteLine(&#34;Preparing to execute hedged action.&#34;);&#xA;&#xA;        // Return a delegate function to invoke the original action with the action context.&#xA;        // Optionally, you can also create a completely new action to be executed.&#xA;        return () =&amp;gt; args.Callback(args.ActionContext);&#xA;    }&#xA;};&#xA;&#xA;// Subscribe to hedging events.&#xA;var optionsOnHedging = new HedgingStrategyOptions&amp;lt;HttpResponseMessage&amp;gt;&#xA;{&#xA;    OnHedging = static args =&amp;gt;&#xA;    {&#xA;        Console.WriteLine($&#34;OnHedging: Attempt number {args.AttemptNumber}&#34;);&#xA;        return default;&#xA;    }&#xA;};&#xA;&#xA;// Add a hedging strategy with a HedgingStrategyOptions&amp;lt;TResult&amp;gt; instance to the pipeline&#xA;new ResiliencePipelineBuilder&amp;lt;HttpResponseMessage&amp;gt;().AddHedging(optionsDefaults);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;If all hedged attempts fail, the hedging strategy will either re-throw the original exception or return the original failed result to the caller.&lt;/p&gt; &#xA;&lt;p&gt;For more details, visit the &lt;a href=&#34;https://www.pollydocs.org/strategies/hedging&#34;&gt;hedging strategy&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Timeout&lt;/h3&gt; &#xA;&lt;p&gt;The timeout resilience strategy assumes delegates you execute support &lt;a href=&#34;https://learn.microsoft.com/dotnet/standard/threading/cancellation-in-managed-threads&#34;&gt;co-operative cancellation&lt;/a&gt;. You must use &lt;code&gt;Execute/Async(...)&lt;/code&gt; overloads taking a &lt;code&gt;CancellationToken&lt;/code&gt;, and the executed delegate must honor that &lt;code&gt;CancellationToken&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- snippet: timeout --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// To add a timeout with a custom TimeSpan duration&#xA;new ResiliencePipelineBuilder().AddTimeout(TimeSpan.FromSeconds(3));&#xA;&#xA;// Timeout using the default options.&#xA;// See https://www.pollydocs.org/strategies/timeout#defaults for defaults.&#xA;var optionsDefaults = new TimeoutStrategyOptions();&#xA;&#xA;// To add a timeout using a custom timeout generator function&#xA;var optionsTimeoutGenerator = new TimeoutStrategyOptions&#xA;{&#xA;    TimeoutGenerator = static args =&amp;gt;&#xA;    {&#xA;        // Note: the timeout generator supports asynchronous operations&#xA;        return new ValueTask&amp;lt;TimeSpan&amp;gt;(TimeSpan.FromSeconds(123));&#xA;    }&#xA;};&#xA;&#xA;// To add a timeout and listen for timeout events&#xA;var optionsOnTimeout = new TimeoutStrategyOptions&#xA;{&#xA;    TimeoutGenerator = static args =&amp;gt;&#xA;    {&#xA;        // Note: the timeout generator supports asynchronous operations&#xA;        return new ValueTask&amp;lt;TimeSpan&amp;gt;(TimeSpan.FromSeconds(123));&#xA;    },&#xA;    OnTimeout = static args =&amp;gt;&#xA;    {&#xA;        Console.WriteLine($&#34;{args.Context.OperationKey}: Execution timed out after {args.Timeout.TotalSeconds} seconds.&#34;);&#xA;        return default;&#xA;    }&#xA;};&#xA;&#xA;// Add a timeout strategy with a TimeoutStrategyOptions instance to the pipeline&#xA;new ResiliencePipelineBuilder().AddTimeout(optionsDefaults);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Timeout strategies throw &lt;code&gt;TimeoutRejectedException&lt;/code&gt; when a timeout occurs.&lt;/p&gt; &#xA;&lt;p&gt;For more details, visit the &lt;a href=&#34;https://www.pollydocs.org/strategies/timeout&#34;&gt;timeout strategy&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Rate Limiter&lt;/h3&gt; &#xA;&lt;!-- snippet: rate-limiter --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;// Add rate limiter with default options.&#xA;// See https://www.pollydocs.org/strategies/rate-limiter#defaults for defaults.&#xA;new ResiliencePipelineBuilder()&#xA;    .AddRateLimiter(new RateLimiterStrategyOptions());&#xA;&#xA;// Create a rate limiter to allow a maximum of 100 concurrent executions and a queue of 50.&#xA;new ResiliencePipelineBuilder()&#xA;    .AddConcurrencyLimiter(100, 50);&#xA;&#xA;// Create a rate limiter that allows 100 executions per minute.&#xA;new ResiliencePipelineBuilder()&#xA;    .AddRateLimiter(new SlidingWindowRateLimiter(&#xA;        new SlidingWindowRateLimiterOptions&#xA;        {&#xA;            PermitLimit = 100,&#xA;            Window = TimeSpan.FromMinutes(1)&#xA;        }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- endSnippet --&gt; &#xA;&lt;p&gt;Rate limiter strategy throws &lt;code&gt;RateLimiterRejectedException&lt;/code&gt; if execution is rejected.&lt;/p&gt; &#xA;&lt;p&gt;For more details, visit the &lt;a href=&#34;https://www.pollydocs.org/strategies/rate-limiter&#34;&gt;rate limiter strategy&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Polly, visit &lt;a href=&#34;https://www.pollydocs.org/&#34;&gt;pollydocs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/App-vNext/Polly/main/samples/README.md&#34;&gt;Samples&lt;/a&gt;: Samples in this repository that serve as an introduction to Polly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/App-vNext/Polly-Samples&#34;&gt;Polly-Samples&lt;/a&gt;: Contains practical examples for using various implementations of Polly. Please feel free to contribute to the Polly-Samples repository in order to assist others who are either learning Polly for the first time, or are seeking advanced examples and novel approaches provided by our generous community.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft&#39;s &lt;a href=&#34;https://github.com/dotnet-architecture/eShopOnContainers&#34;&gt;eShopOnContainers project&lt;/a&gt;: Sample project demonstrating a .NET Micro-services architecture and using Polly for resilience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the terms of the &lt;a href=&#34;https://opensource.org/license/bsd-3-clause/&#34;&gt;New BSD License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SubtitleEdit/subtitleedit</title>
    <updated>2024-12-31T01:46:02Z</updated>
    <id>tag:github.com,2024-12-31:/SubtitleEdit/subtitleedit</id>
    <link href="https://github.com/SubtitleEdit/subtitleedit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the subtitle editor :)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Subtitle Edit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;the subtitle editor :)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SubtitleEdit/subtitleedit&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/SubtitleEdit/subtitleedit.svg?sanitize=true&#34; alt=&#34;GitHub version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/SubtitleEdit/subtitleedit/branch/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/SubtitleEdit/subtitleedit/main.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/subtitleedit/subtitleedit/latest/total.svg?sanitize=true&#34; alt=&#34;SE number of downloads&#34;&gt; &lt;a href=&#34;https://gitter.im/SubtitleEdit/subtitleedit&#34; title=&#34;Subtitle Edit Gitter Chatroom&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SUBTITLE%20EDIT-join%20chat-blue.svg?sanitize=true&#34; alt=&#34;SE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SubtitleEdit/subtitleedit/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/SUBTITLE%20EDIT-download-000F39.svg?sanitize=true&#34; alt=&#34;download latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nikse.dk/SubtitleEdit/Help&#34;&gt;https://www.nikse.dk/SubtitleEdit/Help&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>