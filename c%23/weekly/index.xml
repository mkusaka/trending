<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-24T01:42:16Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Tim-Maes/Facet</title>
    <updated>2025-08-24T01:42:16Z</updated>
    <id>tag:github.com,2025-08-24:/Tim-Maes/Facet</id>
    <link href="https://github.com/Tim-Maes/Facet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíé Source generator for creating compile-time facets of your models, features mapping and LINQ projections, zero runtime overhead. üíé&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Tim-Maes/Facet/master/assets/Facet.png&#34; alt=&#34;Facet logo&#34; width=&#34;400&#34; /&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  &#34;One part of a subject, situation, object that has many parts.&#34; &#xA;&lt;/div&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;&lt;strong&gt;Facet&lt;/strong&gt; is a C# source generator that lets you define &lt;strong&gt;lightweight projections&lt;/strong&gt; (DTOs, API models, etc.) directly from your domain models, without writing boilerplate.&lt;/p&gt; &#xA;&lt;p&gt;It generates partial classes, records, structs, or record structs with constructors, optional LINQ projections, and even supports custom mappings, all at compile time, with zero runtime cost.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üíé&lt;/span&gt; What is Facetting?&lt;/h2&gt; &#xA;&lt;p&gt;Facetting is the process of defining &lt;strong&gt;focused views&lt;/strong&gt; of a larger model at compile time.&lt;/p&gt; &#xA;&lt;p&gt;Instead of manually writing separate DTOs, mappers, and projections, &lt;strong&gt;Facet&lt;/strong&gt; allows you to declare what you want to keep, and generates everything else.&lt;/p&gt; &#xA;&lt;p&gt;You can think of it like &lt;strong&gt;carving out a specific facet&lt;/strong&gt; of a gem:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The part you care about&lt;/li&gt; &#xA; &lt;li&gt;Leaving the rest behind.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ùî&lt;/span&gt; Why Facetting?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reduce duplication across DTOs, projections, and ViewModels&lt;/li&gt; &#xA; &lt;li&gt;Maintain strong typing with no runtime cost&lt;/li&gt; &#xA; &lt;li&gt;Stay DRY (Don&#39;t Repeat Yourself) without sacrificing performance&lt;/li&gt; &#xA; &lt;li&gt;Works seamlessly with LINQ providers like Entity Framework&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìã&lt;/span&gt; Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tim-Maes/Facet/master/docs/README.md&#34;&gt;Documentation &amp;amp; Guides&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tim-Maes/Facet/master/docs/07_WhatIsBeingGenerated.md&#34;&gt;What is being generated?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚≠ê&lt;/span&gt; Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Generate classes, records, structs, or record structs from existing types&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Exclude fields/properties you don&#39;t want (create a Facetted view of your model)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Include/redact public fields&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Auto-generate constructors for fast mapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; LINQ projection expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚úÖ&lt;/span&gt; Full mapping support with custom mapping configurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üåé&lt;/span&gt; The Facet Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Facet is modular and consists of several NuGet packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Facet&lt;/strong&gt;: The core source generator. Generates DTOs, projections, and mapping code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Facet.Extensions&lt;/strong&gt;: Provider-agnostic extension methods for mapping and projecting (works with any LINQ provider, no EF Core dependency).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Facet.Mapping&lt;/strong&gt;: Advanced static mapping configuration support with async capabilities and dependency injection for complex mapping scenarios.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Facet.Extensions.EFCore&lt;/strong&gt;: Async extension methods for Entity Framework Core (requires EF Core 6+).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üöÄ&lt;/span&gt; Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Install the NuGet Package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Facet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For LINQ helpers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Facet.Extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For EF Core support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Facet.Extensions.EFCore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Projection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Facet(typeof(User))]&#xA;public partial class UserFacet { }&#xA;&#xA;// Auto-generates constructor, properties, and LINQ projection&#xA;var user = user.ToFacet&amp;lt;UserFacet&amp;gt;();&#xA;var users = users.SelectFacets&amp;lt;UserFacet&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Property Exclusion &amp;amp; Field Inclusion&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Exclude sensitive properties&#xA;string[] excludeFields = { &#34;Password&#34;, &#34;Email&#34; };&#xA;&#xA;[Facet(typeof(User), exclude: excludeFields)]&#xA;public partial class UserWithoutEmail { }&#xA;&#xA;// Include public fields&#xA;[Facet(typeof(Entity), IncludeFields = true)]&#xA;public partial class EntityDto { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Different Type Kinds&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Generate as record (immutable by default)&#xA;[Facet(typeof(Product))]&#xA;public partial record ProductDto;&#xA;&#xA;// Generate as struct (value type)&#xA;[Facet(typeof(Point))]&#xA;public partial struct PointDto;&#xA;&#xA;// Generate as record struct (immutable value type)&#xA;[Facet(typeof(Coordinates))]&#xA;public partial record struct CoordinatesDto; // Preserves required/init-only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Sync Mapping&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class UserMapper : IFacetMapConfiguration&amp;lt;User, UserDto&amp;gt;&#xA;{&#xA;    public static void Map(User source, UserDto target)&#xA;    {&#xA;        target.FullName = $&#34;{source.FirstName} {source.LastName}&#34;;&#xA;        target.Age = CalculateAge(source.DateOfBirth);&#xA;    }&#xA;}&#xA;&#xA;[Facet(typeof(User), Configuration = typeof(UserMapper))]&#xA;public partial class UserDto &#xA;{&#xA;    public string FullName { get; set; }&#xA;    public int Age { get; set; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Async Mapping for I/O Operations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class UserAsyncMapper : IFacetMapConfigurationAsync&amp;lt;User, UserDto&amp;gt;&#xA;{&#xA;    public static async Task MapAsync(User source, UserDto target, CancellationToken cancellationToken = default)&#xA;    {&#xA;        // Async database lookup&#xA;        target.ProfilePicture = await GetProfilePictureAsync(source.Id, cancellationToken);&#xA;        &#xA;        // Async API call&#xA;        target.ReputationScore = await CalculateReputationAsync(source.Email, cancellationToken);&#xA;    }&#xA;}&#xA;&#xA;// Usage&#xA;var userDto = await user.ToFacetAsync&amp;lt;User, UserDto, UserAsyncMapper&amp;gt;();&#xA;var userDtos = await users.ToFacetsParallelAsync&amp;lt;User, UserDto, UserAsyncMapper&amp;gt;();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Async Mapping with Dependency Injection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class UserAsyncMapperWithDI : IFacetMapConfigurationAsyncInstance&amp;lt;User, UserDto&amp;gt;&#xA;{&#xA;    private readonly IProfilePictureService _profileService;&#xA;    private readonly IReputationService _reputationService;&#xA;&#xA;    public UserAsyncMapperWithDI(IProfilePictureService profileService, IReputationService reputationService)&#xA;    {&#xA;        _profileService = profileService;&#xA;        _reputationService = reputationService;&#xA;    }&#xA;&#xA;    public async Task MapAsync(User source, UserDto target, CancellationToken cancellationToken = default)&#xA;    {&#xA;        // Use injected services&#xA;        target.ProfilePicture = await _profileService.GetProfilePictureAsync(source.Id, cancellationToken);&#xA;        target.ReputationScore = await _reputationService.CalculateReputationAsync(source.Email, cancellationToken);&#xA;    }&#xA;}&#xA;&#xA;// Usage with DI&#xA;var mapper = new UserAsyncMapperWithDI(profileService, reputationService);&#xA;var userDto = await user.ToFacetAsync(mapper);&#xA;var userDtos = await users.ToFacetsParallelAsync(mapper);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;EF Core Integration&lt;/h3&gt; &#xA;&lt;h4&gt;Forward Mapping (Entity -&amp;gt; Facet)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// Async projection directly in EF Core queries&#xA;var userDtos = await dbContext.Users&#xA;    .Where(u =&amp;gt; u.IsActive)&#xA;    .ToFacetsAsync&amp;lt;UserDto&amp;gt;();&#xA;&#xA;// LINQ projection for complex queries&#xA;var results = await dbContext.Products&#xA;    .Where(p =&amp;gt; p.IsAvailable)&#xA;    .SelectFacet&amp;lt;ProductDto&amp;gt;()&#xA;    .OrderBy(dto =&amp;gt; dto.Name)&#xA;    .ToListAsync();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reverse Mapping (Facet -&amp;gt; Entity)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[Facet(typeof(User)]&#xA;public partial class UpdateUserDto { }&#xA;&#xA;[HttpPut(&#34;{id}&#34;)]&#xA;public async Task&amp;lt;IActionResult&amp;gt; UpdateUser(int id, UpdateUserDto dto)&#xA;{&#xA;    var user = await context.Users.FindAsync(id);&#xA;    if (user == null) return NotFound();&#xA;    &#xA;    // Only updates properties that mutated&#xA;    user.UpdateFromFacet(dto, context);&#xA;    &#xA;    await context.SaveChangesAsync();&#xA;    return NoContent();&#xA;}&#xA;&#xA;// With change tracking for auditing&#xA;var result = user.UpdateFromFacetWithChanges(dto, context);&#xA;if (result.HasChanges)&#xA;{&#xA;    logger.LogInformation(&#34;User {UserId} updated. Changed: {Properties}&#34;, &#xA;        user.Id, string.Join(&#34;, &#34;, result.ChangedProperties));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>0x90d/videoduplicatefinder</title>
    <updated>2025-08-24T01:42:16Z</updated>
    <id>tag:github.com,2025-08-24:/0x90d/videoduplicatefinder</id>
    <link href="https://github.com/0x90d/videoduplicatefinder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Video Duplicate Finder - Crossplatform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Video Duplicate Finder&lt;/h1&gt; &#xA;&lt;p&gt;Video Duplicate Finder is a cross-platform software to find duplicated video (and image) files on hard disk based on similiarity. That means unlike other duplicate finders this one does also finds duplicates which have a different resolution, frame rate and even watermarked.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform&lt;/li&gt; &#xA; &lt;li&gt;Fast scanning speed&lt;/li&gt; &#xA; &lt;li&gt;Ultra fast rescan&lt;/li&gt; &#xA; &lt;li&gt;Optional calling ffmpeg functions natively for even more speed&lt;/li&gt; &#xA; &lt;li&gt;Finds duplicate videos / images based on similarity (new: optional scan against pHash at zero cost)&lt;/li&gt; &#xA; &lt;li&gt;Windows, Linux and MacOS GUI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Binaries&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0x90d/videoduplicatefinder/releases/tag/3.0.x&#34;&gt;Daily build&lt;/a&gt; (You need to download FFmpeg and FFprobe yourself, see below! Please note the attachments of this release are automatically created and replaced on every new commit.)&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;h4&gt;FFmpeg &amp;amp; FFprobe:&lt;/h4&gt; &#xA;&lt;p&gt;Native ffmpeg binding works only with a specific ffmpeg version. Never use master version. Currently it works with ffmpeg 7.x (might change)&lt;/p&gt; &#xA;&lt;h4&gt;Windows user:&lt;/h4&gt; &#xA;&lt;p&gt;Get latest package from &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;https://ffmpeg.org/download.html&lt;/a&gt; I recommend the full (GPL) shared version. If you want to use native ffmpeg binding you &lt;strong&gt;must&lt;/strong&gt; use the shared version.&lt;/p&gt; &#xA;&lt;p&gt;Extract ffmpeg and ffprobe into the same directory of VDF.GUI.dll or into a sub folder called &lt;code&gt;bin&lt;/code&gt;. Or make sure it can be found in &lt;code&gt;PATH&lt;/code&gt; system environment variable&lt;/p&gt; &#xA;&lt;h4&gt;Linux user:&lt;/h4&gt; &#xA;&lt;p&gt;Installing ffmpeg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open terminal in VDF folder and execute &lt;code&gt;./VDF.GUI&lt;/code&gt; You may need to set execute permission first &lt;code&gt;sudo chmod 777 VDF.GUI&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;MacOS user:&lt;/h4&gt; &#xA;&lt;p&gt;Install ffmpeg / ffprobe using homebrew&lt;/p&gt; &#xA;&lt;p&gt;Open terminal in VDF folder and execute &lt;code&gt;./VDF.GUI&lt;/code&gt; or if you have .NET installed &lt;code&gt;dotnet VDF.GUI.dll&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may get a permission error. Open system settings of your Mac, go to &lt;code&gt;Privacy &amp;amp; Security&lt;/code&gt; and then &lt;code&gt;Developer Tools&lt;/code&gt;. Now add &lt;code&gt;Terminal&lt;/code&gt; to the list.&lt;/p&gt; &#xA;&lt;p&gt;If the process is immediately killed (something like &lt;code&gt;zsh: killed&lt;/code&gt;), the binary likely needs to be signed. Run &lt;code&gt;codesign --force --sign - ./VDF.GUI&lt;/code&gt; and try again.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots (slightly outdated)&lt;/h1&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/46010672/129763067-8855a538-4a4f-4831-ac42-938eae9343bd.png&#34; width=&#34;510&#34; /&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Video Duplicate Finder is licensed under GPLv3&lt;/p&gt; &#xA;&lt;h1&gt;Credits / Third Party&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AvaloniaUI/Avalonia&#34;&gt;Avalonia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Actipro/Avalonia-Controls&#34;&gt;ActiPro Avalonia Controls (Free Edition)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ruslan-B/FFmpeg.AutoGen&#34;&gt;FFmpeg.AutoGen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/protobuf-net/protobuf-net&#34;&gt;protobuf-net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SixLabors/ImageSharp&#34;&gt;SixLabors.ImageSharp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET 9.x&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio 2022 is recommended&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Committing&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a pull request for each addition or fix - do NOT merge them into one PR&lt;/li&gt; &#xA; &lt;li&gt;Unless it refers to an existing issue, write into your pull request what it does&lt;/li&gt; &#xA; &lt;li&gt;For larger PRs I recommend you create an issue for discussion first&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>builtbybel/CrapFixer</title>
    <updated>2025-08-24T01:42:16Z</updated>
    <id>tag:github.com,2025-08-24:/builtbybel/CrapFixer</id>
    <link href="https://github.com/builtbybel/CrapFixer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cr*ap Fixer&lt;/p&gt;&lt;hr&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&#xA; &lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;it&#39;s called CrapFixer. let that clean inüßΩ&lt;a href=&#34;https://t.co/UP2iLnAgif&#34;&gt;https://t.co/UP2iLnAgif&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/CrapFixer?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#CrapFixer&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Windows?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Windows&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Windows11?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Windows11&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/app?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#app&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/microsoft?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#microsoft&lt;/a&gt; &lt;a href=&#34;https://t.co/OMruEjvuUb&#34;&gt;pic.twitter.com/OMruEjvuUb&lt;/a&gt;&lt;/p&gt;‚Äî Belim (@builtbybel) &#xA; &lt;a href=&#34;https://twitter.com/builtbybel/status/1917594071582773272?ref_src=twsrc%5Etfw&#34;&gt;April 30, 2025&lt;/a&gt;&#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Crap Füßºxer ‚Äì Fixes the crap Windows leaves behind.&lt;/h1&gt; &#xA;&lt;h2&gt;The tool that says what everyone&#39;s thinking&lt;/h2&gt; &#xA;&lt;p&gt;Remember the days when you&#39;d run a registry cleaner even if you didn&#39;t really need it? (Or maybe we did need it? I was probably too young to figure that out - too young for that crap üòÖ) &lt;br /&gt;Back then, cleaner tools like CCleaner were everywhere; it felt like every other tech forum had a &#34;top 10 Windows Optimizers&#34; list.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;d think that stuff would be over by now with sleek, modern OSes like Windows 11. Well... the built-in Windows cleaner might be enough, sure. &lt;br /&gt;But instead, the &#34;modern OS&#34; blesses us with a whole new batch of problems: ads in the Start menu, creepy data collection, and preinstalled junk apps you didn&#39;t ask for and can&#39;t easily remove. &lt;br /&gt;It&#39;s kind of wild that we still need tools like this in 2025. And they don&#39;t even sound that different - like this one here: CrapFixer. &lt;br /&gt;What can I say? The tech world is a bitch.&lt;/p&gt; &#xA;&lt;p&gt;This is my personal little IT toolbox that I&#39;ve been using for years to clean up and tweak Windows systems I work on. The tool is about 7 years old, but I&#39;ve given the codebase a full refresh, especially tuned for Windows 11 (works on W10 too). I&#39;ve also removed most of the old enterprise scripts, so what you&#39;re seeing now is a lightweight, easy-to-use, and safe app. Almost every change you make can be undone, so you can tweak without fear.&lt;/p&gt; &#xA;&lt;p&gt;CrapFixer still looks like something straight out of the Windows XP era (maybe Crap Cleaner üòÑ) - and honestly, that&#39;s exactly the vibe I was going for. Sometimes simple just beats fancy. Two clicks: &#39;Analyze&#39;, check the results, &#39;Fix&#39; - done. No drama, no bloat.&lt;/p&gt; &#xA;&lt;p&gt;While cleaning up my GitHub (30+ repos down to 20 now), I also cleaned up thousands of lines of old code. Some projects come and go, but CrapFixer stays. It&#39;s fast, simple, and basically bulletproof. I haven&#39;t managed to break anything yet. üòâ &lt;br /&gt;If you like old-school tools that just work, you&#39;re gonna feel right at home. &lt;br /&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/cff37456-5676-4e3a-85a7-0c71e39e2bd0&#34; alt=&#34;CrapFixer&#34; /&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üí¨ A personal note from the developer&lt;/summary&gt; &#xA; &lt;p&gt;If you&#39;re curious about the personal story behind this project and others... üëâ &lt;a href=&#34;https://github.com/Belim/support/raw/main/STORY.md&#34;&gt;Read the full story here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ How to Use CrapFixer&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Launch the Tool&lt;/strong&gt;&lt;br /&gt; All optimization options are enabled by default ‚Äì no need to tweak anything.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Analyze Your System&lt;/strong&gt;&lt;br /&gt; Click &lt;strong&gt;&#34;Analyze&#34;&lt;/strong&gt; to scan your system based on the selected settings.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Red&lt;/strong&gt; items = Recommended fixes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Gray&lt;/strong&gt; items = Already optimized&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Apply Fixes&lt;/strong&gt;&lt;br /&gt; Smash the &lt;strong&gt;&#34;Run Fixer&#34;&lt;/strong&gt; button to apply the recommended tweaks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Tip:&lt;/strong&gt; To view what a tweak does you can &lt;strong&gt;Right-Click&lt;/strong&gt; on an item and select &lt;strong&gt;Help&lt;/strong&gt; or hit &lt;strong&gt;F1&lt;/strong&gt;.&lt;br /&gt; The help system also includes an online lookup that will search the tweak online for you.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;üîç Optional: Review the Log&lt;/strong&gt;&lt;br /&gt; Still unsure about the results?&lt;br /&gt; ‚Üí Upload your log to the &lt;a href=&#34;https://builtbybel.github.io/CrapFixer/log-analyzer/index.html&#34;&gt;Online Log Analyzer&lt;/a&gt;&lt;br /&gt; ‚Üí Get a breakdown of the changes&lt;br /&gt; ‚Üí Share the link for feedback if needed&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Tip:&lt;/strong&gt; For full functionality, run CrapFixer as &lt;strong&gt;Administrator&lt;/strong&gt;.&lt;br /&gt; Some fixes (like registry edits under &lt;code&gt;HKEY_LOCAL_MACHINE&lt;/code&gt;) need elevated permissions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚òï Motivation ‚âà Caffeine&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;CrapFixer&lt;/strong&gt; is my newest ‚Äî and likely last ‚Äî fine-tuning app for Windows.&lt;br /&gt; I&#39;m committed to keeping it alive for the long haul, and future development will be powered by &lt;strong&gt;voluntary donations&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° Every coffee-sized tip not only fuels new features ‚Äî&lt;br /&gt; it also lowers the risk of &lt;em&gt;me&lt;/em&gt; throwing a personal &lt;strong&gt;Blue Screen of Death&lt;/strong&gt;. üòµ‚Äçüí´&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üôè Support My Work&lt;/h3&gt; &#xA;&lt;p&gt;If you like CrapFixer, consider keeping it caffeinated:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?hosted_button_id=M9DW4VNKH9ECQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-0070BA?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;Donate via PayPal&#34; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a href=&#34;https://ko-fi.com/builtbybel&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ko%E2%80%93fi-F16061?style=for-the-badge&amp;amp;logo=ko-fi&amp;amp;logoColor=white&#34; alt=&#34;Support on Ko‚Äëfi&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you for keeping the lights on!&lt;/strong&gt; ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest release from my &lt;a href=&#34;https://github.com/builtbybel/CrapFixer/releases&#34;&gt;releases page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the archive&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build Instructions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Visual Studio 2022+ with .NET Desktop workload&lt;/li&gt; &#xA; &lt;li&gt;(Optional but recommended) Windows 8.1+ SDK for WinRT support&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/builtbybel/CFixer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open the solution or run: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Debug build: msbuild CFixer.sln /p:Configuration=Debug&lt;/li&gt; &#xA;   &lt;li&gt;Release build: msbuild CFixer.sln /p:Configuration=Release&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è This project uses the Windows.Management.Deployment API, which is part of WinRT. Classic .NET Framework. WinForms projects do not support this out of the box. To build the project successfully, you must manually add a reference to the Windows.winmd metadata file. Add Reference to &lt;code&gt;C:\Program Files (x86)\Windows Kits\8.1\References\CommonConfiguration\Neutral\Annotated\Windows.winmd&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Build with Visual Studio (GUI)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open CFixer.sln&lt;/li&gt; &#xA; &lt;li&gt;Set the configuration to Release | Any CPU&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;Ctrl + Shift + B&lt;/code&gt; or use Build ‚Üí Build Solution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After building, you can find the executable in the &lt;code&gt;./bin/Debug/CFixer.exe&lt;/code&gt; or &lt;code&gt;./bin/Release/CFixer.exe&lt;/code&gt; folder inside the project directory. Run CFixer.exe to start the app.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 11 (Recommended)&lt;/li&gt; &#xA; &lt;li&gt;Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Administrator privileges required for full functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/builtbybel/CrapFixer/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>