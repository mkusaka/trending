<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-25T01:38:01Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>greenshot/greenshot</title>
    <updated>2025-05-25T01:38:01Z</updated>
    <id>tag:github.com,2025-05-25:/greenshot/greenshot</id>
    <link href="https://github.com/greenshot/greenshot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Greenshot for Windows - Report bugs &amp; features go here: https://greenshot.atlassian.net or look for information on:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Greenshot - a free screenshot tool optimized for productivity&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the source repository for Greenshot&lt;/p&gt; &#xA;&lt;h2&gt;What is Greenshot?&lt;/h2&gt; &#xA;&lt;p&gt;Greenshot is a light-weight screenshot software tool for Windows with the following key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickly create screenshots of a selected region, window or fullscreen; you can even capture complete (scrolling) web pages from Internet Explorer.&lt;/li&gt; &#xA; &lt;li&gt;Easily annotate, highlight or obfuscate parts of the screenshot.&lt;/li&gt; &#xA; &lt;li&gt;Export the screenshot in various ways: save to file, send to printer, copy to clipboard, attach to e-mail, send Office programs or upload to photo sites like Flickr or Picasa, and others. and a lot more options simplyfying creation of and work with screenshots every day.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Being easy to understand and configurable, Greenshot is an efficient tool for project managers, software developers, technical writers, testers and anyone else creating screenshots.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://getgreenshot.org/support/&#34;&gt;If you find that Greenshot saves you a lot of time and/or money, you are very welcome to support the development of this screenshot software.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository is for Greenshot 1.3, currently in development, but is the next planned release&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;You can find a list of all releases (stable and unstable) in the &lt;a href=&#34;https://github.com/greenshot/greenshot/releases&#34;&gt;Github releases&lt;/a&gt; or in the &lt;a href=&#34;https://getgreenshot.org/version-history/&#34;&gt;version history on our website&lt;/a&gt;. The &lt;a href=&#34;https://getgreenshot.org/downloads/&#34;&gt;downloads page on our website&lt;/a&gt; always links to the latest stable release.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/perfview</title>
    <updated>2025-05-25T01:38:01Z</updated>
    <id>tag:github.com,2025-05-25:/microsoft/perfview</id>
    <link href="https://github.com/microsoft/perfview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PerfView is a CPU and memory performance-analysis tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PerfView Overview&lt;/h1&gt; &#xA;&lt;p&gt;PerfView is a free performance-analysis tool that helps isolate CPU and memory-related performance issues. It is a Windows tool, but it also has some support for analyzing data collected on Linux machines. It works for a wide variety of scenarios, but has a number of special features for investigating performance issues in code written for the .NET runtime.&lt;/p&gt; &#xA;&lt;p&gt;If you are unfamiliar with PerfView, there are &lt;a href=&#34;http://channel9.msdn.com/Series/PerfView-Tutorial&#34;&gt;PerfView video tutorials&lt;/a&gt;. Also, &lt;a href=&#34;https://docs.microsoft.com/en-us/archive/blogs/vancem/&#34;&gt;Vance Morrison&#39;s blog&lt;/a&gt; gives overview and getting started information.&lt;/p&gt; &#xA;&lt;h3&gt;Getting PerfView&lt;/h3&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/Downloading.md&#34;&gt;PerfView Download Page&lt;/a&gt; for the link and instructions for downloading the current version of PerfView.&lt;/p&gt; &#xA;&lt;p&gt;PerfView requires .NET Framework 4.7.2 or later, which is widely available for all supported versions of Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Are you here about the TraceEvent Library?&lt;/h3&gt; &#xA;&lt;p&gt;PerfView is built on a library called Microsoft.Diagnostics.Tracing.TraceEvent, that knows how to both collect and parse Event Tracing for Windows (ETW) and EventPipe (.NET Core trace) data. Thus if there is any information that PerfView collects and processes that you would like to manipulate yourself programmatically, you would probably be interested in the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/TraceEvent/TraceEventLibrary.md&#34;&gt;TraceEvent Library Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Not Sure if you should use PerfView or TraceEvent?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/Scenarios.md&#34;&gt;scenarios&lt;/a&gt; document to determine which is the best choice for what you&#39;re trying to do.&lt;/p&gt; &#xA;&lt;h3&gt;Learning about PerfView&lt;/h3&gt; &#xA;&lt;p&gt;The PerfView User&#39;s Guide is part of the application itself. In addition, you can click the &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/Microsoft/perfview/raw/main/src/PerfView/SupportFiles/UsersGuide.htm&#34;&gt;Users Guide link&lt;/a&gt; to see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/src/PerfView/SupportFiles/UsersGuide.htm&#34;&gt;GitHub HTML Source File&lt;/a&gt; rendered in your browser. You can also simply download PerfView using the instructions above and select the Help -&amp;gt; User&#39;s Guide menu item.&lt;/p&gt; &#xA;&lt;h3&gt;Asking Questions / Reporting Bugs&lt;/h3&gt; &#xA;&lt;p&gt;When you have question about PerfView, your first reaction should be to search the Users Guide (Help -&amp;gt; User&#39;s Guide) and see if you can find the answer already. If that does not work you can ask a question by creating a &lt;a href=&#34;https://github.com/Microsoft/perfview/issues/new&#34;&gt;new PerfView Issue&lt;/a&gt;. State your question succinctly in the title, and if necessary give details in the body of the issue, there is an issue tag called &#39;question&#39; that you should use as well that marks your issue as a question rather than some bug report. If the question is specific to a particular trace (*.ETL.ZIP file) you can drag that file onto the issue and it will be downloaded. This allows those watching for issues to reproduce your environment and give much more detailed and useful answers.&lt;/p&gt; &#xA;&lt;p&gt;Note that once you have your question answered, if the issue is likely to be common, you should strongly consider updating the documentation to include the information. The documentation is pretty much just one file &lt;a href=&#34;https://github.com/Microsoft/perfview/raw/main/src/PerfView/SupportFiles/UsersGuide.htm&#34;&gt;https://github.com/Microsoft/perfview/blob/main/src/PerfView/SupportFiles/UsersGuide.htm&lt;/a&gt;. You will need to clone the repository and create a pull request (see &lt;a href=&#34;https://github.com/Microsoft/perfview/raw/main/documentation/OpenSourceGitWorkflow.md&#34;&gt;OpenSourceGitWorkflow&lt;/a&gt; for instructions for setting up and creating a pull request.&lt;/p&gt; &#xA;&lt;p&gt;Reporting bugs works pretty much the same way as asking a question. It is very likely that you will want to include the *.ETL.ZIP file needed to reproduce the problem as well as any steps and the resulting undesirable behavior.&lt;/p&gt; &#xA;&lt;h1&gt;Building PerfView Yourself&lt;/h1&gt; &#xA;&lt;p&gt;If you just want to do a performance investigation, you don&#39;t need to build PerfView yourself. Just use the one from the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/Downloading.md&#34;&gt;PerfView Download Page&lt;/a&gt;. However if you want new features or just want to contribute to PerfView to make it better (see &lt;a href=&#34;https://github.com/Microsoft/perfview/issues&#34;&gt;issues&lt;/a&gt; for things people want) you can do that by following the rest of these instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Tools Needed to Build PerfView&lt;/h3&gt; &#xA;&lt;p&gt;The only tool you need to build PerfView is Visual Studio 2022. The &lt;a href=&#34;https://www.visualstudio.com/vs/community/&#34;&gt;Visual Studio 2022 Community Edition&lt;/a&gt; can be downloaded &lt;em&gt;for free&lt;/em&gt; and has everything you need to fetch PerfView from GitHub, build and test it. We expect you to download Visual Studio 2022 Community Edition if you don&#39;t already have Visual Studio 2022.&lt;/p&gt; &#xA;&lt;p&gt;In your installation of Visual Studio, you need to ensure you have the following workloads and components installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;.NET desktop development&lt;/strong&gt; workload with all default components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Desktop development with C++&lt;/strong&gt; workload with all default components plus the latest Windows 10 SDK. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Windows 10 SDK is not enabled by default in this workload, so you will need to check the box for it to be installed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MSVC v143 - VS 2022 C++ x64/x86 Spectre-mitigated libs (Latest)&lt;/strong&gt; component. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This can be found under the &#39;Individual Components&#39; tab.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;code&gt;.vsconfig&lt;/code&gt; file is included in the root of the repository that can be used to install the necessary components. When opening the solution in Visual Studio, it will prompt you to install any components that it thinks are missing from your installation. Alternatively, you can &lt;a href=&#34;https://learn.microsoft.com/en-us/visualstudio/install/import-export-installation-configurations?view=vs-2022#import-a-configuration&#34;&gt;import the &lt;code&gt;.vsconfig&lt;/code&gt; in the Visual Studio Installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you get any errors compiling the ETWClrCompiler projects, it is likely because you either don&#39;t have the Windows 10 SDK installed, or you don&#39;t have the spectre-mitigated libs installed. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/#information-for-build-troubleshooting&#34;&gt;troubleshooting section&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Cloning the PerfView GitHub Repository.&lt;/h3&gt; &#xA;&lt;p&gt;The first step in getting started with the PerfView source code is to clone the PerfView GitHub repository. If you are already familiar with how GIT, GitHub, and Visual Studio 2022 GIT support works, then you can skip this section. However, if not, the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/SettingUpRepoInVS.md&#34;&gt;Setting up a Local GitHub repository with Visual Studio 2022&lt;/a&gt; document will lead you through the basics of doing this. All it assumes is that you have Visual Studio 2022 installed.&lt;/p&gt; &#xA;&lt;h3&gt;How to Build and Debug PerfView&lt;/h3&gt; &#xA;&lt;p&gt;PerfView is developed in Visual Studio 2022 using features through C# 7.3.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The solution file is PerfView.sln. Opening this file in Visual Studio (or double clicking on it in the Windows Explorer) and selecting Build -&amp;gt; Build Solution, will build it. You can also build the non-debug version from the command line using msbuild or the build.cmd file at the base of the repository. The build follows standard Visual Studio conventions, and the resulting PerfView.exe file ends up in src/PerfView/bin/&lt;em&gt;BuildType&lt;/em&gt;/PerfView.exe. You need only deploy this one EXE to use it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The solution consists of several projects, representing support DLLs and the main EXE. To run PerfView in the debugger &lt;strong&gt;you need to make sure that the &#39;Startup Project&#39; is set to the &#39;PerfView&#39; project&lt;/strong&gt; so that it launches the main EXE. If the PerfView project in the Solution Explorer (on the right) is not bold, right click on the PerfView project and select &#39;Set as Startup Project&#39;. After doing this &#39;Start Debugging&#39; (F5) should work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploying your new version of Perfview&lt;/h3&gt; &#xA;&lt;p&gt;You will want to deploy the &#39;Release&#39; rather than the &#39;Debug&#39; version of PerfView. Thus, first set your build configuration to &#39;Release&#39; (Text window in the top toolbar, or right click on the .SLN file -&amp;gt; Configuration Manager -&amp;gt; Active Solution Configuration). Next build (Build -&amp;gt; Build Solution (Ctrl-Shift-B)). The result will be that in the src\perfView\bin\net462\Release directory there will be among other things a PerfView.exe. This one file is all you need to deploy. Simply copy it to where you wish to deploy the app.&lt;/p&gt; &#xA;&lt;h3&gt;Information for build troubleshooting.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;One of the unusual things about PerfView is that it incorporates its support DLLs into the EXE itself, and these get unpacked on first launch. This means that there are tricky dependencies in the build that are not typical. You will see errors that certain DLLs can&#39;t be found if there were build problems earlier in the build. Typically you can fix this simply by doing a normal (non-clean) build, since the missing file will be present from the last compilation. If this does not fix things, see if the DLL being looked for actually exists (if it does, then rebuilding should fix it). It can make sense to go down the projects one by one and build them individually to see which one fails &#39;first&#39;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Another unusual thing about PerfView is that it includes an extension mechanism complete with samples. This extensions mechanism is the &#39;Global&#39; project (called that because it is the Global Extension whose commands don&#39;t have an explicit &#39;scope&#39;) and needs to refer to PerfView to resolve some of its references. Thus you will get many &#39;not found&#39; issues in the &#39;Global&#39; project. These can be ignored until you get every other part of the build working.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;One of the invariants of the repo is that if you are running Visual Studio 2022 and you simply sync and build the PerfView.sln file, it is supposed to &#39;just work&#39;. If that does not happen, and the advice above does not help, then we need to either fix the repo or update the advice above. Thus it is reasonable to open a GitHub issue. If you do this, the goal is to fix the problem, which means you have to put enough information into the issue to do that. This includes exactly what you tried, and what the error messages were.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also build PerfView from the command line (but you still need Visual Studio 2022 installed). It is a two step process. First you must restore all the needed nuget packages, then you do the build itself. To do this:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Open a developer command prompt. You can do this by hitting the windows key (by the space bar) and type &#39;Developer command prompt&#39;. You should see a entry for this that you can select (if Visual Studio 2022 is installed).&lt;/li&gt; &#xA;   &lt;li&gt;Change directory to the base of your PerfView source tree (where PerfView.sln lives).&lt;/li&gt; &#xA;   &lt;li&gt;Restore the nuget packages by typing the command &#39;msbuild /t:restore&#39;&lt;/li&gt; &#xA;   &lt;li&gt;Build perfView by typing the command &#39;msbuild&#39;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you get an error &#34;MSB8036: The Windows SDK version 10.0.17763.0 was not found&#34;, Or you get a &#39;assert.h&#39; not found error, or frankly any error associated with building the ETWClrProfiler dlls, you should make sure that you have the Windows 10 SDK installed. Unfortunately this library tends not to be installed with Visual Studio anymore unless you ask for it explicitly. To fix it launch the Visual Studio Installer, modify the installation, and then look under the C++ Desktop Development and check that the Windows SDK 10.0.17763.0 option is selected. If not, select it and continue. Then try building PerfView again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you get an error &#34;MSB8040: Spectre-mitigated libraries are required for this project&#34;, modify your Visual Studio installation to ensure that you have the &#39;MSVC v143 - VS 2022 C++ x64/x86 Spectre-mitigated libs (Latest)&#39; component installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;PerfView has a number of *.Test projects that have automated tests. They can be run in Visual Studio by selecting the Test -&amp;gt; Run -&amp;gt; All Tests menu item. For the most thorough results (and certainly if you intend to submit changes) you need to run these tests with a Debug build of the product (see the text window in the top toolbar, it says &#39;Debug&#39; or &#39;Release&#39;). If tests fail you can right click on the failed test and select the &#39;Debug&#39; context menu item to run the test under the debugger to figure out what went wrong.&lt;/p&gt; &#xA;&lt;h3&gt;Check in testing and code coverage statistica&lt;/h3&gt; &#xA;&lt;p&gt;This repository uses Azure DevOps to automatically build and test pull requests, which allows the community to easily view build results. The build and status reflected here is the Azure DevOps build status of the &lt;strong&gt;main&lt;/strong&gt; branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/dnceng-public/public/_build/latest?definitionId=294&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng-public/public/_apis/build/status%2Fmicrosoft.perfview?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Builds produced by Azure DevOps CI are not considered official builds of PerfView, and are not signed or otherwise validated for safety or security in any way. This build integration is provided as a convenience for community participants, but is not endorsed by Microsoft nor is it considered an official release channel in any way. For information about official builds, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/Downloading.md&#34;&gt;PerfView Download Page&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Contributing to PerfView&lt;/h3&gt; &#xA;&lt;p&gt;You can get a lot of value out of the source code base simply by being able to build the code yourself, debug through it or make a local, specialized feature, but the real power of open source software happens when you contribute back to the shared code base and thus help the community as a whole. &lt;strong&gt;While we encourage this it requires significantly more effort on your part&lt;/strong&gt;. If you are interested in stepping up, see the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/CONTRIBUTING.md&#34;&gt;PerfView Contribution Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/perfview/main/documentation/CodingStandards.md&#34;&gt;PerfView Coding Standards&lt;/a&gt; before you start.&lt;/p&gt; &#xA;&lt;h3&gt;Code Organization&lt;/h3&gt; &#xA;&lt;p&gt;The code is broken into several main sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PerfView - GUI part of the application &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;StackViewer - GUI code for any view with the &#39;stacks&#39; suffix&lt;/li&gt; &#xA;   &lt;li&gt;EventViewer - GUI code for the &#39;events&#39; view window&lt;/li&gt; &#xA;   &lt;li&gt;Dialogs - GUI code for a variety of small dialog boxes (although the CollectingDialog is reasonably complex)&lt;/li&gt; &#xA;   &lt;li&gt;Memory - Contains code for memory investigations, in particular it defines &#39;Graph&#39; and &#39;MemoryGraph&#39; which are used to display node-arc graphs (e.g. GC heaps)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;TraceEvent - Library that understands how to decode Event Tracing for Windows (ETW) which is used to actually collect the data for many investigations&lt;/li&gt; &#xA; &lt;li&gt;MainWindow - GUI code for the window that is initially launched (lets you select files or collect new data)&lt;/li&gt; &#xA; &lt;li&gt;ETWClrProfiler* - There are two projects that build the same source either 32 or 64 bit. This is (the only) native code project in PerfView, and implements the CLR Profiler API and emits ETW events. It is used to trace object allocation stacks and .NET method calls.&lt;/li&gt; &#xA; &lt;li&gt;HeapDump* There are 32 and 64 bit versions of this project. These make standalone executables that can dump the GC heap using Microsoft.Diagnostics.Runtime APIs. This allows getting heap dumps from debugger process dumps.&lt;/li&gt; &#xA; &lt;li&gt;Global - An example of using PerfView&#39;s extensibility mechanism&lt;/li&gt; &#xA; &lt;li&gt;CSVReader - old code that lets PerfView read .ETL.CSV files generated by XPERF (probably will delete)&lt;/li&gt; &#xA; &lt;li&gt;Zip - a clone of System.IO.Compression.dll so that PerfView can run on pre v4.5 runtimes (probably will delete)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/ai-dev-gallery</title>
    <updated>2025-05-25T01:38:01Z</updated>
    <id>tag:github.com,2025-05-25:/microsoft/ai-dev-gallery</id>
    <link href="https://github.com/microsoft/ai-dev-gallery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source project for Windows developers to learn how to add AI with local models and APIs to Windows apps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/ai-dev-gallery/main/docs/images/header.png&#34; alt=&#34;WindowsAI hero image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; AI Dev Gallery (Preview) &lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; The AI Dev Gallery is currently in public preview, and we’d love your feedback! Share your thoughts by creating an &lt;a href=&#34;https://github.com/microsoft/ai-dev-gallery/issues?q=sort%3Aupdated-desc+is%3Aissue+is%3Aopen&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Designed for Windows developers, the AI Dev Gallery helps integrate AI capabilities into apps and projects. It includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explore over 25 interactive samples powered by local AI models&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easily browse, download, and run models from Hugging Face and GitHub&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;View the C# source code and export standalone Visual Studio projects with a single click&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/microsoft/ai-dev-gallery/main/docs/images/HeroImage1.png&#34; alt=&#34;AI Dev Gallery&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://aka.ms/ai-dev-gallery-store&#34;&gt; &lt;img alt=&#34;Store badge&#34; src=&#34;https://raw.githubusercontent.com/microsoft/ai-dev-gallery/main/docs/images/storeBadge.png&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🚀 Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;http://aka.ms/ai-dev-gallery-store&#34;&gt;AI Dev Gallery from the Microsoft Store&lt;/a&gt; or follow these steps to install it manually:&lt;/p&gt; &#xA;&lt;h3&gt;1. Set up the environment&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Note&lt;/strong&gt;: AI Dev Gallery requires &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;Visual Studio 2022&lt;/a&gt; or later for building and Windows 10 or newer to run. If you&#39;re new to building apps with WinUI and the Windows App SDK, follow the &lt;a href=&#34;https://learn.microsoft.com/windows/apps/get-started/start-here&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Required &lt;a href=&#34;https://learn.microsoft.com/windows/apps/get-started/start-here?tabs=vs-2022-17-10#required-workloads-and-components&#34;&gt;Visual Studio components&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows application development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Clone the repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/microsoft/AI-Dev-Gallery.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Open AIDevGallery.sln with Visual Studio!&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that the &lt;code&gt;AIDevGallery&lt;/code&gt; project is set as the startup project in Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Press &lt;kbd&gt;F5&lt;/kbd&gt; to run AI Dev Gallery!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Note&lt;/strong&gt;: On ARM64-based Copilot+ PCs, make sure to build and run the solution as &lt;code&gt;ARM64&lt;/code&gt; (and not as &lt;code&gt;x64&lt;/code&gt;). This is required especially when running the samples that invoke the Windows Copilot Runtime to communicate with models such as Phi Silica.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Note&lt;/strong&gt;: Having issues installing the app on your machine? Let us know by &lt;a href=&#34;https://github.com/microsoft/AI-Dev-Gallery/issues&#34;&gt;opening an issue &lt;/a&gt; and our team will do our best to help!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;💻 Device requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimum OS version&lt;/strong&gt;: Windows 10, version 1809 (10.0; Build 17763)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Architecture&lt;/strong&gt;: x64, ARM64&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: At least 16 GB is recommended&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Disk space&lt;/strong&gt;: At least 20GB free space is recommended&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GPU&lt;/strong&gt;: 8GB of VRAM is recommended for running samples on the GPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👏 Contribute to AI Dev Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Any samples or docs improvements you&#39;d like to see? We&#39;re always looking for a helping hand. Feel free to &lt;a href=&#34;https://github.com/microsoft/AI-Dev-Gallery/issues&#34;&gt;open an issue &lt;/a&gt; to start the discussion, or even better, create a PR with the change you&#39;d like to see!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;❓ FAQs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: Is a Microsoft account necessary to use the app?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; No, the app does NOT require a Microsoft account for use.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: Can I use the app without an internet connection?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes, the app works offline since the AI models are downloaded locally. However, you will need to be online to download additional AI models from Hugging Face or GitHub.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: What AI models are available in the app?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; The app features popular open source models and will eventually include APIs from the &lt;a href=&#34;https://learn.microsoft.com/windows/ai/overview&#34;&gt;Windows Copilot Runtime&lt;/a&gt;. When executing a sample, you can select which model you want to use.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: Is the app&#39;s source code accessible? Can I contribute new samples?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes, the app is completely open-source, and its code is accessible on &lt;a href=&#34;https://github.com/microsoft/AI-Dev-Gallery&#34;&gt;GitHub&lt;/a&gt;. Feel free to contribute by &lt;a href=&#34;https://github.com/microsoft/AI-Dev-Gallery/issues&#34;&gt;filing an issue&lt;/a&gt;, or submitting a PR and one of our moderators will review it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: Where can I provide feedback?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; Feel free to give us feedback or &lt;a href=&#34;https://github.com/microsoft/AI-Dev-Gallery/issues/new&#34;&gt;open an issue&lt;/a&gt; on our GitHub repository.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Q: Do I need to run the app just to try a single sample?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes, the app is required to run any sample. However, once you&#39;ve downloaded a model for a sample via the app, you can export the sample as a Visual Studio project and run it independently from there.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;✨ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;📚 Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;🔔 Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://github.com/microsoft/AI-Dev-Gallery/raw/main/CODE_OF_CONDUCT.md&#34;&gt; Microsoft Open Source Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;📢 Privacy Statement&lt;/h2&gt; &#xA;&lt;p&gt;The application logs basic telemetry. Please read the &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkId=521839&#34;&gt; Microsoft privacy statement&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>