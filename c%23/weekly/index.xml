<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:44:10Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>QuantConnect/Lean</title>
    <updated>2022-10-30T01:44:10Z</updated>
    <id>tag:github.com,2022-10-30:/QuantConnect/Lean</id>
    <link href="https://github.com/QuantConnect/Lean" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean Algorithmic Trading Engine by QuantConnect (Python, C#)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://cdn.quantconnect.com/web/i/20180601-1615-lean-logo-small.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/QuantConnect/Lean/actions?query=workflow%3A%22Build%20%26%20Test%20Lean%22&#34;&gt;&lt;img src=&#34;https://github.com/QuantConnect/Lean/workflows/Build%20%26%20Test%20Lean/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/QuantConnect/Lean/actions?query=workflow%3A%22Regression%20Tests%22&#34;&gt;&lt;img src=&#34;https://github.com/QuantConnect/Lean/workflows/Regression%20Tests/badge.svg?sanitize=true&#34; alt=&#34;Regression Tests&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.quantconnect.com/forum/discussions/1/lean&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/debug-LEAN%20Forum-53c82b.svg?sanitize=true&#34; alt=&#34;LEAN Forum&#34;&gt;&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.quantconnect.com/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-Slack-53c82b.svg?sanitize=true&#34; alt=&#34;Slack Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.lean.io/&#34; title=&#34;Lean Open Source Home Page&#34;&gt;Lean Home&lt;/a&gt; | &lt;a href=&#34;https://www.lean.io/docs/&#34; title=&#34;Lean Documentation&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/QuantConnect/Lean/archive/master.zip&#34;&gt;Download Zip&lt;/a&gt; | &lt;a href=&#34;https://hub.docker.com/orgs/quantconnect/repositories&#34;&gt;Docker Hub&lt;/a&gt; | &lt;a href=&#34;https://www.nuget.org/profiles/jaredbroad&#34;&gt;Nuget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Lean Engine is an open-source algorithmic trading engine built for easy strategy research, backtesting and live trading. We integrate with common data providers and brokerages so you can quickly deploy algorithmic trading strategies.&lt;/p&gt; &#xA;&lt;p&gt;The core of the LEAN Engine is written in C#; but it operates seamlessly on Linux, Mac and Windows operating systems. It supports algorithms written in Python 3.8 or C#. Lean drives the web-based algorithmic trading platform &lt;a href=&#34;https://www.quantconnect.com&#34; title=&#34;QuantConnect&#34;&gt;QuantConnect&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Proudly Sponsored By&lt;/h2&gt; &#xA;&lt;p&gt;Want your company logo here? &lt;a href=&#34;https://github.com/sponsors/QuantConnect&#34;&gt;Sponsor LEAN&lt;/a&gt; to be part of radically open algorithmic-trading innovation.&lt;/p&gt; &#xA;&lt;h2&gt;QuantConnect is Hiring!&lt;/h2&gt; &#xA;&lt;p&gt;Join the team and solve some of the most difficult challenges in quantitative finance. If you are passionate about algorithmic trading we&#39;d like to hear from you. The below roles are open in our Seattle, WA office. When applying, make sure to mention you came through GitHub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.getonbrd.com/jobs/programming/c-c-software-engineer-quantconnect-remote&#34;&gt;&lt;strong&gt;C# Engineer&lt;/strong&gt;&lt;/a&gt;: Contribute remotely to the core of LEAN through the open-source project LEAN.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.getonbrd.com/jobs/programming/full-stack-engineer-quantconnect-remote&#34;&gt;&lt;strong&gt;UX Developer&lt;/strong&gt;&lt;/a&gt;: Collaborate with QuantConnect to develop a world-leading online experience for a community of developers from all over the world.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/QuantConnect/Lean/master/Documentation/2-Overview-Detailed-New.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Engine is broken into many modular pieces which can be extended without touching other files. The modules are configured in config.json as set &#34;environments&#34;. Through these environments, you can control LEAN to operate in the mode required.&lt;/p&gt; &#xA;&lt;p&gt;The most important plugins are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Result Processing&lt;/strong&gt; (IResultHandler)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Handle all messages from the algorithmic trading engine. Decide what should be sent, and where the messages should go. The result processing system can send messages to a local GUI, or the web interface.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Datafeed Sourcing&lt;/strong&gt; (IDataFeed)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Connect and download the data required for the algorithmic trading engine. For backtesting this sources files from the disk, for live trading, it connects to a stream and generates the data objects.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transaction Processing&lt;/strong&gt; (ITransactionHandler)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Process new order requests; either using the fill models provided by the algorithm or with an actual brokerage. Send the processed orders back to the algorithm&#39;s portfolio to be filled.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Realtime Event Management&lt;/strong&gt; (IRealtimeHandler)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Generate real-time events - such as the end of day events. Trigger callbacks to real-time event handlers. For backtesting, this is mocked-up a works on simulated time.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Algorithm State Setup&lt;/strong&gt; (ISetupHandler)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Configure the algorithm cash, portfolio and data requested. Initialize all state parameters required.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are all configurable from the config.json file in the Launcher Project.&lt;/p&gt; &#xA;&lt;h2&gt;Developing with Visual Studio Code Dev Containers&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Dev Containers&lt;/a&gt; extension lets you use a Docker container as a full-featured development environment. The extension starts (or attaches to) a development container running the &lt;em&gt;quantconnect/research:latest&lt;/em&gt; image.&lt;/p&gt; &#xA;&lt;p&gt;A full explanation of developing Lean with Visual Studio Code Dev Containers can be found in the &lt;a href=&#34;https://github.com/QuantConnect/Lean/tree/master/.vscode#readme&#34;&gt;VS Code Integration&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;Developing with Lean CLI&lt;/h2&gt; &#xA;&lt;p&gt;QuantConnect recommends using &lt;a href=&#34;https://github.com/QuantConnect/lean-cli&#34;&gt;Lean CLI&lt;/a&gt; for local algorithm development. This is because it is a great tool for working with your algorithms locally while still being able to deploy to the cloud and have access to Lean data. It is also able to run algorithms on your local machine with your data through our official docker images.&lt;/p&gt; &#xA;&lt;p&gt;Reference QuantConnects documentation on Lean CLI &lt;a href=&#34;https://www.quantconnect.com/docs/v2/lean-cli/getting-started/lean-cli&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This section will cover how to install lean locally for you to use in your own environment.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the following readme files for a detailed guide regarding using your local IDE with Lean:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QuantConnect/Lean/master/.vscode/readme.md&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/QuantConnect/Lean/master/.vs/readme.md&#34;&gt;VS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install locally, download the zip file with the &lt;a href=&#34;https://github.com/QuantConnect/Lean/archive/master.zip&#34;&gt;latest master&lt;/a&gt; and unzip it to your favorite location. Alternatively, install &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt; and clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/QuantConnect/Lean.git&#xA;cd Lean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.visualstudio.com/vs/visual-studio-mac/&#34;&gt;Visual Studio for Mac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;QuantConnect.Lean.sln&lt;/code&gt; in Visual Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visual Studio will automatically start to restore the Nuget packages. If not, in the menu bar, click &lt;code&gt;Project &amp;gt; Restore NuGet Packages&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the menu bar, click &lt;code&gt;Run &amp;gt; Start Debugging&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, run the compiled &lt;code&gt;dll&lt;/code&gt; file. First, in the menu bar, click &lt;code&gt;Build &amp;gt; Build All&lt;/code&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Lean/Launcher/bin/Debug&#xA;dotnet QuantConnect.Lean.Launcher.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux (Debian, Ubuntu)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/install/linux&#34;&gt;dotnet 6&lt;/a&gt;:&lt;/li&gt; &#xA; &lt;li&gt;Compile Lean Solution:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet build QuantConnect.Lean.sln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Lean:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Launcher/bin/Debug&#xA;dotnet QuantConnect.Lean.Launcher.dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive Brokers set up details&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure you fix the &lt;code&gt;ib-tws-dir&lt;/code&gt; and &lt;code&gt;ib-controller-dir&lt;/code&gt; fields in the &lt;code&gt;config.json&lt;/code&gt; file with the actual paths to the TWS and the IBController folders respectively.&lt;/p&gt; &#xA;&lt;p&gt;If after all you still receive connection refuse error, try changing the &lt;code&gt;ib-port&lt;/code&gt; field in the &lt;code&gt;config.json&lt;/code&gt; file from 4002 to 4001 to match the settings in your IBGateway/TWS.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;QuantConnect.Lean.sln&lt;/code&gt; in Visual Studio&lt;/li&gt; &#xA; &lt;li&gt;Build the solution by clicking Build Menu -&amp;gt; Build Solution (this should trigger the Nuget package restore)&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;F5&lt;/code&gt; to run&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Python Support&lt;/h3&gt; &#xA;&lt;p&gt;A full explanation of the Python installation process can be found in the &lt;a href=&#34;https://github.com/QuantConnect/Lean/tree/master/Algorithm.Python#quantconnect-python-algorithm-project&#34;&gt;Algorithm.Python&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h3&gt;Local-Cloud Hybrid Development.&lt;/h3&gt; &#xA;&lt;p&gt;Seamlessly develop locally in your favorite development environment, with full autocomplete and debugging support to quickly and easily identify problems with your strategy. For more information please see the &lt;a href=&#34;https://www.quantconnect.com/cli&#34;&gt;CLI Home&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Issues and Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please submit bugs and feature requests as an issue to the &lt;a href=&#34;https://github.com/QuantConnect/Lean/issues&#34;&gt;Lean Repository&lt;/a&gt;. Before submitting an issue please read others to ensure it is not a duplicate.&lt;/p&gt; &#xA;&lt;h2&gt;Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;The mailing list for the project can be found on &lt;a href=&#34;https://www.quantconnect.com/forum/discussions/1/lean&#34;&gt;LEAN Forum&lt;/a&gt;. Please use this to request assistance with your installations and setup questions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors and Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are warmly very welcomed but we ask you to read the existing code to see how it is formatted, commented and ensure contributions match the existing style. All code submissions must include accompanying tests. Please see the &lt;a href=&#34;https://github.com/QuantConnect/Lean/raw/master/CONTRIBUTING.md&#34;&gt;contributor guide lines&lt;/a&gt;. All accepted pull requests will get a 2mo free Prime subscription on QuantConnect. Once your pull-request has been merged write to us at &lt;a href=&#34;mailto:support@quantconnect.com&#34;&gt;support@quantconnect.com&lt;/a&gt; with a link to your PR to claim your free live trading. QC &amp;lt;3 Open Source.&lt;/p&gt; &#xA;&lt;p&gt;A huge thank-you all our contributors! &lt;a href=&#34;https://github.com/QuantConnect/Lean/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=QuantConnect/Lean&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The open-sourcing of QuantConnect would not have been possible without the support of the Pioneers. The Pioneers formed the core 100 early adopters of QuantConnect who subscribed and allowed us to launch the project into open source.&lt;/p&gt; &#xA;&lt;p&gt;Ryan H, Pravin B, Jimmie B, Nick C, Sam C, Mattias S, Michael H, Mark M, Madhan, Paul R, Nik M, Scott Y, BinaryExecutor.com, Tadas T, Matt B, Binumon P, Zyron, Mike O, TC, Luigi, Lester Z, Andreas H, Eugene K, Hugo P, Robert N, Christofer O, Ramesh L, Nicholas S, Jonathan E, Marc R, Raghav N, Marcus, Hakan D, Sergey M, Peter McE, Jim M, INTJCapital.com, Richard E, Dominik, John L, H. Orlandella, Stephen L, Risto K, E.Subasi, Peter W, Hui Z, Ross F, Archibald112, MooMooForex.com, Jae S, Eric S, Marco D, Jerome B, James B. Crocker, David Lypka, Edward T, Charlie Guse, Thomas D, Jordan I, Mark S, Bengt K, Marc D, Al C, Jan W, Ero C, Eranmn, Mitchell S, Helmuth V, Michael M, Jeremy P, PVS78, Ross D, Sergey K, John Grover, Fahiz Y, George L.Z., Craig E, Sean S, Brad G, Dennis H, Camila C, Egor U, David T, Cameron W, Napoleon Hernandez, Keeshen A, Daniel E, Daniel H, M.Patterson, Asen K, Virgil J, Balazs Trader, Stan L, Con L, Will D, Scott K, Barry K, Pawel D, S Ray, Richard C, Peter L, Thomas L., Wang H, Oliver Lee, Christian L..&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dnSpy/dnSpy</title>
    <updated>2022-10-30T01:44:10Z</updated>
    <id>tag:github.com,2022-10-30:/dnSpy/dnSpy</id>
    <link href="https://github.com/dnSpy/dnSpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;.NET debugger and assembly editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dnSpy - &lt;a href=&#34;https://github.com/dnSpy/dnSpy/releases&#34;&gt;Latest release&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;dnSpy is a debugger and .NET assembly editor. You can use it to edit and debug assemblies even if you don&#39;t have any source code available. Main features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debug .NET and Unity assemblies&lt;/li&gt; &#xA; &lt;li&gt;Edit .NET and Unity assemblies&lt;/li&gt; &#xA; &lt;li&gt;Light and dark themes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See below for more features&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/images/debug-animated.gif&#34; alt=&#34;debug-animated&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/images/edit-code-animated.gif&#34; alt=&#34;edit-code-animated&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Binaries&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dnSpy/dnSpy/releases&#34;&gt;https://github.com/dnSpy/dnSpy/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PS&#34;&gt;git clone --recursive https://github.com/dnSpy/dnSpy.git&#xA;cd dnSpy&#xA;# or dotnet build&#xA;./build.ps1 -NoMsbuild&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug Unity games, you need this repo too: &lt;a href=&#34;https://github.com/dnSpy/dnSpy-Unity-mono&#34;&gt;https://github.com/dnSpy/dnSpy-Unity-mono&lt;/a&gt; (or get the binaries from &lt;a href=&#34;https://github.com/dnSpy/dnSpy/releases/unity&#34;&gt;https://github.com/dnSpy/dnSpy/releases/unity&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Debugger&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debug .NET Framework, .NET and Unity game assemblies, no source code required&lt;/li&gt; &#xA; &lt;li&gt;Set breakpoints and step into any assembly&lt;/li&gt; &#xA; &lt;li&gt;Locals, watch, autos windows&lt;/li&gt; &#xA; &lt;li&gt;Variables windows support saving variables (eg. decrypted byte arrays) to disk or view them in the hex editor (memory window)&lt;/li&gt; &#xA; &lt;li&gt;Object IDs&lt;/li&gt; &#xA; &lt;li&gt;Multiple processes can be debugged at the same time&lt;/li&gt; &#xA; &lt;li&gt;Break on module load&lt;/li&gt; &#xA; &lt;li&gt;Tracepoints and conditional breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Export/import breakpoints and tracepoints&lt;/li&gt; &#xA; &lt;li&gt;Call stack, threads, modules, processes windows&lt;/li&gt; &#xA; &lt;li&gt;Break on thrown exceptions (1st chance)&lt;/li&gt; &#xA; &lt;li&gt;Variables windows support evaluating C# / Visual Basic expressions&lt;/li&gt; &#xA; &lt;li&gt;Dynamic modules can be debugged (but not dynamic methods due to CLR limitations)&lt;/li&gt; &#xA; &lt;li&gt;Output window logs various debugging events, and it shows timestamps by default :)&lt;/li&gt; &#xA; &lt;li&gt;Assemblies that decrypt themselves at runtime can be debugged, dnSpy will use the in-memory image. You can also force dnSpy to always use in-memory images instead of disk files.&lt;/li&gt; &#xA; &lt;li&gt;Public API, you can write an extension or use the C# Interactive window to control the debugger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Assembly Editor&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All metadata can be edited&lt;/li&gt; &#xA; &lt;li&gt;Edit methods and classes in C# or Visual Basic with IntelliSense, no source code required&lt;/li&gt; &#xA; &lt;li&gt;Add new methods, classes or members in C# or Visual Basic&lt;/li&gt; &#xA; &lt;li&gt;IL editor for low-level IL method body editing&lt;/li&gt; &#xA; &lt;li&gt;Low-level metadata tables can be edited. This uses the hex editor internally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hex Editor&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click on an address in the decompiled code to go to its IL code in the hex editor&lt;/li&gt; &#xA; &lt;li&gt;The reverse of the above, press F12 in an IL body in the hex editor to go to the decompiled code or other high-level representation of the bits. It&#39;s great to find out which statement a patch modified.&lt;/li&gt; &#xA; &lt;li&gt;Highlights .NET metadata structures and PE structures&lt;/li&gt; &#xA; &lt;li&gt;Tooltips show more info about the selected .NET metadata / PE field&lt;/li&gt; &#xA; &lt;li&gt;Go to position, file, RVA&lt;/li&gt; &#xA; &lt;li&gt;Go to .NET metadata token, method body, #Blob / #Strings / #US heap offset or #GUID heap index&lt;/li&gt; &#xA; &lt;li&gt;Follow references (Ctrl+F12)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BAML decompiler&lt;/li&gt; &#xA; &lt;li&gt;Blue, light and dark themes (and a dark high contrast theme)&lt;/li&gt; &#xA; &lt;li&gt;Bookmarks&lt;/li&gt; &#xA; &lt;li&gt;C# Interactive window can be used to script dnSpy&lt;/li&gt; &#xA; &lt;li&gt;Search assemblies for classes, methods, strings, etc&lt;/li&gt; &#xA; &lt;li&gt;Analyze class and method usage, find callers, etc&lt;/li&gt; &#xA; &lt;li&gt;Multiple tabs and tab groups&lt;/li&gt; &#xA; &lt;li&gt;References are highlighted, use Tab / Shift+Tab to move to the next reference&lt;/li&gt; &#xA; &lt;li&gt;Go to the entry point and module initializer commands&lt;/li&gt; &#xA; &lt;li&gt;Go to metadata token or metadata row commands&lt;/li&gt; &#xA; &lt;li&gt;Code tooltips (C# and Visual Basic)&lt;/li&gt; &#xA; &lt;li&gt;Export to project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;List of other open source libraries used by dnSpy&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/icsharpcode/ILSpy&#34;&gt;ILSpy decompiler engine&lt;/a&gt; (C# and Visual Basic decompilers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; (C# and Visual Basic compilers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xd4d/dnlib&#34;&gt;dnlib&lt;/a&gt; (.NET metadata reader/writer which can also read obfuscated assemblies)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/vs-mef&#34;&gt;VS MEF&lt;/a&gt; (Faster MEF equals faster startup)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/clrmd&#34;&gt;ClrMD&lt;/a&gt; (Access to lower level debugging info not provided by the CorDebug API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xd4d/iced&#34;&gt;Iced&lt;/a&gt; (x86/x64 disassembler)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Translating dnSpy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://crowdin.com/project/dnspy&#34;&gt;Click here&lt;/a&gt; if you want to help with translating dnSpy to your native language.&lt;/p&gt; &#xA;&lt;h1&gt;Wiki&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/dnSpy/dnSpy/wiki&#34;&gt;Wiki&lt;/a&gt; for build instructions and other documentation.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;dnSpy is licensed under &lt;a href=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/dnSpy/dnSpy/LicenseInfo/GPLv3.txt&#34;&gt;GPLv3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dnSpy/dnSpy/master/dnSpy/dnSpy/LicenseInfo/CREDITS.txt&#34;&gt;Credits&lt;/a&gt;&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>proxysu/ProxySU</title>
    <updated>2022-10-30T01:44:10Z</updated>
    <id>tag:github.com,2022-10-30:/proxysu/ProxySU</id>
    <link href="https://github.com/proxysu/ProxySU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xray,V2ray，Trojan，NaiveProxy, Trojan-Go, ShadowsocksR(SSR),Shadowsocks-libev及相关插件,MTProto+TLS 一键安装工具，windows下用（一键科学上网）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ProxySU&lt;/h1&gt; &#xA;&lt;p&gt;V2ray, Xray, Trojan, NaiveProxy, Trojan-Go, MTProto Go, Brook,BBR install tools for windows。&lt;br&gt; V2ray，Xray, Trojan，NaiveProxy, Trojan-Go, MTProto Go, Brook 及相关插件。支持纯ipv6主机一键安装代理。&lt;br&gt; BBR一键开启（仅支持CentOS8/Debian9/10/Ubuntu18.04及以上）,支持语言:English、简体中文、正体（繁体）中文。&lt;/p&gt; &#xA;&lt;p&gt;编译环境Visual Studio 2019 使用WPF界面。可一键安装 V2ray/Xray, Shadowsocks, Trojan, Trojan-Go, NaiveProxy, MTProto Go, Brook 后续还会再添加其他。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/73510229/120171754-f46ffd00-c234-11eb-8105-4e6a941a65bb.jpg&#34; alt=&#34;photo_2021-05-31_17-23-29&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/73510229/120171966-297c4f80-c235-11eb-921a-2ddebad5dc58.jpg&#34; alt=&#34;photo_2021-05-31_17-24-29&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;免责声明：ProxySU属于自用分享工具，请勿用于违背良知与道德之事，否则后果自负。&lt;/h4&gt; &#xA;&lt;h4&gt;再次声明：&lt;/h4&gt; &#xA;&lt;h5&gt;ProxySU本着技术中立的原则，没有任何立场，也不持任何见解，更不涉及任何政治因素。ProxySU仅仅主张人的知情权，这是一项天赋人权，也是各国宪法所保障的最基本人权。知情权包含对同一事物正负两方面评价的知情，至于相信哪个，由人自己选择。正如李文亮医生临终所言：一个正常的社会是不应该只有一种声音的。如果真的存在对某一事物只有一种声音的评价，无论其评价是正面还是负面，都是要慎重对待，并需要重新审视的。&lt;/h5&gt; &#xA;&lt;h5&gt;上传自有证书&lt;/h5&gt; &#xA;&lt;p&gt;需要将crt和key文件打包成zip，在安装界面选择“上传自有证书”&lt;/p&gt; &#xA;&lt;h5&gt;支持的VPS系统为：&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CentOS 7/8&lt;/li&gt; &#xA; &lt;li&gt;Debian 9/10 (推荐 10)&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu 18及以上&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(注意：如果系统启用了SELinux且工作在Enforcing模式下时，需要将Enforcing更改为Permissive模式，否则使用WebSocket+TLS+Web时，Caddy的service无法开机启动，这种情形一般出现在Centos7/8中，程序在安装过程中将自动处理。)&lt;/p&gt; &#xA;&lt;h5&gt;ProxySU使用教程&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Alvin9999/new-pac/wiki/%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BA%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%B7%A5%E5%85%B7ProxySU&#34;&gt;一键搭建科学上网工具ProxySU&lt;/a&gt;------------网友 &lt;a href=&#34;https://github.com/Alvin9999&#34;&gt;Alvin9999&lt;/a&gt; 制作。&lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ipFZDE1Aqoo&#34;&gt;Youtube视频教程&lt;/a&gt;---------------------------网友 &lt;a href=&#34;https://www.youtube.com/channel/UC52iA9wBGGN7LBWSdyI-yfg&#34;&gt;jc-nf那坨&lt;/a&gt; 制作，需要先翻墙后观看。&lt;/p&gt; &#xA;&lt;h5&gt;使用提醒及常见问题：&lt;/h5&gt; &#xA;&lt;p&gt;有些vps主机商会对vps所使用的资源进行限制，可能会造成Caddy启动失败，提示“failed to create new OS thread ”错误，在一些免费vps类型上经常出现。可以切换为不使用web伪装的代理模式（不填伪装网址的就是了）。&lt;/p&gt; &#xA;&lt;p&gt;vps主机配置推荐内存在256M及以上，过低的内存配置，可能导致某些代理方案不能成功运行。&lt;/p&gt; &#xA;&lt;p&gt;纯IPV6主机，安装过程中，将临时设置NAT64网关。仅用于布署代理，布署完成后，则会删除,若设置伪装网站，该网址需要可以使用ipv6访问，否则将无效。注意，纯IPV6 的主机无法直接访问纯IPV4的网络。(不推荐使用纯ipv6主机做为代理节点)&lt;/p&gt; &#xA;&lt;p&gt;ProxySU的安装流程，是假设在全新系统下，没有装过以上代理软件，如果已经安装过，最好将系统重装一下，会减少很多的麻烦。&lt;br&gt; ProxySU将安装代理软件的最新版本，为了最好的兼容，请确保客户端也是当前最新版本。&lt;/p&gt; &#xA;&lt;p&gt;在实际使用中，发现Centos7,debian8,ubunutu16.04等版本，安装出错的机率很大，不建议使用以上版本。低于以上版本的，无法使用ProxySU.&lt;/p&gt; &#xA;&lt;p&gt;Nat类型的vps主机，因为无法独占80，443端口，使用tls模式的代理，可能不能申请证书，安装会失败。&lt;/p&gt; &#xA;&lt;p&gt;ProxySU在开发过程中，一般都是在vultr的vps中测试，测试系统版本为：Debian 10。由于同一个版本的Linux系统，不同的VPS商,云服务商也不完全相同。实在没有精力去逐一测试。如果安装失败，可以先尝试以下方法解决：&lt;/p&gt; &#xA;&lt;p&gt;1.如果以前装过翻墙软件，请重装一下vps系统后，再试。&lt;br&gt; 2.更换为其他版本的linux发行版，推荐使用 Debian 9与Debian 10系统，再试。&lt;/p&gt; &#xA;&lt;p&gt;以上两种方法不能解决，请各位网友及时发&lt;a href=&#34;https://github.com/proxysu/windows/issues&#34;&gt;issues&lt;/a&gt;，或者到&lt;a href=&#34;https://t.me/proxysuissues&#34;&gt;TG群组&lt;/a&gt;，反馈。&lt;/p&gt; &#xA;&lt;p&gt;在以上平台反馈求助时，请尽可能将安装出错的日志保存下来，并提供，将有利于查找错误原因。&lt;br&gt; 在反馈问题前，可以先看一下 &amp;lt;&amp;lt;&lt;a href=&#34;https://github.com/proxysu/windows/wiki/CommonError&#34;&gt;常见问题集锦&lt;/a&gt;&amp;gt;&amp;gt;，是否可以解决。&lt;/p&gt; &#xA;&lt;h5&gt;关于兼容的密钥格式&lt;/h5&gt; &#xA;&lt;p&gt;ProxySU调用&lt;a href=&#34;https://github.com/sshnet/SSH.NET&#34;&gt;SSH.NET&lt;/a&gt;库登录远程主机，目前&lt;a href=&#34;https://github.com/sshnet/SSH.NET&#34;&gt;SSH.NET&lt;/a&gt;只支持以下格式的密钥：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RSA in OpenSSL PEM and ssh.com format&lt;/li&gt; &#xA; &lt;li&gt;DSA in OpenSSL PEM and ssh.com format&lt;/li&gt; &#xA; &lt;li&gt;ECDSA 256/384/521 in OpenSSL PEM format&lt;/li&gt; &#xA; &lt;li&gt;ED25519 in OpenSSH key format&lt;br&gt; 见官方说明：&lt;br&gt; &lt;a href=&#34;https://github.com/sshnet/SSH.NET#public-key-authentication&#34;&gt;https://github.com/sshnet/SSH.NET#public-key-authentication&lt;/a&gt;&lt;br&gt; 如果当前拥有的密钥格式不是以上几种，可以下载&lt;a href=&#34;https://www.puttygen.com/&#34;&gt;puttygen&lt;/a&gt;工具，将其转换成上面的格式。&lt;br&gt; &lt;a href=&#34;https://www.puttygen.com/&#34;&gt;puttygen&lt;/a&gt;使用教程可以&lt;a href=&#34;https://github.com/proxysu/windows/wiki/PrivateKeyConversionFormat&#34;&gt;看这里&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;关于Let&#39;s Encrypt证书&lt;/h5&gt; &#xA;&lt;p&gt;ProxySU所使用的acme.sh与Caddy，都是申请的Let&#39;s Encrypt免费证书。三个月需要续期，都是自动完成续期的，无需用户操作。但是Let&#39;s Encrypt证书有一些限制，请知晓，如下：&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s Encrypt证书申请频率的限制&lt;/p&gt; &#xA;&lt;p&gt;同一个主域名一周之内只能申请50个证书&lt;br&gt; 每个账号下每个域名每小时申请验证失败的次数为5次&lt;br&gt; 每周只能创建5个重复的证书，即使是通过不同的账号进行创建&lt;br&gt; 每个账号同一个IP地址每3小时最多可以创建10个证书&lt;br&gt; 每个多域名（SAN） SSL证书（不是通配符域名证书）最多只能包含100个子域&lt;br&gt; 更新证书没有次数的限制，但是更新证书会受到上述重复证书的限制&lt;br&gt; 如果提示证书申请失败，可以尝试更换域名再试（添加或换不同的二级域名，也算是新域名）&lt;br&gt; 同一IP地址，在短时间内过于频繁的申请证书，也会被限制，此时更换域名也无法申请成功，只能等待一段时间，或者更换Ip.&lt;br&gt; (网友分享)&lt;/p&gt; &#xA;&lt;h5&gt;关于卸载功能&lt;/h5&gt; &#xA;&lt;p&gt;有网友要求，可以卸载其他方法安装的，经过考虑，还是不这样做。1，容易引起争议。2，不容易卸载干净，在用ProxySU安装时可能还会出错。所以第一次使用ProxySU建议使用全新系统，如果以前安装过代理程序，请尽可能将系统重装一下，可以减少很多安装的错误和冲突。&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/proxysu/windows/master/LICENSE&#34;&gt;(GPL-V3)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;运行文件下载&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beta版(随代码更新，新添加功能可能有bug或不完善)&lt;br&gt; &lt;a href=&#34;https://github.com/proxysu/windows/raw/master/ProxySU/bin/Beta/Beta.zip&#34;&gt;下载&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;正式版（正式发布的版本，新功能完善后发布）&lt;br&gt; &lt;a href=&#34;https://github.com/proxysu/windows/releases&#34;&gt;下载&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Windows系统需要安装net4.8或以上&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet-framework/thank-you/net48-offline-installer&#34;&gt;.NET Framework 4.8&lt;/a&gt; or higher&lt;/p&gt; &#xA;&lt;h2&gt;使用的C# 库&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sshnet/SSH.NET&#34;&gt;SSH.NET --------------- https://github.com/sshnet/SSH.NET&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/JamesNK/Newtonsoft.Json&#34;&gt;Newtonsoft.Json ------ https://github.com/JamesNK/Newtonsoft.Json&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/codebude/QRCoder&#34;&gt;QRcoder --------------- https://github.com/codebude/QRCoder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;程序安全&lt;/h2&gt; &#xA;&lt;p&gt;为了布署方便，程序使用root账户登录主机，出于慎重，请不要在运行重要程序及用于生产的主机上使用。程序所有源码开源，所使用的库都是github开源项目，可以保障最大的使用安全，程序不夹带任何私货、恶意代码及后门，也不会收集任何个人资料，不是在本项目地址下载的，不做任何保障，请尽可能从本项目地址下载。&lt;/p&gt; &#xA;&lt;h2&gt;程序使用问题反馈&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Telegram群组 &lt;a href=&#34;https://t.me/proxysuissues&#34;&gt;https://t.me/proxysuissues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Telegram频道 &lt;a href=&#34;https://t.me/proxysu_channel&#34;&gt;https://t.me/proxysu_channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;在线提问 &lt;a href=&#34;https://github.com/proxysu/windows/issues&#34;&gt;https://github.com/proxysu/windows/issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;在使用遇到问题时，请先看一下&lt;a href=&#34;https://github.com/proxysu/windows/wiki/CommonError&#34;&gt;常见问题集锦&lt;/a&gt;，如果还不能解决，可以到以上平台询问，个人精力有限，尽力解答。&lt;/p&gt;</summary>
  </entry>
</feed>