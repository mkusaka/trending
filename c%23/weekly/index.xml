<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-29T01:48:05Z</updated>
  <subtitle>Weekly Trending of C# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SciSharp/LLamaSharp</title>
    <updated>2023-10-29T01:48:05Z</updated>
    <id>tag:github.com,2023-10-29:/SciSharp/LLamaSharp</id>
    <link href="https://github.com/SciSharp/LLamaSharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;C#/.NET binding of llama.cpp, including LLaMa/GPT model inference and quantization, ASP.NET core and semantic-kernel integration.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLamaSharp - .NET Binding for llama.cpp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SciSharp/LLamaSharp/master/Assets/LLamaSharpLogo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/7wNVU65ZDY&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1106946823282761851?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;amp;k=sN9VVMwbWjs5L0ATpizKKxOcZdEPMrp8&amp;amp;authKey=RLDw41bLTrEyEgZZi%2FzT4pYk%2BwmEFgFcrhs8ZbkiVY7a4JFckzJefaYNW6Lk4yPX&amp;amp;noverify=0&amp;amp;group_code=985366726&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=QQ&amp;amp;message=%E5%8A%A0%E5%85%A5QQ%E7%BE%A4&amp;amp;color=brightgreen&#34; alt=&#34;QQ Group&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/LLamaSharp&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/LLamaSharp?label=LLamaSharp&#34; alt=&#34;LLamaSharp Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/LLamaSharp.Backend.Cpu&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/LLamaSharp.Backend.Cpu?label=LLamaSharp.Backend.Cpu&#34; alt=&#34;LLamaSharp Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/LLamaSharp.Backend.Cuda11&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/LLamaSharp.Backend.Cuda11?label=LLamaSharp.Backend.Cuda11&#34; alt=&#34;LLamaSharp Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/LLamaSharp.Backend.Cuda12&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/LLamaSharp.Backend.Cuda12?label=LLamaSharp.Backend.Cuda12&#34; alt=&#34;LLamaSharp Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/LLamaSharp.Backend.MacMetal&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/LLamaSharp.Backend.MacMetal?label=LLamaSharp.Backend.MacMetal&#34; alt=&#34;LLamaSharp Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/LLamaSharp.semantic-kernel&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/LLamaSharp.semantic-kernel?label=LLamaSharp.semantic-kernel&#34; alt=&#34;LLamaSharp Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The C#/.NET binding of &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;. It provides APIs to inference the LLaMa Models and deploy it on local environment. It works on both Windows, Linux and MAC without requirment for compiling llama.cpp yourself. Its performance is close to llama.cpp.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Furthermore, it provides integrations with other projects such as &lt;a href=&#34;https://github.com/SciSharp/BotSharp&#34;&gt;BotSharp&lt;/a&gt; to provide higher-level applications and UI.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scisharp.github.io/LLamaSharp/0.5/GetStarted/&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scisharp.github.io/LLamaSharp/0.5/Tricks/&#34;&gt;Tricks for FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scisharp.github.io/LLamaSharp/0.5/&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scisharp.github.io/LLamaSharp/0.5/xmldocs/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SciSharp/LLamaSharp/master/LLama.Examples/NewVersion/&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Firstly, search &lt;code&gt;LLamaSharp&lt;/code&gt; in nuget package manager and install it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package LLamaSharp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, search and install one of the following backends:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LLamaSharp.Backend.Cpu  # cpu for windows, linux and mac (mac metal is also supported)&#xA;LLamaSharp.Backend.Cuda11  # cuda11 for windows and linux&#xA;LLamaSharp.Backend.Cuda12  # cuda12 for windows and linux&#xA;LLamaSharp.Backend.MacMetal  # special for using mac metal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to use it with &lt;a href=&#34;https://github.com/microsoft/semantic-kernel&#34;&gt;microsoft semantic-kernel&lt;/a&gt;, please search and install the following package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;LLamaSharp.semantic-kernel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s the mapping of them and corresponding model samples provided by &lt;code&gt;LLamaSharp&lt;/code&gt;. If you&#39;re not sure which model is available for a version, please try our sample model.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;LLamaSharp.Backend&lt;/th&gt; &#xA;   &lt;th&gt;LLamaSharp&lt;/th&gt; &#xA;   &lt;th&gt;Verified Model Resources&lt;/th&gt; &#xA;   &lt;th&gt;llama.cpp commit id&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;v0.2.0&lt;/td&gt; &#xA;   &lt;td&gt;This version is not recommended to use.&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;v0.2.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/wizardLM-7B-GGML/tree/previous_llama&#34;&gt;WizardLM&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/eachadea/ggml-vicuna-13b-1.1/tree/main&#34;&gt;Vicuna (filenames with &#34;old&#34;)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.2.2&lt;/td&gt; &#xA;   &lt;td&gt;v0.2.2, v0.2.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/wizardLM-7B-GGML/tree/previous_llama_ggmlv2&#34;&gt;WizardLM&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/eachadea/ggml-vicuna-13b-1.1/tree/main&#34;&gt;Vicuna (filenames without &#34;old&#34;)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;63d2046&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.3.0, v0.3.1&lt;/td&gt; &#xA;   &lt;td&gt;v0.3.0, v0.4.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/AsakusaRinne/LLamaSharpSamples/tree/v0.3.0&#34;&gt;LLamaSharpSamples v0.3.0&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/TheBloke/wizardLM-7B-GGML/tree/main&#34;&gt;WizardLM&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7e4ea5b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.4.1-preview (cpu only)&lt;/td&gt; &#xA;   &lt;td&gt;v0.4.1-preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/SlyEcho/open_llama_3b_ggml&#34;&gt;Open llama 3b&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/OpenBuddy/openbuddy-llama-ggml&#34;&gt;Open Buddy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;aacdbd4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.4.2-preview (cpu,cuda11)&lt;/td&gt; &#xA;   &lt;td&gt;v0.4.2-preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/llama-2-7B-Guanaco-QLoRA-GGML&#34;&gt;Llama2 7b GGML&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3323112&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.5.1&lt;/td&gt; &#xA;   &lt;td&gt;v0.5.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/llama-2-7B-Guanaco-QLoRA-GGUF&#34;&gt;Llama2 7b GGUF&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6b73ef1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v0.6.0&lt;/td&gt; &#xA;   &lt;td&gt;v0.6.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/commit/cb33f43a2a9f5a5a5f8d290dd97c625d9ba97a2f&#34;&gt;cb33f43&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Many hands make light work. If you have found any other model resource that could work for a version, we&#39;ll appreciate it for opening an PR about it! 😊&lt;/p&gt; &#xA;&lt;p&gt;We publish the backend with cpu, cuda11 and cuda12 because they are the most popular ones. If none of them matches, please compile the &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; from source and put the &lt;code&gt;libllama&lt;/code&gt; under your project&#39;s output path (&lt;a href=&#34;https://scisharp.github.io/LLamaSharp/0.5/ContributingGuide/&#34;&gt;guide&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;GPU out of memory: Please try setting &lt;code&gt;n_gpu_layers&lt;/code&gt; to a smaller number.&lt;/li&gt; &#xA; &lt;li&gt;Unsupported model: &lt;code&gt;llama.cpp&lt;/code&gt; is under quick development and often has break changes. Please check the release date of the model and find a suitable version of LLamaSharp to install, or use the model we provide &lt;a href=&#34;https://huggingface.co/AsakusaRinne/LLamaSharpSamples&#34;&gt;on huggingface&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usages&lt;/h2&gt; &#xA;&lt;h4&gt;Model Inference and Chat Session&lt;/h4&gt; &#xA;&lt;p&gt;LLamaSharp provides two ways to run inference: &lt;code&gt;LLamaExecutor&lt;/code&gt; and &lt;code&gt;ChatSession&lt;/code&gt;. The chat session is a higher-level wrapping of the executor and the model. Here&#39;s a simple example to use chat session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;using LLama.Common;&#xA;using LLama;&#xA;&#xA;string modelPath = &#34;&amp;lt;Your model path&amp;gt;&#34;; // change it to your own model path&#xA;var prompt = &#34;Transcript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User&#39;s requests immediately and with precision.\r\n\r\nUser: Hello, Bob.\r\nBob: Hello. How may I help you today?\r\nUser: Please tell me the largest city in Europe.\r\nBob: Sure. The largest city in Europe is Moscow, the capital of Russia.\r\nUser:&#34;; // use the &#34;chat-with-bob&#34; prompt here.&#xA;&#xA;// Load a model&#xA;var parameters = new ModelParams(modelPath)&#xA;{&#xA;    ContextSize = 1024,&#xA;    Seed = 1337,&#xA;    GpuLayerCount = 5&#xA;};&#xA;using var model = LLamaWeights.LoadFromFile(parameters);&#xA;&#xA;// Initialize a chat session&#xA;using var context = model.CreateContext(parameters);&#xA;var ex = new InteractiveExecutor(context);&#xA;ChatSession session = new ChatSession(ex);&#xA;&#xA;// show the prompt&#xA;Console.WriteLine();&#xA;Console.Write(prompt);&#xA;&#xA;// run the inference in a loop to chat with LLM&#xA;while (prompt != &#34;stop&#34;)&#xA;{&#xA;    foreach (var text in session.Chat(prompt, new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&amp;lt;string&amp;gt; { &#34;User:&#34; } }))&#xA;    {&#xA;        Console.Write(text);&#xA;    }&#xA;    prompt = Console.ReadLine();&#xA;}&#xA;&#xA;// save the session&#xA;session.SaveSession(&#34;SavedSessionPath&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Quantization&lt;/h4&gt; &#xA;&lt;p&gt;The following example shows how to quantize the model. With LLamaSharp you needn&#39;t to compile c++ project and run scripts to quantize the model, instead, just run it in C#.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;string srcFilename = &#34;&amp;lt;Your source path&amp;gt;&#34;;&#xA;string dstFilename = &#34;&amp;lt;Your destination path&amp;gt;&#34;;&#xA;string ftype = &#34;q4_0&#34;;&#xA;if(Quantizer.Quantize(srcFileName, dstFilename, ftype))&#xA;{&#xA;    Console.WriteLine(&#34;Quantization succeed!&#34;);&#xA;}&#xA;else&#xA;{&#xA;    Console.WriteLine(&#34;Quantization failed!&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usages, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/SciSharp/LLamaSharp/master/LLama.Examples&#34;&gt;Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Web API&lt;/h4&gt; &#xA;&lt;p&gt;We provide the integration of ASP.NET core &lt;a href=&#34;https://raw.githubusercontent.com/SciSharp/LLamaSharp/master/LLama.WebAPI&#34;&gt;here&lt;/a&gt;. Since currently the API is not stable, please clone the repo and use it. In the future we&#39;ll publish it on NuGet.&lt;/p&gt; &#xA;&lt;p&gt;Since we are in short of hands, if you&#39;re familiar with ASP.NET core, we&#39;ll appreciate it if you would like to help upgrading the Web API integration.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SciSharp/LLamaSharp/master/Assets/console_demo.gif&#34; alt=&#34;demo-console&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;✅: completed. ⚠️: outdated for latest release but will be updated. 🔳: not completed&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;✅ LLaMa model inference&lt;/p&gt; &#xA;&lt;p&gt;✅ Embeddings generation, tokenization and detokenization&lt;/p&gt; &#xA;&lt;p&gt;✅ Chat session&lt;/p&gt; &#xA;&lt;p&gt;✅ Quantization&lt;/p&gt; &#xA;&lt;p&gt;✅ Grammar&lt;/p&gt; &#xA;&lt;p&gt;✅ State saving and loading&lt;/p&gt; &#xA;&lt;p&gt;⚠️ BotSharp Integration&lt;/p&gt; &#xA;&lt;p&gt;✅ ASP.NET core Integration&lt;/p&gt; &#xA;&lt;p&gt;✅ Semantic-kernel Integration&lt;/p&gt; &#xA;&lt;p&gt;🔳 Fine-tune&lt;/p&gt; &#xA;&lt;p&gt;🔳 Local document search&lt;/p&gt; &#xA;&lt;p&gt;🔳 MAUI Integration&lt;/p&gt; &#xA;&lt;h2&gt;Assets&lt;/h2&gt; &#xA;&lt;p&gt;Some extra model resources could be found below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/AsakusaRinne/LLamaSharpSamples&#34;&gt;Qunatized models provided by LLamaSharp Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/eachadea/ggml-vicuna-13b-1.1/tree/main&#34;&gt;eachadea/ggml-vicuna-13b-1.1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/wizardLM-7B-GGML&#34;&gt;TheBloke/wizardLM-7B-GGML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Magnet: &lt;a href=&#34;magnet:?xt=urn:btih:b8287ebfa04f879b048d4d4404108cf3e8014352&amp;amp;dn=LLaMA&#34;&gt;magnet:?xt=urn:btih:b8287ebfa04f879b048d4d4404108cf3e8014352&amp;amp;dn=LLaMA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The weights included in the magnet is exactly the weights from &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;Facebook LLaMa&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The prompts could be found below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp/tree/master/prompts&#34;&gt;llama.cpp prompts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xk1h0/ChatGPT_DAN&#34;&gt;ChatGPT_DAN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;awesome-chatgpt-prompts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PlexPt/awesome-chatgpt-prompts-zh&#34;&gt;awesome-chatgpt-prompts-zh&lt;/a&gt; (Chinese)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any contribution is welcomed! Please read the &lt;a href=&#34;https://scisharp.github.io/LLamaSharp/0.4/ContributingGuide/&#34;&gt;contributing guide&lt;/a&gt;. You can do one of the followings to help us make &lt;code&gt;LLamaSharp&lt;/code&gt; better:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Append a model link that is available for a version. (This is very important!)&lt;/li&gt; &#xA; &lt;li&gt;Star and share &lt;code&gt;LLamaSharp&lt;/code&gt; to let others know it.&lt;/li&gt; &#xA; &lt;li&gt;Add a feature or fix a BUG.&lt;/li&gt; &#xA; &lt;li&gt;Help to develop Web API and UI integration.&lt;/li&gt; &#xA; &lt;li&gt;Just start an issue about the problem you met!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;Join our chat on &lt;a href=&#34;https://discord.gg/7wNVU65ZDY&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;http://qm.qq.com/cgi-bin/qm/qr?_wv=1027&amp;amp;k=sN9VVMwbWjs5L0ATpizKKxOcZdEPMrp8&amp;amp;authKey=RLDw41bLTrEyEgZZi%2FzT4pYk%2BwmEFgFcrhs8ZbkiVY7a4JFckzJefaYNW6Lk4yPX&amp;amp;noverify=0&amp;amp;group_code=985366726&#34;&gt;QQ group&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mcintyre321/OneOf</title>
    <updated>2023-10-29T01:48:05Z</updated>
    <id>tag:github.com,2023-10-29:/mcintyre321/OneOf</id>
    <link href="https://github.com/mcintyre321/OneOf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to use F#-like ~discriminated~ unions for C# with exhaustive compile time matching&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneOf &lt;a href=&#34;https://www.nuget.org/packages/OneOf/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/OneOf?logo=nuget&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/mcintyre321/OneOf/master/licence.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mcintyre321/OneOf&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Ah! It&#39;s like a compile time checked switch statement!&#34; - Mike Giorgaras&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;install-package OneOf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library provides F# style &lt;del&gt;discriminated&lt;/del&gt; unions for C#, using a custom type &lt;code&gt;OneOf&amp;lt;T0, ... Tn&amp;gt;&lt;/code&gt;. An instance of this type holds a single value, which is one of the types in its generic argument list.&lt;/p&gt; &#xA;&lt;p&gt;I can&#39;t encourage you enough to give it a try! Due to exhaustive matching DUs provide an alternative to polymorphism when you want to have a method with guaranteed behaviour-per-type (i.e. adding an abstract method on a base type, and then implementing that method in each type). It&#39;s a really powerful tool, ask any f#/Scala dev! :)&lt;/p&gt; &#xA;&lt;p&gt;PS If you like OneOf, you might want to check out &lt;a href=&#34;https://github.com/mcintyre321/valueof&#34;&gt;ValueOf&lt;/a&gt;, for one-line Value Object Type definitions.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;h3&gt;As a method return value&lt;/h3&gt; &#xA;&lt;p&gt;The most frequent use case is as a return value, when you need to return different results from a method. Here&#39;s how you might use it in an MVC controller action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public OneOf&amp;lt;User, InvalidName, NameTaken&amp;gt; CreateUser(string username)&#xA;{&#xA;    if (!IsValid(username)) return new InvalidName();&#xA;    var user = _repo.FindByUsername(username);&#xA;    if(user != null) return new NameTaken();&#xA;    var user = new User(username);&#xA;    _repo.Save(user);&#xA;    return user;&#xA;}&#xA;&#xA;[HttpPost]&#xA;public IActionResult Register(string username)&#xA;{&#xA;    OneOf&amp;lt;User, InvalidName, NameTaken&amp;gt; createUserResult = CreateUser(username);&#xA;    return createUserResult.Match(&#xA;        user =&amp;gt; new RedirectResult(&#34;/dashboard&#34;),&#xA;        invalidName =&amp;gt; {&#xA;            ModelState.AddModelError(nameof(username), $&#34;Sorry, that is not a valid username.&#34;);&#xA;            return View(&#34;Register&#34;);&#xA;        },&#xA;        nameTaken =&amp;gt; {&#xA;            ModelState.AddModelError(nameof(username), &#34;Sorry, that name is already in use.&#34;);&#xA;            return View(&#34;Register&#34;);&#xA;        }&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;As an &#39;Option&#39; Type&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s simple to use OneOf as an &lt;code&gt;Option&lt;/code&gt; type - just declare a &lt;code&gt;OneOf&amp;lt;Something, None&amp;gt;&lt;/code&gt;. OneOf comes with a variety of useful Types in the &lt;code&gt;OneOf.Types&lt;/code&gt; namespace, including &lt;code&gt;Yes&lt;/code&gt;, &lt;code&gt;No&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Unknown&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;All&lt;/code&gt;, &lt;code&gt;Some&lt;/code&gt;, and &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Benefits&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;True strongly typed method signature &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No need to return a custom result base type e.g &lt;code&gt;IActionResult&lt;/code&gt;, or even worse, a non-descriptive type (e.g. object)&lt;/li&gt; &#xA;   &lt;li&gt;The method signature accurately describes all the potential outcomes, making it easier for consumers to understand the code&lt;/li&gt; &#xA;   &lt;li&gt;Method consumer HAS to handle all cases (see &#39;Matching&#39;, below)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can avoid using &lt;a href=&#34;http://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why&#34;&gt;&#34;Exceptions for control flow&#34;&lt;/a&gt; antipattern by returning custom Typed error objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;As a method parameter value&lt;/h3&gt; &#xA;&lt;p&gt;You can use also use &lt;code&gt;OneOf&lt;/code&gt; as a parameter type, allowing a caller to pass different types without requiring additional overloads. This might not seem that useful for a single parameter, but if you have multiple parameters, the number of overloads required increases rapidly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void SetBackground(OneOf&amp;lt;string, ColorName, Color&amp;gt; backgroundColor) { ... }&#xA;&#xA;//The method above can be called with either a string, a ColorName enum value or a Color instance.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Matching&lt;/h2&gt; &#xA;&lt;p&gt;You use the &lt;code&gt;TOut Match(Func&amp;lt;T0, TOut&amp;gt; f0, ... Func&amp;lt;Tn,TOut&amp;gt; fn)&lt;/code&gt; method to get a value out. Note how the number of handlers matches the number of generic arguments.&lt;/p&gt; &#xA;&lt;h3&gt;Advantages over &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;exception&lt;/code&gt; based control flow:&lt;/h3&gt; &#xA;&lt;p&gt;This has a major advantage over a switch statement, as it&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;requires every parameter to be handled&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No fallback - if you add another generic parameter, you HAVE to update all the calling code to handle your changes.&lt;/p&gt; &lt;p&gt;In brown-field code-bases this is incredibly useful, as the default handler is often a runtime &lt;code&gt;throw NotImplementedException&lt;/code&gt;, or behaviour that wouldn&#39;t suit the new result type.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OneOf&amp;lt;string, ColorName, Color&amp;gt; backgroundColor = ...;&#xA;Color c = backgroundColor.Match(&#xA;    str =&amp;gt; CssHelper.GetColorFromString(str),&#xA;    name =&amp;gt; new Color(name),&#xA;    col =&amp;gt; col&#xA;);&#xA;_window.BackgroundColor = c;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a .Switch method, for when you aren&#39;t returning a value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;OneOf&amp;lt;string, DateTime&amp;gt; dateValue = ...;&#xA;dateValue.Switch(&#xA;    str =&amp;gt; AddEntry(DateTime.Parse(str), foo),&#xA;    int =&amp;gt; AddEntry(int, foo)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TryPick𝑥 method&lt;/h3&gt; &#xA;&lt;p&gt;As an alternative to &lt;code&gt;.Switch&lt;/code&gt; or &lt;code&gt;.Match&lt;/code&gt; you can use the &lt;code&gt;.TryPick𝑥&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;//TryPick𝑥 methods for OneOf&amp;lt;T0, T1, T2&amp;gt;&#xA;public bool TryPickT0(out T0 value, out OneOf&amp;lt;T1, T2&amp;gt; remainder) { ... }&#xA;public bool TryPickT1(out T1 value, out OneOf&amp;lt;T0, T2&amp;gt; remainder) { ... }&#xA;public bool TryPickT2(out T2 value, out OneOf&amp;lt;T0, T1&amp;gt; remainder) { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The return value indicates if the OneOf contains a T𝑥 or not. If so, then &lt;code&gt;value&lt;/code&gt; will be set to the inner value from the OneOf. If not, then the remainder will be a OneOf of the remaining generic types. You can use them like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;IActionResult Get(string id)&#xA;{&#xA;    OneOf&amp;lt;Thing, NotFound, Error&amp;gt; thingOrNotFoundOrError = GetThingFromDb(string id);&#xA;&#xA;    if (thingOrNotFoundOrError.TryPickT1(out NotFound notFound, out var thingOrError)) //thingOrError is a OneOf&amp;lt;Thing, Error&amp;gt;&#xA;      return StatusCode(404);&#xA;&#xA;    if (thingOrError.TryPickT1(out var error, out var thing)) //note that thing is a Thing rather than a OneOf&amp;lt;Thing&amp;gt;&#xA;    {&#xA;      _logger.LogError(error.Message);&#xA;      return StatusCode(500);&#xA;    }&#xA;&#xA;    return Ok(thing);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reusable OneOf Types using OneOfBase&lt;/h3&gt; &#xA;&lt;p&gt;You can declare a OneOf as a type, either for reuse of the type, or to provide additional members, by inheriting from &lt;code&gt;OneOfBase&lt;/code&gt;. The derived class will inherit the &lt;code&gt;.Match&lt;/code&gt;, &lt;code&gt;.Switch&lt;/code&gt;, and &lt;code&gt;.TryPick𝑥&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class StringOrNumber : OneOfBase&amp;lt;string, int&amp;gt;&#xA;{&#xA;    StringOrNumber(OneOf&amp;lt;string, int&amp;gt; _) : base(_) { }&#xA;&#xA;    // optionally, define implicit conversions&#xA;    // you could also make the constructor public&#xA;    public static implicit operator StringOrNumber(string _) =&amp;gt; new StringOrNumber(_);&#xA;    public static implicit operator StringOrNumber(int _) =&amp;gt; new StringOrNumber(_);&#xA;&#xA;    public (bool isNumber, int number) TryGetNumber() =&amp;gt;&#xA;        Match(&#xA;            s =&amp;gt; (int.TryParse(s, out var n), n),&#xA;            i =&amp;gt; (true, i)&#xA;        );&#xA;}&#xA;&#xA;StringOrNumber x = 5;&#xA;Console.WriteLine(x.TryGetNumber().number);&#xA;// prints 5&#xA;&#xA;x = &#34;5&#34;;&#xA;Console.WriteLine(x.TryGetNumber().number);&#xA;// prints 5&#xA;&#xA;x = &#34;abcd&#34;;&#xA;Console.WriteLine(x.TryGetNumber().isNumber);&#xA;// prints False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OneOfBase Source Generation&lt;/h3&gt; &#xA;&lt;p&gt;You can automatically generate &lt;code&gt;OneOfBase&lt;/code&gt; hierarchies using &lt;code&gt;GenerateOneOfAttribute&lt;/code&gt; and partial class that extends &lt;code&gt;OneOfBase&lt;/code&gt; using a Source Generator (thanks to @romfir for the contribution :D). Install it via&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Install-Package OneOf.SourceGenerator&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;and then define a stub like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[GenerateOneOf]&#xA;public partial class StringOrNumber : OneOfBase&amp;lt;string, int&amp;gt; { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During compilation the source generator will produce a class implementing the OneOfBase boiler plate code for you. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public partial class StringOrNumber&#xA;{&#xA;&#x9;public StringOrNumber(OneOf.OneOf&amp;lt;System.String, System.Int32&amp;gt; _) : base(_) { }&#xA;&#xA;&#x9;public static implicit operator StringOrNumber(System.String _) =&amp;gt; new StringOrNumber(_);&#xA;&#x9;public static explicit operator System.String(StringOrNumber _) =&amp;gt; _.AsT0;&#xA;&#xA;&#x9;public static implicit operator StringOrNumber(System.Int32 _) =&amp;gt; new StringOrNumber(_);&#xA;&#x9;public static explicit operator System.Int32(StringOrNumber _) =&amp;gt; _.AsT1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>srwi/EverythingToolbar</title>
    <updated>2023-10-29T01:48:05Z</updated>
    <id>tag:github.com,2023-10-29:/srwi/EverythingToolbar</id>
    <link href="https://github.com/srwi/EverythingToolbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Everything integration for the Windows taskbar.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EverythingToolbar&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/rumswinkel&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Donate&amp;amp;message=%E2%9D%A4&amp;amp;logo=PayPal&amp;amp;color=%23009cde&#34; height=&#34;25&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/srwi/EverythingToolbar/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/srwi/EverythingToolbar/total?color=critical&#34; height=&#34;25&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/everythingtoolbar&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/everythingtoolbar/localized.svg?sanitize=true&#34; height=&#34;25&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instant file search integration for the Windows taskbar powered by &lt;a href=&#34;https://www.voidtools.com/&#34;&gt;Everything&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/17520641/213898038-c8f76cc4-572e-481c-82bf-e420900e1aff.gif&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Light &amp;amp; Dark&lt;/h3&gt; &#xA;&lt;p&gt;EverythingToolbar seemlessly blends into Windows 10 and 11 and adjusts according to your theme settings.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/17520641/213913562-076e00f3-f54b-40b4-b6a5-ec705302fe39.png&#34;&gt; &#xA;&lt;h3&gt;Custom search filters&lt;/h3&gt; &#xA;&lt;p&gt;EverythingToolbar reads custom filters previously defined in Everything. To enable this feature, check the &lt;code&gt;Use Everything filters&lt;/code&gt; option in the EverythingToolbar settings. From now on, all filters will be available from the filter dropdown:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17520641/213913613-3621a0c1-0386-4d7a-ac0f-e7ab0239b222.png&#34; alt=&#34;Custom search filters&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick toggles for search options&lt;/h3&gt; &#xA;&lt;p&gt;Quick access to search flags (match case, whole word, match path and reg-ex) allows you to find your files precisely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17520641/213913757-da27d69d-59eb-445b-9d44-5b2e34c6faf4.png&#34; alt=&#34;Quick toggles&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RegEx-powered file associations&lt;/h3&gt; &#xA;&lt;p&gt;Create custom &lt;em&gt;Open with&lt;/em&gt; commands by selecting &lt;kbd&gt;Rules...&lt;/kbd&gt; in the preferences. By checking the &lt;kbd&gt;Automatically apply rules based on condition&lt;/kbd&gt; checkbox, matching files/folders will execute the appropriate command based on the type and regular expression field. Leaving the regular expression field empty will never match, but the entry will only be displayed in the &lt;em&gt;Open with&lt;/em&gt; context menu of the search results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17520641/213928743-a7f6a932-0b60-4dc3-8d2b-72ee09cf6e53.png&#34; alt=&#34;Rules window&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;EverythingToolbar is compatible with both Windows 10 and Windows 11 and works well with tools like &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher&#34;&gt;ExplorerPatcher&lt;/a&gt; and &lt;a href=&#34;https://www.startallback.com/&#34;&gt;StartAllBack&lt;/a&gt; to give you the full deskband integration even on Windows 11.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/17520641/213918399-a566c476-9b7e-460b-97c5-479964ddfa78.png&#34; alt=&#34;Windows 10 screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Other features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open EverythingToolbar at any time via a customizable shortcut&lt;/li&gt; &#xA; &lt;li&gt;Redirect Start menu search to EverythingToolbar (experimental)&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop files to where you need them most&lt;/li&gt; &#xA; &lt;li&gt;Quickly preview files thanks to &lt;a href=&#34;https://github.com/QL-Win/QuickLook&#34;&gt;QuickLook&lt;/a&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;Use custom Everything &lt;a href=&#34;https://www.voidtools.com/support/everything/multiple_instances/#named_instances&#34;&gt;instance names&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keyboard shortcuts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Shortcut&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;↑&lt;/kbd&gt;/&lt;kbd&gt;↓&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Navigate search results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt;/&lt;kbd&gt;↓&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Navigate search history (if enabled)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt;/&lt;kbd&gt;Click&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt;/&lt;kbd&gt;Click&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open in Everything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Copy full path to clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt;/&lt;kbd&gt;Click&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run as admin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;(&lt;kbd&gt;Shift&lt;/kbd&gt;+)&lt;kbd&gt;Tab&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cycle through filters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;0-9&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Space&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Preview file in &lt;a href=&#34;https://github.com/QL-Win/QuickLook&#34;&gt;QuickLook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Win&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Focus search box (customizable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you are running Windows 10 or 11 and &lt;a href=&#34;https://www.voidtools.com&#34;&gt;Everything&lt;/a&gt; ≥ 1.4.1 is installed and running (the Lite version is not supported)&lt;/li&gt; &#xA; &lt;li&gt;Install EverythingToolbar using one of the following methods &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download the installer for &lt;a href=&#34;https://github.com/srwi/EverythingToolbar/releases&#34;&gt;EverythingToolbar&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;: &lt;code&gt;choco install everythingtoolbar&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/winget-cli/&#34;&gt;winget&lt;/a&gt;: &lt;code&gt;winget install everythingtoolbar&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/srwi/EverythingToolbar/wiki/Installation-per-user-(experimental)&#34;&gt;Manual installation&lt;/a&gt; without admin privileges (not recommended)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; For Everything 1.5a the instance name &lt;code&gt;1.5a&lt;/code&gt; must be set in the EverythingToolbar settings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Search icon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Recommended for &lt;strong&gt;unmodified Windows 11&lt;/strong&gt; installations&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After installation on Windows 11 the setup assistant will guide you through the setup process&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If the setup assistant did not start automatically, search for &lt;code&gt;EverythingToolbar&lt;/code&gt; in the Windows Start menu.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If you want to use the search icon on Windows 10 (not recommended), search for &lt;code&gt;EverythingToolbar.Launcher.exe&lt;/code&gt;, start it manually and follow the setup process.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deskband&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Recommended for &lt;strong&gt;Windows 10&lt;/strong&gt; or in combination with &lt;a href=&#34;https://github.com/valinet/ExplorerPatcher&#34;&gt;ExplorerPatcher&lt;/a&gt;/&lt;a href=&#34;https://www.startallback.com/&#34;&gt;StartAllBack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After installation on Windows 10, activate EverythingToolbar from the taskbar context menu&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You will need to open the context menu twice, as EverythingToolbar will not appear the first time.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Windows 11 only&lt;/strong&gt;: After installation, the search icon setup assistant will start automatically. If you want to use the deskband instead (only recommended in combination with ExplorerPatcher/StartAllback), close the assistant and end EverythingToolbar&#39;s background process via the taskbar tray icon.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Adjust size and position after unlocking the taskbar (&lt;a href=&#34;https://user-images.githubusercontent.com/17520641/107118574-19a1bf80-6882-11eb-843a-7e854e5d0684.gif&#34;&gt;Demonstration video&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the solution in Visual Studio with .NET Framework 4.7 support&lt;/li&gt; &#xA; &lt;li&gt;Disable signing in project properties&lt;/li&gt; &#xA; &lt;li&gt;Deskband: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build project &lt;code&gt;EverythingToolbar.Deskband&lt;/code&gt; (Windows Explorer will be restarted)&lt;/li&gt; &#xA;   &lt;li&gt;Install the toolbar deskband by running &lt;code&gt;/tools/install_deskband.cmd&lt;/code&gt; as admin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Search icon: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;EverythingToolbar.Launcher&lt;/code&gt; as startup project and start debugging&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;All kinds of contributions (questions, bug reports, pull requests) are welcome! Helping with open issues is greatly appreciated. As a basic rule, before filing issues, feature requests or anything else, take a look at the issues and check if they have already been reported by another user. If so, engage in the already existing discussion.&lt;/p&gt; &#xA;&lt;p&gt;You can also help by &lt;a href=&#34;https://crowdin.com/project/everythingtoolbar&#34;&gt;translating EverythingToolbar&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>