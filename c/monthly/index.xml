<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-01T01:51:51Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>immortalwrt/immortalwrt</title>
    <updated>2025-08-01T01:51:51Z</updated>
    <id>tag:github.com,2025-08-01:/immortalwrt/immortalwrt</id>
    <link href="https://github.com/immortalwrt/immortalwrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An opensource OpenWrt variant for mainland China users.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/53193414?s=200&amp;amp;v=4&#34; alt=&#34;logo&#34; width=&#34;200&#34; height=&#34;200&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Project ImmortalWrt&lt;/h1&gt; &#xA;&lt;p&gt;ImmortalWrt is a fork of &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWrt&lt;/a&gt;, with more packages ported, more devices supported, default optimized profiles and localization modifications for mainland China users.&lt;br&gt; Compared to upstream, we allow to use (non-upstreamable) modifications/hacks to provide better feature/performance/support.&lt;/p&gt; &#xA;&lt;p&gt;Default login address: &lt;a href=&#34;http://192.168.1.1&#34;&gt;http://192.168.1.1&lt;/a&gt; or &lt;a href=&#34;http://immortalwrt.lan&#34;&gt;http://immortalwrt.lan&lt;/a&gt;, username: &lt;strong&gt;root&lt;/strong&gt;, password: &lt;em&gt;none&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Built firmware images are available for many architectures and come with a package selection to be used as WiFi home router. To quickly find a factory image usable to migrate from a vendor stock firmware to ImmortalWrt, try the &lt;em&gt;Firmware Selector&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://firmware-selector.immortalwrt.org/&#34;&gt;ImmortalWrt Firmware Selector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your device is supported, please follow the &lt;strong&gt;Info&lt;/strong&gt; link to see install instructions or consult the support resources listed below.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To build your own firmware you need a GNU/Linux, BSD or macOS system (case sensitive filesystem required). Cygwin is unsupported because of the lack of a case sensitive file system.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;To build with this project, Debian 11 is preferred. And you need use the CPU based on AMD64 architecture, with at least 4GB RAM and 25 GB available disk space. Make sure the &lt;strong&gt;Internet&lt;/strong&gt; is accessible.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are needed to compile ImmortalWrt, the package names vary between distributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here is an example for Debian/Ubuntu users:&lt;br&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 1:&lt;/p&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt;Setup dependencies via APT&lt;/summary&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;  bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \&#xA;  g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \&#xA;  libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \&#xA;  libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \&#xA;  ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \&#xA;  python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \&#xA;  upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/details&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Method 2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo bash -c &#39;bash &amp;lt;(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do everything as an unprivileged user, not root, without sudo.&lt;/li&gt; &#xA; &lt;li&gt;Using CPUs based on other architectures should be fine to compile ImmortalWrt, but more hacks are needed - No warranty at all.&lt;/li&gt; &#xA; &lt;li&gt;You must &lt;strong&gt;not&lt;/strong&gt; have spaces or non-ascii characters in PATH or in the work folders on the drive.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Windows Subsystem for Linux (or WSL), removing Windows folders from PATH is required, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/wsl&#34;&gt;Build system setup WSL&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;Using macOS as the host build OS is &lt;strong&gt;not&lt;/strong&gt; recommended. No warranty at all. You can get tips from &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/buildroot.exigence.macosx&#34;&gt;Build system setup macOS&lt;/a&gt; documentation.&lt;/li&gt; &#xA; &lt;li&gt;For more details, please see &lt;a href=&#34;https://openwrt.org/docs/guide-developer/build-system/install-buildsystem&#34;&gt;Build system setup&lt;/a&gt; documentation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quickstart&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;git clone -b &amp;lt;branch&amp;gt; --single-branch --filter=blob:none https://github.com/immortalwrt/immortalwrt&lt;/code&gt; to clone the source code.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cd immortalwrt&lt;/code&gt; to enter source directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/feeds update -a&lt;/code&gt; to obtain all the latest package definitions defined in feeds.conf / feeds.conf.default&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/feeds install -a&lt;/code&gt; to install symlinks for all obtained packages into package/feeds/&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make menuconfig&lt;/code&gt; to select your preferred configuration for the toolchain, target system &amp;amp; firmware packages.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to build your firmware. This will download all sources, build the cross-compile toolchain and then cross-compile the GNU/Linux kernel &amp;amp; all chosen applications for your target system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Related Repositories&lt;/h3&gt; &#xA;&lt;p&gt;The main repository uses multiple sub-repositories to manage packages of different categories. All packages are installed via the OpenWrt package manager called opkg. If you&#39;re looking to develop the web interface or port packages to ImmortalWrt, please find the fitting repository below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/luci&#34;&gt;LuCI Web Interface&lt;/a&gt;: Modern and modular interface to control the device via a web browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/immortalwrt/packages&#34;&gt;ImmortalWrt Packages&lt;/a&gt;: Community repository of ported packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openwrt/routing&#34;&gt;OpenWrt Routing&lt;/a&gt;: Packages specifically focused on (mesh) routing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openwrt/video&#34;&gt;OpenWrt Video&lt;/a&gt;: Packages specifically focused on display servers and clients (Xorg and Wayland).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support Information&lt;/h2&gt; &#xA;&lt;p&gt;For a list of supported devices see the &lt;a href=&#34;https://openwrt.org/supported_devices&#34;&gt;OpenWrt Hardware Database&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-quick-start/start&#34;&gt;Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/start&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-developer/start&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/start&#34;&gt;Technical Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support Community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://t.me/ctcgfw_openwrt_discuss&#34;&gt;@ctcgfw_openwrt_discuss&lt;/a&gt; on &lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support Chat: group &lt;a href=&#34;https://matrix.to/#/%23immortalwrt:matrix.org&#34;&gt;#immortalwrt&lt;/a&gt; on &lt;a href=&#34;https://matrix.org/&#34;&gt;Matrix&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ImmortalWrt is licensed under &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-only.html&#34;&gt;GPL-2.0-only&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dlercloud.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22235437/111103249-f9ec6e00-8588-11eb-9bfc-67cc55574555.png&#34; width=&#34;183&#34; height=&#34;52&#34; border=&#34;0&#34; alt=&#34;Dler Cloud&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_square.png&#34; width=&#34;120&#34; height=&#34;120&#34; border=&#34;0&#34; alt=&#34;JetBrains Black Box Logo logo&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sourceforge.net/&#34;&gt;&lt;img src=&#34;https://sourceforge.net/sflogo.php?type=17&amp;amp;group_id=3663829&#34; alt=&#34;SourceForge&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>timescale/timescaledb</title>
    <updated>2025-08-01T01:51:51Z</updated>
    <id>tag:github.com,2025-08-01:/timescale/timescaledb</id>
    <link href="https://github.com/timescale/timescaledb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A time-series database for high-performance real-time analytics packaged as a Postgres extension&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture align=&#34;center&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://assets.tigerdata.com/timescale-web/brand/horizontal/yellow/logo-yellow.svg&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://assets.tigerdata.com/timescale-web/brand/horizontal/black/logo-black.svg&#34;&gt; &#xA;  &lt;img alt=&#34;TigerData logo&#34;&gt; &#xA; &lt;/picture&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;TimescaleDB is a PostgreSQL extension for high-performance real-time analytics on time-series and event data&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.tigerdata.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Read_the_TigerData_docs-black?style=for-the-badge&amp;amp;logo=readthedocs&amp;amp;logoColor=white&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://timescaledb.slack.com/archives/C4GT3N90X&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Ask_the_TigerData_community-black?style=for-the-badge&amp;amp;logo=slack&amp;amp;logoColor=white&#34; alt=&#34;SLACK&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://console.cloud.timescale.com/signup&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Try_Tiger_Cloud_for_free-black?style=for-the-badge&amp;amp;logo=timescale&amp;amp;logoColor=white&#34; alt=&#34;Try TimescaleDB for free&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Install TimescaleDB&lt;/h2&gt; &#xA;&lt;p&gt;Install from a Docker container:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the TimescaleDB container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password timescale/timescaledb-ha:pg17&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to a database:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it timescaledb psql -d &#34;postgres://postgres:password@localhost/postgres&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.tigerdata.com/self-hosted/latest/install/&#34;&gt;other installation options&lt;/a&gt; or try &lt;a href=&#34;https://docs.tigerdata.com/getting-started/latest/&#34;&gt;Tiger Cloud&lt;/a&gt; for free.&lt;/p&gt; &#xA;&lt;h2&gt;Create a hypertable&lt;/h2&gt; &#xA;&lt;p&gt;TimescaleDB&#39;s hypercore is a hybrid row-columnar store that boosts analytical query performance on your time-series and event data, while reducing data size by more than 90%. This keeps your analytics operating at lightning speed and ensures low storage costs as you scale. Data is inserted in row format in the rowstore and converted to columnar format in the columnstore based on your configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Create a hypertable, with the columnstore from the hypercore engine&#xA;-- &#34;time&#34; as partitioning column and a segment by on location&#xA;CREATE TABLE conditions (&#xA;  time        TIMESTAMPTZ       NOT NULL,&#xA;  location    TEXT              NOT NULL,&#xA;  temperature DOUBLE PRECISION  NULL,&#xA;  humidity    DOUBLE PRECISION  NULL&#xA;)&#xA;WITH (&#xA;  timescaledb.hypertable,&#xA;  timescaledb.partition_column=&#39;time&#39;,&#xA;  timescaledb.segmentby=&#39;location&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/hypertables/&#34;&gt;About hypertables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/api/latest/hypertable/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/compression/about-compression/&#34;&gt;About columnstore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/compression/manual-compression/&#34;&gt;Enable columnstore manually&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/api/latest/compression/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Insert and query data&lt;/h2&gt; &#xA;&lt;p&gt;Insert and query data in a hypertable via regular SQL commands. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Insert data into a hypertable named &lt;code&gt;conditions&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO conditions&#xA;  VALUES&#xA;    (NOW(), &#39;office&#39;,   70.0, 50.0),&#xA;    (NOW(), &#39;basement&#39;, 66.5, 60.0),&#xA;    (NOW(), &#39;garage&#39;,   77.0, 65.2);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Return the number of entries written to the table conditions in the last 12 hours:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT&#xA;  COUNT(*)&#xA;FROM&#xA;  conditions&#xA;WHERE&#xA;  time &amp;gt; NOW() - INTERVAL &#39;12 hours&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/query-data/&#34;&gt;Query data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/write-data/&#34;&gt;Write data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Create time buckets&lt;/h2&gt; &#xA;&lt;p&gt;Time buckets enable you to aggregate data in hypertables by time interval and calculate summary values.&lt;/p&gt; &#xA;&lt;p&gt;For example, calculate the average daily temperature in a table named &lt;code&gt;conditions&lt;/code&gt;. The table has a &lt;code&gt;time&lt;/code&gt; and &lt;code&gt;temperature&lt;/code&gt; columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT&#xA;  time_bucket(&#39;1 day&#39;, time) AS bucket,&#xA;  AVG(temperature) AS avg_temp&#xA;FROM&#xA;  conditions&#xA;GROUP BY&#xA;  bucket&#xA;ORDER BY&#xA;  bucket ASC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/time-buckets/about-time-buckets/&#34;&gt;About time buckets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/api/latest/hyperfunctions/time_bucket/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/&#34;&gt;All TimescaleDB features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/tutorials/latest/&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Create continuous aggregates&lt;/h2&gt; &#xA;&lt;p&gt;Continuous aggregates make real-time analytics run faster on very large datasets. They continuously and incrementally refresh a query in the background, so that when you run such query, only the data that has changed needs to be computed, not the entire dataset. This is what makes them different from regular PostgreSQL &lt;a href=&#34;https://www.postgresql.org/docs/current/rules-materializedviews.html&#34;&gt;materialized views&lt;/a&gt;, which cannot be incrementally materialized and have to be rebuilt from scratch every time you want to refresh it.&lt;/p&gt; &#xA;&lt;p&gt;For example, create a continuous aggregate view for daily weather data in two simple steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a materialized view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE MATERIALIZED VIEW conditions_summary_daily&#xA;WITH (timescaledb.continuous) AS&#xA;SELECT&#xA;  location,&#xA;  time_bucket(INTERVAL &#39;1 day&#39;, time) AS bucket,&#xA;  AVG(temperature),&#xA;  MAX(temperature),&#xA;  MIN(temperature)&#xA;FROM&#xA;  conditions&#xA;GROUP BY&#xA;  location,&#xA;  bucket;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a policy to refresh the view every hour:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT&#xA;  add_continuous_aggregate_policy(&#xA;    &#39;conditions_summary_daily&#39;,&#xA;    start_offset =&amp;gt; INTERVAL &#39;1 month&#39;,&#xA;    end_offset =&amp;gt; INTERVAL &#39;1 day&#39;,&#xA;    schedule_interval =&amp;gt; INTERVAL &#39;1 hour&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/continuous-aggregates/&#34;&gt;About continuous aggregates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tigerdata.com/api/latest/continuous-aggregates/create_materialized_view/&#34;&gt;API reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Want TimescaleDB hosted and managed for you? Try Tiger Cloud&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.tigerdata.com/getting-started/latest/&#34;&gt;Tiger Cloud&lt;/a&gt; is the modern PostgreSQL data platform for all your applications. It enhances PostgreSQL to handle time series, events, real-time analytics, and vector search—all in a single database alongside transactional workloads. You get one system that handles live data ingestion, late and out-of-order updates, and low latency queries, with the performance, reliability, and scalability your app needs. Ideal for IoT, crypto, finance, SaaS, and a myriad other domains, Tiger Cloud allows you to build data-heavy, mission-critical apps while retaining the familiarity and reliability of PostgreSQL. See &lt;a href=&#34;https://docs.tigerdata.com/about/latest/whitepaper/&#34;&gt;our whitepaper&lt;/a&gt; for a deep dive into Tiger Cloud&#39;s architecture and how it meets the needs of even the most demanding applications.&lt;/p&gt; &#xA;&lt;p&gt;A Tiger Cloud service is a single optimized 100% PostgreSQL database instance that you use as is, or extend with capabilities specific to your business needs. The available capabilities are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time-series and analytics&lt;/strong&gt;: PostgreSQL with TimescaleDB. The PostgreSQL you know and love, supercharged with functionality for storing and querying time-series data at scale for real-time analytics and other use cases. Get faster time-based queries with hypertables, continuous aggregates, and columnar storage. Save on storage with native compression, data retention policies, and bottomless data tiering to Amazon S3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI and vector&lt;/strong&gt;: PostgreSQL with vector extensions. Use PostgreSQL as a vector database with purpose built extensions for building AI applications from start to scale. Get fast and accurate similarity search with the pgvector and pgvectorscale extensions. Create vector embeddings and perform LLM reasoning on your data with the pgai extension.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;: the trusted industry-standard RDBMS. Ideal for applications requiring strong data consistency, complex relationships, and advanced querying capabilities. Get ACID compliance, extensive SQL support, JSON handling, and extensibility through custom functions, data types, and extensions. All services include all the cloud tooling you&#39;d expect for production use: &lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/backup-restore/backup-restore-cloud/&#34;&gt;automatic backups&lt;/a&gt;, &lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/ha-replicas/&#34;&gt;high availability&lt;/a&gt;, &lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/ha-replicas/read-scaling/&#34;&gt;read replicas&lt;/a&gt;, &lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/services/service-management/#fork-a-service&#34;&gt;data forking&lt;/a&gt;, &lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/services/connection-pooling/&#34;&gt;connection pooling&lt;/a&gt;, &lt;a href=&#34;https://docs.tigerdata.com/use-timescale/latest/data-tiering/&#34;&gt;tiered storage&lt;/a&gt;, &lt;a href=&#34;https://docs.tigerdata.com/about/latest/pricing-and-account-management/&#34;&gt;usage-based storage&lt;/a&gt;, and much more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Check build status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux/macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux i386&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Coverity&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Code Coverage&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;OpenSSF&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions/workflows/linux-build-and-test.yaml?query=workflow%3ARegression+branch%3Amain+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/actions/workflows/linux-build-and-test.yaml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Build Status Linux/macOS&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions/workflows/linux-32bit-build-and-test.yaml?query=workflow%3ARegression+branch%3Amain+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/actions/workflows/linux-32bit-build-and-test.yaml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Build Status Linux i386&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/timescale/timescaledb/actions/workflows/windows-build-and-test.yaml?query=workflow%3ARegression+branch%3Amain+event%3Aschedule&#34;&gt;&lt;img src=&#34;https://github.com/timescale/timescaledb/actions/workflows/windows-build-and-test.yaml/badge.svg?branch=main&amp;amp;event=schedule&#34; alt=&#34;Windows build status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://scan.coverity.com/projects/timescale-timescaledb&#34;&gt;&lt;img src=&#34;https://scan.coverity.com/projects/timescale-timescaledb/badge.svg?sanitize=true&#34; alt=&#34;Coverity Scan Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://codecov.io/gh/timescale/timescaledb&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/timescale/timescaledb/branch/main/graphs/badge.svg?branch=main&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.bestpractices.dev/projects/8012&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/8012/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to TimescaleDB! See &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; and &lt;a href=&#34;https://github.com/timescale/timescaledb/raw/main/docs/StyleGuide.md&#34;&gt;Code style guide&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Learn about TigerData&lt;/h2&gt; &#xA;&lt;p&gt;TigerData is the fastest PostgreSQL for transactional, analytical and agentic workloads. To learn more about the company and its products, visit &lt;a href=&#34;https://www.tigerdata.com&#34;&gt;tigerdata.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tmux/tmux</title>
    <updated>2025-08-01T01:51:51Z</updated>
    <id>tag:github.com,2025-08-01:/tmux/tmux</id>
    <link href="https://github.com/tmux/tmux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tmux source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to tmux!&lt;/h1&gt; &#xA;&lt;p&gt;tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.&lt;/p&gt; &#xA;&lt;p&gt;This release runs on OpenBSD, FreeBSD, NetBSD, Linux, macOS and Solaris.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;tmux depends on &lt;a href=&#34;https://libevent.org&#34;&gt;libevent&lt;/a&gt; 2.x, available from &lt;a href=&#34;https://github.com/libevent/libevent/releases/latest&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also depends on &lt;a href=&#34;https://www.gnu.org/software/ncurses/&#34;&gt;ncurses&lt;/a&gt;, available from &lt;a href=&#34;https://invisible-mirror.net/archives/ncurses/&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build tmux, a C compiler (for example gcc or clang), make, pkg-config and a suitable yacc (yacc or bison) are needed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Binary packages&lt;/h3&gt; &#xA;&lt;p&gt;Some platforms provide binary packages for tmux, although these are sometimes out of date. Examples are listed on &lt;a href=&#34;https://github.com/tmux/tmux/wiki/Installing&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From release tarball&lt;/h3&gt; &#xA;&lt;p&gt;To build and install tmux from a release tarball, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./configure &amp;amp;&amp;amp; make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;tmux can use the utempter library to update utmp(5), if it is installed - run configure with &lt;code&gt;--enable-utempter&lt;/code&gt; to enable this.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed instructions on building and installing tmux, see &lt;a href=&#34;https://github.com/tmux/tmux/wiki/Installing&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;From version control&lt;/h3&gt; &#xA;&lt;p&gt;To get and build the latest from version control - note that this requires &lt;code&gt;autoconf&lt;/code&gt;, &lt;code&gt;automake&lt;/code&gt; and &lt;code&gt;pkg-config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/tmux/tmux.git&#xA;cd tmux&#xA;sh autogen.sh&#xA;./configure &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports, feature suggestions and especially code contributions are most welcome. Please send by email to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:tmux-users@googlegroups.com&#34;&gt;tmux-users@googlegroups.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or open a GitHub issue or pull request. &lt;strong&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/tmux/tmux/master/CONTRIBUTING.md&#34;&gt;this document&lt;/a&gt; before opening an issue.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is &lt;a href=&#34;https://github.com/tmux/tmux/wiki/Contributing&#34;&gt;a list of suggestions for contributions&lt;/a&gt;. Please feel free to ask on the mailing list if you&#39;re thinking of working on something or need further information.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For documentation on using tmux, see the tmux.1 manpage. View it from the source tree with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nroff -mdoc tmux.1|less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A small example configuration is in &lt;code&gt;example_tmux.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And a bash(1) completion file at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scop/bash-completion/raw/main/completions/tmux&#34;&gt;https://github.com/scop/bash-completion/blob/main/completions/tmux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For debugging, run tmux with &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;-vv&lt;/code&gt; to generate server and client log files in the current directory.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The tmux mailing list for general discussion and bug reports is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/tmux-users&#34;&gt;https://groups.google.com/forum/#!forum/tmux-users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Subscribe by sending an email to:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:tmux-users+subscribe@googlegroups.com&#34;&gt;tmux-users+subscribe@googlegroups.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>