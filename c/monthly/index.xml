<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-01T02:00:19Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>koekeishiya/yabai</title>
    <updated>2024-03-01T02:00:19Z</updated>
    <id>tag:github.com,2024-03-01:/koekeishiya/yabai</id>
    <link href="https://github.com/koekeishiya/yabai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiling window manager for macOS based on binary space partitioning&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;75%&#34; src=&#34;https://raw.githubusercontent.com/koekeishiya/yabai/master/assets/banner/banner.svg?sanitize=true&#34; alt=&#34;Banner&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Tiling window management for the Mac.&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/LICENSE.txt&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/koekeishiya/yabai.svg?color=green&#34; alt=&#34;License Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/doc/yabai.asciidoc&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/view-documentation-green.svg?sanitize=true&#34; alt=&#34;Documentation Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/wiki&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/view-wiki-green.svg?sanitize=true&#34; alt=&#34;Wiki Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/CHANGELOG.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/view-changelog-green.svg?sanitize=true&#34; alt=&#34;Changelog Badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/koekeishiya/yabai/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commits-since/koekeishiya/yabai/latest.svg?color=green&#34; alt=&#34;Version Badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;40%&#34; src=&#34;https://raw.githubusercontent.com/koekeishiya/yabai/master/assets/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt; &#xA;&lt;p&gt;yabai is a window management utility that is designed to work as an extension to the built-in window manager of macOS. yabai allows you to control your windows, spaces and displays freely using an intuitive command line interface and optionally set user-defined keyboard shortcuts using &lt;a href=&#34;https://github.com/koekeishiya/skhd&#34;&gt;↗&amp;nbsp;skhd&lt;/a&gt; and other third-party software.&lt;/p&gt; &#xA;&lt;p&gt;The primary function of yabai is tiling window management; automatically modifying your window layout using a binary space partitioning algorithm to allow you to focus on the content of your windows without distractions. Additional features of yabai include focus-follows-mouse, disabling animations for switching spaces, creating spaces past the limit of 16 spaces, and much more.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/koekeishiya/yabai/wiki&#34;&gt;↗&amp;nbsp;yabai&amp;nbsp;wiki&lt;/a&gt; has both brief and detailed installation instructions for multiple installation methods, and also explains how to uninstall yabai completely.&lt;/li&gt; &#xA; &lt;li&gt;Sample configuration files can be found in the &lt;a href=&#34;https://github.com/koekeishiya/yabai/tree/master/examples&#34;&gt;↗&amp;nbsp;examples&lt;/a&gt; directory. Refer to the &lt;a href=&#34;https://github.com/koekeishiya/yabai/raw/master/doc/yabai.asciidoc&#34;&gt;↗&amp;nbsp;documentation&lt;/a&gt; or the wiki for further information.&lt;/li&gt; &#xA; &lt;li&gt;Keyboard shortcuts can be defined with &lt;a href=&#34;https://github.com/koekeishiya/skhd&#34;&gt;↗&amp;nbsp;skhd&lt;/a&gt; or any other suitable software you may prefer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements and Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Please read the below requirements carefully. Make sure you fulfil all of them before filing an issue.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Requirement&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Operating&amp;nbsp;System&amp;nbsp;Intel x86-64&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Big Sur 11.0.0+, Monterey 12.0.0+, Ventura 13.0.0+, and Sonoma 14.0.0+ is supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Operating&amp;nbsp;System&amp;nbsp;Apple Silicon&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Monterey 12.0.0+, Ventura 13.0.0+, and Sonoma 14.0.0+ is supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Accessibility&amp;nbsp;API&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yabai must be given permission to utilize the Accessibility API and will request access upon launch. The application must be restarted after access has been granted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Screen Recording&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yabai must be given Screen Recording permission if and only if you want to enable window animations, and will request access when necessary. The application must be restarted after access has been granted.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Preferences&amp;nbsp;(macOS 11.x, 12.x)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Mission Control pane, the setting &#34;Displays have separate Spaces&#34; must be enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Settings&amp;nbsp;(macOS 13.x, 14.x)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Desktop &amp;amp; Dock tab, inside the Mission Control pane, the setting &#34;Displays have separate Spaces&#34; must be enabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please also take note of the following caveats.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Caveat&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Integrity&amp;nbsp;Protection (Optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;System Integrity Protection can be (partially) disabled for yabai to inject a scripting addition into Dock.app for controlling windows with functions that require elevated privileges. This enables control of the window server, which is the sole owner of all window connections, and enables additional features of yabai.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Code&amp;nbsp;Signing&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When building from source (or installing from HEAD), it is necessary to codesign the binary so it retains its accessibility and automation privileges when updated or rebuilt.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Preferences&amp;nbsp;(macOS 11.x, 12.x)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Mission Control pane, the setting &#34;Automatically rearrange Spaces based on most recent use&#34; should be disabled for commands that rely on the ordering of spaces to work reliably.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Settings&amp;nbsp;(macOS 13.x, 14.x)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Desktop &amp;amp; Dock tab, inside the Mission Control pane, the setting &#34;Automatically rearrange Spaces based on most recent use&#34; should be disabled for commands that rely on the ordering of spaces to work reliably.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Settings&amp;nbsp;(macOS 14.x)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Desktop &amp;amp; Dock tab, inside the Desktop &amp;amp; Stage Manager pane, the setting &#34;Show Items On Desktop&#34; should be enabled for display and space focus commands to work reliably in multi-display configurations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;System&amp;nbsp;Settings&amp;nbsp;(macOS 14.x)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In the Desktop &amp;amp; Dock tab, inside the Desktop &amp;amp; Stage Manager pane, the setting &#34;Click wallpaper to reveal Desktop&#34; should be set to &#34;Only in Stage Manager&#34; for display and space focus commands to work reliably.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License and Attribution&lt;/h2&gt; &#xA;&lt;p&gt;yabai is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/koekeishiya/yabai/master/LICENSE.txt&#34;&gt;↗&amp;nbsp;MIT&amp;nbsp;License&lt;/a&gt;, a short and simple permissive license with conditions only requiring preservation of copyright and license notices. Licensed works, modifications, and larger works may be distributed under different terms and without source code.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/fools-mate&#34;&gt;@fools-mate&lt;/a&gt; for creating a logo and banner for this project and making them available for free.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/dominiklohmann&#34;&gt;@dominiklohmann&lt;/a&gt; for contributing great documentation, support, and more, for free.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Use at your own discretion. I take no responsibility if anything should happen to your machine while trying to install, test or otherwise use this software in any form. You acknowledge that you understand the potential risk that may come from disabling &lt;a href=&#34;https://support.apple.com/en-us/HT204899&#34;&gt;↗&amp;nbsp;System&amp;nbsp;Integrity&amp;nbsp;Protection&lt;/a&gt; on your system, and I make no recommendation as to whether you should or should not disable System Integrity Protection.&lt;/p&gt; &#xA;&lt;!-- Project internal links --&gt; &#xA;&lt;!-- Links to other GitHub projects/users --&gt; &#xA;&lt;!-- External links --&gt;</summary>
  </entry>
  <entry>
    <title>jarun/nnn</title>
    <updated>2024-03-01T02:00:19Z</updated>
    <id>tag:github.com,2024-03-01:/jarun/nnn</id>
    <link href="https://github.com/jarun/nnn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;n³ The unorthodox terminal file manager&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jarun/nnn/master/misc/logo/logo-128x128.png&#34; alt=&#34;nnn&#34;&gt;&lt;br&gt;nnn - &lt;i&gt;Supercharge your productivity!&lt;/i&gt;&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jarun/nnn/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jarun/nnn.svg?maxAge=600&amp;amp;label=rel&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/nnn/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/nnn.svg?header=repos&#34; alt=&#34;Availability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/jarun/workflows/nnn&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/jarun/nnn.svg?label=circle%20ci&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jarun/nnn/actions&#34;&gt;&lt;img src=&#34;https://github.com/jarun/nnn/workflows/ci/badge.svg?branch=master&#34; alt=&#34;GitHub CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Privacy-invasive_software&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/privacy-✓-crimson?maxAge=2592000&#34; alt=&#34;Privacy Awareness&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jarun/nnn/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/©-BSD%202--Clause-important.svg?maxAge=2592000&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;http://i.imgur.com/kOld6HT.gif&#34;&gt;&lt;img src=&#34;https://i.imgur.com/NUsSA2u.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;[&lt;a href=&#34;https://github.com/jarun/nnn#features&#34;&gt;Features&lt;/a&gt;] [&lt;a href=&#34;https://github.com/jarun/nnn#quickstart&#34;&gt;Quickstart&lt;/a&gt;] [&lt;a href=&#34;https://github.com/jarun/nnn/tree/master/plugins#nnn-plugins&#34;&gt;Plugins&lt;/a&gt;] [&lt;a href=&#34;https://github.com/jarun/nnn/wiki&#34;&gt;Wiki&lt;/a&gt;]&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nnn&lt;/code&gt; (&lt;em&gt;n³&lt;/em&gt;) is a full-featured terminal file manager. It&#39;s tiny, nearly 0-config and &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Performance&#34;&gt;incredibly fast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to be unobtrusive with smart workflows to match the trains of thought.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nnn&lt;/code&gt; can analyze disk usage, batch rename, launch apps and pick files. The plugin repository has tons of plugins to extend the capabilities further e.g. &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Live-previews&#34;&gt;live previews&lt;/a&gt;, (un)mount disks, find &amp;amp; list, file/dir diff, upload files. A &lt;a href=&#34;https://github.com/jarun/nnn/tree/master/patches&#34;&gt;patch framework&lt;/a&gt; hosts sizable user-submitted patches which are subjective in nature.&lt;/p&gt; &#xA;&lt;p&gt;Independent (neo)vim plugins - &lt;a href=&#34;https://github.com/mcchrish/nnn.vim&#34;&gt;nnn.vim&lt;/a&gt;, &lt;a href=&#34;https://github.com/voldikss/vim-floaterm#nnn&#34;&gt;vim-floaterm nnn wrapper&lt;/a&gt; and &lt;a href=&#34;https://github.com/luukvbaal/nnn.nvim&#34;&gt;nnn.nvim&lt;/a&gt; (neovim exclusive).&lt;/p&gt; &#xA;&lt;p&gt;Runs on the Pi, &lt;a href=&#34;https://www.youtube.com/embed/AbaauM7gUJw&#34;&gt;Termux&lt;/a&gt; (Android), Linux, macOS, BSD, Haiku, Cygwin, WSL, across DEs or a strictly CLI env.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jarun/nnn/wiki/Basic-use-cases#the_nnn-magic&#34;&gt;&lt;em&gt;(there&#39;s more)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quality &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Privacy-aware (no unconfirmed user data collection)&lt;/li&gt; &#xA;   &lt;li&gt;POSIX-compliant, follows Linux kernel coding style&lt;/li&gt; &#xA;   &lt;li&gt;Highly optimized, static analysis integrated code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Frugal &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Typically needs less than 3.5MB resident memory&lt;/li&gt; &#xA;   &lt;li&gt;Works with 8 colors (and xterm 256 colors)&lt;/li&gt; &#xA;   &lt;li&gt;Disk-IO sensitive (few disk reads and writes)&lt;/li&gt; &#xA;   &lt;li&gt;No FPU usage (all integer maths, even for file size)&lt;/li&gt; &#xA;   &lt;li&gt;Minimizes screen refresh with fast line redraws&lt;/li&gt; &#xA;   &lt;li&gt;Tiny binary (typically around 100KB)&lt;/li&gt; &#xA;   &lt;li&gt;1-column mode for smaller terminals and form factors&lt;/li&gt; &#xA;   &lt;li&gt;Hackable - compile in/out features and dependencies&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Portable &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Language-agnostic plugins&lt;/li&gt; &#xA;   &lt;li&gt;Static binary available (no need to install)&lt;/li&gt; &#xA;   &lt;li&gt;Minimal library deps, easy to compile&lt;/li&gt; &#xA;   &lt;li&gt;No config file, minimal config with sensible defaults&lt;/li&gt; &#xA;   &lt;li&gt;Plugin to backup configuration&lt;/li&gt; &#xA;   &lt;li&gt;Widely available on many packagers&lt;/li&gt; &#xA;   &lt;li&gt;Touch enabled, handheld-friendly shortcuts&lt;/li&gt; &#xA;   &lt;li&gt;Unicode support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Light (default), detail&lt;/li&gt; &#xA;   &lt;li&gt;Disk usage analyzer (block/apparent)&lt;/li&gt; &#xA;   &lt;li&gt;File picker, (neo)vim plugin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Filter with automatic dir entry on unique match&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;Type-to-nav&lt;/em&gt; (turbo navigation/always filter) mode&lt;/li&gt; &#xA;   &lt;li&gt;Contexts (&lt;em&gt;aka&lt;/em&gt; tabs/workspaces) with custom colors&lt;/li&gt; &#xA;   &lt;li&gt;Sessions, bookmarks, mark and visit a dir&lt;/li&gt; &#xA;   &lt;li&gt;Remote mounts (needs &lt;code&gt;sshfs&lt;/code&gt;, &lt;code&gt;rclone&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Familiar shortcuts (arrows, &lt;kbd&gt;~&lt;/kbd&gt;, &lt;kbd&gt;-&lt;/kbd&gt;, &lt;kbd&gt;@&lt;/kbd&gt;), quick look-up&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; on quit (&lt;em&gt;easy&lt;/em&gt; shell integration)&lt;/li&gt; &#xA;   &lt;li&gt;Proceed to next file on file open and selection&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Search &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Instant filtering with &lt;em&gt;search-as-you-type&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Regex (POSIX/PCRE) and string (default) filters&lt;/li&gt; &#xA;   &lt;li&gt;Subtree search plugin to open or edit files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sort &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ordered pure numeric names by default (visit &lt;code&gt;/proc&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Case-insensitive version (&lt;em&gt;aka&lt;/em&gt; natural) sort&lt;/li&gt; &#xA;   &lt;li&gt;By name, access/change/mod (default) time, size, extn&lt;/li&gt; &#xA;   &lt;li&gt;Reverse sort&lt;/li&gt; &#xA;   &lt;li&gt;Directory-specific ordering&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mimes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Preview hovered files in FIFO-based previewer&lt;/li&gt; &#xA;   &lt;li&gt;Open with desktop opener or specify a custom opener&lt;/li&gt; &#xA;   &lt;li&gt;File-specific colors (or minimal &lt;em&gt;dirs in context color&lt;/em&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Icons and Emojis support (customize and compile-in)&lt;/li&gt; &#xA;   &lt;li&gt;Plugin for image, video and audio thumbnails&lt;/li&gt; &#xA;   &lt;li&gt;Create, list, extract (to), mount (FUSE based) archives&lt;/li&gt; &#xA;   &lt;li&gt;Option to open all text files in &lt;code&gt;$EDITOR&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Convenience &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Detailed file stats and mime information&lt;/li&gt; &#xA;   &lt;li&gt;Run plugins and custom commands with hotkeys&lt;/li&gt; &#xA;   &lt;li&gt;FreeDesktop compliant trash utility integration&lt;/li&gt; &#xA;   &lt;li&gt;Cross-dir file/all/range selection&lt;/li&gt; &#xA;   &lt;li&gt;Create (with parents), rename, duplicate files and dirs&lt;/li&gt; &#xA;   &lt;li&gt;Create new file or directory (tree) on startup&lt;/li&gt; &#xA;   &lt;li&gt;Batch renamer for selection or dir&lt;/li&gt; &#xA;   &lt;li&gt;List input stream of file paths from stdin or plugin&lt;/li&gt; &#xA;   &lt;li&gt;Copy (as), move (as), delete, archive, link selection&lt;/li&gt; &#xA;   &lt;li&gt;Dir updates, notification on &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; completion&lt;/li&gt; &#xA;   &lt;li&gt;Copy file paths to system clipboard on select&lt;/li&gt; &#xA;   &lt;li&gt;Launch apps, run commands, spawn a shell, toggle exe&lt;/li&gt; &#xA;   &lt;li&gt;Access context paths/files at prompt or spawned shell&lt;/li&gt; &#xA;   &lt;li&gt;Lock terminal after configurable idle timeout&lt;/li&gt; &#xA;   &lt;li&gt;Capture and show output of a program in help screen&lt;/li&gt; &#xA;   &lt;li&gt;Basic support for screen readers and braille displays&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarun/nnn/wiki/Usage&#34;&gt;Install&lt;/a&gt; &lt;code&gt;nnn&lt;/code&gt; and the dependencies you need.&lt;/li&gt; &#xA; &lt;li&gt;The desktop opener is default. Use &lt;code&gt;-e&lt;/code&gt; to open text files in the terminal. Optionally &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Basic-use-cases#detached-text&#34;&gt;open detached&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Configure &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Basic-use-cases#configure-cd-on-quit&#34;&gt;&lt;code&gt;cd&lt;/code&gt; on quit&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarun/nnn/wiki/Basic-use-cases#sync-subshell-pwd&#34;&gt;Sync subshell &lt;code&gt;$PWD&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;nnn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarun/nnn/tree/master/plugins#installation&#34;&gt;Install plugins&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;-x&lt;/code&gt; to sync selection to clipboard, show notis on &lt;code&gt;cp&lt;/code&gt;, &lt;code&gt;mv&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; and set xterm title.&lt;/li&gt; &#xA; &lt;li&gt;For a CLI-only environment, set &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Usage#configuration&#34;&gt;&lt;code&gt;NNN_OPENER&lt;/code&gt;&lt;/a&gt; to &lt;a href=&#34;https://github.com/jarun/nnn/raw/master/plugins/nuke&#34;&gt;&lt;code&gt;nuke&lt;/code&gt;&lt;/a&gt;. Use option &lt;code&gt;-c&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bid &lt;code&gt;ls&lt;/code&gt; goodbye! &lt;code&gt;alias ls=&#39;nnn -de&#39;&lt;/code&gt; &lt;span&gt;😎&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Live-previews&#34;&gt;Live previews&lt;/a&gt; and &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; Wiki pages.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Don&#39;t memorize! Arrows, &lt;kbd&gt;/&lt;/kbd&gt;, &lt;kbd&gt;q&lt;/kbd&gt; suffice. &lt;kbd&gt;Tab&lt;/kbd&gt; creates and/or cycles contexts. &lt;kbd&gt;?&lt;/kbd&gt; lists shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/embed/-knZwdd1ScU&#34;&gt;&lt;img src=&#34;https://i.imgur.com/TN3xYQz.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jarun/nnn/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/RTFM-nnn%20Wiki-important?maxAge=2592000&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/embed/AbaauM7gUJw&#34;&gt;nnn file manager on Termux (Android)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/embed/1QXU4XSqXNo&#34;&gt;NNN File Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5W9ja0DQjSY&amp;amp;t=2059s&#34;&gt;This Week in Linux 114 - TuxDigital&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/embed/il2Fm-KJJfM&#34;&gt;nnn file manager basics - Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/embed/U2n5aGqou9E&#34;&gt;I&#39;M GOING TO USE THE NNN FILE BROWSER! 😮&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/embed/KuJHo-aO_FA&#34;&gt;NNN: Is This Terminal File Manager As Good As People Say?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/embed/cnzuzcCPYsk&#34;&gt;nnn - A File Manager (By Uoou, again.)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Elsewhere&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.addictivetips.com/ubuntu-linux-tips/navigate-linux-filesystem/&#34;&gt;AddictiveTips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Nnn&#34;&gt;ArchWiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fossmint.com/nnn-linux-terminal-file-browser/&#34;&gt;FOSSMint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ghacks.net/2019/11/01/nnn-is-an-excellent-command-line-based-file-manager-for-linux-macos-and-bsds/&#34;&gt;gHacks Tech News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hacker News [&lt;a href=&#34;https://news.ycombinator.com/item?id=18520898&#34;&gt;1&lt;/a&gt;] [&lt;a href=&#34;https://news.ycombinator.com/item?id=19850656&#34;&gt;2&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itsfoss.com/nnn-file-browser-linux/&#34;&gt;It&#39;s FOSS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linuxformat.com/archives?issue=265&#34;&gt;Linux Format Issue 265; Manage files with nnn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinuxLinks [&lt;a href=&#34;https://www.linuxlinks.com/nnn-fast-and-flexible-file-manager/&#34;&gt;1&lt;/a&gt;] [&lt;a href=&#34;https://www.linuxlinks.com/bestconsolefilemanagers/&#34;&gt;2&lt;/a&gt;] [&lt;a href=&#34;https://www.linuxlinks.com/excellent-system-tools-nnn-portable-terminal-file-manager/&#34;&gt;3&lt;/a&gt;]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linux-magazine.com/Issues/2017/205/FOSSPicks/(offset)/15&#34;&gt;Linux Magazine; FOSSPicks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.maketecheasier.com/nnn-file-manager-terminal/&#34;&gt;Make Tech Easier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opensource.com/article/22/12/linux-file-manager-nnn&#34;&gt;Opensource.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opensourceforu.com/2019/12/nnn-this-feature-rich-terminal-file-manager-will-enhance-your-productivity/&#34;&gt;Open Source For You&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pclosmag.com/html/Issues/202106/page08.html&#34;&gt;PCLinuxOS Magazine Issue June 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://suckless.org/rocks/&#34;&gt;Suckless Rocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fullcirclemagazine.org/issue-135/&#34;&gt;Ubuntu Full Circle Magazine Issue 135; Review: nnn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://books.google.com/books?id=MqjDDwAAQBAJ&amp;amp;pg=PA32&#34;&gt;Using and Administering Linux: Volume 2: Zero to SysAdmin: Advanced Topics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Nnn_(file_manager)&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jarun&#34;&gt;Arun Prakash Jana&lt;/a&gt; (Copyright © 2016-2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xACE&#34;&gt;0xACE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/annagrram&#34;&gt;Anna Arad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KlzXS&#34;&gt;KlzXS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leovilok&#34;&gt;Léo Villeveygoux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luukvbaal&#34;&gt;Luuk van Baal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/NRK&#34;&gt;NRK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sjmulder&#34;&gt;Sijmen J. Mulder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and other contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://github.com/jarun/nnn/issues/1546&#34;&gt;Tracker&lt;/a&gt; thread for a list of features in progress and anything up for grabs. Feel free to &lt;a href=&#34;https://github.com/jarun/nnn/discussions&#34;&gt;discuss&lt;/a&gt; new ideas or enhancement requests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/zstd</title>
    <updated>2024-03-01T02:00:19Z</updated>
    <id>tag:github.com,2024-03-01:/facebook/zstd</id>
    <link href="https://github.com/facebook/zstd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zstandard - Fast real-time compression algorithm&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/zstd_logo86.png&#34; alt=&#34;Zstandard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zstandard&lt;/strong&gt;, or &lt;code&gt;zstd&lt;/code&gt; as short version, is a fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios. It&#39;s backed by a very fast entropy stage, provided by &lt;a href=&#34;https://github.com/Cyan4973/FiniteStateEntropy&#34;&gt;Huff0 and FSE library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Zstandard&#39;s format is stable and documented in &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8878&#34;&gt;RFC8878&lt;/a&gt;. Multiple independent implementations are already available. This repository represents the reference implementation, provided as an open-source dual &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/LICENSE&#34;&gt;BSD&lt;/a&gt; OR &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/COPYING&#34;&gt;GPLv2&lt;/a&gt; licensed &lt;strong&gt;C&lt;/strong&gt; library, and a command line utility producing and decoding &lt;code&gt;.zst&lt;/code&gt;, &lt;code&gt;.gz&lt;/code&gt;, &lt;code&gt;.xz&lt;/code&gt; and &lt;code&gt;.lz4&lt;/code&gt; files. Should your project require another programming language, a list of known ports and bindings is provided on &lt;a href=&#34;https://facebook.github.io/zstd/#other-languages&#34;&gt;Zstandard homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Development branch status:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/facebook/zstd&#34;&gt;&lt;img src=&#34;https://api.travis-ci.com/facebook/zstd.svg?branch=dev&#34; alt=&#34;Build Status&#34; title=&#34;Continuous Integration test suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/zstd&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/zstd/tree/dev.svg?style=shield&#34; alt=&#34;Build status&#34; title=&#34;Short test suite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/facebook/zstd&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/facebook/zstd.svg?branch=dev&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:zstd&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/zstd.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;For reference, several fast compression algorithms were tested and compared on a desktop running Ubuntu 20.04 (&lt;code&gt;Linux 5.11.0-41-generic&lt;/code&gt;), with a Core i7-9700K CPU @ 4.9GHz, using &lt;a href=&#34;https://github.com/inikep/lzbench&#34;&gt;lzbench&lt;/a&gt;, an open-source in-memory benchmark by @inikep compiled with &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt; 9.3.0, on the &lt;a href=&#34;https://sun.aei.polsl.pl//~sdeor/index.php?page=silesia&#34;&gt;Silesia compression corpus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compressor name&lt;/th&gt; &#xA;   &lt;th&gt;Ratio&lt;/th&gt; &#xA;   &lt;th&gt;Compression&lt;/th&gt; &#xA;   &lt;th&gt;Decompress.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 -1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.887&lt;/td&gt; &#xA;   &lt;td&gt;530 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;1700 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; 1.2.11 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.743&lt;/td&gt; &#xA;   &lt;td&gt;95 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;400 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;brotli 1.0.9 -0&lt;/td&gt; &#xA;   &lt;td&gt;2.702&lt;/td&gt; &#xA;   &lt;td&gt;395 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;450 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 --fast=1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.437&lt;/td&gt; &#xA;   &lt;td&gt;600 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2150 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 --fast=3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.239&lt;/td&gt; &#xA;   &lt;td&gt;670 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2250 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quicklz 1.5.0 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.238&lt;/td&gt; &#xA;   &lt;td&gt;540 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;760 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;zstd 1.5.1 --fast=4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.148&lt;/td&gt; &#xA;   &lt;td&gt;710 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;2300 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lzo1x 2.10 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.106&lt;/td&gt; &#xA;   &lt;td&gt;660 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;845 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://lz4.github.io/lz4/&#34;&gt;lz4&lt;/a&gt; 1.9.3&lt;/td&gt; &#xA;   &lt;td&gt;2.101&lt;/td&gt; &#xA;   &lt;td&gt;740 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;4500 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lzf 3.6 -1&lt;/td&gt; &#xA;   &lt;td&gt;2.077&lt;/td&gt; &#xA;   &lt;td&gt;410 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;830 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;snappy 1.1.9&lt;/td&gt; &#xA;   &lt;td&gt;2.073&lt;/td&gt; &#xA;   &lt;td&gt;550 MB/s&lt;/td&gt; &#xA;   &lt;td&gt;1750 MB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The negative compression levels, specified with &lt;code&gt;--fast=#&lt;/code&gt;, offer faster compression and decompression speed at the cost of compression ratio (compared to level 1).&lt;/p&gt; &#xA;&lt;p&gt;Zstd can also offer stronger compression ratios at the cost of compression speed. Speed vs Compression trade-off is configurable by small increments. Decompression speed is preserved and remains roughly the same at all settings, a property shared by most LZ compression algorithms, such as &lt;a href=&#34;https://www.zlib.net/&#34;&gt;zlib&lt;/a&gt; or lzma.&lt;/p&gt; &#xA;&lt;p&gt;The following tests were run on a server running Linux Debian (&lt;code&gt;Linux version 4.14.0-3-amd64&lt;/code&gt;) with a Core i7-6700K CPU @ 4.0GHz, using &lt;a href=&#34;https://github.com/inikep/lzbench&#34;&gt;lzbench&lt;/a&gt;, an open-source in-memory benchmark by @inikep compiled with &lt;a href=&#34;https://gcc.gnu.org/&#34;&gt;gcc&lt;/a&gt; 7.3.0, on the &lt;a href=&#34;https://sun.aei.polsl.pl//~sdeor/index.php?page=silesia&#34;&gt;Silesia compression corpus&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compression Speed vs Ratio&lt;/th&gt; &#xA;   &lt;th&gt;Decompression Speed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/CSpeed2.png&#34; alt=&#34;Compression Speed vs Ratio&#34; title=&#34;Compression Speed vs Ratio&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/DSpeed3.png&#34; alt=&#34;Decompression Speed&#34; title=&#34;Decompression Speed&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A few other algorithms can produce higher compression ratios at slower speeds, falling outside of the graph. For a larger picture including slow modes, &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/DCspeed5.png&#34;&gt;click on this link&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The case for Small Data compression&lt;/h2&gt; &#xA;&lt;p&gt;Previous charts provide results applicable to typical file and stream scenarios (several MB). Small data comes with different perspectives.&lt;/p&gt; &#xA;&lt;p&gt;The smaller the amount of data to compress, the more difficult it is to compress. This problem is common to all compression algorithms, and reason is, compression algorithms learn from past data how to compress future data. But at the beginning of a new data set, there is no &#34;past&#34; to build upon.&lt;/p&gt; &#xA;&lt;p&gt;To solve this situation, Zstd offers a &lt;strong&gt;training mode&lt;/strong&gt;, which can be used to tune the algorithm for a selected type of data. Training Zstandard is achieved by providing it with a few samples (one file per sample). The result of this training is stored in a file called &#34;dictionary&#34;, which must be loaded before compression and decompression. Using this dictionary, the compression ratio achievable on small data improves dramatically.&lt;/p&gt; &#xA;&lt;p&gt;The following example uses the &lt;code&gt;github-users&lt;/code&gt; &lt;a href=&#34;https://github.com/facebook/zstd/releases/tag/v1.1.3&#34;&gt;sample set&lt;/a&gt;, created from &lt;a href=&#34;https://developer.github.com/v3/users/#get-all-users&#34;&gt;github public API&lt;/a&gt;. It consists of roughly 10K records weighing about 1KB each.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Compression Ratio&lt;/th&gt; &#xA;   &lt;th&gt;Compression Speed&lt;/th&gt; &#xA;   &lt;th&gt;Decompression Speed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/dict-cr.png&#34; alt=&#34;Compression Ratio&#34; title=&#34;Compression Ratio&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/dict-cs.png&#34; alt=&#34;Compression Speed&#34; title=&#34;Compression Speed&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/doc/images/dict-ds.png&#34; alt=&#34;Decompression Speed&#34; title=&#34;Decompression Speed&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These compression gains are achieved while simultaneously providing &lt;em&gt;faster&lt;/em&gt; compression and decompression speeds.&lt;/p&gt; &#xA;&lt;p&gt;Training works if there is some correlation in a family of small data samples. The more data-specific a dictionary is, the more efficient it is (there is no &lt;em&gt;universal dictionary&lt;/em&gt;). Hence, deploying one dictionary per type of data will provide the greatest benefits. Dictionary gains are mostly effective in the first few KB. Then, the compression algorithm will gradually use previously decoded content to better compress the rest of the file.&lt;/p&gt; &#xA;&lt;h3&gt;Dictionary compression How To:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the dictionary&lt;/p&gt; &lt;p&gt;&lt;code&gt;zstd --train FullPathToTrainingSet/* -o dictionaryName&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compress with dictionary&lt;/p&gt; &lt;p&gt;&lt;code&gt;zstd -D dictionaryName FILE&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Decompress with dictionary&lt;/p&gt; &lt;p&gt;&lt;code&gt;zstd -D dictionaryName --decompress FILE.zst&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;make&lt;/code&gt; is the officially maintained build system of this project. All other build systems are &#34;compatible&#34; and 3rd-party maintained, they may feature small differences in advanced options. When your system allows it, prefer using &lt;code&gt;make&lt;/code&gt; to build &lt;code&gt;zstd&lt;/code&gt; and &lt;code&gt;libzstd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;p&gt;If your system is compatible with standard &lt;code&gt;make&lt;/code&gt; (or &lt;code&gt;gmake&lt;/code&gt;), invoking &lt;code&gt;make&lt;/code&gt; in root directory will generate &lt;code&gt;zstd&lt;/code&gt; cli in root directory. It will also create &lt;code&gt;libzstd&lt;/code&gt; into &lt;code&gt;lib/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Other available options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make install&lt;/code&gt; : create and install zstd cli, library and man pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make check&lt;/code&gt; : create and run &lt;code&gt;zstd&lt;/code&gt;, test its behavior on local platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;Makefile&lt;/code&gt; follows the &lt;a href=&#34;https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html&#34;&gt;GNU Standard Makefile conventions&lt;/a&gt;, allowing staged install, standard flags, directory variables and command variables.&lt;/p&gt; &#xA;&lt;p&gt;For advanced use cases, specialized compilation flags which control binary generation are documented in &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/lib/README.md#modular-build&#34;&gt;&lt;code&gt;lib/README.md&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;libzstd&lt;/code&gt; library and in &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/programs/README.md#compilation-variables&#34;&gt;&lt;code&gt;programs/README.md&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;zstd&lt;/code&gt; CLI.&lt;/p&gt; &#xA;&lt;h3&gt;cmake&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;cmake&lt;/code&gt; project generator is provided within &lt;code&gt;build/cmake&lt;/code&gt;. It can generate Makefiles or other build scripts to create &lt;code&gt;zstd&lt;/code&gt; binary, and &lt;code&gt;libzstd&lt;/code&gt; dynamic and static libraries.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;CMAKE_BUILD_TYPE&lt;/code&gt; is set to &lt;code&gt;Release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Support for Fat (Universal2) Output&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;zstd&lt;/code&gt; can be built and installed with support for both Apple Silicon (M1/M2) as well as Intel by using CMake&#39;s Universal2 support. To perform a Fat/Universal2 build and install use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake -B build-cmake-debug -S build/cmake -G Ninja -DCMAKE_OSX_ARCHITECTURES=&#34;x86_64;x86_64h;arm64&#34;&#xA;cd build-cmake-debug&#xA;ninja&#xA;sudo ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;p&gt;A Meson project is provided within &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/build/meson&#34;&gt;&lt;code&gt;build/meson&lt;/code&gt;&lt;/a&gt;. Follow build instructions in that directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also take a look at &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; file for an example about how Meson is used to build this project.&lt;/p&gt; &#xA;&lt;p&gt;Note that default build type is &lt;strong&gt;release&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;VCPKG&lt;/h3&gt; &#xA;&lt;p&gt;You can build and install zstd &lt;a href=&#34;https://github.com/Microsoft/vcpkg/&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install zstd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The zstd port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;Going into &lt;code&gt;build&lt;/code&gt; directory, you will find additional possibilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Projects for Visual Studio 2005, 2008 and 2010. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VS2010 project is compatible with VS2012, VS2013, VS2015 and VS2017.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automated build scripts for Visual compiler by &lt;a href=&#34;https://github.com/KrzysFR&#34;&gt;@KrzysFR&lt;/a&gt;, in &lt;code&gt;build/VS_scripts&lt;/code&gt;, which will build &lt;code&gt;zstd&lt;/code&gt; cli and &lt;code&gt;libzstd&lt;/code&gt; library without any need to open Visual Studio solution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buck&lt;/h3&gt; &#xA;&lt;p&gt;You can build the zstd binary via buck by executing: &lt;code&gt;buck build programs:zstd&lt;/code&gt; from the root of the repo. The output binary will be in &lt;code&gt;buck-out/gen/programs/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;You easily can integrate zstd into your Bazel project by using the module hosted on the &lt;a href=&#34;https://registry.bazel.build/modules/zstd&#34;&gt;Bazel Central Repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;You can run quick local smoke tests by running &lt;code&gt;make check&lt;/code&gt;. If you can&#39;t use &lt;code&gt;make&lt;/code&gt;, execute the &lt;code&gt;playTest.sh&lt;/code&gt; script from the &lt;code&gt;src/tests&lt;/code&gt; directory. Two env variables &lt;code&gt;$ZSTD_BIN&lt;/code&gt; and &lt;code&gt;$DATAGEN_BIN&lt;/code&gt; are needed for the test script to locate the &lt;code&gt;zstd&lt;/code&gt; and &lt;code&gt;datagen&lt;/code&gt; binary. For information on CI testing, please refer to &lt;code&gt;TESTING.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Zstandard is currently deployed within Facebook and many other large cloud infrastructures. It is run continuously to compress large amounts of data in multiple formats and use cases. Zstandard is considered safe for production environments.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Zstandard is dual-licensed under &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/LICENSE&#34;&gt;BSD&lt;/a&gt; OR &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/COPYING&#34;&gt;GPLv2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;dev&lt;/code&gt; branch is the one where all contributions are merged before reaching &lt;code&gt;release&lt;/code&gt;. If you plan to propose a patch, please commit into the &lt;code&gt;dev&lt;/code&gt; branch, or its own feature branch. Direct commit to &lt;code&gt;release&lt;/code&gt; are not permitted. For more information, please read &lt;a href=&#34;https://raw.githubusercontent.com/facebook/zstd/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>