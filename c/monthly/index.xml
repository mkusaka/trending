<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:49:07Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peng-zhihui/HelloWord-Keyboard</title>
    <updated>2022-09-01T01:49:07Z</updated>
    <id>tag:github.com,2022-09-01:/peng-zhihui/HelloWord-Keyboard</id>
    <link href="https://github.com/peng-zhihui/HelloWord-Keyboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;【瀚文】HelloWord-Smart Keyboard&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw1.jpg&#34; alt=&#34;hw1&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;瀚文&lt;/code&gt; 智能键盘是一把我为自己使用需求设计的 &lt;strong&gt;多功能&lt;/strong&gt;、&lt;strong&gt;模块化&lt;/strong&gt; 机械键盘。&lt;/p&gt; &#xA; &lt;p&gt;键盘使用模块化设计，左侧的&lt;strong&gt;多功能场景交互模块&lt;/strong&gt;可以替换成各种自定义组件，默认使用的是一个带电子墨水屏以及FOC力反馈旋钮的&lt;code&gt;Dynamic组件&lt;/code&gt;；键盘使用我自己开发的基于ARM Cortex-M芯片的键盘固件以及模块固件；键盘本体使用移位寄存器方式实现优化的按键扫描电路；模块以及键盘本体可以单独使用，也可以通过串口协议进行相互通信和调用。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;本仓库开源的资料内容包括：&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;瀚文本体硬件设计的10块PCB设计源文件，提供立创EDA专业版的文件格式&lt;/li&gt; &#xA;  &lt;li&gt;外壳设计结构文件&lt;/li&gt; &#xA;  &lt;li&gt;键盘本体的固件源码（已相对完善）&lt;/li&gt; &#xA;  &lt;li&gt;Dynamic组件的固件源码（已完成框架，更多APP扩展WIP）&lt;/li&gt; &#xA;  &lt;li&gt;键盘二次开发SDK（开发中）&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;键盘功能演示可以参考：&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV19V4y1J7Hx&#34;&gt;【自制】我做了一把 模 块 化 机 械 键 盘 !【软核】_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mGShD9ZER1c&#34;&gt;I Made A Customized Modular Keyboard ! - YouTube&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：Issues里面是讨论项目开发相关话题的，不要在里面发无意义的消息，不然watch了仓库的人都会收到通知邮件会给别人造成困扰的！！！灌水可以在仓库的Discuss里讨论！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1. 项目说明&lt;/h2&gt; &#xA;&lt;h3&gt;1.0 更新说明：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.8.31更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;添加&lt;code&gt;Test-Dynamic-fw.bin&lt;/code&gt;测试固件，烧录到模块之后可以体验各种不同力反馈的滚轮效果。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;注意测试版固件会在每次上电之后校准电机，如果校准失败需要重新上电（未来正式使用的时候校准只需要一次就行了）;&lt;/li&gt; &#xA;    &lt;li&gt;模块上两个按钮可以切换不同模式;&lt;/li&gt; &#xA;    &lt;li&gt;硬件上有一个地方需要注意的地方是模块的fpc线一定要选短一点的，不然电阻太大会影响压降，同时需要先自己确认一下编码器是正常工作的（可以用Debug查看编码器数据）。&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.8.22更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加STEP格式的3D模型文件，全套包括定位板的模型都发出来了.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.8.20更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PCB工程更新，见仓库的工程链接，所有元器件能在立创直接下单的都改成了对应的封装，方便大家配置BOM.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.8.13更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新打样的PCB已经收到，但是由于何同学这周发视频，为了避免带来不必要的压力，所以决定错峰下周六再把PCB工程更新（doge）.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;22.7.31更新：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;添加键盘硬件所有设计原理图文件（电路还有些bug没修复，如视频里的飞线，会晚些等新版PCB打样收到验证没问题后更新）&lt;/li&gt; &#xA; &lt;li&gt;添加键盘固件源代码&lt;/li&gt; &#xA; &lt;li&gt;添加Dynamic组件源代码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.1 项目文件说明：&lt;/h3&gt; &#xA;&lt;h4&gt;1.1.1 Hardware&lt;/h4&gt; &#xA;&lt;p&gt;Hardware文件夹内是瀚文键盘里面用到的所有电路的原理图和PCB文件，目前提供的是&lt;a href=&#34;https://oshwhub.com/pengzhihui/b11afae464c54a3e8d0f77e1f92dc7b7&#34;&gt;立创EDA专业版&lt;/a&gt;格式的源文件以及Gerber格式的光绘文件用于提供给厂家进行直接加工。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw5.png&#34; alt=&#34;hw0&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;一共有如下几块板子：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Keyboard&lt;/strong&gt;：主键盘的PCB，控制器为STM32F103，可以配合底座单独使用，提供常规按键输入功能，带全按键独立RGB灯。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Ctrl&lt;/strong&gt;：左侧Dynamic组件的PCB，控制器为STM32F405，可以配合底座单独使用，提供FOC力反馈旋钮、电子墨水屏显示、OLED显示、RGB灯等功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Connector&lt;/strong&gt;：主键盘用于连接底座的触点PCB，通过FFC排线与键盘PCB连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Connector-Ctrl&lt;/strong&gt;：Dynamic组件用于连接底座的触点PCB，通过FFC排线与Dynamic组件PCB连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Encoder&lt;/strong&gt;：磁编码器PCB，用于对无刷电机进行位置反馈，需要配合一个径向充磁的永磁铁工作。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Hub1&lt;/strong&gt;：底座上扩展出的两个额外USB-A接口转接PCB，通过FFC排线和TypeC接口板连接。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Hub2&lt;/strong&gt;：底座上扩展出的两个额外USB-A接口的母座PCB，预留的是USB3.0母座和引脚，但是目前只使用到了2.0接口，未来可以升级到USB3.0的HUB。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-TypeC&lt;/strong&gt;：底座上用于连接电脑的TypeC接口PCB，板载了电源充电管理芯片，以及USB-HUB芯片，通过FFC排线连接其余模块。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-OLED&lt;/strong&gt;：Dynamic组件上OLED屏幕的最小驱动电路以及转接板。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-TouchBar&lt;/strong&gt;：可选的电容触摸条模块PCB，使用6按键电容触摸芯片组成一个线性感应阵列，通过FFC排线和主键盘PCB连接。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1.1.2 Firmware&lt;/h4&gt; &#xA;&lt;p&gt;Firmware中提供了上面所有板子的固件源码，以及&lt;strong&gt;预编译好的bin固件&lt;/strong&gt;可以直接烧录，主要包含以下两个工程：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;HelloWord-Keyboard-fw&lt;/strong&gt;：主键盘的固件，主要实现了基于硬件SPI和移位寄存器的高速按键扫描、基于硬件SPI&amp;amp;DMA的总线式RGB灯控制、HID高速设备键盘枚举&amp;amp;报文协议实现、非易失存储配置、多层按键映射等功能。&lt;/li&gt; &#xA; &lt;li&gt;**HelloWord-Dynamic-fw：**Dynamic组件的固件，主要实现了基于FOC的电机控制代码、可配置触感封装类、电子墨水屏驱动、OLED驱动、USB全速复合设备枚举和通信协议、RGB灯控制等功能。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;工程都是基于STM32HAL实现的，所以提供了对应的&lt;code&gt;.ioc&lt;/code&gt;文件，可以自行用STM32CubeMX打开，生成对应的keil或者STM32IDE工程文件。当让也可以像我一样，用CLion或者STM32CubeIDE进行编译和下载。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;_Release&lt;/code&gt;文件夹里是预编译好的bin文件，可以用&lt;strong&gt;ST-Link Utillity&lt;/strong&gt;或者STM32CubeProgrammer之类的软件直接下载到芯片。&lt;/p&gt; &#xA;&lt;p&gt;关于固件的实现细节后文有讲解。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;把CLion变成STM32的IDE的方法参考我之前发的一篇教程：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/145801160&#34;&gt;配置CLion用于STM32开发【优雅の嵌入式开发】&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1.1.3 Software&lt;/h4&gt; &#xA;&lt;p&gt;Software中提供了一些用于和键盘交互的电脑端上位机软件，包括视频里演示的傻瓜化修改墨水屏图片的上位机软件，以及后续会逐步补充用于&lt;strong&gt;修改键位的图形化软件&lt;/strong&gt;给&lt;strong&gt;模块添加APP&lt;/strong&gt;的应用商店软件，这些还在开发中。&lt;/p&gt; &#xA;&lt;h4&gt;1.1.4 Tools&lt;/h4&gt; &#xA;&lt;p&gt;Tools主要是提供一些三方的工具软件，比如&lt;strong&gt;STM32 ST-LINK Utility&lt;/strong&gt; 、用于安装驱动的&lt;strong&gt;zadig&lt;/strong&gt;等等。&lt;/p&gt; &#xA;&lt;h4&gt;1.1.5 3D Model&lt;/h4&gt; &#xA;&lt;p&gt;文件夹里是键盘用到的所有结构件的3D模型文件，可以用于3D打印。&lt;/p&gt; &#xA;&lt;h4&gt;1.1.6 Docs&lt;/h4&gt; &#xA;&lt;p&gt;相关的参考文件，包括芯片的Datasheet等。&lt;/p&gt; &#xA;&lt;h2&gt;2. 硬件架构说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于结构设计？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;瀚文的结构包括三大部分：&lt;strong&gt;扩展坞底座&lt;/strong&gt;、&lt;strong&gt;键盘输入模块&lt;/strong&gt;和&lt;strong&gt;可替换的多功能交互模块&lt;/strong&gt;，键盘输入模块和可替换的多功能交互模块通过若干接触式触点连接在所述扩展坞底座顶部：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw2.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;而键盘本体也是一个标准的客制化键盘层叠结构设计，包含减震棉、PCBA、定位板、轴下垫等：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw3.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;键盘的结构设计主要是Xikii根据S98修改而来，为75键布局，有其他布局需要的同学可以自行修改PCB和固件适配。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;关于视频中展示的结构件，由于是Xikii的方案所以我也不好擅自把源文件放出，而且原始版本结构是用于CNC机加工的，成本会比较高。&lt;/p&gt; &#xA; &lt;p&gt;所以我也让Xikii帮忙设计一套简化版可用于3D的结构件，并开源出来放到仓库。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于芯片选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;键盘主控选用的芯片是STM32F103CBT6，实际上C8T6也可以，不过考虑到未来固件功能的扩展性，Flash大一倍的CBT6性价比更高。这块由于我固件基本都是使用HAL库实现的，因此实际上也可以把主控替换成STM32系列的任何一款芯片，需要支芯片有2个SPI硬件接口分别用于按键扫描以及RGB灯驱动，以及一个全速USB接口即可。&lt;/li&gt; &#xA; &lt;li&gt;Dynamic组件主控的STM32F4，这个是因为我手边这款芯片比较多，理论上可以替换为性价比更高的F1系列的，只要芯片具备一个高级定时器用于PWM生成、2个硬件SPI接口用于编码器和电子墨水屏通信、一个I2C接口用于OLED驱动，以及一个全速USB接口即可。&lt;/li&gt; &#xA; &lt;li&gt;电机的磁编码器芯片我是使用AS5047P，也是一款很常用性能很好的磁编码芯片，不过成本略高，我只是因为手边有所以选了这款，也是可以修改为其他更便宜的型号的比如MT6816等，当然也需要修改固件驱动代码。&lt;/li&gt; &#xA; &lt;li&gt;按键扫描用的移位寄存器使用的74HC165，国产芯片零售的话大概0.5元一片，一片可以驱动8个按键，按照你自己需要的按键数目修改串联的寄存器芯片即可。进口的165比如TI原装的要比国产贵一些，性能也会稍微好点，不过由于本项目中按键扫描频率4MHz已经完全够用了，因此哪怕国产的16MHz芯片也绰绰有余了。&lt;/li&gt; &#xA; &lt;li&gt;电容触摸板使用的是一个6通道电容触摸按键芯片XW06A实现的，这个对于PCB感应盘的设计有一定要求，仓库已经提供了设计好的PCB。对于该芯片的读取方式，其实和普通按键没有区别，所以本方案中也是使用74HC165进行扫描读取的。&lt;/li&gt; &#xA; &lt;li&gt;电机FOC驱动电路完全是从我的Ctrl驱动器中移植过来的，使用FD8288Q作为栅极驱动器，无需电流传感器。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于烧录方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用JLink、STLink之类的调试器烧录，我在PCB和外壳上都预留了SWD调试口。对于没有硬件开发经验的同学，我晚点也会放出一个Bootloader，可以直接通过USB口进行固件升级。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于电机选型？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;我使用的是一个2204的二手电机，不过这一款电机目前好像不太好买，大家可以选取类似尺寸的无刷电机替换，参数方面需要KV值低一些，最好200左右。电机需要手动在转子上安装一个径向充磁的永磁体用于编码器定位，不同型号的电机需要对FOC参数进行一些调整。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw4.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. 软件架构说明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于键盘固件的按键映射方式？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;为了充分发挥视频中提到的移位寄存器扫描方案的优势，固件代码中将PCB Layout走线和按键扫描顺序解耦，通过软件进行重映射。也就是说PCB中按键的连接可以是任意的，走完线之后可以在&lt;code&gt;hw_keyboard.h&lt;/code&gt;文件中的&lt;code&gt;keyMap[KEYMAP_NUM][IO_NUMBER]&lt;/code&gt;中指定映射方式。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是一个二维数组，代表有&lt;code&gt;KEYMAP_NUM&lt;/code&gt;层键位映射，每一层有&lt;code&gt;IO_NUMBER&lt;/code&gt;个按键（也就是你的键盘按键数目）；其中第0层是特殊的，负责映射PCB按键的随机布局到键盘标准按键布局，后续的1、2、3、4...层都是自定义的，负责映射标准按键布局到任意布局。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;举个例子：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;考虑原理图中箭头指的那个按键，这个按键可以在PCB的任意位置，但是我们可以看到，它是从左到右（按74HC165的连接顺序，也即移位扫描顺序）的第10颗，因此它的编号为9（从0开始算）.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw5.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果我们在实际的PCB板上把它放在了&lt;strong&gt;右边Alt&lt;/strong&gt;的位置，那么参考在下图代码&lt;strong&gt;红色框&lt;/strong&gt;中的第1层映射（也就是标准布局）中的&lt;code&gt;RIGHT_ALT&lt;/code&gt;的序号是76，那么在第0层映射的76号变量就填入9（蓝色框）.&lt;/p&gt; &#xA;&lt;p&gt;这样依次把你PCB上所有按键都填入0层映射，就得到了一个映射好的标准键盘了。后续2、3、4、5...层需要怎么映射就随意修改添加即可，也不需要再使用数字编号，而是可以直接用枚举的按键名称很方便。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;所以对于想修改键盘配列的人，只需要再原理图上添加或删减几个串联的74HC165，然后PCB随意走线，再将代码中0层映射删减或增加一些数字即可（比如在下面的例子中我的键盘是83键的）；后面几层的修改就以此类推了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;代码中通过&lt;code&gt;keyboard.Remap&lt;/code&gt;函数来映射不同层，比如&lt;code&gt;keyboard.Remap(2)&lt;/code&gt;这一句是使用第2层映射。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw6.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于键盘固件的滤波方法？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;固件中使用了每个按键独立的滤波，但是是以一种非常高效的方式来实现的（毕竟1KHz的报文，每个报文期间至少扫描两次按键，意味着每秒钟需要进行 &lt;strong&gt;1000*2*[按键数目]&lt;/strong&gt; 次数的滤波）。&lt;/p&gt; &#xA;&lt;p&gt;基本原理很简单，就是按键抖动的原因是按下后会在高低电平之间反复横跳，这个稳定时间一般是几十us（注意是电平稳定时间，不是按键触发时间，后者是由于按键簧片接触时间的不确定性导致的，可能长达数ms）。&lt;/p&gt; &#xA;&lt;p&gt;在QMK的&lt;a href=&#34;https://github.com/qmk/qmk_firmware/raw/master/docs/feature_debounce_type.md&#34;&gt;qmk_firmware/feature_debounce_type&lt;/a&gt;文档中描述了其使用的几种滤波方法，分为Eager和Defer、对称和非对称等，&lt;/p&gt; &#xA;&lt;p&gt;默认是使用&lt;strong&gt;对称延迟全局滤波&lt;/strong&gt;，也就是说是对所有按键进行同等的滤波，等所有的按键都稳定了不再变化，再提交扫描数据。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;与之对应的是激进滤波方法，也就是说一旦检测到按键变化就提交数据，但是在这之后的N毫秒时间内不再响应任何按键（也就避免了把不断抖动的按键提交上去）。这种方法触发延迟低，但是对噪声很敏感，容易误触发。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我在瀚文的固件中使用的是&lt;strong&gt;对称延迟独立滤波&lt;/strong&gt;，也就是对每个按键进行两次检测，如果第一次检测到了按键变化，那么相隔N微秒（这个参数可以配置，大于按键典型抖动时间即可）再检测一次，如果两次检测结果一致，那么判断按键被按下，此时可以确保按键发生了变化，且不会重复触发按键，兼顾延迟和稳定性。&lt;/p&gt; &#xA;&lt;p&gt;这个过程是通过异或运算进行高效处理的，正好按键buffer由于是移位寄存器扫描得到的，本身就是每一位代表一个按键，所以滤波效率非常高，实测效果也挺好的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/peng-zhihui/HelloWord-Keyboard/main/5.Docs/2.Images/hw7.jpg&#34; alt=&#34;hw2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于键盘固件的HID描述符？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;这个可以直接参考源码的&lt;code&gt;usbd_customhid.c&lt;/code&gt;文件，我配置了两个ReportID，ID-0是上报键位扫描数据的（全键无冲），ID-1是预留用于后续跟上位机改键软件通信用的。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;关于RGB的控制？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;代码中使用的是单总线的ws2812b系列灯珠，一根线就可以串联一大堆RGB，而且代码中实现了SPI-DMA模拟时序，得到了超高的刷新率。&lt;/p&gt; &#xA;&lt;p&gt;目前代码里只写了一个demo灯效（非常简单就是轮询色彩），自己添加额外的灯效的话，通过&lt;code&gt;keyboard.SetRgbBuffer&lt;/code&gt;函数设置RGB值，然后&lt;code&gt;SyncLights&lt;/code&gt;把数据发送给LED即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;while (true)&#xA;    {&#xA;        /*---- This is a demo RGB effect ----*/&#xA;        static uint32_t t = 1;&#xA;        static bool fadeDir = true;&#xA;&#xA;        fadeDir ? t++ : t--;&#xA;        if (t &amp;gt; 250) fadeDir = false;&#xA;        else if (t &amp;lt; 1) fadeDir = true;&#xA;&#xA;        for (uint8_t i = 0; i &amp;lt; HWKeyboard::LED_NUMBER; i++)&#xA;            keyboard.SetRgbBuffer(i, HWKeyboard::Color_t{(uint8_t) t, 50, 0});&#xA;        /*-----------------------------------*/&#xA;&#xA;        // Send RGB buffers to LEDs&#xA;        keyboard.SyncLights();&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. SDK设计 &amp;amp; 二次开发&lt;/h2&gt; &#xA;&lt;p&gt;待补充。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;感谢以下项目：&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Lexikos/AutoHotkey_L&#34;&gt;Lexikos/AutoHotkey_L: AutoHotkey - macro-creation and automation-oriented scripting utility for Windows. (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/olikraus/u8g2&#34;&gt;olikraus/u8g2: U8glib library for monochrome displays, version 2 (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/simplefoc/Arduino-FOC&#34;&gt;simplefoc/Arduino FOC for BLDC (github.com)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/zhongyang219/TrafficMonitor&#34;&gt;zhongyang219/TrafficMonitor: 这是一个用于显示当前网速、CPU及内存利用率的桌面悬浮窗软件，并支持任务栏显示，支持更换皮肤。 (github.com)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>ventoy/Ventoy</title>
    <updated>2022-09-01T01:49:07Z</updated>
    <id>tag:github.com,2022-09-01:/ventoy/Ventoy</id>
    <link href="https://github.com/ventoy/Ventoy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new bootable USB solution.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.ventoy.net/&#34;&gt;Ventoy&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/ventoy/Ventoy.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/ventoy/Ventoy?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ventoy/Ventoy?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/ventoy/Ventoy/total.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/ventoy/Ventoy/Ventoy%20CI?label=actions&amp;amp;logo=github&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;left&#34;&gt; Ventoy is an open source tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files. &lt;br&gt; With ventoy, you don&#39;t need to format the disk over and over, you just need to copy the image files to the USB drive and boot it. You can copy many image files at a time and ventoy will give you a boot menu to select them. &lt;br&gt; You can also browse ISO/WIM/IMG/VHD(x)/EFI files in local disk and boot them.&lt;br&gt; x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI and MIPS64EL UEFI are supported in the same way.&lt;br&gt; Both MBR and GPT partition style are supported in the same way.&lt;br&gt; Most type of OS supported(Windows/WinPE/Linux/Unix/ChromeOS/Vmware/Xen...) &lt;br&gt; 940+ ISO files are tested (&lt;a href=&#34;https://www.ventoy.net/en/isolist.html&#34;&gt;List&lt;/a&gt;). 90%+ distros in &lt;a href=&#34;https://distrowatch.com/&#34;&gt;distrowatch.com&lt;/a&gt; supported (&lt;a href=&#34;https://www.ventoy.net/en/distrowatch.html&#34;&gt;Details&lt;/a&gt;). &lt;br&gt; &lt;br&gt;Official Website: &lt;a href=&#34;https://www.ventoy.net&#34;&gt;https://www.ventoy.net&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;h1&gt;Tested OS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;br&gt; Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11, Windows Server 2012, Windows Server 2012 R2, Windows Server 2016, Windows Server 2019, Windows Server 2022, WinPE&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;br&gt; Debian, Ubuntu, CentOS(6/7/8/9), RHEL(6/7/8/9), Deepin, Fedora, Rocky Linux, AlmaLinux, openEuler, OpenAnolis, SLES, openSUSE, MX Linux, Manjaro, Linux Mint, Endless OS, Elementary OS, Solus, Linx, Zorin, antiX, PClinuxOS, Arch, ArcoLinux, ArchLabs, BlackArch, Obarun, Artix Linux, Puppy Linux, Tails, Slax, Kali, Mageia, Slackware, Q4OS, Archman, Gentoo, Pentoo, NixOS, Kylin, openKylin, Ubuntu Kylin, Lubuntu, Xubuntu, Kubuntu, Ubuntu MATE, Ubuntu Budgie, Ubuntu Studio, Bluestar, OpenMandriva, ExTiX, Netrunner, ALT Linux, Nitrux, Peppermint, KDE neon, Linux Lite, Parrot OS, Qubes, Pop OS, ROSA, Void Linux, Star Linux, EndeavourOS, MakuluLinux, Voyager, Feren, ArchBang, LXLE, Knoppix, Calculate Linux, Clear Linux, Pure OS, Oracle Linux, Trident, Septor, Porteus, Devuan, GoboLinux, 4MLinux, Simplicity Linux, Zeroshell, Android-x86, netboot.xyz, Slitaz, SuperGrub2Disk, Proxmox VE, Kaspersky Rescue, SystemRescueCD, MemTest86, MemTest86+, MiniTool Partition Wizard, Parted Magic, veket, Sabayon, Scientific, alpine, ClearOS, CloneZilla, Berry Linux, Trisquel, Ataraxia Linux, Minimal Linux Live, BackBox Linux, Emmabuntüs, ESET SysRescue Live,Nova Linux, AV Linux, RoboLinux, NuTyX, IPFire, SELKS, ZStack, Enso Linux, Security Onion, Network Security Toolkit, Absolute Linux, TinyCore, Springdale Linux, Frost Linux, Shark Linux, LinuxFX, Snail Linux, Astra Linux, Namib Linux, Resilient Linux, Virage Linux, Blackweb Security OS, R-DriveImage, O-O.DiskImage, Macrium, ToOpPy LINUX, GNU Guix, YunoHost, foxclone, siduction, Adelie Linux, Elive, Pardus, CDlinux, AcademiX, Austrumi, Zenwalk, Anarchy, DuZeru, BigLinux, OpenMediaVault, Ubuntu DP, Exe GNU/Linux, 3CX Phone System, KANOTIX, Grml, Karoshi, PrimTux, ArchStrike, CAELinux, Cucumber, Fatdog, ForLEx, Hanthana, Kwort, MiniNo, Redcore, Runtu, Asianux, Clu Linux Live, Uruk, OB2D, BlueOnyx, Finnix, HamoniKR, Parabola, LinHES, LinuxConsole, BEE free, Untangle, Pearl, Thinstation, TurnKey, tuxtrans, Neptune, HefftorLinux, GeckoLinux, Mabox Linux, Zentyal, Maui, Reborn OS, SereneLinux , SkyWave Linux, Kaisen Linux, Regata OS, TROM-Jaro, DRBL Linux, Chalet OS, Chapeau, Desa OS, BlankOn, OpenMamba, Frugalware, Kibojoe Linux, Revenge OS, Tsurugi Linux, Drauger OS, Hash Linux, gNewSense, Ikki Boot, SteamOS, Hyperbola, VyOS, EasyNAS, SuperGamer, Live Raizo, Swift Linux, RebeccaBlackOS, Daphile, CRUX, Univention, Ufficio Zero, Rescuezilla, Phoenix OS, Garuda Linux, Mll, NethServer, OSGeoLive, Easy OS, Volumio, FreedomBox, paldo, UBOS, Recalbox, batocera, Lakka, LibreELEC, Pardus Topluluk, Pinguy, KolibriOS, Elastix, Arya, Omoikane, Omarine, Endian Firewall, Hamara, Rocks Cluster, MorpheusArch, Redo, Slackel, SME Server, APODIO, Smoothwall, Dragora, Linspire, Secure-K OS, Peach OSI, Photon, Plamo, SuperX, Bicom, Ploplinux, HP SPP, LliureX, Freespire, DietPi, BOSS, Webconverger, Lunar, TENS, Source Mage, RancherOS, T2, Vine, Pisi, blackPanther, mAid, Acronis, Active.Boot, AOMEI, Boot.Repair, CAINE, DaRT, EasyUEFI, R-Drive, PrimeOS, Avira Rescue System, bitdefender, Checkra1n Linux, Lenovo Diagnostics, Clover, Bliss-OS, Lenovo BIOS Update, Arcabit Rescue Disk, MiyoLinux, TeLOS, Kerio Control, RED OS, OpenWrt, MocaccinoOS, EasyStartup, Pyabr, Refracta, Eset SysRescue, Linpack Xtreme, Archcraft, NHVBOOT, pearOS, SeaTools, Easy Recovery Essentional, iKuai, StorageCraft SCRE, ZFSBootMenu, TROMjaro, BunsenLabs, Todo en Uno, ......&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unix&lt;/strong&gt;&lt;br&gt; DragonFly FreeBSD pfSense GhostBSD FreeNAS TrueNAS XigmaNAS FuryBSD OPNsense HardenedBSD MidnightBSD ClonOS EmergencyBootKit&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChromeOS&lt;/strong&gt;&lt;br&gt; FydeOS, CloudReady, ChromeOS Flex&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;br&gt; VMware ESXi, Citrix XenServer, Xen XCP-ng&lt;/p&gt; &#xA;&lt;h1&gt;Subscription Service&lt;/h1&gt; &#xA;&lt;p&gt;Ventoy is an open source software under GPLv3 license. But Ventoy project need to pay for the server hosting, domain name, bandwidth, many USB sticks for test, large capacity of HDD (for downloading ISO files) and so on.&lt;br&gt; For the better and sustainable development of Ventoy, I provide the &lt;a href=&#34;https://www.ventoy.net/en/doc_subscription.html&#34;&gt;【subscription service】&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tested Image Report&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ventoy/Ventoy/issues/1195&#34;&gt;【How to report a successfully tested image file】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ventoy Browser&lt;/h1&gt; &#xA;&lt;p&gt;With Ventoy, you can also browse ISO/WIM/IMG/VHD(x)/EFI files in local disk and boot them. &lt;a href=&#34;https://www.ventoy.net/en/doc_browser.html&#34;&gt;Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;VentoyPlugson&lt;/h1&gt; &#xA;&lt;p&gt;A GUI Ventoy plugin configurator. &lt;a href=&#34;https://www.ventoy.net/en/plugin_plugson.html&#34;&gt;VentoyPlugson&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% open source&lt;/li&gt; &#xA; &lt;li&gt;Simple to use&lt;/li&gt; &#xA; &lt;li&gt;Fast (limited only by the speed of copying iso file)&lt;/li&gt; &#xA; &lt;li&gt;Can be installed in USB/Local Disk/SSD/NVMe/SD Card&lt;/li&gt; &#xA; &lt;li&gt;Directly boot from ISO/WIM/IMG/VHD(x)/EFI files, no extraction needed&lt;/li&gt; &#xA; &lt;li&gt;Support to browse and boot ISO/WIM/IMG/VHD(x)/EFI files in local disk&lt;/li&gt; &#xA; &lt;li&gt;No need to be continuous in disk for ISO/WIM/IMG/VHD(x)/EFI files&lt;/li&gt; &#xA; &lt;li&gt;MBR and GPT partition style supported (1.0.15+)&lt;/li&gt; &#xA; &lt;li&gt;x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI, MIPS64EL UEFI supported&lt;/li&gt; &#xA; &lt;li&gt;IA32/x86_64 UEFI Secure Boot supported (1.0.07+)&lt;/li&gt; &#xA; &lt;li&gt;Persistence supported (1.0.11+)&lt;/li&gt; &#xA; &lt;li&gt;Windows auto installation supported (1.0.09+)&lt;/li&gt; &#xA; &lt;li&gt;RHEL7/8/CentOS/7/8/SUSE/Ubuntu Server/Debian ... auto installation supported (1.0.09+)&lt;/li&gt; &#xA; &lt;li&gt;FAT32/exFAT/NTFS/UDF/XFS/Ext2(3)(4) supported for main partition&lt;/li&gt; &#xA; &lt;li&gt;ISO files larger than 4GB supported&lt;/li&gt; &#xA; &lt;li&gt;Native boot menu style for Legacy &amp;amp; UEFI&lt;/li&gt; &#xA; &lt;li&gt;Most types of OS supported, 940+ iso files tested&lt;/li&gt; &#xA; &lt;li&gt;Linux vDisk boot supported&lt;/li&gt; &#xA; &lt;li&gt;Not only boot but also complete installation process&lt;/li&gt; &#xA; &lt;li&gt;Menu dynamically switchable between List/TreeView mode&lt;/li&gt; &#xA; &lt;li&gt;&#34;Ventoy Compatible&#34; concept&lt;/li&gt; &#xA; &lt;li&gt;Plugin Framework and GUI plugin configurator&lt;/li&gt; &#xA; &lt;li&gt;Injection files to runtime environment&lt;/li&gt; &#xA; &lt;li&gt;Boot configuration file dynamically replacement&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable theme and menu&lt;/li&gt; &#xA; &lt;li&gt;USB drive write-protected support&lt;/li&gt; &#xA; &lt;li&gt;USB normal use unaffected&lt;/li&gt; &#xA; &lt;li&gt;Data nondestructive during version upgrade&lt;/li&gt; &#xA; &lt;li&gt;No need to update Ventoy when a new distro is released&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/screen/screen_uefi.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation Instructions&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.ventoy.net/en/doc_start.html&#34;&gt;https://www.ventoy.net/en/doc_start.html&lt;/a&gt; for detailed instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Compile Instructions&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ventoy/Ventoy/master/DOC/BuildVentoyFromSource.txt&#34;&gt;BuildVentoyFromSource.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Document&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Install &amp;amp; Update&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_start.html&#34;&gt;https://www.ventoy.net/en/doc_start.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Secure Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_secure.html&#34;&gt;https://www.ventoy.net/en/doc_secure.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Customize Theme&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_theme.html&#34;&gt;https://www.ventoy.net/en/plugin_theme.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Global Control&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_control.html&#34;&gt;https://www.ventoy.net/en/plugin_control.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Image List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_imagelist.html&#34;&gt;https://www.ventoy.net/en/plugin_imagelist.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Auto Installation&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_autoinstall.html&#34;&gt;https://www.ventoy.net/en/plugin_autoinstall.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Injection Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_injection.html&#34;&gt;https://www.ventoy.net/en/plugin_injection.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Persistence Support&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_persistence.html&#34;&gt;https://www.ventoy.net/en/plugin_persistence.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Boot WIM file&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_wimboot.html&#34;&gt;https://www.ventoy.net/en/plugin_wimboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows VHD Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_vhdboot.html&#34;&gt;https://www.ventoy.net/en/plugin_vhdboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linux vDisk Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_vtoyboot.html&#34;&gt;https://www.ventoy.net/en/plugin_vtoyboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DUD Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_dud.html&#34;&gt;https://www.ventoy.net/en/plugin_dud.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Password Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_password.html&#34;&gt;https://www.ventoy.net/en/plugin_password.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Conf Replace Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_bootconf_replace.html&#34;&gt;https://www.ventoy.net/en/plugin_bootconf_replace.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Class&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_menuclass.html&#34;&gt;https://www.ventoy.net/en/plugin_menuclass.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Alias&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_menualias.html&#34;&gt;https://www.ventoy.net/en/plugin_menualias.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Extension&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_grubmenu.html&#34;&gt;https://www.ventoy.net/en/plugin_grubmenu.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Memdisk Mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_memdisk.html&#34;&gt;https://www.ventoy.net/en/doc_memdisk.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TreeView Mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_treeview.html&#34;&gt;https://www.ventoy.net/en/doc_treeview.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk Layout MBR&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_disk_layout.html&#34;&gt;https://www.ventoy.net/en/doc_disk_layout.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk Layout GPT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_disk_layout_gpt.html&#34;&gt;https://www.ventoy.net/en/doc_disk_layout_gpt.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Search Configuration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_search_path.html&#34;&gt;https://www.ventoy.net/en/doc_search_path.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.ventoy.net/en/faq.html&#34;&gt;https://www.ventoy.net/en/faq.html&lt;/a&gt; for detail&lt;/p&gt; &#xA;&lt;h1&gt;Forum&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.ventoy.net&#34;&gt;https://forums.ventoy.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Donation&lt;/h1&gt; &#xA;&lt;p&gt;It would be much appreciated if you want to make a small donation to support my work!&lt;br&gt; Alipay, WeChat Pay, PayPal and Bitcoin are available for donation. You can choose any of them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alipay&lt;/th&gt; &#xA;   &lt;th&gt;WeChat Pay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/AliPay.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/WeChatPay.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;PayPal&lt;/strong&gt;&lt;br&gt; You can transfer to my paypal account &lt;code&gt;admin@ventoy.net&lt;/code&gt; or just click &lt;a href=&#34;https://www.paypal.me/ventoy&#34;&gt;https://www.paypal.me/ventoy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;&lt;br&gt; Bitcoin Address &lt;code&gt;19mZDWzZgzkHCi9YX9H3fYCUuCHq3W6wfT&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>taosdata/TDengine</title>
    <updated>2022-09-01T01:49:07Z</updated>
    <id>tag:github.com,2022-09-01:/taosdata/TDengine</id>
    <link href="https://github.com/taosdata/TDengine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TDengine is an open source, high-performance, cloud native time-series database optimized for Internet of Things (IoT), Connected Cars, Industrial IoT and DevOps.&lt;/p&gt;&lt;hr&gt;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tdengine.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/taosdata/TDengine/main/docs/assets/tdengine.svg?sanitize=true&#34; alt=&#34;TDengine&#34; width=&#34;500&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.drone.io/taosdata/TDengine&#34;&gt;&lt;img src=&#34;https://cloud.drone.io/api/badges/taosdata/TDengine/status.svg?ref=refs/heads/master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/sangshuduo/tdengine-2n8ge/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/kf3pwh2or5afsgl9/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/taosdata/TDengine?branch=develop&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/taosdata/TDengine/badge.svg?branch=develop&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4201&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4201/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/main/README-CN.md&#34;&gt;简体中文&lt;/a&gt; | We are hiring, check &lt;a href=&#34;https://tdengine.com/careers&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is TDengine？&lt;/h1&gt; &#xA;&lt;p&gt;TDengine is an open source, high-performance, cloud native &lt;a href=&#34;https://tdengine.com/tsdb/what-is-a-time-series-database/&#34;&gt;time-series database&lt;/a&gt; optimized for Internet of Things (IoT), Connected Cars, and Industrial IoT. It enables efficient, real-time data ingestion, processing, and monitoring of TB and even PB scale data per day, generated by billions of sensors and data collectors. TDengine differentiates itself from other time-seires databases with the following advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/high-performance-time-series-database/&#34;&gt;High-Performance&lt;/a&gt;&lt;/strong&gt;: TDengine is the only time-series database to solve the high cardinality issue to support billions of data collection points while out performing other time-series databases for data ingestion, querying and data compression.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/simplified-time-series-data-solution/&#34;&gt;Simplified Solution&lt;/a&gt;&lt;/strong&gt;: Through built-in caching, stream processing and data subscription features, TDengine provides a simplified solution for time-series data processing. It reduces system design complexity and operation costs significantly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/cloud-native-time-series-database/&#34;&gt;Cloud Native&lt;/a&gt;&lt;/strong&gt;: Through native distributed design, sharding and partitioning, separation of compute and storage, RAFT, support for kubernetes deployment and full observability, TDengine is a cloud native Time-Series Database and can be deployed on public, private or hybrid clouds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.tdengine.com/get-started/docker/&#34;&gt;Ease of Use&lt;/a&gt;&lt;/strong&gt;: For administrators, TDengine significantly reduces the effort to deploy and maintain. For developers, it provides a simple interface, simplified solution and seamless integrations for third party tools. For data users, it gives easy data access.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/time-series-data-analytics-made-easy/&#34;&gt;Easy Data Analytics&lt;/a&gt;&lt;/strong&gt;: Through super tables, storage and compute separation, data partitioning by time interval, pre-computation and other means, TDengine makes it easy to explore, format, and get access to data in a highly efficient way.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tdengine.com/tdengine/open-source-time-series-database/&#34;&gt;Open Source&lt;/a&gt;&lt;/strong&gt;: TDengine’s core modules, including cluster feature, are all available under open source licenses. It has gathered 18.8k stars on GitHub. There is an active developer community, and over 139k running instances worldwide.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For user manual, system design and architecture, please refer to &lt;a href=&#34;https://docs.tdengine.com&#34;&gt;TDengine Documentation&lt;/a&gt; (&lt;a href=&#34;https://docs.taosdata.com&#34;&gt;TDengine 文档&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;At the moment, TDengine server supports running on Linux and Windows systems. Any application can also choose the RESTful interface provided by taosAdapter to connect the taosd service . TDengine supports X64/ARM64 CPU, and it will support MIPS64, Alpha64, ARM32, RISC-V and other CPU architectures in the future.&lt;/p&gt; &#xA;&lt;p&gt;You can choose to install through source code, &lt;a href=&#34;https://docs.tdengine.com/get-started/docker/&#34;&gt;container&lt;/a&gt;, &lt;a href=&#34;https://docs.tdengine.com/get-started/package/&#34;&gt;installation package&lt;/a&gt; or &lt;a href=&#34;https://docs.tdengine.com/deployment/k8s/&#34;&gt;Kubernetes&lt;/a&gt;. This quick guide only applies to installing from source.&lt;/p&gt; &#xA;&lt;p&gt;TDengine provide a few useful tools such as taosBenchmark (was named taosdemo) and taosdump. They were part of TDengine. By default, TDengine compiling does not include taosTools. You can use &lt;code&gt;cmake .. -DBUILD_TOOLS=true&lt;/code&gt; to make them be compiled with TDengine.&lt;/p&gt; &#xA;&lt;p&gt;To build TDengine, use &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.0.2 or higher versions in the project directory.&lt;/p&gt; &#xA;&lt;h2&gt;Install build tools&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu 18.04 and above or Debian&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y gcc cmake build-essential git libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools&lt;/h4&gt; &#xA;&lt;p&gt;To build the &lt;a href=&#34;https://github.com/taosdata/taos-tools&#34;&gt;taosTools&lt;/a&gt; on Ubuntu/Debian, the following packages need to be installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install build-essential libjansson-dev libsnappy-dev liblzma-dev libz-dev pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 7.9&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum install epel-release&#xA;sudo yum update&#xA;sudo yum install -y gcc gcc-c++ make cmake3 git openssl-devel&#xA;sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CentOS 8 &amp;amp; Fedora&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install -y gcc gcc-c++ make cmake epel-release git openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install build dependencies for taosTools on CentOS&lt;/h4&gt; &#xA;&lt;h4&gt;CentOS 7.9&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install -y zlib-devel xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libstdc++-static openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CentOS 8/Rocky Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum install -y epel-release&#xA;sudo yum install -y dnf-plugins-core&#xA;sudo yum config-manager --set-enabled powertools&#xA;sudo yum install -y zlib-devel xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libstdc++-static openssl-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Since snappy lacks pkg-config support (refer to &lt;a href=&#34;https://github.com/google/snappy/pull/86&#34;&gt;link&lt;/a&gt;), it leads a cmake prompt libsnappy not found. But snappy still works well.&lt;/p&gt; &#xA;&lt;p&gt;If the PowerTools installation fails, you can try to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum config-manager --set-enabled powertools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup golang environment&lt;/h3&gt; &#xA;&lt;p&gt;TDengine includes a few components like taosAdapter developed by Go language. Please refer to golang.org official documentation for golang environment setup.&lt;/p&gt; &#xA;&lt;p&gt;Please use version 1.14+. For the user in China, we recommend using a proxy to accelerate package downloading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go env -w GO111MODULE=on&#xA;go env -w GOPROXY=https://goproxy.cn,direct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default will not build taosAdapter, but you can use the following command to build taosAdapter as the service for RESTful interface.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .. -DBUILD_HTTP=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup rust environment&lt;/h3&gt; &#xA;&lt;p&gt;TDengine includes a few components developed by Rust language. Please refer to rust-lang.org official documentation for rust environment setup.&lt;/p&gt; &#xA;&lt;h2&gt;Get the source codes&lt;/h2&gt; &#xA;&lt;p&gt;First of all, you may clone the source codes from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/taosdata/TDengine.git&#xA;cd TDengine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can modify the file ~/.gitconfig to use ssh protocol instead of https for better download speed. You will need to upload ssh public key to GitHub first. Please refer to GitHub official documentation for detail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[url &#34;git@github.com:&#34;]&#xA;    insteadOf = https://github.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Special Note&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taosdata/taos-connector-jdbc&#34;&gt;JDBC Connector&lt;/a&gt;， &lt;a href=&#34;https://github.com/taosdata/driver-go&#34;&gt;Go Connector&lt;/a&gt;，&lt;a href=&#34;https://github.com/taosdata/taos-connector-python&#34;&gt;Python Connector&lt;/a&gt;，&lt;a href=&#34;https://github.com/taosdata/taos-connector-node&#34;&gt;Node.js Connector&lt;/a&gt;，&lt;a href=&#34;https://github.com/taosdata/taos-connector-dotnet&#34;&gt;C# Connector&lt;/a&gt; ，&lt;a href=&#34;https://github.com/taosdata/taos-connector-rust&#34;&gt;Rust Connector&lt;/a&gt; and &lt;a href=&#34;https://github.com/taosdata/grafanaplugin&#34;&gt;Grafana plugin&lt;/a&gt; has been moved to standalone repository.&lt;/p&gt; &#xA;&lt;h2&gt;Build TDengine&lt;/h2&gt; &#xA;&lt;h3&gt;On Linux platform&lt;/h3&gt; &#xA;&lt;p&gt;You can run the bash script &lt;code&gt;build.sh&lt;/code&gt; to build both TDengine and taosTools including taosBenchmark and taosdump as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It equals to execute following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir debug&#xA;cd debug&#xA;cmake .. -DBUILD_TOOLS=true&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use Jemalloc as memory allocator instead of glibc:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install autoconf&#xA;cmake .. -DJEMALLOC_ENABLED=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TDengine build script can detect the host machine&#39;s architecture on X86-64, X86, arm64 platform. You can also specify CPUTYPE option like aarch64 too if the detection result is not correct:&lt;/p&gt; &#xA;&lt;p&gt;aarch64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .. -DCPUTYPE=aarch64 &amp;amp;&amp;amp; cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows platform&lt;/h3&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2013, please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;amd64&#34; for 64 bits Windows or specify &#34;x86&#34; for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\vcvarsall.bat&#34; &amp;lt; amd64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the Visual Studio 2019 or 2017:&lt;/p&gt; &#xA;&lt;p&gt;please open a command window by executing &#34;cmd.exe&#34;. Please specify &#34;x64&#34; for 64 bits Windows or specify &#34;x86&#34; for 32 bits Windows when you execute vcvarsall.bat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;&#34;c:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat&#34; &amp;lt; x64 | x86 &amp;gt;&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can simply open a command window by clicking Windows Start -&amp;gt; &#34;Visual Studio &amp;lt; 2019 | 2017 &amp;gt;&#34; folder -&amp;gt; &#34;x64 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; or &#34;x86 Native Tools Command Prompt for VS &amp;lt; 2019 | 2017 &amp;gt;&#34; depends what architecture your Windows is, then execute commands as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;mkdir debug &amp;amp;&amp;amp; cd debug&#xA;cmake .. -G &#34;NMake Makefiles&#34;&#xA;nmake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ### On macOS platform&#xA;&#xA;Please install XCode command line tools and cmake. Verified with XCode 11.4+ on Catalina and Big Sur.&#xA;&#xA;```shell&#xA;mkdir debug &amp;&amp; cd debug&#xA;cmake .. &amp;&amp; cmake --build .&#xA;``` --&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;h2&gt;On Linux platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can find more information about directories installed on the system in the &lt;a href=&#34;https://docs.taosdata.com/reference/directory/&#34;&gt;directory and files&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;Installing from source code will also configure service management for TDengine.Users can also choose to &lt;a href=&#34;https://docs.taosdata.com/get-started/package/&#34;&gt;install from packages&lt;/a&gt; for it.&lt;/p&gt; &#xA;&lt;p&gt;To start the service after installation, in a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl start taosd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then users can use the TDengine CLI to connect the TDengine server. In a terminal, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TDengine CLI connects the server successfully, welcome messages and version info are printed. Otherwise, an error message is shown.&lt;/p&gt; &#xA;&lt;h2&gt;On Windows platform&lt;/h2&gt; &#xA;&lt;p&gt;After building successfully, TDengine can be installed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;nmake install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &#xA;## On macOS platform&#xA;&#xA;After building successfully, TDengine can be installed by:&#xA;&#xA;```bash&#xA;sudo make install&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Quick Run&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to run TDengine as a service, you can run it in current shell. For example, to quickly start a TDengine server after building, run the command below in terminal: (We take Linux as an example, command on Windows will be &lt;code&gt;taosd.exe&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taosd -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In another terminal, use the TDengine CLI to connect the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./build/bin/taos -c test/cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;option &#34;-c test/cfg&#34; specifies the system configuration file directory.&lt;/p&gt; &#xA;&lt;h1&gt;Try TDengine&lt;/h1&gt; &#xA;&lt;p&gt;It is easy to run SQL commands from TDengine CLI which is the same as other SQL databases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE demo;&#xA;USE demo;&#xA;CREATE TABLE t (ts TIMESTAMP, speed INT);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 00:00:00&#39;, 10);&#xA;INSERT INTO t VALUES(&#39;2019-07-15 01:00:00&#39;, 20);&#xA;SELECT * FROM t;&#xA;          ts          |   speed   |&#xA;===================================&#xA; 19-07-15 00:00:00.000|         10|&#xA; 19-07-15 01:00:00.000|         20|&#xA;Query OK, 2 row(s) in set (0.001700s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Developing with TDengine&lt;/h1&gt; &#xA;&lt;h2&gt;Official Connectors&lt;/h2&gt; &#xA;&lt;p&gt;TDengine provides abundant developing tools for users to develop on TDengine. Follow the links below to find your desired connectors and relevant documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/java/&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/cpp/&#34;&gt;C/C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/python/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/go/&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/node/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/rust/&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/connector/csharp/&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.tdengine.com/reference/rest-api/&#34;&gt;RESTful API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute to TDengine&lt;/h1&gt; &#xA;&lt;p&gt;Please follow the &lt;a href=&#34;https://raw.githubusercontent.com/taosdata/TDengine/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; to contribute to the project.&lt;/p&gt; &#xA;&lt;h1&gt;Join TDengine WeChat Group&lt;/h1&gt; &#xA;&lt;p&gt;Add WeChat “tdengine” to join the group，you can communicate with other users.&lt;/p&gt;</summary>
  </entry>
</feed>