<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-01T01:45:05Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/cuda-samples</title>
    <updated>2024-11-01T01:45:05Z</updated>
    <id>tag:github.com,2024-11-01:/NVIDIA/cuda-samples</id>
    <link href="https://github.com/NVIDIA/cuda-samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Samples for CUDA Developers which demonstrates features in CUDA Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CUDA Samples&lt;/h1&gt; &#xA;&lt;p&gt;Samples for CUDA Developers which demonstrates features in CUDA Toolkit. This version supports &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 12.5&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the release notes for the CUDA Samples on GitHub only.&lt;/p&gt; &#xA;&lt;h3&gt;CUDA 12.5&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/CHANGELOG.md&#34;&gt;older versions...&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Download and install the &lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA Toolkit 12.5&lt;/a&gt; for your corresponding platform. For system requirements and installation instructions of cuda toolkit, please refer to the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-linux/&#34;&gt;Linux Installation Guide&lt;/a&gt;, and the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html&#34;&gt;Windows Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting the CUDA Samples&lt;/h3&gt; &#xA;&lt;p&gt;Using git clone the repository of CUDA Samples using the command below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/NVIDIA/cuda-samples.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without using git the easiest way to use these samples is to download the zip file containing the current version by clicking the &#34;Download ZIP&#34; button on the repo page. You can then unzip the entire archive and use the samples.&lt;/p&gt; &#xA;&lt;h2&gt;Building CUDA Samples&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;The Windows samples are built using the Visual Studio IDE. Solution files (.sln) are provided for each supported version of Visual Studio, using the format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*_vs&amp;lt;version&amp;gt;.sln - for Visual Studio &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complete samples solution files exist at parent directory of the repo:&lt;/p&gt; &#xA;&lt;p&gt;Each individual sample has its own set of solution files at: &lt;code&gt;&amp;lt;CUDA_SAMPLES_REPO&amp;gt;\Samples\&amp;lt;sample_dir&amp;gt;\&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build/examine all the samples at once, the complete solution files should be used. To build/examine a single sample, the individual sample solution files should be used.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;The Linux samples are built using makefiles. To use the makefiles, change the current directory to the sample directory you wish to build, and run make:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;sample_dir&amp;gt;&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The samples makefiles can take advantage of certain options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TARGET_ARCH=&#xA;    &lt;arch&gt;&lt;/arch&gt;&lt;/strong&gt; - cross-compile targeting a specific architecture. Allowed architectures are x86_64, ppc64le, armv7l, aarch64. By default, TARGET_ARCH is set to HOST_ARCH. On a x86_64 machine, not setting TARGET_ARCH is the equivalent of setting TARGET_ARCH=x86_64.&lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=x86_64&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=ppc64le&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=armv7l&lt;/code&gt; &lt;br&gt; &lt;code&gt;$ make TARGET_ARCH=aarch64&lt;/code&gt; &lt;br&gt; See &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-samples/index.html#cross-samples&#34;&gt;here&lt;/a&gt; for more details on cross platform compilation of cuda samples.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dbg=1&lt;/strong&gt; - build with debug symbols&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make dbg=1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SMS=&#34;A B ...&#34;&lt;/strong&gt; - override the SM architectures for which the sample will be built, where &lt;code&gt;&#34;A B ...&#34;&lt;/code&gt; is a space-delimited list of SM architectures. For example, to generate SASS for SM 50 and SM 60, use &lt;code&gt;SMS=&#34;50 60&#34;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make SMS=&#34;50 60&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HOST_COMPILER=&amp;lt;host_compiler&amp;gt;&lt;/strong&gt; - override the default g++ host compiler. See the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements&#34;&gt;Linux Installation Guide&lt;/a&gt; for a list of supported host compilers.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make HOST_COMPILER=g++&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Samples list&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/0_Introduction/README.md&#34;&gt;0. Introduction&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Basic CUDA samples for beginners that illustrate key concepts with using CUDA and CUDA runtime APIs.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/1_Utilities/README.md&#34;&gt;1. Utilities&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Utility samples that demonstrate how to query device capabilities and measure GPU/CPU bandwidth.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/2_Concepts_and_Techniques/README.md&#34;&gt;2. Concepts and Techniques&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate CUDA related concepts and common problem solving techniques.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/3_CUDA_Features/README.md&#34;&gt;3. CUDA Features&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate CUDA Features (Cooperative Groups, CUDA Dynamic Parallelism, CUDA Graphs etc).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/4_CUDA_Libraries/README.md&#34;&gt;4. CUDA Libraries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate how to use CUDA platform libraries (NPP, NVJPEG, NVGRAPH cuBLAS, cuFFT, cuSPARSE, cuSOLVER and cuRAND).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/5_Domain_Specific/README.md&#34;&gt;5. Domain Specific&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that are specific to domain (Graphics, Finance, Image Processing).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/6_Performance/README.md&#34;&gt;6. Performance&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate performance optimization.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/cuda-samples/master/Samples/7_libNVVM/README.md&#34;&gt;7. libNVVM&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Samples that demonstrate the use of libNVVVM and NVVM IR.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Some CUDA Samples rely on third-party applications and/or libraries, or features provided by the CUDA Toolkit and Driver, to either build or execute. These dependencies are listed below.&lt;/p&gt; &#xA;&lt;p&gt;If a sample has a third-party dependency that is available on the system, but is not installed, the sample will waive itself at build time.&lt;/p&gt; &#xA;&lt;p&gt;Each sample&#39;s dependencies are listed in its README&#39;s Dependencies section.&lt;/p&gt; &#xA;&lt;h3&gt;Third-Party Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;These third-party dependencies are required by some CUDA samples. If available, these dependencies are either installed on your system automatically, or are installable via your system&#39;s package manager (Linux) or a third-party website.&lt;/p&gt; &#xA;&lt;h4&gt;FreeImage&lt;/h4&gt; &#xA;&lt;p&gt;FreeImage is an open source imaging library. FreeImage can usually be installed on Linux using your distribution&#39;s package manager system. FreeImage can also be downloaded from the FreeImage website.&lt;/p&gt; &#xA;&lt;p&gt;To set up FreeImage on a Windows system, extract the FreeImage DLL distribution into the folder &lt;code&gt;../../../Common/FreeImage/Dist/x64&lt;/code&gt; such that it contains the .h and .lib files. Copy the .dll file to root level &lt;code&gt;bin/win64/Debug&lt;/code&gt; and &lt;code&gt;bin/win64/Release&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h4&gt;Message Passing Interface&lt;/h4&gt; &#xA;&lt;p&gt;MPI (Message Passing Interface) is an API for communicating data between distributed processes. A MPI compiler can be installed using your Linux distribution&#39;s package manager system. It is also available on some online resources, such as &lt;a href=&#34;http://www.open-mpi.org/&#34;&gt;Open MPI&lt;/a&gt;. On Windows, to build and run MPI-CUDA applications one can install &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb524831(v=vs.85).aspx&#34;&gt;MS-MPI SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Only 64-Bit&lt;/h4&gt; &#xA;&lt;p&gt;Some samples can only be run on a 64-bit operating system.&lt;/p&gt; &#xA;&lt;h4&gt;DirectX&lt;/h4&gt; &#xA;&lt;p&gt;DirectX is a collection of APIs designed to allow development of multimedia applications on Microsoft platforms. For Microsoft platforms, NVIDIA&#39;s CUDA Driver supports DirectX. Several CUDA Samples for Windows demonstrates CUDA-DirectX Interoperability, for building such samples one needs to install Microsoft Visual Studio 2012 or higher which provides Microsoft Windows SDK for Windows 8.&lt;/p&gt; &#xA;&lt;h4&gt;DirectX12&lt;/h4&gt; &#xA;&lt;p&gt;DirectX 12 is a collection of advanced low-level programming APIs which can reduce driver overhead, designed to allow development of multimedia applications on Microsoft platforms starting with Windows 10 OS onwards. For Microsoft platforms, NVIDIA&#39;s CUDA Driver supports DirectX. Few CUDA Samples for Windows demonstrates CUDA-DirectX12 Interoperability, for building such samples one needs to install &lt;a href=&#34;https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk&#34;&gt;Windows 10 SDK or higher&lt;/a&gt;, with VS 2015 or VS 2017.&lt;/p&gt; &#xA;&lt;h4&gt;OpenGL&lt;/h4&gt; &#xA;&lt;p&gt;OpenGL is a graphics library used for 2D and 3D rendering. On systems which support OpenGL, NVIDIA&#39;s OpenGL implementation is provided with the CUDA Driver.&lt;/p&gt; &#xA;&lt;h4&gt;OpenGL ES&lt;/h4&gt; &#xA;&lt;p&gt;OpenGL ES is an embedded systems graphics library used for 2D and 3D rendering. On systems which support OpenGL ES, NVIDIA&#39;s OpenGL ES implementation is provided with the CUDA Driver.&lt;/p&gt; &#xA;&lt;h4&gt;Vulkan&lt;/h4&gt; &#xA;&lt;p&gt;Vulkan is a low-overhead, cross-platform 3D graphics and compute API. Vulkan targets high-performance realtime 3D graphics applications such as video games and interactive media across all platforms. On systems which support Vulkan, NVIDIA&#39;s Vulkan implementation is provided with the CUDA Driver. For building and running Vulkan applications one needs to install the &lt;a href=&#34;https://www.lunarg.com/vulkan-sdk/&#34;&gt;Vulkan SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;OpenMP&lt;/h4&gt; &#xA;&lt;p&gt;OpenMP is an API for multiprocessing programming. OpenMP can be installed using your Linux distribution&#39;s package manager system. It usually comes preinstalled with GCC. It can also be found at the &lt;a href=&#34;http://openmp.org/&#34;&gt;OpenMP website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Screen&lt;/h4&gt; &#xA;&lt;p&gt;Screen is a windowing system found on the QNX operating system. Screen is usually found as part of the root filesystem.&lt;/p&gt; &#xA;&lt;h4&gt;X11&lt;/h4&gt; &#xA;&lt;p&gt;X11 is a windowing system commonly found on *-nix style operating systems. X11 can be installed using your Linux distribution&#39;s package manager, and comes preinstalled on Mac OS X systems.&lt;/p&gt; &#xA;&lt;h4&gt;EGL&lt;/h4&gt; &#xA;&lt;p&gt;EGL is an interface between Khronos rendering APIs (such as OpenGL, OpenGL ES or OpenVG) and the underlying native platform windowing system.&lt;/p&gt; &#xA;&lt;h4&gt;EGLOutput&lt;/h4&gt; &#xA;&lt;p&gt;EGLOutput is a set of EGL extensions which allow EGL to render directly to the display.&lt;/p&gt; &#xA;&lt;h4&gt;EGLSync&lt;/h4&gt; &#xA;&lt;p&gt;EGLSync is a set of EGL extensions which provides sync objects that are synchronization primitive, representing events whose completion can be tested or waited upon.&lt;/p&gt; &#xA;&lt;h4&gt;NVSCI&lt;/h4&gt; &#xA;&lt;p&gt;NvSci is a set of communication interface libraries out of which CUDA interops with NvSciBuf and NvSciSync. NvSciBuf allows applications to allocate and exchange buffers in memory. NvSciSync allows applications to manage synchronization objects which coordinate when sequences of operations begin and end.&lt;/p&gt; &#xA;&lt;h4&gt;NvMedia&lt;/h4&gt; &#xA;&lt;p&gt;NvMedia provides powerful processing of multimedia data for true hardware acceleration across NVIDIA Tegra devices. Applications leverage the NvMedia Application Programming Interface (API) to process the image and video data.&lt;/p&gt; &#xA;&lt;h3&gt;CUDA Features&lt;/h3&gt; &#xA;&lt;p&gt;These CUDA features are needed by some CUDA samples. They are provided by either the CUDA Toolkit or CUDA Driver. Some features may not be available on your system.&lt;/p&gt; &#xA;&lt;h4&gt;CUFFT Callback Routines&lt;/h4&gt; &#xA;&lt;p&gt;CUFFT Callback Routines are user-supplied kernel routines that CUFFT will call when loading or storing data. These callback routines are only available on Linux x86_64 and ppc64le systems.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Dynamic Parallellism&lt;/h4&gt; &#xA;&lt;p&gt;CDP (CUDA Dynamic Parallellism) allows kernels to be launched from threads running on the GPU. CDP is only available on GPUs with SM architecture of 3.5 or above.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-block Cooperative Groups&lt;/h4&gt; &#xA;&lt;p&gt;Multi Block Cooperative Groups(MBCG) extends Cooperative Groups and the CUDA programming model to express inter-thread-block synchronization. MBCG is available on GPUs with Pascal and higher architecture.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Device Cooperative Groups&lt;/h4&gt; &#xA;&lt;p&gt;Multi Device Cooperative Groups extends Cooperative Groups and the CUDA programming model enabling thread blocks executing on multiple GPUs to cooperate and synchronize as they execute. This feature is available on GPUs with Pascal and higher architecture.&lt;/p&gt; &#xA;&lt;h4&gt;CUBLAS&lt;/h4&gt; &#xA;&lt;p&gt;CUBLAS (CUDA Basic Linear Algebra Subroutines) is a GPU-accelerated version of the BLAS library.&lt;/p&gt; &#xA;&lt;h4&gt;CUDA Interprocess Communication&lt;/h4&gt; &#xA;&lt;p&gt;IPC (Interprocess Communication) allows processes to share device pointers.&lt;/p&gt; &#xA;&lt;h4&gt;CUFFT&lt;/h4&gt; &#xA;&lt;p&gt;CUFFT (CUDA Fast Fourier Transform) is a GPU-accelerated FFT library.&lt;/p&gt; &#xA;&lt;h4&gt;CURAND&lt;/h4&gt; &#xA;&lt;p&gt;CURAND (CUDA Random Number Generation) is a GPU-accelerated RNG library.&lt;/p&gt; &#xA;&lt;h4&gt;CUSPARSE&lt;/h4&gt; &#xA;&lt;p&gt;CUSPARSE (CUDA Sparse Matrix) provides linear algebra subroutines used for sparse matrix calculations.&lt;/p&gt; &#xA;&lt;h4&gt;CUSOLVER&lt;/h4&gt; &#xA;&lt;p&gt;CUSOLVER library is a high-level package based on the CUBLAS and CUSPARSE libraries. It combines three separate libraries under a single umbrella, each of which can be used independently or in concert with other toolkit libraries. The intent ofCUSOLVER is to provide useful LAPACK-like features, such as common matrix factorization and triangular solve routines for dense matrices, a sparse least-squares solver and an eigenvalue solver. In addition cuSolver provides a new refactorization library useful for solving sequences of matrices with a shared sparsity pattern.&lt;/p&gt; &#xA;&lt;h4&gt;NPP&lt;/h4&gt; &#xA;&lt;p&gt;NPP (NVIDIA Performance Primitives) provides GPU-accelerated image, video, and signal processing functions.&lt;/p&gt; &#xA;&lt;h4&gt;NVGRAPH&lt;/h4&gt; &#xA;&lt;p&gt;NVGRAPH is a GPU-accelerated graph analytics library.&lt;/p&gt; &#xA;&lt;h4&gt;NVJPEG&lt;/h4&gt; &#xA;&lt;p&gt;NVJPEG library provides high-performance, GPU accelerated JPEG decoding functionality for image formats commonly used in deep learning and hyperscale multimedia applications.&lt;/p&gt; &#xA;&lt;h4&gt;NVRTC&lt;/h4&gt; &#xA;&lt;p&gt;NVRTC (CUDA RunTime Compilation) is a runtime compilation library for CUDA C++.&lt;/p&gt; &#xA;&lt;h4&gt;Stream Priorities&lt;/h4&gt; &#xA;&lt;p&gt;Stream Priorities allows the creation of streams with specified priorities. Stream Priorities is only available on GPUs with SM architecture of 3.5 or above.&lt;/p&gt; &#xA;&lt;h4&gt;Unified Virtual Memory&lt;/h4&gt; &#xA;&lt;p&gt;UVM (Unified Virtual Memory) enables memory that can be accessed by both the CPU and GPU without explicit copying between the two. UVM is only available on Linux and Windows systems.&lt;/p&gt; &#xA;&lt;h4&gt;16-bit Floating Point&lt;/h4&gt; &#xA;&lt;p&gt;FP16 is a 16-bit floating-point format. One bit is used for the sign, five bits for the exponent, and ten bits for the mantissa.&lt;/p&gt; &#xA;&lt;h4&gt;C++11 CUDA&lt;/h4&gt; &#xA;&lt;p&gt;NVCC support of &lt;a href=&#34;https://en.wikipedia.org/wiki/C++11&#34;&gt;C++11 features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;The libNVVM samples are built using &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; 3.10 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors Guide&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your input on issues and suggestions for samples. At this time we are not accepting contributions from the public, check back here as we evolve our contribution model.&lt;/p&gt; &#xA;&lt;p&gt;We use Google C++ Style Guide for all the sources &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;https://google.github.io/styleguide/cppguide.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;Answers to frequently asked questions about CUDA can be found at &lt;a href=&#34;http://developer.nvidia.com/cuda-faq&#34;&gt;http://developer.nvidia.com/cuda-faq&lt;/a&gt; and in the &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&#34;&gt;CUDA Toolkit Release Notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html&#34;&gt;CUDA Programming Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/blog/?tags=accelerated-computing&#34;&gt;Accelerated Computing Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Attributions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Teapot image is obtained from &lt;a href=&#34;https://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg&#34;&gt;Wikimedia&lt;/a&gt; and is licensed under the Creative Commons &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/2.0/deed.en&#34;&gt;Attribution-Share Alike 2.0&lt;/a&gt; Generic license. The image is modified for samples use cases.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>espressif/esp-idf</title>
    <updated>2024-11-01T01:45:05Z</updated>
    <id>tag:github.com,2024-11-01:/espressif/esp-idf</id>
    <link href="https://github.com/espressif/esp-idf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Espressif IoT Development Framework. Official development framework for Espressif SoCs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Espressif IoT Development Framework&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/README_CN.md&#34;&gt;中文版&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.&lt;/p&gt; &#xA;&lt;h1&gt;ESP-IDF Release Support Schedule&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://dl.espressif.com/dl/esp-idf/support-periods.svg?v=1&#34; alt=&#34;Support Schedule&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/SUPPORT_POLICY.md&#34;&gt;the support policy&lt;/a&gt; and &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;the documentation&lt;/a&gt; for more information about ESP-IDF versions.&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://www.espressif.com/en/support/documents/advisories?keys=&amp;amp;field_type_of_advisory_tid%5B%5D=817&#34;&gt;End-of-Life Advisories&lt;/a&gt; for information about ESP-IDF releases with discontinued support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;ESP-IDF Release and SoC Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;The following table shows ESP-IDF support of Espressif SoCs where &lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt; and &lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt; denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Chip&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.0&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.1&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.2&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.3&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;v5.4&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-S3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_S3&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32-C2&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_C6&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-H2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32_H2&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-P4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-supported-green&#34; alt=&#34;alt text&#34; title=&#34;supported&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32-P4&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/news/ESP32-C5&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ESP32-C61&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-preview-orange&#34; alt=&#34;alt text&#34; title=&#34;preview&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.espressif.com/en/products/socs/esp32-c61&#34;&gt;Announcement&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There are variants of revisions for a series of chips. See &lt;a href=&#34;https://github.com/espressif/esp-idf/raw/master/COMPATIBILITY.md&#34;&gt;Compatibility Between ESP-IDF Releases and Revisions of Espressif SoCs&lt;/a&gt; for the details of the compatibility between ESP-IDF and chip revisions.&lt;/p&gt; &#xA;&lt;p&gt;Espressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by &lt;a href=&#34;https://github.com/espressif/ESP8266_RTOS_SDK&#34;&gt;RTOS SDK&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;h1&gt;Developing With ESP-IDF&lt;/h1&gt; &#xA;&lt;h2&gt;Setting Up ESP-IDF&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://idf.espressif.com/&#34;&gt;https://idf.espressif.com/&lt;/a&gt; for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Each SoC series and each ESP-IDF release has its own documentation. Please see Section &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html&#34;&gt;Versions&lt;/a&gt; on how to find documentation and how to checkout specific release of ESP-IDF.&lt;/p&gt; &#xA;&lt;h3&gt;Non-GitHub forks&lt;/h3&gt; &#xA;&lt;p&gt;ESP-IDF uses relative locations as its submodules URLs (&lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/.gitmodules&#34;&gt;.gitmodules&lt;/a&gt;). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/tools/set-submodules-to-github.sh&#34;&gt;tools/set-submodules-to-github.sh&lt;/a&gt; after git clone.&lt;/p&gt; &#xA;&lt;p&gt;The script sets absolute URLs for all submodules, allowing &lt;code&gt;git submodule update --init --recursive&lt;/code&gt; to complete. If cloning ESP-IDF from GitHub, this step is not needed.&lt;/p&gt; &#xA;&lt;h2&gt;Finding a Project&lt;/h2&gt; &#xA;&lt;p&gt;As well as the &lt;a href=&#34;https://github.com/espressif/esp-idf-template&#34;&gt;esp-idf-template&lt;/a&gt; project mentioned in Getting Started, ESP-IDF comes with some example projects in the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve found the project you want to work with, change to its directory and you can configure and build it.&lt;/p&gt; &#xA;&lt;p&gt;To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.&lt;/p&gt; &#xA;&lt;h1&gt;Quick Reference&lt;/h1&gt; &#xA;&lt;p&gt;See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:&lt;/p&gt; &#xA;&lt;h2&gt;Setup Build Environment&lt;/h2&gt; &#xA;&lt;p&gt;(See the Getting Started guide listed above for a full list of required steps with more details.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install host build dependencies mentioned in the Getting Started guide.&lt;/li&gt; &#xA; &lt;li&gt;Run the install script to set up the build environment. The options include &lt;code&gt;install.bat&lt;/code&gt; or &lt;code&gt;install.ps1&lt;/code&gt; for Windows, and &lt;code&gt;install.sh&lt;/code&gt; or &lt;code&gt;install.fish&lt;/code&gt; for Unix shells.&lt;/li&gt; &#xA; &lt;li&gt;Run the export script on Windows (&lt;code&gt;export.bat&lt;/code&gt;) or source it on Unix (&lt;code&gt;source export.sh&lt;/code&gt;) in every shell environment before using ESP-IDF.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the Project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py set-target &amp;lt;chip_name&amp;gt;&lt;/code&gt; sets the target of the project to &lt;code&gt;&amp;lt;chip_name&amp;gt;&lt;/code&gt;. Run &lt;code&gt;idf.py set-target&lt;/code&gt; without any arguments to see a list of supported targets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py menuconfig&lt;/code&gt; opens a text-based configuration menu where you can configure the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling the Project&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;... will compile app, bootloader and generate a partition table based on the config.&lt;/p&gt; &#xA;&lt;h2&gt;Flashing the Project&lt;/h2&gt; &#xA;&lt;p&gt;When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py -p PORT flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace PORT with the name of your serial port (like &lt;code&gt;COM3&lt;/code&gt; on Windows, &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; on Linux, or &lt;code&gt;/dev/cu.usbserial-X&lt;/code&gt; on MacOS. If the &lt;code&gt;-p&lt;/code&gt; option is left out, &lt;code&gt;idf.py flash&lt;/code&gt; will try to flash the first available serial port.&lt;/p&gt; &#xA;&lt;p&gt;This will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with &lt;code&gt;idf.py menuconfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t need to run &lt;code&gt;idf.py build&lt;/code&gt; before running &lt;code&gt;idf.py flash&lt;/code&gt;, &lt;code&gt;idf.py flash&lt;/code&gt; will automatically rebuild anything which needs it.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing Serial Output&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py monitor&lt;/code&gt; target uses the &lt;a href=&#34;https://github.com/espressif/esp-idf-monitor&#34;&gt;esp-idf-monitor tool&lt;/a&gt; to display serial output from Espressif SoCs. esp-idf-monitor also has a range of features to decode crash output and interact with the device. &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html&#34;&gt;Check the documentation page for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Exit the monitor by typing Ctrl-].&lt;/p&gt; &#xA;&lt;p&gt;To build, flash and monitor output in one pass, you can run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py flash monitor&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compiling &amp;amp; Flashing Only the App&lt;/h2&gt; &#xA;&lt;p&gt;After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app&lt;/code&gt; - build just the app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; - flash just the app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;idf.py app-flash&lt;/code&gt; will automatically rebuild the app if any source files have changed.&lt;/p&gt; &#xA;&lt;p&gt;(In normal development there&#39;s no downside to reflashing the bootloader and partition table each time, if they haven&#39;t changed.)&lt;/p&gt; &#xA;&lt;h2&gt;Erasing Flash&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;idf.py flash&lt;/code&gt; target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run &lt;code&gt;idf.py erase-flash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can be combined with other targets, ie &lt;code&gt;idf.py -p PORT erase-flash flash&lt;/code&gt; will erase everything and then re-flash the new app, bootloader and partition table.&lt;/p&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation for the latest version: &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/&#34;&gt;https://docs.espressif.com/projects/esp-idf/&lt;/a&gt;. This documentation is built from the &lt;a href=&#34;https://raw.githubusercontent.com/espressif/esp-idf/master/docs&#34;&gt;docs directory&lt;/a&gt; of this repository.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/J8zc8mMNKtc?feature=shared&#34;&gt;Beginner&#39;s Guide to Key Concepts and Resources of ESP-IDF&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://esp32.com/&#34;&gt;esp32.com forum&lt;/a&gt; is a place to ask questions and find community resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/espressif/esp-idf/issues&#34;&gt;Check the Issues section on github&lt;/a&gt; if you find a bug or have a feature request. Please check existing Issues before opening a new one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re interested in contributing to ESP-IDF, please check the &lt;a href=&#34;https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html&#34;&gt;Contributions Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pr3y/Bruce</title>
    <updated>2024-11-01T01:45:05Z</updated>
    <id>tag:github.com,2024-11-01:/pr3y/Bruce</id>
    <link href="https://github.com/pr3y/Bruce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Predatory ESP32 Firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/bruce_banner.jpg&#34; alt=&#34;Bruce Main Menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;span&gt;🦈&lt;/span&gt; Bruce&lt;/h1&gt; &#xA;&lt;p&gt;Bruce is meant to be a versatile ESP32 firmware that supports a ton of offensive features focusing on facilitating Red Team operations. It also supports m5stack products and works great with Cardputer, Sticks and M5Cores.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🏗&lt;/span&gt; How to install&lt;/h2&gt; &#xA;&lt;h3&gt;The easiest way to install Bruce is using our official Web Flasher!&lt;/h3&gt; &#xA;&lt;h3&gt;Check out: &lt;a href=&#34;https://bruce.computer/flasher&#34;&gt;https://bruce.computer/flasher&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can download the latest binary from releases or actions and flash locally using esptool.py&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;esptool.py --port /dev/ttyACM0 write_flash 0x00000 Bruce-&amp;lt;device&amp;gt;.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For m5stack devices&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you already use M5Launcher to manage your m5stack device, you can install it with OTA&lt;/p&gt; &#xA;&lt;p&gt;Or you can burn it directly from the &lt;a href=&#34;https://docs.m5stack.com/en/download&#34;&gt;m5burner tool&lt;/a&gt;, just search for &#39;Bruce&#39; (My official builds will be uploaded by &#34;owner&#34; and have photos.) on the device category you want to and click on burn&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⌨&lt;/span&gt; Discord Server&lt;/h2&gt; &#xA;&lt;p&gt;Contact us in our &lt;a href=&#34;https://discord.gg/WJ9XF9czVT&#34;&gt;Discord Server&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📑&lt;/span&gt; Wiki&lt;/h2&gt; &#xA;&lt;p&gt;For more information on each function supported by Bruce, &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki&#34;&gt;read our wiki here&lt;/a&gt;. Also, &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FAQ&#34;&gt;read our FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; List of Features&lt;/h2&gt; &#xA;&lt;h3&gt;WiFi&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Connect to WiFi&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; WiFi AP&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Disconnect WiFi&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#wifi-atks&#34;&gt;WiFi Atks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#beacon-spam&#34;&gt;Beacon Spam&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#target-atk&#34;&gt;Target Atk&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Information&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Target Deauth&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; EvilPortal + Deauth&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Deauth Flood (More than one target)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Wardriving&#34;&gt;Wardriving&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#telnet&#34;&gt;TelNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#ssh&#34;&gt;SSH&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#raw-sniffer&#34;&gt;RAW Sniffer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#dpwo-esp32&#34;&gt;DPWO-ESP32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&#34;&gt;Evil Portal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#evil-portal&#34;&gt;Scan Hosts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/WiFi#wireguard-tunneling&#34;&gt;Wireguard Tunneling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brucegotchi &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pwnagotchi friend&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pwngrid spam faces &amp;amp; names &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [Optional] DoScreen a very long name and face&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [Optional] Flood uniq peer identifiers&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BLE&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/BLE#ble-scan&#34;&gt;BLE Scan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bad BLE - Run Ducky scripts, similar to &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#badusb&#34;&gt;BadUsb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BLE Keyboard - Cardputer Only (for now)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; iOS Spam&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Windows Spam&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Samsung Spam&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Android Spam&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Spam All&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RF&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Scan/Copy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/RF#replay-payloads-like-flipper&#34;&gt;Custom SubGhz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Spectrum&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jammer Full (sends a full squared wave into output)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Jammer Intermittent (sends PWM signal into output)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Config &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RF TX Pin&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RF RX Pin&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RF Module &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RF433 T/R M5Stack&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/CC1101&#34;&gt;CC1101 (Sub-Ghz)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RF Frequency&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Replay&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RFID&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Read tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Read 125kHz&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clone tag&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Write NDEF records&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Amiibolink&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Chameleon&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Write data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Erase data&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Save file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Load file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Config &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/RFID#supported-modules&#34;&gt;RFID Module&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PN532&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Emulate tag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;IR&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TV-B-Gone&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IR Receiver&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/IR#replay-payloads-like-flipper&#34;&gt;Custom IR (NEC, NEC42, NECExt, SIRC, SIRC15, SIRC20, Samsung32, RC5, RC5X, RC6)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Config &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ir TX Pin&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ir RX Pin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;FM&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FM#play_or_pause_button-broadcast-standard&#34;&gt;Broadcast standard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FM#no_entry_sign-broadcast-rerserved&#34;&gt;Broadcast reserved&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FM#stop_button-broadcast-stop&#34;&gt;Broadcast stop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FM#ocean-fm-spectrum&#34;&gt;FM Spectrum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FM#car-hijack-ta&#34;&gt;Hijack Traffic Announcements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/FM#bookmark_tabs-config&#34;&gt;Config&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NRF24&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/BLE#nrf24-jammer&#34;&gt;NRF24 Jammer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2.4G Spectrum&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Mousejack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scripts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Interpreter&#34;&gt;JavaScript Interpreter&lt;/a&gt; &lt;a href=&#34;https://github.com/justinknight93/Doolittle&#34;&gt;Credits to justinknight93&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Others&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Mic Spectrum&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; QRCodes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PIX (Brazil bank transfer system)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#sd-card-mngr&#34;&gt;SD Card Mngr&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; View image (jpg)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File Info&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Wardriving#how-to-upload&#34;&gt;Wigle Upload&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Play Audio&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; View File&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#littlefs-mngr&#34;&gt;LittleFS Mngr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#webui&#34;&gt;WebUI&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Server Structure&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Html&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SDCard Mngr&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Spiffs Mngr&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Megalodon&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#badusb&#34;&gt;BADUsb (New features, LittleFS and SDCard)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; USB Keyboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#openhaystack&#34;&gt;Openhaystack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#led-control&#34;&gt;LED Control&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clock&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; RTC Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NTP time adjust&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manual adjust&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Connect (ESPNOW)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Send File&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Receive File&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Brightness&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dim Time&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Orientation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UI Color&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Boot Sound on/off&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clock&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sleep&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Specific functions per Device, the ones not mentioned here are available to all.&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Device&lt;/th&gt; &#xA;   &lt;th&gt;CC1101&lt;/th&gt; &#xA;   &lt;th&gt;NRF24&lt;/th&gt; &#xA;   &lt;th&gt;Interpreter&lt;/th&gt; &#xA;   &lt;th&gt;FMRadio&lt;/th&gt; &#xA;   &lt;th&gt;PN532&lt;/th&gt; &#xA;   &lt;th&gt;Mic_SPM1423&lt;/th&gt; &#xA;   &lt;th&gt;BadUSB&lt;/th&gt; &#xA;   &lt;th&gt;RGB Led&lt;/th&gt; &#xA;   &lt;th&gt;Speaker&lt;/th&gt; &#xA;   &lt;th&gt;LITE_MODE&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cardputer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NS4168&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StickCPlus2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#badusb&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tone&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StickCPlus 1.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;a href=&#34;https://github.com/pr3y/Bruce/wiki/Others#badusb&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tone&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Core&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tone&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Core2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoreSe/SE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CYD-2432S028&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;🆗&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;LITE_MODE&lt;/em&gt;: TelNet, SSH, DPWO, WireGuard, ScanHosts, RawSniffer, Brucegotchi, BLEBacon, BLEScan and OpenHaystack are NOT available for M5Launcher Compatibility&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;✨&lt;/span&gt; Why and how does it look?&lt;/h2&gt; &#xA;&lt;p&gt;Bruce stems from a keen observation within the community focused on devices like Flipper Zero. While these devices offered a glimpse into the world of offensive security, there was a palpable sense that something more could be achieved without being that overpriced, particularly with the robust and modular hardware ecosystem provided by m5stack products.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/pic1.png&#34; alt=&#34;Bruce Main Menu&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/core.png&#34; alt=&#34;Bruce on M5Core&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/stick.png&#34; alt=&#34;Bruce on Stick&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pr3y/Bruce/main/media/pictures/cyd.png&#34; alt=&#34;Bruce on CYD&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other media can be &lt;a href=&#34;https://raw.githubusercontent.com/pr3y/Bruce/main/media/&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;👏&lt;/span&gt; Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bmorcelli&#34;&gt;@bmorcelli&lt;/a&gt; for new core and a bunch of new features, also porting to many devices!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IncursioHack&#34;&gt;@IncursioHack&lt;/a&gt; for adding RF and RFID modules features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Luidiblu&#34;&gt;@Luidiblu&lt;/a&gt; for logo and UI design assistance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eadmaster&#34;&gt;@eadmaster&lt;/a&gt; for adding a lot of features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rennancockles&#34;&gt;@rennancockles&lt;/a&gt; for a lot of RFID code, refactoring and others features.&lt;/li&gt; &#xA; &lt;li&gt;Everyone who contributed in some way to the project, thanks &lt;span&gt;❤️&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🚧&lt;/span&gt; Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Bruce is a tool for cyber offensive and red team operations, distributed under the terms of the Affero General Public License (AGPL). It is intended for legal and authorized security testing purposes only. Use of this software for any malicious or unauthorized activities is strictly prohibited. By downloading, installing, or using Bruce, you agree to comply with all applicable laws and regulations. This software is provided free of charge, and we do not accept payments for copies or modifications. The developers of Bruce assume no liability for any misuse of the software. Use at your own risk.&lt;/p&gt;</summary>
  </entry>
</feed>