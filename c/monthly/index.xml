<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T02:33:05Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MrGlockenspiel/activate-linux</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/MrGlockenspiel/activate-linux</id>
    <link href="https://github.com/MrGlockenspiel/activate-linux" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The &#34;Activate Windows&#34; watermark ported to Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;activate-linux&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &#34;Activate Windows&#34; watermark ported to Linux with Xlib and cairo in C&lt;/p&gt; &#xA;&lt;p&gt;&#34;Science isn&#39;t about WHY. It&#39;s about WHY NOT. Why is so much of our science dangerous? Why not marry safe science if you love it so much. In fact, why not invent a special safety door that won&#39;t hit you on the butt on the way out, because you are fired.&#34; — Cave Johnson (Portal 2)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/MrGlockenspiel/activate-linux/main/ARGS.md&#34;&gt;ARGS.md&lt;/a&gt; for information about command line arguments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the executable&#39;s name depends on the target platform&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;This project depends on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libcairo2-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libxi-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libx11-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x11proto-core-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;x11proto-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libxt-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libxfixes-dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libxinerama-dev&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;@eddelbuettel runs a PPA with activate linux in it, so it can be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:edd/misc&#xA;sudo apt update&#xA;sudo apt install activate-linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;This project is in the AUR under &lt;a href=&#34;https://aur.archlinux.org/packages/activate-linux-git&#34;&gt;activate-linux-git&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install/uninstall it using your favorite AUR helper.&lt;/p&gt; &#xA;&lt;h4&gt;Nix (NixOS)&lt;/h4&gt; &#xA;&lt;p&gt;This repository is a flake. Run it using &lt;code&gt;nix run &#34;github:MrGlockenspiel/activate-linux&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;make install&lt;/code&gt; to install and &lt;code&gt;make uninstall&lt;/code&gt; to remove it.&lt;/p&gt; &#xA;&lt;h2&gt;MacOS (Horrific)&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Use MacPorts to install the following, then build normally.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;xorg-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cairo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xorg-libXinerama&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;a href=&#34;https://github.com/Lakr233/ActivateMac&#34;&gt;this&lt;/a&gt; project instead because it actually works properly&lt;/p&gt; &#xA;&lt;h3&gt;Wayland&lt;/h3&gt; &#xA;&lt;p&gt;This works out of the box through XWayland, or alternatively you can use &lt;a href=&#34;https://github.com/Kljunas2/activate-linux&#34;&gt;this port of the project by Kljunas2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MrGlockenspiel/activate-linux/main/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ventoy/Ventoy</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/ventoy/Ventoy</id>
    <link href="https://github.com/ventoy/Ventoy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new bootable USB solution.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.ventoy.net/&#34;&gt;Ventoy&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/ventoy/Ventoy.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/ventoy/Ventoy?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ventoy/Ventoy?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/ventoy/Ventoy/total.svg?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/ventoy/Ventoy/Ventoy%20CI?label=actions&amp;amp;logo=github&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;h4 align=&#34;left&#34;&gt; Ventoy is an open source tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files. &lt;br&gt; With ventoy, you don&#39;t need to format the disk over and over, you just need to copy the image files to the USB drive and boot it. You can copy many image files at a time and ventoy will give you a boot menu to select them. &lt;br&gt; You can also browse ISO/WIM/IMG/VHD(x)/EFI files in local disk and boot them.&lt;br&gt; x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI and MIPS64EL UEFI are supported in the same way.&lt;br&gt; Both MBR and GPT partition style are supported in the same way.&lt;br&gt; Most type of OS supported(Windows/WinPE/Linux/Unix/ChromeOS/Vmware/Xen...) &lt;br&gt; 830+ ISO files are tested (&lt;a href=&#34;https://www.ventoy.net/en/isolist.html&#34;&gt;List&lt;/a&gt;). 90%+ distros in &lt;a href=&#34;https://distrowatch.com/&#34;&gt;distrowatch.com&lt;/a&gt; supported (&lt;a href=&#34;https://www.ventoy.net/en/distrowatch.html&#34;&gt;Details&lt;/a&gt;). &lt;br&gt; &lt;br&gt;Official Website: &lt;a href=&#34;https://www.ventoy.net&#34;&gt;https://www.ventoy.net&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;h1&gt;Tested OS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;br&gt; Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11, Windows Server 2012, Windows Server 2012 R2, Windows Server 2016, Windows Server 2019, Windows Server 2022, WinPE&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;br&gt; Debian, Ubuntu, CentOS, RHEL, Deepin, Fedora, Rocky Linux, SLES, openSUSE, MX Linux, Manjaro, Linux Mint, Endless OS, openEuler, Elementary OS, Solus, Linx, Zorin, antiX, PClinuxOS, Arch, ArcoLinux, ArchLabs, BlackArch, Obarun, Artix Linux, Puppy Linux, Tails, Slax, MiniOS, Kali, Mageia, Slackware, Q4OS, Archman, Gentoo, Pentoo, NixOS, Ubuntu Kylin, Lubuntu, Xubuntu, Kubuntu, Ubuntu MATE, Ubuntu Budgie, Ubuntu Studio, Bluestar, OpenMandriva, ExTiX, Netrunner, ALT Linux, Nitrux, Peppermint, KDE neon, Linux Lite, Parrot OS, Qubes, Pop OS, ROSA, Void Linux, Star Linux, EndeavourOS, MakuluLinux, Voyager, Feren, ArchBang, LXLE, Knoppix, Robolinux, Calculate Linux, Clear Linux, Pure OS, Oracle Linux, Trident, Septor, Porteus, Devuan, GoboLinux, 4MLinux, Simplicity Linux, Zeroshell, Android-x86, netboot.xyz, Slitaz, SuperGrub2Disk, Proxmox VE, Kaspersky Rescue, SystemRescueCD, MemTest86, MiniTool Partition Wizard, Parted Magic, veket, Sabayon, Scientific, alpine, ClearOS, CloneZilla, Berry Linux, Trisquel, Ataraxia Linux, Minimal Linux Live, BackBox Linux, Emmabuntüs, ESET SysRescue Live,Nova Linux, AV Linux, RoboLinux, NuTyX, IPFire, SELKS, ZStack, Enso Linux, Security Onion, Network Security Toolkit, Absolute Linux, TinyCore, Springdale Linux, Frost Linux, Shark Linux, LinuxFX, Snail Linux, Astra Linux, Namib Linux, Resilient Linux, Virage Linux, Blackweb Security OS, R-DriveImage, O-O.DiskImage, Macrium, ToOpPy LINUX, GNU Guix, YunoHost, foxclone, siduction, Adelie Linux, Elive, Pardus, CDlinux, AcademiX, Austrumi, Zenwalk, Anarchy, DuZeru, BigLinux, OpenMediaVault, Ubuntu DP, Exe GNU/Linux, 3CX Phone System, KANOTIX, Grml, Karoshi, PrimTux, ArchStrike, CAELinux, Refracta, Cucumber, Fatdog, ForLEx, Hanthana, Kwort, MiniNo, Redcore, Runtu, Asianux, Clu Linux Live, Uruk, OB2D, BlueOnyx, Finnix, HamoniKR, Parabola, LinHES, LinuxConsole, BEE free, Untangle, Pearl, Thinstation, TurnKey, tuxtrans, Neptune, HefftorLinux, GeckoLinux, Mabox Linux, Zentyal, Maui, Reborn OS, SereneLinux , SkyWave Linux, Kaisen Linux, Regata OS, TROM-Jaro, DRBL Linux, Chalet OS, Chapeau, Desa OS, BlankOn, OpenMamba, Frugalware, Kibojoe Linux, Revenge OS, Tsurugi Linux, Drauger OS, Hash Linux, gNewSense, Ikki Boot, SteamOS, Hyperbola, VyOS, EasyNAS, SuperGamer, Live Raizo, Swift Linux, RebeccaBlackOS, Daphile, CRUX, Univention, Ufficio Zero, Rescuezilla, Phoenix OS, Garuda Linux, Mll, NethServer, OSGeoLive, Easy OS, Volumio, FreedomBox, paldo, UBOS, Recalbox, batocera, Lakka, LibreELEC, Pardus Topluluk, Pinguy, KolibriOS, Elastix, Arya, Omoikane, Omarine, Endian Firewall, Hamara, Rocks Cluster, MorpheusArch, Redo, Slackel, SME Server, APODIO, Smoothwall, Dragora, Linspire, Secure-K OS, Peach OSI, Photon, Plamo, SuperX, Bicom, Ploplinux, HP SPP, LliureX, Freespire, DietPi, BOSS, Webconverger, Lunar, TENS, Source Mage, RancherOS, T2, Vine, Pisi, blackPanther, mAid, Acronis, Active.Boot, AOMEI, Boot.Repair, CAINE, DaRT, EasyUEFI, R-Drive, PrimeOS, Avira Rescue System, bitdefender, Checkra1n Linux, Lenovo Diagnostics, Clover, Bliss-OS, Lenovo BIOS Update, Arcabit Rescue Disk, MiyoLinux, TeLOS, Kerio Control, RED OS, OpenWrt, MocaccinoOS, EasyStartup, Pyabr, Refracta, Eset SysRescue, Linpack Xtreme, Archcraft, ......&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unix&lt;/strong&gt;&lt;br&gt; DragonFly FreeBSD pfSense GhostBSD FreeNAS TrueNAS XigmaNAS FuryBSD OPNsense HardenedBSD MidnightBSD ClonOS EmergencyBootKit&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ChromeOS&lt;/strong&gt;&lt;br&gt; FydeOS, CloudReady&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;br&gt; VMware ESXi, Citrix XenServer, Xen XCP-ng&lt;/p&gt; &#xA;&lt;h1&gt;Subscription Service&lt;/h1&gt; &#xA;&lt;p&gt;Ventoy is an open source software under GPLv3 license. But Ventoy project need to pay for the server hosting, domain name, bandwidth, many USB sticks for test, large capacity of HDD (for downloading ISO files) and so on.&lt;br&gt; For the better and sustainable development of Ventoy, I provide the &lt;a href=&#34;https://www.ventoy.net/en/doc_subscription.html&#34;&gt;【subscription service】&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Tested Image Report&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ventoy/Ventoy/issues/1195&#34;&gt;【How to report a successfully tested image file】&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ventoy Browser&lt;/h1&gt; &#xA;&lt;p&gt;With Ventoy, you can also browse ISO/WIM/IMG/VHD(x)/EFI files in local disk and boot them. &lt;a href=&#34;https://www.ventoy.net/en/doc_browser.html&#34;&gt;Notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;VentoyPlugson&lt;/h1&gt; &#xA;&lt;p&gt;A GUI Ventoy plugin configurator. &lt;a href=&#34;https://www.ventoy.net/en/plugin_plugson.html&#34;&gt;VentoyPlugson&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% open source&lt;/li&gt; &#xA; &lt;li&gt;Simple to use&lt;/li&gt; &#xA; &lt;li&gt;Fast (limited only by the speed of copying iso file)&lt;/li&gt; &#xA; &lt;li&gt;Can be installed in USB/Local Disk/SSD/NVMe/SD Card&lt;/li&gt; &#xA; &lt;li&gt;Directly boot from ISO/WIM/IMG/VHD(x)/EFI files, no extraction needed&lt;/li&gt; &#xA; &lt;li&gt;Support to browse and boot ISO/WIM/IMG/VHD(x)/EFI files in local disk&lt;/li&gt; &#xA; &lt;li&gt;No need to be continuous in disk for ISO/WIM/IMG/VHD(x)/EFI files&lt;/li&gt; &#xA; &lt;li&gt;MBR and GPT partition style supported (1.0.15+)&lt;/li&gt; &#xA; &lt;li&gt;x86 Legacy BIOS, IA32 UEFI, x86_64 UEFI, ARM64 UEFI, MIPS64EL UEFI supported&lt;/li&gt; &#xA; &lt;li&gt;IA32/x86_64 UEFI Secure Boot supported (1.0.07+)&lt;/li&gt; &#xA; &lt;li&gt;Persistence supported (1.0.11+)&lt;/li&gt; &#xA; &lt;li&gt;Windows auto installation supported (1.0.09+)&lt;/li&gt; &#xA; &lt;li&gt;RHEL7/8/CentOS/7/8/SUSE/Ubuntu Server/Debian ... auto installation supported (1.0.09+)&lt;/li&gt; &#xA; &lt;li&gt;FAT32/exFAT/NTFS/UDF/XFS/Ext2(3)(4) supported for main partition&lt;/li&gt; &#xA; &lt;li&gt;ISO files larger than 4GB supported&lt;/li&gt; &#xA; &lt;li&gt;Native boot menu style for Legacy &amp;amp; UEFI&lt;/li&gt; &#xA; &lt;li&gt;Most types of OS supported, 830+ iso files tested&lt;/li&gt; &#xA; &lt;li&gt;Linux vDisk boot supported&lt;/li&gt; &#xA; &lt;li&gt;Not only boot but also complete installation process&lt;/li&gt; &#xA; &lt;li&gt;Menu dynamically switchable between List/TreeView mode&lt;/li&gt; &#xA; &lt;li&gt;&#34;Ventoy Compatible&#34; concept&lt;/li&gt; &#xA; &lt;li&gt;Plugin Framework and GUI plugin configurator&lt;/li&gt; &#xA; &lt;li&gt;Injection files to runtime environment&lt;/li&gt; &#xA; &lt;li&gt;Boot configuration file dynamically replacement&lt;/li&gt; &#xA; &lt;li&gt;Highly customizable theme and menu&lt;/li&gt; &#xA; &lt;li&gt;USB drive write-protected support&lt;/li&gt; &#xA; &lt;li&gt;USB normal use unaffected&lt;/li&gt; &#xA; &lt;li&gt;Data nondestructive during version upgrade&lt;/li&gt; &#xA; &lt;li&gt;No need to update Ventoy when a new distro is released&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/screen/screen_uefi.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation Instructions&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.ventoy.net/en/doc_start.html&#34;&gt;https://www.ventoy.net/en/doc_start.html&lt;/a&gt; for detailed instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Compile Instructions&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/ventoy/Ventoy/master/DOC/BuildVentoyFromSource.txt&#34;&gt;BuildVentoyFromSource.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Document&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Install &amp;amp; Update&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_start.html&#34;&gt;https://www.ventoy.net/en/doc_start.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Secure Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_secure.html&#34;&gt;https://www.ventoy.net/en/doc_secure.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Customize Theme&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_theme.html&#34;&gt;https://www.ventoy.net/en/plugin_theme.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Global Control&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_control.html&#34;&gt;https://www.ventoy.net/en/plugin_control.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Image List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_imagelist.html&#34;&gt;https://www.ventoy.net/en/plugin_imagelist.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Auto Installation&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_autoinstall.html&#34;&gt;https://www.ventoy.net/en/plugin_autoinstall.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Injection Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_injection.html&#34;&gt;https://www.ventoy.net/en/plugin_injection.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Persistence Support&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_persistence.html&#34;&gt;https://www.ventoy.net/en/plugin_persistence.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Boot WIM file&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_wimboot.html&#34;&gt;https://www.ventoy.net/en/plugin_wimboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Windows VHD Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_vhdboot.html&#34;&gt;https://www.ventoy.net/en/plugin_vhdboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linux vDisk Boot&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_vtoyboot.html&#34;&gt;https://www.ventoy.net/en/plugin_vtoyboot.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;DUD Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_dud.html&#34;&gt;https://www.ventoy.net/en/plugin_dud.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Password Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_password.html&#34;&gt;https://www.ventoy.net/en/plugin_password.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Conf Replace Plugin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_bootconf_replace.html&#34;&gt;https://www.ventoy.net/en/plugin_bootconf_replace.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Class&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_menuclass.html&#34;&gt;https://www.ventoy.net/en/plugin_menuclass.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Alias&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_menualias.html&#34;&gt;https://www.ventoy.net/en/plugin_menualias.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Menu Extension&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/plugin_grubmenu.html&#34;&gt;https://www.ventoy.net/en/plugin_grubmenu.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Memdisk Mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_memdisk.html&#34;&gt;https://www.ventoy.net/en/doc_memdisk.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;TreeView Mode&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_treeview.html&#34;&gt;https://www.ventoy.net/en/doc_treeview.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk Layout MBR&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_disk_layout.html&#34;&gt;https://www.ventoy.net/en/doc_disk_layout.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disk Layout GPT&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_disk_layout_gpt.html&#34;&gt;https://www.ventoy.net/en/doc_disk_layout_gpt.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Search Configuration&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ventoy.net/en/doc_search_path.html&#34;&gt;https://www.ventoy.net/en/doc_search_path.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.ventoy.net/en/faq.html&#34;&gt;https://www.ventoy.net/en/faq.html&lt;/a&gt; for detail&lt;/p&gt; &#xA;&lt;h1&gt;Forum&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forums.ventoy.net&#34;&gt;https://forums.ventoy.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Donation&lt;/h1&gt; &#xA;&lt;p&gt;It would be much appreciated if you want to make a small donation to support my work!&lt;br&gt; Alipay, WeChat Pay, PayPal and Bitcoin are available for donation. You can choose any of them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alipay&lt;/th&gt; &#xA;   &lt;th&gt;WeChat Pay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/AliPay.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://www.ventoy.net/static/img/WeChatPay.png&#34; width=&#34;250&#34; height=&#34;250&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;PayPal&lt;/strong&gt;&lt;br&gt; You can transfer to my paypal account &lt;code&gt;admin@ventoy.net&lt;/code&gt; or just click &lt;a href=&#34;https://www.paypal.me/ventoy&#34;&gt;https://www.paypal.me/ventoy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;&lt;br&gt; Bitcoin Address &lt;code&gt;19mZDWzZgzkHCi9YX9H3fYCUuCHq3W6wfT&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raysan5/raylib</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/raysan5/raylib</id>
    <link href="https://github.com/raysan5/raylib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and easy-to-use library to enjoy videogames programming&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; src=&#34;https://github.com/raysan5/raylib/raw/master/logo/raylib_logo_animation.gif&#34; width=&#34;288px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;raylib is a simple and easy-to-use library to enjoy videogames programming.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;raylib is highly inspired by Borland BGI graphics lib and by XNA framework and it&#39;s specially well suited for prototyping, tooling, graphical applications, embedded systems and education.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ready to learn? Jump to &lt;a href=&#34;https://www.raylib.com/examples.html&#34;&gt;code examples!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/raysan5/raylib&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/raysan5/raylib/total&#34; alt=&#34;GitHub Releases Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/raysan5/raylib?style=flat&amp;amp;label=stars&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commits-since/raysan5/raylib/4.0.0&#34; alt=&#34;GitHub commits since tagged version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/raylib/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/tiny-repos/raylib.svg?sanitize=true&#34; alt=&#34;Packaging Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/426912293134270465.svg?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord Members&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/raylib/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/raylib?label=reddit%20r%2Fraylib&amp;amp;logo=reddit&#34; alt=&#34;Subreddit Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&amp;amp;label=Youtube&amp;amp;logo=youtube&#34; alt=&#34;Youtube Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitch/status/raysan5?style=flat&amp;amp;label=Twitch&amp;amp;logo=twitch&#34; alt=&#34;Twitch Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/raysan5&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/raysan5?style=flat&amp;amp;label=@raysan5&amp;amp;color=1da1f2&amp;amp;logo=twitter&#34; alt=&#34;Twitter Followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWindows&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ALinux&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/macOS/badge.svg?sanitize=true&#34; alt=&#34;macOS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AAndroid&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/Android/badge.svg?sanitize=true&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg?sanitize=true&#34; alt=&#34;WebAssembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg?sanitize=true&#34; alt=&#34;CMakeBuilds&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Windows Examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml&#34;&gt;&lt;img src=&#34;https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg?sanitize=true&#34; alt=&#34;Linux Examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NO external dependencies&lt;/strong&gt;, all required libraries are &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;bundled into raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple platforms supported: &lt;strong&gt;Windows, Linux, MacOS, RPI, Android, HTML5... and more!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in plain C code (C99) in PascalCase/camelCase notation&lt;/li&gt; &#xA; &lt;li&gt;Hardware accelerated with OpenGL (&lt;strong&gt;1.1, 2.1, 3.3, 4.3 or ES 2.0&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unique OpenGL abstraction layer&lt;/strong&gt; (usable as standalone module): &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/rlgl.h&#34;&gt;rlgl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Fonts&lt;/strong&gt; formats supported (TTF, XNA fonts, AngelCode fonts)&lt;/li&gt; &#xA; &lt;li&gt;Multiple texture formats supported, including &lt;strong&gt;compressed formats&lt;/strong&gt; (DXT, ETC, ASTC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full 3D support&lt;/strong&gt;, including 3D Shapes, Models, Billboards, Heightmaps and more!&lt;/li&gt; &#xA; &lt;li&gt;Flexible Materials system, supporting classic maps and &lt;strong&gt;PBR maps&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Animated 3D models&lt;/strong&gt; supported (skeletal bones animation) (IQM)&lt;/li&gt; &#xA; &lt;li&gt;Shaders support, including model and &lt;strong&gt;postprocessing&lt;/strong&gt; shaders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful math module&lt;/strong&gt; for Vector, Matrix and Quaternion operations: &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/src/raymath.h&#34;&gt;raymath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio loading and playing with streaming support (WAV, OGG, MP3, FLAC, XM, MOD)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VR stereo rendering&lt;/strong&gt; support with configurable HMD device parameters&lt;/li&gt; &#xA; &lt;li&gt;Huge examples collection with &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;+120 code examples&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Bindings to &lt;a href=&#34;https://github.com/raysan5/raylib/raw/master/BINDINGS.md&#34;&gt;+50 programming languages&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free and open source&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;basic example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic raylib example, it creates a window and it draws the text &lt;code&gt;&#34;Congrats! You created your first window!&#34;&lt;/code&gt; in the middle of the screen. Check this example &lt;a href=&#34;https://www.raylib.com/examples/core/loader.html?name=core_basic_window&#34;&gt;running live on web here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;raylib.h&#34;&#xA;&#xA;int main(void)&#xA;{&#xA;    InitWindow(800, 450, &#34;raylib [core] example - basic window&#34;);&#xA;&#xA;    while (!WindowShouldClose())&#xA;    {&#xA;        BeginDrawing();&#xA;            ClearBackground(RAYWHITE);&#xA;            DrawText(&#34;Congrats! You created your first window!&#34;, 190, 200, 20, LIGHTGRAY);&#xA;        EndDrawing();&#xA;    }&#xA;&#xA;    CloseWindow();&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;build and installation&lt;/h2&gt; &#xA;&lt;p&gt;raylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the &lt;a href=&#34;https://github.com/raysan5/raylib/releases&#34;&gt;Github Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;raylib is also available via multiple &lt;a href=&#34;https://github.com/raysan5/raylib/issues/613&#34;&gt;package managers&lt;/a&gt; on multiple OS distributions.&lt;/p&gt; &#xA;&lt;h4&gt;Installing and building raylib on multiple platforms&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki#development-platforms&#34;&gt;raylib Wiki&lt;/a&gt; contains detailed instructions on building and usage on multiple platforms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Windows&#34;&gt;Working on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-macOS&#34;&gt;Working on macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux&#34;&gt;Working on GNU Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS&#34;&gt;Working on Chrome OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD&#34;&gt;Working on FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi&#34;&gt;Working on Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Android&#34;&gt;Working for Android&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5)&#34;&gt;Working for Web (HTML5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/Working-with-CMake&#34;&gt;Working anywhere with CMake&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that Wiki is open for edit, if you find some issue while building raylib for your target platform, feel free to edit the Wiki or open and issue related to it.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Setup raylib with multiple IDEs&lt;/h4&gt; &#xA;&lt;p&gt;raylib has been developed on Windows platform using &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt; and &lt;a href=&#34;https://www.mingw-w64.org/&#34;&gt;MinGW GCC&lt;/a&gt; compiler but it can be used with other IDEs on multiple platforms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/projects&#34;&gt;Projects directory&lt;/a&gt; contains several ready-to-use &lt;strong&gt;project templates&lt;/strong&gt; to build raylib and code examples with multiple IDEs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that there are lots of IDEs supported, some of the provided templates could require some review, please, if you find some issue with some template or you think they could be improved, feel free to send a PR or open a related issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;learning and docs&lt;/h2&gt; &#xA;&lt;p&gt;raylib is designed to be learned using &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;the examples&lt;/a&gt; as the main reference. There is no standard API documentation but there is a &lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;&lt;strong&gt;cheatsheet&lt;/strong&gt;&lt;/a&gt; containing all the functions available on the library and a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works.&lt;/p&gt; &#xA;&lt;p&gt;Some additional documentation about raylib design can be found in raylib GitHub Wiki. Here the more relevant links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.raylib.com/cheatsheet/cheatsheet.html&#34;&gt;raylib cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-architecture&#34;&gt;raylib architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/wiki&#34;&gt;raylib library design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/examples&#34;&gt;raylib examples collection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/raysan5/raylib-games&#34;&gt;raylib games collection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;contact and networks&lt;/h2&gt; &#xA;&lt;p&gt;raylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;Discord server&lt;/a&gt;! :)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webpage: &lt;a href=&#34;https://www.raylib.com&#34;&gt;https://www.raylib.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/raylib&#34;&gt;https://discord.gg/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://www.twitter.com/raysan5&#34;&gt;https://www.twitter.com/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch: &lt;a href=&#34;https://www.twitch.tv/raysan5&#34;&gt;https://www.twitch.tv/raysan5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/raylib&#34;&gt;https://www.reddit.com/r/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Patreon: &lt;a href=&#34;https://www.patreon.com/raylib&#34;&gt;https://www.patreon.com/raylib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;YouTube: &lt;a href=&#34;https://www.youtube.com/c/raylib&#34;&gt;https://www.youtube.com/channel/raylib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;license&lt;/h2&gt; &#xA;&lt;p&gt;raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check &lt;a href=&#34;https://raw.githubusercontent.com/raysan5/raylib/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for further details.&lt;/p&gt; &#xA;&lt;p&gt;raylib uses internally some libraries for window/graphics/inputs management and also to support different fileformats loading, all those libraries are embedded with and are available in &lt;a href=&#34;https://github.com/raysan5/raylib/tree/master/src/external&#34;&gt;src/external&lt;/a&gt; directory. Check &lt;a href=&#34;https://github.com/raysan5/raylib/wiki/raylib-dependencies&#34;&gt;raylib dependencies LICENSES&lt;/a&gt; on raylib Wiki for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iovisor/bcc</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/iovisor/bcc</id>
    <link href="https://github.com/iovisor/bcc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BCC - Tools for BPF-based Linux IO analysis, networking, monitoring, and more&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/logo2.png&#34; alt=&#34;BCC Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;BPF Compiler Collection (BCC)&lt;/h1&gt; &#xA;&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1 and above.&lt;/p&gt; &#xA;&lt;p&gt;eBPF was &lt;a href=&#34;https://lkml.org/lkml/2015/4/14/232&#34;&gt;described by&lt;/a&gt; Ingo Molnár as:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;This example traces a disk I/O kernel function, and populates an in-kernel power-of-2 histogram of the I/O size. For efficiency, only the histogram summary is returned to user-level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;# ./bitehist.py&#xA;Tracing... Hit Ctrl-C to end.&#xA;^C&#xA;     kbytes          : count     distribution&#xA;       0 -&amp;gt; 1        : 3        |                                      |&#xA;       2 -&amp;gt; 3        : 0        |                                      |&#xA;       4 -&amp;gt; 7        : 211      |**********                            |&#xA;       8 -&amp;gt; 15       : 0        |                                      |&#xA;      16 -&amp;gt; 31       : 0        |                                      |&#xA;      32 -&amp;gt; 63       : 0        |                                      |&#xA;      64 -&amp;gt; 127      : 1        |                                      |&#xA;     128 -&amp;gt; 255      : 800      |**************************************|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above output shows a bimodal distribution, where the largest mode of 800 I/O was between 128 and 255 Kbytes in size.&lt;/p&gt; &#xA;&lt;p&gt;See the source: &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;. What this traces, what this stores, and how the data is presented, can be entirely customized. This shows only some of many possible capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt; for installation steps on your platform.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/FAQ.txt&#34;&gt;FAQ.txt&lt;/a&gt; for the most common troubleshoot questions.&lt;/p&gt; &#xA;&lt;h2&gt;Reference guide&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/reference_guide.md&#34;&gt;docs/reference_guide.md&lt;/a&gt; for the reference guide to the bcc and bcc/BPF APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;Some of these are single files that contain both C and Python, others have a pair of .c and .py files, and some are directories of files.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing&lt;/h3&gt; &#xA;&lt;h4&gt;Examples:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist.py&#34;&gt;bitehist.py&lt;/a&gt;: Block I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/bitehist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop.py&#34;&gt;disksnoop.py&lt;/a&gt;: Trace block device I/O latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/disksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/hello_world.py&#34;&gt;hello_world.py&lt;/a&gt;: Prints &#34;Hello, World!&#34; for new processes.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query.py&#34;&gt;mysqld_query.py&lt;/a&gt;: Trace MySQL server queries using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/mysqld_query_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server.py&#34;&gt;nodejs_http_server.py&lt;/a&gt;: Trace Node.js HTTP server requests using USDT probes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/nodejs_http_server_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop.py&#34;&gt;stacksnoop&lt;/a&gt;: Trace a kernel function and print all kernel stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/stacksnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop.py&#34;&gt;statsnoop&lt;/a&gt;: Trace stat() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/statsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/task_switch.py&#34;&gt;task_switch.py&lt;/a&gt;: Count task switches with from and to PIDs.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect.py&#34;&gt;tcpv4connect.py&lt;/a&gt;: Trace TCP IPv4 active connections. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/tcpv4connect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/trace_fields.py&#34;&gt;trace_fields.py&lt;/a&gt;: Simple example of printing fields from traced events.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump.py&#34;&gt;undump.py&lt;/a&gt;: Dump UNIX socket packets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/undump_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread.py&#34;&gt;urandomread.py&lt;/a&gt;: A kernel tracepoint example, which traces random:urandom_read. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/urandomread_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.py&#34;&gt;vfsreadlat.py&lt;/a&gt; examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat.c&#34;&gt;vfsreadlat.c&lt;/a&gt;: VFS read latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/vfsreadlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;examples/tracing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.py&#34;&gt;kvm_hypercall.py&lt;/a&gt;: Conditional static kernel tracepoints for KVM entry, exit and hypercall &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/tracing/kvm_hypercall.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tools:&lt;/h4&gt; &#xA;&lt;center&gt;&#xA; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/images/bcc_tracing_tools_2019.png&#34; border=&#34;0&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&#xA;&lt;/center&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist.py&#34;&gt;argdist&lt;/a&gt;: Display function parameter values as a histogram or frequency count. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/argdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline.py&#34;&gt;bashreadline&lt;/a&gt;: Print entered bash commands system wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bashreadline_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop.py&#34;&gt;bindsnoop&lt;/a&gt;: Trace IPv4 and IPv6 bind() system calls (bind()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bindsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency.py&#34;&gt;biolatency&lt;/a&gt;: Summarize block device I/O latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biolatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop.py&#34;&gt;biotop&lt;/a&gt;: Top for disks: Summarize block device I/O by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biotop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern.py&#34;&gt;biopattern&lt;/a&gt;: Identify random/sequential disk access patterns. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biopattern_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop.py&#34;&gt;biosnoop&lt;/a&gt;: Trace block device I/O with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/biosnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize.py&#34;&gt;bitesize&lt;/a&gt;: Show per process I/O size histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bitesize_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist.py&#34;&gt;bpflist&lt;/a&gt;: Display processes with active BPF programs and maps. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/bpflist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist.py&#34;&gt;btrfsdist&lt;/a&gt;: Summarize btrfs operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower.py&#34;&gt;btrfsslower&lt;/a&gt;: Trace slow btrfs operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/btrfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable.py&#34;&gt;capable&lt;/a&gt;: Trace security capability checks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/capable_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat.py&#34;&gt;cachestat&lt;/a&gt;: Trace page cache hit/miss ratio. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachestat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop.py&#34;&gt;cachetop&lt;/a&gt;: Trace page cache hit/miss ratio by processes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cachetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop.py&#34;&gt;compactsnoop&lt;/a&gt;: Trace compact zone events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/compactsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist.py&#34;&gt;cpudist&lt;/a&gt;: Summarize on- and off-CPU time per task as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpudist_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed.py&#34;&gt;cpuunclaimed&lt;/a&gt;: Sample CPU run queues and calculate unclaimed idle CPU. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/cpuunclaimed_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat.py&#34;&gt;criticalstat&lt;/a&gt;: Trace and report long atomic critical sections in the kernel. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/criticalstat_example.txt&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower.py&#34;&gt;dbslower&lt;/a&gt;: Trace MySQL/PostgreSQL queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat.py&#34;&gt;dbstat&lt;/a&gt;: Summarize MySQL/PostgreSQL query latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dbstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop.py&#34;&gt;dcsnoop&lt;/a&gt;: Trace directory entry cache (dcache) lookups. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat.py&#34;&gt;dcstat&lt;/a&gt;: Directory entry cache (dcache) stats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock.py&#34;&gt;deadlock&lt;/a&gt;: Detect potential deadlocks on a running process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/deadlock_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop.py&#34;&gt;dirtop&lt;/a&gt;: File reads and writes by directory. Top for directories. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/dirtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop.py&#34;&gt;drsnoop&lt;/a&gt;: Trace direct reclaim events with PID and latency. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/drsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop.py&#34;&gt;execsnoop&lt;/a&gt;: Trace new processes via exec() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/execsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop.py&#34;&gt;exitsnoop&lt;/a&gt;: Trace process termination (exit and fatal signals). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/exitsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist.py&#34;&gt;ext4dist&lt;/a&gt;: Summarize ext4 operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4dist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower.py&#34;&gt;ext4slower&lt;/a&gt;: Trace slow ext4 operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ext4slower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife.py&#34;&gt;filelife&lt;/a&gt;: Trace the lifespan of short-lived files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filelife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower.py&#34;&gt;fileslower&lt;/a&gt;: Trace slow synchronous file reads and writes. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/fileslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop.py&#34;&gt;filetop&lt;/a&gt;: File reads and writes by filename and process. Top for files. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/filetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount.py&#34;&gt;funccount&lt;/a&gt;: Count kernel function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funccount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval.py&#34;&gt;funcinterval&lt;/a&gt;: Time interval between the same function as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcinterval_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency.py&#34;&gt;funclatency&lt;/a&gt;: Time functions and show their latency distribution. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funclatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower.py&#34;&gt;funcslower&lt;/a&gt;: Trace slow kernel or user function calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/funcslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency.py&#34;&gt;gethostlatency&lt;/a&gt;: Show latency for getaddrinfo/gethostbyname[2] calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/gethostlatency_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs.py&#34;&gt;hardirqs&lt;/a&gt;: Measure hard IRQ (hard interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/hardirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject.py&#34;&gt;inject&lt;/a&gt;: Targeted error injection with call chain and predicates &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/inject_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop.py&#34;&gt;killsnoop&lt;/a&gt;: Trace signals issued by the kill() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/killsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat.py&#34;&gt;klockstat&lt;/a&gt;: Traces kernel mutex lock events and display locks statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/klockstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit.py&#34;&gt;kvmexit&lt;/a&gt;: Display the exit_reason and its statistics of each vm exit. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/kvmexit_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat.py&#34;&gt;llcstat&lt;/a&gt;: Summarize CPU cache references and misses by process. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/llcstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush.py&#34;&gt;mdflush&lt;/a&gt;: Trace md flush events. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mdflush_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak.py&#34;&gt;memleak&lt;/a&gt;: Display outstanding memory allocations to find memory leaks. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/memleak_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop.py&#34;&gt;mountsnoop&lt;/a&gt;: Trace mount and umount syscalls system-wide. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mountsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower.py&#34;&gt;mysqld_qslower&lt;/a&gt;: Trace MySQL server queries slower than a threshold. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/mysqld_qslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.py&#34;&gt;netqtop&lt;/a&gt; tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop.c&#34;&gt;netqtop.c&lt;/a&gt;: Trace and display packets distribution on NIC queues. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/netqtop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower.py&#34;&gt;nfsslower&lt;/a&gt;: Trace slow NFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist.py&#34;&gt;nfsdist&lt;/a&gt;: Summarize NFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/nfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime.py&#34;&gt;offcputime&lt;/a&gt;: Summarize off-CPU time by kernel stack trace. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offcputime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime.py&#34;&gt;offwaketime&lt;/a&gt;: Summarize blocked time by kernel off-CPU stack and waker stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/offwaketime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill.py&#34;&gt;oomkill&lt;/a&gt;: Trace the out-of-memory (OOM) killer. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/oomkill_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop.py&#34;&gt;opensnoop&lt;/a&gt;: Trace open() syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/opensnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec.py&#34;&gt;pidpersec&lt;/a&gt;: Count new processes (via fork). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/pidpersec_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile.py&#34;&gt;profile&lt;/a&gt;: Profile CPU usage by sampling stack traces at a timed interval. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/profile_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead.py&#34;&gt;readahead&lt;/a&gt;: Show performance of read-ahead cache &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/readahead_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace.sh&#34;&gt;reset-trace&lt;/a&gt;: Reset the state of tracing. Maintenance tool only. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/reset-trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat.py&#34;&gt;runqlat&lt;/a&gt;: Run queue (scheduler) latency as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen.py&#34;&gt;runqlen&lt;/a&gt;: Run queue length as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqlen_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower.py&#34;&gt;runqslower&lt;/a&gt;: Trace long process scheduling delays. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/runqslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop.py&#34;&gt;shmsnoop&lt;/a&gt;: Trace System V shared memory syscalls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/shmsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop.py&#34;&gt;sofdsnoop&lt;/a&gt;: Trace FDs passed through unix sockets. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sofdsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop.py&#34;&gt;slabratetop&lt;/a&gt;: Kernel SLAB/SLUB memory cache allocation rate top. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/slabratetop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs.py&#34;&gt;softirqs&lt;/a&gt;: Measure soft IRQ (soft interrupt) event time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/softirqs_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten.py&#34;&gt;solisten&lt;/a&gt;: Trace TCP socket listen. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/solisten_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff.py&#34;&gt;sslsniff&lt;/a&gt;: Sniff OpenSSL written and readed data. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/sslsniff_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount.py&#34;&gt;stackcount&lt;/a&gt;: Count kernel function calls and their stack traces. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/stackcount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop.py&#34;&gt;syncsnoop&lt;/a&gt;: Trace sync() syscall. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syncsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount.py&#34;&gt;syscount&lt;/a&gt;: Summarize syscall counts and latencies. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/syscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept.py&#34;&gt;tcpaccept&lt;/a&gt;: Trace TCP passive connections (accept()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpaccept_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect.py&#34;&gt;tcpconnect&lt;/a&gt;: Trace TCP active connections (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnect_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat.py&#34;&gt;tcpconnlat&lt;/a&gt;: Trace TCP active connection latency (connect()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpconnlat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop.py&#34;&gt;tcpdrop&lt;/a&gt;: Trace kernel-based TCP packet drops with details. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpdrop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife.py&#34;&gt;tcplife&lt;/a&gt;: Trace TCP sessions and summarize lifespan. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcplife_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans.py&#34;&gt;tcpretrans&lt;/a&gt;: Trace TCP retransmits and TLPs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpretrans_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt.py&#34;&gt;tcprtt&lt;/a&gt;: Trace TCP round trip time. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcprtt_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates.py&#34;&gt;tcpstates&lt;/a&gt;: Trace TCP session state changes with durations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpstates_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet.py&#34;&gt;tcpsubnet&lt;/a&gt;: Summarize and aggregate TCP send by subnet. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsubnet_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl.py&#34;&gt;tcpsynbl&lt;/a&gt;: Show TCP SYN backlog. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpsynbl_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop.py&#34;&gt;tcptop&lt;/a&gt;: Summarize TCP send/recv throughput by host. Top for TCP. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer.py&#34;&gt;tcptracer&lt;/a&gt;: Trace TCP established connections (connect(), accept(), close()). &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcptracer_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong.py&#34;&gt;tcpcong&lt;/a&gt;: Trace TCP socket congestion control status duration. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tcpcong_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop.py&#34;&gt;threadsnoop&lt;/a&gt;: List new thread creation. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/threadsnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist.py&#34;&gt;tplist&lt;/a&gt;: Display kernel tracepoints or USDT probes and their formats. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/tplist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace.py&#34;&gt;trace&lt;/a&gt;: Trace arbitrary functions, with filters. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/trace_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop.py&#34;&gt;ttysnoop&lt;/a&gt;: Watch live output from a tty or pts device. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/ttysnoop_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls.py&#34;&gt;ucalls&lt;/a&gt;: Summarize method calls or Linux syscalls in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ucalls_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow.py&#34;&gt;uflow&lt;/a&gt;: Print a method flow graph in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uflow_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc.py&#34;&gt;ugc&lt;/a&gt;: Trace garbage collection events in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ugc_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew.py&#34;&gt;uobjnew&lt;/a&gt;: Summarize object allocation events by object type and number of bytes allocated. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uobjnew_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat.py&#34;&gt;ustat&lt;/a&gt;: Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/ustat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads.py&#34;&gt;uthreads&lt;/a&gt;: Trace thread creation events in Java and raw pthreads. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/lib/uthreads_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount.py&#34;&gt;vfscount&lt;/a&gt;: Count VFS calls. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfscount_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat.py&#34;&gt;vfsstat&lt;/a&gt;: Count some VFS calls, with column output. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/vfsstat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat.py&#34;&gt;virtiostat&lt;/a&gt;: Show VIRTIO device IO statistics. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/virtiostat_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime.py&#34;&gt;wakeuptime&lt;/a&gt;: Summarize sleep to wakeup time by waker kernel stack. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/wakeuptime_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist.py&#34;&gt;xfsdist&lt;/a&gt;: Summarize XFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower.py&#34;&gt;xfsslower&lt;/a&gt;: Trace slow XFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/xfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist.py&#34;&gt;zfsdist&lt;/a&gt;: Summarize ZFS operation latency distribution as a histogram. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsdist_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;tools/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower.py&#34;&gt;zfsslower&lt;/a&gt;: Trace slow ZFS operations. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/tools/zfsslower_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/distributed_bridge&#34;&gt;distributed_bridge/&lt;/a&gt;: Distributed bridge example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/http_filter&#34;&gt;http_filter/&lt;/a&gt;: Simple HTTP filter example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simple_tc.py&#34;&gt;simple_tc.py&lt;/a&gt;: Simple traffic control example.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/simulation.py&#34;&gt;simulation.py&lt;/a&gt;: Simulation helper.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.py&#34;&gt;tc_neighbor_sharing.py&lt;/a&gt; examples/networking/neighbor_sharing/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/neighbor_sharing/tc_neighbor_sharing.c&#34;&gt;tc_neighbor_sharing.c&lt;/a&gt;: Per-IP classification and rate limiting.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;tunnel_monitor/&lt;/a&gt;: Efficiently monitor traffic flows.&lt;/li&gt; &#xA; &lt;li&gt;examples/networking/vlan_learning/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.py&#34;&gt;vlan_learning.py&lt;/a&gt; examples/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/vlan_learning/vlan_learning.c&#34;&gt;vlan_learning.c&lt;/a&gt;: Demux Ethernet traffic into worker veth+namespaces.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;BPF Introspection:&lt;/h3&gt; &#xA;&lt;p&gt;Tools that help to introspect BPF programs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;introspection/&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps.c&#34;&gt;bps.c&lt;/a&gt;: List all BPF programs loaded into the kernel. &#39;ps&#39; for BPF programs. &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/introspection/bps_example.txt&#34;&gt;Examples&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;BPF guarantees that the programs loaded into the kernel cannot crash, and cannot run forever, but yet BPF is general purpose enough to perform many arbitrary types of computation. Currently, it is possible to write a program in C that will compile into a valid BPF program, yet it is vastly easier to write a C program that will compile into invalid BPF (C is like that). The user won&#39;t know until trying to run the program whether it was valid or not.&lt;/p&gt; &#xA;&lt;p&gt;With a BPF-specific frontend, one should be able to write in a language and receive feedback from the compiler on the validity as it pertains to a BPF backend. This toolkit aims to provide a frontend that can only create valid BPF programs while still harnessing its full flexibility.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, current integrations with BPF have a kludgy workflow, sometimes involving compiling directly in a linux kernel source tree. This toolchain aims to minimize the time that a developer spends getting BPF compiled, and instead focus on the applications that can be written and the problems that can be solved with BPF.&lt;/p&gt; &#xA;&lt;p&gt;The features of this toolkit include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;End-to-end BPF workflow in a shared library &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A modified C language for BPF backends&lt;/li&gt; &#xA;   &lt;li&gt;Integration with llvm-bpf backend for JIT&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic (un)loading of JITed programs&lt;/li&gt; &#xA;   &lt;li&gt;Support for BPF kernel hooks: socket filters, tc classifiers, tc actions, and kprobes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bindings for Python&lt;/li&gt; &#xA; &lt;li&gt;Examples for socket filters, tc classifiers, and kprobes&lt;/li&gt; &#xA; &lt;li&gt;Self-contained tools for tracing a running system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, more bindings besides python will likely be supported. Feel free to add support for the language of your choice and send a pull request!&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial.md&#34;&gt;docs/tutorial.md&lt;/a&gt;: Using bcc tools to solve performance, troubleshooting, and networking issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/docs/tutorial_bcc_python_developer.md&#34;&gt;docs/tutorial_bcc_python_developer.md&lt;/a&gt;: Developing new bcc programs using the Python interface.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Networking&lt;/h3&gt; &#xA;&lt;p&gt;At Red Hat Summit 2015, BCC was presented as part of a &lt;a href=&#34;http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec&#34;&gt;session on BPF&lt;/a&gt;. A multi-host vxlan environment is simulated and a BPF program used to monitor one of the physical interfaces. The BPF program keeps statistics on the inner and outer IP addresses traversing the interface, and the userspace component turns those statistics into a graph showing the traffic distribution at multiple granularities. See the code &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/examples/networking/tunnel_monitor&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Already pumped up to commit some code? Here are some resources to join the discussions in the &lt;a href=&#34;https://www.iovisor.org/&#34;&gt;IOVisor&lt;/a&gt; community and see what you want to work on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mailing List:&lt;/em&gt; &lt;a href=&#34;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&#34;&gt;https://lists.iovisor.org/mailman/listinfo/iovisor-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;IRC:&lt;/em&gt; #iovisor at irc.oftc.net&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;BCC Issue Tracker:&lt;/em&gt; &lt;a href=&#34;https://github.com/iovisor/bcc/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;A guide for contributing scripts:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/CONTRIBUTING-SCRIPTS.md&#34;&gt;CONTRIBUTING-SCRIPTS.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;External links&lt;/h2&gt; &#xA;&lt;p&gt;Looking for more information on BCC and how it&#39;s being used? You can find links to other BCC content on the web in &lt;a href=&#34;https://raw.githubusercontent.com/iovisor/bcc/master/LINKS.md&#34;&gt;LINKS.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>coolsnowwolf/lede</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/coolsnowwolf/lede</id>
    <link href="https://github.com/coolsnowwolf/lede" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean&#39;s OpenWrt source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;欢迎来到 Lean 的 Openwrt 源码仓库&lt;/h1&gt; &#xA;&lt;p&gt;如何编译自己需要的 OpenWrt 固件 &lt;a href=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/README_EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;不要用 root 用户进行编译&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;国内用户编译前最好准备好梯子&lt;/li&gt; &#xA; &lt;li&gt;默认登陆IP 192.168.1.1 密码 password&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;编译命令&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;首先装好 Linux 系统，推荐 Debian 11 或 Ubuntu LTS&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装编译依赖&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update -y&#xA;sudo apt full-upgrade -y&#xA;sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \&#xA;bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \&#xA;git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \&#xA;libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \&#xA;mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \&#xA;rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载源代码，更新 feeds 并选择配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/coolsnowwolf/lede&#xA;cd lede&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载 dl 库，编译固件 （-j 后面是线程数，第一次编译推荐用单线程）&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make download -j8&#xA;make V=s -j1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;本套代码保证肯定可以编译成功。里面包括了 R21 所有源代码，包括 IPK 的。&lt;/p&gt; &#xA;&lt;p&gt;你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！&lt;/p&gt; &#xA;&lt;p&gt;二次编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd lede&#xA;git pull&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make defconfig&#xA;make download -j8&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果需要重新配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./tmp &amp;amp;&amp;amp; rm -rf .config&#xA;make menuconfig&#xA;make V=s -j$(nproc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译完成后输出路径：bin/targets&lt;/p&gt; &#xA;&lt;h3&gt;如果你使用 WSL/WSL2 进行编译&lt;/h3&gt; &#xA;&lt;p&gt;由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 &lt;code&gt;make&lt;/code&gt; 前面加上：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS 原生系统进行编译&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;在 AppStore 中安装 Xcode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装 Homebrew：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 Homebrew 安装工具链、依赖与基础软件包:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew unlink awk&#xA;brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz&#xA;brew install gcc@11&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;然后输入以下命令，添加到系统环境变量中：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;export PATH=&#34;/usr/local/opt/coreutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/findutils/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-getopt/bin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-tar/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/grep/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/gnu-sed/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;echo &#39;export PATH=&#34;/usr/local/opt/make/libexec/gnubin:$PATH&#34;&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;重新加载一下 shell 启动文件 &lt;code&gt;source ~/.bashrc&lt;/code&gt;，然后输入 &lt;code&gt;bash&lt;/code&gt; 进入 bash shell，就可以和 Linux 一样正常编译了&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;特别提示&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒。安全干净才是固件应该做到的；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如有技术问题需要讨论，欢迎加入 QQ 讨论群： OP 共享技术交流群 ,号码 297253733 ，加群链接: 点击链接加入群聊【 OP 共享技术交流群】：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=5yCRuXL&#34; title=&#34;OP共享技术交流群&#34;&gt;点击加入&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成 报名地址：&lt;a href=&#34;http://forgotfun.org/2018/04/openwrt-training-2018.html&#34; title=&#34;报名&#34;&gt;点击报名&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QCA IPQ60xx 开源仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt-gl-ax1800&#34;&gt;https://github.com/coolsnowwolf/openwrt-gl-ax1800&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;稳定版仓库地址：&lt;a href=&#34;https://github.com/coolsnowwolf/openwrt&#34;&gt;https://github.com/coolsnowwolf/openwrt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;软路由介绍&lt;/h2&gt; &#xA;&lt;p&gt;友情推荐不恰饭：如果你在寻找一个低功耗小体积性能不错的 x86 / x64 路由器，我个人建议可以考虑小马v1 的铝合金版本 (N3710 4千兆)：&lt;a href=&#34;https://item.taobao.com/item.htm?spm=a230r.1.14.20.144c763fRkK0VZ&amp;amp;id=561126544764&#34;&gt;页面介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm5.jpg&#34; alt=&#34;xm1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/xm6.jpg&#34; alt=&#34;xm2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;捐贈&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善&lt;/p&gt; &#xA;&lt;p&gt;支付宝 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/alipay_donate.jpg&#34; alt=&#34;alipay&#34;&gt; 微信 &lt;img src=&#34;https://raw.githubusercontent.com/coolsnowwolf/lede/master/doc/wechat_donate.jpg&#34; alt=&#34;wechat&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FreeRDP/FreeRDP</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/FreeRDP/FreeRDP</id>
    <link href="https://github.com/FreeRDP/FreeRDP" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FreeRDP is a free remote desktop protocol library and clients&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FreeRDP: A Remote Desktop Protocol Implementation&lt;/h1&gt; &#xA;&lt;p&gt;FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. Enjoy the freedom of using your software wherever you want, the way you want it, in a world where interoperability can finally liberate your computing experience.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;Project website: &lt;a href=&#34;https://www.freerdp.com/&#34;&gt;https://www.freerdp.com/&lt;/a&gt;&lt;br&gt; Issue tracker: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/issues&#34;&gt;https://github.com/FreeRDP/FreeRDP/issues&lt;/a&gt;&lt;br&gt; Sources: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/&#34;&gt;https://github.com/FreeRDP/FreeRDP/&lt;/a&gt;&lt;br&gt; Downloads: &lt;a href=&#34;https://pub.freerdp.com/releases/&#34;&gt;https://pub.freerdp.com/releases/&lt;/a&gt;&lt;br&gt; Wiki: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/wiki&#34;&gt;https://github.com/FreeRDP/FreeRDP/wiki&lt;/a&gt;&lt;br&gt; API documentation: &lt;a href=&#34;https://pub.freerdp.com/api/&#34;&gt;https://pub.freerdp.com/api/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Security policy: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/security/policy&#34;&gt;https://github.com/FreeRDP/FreeRDP/security/policy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Matrix room : #FreeRDP:matrix.org (main) XMPP channel: #FreeRDP#&lt;a href=&#34;mailto:matrix.org@matrix.org&#34;&gt;matrix.org@matrix.org&lt;/a&gt; (bridged) IRC channel : #freerdp @ irc.oftc.net (bridged) Mailing list: &lt;a href=&#34;https://lists.sourceforge.net/lists/listinfo/freerdp-devel&#34;&gt;https://lists.sourceforge.net/lists/listinfo/freerdp-devel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Open Specifications&lt;/h2&gt; &#xA;&lt;p&gt;Information regarding the Microsoft Open Specifications can be found at: &lt;a href=&#34;https://www.microsoft.com/openspecifications/&#34;&gt;https://www.microsoft.com/openspecifications/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A list of reference documentation is maintained here: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation&#34;&gt;https://github.com/FreeRDP/FreeRDP/wiki/Reference-Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Instructions on how to get started compiling FreeRDP can be found on the wiki: &lt;a href=&#34;https://github.com/FreeRDP/FreeRDP/wiki/Compilation&#34;&gt;https://github.com/FreeRDP/FreeRDP/wiki/Compilation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ithewei/libhv</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/ithewei/libhv</id>
    <link href="https://github.com/ithewei/libhv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥 比libevent、libuv更易用的网络库。A c/c++ network library for developing TCP/UDP/SSL/HTTP/WebSocket/MQTT client/server.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/README-CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;libhv&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/.github/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/platform-linux%20%7C%20windows%20%7C%20macos-blue&#34; alt=&#34;platform&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/actions/workflows/CI.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/ithewei/libhv/workflows/CI/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/actions/workflows/benchmark.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/ithewei/libhv/workflows/benchmark/badge.svg?branch=master&#34; alt=&#34;benchmark&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/releases&#34;&gt;&lt;img src=&#34;https://badgen.net/github/release/ithewei/libhv?icon=github&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/stargazers&#34;&gt;&lt;img src=&#34;https://badgen.net/github/stars/ithewei/libhv?icon=github&#34; alt=&#34;stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/network/members&#34;&gt;&lt;img src=&#34;https://badgen.net/github/forks/ithewei/libhv?icon=github&#34; alt=&#34;forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/issues&#34;&gt;&lt;img src=&#34;https://badgen.net/github/issues/ithewei/libhv?icon=github&#34; alt=&#34;issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ithewei/libhv/pulls&#34;&gt;&lt;img src=&#34;https://badgen.net/github/prs/ithewei/libhv?icon=github&#34; alt=&#34;PRs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/ithewei/libhv?icon=github&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://gitee.com/libhv/libhv&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/mirror/gitee/red&#34; alt=&#34;gitee&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/oz123/awesome-c&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/awesome-c/pink?icon=awesome&amp;amp;label&amp;amp;color&#34; alt=&#34;awesome-c&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fffaraz/awesome-cpp&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/awesome-cpp/pink?icon=awesome&amp;amp;label&amp;amp;color&#34; alt=&#34;awesome-cpp&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;libevent, libev, and libuv&lt;/code&gt;, &lt;code&gt;libhv&lt;/code&gt; provides event-loop with non-blocking IO and timer, but simpler api and richer protocols.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross-platform (Linux, Windows, MacOS, BSD, Solaris, Android, iOS)&lt;/li&gt; &#xA; &lt;li&gt;High-performance EventLoop (IO, timer, idle, custom)&lt;/li&gt; &#xA; &lt;li&gt;TCP/UDP client/server/proxy&lt;/li&gt; &#xA; &lt;li&gt;TCP supports heartbeat, reconnect, upstream, MultiThread-safe write and close, etc.&lt;/li&gt; &#xA; &lt;li&gt;Built-in common unpacking modes (FixedLength, Delimiter, LengthField)&lt;/li&gt; &#xA; &lt;li&gt;RUDP support: WITH_KCP&lt;/li&gt; &#xA; &lt;li&gt;SSL/TLS support: (via WITH_OPENSSL or WITH_GNUTLS or WITH_MBEDTLS)&lt;/li&gt; &#xA; &lt;li&gt;HTTP client/server (support https http1/x http2 grpc)&lt;/li&gt; &#xA; &lt;li&gt;HTTP static file service, indexof service, sync/async API handler&lt;/li&gt; &#xA; &lt;li&gt;HTTP supports RESTful, URI router, keep-alive, chunked, etc.&lt;/li&gt; &#xA; &lt;li&gt;WebSocket client/server&lt;/li&gt; &#xA; &lt;li&gt;MQTT client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⌛️ Build&lt;/h2&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or cmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or vcpkg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vcpkg install libhv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or xmake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;xrepo install libhv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚡️ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;code&gt;./getting_started.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/ithewei/libhv.git&#xA;cd libhv&#xA;./configure&#xA;make&#xA;&#xA;bin/httpd -h&#xA;bin/httpd -d&#xA;#bin/httpd -c etc/httpd.conf -s restart -d&#xA;ps aux | grep httpd&#xA;&#xA;# http file service&#xA;bin/curl -v localhost:8080&#xA;&#xA;# http indexof service&#xA;bin/curl -v localhost:8080/downloads/&#xA;&#xA;# http api service&#xA;bin/curl -v localhost:8080/ping&#xA;bin/curl -v localhost:8080/echo -d &#34;hello,world!&#34;&#xA;bin/curl -v localhost:8080/query?page_no=1\&amp;amp;page_size=10&#xA;bin/curl -v localhost:8080/kv   -H &#34;Content-Type:application/x-www-form-urlencoded&#34; -d &#39;user=admin&amp;amp;pswd=123456&#39;&#xA;bin/curl -v localhost:8080/json -H &#34;Content-Type:application/json&#34; -d &#39;{&#34;user&#34;:&#34;admin&#34;,&#34;pswd&#34;:&#34;123456&#34;}&#39;&#xA;bin/curl -v localhost:8080/form -F &#39;user=admin&#39; -F &#39;pswd=123456&#39;&#xA;bin/curl -v localhost:8080/upload -d &#34;@LICENSE&#34;&#xA;bin/curl -v localhost:8080/upload -F &#34;file=@LICENSE&#34;&#xA;&#xA;bin/curl -v localhost:8080/test -H &#34;Content-Type:application/x-www-form-urlencoded&#34; -d &#39;bool=1&amp;amp;int=123&amp;amp;float=3.14&amp;amp;string=hello&#39;&#xA;bin/curl -v localhost:8080/test -H &#34;Content-Type:application/json&#34; -d &#39;{&#34;bool&#34;:true,&#34;int&#34;:123,&#34;float&#34;:3.14,&#34;string&#34;:&#34;hello&#34;}&#39;&#xA;bin/curl -v localhost:8080/test -F &#39;bool=1&#39; -F &#39;int=123&#39; -F &#39;float=3.14&#39; -F &#39;string=hello&#39;&#xA;# RESTful API: /group/:group_name/user/:user_id&#xA;bin/curl -v -X DELETE localhost:8080/group/test/user/123&#xA;&#xA;# benchmark&#xA;bin/wrk -c 1000 -d 10 -t 4 http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TCP&lt;/h3&gt; &#xA;&lt;h4&gt;tcp server&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;c version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_echo_server.c&#34;&gt;examples/tcp_echo_server.c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;c++ version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpServer_test.cpp&#34;&gt;evpp/TcpServer_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;TcpServer.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main() {&#xA;    int port = 1234;&#xA;    TcpServer srv;&#xA;    int listenfd = srv.createsocket(port);&#xA;    if (listenfd &amp;lt; 0) {&#xA;        return -1;&#xA;    }&#xA;    printf(&#34;server listen on port %d, listenfd=%d ...\n&#34;, port, listenfd);&#xA;    srv.onConnection = [](const SocketChannelPtr&amp;amp; channel) {&#xA;        std::string peeraddr = channel-&amp;gt;peeraddr();&#xA;        if (channel-&amp;gt;isConnected()) {&#xA;            printf(&#34;%s connected! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;        } else {&#xA;            printf(&#34;%s disconnected! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;        }&#xA;    };&#xA;    srv.onMessage = [](const SocketChannelPtr&amp;amp; channel, Buffer* buf) {&#xA;        // echo&#xA;        channel-&amp;gt;write(buf);&#xA;    };&#xA;    srv.setThreadNum(4);&#xA;    srv.start();&#xA;&#xA;    // press Enter to stop&#xA;    while (getchar() != &#39;\n&#39;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;tcp client&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;c version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_client_test.c&#34;&gt;examples/tcp_client_test.c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;c++ version&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpClient_test.cpp&#34;&gt;evpp/TcpClient_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;TcpClient.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main() {&#xA;    int port = 1234;&#xA;    TcpClient cli;&#xA;    int connfd = cli.createsocket(port);&#xA;    if (connfd &amp;lt; 0) {&#xA;        return -1;&#xA;    }&#xA;    cli.onConnection = [](const SocketChannelPtr&amp;amp; channel) {&#xA;        std::string peeraddr = channel-&amp;gt;peeraddr();&#xA;        if (channel-&amp;gt;isConnected()) {&#xA;            printf(&#34;connected to %s! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;            channel-&amp;gt;write(&#34;hello&#34;);&#xA;        } else {&#xA;            printf(&#34;disconnected to %s! connfd=%d\n&#34;, peeraddr.c_str(), channel-&amp;gt;fd());&#xA;        }&#xA;    };&#xA;    cli.onMessage = [](const SocketChannelPtr&amp;amp; channel, Buffer* buf) {&#xA;        printf(&#34;&amp;lt; %.*s\n&#34;, (int)buf-&amp;gt;size(), (char*)buf-&amp;gt;data());&#xA;    };&#xA;    cli.start();&#xA;&#xA;    // press Enter to stop&#xA;    while (getchar() != &#39;\n&#39;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP&lt;/h3&gt; &#xA;&lt;h4&gt;http server&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_server_test.cpp&#34;&gt;examples/http_server_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;golang gin style&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;HttpServer.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main() {&#xA;    HttpService router;&#xA;    router.GET(&#34;/ping&#34;, [](HttpRequest* req, HttpResponse* resp) {&#xA;        return resp-&amp;gt;String(&#34;pong&#34;);&#xA;    });&#xA;&#xA;    router.GET(&#34;/data&#34;, [](HttpRequest* req, HttpResponse* resp) {&#xA;        static char data[] = &#34;0123456789&#34;;&#xA;        return resp-&amp;gt;Data(data, 10);&#xA;    });&#xA;&#xA;    router.GET(&#34;/paths&#34;, [&amp;amp;router](HttpRequest* req, HttpResponse* resp) {&#xA;        return resp-&amp;gt;Json(router.Paths());&#xA;    });&#xA;&#xA;    router.GET(&#34;/get&#34;, [](HttpRequest* req, HttpResponse* resp) {&#xA;        resp-&amp;gt;json[&#34;origin&#34;] = req-&amp;gt;client_addr.ip;&#xA;        resp-&amp;gt;json[&#34;url&#34;] = req-&amp;gt;url;&#xA;        resp-&amp;gt;json[&#34;args&#34;] = req-&amp;gt;query_params;&#xA;        resp-&amp;gt;json[&#34;headers&#34;] = req-&amp;gt;headers;&#xA;        return 200;&#xA;    });&#xA;&#xA;    router.POST(&#34;/echo&#34;, [](const HttpContextPtr&amp;amp; ctx) {&#xA;        return ctx-&amp;gt;send(ctx-&amp;gt;body(), ctx-&amp;gt;type());&#xA;    });&#xA;&#xA;    HttpServer server;&#xA;    server.registerHttpService(&amp;amp;router);&#xA;    server.setPort(8080);&#xA;    server.setThreadNum(4);&#xA;    server.run();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;http client&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_client_test.cpp&#34;&gt;examples/http_client_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;python requests style&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;requests.h&#34;&#xA;&#xA;int main() {&#xA;    auto resp = requests::get(&#34;http://www.example.com&#34;);&#xA;    if (resp == NULL) {&#xA;        printf(&#34;request failed!\n&#34;);&#xA;    } else {&#xA;        printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;    }&#xA;&#xA;    resp = requests::post(&#34;127.0.0.1:8080/echo&#34;, &#34;hello,world!&#34;);&#xA;    if (resp == NULL) {&#xA;        printf(&#34;request failed!\n&#34;);&#xA;    } else {&#xA;        printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;js axios style&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;axios.h&#34;&#xA;&#xA;int main() {&#xA;    const char* strReq = R&#34;({&#xA;        &#34;method&#34;: &#34;POST&#34;,&#xA;        &#34;url&#34;: &#34;http://127.0.0.1:8080/echo&#34;,&#xA;        &#34;params&#34;: {&#xA;            &#34;page_no&#34;: &#34;1&#34;,&#xA;            &#34;page_size&#34;: &#34;10&#34;&#xA;        },&#xA;        &#34;headers&#34;: {&#xA;            &#34;Content-Type&#34;: &#34;application/json&#34;&#xA;        },&#xA;        &#34;body&#34;: {&#xA;            &#34;app_id&#34;: &#34;123456&#34;,&#xA;            &#34;app_secret&#34;: &#34;abcdefg&#34;&#xA;        }&#xA;    })&#34;;&#xA;&#xA;    // sync&#xA;    auto resp = axios::axios(strReq);&#xA;    if (resp == NULL) {&#xA;        printf(&#34;request failed!\n&#34;);&#xA;    } else {&#xA;        printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;    }&#xA;&#xA;    // async&#xA;    int finished = 0;&#xA;    axios::axios(strReq, [&amp;amp;finished](const HttpResponsePtr&amp;amp; resp) {&#xA;        if (resp == NULL) {&#xA;            printf(&#34;request failed!\n&#34;);&#xA;        } else {&#xA;            printf(&#34;%s\n&#34;, resp-&amp;gt;body.c_str());&#xA;        }&#xA;        finished = 1;&#xA;    });&#xA;&#xA;    // wait async finished&#xA;    while (!finished) hv_sleep(1);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebSocket&lt;/h3&gt; &#xA;&lt;h4&gt;WebSocket server&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_server_test.cpp&#34;&gt;examples/websocket_server_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;WebSocketServer.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    WebSocketService ws;&#xA;    ws.onopen = [](const WebSocketChannelPtr&amp;amp; channel, const std::string&amp;amp; url) {&#xA;        printf(&#34;onopen: GET %s\n&#34;, url.c_str());&#xA;    };&#xA;    ws.onmessage = [](const WebSocketChannelPtr&amp;amp; channel, const std::string&amp;amp; msg) {&#xA;        printf(&#34;onmessage: %s\n&#34;, msg.c_str());&#xA;    };&#xA;    ws.onclose = [](const WebSocketChannelPtr&amp;amp; channel) {&#xA;        printf(&#34;onclose\n&#34;);&#xA;    };&#xA;&#xA;    WebSocketServer server;&#xA;    server.registerWebSocketService(&amp;amp;ws);&#xA;    server.setPort(9999);&#xA;    server.setThreadNum(4);&#xA;    server.run();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;WebSocket client&lt;/h4&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_client_test.cpp&#34;&gt;examples/websocket_client_test.cpp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &#34;WebSocketClient.h&#34;&#xA;using namespace hv;&#xA;&#xA;int main(int argc, char** argv) {&#xA;    WebSocketClient ws;&#xA;    ws.onopen = []() {&#xA;        printf(&#34;onopen\n&#34;);&#xA;    };&#xA;    ws.onmessage = [](const std::string&amp;amp; msg) {&#xA;        printf(&#34;onmessage: %s\n&#34;, msg.c_str());&#xA;    };&#xA;    ws.onclose = []() {&#xA;        printf(&#34;onclose\n&#34;);&#xA;    };&#xA;&#xA;    // reconnect: 1,2,4,8,10,10,10...&#xA;    reconn_setting_t reconn;&#xA;    reconn_setting_init(&amp;amp;reconn);&#xA;    reconn.min_delay = 1000;&#xA;    reconn.max_delay = 10000;&#xA;    reconn.delay_policy = 2;&#xA;    ws.setReconnect(&amp;amp;reconn);&#xA;&#xA;    ws.open(&#34;ws://127.0.0.1:9999/test&#34;);&#xA;&#xA;    std::string str;&#xA;    while (std::getline(std::cin, str)) {&#xA;        if (!ws.isConnected()) break;&#xA;        if (str == &#34;quit&#34;) {&#xA;            ws.close();&#xA;            break;&#xA;        }&#xA;        ws.send(str);&#xA;    }&#xA;&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🍭 More examples&lt;/h2&gt; &#xA;&lt;h3&gt;c version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/hloop_test.c&#34;&gt;examples/hloop_test.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_echo_server.c&#34;&gt;examples/tcp_echo_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_chat_server.c&#34;&gt;examples/tcp_chat_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tcp_proxy_server.c&#34;&gt;examples/tcp_proxy_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/udp_echo_server.c&#34;&gt;examples/udp_echo_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/udp_proxy_server.c&#34;&gt;examples/udp_proxy_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/socks5_proxy_server.c&#34;&gt;examples/socks5_proxy_server.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tinyhttpd.c&#34;&gt;examples/tinyhttpd.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/tinyproxyd.c&#34;&gt;examples/tinyproxyd.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/jsonrpc&#34;&gt;examples/jsonrpc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/mqtt&#34;&gt;examples/mqtt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/multi-thread/multi-acceptor-processes.c&#34;&gt;examples/multi-thread/multi-acceptor-processes.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/multi-thread/multi-acceptor-threads.c&#34;&gt;examples/multi-thread/multi-acceptor-threads.c&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/multi-thread/one-acceptor-multi-workers.c&#34;&gt;examples/multi-thread/one-acceptor-multi-workers.c&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;c++ version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/EventLoop_test.cpp&#34;&gt;evpp/EventLoop_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/EventLoopThread_test.cpp&#34;&gt;evpp/EventLoopThread_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/EventLoopThreadPool_test.cpp&#34;&gt;evpp/EventLoopThreadPool_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpServer_test.cpp&#34;&gt;evpp/TcpServer_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/TcpClient_test.cpp&#34;&gt;evpp/TcpClient_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/UdpServer_test.cpp&#34;&gt;evpp/UdpServer_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/evpp/UdpClient_test.cpp&#34;&gt;evpp/UdpClient_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_server_test.cpp&#34;&gt;examples/http_server_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/http_client_test.cpp&#34;&gt;examples/http_client_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_server_test.cpp&#34;&gt;examples/websocket_server_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/websocket_client_test.cpp&#34;&gt;examples/websocket_client_test.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/protorpc&#34;&gt;examples/protorpc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/qt&#34;&gt;examples/qt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;simulate well-known command line tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/nc.c&#34;&gt;examples/nc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/nmap&#34;&gt;examples/nmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/httpd&#34;&gt;examples/httpd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/wrk.cpp&#34;&gt;examples/wrk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/curl.cpp&#34;&gt;examples/curl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/wget.cpp&#34;&gt;examples/wget&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/examples/consul&#34;&gt;examples/consul&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🥇 Benchmark&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;pingpong echo-servers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd echo-servers&#xA;./build.sh&#xA;./benchmark.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;throughput&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;libevent running on port 2001&#xA;libev running on port 2002&#xA;libuv running on port 2003&#xA;libhv running on port 2004&#xA;asio running on port 2005&#xA;poco running on port 2006&#xA;&#xA;==============2001=====================================&#xA;[127.0.0.1:2001] 4 threads 1000 connections run 10s&#xA;total readcount=1616761 readbytes=1655563264&#xA;throughput = 157 MB/s&#xA;&#xA;==============2002=====================================&#xA;[127.0.0.1:2002] 4 threads 1000 connections run 10s&#xA;total readcount=2153171 readbytes=2204847104&#xA;throughput = 210 MB/s&#xA;&#xA;==============2003=====================================&#xA;[127.0.0.1:2003] 4 threads 1000 connections run 10s&#xA;total readcount=1599727 readbytes=1638120448&#xA;throughput = 156 MB/s&#xA;&#xA;==============2004=====================================&#xA;[127.0.0.1:2004] 4 threads 1000 connections run 10s&#xA;total readcount=2202271 readbytes=2255125504&#xA;throughput = 215 MB/s&#xA;&#xA;==============2005=====================================&#xA;[127.0.0.1:2005] 4 threads 1000 connections run 10s&#xA;total readcount=1354230 readbytes=1386731520&#xA;throughput = 132 MB/s&#xA;&#xA;==============2006=====================================&#xA;[127.0.0.1:2006] 4 threads 1000 connections run 10s&#xA;total readcount=1699652 readbytes=1740443648&#xA;throughput = 165 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;iperf tcp_proxy_server&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# sudo apt install iperf&#xA;iperf -s -p 5001 &amp;gt; /dev/null &amp;amp;&#xA;bin/tcp_proxy_server 1212 127.0.0.1:5001 &amp;amp;&#xA;iperf -c 127.0.0.1 -p 5001 -l 8K&#xA;iperf -c 127.0.0.1 -p 1212 -l 8K&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;------------------------------------------------------------&#xA;[  3] local 127.0.0.1 port 52560 connected with 127.0.0.1 port 5001&#xA;[ ID] Interval       Transfer     Bandwidth&#xA;[  3]  0.0-10.0 sec  20.8 GBytes  17.9 Gbits/sec&#xA;&#xA;------------------------------------------------------------&#xA;[  3] local 127.0.0.1 port 48142 connected with 127.0.0.1 port 1212&#xA;[ ID] Interval       Transfer     Bandwidth&#xA;[  3]  0.0-10.0 sec  11.9 GBytes  10.2 Gbits/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;webbench&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# sudo apt install wrk&#xA;wrk -c 100 -t 4 -d 10s http://127.0.0.1:8080/&#xA;&#xA;# sudo apt install apache2-utils&#xA;ab -c 100 -n 100000 http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;libhv(port:8080) vs nginx(port:80)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ithewei/libhv/master/html/downloads/libhv-vs-nginx.png&#34; alt=&#34;libhv-vs-nginx.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Above test results can be found on &lt;a href=&#34;https://github.com/ithewei/libhv/actions/workflows/benchmark.yml&#34;&gt;Github Actions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepmind/mujoco</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/deepmind/mujoco</id>
    <link href="https://github.com/deepmind/mujoco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Joint dynamics with Contact. A general purpose physics simulator.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MuJoCo Physics&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/deepmind/mujoco/actions/workflows/build.yml?query=branch%3Amain&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/deepmind/mujoco/build/main&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MuJoCo&lt;/strong&gt; stands for &lt;strong&gt;Mu&lt;/strong&gt;lti-&lt;strong&gt;Jo&lt;/strong&gt;int dynamics with &lt;strong&gt;Co&lt;/strong&gt;ntact. It is a general purpose physics engine that aims to facilitate research and development in robotics, biomechanics, graphics and animation, machine learning, and other areas which demand fast and accurate simulation of articulated structures interacting with their environment.&lt;/p&gt; &#xA;&lt;p&gt;This repository is maintained by DeepMind, please see our &lt;a href=&#34;https://www.deepmind.com/blog/opening-up-a-physics-simulator-for-robotics&#34;&gt;acquisition&lt;/a&gt; and &lt;a href=&#34;https://www.deepmind.com/blog/open-sourcing-mujoco&#34;&gt;open sourcing&lt;/a&gt; announcements.&lt;/p&gt; &#xA;&lt;p&gt;MuJoCo has a C API and is intended for researchers and developers. The runtime simulation module is tuned to maximize performance and operates on low-level data structures that are preallocated by the built-in XML compiler. The library includes interactive visualization with a native GUI, rendered in OpenGL. MuJoCo further exposes a large number of utility functions for computing physics-related quantities. We also provide Python bindings and a plug-in for the &lt;a href=&#34;https://unity.com/&#34;&gt;Unity&lt;/a&gt; game engine.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;MuJoCo&#39;s documentation is available at &lt;a href=&#34;https://mujoco.readthedocs.io&#34;&gt;mujoco.readthedocs.io&lt;/a&gt;, which serves webpages derived from the &lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/doc&#34;&gt;documentation source files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Versioned releases are available as precompiled binaries from the GitHub &lt;a href=&#34;https://github.com/deepmind/mujoco/releases&#34;&gt;releases page&lt;/a&gt;, built for Linux (x86-64 and AArch64), Windows (x86-64 only), and macOS (universal). This is the recommended way to use the software.&lt;/p&gt; &#xA;&lt;p&gt;Users who wish to build MuJoCo from source, please consult the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming.html#building-mujoco-from-source&#34;&gt;build from source&lt;/a&gt; section of the documentation. However, please note that the commit at the tip of the &lt;code&gt;main&lt;/code&gt; branch may be unstable.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;There are two easy ways to get started with MuJoCo:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run &lt;code&gt;simulate&lt;/code&gt; on your machine.&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0ORsj_E17B0&#34;&gt;This video&lt;/a&gt; shows a screen capture of &lt;code&gt;simulate&lt;/code&gt;, MuJoCo&#39;s native interactive viewer. Follow the steps described in the &lt;a href=&#34;https://mujoco.readthedocs.io/en/latest/programming.html#getting-started&#34;&gt;Getting Started&lt;/a&gt; section of the documentation to get &lt;code&gt;simulate&lt;/code&gt; running on your machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Explore our online IPython notebooks.&lt;/strong&gt; If you are a Python user, you might want to start with our tutorial notebooks, running on Google Colab:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first tutorial focuses on the basic MuJoCo Python bindings: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/dm_control/blob/main/dm_control/mujoco/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second tutorial includes more examples of &lt;code&gt;dm_control&lt;/code&gt;-specific functionality: &lt;a href=&#34;https://colab.research.google.com/github/deepmind/dm_control/blob/main/tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use MuJoCo for published research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{todorov2012mujoco,&#xA;  title={MuJoCo: A physics engine for model-based control},&#xA;  author={Todorov, Emanuel and Erez, Tom and Tassa, Yuval},&#xA;  booktitle={2012 IEEE/RSJ International Conference on Intelligent Robots and Systems},&#xA;  pages={5026--5033},&#xA;  year={2012},&#xA;  organization={IEEE},&#xA;  doi={10.1109/IROS.2012.6386109}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2021 DeepMind Technologies Limited.&lt;/p&gt; &#xA;&lt;p&gt;Box collision code (&lt;a href=&#34;https://github.com/deepmind/mujoco/tree/main/src/engine/engine_collision_box.c&#34;&gt;&lt;code&gt;engine_collision_box.c&lt;/code&gt;&lt;/a&gt;) is Copyright 2016 Svetoslav Kolev.&lt;/p&gt; &#xA;&lt;p&gt;ReStructuredText documents, images, and videos in the &lt;code&gt;doc&lt;/code&gt; directory are made available under the terms of the Creative Commons Attribution 4.0 (CC BY 4.0) license. You may obtain a copy of the License at &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Source code is licensed under the Apache License, Version 2.0. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openssl/openssl</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/openssl/openssl</id>
    <link href="https://github.com/openssl/openssl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TLS/SSL and crypto library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to the OpenSSL Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.openssl.org&#34; title=&#34;OpenSSL Homepage&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openssl/openssl/master/doc/images/openssl.svg?sanitize=true&#34; alt=&#34;openssl logo&#34; title=&#34;OpenSSL Logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openssl/openssl/actions?query=workflow%3A%22GitHub+CI%22&#34; title=&#34;GitHub Actions CI&#34;&gt;&lt;img src=&#34;https://github.com/openssl/openssl/workflows/GitHub%20CI/badge.svg?sanitize=true&#34; alt=&#34;github actions ci badge&#34; title=&#34;GitHub Actions CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/openssl/openssl/branch/master&#34; title=&#34;AppVeyor Jobs&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/8e10o7xfrg73v98f/branch/master?svg=true&#34; alt=&#34;appveyor badge&#34; title=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenSSL is a robust, commercial-grade, full-featured Open Source Toolkit for the Transport Layer Security (TLS) protocol formerly known as the Secure Sockets Layer (SSL) protocol. The protocol implementation is based on a full-strength general purpose cryptographic library, which can also be used stand-alone.&lt;/p&gt; &#xA;&lt;p&gt;OpenSSL is descended from the SSLeay library developed by Eric A. Young and Tim J. Hudson.&lt;/p&gt; &#xA;&lt;p&gt;The official Home Page of the OpenSSL Project is &lt;a href=&#34;https://www.openssl.org&#34; title=&#34;OpenSSL Homepage&#34;&gt;www.openssl.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#build-and-install&#34;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#legalities&#34;&gt;Legalities&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The OpenSSL toolkit includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libssl&lt;/strong&gt; an implementation of all TLS protocol versions up to TLSv1.3 (&lt;a href=&#34;https://tools.ietf.org/html/rfc8446&#34;&gt;RFC 8446&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libcrypto&lt;/strong&gt; a full-strength general purpose cryptographic library. It constitutes the basis of the TLS implementation, but can also be used independently.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; the OpenSSL command line tool, a swiss army knife for cryptographic tasks, testing and analyzing. It can be used for&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;creation of key parameters&lt;/li&gt; &#xA;   &lt;li&gt;creation of X.509 certificates, CSRs and CRLs&lt;/li&gt; &#xA;   &lt;li&gt;calculation of message digests&lt;/li&gt; &#xA;   &lt;li&gt;encryption and decryption&lt;/li&gt; &#xA;   &lt;li&gt;SSL/TLS client and server tests&lt;/li&gt; &#xA;   &lt;li&gt;handling of S/MIME signed or encrypted mail&lt;/li&gt; &#xA;   &lt;li&gt;and more...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Download&lt;/h1&gt; &#xA;&lt;h2&gt;For Production Use&lt;/h2&gt; &#xA;&lt;p&gt;Source code tarballs of the official releases can be downloaded from &lt;a href=&#34;https://www.openssl.org/source&#34;&gt;www.openssl.org/source&lt;/a&gt;. The OpenSSL project does not distribute the toolkit in binary form.&lt;/p&gt; &#xA;&lt;p&gt;However, for a large variety of operating systems precompiled versions of the OpenSSL toolkit are available. In particular on Linux and other Unix operating systems it is normally recommended to link against the precompiled shared libraries provided by the distributor or vendor.&lt;/p&gt; &#xA;&lt;h2&gt;For Testing and Development&lt;/h2&gt; &#xA;&lt;p&gt;Although testing and development could in theory also be done using the source tarballs, having a local copy of the git repository with the entire project history gives you much more insight into the code base.&lt;/p&gt; &#xA;&lt;p&gt;The official OpenSSL Git Repository is located at &lt;a href=&#34;https://git.openssl.org&#34; title=&#34;OpenSSL Git Repository&#34;&gt;git.openssl.org&lt;/a&gt;. There is a GitHub mirror of the repository at &lt;a href=&#34;https://github.com/openssl/openssl&#34; title=&#34;OpenSSL GitHub Mirror&#34;&gt;github.com/openssl/openssl&lt;/a&gt;, which is updated automatically from the former on every commit.&lt;/p&gt; &#xA;&lt;p&gt;A local copy of the Git Repository can be obtained by cloning it from the original OpenSSL repository using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git://git.openssl.org/openssl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or from the GitHub mirror using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/openssl/openssl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you intend to contribute to OpenSSL, either to fix bugs or contribute new features, you need to fork the OpenSSL repository openssl/openssl on GitHub and clone your public fork instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/yourname/openssl.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is necessary, because all development of OpenSSL nowadays is done via GitHub pull requests. For more details, see &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/#contributing&#34;&gt;Contributing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build and Install&lt;/h1&gt; &#xA;&lt;p&gt;After obtaining the Source, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/INSTALL.md&#34;&gt;INSTALL&lt;/a&gt; file for detailed instructions about building and installing OpenSSL. For some platforms, the installation instructions are amended by a platform specific document.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-UNIX.md&#34;&gt;Notes for UNIX-like platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-ANDROID.md&#34;&gt;Notes for Android platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-WINDOWS.md&#34;&gt;Notes for Windows platforms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-DJGPP.md&#34;&gt;Notes for the DOS platform with DJGPP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VMS.md&#34;&gt;Notes for the OpenVMS platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-PERL.md&#34;&gt;Notes on Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/NOTES-VALGRIND.md&#34;&gt;Notes on Valgrind&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specific notes on upgrading to OpenSSL 3.0 from previous versions can be found in the &lt;a href=&#34;https://www.openssl.org/docs/manmaster/man7/migration_guide.html&#34; title=&#34;OpenSSL Migration Guide&#34;&gt;migration_guide(7ossl)&lt;/a&gt; manual page.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Manual Pages&lt;/h2&gt; &#xA;&lt;p&gt;The manual pages for the master branch and all current stable releases are available online.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/docs/manmaster&#34;&gt;OpenSSL master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/docs/man3.0&#34;&gt;OpenSSL 3.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openssl.org/docs/man1.1.1&#34;&gt;OpenSSL 1.1.1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;There is a Wiki at &lt;a href=&#34;https://wiki.openssl.org&#34; title=&#34;OpenSSL Wiki&#34;&gt;wiki.openssl.org&lt;/a&gt; which is currently not very active. It contains a lot of useful information, not all of which is up to date.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;OpenSSL is licensed under the Apache License 2.0, which means that you are free to get and use it for commercial and non-commercial purposes as long as you fulfill its conditions.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;There are various ways to get in touch. The correct channel depends on your requirement. see the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/SUPPORT.md&#34;&gt;SUPPORT&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you are interested and willing to contribute to the OpenSSL project, please take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/openssl/openssl/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Legalities&lt;/h1&gt; &#xA;&lt;p&gt;A number of nations restrict the use or export of cryptography. If you are potentially subject to such restrictions you should seek legal advice before attempting to develop or distribute cryptographic code.&lt;/p&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 1998-2022 The OpenSSL Project&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson&lt;/p&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;!-- Links  --&gt; &#xA;&lt;!-- Logos and Badges --&gt;</summary>
  </entry>
  <entry>
    <title>lvgl/lvgl</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/lvgl/lvgl</id>
    <link href="https://github.com/lvgl/lvgl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powerful and easy-to-use embedded GUI library with many widgets, advanced visual effects (opacity, antialiasing, animations) and low memory requirements (16K RAM, 64K Flash).&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; LVGL - Light and Versatile Graphics Library&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://lvgl.io/assets/images/lvgl_widgets_demo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; LVGL provides everything you need to create an embedded GUI with easy-to-use graphical elements, beautiful visual effects and a low memory footprint. &lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://lvgl.io&#34;&gt;Website &lt;/a&gt; · &lt;a href=&#34;https://docs.lvgl.io/&#34;&gt;Docs&lt;/a&gt; · &lt;a href=&#34;https://forum.lvgl.io&#34;&gt;Forum&lt;/a&gt; · &lt;a href=&#34;https://lvgl.io/services&#34;&gt;Services&lt;/a&gt; · &lt;a href=&#34;https://docs.lvgl.io/master/examples.html&#34;&gt;Interactive examples&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/README_zh.md&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/README_pt_BR.md&#34;&gt;Português do Brasil&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Table of content&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/#get-started&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/#services&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lvgl/lvgl/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Powerful &lt;a href=&#34;https://docs.lvgl.io/master/widgets/index.html&#34;&gt;building blocks&lt;/a&gt;: buttons, charts, lists, sliders, images, etc.&lt;/li&gt; &#xA; &lt;li&gt;Advanced graphics engine: animations, anti-aliasing, opacity, smooth scrolling, blending modes, etc&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://docs.lvgl.io/master/overview/indev.html&#34;&gt;various input devices&lt;/a&gt;: touchscreen, mouse, keyboard, encoder, buttons, etc.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://docs.lvgl.io/master/overview/display.html&#34;&gt;multiple displays&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hardware independent, can be use with any microcontroller and display&lt;/li&gt; &#xA; &lt;li&gt;Scalable to operate with little memory (64 kB Flash, 16 kB RAM)&lt;/li&gt; &#xA; &lt;li&gt;Multi-language support with UTF-8 handling, CJK, Bidirectional and Arabic script support&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable graphical elements via &lt;a href=&#34;https://docs.lvgl.io/master/overview/style.html&#34;&gt;CSS-like styles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Powerful layouts inspired by CSS: &lt;a href=&#34;https://docs.lvgl.io/master/layouts/flex.html&#34;&gt;Flexbox&lt;/a&gt; and &lt;a href=&#34;https://docs.lvgl.io/master/layouts/grid.html&#34;&gt;Grid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OS, External memory and GPU are supported but not required. (built in support for STM32 DMA2D, SWM341 DMA2D, and NXP PXP and VGLite)&lt;/li&gt; &#xA; &lt;li&gt;Smooth rendering even with a &lt;a href=&#34;https://docs.lvgl.io/master/porting/display.html&#34;&gt;single frame buffer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in C and compatible with C++&lt;/li&gt; &#xA; &lt;li&gt;Micropython Binding exposes &lt;a href=&#34;https://blog.lvgl.io/2019-02-20/micropython-bindings&#34;&gt;LVGL API in Micropython&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html&#34;&gt;Simulator&lt;/a&gt; to develop on PC without embedded hardware&lt;/li&gt; &#xA; &lt;li&gt;100+ simple &lt;a href=&#34;https://github.com/lvgl/lvgl/tree/master/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.lvgl.io/&#34;&gt;Documentation&lt;/a&gt; and API references online and in PDF&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Basically, every modern controller (which is able to drive a display) is suitable to run LVGL. The minimal requirements are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Name&lt;/strong&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Minimal&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Recommended&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt;16, 32 or 64 bit microcontroller or processor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Clock&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 16 MHz &lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 48 MHz&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Flash/ROM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 64 kB &lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 180 kB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Static RAM&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 16 kB &lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 48 kB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Draw buffer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 1 × &lt;em&gt;hor. res.&lt;/em&gt; pixels &lt;/td&gt; &#xA;   &lt;td&gt; &amp;gt; 1/10 screen size &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;strong&gt;Compiler&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; C99 or newer &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that the memory usage might vary depending on the architecture, compiler and build options.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;p&gt;LVGL is completely platform independent and can be used with any MCU that fulfills the requirements. Just to mention some platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NXP: Kinetis, LPC, iMX, iMX RT&lt;/li&gt; &#xA; &lt;li&gt;STM32F1, STM32F3, STM32F4, STM32F7, STM32L4, STM32L5, STM32H7&lt;/li&gt; &#xA; &lt;li&gt;Microchip dsPIC33, PIC24, PIC32MX, PIC32MZ&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.lvgl.io/2018-01-03/linux_fb&#34;&gt;Linux frame buffer&lt;/a&gt; (/dev/fb)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.vk3erw.com/index.php/16-software/63-raspberry-pi-official-7-touchscreen-and-littlevgl&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lvgl/lv_port_esp32&#34;&gt;Espressif ESP32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lvgl/lv_port_aurix&#34;&gt;Infineon Aurix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nordic NRF52 Bluetooth modules&lt;/li&gt; &#xA; &lt;li&gt;Quectel modems&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.synwit.cn/&#34;&gt;SYNWIT SWM341&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;LVGL is also available as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.lvgl.io/master/get-started/platforms/arduino.html&#34;&gt;Arduino library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://registry.platformio.org/libraries/lvgl/lvgl&#34;&gt;PlatformIO package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.zephyrproject.org/latest/reference/kconfig/CONFIG_LVGL.html&#34;&gt;Zephyr library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.lvgl.io/master/get-started/platforms/espressif.html&#34;&gt;ESP32 component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nxp.com/design/software/embedded-software/lvgl-open-source-graphics-library:LITTLEVGL-OPEN-SOURCE-GRAPHICS-LIBRARY&#34;&gt;NXP MCUXpresso component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.lvgl.io/master/get-started/os/nuttx.html&#34;&gt;NuttX library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.lvgl.io/master/get-started/os/rt-thread.html&#34;&gt;RT-Thread RTOS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;This list shows the recommended way of learning the library:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check the &lt;a href=&#34;https://lvgl.io/demos&#34;&gt;Online demos&lt;/a&gt; to see LVGL in action (3 minutes)&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://docs.lvgl.io/master/intro/index.html&#34;&gt;Introduction&lt;/a&gt; page of the documentation (5 minutes)&lt;/li&gt; &#xA; &lt;li&gt;Get familiar with the basics on the &lt;a href=&#34;https://docs.lvgl.io/master/get-started/quick-overview.html&#34;&gt;Quick overview&lt;/a&gt; page (15 minutes)&lt;/li&gt; &#xA; &lt;li&gt;Set up a &lt;a href=&#34;https://docs.lvgl.io/master/get-started/platforms/pc-simulator.html&#34;&gt;Simulator&lt;/a&gt; (10 minutes)&lt;/li&gt; &#xA; &lt;li&gt;Try out some &lt;a href=&#34;https://github.com/lvgl/lvgl/tree/master/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Port LVGL to a board. See the &lt;a href=&#34;https://docs.lvgl.io/master/porting/index.html&#34;&gt;Porting&lt;/a&gt; guide or check the ready to use &lt;a href=&#34;https://github.com/lvgl?q=lv_port_&#34;&gt;Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://docs.lvgl.io/master/overview/index.html&#34;&gt;Overview&lt;/a&gt; page to get a better understanding of the library (2-3 hours)&lt;/li&gt; &#xA; &lt;li&gt;Check the documentation of the &lt;a href=&#34;https://docs.lvgl.io/master/widgets/index.html&#34;&gt;Widgets&lt;/a&gt; to see their features and usage&lt;/li&gt; &#xA; &lt;li&gt;If you have questions go to the &lt;a href=&#34;http://forum.lvgl.io/&#34;&gt;Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://docs.lvgl.io/master/CONTRIBUTING.html&#34;&gt;Contributing&lt;/a&gt; guide to see how you can help to improve LVGL (15 minutes)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For more examples see the &lt;a href=&#34;https://github.com/lvgl/lvgl/tree/master/examples&#34;&gt;examples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lvgl/lvgl/raw/master/docs/misc/btn_example.png&#34; alt=&#34;LVGL button with label example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;C&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;lv_obj_t * btn = lv_btn_create(lv_scr_act());                   /*Add a button to the current screen*/&#xA;lv_obj_set_pos(btn, 10, 10);                                    /*Set its position*/&#xA;lv_obj_set_size(btn, 100, 50);                                  /*Set its size*/&#xA;lv_obj_add_event_cb(btn, btn_event_cb, LV_EVENT_CLICKED, NULL); /*Assign a callback to the button*/&#xA;&#xA;lv_obj_t * label = lv_label_create(btn);                        /*Add a label to the button*/&#xA;lv_label_set_text(label, &#34;Button&#34;);                             /*Set the labels text*/&#xA;lv_obj_center(label);                                           /*Align the label to the center*/&#xA;...&#xA;&#xA;void btn_event_cb(lv_event_t * e)&#xA;{&#xA;  printf(&#34;Clicked\n&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Micropython&lt;/h3&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://docs.lvgl.io/master/get-started/bindings/micropython.html&#34;&gt;Micropython&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def btn_event_cb(e):&#xA;  print(&#34;Clicked&#34;)&#xA;&#xA;# Create a Button and a Label&#xA;btn = lv.btn(lv.scr_act())&#xA;btn.set_pos(10, 10)&#xA;btn.set_size(100, 50)&#xA;btn.add_event_cb(btn_event_cb, lv.EVENT.CLICKED, None)&#xA;&#xA;label = lv.label(btn)&#xA;label.set_text(&#34;Button&#34;)&#xA;label.center()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;p&gt;LVGL Kft was established to provide a solid background for LVGL library. We offer several type of services to help you in UI development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Graphics design&lt;/li&gt; &#xA; &lt;li&gt;UI implementation&lt;/li&gt; &#xA; &lt;li&gt;Consulting/Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;https://lvgl.io/services&#34;&gt;https://lvgl.io/services&lt;/a&gt; Feel free to contact us if you have any questions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;LVGL is an open project and contribution is very welcome. There are many ways to contribute from simply speaking about your project, through writing examples, improving the documentation, fixing bugs to hosting your own project under the LVGL organization.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed description of contribution opportunities visit the &lt;a href=&#34;https://docs.lvgl.io/master/CONTRIBUTING.html&#34;&gt;Contributing&lt;/a&gt; section of the documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flipperdevices/flipperzero-firmware</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/flipperdevices/flipperzero-firmware</id>
    <link href="https://github.com/flipperdevices/flipperzero-firmware" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flipper Zero Firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flipper Zero Firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://flipperzero.one/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740930220399525928.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://habrastorage.org/webt/eo/m0/e4/eom0e4btudte7nrhnyic-laiog0.png&#34; alt=&#34;Show me the code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to &lt;a href=&#34;https://flipperzero.one/&#34;&gt;Flipper Zero&lt;/a&gt;&#39;s Firmware repo! Our goal is to create nice and clean code with good documentation, to make it a pleasure for everyone to work with.&lt;/p&gt; &#xA;&lt;h1&gt;Clone the Repository&lt;/h1&gt; &#xA;&lt;p&gt;You should clone with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone --recursive https://github.com/flipperdevices/flipperzero-firmware.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Update firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://update.flipperzero.one/&#34;&gt;Get Latest Firmware from Update Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flipper Zero&#39;s firmware consists of two components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core2 firmware set - proprietary components by ST: FUS + radio stack. FUS is flashed at factory and you should never update it.&lt;/li&gt; &#xA; &lt;li&gt;Core1 Firmware - HAL + OS + Drivers + Applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They both must be flashed in order described.&lt;/p&gt; &#xA;&lt;h2&gt;With STLink&lt;/h2&gt; &#xA;&lt;h3&gt;Core1 Firmware&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / macOS&lt;/li&gt; &#xA; &lt;li&gt;Terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads&#34;&gt;arm-gcc-none-eabi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openocd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One liner: &lt;code&gt;make flash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Core2 flashing procedures&lt;/h3&gt; &#xA;&lt;p&gt;Prerequisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / macOS&lt;/li&gt; &#xA; &lt;li&gt;Terminal&lt;/li&gt; &#xA; &lt;li&gt;STM32_Programmer_CLI (v2.5.0) added to $PATH&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One liner: &lt;code&gt;make flash_radio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;With USB DFU&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download latest &lt;a href=&#34;https://update.flipperzero.one&#34;&gt;Firmware&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reboot Flipper to Bootloader&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press and hold &lt;code&gt;← Left&lt;/code&gt; + &lt;code&gt;↩ Back&lt;/code&gt; for reset&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;↩ Back&lt;/code&gt; and keep holding &lt;code&gt;← Left&lt;/code&gt; until blue LED lights up&lt;/li&gt; &#xA; &lt;li&gt;Release &lt;code&gt;← Left&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ![Switch to DFU sequence](https://habrastorage.org/webt/uu/c3/g2/uuc3g2n36f2sju19rskcvjzjf6w.png) --&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;dfu-util -D full.dfu -a 0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Build with Docker&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/get-started&#34;&gt;Docker Engine and Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Prepare the container:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose exec dev make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;p&gt;If compilation fails, make sure all submodules are all initialized. Either clone with &lt;code&gt;--recursive&lt;/code&gt; or use &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build on Linux/macOS&lt;/h1&gt; &#xA;&lt;h2&gt;macOS Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt; and install all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew bundle --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linux Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;gcc-arm-none-eabi&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;toolchain=&#34;gcc-arm-none-eabi-10.3-2021.10&#34;&#xA;toolchain_package=&#34;$toolchain-$(uname -m)-linux&#34;&#xA;&#xA;wget -P /opt &#34;https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/$toolchain_package.tar.bz2&#34;&#xA;&#xA;tar xjf /opt/$toolchain_package.tar.bz2 -C /opt&#xA;rm /opt/$toolchain_package.tar.bz2&#xA;&#xA;for file in /opt/$toolchain/bin/* ; do ln -s &#34;${file}&#34; &#34;/usr/bin/$(basename ${file})&#34; ; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;openocd (debugging/flashing over SWD)&lt;/li&gt; &#xA; &lt;li&gt;heatshrink (compiling image assets)&lt;/li&gt; &#xA; &lt;li&gt;clang-format (code formatting)&lt;/li&gt; &#xA; &lt;li&gt;dfu-util (flashing over USB DFU)&lt;/li&gt; &#xA; &lt;li&gt;protobuf (compiling proto sources)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, to install them on Debian, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt update&#xA;apt install openocd clang-format-13 dfu-util protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;heatshrink has to be compiled &lt;a href=&#34;https://github.com/atomicobject/heatshrink&#34;&gt;from sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile everything&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;code&gt;dist/&lt;/code&gt; for build outputs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;&lt;code&gt;flipper-z-{target}-full-{suffix}.dfu&lt;/code&gt;&lt;/strong&gt; to flash your device.&lt;/p&gt; &#xA;&lt;h2&gt;Flash everything&lt;/h2&gt; &#xA;&lt;p&gt;Connect your device via ST-Link and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make whole&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Links&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://flipp.dev/discord&#34;&gt;flipp.dev/discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://flipperzero.one&#34;&gt;flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kickstarter page: &lt;a href=&#34;https://www.kickstarter.com/projects/flipper-devices/flipper-zero-tamagochi-for-hackers&#34;&gt;kickstarter.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.flipperzero.one/&#34;&gt;forum.flipperzero.one&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Project structure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;applications&lt;/code&gt; - Applications and services used in firmware&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assets&lt;/code&gt; - Assets used by applications and services&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;core&lt;/code&gt; - Furi Core: os level primitives and helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt; - Debug tool: GDB-plugins, SVD-file and etc&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt; - Docker image sources (used for firmware build automation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;documentation&lt;/code&gt; - Documentation generation system configs and input files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;firmware&lt;/code&gt; - Firmware source code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; - Our and 3rd party libraries, drivers and etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; - Make helpers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts&lt;/code&gt; - Supplementary scripts and python libraries home&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also pay attention to &lt;code&gt;ReadMe.md&lt;/code&gt; files inside of those directories.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cyan4973/xxHash</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/Cyan4973/xxHash</id>
    <link href="https://github.com/Cyan4973/xxHash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extremely fast non-cryptographic hash algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xxHash - Extremely fast hash algorithm&lt;/h1&gt; &#xA;&lt;p&gt;xxHash is an Extremely fast Hash algorithm, running at RAM speed limits. It successfully completes the &lt;a href=&#34;https://code.google.com/p/smhasher/wiki/SMHasher&#34;&gt;SMHasher&lt;/a&gt; test suite which evaluates collision, dispersion and randomness qualities of hash functions. Code is highly portable, and hashes are identical across all platforms (little / big endian).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Branch&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;release&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Cyan4973/xxHash/actions?query=branch%3Arelease+&#34;&gt;&lt;img src=&#34;https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=release&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dev&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Cyan4973/xxHash/actions?query=branch%3Adev+&#34;&gt;&lt;img src=&#34;https://github.com/Cyan4973/xxHash/actions/workflows/ci.yml/badge.svg?branch=dev&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The reference system uses an Intel i7-9700K cpu, and runs Ubuntu x64 20.04. The &lt;a href=&#34;https://github.com/Cyan4973/xxHash/tree/release/tests/bench&#34;&gt;open source benchmark program&lt;/a&gt; is compiled with &lt;code&gt;clang&lt;/code&gt; v10.0 using &lt;code&gt;-O3&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hash Name&lt;/th&gt; &#xA;   &lt;th&gt;Width&lt;/th&gt; &#xA;   &lt;th&gt;Bandwidth (GB/s)&lt;/th&gt; &#xA;   &lt;th&gt;Small Data Velocity&lt;/th&gt; &#xA;   &lt;th&gt;Quality&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH3&lt;/strong&gt; (SSE2)&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;31.5 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;133.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH128&lt;/strong&gt; (SSE2)&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;29.6 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;118.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;RAM sequential read&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;28.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;for reference&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;City64&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;22.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;76.6&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T1ha2&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;22.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;99.0&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Slightly worse &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study&#34;&gt;collisions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;City128&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;21.7 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;57.7&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH64&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;19.4 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;71.0&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SpookyHash&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;19.3 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;53.2&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mum&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;18.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;67.0&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Slightly worse &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison#collision-study&#34;&gt;collisions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;XXH32&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;9.7 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;71.9&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;City32&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;9.1 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;66.0&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Murmur3&lt;/td&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;3.9 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;56.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SipHash&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;3.0 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;43.2&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FNV64&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;1.2 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;62.7&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Poor avalanche properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blake2&lt;/td&gt; &#xA;   &lt;td&gt;256&lt;/td&gt; &#xA;   &lt;td&gt;1.1 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;5.1&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SHA1&lt;/td&gt; &#xA;   &lt;td&gt;160&lt;/td&gt; &#xA;   &lt;td&gt;0.8 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;5.6&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic but broken&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MD5&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;0.6 GB/s&lt;/td&gt; &#xA;   &lt;td&gt;7.8&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic but broken&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;note 1: Small data velocity is a &lt;em&gt;rough&lt;/em&gt; evaluation of algorithm&#39;s efficiency on small data. For more detailed analysis, please refer to next paragraph.&lt;/p&gt; &#xA;&lt;p&gt;note 2: some algorithms feature &lt;em&gt;faster than RAM&lt;/em&gt; speed. In which case, they can only reach their full speed when input data is already in CPU cache (L3 or better). Otherwise, they max out on RAM speed limit.&lt;/p&gt; &#xA;&lt;h3&gt;Small data&lt;/h3&gt; &#xA;&lt;p&gt;Performance on large data is only one part of the picture. Hashing is also very useful in constructions like hash tables and bloom filters. In these use cases, it&#39;s frequent to hash a lot of small data (starting at a few bytes). Algorithm&#39;s performance can be very different for such scenarios, since parts of the algorithm, such as initialization or finalization, become fixed cost. The impact of branch mis-prediction also becomes much more present.&lt;/p&gt; &#xA;&lt;p&gt;XXH3 has been designed for excellent performance on both long and small inputs, which can be observed in the following graph:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/750081/61976089-aedeab00-af9f-11e9-9239-e5375d6c080f.png&#34; alt=&#34;XXH3, latency, random size&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a more detailed analysis, visit the wiki : &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-&#34;&gt;https://github.com/Cyan4973/xxHash/wiki/Performance-comparison#benchmarks-concentrating-on-small-data-&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quality&lt;/h2&gt; &#xA;&lt;p&gt;Speed is not the only property that matters. Produced hash values must respect excellent dispersion and randomness properties, so that any sub-section of it can be used to maximally spread out a table or index, as well as reduce the amount of collisions to the minimal theoretical level, following the &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_problem&#34;&gt;birthday paradox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;xxHash&lt;/code&gt; has been tested with Austin Appleby&#39;s excellent SMHasher test suite, and passes all tests, ensuring reasonable quality levels. It also passes extended tests from &lt;a href=&#34;https://github.com/rurban/smhasher&#34;&gt;newer forks of SMHasher&lt;/a&gt;, featuring additional scenarios and conditions.&lt;/p&gt; &#xA;&lt;p&gt;Finally, xxHash provides its own &lt;a href=&#34;https://github.com/Cyan4973/xxHash/tree/dev/tests/collisions&#34;&gt;massive collision tester&lt;/a&gt;, able to generate and compare billions of hashes to test the limits of 64-bit hash algorithms. On this front too, xxHash features good results, in line with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_problem&#34;&gt;birthday paradox&lt;/a&gt;. A more detailed analysis is documented &lt;a href=&#34;https://github.com/Cyan4973/xxHash/wiki/Collision-ratio-comparison&#34;&gt;in the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build modifiers&lt;/h3&gt; &#xA;&lt;p&gt;The following macros can be set at compilation time to modify libxxhash&#39;s behavior. They are generally disabled by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_INLINE_ALL&lt;/code&gt;: Make all functions &lt;code&gt;inline&lt;/code&gt;, with implementations being directly included within &lt;code&gt;xxhash.h&lt;/code&gt;. Inlining functions is beneficial for speed on small keys. It&#39;s &lt;em&gt;extremely effective&lt;/em&gt; when key length is expressed as &lt;em&gt;a compile time constant&lt;/em&gt;, with performance improvements observed in the +200% range . See &lt;a href=&#34;https://fastcompression.blogspot.com/2018/03/xxhash-for-small-keys-impressive-power.html&#34;&gt;this article&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_PRIVATE_API&lt;/code&gt;: same outcome as &lt;code&gt;XXH_INLINE_ALL&lt;/code&gt;. Still available for legacy support. The name underlines that &lt;code&gt;XXH_*&lt;/code&gt; symbols will not be exported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NAMESPACE&lt;/code&gt;: Prefixes all symbols with the value of &lt;code&gt;XXH_NAMESPACE&lt;/code&gt;. This macro can only use compilable character set. Useful to evade symbol naming collisions, in case of multiple inclusions of xxHash&#39;s source code. Client applications still use the regular function names, as symbols are automatically translated through &lt;code&gt;xxhash.h&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_FORCE_MEMORY_ACCESS&lt;/code&gt;: The default method &lt;code&gt;0&lt;/code&gt; uses a portable &lt;code&gt;memcpy()&lt;/code&gt; notation. Method &lt;code&gt;1&lt;/code&gt; uses a gcc-specific &lt;code&gt;packed&lt;/code&gt; attribute, which can provide better performance for some targets. Method &lt;code&gt;2&lt;/code&gt; forces unaligned reads, which is not standards compliant, but might sometimes be the only way to extract better read performance. Method &lt;code&gt;3&lt;/code&gt; uses a byteshift operation, which is best for old compilers which don&#39;t inline &lt;code&gt;memcpy()&lt;/code&gt; or big-endian systems without a byteswap instruction&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_FORCE_ALIGN_CHECK&lt;/code&gt;: Use a faster direct read path when input is aligned. This option can result in dramatic performance improvement when input to hash is aligned on 32 or 64-bit boundaries, when running on architectures unable to load memory from unaligned addresses, or suffering a performance penalty from it. It is (slightly) detrimental on platform with good unaligned memory access performance (same instruction for both aligned and unaligned accesses). This option is automatically disabled on &lt;code&gt;x86&lt;/code&gt;, &lt;code&gt;x64&lt;/code&gt; and &lt;code&gt;aarch64&lt;/code&gt;, and enabled on all other platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_VECTOR&lt;/code&gt; : manually select a vector instruction set (default: auto-selected at compilation time). Available instruction sets are &lt;code&gt;XXH_SCALAR&lt;/code&gt;, &lt;code&gt;XXH_SSE2&lt;/code&gt;, &lt;code&gt;XXH_AVX2&lt;/code&gt;, &lt;code&gt;XXH_AVX512&lt;/code&gt;, &lt;code&gt;XXH_NEON&lt;/code&gt; and &lt;code&gt;XXH_VSX&lt;/code&gt;. Compiler may require additional flags to ensure proper support (for example, &lt;code&gt;gcc&lt;/code&gt; on linux will require &lt;code&gt;-mavx2&lt;/code&gt; for AVX2, and &lt;code&gt;-mavx512f&lt;/code&gt; for AVX512).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_PREFETCH&lt;/code&gt; : disable prefetching. Some platforms or situations may perform better without prefetching. XXH3 only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_PREFETCH_DIST&lt;/code&gt; : select prefetching distance. For close-to-metal adaptation to specific hardware platforms. XXH3 only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_STREAM&lt;/code&gt;: Disables the streaming API, limiting it to single shot variants only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_SIZE_OPT&lt;/code&gt;: &lt;code&gt;0&lt;/code&gt;: default, optimize for speed &lt;code&gt;1&lt;/code&gt;: default for &lt;code&gt;-Os&lt;/code&gt; and &lt;code&gt;-Oz&lt;/code&gt;: disables some speed hacks for size optimization &lt;code&gt;2&lt;/code&gt;: makes code as small as possible, performance may cry&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_INLINE_HINTS&lt;/code&gt;: By default, xxHash uses &lt;code&gt;__attribute__((always_inline))&lt;/code&gt; and &lt;code&gt;__forceinline&lt;/code&gt; to improve performance at the cost of code size. Defining this macro to 1 will mark all internal functions as &lt;code&gt;static&lt;/code&gt;, allowing the compiler to decide whether to inline a function or not. This is very useful when optimizing for smallest binary size, and is automatically defined when compiling with &lt;code&gt;-O0&lt;/code&gt;, &lt;code&gt;-Os&lt;/code&gt;, &lt;code&gt;-Oz&lt;/code&gt;, or &lt;code&gt;-fno-inline&lt;/code&gt; on GCC and Clang. This may also increase performance depending on compiler and architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH32_ENDJMP&lt;/code&gt;: Switch multi-branch finalization stage of XXH32 by a single jump. This is generally undesirable for performance, especially when hashing inputs of random sizes. But depending on exact architecture and compiler, a jump might provide slightly better performance on small inputs. Disabled by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_STDLIB&lt;/code&gt;: Disable invocation of &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt; functions, notably &lt;code&gt;malloc()&lt;/code&gt; and &lt;code&gt;free()&lt;/code&gt;. &lt;code&gt;libxxhash&lt;/code&gt;&#39;s &lt;code&gt;XXH*_createState()&lt;/code&gt; will always fail and return &lt;code&gt;NULL&lt;/code&gt;. But one-shot hashing (like &lt;code&gt;XXH32()&lt;/code&gt;) or streaming using statically allocated states still work as expected. This build flag is useful for embedded environments without dynamic allocation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_STATIC_LINKING_ONLY&lt;/code&gt;: gives access to internal state declaration, required for static allocation. Incompatible with dynamic linking, due to risks of ABI changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_XXH3&lt;/code&gt; : removes symbols related to &lt;code&gt;XXH3&lt;/code&gt; (both 64 &amp;amp; 128 bits) from generated binary. Useful to reduce binary size, notably for applications which do not use &lt;code&gt;XXH3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_NO_LONG_LONG&lt;/code&gt;: removes compilation of algorithms relying on 64-bit types (XXH3 and XXH64). Only XXH32 will be compiled. Useful for targets (architectures and compilers) without 64-bit support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_IMPORT&lt;/code&gt;: MSVC specific: should only be defined for dynamic linking, as it prevents linkage errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_CPU_LITTLE_ENDIAN&lt;/code&gt;: By default, endianness is determined by a runtime test resolved at compile time. If, for some reason, the compiler cannot simplify the runtime test, it can cost performance. It&#39;s possible to skip auto-detection and simply state that the architecture is little-endian by setting this macro to 1. Setting it to 0 states big-endian.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XXH_DEBUGLEVEL&lt;/code&gt; : When set to any value &amp;gt;= 1, enables &lt;code&gt;assert()&lt;/code&gt; statements. This (slightly) slows down execution, but may help finding bugs during debugging sessions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When compiling the Command Line Interface &lt;code&gt;xxhsum&lt;/code&gt; with &lt;code&gt;make&lt;/code&gt;, the following environment variables can also be set :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DISPATCH=1&lt;/code&gt; : use &lt;code&gt;xxh_x86dispatch.c&lt;/code&gt;, to automatically select between &lt;code&gt;scalar&lt;/code&gt;, &lt;code&gt;sse2&lt;/code&gt;, &lt;code&gt;avx2&lt;/code&gt; or &lt;code&gt;avx512&lt;/code&gt; instruction set at runtime, depending on local host. This option is only valid for &lt;code&gt;x86&lt;/code&gt;/&lt;code&gt;x64&lt;/code&gt; systems.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building xxHash - Using vcpkg&lt;/h3&gt; &#xA;&lt;p&gt;You can download and install xxHash using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;./vcpkg install xxhash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The xxHash port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Building and Using xxHash - tipi.build&lt;/h3&gt; &#xA;&lt;p&gt;You can work on xxHash and depend on it in your &lt;a href=&#34;https://tipi.build&#34;&gt;tipi.build&lt;/a&gt; projects by adding the following entry to your &lt;code&gt;.tipi/deps&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;Cyan4973/xxHash&#34;: { &#34;@&#34;: &#34;v0.8.1&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example of such usage can be found in the &lt;code&gt;/cli&lt;/code&gt; folder of this project which, if built as root project will depend on the release &lt;code&gt;v0.8.1&lt;/code&gt; of xxHash&lt;/p&gt; &#xA;&lt;p&gt;To contribute to xxHash itself use tipi.build on this repository (change the target name appropriately to &lt;code&gt;linux&lt;/code&gt; or &lt;code&gt;macos&lt;/code&gt; or &lt;code&gt;windows&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tipi . -t &amp;lt;target&amp;gt; --test all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;The simplest example calls xxhash 64-bit variant as a one-shot function generating a hash value from a single buffer, and invoked from a C/C++ program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &#34;xxhash.h&#34;&#xA;&#xA;    (...)&#xA;    XXH64_hash_t hash = XXH64(buffer, size, seed);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Streaming variant is more involved, but makes it possible to provide data incrementally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;#include &#34;stdlib.h&#34;   /* abort() */&#xA;#include &#34;xxhash.h&#34;&#xA;&#xA;&#xA;XXH64_hash_t calcul_hash_streaming(FileHandler fh)&#xA;{&#xA;    /* create a hash state */&#xA;    XXH64_state_t* const state = XXH64_createState();&#xA;    if (state==NULL) abort();&#xA;&#xA;    size_t const bufferSize = SOME_SIZE;&#xA;    void* const buffer = malloc(bufferSize);&#xA;    if (buffer==NULL) abort();&#xA;&#xA;    /* Initialize state with selected seed */&#xA;    XXH64_hash_t const seed = 0;   /* or any other value */&#xA;    if (XXH64_reset(state, seed) == XXH_ERROR) abort();&#xA;&#xA;    /* Feed the state with input data, any size, any number of times */&#xA;    (...)&#xA;    while ( /* some data left */ ) {&#xA;        size_t const length = get_more_data(buffer, bufferSize, fh);&#xA;        if (XXH64_update(state, buffer, length) == XXH_ERROR) abort();&#xA;        (...)&#xA;    }&#xA;    (...)&#xA;&#xA;    /* Produce the final hash value */&#xA;    XXH64_hash_t const hash = XXH64_digest(state);&#xA;&#xA;    /* State could be re-used; but in this example, it is simply freed  */&#xA;    free(buffer);&#xA;    XXH64_freeState(state);&#xA;&#xA;    return hash;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;The library files &lt;code&gt;xxhash.c&lt;/code&gt; and &lt;code&gt;xxhash.h&lt;/code&gt; are BSD licensed. The utility &lt;code&gt;xxhsum&lt;/code&gt; is GPL licensed.&lt;/p&gt; &#xA;&lt;h3&gt;Other programming languages&lt;/h3&gt; &#xA;&lt;p&gt;Beyond the C reference version, xxHash is also available from many different programming languages, thanks to great contributors. They are &lt;a href=&#34;http://www.xxhash.com/#other-languages&#34;&gt;listed here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Packaging status&lt;/h3&gt; &#xA;&lt;p&gt;Many distributions bundle a package manager which allows easy xxhash installation as both a &lt;code&gt;libxxhash&lt;/code&gt; library and &lt;code&gt;xxhsum&lt;/code&gt; command line interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/xxhash/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/xxhash.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Special Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Takayuki Matsuoka, aka @t-mat, for creating &lt;code&gt;xxhsum -c&lt;/code&gt; and great support during early xxh releases&lt;/li&gt; &#xA; &lt;li&gt;Mathias Westerdahl, aka @JCash, for introducing the first version of &lt;code&gt;XXH64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Devin Hussey, aka @easyaspi314, for incredible low-level optimizations on &lt;code&gt;XXH3&lt;/code&gt; and &lt;code&gt;XXH128&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yugabyte/yugabyte-db</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/yugabyte/yugabyte-db</id>
    <link href="https://github.com/yugabyte/yugabyte-db" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The high-performance distributed SQL database for global, internet-scale apps.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.yugabyte.com/wp-content/themes/yugabyte/assets/images/yugabyteDB-site-logo-new-blue.svg?sanitize=true&#34; align=&#34;center&#34; alt=&#34;YugabyteDB&#34; width=&#34;50%&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.yugabyte.com/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/ansicolortags/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.yugabyte.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ask%20us-forum-orange.svg?sanitize=true&#34; alt=&#34;Ask in forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://communityinviter.com/apps/yugabyte-db/register&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack:-%23yugabyte_db-blueviolet.svg?logo=slack&#34; alt=&#34;Slack chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yugabyte/ga-beacon&#34;&gt;&lt;img src=&#34;https://yugabyte.appspot.com/UA-104956980-4/home?pixel&amp;amp;useReferer&#34; alt=&#34;Analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is YugabyteDB?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;YugabyteDB&lt;/strong&gt; is a &lt;strong&gt;high-performance, cloud-native distributed SQL database&lt;/strong&gt; that aims to support &lt;strong&gt;all PostgreSQL features&lt;/strong&gt;. It is best to fit for &lt;strong&gt;cloud-native OLTP (i.e. real-time, business-critical) applications&lt;/strong&gt; that need absolute &lt;strong&gt;data correctness&lt;/strong&gt; and require at least one of the following: &lt;strong&gt;scalability, high tolerance to failures, or globally-distributed deployments.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#core-features&#34;&gt;Core Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#build-apps&#34;&gt;Build Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#whats-being-worked-on&#34;&gt;What&#39;s being worked on?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#need-help&#34;&gt;Need Help?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/#read-more&#34;&gt;Read More&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Core Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Powerful RDBMS capabilities&lt;/strong&gt; Yugabyte SQL (&lt;em&gt;YSQL&lt;/em&gt; for short) reuses the query layer of PostgreSQL (similar to Amazon Aurora PostgreSQL), thereby supporting most of its features (datatypes, queries, expressions, operators and functions, stored procedures, triggers, extensions, etc). Here is a detailed &lt;a href=&#34;https://docs.yugabyte.com/preview/explore/ysql-language-features/postgresql-compatibility/&#34;&gt;list of features currently supported by YSQL&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Distributed transactions&lt;/strong&gt; The transaction design is based on the Google Spanner architecture. Strong consistency of writes is achieved by using Raft consensus for replication and cluster-wide distributed ACID transactions using &lt;em&gt;hybrid logical clocks&lt;/em&gt;. &lt;em&gt;Snapshot&lt;/em&gt;, &lt;em&gt;serializable&lt;/em&gt; and &lt;em&gt;read committed&lt;/em&gt; isolation levels are supported. Reads (queries) have strong consistency by default, but can be tuned dynamically to read from followers and read-replicas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Continuous availability&lt;/strong&gt; YugabyteDB is extremely resilient to common outages with native failover and repair. YugabyteDB can be configured to tolerate disk, node, zone, region, and cloud failures automatically. For a typical deployment where a YugabyteDB cluster is deployed in one region across multiple zones on a public cloud, the RPO is 0 (meaning no data is lost on failure) and the RTO is 3 seconds (meaning the data being served by the failed node is available in 3 seconds).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Horizontal scalability&lt;/strong&gt; Scaling a YugabyteDB cluster to achieve more IOPS or data storage is as simple as adding nodes to the cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Geo-distributed, multi-cloud&lt;/strong&gt; YugabyteDB can be deployed in public clouds and natively inside Kubernetes. It supports deployments that span three or more fault domains, such as multi-zone, multi-region, and multi-cloud deployments. It also supports xCluster asynchronous replication with unidirectional master-slave and bidirectional multi-master configurations that can be leveraged in two-region deployments. To serve (stale) data with low latencies, read replicas are also a supported feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi API design&lt;/strong&gt; The query layer of YugabyteDB is built to be extensible. Currently, YugabyteDB supports two distributed SQL APIs: &lt;strong&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/api/ysql/&#34;&gt;Yugabyte SQL (YSQL)&lt;/a&gt;&lt;/strong&gt;, a fully relational API that re-uses query layer of PostgreSQL, and &lt;strong&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/api/ycql/&#34;&gt;Yugabyte Cloud QL (YCQL)&lt;/a&gt;&lt;/strong&gt;, a semi-relational SQL-like API with documents/indexing support with Apache Cassandra QL roots.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;100% open source&lt;/strong&gt; YugabyteDB is fully open-source under the &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/LICENSE.md&#34;&gt;Apache 2.0 license&lt;/a&gt;. The open-source version has powerful enterprise features such as distributed backups, encryption of data-at-rest, in-flight TLS encryption, change data capture, read replicas, and more.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about YugabyteDB in our &lt;a href=&#34;https://docs.yugabyte.com/latest/introduction/&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Get Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/install/&#34;&gt;Install YugabyteDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/create-local-cluster/&#34;&gt;Create a local cluster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.yugabyte.com/cloud/&#34;&gt;Start with Yugabyte Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/explore-ysql/&#34;&gt;Connect and try out SQL commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/&#34;&gt;Build an app&lt;/a&gt; using a PostgreSQL-compatible driver or ORM.&lt;/li&gt; &#xA; &lt;li&gt;Try running a real-world demo application: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yugabyte/yugastore-java&#34;&gt;Microservices-oriented e-commerce app&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/develop/realworld-apps/iot-spark-kafka-ksql/&#34;&gt;Streaming IoT app with Kafka and Spark Streaming&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cannot find what you are looking for? Have a question? Please post your questions or comments on our Community &lt;a href=&#34;https://communityinviter.com/apps/yugabyte-db/register&#34;&gt;Slack&lt;/a&gt; or &lt;a href=&#34;https://forum.yugabyte.com&#34;&gt;Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Build Apps&lt;/h1&gt; &#xA;&lt;p&gt;YugabyteDB supports several languages and client drivers. Below is a brief list.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;ORM&lt;/th&gt; &#xA;   &lt;th&gt;YSQL Drivers&lt;/th&gt; &#xA;   &lt;th&gt;YCQL Drivers&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/java/ysql-spring-data/&#34;&gt;Spring/Hibernate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/java/ysql-jdbc/&#34;&gt;PostgreSQL JDBC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/java/ycql/&#34;&gt;cassandra-driver-core-yb&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;Gorm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/go/#ysql&#34;&gt;pq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/go/#ycql&#34;&gt;gocql&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NodeJS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;Sequelize&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/nodejs/#ysql&#34;&gt;pg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/nodejs/#ycql&#34;&gt;cassandra-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;SQLAlchemy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/python/#ysql&#34;&gt;psycopg2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/python/#ycql&#34;&gt;yb-cassandra-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;ActiveRecord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/ruby/#ysql&#34;&gt;pg&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/ruby/#ycql&#34;&gt;yugabyte-ycql-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/orm-examples&#34;&gt;EntityFramework&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.npgsql.org/&#34;&gt;npgsql&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/csharp/#ycql&#34;&gt;CassandraCSharpDriver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;Not tested&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/cpp/#ysql&#34;&gt;libpqxx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/cpp/#ycql&#34;&gt;cassandra-cpp-driver&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;Not tested&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/quick-start/build-apps/c/#ysql&#34;&gt;libpq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not tested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;What&#39;s being worked on?&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This section was last updated in &lt;strong&gt;March, 2022&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Current roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of some of the key features being worked on for the upcoming releases (the YugabyteDB &lt;a href=&#34;https://docs.yugabyte.com/latest/releases/release-notes/v2.13/&#34;&gt;&lt;strong&gt;v2.13 latest release&lt;/strong&gt;&lt;/a&gt; has been released in &lt;strong&gt;March, 2022&lt;/strong&gt;, and the &lt;a href=&#34;https://blog.yugabyte.com/announcing-yugabytedb-2-12/&#34;&gt;&lt;strong&gt;v2.12 stable release&lt;/strong&gt;&lt;/a&gt; was released in &lt;strong&gt;Feb 2022&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Release Target&lt;/th&gt; &#xA;   &lt;th&gt;Progress&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11765&#34;&gt;Faster Bulk-Data Loading in YugabyteDB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11765&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Master issue to track improvements to make it easier and faster to get large amounts of data into YugabyteDB.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11665&#34;&gt;Database-level multi-tenancy with tablegroups&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/11665&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Master issue to track Database-level multi-tenancy using tablegroups.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9797&#34;&gt;Upgrade to PostgreSQL v13&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9797&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;For latest features, new PostgreSQL extensions, performance, and community fixes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support for &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/7120&#34;&gt;in-cluster PITR&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/7120&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Point in time recovery of YSQL databases, to a fixed point in time, across DDL and DML changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/docdb-automatic-tablet-splitting.md&#34;&gt;Automatic tablet splitting enabled by default&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1004&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables changing the number of tablets (which are splits of data) at runtime.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YSQL-table statistics and cost based optimizer(CBO)&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/5242&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Improve YSQL query performance&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;YSQL-Feature support - ALTER TABLE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Support for various &lt;code&gt;ALTER TABLE&lt;/code&gt; variants&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/online-schema-migrations.md&#34;&gt;YSQL-Online schema migration&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/4192&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Schema migrations(includes DDL operations) to be safely run concurrently with foreground operations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pessimistic locking Design&lt;/td&gt; &#xA;   &lt;td&gt;PROGRESS&lt;/td&gt; &#xA;   &lt;td&gt;v2.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/5680&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Make &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-colocated-tables.md&#34;&gt;&lt;code&gt;COLOCATED&lt;/code&gt; tables&lt;/a&gt; default for YSQL&lt;/td&gt; &#xA;   &lt;td&gt;PLANNING&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/5239&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support for transactions in async &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/multi-region-xcluster-async-replication.md&#34;&gt;xCluster replication&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PLANNING&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1808&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Apply transactions atomically on consumer cluster.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support for GiST indexes&lt;/td&gt; &#xA;   &lt;td&gt;PLANNING&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1337&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Suppor for GiST (Generalized Search Tree) based index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Recently released features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Release Target&lt;/th&gt; &#xA;   &lt;th&gt;Docs / Enhancements&lt;/th&gt; &#xA;   &lt;th&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9019&#34;&gt;Change Data Capture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change data capture (CDC) allows multiple downstream apps and services to consume the continuous and never-ending stream(s) of changes to Yugabyte databases&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/10102&#34;&gt;Support for materalized views&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/advanced-features/views/#materialized-views&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A materialized view is a pre-computed data set derived from a query specification and stored for later use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/9980&#34;&gt;Geo-partitioning support&lt;/a&gt; for the transaction status table&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/multi-region-deployments/row-level-geo-partitioning/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Instead of central remote transaction execution metatda, it is now optimized for access from different regions. Since the transaction metadata is also geo partitioned, it eliminates the need for round-trip to remote regions to update transaction statuses.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transparently restart transactions&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Decrease the incidence of transaction restart errors seen in various scenarios&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-row-level-partitioning.md&#34;&gt;Row-level geo-partitioning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/multi-region-deployments/row-level-geo-partitioning/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Row-level geo-partitioning allows fine-grained control over pinning data in a user table (at a per-row level) to geographic locations, thereby allowing the data residency to be managed at the table-row level.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-gin-indexes.md&#34;&gt;YSQL-Support &lt;code&gt;GIN&lt;/code&gt; indexes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/gin/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Support for generalized inverted indexes for container data types like jsonb, tsvector, and array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/ysql-collation-support.md&#34;&gt;YSQL-Collation Support&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/collations/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows specifying the sort order and character classification behavior of data per-column, or even per-operation according to language and country-specific rules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/savepoints.md&#34;&gt;YSQL-Savepoint Support&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/explore/ysql-language-features/savepoints/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Useful for implementing complex error recovery in multi-statement transaction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/platform-xcluster-replication-management.md&#34;&gt;xCluster replication management through Platform&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/yugabyte-platform/create-deployments/async-replication-platform/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/raw/master/architecture/design/spring-data-yugabytedb.md&#34;&gt;Spring Data YugabyteDB module&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/7956&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Bridges the gap for learning the distributed SQL concepts with familiarity and ease of Spring Data APIs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Support Liquibase, Flyway, ORM schema migrations&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.yugabyte.com/schema-versioning-in-yugabytedb-using-flyway/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;Support &lt;code&gt;ALTER TABLE&lt;/code&gt; add primary key&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/1124&#34;&gt;Track&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues/4421&#34;&gt;YCQL-LDAP Support&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/secure/authentication/ldap-authentication-ycql/#root&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;support LDAP authentication in YCQL API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.yugabyte.com/yugabytedb-2-8-alerts-and-notifications/&#34;&gt;Platform Alerting and Notification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.yugabyte.com/latest/yugabyte-platform/alerts-monitoring/alert/&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;To get notified in real time about database alerts, user defined alert policies notify you when a performance metric rises above or falls below a threshold you set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.yugabyte.com/yugabytedb-2-8-api-automated-operations/&#34;&gt;Platform API&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅ &lt;em&gt;DONE&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v2.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api-docs.yugabyte.com/docs/yugabyte-platform/ZG9jOjIwMDY0MTA4-platform-api-overview&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Securely Deploy YugabyteDB Clusters Using Infrastructure-as-Code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Architecture&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/architecture/images/yb-architecture.jpg&#34; align=&#34;center&#34; alt=&#34;YugabyteDB Architecture&#34;&gt; &#xA;&lt;p&gt;Review detailed architecture in our &lt;a href=&#34;https://docs.yugabyte.com/latest/architecture/&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Need Help?&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can ask questions, find answers, and help others on our Community &lt;a href=&#34;https://communityinviter.com/apps/yugabyte-db/register&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://forum.yugabyte.com&#34;&gt;Forum&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/tagged/yugabyte-db&#34;&gt;Stack Overflow&lt;/a&gt;, as well as Twitter &lt;a href=&#34;https://twitter.com/yugabyte&#34;&gt;@Yugabyte&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please use &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/issues&#34;&gt;GitHub issues&lt;/a&gt; to report issues or request new features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To Troubleshoot YugabyteDB, cluser/node level isssues, Please refer to &lt;a href=&#34;https://docs.yugabyte.com/latest/troubleshoot/&#34;&gt;Troubleshooting documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;As an an open-source project with a strong focus on the user community, we welcome contributions as GitHub pull requests. See our &lt;a href=&#34;https://docs.yugabyte.com/latest/contribute/&#34;&gt;Contributor Guides&lt;/a&gt; to get going. Discussions and RFCs for features happen on the design discussions section of &lt;a href=&#34;https://forum.yugabyte.com&#34;&gt;our Forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Source code in this repository is variously licensed under the Apache License 2.0 and the Polyform Free Trial License 1.0.0. A copy of each license can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/yugabyte/yugabyte-db/master/licenses&#34;&gt;licenses&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The build produces two sets of binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The entire database with all its features (including the enterprise ones) are licensed under the Apache License 2.0&lt;/li&gt; &#xA; &lt;li&gt;The binaries that contain &lt;code&gt;-managed&lt;/code&gt; in the artifact and help run a managed service are licensed under the Polyform Free Trial License 1.0.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the build options generate only the Apache License 2.0 binaries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Read More&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To see our updates, go to &lt;a href=&#34;https://blog.yugabyte.com/&#34;&gt;The Distributed SQL Blog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For an in-depth design and the YugabyteDB architecture, see our &lt;a href=&#34;https://github.com/yugabyte/yugabyte-db/tree/master/architecture/design&#34;&gt;design specs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Tech Talks and &lt;a href=&#34;https://www.youtube.com/c/YugaByte&#34;&gt;Videos&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See how YugabyteDB &lt;a href=&#34;https://docs.yugabyte.com/latest/comparisons/&#34;&gt;compares with other databases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>emscripten-core/emscripten</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/emscripten-core/emscripten</id>
    <link href="https://github.com/emscripten-core/emscripten" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emscripten: An LLVM-to-WebAssembly Compiler&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/emscripten-core/emscripten/main/media/switch_logo.png&#34; alt=&#34;emscripten logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Main project page: &lt;a href=&#34;https://emscripten.org&#34;&gt;https://emscripten.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub CI status: &lt;a href=&#34;https://circleci.com/gh/emscripten-core/emscripten/tree/main&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/emscripten-core/emscripten.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chromium builder status: &lt;a href=&#34;https://ci.chromium.org/p/emscripten-releases&#34;&gt;emscripten-releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten compiles C and C++ to &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; using &lt;a href=&#34;https://en.wikipedia.org/wiki/LLVM&#34;&gt;LLVM&lt;/a&gt; and &lt;a href=&#34;https://github.com/WebAssembly/binaryen/&#34;&gt;Binaryen&lt;/a&gt;. Emscripten output can run on the Web, in Node.js, and in &lt;a href=&#34;https://v8.dev/blog/emscripten-standalone-wasm#running-in-wasm-runtimes&#34;&gt;wasm runtimes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Emscripten provides Web support for popular portable APIs such as OpenGL and SDL2, allowing complex graphical native applications to be ported, such as the &lt;a href=&#34;https://docs.unity3d.com/Manual/webgl-gettingstarted.html&#34;&gt;Unity game engine&lt;/a&gt; and &lt;a href=&#34;https://blog.chromium.org/2019/06/webassembly-brings-google-earth-to-more.html&#34;&gt;Google Earth&lt;/a&gt;. It can probably port your codebase, too!&lt;/p&gt; &#xA;&lt;p&gt;While Emscripten mostly focuses on compiling C and C++ using &lt;a href=&#34;https://clang.llvm.org/&#34;&gt;Clang&lt;/a&gt;, it can be integrated with other LLVM-using compilers (for example, Rust has Emscripten integration, with the &lt;code&gt;wasm32-unknown-emscripten&lt;/code&gt; and &lt;code&gt;asmjs-unknown-emscripten&lt;/code&gt; targets).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Emscripten is available under 2 licenses, the MIT license and the University of Illinois/NCSA Open Source License.&lt;/p&gt; &#xA;&lt;p&gt;Both are permissive open source licenses, with little if any practical difference between them.&lt;/p&gt; &#xA;&lt;p&gt;The reason for offering both is that (1) the MIT license is well-known and suitable for a compiler toolchain, while (2) LLVM&#39;s original license, the University of Illinois/NCSA Open Source License, was also offered to allow Emscripten&#39;s code to be integrated upstream into LLVM. The second reason became less important after Emscripten switched to the LLVM wasm backend, at which point there isn&#39;t any code we expect to move back and forth between the projects; also, LLVM relicensed to Apache 2.0 + exceptions meanwhile. In practice you can just consider Emscripten as MIT licensed (which allows you to do pretty much anything you want with a compiler, including commercial and non-commercial use).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;LICENSE&lt;/code&gt; for the full content of the licenses.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sandboxie-plus/Sandboxie</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/sandboxie-plus/Sandboxie</id>
    <link href="https://github.com/sandboxie-plus/Sandboxie" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sandboxie - Open Source&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sandboxie&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/sandboxie-plus/Sandboxie.svg?sanitize=true&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/sandboxie-plus/Sandboxie/all.svg?label=pre-release&#34; alt=&#34;GitHub Pre-Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/actions&#34;&gt;&lt;img src=&#34;https://github.com/sandboxie-plus/Sandboxie/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://user-images.githubusercontent.com/12372772/123517080-8ab20a00-d69f-11eb-8e82-2e18cf6e0303.png&#34;&gt; Sandboxie is a sandbox-based isolation software for 32-bit and 64-bit Windows NT-based operating systems. It creates a sandbox-like isolated operating environment in which applications can be run or installed without permanently modifying local &amp;amp; mapped drives or the windows registry. An isolated virtual environment allows controlled testing of untrusted programs and web surfing.&#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;System requirements&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Release notes&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Security policy&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows 7 or higher, 32-bit or 64-bit.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/raw/master/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We encourage the developers and security community to conduct research, report issues, and suggest improvements on this code base. However, please do &lt;strong&gt;not&lt;/strong&gt; report security vulnerabilities in public GitHub comments. This repository has a SECURITY file with instructions on responsibly reporting security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/sandboxie-plus/Sandboxie/total?style=for-the-badge&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Sandboxie is available in two flavors, Plus and Classic. They both share the same core components, this means they have the same level of security and compatibility. What&#39;s different is the availability of features in the user interface.&lt;/p&gt; &#xA;&lt;p&gt;Plus build has a modern Qt based UI, which supports all new features that have been added since the project went open source:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snapshot Manager - this feature takes a copy of any box in order to be restored when needed&lt;/li&gt; &#xA; &lt;li&gt;Maintenance mode - it allows to uninstall/install/start/stop Sandboxie driver and service when needed&lt;/li&gt; &#xA; &lt;li&gt;Portable mode - you can run the installer and choose to extract all files to a directory&lt;/li&gt; &#xA; &lt;li&gt;Additional UI options to block access for Windows components like printer spooler and clipboard&lt;/li&gt; &#xA; &lt;li&gt;More customization options for Start/Run and Internet access restrictions&lt;/li&gt; &#xA; &lt;li&gt;Global hotkey to terminate all boxed processes&lt;/li&gt; &#xA; &lt;li&gt;A new firewall per sandbox which supports Windows Filtering Platform (WFP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Classic build has the old no longer developed MFC based UI, hence it lacks native interface support for Plus features. However, most of them can be configured manually in the Sandboxie.ini configuration file, and some valuable &lt;a href=&#34;https://sandboxie-website-archive.github.io/www.sandboxie.com/old-forums/viewforum1a2d1a2d.html?f=22&#34;&gt;contributions&lt;/a&gt; can still be applied nowadays.&lt;/p&gt; &#xA;&lt;p&gt;If you need to check all new features at once, a good way to highlight them quickly is to find the equal sign in the &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;A GitHub copy of the &lt;a href=&#34;https://sandboxie-plus.github.io/sandboxie-docs&#34;&gt;Sandboxie documentation&lt;/a&gt; is currently maintained, although more volunteers are needed to keep it updated with the new changes. We recommend to check also the following labels in this repository:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/issues?q=label%3A%22future+development%22&#34;&gt;future development&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/issues?q=label%3Adocumentation&#34;&gt;documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/issues?q=label%3A%22build+issue%22&#34;&gt;build issues&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/labels/Known%20issue&#34;&gt;known issues&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/issues?q=is%3Aissue+is%3Aopen+label%3Aregression&#34;&gt;regressions&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/issues?q=label%3Aworkaround&#34;&gt;workaround&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/issues?q=label%3A%22help+wanted%22&#34;&gt;help wanted&lt;/a&gt; | &lt;a href=&#34;https://github.com/sandboxie-plus/Sandboxie/labels?sort=count-desc&#34;&gt;more...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A partial archive of the &lt;a href=&#34;https://sandboxie-website-archive.github.io/www.sandboxie.com/old-forums&#34;&gt;old Sandboxie forum&lt;/a&gt; that was previously maintained by Invincea is still available. If you need to find something there, please use the corresponding &lt;a href=&#34;https://github.com/Sandboxie-Website-Archive/sandboxie-website-archive.github.io&#34;&gt;repository search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project maintenance&lt;/h2&gt; &#xA;&lt;p&gt;2004 - 2013 Ronen Tzur&lt;/p&gt; &#xA;&lt;p&gt;2013 - 2017 Invincea Inc.&lt;/p&gt; &#xA;&lt;p&gt;2017 - 2020 Sophos Group plc&lt;/p&gt; &#xA;&lt;p&gt;Open Source release&lt;/p&gt; &#xA;&lt;p&gt;2020 onwards David Xanatos&lt;/p&gt; &#xA;&lt;h2&gt;Project support / sponsorship&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://binary.ninja/&#34;&gt;&lt;img align=&#34;left&#34; height=&#34;64&#34; width=&#34;64&#34; src=&#34;https://raw.githubusercontent.com/sandboxie-plus/Sandboxie/master/.github/images/binja-love.png&#34;&gt;&lt;/a&gt; Thank you &lt;a href=&#34;https://vector35.com/&#34;&gt;Vector 35&lt;/a&gt; for providing a &lt;a href=&#34;https://binary.ninja/&#34;&gt;Binary Ninja&lt;/a&gt; license to help with reverse engineering. &lt;br&gt; Binary Ninja is a multi-platform interactive disassembler, decompiler, and binary analysis tool for reverse engineers, malware analysts, vulnerability researchers, and software developers.&lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://icons8.de/&#34;&gt;&lt;img align=&#34;left&#34; height=&#34;64&#34; width=&#34;64&#34; src=&#34;https://raw.githubusercontent.com/sandboxie-plus/Sandboxie/master/.github/images/Icons8_logo.png&#34;&gt;&lt;/a&gt;Thank you &lt;a href=&#34;https://icons8.de/&#34;&gt;Icons8&lt;/a&gt; for providing icons for the project. &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Helpful Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DavidBerdik - Maintainer of &lt;a href=&#34;https://github.com/Sandboxie-Website-Archive/sandboxie-website-archive.github.io&#34;&gt;Sandboxie Website Archive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;diversenok - Security analysis &amp;amp; PoC&#39;s&lt;/li&gt; &#xA; &lt;li&gt;stephtr - CI / Certification&lt;/li&gt; &#xA; &lt;li&gt;TechLord - Team-IRA / Reversing&lt;/li&gt; &#xA; &lt;li&gt;hg421 - Security analysis / Code reviews&lt;/li&gt; &#xA; &lt;li&gt;typpos - UI suggestions / Documentation / Code reviews&lt;/li&gt; &#xA; &lt;li&gt;isaak654 - Templates / Documentation / Code fixes&lt;/li&gt; &#xA; &lt;li&gt;Dyras - Templates additions&lt;/li&gt; &#xA; &lt;li&gt;cricri-pingouin - UI fixes&lt;/li&gt; &#xA; &lt;li&gt;Valinwolf - UI / Icons&lt;/li&gt; &#xA; &lt;li&gt;daveout - UI / Icons&lt;/li&gt; &#xA; &lt;li&gt;mpheath - Author of Plus installer / Code fixes&lt;/li&gt; &#xA; &lt;li&gt;yfdyh000 - Localization support for Plus installer&lt;/li&gt; &#xA; &lt;li&gt;NewKidOnTheBlock - Changelog fixes&lt;/li&gt; &#xA; &lt;li&gt;Naeemh1 - Documentation additions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translators&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;yuhao2348732, nkh0472, yfdyh000, gexgd0419 - Chinese Simplified&lt;/li&gt; &#xA; &lt;li&gt;TragicLifeHu, Hulen - Chinese Traditional&lt;/li&gt; &#xA; &lt;li&gt;RockyTDR - Dutch&lt;/li&gt; &#xA; &lt;li&gt;clexanis - French&lt;/li&gt; &#xA; &lt;li&gt;bastik-1001 - German&lt;/li&gt; &#xA; &lt;li&gt;isaak654 - Italian&lt;/li&gt; &#xA; &lt;li&gt;7zip from &lt;a href=&#34;https://forum.xanasoft.com/viewtopic.php?f=12&amp;amp;t=4&amp;amp;start=10&#34;&gt;Xanasoft topic&lt;/a&gt; - Polish&lt;/li&gt; &#xA; &lt;li&gt;JNylson - Portuguese and Brazilian Portuguese&lt;/li&gt; &#xA; &lt;li&gt;lufog - Russian&lt;/li&gt; &#xA; &lt;li&gt;sebadamus - Spanish&lt;/li&gt; &#xA; &lt;li&gt;xorcan - Turkish (disabled for inactivity, a new translator is needed)&lt;/li&gt; &#xA; &lt;li&gt;SuperMaxusa - Ukrainian&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More volunteers are welcome here! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Support the project&lt;/h2&gt; &#xA;&lt;p&gt;If you like the tool, please consider supporting it on Patreon: &lt;a href=&#34;https://www.patreon.com/DavidXanatos&#34;&gt;https://www.patreon.com/DavidXanatos&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can donate directly via the PayPal button on my website: &lt;a href=&#34;https://xanasoft.com&#34;&gt;https://xanasoft.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mit-pdos/xv6-riscv</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/mit-pdos/xv6-riscv</id>
    <link href="https://github.com/mit-pdos/xv6-riscv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xv6 for RISC-V&lt;/p&gt;&lt;hr&gt;&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern RISC-V multiprocessor using ANSI C.&lt;/p&gt; &#xA;&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; &#xA;&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&#34;https://pdos.csail.mit.edu/6.828/&#34;&gt;https://pdos.csail.mit.edu/6.828/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; &#xA;&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; &#xA;&lt;p&gt;We are also grateful for the bug reports and patches contributed by Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov , Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, , Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider, OptimisticSide, Greg Price, Jude Rich, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.&lt;/p&gt; &#xA;&lt;p&gt;The code in the files that constitute xv6 is Copyright 2006-2020 Frans Kaashoek, Robert Morris, and Russ Cox.&lt;/p&gt; &#xA;&lt;p&gt;ERROR REPORTS&lt;/p&gt; &#xA;&lt;p&gt;Please send errors and suggestions to Frans Kaashoek and Robert Morris (kaashoek,&lt;a href=&#34;mailto:rtm@mit.edu&#34;&gt;rtm@mit.edu&lt;/a&gt;). The main purpose of xv6 is as a teaching operating system for MIT&#39;s 6.S081, so we are more interested in simplifications and clarifications than new features.&lt;/p&gt; &#xA;&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; &#xA;&lt;p&gt;You will need a RISC-V &#34;newlib&#34; tool chain from &lt;a href=&#34;https://github.com/riscv/riscv-gnu-toolchain&#34;&gt;https://github.com/riscv/riscv-gnu-toolchain&lt;/a&gt;, and qemu compiled for riscv64-softmmu. Once they are installed, and in your shell search path, you can run &#34;make qemu&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zephyrproject-rtos/zephyr</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/zephyrproject-rtos/zephyr</id>
    <link href="https://github.com/zephyrproject-rtos/zephyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Primary Git Repository for the Zephyr Project. Zephyr is a new generation, scalable, optimized, secure RTOS for multiple hardware architectures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.zephyrproject.org&#34;&gt; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/doc/_static/images/logo-readme.svg?sanitize=true&#34;&gt; &lt;/p&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/74&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/74/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml?query=branch%3Amain&#34;&gt; &lt;img src=&#34;https://github.com/zephyrproject-rtos/zephyr/actions/workflows/twister.yaml/badge.svg?event=push&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr Project is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.&lt;/p&gt; &#xA;&lt;p&gt;The Zephyr kernel supports multiple architectures, including ARM (Cortex-A, Cortex-R, Cortex-M), Intel x86, ARC, Nios II, Tensilica Xtensa, and RISC-V, SPARC, MIPS, and a large number of &lt;code&gt;supported boards&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. below included in doc/introduction/introduction.rst&lt;/p&gt; &#xA;&lt;p&gt;Getting Started&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Welcome to Zephyr! See the &lt;code&gt;Introduction to Zephyr&lt;/code&gt;_ for a high-level overview, and the documentation&#39;s &lt;code&gt;Getting Started Guide&lt;/code&gt;_ to start developing.&lt;/p&gt; &#xA;&lt;p&gt;.. start_include_here&lt;/p&gt; &#xA;&lt;p&gt;Community Support&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Community support is provided via mailing lists and Discord; see the Resources below for details.&lt;/p&gt; &#xA;&lt;p&gt;.. _project-resources:&lt;/p&gt; &#xA;&lt;p&gt;Resources&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Here&#39;s a quick summary of resources to help you find your way around:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Help&lt;/strong&gt;: &lt;code&gt;Asking for Help Tips&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; (&lt;code&gt;Getting Started Guide&lt;/code&gt;_)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr&#34;&gt;https://github.com/zephyrproject-rtos/zephyr&lt;/a&gt; is the main repository; &lt;a href=&#34;https://elixir.bootlin.com/zephyr/latest/source&#34;&gt;https://elixir.bootlin.com/zephyr/latest/source&lt;/a&gt; contains a searchable index&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Releases&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/releases&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Samples and example code&lt;/strong&gt;: see &lt;code&gt;Sample and Demo Code Examples&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mailing Lists&lt;/strong&gt;: &lt;a href=&#34;mailto:users@lists.zephyrproject.org&#34;&gt;users@lists.zephyrproject.org&lt;/a&gt; and &lt;a href=&#34;mailto:devel@lists.zephyrproject.org&#34;&gt;devel@lists.zephyrproject.org&lt;/a&gt; are the main user and developer mailing lists, respectively. You can join the developer&#39;s list and search its archives at &lt;code&gt;Zephyr Development mailing list&lt;/code&gt;&lt;em&gt;. The other &lt;code&gt;Zephyr mailing list subgroups&lt;/code&gt;&lt;/em&gt; have their own archives and sign-up pages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nightly CI Build Status&lt;/strong&gt;: &lt;a href=&#34;https://lists.zephyrproject.org/g/builds&#34;&gt;https://lists.zephyrproject.org/g/builds&lt;/a&gt; The &lt;a href=&#34;mailto:builds@lists.zephyrproject.org&#34;&gt;builds@lists.zephyrproject.org&lt;/a&gt; mailing list archives the CI nightly build results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chat&lt;/strong&gt;: Real-time chat happens in Zephyr&#39;s Discord Server. Use this &lt;code&gt;Discord Invite&lt;/code&gt;_ to register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: see the &lt;code&gt;Contribution Guide&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wiki&lt;/strong&gt;: &lt;code&gt;Zephyr GitHub wiki&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/issues&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security Issues&lt;/strong&gt;: Email &lt;a href=&#34;mailto:vulnerabilities@zephyrproject.org&#34;&gt;vulnerabilities@zephyrproject.org&lt;/a&gt; to report security issues; also see our &lt;code&gt;Security&lt;/code&gt;_ documentation. Security issues are tracked separately at &lt;a href=&#34;https://zephyrprojectsec.atlassian.net&#34;&gt;https://zephyrprojectsec.atlassian.net&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zephyr Project Website&lt;/strong&gt;: &lt;a href=&#34;https://zephyrproject.org&#34;&gt;https://zephyrproject.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Discord Invite: &lt;a href=&#34;https://chat.zephyrproject.org&#34;&gt;https://chat.zephyrproject.org&lt;/a&gt; .. _supported boards: &lt;a href=&#34;http://docs.zephyrproject.org/latest/boards/index.html&#34;&gt;http://docs.zephyrproject.org/latest/boards/index.html&lt;/a&gt; .. _Zephyr Documentation: &lt;a href=&#34;http://docs.zephyrproject.org&#34;&gt;http://docs.zephyrproject.org&lt;/a&gt; .. _Introduction to Zephyr: &lt;a href=&#34;http://docs.zephyrproject.org/latest/introduction/index.html&#34;&gt;http://docs.zephyrproject.org/latest/introduction/index.html&lt;/a&gt; .. _Getting Started Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/getting_started/index.html&#34;&gt;http://docs.zephyrproject.org/latest/getting_started/index.html&lt;/a&gt; .. _Contribution Guide: &lt;a href=&#34;http://docs.zephyrproject.org/latest/contribute/index.html&#34;&gt;http://docs.zephyrproject.org/latest/contribute/index.html&lt;/a&gt; .. _Zephyr GitHub wiki: &lt;a href=&#34;https://github.com/zephyrproject-rtos/zephyr/wiki&#34;&gt;https://github.com/zephyrproject-rtos/zephyr/wiki&lt;/a&gt; .. _Zephyr Development mailing list: &lt;a href=&#34;https://lists.zephyrproject.org/g/devel&#34;&gt;https://lists.zephyrproject.org/g/devel&lt;/a&gt; .. _Zephyr mailing list subgroups: &lt;a href=&#34;https://lists.zephyrproject.org/g/main/subgroups&#34;&gt;https://lists.zephyrproject.org/g/main/subgroups&lt;/a&gt; .. _Sample and Demo Code Examples: &lt;a href=&#34;http://docs.zephyrproject.org/latest/samples/index.html&#34;&gt;http://docs.zephyrproject.org/latest/samples/index.html&lt;/a&gt; .. _Security: &lt;a href=&#34;http://docs.zephyrproject.org/latest/security/index.html&#34;&gt;http://docs.zephyrproject.org/latest/security/index.html&lt;/a&gt; .. _Asking for Help Tips: &lt;a href=&#34;https://docs.zephyrproject.org/latest/getting_started/index.html#asking-for-help&#34;&gt;https://docs.zephyrproject.org/latest/getting_started/index.html#asking-for-help&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Genymobile/scrcpy</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/Genymobile/scrcpy</id>
    <link href="https://github.com/Genymobile/scrcpy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display and control your Android device&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scrcpy (v1.24)&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/app/data/icon.svg?sanitize=true&#34; width=&#34;128&#34; height=&#34;128&#34; alt=&#34;scrcpy&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;pronounced &#34;&lt;strong&gt;scr&lt;/strong&gt;een &lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;py&lt;/strong&gt;&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#translations&#34;&gt;Read in another language&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This application provides display and control of Android devices connected via USB or &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#tcpip-wireless&#34;&gt;over TCP/IP&lt;/a&gt;. It does not require any &lt;em&gt;root&lt;/em&gt; access. It works on &lt;em&gt;GNU/Linux&lt;/em&gt;, &lt;em&gt;Windows&lt;/em&gt; and &lt;em&gt;macOS&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/assets/screenshot-debian-600.jpg&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It focuses on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;lightness&lt;/strong&gt;: native, displays only the device screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;performance&lt;/strong&gt;: 30~120fps, depending on the device&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;quality&lt;/strong&gt;: 1920×1080 or above&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;low latency&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Genymobile/scrcpy/pull/646&#34;&gt;35~70ms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;low startup time&lt;/strong&gt;: ~1 second to display the first image&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;non-intrusiveness&lt;/strong&gt;: nothing is left installed on the Android device&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;user benefits&lt;/strong&gt;: no account, no ads, no internet required&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;freedom&lt;/strong&gt;: free and open source software&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Its features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#recording&#34;&gt;recording&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;mirroring with &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#turn-screen-off&#34;&gt;Android device screen off&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#copy-paste&#34;&gt;copy-paste&lt;/a&gt; in both directions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#capture-configuration&#34;&gt;configurable quality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android device &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#v4l2loopback&#34;&gt;as a webcam (V4L2)&lt;/a&gt; (Linux-only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#physical-keyboard-simulation-hid&#34;&gt;physical keyboard simulation (HID)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#physical-mouse-simulation-hid&#34;&gt;physical mouse simulation (HID)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#otg&#34;&gt;OTG mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;and more…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The Android device requires at least API 21 (Android 5.0).&lt;/p&gt; &#xA;&lt;p&gt;Make sure you &lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html#Enabling&#34;&gt;enable adb debugging&lt;/a&gt; on your device(s).&lt;/p&gt; &#xA;&lt;p&gt;On some devices, you also need to enable &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/70#issuecomment-373286323&#34;&gt;an additional option&lt;/a&gt; to control it using a keyboard and mouse.&lt;/p&gt; &#xA;&lt;h2&gt;Get the app&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/scrcpy/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/scrcpy.svg?sanitize=true&#34; alt=&#34;Packaging status&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: &lt;code&gt;apt install scrcpy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/download/v1.24/scrcpy-win64-v1.24.zip&#34;&gt;download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;code&gt;brew install scrcpy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Build from sources: &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md#simple&#34;&gt;simplified process&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Debian and Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Snappy_(package_manager)&#34;&gt;Snap&lt;/a&gt; package is available: &lt;a href=&#34;https://snapstats.org/snaps/scrcpy&#34;&gt;&lt;code&gt;scrcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Fedora, a &lt;a href=&#34;https://fedoraproject.org/wiki/Category:Copr&#34;&gt;COPR&lt;/a&gt; package is available: &lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/zeno/scrcpy/&#34;&gt;&lt;code&gt;scrcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Gentoo, an &lt;a href=&#34;https://wiki.gentoo.org/wiki/Ebuild&#34;&gt;Ebuild&lt;/a&gt; is available: &lt;a href=&#34;https://github.com/maggu2810/maggu2810-overlay/tree/master/app-mobilephone/scrcpy&#34;&gt;&lt;code&gt;scrcpy/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md#simple&#34;&gt;simplified process&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;For Windows, a prebuilt archive with all the dependencies (including &lt;code&gt;adb&lt;/code&gt;) is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/download/v1.24/scrcpy-win64-v1.24.zip&#34;&gt;&lt;code&gt;scrcpy-win64-v1.24.zip&lt;/code&gt;&lt;/a&gt;&lt;br&gt; &lt;sub&gt;SHA-256: &lt;code&gt;6ccb64cba0a3e75715e85a188daeb4f306a1985f8ce123eba92ba74fc9b27367&lt;/code&gt;&lt;/sub&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is also available in &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install scrcpy&#xA;choco install adb    # if you don&#39;t have it yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And in &lt;a href=&#34;https://scoop.sh&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop install scrcpy&#xA;scoop install adb    # if you don&#39;t have it yet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;The application is available in &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Just install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need &lt;code&gt;adb&lt;/code&gt;, accessible from your &lt;code&gt;PATH&lt;/code&gt;. If you don&#39;t have it yet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install android-platform-tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also available in &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;, which sets up &lt;code&gt;adb&lt;/code&gt; for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;build the app manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;p&gt;Plug an Android device into your computer, and execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It accepts command-line arguments, listed by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Capture configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Reduce size&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes, it is useful to mirror an Android device at a lower resolution to increase performance.&lt;/p&gt; &#xA;&lt;p&gt;To limit both the width and height to some value (e.g. 1024):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --max-size 1024&#xA;scrcpy -m 1024  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other dimension is computed so that the Android device aspect ratio is preserved. That way, a device in 1920×1080 will be mirrored at 1024×576.&lt;/p&gt; &#xA;&lt;h4&gt;Change bit-rate&lt;/h4&gt; &#xA;&lt;p&gt;The default bit-rate is 8 Mbps. To change the video bitrate (e.g. to 2 Mbps):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --bit-rate 2M&#xA;scrcpy -b 2M  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Limit frame rate&lt;/h4&gt; &#xA;&lt;p&gt;The capture frame rate can be limited:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --max-fps 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is officially supported since Android 10, but may work on earlier versions.&lt;/p&gt; &#xA;&lt;p&gt;The actual capture framerate may be printed to the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy --print-fps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may also be enabled or disabled at any time with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Crop&lt;/h4&gt; &#xA;&lt;p&gt;The device screen may be cropped to mirror only part of the screen.&lt;/p&gt; &#xA;&lt;p&gt;This is useful, for example, to mirror only one eye of the Oculus Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --crop 1224:1440:0:0   # 1224x1440 at offset (0,0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;--max-size&lt;/code&gt; is also specified, resizing is applied after cropping.&lt;/p&gt; &#xA;&lt;h4&gt;Lock video orientation&lt;/h4&gt; &#xA;&lt;p&gt;To lock the orientation of the mirroring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --lock-video-orientation     # initial (current) orientation&#xA;scrcpy --lock-video-orientation=0   # natural orientation&#xA;scrcpy --lock-video-orientation=1   # 90° counterclockwise&#xA;scrcpy --lock-video-orientation=2   # 180°&#xA;scrcpy --lock-video-orientation=3   # 90° clockwise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This affects recording orientation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#rotation&#34;&gt;window may also be rotated&lt;/a&gt; independently.&lt;/p&gt; &#xA;&lt;h4&gt;Encoder&lt;/h4&gt; &#xA;&lt;p&gt;Some devices have more than one encoder, and some of them may cause issues or crash. It is possible to select a different encoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --encoder OMX.qcom.video.encoder.avc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list the available encoders, you can pass an invalid encoder name; the error will give the available encoders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --encoder _&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Capture&lt;/h3&gt; &#xA;&lt;h4&gt;Recording&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to record the screen while mirroring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --record file.mp4&#xA;scrcpy -r file.mkv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To disable mirroring while recording:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-display --record file.mp4&#xA;scrcpy -Nr file.mkv&#xA;# interrupt recording with Ctrl+C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&#34;Skipped frames&#34; are recorded, even if they are not displayed in real time (for performance reasons). Frames are &lt;em&gt;timestamped&lt;/em&gt; on the device, so &lt;a href=&#34;https://en.wikipedia.org/wiki/Packet_delay_variation&#34;&gt;packet delay variation&lt;/a&gt; does not impact the recorded file.&lt;/p&gt; &#xA;&lt;h4&gt;v4l2loopback&lt;/h4&gt; &#xA;&lt;p&gt;On Linux, it is possible to send the video stream to a v4l2 loopback device, so that the Android device can be opened like a webcam by any v4l2-capable tool.&lt;/p&gt; &#xA;&lt;p&gt;The module &lt;code&gt;v4l2loopback&lt;/code&gt; must be installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install v4l2loopback-dkms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a v4l2 device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo modprobe v4l2loopback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a new video device in &lt;code&gt;/dev/videoN&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer (more &lt;a href=&#34;https://github.com/umlaeute/v4l2loopback#options&#34;&gt;options&lt;/a&gt; are available to create several devices or devices with specific IDs).&lt;/p&gt; &#xA;&lt;p&gt;To list the enabled devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# requires v4l-utils package&#xA;v4l2-ctl --list-devices&#xA;&#xA;# simple but might be sufficient&#xA;ls /dev/video*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start &lt;code&gt;scrcpy&lt;/code&gt; using a v4l2 sink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --v4l2-sink=/dev/videoN&#xA;scrcpy --v4l2-sink=/dev/videoN --no-display  # disable mirroring window&#xA;scrcpy --v4l2-sink=/dev/videoN -N            # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(replace &lt;code&gt;N&lt;/code&gt; with the device ID, check with &lt;code&gt;ls /dev/video*&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Once enabled, you can open your video stream with a v4l2-capable tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ffplay -i /dev/videoN&#xA;vlc v4l2:///dev/videoN   # VLC might add some buffering delay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, you could capture the video within &lt;a href=&#34;https://obsproject.com/&#34;&gt;OBS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Buffering&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to add buffering. This increases latency, but reduces jitter (see &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/2464&#34;&gt;#2464&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The option is available for display buffering:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --display-buffer=50  # add 50 ms buffering for display&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and V4L2 sink:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --v4l2-buffer=500    # add 500 ms buffering for v4l2 sink&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connection&lt;/h3&gt; &#xA;&lt;h4&gt;TCP/IP (wireless)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Scrcpy&lt;/em&gt; uses &lt;code&gt;adb&lt;/code&gt; to communicate with the device, and &lt;code&gt;adb&lt;/code&gt; can &lt;a href=&#34;https://developer.android.com/studio/command-line/adb.html#wireless&#34;&gt;connect&lt;/a&gt; to a device over TCP/IP. The device must be connected on the same network as the computer.&lt;/p&gt; &#xA;&lt;h5&gt;Automatic&lt;/h5&gt; &#xA;&lt;p&gt;An option &lt;code&gt;--tcpip&lt;/code&gt; allows to configure the connection automatically. There are two variants.&lt;/p&gt; &#xA;&lt;p&gt;If the device (accessible at 192.168.1.1 in this example) already listens on a port (typically 5555) for incoming &lt;em&gt;adb&lt;/em&gt; connections, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --tcpip=192.168.1.1       # default port is 5555&#xA;scrcpy --tcpip=192.168.1.1:5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;em&gt;adb&lt;/em&gt; TCP/IP mode is disabled on the device (or if you don&#39;t know the IP address), connect the device over USB, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --tcpip    # without arguments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will automatically find the device IP address, enable TCP/IP mode, then connect to the device before starting.&lt;/p&gt; &#xA;&lt;h5&gt;Manual&lt;/h5&gt; &#xA;&lt;p&gt;Alternatively, it is possible to enable the TCP/IP connection manually using &lt;code&gt;adb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Plug the device into a USB port on your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect the device to the same Wi-Fi network as your computer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get your device IP address, in Settings → About phone → Status, or by executing this command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell ip route | awk &#39;{print $9}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable &lt;code&gt;adb&lt;/code&gt; over TCP/IP on your device: &lt;code&gt;adb tcpip 5555&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unplug your device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your device: &lt;code&gt;adb connect DEVICE_IP:5555&lt;/code&gt; &lt;em&gt;(replace &lt;code&gt;DEVICE_IP&lt;/code&gt; with the device IP address you found)&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;scrcpy&lt;/code&gt; as usual.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Since Android 11, a &lt;a href=&#34;https://developer.android.com/studio/command-line/adb#connect-to-a-device-over-wi-fi-android-11+&#34;&gt;Wireless debugging option&lt;/a&gt; allows to bypass having to physically connect your device directly to your computer.&lt;/p&gt; &#xA;&lt;p&gt;If the connection randomly drops, run your &lt;code&gt;scrcpy&lt;/code&gt; command to reconnect. If it says there are no devices/emulators found, try running &lt;code&gt;adb connect DEVICE_IP:5555&lt;/code&gt; again, and then &lt;code&gt;scrcpy&lt;/code&gt; as usual. If it still says there are none found, try running &lt;code&gt;adb disconnect&lt;/code&gt;, and then run those two commands again.&lt;/p&gt; &#xA;&lt;p&gt;It may be useful to decrease the bit-rate and the resolution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --bit-rate 2M --max-size 800&#xA;scrcpy -b2M -m800  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-devices&lt;/h4&gt; &#xA;&lt;p&gt;If several devices are listed in &lt;code&gt;adb devices&lt;/code&gt;, you can specify the &lt;em&gt;serial&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --serial 0123456789abcdef&#xA;scrcpy -s 0123456789abcdef  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The serial may also be provided via the environment variable &lt;code&gt;ANDROID_SERIAL&lt;/code&gt; (also used by &lt;code&gt;adb&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If the device is connected over TCP/IP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --serial 192.168.0.1:5555&#xA;scrcpy -s 192.168.0.1:5555  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If only one device is connected via either USB or TCP/IP, it is possible to select it automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Select the only device connected via USB&#xA;scrcpy -d             # like adb -d&#xA;scrcpy --select-usb   # long version&#xA;&#xA;# Select the only device connected via TCP/IP&#xA;scrcpy -e             # like adb -e&#xA;scrcpy --select-tcpip # long version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can start several instances of &lt;em&gt;scrcpy&lt;/em&gt; for several devices.&lt;/p&gt; &#xA;&lt;h4&gt;Autostart on device connection&lt;/h4&gt; &#xA;&lt;p&gt;You could use &lt;a href=&#34;https://github.com/rom1v/autoadb&#34;&gt;AutoAdb&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;autoadb scrcpy -s &#39;{}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tunnels&lt;/h4&gt; &#xA;&lt;p&gt;To connect to a remote device, it is possible to connect a local &lt;code&gt;adb&lt;/code&gt; client to a remote &lt;code&gt;adb&lt;/code&gt; server (provided they use the same version of the &lt;em&gt;adb&lt;/em&gt; protocol).&lt;/p&gt; &#xA;&lt;h5&gt;Remote ADB server&lt;/h5&gt; &#xA;&lt;p&gt;To connect to a remote &lt;em&gt;adb server&lt;/em&gt;, make the server listen on all interfaces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb kill-server&#xA;adb -a nodaemon server start&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: all communications between clients and the &lt;em&gt;adb server&lt;/em&gt; are unencrypted.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suppose that this server is accessible at 192.168.1.2. Then, from another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:192.168.1.2:5037&#xA;scrcpy --tunnel-host=192.168.1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;scrcpy&lt;/code&gt; uses the local port used for &lt;code&gt;adb forward&lt;/code&gt; tunnel establishment (typically &lt;code&gt;27183&lt;/code&gt;, see &lt;code&gt;--port&lt;/code&gt;). It is also possible to force a different tunnel port (it may be useful in more complex situations, when more redirections are involved):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy --tunnel-port=1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;SSH tunnel&lt;/h5&gt; &#xA;&lt;p&gt;To communicate with a remote &lt;em&gt;adb server&lt;/em&gt; securely, it is preferable to use an SSH tunnel.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure the &lt;em&gt;adb server&lt;/em&gt; is running on the remote computer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb start-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, establish an SSH tunnel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# local  5038 --&amp;gt; remote  5037&#xA;# local 27183 &amp;lt;-- remote 27183&#xA;ssh -CN -L5038:localhost:5037 -R27183:localhost:27183 your_remote_computer&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:localhost:5038&#xA;scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To avoid enabling remote port forwarding, you could force a forward connection instead (notice the &lt;code&gt;-L&lt;/code&gt; instead of &lt;code&gt;-R&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# local  5038 --&amp;gt; remote  5037&#xA;# local 27183 --&amp;gt; remote 27183&#xA;ssh -CN -L5038:localhost:5037 -L27183:localhost:27183 your_remote_computer&#xA;# keep this open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From another terminal, run &lt;code&gt;scrcpy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ADB_SERVER_SOCKET=tcp:localhost:5038&#xA;scrcpy --force-adb-forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like for wireless connections, it may be useful to reduce quality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scrcpy -b2M -m800 --max-fps 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Window configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Title&lt;/h4&gt; &#xA;&lt;p&gt;By default, the window title is the device model. It can be changed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-title &#39;My device&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Position and size&lt;/h4&gt; &#xA;&lt;p&gt;The initial window position and size may be specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-x 100 --window-y 100 --window-width 800 --window-height 600&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Borderless&lt;/h4&gt; &#xA;&lt;p&gt;To disable window decorations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --window-borderless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Always on top&lt;/h4&gt; &#xA;&lt;p&gt;To keep the &lt;em&gt;scrcpy&lt;/em&gt; window always on top:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --always-on-top&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fullscreen&lt;/h4&gt; &#xA;&lt;p&gt;The app may be started directly in fullscreen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --fullscreen&#xA;scrcpy -f  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fullscreen can then be toggled dynamically with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Rotation&lt;/h4&gt; &#xA;&lt;p&gt;The window may be rotated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --rotation 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: no rotation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: 90 degrees counterclockwise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: 180 degrees&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3&lt;/code&gt;: 90 degrees clockwise&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The rotation can also be changed dynamically with &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; &lt;em&gt;(left)&lt;/em&gt; and &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; &lt;em&gt;(right)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;em&gt;scrcpy&lt;/em&gt; manages 3 different rotations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; requests the device to switch between portrait and landscape (the current running app may refuse, if it does not support the requested orientation).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#lock-video-orientation&#34;&gt;&lt;code&gt;--lock-video-orientation&lt;/code&gt;&lt;/a&gt; changes the mirroring orientation (the orientation of the video sent from the device to the computer). This affects the recording.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--rotation&lt;/code&gt; (or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt;/&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt;) rotates only the window content. This affects only the display, not the recording.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other mirroring options&lt;/h3&gt; &#xA;&lt;h4&gt;Read-only&lt;/h4&gt; &#xA;&lt;p&gt;To disable controls (everything which can interact with the device: input keys, mouse events, drag&amp;amp;drop files):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-control&#xA;scrcpy -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Display&lt;/h4&gt; &#xA;&lt;p&gt;If several displays are available, it is possible to select the display to mirror:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --display 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The list of display ids can be retrieved by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell dumpsys display   # search &#34;mDisplayId=&#34; in the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The secondary display may only be controlled if the device runs at least Android 10 (otherwise it is mirrored as read-only).&lt;/p&gt; &#xA;&lt;h4&gt;Stay awake&lt;/h4&gt; &#xA;&lt;p&gt;To prevent the device from sleeping after a delay when the device is plugged in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --stay-awake&#xA;scrcpy -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The initial state is restored when &lt;em&gt;scrcpy&lt;/em&gt; is closed.&lt;/p&gt; &#xA;&lt;h4&gt;Turn screen off&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to turn the device screen off while mirroring on start with a command-line option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --turn-screen-off&#xA;scrcpy -S&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by pressing &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt; at any time.&lt;/p&gt; &#xA;&lt;p&gt;To turn it back on, press &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Android, the &lt;code&gt;POWER&lt;/code&gt; button always turns the screen on. For convenience, if &lt;code&gt;POWER&lt;/code&gt; is sent via &lt;em&gt;scrcpy&lt;/em&gt; (via right-click or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;), it will force to turn the screen off after a small delay (on a best effort basis). The physical &lt;code&gt;POWER&lt;/code&gt; button will still cause the screen to be turned on.&lt;/p&gt; &#xA;&lt;p&gt;It can also be useful to prevent the device from sleeping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --turn-screen-off --stay-awake&#xA;scrcpy -Sw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Power off on close&lt;/h4&gt; &#xA;&lt;p&gt;To turn the device screen off when closing &lt;em&gt;scrcpy&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --power-off-on-close&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Power on on start&lt;/h4&gt; &#xA;&lt;p&gt;By default, on start, the device is powered on.&lt;/p&gt; &#xA;&lt;p&gt;To prevent this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-power-on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Show touches&lt;/h4&gt; &#xA;&lt;p&gt;For presentations, it may be useful to show physical touches (on the physical device).&lt;/p&gt; &#xA;&lt;p&gt;Android provides this feature in &lt;em&gt;Developers options&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Scrcpy&lt;/em&gt; provides an option to enable this feature on start and restore the initial value on exit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --show-touches&#xA;scrcpy -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it only shows &lt;em&gt;physical&lt;/em&gt; touches (by a finger on the device).&lt;/p&gt; &#xA;&lt;h4&gt;Disable screensaver&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; does not prevent the screensaver from running on the computer.&lt;/p&gt; &#xA;&lt;p&gt;To disable it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --disable-screensaver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Input control&lt;/h3&gt; &#xA;&lt;h4&gt;Rotate device screen&lt;/h4&gt; &#xA;&lt;p&gt;Press &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt; to switch between portrait and landscape modes.&lt;/p&gt; &#xA;&lt;p&gt;Note that it rotates only if the application in foreground supports the requested orientation.&lt;/p&gt; &#xA;&lt;h4&gt;Copy-paste&lt;/h4&gt; &#xA;&lt;p&gt;Any time the Android clipboard changes, it is automatically synchronized to the computer clipboard.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;kbd&gt;Ctrl&lt;/kbd&gt; shortcut is forwarded to the device. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; typically copies&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; typically cuts&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; typically pastes (after computer-to-device clipboard synchronization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This typically works as you expect.&lt;/p&gt; &#xA;&lt;p&gt;The actual behavior depends on the active application though. For example, &lt;em&gt;Termux&lt;/em&gt; sends SIGINT on &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; instead, and &lt;em&gt;K-9 Mail&lt;/em&gt; composes a new message.&lt;/p&gt; &#xA;&lt;p&gt;To copy, cut and paste in such cases (but only supported on Android &amp;gt;= 7):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt; injects &lt;code&gt;COPY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; injects &lt;code&gt;CUT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; injects &lt;code&gt;PASTE&lt;/code&gt; (after computer-to-device clipboard synchronization)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; injects the computer clipboard text as a sequence of key events. This is useful when the component does not accept text pasting (for example in &lt;em&gt;Termux&lt;/em&gt;), but it can break non-ASCII content.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; Pasting the computer clipboard to the device (either via &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; or &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;) copies the content into the Android clipboard. As a consequence, any Android application could read its content. You should avoid pasting sensitive content (like passwords) that way.&lt;/p&gt; &#xA;&lt;p&gt;Some Android devices do not behave as expected when setting the device clipboard programmatically. An option &lt;code&gt;--legacy-paste&lt;/code&gt; is provided to change the behavior of &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; and &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt; so that they also inject the computer clipboard text as a sequence of key events (the same way as &lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To disable automatic clipboard synchronization, use &lt;code&gt;--no-clipboard-autosync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Pinch-to-zoom&lt;/h4&gt; &#xA;&lt;p&gt;To simulate &#34;pinch-to-zoom&#34;: &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;click-and-move&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More precisely, hold down &lt;kbd&gt;Ctrl&lt;/kbd&gt; while pressing the left-click button. Until the left-click button is released, all mouse movements scale and rotate the content (if supported by the app) relative to the center of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Technically, &lt;em&gt;scrcpy&lt;/em&gt; generates additional touch events from a &#34;virtual finger&#34; at a location inverted through the center of the screen.&lt;/p&gt; &#xA;&lt;h4&gt;Physical keyboard simulation (HID)&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; uses Android key or text injection: it works everywhere, but is limited to ASCII.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;scrcpy&lt;/code&gt; can simulate a physical USB keyboard on Android to provide a better input experience (using &lt;a href=&#34;https://source.android.com/devices/accessories/aoa2#hid-support&#34;&gt;USB HID over AOAv2&lt;/a&gt;): the virtual keyboard is disabled and it works for all characters and IME.&lt;/p&gt; &#xA;&lt;p&gt;However, it only works if the device is connected via USB.&lt;/p&gt; &#xA;&lt;p&gt;Note: On Windows, it may only work in &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#otg&#34;&gt;OTG mode&lt;/a&gt;, not while mirroring (it is not possible to open a USB device if it is already open by another process like the &lt;em&gt;adb daemon&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --hid-keyboard&#xA;scrcpy -K  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it fails for some reason (for example because the device is not connected via USB), it automatically fallbacks to the default mode (with a log in the console). This allows using the same command line options when connected over USB and TCP/IP.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, raw key events (scancodes) are sent to the device, independently of the host key mapping. Therefore, if your keyboard layout does not match, it must be configured on the Android device, in Settings → System → Languages and input → &lt;a href=&#34;https://github.com/Genymobile/scrcpy/pull/2632#issuecomment-923756915&#34;&gt;Physical keyboard&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This settings page can be started directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell am start -a android.settings.HARD_KEYBOARD_SETTINGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the option is only available when the HID keyboard is enabled (or when a physical keyboard is connected).&lt;/p&gt; &#xA;&lt;h4&gt;Physical mouse simulation (HID)&lt;/h4&gt; &#xA;&lt;p&gt;Similarly to the physical keyboard simulation, it is possible to simulate a physical mouse. Likewise, it only works if the device is connected by USB.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;em&gt;scrcpy&lt;/em&gt; uses Android mouse events injection with absolute coordinates. By simulating a physical mouse, a mouse pointer appears on the Android device, and relative mouse motion, clicks and scrolls are injected.&lt;/p&gt; &#xA;&lt;p&gt;To enable this mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --hid-mouse&#xA;scrcpy -M  # short version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;--forward-all-clicks&lt;/code&gt; to &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#right-click-and-middle-click&#34;&gt;forward all mouse buttons&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When this mode is enabled, the computer mouse is &#34;captured&#34; (the mouse pointer disappears from the computer and appears on the Android device instead).&lt;/p&gt; &#xA;&lt;p&gt;Special capture keys, either &lt;kbd&gt;Alt&lt;/kbd&gt; or &lt;kbd&gt;Super&lt;/kbd&gt;, toggle (disable or enable) the mouse capture. Use one of them to give the control of the mouse back to the computer.&lt;/p&gt; &#xA;&lt;h4&gt;OTG&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to run &lt;em&gt;scrcpy&lt;/em&gt; with only physical keyboard and mouse simulation (HID), as if the computer keyboard and mouse were plugged directly to the device via an OTG cable.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, &lt;code&gt;adb&lt;/code&gt; (USB debugging) is not necessary, and mirroring is disabled.&lt;/p&gt; &#xA;&lt;p&gt;To enable OTG mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --otg&#xA;# Pass the serial if several USB devices are available&#xA;scrcpy --otg -s 0123456789abcdef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to enable only HID keyboard or HID mouse:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --otg --hid-keyboard              # keyboard only&#xA;scrcpy --otg --hid-mouse                 # mouse only&#xA;scrcpy --otg --hid-keyboard --hid-mouse  # keyboard and mouse&#xA;# for convenience, enable both by default&#xA;scrcpy --otg                             # keyboard and mouse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like &lt;code&gt;--hid-keyboard&lt;/code&gt; and &lt;code&gt;--hid-mouse&lt;/code&gt;, it only works if the device is connected by USB.&lt;/p&gt; &#xA;&lt;h4&gt;Text injection preference&lt;/h4&gt; &#xA;&lt;p&gt;Two kinds of &lt;a href=&#34;https://blog.rom1v.com/2018/03/introducing-scrcpy/#handle-text-input&#34;&gt;events&lt;/a&gt; are generated when typing text:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;key events&lt;/em&gt;, signaling that a key is pressed or released;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;text events&lt;/em&gt;, signaling that a text has been entered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, letters are injected using key events, so that the keyboard behaves as expected in games (typically for WASD keys).&lt;/p&gt; &#xA;&lt;p&gt;But this may &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/650#issuecomment-512945343&#34;&gt;cause issues&lt;/a&gt;. If you encounter such a problem, you can avoid it by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --prefer-text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(but this will break keyboard behavior in games)&lt;/p&gt; &#xA;&lt;p&gt;On the contrary, you could force to always inject raw key events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --raw-key-events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These options have no effect on HID keyboard (all key events are sent as scancodes in this mode).&lt;/p&gt; &#xA;&lt;h4&gt;Key repeat&lt;/h4&gt; &#xA;&lt;p&gt;By default, holding a key down generates repeated key events. This can cause performance problems in some games, where these events are useless anyway.&lt;/p&gt; &#xA;&lt;p&gt;To avoid forwarding repeated key events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --no-key-repeat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This option has no effect on HID keyboard (key repeat is handled by Android directly in this mode).&lt;/p&gt; &#xA;&lt;h4&gt;Right-click and middle-click&lt;/h4&gt; &#xA;&lt;p&gt;By default, right-click triggers BACK (or POWER on) and middle-click triggers HOME. To disable these shortcuts and forward the clicks to the device instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --forward-all-clicks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File drop&lt;/h3&gt; &#xA;&lt;h4&gt;Install APK&lt;/h4&gt; &#xA;&lt;p&gt;To install an APK, drag &amp;amp; drop an APK file (ending with &lt;code&gt;.apk&lt;/code&gt;) to the &lt;em&gt;scrcpy&lt;/em&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;There is no visual feedback, a log is printed to the console.&lt;/p&gt; &#xA;&lt;h4&gt;Push file to device&lt;/h4&gt; &#xA;&lt;p&gt;To push a file to &lt;code&gt;/sdcard/Download/&lt;/code&gt; on the device, drag &amp;amp; drop a (non-APK) file to the &lt;em&gt;scrcpy&lt;/em&gt; window.&lt;/p&gt; &#xA;&lt;p&gt;There is no visual feedback, a log is printed to the console.&lt;/p&gt; &#xA;&lt;p&gt;The target directory can be changed on start:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrcpy --push-target=/sdcard/Movies/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Audio forwarding&lt;/h3&gt; &#xA;&lt;p&gt;Audio is not forwarded by &lt;em&gt;scrcpy&lt;/em&gt;. Use &lt;a href=&#34;https://github.com/rom1v/sndcpy&#34;&gt;sndcpy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues/14&#34;&gt;issue #14&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shortcuts&lt;/h2&gt; &#xA;&lt;p&gt;In the following list, &lt;kbd&gt;MOD&lt;/kbd&gt; is the shortcut modifier. By default, it&#39;s (left) &lt;kbd&gt;Alt&lt;/kbd&gt; or (left) &lt;kbd&gt;Super&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be changed using &lt;code&gt;--shortcut-mod&lt;/code&gt;. Possible keys are &lt;code&gt;lctrl&lt;/code&gt;, &lt;code&gt;rctrl&lt;/code&gt;, &lt;code&gt;lalt&lt;/code&gt;, &lt;code&gt;ralt&lt;/code&gt;, &lt;code&gt;lsuper&lt;/code&gt; and &lt;code&gt;rsuper&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# use RCtrl for shortcuts&#xA;scrcpy --shortcut-mod=rctrl&#xA;&#xA;# use either LCtrl+LAlt or LSuper for shortcuts&#xA;scrcpy --shortcut-mod=lctrl+lalt,lsuper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;kbd&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Super_key_(keyboard_button)&#34;&gt;Super&lt;/a&gt;&lt;/kbd&gt; is typically the &lt;kbd&gt;Windows&lt;/kbd&gt; or &lt;kbd&gt;Cmd&lt;/kbd&gt; key.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Shortcut&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Switch fullscreen mode&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate display left&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;←&lt;/kbd&gt; &lt;em&gt;(left)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate display right&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;→&lt;/kbd&gt; &lt;em&gt;(right)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resize window to 1:1 (pixel-perfect)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;g&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resize window to remove black borders&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;w&lt;/kbd&gt; | &lt;em&gt;Double-left-click¹&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;HOME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;h&lt;/kbd&gt; | &lt;em&gt;Middle-click&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;BACK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;b&lt;/kbd&gt; | &lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;APP_SWITCH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;s&lt;/kbd&gt; | &lt;em&gt;4th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;MENU&lt;/code&gt; (unlock screen)⁴&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;m&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;VOLUME_UP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;↑&lt;/kbd&gt; &lt;em&gt;(up)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;VOLUME_DOWN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;↓&lt;/kbd&gt; &lt;em&gt;(down)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Click on &lt;code&gt;POWER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Power on&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;em&gt;Right-click²&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turn device screen off (keep mirroring)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turn device screen on&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;o&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rotate device screen&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expand notification panel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; | &lt;em&gt;5th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Expand settings panel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt; | &lt;em&gt;Double-5th-click³&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Collapse panels&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;n&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Copy to clipboard⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cut to clipboard⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Synchronize clipboards and paste⁵&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inject computer clipboard text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enable/disable FPS counter (on stdout)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;MOD&lt;/kbd&gt;+&lt;kbd&gt;i&lt;/kbd&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pinch-to-zoom&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;click-and-move&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drag &amp;amp; drop APK file&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Install APK from computer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Drag &amp;amp; drop non-APK file&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/#push-file-to-device&#34;&gt;Push file to device&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;¹Double-click on black borders to remove them.&lt;/em&gt;&lt;br&gt; &lt;em&gt;²Right-click turns the screen on if it was off, presses BACK otherwise.&lt;/em&gt;&lt;br&gt; &lt;em&gt;³4th and 5th mouse buttons, if your mouse has them.&lt;/em&gt;&lt;br&gt; &lt;em&gt;⁴For react-native apps in development, &lt;code&gt;MENU&lt;/code&gt; triggers development menu.&lt;/em&gt;&lt;br&gt; &lt;em&gt;⁵Only on Android &amp;gt;= 7.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shortcuts with repeated keys are executed by releasing and pressing the key a second time. For example, to execute &#34;Expand settings panel&#34;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Press and keep pressing &lt;kbd&gt;MOD&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then double-press &lt;kbd&gt;n&lt;/kbd&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Finally, release &lt;kbd&gt;MOD&lt;/kbd&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;em&gt;key&lt;/em&gt; shortcuts are forwarded to the device, so they are handled by the active application.&lt;/p&gt; &#xA;&lt;h2&gt;Custom paths&lt;/h2&gt; &#xA;&lt;p&gt;To use a specific &lt;code&gt;adb&lt;/code&gt; binary, configure its path in the environment variable &lt;code&gt;ADB&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ADB=/path/to/adb scrcpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To override the path of the &lt;code&gt;scrcpy-server&lt;/code&gt; file, configure its path in &lt;code&gt;SCRCPY_SERVER_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To override the icon, configure its path in &lt;code&gt;SCRCPY_ICON_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why the name &lt;em&gt;scrcpy&lt;/em&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;A colleague challenged me to find a name as unpronounceable as &lt;a href=&#34;https://github.com/Genymobile/gnirehtet&#34;&gt;gnirehtet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://man7.org/linux/man-pages/man3/strcpy.3.html&#34;&gt;&lt;code&gt;strcpy&lt;/code&gt;&lt;/a&gt; copies a &lt;strong&gt;str&lt;/strong&gt;ing; &lt;code&gt;scrcpy&lt;/code&gt; copies a &lt;strong&gt;scr&lt;/strong&gt;een.&lt;/p&gt; &#xA;&lt;h2&gt;How to build?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/BUILD.md&#34;&gt;BUILD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Common issues&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/DEVELOP.md&#34;&gt;developers page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2018 Genymobile&#xA;Copyright (C) 2018-2022 Romain Vimont&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.rom1v.com/2018/03/introducing-scrcpy/&#34;&gt;Introducing scrcpy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.genymotion.com/blog/open-source-project-scrcpy-now-works-wirelessly/&#34;&gt;Scrcpy now works wirelessly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter a bug, please read the &lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; first, then open an &lt;a href=&#34;https://github.com/Genymobile/scrcpy/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For general questions or discussions, you can also use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reddit: &lt;a href=&#34;https://www.reddit.com/r/scrcpy&#34;&gt;&lt;code&gt;r/scrcpy&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/scrcpy_app&#34;&gt;&lt;code&gt;@scrcpy_app&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This README is available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.de.md&#34;&gt;Deutsch (German, &lt;code&gt;de&lt;/code&gt;) - v1.22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.id.md&#34;&gt;Indonesian (Indonesia, &lt;code&gt;id&lt;/code&gt;) - v1.16&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.it.md&#34;&gt;Italiano (Italiano, &lt;code&gt;it&lt;/code&gt;) - v1.23&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.jp.md&#34;&gt;日本語 (Japanese, &lt;code&gt;jp&lt;/code&gt;) - v1.19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.ko.md&#34;&gt;한국어 (Korean, &lt;code&gt;ko&lt;/code&gt;) - v1.11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.pt-br.md&#34;&gt;Português Brasileiro (Brazilian Portuguese, &lt;code&gt;pt-BR&lt;/code&gt;) - v1.19&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.sp.md&#34;&gt;Español (Spanish, &lt;code&gt;sp&lt;/code&gt;) - v1.21&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.zh-Hans.md&#34;&gt;简体中文 (Simplified Chinese, &lt;code&gt;zh-Hans&lt;/code&gt;) - v1.22&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.zh-Hant.md&#34;&gt;繁體中文 (Traditional Chinese, &lt;code&gt;zh-Hant&lt;/code&gt;) - v1.15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Genymobile/scrcpy/master/README.tr.md&#34;&gt;Turkish (Turkish, &lt;code&gt;tr&lt;/code&gt;) - v1.18&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only this README file is guaranteed to be up-to-date.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/AliOS-Things</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/alibaba/AliOS-Things</id>
    <link href="https://github.com/alibaba/AliOS-Things" rel="alternate"></link>
    <summary type="html">&lt;p&gt;面向IoT领域的、高可伸缩的物联网操作系统，可去官网了解更多信息https://www.aliyun.com/product/aliosthings&lt;/p&gt;&lt;hr&gt;&lt;p&gt;@mainpage AliOS Things 概述&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gitee.com/alios-things/documentation/edit/master/manual/mainpage.md&#34;&gt;更正文档&lt;/a&gt;&lt;/strong&gt;      &lt;strong&gt;&lt;a href=&#34;https://github.com/alibaba/AliOS-Things/raw/master/CONTRIBUTING.md&#34;&gt;贡献说明&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.alicdn.com/tfs/TB1e1U7vyAnBKNjSZFvXXaTKXXa-973-200.png&#34; height=&#34;60&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/aliosthings/Lobby?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/aliosthings/Lobby.svg?style=flat-square&#34; alt=&#34;Join the chat at https://gitter.im/aliosthings/Lobby&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AliOS Things&lt;/strong&gt; 发布于&lt;a href=&#34;https://yunqi.aliyun.com&#34;&gt;2017年杭州云栖大会&lt;/a&gt;， 是 AliOS 家族旗下的、面向IoT领域的、高可伸缩的物联网操作系统，于2017年10月20号宣布在&lt;a href=&#34;https://github.com/alibaba/AliOS-Things&#34;&gt;github&lt;/a&gt;上开源，当前最新的版本是 &lt;strong&gt;AliOS Things 3.3&lt;/strong&gt; 。&lt;/p&gt; &#xA;&lt;h1&gt;架构总览&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;AliOS Things&lt;/strong&gt; 支持多种CPU架构，包括：ARM，C-Sky，MIPS，RISCV等。&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.alicdn.com/imgextra/i3/O1CN01PCABfS1bFjYu67i4Y_!!6000000003436-2-tps-2882-1646.png&#34; style=&#34;max-width:800px;&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;AliOS Things&lt;/strong&gt; 适配了分层架构和组件架构。包括以下部分：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BSP: 板级支持包&lt;/li&gt; &#xA; &lt;li&gt;HAL: 硬件适配层，包括WiFi，蓝牙，I2C，SPI，UART，Flash 等&lt;/li&gt; &#xA; &lt;li&gt;Kernel: 包括Rhino RTOS 内核，VFS，KV Storage，CLI，C++ 等&lt;/li&gt; &#xA; &lt;li&gt;Network: 包括LwIP 轻量级TCP/IP协议栈，BLE 低功耗蓝牙协议栈，LoRaWAN 协议栈等&lt;/li&gt; &#xA; &lt;li&gt;Security: 包括TLS(mbedTLS and cutomized iTLS)，ID2，SST(Trusted Storage)，Crypto，TEE(Trusted Execution Environment) 等&lt;/li&gt; &#xA; &lt;li&gt;AOS API: AliOS Things 提供给应用软件和组件的API&lt;/li&gt; &#xA; &lt;li&gt;VFS驱动框架：设备驱动提供给组件和应用的服务接口&lt;/li&gt; &#xA; &lt;li&gt;Component: 阿里巴巴增值和常用的物联网组件，包括LinkSDK，OTA(安全差分升级)，ulog(日志服务)，uData(传感器框架)，uDisplay(图形接口)，WiFi配网 等&lt;/li&gt; &#xA; &lt;li&gt;Application: 丰富的示例代码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;所有的模块都作为组件的形式存在，通过yaml进行配置，应用程序可以很方便的选择需要的组件。&lt;/p&gt; &#xA;&lt;h1&gt;AliOS Things 3.3新功能介绍&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;统一的VFS接入方式，更标准的应用开发模式&lt;/li&gt; &#xA; &lt;li&gt;更小的系统，yaml构建方式更直观&lt;/li&gt; &#xA; &lt;li&gt;更全面的JavaScript和MicroPython轻应用开发框架的支持&lt;/li&gt; &#xA; &lt;li&gt;全面完善的组件、解决方案和系统文档。格式更规范与开发者友好&lt;/li&gt; &#xA; &lt;li&gt;升级了LinkSDK，新增设备引导服务、设备诊断、日志上报功能&lt;/li&gt; &#xA; &lt;li&gt;新增蓝牙配网、Wi-Fi Camera、OLED等组件，解决方案能直接调用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;AliOS Things 3.3支持硬件&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;AliOS Things 3.3&lt;/strong&gt; 版本支持官方已适配如下硬件&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HaaS100&lt;/li&gt; &#xA; &lt;li&gt;HaaS EDU K1&lt;/li&gt; &#xA; &lt;li&gt;HaaS200&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;文档&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;快速上手&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;参考：&lt;a href=&#34;https://g.alicdn.com/alios-things-3.3/doc/haas100_quick_start.html&#34;&gt;HaaS100快速开始&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;参考：&lt;a href=&#34;https://g.alicdn.com/alios-things-3.3/doc/haas_edu_k1_quick_start.html&#34;&gt;HaaS EDU K1快速开始&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;参考：&lt;a href=&#34;https://g.alicdn.com/alios-things-3.3/doc/haas200_quick_start.html&#34;&gt;HaaS200快速开始&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;文档中心&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请到HaaS官方网站 &lt;a href=&#34;https://haas.iot.aliyun.com/&#34;&gt;文档中心&lt;/a&gt;查看。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;贡献代码&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;参考：&lt;a href=&#34;https://g.alicdn.com/alios-things-3.3/doc/contribute.html&#34;&gt;开发者贡献&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;物联网平台&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AliOS Things 能帮助你更加快速地接入&lt;a href=&#34;https://iot.console.aliyun.com/quick_start&#34;&gt;阿里云物联网平台&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;社区&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://img.alicdn.com/imgextra/i3/O1CN017fYxQq1qXL0gLsnGg_!!6000000005505-2-tps-1658-682.png&#34;&gt;技术交流群(钉钉)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/HaaSTech&#34;&gt;HaaS技术社区&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;AliOS Things 开源源码遵循 &lt;a href=&#34;https://raw.githubusercontent.com/alibaba/AliOS-Things/master/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt; 开源协议。&lt;/p&gt; &#xA;&lt;h1&gt;Release Note&lt;/h1&gt; &#xA;&lt;h2&gt;2022-02-22&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;py_engine： 新增ESP32模组芯片支持，删除冗余的micropython-lib文件&lt;/li&gt; &#xA; &lt;li&gt;oasl_aos： 修改不匹配的返回类型&lt;/li&gt; &#xA; &lt;li&gt;posix： 增加ESP_IDF_VERSION以区分不同的IDF版本&lt;/li&gt; &#xA; &lt;li&gt;ota： 用mbedtls_md5_starts_ret替换mbedtls_md5_starts&lt;/li&gt; &#xA; &lt;li&gt;amp_adapter: 支持IDF4.4&lt;/li&gt; &#xA; &lt;li&gt;nodemcu_c3: 新增ESP32-C3开发板支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2022-01-19&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;py_engine: 修改python引擎程编译方式为CMake，&lt;/li&gt; &#xA; &lt;li&gt;HaaS200 支持HaaS-Python 2.0标准&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-12-20&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;haas1000： 解决手动重启设备无法进行烧录的问题&lt;/li&gt; &#xA; &lt;li&gt;rtl872xd： 解决手动重启设备无法进行烧录的问题&lt;/li&gt; &#xA; &lt;li&gt;documentation： 添加驱动开发说明&lt;/li&gt; &#xA; &lt;li&gt;haas_lib_bundles_python： HaaS2.0 API说明文档、趣味案例和硬件积木驱动&lt;/li&gt; &#xA; &lt;li&gt;riscv64位架构支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-10-25&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;posix： 清理warning, 支持scandir api&lt;/li&gt; &#xA; &lt;li&gt;haas1000 ,haas200, pwm组件支持 pwm的南向接口&lt;/li&gt; &#xA; &lt;li&gt;修复timer oneshot模式下reload失效问题&lt;/li&gt; &#xA; &lt;li&gt;解决在windows下编译eduk1时提示命令过长，无法生成lds文件引起的编译失败问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-10-12&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript轻应用：IoT-Device修复publish内存泄漏问题、优化物模型初始化流程；IoT-Gateway增加NTP时间获取功能、完善拓扑管理、子设备注册和登陆登出等API；新增以太网配网功能，支持静态IP配网；新增UDP功能；更新JS轻应用版本信息获取接口；修复setTimeout、SPI的write问题等&lt;/li&gt; &#xA; &lt;li&gt;python轻应用：micropython引擎升级到V1.17；API对齐HaaS轻应用接口标准；新增BLE支持；GPIO适配层重构；封装Python视觉AI接口&lt;/li&gt; &#xA; &lt;li&gt;components：新增linkkit、ble_mesh、genie_service组件用于天猫精灵IoT生态的接入；&lt;/li&gt; &#xA; &lt;li&gt;ucloud_ai：增加车牌识别和人体检测接口&lt;/li&gt; &#xA; &lt;li&gt;solutions：根据系统性能决定-j线程数量提升编译速度;新增linkkit_genie_demo案例：基于HaaS200通过Wi-Fi接入天猫精灵IoT生态的案例；新增genie_mesh_demo案例：基于HaaS200实现可被天猫精灵连接的ble mesh&lt;/li&gt; &#xA; &lt;li&gt;posix：头文件标准化&lt;/li&gt; &#xA; &lt;li&gt;libc_stub：支持libc多线程&lt;/li&gt; &#xA; &lt;li&gt;rhino：支持libc多线程&lt;/li&gt; &#xA; &lt;li&gt;http：修复因为http buffer大小更新导致ota栈溢出问题&lt;/li&gt; &#xA; &lt;li&gt;ota：修复ota断点续传失效问题&lt;/li&gt; &#xA; &lt;li&gt;driver：新增PWM AOS接口；修复UART发送数据流中间会有过长的间隔的问题。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;特别感谢为本期迭代提出宝贵意见和建议的开发者：陈文源、莫学良等&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2021-08-26&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript轻应用：修改http对接问题、支持tcp及mqtt组件、新增智慧农业样板间示例代码等&lt;/li&gt; &#xA; &lt;li&gt;python轻应用：增加智能对话机器人python接口、增加token获取接口&lt;/li&gt; &#xA; &lt;li&gt;ucloud_ai：增加智能对话机器人、增加token获取接口&lt;/li&gt; &#xA; &lt;li&gt;ai_agent：增加“HaaS HaaS”语言唤醒功能、增加TFLite-Micro推理引擎&lt;/li&gt; &#xA; &lt;li&gt;solution：添加TFLite-Micro离线快捷词唤醒案例&lt;/li&gt; &#xA; &lt;li&gt;netmgr：支持根据指定channel进行扫描、修复wifi.conf内容为空导致异常问题等&lt;/li&gt; &#xA; &lt;li&gt;HaaS100：更新驱动库、优化二级boot、产测功能可配置等&lt;/li&gt; &#xA; &lt;li&gt;HaaS200：更新驱动库、优化二级boot等&lt;/li&gt; &#xA; &lt;li&gt;文档：新增haas-studio使用说明和代码风格规范&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;特别感谢为本期迭代贡献代码的开发者：WilliamArthur、忙碌的死龙等&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2021-07-15&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript轻应用：支持oss上传及下载功能、支持promise功能、添加ulog示例、修复问题若干&lt;/li&gt; &#xA; &lt;li&gt;python轻应用：支持ota功能、linksdk动态注册、支持在线文件传输、framebuf显示功能、kv功能&lt;/li&gt; &#xA; &lt;li&gt;ota：统一haas100和haas200的ota升级相关接口&lt;/li&gt; &#xA; &lt;li&gt;HaaS100：支持MTD驱动子系统、修复SPI初始化失败等问题&lt;/li&gt; &#xA; &lt;li&gt;vfs：修复多任务并发访问设备节点的互斥问题&lt;/li&gt; &#xA; &lt;li&gt;netmgr：支持AP功能、完善连接失败的重试机制、修复上电无法自动重连问题等&lt;/li&gt; &#xA; &lt;li&gt;cli：修复命令回显没有发送至云端问题&lt;/li&gt; &#xA; &lt;li&gt;文档：优化贡献代码说明、添加ping/ifconfig/tftp/iperf等命令说明&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;特别感谢为本期迭代提出宝贵意见和建议的开发者：空空、刘洪峰、刘超、莫学良、李大棚等&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2021-06-10&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JavaScript轻应用框架v3.0发布&lt;/li&gt; &#xA; &lt;li&gt;新增案例：JavaScript和Python双引擎运行环境，一个镜像同时包含两套轻应用框架&lt;/li&gt; &#xA; &lt;li&gt;HaaS200支持PSRAM，4MB内存全解锁&lt;/li&gt; &#xA; &lt;li&gt;HaaS200 OTA支持压缩升级，增加更多空间给系统分区&lt;/li&gt; &#xA; &lt;li&gt;优化HaaS200烧录成功率&lt;/li&gt; &#xA; &lt;li&gt;增加HaaS200 windows编译支持&lt;/li&gt; &#xA; &lt;li&gt;优化文档，优化各案例名称&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-06-03&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;发布蓝牙配网小程序&lt;/li&gt; &#xA; &lt;li&gt;HaaS200 OTA功能发布&lt;/li&gt; &#xA; &lt;li&gt;HaaS200 支持Python/Javascript轻应用&lt;/li&gt; &#xA; &lt;li&gt;HaaS200 加强debug能力&lt;/li&gt; &#xA; &lt;li&gt;HaaS200 驱动子系统发布（UART/GPIO/MTD/Watchdog/I2C）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-05-25&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;增加HaaS200支持&lt;/li&gt; &#xA; &lt;li&gt;CSI驱动系统发布，支持I2C，flash，Uart，GPIO，watchdog&lt;/li&gt; &#xA; &lt;li&gt;增加继电器外设案例&lt;/li&gt; &#xA; &lt;li&gt;优化蓝牙协议栈&lt;/li&gt; &#xA; &lt;li&gt;优化EDU K1烧录&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-05-08&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实现蓝牙配网的功能&lt;/li&gt; &#xA; &lt;li&gt;优化文档&lt;/li&gt; &#xA; &lt;li&gt;解决linksdk_gateway_demo案例无法配网问题&lt;/li&gt; &#xA; &lt;li&gt;mbedtls: 解决在package.yaml配置不生效问题&lt;/li&gt; &#xA; &lt;li&gt;audio_demo: 解决打包文件找不到问题，感激空空发现这个问题&lt;/li&gt; &#xA; &lt;li&gt;rfid_demo: 解决uart2打开失败问题，感激蒋才林发现这个问题&lt;/li&gt; &#xA; &lt;li&gt;audio_demo: 优化步骤，自动下载三方代码&lt;/li&gt; &#xA; &lt;li&gt;新增语音播放、千里传音、屏幕显示、蓝牙配网、IDE一键热更新等众多功能&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-04-28&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用支付宝小程序对HaaS100进行配网、配置三元组以及操控HaaS LED灯的案例 客户紧急需要支付宝小程序案例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2021-04-21&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;统一的VFS接入方式，更标准的应用开发模式&lt;/li&gt; &#xA; &lt;li&gt;更小的系统，yaml构建方式更直观&lt;/li&gt; &#xA; &lt;li&gt;更全面的JavaScript和MicroPython轻应用开发框架的支持&lt;/li&gt; &#xA; &lt;li&gt;全面完善的组件、解决方案和系统文档。格式更规范与开发者友好&lt;/li&gt; &#xA; &lt;li&gt;升级了LinkSDK，新增设备引导服务、设备诊断、日志上报功能&lt;/li&gt; &#xA; &lt;li&gt;新增蓝牙配网、Wi-Fi Camera、OLED等组件，解决方案能直接调用&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fairyglade/ly</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/fairyglade/ly</id>
    <link href="https://github.com/fairyglade/ly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;display manager with console UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ly - a TUI display manager&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5473047/88958888-65efbf80-d2a1-11ea-8ae5-3f263bce9cce.png&#34; alt=&#34;Ly screenshot&#34; title=&#34;Ly screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ly is a lightweight TUI (ncurses-like) display manager for Linux and BSD.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a C99 compiler (tested with tcc and gcc)&lt;/li&gt; &#xA; &lt;li&gt;a C standard library&lt;/li&gt; &#xA; &lt;li&gt;GNU make&lt;/li&gt; &#xA; &lt;li&gt;pam&lt;/li&gt; &#xA; &lt;li&gt;xcb&lt;/li&gt; &#xA; &lt;li&gt;xorg&lt;/li&gt; &#xA; &lt;li&gt;xorg-xauth&lt;/li&gt; &#xA; &lt;li&gt;mcookie&lt;/li&gt; &#xA; &lt;li&gt;tput&lt;/li&gt; &#xA; &lt;li&gt;shutdown&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Debian-based distros running &lt;code&gt;apt install build-essential libpam0g-dev libxcb-xkb-dev&lt;/code&gt; as root should install all the dependencies for you.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;The following desktop environments were tested with success&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bspwm&lt;/li&gt; &#xA; &lt;li&gt;budgie&lt;/li&gt; &#xA; &lt;li&gt;cinnamon&lt;/li&gt; &#xA; &lt;li&gt;deepin&lt;/li&gt; &#xA; &lt;li&gt;dwm&lt;/li&gt; &#xA; &lt;li&gt;enlightenment&lt;/li&gt; &#xA; &lt;li&gt;gnome&lt;/li&gt; &#xA; &lt;li&gt;i3&lt;/li&gt; &#xA; &lt;li&gt;kde&lt;/li&gt; &#xA; &lt;li&gt;lxde&lt;/li&gt; &#xA; &lt;li&gt;lxqt&lt;/li&gt; &#xA; &lt;li&gt;mate&lt;/li&gt; &#xA; &lt;li&gt;qtile&lt;/li&gt; &#xA; &lt;li&gt;sway&lt;/li&gt; &#xA; &lt;li&gt;xfce&lt;/li&gt; &#xA; &lt;li&gt;pantheon&lt;/li&gt; &#xA; &lt;li&gt;maxx&lt;/li&gt; &#xA; &lt;li&gt;windowmaker&lt;/li&gt; &#xA; &lt;li&gt;spectrwm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ly should work with any X desktop environment, and provides basic wayland support (sway works very well, for example).&lt;/p&gt; &#xA;&lt;h2&gt;systemd?&lt;/h2&gt; &#xA;&lt;p&gt;Unlike what you may have heard, Ly does not require &lt;code&gt;systemd&lt;/code&gt;, and was even specifically designed not to depend on &lt;code&gt;logind&lt;/code&gt;. You should be able to make it work easily with a better init, changing the source code won&#39;t be necessary :)&lt;/p&gt; &#xA;&lt;h2&gt;Cloning and Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/nullgemm/ly.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test in the configured tty (tty2 by default) or a terminal emulator (but desktop environments won&#39;t start)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Ly and the provided systemd service file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable the service&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo systemctl enable ly.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to switch between ttys after Ly&#39;s start you also have to disable getty on Ly&#39;s tty to prevent &#34;login&#34; from spawning on top of it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo systemctl disable getty@tty2.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can find all the configuration in &lt;code&gt;/etc/ly/config.ini&lt;/code&gt;. The file is commented, and includes the default values.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;p&gt;Use the up and down arrow keys to change the current field, and the left and right arrow keys to change the target desktop environment while on the desktop field (above the login field).&lt;/p&gt; &#xA;&lt;h2&gt;.xinitrc&lt;/h2&gt; &#xA;&lt;p&gt;If your .xinitrc doesn&#39;t work make sure it is executable and includes a shebang. This file is supposed to be a shell script! Quoting from xinit&#39;s man page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;If no specific client program is given on the command line, xinit will look for&#xA;a file in the user&#39;s home directory called .xinitrc to run as a shell script to&#xA;start up client programs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On ArchLinux, the example .xinitrc (/etc/X11/xinit/xinitrc) starts like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;The numlock and capslock state is printed in the top-right corner. Use the F1 and F2 keys to respectively shutdown and reboot. Take a look at your .xsession if X doesn&#39;t start, as it can interfere (this file is launched with X to configure the display properly).&lt;/p&gt; &#xA;&lt;h2&gt;PSX DOOM fire animation&lt;/h2&gt; &#xA;&lt;p&gt;To enable the famous PSX DOOM fire described by &lt;a href=&#34;http://fabiensanglard.net/doom_fire_psx/index.html&#34;&gt;Fabien Sanglard&lt;/a&gt;, just uncomment &lt;code&gt;animate = true&lt;/code&gt; in &lt;code&gt;/etc/ly/config.ini&lt;/code&gt;. You may also disable the main box borders with &lt;code&gt;hide_borders = true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Information&lt;/h2&gt; &#xA;&lt;p&gt;The name &#34;Ly&#34; is a tribute to the fairy from the game Rayman. Ly was tested by oxodao, who is some seriously awesome dude.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>espressif/arduino-esp32</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/espressif/arduino-esp32</id>
    <link href="https://github.com/espressif/arduino-esp32" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino core for the ESP32&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino core for the ESP32, ESP32-S2, ESP32-S3 and ESP32-C3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/espressif/arduino-esp32/workflows/ESP32%20Arduino%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.com/projects/espressif-arduino-esp32/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Need help or have a question? Join the chat at &lt;a href=&#34;https://gitter.im/espressif/arduino-esp32?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/espressif/arduino-esp32.svg?sanitize=true&#34; alt=&#34;https://gitter.im/espressif/arduino-esp32&#34;&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions&#34;&gt;open a new Discussion&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#development-planning&#34;&gt;Development Planning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#supported-chips&#34;&gt;Supported Chips&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#decoding-exceptions&#34;&gt;Decoding exceptions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#issuebug-report-template&#34;&gt;Issue/Bug report template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/espressif/arduino-esp32/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Status&lt;/h3&gt; &#xA;&lt;p&gt;Latest Stable Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Latest Development Release &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/espressif/arduino-esp32/all.svg?style=plastic&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date-pre/espressif/arduino-esp32.svg?style=plastic&#34; alt=&#34;Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/espressif/arduino-esp32/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads-pre/espressif/arduino-esp32/latest/total.svg?style=plastic&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development Planning&lt;/h3&gt; &#xA;&lt;p&gt;Our Development is fully tracked on this public &lt;strong&gt;&lt;a href=&#34;https://github.com/orgs/espressif/projects/3&#34;&gt;Roadmap 🎉&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For even more information you can take a look at &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/sprints-meeting-notes&#34;&gt;Sprint Meeting notes&lt;/a&gt; or join &lt;a href=&#34;https://github.com/espressif/arduino-esp32/discussions/categories/monthly-community-meetings&#34;&gt;Monthly Community Meetings 🔔&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/&#34;&gt;Arduino-ESP32 Online Documentation&lt;/a&gt; to get all information about this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html&#34;&gt;Installing (Windows, Linux and macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/libraries.html&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/esp-idf_component.html&#34;&gt;ESP-IDF as Component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Chips&lt;/h3&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#supported-soc-s&#34;&gt;supported chips&lt;/a&gt; documentation to see the list of current supported ESP32 SoCs.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding exceptions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/me-no-dev/EspExceptionDecoder&#34;&gt;EspExceptionDecoder&lt;/a&gt; to get meaningful call trace.&lt;/p&gt; &#xA;&lt;h3&gt;Issue/Bug report template&lt;/h3&gt; &#xA;&lt;p&gt;Before reporting an issue, make sure you&#39;ve searched for similar one that was already created. Also make sure to go through all the issues labelled as &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues?q=is%3Aissue+label%3A%22Type%3A+For+reference%22+&#34;&gt;Type: For reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you are sure no one else had the issue, follow the &lt;strong&gt;Issue template&lt;/strong&gt; or &lt;strong&gt;Feature request template&lt;/strong&gt; while reporting any &lt;a href=&#34;https://github.com/espressif/arduino-esp32/issues/new/choose&#34;&gt;new Issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions to the Arduino ESP32 project!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.espressif.com/projects/arduino-esp32/en/latest/contributing.html&#34;&gt;contributing&lt;/a&gt; in the documentation for more information on how to contribute to the project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>betaflight/betaflight</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/betaflight/betaflight</id>
    <link href="https://github.com/betaflight/betaflight" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source Flight Controller Firmware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/docs/assets/images/bf_logo.png&#34; alt=&#34;Betaflight&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/betaflight/betaflight&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build/latest?definitionId=8&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_apis/build/status/betaflight.betaflight?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build/latest?definitionId=8&amp;amp;branchName=4.2-maintenance&#34;&gt;&lt;img src=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_apis/build/status/betaflight.betaflight?branchName=4.2-maintenance&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Betaflight is flight controller software (firmware) used to fly multi-rotor craft and fixed wing craft.&lt;/p&gt; &#xA;&lt;p&gt;This fork differs from Baseflight and Cleanflight in that it focuses on flight performance, leading-edge feature additions, and wide target support.&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Date&lt;/th&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements for the submission of new and updated targets&lt;/h3&gt; &#xA;&lt;p&gt;The following new requirements for pull requests adding new targets or modifying existing targets are put in place from now on:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;No new F3 based targets will be accepted;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For any new target that is to be added, only a Unified Target config into &lt;a href=&#34;https://github.com/betaflight/unified-targets/tree/master/configs/default&#34;&gt;https://github.com/betaflight/unified-targets/tree/master/configs/default&lt;/a&gt; needs to be submitted. See the &lt;a href=&#34;https://github.com/betaflight/betaflight/raw/master/docs/TargetMaintenance/CreatingAUnifiedTarget.md&#34;&gt;instructions&lt;/a&gt; for how to create a Unified Target configuration. If there is no Unified Target for the MCU type of the new target (see instructions above), then a &#39;legacy&#39; format target definition into &lt;code&gt;src/main/target/&lt;/code&gt; has to be submitted as well;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For changes to existing targets, the change needs to be applied to the Unified Target config in &lt;a href=&#34;https://github.com/betaflight/unified-targets/tree/master/configs/default&#34;&gt;https://github.com/betaflight/unified-targets/tree/master/configs/default&lt;/a&gt;. If no Unified Target configuration for the target exists, a new Unified Target configuration will have to be created and submitted. If there is no Unified Target for the MCU type of the new target (see instructions above), then an update to the &#39;legacy&#39; format target definition in &lt;code&gt;src/main/target/&lt;/code&gt; has to be submitted alongside the update to the Unified Target configuration.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Betaflight has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-color RGB LED strip support (each LED can be a different color using variable length WS2811 Addressable RGB strips - use for Orientation Indicators, Low Battery Warning, Flight Mode Status, Initialization Troubleshooting, etc)&lt;/li&gt; &#xA; &lt;li&gt;DShot (150, 300 and 600), Multishot, Oneshot (125 and 42) and Proshot1000 motor protocol support&lt;/li&gt; &#xA; &lt;li&gt;Blackbox flight recorder logging (to onboard flash or external microSD card where equipped)&lt;/li&gt; &#xA; &lt;li&gt;Support for targets that use the STM32 F4, G4, F7 and H7 processors&lt;/li&gt; &#xA; &lt;li&gt;PWM, PPM, SPI, and Serial (SBus, SumH, SumD, Spektrum 1024/2048, XBus, etc) RX connection with failsafe detection&lt;/li&gt; &#xA; &lt;li&gt;Multiple telemetry protocols (CRSF, FrSky, HoTT smart-port, MSP, etc)&lt;/li&gt; &#xA; &lt;li&gt;RSSI via ADC - Uses ADC to read PWM RSSI signals, tested with FrSky D4R-II, X8R, X4R-SB, &amp;amp; XSR&lt;/li&gt; &#xA; &lt;li&gt;OSD support &amp;amp; configuration without needing third-party OSD software/firmware/comm devices&lt;/li&gt; &#xA; &lt;li&gt;OLED Displays - Display information on: Battery voltage/current/mAh, profile, rate profile, mode, version, sensors, etc&lt;/li&gt; &#xA; &lt;li&gt;In-flight manual PID tuning and rate adjustment&lt;/li&gt; &#xA; &lt;li&gt;PID and filter tuning using sliders&lt;/li&gt; &#xA; &lt;li&gt;Rate profiles and in-flight selection of them&lt;/li&gt; &#xA; &lt;li&gt;Configurable serial ports for Serial RX, Telemetry, ESC telemetry, MSP, GPS, OSD, Sonar, etc - Use most devices on any port, softserial included&lt;/li&gt; &#xA; &lt;li&gt;VTX support for Unify Pro and IRC Tramp&lt;/li&gt; &#xA; &lt;li&gt;and MUCH, MUCH more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/betaflight/betaflight/wiki&#34;&gt;https://github.com/betaflight/betaflight/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support and Developers Channel&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a dedicated Slack chat channel here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://slack.betaflight.com/&#34;&gt;https://slack.betaflight.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We also have a Facebook Group. Join us to get a place to talk about Betaflight, ask configuration questions, or just hang out with fellow pilots.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/groups/betaflightgroup/&#34;&gt;https://www.facebook.com/groups/betaflightgroup/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Etiquette: Don&#39;t ask to ask and please wait around long enough for a reply - sometimes people are out flying, asleep or at work and can&#39;t answer immediately.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Tool&lt;/h2&gt; &#xA;&lt;p&gt;To configure Betaflight you should use the Betaflight-configurator GUI tool (Windows/OSX/Linux) which can be found here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight-configurator/releases/latest&#34;&gt;https://github.com/betaflight/betaflight-configurator/releases/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and encouraged. You can contribute in many ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;implement a new feature in the firmware or in configurator (see &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/#Developers&#34;&gt;below&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;documentation updates and corrections;&lt;/li&gt; &#xA; &lt;li&gt;How-To guides - received help? Help others!&lt;/li&gt; &#xA; &lt;li&gt;bug reporting &amp;amp; fixes;&lt;/li&gt; &#xA; &lt;li&gt;new feature ideas &amp;amp; suggestions;&lt;/li&gt; &#xA; &lt;li&gt;provide a new translation for configurator, or help us maintain the existing ones (see &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/#Translators&#34;&gt;below&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The best place to start is the Betaflight Slack (registration &lt;a href=&#34;https://slack.betaflight.com/&#34;&gt;here&lt;/a&gt;). Next place is the github issue tracker:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight/issues&#34;&gt;https://github.com/betaflight/betaflight/issues&lt;/a&gt; &lt;a href=&#34;https://github.com/betaflight/betaflight-configurator/issues&#34;&gt;https://github.com/betaflight/betaflight-configurator/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before creating new issues please check to see if there is an existing one, search first otherwise you waste people&#39;s time when they could be coding instead!&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute to our efforts financially, please consider making a donation to us through &lt;a href=&#34;https://paypal.me/betaflight&#34;&gt;PayPal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute financially on an ongoing basis, you should consider becoming a patron for us on &lt;a href=&#34;https://www.patreon.com/betaflight&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Contribution of bugfixes and new features is encouraged. Please be aware that we have a thorough review process for pull requests, and be prepared to explain what you want to achieve with your pull request. Before starting to write code, please read our &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/docs/development/Development.md&#34;&gt;development guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/betaflight/betaflight/master/docs/development/CodingStyle.md&#34;&gt;coding style definition&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Azure Pipelines are used to run automatic builds&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build&#34;&gt;https://dev.azure.com/Betaflight/Betaflight%20Nightlies/_build&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translators&lt;/h2&gt; &#xA;&lt;p&gt;We want to make Betaflight accessible for pilots who are not fluent in English, and for this reason we are currently maintaining translations into 18 languages for Betaflight Configurator: Català, Deutsch, Español, Euskera, Français, Galego, Hrvatski, Bahasa Indonesia, Italiano, 日本語, 한국어, Latviešu, Português, Português Brasileiro, polski, Русский язык, Svenska, 简体中文. We have got a team of volunteer translators who do this work, but additional translators are always welcome to share the workload, and we are keen to add additional languages. If you would like to help us with translations, you have got the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you help by suggesting some updates or improvements to translations in a language you are familiar with, head to &lt;a href=&#34;https://crowdin.com/project/betaflight-configurator&#34;&gt;crowdin&lt;/a&gt; and add your suggested translations there;&lt;/li&gt; &#xA; &lt;li&gt;if you would like to start working on the translation for a new language, or take on responsibility for proof-reading the translation for a language you are very familiar with, please head to the Betaflight Slack (registration &lt;a href=&#34;https://slack.betaflight.com/&#34;&gt;here&lt;/a&gt;), and join the &#39;#team_translation&#39; channel - the people in there can help you to get a new language added, or set you up as a proof reader.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hardware Issues&lt;/h2&gt; &#xA;&lt;p&gt;Betaflight does not manufacture or distribute their own hardware. While we are collaborating with and supported by a number of manufacturers, we do not do any kind of hardware support. If you encounter any hardware issues with your flight controller or another component, please contact the manufacturer or supplier of your hardware, or check RCGroups &lt;a href=&#34;https://rcgroups.com/forums/showthread.php?t=2464844&#34;&gt;https://rcgroups.com/forums/showthread.php?t=2464844&lt;/a&gt; to see if others with the same problem have found a solution.&lt;/p&gt; &#xA;&lt;h2&gt;Betaflight Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/betaflight/betaflight/releases&#34;&gt;https://github.com/betaflight/betaflight/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Open Source / Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Betaflight is software that is &lt;strong&gt;open source&lt;/strong&gt; and is available free of charge without warranty to all users.&lt;/p&gt; &#xA;&lt;p&gt;Betaflight is forked from Cleanflight, so thanks goes to all those whom have contributed to Cleanflight and its origins.&lt;/p&gt; &#xA;&lt;p&gt;Origins for this fork (Thanks!):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alexinparis&lt;/strong&gt; (for MultiWii),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;timecop&lt;/strong&gt; (for Baseflight),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dominic Clifton&lt;/strong&gt; (for Cleanflight),&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;borisbstyle&lt;/strong&gt; (for Betaflight), and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sambas&lt;/strong&gt; (for the original STM32F4 port).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Betaflight Configurator is forked from Cleanflight Configurator and its origins.&lt;/p&gt; &#xA;&lt;p&gt;Origins for Betaflight Configurator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dominic Clifton&lt;/strong&gt; (for Cleanflight configurator), and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ctn&lt;/strong&gt; (for the original Configurator).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Big thanks to current and past contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Budden, Martin (martinbudden)&lt;/li&gt; &#xA; &lt;li&gt;Bardwell, Joshua (joshuabardwell)&lt;/li&gt; &#xA; &lt;li&gt;Blackman, Jason (blckmn)&lt;/li&gt; &#xA; &lt;li&gt;ctzsnooze&lt;/li&gt; &#xA; &lt;li&gt;Höglund, Anders (andershoglund)&lt;/li&gt; &#xA; &lt;li&gt;Ledvina, Petr (ledvinap) - &lt;strong&gt;IO code awesomeness!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;kc10kevin&lt;/li&gt; &#xA; &lt;li&gt;Keeble, Gary (MadmanK)&lt;/li&gt; &#xA; &lt;li&gt;Keller, Michael (mikeller) - &lt;strong&gt;Configurator brilliance&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kravcov, Albert (skaman82) - &lt;strong&gt;Configurator brilliance&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;MJ666&lt;/li&gt; &#xA; &lt;li&gt;Nathan (nathantsoi)&lt;/li&gt; &#xA; &lt;li&gt;ravnav&lt;/li&gt; &#xA; &lt;li&gt;sambas - &lt;strong&gt;bringing us the F4&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;savaga&lt;/li&gt; &#xA; &lt;li&gt;Stålheim, Anton (KiteAnton)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many many others who haven&#39;t been mentioned....&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vedderb/bldc</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/vedderb/bldc</id>
    <link href="https://github.com/vedderb/bldc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The VESC motor control firmware&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VESC firmware&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/vedderb/bldc&#34;&gt;&lt;img src=&#34;https://travis-ci.com/vedderb/bldc.svg?branch=master&#34; alt=&#34;Travis CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/vedderb/bldc?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=vedderb/bldc&amp;amp;utm_campaign=Badge_Grade&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/75e90ffbd46841a3a7be2a9f7a94c242&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/watchers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/watchers/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Watchers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vedderb/bldc/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/vedderb/bldc.svg?sanitize=true&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An open source motor controller firmware.&lt;/p&gt; &#xA;&lt;p&gt;This is the source code for the VESC DC/BLDC/FOC controller. Read more at &lt;a href=&#34;https://vesc-project.com/&#34;&gt;https://vesc-project.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported boards&lt;/h2&gt; &#xA;&lt;p&gt;All of them!&lt;/p&gt; &#xA;&lt;p&gt;Check the supported boards by typing &lt;code&gt;make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Firmware]&#xA;     fw   - Build firmware for default target&#xA;                            supported boards are: 100_250 100_250_no_limits 100_500...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also many other options that can be changed in &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/conf_general.h&#34;&gt;conf_general.h&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/macOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tools: &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, and &lt;code&gt;make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additional Linux requirements: &lt;code&gt;libgl-dev&lt;/code&gt; and &lt;code&gt;libxcb-xinerama0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helpful Ubuntu commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install git build-essential libgl-dev libxcb-xinerama0 wget git-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Helpful macOS tools:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install stlink&#xA;brew install openocd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chocolately: &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;https://chocolatey.org/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git: &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;https://git-scm.com/download/win&lt;/a&gt;. Make sure to click any boxes to add Git to your Environment (aka PATH)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install Dev environment and build&lt;/h2&gt; &#xA;&lt;h3&gt;On Ubuntu (Linux)/MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Open up a terminal&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open up a Windows Powershell terminal (Resist the urge to run Powershell as administrator, that will break things)&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;choco install make&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone http://github.com/vedderb/bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd bldc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Continue with &lt;a href=&#34;https://raw.githubusercontent.com/vedderb/bldc/master/#on-all-platforms&#34;&gt;On all platforms&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;On all platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git checkout origin/master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make arm_sdk_install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; &amp;lt;-- Pick out the name of your target device from the supported boards list. For instance, I have a Trampa &lt;strong&gt;VESC 100/250&lt;/strong&gt;, so my target is &lt;code&gt;100_250&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make 100_250&lt;/code&gt; &amp;lt;-- This will build the &lt;strong&gt;VESC 100/250&lt;/strong&gt; firmware and place it into the &lt;code&gt;bldc/builds/100_250/&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux Optional - Add udev rules to use the stlink v2 programmer without being root&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget vedder.se/Temp/49-stlinkv2.rules&#xA;sudo mv 49-stlinkv2.rules /etc/udev/rules.d/&#xA;sudo udevadm trigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IDE&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;On macOS/Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python3&lt;/code&gt;, and &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;On Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;. Make sure to click the box to add Python3 to your Environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;All platforms&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install aqtinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make qt_install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Upload to VESC&lt;/h2&gt; &#xA;&lt;h3&gt;Method 1 - Flash it using an STLink SWD debugger&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build and flash the &lt;a href=&#34;https://github.com/vedderb/bldc-bootloader&#34;&gt;bootloader&lt;/a&gt; first&lt;/li&gt; &#xA; &lt;li&gt;Then &lt;code&gt;_flash&lt;/code&gt; to the target of your choice. So for instance, for the VESC 100/250:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make 100_250_flash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2 - Upload Firmware via VESC tool through USB&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone and build the firmware in &lt;strong&gt;.bin&lt;/strong&gt; format as in the above Build instructions&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In VESC tool&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Connect to the VESC&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the Firmware tab on the left side menu&lt;/li&gt; &#xA; &lt;li&gt;Click on Custom file tab&lt;/li&gt; &#xA; &lt;li&gt;Click on the folder icon to select the built firmware in .bin format (e.g. &lt;code&gt;build/100_250/100_250.bin&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h5&gt;[ Reminder : It is normal to see VESC disconnects during the firmware upload process ]&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : DO NOT DISCONNECT POWER/USB to VESC during the upload process, or you will risk bricking your VESC ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;strong&gt;[ Warning : ONLY DISCONNECT your VESC 10s after the upload loading bar completed and &#34;FW Upload DONE&#34; ]&lt;/strong&gt;&lt;/h5&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Press the upload firmware button (downward arrow) on the bottom right to start upload the selected firmware.&lt;/li&gt; &#xA; &lt;li&gt;Wait for &lt;strong&gt;10s&lt;/strong&gt; after the loading bar completed (Warning: unplug sooner will risk bricking your VESC)&lt;/li&gt; &#xA; &lt;li&gt;The VESC will disconnect itself after new firmware is uploaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;In case you bricked your VESC&lt;/h2&gt; &#xA;&lt;p&gt;you will need to upload a new working firmware to the VESC.&lt;br&gt; However, to upload a firmware to a bricked VESC, you have to use a SWD Debugger.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://vesc-project.com/forum&#34;&gt;forums&lt;/a&gt; to get involved and improve this project. Join the &lt;a href=&#34;https://discord.gg/JgvV5NwYts&#34;&gt;Discord&lt;/a&gt; for real-time support and chat&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The software is released under the GNU General Public License version 3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nanopb/nanopb</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/nanopb/nanopb</id>
    <link href="https://github.com/nanopb/nanopb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protocol Buffers with small code size&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nanopb - Protocol Buffers for Embedded Systems&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nanopb/nanopb/actions/workflows/trigger_on_code_change.yml/badge.svg?sanitize=true&#34; alt=&#34;Latest change&#34;&gt; &lt;img src=&#34;https://github.com/nanopb/nanopb/actions/workflows/trigger_on_schedule.yml/badge.svg?sanitize=true&#34; alt=&#34;Weekly build&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nanopb is a small code-size Protocol Buffers implementation in ansi C. It is especially suitable for use in microcontrollers, but fits any memory restricted system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Homepage:&lt;/strong&gt; &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/&#34;&gt;https://jpa.kapsi.fi/nanopb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git repository:&lt;/strong&gt; &lt;a href=&#34;https://github.com/nanopb/nanopb/&#34;&gt;https://github.com/nanopb/nanopb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation:&lt;/strong&gt; &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/docs/&#34;&gt;https://jpa.kapsi.fi/nanopb/docs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Forum:&lt;/strong&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/nanopb&#34;&gt;https://groups.google.com/forum/#!forum/nanopb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable version downloads:&lt;/strong&gt; &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/download/&#34;&gt;https://jpa.kapsi.fi/nanopb/download/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pre-release binary packages:&lt;/strong&gt; &lt;a href=&#34;https://github.com/nanopb/nanopb/actions/workflows/binary_packages.yml&#34;&gt;https://github.com/nanopb/nanopb/actions/workflows/binary_packages.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using the nanopb library&lt;/h2&gt; &#xA;&lt;p&gt;To use the nanopb library, you need to do two things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile your .proto files for nanopb, using &lt;code&gt;protoc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Include &lt;em&gt;pb_encode.c&lt;/em&gt;, &lt;em&gt;pb_decode.c&lt;/em&gt; and &lt;em&gt;pb_common.c&lt;/em&gt; in your project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The easiest way to get started is to study the project in &#34;examples/simple&#34;. It contains a Makefile, which should work directly under most Linux systems. However, for any other kind of build system, see the manual steps in README.txt in that folder.&lt;/p&gt; &#xA;&lt;h2&gt;Generating the headers&lt;/h2&gt; &#xA;&lt;p&gt;Protocol Buffers messages are defined in a &lt;code&gt;.proto&lt;/code&gt; file, which follows a standard format that is compatible with all Protocol Buffers libraries. To use it with nanopb, you need to generate &lt;code&gt;.pb.c&lt;/code&gt; and &lt;code&gt;.pb.h&lt;/code&gt; files from it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python generator/nanopb_generator.py myprotocol.proto  # For source checkout&#xA;generator-bin/nanopb_generator myprotocol.proto        # For binary package&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Note: For instructions for nanopb-0.3.9.x and older, see the documentation of that particular version &lt;a href=&#34;https://github.com/nanopb/nanopb/raw/maintenance_0.3/README.md&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The binary packages for Windows, Linux and Mac OS X should contain all necessary dependencies, including Python, python-protobuf library and protoc. If you are using a git checkout or a plain source distribution, you will need to install Python separately. Once you have Python, you can install the other dependencies with &lt;code&gt;pip install --upgrade protobuf grpcio-tools&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can further customize the header generation by creating an &lt;code&gt;.options&lt;/code&gt; file. See &lt;a href=&#34;https://jpa.kapsi.fi/nanopb/docs/concepts.html#modifying-generator-behaviour&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;p&gt;If you want to perform further development of the nanopb core, or to verify its functionality using your compiler and platform, you&#39;ll want to run the test suite. The build rules for the test suite are implemented using Scons, so you need to have that installed (ex: &lt;code&gt;sudo apt install scons&lt;/code&gt; or &lt;code&gt;pip install scons&lt;/code&gt;). To run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd tests&#xA;scons&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show the progress of various test cases. If the output does not end in an error, the test cases were successful.&lt;/p&gt; &#xA;&lt;p&gt;Note: Mac OS X by default aliases &#39;clang&#39; as &#39;gcc&#39;, while not actually supporting the same command line options as gcc does. To run tests on Mac OS X, use: &lt;code&gt;scons CC=clang CXX=clang&lt;/code&gt;. Same way can be used to run tests with different compilers on any platform.&lt;/p&gt; &#xA;&lt;p&gt;For embedded platforms, there is currently support for running the tests on STM32 discovery board and &lt;a href=&#34;https://github.com/buserror/simavr&#34;&gt;simavr&lt;/a&gt; AVR simulator. Use &lt;code&gt;scons PLATFORM=STM32&lt;/code&gt; and &lt;code&gt;scons PLATFORM=AVR&lt;/code&gt; to run these tests.&lt;/p&gt; &#xA;&lt;h2&gt;Build systems and integration&lt;/h2&gt; &#xA;&lt;p&gt;Nanopb C code itself is designed to be portable and easy to build on any platform. Often the bigger hurdle is running the generator which takes in the &lt;code&gt;.proto&lt;/code&gt; files and outputs &lt;code&gt;.pb.c&lt;/code&gt; definitions.&lt;/p&gt; &#xA;&lt;p&gt;There exist build rules for several systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Makefiles&lt;/strong&gt;: &lt;code&gt;extra/nanopb.mk&lt;/code&gt;, see &lt;code&gt;examples/simple&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;: &lt;code&gt;extra/FindNanopb.cmake&lt;/code&gt;, see &lt;code&gt;examples/cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SCons&lt;/strong&gt;: &lt;code&gt;tests/site_scons&lt;/code&gt; (generator only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bazel&lt;/strong&gt;: &lt;code&gt;BUILD&lt;/code&gt; in source root&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conan&lt;/strong&gt;: &lt;code&gt;conanfile.py&lt;/code&gt; in source root&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PlatformIO&lt;/strong&gt;: &lt;a href=&#34;https://platformio.org/lib/show/431/Nanopb&#34;&gt;https://platformio.org/lib/show/431/Nanopb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PyPI/pip&lt;/strong&gt;: &lt;a href=&#34;https://pypi.org/project/nanopb/&#34;&gt;https://pypi.org/project/nanopb/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vcpkg&lt;/strong&gt;: &lt;a href=&#34;https://vcpkg.info/port/nanopb&#34;&gt;https://vcpkg.info/port/nanopb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And also integration to platform interfaces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arduino&lt;/strong&gt;: &lt;a href=&#34;http://platformio.org/lib/show/1385/nanopb-arduino&#34;&gt;http://platformio.org/lib/show/1385/nanopb-arduino&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DaveGamble/cJSON</title>
    <updated>2022-05-31T02:33:05Z</updated>
    <id>tag:github.com,2022-05-31:/DaveGamble/cJSON</id>
    <link href="https://github.com/DaveGamble/cJSON" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ultralightweight JSON parser in ANSI C&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cJSON&lt;/h1&gt; &#xA;&lt;p&gt;Ultralightweight JSON parser in ANSI C.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#welcome-to-cjson&#34;&gt;Welcome to cJSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#building&#34;&gt;Building&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#copying-the-source&#34;&gt;Copying the source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#cmake&#34;&gt;CMake&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#makefile&#34;&gt;Makefile&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#Vcpkg&#34;&gt;Vcpkg&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#including-cjson&#34;&gt;Including cJSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#data-structure&#34;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#working-with-the-data-structure&#34;&gt;Working with the data structure&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#basic-types&#34;&gt;Basic types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#arrays&#34;&gt;Arrays&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#objects&#34;&gt;Objects&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing-json&#34;&gt;Parsing JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing-json&#34;&gt;Printing JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#example&#34;&gt;Example&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#printing&#34;&gt;Printing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#parsing&#34;&gt;Parsing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#caveats&#34;&gt;Caveats&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#zero-character&#34;&gt;Zero Character&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#character-encoding&#34;&gt;Character Encoding&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#c-standard&#34;&gt;C Standard&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#floating-point-numbers&#34;&gt;Floating Point Numbers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#deep-nesting-of-arrays-and-objects&#34;&gt;Deep Nesting Of Arrays And Objects&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#thread-safety&#34;&gt;Thread Safety&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#case-sensitivity&#34;&gt;Case Sensitivity&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#duplicate-object-members&#34;&gt;Duplicate Object Members&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/#enjoy-cjson&#34;&gt;Enjoy cJSON!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright (c) 2009-2017 Dave Gamble and cJSON contributors&lt;/p&gt; &#xA; &lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA; &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA; &lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Welcome to cJSON.&lt;/h3&gt; &#xA;&lt;p&gt;cJSON aims to be the dumbest possible parser that you can get your job done with. It&#39;s a single file of C, and a single header file.&lt;/p&gt; &#xA;&lt;p&gt;JSON is described best here: &lt;a href=&#34;http://www.json.org/&#34;&gt;http://www.json.org/&lt;/a&gt; It&#39;s like XML, but fat-free. You use it to move data around, store things, or just generally represent your program&#39;s state.&lt;/p&gt; &#xA;&lt;p&gt;As a library, cJSON exists to take away as much legwork as it can, but not get in your way. As a point of pragmatism (i.e. ignoring the truth), I&#39;m going to say that you can use it in one of two modes: Auto and Manual. Let&#39;s have a quick run-through.&lt;/p&gt; &#xA;&lt;p&gt;I lifted some JSON from this page: &lt;a href=&#34;http://www.json.org/fatfree.html&#34;&gt;http://www.json.org/fatfree.html&lt;/a&gt; That page inspired me to write cJSON, which is a parser that tries to share the same philosophy as JSON itself. Simple, dumb, out of the way.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;There are several ways to incorporate cJSON into your project.&lt;/p&gt; &#xA;&lt;h4&gt;copying the source&lt;/h4&gt; &#xA;&lt;p&gt;Because the entire library is only one C file and one header file, you can just copy &lt;code&gt;cJSON.h&lt;/code&gt; and &lt;code&gt;cJSON.c&lt;/code&gt; to your projects source and start using it.&lt;/p&gt; &#xA;&lt;p&gt;cJSON is written in ANSI C (C89) in order to support as many platforms and compilers as possible.&lt;/p&gt; &#xA;&lt;h4&gt;CMake&lt;/h4&gt; &#xA;&lt;p&gt;With CMake, cJSON supports a full blown build system. This way you get the most features. CMake with an equal or higher version than 2.8.5 is supported. With CMake it is recommended to do an out of tree build, meaning the compiled files are put in a directory separate from the source files. So in order to build cJSON with CMake on a Unix platform, make a &lt;code&gt;build&lt;/code&gt; directory and run CMake inside it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a Makefile and a bunch of other files. You can then compile it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And install it with &lt;code&gt;make install&lt;/code&gt; if you want. By default it installs the headers &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries to &lt;code&gt;/usr/local/lib&lt;/code&gt;. It also installs files for pkg-config to make it easier to detect and use an existing installation of CMake. And it installs CMake config files, that can be used by other CMake based projects to discover the library.&lt;/p&gt; &#xA;&lt;p&gt;You can change the build process with a list of different options that you can pass to CMake. Turn them on with &lt;code&gt;On&lt;/code&gt; and off with &lt;code&gt;Off&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_TEST=On&lt;/code&gt;: Enable building the tests. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_UTILS=On&lt;/code&gt;: Enable building cJSON_Utils. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_TARGET_EXPORT=On&lt;/code&gt;: Enable the export of CMake targets. Turn off if it makes problems. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CUSTOM_COMPILER_FLAGS=On&lt;/code&gt;: Enable custom compiler flags (currently for Clang, GCC and MSVC). Turn off if it makes problems. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_VALGRIND=On&lt;/code&gt;: Run tests with &lt;a href=&#34;http://valgrind.org&#34;&gt;valgrind&lt;/a&gt;. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_SANITIZERS=On&lt;/code&gt;: Compile cJSON with &lt;a href=&#34;https://github.com/google/sanitizers/wiki/AddressSanitizer&#34;&gt;AddressSanitizer&lt;/a&gt; and &lt;a href=&#34;https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html&#34;&gt;UndefinedBehaviorSanitizer&lt;/a&gt; enabled (if possible). (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_SAFE_STACK&lt;/code&gt;: Enable the &lt;a href=&#34;https://clang.llvm.org/docs/SafeStack.html&#34;&gt;SafeStack&lt;/a&gt; instrumentation pass. Currently only works with the Clang compiler. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_LIBS=On&lt;/code&gt;: Build the shared libraries. (on by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DBUILD_SHARED_AND_STATIC_LIBS=On&lt;/code&gt;: Build both shared and static libraries. (off by default)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCMAKE_INSTALL_PREFIX=/usr&lt;/code&gt;: Set a prefix for the installation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_LOCALES=On&lt;/code&gt;: Enable the usage of localeconv method. ( on by default )&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DCJSON_OVERRIDE_BUILD_SHARED_LIBS=On&lt;/code&gt;: Enable overriding the value of &lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt; with &lt;code&gt;-DCJSON_BUILD_SHARED_LIBS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-DENABLE_CJSON_VERSION_SO&lt;/code&gt;: Enable cJSON so version. ( on by default )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are packaging cJSON for a distribution of Linux, you would probably take these steps for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir build&#xA;cd build&#xA;cmake .. -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DCMAKE_INSTALL_PREFIX=/usr&#xA;make&#xA;make DESTDIR=$pkgdir install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows CMake is usually used to create a Visual Studio solution file by running it inside the Developer Command Prompt for Visual Studio, for exact steps follow the official documentation from CMake and Microsoft and use the online search engine of your choice. The descriptions of the the options above still generally apply, although not all of them work on Windows.&lt;/p&gt; &#xA;&lt;h4&gt;Makefile&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This Method is deprecated. Use CMake if at all possible. Makefile support is limited to fixing bugs.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have CMake available, but still have GNU make. You can use the makefile to build cJSON:&lt;/p&gt; &#xA;&lt;p&gt;Run this command in the directory with the source code and it will automatically compile static and shared libraries and a little test program (not the full test suite).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want, you can install the compiled library to your system using &lt;code&gt;make install&lt;/code&gt;. By default it will install the headers in &lt;code&gt;/usr/local/include/cjson&lt;/code&gt; and the libraries in &lt;code&gt;/usr/local/lib&lt;/code&gt;. But you can change this behavior by setting the &lt;code&gt;PREFIX&lt;/code&gt; and &lt;code&gt;DESTDIR&lt;/code&gt; variables: &lt;code&gt;make PREFIX=/usr DESTDIR=temp install&lt;/code&gt;. And uninstall them with: &lt;code&gt;make PREFIX=/usr DESTDIR=temp uninstall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Vcpkg&lt;/h4&gt; &#xA;&lt;p&gt;You can download and install cJSON using the &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; dependency manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.sh&#xA;./vcpkg integrate install&#xA;vcpkg install cjson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cJSON port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please &lt;a href=&#34;https://github.com/Microsoft/vcpkg&#34;&gt;create an issue or pull request&lt;/a&gt; on the vcpkg repository.&lt;/p&gt; &#xA;&lt;h3&gt;Including cJSON&lt;/h3&gt; &#xA;&lt;p&gt;If you installed it via CMake or the Makefile, you can include cJSON like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;cjson/cJSON.h&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data Structure&lt;/h3&gt; &#xA;&lt;p&gt;cJSON represents JSON data using the &lt;code&gt;cJSON&lt;/code&gt; struct data type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* The cJSON structure: */&#xA;typedef struct cJSON&#xA;{&#xA;    struct cJSON *next;&#xA;    struct cJSON *prev;&#xA;    struct cJSON *child;&#xA;    int type;&#xA;    char *valuestring;&#xA;    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */&#xA;    int valueint;&#xA;    double valuedouble;&#xA;    char *string;&#xA;} cJSON;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An item of this type represents a JSON value. The type is stored in &lt;code&gt;type&lt;/code&gt; as a bit-flag (&lt;strong&gt;this means that you cannot find out the type by just comparing the value of &lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To check the type of an item, use the corresponding &lt;code&gt;cJSON_Is...&lt;/code&gt; function. It does a &lt;code&gt;NULL&lt;/code&gt; check followed by a type check and returns a boolean value if the item is of this type.&lt;/p&gt; &#xA;&lt;p&gt;The type can be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Invalid&lt;/code&gt; (check with &lt;code&gt;cJSON_IsInvalid&lt;/code&gt;): Represents an invalid item that doesn&#39;t contain any value. You automatically have this type if you set the item to all zero bytes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_False&lt;/code&gt; (check with &lt;code&gt;cJSON_IsFalse&lt;/code&gt;): Represents a &lt;code&gt;false&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_True&lt;/code&gt; (check with &lt;code&gt;cJSON_IsTrue&lt;/code&gt;): Represents a &lt;code&gt;true&lt;/code&gt; boolean value. You can also check for boolean values in general with &lt;code&gt;cJSON_IsBool&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_NULL&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNull&lt;/code&gt;): Represents a &lt;code&gt;null&lt;/code&gt; value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Number&lt;/code&gt; (check with &lt;code&gt;cJSON_IsNumber&lt;/code&gt;): Represents a number value. The value is stored as a double in &lt;code&gt;valuedouble&lt;/code&gt; and also in &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_String&lt;/code&gt; (check with &lt;code&gt;cJSON_IsString&lt;/code&gt;): Represents a string value. It is stored in the form of a zero terminated string in &lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Array&lt;/code&gt; (check with &lt;code&gt;cJSON_IsArray&lt;/code&gt;): Represent an array value. This is implemented by pointing &lt;code&gt;child&lt;/code&gt; to a linked list of &lt;code&gt;cJSON&lt;/code&gt; items that represent the values in the array. The elements are linked together using &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt;, where the first element has &lt;code&gt;prev.next == NULL&lt;/code&gt; and the last element &lt;code&gt;next == NULL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Object&lt;/code&gt; (check with &lt;code&gt;cJSON_IsObject&lt;/code&gt;): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_Raw&lt;/code&gt; (check with &lt;code&gt;cJSON_IsRaw&lt;/code&gt;): Represents any kind of JSON that is stored as a zero terminated array of characters in &lt;code&gt;valuestring&lt;/code&gt;. This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn&#39;t check if it is valid JSON.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally there are the following two flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_IsReference&lt;/code&gt;: Specifies that the item that &lt;code&gt;child&lt;/code&gt; points to and/or &lt;code&gt;valuestring&lt;/code&gt; is not owned by this item, it is only a reference. So &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will only deallocate this item, not its &lt;code&gt;child&lt;/code&gt;/&lt;code&gt;valuestring&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_StringIsConst&lt;/code&gt;: This means that &lt;code&gt;string&lt;/code&gt; points to a constant string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; and other functions will not try to deallocate &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Working with the data structure&lt;/h3&gt; &#xA;&lt;p&gt;For every value type there is a &lt;code&gt;cJSON_Create...&lt;/code&gt; function that can be used to create an item of that type. All of these will allocate a &lt;code&gt;cJSON&lt;/code&gt; struct that can later be deleted with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Note that you have to delete them at some point, otherwise you will get a memory leak.&lt;br&gt; &lt;strong&gt;Important&lt;/strong&gt;: If you have added an item to an array or an object already, you &lt;strong&gt;mustn&#39;t&lt;/strong&gt; delete it with &lt;code&gt;cJSON_Delete&lt;/code&gt;. Adding it to an array or object transfers its ownership so that when that array or object is deleted, it gets deleted as well. You also could use &lt;code&gt;cJSON_SetValuestring&lt;/code&gt; to change a &lt;code&gt;cJSON_String&lt;/code&gt;&#39;s &lt;code&gt;valuestring&lt;/code&gt;, and you needn&#39;t to free the previous &lt;code&gt;valuestring&lt;/code&gt; manually.&lt;/p&gt; &#xA;&lt;h4&gt;Basic types&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;null&lt;/strong&gt; is created with &lt;code&gt;cJSON_CreateNull&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;booleans&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateTrue&lt;/code&gt;, &lt;code&gt;cJSON_CreateFalse&lt;/code&gt; or &lt;code&gt;cJSON_CreateBool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;numbers&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateNumber&lt;/code&gt;. This will set both &lt;code&gt;valuedouble&lt;/code&gt; and &lt;code&gt;valueint&lt;/code&gt;. If the number is outside of the range of an integer, &lt;code&gt;INT_MAX&lt;/code&gt; or &lt;code&gt;INT_MIN&lt;/code&gt; are used for &lt;code&gt;valueint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;strings&lt;/strong&gt; are created with &lt;code&gt;cJSON_CreateString&lt;/code&gt; (copies the string) or with &lt;code&gt;cJSON_CreateStringReference&lt;/code&gt; (directly points to the string. This means that &lt;code&gt;valuestring&lt;/code&gt; won&#39;t be deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt; and you are responsible for its lifetime, useful for constants)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Arrays&lt;/h4&gt; &#xA;&lt;p&gt;You can create an empty array with &lt;code&gt;cJSON_CreateArray&lt;/code&gt;. &lt;code&gt;cJSON_CreateArrayReference&lt;/code&gt; can be used to create an array that doesn&#39;t &#34;own&#34; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add items to an array, use &lt;code&gt;cJSON_AddItemToArray&lt;/code&gt; to append items to the end. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another item, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere. To insert items in the middle, use &lt;code&gt;cJSON_InsertItemInArray&lt;/code&gt;. It will insert an item at the given 0 based index and shift all the existing items to the right.&lt;/p&gt; &#xA;&lt;p&gt;If you want to take an item out of an array at a given index and continue using it, use &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromArray&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromArray&lt;/code&gt;, but deletes the detached item via &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace an item in an array in place. Either with &lt;code&gt;cJSON_ReplaceItemInArray&lt;/code&gt; using an index or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; &#xA;&lt;p&gt;To get the size of an array, use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;. Use &lt;code&gt;cJSON_GetArrayItem&lt;/code&gt; to get an element at a given index.&lt;/p&gt; &#xA;&lt;p&gt;Because an array is stored as a linked list, iterating it via index is inefficient (&lt;code&gt;O(n²)&lt;/code&gt;), so you can iterate over an array using the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro in &lt;code&gt;O(n)&lt;/code&gt; time complexity.&lt;/p&gt; &#xA;&lt;h4&gt;Objects&lt;/h4&gt; &#xA;&lt;p&gt;You can create an empty object with &lt;code&gt;cJSON_CreateObject&lt;/code&gt;. &lt;code&gt;cJSON_CreateObjectReference&lt;/code&gt; can be used to create an object that doesn&#39;t &#34;own&#34; its content, so its content doesn&#39;t get deleted by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add items to an object, use &lt;code&gt;cJSON_AddItemToObject&lt;/code&gt;. Use &lt;code&gt;cJSON_AddItemToObjectCS&lt;/code&gt; to add an item to an object with a name that is a constant or reference (key of the item, &lt;code&gt;string&lt;/code&gt; in the &lt;code&gt;cJSON&lt;/code&gt; struct), so that it doesn&#39;t get freed by &lt;code&gt;cJSON_Delete&lt;/code&gt;. Using &lt;code&gt;cJSON_AddItemReferenceToArray&lt;/code&gt; an element can be added as a reference to another object, array or string. This means that &lt;code&gt;cJSON_Delete&lt;/code&gt; will not delete that items &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;valuestring&lt;/code&gt; properties, so no double frees are occurring if they are already used elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;If you want to take an item out of an object, use &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt;, it will return the detached item, so be sure to assign it to a pointer, otherwise you will have a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;Deleting items is done with &lt;code&gt;cJSON_DeleteItemFromObjectCaseSensitive&lt;/code&gt;. It works like &lt;code&gt;cJSON_DetachItemFromObjectCaseSensitive&lt;/code&gt; followed by &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also replace an item in an object in place. Either with &lt;code&gt;cJSON_ReplaceItemInObjectCaseSensitive&lt;/code&gt; using a key or with &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; given a pointer to an element. &lt;code&gt;cJSON_ReplaceItemViaPointer&lt;/code&gt; will return &lt;code&gt;0&lt;/code&gt; if it fails. What this does internally is to detach the old item, delete it and insert the new item in its place.&lt;/p&gt; &#xA;&lt;p&gt;To get the size of an object, you can use &lt;code&gt;cJSON_GetArraySize&lt;/code&gt;, this works because internally objects are stored as arrays.&lt;/p&gt; &#xA;&lt;p&gt;If you want to access an item in an object, use &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To iterate over an object, you can use the &lt;code&gt;cJSON_ArrayForEach&lt;/code&gt; macro the same way as for arrays.&lt;/p&gt; &#xA;&lt;p&gt;cJSON also provides convenient helper functions for quickly creating a new item and adding it to an object, like &lt;code&gt;cJSON_AddNullToObject&lt;/code&gt;. They return a pointer to the new item or &lt;code&gt;NULL&lt;/code&gt; if they failed.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing JSON&lt;/h3&gt; &#xA;&lt;p&gt;Given some JSON in a zero terminated string, you can parse it with &lt;code&gt;cJSON_Parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cJSON *json = cJSON_Parse(string);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Given some JSON in a string (whether zero terminated or not), you can parse it with &lt;code&gt;cJSON_ParseWithLength&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;cJSON *json = cJSON_ParseWithLength(string, buffer_length);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will parse the JSON and allocate a tree of &lt;code&gt;cJSON&lt;/code&gt; items that represents it. Once it returns, you are fully responsible for deallocating it after use with &lt;code&gt;cJSON_Delete&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The allocator used by &lt;code&gt;cJSON_Parse&lt;/code&gt; is &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; by default but can be changed (globally) with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If an error occurs a pointer to the position of the error in the input string can be accessed using &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt;. Note though that this can produce race conditions in multithreading scenarios, in that case it is better to use &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; with &lt;code&gt;return_parse_end&lt;/code&gt;. By default, characters in the input string that follow the parsed JSON will not be considered as an error.&lt;/p&gt; &#xA;&lt;p&gt;If you want more options, use &lt;code&gt;cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;. &lt;code&gt;return_parse_end&lt;/code&gt; returns a pointer to the end of the JSON in the input string or the position that an error occurs at (thereby replacing &lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; in a thread safe way). &lt;code&gt;require_null_terminated&lt;/code&gt;, if set to &lt;code&gt;1&lt;/code&gt; will make it an error if the input string contains data after the JSON.&lt;/p&gt; &#xA;&lt;p&gt;If you want more options giving buffer length, use &lt;code&gt;cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Printing JSON&lt;/h3&gt; &#xA;&lt;p&gt;Given a tree of &lt;code&gt;cJSON&lt;/code&gt; items, you can print them as a string using &lt;code&gt;cJSON_Print&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;char *string = cJSON_Print(json);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will allocate a string and print a JSON representation of the tree into it. Once it returns, you are fully responsible for deallocating it after use with your allocator. (usually &lt;code&gt;free&lt;/code&gt;, depends on what has been set with &lt;code&gt;cJSON_InitHooks&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cJSON_Print&lt;/code&gt; will print with whitespace for formatting. If you want to print without formatting, use &lt;code&gt;cJSON_PrintUnformatted&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a rough idea of how big your resulting string will be, you can use &lt;code&gt;cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)&lt;/code&gt;. &lt;code&gt;fmt&lt;/code&gt; is a boolean to turn formatting with whitespace on and off. &lt;code&gt;prebuffer&lt;/code&gt; specifies the first buffer size to use for printing. &lt;code&gt;cJSON_Print&lt;/code&gt; currently uses 256 bytes for its first buffer size. Once printing runs out of space, a new buffer is allocated and the old gets copied over before printing is continued.&lt;/p&gt; &#xA;&lt;p&gt;These dynamic buffer allocations can be completely avoided by using &lt;code&gt;cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)&lt;/code&gt;. It takes a buffer to a pointer to print to and its length. If the length is reached, printing will fail and it returns &lt;code&gt;0&lt;/code&gt;. In case of success, &lt;code&gt;1&lt;/code&gt; is returned. Note that you should provide 5 bytes more than is actually needed, because cJSON is not 100% accurate in estimating if the provided memory is enough.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;In this example we want to build and parse the following JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;Awesome 4K&#34;,&#xA;    &#34;resolutions&#34;: [&#xA;        {&#xA;            &#34;width&#34;: 1280,&#xA;            &#34;height&#34;: 720&#xA;        },&#xA;        {&#xA;            &#34;width&#34;: 1920,&#xA;            &#34;height&#34;: 1080&#xA;        },&#xA;        {&#xA;            &#34;width&#34;: 3840,&#xA;            &#34;height&#34;: 2160&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Printing&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s build the above JSON and print it to a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//create a monitor with a list of supported resolutions&#xA;//NOTE: Returns a heap allocated string, you are required to free it after use.&#xA;char *create_monitor(void)&#xA;{&#xA;    const unsigned int resolution_numbers[3][2] = {&#xA;        {1280, 720},&#xA;        {1920, 1080},&#xA;        {3840, 2160}&#xA;    };&#xA;    char *string = NULL;&#xA;    cJSON *name = NULL;&#xA;    cJSON *resolutions = NULL;&#xA;    cJSON *resolution = NULL;&#xA;    cJSON *width = NULL;&#xA;    cJSON *height = NULL;&#xA;    size_t index = 0;&#xA;&#xA;    cJSON *monitor = cJSON_CreateObject();&#xA;    if (monitor == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    name = cJSON_CreateString(&#34;Awesome 4K&#34;);&#xA;    if (name == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;    /* after creation was successful, immediately add it to the monitor,&#xA;     * thereby transferring ownership of the pointer to it */&#xA;    cJSON_AddItemToObject(monitor, &#34;name&#34;, name);&#xA;&#xA;    resolutions = cJSON_CreateArray();&#xA;    if (resolutions == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;    cJSON_AddItemToObject(monitor, &#34;resolutions&#34;, resolutions);&#xA;&#xA;    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)&#xA;    {&#xA;        resolution = cJSON_CreateObject();&#xA;        if (resolution == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToArray(resolutions, resolution);&#xA;&#xA;        width = cJSON_CreateNumber(resolution_numbers[index][0]);&#xA;        if (width == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToObject(resolution, &#34;width&#34;, width);&#xA;&#xA;        height = cJSON_CreateNumber(resolution_numbers[index][1]);&#xA;        if (height == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;        cJSON_AddItemToObject(resolution, &#34;height&#34;, height);&#xA;    }&#xA;&#xA;    string = cJSON_Print(monitor);&#xA;    if (string == NULL)&#xA;    {&#xA;        fprintf(stderr, &#34;Failed to print monitor.\n&#34;);&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor);&#xA;    return string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively we can use the &lt;code&gt;cJSON_Add...ToObject&lt;/code&gt; helper functions to make our lives a little easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;//NOTE: Returns a heap allocated string, you are required to free it after use.&#xA;char *create_monitor_with_helpers(void)&#xA;{&#xA;    const unsigned int resolution_numbers[3][2] = {&#xA;        {1280, 720},&#xA;        {1920, 1080},&#xA;        {3840, 2160}&#xA;    };&#xA;    char *string = NULL;&#xA;    cJSON *resolutions = NULL;&#xA;    size_t index = 0;&#xA;&#xA;    cJSON *monitor = cJSON_CreateObject();&#xA;&#xA;    if (cJSON_AddStringToObject(monitor, &#34;name&#34;, &#34;Awesome 4K&#34;) == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    resolutions = cJSON_AddArrayToObject(monitor, &#34;resolutions&#34;);&#xA;    if (resolutions == NULL)&#xA;    {&#xA;        goto end;&#xA;    }&#xA;&#xA;    for (index = 0; index &amp;lt; (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)&#xA;    {&#xA;        cJSON *resolution = cJSON_CreateObject();&#xA;&#xA;        if (cJSON_AddNumberToObject(resolution, &#34;width&#34;, resolution_numbers[index][0]) == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;&#xA;        if (cJSON_AddNumberToObject(resolution, &#34;height&#34;, resolution_numbers[index][1]) == NULL)&#xA;        {&#xA;            goto end;&#xA;        }&#xA;&#xA;        cJSON_AddItemToArray(resolutions, resolution);&#xA;    }&#xA;&#xA;    string = cJSON_Print(monitor);&#xA;    if (string == NULL)&#xA;    {&#xA;        fprintf(stderr, &#34;Failed to print monitor.\n&#34;);&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor);&#xA;    return string;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Parsing&lt;/h4&gt; &#xA;&lt;p&gt;In this example we will parse a JSON in the above format and check if the monitor supports a Full HD resolution while printing some diagnostic output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* return 1 if the monitor supports full hd, 0 otherwise */&#xA;int supports_full_hd(const char * const monitor)&#xA;{&#xA;    const cJSON *resolution = NULL;&#xA;    const cJSON *resolutions = NULL;&#xA;    const cJSON *name = NULL;&#xA;    int status = 0;&#xA;    cJSON *monitor_json = cJSON_Parse(monitor);&#xA;    if (monitor_json == NULL)&#xA;    {&#xA;        const char *error_ptr = cJSON_GetErrorPtr();&#xA;        if (error_ptr != NULL)&#xA;        {&#xA;            fprintf(stderr, &#34;Error before: %s\n&#34;, error_ptr);&#xA;        }&#xA;        status = 0;&#xA;        goto end;&#xA;    }&#xA;&#xA;    name = cJSON_GetObjectItemCaseSensitive(monitor_json, &#34;name&#34;);&#xA;    if (cJSON_IsString(name) &amp;amp;&amp;amp; (name-&amp;gt;valuestring != NULL))&#xA;    {&#xA;        printf(&#34;Checking monitor \&#34;%s\&#34;\n&#34;, name-&amp;gt;valuestring);&#xA;    }&#xA;&#xA;    resolutions = cJSON_GetObjectItemCaseSensitive(monitor_json, &#34;resolutions&#34;);&#xA;    cJSON_ArrayForEach(resolution, resolutions)&#xA;    {&#xA;        cJSON *width = cJSON_GetObjectItemCaseSensitive(resolution, &#34;width&#34;);&#xA;        cJSON *height = cJSON_GetObjectItemCaseSensitive(resolution, &#34;height&#34;);&#xA;&#xA;        if (!cJSON_IsNumber(width) || !cJSON_IsNumber(height))&#xA;        {&#xA;            status = 0;&#xA;            goto end;&#xA;        }&#xA;&#xA;        if ((width-&amp;gt;valuedouble == 1920) &amp;amp;&amp;amp; (height-&amp;gt;valuedouble == 1080))&#xA;        {&#xA;            status = 1;&#xA;            goto end;&#xA;        }&#xA;    }&#xA;&#xA;end:&#xA;    cJSON_Delete(monitor_json);&#xA;    return status;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that there are no NULL checks except for the result of &lt;code&gt;cJSON_Parse&lt;/code&gt; because &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; checks for &lt;code&gt;NULL&lt;/code&gt; inputs already, so a &lt;code&gt;NULL&lt;/code&gt; value is just propagated and &lt;code&gt;cJSON_IsNumber&lt;/code&gt; and &lt;code&gt;cJSON_IsString&lt;/code&gt; return &lt;code&gt;0&lt;/code&gt; if the input is &lt;code&gt;NULL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;h4&gt;Zero Character&lt;/h4&gt; &#xA;&lt;p&gt;cJSON doesn&#39;t support strings that contain the zero character &lt;code&gt;&#39;\0&#39;&lt;/code&gt; or &lt;code&gt;\u0000&lt;/code&gt;. This is impossible with the current API because strings are zero terminated.&lt;/p&gt; &#xA;&lt;h4&gt;Character Encoding&lt;/h4&gt; &#xA;&lt;p&gt;cJSON only supports UTF-8 encoded input. In most cases it doesn&#39;t reject invalid UTF-8 as input though, it just propagates it through as is. As long as the input doesn&#39;t contain invalid UTF-8, the output will always be valid UTF-8.&lt;/p&gt; &#xA;&lt;h4&gt;C Standard&lt;/h4&gt; &#xA;&lt;p&gt;cJSON is written in ANSI C (or C89, C90). If your compiler or C library doesn&#39;t follow this standard, correct behavior is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: ANSI C is not C++ therefore it shouldn&#39;t be compiled with a C++ compiler. You can compile it with a C compiler and link it with your C++ code however. Although compiling with a C++ compiler might work, correct behavior is not guaranteed.&lt;/p&gt; &#xA;&lt;h4&gt;Floating Point Numbers&lt;/h4&gt; &#xA;&lt;p&gt;cJSON does not officially support any &lt;code&gt;double&lt;/code&gt; implementations other than IEEE754 double precision floating point numbers. It might still work with other implementations but bugs with these will be considered invalid.&lt;/p&gt; &#xA;&lt;p&gt;The maximum length of a floating point literal that cJSON supports is currently 63 characters.&lt;/p&gt; &#xA;&lt;h4&gt;Deep Nesting Of Arrays And Objects&lt;/h4&gt; &#xA;&lt;p&gt;cJSON doesn&#39;t support arrays and objects that are nested too deeply because this would result in a stack overflow. To prevent this cJSON limits the depth to &lt;code&gt;CJSON_NESTING_LIMIT&lt;/code&gt; which is 1000 by default but can be changed at compile time.&lt;/p&gt; &#xA;&lt;h4&gt;Thread Safety&lt;/h4&gt; &#xA;&lt;p&gt;In general cJSON is &lt;strong&gt;not thread safe&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However it is thread safe under the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_GetErrorPtr&lt;/code&gt; is never used (the &lt;code&gt;return_parse_end&lt;/code&gt; parameter of &lt;code&gt;cJSON_ParseWithOpts&lt;/code&gt; can be used instead)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cJSON_InitHooks&lt;/code&gt; is only ever called before using cJSON in any threads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setlocale&lt;/code&gt; is never called before all calls to cJSON functions have returned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Case Sensitivity&lt;/h4&gt; &#xA;&lt;p&gt;When cJSON was originally created, it didn&#39;t follow the JSON standard and didn&#39;t make a distinction between uppercase and lowercase letters. If you want the correct, standard compliant, behavior, you need to use the &lt;code&gt;CaseSensitive&lt;/code&gt; functions where available.&lt;/p&gt; &#xA;&lt;h4&gt;Duplicate Object Members&lt;/h4&gt; &#xA;&lt;p&gt;cJSON supports parsing and printing JSON that contains objects that have multiple members with the same name. &lt;code&gt;cJSON_GetObjectItemCaseSensitive&lt;/code&gt; however will always only return the first one.&lt;/p&gt; &#xA;&lt;h1&gt;Enjoy cJSON!&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dave Gamble (original author)&lt;/li&gt; &#xA; &lt;li&gt;Max Bruckner and Alan Wang (current maintainer)&lt;/li&gt; &#xA; &lt;li&gt;and the other &lt;a href=&#34;https://raw.githubusercontent.com/DaveGamble/cJSON/master/CONTRIBUTORS.md&#34;&gt;cJSON contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>