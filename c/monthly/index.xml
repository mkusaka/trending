<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-01T01:46:53Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gojue/ecapture</title>
    <updated>2024-10-01T01:46:53Z</updated>
    <id>tag:github.com,2024-10-01:/gojue/ecapture</id>
    <link href="https://github.com/gojue/ecapture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-logo-400x400.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/README_CN.md&#34;&gt;简体中文&lt;/a&gt; | English | &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/README_JA.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/gojue/ecapture.svg?label=Stars&amp;amp;logo=github&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/gojue/ecapture?label=Forks&amp;amp;logo=github&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture/actions/workflows/code-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/gojue/ecapture/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gojue/ecapture/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/gojue/ecapture?display_name=tag&amp;amp;include_prereleases&amp;amp;sort=semver&#34; alt=&#34;Github Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;eCapture(旁观者): capture SSL/TLS text content without a CA certificate using eBPF.&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Supports Linux/Android kernel versions x86_64 4.18 and above, &lt;strong&gt;aarch64 5.5&lt;/strong&gt; and above. Need ROOT permission. Does not support Windows and macOS system.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- MarkdownTOC autolink=&#34;true&#34; --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#download&#34;&gt;Download&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#elf-binary-file&#34;&gt;ELF binary file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#docker-image&#34;&gt;Docker image&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#capture-openssl-text-content&#34;&gt;Capture openssl text content.&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#modules&#34;&gt;Modules&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#openssl-module&#34;&gt;OpenSSL Module&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#gotls-module&#34;&gt;GoTLS Module&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#bash-module&#34;&gt;Other Modules&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /MarkdownTOC --&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SSL/TLS plaintext capture, support openssl\libressl\boringssl\gnutls\nspr(nss) libraries.&lt;/li&gt; &#xA; &lt;li&gt;GoTLS plaintext support go tls library, which refers to encrypted communication in https/tls programs written in the golang language.&lt;/li&gt; &#xA; &lt;li&gt;bash audit, capture bash command for Host Security Audit.&lt;/li&gt; &#xA; &lt;li&gt;mysql query SQL audit, support mysqld 5.6\5.7\8.0, and mariadDB.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/images/ecapture-help-v0.7.4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;h3&gt;ELF binary file&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; support Linux/Android x86_64/aarch64.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Download ELF zip file &lt;a href=&#34;https://github.com/gojue/ecapture/releases&#34;&gt;release&lt;/a&gt; , unzip and use by command &lt;code&gt;sudo ecapture --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker image&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Linux only.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# pull docker image&#xA;docker pull gojue/ecapture:latest&#xA;# run&#xA;docker run --rm --privileged=true --net=host -v ${HOST_PATH}:${CONTAINER_PATH} gojue/ecapture ARGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://hub.docker.com/r/gojue/ecapture&#34;&gt;Docker Hub&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Capture openssl text content.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ecapture tls&#xA;2024-09-15T11:51:31Z INF AppName=&#34;eCapture(旁观者)&#34;&#xA;2024-09-15T11:51:31Z INF HomePage=https://ecapture.cc&#xA;2024-09-15T11:51:31Z INF Repository=https://github.com/gojue/ecapture&#xA;2024-09-15T11:51:31Z INF Author=&#34;CFC4N &amp;lt;cfc4ncs@gmail.com&amp;gt;&#34;&#xA;2024-09-15T11:51:31Z INF Description=&#34;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&#34;&#xA;2024-09-15T11:51:31Z INF Version=linux_arm64:0.8.6-20240915-d87ae48:5.15.0-113-generic&#xA;2024-09-15T11:51:31Z INF Listen=localhost:28256&#xA;2024-09-15T11:51:31Z INF eCapture running logs logger=&#xA;2024-09-15T11:51:31Z INF the file handler that receives the captured event eventCollector=&#xA;2024-09-15T11:51:31Z INF listen=localhost:28256&#xA;2024-09-15T11:51:31Z INF https server starting...You can update the configuration file via the HTTP interface.&#xA;2024-09-15T11:51:31Z WRN ========== module starting. ==========&#xA;2024-09-15T11:51:31Z INF Kernel Info=5.15.152 Pid=233698&#xA;2024-09-15T11:51:31Z INF BTF bytecode mode: CORE. btfMode=0&#xA;2024-09-15T11:51:31Z INF master key keylogger has been set. eBPFProgramType=Text keylogger=&#xA;2024-09-15T11:51:31Z INF module initialization. isReload=false moduleName=EBPFProbeOPENSSL&#xA;2024-09-15T11:51:31Z INF Module.Run()&#xA;2024-09-15T11:51:31Z WRN OpenSSL/BoringSSL version not found from shared library file, used default version OpenSSL Version=linux_default_3_0&#xA;2024-09-15T11:51:31Z INF Hook masterKey function ElfType=2 Functions=[&#34;SSL_get_wbio&#34;,&#34;SSL_in_before&#34;,&#34;SSL_do_handshake&#34;] binrayPath=/usr/lib/aarch64-linux-gnu/libssl.so.3&#xA;2024-09-15T11:51:31Z INF target all process.&#xA;2024-09-15T11:51:31Z INF target all users.&#xA;2024-09-15T11:51:31Z INF setupManagers eBPFProgramType=Text&#xA;2024-09-15T11:51:31Z INF BPF bytecode file is matched. bpfFileName=user/bytecode/openssl_3_0_0_kern_core.o&#xA;2024-09-15T11:51:32Z INF perfEventReader created mapSize(MB)=4&#xA;2024-09-15T11:51:32Z INF perfEventReader created mapSize(MB)=4&#xA;2024-09-15T11:51:32Z INF module started successfully. isReload=false moduleName=EBPFProbeOPENSSL&#xA;2024-09-15T11:51:53Z ??? UUID:233851_233851_curl_5_1_172.16.71.1:51837, Name:HTTP2Request, Type:2, Length:304&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;SETTINGS&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;WINDOW_UPDATE&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;HEADERS&#xA;header field &#34;:method&#34; = &#34;GET&#34;&#xA;header field &#34;:path&#34; = &#34;/&#34;&#xA;header field &#34;:scheme&#34; = &#34;https&#34;&#xA;header field &#34;:authority&#34; = &#34;google.com&#34;&#xA;header field &#34;user-agent&#34; = &#34;curl/7.81.0&#34;&#xA;header field &#34;accept&#34; = &#34;*/*&#34;&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;SETTINGS&#xA;&#xA;2024-09-15T11:51:53Z ??? UUID:233851_233851_curl_5_0_172.16.71.1:51837, Name:HTTP2Response, Type:4, Length:1160&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;SETTINGS&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;WINDOW_UPDATE&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;SETTINGS&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;HEADERS&#xA;header field &#34;:status&#34; = &#34;301&#34;&#xA;header field &#34;location&#34; = &#34;https://www.google.com/&#34;&#xA;header field &#34;content-type&#34; = &#34;text/html; charset=UTF-8&#34;&#xA;header field &#34;content-security-policy-report-only&#34; = &#34;object-src &#39;none&#39;;base-uri &#39;self&#39;;script-src &#39;nonce-qvZZ0XreBfeqRnUEV1WoYw&#39; &#39;strict-dynamic&#39; &#39;report-sample&#39; &#39;unsafe-eval&#39; &#39;unsafe-inline&#39; https: http:;report-uri https://csp.withgoogle.com/csp/gws/other-hp&#34;&#xA;header field &#34;date&#34; = &#34;Sun, 15 Sep 2024 11:51:52 GMT&#34;&#xA;header field &#34;expires&#34; = &#34;Tue, 15 Oct 2024 11:51:52 GMT&#34;&#xA;header field &#34;cache-control&#34; = &#34;public, max-age=2592000&#34;&#xA;header field &#34;server&#34; = &#34;gws&#34;&#xA;header field &#34;content-length&#34; = &#34;220&#34;&#xA;header field &#34;x-xss-protection&#34; = &#34;0&#34;&#xA;header field &#34;x-frame-options&#34; = &#34;SAMEORIGIN&#34;&#xA;header field &#34;alt-svc&#34; = &#34;h3=\&#34;:443\&#34;; ma=2592000,h3-29=\&#34;:443\&#34;; ma=2592000&#34;&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;PING&#xA;&#xA;Frame Type&#x9;=&amp;gt;&#x9;DATA&#xA;&amp;lt;HTML&amp;gt;&amp;lt;HEAD&amp;gt;&amp;lt;meta http-equiv=&#34;content-type&#34; content=&#34;text/html;charset=utf-8&#34;&amp;gt;&#xA;&amp;lt;TITLE&amp;gt;301 Moved&amp;lt;/TITLE&amp;gt;&amp;lt;/HEAD&amp;gt;&amp;lt;BODY&amp;gt;&#xA;&amp;lt;H1&amp;gt;301 Moved&amp;lt;/H1&amp;gt;&#xA;The document has moved&#xA;&amp;lt;A HREF=&#34;https://www.google.com/&#34;&amp;gt;here&amp;lt;/A&amp;gt;.&#xA;&amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;The eCapture tool comprises 8 modules that respectively support plaintext capture for TLS/SSL encryption libraries like OpenSSL, GnuTLS, NSPR, BoringSSL, and GoTLS. Additionally, it facilitates software audits for Bash, MySQL, and PostgreSQL applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bash capture bash command&lt;/li&gt; &#xA; &lt;li&gt;gnutls capture gnutls text content without CA cert for gnutls libraries.&lt;/li&gt; &#xA; &lt;li&gt;gotls Capturing plaintext communication from Golang programs encrypted with TLS/HTTPS.&lt;/li&gt; &#xA; &lt;li&gt;mysqld capture sql queries from mysqld 5.6/5.7/8.0 .&lt;/li&gt; &#xA; &lt;li&gt;nss capture nss/nspr encrypted text content without CA cert for nss/nspr libraries.&lt;/li&gt; &#xA; &lt;li&gt;postgres capture sql queries from postgres 10+.&lt;/li&gt; &#xA; &lt;li&gt;tls use to capture tls/ssl text content without CA cert. (Support openssl 1.0.x/1.1.x/3.0.x or newer). You can use &lt;code&gt;ecapture -h&lt;/code&gt; to view the list of subcommands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OpenSSL Module&lt;/h3&gt; &#xA;&lt;p&gt;eCapture search &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; file default, to search load directories of &lt;code&gt;SO&lt;/code&gt; file, and search &lt;code&gt;openssl&lt;/code&gt; shard libraries location. or you can use &lt;code&gt;--libssl&lt;/code&gt; flag to set shard library path.&lt;/p&gt; &#xA;&lt;p&gt;If target program is compile statically, you can set program path as &lt;code&gt;--libssl&lt;/code&gt; flag value directly。&lt;/p&gt; &#xA;&lt;p&gt;The OpenSSL module supports three capture modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pcap&lt;/code&gt;/&lt;code&gt;pcapng&lt;/code&gt; mode stores captured plaintext data in &lt;code&gt;pcap-NG&lt;/code&gt; format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keylog&lt;/code&gt;/&lt;code&gt;key&lt;/code&gt; mode saves the TLS handshake keys to a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt; mode directly captures plaintext data, either outputting to a specified file or printing to the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Pcap Mode&lt;/h4&gt; &#xA;&lt;p&gt;Supported TLS encrypted http &lt;code&gt;1.0/1.1/2.0&lt;/code&gt; over TCP, and http3 &lt;code&gt;QUIC&lt;/code&gt; protocol over UDP. You can specify &lt;code&gt;-m pcap&lt;/code&gt; or &lt;code&gt;-m pcapng&lt;/code&gt; and use it in conjunction with &lt;code&gt;--pcapfile&lt;/code&gt; and &lt;code&gt;-i&lt;/code&gt; parameters. The default value for &lt;code&gt;--pcapfile&lt;/code&gt; is &lt;code&gt;ecapture_openssl.pcapng&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ecapture tls -m pcap -w ecap.pcapng -i ens160&#xA;2024-09-15T06:54:12Z INF AppName=&#34;eCapture(旁观者)&#34;&#xA;2024-09-15T06:54:12Z INF HomePage=https://ecapture.cc&#xA;2024-09-15T06:54:12Z INF Repository=https://github.com/gojue/ecapture&#xA;2024-09-15T06:54:12Z INF Author=&#34;CFC4N &amp;lt;cfc4ncs@gmail.com&amp;gt;&#34;&#xA;2024-09-15T06:54:12Z INF Description=&#34;Capturing SSL/TLS plaintext without a CA certificate using eBPF. Supported on Linux/Android kernels for amd64/arm64.&#34;&#xA;2024-09-15T06:54:12Z INF Version=linux_arm64:0.8.6-20240915-d87ae48:5.15.0-113-generic&#xA;2024-09-15T06:54:12Z INF Listen=localhost:28256&#xA;2024-09-15T06:54:12Z INF eCapture running logs logger=&#xA;2024-09-15T06:54:12Z INF the file handler that receives the captured event eventCollector=&#xA;2024-09-15T06:54:12Z WRN ========== module starting. ==========&#xA;2024-09-15T06:54:12Z INF Kernel Info=5.15.152 Pid=230440&#xA;2024-09-15T06:54:12Z INF BTF bytecode mode: CORE. btfMode=0&#xA;2024-09-15T06:54:12Z INF listen=localhost:28256&#xA;2024-09-15T06:54:12Z INF module initialization. isReload=false moduleName=EBPFProbeOPENSSL&#xA;2024-09-15T06:54:12Z INF Module.Run()&#xA;2024-09-15T06:54:12Z INF https server starting...You can update the configuration file via the HTTP interface.&#xA;2024-09-15T06:54:12Z WRN OpenSSL/BoringSSL version not found from shared library file, used default version OpenSSL Version=linux_default_3_0&#xA;2024-09-15T06:54:12Z INF HOOK type:Openssl elf ElfType=2 IFindex=2 IFname=ens160 PcapFilter= binrayPath=/usr/lib/aarch64-linux-gnu/libssl.so.3&#xA;2024-09-15T06:54:12Z INF Hook masterKey function Functions=[&#34;SSL_get_wbio&#34;,&#34;SSL_in_before&#34;,&#34;SSL_do_handshake&#34;]&#xA;2024-09-15T06:54:12Z INF target all process.&#xA;2024-09-15T06:54:12Z INF target all users.&#xA;2024-09-15T06:54:12Z INF setupManagers eBPFProgramType=PcapNG&#xA;2024-09-15T06:54:12Z INF BPF bytecode file is matched. bpfFileName=user/bytecode/openssl_3_0_0_kern_core.o&#xA;2024-09-15T06:54:12Z INF packets saved into pcapng file. pcapng path=/home/ecapture/ecap.pcapng&#xA;2024-09-15T06:54:12Z INF perfEventReader created mapSize(MB)=4&#xA;2024-09-15T06:54:12Z INF perfEventReader created mapSize(MB)=4&#xA;2024-09-15T06:54:12Z INF module started successfully. isReload=false moduleName=EBPFProbeOPENSSL&#xA;2024-09-15T06:54:14Z INF packets saved into pcapng file. count=4&#xA;2024-09-15T06:54:16Z INF non-TLSv1.3 cipher suite found CLientRandom=f08e8d784962d1693c042f9fe266345507ccfaba58b823904a357f30dbfa1e71 CipherId=0&#xA;2024-09-15T06:54:16Z INF non-TLSv1.3 cipher suite found CLientRandom=f08e8d784962d1693c042f9fe266345507ccfaba58b823904a357f30dbfa1e71 CipherId=0&#xA;2024-09-15T06:54:16Z INF packets saved into pcapng file. count=183&#xA;2024-09-15T06:54:16Z INF CLIENT_RANDOM save success CLientRandom=f08e8d784962d1693c042f9fe266345507ccfaba58b823904a357f30dbfa1e71 TlsVersion=TLS1_2_VERSION bytes=176&#xA;2024-09-15T06:54:18Z INF packets saved into pcapng file. count=65&#xA;^C2024-09-15T06:54:18Z INF module close.&#xA;2024-09-15T06:54:18Z INF packets saved into pcapng file. count=3&#xA;2024-09-15T06:54:18Z INF packets saved into pcapng file. count=255&#xA;2024-09-15T06:54:18Z INF Module closed,message recived from Context&#xA;2024-09-15T06:54:18Z INF iModule module close&#xA;2024-09-15T06:54:18Z INF bye bye.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Used &lt;code&gt;Wireshark&lt;/code&gt; to open &lt;code&gt;ecap.pcapng&lt;/code&gt; file to view the plaintext data packets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ecapture tls -m pcap -i eth0 --pcapfile=ecapture.pcapng tcp port 443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command saves captured plaintext data packets as a pcapng file, which can be viewed using &lt;code&gt;Wireshark&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Keylog Mode&lt;/h4&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;-m keylog&lt;/code&gt; or &lt;code&gt;-m key&lt;/code&gt; and use it in conjunction with the &lt;code&gt;--keylogfile&lt;/code&gt; parameter, which defaults to &lt;code&gt;ecapture_masterkey.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The captured OpenSSL TLS &lt;code&gt;Master Secret&lt;/code&gt; information is saved to &lt;code&gt;--keylogfile&lt;/code&gt;. You can also enable &lt;code&gt;tcpdump&lt;/code&gt; packet capture and then use &lt;code&gt;Wireshark&lt;/code&gt; to open the file and set the &lt;code&gt;Master Secret&lt;/code&gt; path to view plaintext data packets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ecapture tls -m keylog -keylogfile=openssl_keylog.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also directly use the &lt;code&gt;tshark&lt;/code&gt; software for real-time decryption and display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tshark -o tls.keylog_file:ecapture_masterkey.log -Y http -T fields -e http.file_data -f &#34;port 443&#34; -i eth0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Text Mode&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo ecapture tls -m text&lt;/code&gt; will output all plaintext data packets. (Starting from v0.7.0, it no longer captures SSLKEYLOG information.)&lt;/p&gt; &#xA;&lt;h3&gt;GoTLS Module&lt;/h3&gt; &#xA;&lt;p&gt;Similar to the OpenSSL module.&lt;/p&gt; &#xA;&lt;h4&gt;check your server BTF config：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cfc4n@vm-server:~$# uname -r&#xA;4.18.0-305.3.1.el8.x86_64&#xA;cfc4n@vm-server:~$# cat /boot/config-`uname -r` | grep CONFIG_DEBUG_INFO_BTF&#xA;CONFIG_DEBUG_INFO_BTF=y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;gotls command&lt;/h4&gt; &#xA;&lt;p&gt;capture tls text context.&lt;/p&gt; &#xA;&lt;p&gt;Step 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ecapture gotls --elfpath=/home/cfc4n/go_https_client --hex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Step 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/home/cfc4n/go_https_client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;more help&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo ecapture gotls -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Modules&lt;/h3&gt; &#xA;&lt;p&gt;such as &lt;code&gt;bash\mysqld\postgres&lt;/code&gt; modules, you can use &lt;code&gt;ecapture -h&lt;/code&gt; to view the list of subcommands.&lt;/p&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Youtube video: &lt;a href=&#34;https://www.youtube.com/watch?v=CoDIjEQCvvA&#34; title=&#34;eCapture User Manual&#34;&gt;How to use eCapture v0.1.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@cfc4ncs/ecapture-supports-capturing-plaintext-of-golang-tls-https-traffic-f16874048269&#34;&gt;eCapture:supports capturing plaintext of Golang TLS/HTTPS traffic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/gojue/ecapture&#34;&gt;&lt;img src=&#34;https://starchart.cc/gojue/ecapture.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; &#xA;&lt;h1&gt;Compilation&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/gojue/ecapture/master/COMPILATION.md&#34;&gt;COMPILATION&lt;/a&gt; for details on compiling the eCapture source code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nginx/nginx</title>
    <updated>2024-10-01T01:46:53Z</updated>
    <id>tag:github.com,2024-10-01:/nginx/nginx</id>
    <link href="https://github.com/nginx/nginx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official NGINX Open Source repository.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/user-attachments/assets/9335b488-ffcc-4157-8364-2370a0b70ad0&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/user-attachments/assets/3a7eeb08-1133-47f5-859c-fad4f5a6a013&#34;&gt; &#xA; &lt;img alt=&#34;NGINX Banner&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;NGINX (pronounced &#34;engine x&#34; or &#34;en-jin-eks&#34;) is the world&#39;s most popular Web Server, high performance Load Balancer, Reverse Proxy, API Gateway and Content Cache.&lt;/p&gt; &#xA;&lt;p&gt;NGINX is free and open source software, distributed under the terms of a simplified &lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/LICENSE&#34;&gt;2-clause BSD-like license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enterprise distributions, commercial support and training are available from &lt;a href=&#34;https://www.f5.com/products/nginx&#34;&gt;F5, Inc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The goal of this README is to provide a basic, structured introduction to NGINX for novice users. Please refer to the &lt;a href=&#34;https://nginx.org/en/docs/&#34;&gt;full NGINX documentation&lt;/a&gt; for detailed information on &lt;a href=&#34;https://nginx.org/en/docs/install.html&#34;&gt;installing&lt;/a&gt;, &lt;a href=&#34;https://nginx.org/en/docs/configure.html&#34;&gt;building&lt;/a&gt;, &lt;a href=&#34;https://nginx.org/en/docs/dirindex.html&#34;&gt;configuring&lt;/a&gt;, &lt;a href=&#34;https://nginx.org/en/docs/debugging_log.html&#34;&gt;debugging&lt;/a&gt;, and more. These documentation pages also contain a more detailed &lt;a href=&#34;https://nginx.org/en/docs/beginners_guide.html&#34;&gt;Beginners Guide&lt;/a&gt;, How-Tos, &lt;a href=&#34;https://nginx.org/en/docs/dev/development_guide.html&#34;&gt;Development guide&lt;/a&gt;, and a complete module and &lt;a href=&#34;https://nginx.org/en/docs/dirindex.html&#34;&gt;directive reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#how-it-works&#34;&gt;How it works&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#modules&#34;&gt;Modules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#configurations&#34;&gt;Configurations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#runtime&#34;&gt;Runtime&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#downloading-and-installing&#34;&gt;Downloading and installing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#stable-and-mainline-binaries&#34;&gt;Stable and Mainline binaries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#linux-binary-installation-process&#34;&gt;Linux binary installation process&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#freebsd-installation-process&#34;&gt;FreeBSD installation process&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#windows-executables&#34;&gt;Windows executables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#dynamic-modules&#34;&gt;Dynamic modules&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#getting-started-with-nginx&#34;&gt;Getting started with NGINX&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#installing-ssl-certificates-and-enabling-tls-encryption&#34;&gt;Installing SSL certificates and enabling TLS encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#load-balancing&#34;&gt;Load Balancing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#rate-limiting&#34;&gt;Rate limiting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#content-caching&#34;&gt;Content caching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#building-from-source&#34;&gt;Building from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#installing-dependencies&#34;&gt;Installing dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#cloning-the-nginx-github-repository&#34;&gt;Cloning the NGINX GitHub repository&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#configuring-the-build&#34;&gt;Configuring the build&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#location-of-binary-and-installation&#34;&gt;Location of binary and installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#running-and-testing-the-installed-binary&#34;&gt;Running and testing the installed binary&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#asking-questions-and-reporting-issues&#34;&gt;Asking questions and reporting issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#contributing-code&#34;&gt;Contributing code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#additional-help-and-resources&#34;&gt;Additional help and resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;NGINX is installed software with binary packages available for all major operating systems and Linux distributions. See &lt;a href=&#34;https://nginx.org/en/#tested_os_and_platforms&#34;&gt;Tested OS and Platforms&lt;/a&gt; for a full list of compatible systems.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] While nearly all popular Linux-based operating systems are distributed with a community version of nginx, we highly advise installation and usage of official &lt;a href=&#34;https://nginx.org/en/linux_packages.html&#34;&gt;packages&lt;/a&gt; or sources from this repository. Doing so ensures that you&#39;re using the most recent release or source code, including the latest feature-set, fixes and security patches.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;p&gt;NGINX is comprised of individual modules, each extending core functionality by providing additional, configurable features. See &#34;Modules reference&#34; at the bottom of &lt;a href=&#34;https://nginx.org/en/docs/&#34;&gt;nginx documentation&lt;/a&gt; for a complete list of official modules.&lt;/p&gt; &#xA;&lt;p&gt;NGINX modules can be built and distributed as static or dynamic modules. Static modules are defined at build-time, compiled, and distributed in the resulting binaries. See &lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#dynamic-modules&#34;&gt;Dynamic Modules&lt;/a&gt; for more information on how they work, as well as, how to obtain, install, and configure them.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can issue the following command to see which static modules your NGINX binaries were built with:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nginx -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#configuring-the-build&#34;&gt;Configuring the build&lt;/a&gt; for information on how to include specific Static modules into your nginx build.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;p&gt;NGINX is highly flexible and configurable. Provisioning the software is achieved via text-based config file(s) accepting parameters called &#34;&lt;a href=&#34;https://nginx.org/en/docs/dirindex.html&#34;&gt;Directives&lt;/a&gt;&#34;. See &lt;a href=&#34;https://nginx.org/en/docs/beginners_guide.html#conf_structure&#34;&gt;Configuration File&#39;s Structure&lt;/a&gt; for a comprehensive description of how NGINX configuration files work.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The set of directives available to your distribution of NGINX is dependent on which &lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#modules&#34;&gt;modules&lt;/a&gt; have been made available to it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Runtime&lt;/h2&gt; &#xA;&lt;p&gt;Rather than running in a single, monolithic process, NGINX is architected to scale beyond Operating System process limitations by operating as a collection of processes. They include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &#34;master&#34; process that maintains worker processes, as well as, reads and evaluates configuration files.&lt;/li&gt; &#xA; &lt;li&gt;One or more &#34;worker&#34; processes that process data (eg. HTTP requests).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The number of &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#worker_processes&#34;&gt;worker processes&lt;/a&gt; is defined in the configuration file and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores. In most cases, the latter option optimally balances load across available system resources, as NGINX is designed to efficiently distribute work across all worker processes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Processes synchronize data through shared memory. For this reason, many NGINX directives require the allocation of shared memory zones. As an example, when configuring &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req&#34;&gt;rate limiting&lt;/a&gt;, connecting clients may need to be tracked in a &lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone&#34;&gt;common memory zone&lt;/a&gt; so all worker processes can know how many times a particular client has accessed the server in a span of time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Downloading and installing&lt;/h1&gt; &#xA;&lt;p&gt;Follow these steps to download and install precompiled NGINX binaries. You may also choose to &lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/#building-from-source&#34;&gt;build NGINX locally from source code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stable and Mainline binaries&lt;/h2&gt; &#xA;&lt;p&gt;NGINX binaries are built and distributed in two versions: stable and mainline. Stable binaries are built from stable branches and only contain critical fixes backported from the mainline version. Mainline binaries are built from the &lt;a href=&#34;https://github.com/nginx/nginx/tree/master&#34;&gt;master branch&lt;/a&gt; and contain the latest features and bugfixes. You&#39;ll need to &lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#choosing-between-a-stable-or-a-mainline-version&#34;&gt;decide which is appropriate for your purposes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Linux binary installation process&lt;/h2&gt; &#xA;&lt;p&gt;The NGINX binary installation process takes advantage of package managers native to specific Linux distributions. For this reason, first-time installations involve adding the official NGINX package repository to your system&#39;s package manager. Follow &lt;a href=&#34;https://nginx.org/en/linux_packages.html&#34;&gt;these steps&lt;/a&gt; to download, verify, and install NGINX binaries using the package manager appropriate for your Linux distribution.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrades&lt;/h3&gt; &#xA;&lt;p&gt;Future upgrades to the latest version can be managed using the same package manager without the need to manually download and verify binaries.&lt;/p&gt; &#xA;&lt;h2&gt;FreeBSD installation process&lt;/h2&gt; &#xA;&lt;p&gt;For more information on installing NGINX on FreeBSD system, visit &lt;a href=&#34;https://nginx.org/en/docs/install.html&#34;&gt;https://nginx.org/en/docs/install.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Windows executables&lt;/h2&gt; &#xA;&lt;p&gt;Windows executables for mainline and stable releases can be found on the main &lt;a href=&#34;https://nginx.org/en/download.html&#34;&gt;NGINX download page&lt;/a&gt;. Note that the current implementation of NGINX for Windows is at the Proof-of-Concept stage and should only be used for development and testing purposes. For additional information, please see &lt;a href=&#34;https://nginx.org/en/docs/windows.html&#34;&gt;nginx for Windows&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic modules&lt;/h2&gt; &#xA;&lt;p&gt;NGINX version 1.9.11 added support for &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#load_module&#34;&gt;Dynamic Modules&lt;/a&gt;. Unlike Static modules, dynamically built modules can be downloaded, installed, and configured after the core NGINX binaries have been built. &lt;a href=&#34;https://nginx.org/en/linux_packages.html#dynmodules&#34;&gt;Official dynamic module binaries&lt;/a&gt; are available from the same package repository as the core NGINX binaries described in previous steps.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] &lt;a href=&#34;https://github.com/nginx/njs&#34;&gt;NGINX JavaScript (njs)&lt;/a&gt;, is a popular NGINX dynamic module that enables the extension of core NGINX functionality using familiar JavaScript syntax.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If desired, dynamic modules can also be built statically into NGINX at compile time.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Getting started with NGINX&lt;/h1&gt; &#xA;&lt;p&gt;For a gentle introduction to NGINX basics, please see our &lt;a href=&#34;https://nginx.org/en/docs/beginners_guide.html&#34;&gt;Beginner’s Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing SSL certificates and enabling TLS encryption&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nginx.org/en/docs/http/configuring_https_servers.html&#34;&gt;Configuring HTTPS servers&lt;/a&gt; for a quick guide on how to enable secure traffic to your NGINX installation.&lt;/p&gt; &#xA;&lt;h2&gt;Load Balancing&lt;/h2&gt; &#xA;&lt;p&gt;For a quick start guide on configuring NGINX as a Load Balancer, please see &lt;a href=&#34;https://nginx.org/en/docs/http/load_balancing.html&#34;&gt;Using nginx as HTTP load balancer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Rate limiting&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://blog.nginx.org/blog/rate-limiting-nginx&#34;&gt;Rate Limiting with NGINX&lt;/a&gt; blog post for an overview of core concepts for provisioning NGINX as an API Gateway.&lt;/p&gt; &#xA;&lt;h2&gt;Content caching&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://blog.nginx.org/blog/nginx-caching-guide&#34;&gt;A Guide to Caching with NGINX and NGINX Plus&lt;/a&gt; blog post for an overview of how to use NGINX as a content cache (e.g. edge server of a content delivery network).&lt;/p&gt; &#xA;&lt;h1&gt;Building from source&lt;/h1&gt; &#xA;&lt;p&gt;The following steps can be used to build NGINX from source code available in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Installing dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Most Linux distributions will require several dependencies to be installed in order to build NGINX. The following instructions are specific to the &lt;code&gt;apt&lt;/code&gt; package manager, widely available on most Ubuntu/Debian distributions and their derivatives.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] It is always a good idea to update your package repository lists prior to installing new packages.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installing compiler and make utility&lt;/h3&gt; &#xA;&lt;p&gt;Use the following command to install the GNU C compiler and Make utility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install gcc make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing dependency libraries&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libpcre3-dev zlib1g-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This is the minimal set of dependency libraries needed to build NGINX with rewriting and gzip capabilities. Other dependencies may be required if you choose to build NGINX with additional modules. Monitor the output of the &lt;code&gt;configure&lt;/code&gt; command discussed in the following sections for information on which modules may be missing. For example, if you plan to use SSL certificates to encrypt traffic with TLS, you&#39;ll need to install the OpenSSL library. To do so, issue the following command.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install libssl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Cloning the NGINX GitHub repository&lt;/h2&gt; &#xA;&lt;p&gt;Using your preferred method, clone the NGINX repository into your development directory. See &lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;&gt;Cloning a GitHub Repository&lt;/a&gt; for additional help.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/nginx/nginx.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring the build&lt;/h2&gt; &#xA;&lt;p&gt;Prior to building NGINX, you must run the &lt;code&gt;configure&lt;/code&gt; script with &lt;a href=&#34;https://nginx.org/en/docs/configure.html&#34;&gt;appropriate flags&lt;/a&gt;. This will generate a Makefile in your NGINX source root directory that can then be used to compile NGINX with &lt;a href=&#34;https://nginx.org/en/docs/configure.html&#34;&gt;options specified during configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From the NGINX source code repository&#39;s root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto/configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Configuring the build without any flags will compile NGINX with the default set of options. Please refer to &lt;a href=&#34;https://nginx.org/en/docs/configure.html&#34;&gt;https://nginx.org/en/docs/configure.html&lt;/a&gt; for a full list of available build configuration options.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; script will generate a &lt;code&gt;Makefile&lt;/code&gt; in the NGINX source root directory upon successful execution. To compile NGINX into a binary, issue the following command from that same directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Location of binary and installation&lt;/h2&gt; &#xA;&lt;p&gt;After successful compilation, a binary will be generated at &lt;code&gt;&amp;lt;NGINX_SRC_ROOT_DIR&amp;gt;/objs/nginx&lt;/code&gt;. To install this binary, issue the following command from the source root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The binary will be installed into the &lt;code&gt;/usr/local/nginx/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running and testing the installed binary&lt;/h2&gt; &#xA;&lt;p&gt;To run the installed binary, issue the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo /usr/local/nginx/sbin/nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may test NGINX operation using &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output of which should start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Asking questions and reporting issues&lt;/h1&gt; &#xA;&lt;p&gt;We encourage you to engage with us.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nginx/nginx/discussions&#34;&gt;NGINX GitHub Discussions&lt;/a&gt;, is the go-to place to start asking questions and sharing your thoughts.&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://github.com/nginx/nginx/issues&#34;&gt;GitHub Issues&lt;/a&gt; page offers space to submit and discuss specific issues, report bugs, and suggest enhancements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing code&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; guide for information on how to contribute code.&lt;/p&gt; &#xA;&lt;h1&gt;Additional help and resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://blog.nginx.org/&#34;&gt;NGINX Community Blog&lt;/a&gt; for more tips, tricks and HOW-TOs related to NGINX and related projects.&lt;/li&gt; &#xA; &lt;li&gt;Access &lt;a href=&#34;https://nginx.org/&#34;&gt;nginx.org&lt;/a&gt;, your go-to source for all documentation, information and software related to the NGINX suite of projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://nginx.org/en/CHANGES&#34;&gt;changelog&lt;/a&gt; to keep track of updates.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nginx/nginx/master/LICENSE&#34;&gt;2-clause BSD-like license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Additional documentation available at: &lt;a href=&#34;https://nginx.org/en/docs&#34;&gt;https://nginx.org/en/docs&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mit-pdos/xv6-riscv</title>
    <updated>2024-10-01T01:46:53Z</updated>
    <id>tag:github.com,2024-10-01:/mit-pdos/xv6-riscv</id>
    <link href="https://github.com/mit-pdos/xv6-riscv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xv6 for RISC-V&lt;/p&gt;&lt;hr&gt;&lt;p&gt;xv6 is a re-implementation of Dennis Ritchie&#39;s and Ken Thompson&#39;s Unix Version 6 (v6). xv6 loosely follows the structure and style of v6, but is implemented for a modern RISC-V multiprocessor using ANSI C.&lt;/p&gt; &#xA;&lt;p&gt;ACKNOWLEDGMENTS&lt;/p&gt; &#xA;&lt;p&gt;xv6 is inspired by John Lions&#39;s Commentary on UNIX 6th Edition (Peer to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14, 2000)). See also &lt;a href=&#34;https://pdos.csail.mit.edu/6.1810/&#34;&gt;https://pdos.csail.mit.edu/6.1810/&lt;/a&gt;, which provides pointers to on-line resources for v6.&lt;/p&gt; &#xA;&lt;p&gt;The following people have made contributions: Russ Cox (context switching, locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin Clements.&lt;/p&gt; &#xA;&lt;p&gt;We are also grateful for the bug reports and patches contributed by Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide, phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire, Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung, Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653, Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.&lt;/p&gt; &#xA;&lt;p&gt;ERROR REPORTS&lt;/p&gt; &#xA;&lt;p&gt;Please send errors and suggestions to Frans Kaashoek and Robert Morris (kaashoek,&lt;a href=&#34;mailto:rtm@mit.edu&#34;&gt;rtm@mit.edu&lt;/a&gt;). The main purpose of xv6 is as a teaching operating system for MIT&#39;s 6.1810, so we are more interested in simplifications and clarifications than new features.&lt;/p&gt; &#xA;&lt;p&gt;BUILDING AND RUNNING XV6&lt;/p&gt; &#xA;&lt;p&gt;You will need a RISC-V &#34;newlib&#34; tool chain from &lt;a href=&#34;https://github.com/riscv/riscv-gnu-toolchain&#34;&gt;https://github.com/riscv/riscv-gnu-toolchain&lt;/a&gt;, and qemu compiled for riscv64-softmmu. Once they are installed, and in your shell search path, you can run &#34;make qemu&#34;.&lt;/p&gt;</summary>
  </entry>
</feed>