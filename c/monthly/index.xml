<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:35:05Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jart/cosmopolitan</title>
    <updated>2022-08-01T02:35:05Z</updated>
    <id>tag:github.com,2022-08-01:/jart/cosmopolitan</id>
    <link href="https://github.com/jart/cosmopolitan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;build-once run-anywhere c library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jart/cosmopolitan/master/usr/share/img/honeybadger.png&#34; alt=&#34;Cosmopolitan Honeybadger&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jart/cosmopolitan/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/jart/cosmopolitan/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cosmopolitan&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://justine.lol/cosmopolitan/index.html&#34;&gt;Cosmopolitan Libc&lt;/a&gt; makes C a build-once run-anywhere language, like Java, except it doesn&#39;t need an interpreter or virtual machine. Instead, it reconfigures stock GCC and Clang to output a POSIX-approved polyglot format that runs natively on Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS with the best possible performance and the tiniest footprint imaginable.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;For an introduction to this project, please read the &lt;a href=&#34;https://justine.lol/ape.html&#34;&gt;αcτµαlly pδrταblε εxεcµταblε&lt;/a&gt; blog post and &lt;a href=&#34;https://justine.lol/cosmopolitan/index.html&#34;&gt;cosmopolitan libc&lt;/a&gt; website. We also have &lt;a href=&#34;https://justine.lol/cosmopolitan/documentation.html&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re doing your development work on Linux or BSD then you need just five files to get started. Here&#39;s what you do on Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://justine.lol/cosmopolitan/cosmopolitan.zip&#xA;unzip cosmopolitan.zip&#xA;printf &#39;main() { printf(&#34;hello world\\n&#34;); }\n&#39; &amp;gt;hello.c&#xA;gcc -g -Os -static -nostdlib -nostdinc -fno-pie -no-pie -mno-red-zone \&#xA;  -fno-omit-frame-pointer -pg -mnop-mcount -mno-tls-direct-seg-refs \&#xA;  -o hello.com.dbg hello.c -fuse-ld=bfd -Wl,-T,ape.lds \&#xA;  -include cosmopolitan.h crt.o ape-no-modify-self.o cosmopolitan.a&#xA;objcopy -S -O binary hello.com.dbg hello.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You now have a portable program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hello.com&#xA;bash -c &#39;./hello.com&#39;  # zsh/fish workaround (we patched them in 2021)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since we used the &lt;code&gt;ape-no-modify-self.o&lt;/code&gt; bootloader (rather than &lt;code&gt;ape.o&lt;/code&gt;) your executable will not modify itself when it&#39;s run. What it&#39;ll instead do, is extract a 4kb program to &lt;code&gt;${TMPDIR:-${HOME:-.}}&lt;/code&gt; that maps your program into memory without needing to copy it. It&#39;s possible to install the APE loader systemwide as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# System-Wide APE Install&#xA;# for Linux, Darwin, and BSDs&#xA;# 1. Copies APE Loader to /usr/bin/ape&#xA;# 2. Registers w/ binfmt_misc too if Linux&#xA;ape/apeinstall.sh&#xA;&#xA;# System-Wide APE Uninstall&#xA;# for Linux, Darwin, and BSDs&#xA;ape/apeuninstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to convert APE binaries into the system-local format by using the &lt;code&gt;--assimilate&lt;/code&gt; flag. Please note that if binfmt_misc is in play, you&#39;ll need to unregister it temporarily before doing this, since the assimilate feature is part of the shell script header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ file hello.com&#xA;hello.com: DOS/MBR boot sector&#xA;./hello.com --assimilate&#xA;$ file hello.com&#xA;hello.com: ELF 64-bit LSB executable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that you&#39;re up and running with Cosmopolitan Libc and APE, here&#39;s some of the most important troubleshooting tools APE offers that you should know, in case you encounter any issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./hello.com --strace   # log system calls to stderr&#xA;./hello.com --ftrace   # log function calls to stderr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do you love tiny binaries? If so, you may not be happy with Cosmo adding heavyweight features like tracing to your binaries by default. In that case, you may want to consider using our build system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make -j8 MODE=tiny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will cause programs such as &lt;code&gt;hello.com&lt;/code&gt; and &lt;code&gt;life.com&lt;/code&gt; to shrink from 60kb in size to about 16kb. There&#39;s also a prebuilt amalgamation online &lt;a href=&#34;https://justine.lol/cosmopolitan/cosmopolitan-tiny.zip&#34;&gt;https://justine.lol/cosmopolitan/cosmopolitan-tiny.zip&lt;/a&gt; hosted on our download page &lt;a href=&#34;https://justine.lol/cosmopolitan/download.html&#34;&gt;https://justine.lol/cosmopolitan/download.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on MacOS you can install the GNU compiler collection for x86_64-elf via homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install x86_64-elf-gcc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in the above scripts just replace &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;objcopy&lt;/code&gt; with &lt;code&gt;x86_64-elf-gcc&lt;/code&gt; and &lt;code&gt;x86_64-elf-objcopy&lt;/code&gt; to compile your APE binary.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re developing on Windows then you need to download an x86_64-pc-linux-gnu toolchain beforehand. See the &lt;a href=&#34;https://justine.lol/cosmopolitan/windows-compiling.html&#34;&gt;Compiling on Windows&lt;/a&gt; tutorial. It&#39;s needed because the ELF object format is what makes universal binaries possible.&lt;/p&gt; &#xA;&lt;p&gt;Cosmopolitan officially only builds on Linux. However, one highly experimental (and currently broken) thing you could try, is building the entire cosmo repository from source using the cross9 toolchain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p o/third_party&#xA;rm -rf o/third_party/gcc&#xA;wget https://justine.lol/linux-compiler-on-windows/cross9.zip&#xA;unzip cross9.zip&#xA;mv cross9 o/third_party/gcc&#xA;build/bootstrap/make.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Source Builds&lt;/h2&gt; &#xA;&lt;p&gt;Cosmopolitan can be compiled from source on any Linux distro. First, you need to download or clone the repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://justine.lol/cosmopolitan/cosmopolitan.tar.gz&#xA;tar xf cosmopolitan.tar.gz  # see releases page&#xA;cd cosmopolitan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the entire repository and run all the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16&#xA;o//examples/hello.com&#xA;find o -name \*.com | xargs ls -rShal | less&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get an error running make.com then it&#39;s probably because you have WINE installed to &lt;code&gt;binfmt_misc&lt;/code&gt;. You can fix that by installing the the APE loader as an interpreter. It&#39;ll improve build performance too!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ape/apeinstall.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the Cosmopolitan repository is very large, you might only want to build a particular thing. Cosmopolitan&#39;s build config does a good job at having minimal deterministic builds. For example, if you wanted to build only hello.com then you could do that as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 o//examples/hello.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes it&#39;s desirable to build a subset of targets, without having to list out each individual one. You can do that by asking make to build a directory name. For example, if you wanted to build only the targets and subtargets of the chibicc package including its tests, you would say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 o//third_party/chibicc&#xA;o//third_party/chibicc/chibicc.com --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cosmopolitan provides a variety of build modes. For example, if you want really tiny binaries (as small as 12kb in size) then you&#39;d say:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 MODE=tiny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s some other build modes you can try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;build/bootstrap/make.com -j16 MODE=dbg       # asan + ubsan + debug&#xA;build/bootstrap/make.com -j16 MODE=asan      # production memory safety&#xA;build/bootstrap/make.com -j16 MODE=opt       # -march=native optimizations&#xA;build/bootstrap/make.com -j16 MODE=rel       # traditional release binaries&#xA;build/bootstrap/make.com -j16 MODE=optlinux  # optimal linux-only performance&#xA;build/bootstrap/make.com -j16 MODE=tinylinux # tiniest linux-only 4kb binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further details, see &lt;a href=&#34;https://raw.githubusercontent.com/jart/cosmopolitan/master/build/config.mk&#34;&gt;//build/config.mk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;GDB&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s the recommended &lt;code&gt;~/.gdbinit&lt;/code&gt; config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set host-charset UTF-8&#xA;set target-charset UTF-8&#xA;set target-wide-charset UTF-8&#xA;set osabi none&#xA;set complaints 0&#xA;set confirm off&#xA;set history save on&#xA;set history filename ~/.gdb_history&#xA;define asm&#xA;  layout asm&#xA;  layout reg&#xA;end&#xA;define src&#xA;  layout src&#xA;  layout reg&#xA;end&#xA;src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You normally run the &lt;code&gt;.com.dbg&lt;/code&gt; file under gdb. If you need to debug the &lt;code&gt;.com&lt;/code&gt; file itself, then you can load the debug symbols independently as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gdb foo.com -ex &#39;add-symbol-file foo.com.dbg 0x401000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support Vector&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Min Version&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Circa&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AMD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;K8 Venus&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2005&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Intel&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Core&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Vista&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.6.18&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2007&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mac OS X&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15.6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Funding for this project is crowdsourced using &lt;a href=&#34;https://github.com/sponsors/jart&#34;&gt;GitHub Sponsors&lt;/a&gt; and &lt;a href=&#34;https://www.patreon.com/jart&#34;&gt;Patreon&lt;/a&gt;. Your support is what makes this project possible. Thank you! We&#39;d also like to give special thanks to the following individuals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jdrumgoole&#34;&gt;Joe Drumgoole&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For publicly sponsoring our work at the highest tier.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>merbanan/rtl_433</title>
    <updated>2022-08-01T02:35:05Z</updated>
    <id>tag:github.com,2022-08-01:/merbanan/rtl_433</id>
    <link href="https://github.com/merbanan/rtl_433" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Program to decode radio transmissions from devices on the ISM bands (and other frequencies)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rtl_433&lt;/h1&gt; &#xA;&lt;p&gt;rtl_433 (despite the name) is a generic data receiver, mainly for the 433.92 MHz, 868 MHz (SRD), 315 MHz, 345 MHz, and 915 MHz ISM bands.&lt;/p&gt; &#xA;&lt;p&gt;The official source code is in the &lt;a href=&#34;https://github.com/merbanan/rtl_433/&#34;&gt;https://github.com/merbanan/rtl_433/&lt;/a&gt; repository. For more documentation and related projects see the &lt;a href=&#34;https://triq.org/&#34;&gt;https://triq.org/&lt;/a&gt; site.&lt;/p&gt; &#xA;&lt;p&gt;It works with &lt;a href=&#34;https://github.com/osmocom/rtl-sdr/&#34;&gt;RTL-SDR&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/pothosware/SoapySDR/&#34;&gt;SoapySDR&lt;/a&gt;. Actively tested and supported are Realtek RTL2832 based DVB dongles (using RTL-SDR) and LimeSDR (&lt;a href=&#34;https://www.crowdsupply.com/lime-micro/limesdr&#34;&gt;LimeSDR USB&lt;/a&gt; and &lt;a href=&#34;https://www.crowdsupply.com/lime-micro/limesdr-mini&#34;&gt;LimeSDR mini&lt;/a&gt; engineering samples kindly provided by &lt;a href=&#34;https://myriadrf.org/&#34;&gt;MyriadRf&lt;/a&gt;), PlutoSDR, HackRF One (using SoapySDR drivers), as well as SoapyRemote.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/merbanan/rtl_433/master/docs/screenshot.png&#34; alt=&#34;rtl_433 screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building / Installation&lt;/h2&gt; &#xA;&lt;p&gt;rtl_433 is written in portable C (C99 standard) and known to compile on Linux (also embedded), MacOS, and Windows systems. Older compilers and toolchains are supported as a key-goal. Low resource consumption and very few dependencies allow rtl_433 to run on embedded hardware like (repurposed) routers. Systems with 32-bit i686 and 64-bit x86-64 as well as (embedded) ARM, like the Raspberry Pi and PlutoSDR are well supported.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/merbanan/rtl_433/master/docs/BUILDING.md&#34;&gt;BUILDING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Debian (sid) or Ubuntu (19.10+), &lt;code&gt;apt-get install rtl-433&lt;/code&gt; for other distros check &lt;a href=&#34;https://repology.org/project/rtl-433/versions&#34;&gt;https://repology.org/project/rtl-433/versions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On FreeBSD, &lt;code&gt;pkg install rtl-433&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On MacOS, &lt;code&gt;brew install rtl_433&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Docker images with rtl_433 are available &lt;a href=&#34;https://github.com/hertzg/rtl_433_docker&#34;&gt;on the github page of hertzg&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to add support for unsupported sensors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/merbanan/rtl_433/master/docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;rtl_433 -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#x9;&#x9;= General options =&#xA;  [-V] Output the version string and exit&#xA;  [-v] Increase verbosity (can be used multiple times).&#xA;       -v : verbose, -vv : verbose decoders, -vvv : debug decoders, -vvvv : trace decoding).&#xA;  [-c &amp;lt;path&amp;gt;] Read config options from a file&#xA;&#x9;&#x9;= Tuner options =&#xA;  [-d &amp;lt;RTL-SDR USB device index&amp;gt; | :&amp;lt;RTL-SDR USB device serial&amp;gt; | &amp;lt;SoapySDR device query&amp;gt; | rtl_tcp | help]&#xA;  [-g &amp;lt;gain&amp;gt; | help] (default: auto)&#xA;  [-t &amp;lt;settings&amp;gt;] apply a list of keyword=value settings for SoapySDR devices&#xA;       e.g. -t &#34;antenna=A,bandwidth=4.5M,rfnotch_ctrl=false&#34;&#xA;  [-f &amp;lt;frequency&amp;gt;] Receive frequency(s) (default: 433920000 Hz)&#xA;  [-H &amp;lt;seconds&amp;gt;] Hop interval for polling of multiple frequencies (default: 600 seconds)&#xA;  [-p &amp;lt;ppm_error&amp;gt;] Correct rtl-sdr tuner frequency offset error (default: 0)&#xA;  [-s &amp;lt;sample rate&amp;gt;] Set sample rate (default: 250000 Hz)&#xA;&#x9;&#x9;= Demodulator options =&#xA;  [-R &amp;lt;device&amp;gt; | help] Enable only the specified device decoding protocol (can be used multiple times)&#xA;       Specify a negative number to disable a device decoding protocol (can be used multiple times)&#xA;  [-X &amp;lt;spec&amp;gt; | help] Add a general purpose decoder (prepend -R 0 to disable all decoders)&#xA;  [-Y auto | classic | minmax] FSK pulse detector mode.&#xA;  [-Y level=&amp;lt;dB level&amp;gt;] Manual detection level used to determine pulses (-1.0 to -30.0) (0=auto).&#xA;  [-Y minlevel=&amp;lt;dB level&amp;gt;] Manual minimum detection level used to determine pulses (-1.0 to -99.0).&#xA;  [-Y minsnr=&amp;lt;dB level&amp;gt;] Minimum SNR to determine pulses (1.0 to 99.0).&#xA;  [-Y autolevel] Set minlevel automatically based on average estimated noise.&#xA;  [-Y squelch] Skip frames below estimated noise level to reduce cpu load.&#xA;  [-Y ampest | magest] Choose amplitude or magnitude level estimator.&#xA;&#x9;&#x9;= Analyze/Debug options =&#xA;  [-a] Analyze mode. Print a textual description of the signal.&#xA;  [-A] Pulse Analyzer. Enable pulse analysis and decode attempt.&#xA;       Disable all decoders with -R 0 if you want analyzer output only.&#xA;  [-y &amp;lt;code&amp;gt;] Verify decoding of demodulated test data (e.g. &#34;{25}fb2dd58&#34;) with enabled devices&#xA;&#x9;&#x9;= File I/O options =&#xA;  [-S none | all | unknown | known] Signal auto save. Creates one file per signal.&#xA;       Note: Saves raw I/Q samples (uint8 pcm, 2 channel). Preferred mode for generating test files.&#xA;  [-r &amp;lt;filename&amp;gt; | help] Read data from input file instead of a receiver&#xA;  [-w &amp;lt;filename&amp;gt; | help] Save data stream to output file (a &#39;-&#39; dumps samples to stdout)&#xA;  [-W &amp;lt;filename&amp;gt; | help] Save data stream to output file, overwrite existing file&#xA;&#x9;&#x9;= Data output options =&#xA;  [-F kv | json | csv | mqtt | influx | syslog | trigger | null | help] Produce decoded output in given format.&#xA;       Append output to file with :&amp;lt;filename&amp;gt; (e.g. -F csv:log.csv), defaults to stdout.&#xA;       Specify host/port for syslog with e.g. -F syslog:127.0.0.1:1514&#xA;  [-M time[:&amp;lt;options&amp;gt;] | protocol | level | noise[:secs] | stats | bits | help] Add various meta data to each output.&#xA;  [-K FILE | PATH | &amp;lt;tag&amp;gt; | &amp;lt;key&amp;gt;=&amp;lt;tag&amp;gt;] Add an expanded token or fixed tag to every output line.&#xA;  [-C native | si | customary] Convert units in decoded output.&#xA;  [-n &amp;lt;value&amp;gt;] Specify number of samples to take (each sample is an I/Q pair)&#xA;  [-T &amp;lt;seconds&amp;gt;] Specify number of seconds to run, also 12:34 or 1h23m45s&#xA;  [-E hop | quit] Hop/Quit after outputting successful event(s)&#xA;  [-h] Output this usage help and exit&#xA;       Use -d, -g, -R, -X, -F, -M, -r, -w, or -W without argument for more help&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;= Supported device protocols =&#xA;    [01]  Silvercrest Remote Control&#xA;    [02]  Rubicson Temperature Sensor&#xA;    [03]  Prologue, FreeTec NC-7104, NC-7159-675 temperature sensor&#xA;    [04]  Waveman Switch Transmitter&#xA;    [06]* ELV EM 1000&#xA;    [07]* ELV WS 2000&#xA;    [08]  LaCrosse TX Temperature / Humidity Sensor&#xA;    [10]* Acurite 896 Rain Gauge&#xA;    [11]  Acurite 609TXC Temperature and Humidity Sensor&#xA;    [12]  Oregon Scientific Weather Sensor&#xA;    [13]* Mebus 433&#xA;    [14]* Intertechno 433&#xA;    [15]  KlikAanKlikUit Wireless Switch&#xA;    [16]  AlectoV1 Weather Sensor (Alecto WS3500 WS4500 Ventus W155/W044 Oregon)&#xA;    [17]  Cardin S466-TX2&#xA;    [18]  Fine Offset Electronics, WH2, WH5, Telldus Temperature/Humidity/Rain Sensor&#xA;    [19]  Nexus, FreeTec NC-7345, NX-3980, Solight TE82S, TFA 30.3209 temperature/humidity sensor&#xA;    [20]  Ambient Weather F007TH, TFA 30.3208.02, SwitchDocLabs F016TH temperature sensor&#xA;    [21]  Calibeur RF-104 Sensor&#xA;    [22]  X10 RF&#xA;    [23]  DSC Security Contact&#xA;    [24]* Brennenstuhl RCS 2044&#xA;    [25]  Globaltronics GT-WT-02 Sensor&#xA;    [26]  Danfoss CFR Thermostat&#xA;    [29]  Chuango Security Technology&#xA;    [30]  Generic Remote SC226x EV1527&#xA;    [31]  TFA-Twin-Plus-30.3049, Conrad KW9010, Ea2 BL999&#xA;    [32]  Fine Offset Electronics WH1080/WH3080 Weather Station&#xA;    [33]  WT450, WT260H, WT405H&#xA;    [34]  LaCrosse WS-2310 / WS-3600 Weather Station&#xA;    [35]  Esperanza EWS&#xA;    [36]  Efergy e2 classic&#xA;    [37]* Inovalley kw9015b, TFA Dostmann 30.3161 (Rain and temperature sensor)&#xA;    [38]  Generic temperature sensor 1&#xA;    [39]  WG-PB12V1 Temperature Sensor&#xA;    [40]  Acurite 592TXR Temp/Humidity, 5n1 Weather Station, 6045 Lightning, 899 Rain, 3N1, Atlas&#xA;    [41]  Acurite 986 Refrigerator / Freezer Thermometer&#xA;    [42]  HIDEKI TS04 Temperature, Humidity, Wind and Rain Sensor&#xA;    [43]  Watchman Sonic / Apollo Ultrasonic / Beckett Rocket oil tank monitor&#xA;    [44]  CurrentCost Current Sensor&#xA;    [45]  emonTx OpenEnergyMonitor&#xA;    [46]  HT680 Remote control&#xA;    [47]  Conrad S3318P, FreeTec NC-5849-913 temperature humidity sensor&#xA;    [48]  Akhan 100F14 remote keyless entry&#xA;    [49]  Quhwa&#xA;    [50]  OSv1 Temperature Sensor&#xA;    [51]  Proove / Nexa / KlikAanKlikUit Wireless Switch&#xA;    [52]  Bresser Thermo-/Hygro-Sensor 3CH&#xA;    [53]  Springfield Temperature and Soil Moisture&#xA;    [54]  Oregon Scientific SL109H Remote Thermal Hygro Sensor&#xA;    [55]  Acurite 606TX Temperature Sensor&#xA;    [56]  TFA pool temperature sensor&#xA;    [57]  Kedsum Temperature &amp;amp; Humidity Sensor, Pearl NC-7415&#xA;    [58]  Blyss DC5-UK-WH&#xA;    [59]  Steelmate TPMS&#xA;    [60]  Schrader TPMS&#xA;    [61]* LightwaveRF&#xA;    [62]* Elro DB286A Doorbell&#xA;    [63]  Efergy Optical&#xA;    [64]* Honda Car Key&#xA;    [67]  Radiohead ASK&#xA;    [68]  Kerui PIR / Contact Sensor&#xA;    [69]  Fine Offset WH1050 Weather Station&#xA;    [70]  Honeywell Door/Window Sensor, 2Gig DW10/DW11, RE208 repeater&#xA;    [71]  Maverick ET-732/733 BBQ Sensor&#xA;    [72]* RF-tech&#xA;    [73]  LaCrosse TX141-Bv2, TX141TH-Bv2, TX141-Bv3, TX141W, TX145wsdth, (TFA, ORIA) sensor&#xA;    [74]  Acurite 00275rm,00276rm Temp/Humidity with optional probe&#xA;    [75]  LaCrosse TX35DTH-IT, TFA Dostmann 30.3155 Temperature/Humidity sensor&#xA;    [76]  LaCrosse TX29IT, TFA Dostmann 30.3159.IT Temperature sensor&#xA;    [77]  Vaillant calorMatic VRT340f Central Heating Control&#xA;    [78]  Fine Offset Electronics, WH25, WH32B, WH24, WH65B, HP1000 Temperature/Humidity/Pressure Sensor&#xA;    [79]  Fine Offset Electronics, WH0530 Temperature/Rain Sensor&#xA;    [80]  IBIS beacon&#xA;    [81]  Oil Ultrasonic STANDARD FSK&#xA;    [82]  Citroen TPMS&#xA;    [83]  Oil Ultrasonic STANDARD ASK&#xA;    [84]  Thermopro TP11 Thermometer&#xA;    [85]  Solight TE44/TE66, EMOS E0107T, NX-6876-917&#xA;    [86]  Wireless Smoke and Heat Detector GS 558&#xA;    [87]  Generic wireless motion sensor&#xA;    [88]  Toyota TPMS&#xA;    [89]  Ford TPMS&#xA;    [90]  Renault TPMS&#xA;    [91]  inFactory, nor-tec, FreeTec NC-3982-913 temperature humidity sensor&#xA;    [92]  FT-004-B Temperature Sensor&#xA;    [93]  Ford Car Key&#xA;    [94]  Philips outdoor temperature sensor (type AJ3650)&#xA;    [95]  Schrader TPMS EG53MA4, PA66GF35&#xA;    [96]  Nexa&#xA;    [97]  Thermopro TP08/TP12/TP20 thermometer&#xA;    [98]  GE Color Effects&#xA;    [99]  X10 Security&#xA;    [100]  Interlogix GE UTC Security Devices&#xA;    [101]* Dish remote 6.3&#xA;    [102]  SimpliSafe Home Security System (May require disabling automatic gain for KeyPad decodes)&#xA;    [103]  Sensible Living Mini-Plant Moisture Sensor&#xA;    [104]  Wireless M-Bus, Mode C&amp;amp;T, 100kbps (-f 868950000 -s 1200000)&#xA;    [105]  Wireless M-Bus, Mode S, 32.768kbps (-f 868300000 -s 1000000)&#xA;    [106]* Wireless M-Bus, Mode R, 4.8kbps (-f 868330000)&#xA;    [107]* Wireless M-Bus, Mode F, 2.4kbps&#xA;    [108]  Hyundai WS SENZOR Remote Temperature Sensor&#xA;    [109]  WT0124 Pool Thermometer&#xA;    [110]  PMV-107J (Toyota) TPMS&#xA;    [111]  Emos TTX201 Temperature Sensor&#xA;    [112]  Ambient Weather TX-8300 Temperature/Humidity Sensor&#xA;    [113]  Ambient Weather WH31E Thermo-Hygrometer Sensor, EcoWitt WH40 rain gauge&#xA;    [114]  Maverick et73&#xA;    [115]  Honeywell ActivLink, Wireless Doorbell&#xA;    [116]  Honeywell ActivLink, Wireless Doorbell (FSK)&#xA;    [117]* ESA1000 / ESA2000 Energy Monitor&#xA;    [118]* Biltema rain gauge&#xA;    [119]  Bresser Weather Center 5-in-1&#xA;    [120]* Digitech XC-0324 temperature sensor&#xA;    [121]  Opus/Imagintronix XT300 Soil Moisture&#xA;    [122]* FS20&#xA;    [123]* Jansite TPMS Model TY02S&#xA;    [124]  LaCrosse/ELV/Conrad WS7000/WS2500 weather sensors&#xA;    [125]  TS-FT002 Wireless Ultrasonic Tank Liquid Level Meter With Temperature Sensor&#xA;    [126]  Companion WTR001 Temperature Sensor&#xA;    [127]  Ecowitt Wireless Outdoor Thermometer WH53/WH0280/WH0281A&#xA;    [128]  DirecTV RC66RX Remote Control&#xA;    [129]* Eurochron temperature and humidity sensor&#xA;    [130]  IKEA Sparsnas Energy Meter Monitor&#xA;    [131]  Microchip HCS200/HCS300 KeeLoq Hopping Encoder based remotes&#xA;    [132]  TFA Dostmann 30.3196 T/H outdoor sensor&#xA;    [133]  Rubicson 48659 Thermometer&#xA;    [134]  Holman Industries iWeather WS5029 weather station (newer PCM)&#xA;    [135]  Philips outdoor temperature sensor (type AJ7010)&#xA;    [136]  ESIC EMT7110 power meter&#xA;    [137]  Globaltronics QUIGG GT-TMBBQ-05&#xA;    [138]  Globaltronics GT-WT-03 Sensor&#xA;    [139]  Norgo NGE101&#xA;    [140]  Elantra2012 TPMS&#xA;    [141]  Auriol HG02832, HG05124A-DCF, Rubicson 48957 temperature/humidity sensor&#xA;    [142]  Fine Offset Electronics/ECOWITT WH51, SwitchDoc Labs SM23 Soil Moisture Sensor&#xA;    [143]  Holman Industries iWeather WS5029 weather station (older PWM)&#xA;    [144]  TBH weather sensor&#xA;    [145]  WS2032 weather station&#xA;    [146]  Auriol AFW2A1 temperature/humidity sensor&#xA;    [147]  TFA Drop Rain Gauge 30.3233.01&#xA;    [148]  DSC Security Contact (WS4945)&#xA;    [149]  ERT Standard Consumption Message (SCM)&#xA;    [150]* Klimalogg&#xA;    [151]  Visonic powercode&#xA;    [152]  Eurochron EFTH-800 temperature and humidity sensor&#xA;    [153]  Cotech 36-7959, SwitchDocLabs FT020T wireless weather station with USB&#xA;    [154]  Standard Consumption Message Plus (SCMplus)&#xA;    [155]  Fine Offset Electronics WH1080/WH3080 Weather Station (FSK)&#xA;    [156]  Abarth 124 Spider TPMS&#xA;    [157]  Missil ML0757 weather station&#xA;    [158]  Sharp SPC775 weather station&#xA;    [159]  Insteon&#xA;    [160]  ERT Interval Data Message (IDM)&#xA;    [161]  ERT Interval Data Message (IDM) for Net Meters&#xA;    [162]* ThermoPro-TX2 temperature sensor&#xA;    [163]  Acurite 590TX Temperature with optional Humidity&#xA;    [164]  Security+ 2.0 (Keyfob)&#xA;    [165]  TFA Dostmann 30.3221.02 T/H Outdoor Sensor&#xA;    [166]  LaCrosse Technology View LTV-WSDTH01 Breeze Pro Wind Sensor&#xA;    [167]  Somfy RTS&#xA;    [168]  Schrader TPMS SMD3MA4 (Subaru)&#xA;    [169]* Nice Flor-s remote control for gates&#xA;    [170]  LaCrosse Technology View LTV-WR1 Multi Sensor&#xA;    [171]  LaCrosse Technology View LTV-TH Thermo/Hygro Sensor&#xA;    [172]  Bresser Weather Center 6-in-1, 7-in-1 indoor, new 5-in-1, 3-in-1 wind gauge, Froggit WH6000, Ventus C8488A&#xA;    [173]  Bresser Weather Center 7-in-1&#xA;    [174]  EcoDHOME Smart Socket and MCEE Solar monitor&#xA;    [175]  LaCrosse Technology View LTV-R1, LTV-R3 Rainfall Gauge, LTV-W1/W2 Wind Sensor&#xA;    [176]  BlueLine Innovations Power Cost Monitor&#xA;    [177]  Burnhard BBQ thermometer&#xA;    [178]  Security+ (Keyfob)&#xA;    [179]  Cavius smoke, heat and water detector&#xA;    [180]  Jansite TPMS Model Solar&#xA;    [181]  Amazon Basics Meat Thermometer&#xA;    [182]  TFA Marbella Pool Thermometer&#xA;    [183]  Auriol AHFL temperature/humidity sensor&#xA;    [184]  Auriol AFT 77 B2 temperature sensor&#xA;    [185]  Honeywell CM921 Wireless Programmable Room Thermostat&#xA;    [186]  Hyundai TPMS (VDO)&#xA;    [187]  RojaFlex shutter and remote devices&#xA;    [188]  Marlec Solar iBoost+ sensors&#xA;    [189]  Somfy io-homecontrol&#xA;    [190]  Ambient Weather WH31L (FineOffset WH57) Lightning-Strike sensor&#xA;    [191]  Markisol, E-Motion, BOFU, Rollerhouse, BF-30x, BF-415 curtain remote&#xA;    [192]  Govee Water Leak Detector H5054, Door Contact Sensor B5023&#xA;    [193]  Clipsal CMR113 Cent-a-meter power meter&#xA;    [194]  Inkbird ITH-20R temperature humidity sensor&#xA;    [195]  RainPoint soil temperature and moisture sensor&#xA;    [196]  Atech-WS308 temperature sensor&#xA;    [197]  Acurite Grill/Meat Thermometer 01185M&#xA;    [198]* EnOcean ERP1&#xA;    [199]  Linear Megacode Garage/Gate Remotes&#xA;    [200]* Auriol 4-LD5661 temperature/rain sensor&#xA;    [201]  Unbranded SolarTPMS for trucks&#xA;    [202]  Funkbus / Instafunk (Berker, Gira, Jung)&#xA;    [203]  Porsche Boxster/Cayman TPMS&#xA;    [204]  Jasco/GE Choice Alert Security Devices&#xA;    [205]  Telldus weather station FT0385R sensors&#xA;    [206]  LaCrosse TX34-IT rain gauge&#xA;    [207]  SmartFire Proflame 2 remote control&#xA;    [208]  AVE TPMS&#xA;    [209]  SimpliSafe Gen 3 Home Security System&#xA;    [210]  Yale HSA (Home Security Alarm), YES-Alarmkit&#xA;    [211]  Regency Ceiling Fan Remote (-f 303.75M to 303.96M)&#xA;    [212]  Renault 0435R TPMS&#xA;    [213]  Fine Offset Electronics WS80 weather station&#xA;    [214]  EMOS E6016 weatherstation with DCF77&#xA;    [215]  Altronics X7064 temperature and humidity sensor&#xA;    [216]* ANT and ANT+ devices&#xA;    [217]  EMOS E6016 rain gauge&#xA;    [218]  Microchip HCS200/HCS300 KeeLoq Hopping Encoder based remotes (FSK)&#xA;    [219]  Fine Offset Electronics WH45 air quality sensor&#xA;&#xA;* Disabled by default, use -R n or a conf file to enable&#xA;&#xA;&#xA;&#x9;&#x9;= Input device selection =&#xA;&#x9;RTL-SDR device driver is available.&#xA;  [-d &amp;lt;RTL-SDR USB device index&amp;gt;] (default: 0)&#xA;  [-d :&amp;lt;RTL-SDR USB device serial (can be set with rtl_eeprom -s)&amp;gt;]&#xA;&#x9;To set gain for RTL-SDR use -g &amp;lt;gain&amp;gt; to set an overall gain in dB.&#xA;&#x9;SoapySDR device driver is available.&#xA;  [-d &#34;&#34;] Open default SoapySDR device&#xA;  [-d driver=rtlsdr] Open e.g. specific SoapySDR device&#xA;&#x9;To set gain for SoapySDR use -g ELEM=val,ELEM=val,... e.g. -g LNA=20,TIA=8,PGA=2 (for LimeSDR).&#xA;  [-d rtl_tcp[:[//]host[:port]] (default: localhost:1234)&#xA;&#x9;Specify host/port to connect to with e.g. -d rtl_tcp:127.0.0.1:1234&#xA;&#xA;&#xA;&#x9;&#x9;= Gain option =&#xA;  [-g &amp;lt;gain&amp;gt;] (default: auto)&#xA;&#x9;For RTL-SDR: gain in dB (&#34;0&#34; is auto).&#xA;&#x9;For SoapySDR: gain in dB for automatic distribution (&#34;&#34; is auto), or string of gain elements.&#xA;&#x9;E.g. &#34;LNA=20,TIA=8,PGA=2&#34; for LimeSDR.&#xA;&#xA;&#xA;&#x9;&#x9;= Flex decoder spec =&#xA;Use -X &amp;lt;spec&amp;gt; to add a flexible general purpose decoder.&#xA;&#xA;&amp;lt;spec&amp;gt; is &#34;key=value[,key=value...]&#34;&#xA;Common keys are:&#xA;&#x9;name=&amp;lt;name&amp;gt; (or: n=&amp;lt;name&amp;gt;)&#xA;&#x9;modulation=&amp;lt;modulation&amp;gt; (or: m=&amp;lt;modulation&amp;gt;)&#xA;&#x9;short=&amp;lt;short&amp;gt; (or: s=&amp;lt;short&amp;gt;)&#xA;&#x9;long=&amp;lt;long&amp;gt; (or: l=&amp;lt;long&amp;gt;)&#xA;&#x9;sync=&amp;lt;sync&amp;gt; (or: y=&amp;lt;sync&amp;gt;)&#xA;&#x9;reset=&amp;lt;reset&amp;gt; (or: r=&amp;lt;reset&amp;gt;)&#xA;&#x9;gap=&amp;lt;gap&amp;gt; (or: g=&amp;lt;gap&amp;gt;)&#xA;&#x9;tolerance=&amp;lt;tolerance&amp;gt; (or: t=&amp;lt;tolerance&amp;gt;)&#xA;&#x9;priority=&amp;lt;n&amp;gt; : run decoder only as fallback&#xA;where:&#xA;&amp;lt;name&amp;gt; can be any descriptive name tag you need in the output&#xA;&amp;lt;modulation&amp;gt; is one of:&#xA;&#x9;OOK_MC_ZEROBIT :  Manchester Code with fixed leading zero bit&#xA;&#x9;OOK_PCM :         Non Return to Zero coding (Pulse Code)&#xA;&#x9;OOK_RZ :          Return to Zero coding (Pulse Code)&#xA;&#x9;OOK_PPM :         Pulse Position Modulation&#xA;&#x9;OOK_PWM :         Pulse Width Modulation&#xA;&#x9;OOK_DMC :         Differential Manchester Code&#xA;&#x9;OOK_PIWM_RAW :    Raw Pulse Interval and Width Modulation&#xA;&#x9;OOK_PIWM_DC :     Differential Pulse Interval and Width Modulation&#xA;&#x9;OOK_MC_OSV1 :     Manchester Code for OSv1 devices&#xA;&#x9;FSK_PCM :         FSK Pulse Code Modulation&#xA;&#x9;FSK_PWM :         FSK Pulse Width Modulation&#xA;&#x9;FSK_MC_ZEROBIT :  Manchester Code with fixed leading zero bit&#xA;&amp;lt;short&amp;gt;, &amp;lt;long&amp;gt;, &amp;lt;sync&amp;gt; are nominal modulation timings in us,&#xA;&amp;lt;reset&amp;gt;, &amp;lt;gap&amp;gt;, &amp;lt;tolerance&amp;gt; are maximum modulation timings in us:&#xA;PCM/RZ  short: Nominal width of pulse [us]&#xA;         long: Nominal width of bit period [us]&#xA;PPM     short: Nominal width of &#39;0&#39; gap [us]&#xA;         long: Nominal width of &#39;1&#39; gap [us]&#xA;PWM     short: Nominal width of &#39;1&#39; pulse [us]&#xA;         long: Nominal width of &#39;0&#39; pulse [us]&#xA;         sync: Nominal width of sync pulse [us] (optional)&#xA;common    gap: Maximum gap size before new row of bits [us]&#xA;        reset: Maximum gap size before End Of Message [us]&#xA;    tolerance: Maximum pulse deviation [us] (optional).&#xA;Available options are:&#xA;&#x9;bits=&amp;lt;n&amp;gt; : only match if at least one row has &amp;lt;n&amp;gt; bits&#xA;&#x9;rows=&amp;lt;n&amp;gt; : only match if there are &amp;lt;n&amp;gt; rows&#xA;&#x9;repeats=&amp;lt;n&amp;gt; : only match if some row is repeated &amp;lt;n&amp;gt; times&#xA;&#x9;&#x9;use opt&amp;gt;=n to match at least &amp;lt;n&amp;gt; and opt&amp;lt;=n to match at most &amp;lt;n&amp;gt;&#xA;&#x9;invert : invert all bits&#xA;&#x9;reflect : reflect each byte (MSB first to MSB last)&#xA;&#x9;match=&amp;lt;bits&amp;gt; : only match if the &amp;lt;bits&amp;gt; are found&#xA;&#x9;preamble=&amp;lt;bits&amp;gt; : match and align at the &amp;lt;bits&amp;gt; preamble&#xA;&#x9;&#x9;&amp;lt;bits&amp;gt; is a row spec of {&amp;lt;bit count&amp;gt;}&amp;lt;bits as hex number&amp;gt;&#xA;&#x9;unique : suppress duplicate row output&#xA;&#xA;&#x9;countonly : suppress detailed row output&#xA;&#xA;E.g. -X &#34;n=doorbell,m=OOK_PWM,s=400,l=800,r=7000,g=1000,match={24}0xa9878c,repeats&amp;gt;=3&#34;&#xA;&#xA;&#xA;&#xA;&#x9;&#x9;= Output format option =&#xA;  [-F kv|json|csv|mqtt|influx|syslog|trigger|null] Produce decoded output in given format.&#xA;&#x9;Without this option the default is KV output. Use &#34;-F null&#34; to remove the default.&#xA;&#x9;Append output to file with :&amp;lt;filename&amp;gt; (e.g. -F csv:log.csv), defaults to stdout.&#xA;&#x9;Specify MQTT server with e.g. -F mqtt://localhost:1883&#xA;&#x9;Add MQTT options with e.g. -F &#34;mqtt://host:1883,opt=arg&#34;&#xA;&#x9;MQTT options are: user=foo, pass=bar, retain[=0|1], &amp;lt;format&amp;gt;[=topic]&#xA;&#x9;Supported MQTT formats: (default is all)&#xA;&#x9;  events: posts JSON event data&#xA;&#x9;  states: posts JSON state data&#xA;&#x9;  devices: posts device and sensor info in nested topics&#xA;&#x9;The topic string will expand keys like [/model]&#xA;&#x9;E.g. -F &#34;mqtt://localhost:1883,user=USERNAME,pass=PASSWORD,retain=0,devices=rtl_433[/id]&#34;&#xA;&#x9;With MQTT each rtl_433 instance needs a distinct driver selection. The MQTT Client-ID is computed from the driver string.&#xA;&#x9;If you use multiple RTL-SDR, perhaps set a serial and select by that (helps not to get the wrong antenna).&#xA;&#x9;Specify InfluxDB 2.0 server with e.g. -F &#34;influx://localhost:9999/api/v2/write?org=&amp;lt;org&amp;gt;&amp;amp;bucket=&amp;lt;bucket&amp;gt;,token=&amp;lt;authtoken&amp;gt;&#34;&#xA;&#x9;Specify InfluxDB 1.x server with e.g. -F &#34;influx://localhost:8086/write?db=&amp;lt;db&amp;gt;&amp;amp;p=&amp;lt;password&amp;gt;&amp;amp;u=&amp;lt;user&amp;gt;&#34;&#xA;&#x9;  Additional parameter -M time:unix:usec:utc for correct timestamps in InfluxDB recommended&#xA;&#x9;Specify host/port for syslog with e.g. -F syslog:127.0.0.1:1514&#xA;&#xA;&#xA;&#x9;&#x9;= Meta information option =&#xA;  [-M time[:&amp;lt;options&amp;gt;]|protocol|level|noise[:&amp;lt;secs&amp;gt;]|stats|bits] Add various metadata to every output line.&#xA;&#x9;Use &#34;time&#34; to add current date and time meta data (preset for live inputs).&#xA;&#x9;Use &#34;time:rel&#34; to add sample position meta data (preset for read-file and stdin).&#xA;&#x9;Use &#34;time:unix&#34; to show the seconds since unix epoch as time meta data.&#xA;&#x9;Use &#34;time:iso&#34; to show the time with ISO-8601 format (YYYY-MM-DD&#34;T&#34;hh:mm:ss).&#xA;&#x9;Use &#34;time:off&#34; to remove time meta data.&#xA;&#x9;Use &#34;time:usec&#34; to add microseconds to date time meta data.&#xA;&#x9;Use &#34;time:tz&#34; to output time with timezone offset.&#xA;&#x9;Use &#34;time:utc&#34; to output time in UTC.&#xA;&#x9;&#x9;(this may also be accomplished by invocation with TZ environment variable set).&#xA;&#x9;&#x9;&#34;usec&#34; and &#34;utc&#34; can be combined with other options, eg. &#34;time:unix:utc:usec&#34;.&#xA;&#x9;Use &#34;replay[:N]&#34; to replay file inputs at (N-times) realtime.&#xA;&#x9;Use &#34;protocol&#34; / &#34;noprotocol&#34; to output the decoder protocol number meta data.&#xA;&#x9;Use &#34;level&#34; to add Modulation, Frequency, RSSI, SNR, and Noise meta data.&#xA;&#x9;Use &#34;noise[:secs]&#34; to report estimated noise level at intervals (default: 10 seconds).&#xA;&#x9;Use &#34;stats[:[&amp;lt;level&amp;gt;][:&amp;lt;interval&amp;gt;]]&#34; to report statistics (default: 600 seconds).&#xA;&#x9;  level 0: no report, 1: report successful devices, 2: report active devices, 3: report all&#xA;&#x9;Use &#34;bits&#34; to add bit representation to code outputs (for debug).&#xA;&#xA;&#xA;&#x9;&#x9;= Read file option =&#xA;  [-r &amp;lt;filename&amp;gt;] Read data from input file instead of a receiver&#xA;&#x9;Parameters are detected from the full path, file name, and extension.&#xA;&#xA;&#x9;A center frequency is detected as (fractional) number suffixed with &#39;M&#39;,&#xA;&#x9;&#39;Hz&#39;, &#39;kHz&#39;, &#39;MHz&#39;, or &#39;GHz&#39;.&#xA;&#xA;&#x9;A sample rate is detected as (fractional) number suffixed with &#39;k&#39;,&#xA;&#x9;&#39;sps&#39;, &#39;ksps&#39;, &#39;Msps&#39;, or &#39;Gsps&#39;.&#xA;&#xA;&#x9;File content and format are detected as parameters, possible options are:&#xA;&#x9;&#39;cu8&#39;, &#39;cs16&#39;, &#39;cf32&#39; (&#39;IQ&#39; implied), and &#39;am.s16&#39;.&#xA;&#xA;&#x9;Parameters must be separated by non-alphanumeric chars and are case-insensitive.&#xA;&#x9;Overrides can be prefixed, separated by colon (&#39;:&#39;)&#xA;&#xA;&#x9;E.g. default detection by extension: path/filename.am.s16&#xA;&#x9;forced overrides: am:s16:path/filename.ext&#xA;&#xA;&#x9;Reading from pipes also support format options.&#xA;&#x9;E.g reading complex 32-bit float: CU32:-&#xA;&#xA;&#xA;&#x9;&#x9;= Write file option =&#xA;  [-w &amp;lt;filename&amp;gt;] Save data stream to output file (a &#39;-&#39; dumps samples to stdout)&#xA;  [-W &amp;lt;filename&amp;gt;] Save data stream to output file, overwrite existing file&#xA;&#x9;Parameters are detected from the full path, file name, and extension.&#xA;&#xA;&#x9;File content and format are detected as parameters, possible options are:&#xA;&#x9;&#39;cu8&#39;, &#39;cs8&#39;, &#39;cs16&#39;, &#39;cf32&#39; (&#39;IQ&#39; implied),&#xA;&#x9;&#39;am.s16&#39;, &#39;am.f32&#39;, &#39;fm.s16&#39;, &#39;fm.f32&#39;,&#xA;&#x9;&#39;i.f32&#39;, &#39;q.f32&#39;, &#39;logic.u8&#39;, &#39;ook&#39;, and &#39;vcd&#39;.&#xA;&#xA;&#x9;Parameters must be separated by non-alphanumeric chars and are case-insensitive.&#xA;&#x9;Overrides can be prefixed, separated by colon (&#39;:&#39;)&#xA;&#xA;&#x9;E.g. default detection by extension: path/filename.am.s16&#xA;&#x9;forced overrides: am:s16:path/filename.ext&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default receive mode, use the first device found, listen at 433.92 MHz at 250k sample rate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -C si&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default receive mode, also convert units to metric system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -f 868M -s 1024k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen at 868 MHz and 1024k sample rate.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -M hires -M level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report microsecond accurate timestamps and add reception levels (depending on gain).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -R 1 -R 8 -R 43&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable only specific decoders for desired devices.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -A&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable pulse analyzer. Summarizes the timings of pulses, gaps, and periods. Can be used with &lt;code&gt;-R 0&lt;/code&gt; to disable decoders.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -S all -T 120&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save all detected signals (&lt;code&gt;g###_###M_###k.cu8&lt;/code&gt;). Run for 2 minutes.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -K FILE -r file_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read a saved data file instead of receiving live data. Tag output with filenames.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -F json -M utc | mosquitto_pub -t home/rtl_433 -l&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will pipe the output to network as JSON formatted MQTT messages. A test MQTT client can be found in &lt;code&gt;examples/mqtt_rtl_433_test_client.py&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtl_433 -f 433.53M -f 434.02M -H 15&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Will poll two frequencies with 15 seconds hop interval.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Google Group&lt;/h2&gt; &#xA;&lt;p&gt;Join the Google group, rtl_433, for more information about rtl_433: &lt;a href=&#34;https://groups.google.com/forum/#!forum/rtl_433&#34;&gt;https://groups.google.com/forum/#!forum/rtl_433&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you see this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Kernel driver is active, or device is claimed by second instance of librtlsdr.&#xA;In the first case, please either detach or blacklist the kernel module&#xA;(dvb_usb_rtl28xxu), or enable automatic detaching at compile time.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo rmmod rtl2832_sdr dvb_usb_rtl28xxu rtl2832&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;blacklist dvb_usb_rtl28xxu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to /etc/modprobe.d/blacklist.conf&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Version numbering scheme used is year.month. We try to keep the API compatible between releases but focus is on maintainablity.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>raspberrypi/pico-sdk</title>
    <updated>2022-08-01T02:35:05Z</updated>
    <id>tag:github.com,2022-08-01:/raspberrypi/pico-sdk</id>
    <link href="https://github.com/raspberrypi/pico-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Raspberry Pi Pico SDK&lt;/h1&gt; &#xA;&lt;p&gt;The Raspberry Pi Pico SDK (henceforth the SDK) provides the headers, libraries and build system necessary to write programs for the RP2040-based devices such as the Raspberry Pi Pico in C, C++ or assembly language.&lt;/p&gt; &#xA;&lt;p&gt;The SDK is designed to provide an API and programming environment that is familiar both to non-embedded C developers and embedded C developers alike. A single program runs on the device at a time and starts with a conventional &lt;code&gt;main()&lt;/code&gt; method. Standard C/C++ libraries are supported along with C level libraries/APIs for accessing all of the RP2040&#39;s hardware include PIO (Programmable IO).&lt;/p&gt; &#xA;&lt;p&gt;Additionally the SDK provides higher level libraries for dealing with timers, synchronization, USB (TinyUSB) and multi-core programming along with various utilities.&lt;/p&gt; &#xA;&lt;p&gt;The SDK can be used to build anything from simple applications, to fully fledged runtime environments such as MicroPython, to low level software such as RP2040&#39;s on-chip bootrom itself.&lt;/p&gt; &#xA;&lt;p&gt;Additional libraries/APIs that are not yet ready for inclusion in the SDK can be found in &lt;a href=&#34;https://github.com/raspberrypi/pico-extras&#34;&gt;pico-extras&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-get-started&#34;&gt;Getting Started with the Raspberry Pi Pico&lt;/a&gt; for information on how to setup your hardware, IDE/environment and for how to build and debug software for the Raspberry Pi Pico and other RP2040-based devices.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-c-sdk&#34;&gt;Raspberry Pi Pico C/C++ SDK&lt;/a&gt; to learn more about programming using the SDK, to explore more advanced features, and for complete PDF-based API documentation.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rptl.io/pico-doxygen&#34;&gt;Online Raspberry Pi Pico SDK API docs&lt;/a&gt; for HTML-based API documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Example code&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/raspberrypi/pico-examples&#34;&gt;pico-examples&lt;/a&gt; for example code you can build.&lt;/p&gt; &#xA;&lt;h1&gt;Quick-start your own project&lt;/h1&gt; &#xA;&lt;p&gt;These instructions are extremely terse, and Linux-based only. For detailed steps, instructions for other platforms, and just in general, we recommend you see &lt;a href=&#34;https://rptl.io/pico-c-sdk&#34;&gt;Raspberry Pi Pico C/C++ SDK&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install CMake (at least version 3.13), and GCC cross compiler&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt install cmake gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up your project to point to use the Raspberry Pi Pico SDK&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Either by cloning the SDK locally (most common) :&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this Raspberry Pi Pico SDK repository&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy &lt;a href=&#34;https://github.com/raspberrypi/pico-sdk/raw/master/external/pico_sdk_import.cmake&#34;&gt;pico_sdk_import.cmake&lt;/a&gt; from the SDK into your project directory&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Set &lt;code&gt;PICO_SDK_PATH&lt;/code&gt; to the SDK location in your environment, or pass it (&lt;code&gt;-DPICO_SDK_PATH=&lt;/code&gt;) to cmake later.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize the SDK based on PICO_SDK_PATH&#xA;# note: this must happen before project()&#xA;include(pico_sdk_import.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Or with the Raspberry Pi Pico SDK as a submodule :&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Clone the SDK as a submodule called &lt;code&gt;pico-sdk&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize pico-sdk from submodule&#xA;# note: this must happen before project()&#xA;include(pico-sdk/pico_sdk_init.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Or with automatic download from GitHub :&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy &lt;a href=&#34;https://github.com/raspberrypi/pico-sdk/raw/master/external/pico_sdk_import.cmake&#34;&gt;pico_sdk_import.cmake&lt;/a&gt; from the SDK into your project directory&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize pico-sdk from GIT&#xA;# (note this can come from environment, CMake cache etc)&#xA;set(PICO_SDK_FETCH_FROM_GIT on)&#xA;&#xA;# pico_sdk_import.cmake is a single file copied from this SDK&#xA;# note: this must happen before project()&#xA;include(pico_sdk_import.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Or by cloning the SDK locally, but without copying &lt;code&gt;pico_sdk_import.cmake&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this Raspberry Pi Pico SDK repository&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Setup a &lt;code&gt;CMakeLists.txt&lt;/code&gt; like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 3.13)&#xA;&#xA;# initialize the SDK directly&#xA;include(/path/to/pico-sdk/pico_sdk_init.cmake)&#xA;&#xA;project(my_project)&#xA;&#xA;# initialize the Raspberry Pi Pico SDK&#xA;pico_sdk_init()&#xA;&#xA;# rest of your project&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write your code (see &lt;a href=&#34;https://github.com/raspberrypi/pico-examples&#34;&gt;pico-examples&lt;/a&gt; or the &lt;a href=&#34;https://rptl.io/pico-c-sdk&#34;&gt;Raspberry Pi Pico C/C++ SDK&lt;/a&gt; documentation for more information)&lt;/p&gt; &lt;p&gt;About the simplest you can do is a single source file (e.g. hello_world.c)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;#include &#34;pico/stdlib.h&#34;&#xA;&#xA;int main() {&#xA;    setup_default_uart();&#xA;    printf(&#34;Hello, world!\n&#34;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And add the following to your &lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;add_executable(hello_world&#xA;    hello_world.c&#xA;)&#xA;&#xA;# Add pico_stdlib library which aggregates commonly used features&#xA;target_link_libraries(hello_world pico_stdlib)&#xA;&#xA;# create map/bin/hex/uf2 file in addition to ELF.&#xA;pico_add_extra_outputs(hello_world)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note this example uses the default UART for &lt;em&gt;stdout&lt;/em&gt;; if you want to use the default USB see the &lt;a href=&#34;https://github.com/raspberrypi/pico-examples/tree/master/hello_world/usb&#34;&gt;hello-usb&lt;/a&gt; example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup a CMake build directory. For example, if not using an IDE:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ mkdir build&#xA;$ cd build&#xA;$ cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your target from the build directory you created.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make hello_world&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You now have &lt;code&gt;hello_world.elf&lt;/code&gt; to load via a debugger, or &lt;code&gt;hello_world.uf2&lt;/code&gt; that can be installed and run on your Raspberry Pi Pico via drag and drop.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>