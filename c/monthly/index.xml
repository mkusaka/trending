<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-01T01:46:19Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>veracrypt/VeraCrypt</title>
    <updated>2025-06-01T01:46:19Z</updated>
    <id>tag:github.com,2025-06-01:/veracrypt/VeraCrypt</id>
    <link href="https://github.com/veracrypt/VeraCrypt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Disk encryption with strong security based on TrueCrypt&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This archive contains the source code of VeraCrypt. It is based on the original TrueCrypt 7.1a with security enhancements and modifications.&lt;/p&gt; &#xA;&lt;h1&gt;Important&lt;/h1&gt; &#xA;&lt;p&gt;You may use the source code contained in this archive only if you accept and agree to the license terms contained in the file &#39;License.txt&#39;, which is included in this archive.&lt;/p&gt; &#xA;&lt;p&gt;Note that the license specifies, for example, that a derived work must not be called &#39;TrueCrypt&#39; or &#39;VeraCrypt&#39;&lt;/p&gt; &#xA;&lt;h1&gt;Contents&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#i-windows&#34;&gt;I. Windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#ii-linux-and-mac-os-x&#34;&gt;II. Linux and Mac OS X&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#iii-freebsd&#34;&gt;III. FreeBSD&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#iv-third-party-developers-contributors&#34;&gt;IV. Third-Party Developers (Contributors)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#v-legal-information&#34;&gt;V. Legal Information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/#vi-further-information&#34;&gt;VI. Further Information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;I. Windows&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements for Building VeraCrypt for Windows:&lt;/h2&gt; &#xA;&lt;p&gt;A detailed guide on how to build VeraCrypt on Windows can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/doc/html/CompilingGuidelineWin.html&#34;&gt;documentation&lt;/a&gt; in the repository and it is also available &lt;a href=&#34;https://veracrypt.jp/en/CompilingGuidelineWin.html&#34;&gt;online&lt;/a&gt; or on the &lt;a href=&#34;https://veracrypt.io/en/CompilingGuidelineWin.html&#34;&gt;mirror&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT:&lt;/p&gt; &#xA;&lt;p&gt;The 64-bit editions of Windows Vista and later versions of Windows, and in some cases (e.g. playback of HD DVD content) also the 32-bit editions do not allow the VeraCrypt driver to run without an appropriate digital signature. Therefore, all .sys files in official VeraCrypt binary packages are digitally signed with the digital certificate of the IDRIX, which was issued by GlobalSign certification authority. At the end of each official .exe and .sys file, there are embedded digital signatures and all related certificates (i.e. all certificates in the relevant certification chain, such as the certification authority certificates, CA-MS cross-certificate, and the IDRIX certificate).&lt;/p&gt; &#xA;&lt;p&gt;Keep this in mind if you compile VeraCrypt and compare your binaries with the official binaries. If your binaries are unsigned, the sizes of the official binaries will usually be approximately 10 KiB greater than the sizes of your binaries (there may be further differences if you use a different version of the compiler, or if you install a different or no service pack for Visual Studio, or different hotfixes for it, or if you use different versions of the required SDKs).&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for Signing and Packaging VeraCrypt for Windows:&lt;/h2&gt; &#xA;&lt;p&gt;First, create an environment variable &#39;WSDK81&#39; pointing to the Windows SDK for Windows 8.1 installation directory.&lt;/p&gt; &#xA;&lt;p&gt;The folder &#34;Signing&#34; contains a batch file (sign.bat) that will sign all VeraCrypt components using a code signing certificate present on the certificate store and build the final installation setup and MSI package. The batch file assumes that the code signing certificate is issued by GlobalSign. This is the case for IDRIX&#39;s certificate. If yours is issued by another CA, then you should put its intermediate certificates in the &#34;Signing&#34; folder and modify sign.bat accordingly.&lt;/p&gt; &#xA;&lt;p&gt;To generate MSI packages, WiX Toolset v3.11 must be installed.&lt;/p&gt; &#xA;&lt;h2&gt;VeraCrypt EFI Boot Loader:&lt;/h2&gt; &#xA;&lt;p&gt;VeraCrypt source code contains pre-built EFI binaries under src\Boot\EFI. The source code of VeraCrypt EFI Boot Loader is licensed under LGPL and it is available at &lt;a href=&#34;https://github.com/veracrypt/VeraCrypt-DCS&#34;&gt;https://github.com/veracrypt/VeraCrypt-DCS&lt;/a&gt;. For build instructions, please refer to the file src\Boot\EFI\Readme.txt.&lt;/p&gt; &#xA;&lt;h1&gt;II. Linux and Mac OS X&lt;/h1&gt; &#xA;&lt;p&gt;A detailed guide on how to build VeraCrypt on Linux can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/doc/html/CompilingGuidelineLinux.html&#34;&gt;documentation&lt;/a&gt; in the repository and it is also available &lt;a href=&#34;https://veracrypt.jp/en/CompilingGuidelineLinux.html&#34;&gt;online&lt;/a&gt; or on the &lt;a href=&#34;https://veracrypt.io/en/CompilingGuidelineLinux.html&#34;&gt;mirror&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements for Building VeraCrypt for Linux and Mac OS X:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;GNU C++ Compiler 4.0 or compatible&lt;/li&gt; &#xA; &lt;li&gt;Apple Xcode or Xcode command line tools (Mac OS X only)&lt;/li&gt; &#xA; &lt;li&gt;YASM 1.3.0 or newer (Linux only, x86/x64 architecture only)&lt;/li&gt; &#xA; &lt;li&gt;pkg-config&lt;/li&gt; &#xA; &lt;li&gt;wxWidgets 3.0 shared library and header files installed or wxWidgets 3.0 library source code (available at &lt;a href=&#34;https://www.wxwidgets.org&#34;&gt;https://www.wxwidgets.org&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;FUSE library and header files (available at &lt;a href=&#34;https://github.com/libfuse/libfuse&#34;&gt;https://github.com/libfuse/libfuse&lt;/a&gt; and &lt;a href=&#34;https://macfuse.github.io/&#34;&gt;https://macfuse.github.io/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;PCSC-lite library and header files (available at &lt;a href=&#34;https://github.com/LudovicRousseau/PCSC&#34;&gt;https://github.com/LudovicRousseau/PCSC&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions for Building VeraCrypt for Linux and Mac OS X:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the current directory to the root of the VeraCrypt source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have no wxWidgets shared library installed, run the following command to configure the wxWidgets static library for VeraCrypt and to build it:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ make WXSTATIC=1 WX_ROOT=/usr/src/wxWidgets wxbuild&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The variable &lt;code&gt;WX_ROOT&lt;/code&gt; must point to the location of the source code of the wxWidgets library. Output files will be placed in the &#39;./wxrelease/&#39; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To build VeraCrypt, run the following command:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ make&lt;/code&gt;&lt;/p&gt; &lt;p&gt;or if you have no wxWidgets shared library installed:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ make WXSTATIC=1&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If successful, the VeraCrypt executable should be located in the directory &#39;Main&#39;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By default, a universal executable supporting both graphical and text user interface (through the switch --text) is built. On Linux, a console-only executable, which requires no GUI library, can be built using the &#39;NOGUI&#39; parameter:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ make NOGUI=1 WXSTATIC=1 WX_ROOT=/usr/src/wxWidgets wxbuild&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ make NOGUI=1 WXSTATIC=1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On MacOSX, building a console-only executable is not supported.&lt;/p&gt; &#xA;&lt;h2&gt;Mac OS X specifics:&lt;/h2&gt; &#xA;&lt;p&gt;Under MacOSX, the latest installed SDK is used by default. To use a different version of the SDK when building using make, you can export the environment variable VC_OSX_SDK:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ export VC_OSX_SDK=13.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For development dependencies management, you can use &lt;a href=&#34;https://brew.sh&#34;&gt;homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ brew install pkg-config yasm wxwidgets&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You also need system dependencies&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ brew install --cask macfuse packages&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing dependencies via brew, you can build a local development build&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ ./src/Build/build_veracrypt_macosx.sh -b&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to build the package, you must pass &lt;code&gt;-p&lt;/code&gt; to the build script above. The built executable will be in &lt;code&gt;.src/Main&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to build from sources, or without homebrew, pkg-config and packages must be installed.&lt;/p&gt; &#xA;&lt;p&gt;Get pkg-config from &lt;a href=&#34;https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz&#34;&gt;https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz&lt;/a&gt; and compile using the following commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ CFLAGS=&#34;-Wno-int-conversion&#34; CXXFLAGS=&#34;-Wno-int-conversion&#34; ./configure --with-internal-glib&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ sudo make install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;After making sure pkg-config is available, download and install macFUSE from &lt;a href=&#34;https://macfuse.github.io/&#34;&gt;https://macfuse.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/veracrypt/VeraCrypt/master/src/Build/build_veracrypt_macosx.sh&#34;&gt;build_veracrypt_macosx.sh&lt;/a&gt; script performs the full build of VeraCrypt including the creation of the installer pkg. It expects to find the wxWidgets 3.2.5 sources at the same level as where you put VeraCrypt sources (i.e. if &#34;src&#34; path is &#34;/Users/joe/Projects/VeraCrypt/src&#34; then wxWidgets should be at &#34;/Users/joe/Projects/wxWidgets-3.2.5&#34;)&lt;/p&gt; &#xA;&lt;p&gt;The make build process uses Code Signing certificates whose ID is specified in src/Main/Main.make (look for lines containing &#34;Developer ID Application&#34; and &#34;Developer ID Installer&#34;). You&#39;ll have to modify these lines to put the ID of your Code Signing certificates or comment them out if you don&#39;t have one.&lt;/p&gt; &#xA;&lt;p&gt;Because of incompatibility issues with macFUSE, the SDK 10.9 generates a VeraCrypt binary that has issues communicating with the macFUSE kernel extension. Thus, we recommend using a different macOS SDK version for building VeraCrypt.&lt;/p&gt; &#xA;&lt;p&gt;The Packages installer that is used for the VeraCrypt official build has been notarized by IDRIX and it is available at &lt;a href=&#34;https://github.com/idrassi/packages/releases&#34;&gt;https://github.com/idrassi/packages/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;III. FreeBSD&lt;/h1&gt; &#xA;&lt;p&gt;FreeBSD is supported starting from version 11. The build requirements and instructions are the same as Linux except that gmake should be used instead of make.&lt;/p&gt; &#xA;&lt;h1&gt;IV. Third-Party Developers (Contributors)&lt;/h1&gt; &#xA;&lt;p&gt;If you intend to implement a feature, please contact us first to make sure:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;That the feature has not been implemented (we may have already implemented it, but haven&#39;t released the code yet).&lt;/li&gt; &#xA; &lt;li&gt;That the feature is acceptable.&lt;/li&gt; &#xA; &lt;li&gt;Whether we need the help of third-party developers with implementing the feature.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Information on how to contact us can be found at: &lt;a href=&#34;https://veracrypt.jp/&#34;&gt;https://veracrypt.jp/&lt;/a&gt; &lt;a href=&#34;https://veracrypt.io/&#34;&gt;https://veracrypt.io/&lt;/a&gt; (mirror)&lt;/p&gt; &#xA;&lt;h1&gt;V. Legal Information&lt;/h1&gt; &#xA;&lt;h2&gt;Copyright Information&lt;/h2&gt; &#xA;&lt;p&gt;This software as a whole:&lt;br&gt; Copyright (c) 2025 AM Crypto. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Portions of this software:&lt;br&gt; Copyright (c) 2025 AM Crypto. All rights reserved. Copyright (c) 2013-2025 IDRIX. All rights reserved.&lt;br&gt; Copyright (c) 2003-2012 TrueCrypt Developers Association. All rights reserved.&lt;br&gt; Copyright (c) 1998-2000 Paul Le Roux. All rights reserved.&lt;br&gt; Copyright (c) 1998-2008 Brian Gladman, Worcester, UK. All rights reserved.&lt;br&gt; Copyright (c) 1995-2023 Jean-loup Gailly and Mark Adler.&lt;br&gt; Copyright (c) 2016 Disk Cryptography Services for EFI (DCS), Alex Kolotnikov&lt;br&gt; Copyright (c) 1999-2023 Dieter Baron and Thomas Klausner.&lt;br&gt; Copyright (c) 2013, Alexey Degtyarev. All rights reserved.&lt;br&gt; Copyright (c) 1999-2016 Jack Lloyd. All rights reserved.&lt;br&gt; Copyright (c) 2013-2019 Stephan Mueller &lt;a href=&#34;mailto:smueller@chronox.de&#34;&gt;smueller@chronox.de&lt;/a&gt;&lt;br&gt; Copyright (c) 1999-2023 Igor Pavlov&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see the legal notices attached to parts of the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Trademark Information&lt;/h2&gt; &#xA;&lt;p&gt;Any trademarks contained in the source code, binaries, and/or in the documentation, are the sole property of their respective owners.&lt;/p&gt; &#xA;&lt;h1&gt;VI. Further Information&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://veracrypt.jp&#34;&gt;https://veracrypt.jp&lt;/a&gt; &lt;a href=&#34;https://veracrypt.io&#34;&gt;https://veracrypt.io&lt;/a&gt; (mirror)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>freebsd/freebsd-src</title>
    <updated>2025-06-01T01:46:19Z</updated>
    <id>tag:github.com,2025-06-01:/freebsd/freebsd-src</id>
    <link href="https://github.com/freebsd/freebsd-src" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The FreeBSD src tree publish-only repository. Experimenting with &#39;simple&#39; pull requests....&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;FreeBSD Source:&lt;/h2&gt; &#xA;&lt;p&gt;This is the top level of the FreeBSD source directory.&lt;/p&gt; &#xA;&lt;p&gt;FreeBSD is an operating system used to power modern servers, desktops, and embedded platforms. A large community has continually developed it for more than thirty years. Its advanced networking, security, and storage features have made FreeBSD the platform of choice for many of the busiest web sites and most pervasive embedded networking and storage devices.&lt;/p&gt; &#xA;&lt;p&gt;For copyright information, please see &lt;a href=&#34;https://raw.githubusercontent.com/freebsd/freebsd-src/main/COPYRIGHT&#34;&gt;the file COPYRIGHT&lt;/a&gt; in this directory. Additional copyright information also exists for some sources in this tree - please see the specific source directories for more information.&lt;/p&gt; &#xA;&lt;p&gt;The Makefile in this directory supports a number of targets for building components (or all) of the FreeBSD source tree. See build(7), config(8), &lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/cutting-edge/#makeworld&#34;&gt;FreeBSD handbook on building userland&lt;/a&gt;, and &lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/kernelconfig/&#34;&gt;Handbook for kernels&lt;/a&gt; for more information, including setting make(1) variables.&lt;/p&gt; &#xA;&lt;p&gt;For information on the CPU architectures and platforms supported by FreeBSD, see the &lt;a href=&#34;https://www.freebsd.org/platforms/&#34;&gt;FreeBSD website&#39;s Platforms page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For official FreeBSD bootable images, see the &lt;a href=&#34;https://download.freebsd.org/ftp/releases/ISO-IMAGES/&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Source Roadmap:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Directory&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bin&lt;/td&gt; &#xA;   &lt;td&gt;System/user commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cddl&lt;/td&gt; &#xA;   &lt;td&gt;Various commands and libraries under the Common Development and Distribution License.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contrib&lt;/td&gt; &#xA;   &lt;td&gt;Packages contributed by 3rd parties.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;crypto&lt;/td&gt; &#xA;   &lt;td&gt;Cryptography stuff (see &lt;a href=&#34;https://raw.githubusercontent.com/freebsd/freebsd-src/main/crypto/README&#34;&gt;crypto/README&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;etc&lt;/td&gt; &#xA;   &lt;td&gt;Template files for /etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gnu&lt;/td&gt; &#xA;   &lt;td&gt;Commands and libraries under the GNU General Public License (GPL) or Lesser General Public License (LGPL). Please see &lt;a href=&#34;https://raw.githubusercontent.com/freebsd/freebsd-src/main/gnu/COPYING&#34;&gt;gnu/COPYING&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/freebsd/freebsd-src/main/gnu/COPYING.LIB&#34;&gt;gnu/COPYING.LIB&lt;/a&gt; for more information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;include&lt;/td&gt; &#xA;   &lt;td&gt;System include files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kerberos5&lt;/td&gt; &#xA;   &lt;td&gt;Kerberos5 (Heimdal) package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lib&lt;/td&gt; &#xA;   &lt;td&gt;System libraries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;libexec&lt;/td&gt; &#xA;   &lt;td&gt;System daemons.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;release&lt;/td&gt; &#xA;   &lt;td&gt;Release building Makefile &amp;amp; associated tools.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rescue&lt;/td&gt; &#xA;   &lt;td&gt;Build system for statically linked /rescue utilities.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sbin&lt;/td&gt; &#xA;   &lt;td&gt;System commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;secure&lt;/td&gt; &#xA;   &lt;td&gt;Cryptographic libraries and commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;share&lt;/td&gt; &#xA;   &lt;td&gt;Shared resources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stand&lt;/td&gt; &#xA;   &lt;td&gt;Boot loader sources.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sys&lt;/td&gt; &#xA;   &lt;td&gt;Kernel sources (see &lt;a href=&#34;https://raw.githubusercontent.com/freebsd/freebsd-src/main/sys/README.md&#34;&gt;sys/README.md&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;targets&lt;/td&gt; &#xA;   &lt;td&gt;Support for experimental &lt;code&gt;DIRDEPS_BUILD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tests&lt;/td&gt; &#xA;   &lt;td&gt;Regression tests which can be run by Kyua. See &lt;a href=&#34;https://raw.githubusercontent.com/freebsd/freebsd-src/main/tests/README&#34;&gt;tests/README&lt;/a&gt; for additional information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tools&lt;/td&gt; &#xA;   &lt;td&gt;Utilities for regression testing and miscellaneous tasks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usr.bin&lt;/td&gt; &#xA;   &lt;td&gt;User commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;usr.sbin&lt;/td&gt; &#xA;   &lt;td&gt;System administration commands.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For information on synchronizing your source tree with one or more of the FreeBSD Project&#39;s development branches, please see &lt;a href=&#34;https://docs.freebsd.org/en/books/handbook/cutting-edge/#current-stable&#34;&gt;FreeBSD Handbook&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>n64decomp/sm64</title>
    <updated>2025-06-01T01:46:19Z</updated>
    <id>tag:github.com,2025-06-01:/n64decomp/sm64</id>
    <link href="https://github.com/n64decomp/sm64" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Super Mario 64 decompilation, brought to you by a bunch of clever folks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Super Mario 64&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This repo contains a full decompilation of Super Mario 64 of the following releases: Japan (jp), North America (us), Europe (eu), Shindou (sh) and iQue Player (cn).&lt;/li&gt; &#xA; &lt;li&gt;Naming and documentation of the source code and data structures are in progress.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It builds the following ROMs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;sm64.jp.z64 &lt;code&gt;sha1: 8a20a5c83d6ceb0f0506cfc9fa20d8f438cafe51&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sm64.us.z64 &lt;code&gt;sha1: 9bef1128717f958171a4afac3ed78ee2bb4e86ce&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sm64.eu.z64 &lt;code&gt;sha1: 4ac5721683d0e0b6bbb561b58a71740845dceea9&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sm64.sh.z64 &lt;code&gt;sha1: 3f319ae697533a255a1003d09202379d78d5a2e0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;sm64.cn.z64 &lt;code&gt;sha1: 2e1db2780985a1f068077dc0444b685f39cd90ec&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repo does not include all assets necessary for compiling the ROMs. A prior copy of the game is required to extract the assets.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start (for Ubuntu)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install prerequisites: &lt;code&gt;sudo apt install -y binutils-mips-linux-gnu build-essential git pkgconf python3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo from within Linux: &lt;code&gt;git clone https://github.com/n64decomp/sm64.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Place a Super Mario 64 ROM called &lt;code&gt;baserom.&amp;lt;VERSION&amp;gt;.z64&lt;/code&gt; into the project folder for asset extraction, where &lt;code&gt;VERSION&lt;/code&gt; can be &lt;code&gt;jp&lt;/code&gt;, &lt;code&gt;us&lt;/code&gt;, &lt;code&gt;eu&lt;/code&gt;, &lt;code&gt;sh&lt;/code&gt;, or &lt;code&gt;cn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to build. Specify the version through &lt;code&gt;make VERSION=&amp;lt;VERSION&amp;gt;&lt;/code&gt;. Add &lt;code&gt;-j4&lt;/code&gt; to improve build speed (hardware dependent).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Ensure the repo path length does not exceed 255 characters. Long path names result in build errors.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Install WSL and a distro of your choice following &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10&#34;&gt;Windows Subsystem for Linux Installation Guide for Windows 10.&lt;/a&gt; We recommend either Debian or Ubuntu 18.04 Linux distributions under WSL. Note: WSL1 does not currently support Ubuntu 20.04.&lt;/p&gt; &#xA;&lt;p&gt;Next, clone the SM64 repo from within the Linux shell: &lt;code&gt;git clone https://github.com/n64decomp/sm64.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then continue following the directions in the &lt;a href=&#34;https://raw.githubusercontent.com/n64decomp/sm64/master/#linux&#34;&gt;Linux&lt;/a&gt; installation section below.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;There are 3 steps to set up a working build.&lt;/p&gt; &#xA;&lt;h4&gt;Step 1: Install dependencies&lt;/h4&gt; &#xA;&lt;p&gt;The build system has the following package requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;binutils-mips&lt;/li&gt; &#xA; &lt;li&gt;pkgconf&lt;/li&gt; &#xA; &lt;li&gt;python3 &amp;gt;= 3.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dependency installation instructions for common Linux distros are provided below:&lt;/p&gt; &#xA;&lt;h5&gt;Debian / Ubuntu&lt;/h5&gt; &#xA;&lt;p&gt;To install build dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install -y binutils-mips-linux-gnu build-essential git pkgconf python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Arch Linux&lt;/h5&gt; &#xA;&lt;p&gt;To install build dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S base-devel python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the following AUR packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/mips64-elf-binutils&#34;&gt;mips64-elf-binutils&lt;/a&gt; (AUR)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Other Linux distributions&lt;/h5&gt; &#xA;&lt;p&gt;Most modern Linux distributions should have equivalent packages to the other two listed above. You may have to use a different version of GNU binutils. Listed below are fully compatible binutils distributions with support in the makefile, and examples of distros that offer them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mips64-elf-&lt;/code&gt; (Arch AUR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mips-linux-gnu-&lt;/code&gt; (Ubuntu and other Debian-based distros)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mips64-linux-gnu-&lt;/code&gt; (RHEL/CentOS/Fedora)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may also use &lt;a href=&#34;https://raw.githubusercontent.com/n64decomp/sm64/master/#docker-installation&#34;&gt;Docker&lt;/a&gt; to handle installing an image with minimal dependencies.&lt;/p&gt; &#xA;&lt;h4&gt;Step 2: Copy baserom(s) for asset extraction&lt;/h4&gt; &#xA;&lt;p&gt;For each version (jp/us/eu/sh/cn) for which you want to build a ROM, put an existing ROM at &lt;code&gt;./baserom.&amp;lt;VERSION&amp;gt;.z64&lt;/code&gt; for asset extraction.&lt;/p&gt; &#xA;&lt;h5&gt;Step 3: Build the ROM&lt;/h5&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build the ROM (defaults to &lt;code&gt;VERSION=us&lt;/code&gt;). Other examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make VERSION=jp -j4       # build (J) version instead with 4 jobs&#xA;make VERSION=eu COMPARE=0 # build (EU) version but do not compare ROM hashes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resulting artifacts can be found in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The full list of configurable variables are listed below, with the default being the first listed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;VERSION&lt;/code&gt;: &lt;code&gt;jp&lt;/code&gt;, &lt;code&gt;us&lt;/code&gt;, &lt;code&gt;eu&lt;/code&gt;, &lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;cn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GRUCODE&lt;/code&gt;: &lt;code&gt;f3d_old&lt;/code&gt;, &lt;code&gt;f3d_new&lt;/code&gt;, &lt;code&gt;f3dex&lt;/code&gt;, &lt;code&gt;f3dex2&lt;/code&gt;, &lt;code&gt;f3dzex&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COMPARE&lt;/code&gt;: &lt;code&gt;1&lt;/code&gt; (compare ROM hash), &lt;code&gt;0&lt;/code&gt; (do not compare ROM hash)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NON_MATCHING&lt;/code&gt;: Use functionally equivalent C implementations for non-matchings. Also will avoid instances of undefined behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CROSS&lt;/code&gt;: Cross-compiler tool prefix (Example: &lt;code&gt;mips64-elf-&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;With macOS, you may either use Homebrew or &lt;a href=&#34;https://raw.githubusercontent.com/n64decomp/sm64/master/#docker-installation&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;h4&gt;Step 1: Install dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; and the following dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew update&#xA;brew install coreutils make pkg-config tehzz/n64-dev/mips64-elf-binutils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2: Copy baserom(s) for asset extraction&lt;/h4&gt; &#xA;&lt;p&gt;For each version (jp/us/eu/sh/cn) for which you want to build a ROM, put an existing ROM at &lt;code&gt;./baserom.&amp;lt;VERSION&amp;gt;.z64&lt;/code&gt; for asset extraction.&lt;/p&gt; &#xA;&lt;h5&gt;Step 3: Build the ROM&lt;/h5&gt; &#xA;&lt;p&gt;Use Homebrew&#39;s GNU make because the version included with macOS is too old.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gmake VERSION=jp -j4       # build (J) version instead with 4 jobs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Create Docker image&lt;/h4&gt; &#xA;&lt;p&gt;After installing and starting Docker, create the docker image. This only needs to be done once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t sm64 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build&lt;/h4&gt; &#xA;&lt;p&gt;To build, mount the local filesystem into the Docker container and build the ROM with &lt;code&gt;docker run sm64 make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;macOS example for (U):&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm --mount type=bind,source=&#34;$(pwd)&#34;,destination=/sm64 sm64 make VERSION=us -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Linux example for (U):&lt;/h5&gt; &#xA;&lt;p&gt;For a Linux host, Docker needs to be instructed which user should own the output files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm --mount type=bind,source=&#34;$(pwd)&#34;,destination=/sm64 --user $UID:$GID sm64 make VERSION=us -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resulting artifacts can be found in the &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;sm64&#xA;├── actors: object behaviors, geo layout, and display lists&#xA;├── asm: handwritten assembly code, rom header&#xA;│   └── non_matchings: asm for non-matching sections&#xA;├── assets: animation and demo data&#xA;│   ├── anims: animation data&#xA;│   └── demos: demo data&#xA;├── bin: C files for ordering display lists and textures&#xA;├── build: output directory&#xA;├── data: behavior scripts, misc. data&#xA;├── doxygen: documentation infrastructure&#xA;├── enhancements: example source modifications&#xA;├── include: header files&#xA;├── levels: level scripts, geo layout, and display lists&#xA;├── lib: SDK library code&#xA;├── rsp: audio and Fast3D RSP assembly code&#xA;├── sound: sequences, sound samples, and sound banks&#xA;├── src: C source code for game&#xA;│   ├── audio: audio code&#xA;│   ├── buffers: stacks, heaps, and task buffers&#xA;│   ├── engine: script processing engines and utils&#xA;│   ├── game: behaviors and rest of game source&#xA;│   ├── goddard: Mario intro screen&#xA;│   └── menu: title screen and file, act, and debug level selection menus&#xA;├── text: dialog, level names, act names&#xA;├── textures: skybox and generic texture data&#xA;└── tools: build tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;clang-format&lt;/code&gt; on your code to ensure it meets the project&#39;s coding standards.&lt;/p&gt; &#xA;&lt;p&gt;Official Discord: &lt;a href=&#34;https://discord.gg/DuYH3Fh&#34;&gt;discord.gg/DuYH3Fh&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>