<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T02:34:44Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pbatard/rufus</title>
    <updated>2022-07-01T02:34:44Z</updated>
    <id>tag:github.com,2022-07-01:/pbatard/rufus</id>
    <link href="https://github.com/pbatard/rufus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Reliable USB Formatting Utility&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rufus: The Reliable USB Formatting Utility&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pbatard/rufus/actions/workflows/vs2022.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/pbatard/rufus/VS2022.svg?style=flat-square&amp;amp;label=VS2022%20Build&#34; alt=&#34;VS2022 Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pbatard/rufus/actions/workflows/mingw.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/pbatard/rufus/MinGW.svg?style=flat-square&amp;amp;label=MinGW%20Build&#34; alt=&#34;MinGW Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scan.coverity.com/projects/pbatard-rufus&#34;&gt;&lt;img src=&#34;https://img.shields.io/coverity/scan/2172.svg?style=flat-square&amp;amp;label=Coverity%20Analysis&#34; alt=&#34;Coverity Scan Status&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/pbatard/rufus/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/pbatard/rufus.svg?style=flat-square&amp;amp;label=Latest%20Release&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.en.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-blue.svg?style=flat-square&amp;amp;label=License&#34; alt=&#34;Licence&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pbatard/rufus/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/pbatard/rufus/total.svg?label=Downloads%20%28since%202019%29&amp;amp;style=flat-square&#34; alt=&#34;Download Stats&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pbatard/rufus/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/pbatard/rufus.svg?style=flat-square&amp;amp;label=Contributors&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pbatard/rufus/master/res/icons/rufus-128.png&#34; alt=&#34;Rufus logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rufus is a utility that helps format and create bootable USB flash drives.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format USB, flash card and virtual drives to FAT/FAT32/NTFS/UDF/exFAT/ReFS/ext2/ext3&lt;/li&gt; &#xA; &lt;li&gt;Create DOS bootable USB drives, using &lt;a href=&#34;https://www.freedos.org&#34;&gt;FreeDOS&lt;/a&gt; or MS-DOS (Windows 8.1 or earlier)&lt;/li&gt; &#xA; &lt;li&gt;Create BIOS or UEFI bootable drives, including &lt;a href=&#34;https://github.com/pbatard/uefi-ntfs&#34;&gt;UEFI bootable NTFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create bootable drives from bootable ISOs (Windows, Linux, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Create bootable drives from bootable disk images, including compressed ones&lt;/li&gt; &#xA; &lt;li&gt;Create Windows 11 installation drives for PCs that don&#39;t have TPM&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;a href=&#34;https://en.wikipedia.org/wiki/Windows_To_Go&#34;&gt;Windows To Go&lt;/a&gt; drives&lt;/li&gt; &#xA; &lt;li&gt;Create persistent Linux partitions&lt;/li&gt; &#xA; &lt;li&gt;Create VHD/DD images of a drive&lt;/li&gt; &#xA; &lt;li&gt;Compute MD5, SHA-1, SHA-256 and SHA-512 checksums of the selected image&lt;/li&gt; &#xA; &lt;li&gt;Perform bad blocks checks, including detection of &#34;fake&#34; flash drives&lt;/li&gt; &#xA; &lt;li&gt;Download official Microsoft Windows 7, Windows 8, Windows 10 or Windows 11 retail ISOs&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/pbatard/UEFI-Shell&#34;&gt;UEFI Shell&lt;/a&gt; ISOs&lt;/li&gt; &#xA; &lt;li&gt;Modern and familiar UI, with &lt;a href=&#34;https://github.com/pbatard/rufus/wiki/FAQ#What_languages_are_natively_supported_by_Rufus&#34;&gt;38 languages natively supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Small footprint. No installation required.&lt;/li&gt; &#xA; &lt;li&gt;Portable. Secure Boot compatible.&lt;/li&gt; &#xA; &lt;li&gt;100% &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw&#34;&gt;Free Software&lt;/a&gt; (&lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;GPL v3&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compilation&lt;/h2&gt; &#xA;&lt;p&gt;Use either Visual Studio 2022 or MinGW and then invoke the &lt;code&gt;.sln&lt;/code&gt; or &lt;code&gt;configure&lt;/code&gt;/&lt;code&gt;make&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;h4&gt;Visual Studio&lt;/h4&gt; &#xA;&lt;p&gt;Rufus is an OSI compliant Open Source project. You are entitled to download and use the &lt;em&gt;freely available&lt;/em&gt; &lt;a href=&#34;https://www.visualstudio.com/vs/community/&#34;&gt;Visual Studio Community Edition&lt;/a&gt; to build, run or develop for Rufus. As per the Visual Studio Community Edition license, this applies regardless of whether you are an individual or a corporate user.&lt;/p&gt; &#xA;&lt;h2&gt;Additional information&lt;/h2&gt; &#xA;&lt;p&gt;Rufus provides extensive information about what it is doing, either through its easily accessible log, or through the &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/debugview&#34;&gt;Windows debug facility&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rufus.ie&#34;&gt;&lt;strong&gt;Official Website&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pbatard/rufus/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enhancements/Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/pbatard/rufus/issues&#34;&gt;GitHub issue tracker&lt;/a&gt; for reporting problems or suggesting new features.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>micropython/micropython</title>
    <updated>2022-07-01T02:34:44Z</updated>
    <id>tag:github.com,2022-07-01:/micropython/micropython</id>
    <link href="https://github.com/micropython/micropython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MicroPython - a lean and efficient Python implementation for microcontrollers and constrained systems&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/micropython/micropython/workflows/unix%20port/badge.svg?sanitize=true&#34; alt=&#34;CI badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/micropython/micropython&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/micropython/micropython/branch/master/graph/badge.svg?token=I92PfD05sD&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The MicroPython project&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/micropython/micropython/master/logo/upython-with-micro.jpg&#34; alt=&#34;MicroPython Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This is the MicroPython project, which aims to put an implementation of Python 3.x on microcontrollers and small embedded systems. You can find the official website at &lt;a href=&#34;http://www.micropython.org&#34;&gt;micropython.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;WARNING: this project is in beta stage and is subject to changes of the code-base, including project-wide name changes and API changes.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython implements the entire Python 3.4 syntax (including exceptions, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;yield from&lt;/code&gt;, etc., and additionally &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords from Python 3.5). The following core datatypes are provided: &lt;code&gt;str&lt;/code&gt; (including basic Unicode support), &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;array.array&lt;/code&gt;, &lt;code&gt;collections.namedtuple&lt;/code&gt;, classes and instances. Builtin modules include &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt;, and &lt;code&gt;struct&lt;/code&gt;, etc. Select ports have support for &lt;code&gt;_thread&lt;/code&gt; module (multithreading). Note that only a subset of Python 3 functionality is implemented for the data types and modules.&lt;/p&gt; &#xA;&lt;p&gt;MicroPython can execute scripts in textual source form or from precompiled bytecode, in both cases either from an on-device filesystem or &#34;frozen&#34; into the MicroPython executable.&lt;/p&gt; &#xA;&lt;p&gt;See the repository &lt;a href=&#34;http://github.com/micropython/pyboard&#34;&gt;http://github.com/micropython/pyboard&lt;/a&gt; for the MicroPython board (PyBoard), the officially supported reference electronic circuit board.&lt;/p&gt; &#xA;&lt;p&gt;Major components in this repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;py/ -- the core Python implementation, including compiler, runtime, and core library.&lt;/li&gt; &#xA; &lt;li&gt;mpy-cross/ -- the MicroPython cross-compiler which is used to turn scripts into precompiled bytecode.&lt;/li&gt; &#xA; &lt;li&gt;ports/unix/ -- a version of MicroPython that runs on Unix.&lt;/li&gt; &#xA; &lt;li&gt;ports/stm32/ -- a version of MicroPython that runs on the PyBoard and similar STM32 boards (using ST&#39;s Cube HAL drivers).&lt;/li&gt; &#xA; &lt;li&gt;ports/minimal/ -- a minimal MicroPython port. Start with this if you want to port MicroPython to another microcontroller.&lt;/li&gt; &#xA; &lt;li&gt;tests/ -- test framework and test scripts.&lt;/li&gt; &#xA; &lt;li&gt;docs/ -- user documentation in Sphinx reStructuredText format. Rendered HTML documentation is available at &lt;a href=&#34;http://docs.micropython.org&#34;&gt;http://docs.micropython.org&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ports/bare-arm/ -- a bare minimum version of MicroPython for ARM MCUs. Used mostly to control code size.&lt;/li&gt; &#xA; &lt;li&gt;ports/teensy/ -- a version of MicroPython that runs on the Teensy 3.1 (preliminary but functional).&lt;/li&gt; &#xA; &lt;li&gt;ports/pic16bit/ -- a version of MicroPython for 16-bit PIC microcontrollers.&lt;/li&gt; &#xA; &lt;li&gt;ports/cc3200/ -- a version of MicroPython that runs on the CC3200 from TI.&lt;/li&gt; &#xA; &lt;li&gt;ports/esp8266/ -- a version of MicroPython that runs on Espressif&#39;s ESP8266 SoC.&lt;/li&gt; &#xA; &lt;li&gt;ports/esp32/ -- a version of MicroPython that runs on Espressif&#39;s ESP32 SoC.&lt;/li&gt; &#xA; &lt;li&gt;ports/nrf/ -- a version of MicroPython that runs on Nordic&#39;s nRF51 and nRF52 MCUs.&lt;/li&gt; &#xA; &lt;li&gt;extmod/ -- additional (non-core) modules implemented in C.&lt;/li&gt; &#xA; &lt;li&gt;tools/ -- various tools, including the pyboard.py module.&lt;/li&gt; &#xA; &lt;li&gt;examples/ -- a few example Python scripts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The subdirectories above may include READMEs with additional info.&lt;/p&gt; &#xA;&lt;p&gt;&#34;make&#34; is used to build the components, or &#34;gmake&#34; on BSD-based systems. You will also need bash, gcc, and Python 3.3+ available as the command &lt;code&gt;python3&lt;/code&gt; (if your system only has Python 2.7 then invoke make with the additional option &lt;code&gt;PYTHON=python2&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;The MicroPython cross-compiler, mpy-cross&lt;/h2&gt; &#xA;&lt;p&gt;Most ports require the MicroPython cross-compiler to be built first. This program, called mpy-cross, is used to pre-compile Python scripts to .mpy files which can then be included (frozen) into the firmware/executable for a port. To build mpy-cross use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd mpy-cross&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The Unix version&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;unix&#34; port requires a standard Unix environment with gcc and GNU make. x86 and x64 architectures are supported (i.e. x86 32- and 64-bit), as well as ARM and MIPS. Making full-featured port to another architecture requires writing some assembly code for the exception handling and garbage collection. Alternatively, fallback implementation based on setjmp/longjmp can be used.&lt;/p&gt; &#xA;&lt;p&gt;To build (see section below for required dependencies):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ports/unix&#xA;$ make submodules&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to give it a try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./micropython&#xA;&amp;gt;&amp;gt;&amp;gt; list(5 * x + y for x in range(10) for y in [4, 2, 1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;CTRL-D&lt;/code&gt; (i.e. EOF) to exit the shell. Learn about command-line options (in particular, how to increase heap size which may be needed for larger applications):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./micropython -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run complete testsuite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unix version comes with a builtin package manager called upip, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./micropython -m upip install micropython-pystone&#xA;$ ./micropython -m pystone&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse available modules on &lt;a href=&#34;https://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=micropython&#34;&gt;PyPI&lt;/a&gt;. Standard library modules come from &lt;a href=&#34;https://github.com/micropython/micropython-lib&#34;&gt;micropython-lib&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;h2&gt;External dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Building MicroPython ports may require some dependencies installed.&lt;/p&gt; &#xA;&lt;p&gt;For Unix port, &lt;code&gt;libffi&lt;/code&gt; library and &lt;code&gt;pkg-config&lt;/code&gt; tool are required. On Debian/Ubuntu/Mint derivative Linux distros, install &lt;code&gt;build-essential&lt;/code&gt; (includes toolchain and make), &lt;code&gt;libffi-dev&lt;/code&gt;, and &lt;code&gt;pkg-config&lt;/code&gt; packages.&lt;/p&gt; &#xA;&lt;p&gt;Other dependencies can be built together with MicroPython. This may be required to enable extra features or capabilities, and in recent versions of MicroPython, these may be enabled by default. To build these additional dependencies, in the port directory you&#39;re interested in (e.g. &lt;code&gt;ports/unix/&lt;/code&gt;) first execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make submodules&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch all the relevant git submodules (sub repositories) that the port needs. Use the same command to get the latest versions of submodules as they are updated from time to time. After that execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make deplibs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build all available dependencies (regardless whether they are used or not). If you intend to build MicroPython with additional options (like cross-compiling), the same set of options should be passed to &lt;code&gt;make deplibs&lt;/code&gt;. To actually enable/disable use of dependencies, edit &lt;code&gt;ports/unix/mpconfigport.mk&lt;/code&gt; file, which has inline descriptions of the options. For example, to build SSL module (required for &lt;code&gt;upip&lt;/code&gt; tool described above, and so enabled by default), &lt;code&gt;MICROPY_PY_USSL&lt;/code&gt; should be set to 1.&lt;/p&gt; &#xA;&lt;p&gt;For some ports, building required dependences is transparent, and happens automatically. But they still need to be fetched with the &lt;code&gt;make submodules&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;The STM32 version&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;stm32&#34; port requires an ARM compiler, arm-none-eabi-gcc, and associated bin-utils. For those using Arch Linux, you need arm-none-eabi-binutils, arm-none-eabi-gcc and arm-none-eabi-newlib packages. Otherwise, try here: &lt;a href=&#34;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm&#34;&gt;https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd ports/stm32&#xA;$ make submodules&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You then need to get your board into DFU mode. On the pyboard, connect the 3V3 pin to the P1/DFU pin with a wire (on PYBv1.0 they are next to each other on the bottom left of the board, second row from the bottom).&lt;/p&gt; &#xA;&lt;p&gt;Then to flash the code via USB DFU to your device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use the included &lt;code&gt;tools/pydfu.py&lt;/code&gt; script. If flashing the firmware does not work it may be because you don&#39;t have the correct permissions, and need to use &lt;code&gt;sudo make deploy&lt;/code&gt;. See the README.md file in the ports/stm32/ directory for further details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;MicroPython is an open-source project and welcomes contributions. To be productive, please be sure to follow the &lt;a href=&#34;https://github.com/micropython/micropython/wiki/ContributorGuidelines&#34;&gt;Contributors&#39; Guidelines&lt;/a&gt; and the &lt;a href=&#34;https://github.com/micropython/micropython/raw/master/CODECONVENTIONS.md&#34;&gt;Code Conventions&lt;/a&gt;. Note that MicroPython is licenced under the MIT license, and all contributions should follow this license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenIntelWireless/itlwm</title>
    <updated>2022-07-01T02:34:44Z</updated>
    <id>tag:github.com,2022-07-01:/OpenIntelWireless/itlwm</id>
    <link href="https://github.com/OpenIntelWireless/itlwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Intel Wi-Fi Drivers for macOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;itlwm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;An Intel Wi-Fi Adapter Kernel Extension for macOS, based on the OpenBSD Project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We highly recommend exploring our documentation before using this Kernel Extension:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://OpenIntelWireless.github.io/itlwm&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openintelwireless.github.io/itlwm/Compat&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openintelwireless.github.io/itlwm/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/OpenIntelWireless/itlwm/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/OpenIntelWireless/itlwm?label=Download&#34; alt=&#34;Download from https://github.com/OpenIntelWireless/itlwm/releases&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Questions and Issues&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://openintelwireless.github.io/itlwm/FAQ&#34;&gt;FAQ Page&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;If you have other questions or feedback, feel free to &lt;a href=&#34;https://gitter.im/OpenIntelWireless/itlwm?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/OpenIntelWireless/itlwm.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/OpenIntelWireless/itlwm&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We only accept bug reports in GitHub Issues, before opening an issue, you&#39;re recommended to reconfirm it with us on &lt;a href=&#34;https://gitter.im/OpenIntelWireless/itlwm&#34;&gt;Gitter&lt;/a&gt;; once it&#39;s confirmed, please use the provided issue template.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/acidanthera&#34;&gt;Acidanthera&lt;/a&gt; for &lt;a href=&#34;https://github.com/acidanthera/MacKernelSDK&#34;&gt;MacKernelSDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apple.com&#34;&gt;Apple&lt;/a&gt; for &lt;a href=&#34;https://www.apple.com/macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AppleIntelWiFi&#34;&gt;AppleIntelWiFi&lt;/a&gt; for &lt;a href=&#34;https://github.com/AppleIntelWiFi/Black80211-Catalina&#34;&gt;Black80211-Catalina&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ErrorErrorError&#34;&gt;ErrorErrorError&lt;/a&gt; for UserClient bug fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.intel.com&#34;&gt;Intel&lt;/a&gt; for &lt;a href=&#34;https://www.intel.com/content/www/us/en/support/articles/000005511/network-and-io/wireless.html&#34;&gt;Wireless Adapter Firmwares&lt;/a&gt; and &lt;a href=&#34;https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi&#34;&gt;iwlwifi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org&#34;&gt;Linux&lt;/a&gt; for &lt;a href=&#34;https://wireless.wiki.kernel.org/en/users/drivers/iwlwifi&#34;&gt;iwlwifi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mercurysquad&#34;&gt;mercurysquad&lt;/a&gt; for &lt;a href=&#34;https://github.com/mercurysquad/Voodoo80211&#34;&gt;Voodoo80211&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openbsd.org&#34;&gt;OpenBSD&lt;/a&gt; for &lt;a href=&#34;https://github.com/openbsd/src&#34;&gt;net80211, iwn, iwm, and iwx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenIntelWireless/itlwm/commits?author=pigworlds&#34;&gt;pigworlds&lt;/a&gt; for DVM devices support, MIRA bug fixes, and Tx aggregation for MVM Gen 1 devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rpeshkov&#34;&gt;rpeshkov&lt;/a&gt; for &lt;a href=&#34;https://github.com/rpeshkov/black80211&#34;&gt;black80211&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/usr-sse2&#34;&gt;usr-sse2&lt;/a&gt; for implementing the usage of Apple RSN Supplicant and bug fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zxystd&#34;&gt;zxystd&lt;/a&gt; for developing &lt;a href=&#34;https://github.com/OpenIntelWireless/itlwm&#34;&gt;itlwm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/startpenghubingzhou&#34;&gt;@penghubingzhou&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williambj1&#34;&gt;@Bat.bat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XStar-Dev&#34;&gt;@iStarForever&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevezhengshiqi&#34;&gt;@stevezhengshiqi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DogAndPot&#34;&gt;@DogAndPot&lt;/a&gt; for providing resources and help for system configuration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Daliansky&#34;&gt;@Daliansky&lt;/a&gt; for providing Wi-Fi cards&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>