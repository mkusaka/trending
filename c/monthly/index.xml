<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:34:55Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Mbed-TLS/mbedtls</title>
    <updated>2022-06-04T02:34:55Z</updated>
    <id>tag:github.com,2022-06-04:/Mbed-TLS/mbedtls</id>
    <link href="https://github.com/Mbed-TLS/mbedtls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source, portable, easy to use, readable and flexible SSL library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; &#xA;&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&#34;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; &#xA;&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; &#xA;&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for the Mbed TLS interfaces in the default library configuration is available as part of the &lt;a href=&#34;https://tls.mbed.org/api/&#34;&gt;Mbed TLS documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that &lt;a href=&#34;http://www.doxygen.nl/&#34;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other sources of documentation, see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; &#xA;&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto, and libmbedx509 depends on libmbedcrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tool versions&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; &#xA; &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, IAR 8 and Visual Studio 2013. More recent versions should work. Slightly older versions may work.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.6 to generate the test code, and to generate sample programs in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2013 or later (if using Visual Studio).&lt;/li&gt; &#xA; &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; &#xA;&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; &#xA; &lt;li&gt;Python 3 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run &lt;pre&gt;&lt;code&gt;python -m pip install -r scripts/basic.requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; &#xA;&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; &#xA; &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;tests/scripts/check-generated-files.sh -u&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; &#xA;&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; &#xA;&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make no_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; &#xA;&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; &#xA;&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&#34;https://tls.mbed.org/kb&#34;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; &#xA;&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&#34;https://tls.mbed.org/kb&#34;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir&#xA;cmake /path/to/mbedtls_source&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -LH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now make the desired change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; &#xA;&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedcrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;add_executable(xyz)&#xA;&#xA;target_link_libraries(xyz&#xA;    PUBLIC MbedTLS::mbedtls&#xA;           MbedTLS::mbedcrypto&#xA;           MbedTLS::mbedx509)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; &#xA;&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2010.&lt;/p&gt; &#xA;&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; &#xA;&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&#34;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example programs&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&#34;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_mpi.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_mpi.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_mpi.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; &#xA;&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/key-exchanges.pl&lt;/code&gt; test builds in configurations with a single key exchange enabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS&#34;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/development/what-external-dependencies-does-mbedtls-rely-on&#34;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tls.mbed.org/kb/compiling-and-building/how-do-i-configure-mbedtls&#34;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; &#xA; &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; &#xA; &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; &#xA; &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PSA cryptography API&lt;/h2&gt; &#xA;&lt;h3&gt;PSA API design&lt;/h3&gt; &#xA;&lt;p&gt;Arm&#39;s &lt;a href=&#34;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&#34;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/psa/#application-programming-interface&#34;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; &#xA;&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; &#xA; &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; &#xA; &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; &#xA; &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; &#xA; &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&#34;mailto:mbed-crypto@arm.com&#34;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; &#xA;&lt;h3&gt;PSA API documentation&lt;/h3&gt; &#xA;&lt;p&gt;A browsable copy of the PSA Cryptography API documents is available on the &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/psa/#application-programming-interface&#34;&gt;PSA cryptography interfaces documentation portal&lt;/a&gt; in &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/PSA_Cryptography_API_Specification.pdf&#34;&gt;PDF&lt;/a&gt; and &lt;a href=&#34;https://armmbed.github.io/mbed-crypto/html/index.html&#34;&gt;HTML&lt;/a&gt; formats.&lt;/p&gt; &#xA;&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. This implementation is not yet as mature as the rest of the library. Some parts of the code have not been reviewed as thoroughly, and some parts of the PSA implementation are not yet well optimized for code size.&lt;/p&gt; &#xA;&lt;p&gt;The X.509 and TLS code can use PSA cryptography for a limited subset of operations. To enable this support, activate the compilation option &lt;code&gt;MBEDTLS_USE_PSA_CRYPTO&lt;/code&gt; in &lt;code&gt;mbedtls_config.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are currently a few deviations where the library does not yet implement the latest version of the specification. Please refer to the &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls/labels/compliance&#34;&gt;compliance issues on Github&lt;/a&gt; for an up-to-date list.&lt;/p&gt; &#xA;&lt;h3&gt;Upcoming features&lt;/h3&gt; &#xA;&lt;p&gt;Future releases of this library will include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A driver programming interface, which makes it possible to use hardware accelerators instead of the default software implementation for chosen algorithms.&lt;/li&gt; &#xA; &lt;li&gt;Support for external keys to be stored and manipulated exclusively in a separate cryptoprocessor.&lt;/li&gt; &#xA; &lt;li&gt;A configuration mechanism to compile only the algorithms you need for your application.&lt;/li&gt; &#xA; &lt;li&gt;A wider set of cryptographic algorithms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under the &lt;a href=&#34;https://spdx.org/licenses/Apache-2.0.html&#34;&gt;Apache-2.0&lt;/a&gt; license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full text of this license. Contributors must accept that their contributions are made under both the Apache-2.0 AND &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-or-later.html&#34;&gt;GPL-2.0-or-later&lt;/a&gt; licenses. This enables LTS (Long Term Support) branches of the software to be provided under either the Apache-2.0 OR GPL-2.0-or-later licenses.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&#34;mailto:mbed-tls-security@lists.trustedfirmware.org&#34;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&#34;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>0015/ThatProject</title>
    <updated>2022-06-04T02:34:55Z</updated>
    <id>tag:github.com,2022-06-04:/0015/ThatProject</id>
    <link href="https://github.com/0015/ThatProject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;*That Project&#39;s project repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;That Project&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to my project repository. The source code for each project can be downloaded here, and please refer to the below video for the project tutorial. Thank you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtube.com/ThatProject&#34;&gt;Youtube Channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ESP32 Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLnq7JUnBumAyhSBBp95MsQ5-chBAYheZw&#34;&gt;Youtube ESP32 Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://youtu.be/zJvDw4UVDLc&#34;&gt; &lt;img src=&#34;https://i.ytimg.com/vi/zJvDw4UVDLc/hqdefault.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;[LoRa, GPS Data showing on the Map ] &lt;a href=&#34;https://youtu.be/zJvDw4UVDLc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32-LoRa/LoRa_GPS_Data_Viewer&#34;&gt;[Source Code]&lt;/a&gt;&lt;a href=&#34;https://0015.github.io/LoRa_GPS_Viewer&#34;&gt;[Try here]&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://youtu.be/vaYJydZcObU&#34;&gt; &lt;img src=&#34;https://i.ytimg.com/vi/vaYJydZcObU/hqdefault.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;[My ESP32 Tag App for my own ESP32Tag Device!] &lt;a href=&#34;https://youtu.be/vaYJydZcObU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_UWB/2_My-ESP32Tag-App&#34;&gt;[Source Code]&lt;/a&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.thatproject.my_esp32tag&#34;&gt;[Google Play]&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;[QR Code Maker (ESP32+LVGL8)]&lt;a href=&#34;https://youtu.be/Ss3zBO-V9kI&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/4_QR_Code_Maker&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Part.2: Creating Tesla&#39;s Website in SquareLine Studio (ESP32+LVGL)]&lt;a href=&#34;https://youtu.be/7PXBPRm_8_Y&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8_SquareLine/02_Tesla_Multi_Pages&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Creating Tesla&#39;s Website in SquareLine Studio (ESP32+LVGL)]&lt;a href=&#34;https://youtu.be/LrvqSjLzo44&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8_SquareLine/01_Tesla_Single_Page&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 + UWB | Warning sounds depending on the distance]&lt;a href=&#34;https://youtu.be/xrDvu8QT1Qs&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_UWB/1_My_Anchor_With_Audio&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Not AirTag, But ESP32Tag]&lt;a href=&#34;https://youtu.be/_Bu3lw49m5s&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_UWB/0_ESP32TAG&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 3. Base Project for WiFi Settings]&lt;a href=&#34;https://youtu.be/r62vfOhWXeo&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/3_BaseProject_Network_Selector&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Auto Focus with OV5640 on ESP32 AI-Thinker Board]&lt;a href=&#34;https://youtu.be/922BWy3OOoQ&#34;&gt;[Video]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[OV5640 for ESP32 Camera (Compared to OV2640)]&lt;a href=&#34;https://youtu.be/BCvOBMQSliY&#34;&gt;[Video]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | Sending images via UDP?]&lt;a href=&#34;https://youtu.be/1kHxd5FOUEU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_UDP&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Tic Tac Camera Using ESP32CAM And Wireless Charging]&lt;a href=&#34;https://youtu.be/hteut2R8eQ0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/TicTacCamera&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 2. Shortcuts for Pull Stack Developer]&lt;a href=&#34;https://youtu.be/i4qrWbHXH3U&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/2_LILYPI_StackOverflow_BLE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 1. Demos with LILY PI]&lt;a href=&#34;https://youtu.be/kRTFc2vY5A8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/1_LILYPI_ST7796_LovyanGFX&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL8 | Ep 0. GFX Setup (ft. LovyanGFX)]&lt;a href=&#34;https://youtu.be/IPCvQ4o_WP8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/LVGL8/0_ILI9488_LovyanGFX&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Mini E-Paper | Ep1. Uploading Emoji to E-Paper from Flutter App (iOS &amp;amp; Android)]&lt;a href=&#34;https://youtu.be/pP9YXFNOBhY&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/E-Paper_Projects/01_Emoji2MiniE-Paper&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[IoT | Cloud Firestore - Ep 4. Firebase Client Flutter App for iOS and Android]&lt;a href=&#34;https://youtu.be/nsopdabOcug&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/4_iot_firestore_flutter_app&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Send an SMS from ESP32 (ft. Twilio)]&lt;a href=&#34;https://youtu.be/SP4pvYCQAfc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/MESSAGE/Twilio/0_ESP32TTGO_FIRESTORE_SMS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 3. Status Icons on Display (The End)]&lt;a href=&#34;https://youtu.be/LR_FgObfuCw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/3_Display_Done&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 2. Firebase Client For ESP32]&lt;a href=&#34;https://youtu.be/KiF9uGFkA_o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/2_Firebase_Client&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 1. Firebase Setup]&lt;a href=&#34;https://youtu.be/KV0D8nrsBLg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/1_Network_Class&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Cloud Firestore - Ep 0. Showing temp/humidity from DHT11 on TTGO display [Upgraded Version]]&lt;a href=&#34;https://youtu.be/aAUIlCWs_bc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/FIREBASE/Cloud_Firestore_Application/0_ESP32TTGO_DHT11&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[OTA Solution - Build your own OTA platform (2/2, ESP32 OTA Application)]&lt;a href=&#34;https://youtu.be/oNFqwvYYWe4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_OTA/Simple_OTA_Solution/Simple_OTA_Application&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[OTA Solution - Build your own OTA platform (1/2, Preparing Python Flask API Server)]&lt;a href=&#34;https://youtu.be/_uTZad8RMZk&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_OTA/Simple_OTA_Solution/Python_Flask_REST_API_Server&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | Python MQTT Client for Multiple ESP32CAM]&lt;a href=&#34;https://youtu.be/-0L0PrfuSEo&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/3_Python_MQTT_Client_App&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | Flutter MQTT Client App [Full Version]]&lt;a href=&#34;https://youtu.be/aY7i0xnQW54&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/2_Flutter_MQTT_Client_App/mqtt_esp32cam_viewer_full_version&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | Flutter MQTT Client App for macOS - UI Part (For Newbies)]&lt;a href=&#34;https://youtu.be/viGjd3VDlr4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/2_Flutter_MQTT_Client_App/mqtt_esp32cam_viewer_ui_part&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | ESP32CAM working as a publisher on MQTT]&lt;a href=&#34;https://youtu.be/7_3qbou_keg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/1_ESP32CAM_AWSMQTT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[AWS IoT | How to install Mosquitto Broker on Amazon EC2]&lt;a href=&#34;https://youtu.be/SDrkv2hUzAc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MQTT/0_AWS_Mosquitto_Test&#34;&gt;[Template Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LVGL7 = My Shortcuts for Windows 10 = (ft. BLE HID Keyboard)]&lt;a href=&#34;https://youtu.be/EWKAyQBdcYM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_LVGL/MyShortcuts_LVGL7&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Multi-Touch Test(ft. FT6236)]&lt;a href=&#34;https://youtu.be/8sp4LKYSdEk&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_MultiTouch_FT6236/GetTouchEvent&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | Android(Flutter App) Wired Communication - Base64 Encoding/Decoding [2/2]]&lt;a href=&#34;https://youtu.be/-jygTxRmroA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/WIRED_ESP32_CAM_with_FlutterApp/Part.2_FlutterAppForSerialCam&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | Android(Flutter App) Wired Communication - Baud Rate Test [1/2]]&lt;a href=&#34;https://youtu.be/Mod9gX7NWA8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/WIRED_ESP32_CAM_with_FlutterApp/Part.1_BaudRateTest&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[What&#39;s different TTGO T-Camera Plus vs ESP32CAM AI-THINKER?]&lt;a href=&#34;https://youtu.be/ixtT7kt4YdI&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_TTGO/TTGO_T-Camera/CameraWebServerForTCamera&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[GY-BNO055 | Ep.0: Connecting with ESP32 TTGO via I2C (ft. Heading Direction)]&lt;a href=&#34;https://youtu.be/dgCpOPEA6ZM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_TTGO/GY-BNO055/TTGO_GY-BNO055_Heading&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Walkie-Talkie based on Node.js Server for multi-clients (ft. PCM speaker)]&lt;a href=&#34;https://youtu.be/vq7mPgecGKA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32_TTGO/Walkie-Talkie_Project/Server_NodeJS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Walkie-Talkie, Half-duplex communication based on WebSocket]&lt;a href=&#34;https://youtu.be/kw30vLdrGE8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/Walkie-Talkie_Project&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Wireless Wiretap System using 2x ESP32, INMP441 &amp;amp; MAX98357A]&lt;a href=&#34;https://youtu.be/5q5a5pee4ZQ&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/Wiretap_INMP441_MAX98357A_via_websocket&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Bluetooth LE Secure Server for multi clients (ft. PassKey)]&lt;a href=&#34;https://youtu.be/TwexLJwdLEw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/BLE_Secure_Server&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32TTGO - Battery Indicator 🔋⚡]&lt;a href=&#34;https://youtu.be/osAOdmZuvDc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/TTGO_Battery_Indicator&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32TTGO | INMP441 - Drawing a meter bar for sound level display (ft. TFT_eFEX)]&lt;a href=&#34;https://youtu.be/IqXVAG8ssjg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/INMP441_MeterBarForSoundLevel&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32TTGO x ESP32CAM] Which One Is Faster? RGB565 vs. JPEG (ft. Dedicated JPEG Decoder)]&lt;a href=&#34;https://youtu.be/aD3C-mGh7I8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/ESP32CAM_WiFi_Direct_v2_Faster&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32TTGO x ESP32CAM] Wi-Fi Direct! Output images of ESP32CAM to TTGO display. (ft. WebSocket)]&lt;a href=&#34;https://youtu.be/OdEmfRKDJts&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/ESP32CAM_WiFi_Direct&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32 TTGO] My hardware key to operate my app (Ep.2/2 - Completing App)]&lt;a href=&#34;https://youtu.be/aGuBQSU2oMs&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/my_hardware_key_demo_app&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[[ESP32 TTGO] Getting Started! #StartingLine #BasicSetup (ft. Image Animation)]&lt;a href=&#34;https://youtu.be/Bl1C7Vdl3GA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_TTGO/AnimationImage&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Toy Camera = ESP32CAM + ILI9488 + LVGL7 | Part 2, LVGL Configure #ESP32CAM #TOYCAM]&lt;a href=&#34;https://youtu.be/K4VEvUVOkG0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_TOY_CAMERA/PART2&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Toy Camera = ESP32CAM + ILI9488 + LVGL7 | Part 1, Live Feed Display #ESP32CAM #TOYCAM]&lt;a href=&#34;https://youtu.be/K5Tr0AjK-Uc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_TOY_CAMERA/PART1&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | MPU6050 | MahonyAHRS - Adding BLE module(ft. String vs Float)]&lt;a href=&#34;https://youtu.be/lpnG7K0-E88&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_MPU6050_MahonyARHS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | MPU6050 - Using MahonyAHRS (ft. dice)]&lt;a href=&#34;https://youtu.be/UgROd5juFtM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_MPU6050_MahonyARHS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE HID - Camera Shutter App for the smartphone [Part. 3/3 ADD BLE HID]]&lt;a href=&#34;https://youtu.be/I6rlpXpBimc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ESP-IDF_Camera_Timer_For_Smartphone_LVGL7/Part.3/camera_timer_ble_hid&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE HID - Camera Shutter App for the smartphone [Part. 2/3 UI Design in LVGL]]&lt;a href=&#34;https://youtu.be/IQsND5MwSEQ&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ESP-IDF_Camera_Timer_For_Smartphone_LVGL7/Part.2/camera_timer_ble_hid&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE HID - Camera Shutter App for the smartphone [Part. 1/3 LVGL on ESP-IDF]]&lt;a href=&#34;https://youtu.be/7-QiGUAWkys&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ESP-IDF_Camera_Timer_For_Smartphone_LVGL7/Part.1/camera_timer_ble_hid&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[💬Chat App | ESP32 + ESP-NOW + LVGL7 | Part 2/2 - ESP-NOW bidirectional Comm (Primary - Secondary) ]&lt;a href=&#34;https://youtu.be/Kpqz00_IzTc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ChatApp_LVGL7/Step_2_ESP-NOW&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[💬Chat App | ESP32 + ESP-NOW + LVGL7 | Part 1/2 - LVGL UI Layout]&lt;a href=&#34;https://youtu.be/zRLQPF5417Y&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/ChatApp_LVGL7/Step_1_UI&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Dynamic WIFI configuration GUI using LVGL7.x]&lt;a href=&#34;https://youtu.be/AvJms6_Pf_o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/DynamicWIFIConnector_LVGL7&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.10] Multiple CAM Secure Dashboard (ft. HTTPS, WSS)🔒]&lt;a href=&#34;https://youtu.be/mxfj5Jg206A&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_MULTICAM/Part.10-Multiple_CAM_Dashboard_with_HTTPS_WSS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.9] Multiple CAM Dashboard With New Features (ft. ⏯️🔴💾)]&lt;a href=&#34;https://youtu.be/ba9NLj0FKRU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_MULTICAM/Part.9-Multiple_CAM_Dashboard_with_new_features&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.8] Multiple CAM Dashboard (ft. Modified Jpeg Header)]&lt;a href=&#34;https://youtu.be/rTY2Ibk-gco&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_MULTICAM/Part.8-Multiple_CAM_Dashboard&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLUETOOTH CLASSIC | FLUTTER - Generate your own QR code and display it on the SSD1351🔲]&lt;a href=&#34;https://youtu.be/7HLh-7vONT4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32_SSD1351_QR_BT_SERIAL&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLUETOOTH CLASSIC | FLUTTER - &lt;em&gt;Realtime&lt;/em&gt; Audio Recorder🗣️🎙️(ft. INMP441)]&lt;a href=&#34;https://youtu.be/AFGC9iYBxFQ&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32_INMP441_BT_SERIAL&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | BLUETOOTH CLASSIC | FLUTTER - TWO-WAY Serial BT Communication (ft. uint8_t* buffer)🖼️]&lt;a href=&#34;https://youtu.be/Fl3tDWzTWk8&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32CAM_BT_SERIAL&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLUETOOTH CLASSIC | FLUTTER - Let&#39;s build BT Serial based on the examples. (Ft. Chat App)]&lt;a href=&#34;https://youtu.be/WUw-_X66dLE&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_BT_CLASSIC/ESP32_BLUETOOTH_SERIAL_DEMO&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32CAM | INMP441 - Doorbell🚪🔔 Project Rev.1 (Ft. Telegram)]&lt;a href=&#34;https://youtu.be/Fj21iHHUvf4&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_DOORBELL/Rev.1&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.5] Speech-to-Text Powered by Google Cloud machine learning]&lt;a href=&#34;https://youtu.be/RZVzZfndIS0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_SPEECH_TO_TEXT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.4] Capturing audio from i2s mic to save WAV file (I2S interface)]&lt;a href=&#34;https://youtu.be/qmruNKeIN-o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_RECORDING&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Flutter | Tutorial - [Part.3] App for Sound Level Meter Viewer (ft. BLE Client)]&lt;a href=&#34;https://youtu.be/CcLt-nBLWJU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_FLUTTER_BLE_APP/flutter_app_slm&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.2] Emitting Sound Level Meter through BLE (ft. FreeRTOS)]&lt;a href=&#34;https://youtu.be/F88HRGTiiNw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_SLM_BLE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Introduce - [Part.1] Sound Level Meter]&lt;a href=&#34;https://youtu.be/QREKVWaZLi4&#34;&gt;[Video]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | INMP441 | Tutorial - [Part.0] Set up I2S for Microphone]&lt;a href=&#34;https://youtu.be/m8LwPNXqK9o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_MICROPHONE/ESP32_INMP441_SETUP&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LittlevGL | Arduino IDE - [Part.2] By LittlevGL for Simple Note App📝]&lt;a href=&#34;https://youtu.be/PIzMeCShNZA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/SimpleNoteAPP_LVGL6/Part2&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LittlevGL | Arduino IDE - [Part.1] Basic LittlevGL for Simple Note App📝]&lt;a href=&#34;https://youtu.be/dErIWm-IVhc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/SimpleNoteAPP_LVGL6/Part1&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | LittlevGL | Arduino IDE - [Part.0] Touch Display Setup for Simple Note App📝]&lt;a href=&#34;https://youtu.be/OXUZEHMFFwc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_LVGL/SimpleNoteAPP_LVGL6/Part0&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM | Google Vision - [Part.7] AI Camera📷🔥(Image labeling)]&lt;a href=&#34;https://youtu.be/bpCCqerQ56o&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_AICamera_Labelling&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM | Flutter App - [Part.6] In wireless directly, a mobile app connecting ESP32CAM (Dash Cam)]&lt;a href=&#34;https://youtu.be/6FUbo9HRCoU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_Dashcam_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM | Tutorial - [Part.5] In wireless directly, connecting ESP32CAM to ESP32 (feat. TFT LCD)]&lt;a href=&#34;https://youtu.be/TfuEI1-YrsA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_WIFI_CONNECT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Flutter | Tutorial - [Part.4] Video Recording with FFmpeg (Baby Monitor)]&lt;a href=&#34;https://youtu.be/Z5vBs8Mk5rA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_Xiaomi_Clone_FLUTTER/flutter_xiaomi_clone_app_ffmpeg&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Flutter | Tutorial - [Part.3] Xiaomi YI Home App Clone (Baby Monitor)]&lt;a href=&#34;https://youtu.be/9GyOTlOGjSA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_Xiaomi_Clone_FLUTTER/flutter_xiaomi_clone_app&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.2] World Wide Access to ESP32CAM (feat. GCP)]&lt;a href=&#34;https://youtu.be/CpIkG9N5-JM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_GoogleCloudServer&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 CAM with Arduino IDE | Tutorial - [Part.1] Streaming into the local network]&lt;a href=&#34;https://youtu.be/kE0idrJYPII&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/ThatProject/tree/master/ESP32CAM_Projects/ESP32_CAM_LocalServer&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | FIRESTORE - Dust Sensor, A simple Air Monitor App (Serverless REST API with Firestore)]&lt;a href=&#34;https://youtu.be/Z8ju93IYZ1A&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_dust_sensor_firestore_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - MPU6050, Rotate your 3d object in the app]&lt;a href=&#34;https://youtu.be/FMZO4UTVZBk&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_MPU6050_ble_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Dust Sensor, A simple Air Monitor App (with Graph)]&lt;a href=&#34;https://youtu.be/w6jo2kJanqU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_dust_sensor_ble_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | WIFI | USB SERIAL - UPDATE WIFI CREDENTIALS VIA USB SERIAL (FEAT. UART)]&lt;a href=&#34;https://youtu.be/Be0vYIiJlyg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESp32_Flutter_Android_wifi_credential_update_via_USB&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | USB SERIAL - HOW TO CONNECT THE ESP32 TO THE ANDROID(FLUTTER) USING THE USB CABLE (feat. UART)]&lt;a href=&#34;https://youtu.be/zk0xY88l6Rc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_Flutter_Android_usb_serial_comm&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE | WIFI - HOW TO UPDATE WIFI SSID &amp;amp; PW VIA BLE in ESP32]&lt;a href=&#34;https://youtu.be/-N52wL8xQzM&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_wifi_ssid_pw_via_ble&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE | Data --* Server (feat. JoyPad)]&lt;a href=&#34;https://youtu.be/fQz7aajslJc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP32_Flutter_JoyPad&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Local Notification]&lt;a href=&#34;https://youtu.be/a71xc5Dm8xU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_Flutter_BLE_LocalNoti&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | BLE | SERVER - CLIENT]&lt;a href=&#34;https://youtu.be/jcGIA99V0c0&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_BLE_to_BLE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Ultrasonic Range Finder with 1.5inch OLED, Part 2]&lt;a href=&#34;https://youtu.be/s_BTQveXpwY&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_ultrasonic_range_finder&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | FLUTTER | BLE - Ultrasonic Range Finder with 1.5inch OLED, Part 1]&lt;a href=&#34;https://youtu.be/sTaa4bGqVwc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_ultrasonic_range_finder/Esp32_Ultrasonic_module&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Flutter | FIREBASE - Flutter application with ESP32 to get the sensor data through FIREBASE realtime DB]&lt;a href=&#34;https://youtu.be/nVrACWPXi8g&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_Flutter_firebase_DHT&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 | Flutter | Ble - Flutter application with ESP32 to get the sensor data through BLE]&lt;a href=&#34;https://youtu.be/13voX5Y9fTc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_temperature_humidity_ble_FLUTTER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Project - Temperature &amp;amp; Humidity Check App with 1.5inch OLED SSD1351 and DHT11]&lt;a href=&#34;https://youtu.be/TF4Dm8Lq7Pc&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_temperature_humidity&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Project - Hardware SPI vs Software SPI with SSD1351]&lt;a href=&#34;https://youtu.be/COPe5fKlkqA&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_display_ssd1351_jpeg&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP32 Project - Fast Jpeg images in 3.2-inch TFT LCD (ILI9341)]&lt;a href=&#34;https://youtu.be/4eD6recBq4M&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/Esp32_jpeg&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;NodeMCU(ESP8266) Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLnq7JUnBumAxh2Sr-vKQYxeyW7a6qje7x&#34;&gt;Youtube NodeMCU(ESP8266) Project&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Twitter Hash Search Application with #️⃣NodeMCU(ESP8266) #️⃣ILI9341]&lt;a href=&#34;https://youtu.be/lhOlv6Y4_vw&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_Twitter_Hash_Search&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[FIREBASE | FLUTTER | Stream builder from Realtime DB to Flutter(iOS, Android)]&lt;a href=&#34;https://youtu.be/uoQtH2IYBCU&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/FIREBASE/STREAMING_FROM_ESP_TO_FLUTTER/flutter_realtime_dht11&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[FIREBASE | Streaming from ESP32 to ESP8266(Ft. DHT11 - Temperature, Humidity &amp;amp; Heat Index)]&lt;a href=&#34;https://youtu.be/-iKCn9lTD2Q&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/FIREBASE/STREAMING_FROM_ESP32_TO_ESP8266&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[ESP-NOW | Communication between NodeMCU(ESP8266) as [Master] and two ESP32 as [Slave]]&lt;a href=&#34;https://youtu.be/F_h22AXZ7ts&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESPNOW/ESPNOW_ESP8266_MASTER_ESP32_SLAVE&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NodeMCU(ESP8266) | GPS | CSV Data Logging - GPS Tracker (feat. GPS Visualizer)🛰️]&lt;a href=&#34;https://youtu.be/edD3X6KG8AE&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_GPS_DATA_LOG/ESP8266_GPS_TRACKER&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NodeMCU(ESP8266) | GPS | ILI9488 - Showing Google Map with Device Position on Display🗺️]&lt;a href=&#34;https://youtu.be/lQ157ftTnSs&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_GOOGLEMAP_GPS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[NodeMCU(ESP8266) | GPS | ILI9488 - Showing the Latitude and Longitude on Display]&lt;a href=&#34;https://youtu.be/9wrHhbfYFXg&#34;&gt;[Video]&lt;/a&gt;&lt;a href=&#34;https://github.com/0015/IdeasNProjects/tree/master/ESP8266_BASIC_GPS&#34;&gt;[Source Code]&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Created &amp;amp; Maintained By&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/0015&#34;&gt;Eric Nam&lt;/a&gt; (&lt;a href=&#34;https://www.youtube.com/ThatProject&#34;&gt;Youtube&lt;/a&gt;) (&lt;a href=&#34;https://www.facebook.com/groups/138965931539175&#34;&gt;Facebook&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2019 - 2022 Eric N&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haproxy/haproxy</title>
    <updated>2022-06-04T02:34:55Z</updated>
    <id>tag:github.com,2022-06-04:/haproxy/haproxy</id>
    <link href="https://github.com/haproxy/haproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HAProxy Load Balancer&#39;s development branch (mirror of git.haproxy.org)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;The HAProxy documentation has been split into a number of different files for ease of use.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the following files depending on what you&#39;re looking for :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;INSTALL for instructions on how to build and install HAProxy&lt;/li&gt; &#xA; &lt;li&gt;BRANCHES to understand the project&#39;s life cycle and what version to use&lt;/li&gt; &#xA; &lt;li&gt;LICENSE for the project&#39;s license&lt;/li&gt; &#xA; &lt;li&gt;CONTRIBUTING for the process to follow to submit contributions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The more detailed documentation is located into the doc/ directory :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;doc/intro.txt for a quick introduction on HAProxy&lt;/li&gt; &#xA; &lt;li&gt;doc/configuration.txt for the configuration&#39;s reference manual&lt;/li&gt; &#xA; &lt;li&gt;doc/lua.txt for the Lua&#39;s reference manual&lt;/li&gt; &#xA; &lt;li&gt;doc/SPOE.txt for how to use the SPOE engine&lt;/li&gt; &#xA; &lt;li&gt;doc/network-namespaces.txt for how to use network namespaces under Linux&lt;/li&gt; &#xA; &lt;li&gt;doc/management.txt for the management guide&lt;/li&gt; &#xA; &lt;li&gt;doc/regression-testing.txt for how to use the regression testing suite&lt;/li&gt; &#xA; &lt;li&gt;doc/peers.txt for the peers protocol reference&lt;/li&gt; &#xA; &lt;li&gt;doc/coding-style.txt for how to adopt HAProxy&#39;s coding style&lt;/li&gt; &#xA; &lt;li&gt;doc/internals for developer-specific documentation (not all up to date)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>