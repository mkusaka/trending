<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T02:14:57Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>audacity/audacity</title>
    <updated>2023-12-01T02:14:57Z</updated>
    <id>tag:github.com,2023-12-01:/audacity/audacity</id>
    <link href="https://github.com/audacity/audacity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Audio Editor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Audacity&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.audacityteam.org&#34;&gt;&lt;strong&gt;Audacity&lt;/strong&gt;&lt;/a&gt; is an easy-to-use, multi-track audio editor and recorder for Windows, macOS, GNU/Linux and other operating systems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recording&lt;/strong&gt; from any real or virtual audio device that is available to the host system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Export / Import&lt;/strong&gt; a wide range of audio formats, extensible with FFmpeg.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High quality&lt;/strong&gt; using 32-bit float audio processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugin Support&lt;/strong&gt; for multiple audio plugin formats, including VST, LV2, and AU.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Macros&lt;/strong&gt; for chaining commands and batch processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scripting&lt;/strong&gt; in Python, Perl, or any other language that supports named pipes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nyquist&lt;/strong&gt; a powerful built-in scripting language that may also be used to create plugins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editing&lt;/strong&gt; multi-track editing with sample accuracy and arbitrary sample rates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt; for VI users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analysis and visualization&lt;/strong&gt; tools to analyze audio or other signal data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;p&gt;For end users, the latest Windows and macOS release version of Audacity is available from the &lt;a href=&#34;https://www.audacityteam.org/download/&#34;&gt;Audacity website&lt;/a&gt;. Help with using Audacity is available &lt;a href=&#34;https://audacityteam.org/help/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;Build instructions are available &lt;a href=&#34;https://github.com/audacity/audacity/raw/master/BUILDING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additional development resources may be found &lt;a href=&#34;https://audacity.gitbook.io/dev/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Audacity is open source software licensed GPLv3. Most code files are GPLv2-or-later, with the notable exceptions being /lib-src (which contains third party libraries), as well as VST3-related code. Documentation is licensed CC-by 3.0 unless otherwise noted. Details can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/audacity/audacity/master/LICENSE.txt&#34;&gt;license file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opa334/TrollStore</title>
    <updated>2023-12-01T02:14:57Z</updated>
    <id>tag:github.com,2023-12-01:/opa334/TrollStore</id>
    <link href="https://github.com/opa334/TrollStore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jailed iOS app that can install IPAs permanently with arbitary entitlements and root helpers because it trolls Apple&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TrollStore&lt;/h1&gt; &#xA;&lt;p&gt;TrollStore is a permasigned jailed app that can permanently install any IPA you open in it.&lt;/p&gt; &#xA;&lt;p&gt;It works because of an AMFI/CoreTrust bug where iOS does not verify whether or not a root certificate used to sign a binary is legit.&lt;/p&gt; &#xA;&lt;p&gt;Supported versions: 14.0 - 16.6.1, 17.0&lt;/p&gt; &#xA;&lt;h2&gt;Installing TrollStore&lt;/h2&gt; &#xA;&lt;p&gt;For installing TrollStore, refer to the guides at &lt;a href=&#34;https://ios.cfw.guide/installing-trollstore&#34;&gt;ios.cfw.guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;16.7.x and 17.0.1+ will NEVER be supported (unless Apple fucks CoreTrust up a third time...).&lt;/p&gt; &#xA;&lt;h2&gt;Updating TrollStore&lt;/h2&gt; &#xA;&lt;p&gt;When a new TrollStore update is available, a button to install it will appear at the top in the TrollStore settings. After tapping the button, TrollStore will automatically download the update, install it, and respring.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively (if anything goes wrong), you can download the TrollStore.tar file under Releases and open it in TrollStore, TrollStore will install the update and respring.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstalling an app&lt;/h2&gt; &#xA;&lt;p&gt;Apps installed from TrollStore can only be uninstalled from TrollStore itself, tap an app or swipe it to the left in the &#39;Apps&#39; tab to delete it.&lt;/p&gt; &#xA;&lt;h2&gt;Persistence Helper&lt;/h2&gt; &#xA;&lt;p&gt;The CoreTrust bug used in TrollStore is only enough to install &#34;System&#34; apps, this is because FrontBoard has an additional security check (it calls libmis) every time before a user app is launched. Unfortunately it is not possible to install new &#34;System&#34; apps that stay through an icon cache reload. Therefore, when iOS reloads the icon cache, all TrollStore installed apps including TrollStore itself will revert back to &#34;User&#34; state and will no longer launch.&lt;/p&gt; &#xA;&lt;p&gt;The only way to work around this is to install a persistence helper into a system app, this helper can then be used to reregister TrollStore and its installed apps as &#34;System&#34; so that they become launchable again, an option for this is available in TrollStore settings.&lt;/p&gt; &#xA;&lt;p&gt;On jailbroken iOS 14 when TrollHelper is used for installation, it is located in /Applications and will persist as a &#34;System&#34; app through icon cache reloads, therefore TrollHelper is used as the persistence helper on iOS 14.&lt;/p&gt; &#xA;&lt;h2&gt;URL Scheme&lt;/h2&gt; &#xA;&lt;p&gt;As of version 1.3, TrollStore replaces the system URL scheme &#34;apple-magnifier&#34; (this is done so &#34;jailbreak&#34; detections can&#39;t detect TrollStore like they could if TrollStore had a unique URL scheme). This URL scheme can be used to install applications right from the browser, the format goes as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;apple-magnifier://install?url=&amp;lt;URL_to_IPA&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On devices that don&#39;t have TrollStore (1.3+) installed, this will just open the magnifier app.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The binaries inside an IPA can have arbitrary entitlements, fakesign them with ldid and the entitlements you want (&lt;code&gt;ldid -S&amp;lt;path/to/entitlements.plist&amp;gt; &amp;lt;path/to/binary&amp;gt;&lt;/code&gt;) and TrollStore will preserve the entitlements when resigning them with the fake root certificate on installation. This gives you a lot of possibilities, some of which are explained below.&lt;/p&gt; &#xA;&lt;h3&gt;Banned entitlements&lt;/h3&gt; &#xA;&lt;p&gt;iOS 15 on A12+ has banned the following three entitlements related to running unsigned code, these are impossible to get without a PPL bypass, apps signed with them will crash on launch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;com.apple.private.cs.debugger&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dynamic-codesigning&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;com.apple.private.skip-library-validation&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Unsandboxing&lt;/h3&gt; &#xA;&lt;p&gt;Your app can run unsandboxed using one of the following entitlements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.private.security.container-required&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-container&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.private.security.no-sandbox&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The third one is recommended if you still want a sandbox container for your application.&lt;/p&gt; &#xA;&lt;p&gt;You might also need the platform-application entitlement in order for these to work properly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;platform-application&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the platform-application entitlement causes side effects such as some parts of the sandbox becoming tighter, so you may need additional private entitlements to circumvent that. (For example afterwards you need an exception entitlement for every single IOKit user client class you want to access).&lt;/p&gt; &#xA;&lt;p&gt;In order for an app with &lt;code&gt;com.apple.private.security.no-sandbox&lt;/code&gt; and &lt;code&gt;platform-application&lt;/code&gt; to be able to access it&#39;s own data container, you might need the additional entitlement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.private.security.storage.AppDataContainers&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Root Helpers&lt;/h3&gt; &#xA;&lt;p&gt;When your app is not sandboxed, you can spawn other binaries using posix_spawn, you can also spawn binaries as root with the following entitlement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;com.apple.private.persona-mgmt&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add your own binaries into your app bundle.&lt;/p&gt; &#xA;&lt;p&gt;Afterwards you can use the &lt;a href=&#34;https://raw.githubusercontent.com/opa334/TrollStore/main/Shared/TSUtil.m#L77&#34;&gt;spawnRoot function in TSUtil.m&lt;/a&gt; to spawn the binary as root.&lt;/p&gt; &#xA;&lt;h3&gt;Things that are not possible using TrollStore&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting proper platformization (&lt;code&gt;TF_PLATFORM&lt;/code&gt; / &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Spawning a launch daemon (Would need &lt;code&gt;CS_PLATFORMIZED&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Injecting a tweak into a system process (Would need &lt;code&gt;TF_PLATFORM&lt;/code&gt;, a userland PAC bypass and a PMAP trust level bypass)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits and Further Reading&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/LinusHenze/&#34;&gt;@LinusHenze&lt;/a&gt; - Found the CoreTrust bug that allows TrollStore to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/rPTifU1lG7Q&#34;&gt;Fugu15 Presentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://worthdoingbadly.com/coretrust/&#34;&gt;Write-Up on the CoreTrust bug with more information&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmrig/xmrig</title>
    <updated>2023-12-01T02:14:57Z</updated>
    <id>tag:github.com,2023-12-01:/xmrig/xmrig</id>
    <link href="https://github.com/xmrig/xmrig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RandomX, KawPow, CryptoNight and GhostRider unified CPU/GPU miner and RandomX benchmark&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;XMRig&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xmrig/xmrig/total.svg?sanitize=true&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/xmrig/xmrig/all.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub Release Date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmrig/xmrig/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xmrig/xmrig.svg?sanitize=true&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;XMRig is a high performance, open source, cross platform RandomX, KawPow, CryptoNight and &lt;a href=&#34;https://github.com/xmrig/xmrig/tree/master/src/crypto/ghostrider#readme&#34;&gt;GhostRider&lt;/a&gt; unified CPU/GPU miner and &lt;a href=&#34;https://xmrig.com/benchmark&#34;&gt;RandomX benchmark&lt;/a&gt;. Official binaries are available for Windows, Linux, macOS and FreeBSD.&lt;/p&gt; &#xA;&lt;h2&gt;Mining backends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; (x86/x64/ARMv7/ARMv8)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenCL&lt;/strong&gt; for AMD GPUs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CUDA&lt;/strong&gt; for NVIDIA GPUs via external &lt;a href=&#34;https://github.com/xmrig/xmrig-cuda&#34;&gt;CUDA plugin&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xmrig/xmrig/releases&#34;&gt;Binary releases&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xmrig.com/docs/miner/build&#34;&gt;Build from source&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to configure the miner is the &lt;a href=&#34;https://xmrig.com/docs/miner/config&#34;&gt;JSON config file&lt;/a&gt; as it is more flexible and human friendly. The &lt;a href=&#34;https://xmrig.com/docs/miner/command-line-options&#34;&gt;command line interface&lt;/a&gt; does not cover all features, such as mining profiles for different algorithms. Important options can be changed during runtime without miner restart by editing the config file or executing &lt;a href=&#34;https://xmrig.com/docs/miner/api&#34;&gt;API&lt;/a&gt; calls.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://xmrig.com/wizard&#34;&gt;Wizard&lt;/a&gt;&lt;/strong&gt; helps you create initial configuration for the miner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://workers.xmrig.info&#34;&gt;Workers&lt;/a&gt;&lt;/strong&gt; helps manage your miners via HTTP API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Default donation 1% (1 minute in 100 minutes) can be increased via option &lt;code&gt;donate-level&lt;/code&gt; or disabled in source code.&lt;/li&gt; &#xA; &lt;li&gt;XMR: &lt;code&gt;48edfHu7V9Z84YzzMa6fUueoELZ9ZRXq9VetWzYGzKt52XU5xvqgzYnDK9URnRoJMk1j8nLwEVsaSWJ4fhdUyZijBGUicoD&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xmrig&#34;&gt;xmrig&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/SChernykh&#34;&gt;sech1&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contacts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:support@xmrig.com&#34;&gt;support@xmrig.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/user/XMRig/&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/xmrig_dev&#34;&gt;twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>