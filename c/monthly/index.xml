<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:48:06Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TelegramMessenger/Telegram-iOS</title>
    <updated>2025-07-01T01:48:06Z</updated>
    <id>tag:github.com,2025-07-01:/TelegramMessenger/Telegram-iOS</id>
    <link href="https://github.com/TelegramMessenger/Telegram-iOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram-iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram iOS Source Code Compilation Guide&lt;/h1&gt; &#xA;&lt;p&gt;We welcome all developers to use our API and source code to create applications on our platform. There are several things we require from &lt;strong&gt;all developers&lt;/strong&gt; for the moment.&lt;/p&gt; &#xA;&lt;h1&gt;Creating your Telegram Application&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://core.telegram.org/api/obtaining_api_id&#34;&gt;&lt;strong&gt;Obtain your own api_id&lt;/strong&gt;&lt;/a&gt; for your application.&lt;/li&gt; &#xA; &lt;li&gt;Please &lt;strong&gt;do not&lt;/strong&gt; use the name Telegram for your app — or make sure your users understand that it is unofficial.&lt;/li&gt; &#xA; &lt;li&gt;Kindly &lt;strong&gt;do not&lt;/strong&gt; use our standard logo (white paper plane in a blue circle) as your app&#39;s logo.&lt;/li&gt; &#xA; &lt;li&gt;Please study our &lt;a href=&#34;https://core.telegram.org/mtproto/security_guidelines&#34;&gt;&lt;strong&gt;security guidelines&lt;/strong&gt;&lt;/a&gt; and take good care of your users&#39; data and privacy.&lt;/li&gt; &#xA; &lt;li&gt;Please remember to publish &lt;strong&gt;your&lt;/strong&gt; code too in order to comply with the licences.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Quick Compilation Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Get the Code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive -j8 https://github.com/TelegramMessenger/Telegram-iOS.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Xcode&lt;/h2&gt; &#xA;&lt;p&gt;Install Xcode (directly from &lt;a href=&#34;https://developer.apple.com/download/applications&#34;&gt;https://developer.apple.com/download/applications&lt;/a&gt; or using the App Store).&lt;/p&gt; &#xA;&lt;h2&gt;Adjust Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate a random identifier:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl rand -hex 8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a new Xcode project. Use &lt;code&gt;Telegram&lt;/code&gt; as the Product Name. Use &lt;code&gt;org.{identifier from step 1}&lt;/code&gt; as the Organization Identifier.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Keychain Access&lt;/code&gt; and navigate to &lt;code&gt;Certificates&lt;/code&gt;. Locate &lt;code&gt;Apple Development: your@email.address (XXXXXXXXXX)&lt;/code&gt; and double tap the certificate. Under &lt;code&gt;Details&lt;/code&gt;, locate &lt;code&gt;Organizational Unit&lt;/code&gt;. This is the Team ID.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;build-system/template_minimal_development_configuration.json&lt;/code&gt;. Use data from the previous steps.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Generate an Xcode project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=build-system/template_minimal_development_configuration.json \&#xA;    --xcodeManagedCodesigning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Advanced Compilation Guide&lt;/h1&gt; &#xA;&lt;h2&gt;Xcode&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy and edit &lt;code&gt;build-system/appstore-configuration.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;build-system/fake-codesigning&lt;/code&gt;. Create and download provisioning profiles, using the &lt;code&gt;profiles&lt;/code&gt; folder as a reference for the entitlements.&lt;/li&gt; &#xA; &lt;li&gt;Generate an Xcode project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=configuration_from_step_1.json \&#xA;    --codesigningInformationPath=directory_from_step_2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IPA&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Repeat the steps from the previous section. Use distribution provisioning profiles.&lt;/li&gt; &#xA; &lt;li&gt;Run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    build \&#xA;    --configurationPath=...see previous section... \&#xA;    --codesigningInformationPath=...see previous section... \&#xA;    --buildNumber=100001 \&#xA;    --configuration=release_arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Xcode is stuck at &#34;build-request.json not updated yet&#34;&lt;/h2&gt; &#xA;&lt;p&gt;Occasionally, you might observe the following message in your build log:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;/Users/xxx/Library/Developer/Xcode/DerivedData/Telegram-xxx/Build/Intermediates.noindex/XCBuildData/xxx.xcbuilddata/build-request.json&#34; not updated yet, waiting...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should this occur, simply cancel the ongoing build and initiate a new one.&lt;/p&gt; &#xA;&lt;h2&gt;Telegram_xcodeproj: no such package&lt;/h2&gt; &#xA;&lt;p&gt;Following a system restart, the auto-generated Xcode project might encounter a build failure accompanied by this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ERROR: Skipping &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj:Telegram_xcodeproj&#39;: no such package &#39;@rules_xcodeproj_generated//generator/Telegram/Telegram_xcodeproj&#39;: BUILD file not found in directory &#39;generator/Telegram/Telegram_xcodeproj&#39; of external repository @rules_xcodeproj_generated. Add a BUILD file to a directory to mark it as a package.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter this issue, re-run the project generation steps in the README.&lt;/p&gt; &#xA;&lt;h1&gt;Tips&lt;/h1&gt; &#xA;&lt;h2&gt;Codesigning is not required for simulator-only builds&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;--disableProvisioningProfiles&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py \&#xA;    --cacheDir=&#34;$HOME/telegram-bazel-cache&#34; \&#xA;    generateProject \&#xA;    --configurationPath=path-to-configuration.json \&#xA;    --codesigningInformationPath=path-to-provisioning-data \&#xA;    --disableProvisioningProfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versions&lt;/h2&gt; &#xA;&lt;p&gt;Each release is built using a specific Xcode version (see &lt;code&gt;versions.json&lt;/code&gt;). The helper script checks the versions of the installed software and reports an error if they don&#39;t match the ones specified in &lt;code&gt;versions.json&lt;/code&gt;. It is possible to bypass these checks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 build-system/Make/Make.py --overrideXcodeVersion build ... # Don&#39;t check the version of Xcode&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nesbox/TIC-80</title>
    <updated>2025-07-01T01:48:06Z</updated>
    <id>tag:github.com,2025-07-01:/nesbox/TIC-80</id>
    <link href="https://github.com/nesbox/TIC-80" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TIC-80 is a fantasy computer for making, playing and sharing tiny games.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nesbox/TIC-80/actions?query=workflow%3ABuild&#34;&gt;&lt;img src=&#34;https://github.com/nesbox/TIC-80/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tic80.com/img/logo64.png&#34; alt=&#34;TIC-80&#34;&gt; &lt;strong&gt;TIC-80 TINY COMPUTER&lt;/strong&gt; — &lt;a href=&#34;https://tic80.com&#34;&gt;tic80.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#about&#34;&gt;About&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#binary-downloads&#34;&gt;Binary Downloads&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#nightly-builds&#34;&gt;Nightly builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#unofficial-builds&#34;&gt;Unofficial Linux/arm64 nightly builds&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#pro-version&#34;&gt;Pro Version&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#pro-features&#34;&gt;Pro Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#build-instructions&#34;&gt;Build Instructions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#windows&#34;&gt;Windows&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#msvc-microsoft-visual-c&#34;&gt;MSVC (Microsoft Visual C++)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#windows-xp--windows-7-32-bit-x86&#34;&gt;Windows XP / Windows 7 32-bit (x86)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#windows-10--11-64-bit-x64&#34;&gt;Windows 10 / 11 64-bit (x64)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#msys2--mingw&#34;&gt;MSYS2 / MINGW&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#windows-10--11-64-bit-x64-1&#34;&gt;Windows 10 / 11 64-bit (x64)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#linux&#34;&gt;Linux&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#ubuntu&#34;&gt;Ubuntu&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#ubuntu-2204-jammy-jellyfish&#34;&gt;Ubuntu 22.04 (Jammy Jellyfish)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#ubuntu-2404-noble-numbat&#34;&gt;Ubuntu 24.04 (Noble Numbat)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#arch&#34;&gt;Arch&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#fedora&#34;&gt;Fedora&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#fedora-36&#34;&gt;Fedora 36&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#fedora-40&#34;&gt;Fedora 40&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#opensuse&#34;&gt;openSUSE&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#opensuse-tumbleweed--leap-160&#34;&gt;openSUSE Tumbleweed / Leap 16.0&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#raspberry-pi&#34;&gt;Raspberry Pi&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#raspberry-pi-os-64-bit-bookworm&#34;&gt;Raspberry Pi OS (64-Bit) (Bookworm)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#raspberry-pi-retropie&#34;&gt;Raspberry Pi (Retropie)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#mac&#34;&gt;Mac&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#freebsd&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#linux-1&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#ios--tvos&#34;&gt;iOS / tvOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;TIC-80 is a free and open source fantasy computer for making, playing and sharing tiny games.&lt;/p&gt; &#xA;&lt;p&gt;With TIC-80 you get built-in tools for development: code, sprites, maps, sound editors and the command line, which is enough to create a mini retro game.&lt;/p&gt; &#xA;&lt;p&gt;Games are packaged into a cartridge file, which can be easily distributed. TIC-80 works on all popular platforms. This means your cartridge can be played in any device.&lt;/p&gt; &#xA;&lt;p&gt;To make a retro styled game, the whole process of creation and execution takes place under some technical limitations: 240x136 pixel display, 16 color palette, 256 8x8 color sprites, 4 channel sound, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1101448/92492270-d6bcbc80-f1fb-11ea-9d2d-468ad015ace2.gif&#34; alt=&#34;TIC-80&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple programming languages: &lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt;, &lt;a href=&#34;https://moonscript.org&#34;&gt;Moonscript&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;Javascript&lt;/a&gt;, &lt;a href=&#34;https://www.ruby-lang.org/en&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;https://wren.io/&#34;&gt;Wren&lt;/a&gt;, &lt;a href=&#34;https://fennel-lang.org&#34;&gt;Fennel&lt;/a&gt;, &lt;a href=&#34;https://www.squirrel-lang.org&#34;&gt;Squirrel&lt;/a&gt;, &lt;a href=&#34;https://janet-lang.org&#34;&gt;Janet&lt;/a&gt;, and &lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Games can have mouse and keyboard as input&lt;/li&gt; &#xA; &lt;li&gt;Games can have up to 4 controllers as input (with up to 8 buttons, each)&lt;/li&gt; &#xA; &lt;li&gt;Built-in editors: for code, sprites, world maps, sound effects and music&lt;/li&gt; &#xA; &lt;li&gt;An additional memory bank: load different assets from your cartridge while your game is executing&lt;/li&gt; &#xA; &lt;li&gt;Moderated community&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Binary Downloads&lt;/h1&gt; &#xA;&lt;h2&gt;Stable Builds&lt;/h2&gt; &#xA;&lt;p&gt;You can download compiled versions for the major operating systems directly from our &lt;a href=&#34;https://github.com/nesbox/TIC-80/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Nightly Builds&lt;/h2&gt; &#xA;&lt;p&gt;Can be downloaded from official &lt;a href=&#34;https://nightly.link/nesbox/TIC-80/workflows/build/main&#34;&gt;nightly.link&lt;/a&gt; page or from the &lt;a href=&#34;https://github.com/nesbox/TIC-80/actions?query=branch%3Amain&#34;&gt;Github Actions&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Unofficial Builds&lt;/h2&gt; &#xA;&lt;p&gt;Linux (arm64) builds can be downloaded from &lt;em&gt;aliceisjustplaying&lt;/em&gt; &lt;a href=&#34;https://nightly.link/aliceisjustplaying/TIC-80/workflows/build-linux-arm64/main?preview&#34;&gt;nightly.link&lt;/a&gt; page. Tested on Raspberry Pi OS (64-bit) (Bookworm), Asahi Linux (Fedora Remix), Ubuntu 22.04 and Fedora 40.&lt;/p&gt; &#xA;&lt;h1&gt;Pro Version&lt;/h1&gt; &#xA;&lt;p&gt;To help support TIC-80 development, we have a &lt;a href=&#34;https://nesbox.itch.io/tic80&#34;&gt;PRO Version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This version has a few additional features and binaries can only be downloaded on our itch.io page.&lt;/p&gt; &#xA;&lt;p&gt;For users who can&#39;t afford the program can easily build the pro version from the source code using &lt;code&gt;cmake .. -DBUILD_PRO=On&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Pro Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save/load cartridges in text format, and create your game in any editor you want, also useful for version control systems.&lt;/li&gt; &#xA; &lt;li&gt;Even more memory banks: instead of having only 1 memory bank you have 8.&lt;/li&gt; &#xA; &lt;li&gt;Export your game without editors, and then publish it to app stores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;You can play and share games, tools and music at &lt;a href=&#34;https://tic80.com/play&#34;&gt;tic80.com/play&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The community also hangs out and discusses on &lt;a href=&#34;https://t.me/tic80&#34;&gt;Telegram&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/HwZDw7n4dN&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;You can contribute by reporting a bug or requesting a new feature on our &lt;a href=&#34;https://github.com/nesbox/TIC-80/issues&#34;&gt;Issues&lt;/a&gt; page. Keep in mind when engaging on a discussion to follow our &lt;a href=&#34;https://github.com/nesbox/TIC-80/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also contribute by reviewing or improving our &lt;a href=&#34;https://github.com/nesbox/TIC-80/wiki&#34;&gt;Wiki&lt;/a&gt;. The wiki holds TIC-80 documentation, code snippets and game development tutorials.&lt;/p&gt; &#xA;&lt;h1&gt;Build instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h3&gt;MSVC (Microsoft Visual C++)&lt;/h3&gt; &#xA;&lt;h4&gt;Windows XP / Windows 7 32-bit (x86)&lt;/h4&gt; &#xA;&lt;p&gt;The build process has been tested on Windows 11 64-bit (x64); all this should run on Windows 7 SP1 32-bit (x86) as well. This guide assumes you&#39;re running an elevated Command Prompt.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt;, &lt;a href=&#34;https://winstall.app/apps/Microsoft.VisualStudio.2019.BuildTools&#34;&gt;Visual Studio 2019 Build Tools&lt;/a&gt; and &lt;a href=&#34;https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.8-1/rubyinstaller-devkit-2.7.8-1-x86.exe&#34;&gt;Ruby+Devkit 2.7.8 x86&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the neccessary dependencies within VS2019:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Launch &#34;Visual Studio Installer&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Modify&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Check &#34;Desktop Development with C++&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Go to &#34;Individual components&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Search for &#34;v141&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Install: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;C++ Windows XP Support for VS 2017 (v141) tools [Deprecated]&lt;/li&gt; &#xA;     &lt;li&gt;MSVC v141 - VS 2017 C++ x64/x86 build tools (v14.16)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Modify&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;ridk install&lt;/code&gt; with options &lt;code&gt;1,3&lt;/code&gt; to set up &lt;a href=&#34;https://www.msys2.org&#34;&gt;MSYS2&lt;/a&gt; and development toolchain&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add MSYS2&#39;s &lt;a href=&#34;https://gcc.gnu.org&#34;&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/a&gt; at &lt;code&gt;C:\Ruby27\msys32\mingw32\bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; &lt;a href=&#34;https://www.java.com/en/download/help/path.html#:~:text=your%20java%20code.-,Windows%207,-From%20the%20desktop&#34;&gt;(guide)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a new elevated Command Prompt and run the following commands:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd .\TIC-80\build&#xA;copy /y .\build\janet\janetconf.h .\vendor\janet\src\conf\janetconf.h&#xA;cmake -G &#34;Visual Studio 16 2019&#34; -A Win32 -T v141_xp -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_WITH_ALL=On ..&#xA;cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll find &lt;code&gt;tic80.exe&lt;/code&gt; in &lt;code&gt;TIC-80\build\bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Windows 10 / 11 64-bit (x64)&lt;/h4&gt; &#xA;&lt;p&gt;This guide assumes you&#39;re running PowerShell with an elevated prompt.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt;, &lt;a href=&#34;https://winstall.app/apps/Microsoft.VisualStudio.2019.BuildTools&#34;&gt;Visual Studio 2019 Build Tools&lt;/a&gt; and &lt;a href=&#34;https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.8-1/rubyinstaller-devkit-2.7.8-1-x64.exe&#34;&gt;Ruby+Devkit 2.7.8 x64&lt;/a&gt; manually or with &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;WinGet&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install Git.Git Kitware.CMake Microsoft.VisualStudio.2019.BuildTools RubyInstallerTeam.RubyWithDevKit.2.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the neccessary dependencies within VS2019: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Launch &#34;Visual Studio Installer&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Modify&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Check &#34;Desktop Development with C++&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Make sure the following components are installed: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Windows 10 SDK (10.0.19041.0)&lt;/li&gt; &#xA;     &lt;li&gt;MSVC v142 - VS 2019 C+ + x64/x86 build tools (Latest)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Click &#34;Modify&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;ridk install&lt;/code&gt; with options &lt;code&gt;1,3&lt;/code&gt; to set up &lt;a href=&#34;https://www.msys2.org&#34;&gt;MSYS2&lt;/a&gt; and development toolchain&lt;/li&gt; &#xA; &lt;li&gt;Add MSYS2&#39;s &lt;a href=&#34;https://gcc.gnu.org&#34;&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/a&gt; at &lt;code&gt;C:\Ruby27-x64\msys64\mingw64\bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; &lt;a href=&#34;https://www.java.com/en/download/help/path.html#:~:text=Mac%20OS%20X.-,Windows,-Windows%2010%20and&#34;&gt;manually&lt;/a&gt; or with the following PowerShell command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Environment]::SetEnvironmentVariable(&#39;Path&#39;, $env:Path + &#39;;C:\Ruby27-x64\msys64\mingw64\bin&#39;, [EnvironmentVariableTarget]::Machine)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a new elevated prompt and run the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd .\TIC-80\build&#xA;cmake -G &#34;Visual Studio 16 2019&#34; -A x64 -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On ..&#xA;cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll find &lt;code&gt;tic80.exe&lt;/code&gt; in &lt;code&gt;TIC-80\build\bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MSYS2 / MINGW&lt;/h3&gt; &#xA;&lt;h4&gt;Windows 10 / 11 64-bit (x64)&lt;/h4&gt; &#xA;&lt;p&gt;This guide assumes you&#39;re running PowerShell with an elevated prompt.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://cmake.org/download&#34;&gt;CMake&lt;/a&gt; and &lt;a href=&#34;https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.8-1/rubyinstaller-devkit-2.7.8-1-x64.exe&#34;&gt;Ruby+Devkit 2.7.8 x64&lt;/a&gt; manually or with &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;WinGet&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install Git.Git Kitware.CMake RubyInstallerTeam.RubyWithDevKit.2.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;ridk install&lt;/code&gt; with options &lt;code&gt;1,3&lt;/code&gt; to set up &lt;a href=&#34;https://www.msys2.org&#34;&gt;MSYS2&lt;/a&gt; and development toolchain&lt;/li&gt; &#xA; &lt;li&gt;Add MSYS2&#39;s &lt;a href=&#34;https://gcc.gnu.org&#34;&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/a&gt; at &lt;code&gt;C:\Ruby27-x64\msys64\mingw64\bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt; &lt;a href=&#34;https://www.java.com/en/download/help/path.html#:~:text=Mac%20OS%20X.-,Windows,-Windows%2010%20and&#34;&gt;manually&lt;/a&gt; or with the following PowerShell command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Environment]::SetEnvironmentVariable(&#39;Path&#39;, $env:Path + &#39;;C:\Ruby27-x64\msys64\mingw64\bin&#39;, [EnvironmentVariableTarget]::Machine)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a new elevated prompt and run the following commands:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd .\TIC-80\build&#xA;cmake -G &#34;MinGW Makefiles&#34; -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On ..&#xA;$numCPUs = [Environment]::ProcessorCount&#xA;mingw32-make &#34;-j$numCPUs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll find &lt;code&gt;tic80.exe&lt;/code&gt; in &lt;code&gt;TIC-80\build\bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Ubuntu&lt;/h3&gt; &#xA;&lt;h4&gt;Ubuntu 22.04 (Jammy Jellyfish)&lt;/h4&gt; &#xA;&lt;p&gt;Run the following commands from a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Install the latest CMake from https://apt.kitware.com&#xA;test -f /usr/share/doc/kitware-archive-keyring/copyright ||&#xA;wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&amp;gt;/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg &amp;gt;/dev/null&#xA;echo &#39;deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main&#39; | sudo tee /etc/apt/sources.list.d/kitware.list &amp;gt;/dev/null&#xA;sudo apt-get update&#xA;test -f /usr/share/doc/kitware-archive-keyring/copyright ||&#xA;sudo rm /usr/share/keyrings/kitware-archive-keyring.gpg&#xA;sudo apt-get install kitware-archive-keyring&#xA;&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt -y install build-essential cmake git libpipewire-0.3-dev libwayland-dev libsdl2-dev ruby-dev libglvnd-dev libglu1-mesa-dev freeglut3-dev libcurl4-openssl-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On .. &amp;amp;&amp;amp; cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu 24.04 (Noble Numbat)&lt;/h4&gt; &#xA;&lt;p&gt;Run the following commands from a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt -y install build-essential cmake git libpipewire-0.3-dev libwayland-dev libsdl2-dev ruby-dev libcurl4-openssl-dev libglvnd-dev libglu1-mesa-dev freeglut3-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On -DBUILD_STATIC=On .. &amp;amp;&amp;amp; cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Arch&lt;/h3&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S cmake ruby mesa libglvnd glu&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_WITH_ALL=On .. &amp;amp;&amp;amp; cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;h4&gt;Fedora 36&lt;/h4&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf -y groupinstall &#34;Development Tools&#34; &#34;Development Libraries&#34;&#xA;sudo dnf -y install ruby rubygem-{tk{,-doc},rake,test-unit} cmake libglvnd-devel libglvnd-gles freeglut-devel clang libXext-devel SDL_sound pipewire-devel pipewire-jack-audio-connection-kit-devel pulseaudio-libs-devel&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DCMAKE_CXX_COMPILER=clang++ -DSDL_ALSA=On -DBUILD_WITH_ALL=On ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fedora 40&lt;/h4&gt; &#xA;&lt;p&gt;Run the following commands from a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf -y groupinstall &#34;Development Tools&#34; &#34;Development Libraries&#34;&#xA;sudo dnf -y install ruby-devel rubygem-rake cmake clang pipewire-devel SDL2-devel SDL2_sound-devel SDL2_gfx-devel wayland-devel libXext-devel pipewire-jack-audio-connection-kit-devel pipewire-jack-audio-connection-kit-devel pulseaudio-libs-devel rubygems-devel libdecor-devel libdrm-devel mesa-libgbm-devel esound-devel freeglut-devel&#xA;cmake -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On ..&#xA;cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;openSUSE&lt;/h3&gt; &#xA;&lt;h4&gt;openSUSE Tumbleweed / Leap 16.0&lt;/h4&gt; &#xA;&lt;p&gt;Run the following commands from a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper refresh&#xA;sudo zypper install --no-confirm --type pattern devel_basis&#xA;sudo zypper install --no-confirm cmake glu-devel libXext-devel pipewire-devel libcurl-devel&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On .. &amp;amp;&amp;amp; cmake --build . --parallel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Raspberry Pi&lt;/h3&gt; &#xA;&lt;h4&gt;Raspberry Pi OS (64-Bit) (Bookworm)&lt;/h4&gt; &#xA;&lt;p&gt;Run the following commands from a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt -y install cmake libpipewire-0.3-dev libwayland-dev libsdl2-dev ruby-dev libcurl4-openssl-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_SDLGPU=On -DBUILD_WITH_ALL=On .. &amp;amp;&amp;amp; cmake --build . --parallel 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Raspberry Pi (Retropie)&lt;/h4&gt; &#xA;&lt;p&gt;First, add jessie-backports repo to your &lt;code&gt;/etc/apt/sources.list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# required public keys&#xA;gpg --keyserver pgpkeys.mit.edu --recv-key  8B48AD6246925553&#xA;gpg -a --export 8B48AD6246925553 | sudo apt-key add -&#xA;gpg --keyserver pgpkeys.mit.edu --recv-key 7638D0442B90D010&#xA;gpg -a --export 7638D0442B90D010 | sudo apt-key add -&#xA;&#xA;# upgrade system&#xA;sudo apt-get update&#xA;sudo apt-get dist-upgrade&#xA;&#xA;# install software&#xA;sudo apt-get install git build-essential ruby-full libsdl2-dev zlib1g-dev&#xA;sudo apt-get install -t jessie-backports liblua5.3-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_WITH_ALL=On ..&#xA;&#xA;# install software ubuntu 22.04.3 LTS&#xA;sudo apt-get install git build-essential ruby-full libsdl2-dev zlib1g-dev&#xA;sudo apt-get install liblua5.3-dev&#xA;sudo apt-get install libcurl4-openssl-dev&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_WITH_ALL=On ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://raw.githubusercontent.com/nesbox/TIC-80/main/#install-instructions&#34;&gt;Install Instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you are using a normal Raspberry Pi image (not Retropie) you may not have OpenGL drivers enabled. Run &lt;code&gt;sudo raspi-config&lt;/code&gt;, then select 7 for &#34;Advanced Options&#34;, followed by 6 for &#34;GL Drivers&#34;, and enable &#34;GL (Fake KMS) Desktop Driver&#34;. After changing this setting, reboot.&lt;/p&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;p&gt;install &lt;code&gt;Command Line Tools for Xcode&lt;/code&gt; and &lt;code&gt;brew&lt;/code&gt; package manager&lt;/p&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install git cmake&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_WITH_ALL=On ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to create application icon for development version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p ~/Applications/TIC80dev.app/Contents/{MacOS,Resources}&#xA;cp -f macosx/tic80.plist ~/Applications/TIC80dev.app/Contents/Info.plist&#xA;cp -f macosx/tic80.icns ~/Applications/TIC80dev.app/Contents/Resources&#xA;cat &amp;gt; ~/Applications/TIC80dev.app/Contents/MacOS/tic80 &amp;lt;&amp;lt;EOF&#xA;#!/bin/sh&#xA;exec /Users/nesbox/projects/TIC-80/build/bin/tic80 --skip --scale 2 &amp;gt;/dev/null&#xA;EOF&#xA;chmod +x ~/Applications/TIC80dev.app/Contents/MacOS/TIC80dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to update the absolute path to the tic80 binary in the script, or update the launch arguments.&lt;/p&gt; &#xA;&lt;h2&gt;FreeBSD&lt;/h2&gt; &#xA;&lt;p&gt;run the following commands in the Terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pkg install gcc git cmake ruby libglvnd libglu freeglut mesa-devel mesa-dri alsa-lib&#xA;git clone --recursive https://github.com/nesbox/TIC-80 &amp;amp;&amp;amp; cd TIC-80/build&#xA;cmake -DBUILD_WITH_ALL=On ..&#xA;make -j4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mesa looks for swrast_dri.so from the wrong path, so also symlink it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ln -s /usr/local/lib/dri/swrast_dri.so /usr/local/lib/dri-devel/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Install instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To make an executable file &lt;code&gt;./tic80&lt;/code&gt; without installation run &lt;code&gt;make&lt;/code&gt; and locate the output in &lt;code&gt;TIC-80/build/bin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To install system-wide run &lt;code&gt;sudo make install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can append &lt;code&gt;-j4&lt;/code&gt; if you have a modern system, or &lt;code&gt;-j2&lt;/code&gt; for a Raspberry Pi to speed up the process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TIC-80 can now be run with &lt;code&gt;tic80&lt;/code&gt; (if installed) or &lt;code&gt;./tic80&lt;/code&gt; (with no installation).&lt;/p&gt; &#xA;&lt;h2&gt;iOS / tvOS&lt;/h2&gt; &#xA;&lt;p&gt;You can find iOS/tvOS version here&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0.60.3: &lt;a href=&#34;https://github.com/brunophilipe/TIC-80&#34;&gt;https://github.com/brunophilipe/TIC-80&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;0.45.0: &lt;a href=&#34;https://github.com/CliffsDover/TIC-80&#34;&gt;https://github.com/CliffsDover/TIC-80&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Android&lt;/h2&gt; &#xA;&lt;p&gt;You can find the compiled version ready download and install &lt;a href=&#34;https://f-droid.org/packages/com.nesbox.tic/&#34;&gt;on F-Droid&lt;/a&gt;:&lt;br&gt; &lt;a href=&#34;https://f-droid.org/packages/com.nesbox.tic/&#34;&gt;&lt;img alt=&#34;Get it on F-Droid&#34; src=&#34;https://fdroid.gitlab.io/artwork/badge/get-it-on.png&#34; width=&#34;256&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filippo Rivato — &lt;a href=&#34;https://twitter.com/HomineLudens&#34;&gt;Twitter @HomineLudens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fred Bednarski — &lt;a href=&#34;https://twitter.com/FredBednarski&#34;&gt;Twitter @FredBednarski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Al Rado — &lt;a href=&#34;https://twitter.com/alrado2&#34;&gt;Twitter @alrado2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trevor Martin — &lt;a href=&#34;https://twitter.com/trelemar&#34;&gt;Twitter @trelemar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MonstersGoBoom — &lt;a href=&#34;https://twitter.com/MonstersGo&#34;&gt;Twitter @MonstersGoBoom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matheus Lessa — &lt;a href=&#34;https://twitter.com/matheuslrod&#34;&gt;Twitter @matheuslrod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CliffsDover — &lt;a href=&#34;https://twitter.com/DancingBottle&#34;&gt;Twitter @DancingBottle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Frantisek Jahoda — &lt;a href=&#34;https://github.com/jahodfra&#34;&gt;GitHub @jahodfra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guilherme Medeiros — &lt;a href=&#34;https://github.com/frenetic&#34;&gt;GitHub @frenetic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrei Rudenko — &lt;a href=&#34;https://github.com/RudenkoArts&#34;&gt;GitHub @RudenkoArts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Phil Hagelberg — &lt;a href=&#34;https://technomancy.us/colophon&#34;&gt;@technomancy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rob Loach — &lt;a href=&#34;https://twitter.com/RobLoach&#34;&gt;Twitter @RobLoach&lt;/a&gt; &lt;a href=&#34;https://github.com/RobLoach&#34;&gt;GitHub @RobLoach&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wade Brainerd — &lt;a href=&#34;https://github.com/wadetb&#34;&gt;GitHub @wadetb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paul Robinson — &lt;a href=&#34;https://github.com/paul59&#34;&gt;GitHub @paul59&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stefan Devai — &lt;a href=&#34;https://github.com/stefandevai&#34;&gt;GitHub @stefandevai&lt;/a&gt; &lt;a href=&#34;https://stefandevai.me&#34;&gt;Blog stefandevai.me&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Damien de Lemeny — &lt;a href=&#34;https://github.com/ddelemeny&#34;&gt;GitHub @ddelemeny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adrian Siekierka — &lt;a href=&#34;https://github.com/asiekierka&#34;&gt;GitHub @asiekierka&lt;/a&gt; &lt;a href=&#34;https://asie.pl/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Jay Em (Sweetie16 palette) — &lt;a href=&#34;https://twitter.com/GrafxKid&#34;&gt;Twitter @GrafxKid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;msx80 — &lt;a href=&#34;https://twitter.com/msx80&#34;&gt;Twitter @msx80&lt;/a&gt; &lt;a href=&#34;https://github.com/msx80&#34;&gt;Github msx80&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Josh Goebel — &lt;a href=&#34;https://twitter.com/dreamer3&#34;&gt;Twitter @dreamer3&lt;/a&gt; &lt;a href=&#34;https://github.com/joshgoebel&#34;&gt;Github joshgoebel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Joshua Minor — &lt;a href=&#34;https://github.com/jminor&#34;&gt;GitHub @jminor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Julia Nelz — &lt;a href=&#34;https://github.com/remi6397&#34;&gt;Github @remi6397&lt;/a&gt; &lt;a href=&#34;https://nelz.pl&#34;&gt;WWW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thorben Krüger — &lt;a href=&#34;https://chaos.social/@benthor&#34;&gt;Mastodon @benthor@chaos.social&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;David St—Hilaire — &lt;a href=&#34;https://github.com/sthilaid&#34;&gt;GitHub @sthilaid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alec Troemel — &lt;a href=&#34;https://github.com/AlecTroemel&#34;&gt;Github @alectroemel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kolten Pearson — &lt;a href=&#34;https://github.com/koltenpearson&#34;&gt;Github @koltenpearson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cort Stratton — &lt;a href=&#34;https://github.com/cdwfs&#34;&gt;Github @cdwfs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alice — &lt;a href=&#34;https://github.com/aliceisjustplaying&#34;&gt;Github @aliceisjustplaying&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sven Knebel — &lt;a href=&#34;https://github.com/sknebel&#34;&gt;Github @sknebel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Graham Bates — &lt;a href=&#34;https://github.com/grahambates&#34;&gt;Github @grahambates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kii — &lt;a href=&#34;https://github.com/kiikrindar&#34;&gt;Github @kiikrindar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matt Westcott — &lt;a href=&#34;https://github.com/gasman&#34;&gt;Github @gasman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NuSan — &lt;a href=&#34;https://github.com/thenusan&#34;&gt;Github @TheNuSan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Mbed-TLS/mbedtls</title>
    <updated>2025-07-01T01:48:06Z</updated>
    <id>tag:github.com,2025-07-01:/Mbed-TLS/mbedtls</id>
    <link href="https://github.com/Mbed-TLS/mbedtls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open source, portable, easy to use, readable and flexible TLS library, and reference implementation of the PSA Cryptography API. Releases are on a varying cadence, typically around 3 - 6 months between releases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README for Mbed TLS&lt;/h1&gt; &#xA;&lt;p&gt;Mbed TLS is a C library that implements cryptographic primitives, X.509 certificate manipulation and the SSL/TLS and DTLS protocols. Its small code footprint makes it suitable for embedded systems.&lt;/p&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#psa-cryptography-api&#34;&gt;PSA Cryptography API&lt;/a&gt;. This is currently a preview for evaluation purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS should build out of the box on most systems. Some platform specific options are available in the fully documented configuration file &lt;code&gt;include/mbedtls/mbedtls_config.h&lt;/code&gt;, which is also the place where features can be selected. This file can be edited manually, or in a more programmatic way using the Python 3 script &lt;code&gt;scripts/config.py&lt;/code&gt; (use &lt;code&gt;--help&lt;/code&gt; for usage instructions).&lt;/p&gt; &#xA;&lt;p&gt;Compiler options can be set using conventional environment variables such as &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CFLAGS&lt;/code&gt; when using the Make and CMake build system (see below).&lt;/p&gt; &#xA;&lt;p&gt;We provide some non-standard configurations focused on specific use cases in the &lt;code&gt;configs/&lt;/code&gt; directory. You can read more about those in &lt;code&gt;configs/README.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The main Mbed TLS documentation is available via &lt;a href=&#34;https://mbed-tls.readthedocs.io/&#34;&gt;ReadTheDocs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for the PSA Cryptography API is available &lt;a href=&#34;https://arm-software.github.io/psa-api/crypto/&#34;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate a local copy of the library documentation in HTML format, tailored to your compile-time configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure that &lt;a href=&#34;http://www.doxygen.nl/&#34;&gt;Doxygen&lt;/a&gt; is installed.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make apidoc&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse &lt;code&gt;apidoc/index.html&lt;/code&gt; or &lt;code&gt;apidoc/modules.html&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For other sources of documentation, see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;SUPPORT&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;There are currently three active build systems used within Mbed TLS releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make&lt;/li&gt; &#xA; &lt;li&gt;CMake&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main systems used for development are CMake and GNU Make. Those systems are always complete and up-to-date. The others should reflect all changes present in the CMake and Make build system, although features may not be ported there automatically.&lt;/p&gt; &#xA;&lt;p&gt;The Make and CMake build systems create three libraries: libmbedcrypto/libtfpsacrypto, libmbedx509, and libmbedtls. Note that libmbedtls depends on libmbedx509 and libmbedcrypto/libtfpsacrypto, and libmbedx509 depends on libmbedcrypto/libtfpsacrypto. As a result, some linkers will expect flags to be in a specific order, for example the GNU linker wants &lt;code&gt;-lmbedtls -lmbedx509 -lmbedcrypto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tool versions&lt;/h3&gt; &#xA;&lt;p&gt;You need the following tools to build the library with the provided makefiles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU Make 3.82 or a build tool that CMake supports.&lt;/li&gt; &#xA; &lt;li&gt;A C99 toolchain (compiler, linker, archiver). We actively test with GCC 5.4, Clang 3.8, Arm Compiler 6, IAR 8 and Visual Studio 2017. More recent versions should work. Slightly older versions may work.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.8 to generate the test code. Python is also needed to integrate PSA drivers and to build the development branch (see next section).&lt;/li&gt; &#xA; &lt;li&gt;Perl to run the tests, and to generate some source files in the development branch.&lt;/li&gt; &#xA; &lt;li&gt;CMake 3.10.2 or later (if using CMake).&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2017 or later (if using Visual Studio).&lt;/li&gt; &#xA; &lt;li&gt;Doxygen 1.8.11 or later (if building the documentation; slightly older versions should work).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Git usage&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;development&lt;/code&gt; branch and the &lt;code&gt;mbedtls-3.6&lt;/code&gt; long-term support branch of Mbed TLS use a &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules#_cloning_submodules&#34;&gt;Git submodule&lt;/a&gt; (&lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls-framework&#34;&gt;framework&lt;/a&gt;). This is not needed to merely compile the library at a release tag. This is not needed to consume a release archive (zip or tar).&lt;/p&gt; &#xA;&lt;h3&gt;Generated source files in the development branch&lt;/h3&gt; &#xA;&lt;p&gt;The source code of Mbed TLS includes some files that are automatically generated by scripts and whose content depends only on the Mbed TLS source, not on the platform or on the library configuration. These files are not included in the development branch of Mbed TLS, but the generated files are included in official releases. This section explains how to generate the missing files in the development branch.&lt;/p&gt; &#xA;&lt;p&gt;The following tools are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Perl, for some library source files and for Visual Studio build files.&lt;/li&gt; &#xA; &lt;li&gt;Python 3.8 and some Python packages, for some library source files, sample programs and test data. To install the necessary packages, run: &lt;pre&gt;&lt;code&gt;python3 -m pip install --user -r scripts/basic.requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; Depending on your Python installation, you may need to invoke &lt;code&gt;python&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. To install the packages system-wide, omit the &lt;code&gt;--user&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;A C compiler for the host platform, for some test data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are cross-compiling, you must set the &lt;code&gt;CC&lt;/code&gt; environment variable to a C compiler for the host platform when generating the configuration-independent files.&lt;/p&gt; &#xA;&lt;p&gt;Any of the following methods are available to generate the configuration-independent files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If not cross-compiling, running &lt;code&gt;make&lt;/code&gt; with any target, or just &lt;code&gt;make&lt;/code&gt;, will automatically generate required files.&lt;/li&gt; &#xA; &lt;li&gt;On non-Windows systems, when not cross-compiling, CMake will generate the required files automatically.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make generated_files&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Unix/POSIX systems, run &lt;code&gt;framework/scripts/make_generated_files.py&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA; &lt;li&gt;On Windows, run &lt;code&gt;scripts\make_generated_files.bat&lt;/code&gt; to generate all the configuration-independent files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Make&lt;/h3&gt; &#xA;&lt;p&gt;We require GNU Make. To build the library and the sample programs, GNU Make and a C compiler are sufficient. Some of the more advanced build targets require some Unix/Linux tools.&lt;/p&gt; &#xA;&lt;p&gt;We intentionally only use a minimum of functionality in the makefiles in order to keep them as simple and independent of different toolchains as possible, to allow users to more easily move between different platforms. Users who need more features are recommended to use CMake.&lt;/p&gt; &#xA;&lt;p&gt;In order to build from the source code using GNU Make, just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests need Python to be built and Perl to be run. If you don&#39;t have one of them installed, you can skip building the tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make no_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll still be able to run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to build for a Windows platform, you should use &lt;code&gt;WINDOWS_BUILD=1&lt;/code&gt; if the target is Windows but the build environment is Unix-like (for instance when cross-compiling, or compiling from an MSYS shell), and &lt;code&gt;WINDOWS=1&lt;/code&gt; if the build environment is a Windows shell (for instance using mingw32-make) (in that case some targets will not be available).&lt;/p&gt; &#xA;&lt;p&gt;Setting the variable &lt;code&gt;SHARED&lt;/code&gt; in your environment will build shared libraries in addition to the static libraries. Setting &lt;code&gt;DEBUG&lt;/code&gt; gives you a debug build. You can override &lt;code&gt;CFLAGS&lt;/code&gt; and &lt;code&gt;LDFLAGS&lt;/code&gt; by setting them in your environment or on the make command line; compiler warning options may be overridden separately using &lt;code&gt;WARNING_CFLAGS&lt;/code&gt;. Some directory-specific options (for example, &lt;code&gt;-I&lt;/code&gt; directives) are still preserved.&lt;/p&gt; &#xA;&lt;p&gt;Please note that setting &lt;code&gt;CFLAGS&lt;/code&gt; overrides its default value of &lt;code&gt;-O2&lt;/code&gt; and setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; overrides its default value (starting with &lt;code&gt;-Wall -Wextra&lt;/code&gt;), so if you just want to add some warning options to the default ones, you can do so by setting &lt;code&gt;CFLAGS=-O2 -Werror&lt;/code&gt; for example. Setting &lt;code&gt;WARNING_CFLAGS&lt;/code&gt; is useful when you want to get rid of its default content (for example because your compiler doesn&#39;t accept &lt;code&gt;-Wall&lt;/code&gt; as an option). Directory-specific options cannot be overridden from the command line.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your platform, you might run into some issues. Please check the Makefiles in &lt;code&gt;library/&lt;/code&gt;, &lt;code&gt;programs/&lt;/code&gt; and &lt;code&gt;tests/&lt;/code&gt; for options to manually add or remove for specific platforms. You can also check &lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/&#34;&gt;the Mbed TLS Knowledge Base&lt;/a&gt; for articles on your platform or issue.&lt;/p&gt; &#xA;&lt;p&gt;In case you find that you need to do something else as well, please let us know what, so we can add it to the &lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/&#34;&gt;Mbed TLS Knowledge Base&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CMake&lt;/h3&gt; &#xA;&lt;p&gt;In order to build the source using CMake in a separate directory (recommended), just enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir /path/to/build_dir &amp;amp;&amp;amp; cd /path/to/build_dir&#xA;cmake /path/to/mbedtls_source&#xA;cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to run the tests, enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suites need Python to be built and Perl to be executed. If you don&#39;t have one of these installed, you&#39;ll want to disable the test suites with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DENABLE_TESTING=Off /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you disabled the test suites, but kept the programs enabled, you can still run a much smaller set of tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;programs/test/selftest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure CMake for building shared libraries, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DUSE_SHARED_MBEDTLS_LIBRARY=On /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many different build modes available within the CMake buildsystem. Most of them are available for gcc and clang, though some are compiler-specific:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Release&lt;/code&gt;. This generates the default code without any unnecessary information in the binary files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Debug&lt;/code&gt;. This generates debug information and disables optimization of the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Coverage&lt;/code&gt;. This generates code coverage information in addition to debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASan&lt;/code&gt;. This instruments the code with AddressSanitizer to check for memory errors. (This includes LeakSanitizer, with recent version of gcc and clang.) (With recent version of clang, this mode also instruments the code with UndefinedSanitizer to check for undefined behaviour.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ASanDbg&lt;/code&gt;. Same as ASan but slower, with debug information and better stack traces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSan&lt;/code&gt;. This instruments the code with MemorySanitizer to check for uninitialised memory reads. Experimental, needs recent clang on Linux/x86_64.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MemSanDbg&lt;/code&gt;. Same as MemSan but slower, with debug information, better stack traces and origin tracking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Check&lt;/code&gt;. This activates the compiler warnings that depend on optimization and treats all warnings as errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Switching build modes in CMake is simple. For debug mode, enter at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=Debug /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list other available CMake options, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -LH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, with CMake, you can&#39;t adjust the compiler or its flags after the initial invocation of cmake. This means that &lt;code&gt;CC=your_cc make&lt;/code&gt; and &lt;code&gt;make CC=your_cc&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; work (similarly with &lt;code&gt;CFLAGS&lt;/code&gt; and other variables). These variables need to be adjusted when invoking cmake for the first time, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake /path/to/mbedtls_source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already invoked cmake and want to change those settings, you need to remove the build directory and create it again.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is possible to build in-place; this will however overwrite the provided Makefiles (see &lt;code&gt;scripts/tmp_ignore_makefiles.sh&lt;/code&gt; if you want to prevent &lt;code&gt;git status&lt;/code&gt; from showing them as modified). In order to do so, from the Mbed TLS source directory, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to change &lt;code&gt;CC&lt;/code&gt; or &lt;code&gt;CFLAGS&lt;/code&gt; afterwards, you will need to remove the CMake cache. This can be done with the following command using GNU find:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find . -iname &#39;*cmake*&#39; -not -name CMakeLists.txt -exec rm -rf {} +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now make the desired change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=your_cc cmake .&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regarding variables, also note that if you set CFLAGS when invoking cmake, your value of CFLAGS doesn&#39;t override the content provided by cmake (depending on the build mode as seen above), it&#39;s merely prepended to it.&lt;/p&gt; &#xA;&lt;h4&gt;Consuming Mbed TLS&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS provides a package config file for consumption as a dependency in other CMake projects. You can include Mbed TLS&#39;s CMake targets yourself with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find_package(MbedTLS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If prompted, set &lt;code&gt;MbedTLS_DIR&lt;/code&gt; to &lt;code&gt;${YOUR_MBEDTLS_INSTALL_DIR}/cmake&lt;/code&gt;. This creates the following targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::tfpsacrypto&lt;/code&gt; (Crypto library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedtls&lt;/code&gt; (TLS library)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MbedTLS::mbedx509&lt;/code&gt; (X509 library)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then use these directly through &lt;code&gt;target_link_libraries()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;add_executable(xyz)&#xA;&#xA;target_link_libraries(xyz&#xA;    PUBLIC MbedTLS::mbedtls&#xA;           MbedTLS::tfpsacrypto&#xA;           MbedTLS::mbedx509)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will link the Mbed TLS libraries to your library or application, and add its include directories to your target (transitively, in the case of &lt;code&gt;PUBLIC&lt;/code&gt; or &lt;code&gt;INTERFACE&lt;/code&gt; link libraries).&lt;/p&gt; &#xA;&lt;h4&gt;Mbed TLS as a subproject&lt;/h4&gt; &#xA;&lt;p&gt;Mbed TLS supports being built as a CMake subproject. One can use &lt;code&gt;add_subdirectory()&lt;/code&gt; from a parent CMake project to include Mbed TLS as a subproject.&lt;/p&gt; &#xA;&lt;h3&gt;Microsoft Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;The build files for Microsoft Visual Studio are generated for Visual Studio 2017.&lt;/p&gt; &#xA;&lt;p&gt;The solution file &lt;code&gt;mbedTLS.sln&lt;/code&gt; contains all the basic projects needed to build the library and all the programs. The files in tests are not generated and compiled, as these need Python and perl environments as well. However, the selftest program in &lt;code&gt;programs/test/&lt;/code&gt; is still available.&lt;/p&gt; &#xA;&lt;p&gt;In the development branch of Mbed TLS, the Visual Studio solution files need to be generated first as described in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/#generated-source-files-in-the-development-branch&#34;&gt;“Generated source files in the development branch”&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example programs&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve included example programs for a lot of different features and uses in &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/programs/README.md&#34;&gt;&lt;code&gt;programs/&lt;/code&gt;&lt;/a&gt;. Please note that the goal of these sample programs is to demonstrate specific features of the library, and the code may need to be adapted to build a real-world application.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS includes an elaborate test suite in &lt;code&gt;tests/&lt;/code&gt; that initially requires Python to generate the tests files (e.g. &lt;code&gt;test\_suite\_ssl.c&lt;/code&gt;). These files are generated from a &lt;code&gt;function file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.function&lt;/code&gt;) and a &lt;code&gt;data file&lt;/code&gt; (e.g. &lt;code&gt;suites/test\_suite\_ssl.data&lt;/code&gt;). The &lt;code&gt;function file&lt;/code&gt; contains the test functions. The &lt;code&gt;data file&lt;/code&gt; contains the test cases, specified as parameters that will be passed to the test function.&lt;/p&gt; &#xA;&lt;p&gt;For machines with a Unix shell and OpenSSL (and optionally GnuTLS) installed, additional test scripts are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/ssl-opt.sh&lt;/code&gt; runs integration tests for various TLS options (renegotiation, resumption, etc.) and tests interoperability of these options with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/compat.sh&lt;/code&gt; tests interoperability of every ciphersuite with other implementations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/test-ref-configs.pl&lt;/code&gt; test builds in various reduced configurations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/depends.py&lt;/code&gt; test builds in configurations with a single curve, key exchange, hash, cipher, or pkalg on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tests/scripts/all.sh&lt;/code&gt; runs a combination of the above tests, plus some more, with various build options (such as ASan, full &lt;code&gt;mbedtls_config.h&lt;/code&gt;, etc).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instead of manually installing the required versions of all tools required for testing, it is possible to use the Docker images from our CI systems, as explained in &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls-test/raw/main/README.md#quick-start&#34;&gt;our testing infrastructure repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Porting Mbed TLS&lt;/h2&gt; &#xA;&lt;p&gt;Mbed TLS can be ported to many different architectures, OS&#39;s and platforms. Before starting a port, you may find the following Knowledge Base articles useful:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/how-to/how-do-i-port-mbed-tls-to-a-new-environment-OS/&#34;&gt;Porting Mbed TLS to a new environment or OS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/development/what-external-dependencies-does-mbedtls-rely-on/&#34;&gt;What external dependencies does Mbed TLS rely on?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mbed-tls.readthedocs.io/en/latest/kb/compiling-and-building/how-do-i-configure-mbedtls/&#34;&gt;How do I configure Mbed TLS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mbed TLS is mostly written in portable C99; however, it has a few platform requirements that go beyond the standard, but are met by most modern architectures:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bytes must be 8 bits.&lt;/li&gt; &#xA; &lt;li&gt;All-bits-zero must be a valid representation of a null pointer.&lt;/li&gt; &#xA; &lt;li&gt;Signed integers must be represented using two&#39;s complement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;size_t&lt;/code&gt; must be at least 32 bits wide.&lt;/li&gt; &#xA; &lt;li&gt;The types &lt;code&gt;uint8_t&lt;/code&gt;, &lt;code&gt;uint16_t&lt;/code&gt;, &lt;code&gt;uint32_t&lt;/code&gt; and their signed equivalents must be available.&lt;/li&gt; &#xA; &lt;li&gt;Mixed-endian platforms are not supported.&lt;/li&gt; &#xA; &lt;li&gt;SIZE_MAX must be at least as big as INT_MAX and UINT_MAX.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;PSA cryptography API&lt;/h2&gt; &#xA;&lt;h3&gt;PSA API&lt;/h3&gt; &#xA;&lt;p&gt;Arm&#39;s &lt;a href=&#34;https://developer.arm.com/architectures/security-architectures/platform-security-architecture&#34;&gt;Platform Security Architecture (PSA)&lt;/a&gt; is a holistic set of threat models, security analyses, hardware and firmware architecture specifications, and an open source firmware reference implementation. PSA provides a recipe, based on industry best practice, that allows security to be consistently designed in, at both a hardware and firmware level.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://arm-software.github.io/psa-api/crypto/&#34;&gt;PSA cryptography API&lt;/a&gt; provides access to a set of cryptographic primitives. It has a dual purpose. First, it can be used in a PSA-compliant platform to build services, such as secure boot, secure storage and secure communication. Second, it can also be used independently of other PSA components on any platform.&lt;/p&gt; &#xA;&lt;p&gt;The design goals of the PSA cryptography API include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The API distinguishes caller memory from internal memory, which allows the library to be implemented in an isolated space for additional security. Library calls can be implemented as direct function calls if isolation is not desired, and as remote procedure calls if isolation is desired.&lt;/li&gt; &#xA; &lt;li&gt;The structure of internal data is hidden to the application, which allows substituting alternative implementations at build time or run time, for example, in order to take advantage of hardware accelerators.&lt;/li&gt; &#xA; &lt;li&gt;All access to the keys happens through key identifiers, which allows support for external cryptoprocessors that is transparent to applications.&lt;/li&gt; &#xA; &lt;li&gt;The interface to algorithms is generic, favoring algorithm agility.&lt;/li&gt; &#xA; &lt;li&gt;The interface is designed to be easy to use and hard to accidentally misuse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Arm welcomes feedback on the design of the API. If you think something could be improved, please open an issue on our Github repository. Alternatively, if you prefer to provide your feedback privately, please email us at &lt;a href=&#34;mailto:mbed-crypto@arm.com&#34;&gt;&lt;code&gt;mbed-crypto@arm.com&lt;/code&gt;&lt;/a&gt;. All feedback received by email is treated confidentially.&lt;/p&gt; &#xA;&lt;h3&gt;PSA implementation in Mbed TLS&lt;/h3&gt; &#xA;&lt;p&gt;Mbed TLS includes a reference implementation of the PSA Cryptography API. However, it does not aim to implement the whole specification; in particular it does not implement all the algorithms.&lt;/p&gt; &#xA;&lt;h3&gt;PSA drivers&lt;/h3&gt; &#xA;&lt;p&gt;Mbed TLS supports drivers for cryptographic accelerators, secure elements and random generators. This is work in progress. Please note that the driver interfaces are not fully stable yet and may change without notice. We intend to preserve backward compatibility for application code (using the PSA Crypto API), but the code of the drivers may have to change in future minor releases of Mbed TLS.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/Mbed-TLS/TF-PSA-Crypto/raw/development/docs/psa-driver-example-and-guide.md&#34;&gt;PSA driver example and guide&lt;/a&gt; for information on writing a driver.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless specifically indicated otherwise in a file, Mbed TLS files are provided under a dual &lt;a href=&#34;https://spdx.org/licenses/Apache-2.0.html&#34;&gt;Apache-2.0&lt;/a&gt; OR &lt;a href=&#34;https://spdx.org/licenses/GPL-2.0-or-later.html&#34;&gt;GPL-2.0-or-later&lt;/a&gt; license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full text of these licenses, and &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md#License-and-Copyright&#34;&gt;the &#39;License and Copyright&#39; section in the contributing guidelines&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party code included in Mbed TLS&lt;/h3&gt; &#xA;&lt;p&gt;This project contains code from other projects. This code is located within the &lt;code&gt;tf-psa-crypto/drivers/&lt;/code&gt; directory. The original license text is included within project subdirectories, where it differs from the normal Mbed TLS license, and/or in source files. The projects are listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;drivers/everest/&lt;/code&gt;: Files stem from &lt;a href=&#34;https://project-everest.github.io/&#34;&gt;Project Everest&lt;/a&gt; and are distributed under the Apache 2.0 license.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drivers/p256-m/p256-m/&lt;/code&gt;: Files have been taken from the &lt;a href=&#34;https://github.com/mpg/p256-m&#34;&gt;p256-m&lt;/a&gt; repository. The code in the original repository is distributed under the Apache 2.0 license. It is distributed in Mbed TLS under a dual Apache-2.0 OR GPL-2.0-or-later license with permission from the author.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We gratefully accept bug reports and contributions from the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; for details on how to do this.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To report a security vulnerability in Mbed TLS, please email &lt;a href=&#34;mailto:mbed-tls-security@lists.trustedfirmware.org&#34;&gt;mbed-tls-security@lists.trustedfirmware.org&lt;/a&gt;. For more information, see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To report a bug or request a feature in Mbed TLS, please &lt;a href=&#34;https://github.com/Mbed-TLS/mbedtls/issues/new/choose&#34;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/Mbed-TLS/mbedtls/development/SUPPORT.md&#34;&gt;&lt;code&gt;SUPPORT.md&lt;/code&gt;&lt;/a&gt; for other channels for discussion and support about Mbed TLS.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>