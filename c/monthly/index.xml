<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-01T01:46:56Z</updated>
  <subtitle>Monthly Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>floooh/sokol</title>
    <updated>2025-01-01T01:46:56Z</updated>
    <id>tag:github.com,2025-01-01:/floooh/sokol</id>
    <link href="https://github.com/floooh/sokol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;minimal cross-platform standalone C headers&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/floooh/sokol/master/assets/logo_full_large.png&#34; style=&#34;width: 60%&#34;&gt;&lt;br&gt;&lt;br&gt;Simple &lt;a href=&#34;https://github.com/nothings/stb/raw/master/docs/stb_howto.txt&#34;&gt;STB-style&lt;/a&gt; cross-platform libraries for C and C++, written in C.&lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Sokol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/CHANGELOG.md&#34;&gt;&lt;strong&gt;See what&#39;s new&lt;/strong&gt;&lt;/a&gt; (&lt;strong&gt;07-Nov-2024&lt;/strong&gt; sokol_gfx.h: the &#39;bindings cleanup&#39; update&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/gen_bindings.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/floooh/actions/workflows/gen_bindings.yml/badge.svg?sanitize=true&#34; alt=&#34;Bindings&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-zig/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-zig/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-nim/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-nim/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/floooh/sokol-odin/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-odin/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Odin&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/floooh/sokol-rust/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/floooh/sokol-rust/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Rust&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/kassane/sokol-d/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/kassane/sokol-d/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Dlang&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/sokol-html5/index.html&#34;&gt;Live Samples&lt;/a&gt; via WASM (&lt;a href=&#34;https://github.com/floooh/sokol-samples&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/doom-sokol/&#34;&gt;Doom Shareware&lt;/a&gt; ported to the Sokol headers (&lt;a href=&#34;https://github.com/floooh/doom-sokol&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://aras-p.github.io/demo-pd-cranktheworld/&#34;&gt;Everybody Wants to Crank the World&lt;/a&gt; demo by Aras Pranckeviƒçius, PC/web port via sokol (&lt;a href=&#34;https://github.com/aras-p/demo-pd-cranktheworld&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/edubart/sokol_gp&#34;&gt;sokol_gp.h&lt;/a&gt; a 2D shape drawing library on top of sokol_gfx.h&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://zeromake.github.io/learnopengl-examples/&#34;&gt;LearnOpenGL examples ported to sokol-gfx&lt;/a&gt; (&lt;a href=&#34;https://github.com/zeromake/learnopengl-examples&#34;&gt;git repo&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/cimgui-sokol-starterkit&#34;&gt;Dear ImGui starterkit&lt;/a&gt; a self-contained starterkit for writing Dear ImGui apps in C.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/qoiview&#34;&gt;qoiview&lt;/a&gt; a basic viewer for the new QOI image file format&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://floooh.github.io/tiny8bit/&#34;&gt;Tiny 8-bit emulators&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &#39;single-file&#39; &lt;a href=&#34;https://github.com/floooh/pacman.c/&#34;&gt;Pacman clone in C99&lt;/a&gt;, also available in &lt;a href=&#34;https://github.com/floooh/pacman.zig/&#34;&gt;Zig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/2754920/Solar_Storm/&#34;&gt;Solar Storm&lt;/a&gt;, a turn-based scifi artillery game built with Odin and Sokol, released on Steam.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/2599800/Spanking_Runners/&#34;&gt;Spanking Runners (Samogonki)&lt;/a&gt;, arcade racing in a bright and unusual world, released on Steam.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bztsrc.gitlab.io/meg4&#34;&gt;MEG-4&lt;/a&gt; a virtual fantasy console emulator in C89, ported to sokol&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://mgerdes.github.io/minigolf.html&#34;&gt;Minigolf game&lt;/a&gt; (&lt;a href=&#34;https://github.com/mgerdes/minigolf&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/RuiVarela/hIghQube&#34;&gt;hIghQube&lt;/a&gt; A game demo that used sokol rendering extensively&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/RuiVarela/Senos&#34;&gt;Senos&lt;/a&gt; A music app that uses sokol as backend&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dealers-dungeon.com/demo/&#34;&gt;&#39;Dealer&#39;s Dungeon&#39;&lt;/a&gt; (&lt;a href=&#34;https://dealers-dungeon.com/demo/?q=3&#34;&gt;lower graphics quality&lt;/a&gt;, &lt;a href=&#34;https://github.com/bqqbarbhg/spear&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol-tools&#34;&gt;Command line tools&lt;/a&gt; (shader compiler)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/floooh/sokol-samples#how-to-build-without-a-build-system&#34;&gt;How to build without a build system&lt;/a&gt;: useful details for integrating the Sokol headers into your own project with your favourite C/C++ build system&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_gfx.h&#34;&gt;&lt;strong&gt;sokol_gfx.h&lt;/strong&gt;&lt;/a&gt;: 3D-API wrapper (GL/GLES3/WebGL2 + Metal + D3D11 + WebGPU)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_app.h&#34;&gt;&lt;strong&gt;sokol_app.h&lt;/strong&gt;&lt;/a&gt;: app framework wrapper (entry + window + 3D-context + input)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_time.h&#34;&gt;&lt;strong&gt;sokol_time.h&lt;/strong&gt;&lt;/a&gt;: time measurement&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_audio.h&#34;&gt;&lt;strong&gt;sokol_audio.h&lt;/strong&gt;&lt;/a&gt;: minimal buffer-streaming audio playback&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_fetch.h&#34;&gt;&lt;strong&gt;sokol_fetch.h&lt;/strong&gt;&lt;/a&gt;: asynchronous data streaming from HTTP and local filesystem&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_args.h&#34;&gt;&lt;strong&gt;sokol_args.h&lt;/strong&gt;&lt;/a&gt;: unified cmdline/URL arg parser for web and native apps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/sokol_log.h&#34;&gt;&lt;strong&gt;sokol_log.h&lt;/strong&gt;&lt;/a&gt;: provides a standard logging callback for the other sokol headers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Utility libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_imgui.h&#34;&gt;&lt;strong&gt;sokol_imgui.h&lt;/strong&gt;&lt;/a&gt;: sokol_gfx.h rendering backend for &lt;a href=&#34;https://github.com/ocornut/imgui&#34;&gt;Dear ImGui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_nuklear.h&#34;&gt;&lt;strong&gt;sokol_nuklear.h&lt;/strong&gt;&lt;/a&gt;: sokol_gfx.h rendering backend for &lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear&#34;&gt;Nuklear&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_gl.h&#34;&gt;&lt;strong&gt;sokol_gl.h&lt;/strong&gt;&lt;/a&gt;: OpenGL 1.x style immediate-mode rendering API on top of sokol_gfx.h&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_fontstash.h&#34;&gt;&lt;strong&gt;sokol_fontstash.h&lt;/strong&gt;&lt;/a&gt;: sokol_gl.h rendering backend for &lt;a href=&#34;https://github.com/memononen/fontstash&#34;&gt;fontstash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_gfx_imgui.h&#34;&gt;&lt;strong&gt;sokol_gfx_imgui.h&lt;/strong&gt;&lt;/a&gt;: debug-inspection UI for sokol_gfx.h (implemented with Dear ImGui)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_debugtext.h&#34;&gt;&lt;strong&gt;sokol_debugtext.h&lt;/strong&gt;&lt;/a&gt;: a simple text renderer using vintage home computer fonts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_memtrack.h&#34;&gt;&lt;strong&gt;sokol_memtrack.h&lt;/strong&gt;&lt;/a&gt;: easily track memory allocations in sokol headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_shape.h&#34;&gt;&lt;strong&gt;sokol_shape.h&lt;/strong&gt;&lt;/a&gt;: generate simple shapes and plug them into sokol-gfx resource creation structs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_color.h&#34;&gt;&lt;strong&gt;sokol_color.h&lt;/strong&gt;&lt;/a&gt;: X11 style color constants and functions for creating sg_color objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol/raw/master/util/sokol_spine.h&#34;&gt;&lt;strong&gt;sokol_spine.h&lt;/strong&gt;&lt;/a&gt;: a sokol-style wrapper around the Spine C runtime (&lt;a href=&#34;http://en.esotericsoftware.com/spine-in-depth&#34;&gt;http://en.esotericsoftware.com/spine-in-depth&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&#39;Official&#39; Language Bindings&lt;/h2&gt; &#xA;&lt;p&gt;These are automatically updated on changes to the C headers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-zig&#34;&gt;sokol-zig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-odin&#34;&gt;sokol-odin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-nim&#34;&gt;sokol-nim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/floooh/sokol-rust&#34;&gt;sokol-rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kassane/sokol-d&#34;&gt;sokol-d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/colinbellino/sokol-jai&#34;&gt;sokol-jai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;WebAssembly is a &#39;first-class citizen&#39;, one important motivation for the Sokol headers is to provide a collection of cross-platform APIs with a minimal footprint on the web platform while still being useful.&lt;/p&gt; &#xA;&lt;p&gt;The core headers are standalone and can be used independently from each other.&lt;/p&gt; &#xA;&lt;h3&gt;Why C:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;easier integration with other languages&lt;/li&gt; &#xA; &lt;li&gt;easier integration into other projects&lt;/li&gt; &#xA; &lt;li&gt;adds only minimal size overhead to executables&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A blog post with more background info: &lt;a href=&#34;http://floooh.github.io/2017/07/29/sokol-gfx-tour.html&#34;&gt;A Tour of sokol_gfx.h&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;sokol_gfx.h:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;simple, modern wrapper around GLES3/WebGL2, GL3.3, D3D11, Metal, and WebGPU&lt;/li&gt; &#xA; &lt;li&gt;buffers, images, shaders, pipeline-state-objects and render-passes&lt;/li&gt; &#xA; &lt;li&gt;does &lt;em&gt;not&lt;/em&gt; handle window creation or 3D API context initialization&lt;/li&gt; &#xA; &lt;li&gt;does &lt;em&gt;not&lt;/em&gt; provide shader dialect cross-translation (&lt;strong&gt;BUT&lt;/strong&gt; there&#39;s now an &#39;official&#39; shader-cross-compiler solution which seamlessly integrates with sokol_gfx.h and IDEs: &lt;a href=&#34;https://github.com/floooh/sokol-tools/raw/master/docs/sokol-shdc.md&#34;&gt;see here for details&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;sokol_app.h&lt;/h1&gt; &#xA;&lt;p&gt;A minimal cross-platform application-wrapper library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;unified application entry&lt;/li&gt; &#xA; &lt;li&gt;single window or canvas for 3D rendering&lt;/li&gt; &#xA; &lt;li&gt;3D context initialization&lt;/li&gt; &#xA; &lt;li&gt;event-based keyboard, mouse and touch input&lt;/li&gt; &#xA; &lt;li&gt;supported platforms: Win32, MacOS, Linux (X11), iOS, WASM, Android, UWP&lt;/li&gt; &#xA; &lt;li&gt;supported 3D-APIs: GL3.3 (GLX/WGL), Metal, D3D11, GLES3/WebGL2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The vanilla Hello-Triangle using sokol_gfx.h, sokol_app.h and the sokol-shdc shader compiler (shader code not shown):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_app.h&#34;&#xA;#include &#34;sokol_gfx.h&#34;&#xA;#include &#34;sokol_log.h&#34;&#xA;#include &#34;sokol_glue.h&#34;&#xA;#include &#34;triangle-sapp.glsl.h&#34;&#xA;&#xA;static struct {&#xA;    sg_pipeline pip;&#xA;    sg_bindings bind;&#xA;    sg_pass_action pass_action;&#xA;} state;&#xA;&#xA;static void init(void) {&#xA;    sg_setup(&amp;amp;(sg_desc){&#xA;        .environment = sglue_environment(),&#xA;        .logger.func = slog_func,&#xA;    });&#xA;&#xA;    float vertices[] = {&#xA;         0.0f,  0.5f, 0.5f,     1.0f, 0.0f, 0.0f, 1.0f,&#xA;         0.5f, -0.5f, 0.5f,     0.0f, 1.0f, 0.0f, 1.0f,&#xA;        -0.5f, -0.5f, 0.5f,     0.0f, 0.0f, 1.0f, 1.0f&#xA;    };&#xA;    state.bind.vertex_buffers[0] = sg_make_buffer(&amp;amp;(sg_buffer_desc){&#xA;        .data = SG_RANGE(vertices),&#xA;    });&#xA;&#xA;    state.pip = sg_make_pipeline(&amp;amp;(sg_pipeline_desc){&#xA;        .shader = sg_make_shader(triangle_shader_desc(sg_query_backend())),&#xA;        .layout = {&#xA;            .attrs = {&#xA;                [ATTR_triangle_position].format = SG_VERTEXFORMAT_FLOAT3,&#xA;                [ATTR_triangle_color0].format = SG_VERTEXFORMAT_FLOAT4&#xA;            }&#xA;        },&#xA;    });&#xA;&#xA;    state.pass_action = (sg_pass_action) {&#xA;        .colors[0] = { .load_action=SG_LOADACTION_CLEAR, .clear_value={0.0f, 0.0f, 0.0f, 1.0f } }&#xA;    };&#xA;}&#xA;&#xA;void frame(void) {&#xA;    sg_begin_pass(&amp;amp;(sg_pass){ .action = state.pass_action, .swapchain = sglue_swapchain() });&#xA;    sg_apply_pipeline(state.pip);&#xA;    sg_apply_bindings(&amp;amp;state.bind);&#xA;    sg_draw(0, 3, 1);&#xA;    sg_end_pass();&#xA;    sg_commit();&#xA;}&#xA;&#xA;void cleanup(void) {&#xA;    sg_shutdown();&#xA;}&#xA;&#xA;sapp_desc sokol_main(int argc, char* argv[]) {&#xA;    (void)argc; (void)argv;&#xA;    return (sapp_desc){&#xA;        .init_cb = init,&#xA;        .frame_cb = frame,&#xA;        .cleanup_cb = cleanup,&#xA;        .width = 640,&#xA;        .height = 480,&#xA;        .window_title = &#34;Triangle&#34;,&#xA;        .icon.sokol_default = true,&#xA;        .logger.func = slog_func,&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_audio.h&lt;/h1&gt; &#xA;&lt;p&gt;A minimal audio-streaming API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you provide a mono- or stereo-stream of 32-bit float samples which sokol_audio.h forwards into platform-specific backends&lt;/li&gt; &#xA; &lt;li&gt;two ways to provide the data: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;directly fill backend audio buffer from your callback function running in the audio thread&lt;/li&gt; &#xA;   &lt;li&gt;alternatively push small packets of audio data from your main loop, or a separate thread created by you&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;platform backends: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Windows: WASAPI&lt;/li&gt; &#xA;   &lt;li&gt;macOS/iOS: CoreAudio&lt;/li&gt; &#xA;   &lt;li&gt;Linux: ALSA&lt;/li&gt; &#xA;   &lt;li&gt;emscripten: WebAudio + ScriptProcessorNode (doesn&#39;t use the emscripten-provided OpenAL or SDL Audio wrappers)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A simple mono square-wave generator using the callback model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// the sample callback, running in audio thread&#xA;static void stream_cb(float* buffer, int num_frames, int num_channels) {&#xA;    assert(1 == num_channels);&#xA;    static uint32_t count = 0;&#xA;    for (int i = 0; i &amp;lt; num_frames; i++) {&#xA;        buffer[i] = (count++ &amp;amp; (1&amp;lt;&amp;lt;3)) ? 0.5f : -0.5f;&#xA;    }&#xA;}&#xA;&#xA;int main() {&#xA;    // init sokol-audio with default params&#xA;    saudio_setup(&amp;amp;(saudio_desc){&#xA;        .stream_cb = stream_cb,&#xA;        .logger.func = slog_func,&#xA;    });&#xA;&#xA;    // run main loop&#xA;    ...&#xA;&#xA;    // shutdown sokol-audio&#xA;    saudio_shutdown();&#xA;    return 0;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same code using the push-model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define BUF_SIZE (32)&#xA;int main() {&#xA;    // init sokol-audio with default params, no callback&#xA;    saudio_setup(&amp;amp;(saudio_desc){&#xA;        .logger.func = slog_func,&#xA;    });&#xA;    assert(saudio_channels() == 1);&#xA;&#xA;    // a small intermediate buffer so we don&#39;t need to push&#xA;    // individual samples, which would be quite inefficient&#xA;    float buf[BUF_SIZE];&#xA;    int buf_pos = 0;&#xA;    uint32_t count = 0;&#xA;&#xA;    // push samples from main loop&#xA;    bool done = false;&#xA;    while (!done) {&#xA;        // generate and push audio samples...&#xA;        int num_frames = saudio_expect();&#xA;        for (int i = 0; i &amp;lt; num_frames; i++) {&#xA;            // simple square wave generator&#xA;            buf[buf_pos++] = (count++ &amp;amp; (1&amp;lt;&amp;lt;3)) ? 0.5f : -0.5f;&#xA;            if (buf_pos == BUF_SIZE) {&#xA;                buf_pos = 0;&#xA;                saudio_push(buf, BUF_SIZE);&#xA;            }&#xA;        }&#xA;        // handle other per-frame stuff...&#xA;        ...&#xA;    }&#xA;&#xA;    // shutdown sokol-audio&#xA;    saudio_shutdown();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_fetch.h&lt;/h1&gt; &#xA;&lt;p&gt;Load entire files, or stream data asynchronously over HTTP (emscripten/wasm) or the local filesystem (all native platforms).&lt;/p&gt; &#xA;&lt;p&gt;Simple C99 example loading a file into a static buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_fetch.h&#34;&#xA;#include &#34;sokol_log.h&#34;&#xA;&#xA;static void response_callback(const sfetch_response*);&#xA;&#xA;#define MAX_FILE_SIZE (1024*1024)&#xA;static uint8_t buffer[MAX_FILE_SIZE];&#xA;&#xA;// application init&#xA;static void init(void) {&#xA;    ...&#xA;    // setup sokol-fetch with default config:&#xA;    sfetch_setup(&amp;amp;(sfetch_desc_t){ .logger.func = slog_func });&#xA;&#xA;    // start loading a file into a statically allocated buffer:&#xA;    sfetch_send(&amp;amp;(sfetch_request_t){&#xA;        .path = &#34;hello_world.txt&#34;,&#xA;        .callback = response_callback&#xA;        .buffer_ptr = buffer,&#xA;        .buffer_size = sizeof(buffer)&#xA;    });&#xA;}&#xA;&#xA;// per frame...&#xA;static void frame(void) {&#xA;    ...&#xA;    // need to call sfetch_dowork() once per frame to &#39;turn the gears&#39;:&#xA;    sfetch_dowork();&#xA;    ...&#xA;}&#xA;&#xA;// the response callback is where the interesting stuff happens:&#xA;static void response_callback(const sfetch_response_t* response) {&#xA;    if (response-&amp;gt;fetched) {&#xA;        // data has been loaded into the provided buffer, do something&#xA;        // with the data...&#xA;        const void* data = response-&amp;gt;buffer_ptr;&#xA;        uint64_t data_size = response-&amp;gt;fetched_size;&#xA;    }&#xA;    // the finished flag is set both on success and failure&#xA;    if (response-&amp;gt;failed) {&#xA;        // oops, something went wrong&#xA;        switch (response-&amp;gt;error_code) {&#xA;            SFETCH_ERROR_FILE_NOT_FOUND: ...&#xA;            SFETCH_ERROR_BUFFER_TOO_SMALL: ...&#xA;            ...&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// application shutdown&#xA;static void shutdown(void) {&#xA;    ...&#xA;    sfetch_shutdown();&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_time.h:&lt;/h1&gt; &#xA;&lt;p&gt;Simple cross-platform time measurement:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_time.h&#34;&#xA;...&#xA;/* initialize sokol_time */&#xA;stm_setup();&#xA;&#xA;/* take start timestamp */&#xA;uint64_t start = stm_now();&#xA;&#xA;...some code to measure...&#xA;&#xA;/* compute elapsed time */&#xA;uint64_t elapsed = stm_since(start);&#xA;&#xA;/* convert to time units */&#xA;double seconds = stm_sec(elapsed);&#xA;double milliseconds = stm_ms(elapsed);&#xA;double microseconds = stm_us(elapsed);&#xA;double nanoseconds = stm_ns(elapsed);&#xA;&#xA;/* difference between 2 time stamps */&#xA;uint64_t start = stm_now();&#xA;...&#xA;uint64_t end = stm_now();&#xA;uint64_t elapsed = stm_diff(end, start);&#xA;&#xA;/* compute a &#39;lap time&#39; (e.g. for fps) */&#xA;uint64_t last_time = 0;&#xA;while (!done) {&#xA;    ...render something...&#xA;    double frame_time_ms = stm_ms(stm_laptime(&amp;amp;last_time));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;sokol_args.h&lt;/h1&gt; &#xA;&lt;p&gt;Unified argument parsing for web and native apps. Uses argc/argv on native platforms and the URL query string on the web.&lt;/p&gt; &#xA;&lt;p&gt;Example URL with one arg:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4&#34;&gt;https://floooh.github.io/tiny8bit/kc85.html?type=kc85_4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The same as command line app:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;kc85 type=kc85_4&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Parsed like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &#34;sokol_args.h&#34;&#xA;&#xA;int main(int argc, char* argv[]) {&#xA;    sargs_setup(&amp;amp;(sargs_desc){ .argc=argc, .argv=argv });&#xA;    if (sargs_exists(&#34;type&#34;)) {&#xA;        if (sargs_equals(&#34;type&#34;, &#34;kc85_4&#34;)) {&#xA;            // start as KC85/4&#xA;        }&#xA;        else if (sargs_equals(&#34;type&#34;, &#34;kc85_3&#34;)) {&#xA;            // start as KC85/3&#xA;        }&#xA;        else {&#xA;            // start as KC85/2&#xA;        }&#xA;    }&#xA;    sargs_shutdown();&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the sokol_args.h header for a more complete documentation, and the &lt;a href=&#34;https://floooh.github.io/tiny8bit/&#34;&gt;Tiny Emulators&lt;/a&gt; for more interesting usage examples.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>libsdl-org/SDL</title>
    <updated>2025-01-01T01:46:56Z</updated>
    <id>tag:github.com,2025-01-01:/libsdl-org/SDL</id>
    <link href="https://github.com/libsdl-org/SDL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Directmedia Layer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple DirectMedia Layer (SDL) Version 3.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;https://www.libsdl.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple DirectMedia Layer is a cross-platform development library designed to provide low level access to audio, keyboard, mouse, joystick, and graphics hardware. It is used by video playback software, emulators, and popular games including Valve&#39;s award winning catalog and many Humble Bundle games.&lt;/p&gt; &#xA;&lt;p&gt;More extensive documentation is available in the docs directory, starting with &lt;a href=&#34;https://raw.githubusercontent.com/libsdl-org/SDL/main/docs/README.md&#34;&gt;README.md&lt;/a&gt;. If you are migrating to SDL 3.0 from SDL 2.0, the changes are extensively documented in &lt;a href=&#34;https://raw.githubusercontent.com/libsdl-org/SDL/main/docs/README-migration.md&#34;&gt;README-migration.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy!&lt;/p&gt; &#xA;&lt;p&gt;Sam Lantinga (&lt;a href=&#34;mailto:slouken@libsdl.org&#34;&gt;slouken@libsdl.org&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BitMaker-hub/NerdMiner_v2</title>
    <updated>2025-01-01T01:46:56Z</updated>
    <id>tag:github.com,2025-01-01:/BitMaker-hub/NerdMiner_v2</id>
    <link href="https://github.com/BitMaker-hub/NerdMiner_v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Improved version of first ESP32 NerdMiner&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NerdSoloMiner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The NerdSoloMiner v2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a &lt;strong&gt;free and open source project&lt;/strong&gt; that let you try to reach a bitcoin block with a small piece of hardware.&lt;/p&gt; &#xA;&lt;p&gt;The main aim of this project is to let you &lt;strong&gt;learn more about minery&lt;/strong&gt; and to have a beautiful piece of hardware in your desktop.&lt;/p&gt; &#xA;&lt;p&gt;Original project &lt;a href=&#34;https://github.com/valerio-vaccaro/HAN&#34;&gt;https://github.com/valerio-vaccaro/HAN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/BitMaker-hub/NerdMiner_v2/dev/images/bgNerdMinerV2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TTGO T-Display S3 or any supported boards (check Build tutorial üëá)&lt;/li&gt; &#xA; &lt;li&gt;3D BOX &lt;a href=&#34;https://raw.githubusercontent.com/BitMaker-hub/NerdMiner_v2/dev/3d_files/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Project description&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;ESP32 implementing Stratum protocol&lt;/strong&gt; to mine on solo pool. Pool can be changed but originally works with &lt;a href=&#34;https://web.public-pool.io&#34;&gt;public-pool.io&lt;/a&gt; (where Nerdminers are supported).&lt;/p&gt; &#xA;&lt;p&gt;This project was initialy developed using ESP32-S3, but currently support other boards. It uses WifiManager to modify miner settings and save them to SPIFF. The microMiner comes with several screens to monitor it&#39;s working procedure and also to show you network mining stats. Currently includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NerdMiner Screen &amp;gt; Mining data of Nerdminer&lt;/li&gt; &#xA; &lt;li&gt;ClockMiner Screen &amp;gt; Fashion style clock miner&lt;/li&gt; &#xA; &lt;li&gt;GlobalStats Screen &amp;gt; Global minery stats and relevant data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This miner is multicore and multithreads, both cores are used to mine and several threads are used to implementing stratum work and wifi stuff. Every time an stratum job notification is received miner update its current work to not create stale shares.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; Miner is not seen by all standard pools due to its low share difficulty. You can check miner work remotely using specific pools specified down or seeing logs via UART.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Current project is still in developement and more features will be added&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Tutorial&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LILYGO T-Display S3 (original one) or any other supported boards&lt;/li&gt; &#xA; &lt;li&gt;3D BOX &lt;a href=&#34;https://raw.githubusercontent.com/BitMaker-hub/NerdMiner_v2/dev/3d_files/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Current Supported Boards&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LILYGO T-Display S3 (&lt;a href=&#34;https://s.click.aliexpress.com/e/_Ddy7739&#34;&gt;Aliexpress link*&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESP32-WROOM-32, ESP32-Devkit1.. (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DCzlUiX&#34;&gt;Aliexpress link*&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LILYGO T-QT pro (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DBQIr43&#34;&gt;Aliexpress link*&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LILYGO T-Display 1.14 (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DEqGvSJ&#34;&gt;Aliexpress link*&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LILYGO T-Display S3 AMOLED (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DmOIK6j&#34;&gt;Aliexpress link*&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LILYGO T-Display S3 AMOLED Touch (&lt;a href=&#34;https://www.lilygo.cc/products/t-display-s3-amoled?variant=43532279939253&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LILYGO T-Dongle S3 (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DmQCPyj&#34;&gt;Aliexpress link*&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESP32-2432S028R 2,8&#34; (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DdXkvLv&#34;&gt;Aliexpress link*&lt;/a&gt; / Dev support: @nitroxgas / ‚ö°&lt;a href=&#34;mailto:jadeddonald78@walletofsatoshi.com&#34;&gt;jadeddonald78@walletofsatoshi.com&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESP32-cam (&lt;a href=&#34;https://lastminuteengineers.com/getting-started-with-esp32-cam/&#34;&gt;Board Info&lt;/a&gt; / Dev support: @elmo128)&lt;/li&gt; &#xA; &lt;li&gt;M5-StampS3 (&lt;a href=&#34;https://s.click.aliexpress.com/e/_DevABY3&#34;&gt;Aliexpress link*&lt;/a&gt; / Dev support: @gyengus)&lt;/li&gt; &#xA; &lt;li&gt;Wemos Lolin S3 Mini (&lt;a href=&#34;https://docs.platformio.org/en/latest/boards/espressif32/lolin_s3_mini.html&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Wemos Lolin S2 Mini (&lt;a href=&#34;https://docs.platformio.org/en/latest/boards/espressif32/lolin_s2_mini.html&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Weact S3 Mini (&lt;a href=&#34;https://github.com/WeActStudio/WeActStudio.ESP32S3-MINI&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Weact ESP32-D0WD-V3 (&lt;a href=&#34;https://github.com/WeActStudio/WeActStudio.ESP32CoreBoard&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESP32-S3 Devkit (&lt;a href=&#34;https://docs.platformio.org/en/latest/boards/espressif32/esp32-s3-devkitm-1.html&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESP32-C3 Devkit (&lt;a href=&#34;https://docs.platformio.org/en/latest/boards/espressif32/esp32-c3-devkitm-1.html&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESP32-C3 Super Mini (&lt;a href=&#34;https://docs.platformio.org/en/latest/boards/espressif32/seeed_xiao_esp32c3.html&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Waveshare ESP32-S3-GEEK (&lt;a href=&#34;https://www.waveshare.com/wiki/ESP32-S3-GEEK&#34;&gt;Board Info&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;LILYGO T-HMI (&lt;a href=&#34;https://s.click.aliexpress.com/e/_oFII4s2&#34;&gt;Aliexpress link*&lt;/a&gt;) / Dev support: @cosmicpsyop&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*Affiliate links&lt;/p&gt; &#xA;&lt;h3&gt;Flash firmware&lt;/h3&gt; &#xA;&lt;h4&gt;microMiners Flashtool [Recommended]&lt;/h4&gt; &#xA;&lt;p&gt;Easyiest way to flash firmware. Build your own miner using the folowing firwmare flash tool:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get a TTGO T-display S3 or any other supported board&lt;/li&gt; &#xA; &lt;li&gt;Go to NM2 flasher online: &lt;a href=&#34;https://flasher.bitronics.store/&#34;&gt;https://flasher.bitronics.store/&lt;/a&gt; (recommend via Google Chrome incognito mode)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Standard tool&lt;/h4&gt; &#xA;&lt;p&gt;Create your own miner using the online firwmare flash tool &lt;strong&gt;ESPtool&lt;/strong&gt; and one of the &lt;strong&gt;binary files&lt;/strong&gt; that you will find in the &lt;code&gt;bin&lt;/code&gt; folder. If you want you can compile the entire project using Arduino, PlatformIO or Expressif IDF.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get a TTGO T-display S3 or any supported board&lt;/li&gt; &#xA; &lt;li&gt;Download this repository&lt;/li&gt; &#xA; &lt;li&gt;Go to ESPtool online: &lt;a href=&#34;https://espressif.github.io/esptool-js/&#34;&gt;https://espressif.github.io/esptool-js/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load the firmware with the binary from one of the sub-folders of &lt;code&gt;bin&lt;/code&gt; corresponding to your board.&lt;/li&gt; &#xA; &lt;li&gt;Plug your board and select each file from the sub-folder (&lt;code&gt;.bin&lt;/code&gt; files).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Update firmware&lt;/h3&gt; &#xA;&lt;p&gt;Update NerdMiner firmware following same flashing steps but only using the file 0x10000_firmware.bin.&lt;/p&gt; &#xA;&lt;h4&gt;Build troubleshooting&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Online &lt;a href=&#34;https://espressif.github.io/esptool-js/&#34;&gt;ESP Tool&lt;/a&gt; works with chrome, chromium, brave&lt;/li&gt; &#xA; &lt;li&gt;ESPtool recommendations: use 115200bps&lt;/li&gt; &#xA; &lt;li&gt;Build errors &amp;gt; If during firmware download upload stops, it&#39;s recommended to enter the board in boot mode. Unplug cable, hold right bottom button and then plug cable. Try programming&lt;/li&gt; &#xA; &lt;li&gt;In extreme case you can &#34;Erase all flash&#34; on ESPtool to clean all current configuration before uploading firmware. There has been cases that experimented Wifi failures until this was made.&lt;/li&gt; &#xA; &lt;li&gt;In case of ESP32-WROOM Boards, could be necessary to put your board on boot mode. Hold boot button, press reset button and then program.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;NerdMiner configuration&lt;/h2&gt; &#xA;&lt;p&gt;After programming, you will only need to setup your Wifi and BTC address.&lt;/p&gt; &#xA;&lt;p&gt;Note: when BTC address of your selected wallet is not provided, mining will not be started.&lt;/p&gt; &#xA;&lt;h4&gt;Wifi Accesspoint&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to NerdMinerAP&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AP: NerdMinerAP&lt;/li&gt; &#xA;   &lt;li&gt;PASS: MineYourCoins&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up your Wifi Network&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add your BTC address&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the password if needed&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you are using public-pool.io and you want to set a custom name to your worker you can append a string with format &lt;em&gt;.yourworkername&lt;/em&gt; to the address&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;SD card (if available)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Format a SD card using Fat32.&lt;/li&gt; &#xA; &lt;li&gt;Create a file named &#34;config.json&#34; in your card&#39;s root, containing the the following structure. Adjust the settings to your needs:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;{  &#xA;  &#34;SSID&#34;: &#34;myWifiSSID&#34;,  &#xA;  &#34;WifiPW&#34;: &#34;myWifiPassword&#34;,  &#xA;  &#34;PoolUrl&#34;: &#34;public-pool.io&#34;,  &#xA;  &#34;PoolPort&#34;: 21496,&#xA;  &#34;PoolPassword&#34;: &#34;x&#34;,&#xA;  &#34;BtcWallet&#34;: &#34;walletID&#34;,  &#xA;  &#34;Timezone&#34;: 2,  &#xA;  &#34;SaveStats&#34;: false  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Insert the SD card.&lt;/li&gt; &#xA; &lt;li&gt;Hold down the &#34;reset configurations&#34; button as described below to reset the configurations and/or boot without settings in your nvmemory.&lt;/li&gt; &#xA; &lt;li&gt;Power down to remove the SD card. It is not needed for mining.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Pool selection&lt;/h4&gt; &#xA;&lt;p&gt;Recommended low difficulty share pools:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pool URL&lt;/th&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Web URL&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;public-pool.io&lt;/td&gt; &#xA;   &lt;td&gt;21496&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://web.public-pool.io&#34;&gt;https://web.public-pool.io&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open Source Solo Bitcoin Mining Pool supporting open source miners&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pool.nerdminers.org&lt;/td&gt; &#xA;   &lt;td&gt;3333&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nerdminers.org&#34;&gt;https://nerdminers.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The official Nerdminer pool site - Mantained by @golden-guy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pool.nerdminer.io&lt;/td&gt; &#xA;   &lt;td&gt;3333&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nerdminer.io&#34;&gt;https://nerdminer.io&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mantained by CHMEX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pool.pyblock.xyz&lt;/td&gt; &#xA;   &lt;td&gt;3333&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pool.pyblock.xyz/&#34;&gt;https://pool.pyblock.xyz/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mantained by curly60e&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pool.sethforprivacy.com&lt;/td&gt; &#xA;   &lt;td&gt;3333&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pool.sethforprivacy.com/&#34;&gt;https://pool.sethforprivacy.com/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mantained by @sethforprivacy - public-pool fork&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other standard pools not compatible with low difficulty share:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pool URL&lt;/th&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Web URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;solo.ckpool.org&lt;/td&gt; &#xA;   &lt;td&gt;3333&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://solo.ckpool.org/&#34;&gt;https://solo.ckpool.org/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;btc.zsolo.bid&lt;/td&gt; &#xA;   &lt;td&gt;6057&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://zsolo.bid/en/btc-solo-mining-pool&#34;&gt;https://zsolo.bid/en/btc-solo-mining-pool&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eu.stratum.slushpool.com&lt;/td&gt; &#xA;   &lt;td&gt;3333&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://braiins.com/pool&#34;&gt;https://braiins.com/pool&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Buttons&lt;/h3&gt; &#xA;&lt;h4&gt;One button devices:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One click &amp;gt; change screen.&lt;/li&gt; &#xA; &lt;li&gt;Double click &amp;gt; change screen orientation.&lt;/li&gt; &#xA; &lt;li&gt;Tripple click &amp;gt; turn the screen off and on again.&lt;/li&gt; &#xA; &lt;li&gt;Hold 5 seconds &amp;gt; &lt;strong&gt;reset the configurations and reboot&lt;/strong&gt; your NerdMiner.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Two button devices:&lt;/h4&gt; &#xA;&lt;p&gt;With the USB-C port to the right:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TOP BUTTON&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One click &amp;gt; change screen.&lt;/li&gt; &#xA; &lt;li&gt;Hold 5 seconds &amp;gt; top right button to &lt;strong&gt;reset the configurations and reboot&lt;/strong&gt; your NerdMiner.&lt;/li&gt; &#xA; &lt;li&gt;Hold and power up &amp;gt; enter &lt;strong&gt;configuration mode&lt;/strong&gt; and edit current config via Wifi. You could change your settings or verify them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;BOTTOM BUTTON&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One Click &amp;gt; turn the screen off and on again&lt;/li&gt; &#xA; &lt;li&gt;Double click &amp;gt; change orientation (default is USB-C to the right)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build video&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/POUT2R_opDs&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/POUT2R_opDs/0.jpg&#34; alt=&#34;Ver video aqu√≠&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;h3&gt;Project guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Current project was adapted to work with PlatformIO&lt;/li&gt; &#xA; &lt;li&gt;Current project works with ESP32-S3 and ESP32-wroom.&lt;/li&gt; &#xA; &lt;li&gt;Partition squeme should be build as huge app&lt;/li&gt; &#xA; &lt;li&gt;All libraries needed shown on platform.ini&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Job done&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Move project to platformIO&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bug rectangle on screen when 1milion shares&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bug memory leaks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bug Reboots when received JSON contains some null values&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement midstate sha256&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bug Wificlient DNS unresolved on Wifi.h&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code refactoring&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add blockHeight to screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add clock to show current time&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add new screen with global mining stats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add pool support for low difficulty miners&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add best difficulty on miner screen&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add suport to standard ESP32 dev-kit / ESP32-WROOM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code changes to support adding multiple boards&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add support to TTGO T-display 1.14&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add support to Amoled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In process&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a daisy chain protocol via UART or I2C to support ESP32 hashboards&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create new screen like clockMiner but with BTC price&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support to control BM1397&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add password field in web configuration form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Donations/Project contributions&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to contribute and help dev team with this project you can send a donation to the following LN address ‚ö°&lt;a href=&#34;mailto:teamnerdminer@getalby.com&#34;&gt;teamnerdminer@getalby.com&lt;/a&gt;‚ö° or using one of the affiliate links above.&lt;/p&gt; &#xA;&lt;p&gt;If you want to order a fully assembled Nerdminer you can contribute to my job at üõí&lt;a href=&#34;https://bitronics.store&#34;&gt;bitronics.store&lt;/a&gt;üõí&lt;/p&gt; &#xA;&lt;p&gt;Enjoy&lt;/p&gt;</summary>
  </entry>
</feed>